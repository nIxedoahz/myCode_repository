
// Generated from /home/jona/myGit/myCode_repository/antlr4_cpp/gauss200/Gauss200Parser.g4 by ANTLR 4.7.1


#include "Gauss200ParserListener.h"
#include "Gauss200ParserVisitor.h"

#include "Gauss200Parser.h"


using namespace antlrcpp;
using namespace antlr4;

Gauss200Parser::Gauss200Parser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

Gauss200Parser::~Gauss200Parser() {
  delete _interpreter;
}

std::string Gauss200Parser::getGrammarFileName() const {
  return "Gauss200Parser.g4";
}

const std::vector<std::string>& Gauss200Parser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& Gauss200Parser::getVocabulary() const {
  return _vocabulary;
}


//----------------- StmtblockContext ------------------------------------------------------------------

Gauss200Parser::StmtblockContext::StmtblockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::StmtmultiContext* Gauss200Parser::StmtblockContext::stmtmulti() {
  return getRuleContext<Gauss200Parser::StmtmultiContext>(0);
}

tree::TerminalNode* Gauss200Parser::StmtblockContext::EOF() {
  return getToken(Gauss200Parser::EOF, 0);
}

tree::TerminalNode* Gauss200Parser::StmtblockContext::SEMICOLON() {
  return getToken(Gauss200Parser::SEMICOLON, 0);
}


size_t Gauss200Parser::StmtblockContext::getRuleIndex() const {
  return Gauss200Parser::RuleStmtblock;
}

void Gauss200Parser::StmtblockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmtblock(this);
}

void Gauss200Parser::StmtblockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmtblock(this);
}


antlrcpp::Any Gauss200Parser::StmtblockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitStmtblock(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::StmtblockContext* Gauss200Parser::stmtblock() {
  StmtblockContext *_localctx = _tracker.createInstance<StmtblockContext>(_ctx, getState());
  enterRule(_localctx, 0, Gauss200Parser::RuleStmtblock);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1078);
    stmtmulti();
    setState(1080);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::SEMICOLON) {
      setState(1079);
      match(Gauss200Parser::SEMICOLON);
    }
    setState(1082);
    match(Gauss200Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtmultiContext ------------------------------------------------------------------

Gauss200Parser::StmtmultiContext::StmtmultiContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Sql_stmtContext *> Gauss200Parser::StmtmultiContext::sql_stmt() {
  return getRuleContexts<Gauss200Parser::Sql_stmtContext>();
}

Gauss200Parser::Sql_stmtContext* Gauss200Parser::StmtmultiContext::sql_stmt(size_t i) {
  return getRuleContext<Gauss200Parser::Sql_stmtContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::StmtmultiContext::SEMICOLON() {
  return getTokens(Gauss200Parser::SEMICOLON);
}

tree::TerminalNode* Gauss200Parser::StmtmultiContext::SEMICOLON(size_t i) {
  return getToken(Gauss200Parser::SEMICOLON, i);
}


size_t Gauss200Parser::StmtmultiContext::getRuleIndex() const {
  return Gauss200Parser::RuleStmtmulti;
}

void Gauss200Parser::StmtmultiContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmtmulti(this);
}

void Gauss200Parser::StmtmultiContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmtmulti(this);
}


antlrcpp::Any Gauss200Parser::StmtmultiContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitStmtmulti(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::StmtmultiContext* Gauss200Parser::stmtmulti() {
  StmtmultiContext *_localctx = _tracker.createInstance<StmtmultiContext>(_ctx, getState());
  enterRule(_localctx, 2, Gauss200Parser::RuleStmtmulti);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1084);
    sql_stmt();
    setState(1089);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1085);
        match(Gauss200Parser::SEMICOLON);
        setState(1086);
        sql_stmt(); 
      }
      setState(1091);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sql_stmtContext ------------------------------------------------------------------

Gauss200Parser::Sql_stmtContext::Sql_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::StmtContext* Gauss200Parser::Sql_stmtContext::stmt() {
  return getRuleContext<Gauss200Parser::StmtContext>(0);
}

Gauss200Parser::Other_stmtContext* Gauss200Parser::Sql_stmtContext::other_stmt() {
  return getRuleContext<Gauss200Parser::Other_stmtContext>(0);
}


size_t Gauss200Parser::Sql_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleSql_stmt;
}

void Gauss200Parser::Sql_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSql_stmt(this);
}

void Gauss200Parser::Sql_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSql_stmt(this);
}


antlrcpp::Any Gauss200Parser::Sql_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSql_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Sql_stmtContext* Gauss200Parser::sql_stmt() {
  Sql_stmtContext *_localctx = _tracker.createInstance<Sql_stmtContext>(_ctx, getState());
  enterRule(_localctx, 4, Gauss200Parser::RuleSql_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1094);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1092);
      stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1093);
      other_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

Gauss200Parser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Abort_stmtContext* Gauss200Parser::StmtContext::abort_stmt() {
  return getRuleContext<Gauss200Parser::Abort_stmtContext>(0);
}

Gauss200Parser::Alter_group_mapping_stmtContext* Gauss200Parser::StmtContext::alter_group_mapping_stmt() {
  return getRuleContext<Gauss200Parser::Alter_group_mapping_stmtContext>(0);
}

Gauss200Parser::Alter_database_stmtContext* Gauss200Parser::StmtContext::alter_database_stmt() {
  return getRuleContext<Gauss200Parser::Alter_database_stmtContext>(0);
}

Gauss200Parser::Alter_data_source_stmtContext* Gauss200Parser::StmtContext::alter_data_source_stmt() {
  return getRuleContext<Gauss200Parser::Alter_data_source_stmtContext>(0);
}

Gauss200Parser::Alter_default_privilege_stmtContext* Gauss200Parser::StmtContext::alter_default_privilege_stmt() {
  return getRuleContext<Gauss200Parser::Alter_default_privilege_stmtContext>(0);
}

Gauss200Parser::Alter_directory_stmtContext* Gauss200Parser::StmtContext::alter_directory_stmt() {
  return getRuleContext<Gauss200Parser::Alter_directory_stmtContext>(0);
}

Gauss200Parser::Alter_foreign_table_stmtContext* Gauss200Parser::StmtContext::alter_foreign_table_stmt() {
  return getRuleContext<Gauss200Parser::Alter_foreign_table_stmtContext>(0);
}

Gauss200Parser::Alter_function_stmtContext* Gauss200Parser::StmtContext::alter_function_stmt() {
  return getRuleContext<Gauss200Parser::Alter_function_stmtContext>(0);
}

Gauss200Parser::Alter_group_stmtContext* Gauss200Parser::StmtContext::alter_group_stmt() {
  return getRuleContext<Gauss200Parser::Alter_group_stmtContext>(0);
}

Gauss200Parser::Alter_index_stmtContext* Gauss200Parser::StmtContext::alter_index_stmt() {
  return getRuleContext<Gauss200Parser::Alter_index_stmtContext>(0);
}

Gauss200Parser::Alter_large_obj_stmtContext* Gauss200Parser::StmtContext::alter_large_obj_stmt() {
  return getRuleContext<Gauss200Parser::Alter_large_obj_stmtContext>(0);
}

Gauss200Parser::Alter_node_stmtContext* Gauss200Parser::StmtContext::alter_node_stmt() {
  return getRuleContext<Gauss200Parser::Alter_node_stmtContext>(0);
}

Gauss200Parser::Alter_node_group_stmtContext* Gauss200Parser::StmtContext::alter_node_group_stmt() {
  return getRuleContext<Gauss200Parser::Alter_node_group_stmtContext>(0);
}

Gauss200Parser::Alter_resource_pool_stmtContext* Gauss200Parser::StmtContext::alter_resource_pool_stmt() {
  return getRuleContext<Gauss200Parser::Alter_resource_pool_stmtContext>(0);
}

Gauss200Parser::Alter_role_stmtContext* Gauss200Parser::StmtContext::alter_role_stmt() {
  return getRuleContext<Gauss200Parser::Alter_role_stmtContext>(0);
}

Gauss200Parser::Alter_role_level_security_policy_stmtContext* Gauss200Parser::StmtContext::alter_role_level_security_policy_stmt() {
  return getRuleContext<Gauss200Parser::Alter_role_level_security_policy_stmtContext>(0);
}

Gauss200Parser::Alter_schema_stmtContext* Gauss200Parser::StmtContext::alter_schema_stmt() {
  return getRuleContext<Gauss200Parser::Alter_schema_stmtContext>(0);
}

Gauss200Parser::Alter_sequence_stmtContext* Gauss200Parser::StmtContext::alter_sequence_stmt() {
  return getRuleContext<Gauss200Parser::Alter_sequence_stmtContext>(0);
}

Gauss200Parser::Alter_server_stmtContext* Gauss200Parser::StmtContext::alter_server_stmt() {
  return getRuleContext<Gauss200Parser::Alter_server_stmtContext>(0);
}

Gauss200Parser::Alter_session_stmtContext* Gauss200Parser::StmtContext::alter_session_stmt() {
  return getRuleContext<Gauss200Parser::Alter_session_stmtContext>(0);
}

Gauss200Parser::Alter_sys_kill_session_stmtContext* Gauss200Parser::StmtContext::alter_sys_kill_session_stmt() {
  return getRuleContext<Gauss200Parser::Alter_sys_kill_session_stmtContext>(0);
}

Gauss200Parser::Alter_table_stmtContext* Gauss200Parser::StmtContext::alter_table_stmt() {
  return getRuleContext<Gauss200Parser::Alter_table_stmtContext>(0);
}

Gauss200Parser::Alter_tablespace_stmtContext* Gauss200Parser::StmtContext::alter_tablespace_stmt() {
  return getRuleContext<Gauss200Parser::Alter_tablespace_stmtContext>(0);
}

Gauss200Parser::Alter_txt_search_conf_stmtContext* Gauss200Parser::StmtContext::alter_txt_search_conf_stmt() {
  return getRuleContext<Gauss200Parser::Alter_txt_search_conf_stmtContext>(0);
}

Gauss200Parser::Alter_txt_search_dictionary_stmtContext* Gauss200Parser::StmtContext::alter_txt_search_dictionary_stmt() {
  return getRuleContext<Gauss200Parser::Alter_txt_search_dictionary_stmtContext>(0);
}

Gauss200Parser::Alter_trigger_stmtContext* Gauss200Parser::StmtContext::alter_trigger_stmt() {
  return getRuleContext<Gauss200Parser::Alter_trigger_stmtContext>(0);
}

Gauss200Parser::Alter_type_stmtContext* Gauss200Parser::StmtContext::alter_type_stmt() {
  return getRuleContext<Gauss200Parser::Alter_type_stmtContext>(0);
}

Gauss200Parser::Alter_user_stmtContext* Gauss200Parser::StmtContext::alter_user_stmt() {
  return getRuleContext<Gauss200Parser::Alter_user_stmtContext>(0);
}

Gauss200Parser::Alter_view_stmtContext* Gauss200Parser::StmtContext::alter_view_stmt() {
  return getRuleContext<Gauss200Parser::Alter_view_stmtContext>(0);
}

Gauss200Parser::Workload_group_stmtContext* Gauss200Parser::StmtContext::workload_group_stmt() {
  return getRuleContext<Gauss200Parser::Workload_group_stmtContext>(0);
}

Gauss200Parser::Create_group_mapping_stmtContext* Gauss200Parser::StmtContext::create_group_mapping_stmt() {
  return getRuleContext<Gauss200Parser::Create_group_mapping_stmtContext>(0);
}

Gauss200Parser::Create_barrier_stmtContext* Gauss200Parser::StmtContext::create_barrier_stmt() {
  return getRuleContext<Gauss200Parser::Create_barrier_stmtContext>(0);
}

Gauss200Parser::Create_database_stmtContext* Gauss200Parser::StmtContext::create_database_stmt() {
  return getRuleContext<Gauss200Parser::Create_database_stmtContext>(0);
}

Gauss200Parser::Create_data_source_stmtContext* Gauss200Parser::StmtContext::create_data_source_stmt() {
  return getRuleContext<Gauss200Parser::Create_data_source_stmtContext>(0);
}

Gauss200Parser::Create_directory_stmtContext* Gauss200Parser::StmtContext::create_directory_stmt() {
  return getRuleContext<Gauss200Parser::Create_directory_stmtContext>(0);
}

Gauss200Parser::Create_foreign_table_stmtContext* Gauss200Parser::StmtContext::create_foreign_table_stmt() {
  return getRuleContext<Gauss200Parser::Create_foreign_table_stmtContext>(0);
}

Gauss200Parser::Create_function_procedure_stmtContext* Gauss200Parser::StmtContext::create_function_procedure_stmt() {
  return getRuleContext<Gauss200Parser::Create_function_procedure_stmtContext>(0);
}

Gauss200Parser::Create_group_stmtContext* Gauss200Parser::StmtContext::create_group_stmt() {
  return getRuleContext<Gauss200Parser::Create_group_stmtContext>(0);
}

Gauss200Parser::Create_index_stmtContext* Gauss200Parser::StmtContext::create_index_stmt() {
  return getRuleContext<Gauss200Parser::Create_index_stmtContext>(0);
}

Gauss200Parser::Create_node_stmtContext* Gauss200Parser::StmtContext::create_node_stmt() {
  return getRuleContext<Gauss200Parser::Create_node_stmtContext>(0);
}

Gauss200Parser::Create_node_group_stmtContext* Gauss200Parser::StmtContext::create_node_group_stmt() {
  return getRuleContext<Gauss200Parser::Create_node_group_stmtContext>(0);
}

Gauss200Parser::Create_row_level_security_policy_stmtContext* Gauss200Parser::StmtContext::create_row_level_security_policy_stmt() {
  return getRuleContext<Gauss200Parser::Create_row_level_security_policy_stmtContext>(0);
}

Gauss200Parser::Create_resource_pool_stmtContext* Gauss200Parser::StmtContext::create_resource_pool_stmt() {
  return getRuleContext<Gauss200Parser::Create_resource_pool_stmtContext>(0);
}

Gauss200Parser::Create_role_stmtContext* Gauss200Parser::StmtContext::create_role_stmt() {
  return getRuleContext<Gauss200Parser::Create_role_stmtContext>(0);
}

Gauss200Parser::Create_schema_stmtContext* Gauss200Parser::StmtContext::create_schema_stmt() {
  return getRuleContext<Gauss200Parser::Create_schema_stmtContext>(0);
}

Gauss200Parser::Create_sequence_stmtContext* Gauss200Parser::StmtContext::create_sequence_stmt() {
  return getRuleContext<Gauss200Parser::Create_sequence_stmtContext>(0);
}

Gauss200Parser::Create_server_stmtContext* Gauss200Parser::StmtContext::create_server_stmt() {
  return getRuleContext<Gauss200Parser::Create_server_stmtContext>(0);
}

Gauss200Parser::Create_table_stmtContext* Gauss200Parser::StmtContext::create_table_stmt() {
  return getRuleContext<Gauss200Parser::Create_table_stmtContext>(0);
}

Gauss200Parser::Create_tablespace_stmtContext* Gauss200Parser::StmtContext::create_tablespace_stmt() {
  return getRuleContext<Gauss200Parser::Create_tablespace_stmtContext>(0);
}

Gauss200Parser::Create_txt_search_stmtContext* Gauss200Parser::StmtContext::create_txt_search_stmt() {
  return getRuleContext<Gauss200Parser::Create_txt_search_stmtContext>(0);
}

Gauss200Parser::Create_trigger_stmtContext* Gauss200Parser::StmtContext::create_trigger_stmt() {
  return getRuleContext<Gauss200Parser::Create_trigger_stmtContext>(0);
}

Gauss200Parser::Create_type_stmtContext* Gauss200Parser::StmtContext::create_type_stmt() {
  return getRuleContext<Gauss200Parser::Create_type_stmtContext>(0);
}

Gauss200Parser::Create_user_stmtContext* Gauss200Parser::StmtContext::create_user_stmt() {
  return getRuleContext<Gauss200Parser::Create_user_stmtContext>(0);
}

Gauss200Parser::Create_view_stmtContext* Gauss200Parser::StmtContext::create_view_stmt() {
  return getRuleContext<Gauss200Parser::Create_view_stmtContext>(0);
}

Gauss200Parser::Data_manipulate_stmtContext* Gauss200Parser::StmtContext::data_manipulate_stmt() {
  return getRuleContext<Gauss200Parser::Data_manipulate_stmtContext>(0);
}

Gauss200Parser::Drop_database_stmtContext* Gauss200Parser::StmtContext::drop_database_stmt() {
  return getRuleContext<Gauss200Parser::Drop_database_stmtContext>(0);
}

Gauss200Parser::Drop_group_mapping_stmtContext* Gauss200Parser::StmtContext::drop_group_mapping_stmt() {
  return getRuleContext<Gauss200Parser::Drop_group_mapping_stmtContext>(0);
}

Gauss200Parser::Drop_data_source_stmtContext* Gauss200Parser::StmtContext::drop_data_source_stmt() {
  return getRuleContext<Gauss200Parser::Drop_data_source_stmtContext>(0);
}

Gauss200Parser::Drop_directory_stmtContext* Gauss200Parser::StmtContext::drop_directory_stmt() {
  return getRuleContext<Gauss200Parser::Drop_directory_stmtContext>(0);
}

Gauss200Parser::Drop_foreign_table_stmtContext* Gauss200Parser::StmtContext::drop_foreign_table_stmt() {
  return getRuleContext<Gauss200Parser::Drop_foreign_table_stmtContext>(0);
}

Gauss200Parser::Drop_function_stmtContext* Gauss200Parser::StmtContext::drop_function_stmt() {
  return getRuleContext<Gauss200Parser::Drop_function_stmtContext>(0);
}

Gauss200Parser::Drop_group_stmtContext* Gauss200Parser::StmtContext::drop_group_stmt() {
  return getRuleContext<Gauss200Parser::Drop_group_stmtContext>(0);
}

Gauss200Parser::Drop_index_stmtContext* Gauss200Parser::StmtContext::drop_index_stmt() {
  return getRuleContext<Gauss200Parser::Drop_index_stmtContext>(0);
}

Gauss200Parser::Drop_node_stmtContext* Gauss200Parser::StmtContext::drop_node_stmt() {
  return getRuleContext<Gauss200Parser::Drop_node_stmtContext>(0);
}

Gauss200Parser::Drop_node_group_stmtContext* Gauss200Parser::StmtContext::drop_node_group_stmt() {
  return getRuleContext<Gauss200Parser::Drop_node_group_stmtContext>(0);
}

Gauss200Parser::Drop_owned_stmtContext* Gauss200Parser::StmtContext::drop_owned_stmt() {
  return getRuleContext<Gauss200Parser::Drop_owned_stmtContext>(0);
}

Gauss200Parser::Drop_row_level_security_policy_stmtContext* Gauss200Parser::StmtContext::drop_row_level_security_policy_stmt() {
  return getRuleContext<Gauss200Parser::Drop_row_level_security_policy_stmtContext>(0);
}

Gauss200Parser::Drop_procedure_stmtContext* Gauss200Parser::StmtContext::drop_procedure_stmt() {
  return getRuleContext<Gauss200Parser::Drop_procedure_stmtContext>(0);
}

Gauss200Parser::Drop_resource_pool_stmtContext* Gauss200Parser::StmtContext::drop_resource_pool_stmt() {
  return getRuleContext<Gauss200Parser::Drop_resource_pool_stmtContext>(0);
}

Gauss200Parser::Drop_role_stmtContext* Gauss200Parser::StmtContext::drop_role_stmt() {
  return getRuleContext<Gauss200Parser::Drop_role_stmtContext>(0);
}

Gauss200Parser::Drop_schema_stmtContext* Gauss200Parser::StmtContext::drop_schema_stmt() {
  return getRuleContext<Gauss200Parser::Drop_schema_stmtContext>(0);
}

Gauss200Parser::Drop_sequence_stmtContext* Gauss200Parser::StmtContext::drop_sequence_stmt() {
  return getRuleContext<Gauss200Parser::Drop_sequence_stmtContext>(0);
}

Gauss200Parser::Drop_server_stmtContext* Gauss200Parser::StmtContext::drop_server_stmt() {
  return getRuleContext<Gauss200Parser::Drop_server_stmtContext>(0);
}

Gauss200Parser::Drop_table_stmtContext* Gauss200Parser::StmtContext::drop_table_stmt() {
  return getRuleContext<Gauss200Parser::Drop_table_stmtContext>(0);
}

Gauss200Parser::Drop_tablespace_stmtContext* Gauss200Parser::StmtContext::drop_tablespace_stmt() {
  return getRuleContext<Gauss200Parser::Drop_tablespace_stmtContext>(0);
}

Gauss200Parser::Drop_txt_search_stmtContext* Gauss200Parser::StmtContext::drop_txt_search_stmt() {
  return getRuleContext<Gauss200Parser::Drop_txt_search_stmtContext>(0);
}

Gauss200Parser::Drop_trigger_stmtContext* Gauss200Parser::StmtContext::drop_trigger_stmt() {
  return getRuleContext<Gauss200Parser::Drop_trigger_stmtContext>(0);
}

Gauss200Parser::Drop_type_stmtContext* Gauss200Parser::StmtContext::drop_type_stmt() {
  return getRuleContext<Gauss200Parser::Drop_type_stmtContext>(0);
}

Gauss200Parser::Drop_user_stmtContext* Gauss200Parser::StmtContext::drop_user_stmt() {
  return getRuleContext<Gauss200Parser::Drop_user_stmtContext>(0);
}

Gauss200Parser::Drop_view_stmtContext* Gauss200Parser::StmtContext::drop_view_stmt() {
  return getRuleContext<Gauss200Parser::Drop_view_stmtContext>(0);
}

Gauss200Parser::Drop_workload_group_stmtContext* Gauss200Parser::StmtContext::drop_workload_group_stmt() {
  return getRuleContext<Gauss200Parser::Drop_workload_group_stmtContext>(0);
}

Gauss200Parser::Analyze_stmtContext* Gauss200Parser::StmtContext::analyze_stmt() {
  return getRuleContext<Gauss200Parser::Analyze_stmtContext>(0);
}

Gauss200Parser::Call_stmtContext* Gauss200Parser::StmtContext::call_stmt() {
  return getRuleContext<Gauss200Parser::Call_stmtContext>(0);
}

Gauss200Parser::Checkpoint_stmtContext* Gauss200Parser::StmtContext::checkpoint_stmt() {
  return getRuleContext<Gauss200Parser::Checkpoint_stmtContext>(0);
}

Gauss200Parser::Clean_connection_stmtContext* Gauss200Parser::StmtContext::clean_connection_stmt() {
  return getRuleContext<Gauss200Parser::Clean_connection_stmtContext>(0);
}

Gauss200Parser::Close_stmtContext* Gauss200Parser::StmtContext::close_stmt() {
  return getRuleContext<Gauss200Parser::Close_stmtContext>(0);
}

Gauss200Parser::Cluster_stmtContext* Gauss200Parser::StmtContext::cluster_stmt() {
  return getRuleContext<Gauss200Parser::Cluster_stmtContext>(0);
}

Gauss200Parser::Comment_stmtContext* Gauss200Parser::StmtContext::comment_stmt() {
  return getRuleContext<Gauss200Parser::Comment_stmtContext>(0);
}

Gauss200Parser::Copy_stmtContext* Gauss200Parser::StmtContext::copy_stmt() {
  return getRuleContext<Gauss200Parser::Copy_stmtContext>(0);
}

Gauss200Parser::Cursor_stmtContext* Gauss200Parser::StmtContext::cursor_stmt() {
  return getRuleContext<Gauss200Parser::Cursor_stmtContext>(0);
}

Gauss200Parser::Deallocate_stmtContext* Gauss200Parser::StmtContext::deallocate_stmt() {
  return getRuleContext<Gauss200Parser::Deallocate_stmtContext>(0);
}

Gauss200Parser::Do_stmtContext* Gauss200Parser::StmtContext::do_stmt() {
  return getRuleContext<Gauss200Parser::Do_stmtContext>(0);
}

Gauss200Parser::Execute_stmtContext* Gauss200Parser::StmtContext::execute_stmt() {
  return getRuleContext<Gauss200Parser::Execute_stmtContext>(0);
}

Gauss200Parser::Execute_direct_stmtContext* Gauss200Parser::StmtContext::execute_direct_stmt() {
  return getRuleContext<Gauss200Parser::Execute_direct_stmtContext>(0);
}

Gauss200Parser::Fetch_move_stmtContext* Gauss200Parser::StmtContext::fetch_move_stmt() {
  return getRuleContext<Gauss200Parser::Fetch_move_stmtContext>(0);
}

Gauss200Parser::Grant_stmtContext* Gauss200Parser::StmtContext::grant_stmt() {
  return getRuleContext<Gauss200Parser::Grant_stmtContext>(0);
}

Gauss200Parser::Lock_stmtContext* Gauss200Parser::StmtContext::lock_stmt() {
  return getRuleContext<Gauss200Parser::Lock_stmtContext>(0);
}

Gauss200Parser::Merge_into_stmtContext* Gauss200Parser::StmtContext::merge_into_stmt() {
  return getRuleContext<Gauss200Parser::Merge_into_stmtContext>(0);
}

Gauss200Parser::Prepare_stmtContext* Gauss200Parser::StmtContext::prepare_stmt() {
  return getRuleContext<Gauss200Parser::Prepare_stmtContext>(0);
}

Gauss200Parser::Prepare_transaction_stmtContext* Gauss200Parser::StmtContext::prepare_transaction_stmt() {
  return getRuleContext<Gauss200Parser::Prepare_transaction_stmtContext>(0);
}

Gauss200Parser::Reassign_owned_stmtContext* Gauss200Parser::StmtContext::reassign_owned_stmt() {
  return getRuleContext<Gauss200Parser::Reassign_owned_stmtContext>(0);
}

Gauss200Parser::Reindex_stmtContext* Gauss200Parser::StmtContext::reindex_stmt() {
  return getRuleContext<Gauss200Parser::Reindex_stmtContext>(0);
}

Gauss200Parser::Release_savepoint_stmtContext* Gauss200Parser::StmtContext::release_savepoint_stmt() {
  return getRuleContext<Gauss200Parser::Release_savepoint_stmtContext>(0);
}

Gauss200Parser::Reset_stmtContext* Gauss200Parser::StmtContext::reset_stmt() {
  return getRuleContext<Gauss200Parser::Reset_stmtContext>(0);
}

Gauss200Parser::Revoke_stmtContext* Gauss200Parser::StmtContext::revoke_stmt() {
  return getRuleContext<Gauss200Parser::Revoke_stmtContext>(0);
}

Gauss200Parser::Rollback_stmtContext* Gauss200Parser::StmtContext::rollback_stmt() {
  return getRuleContext<Gauss200Parser::Rollback_stmtContext>(0);
}

Gauss200Parser::Savepoint_stmtContext* Gauss200Parser::StmtContext::savepoint_stmt() {
  return getRuleContext<Gauss200Parser::Savepoint_stmtContext>(0);
}

Gauss200Parser::Set_reset_stmtContext* Gauss200Parser::StmtContext::set_reset_stmt() {
  return getRuleContext<Gauss200Parser::Set_reset_stmtContext>(0);
}

Gauss200Parser::Start_transaction_stmtContext* Gauss200Parser::StmtContext::start_transaction_stmt() {
  return getRuleContext<Gauss200Parser::Start_transaction_stmtContext>(0);
}

Gauss200Parser::Truncate_stmtContext* Gauss200Parser::StmtContext::truncate_stmt() {
  return getRuleContext<Gauss200Parser::Truncate_stmtContext>(0);
}

Gauss200Parser::Update_stmtContext* Gauss200Parser::StmtContext::update_stmt() {
  return getRuleContext<Gauss200Parser::Update_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::StmtContext::SEMICOLON() {
  return getToken(Gauss200Parser::SEMICOLON, 0);
}


size_t Gauss200Parser::StmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleStmt;
}

void Gauss200Parser::StmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt(this);
}

void Gauss200Parser::StmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt(this);
}


antlrcpp::Any Gauss200Parser::StmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitStmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::StmtContext* Gauss200Parser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 6, Gauss200Parser::RuleStmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1208);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1096);
      abort_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1097);
      alter_group_mapping_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1098);
      alter_database_stmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1099);
      alter_data_source_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1100);
      alter_default_privilege_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1101);
      alter_directory_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1102);
      alter_foreign_table_stmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1103);
      alter_function_stmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1104);
      alter_group_stmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1105);
      alter_index_stmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1106);
      alter_large_obj_stmt();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1107);
      alter_node_stmt();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1108);
      alter_node_group_stmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1109);
      alter_resource_pool_stmt();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1110);
      alter_role_stmt();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1111);
      alter_role_level_security_policy_stmt();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1112);
      alter_schema_stmt();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1113);
      alter_sequence_stmt();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1114);
      alter_server_stmt();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1115);
      alter_session_stmt();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1116);
      alter_sys_kill_session_stmt();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(1117);
      alter_table_stmt();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(1118);
      alter_tablespace_stmt();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(1119);
      alter_txt_search_conf_stmt();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(1120);
      alter_txt_search_dictionary_stmt();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(1121);
      alter_trigger_stmt();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(1122);
      alter_type_stmt();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(1123);
      alter_user_stmt();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(1124);
      alter_view_stmt();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(1125);
      workload_group_stmt();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(1126);
      create_group_mapping_stmt();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(1127);
      create_barrier_stmt();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(1128);
      create_database_stmt();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(1129);
      create_data_source_stmt();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(1130);
      create_directory_stmt();
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(1131);
      create_foreign_table_stmt();
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(1132);
      create_function_procedure_stmt();
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(1133);
      create_group_stmt();
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(1134);
      create_index_stmt();
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(1135);
      create_node_stmt();
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(1136);
      create_node_group_stmt();
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(1137);
      create_row_level_security_policy_stmt();
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(1138);
      create_resource_pool_stmt();
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(1139);
      create_role_stmt();
      break;
    }

    case 45: {
      enterOuterAlt(_localctx, 45);
      setState(1140);
      create_schema_stmt();
      break;
    }

    case 46: {
      enterOuterAlt(_localctx, 46);
      setState(1141);
      create_sequence_stmt();
      break;
    }

    case 47: {
      enterOuterAlt(_localctx, 47);
      setState(1142);
      create_server_stmt();
      break;
    }

    case 48: {
      enterOuterAlt(_localctx, 48);
      setState(1143);
      create_table_stmt();
      break;
    }

    case 49: {
      enterOuterAlt(_localctx, 49);
      setState(1144);
      create_tablespace_stmt();
      break;
    }

    case 50: {
      enterOuterAlt(_localctx, 50);
      setState(1145);
      create_txt_search_stmt();
      break;
    }

    case 51: {
      enterOuterAlt(_localctx, 51);
      setState(1146);
      create_trigger_stmt();
      break;
    }

    case 52: {
      enterOuterAlt(_localctx, 52);
      setState(1147);
      create_type_stmt();
      break;
    }

    case 53: {
      enterOuterAlt(_localctx, 53);
      setState(1148);
      create_user_stmt();
      break;
    }

    case 54: {
      enterOuterAlt(_localctx, 54);
      setState(1149);
      create_view_stmt();
      break;
    }

    case 55: {
      enterOuterAlt(_localctx, 55);
      setState(1150);
      data_manipulate_stmt();
      break;
    }

    case 56: {
      enterOuterAlt(_localctx, 56);
      setState(1151);
      drop_database_stmt();
      break;
    }

    case 57: {
      enterOuterAlt(_localctx, 57);
      setState(1152);
      drop_group_mapping_stmt();
      break;
    }

    case 58: {
      enterOuterAlt(_localctx, 58);
      setState(1153);
      drop_data_source_stmt();
      break;
    }

    case 59: {
      enterOuterAlt(_localctx, 59);
      setState(1154);
      drop_directory_stmt();
      break;
    }

    case 60: {
      enterOuterAlt(_localctx, 60);
      setState(1155);
      drop_foreign_table_stmt();
      break;
    }

    case 61: {
      enterOuterAlt(_localctx, 61);
      setState(1156);
      drop_function_stmt();
      break;
    }

    case 62: {
      enterOuterAlt(_localctx, 62);
      setState(1157);
      drop_group_stmt();
      break;
    }

    case 63: {
      enterOuterAlt(_localctx, 63);
      setState(1158);
      drop_index_stmt();
      break;
    }

    case 64: {
      enterOuterAlt(_localctx, 64);
      setState(1159);
      drop_node_stmt();
      break;
    }

    case 65: {
      enterOuterAlt(_localctx, 65);
      setState(1160);
      drop_node_group_stmt();
      break;
    }

    case 66: {
      enterOuterAlt(_localctx, 66);
      setState(1161);
      drop_owned_stmt();
      break;
    }

    case 67: {
      enterOuterAlt(_localctx, 67);
      setState(1162);
      drop_row_level_security_policy_stmt();
      break;
    }

    case 68: {
      enterOuterAlt(_localctx, 68);
      setState(1163);
      drop_procedure_stmt();
      break;
    }

    case 69: {
      enterOuterAlt(_localctx, 69);
      setState(1164);
      drop_resource_pool_stmt();
      break;
    }

    case 70: {
      enterOuterAlt(_localctx, 70);
      setState(1165);
      drop_role_stmt();
      break;
    }

    case 71: {
      enterOuterAlt(_localctx, 71);
      setState(1166);
      drop_schema_stmt();
      break;
    }

    case 72: {
      enterOuterAlt(_localctx, 72);
      setState(1167);
      drop_sequence_stmt();
      break;
    }

    case 73: {
      enterOuterAlt(_localctx, 73);
      setState(1168);
      drop_server_stmt();
      break;
    }

    case 74: {
      enterOuterAlt(_localctx, 74);
      setState(1169);
      drop_table_stmt();
      break;
    }

    case 75: {
      enterOuterAlt(_localctx, 75);
      setState(1170);
      drop_tablespace_stmt();
      break;
    }

    case 76: {
      enterOuterAlt(_localctx, 76);
      setState(1171);
      drop_txt_search_stmt();
      break;
    }

    case 77: {
      enterOuterAlt(_localctx, 77);
      setState(1172);
      drop_trigger_stmt();
      break;
    }

    case 78: {
      enterOuterAlt(_localctx, 78);
      setState(1173);
      drop_type_stmt();
      break;
    }

    case 79: {
      enterOuterAlt(_localctx, 79);
      setState(1174);
      drop_user_stmt();
      break;
    }

    case 80: {
      enterOuterAlt(_localctx, 80);
      setState(1175);
      drop_view_stmt();
      break;
    }

    case 81: {
      enterOuterAlt(_localctx, 81);
      setState(1176);
      drop_workload_group_stmt();
      break;
    }

    case 82: {
      enterOuterAlt(_localctx, 82);
      setState(1177);
      analyze_stmt();
      break;
    }

    case 83: {
      enterOuterAlt(_localctx, 83);
      setState(1178);
      call_stmt();
      break;
    }

    case 84: {
      enterOuterAlt(_localctx, 84);
      setState(1179);
      checkpoint_stmt();
      break;
    }

    case 85: {
      enterOuterAlt(_localctx, 85);
      setState(1180);
      clean_connection_stmt();
      break;
    }

    case 86: {
      enterOuterAlt(_localctx, 86);
      setState(1181);
      close_stmt();
      break;
    }

    case 87: {
      enterOuterAlt(_localctx, 87);
      setState(1182);
      cluster_stmt();
      break;
    }

    case 88: {
      enterOuterAlt(_localctx, 88);
      setState(1183);
      comment_stmt();
      break;
    }

    case 89: {
      enterOuterAlt(_localctx, 89);
      setState(1184);
      copy_stmt();
      break;
    }

    case 90: {
      enterOuterAlt(_localctx, 90);
      setState(1185);
      cursor_stmt();
      break;
    }

    case 91: {
      enterOuterAlt(_localctx, 91);
      setState(1186);
      deallocate_stmt();
      break;
    }

    case 92: {
      enterOuterAlt(_localctx, 92);
      setState(1187);
      do_stmt();
      break;
    }

    case 93: {
      enterOuterAlt(_localctx, 93);
      setState(1188);
      execute_stmt();
      break;
    }

    case 94: {
      enterOuterAlt(_localctx, 94);
      setState(1189);
      execute_direct_stmt();
      break;
    }

    case 95: {
      enterOuterAlt(_localctx, 95);
      setState(1190);
      fetch_move_stmt();
      break;
    }

    case 96: {
      enterOuterAlt(_localctx, 96);
      setState(1191);
      grant_stmt();
      break;
    }

    case 97: {
      enterOuterAlt(_localctx, 97);
      setState(1192);
      lock_stmt();
      break;
    }

    case 98: {
      enterOuterAlt(_localctx, 98);
      setState(1193);
      merge_into_stmt();
      break;
    }

    case 99: {
      enterOuterAlt(_localctx, 99);
      setState(1194);
      prepare_stmt();
      break;
    }

    case 100: {
      enterOuterAlt(_localctx, 100);
      setState(1195);
      prepare_transaction_stmt();
      break;
    }

    case 101: {
      enterOuterAlt(_localctx, 101);
      setState(1196);
      reassign_owned_stmt();
      break;
    }

    case 102: {
      enterOuterAlt(_localctx, 102);
      setState(1197);
      reindex_stmt();
      break;
    }

    case 103: {
      enterOuterAlt(_localctx, 103);
      setState(1198);
      release_savepoint_stmt();
      break;
    }

    case 104: {
      enterOuterAlt(_localctx, 104);
      setState(1199);
      reset_stmt();
      break;
    }

    case 105: {
      enterOuterAlt(_localctx, 105);
      setState(1200);
      revoke_stmt();
      break;
    }

    case 106: {
      enterOuterAlt(_localctx, 106);
      setState(1201);
      rollback_stmt();
      break;
    }

    case 107: {
      enterOuterAlt(_localctx, 107);
      setState(1202);
      savepoint_stmt();
      break;
    }

    case 108: {
      enterOuterAlt(_localctx, 108);
      setState(1203);
      set_reset_stmt();
      break;
    }

    case 109: {
      enterOuterAlt(_localctx, 109);
      setState(1204);
      start_transaction_stmt();
      break;
    }

    case 110: {
      enterOuterAlt(_localctx, 110);
      setState(1205);
      truncate_stmt();
      break;
    }

    case 111: {
      enterOuterAlt(_localctx, 111);
      setState(1206);
      update_stmt();
      break;
    }

    case 112: {
      enterOuterAlt(_localctx, 112);
      setState(1207);
      match(Gauss200Parser::SEMICOLON);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Other_stmtContext ------------------------------------------------------------------

Gauss200Parser::Other_stmtContext::Other_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Vacuum_stmtContext* Gauss200Parser::Other_stmtContext::vacuum_stmt() {
  return getRuleContext<Gauss200Parser::Vacuum_stmtContext>(0);
}

Gauss200Parser::Values_stmtContext* Gauss200Parser::Other_stmtContext::values_stmt() {
  return getRuleContext<Gauss200Parser::Values_stmtContext>(0);
}

Gauss200Parser::Show_stmtContext* Gauss200Parser::Other_stmtContext::show_stmt() {
  return getRuleContext<Gauss200Parser::Show_stmtContext>(0);
}

Gauss200Parser::Explain_stmtContext* Gauss200Parser::Other_stmtContext::explain_stmt() {
  return getRuleContext<Gauss200Parser::Explain_stmtContext>(0);
}

Gauss200Parser::Explain_plan_stmtContext* Gauss200Parser::Other_stmtContext::explain_plan_stmt() {
  return getRuleContext<Gauss200Parser::Explain_plan_stmtContext>(0);
}

Gauss200Parser::Commit_end_stmtContext* Gauss200Parser::Other_stmtContext::commit_end_stmt() {
  return getRuleContext<Gauss200Parser::Commit_end_stmtContext>(0);
}

Gauss200Parser::Commit_prepared_stmtContext* Gauss200Parser::Other_stmtContext::commit_prepared_stmt() {
  return getRuleContext<Gauss200Parser::Commit_prepared_stmtContext>(0);
}

Gauss200Parser::Begin_stmtContext* Gauss200Parser::Other_stmtContext::begin_stmt() {
  return getRuleContext<Gauss200Parser::Begin_stmtContext>(0);
}


size_t Gauss200Parser::Other_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleOther_stmt;
}

void Gauss200Parser::Other_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOther_stmt(this);
}

void Gauss200Parser::Other_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOther_stmt(this);
}


antlrcpp::Any Gauss200Parser::Other_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOther_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Other_stmtContext* Gauss200Parser::other_stmt() {
  Other_stmtContext *_localctx = _tracker.createInstance<Other_stmtContext>(_ctx, getState());
  enterRule(_localctx, 8, Gauss200Parser::RuleOther_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1218);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1210);
      vacuum_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1211);
      values_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1212);
      show_stmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1213);
      explain_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1214);
      explain_plan_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1215);
      commit_end_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1216);
      commit_prepared_stmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1217);
      begin_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Begin_stmtContext ------------------------------------------------------------------

Gauss200Parser::Begin_stmtContext::Begin_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Begin_stmtContext::BEGIN_GS() {
  return getToken(Gauss200Parser::BEGIN_GS, 0);
}

Gauss200Parser::Execute_stmtsContext* Gauss200Parser::Begin_stmtContext::execute_stmts() {
  return getRuleContext<Gauss200Parser::Execute_stmtsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Begin_stmtContext::END_GS() {
  return getToken(Gauss200Parser::END_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Begin_stmtContext::DECLARE_GS() {
  return getToken(Gauss200Parser::DECLARE_GS, 0);
}

Gauss200Parser::Variable_declarationsContext* Gauss200Parser::Begin_stmtContext::variable_declarations() {
  return getRuleContext<Gauss200Parser::Variable_declarationsContext>(0);
}


size_t Gauss200Parser::Begin_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleBegin_stmt;
}

void Gauss200Parser::Begin_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBegin_stmt(this);
}

void Gauss200Parser::Begin_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBegin_stmt(this);
}


antlrcpp::Any Gauss200Parser::Begin_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitBegin_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Begin_stmtContext* Gauss200Parser::begin_stmt() {
  Begin_stmtContext *_localctx = _tracker.createInstance<Begin_stmtContext>(_ctx, getState());
  enterRule(_localctx, 10, Gauss200Parser::RuleBegin_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DECLARE_GS) {
      setState(1220);
      match(Gauss200Parser::DECLARE_GS);
      setState(1222);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
      case 1: {
        setState(1221);
        variable_declarations();
        break;
      }

      }
    }
    setState(1226);
    match(Gauss200Parser::BEGIN_GS);
    setState(1227);
    execute_stmts();
    setState(1228);
    match(Gauss200Parser::END_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Abort_stmtContext ------------------------------------------------------------------

Gauss200Parser::Abort_stmtContext::Abort_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Abort_stmtContext::ABORT_GS() {
  return getToken(Gauss200Parser::ABORT_GS, 0);
}

Gauss200Parser::Work_transactionContext* Gauss200Parser::Abort_stmtContext::work_transaction() {
  return getRuleContext<Gauss200Parser::Work_transactionContext>(0);
}


size_t Gauss200Parser::Abort_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAbort_stmt;
}

void Gauss200Parser::Abort_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbort_stmt(this);
}

void Gauss200Parser::Abort_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbort_stmt(this);
}


antlrcpp::Any Gauss200Parser::Abort_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAbort_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Abort_stmtContext* Gauss200Parser::abort_stmt() {
  Abort_stmtContext *_localctx = _tracker.createInstance<Abort_stmtContext>(_ctx, getState());
  enterRule(_localctx, 12, Gauss200Parser::RuleAbort_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    match(Gauss200Parser::ABORT_GS);
    setState(1232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TRANSACTION_GS

    || _la == Gauss200Parser::WORK_GS) {
      setState(1231);
      work_transaction();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Work_transactionContext ------------------------------------------------------------------

Gauss200Parser::Work_transactionContext::Work_transactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Work_transactionContext::WORK_GS() {
  return getToken(Gauss200Parser::WORK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Work_transactionContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}


size_t Gauss200Parser::Work_transactionContext::getRuleIndex() const {
  return Gauss200Parser::RuleWork_transaction;
}

void Gauss200Parser::Work_transactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWork_transaction(this);
}

void Gauss200Parser::Work_transactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWork_transaction(this);
}


antlrcpp::Any Gauss200Parser::Work_transactionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWork_transaction(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Work_transactionContext* Gauss200Parser::work_transaction() {
  Work_transactionContext *_localctx = _tracker.createInstance<Work_transactionContext>(_ctx, getState());
  enterRule(_localctx, 14, Gauss200Parser::RuleWork_transaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::TRANSACTION_GS

    || _la == Gauss200Parser::WORK_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_group_mapping_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_group_mapping_stmtContext::Alter_group_mapping_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::APP_GS() {
  return getToken(Gauss200Parser::APP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::WORKLOAD_GS() {
  return getToken(Gauss200Parser::WORKLOAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::MAPPING_GS() {
  return getToken(Gauss200Parser::MAPPING_GS, 0);
}

Gauss200Parser::App_nameContext* Gauss200Parser::Alter_group_mapping_stmtContext::app_name() {
  return getRuleContext<Gauss200Parser::App_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::Alter_group_mapping_stmtContext::assignment_stmt() {
  return getRuleContext<Gauss200Parser::Assignment_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_mapping_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Alter_group_mapping_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_group_mapping_stmt;
}

void Gauss200Parser::Alter_group_mapping_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_group_mapping_stmt(this);
}

void Gauss200Parser::Alter_group_mapping_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_group_mapping_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_group_mapping_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_group_mapping_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_group_mapping_stmtContext* Gauss200Parser::alter_group_mapping_stmt() {
  Alter_group_mapping_stmtContext *_localctx = _tracker.createInstance<Alter_group_mapping_stmtContext>(_ctx, getState());
  enterRule(_localctx, 16, Gauss200Parser::RuleAlter_group_mapping_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1236);
    match(Gauss200Parser::ALTER_GS);
    setState(1237);
    match(Gauss200Parser::APP_GS);
    setState(1238);
    match(Gauss200Parser::WORKLOAD_GS);
    setState(1239);
    match(Gauss200Parser::GROUP_GS);
    setState(1240);
    match(Gauss200Parser::MAPPING_GS);
    setState(1241);
    app_name();
    setState(1242);
    match(Gauss200Parser::WITH_GS);
    setState(1243);
    match(Gauss200Parser::LEFT_PAREN);
    setState(1244);
    assignment_stmt();
    setState(1245);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- App_nameContext ------------------------------------------------------------------

Gauss200Parser::App_nameContext::App_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::App_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::App_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleApp_name;
}

void Gauss200Parser::App_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterApp_name(this);
}

void Gauss200Parser::App_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitApp_name(this);
}


antlrcpp::Any Gauss200Parser::App_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitApp_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::App_nameContext* Gauss200Parser::app_name() {
  App_nameContext *_localctx = _tracker.createInstance<App_nameContext>(_ctx, getState());
  enterRule(_localctx, 18, Gauss200Parser::RuleApp_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1247);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_assignment_stmt_listContext ------------------------------------------------------------------

Gauss200Parser::Paren_assignment_stmt_listContext::Paren_assignment_stmt_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_assignment_stmt_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Assignment_stmt_listContext* Gauss200Parser::Paren_assignment_stmt_listContext::assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Assignment_stmt_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Paren_assignment_stmt_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Paren_assignment_stmt_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_assignment_stmt_list;
}

void Gauss200Parser::Paren_assignment_stmt_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_assignment_stmt_list(this);
}

void Gauss200Parser::Paren_assignment_stmt_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_assignment_stmt_list(this);
}


antlrcpp::Any Gauss200Parser::Paren_assignment_stmt_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_assignment_stmt_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::paren_assignment_stmt_list() {
  Paren_assignment_stmt_listContext *_localctx = _tracker.createInstance<Paren_assignment_stmt_listContext>(_ctx, getState());
  enterRule(_localctx, 20, Gauss200Parser::RuleParen_assignment_stmt_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1249);
    match(Gauss200Parser::LEFT_PAREN);
    setState(1250);
    assignment_stmt_list();
    setState(1251);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_stmt_listContext ------------------------------------------------------------------

Gauss200Parser::Assignment_stmt_listContext::Assignment_stmt_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Assignment_stmtContext *> Gauss200Parser::Assignment_stmt_listContext::assignment_stmt() {
  return getRuleContexts<Gauss200Parser::Assignment_stmtContext>();
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::Assignment_stmt_listContext::assignment_stmt(size_t i) {
  return getRuleContext<Gauss200Parser::Assignment_stmtContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Assignment_stmt_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Assignment_stmt_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Assignment_stmt_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleAssignment_stmt_list;
}

void Gauss200Parser::Assignment_stmt_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_stmt_list(this);
}

void Gauss200Parser::Assignment_stmt_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_stmt_list(this);
}


antlrcpp::Any Gauss200Parser::Assignment_stmt_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_stmt_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Assignment_stmt_listContext* Gauss200Parser::assignment_stmt_list() {
  Assignment_stmt_listContext *_localctx = _tracker.createInstance<Assignment_stmt_listContext>(_ctx, getState());
  enterRule(_localctx, 22, Gauss200Parser::RuleAssignment_stmt_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1253);
    assignment_stmt();
    setState(1258);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1254);
        match(Gauss200Parser::COMMA);
        setState(1255);
        assignment_stmt(); 
      }
      setState(1260);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_stmtContext ------------------------------------------------------------------

Gauss200Parser::Assignment_stmtContext::Assignment_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Assignment_stmtContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Assignment_valueContext* Gauss200Parser::Assignment_stmtContext::assignment_value() {
  return getRuleContext<Gauss200Parser::Assignment_valueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Assignment_stmtContext::COLON() {
  return getToken(Gauss200Parser::COLON, 0);
}

tree::TerminalNode* Gauss200Parser::Assignment_stmtContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}


size_t Gauss200Parser::Assignment_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAssignment_stmt;
}

void Gauss200Parser::Assignment_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_stmt(this);
}

void Gauss200Parser::Assignment_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_stmt(this);
}


antlrcpp::Any Gauss200Parser::Assignment_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::assignment_stmt() {
  Assignment_stmtContext *_localctx = _tracker.createInstance<Assignment_stmtContext>(_ctx, getState());
  enterRule(_localctx, 24, Gauss200Parser::RuleAssignment_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1261);
    expression();
    setState(1269);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(1263);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::COLON) {
        setState(1262);
        match(Gauss200Parser::COLON);
      }
      setState(1266);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::EQUALS_OP) {
        setState(1265);
        match(Gauss200Parser::EQUALS_OP);
      }
      setState(1268);
      assignment_value();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_valueContext ------------------------------------------------------------------

Gauss200Parser::Assignment_valueContext::Assignment_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Assignment_valueContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Assignment_valueContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Assignment_valueContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::Assignment_valueContext::getRuleIndex() const {
  return Gauss200Parser::RuleAssignment_value;
}

void Gauss200Parser::Assignment_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_value(this);
}

void Gauss200Parser::Assignment_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_value(this);
}


antlrcpp::Any Gauss200Parser::Assignment_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_value(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Assignment_valueContext* Gauss200Parser::assignment_value() {
  Assignment_valueContext *_localctx = _tracker.createInstance<Assignment_valueContext>(_ctx, getState());
  enterRule(_localctx, 26, Gauss200Parser::RuleAssignment_value);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1274);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1271);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1272);
      match(Gauss200Parser::DEFAULT_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1273);
      match(Gauss200Parser::SCONST);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_database_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_database_stmtContext::Alter_database_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_database_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_database_stmtContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

Gauss200Parser::Database_nameContext* Gauss200Parser::Alter_database_stmtContext::database_name() {
  return getRuleContext<Gauss200Parser::Database_nameContext>(0);
}

Gauss200Parser::Alter_database_optionContext* Gauss200Parser::Alter_database_stmtContext::alter_database_option() {
  return getRuleContext<Gauss200Parser::Alter_database_optionContext>(0);
}


size_t Gauss200Parser::Alter_database_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_database_stmt;
}

void Gauss200Parser::Alter_database_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_database_stmt(this);
}

void Gauss200Parser::Alter_database_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_database_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_database_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_database_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_database_stmtContext* Gauss200Parser::alter_database_stmt() {
  Alter_database_stmtContext *_localctx = _tracker.createInstance<Alter_database_stmtContext>(_ctx, getState());
  enterRule(_localctx, 28, Gauss200Parser::RuleAlter_database_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1276);
    match(Gauss200Parser::ALTER_GS);
    setState(1277);
    match(Gauss200Parser::DATABASE_GS);
    setState(1278);
    database_name();
    setState(1280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS || ((((_la - 159) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 159)) & ((1ULL << (Gauss200Parser::CONNECTION_GS - 159))
      | (1ULL << (Gauss200Parser::DISABLE_GS - 159))
      | (1ULL << (Gauss200Parser::ENABLE_GS - 159)))) != 0) || ((((_la - 307) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 307)) & ((1ULL << (Gauss200Parser::OWNER_GS - 307))
      | (1ULL << (Gauss200Parser::RENAME_GS - 307))
      | (1ULL << (Gauss200Parser::RESET_GS - 307)))) != 0) || _la == Gauss200Parser::SET_GS) {
      setState(1279);
      alter_database_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Database_nameContext ------------------------------------------------------------------

Gauss200Parser::Database_nameContext::Database_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Database_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Database_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleDatabase_name;
}

void Gauss200Parser::Database_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDatabase_name(this);
}

void Gauss200Parser::Database_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDatabase_name(this);
}


antlrcpp::Any Gauss200Parser::Database_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDatabase_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Database_nameContext* Gauss200Parser::database_name() {
  Database_nameContext *_localctx = _tracker.createInstance<Database_nameContext>(_ctx, getState());
  enterRule(_localctx, 30, Gauss200Parser::RuleDatabase_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1282);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_database_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_database_optionContext::Alter_database_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Connection_limitContext* Gauss200Parser::Alter_database_optionContext::connection_limit() {
  return getRuleContext<Gauss200Parser::Connection_limitContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_database_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_database_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}

Gauss200Parser::Set_configuration_paramContext* Gauss200Parser::Alter_database_optionContext::set_configuration_param() {
  return getRuleContext<Gauss200Parser::Set_configuration_paramContext>(0);
}

Gauss200Parser::Reset_configuration_paramContext* Gauss200Parser::Alter_database_optionContext::reset_configuration_param() {
  return getRuleContext<Gauss200Parser::Reset_configuration_paramContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_database_optionContext::PRIVATE_GS() {
  return getToken(Gauss200Parser::PRIVATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_database_optionContext::OBJECT_GS() {
  return getToken(Gauss200Parser::OBJECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_database_optionContext::ENABLE_GS() {
  return getToken(Gauss200Parser::ENABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_database_optionContext::DISABLE_GS() {
  return getToken(Gauss200Parser::DISABLE_GS, 0);
}


size_t Gauss200Parser::Alter_database_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_database_option;
}

void Gauss200Parser::Alter_database_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_database_option(this);
}

void Gauss200Parser::Alter_database_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_database_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_database_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_database_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_database_optionContext* Gauss200Parser::alter_database_option() {
  Alter_database_optionContext *_localctx = _tracker.createInstance<Alter_database_optionContext>(_ctx, getState());
  enterRule(_localctx, 32, Gauss200Parser::RuleAlter_database_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1297);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1285);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(1284);
        match(Gauss200Parser::WITH_GS);
      }
      setState(1287);
      connection_limit();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1288);
      rename_owner_to_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1289);
      set_configuration_param();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1290);
      reset_configuration_param();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1292);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(1291);
        match(Gauss200Parser::WITH_GS);
      }
      setState(1294);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::DISABLE_GS

      || _la == Gauss200Parser::ENABLE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1295);
      match(Gauss200Parser::PRIVATE_GS);
      setState(1296);
      match(Gauss200Parser::OBJECT_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connection_limitContext ------------------------------------------------------------------

Gauss200Parser::Connection_limitContext::Connection_limitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Connection_limitContext::CONNECTION_GS() {
  return getToken(Gauss200Parser::CONNECTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Connection_limitContext::LIMIT_GS() {
  return getToken(Gauss200Parser::LIMIT_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Connection_limitContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Connection_limitContext::getRuleIndex() const {
  return Gauss200Parser::RuleConnection_limit;
}

void Gauss200Parser::Connection_limitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnection_limit(this);
}

void Gauss200Parser::Connection_limitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnection_limit(this);
}


antlrcpp::Any Gauss200Parser::Connection_limitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConnection_limit(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Connection_limitContext* Gauss200Parser::connection_limit() {
  Connection_limitContext *_localctx = _tracker.createInstance<Connection_limitContext>(_ctx, getState());
  enterRule(_localctx, 34, Gauss200Parser::RuleConnection_limit);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1299);
    match(Gauss200Parser::CONNECTION_GS);
    setState(1300);
    match(Gauss200Parser::LIMIT_GS);
    setState(1301);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerContext ------------------------------------------------------------------

Gauss200Parser::IntegerContext::IntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Unary_exprContext* Gauss200Parser::IntegerContext::unary_expr() {
  return getRuleContext<Gauss200Parser::Unary_exprContext>(0);
}


size_t Gauss200Parser::IntegerContext::getRuleIndex() const {
  return Gauss200Parser::RuleInteger;
}

void Gauss200Parser::IntegerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteger(this);
}

void Gauss200Parser::IntegerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteger(this);
}


antlrcpp::Any Gauss200Parser::IntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitInteger(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::IntegerContext* Gauss200Parser::integer() {
  IntegerContext *_localctx = _tracker.createInstance<IntegerContext>(_ctx, getState());
  enterRule(_localctx, 36, Gauss200Parser::RuleInteger);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1303);
    unary_expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rename_owner_to_optionContext ------------------------------------------------------------------

Gauss200Parser::Rename_owner_to_optionContext::Rename_owner_to_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Rename_owner_to_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

Gauss200Parser::Owner_to_optionContext* Gauss200Parser::Rename_owner_to_optionContext::owner_to_option() {
  return getRuleContext<Gauss200Parser::Owner_to_optionContext>(0);
}


size_t Gauss200Parser::Rename_owner_to_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleRename_owner_to_option;
}

void Gauss200Parser::Rename_owner_to_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRename_owner_to_option(this);
}

void Gauss200Parser::Rename_owner_to_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRename_owner_to_option(this);
}


antlrcpp::Any Gauss200Parser::Rename_owner_to_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRename_owner_to_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::rename_owner_to_option() {
  Rename_owner_to_optionContext *_localctx = _tracker.createInstance<Rename_owner_to_optionContext>(_ctx, getState());
  enterRule(_localctx, 38, Gauss200Parser::RuleRename_owner_to_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1307);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1305);
        rename_to_option();
        break;
      }

      case Gauss200Parser::OWNER_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1306);
        owner_to_option();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rename_to_optionContext ------------------------------------------------------------------

Gauss200Parser::Rename_to_optionContext::Rename_to_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Rename_to_optionContext::RENAME_GS() {
  return getToken(Gauss200Parser::RENAME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Rename_to_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Rename_to_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}


size_t Gauss200Parser::Rename_to_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleRename_to_option;
}

void Gauss200Parser::Rename_to_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRename_to_option(this);
}

void Gauss200Parser::Rename_to_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRename_to_option(this);
}


antlrcpp::Any Gauss200Parser::Rename_to_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRename_to_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::rename_to_option() {
  Rename_to_optionContext *_localctx = _tracker.createInstance<Rename_to_optionContext>(_ctx, getState());
  enterRule(_localctx, 40, Gauss200Parser::RuleRename_to_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    match(Gauss200Parser::RENAME_GS);
    setState(1310);
    match(Gauss200Parser::TO_GS);
    setState(1311);
    new_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owner_to_optionContext ------------------------------------------------------------------

Gauss200Parser::Owner_to_optionContext::Owner_to_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Owner_to_optionContext::OWNER_GS() {
  return getToken(Gauss200Parser::OWNER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Owner_to_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Owner_to_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}


size_t Gauss200Parser::Owner_to_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleOwner_to_option;
}

void Gauss200Parser::Owner_to_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwner_to_option(this);
}

void Gauss200Parser::Owner_to_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwner_to_option(this);
}


antlrcpp::Any Gauss200Parser::Owner_to_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOwner_to_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Owner_to_optionContext* Gauss200Parser::owner_to_option() {
  Owner_to_optionContext *_localctx = _tracker.createInstance<Owner_to_optionContext>(_ctx, getState());
  enterRule(_localctx, 42, Gauss200Parser::RuleOwner_to_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1313);
    match(Gauss200Parser::OWNER_GS);
    setState(1314);
    match(Gauss200Parser::TO_GS);
    setState(1315);
    new_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- New_nameContext ------------------------------------------------------------------

Gauss200Parser::New_nameContext::New_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::New_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::New_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleNew_name;
}

void Gauss200Parser::New_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNew_name(this);
}

void Gauss200Parser::New_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNew_name(this);
}


antlrcpp::Any Gauss200Parser::New_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNew_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::New_nameContext* Gauss200Parser::new_name() {
  New_nameContext *_localctx = _tracker.createInstance<New_nameContext>(_ctx, getState());
  enterRule(_localctx, 44, Gauss200Parser::RuleNew_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1317);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_configuration_paramContext ------------------------------------------------------------------

Gauss200Parser::Set_configuration_paramContext::Set_configuration_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_configuration_paramContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Configuration_paramContext* Gauss200Parser::Set_configuration_paramContext::configuration_param() {
  return getRuleContext<Gauss200Parser::Configuration_paramContext>(0);
}

std::vector<Gauss200Parser::Configuration_param_valueContext *> Gauss200Parser::Set_configuration_paramContext::configuration_param_value() {
  return getRuleContexts<Gauss200Parser::Configuration_param_valueContext>();
}

Gauss200Parser::Configuration_param_valueContext* Gauss200Parser::Set_configuration_paramContext::configuration_param_value(size_t i) {
  return getRuleContext<Gauss200Parser::Configuration_param_valueContext>(i);
}

Gauss200Parser::Session_localContext* Gauss200Parser::Set_configuration_paramContext::session_local() {
  return getRuleContext<Gauss200Parser::Session_localContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Set_configuration_paramContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Set_configuration_paramContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Set_configuration_paramContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_configuration_param;
}

void Gauss200Parser::Set_configuration_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_configuration_param(this);
}

void Gauss200Parser::Set_configuration_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_configuration_param(this);
}


antlrcpp::Any Gauss200Parser::Set_configuration_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_configuration_param(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_configuration_paramContext* Gauss200Parser::set_configuration_param() {
  Set_configuration_paramContext *_localctx = _tracker.createInstance<Set_configuration_paramContext>(_ctx, getState());
  enterRule(_localctx, 46, Gauss200Parser::RuleSet_configuration_param);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1319);
    match(Gauss200Parser::SET_GS);
    setState(1321);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(1320);
      session_local();
      break;
    }

    }
    setState(1323);
    configuration_param();
    setState(1324);
    configuration_param_value();
    setState(1329);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1325);
      match(Gauss200Parser::COMMA);
      setState(1326);
      configuration_param_value();
      setState(1331);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Configuration_param_valueContext ------------------------------------------------------------------

Gauss200Parser::Configuration_param_valueContext::Configuration_param_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Expr_defaultContext* Gauss200Parser::Configuration_param_valueContext::expr_default() {
  return getRuleContext<Gauss200Parser::Expr_defaultContext>(0);
}

tree::TerminalNode* Gauss200Parser::Configuration_param_valueContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Configuration_param_valueContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Configuration_param_valueContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Configuration_param_valueContext::CURRENT_GS() {
  return getToken(Gauss200Parser::CURRENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Configuration_param_valueContext::PUBLIC_GS() {
  return getToken(Gauss200Parser::PUBLIC_GS, 0);
}


size_t Gauss200Parser::Configuration_param_valueContext::getRuleIndex() const {
  return Gauss200Parser::RuleConfiguration_param_value;
}

void Gauss200Parser::Configuration_param_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfiguration_param_value(this);
}

void Gauss200Parser::Configuration_param_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfiguration_param_value(this);
}


antlrcpp::Any Gauss200Parser::Configuration_param_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConfiguration_param_value(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Configuration_param_valueContext* Gauss200Parser::configuration_param_value() {
  Configuration_param_valueContext *_localctx = _tracker.createInstance<Configuration_param_valueContext>(_ctx, getState());
  enterRule(_localctx, 48, Gauss200Parser::RuleConfiguration_param_value);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1339);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1333);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
      case 1: {
        setState(1332);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::TO_GS || _la == Gauss200Parser::EQUALS_OP)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(1335);
      expr_default();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1336);
      match(Gauss200Parser::FROM_GS);
      setState(1337);
      match(Gauss200Parser::CURRENT_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1338);
      match(Gauss200Parser::PUBLIC_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reset_configuration_paramContext ------------------------------------------------------------------

Gauss200Parser::Reset_configuration_paramContext::Reset_configuration_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reset_configuration_paramContext::RESET_GS() {
  return getToken(Gauss200Parser::RESET_GS, 0);
}

Gauss200Parser::Configuration_paramContext* Gauss200Parser::Reset_configuration_paramContext::configuration_param() {
  return getRuleContext<Gauss200Parser::Configuration_paramContext>(0);
}

tree::TerminalNode* Gauss200Parser::Reset_configuration_paramContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}


size_t Gauss200Parser::Reset_configuration_paramContext::getRuleIndex() const {
  return Gauss200Parser::RuleReset_configuration_param;
}

void Gauss200Parser::Reset_configuration_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReset_configuration_param(this);
}

void Gauss200Parser::Reset_configuration_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReset_configuration_param(this);
}


antlrcpp::Any Gauss200Parser::Reset_configuration_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReset_configuration_param(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reset_configuration_paramContext* Gauss200Parser::reset_configuration_param() {
  Reset_configuration_paramContext *_localctx = _tracker.createInstance<Reset_configuration_paramContext>(_ctx, getState());
  enterRule(_localctx, 50, Gauss200Parser::RuleReset_configuration_param);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1341);
    match(Gauss200Parser::RESET_GS);
    setState(1344);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(1342);
      configuration_param();
      break;
    }

    case 2: {
      setState(1343);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Configuration_paramContext ------------------------------------------------------------------

Gauss200Parser::Configuration_paramContext::Configuration_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Configuration_paramContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Configuration_paramContext::getRuleIndex() const {
  return Gauss200Parser::RuleConfiguration_param;
}

void Gauss200Parser::Configuration_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfiguration_param(this);
}

void Gauss200Parser::Configuration_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfiguration_param(this);
}


antlrcpp::Any Gauss200Parser::Configuration_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConfiguration_param(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Configuration_paramContext* Gauss200Parser::configuration_param() {
  Configuration_paramContext *_localctx = _tracker.createInstance<Configuration_paramContext>(_ctx, getState());
  enterRule(_localctx, 52, Gauss200Parser::RuleConfiguration_param);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1346);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_data_source_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_data_source_stmtContext::Alter_data_source_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_data_source_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_data_source_stmtContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_data_source_stmtContext::SOURCE_GS() {
  return getToken(Gauss200Parser::SOURCE_GS, 0);
}

Gauss200Parser::Src_nameContext* Gauss200Parser::Alter_data_source_stmtContext::src_name() {
  return getRuleContext<Gauss200Parser::Src_nameContext>(0);
}

Gauss200Parser::Alter_data_src_optionContext* Gauss200Parser::Alter_data_source_stmtContext::alter_data_src_option() {
  return getRuleContext<Gauss200Parser::Alter_data_src_optionContext>(0);
}


size_t Gauss200Parser::Alter_data_source_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_data_source_stmt;
}

void Gauss200Parser::Alter_data_source_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_data_source_stmt(this);
}

void Gauss200Parser::Alter_data_source_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_data_source_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_data_source_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_data_source_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_data_source_stmtContext* Gauss200Parser::alter_data_source_stmt() {
  Alter_data_source_stmtContext *_localctx = _tracker.createInstance<Alter_data_source_stmtContext>(_ctx, getState());
  enterRule(_localctx, 54, Gauss200Parser::RuleAlter_data_source_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1348);
    match(Gauss200Parser::ALTER_GS);
    setState(1349);
    match(Gauss200Parser::DATA_GS);
    setState(1350);
    match(Gauss200Parser::SOURCE_GS);
    setState(1351);
    src_name();
    setState(1352);
    alter_data_src_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Src_nameContext ------------------------------------------------------------------

Gauss200Parser::Src_nameContext::Src_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Src_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Src_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleSrc_name;
}

void Gauss200Parser::Src_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSrc_name(this);
}

void Gauss200Parser::Src_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSrc_name(this);
}


antlrcpp::Any Gauss200Parser::Src_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSrc_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Src_nameContext* Gauss200Parser::src_name() {
  Src_nameContext *_localctx = _tracker.createInstance<Src_nameContext>(_ctx, getState());
  enterRule(_localctx, 56, Gauss200Parser::RuleSrc_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1354);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_data_src_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_data_src_optionContext::Alter_data_src_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Data_src_type_version_optionContext *> Gauss200Parser::Alter_data_src_optionContext::data_src_type_version_option() {
  return getRuleContexts<Gauss200Parser::Data_src_type_version_optionContext>();
}

Gauss200Parser::Data_src_type_version_optionContext* Gauss200Parser::Alter_data_src_optionContext::data_src_type_version_option(size_t i) {
  return getRuleContext<Gauss200Parser::Data_src_type_version_optionContext>(i);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_data_src_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}


size_t Gauss200Parser::Alter_data_src_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_data_src_option;
}

void Gauss200Parser::Alter_data_src_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_data_src_option(this);
}

void Gauss200Parser::Alter_data_src_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_data_src_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_data_src_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_data_src_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_data_src_optionContext* Gauss200Parser::alter_data_src_option() {
  Alter_data_src_optionContext *_localctx = _tracker.createInstance<Alter_data_src_optionContext>(_ctx, getState());
  enterRule(_localctx, 58, Gauss200Parser::RuleAlter_data_src_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1363);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::EOF:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::SEMICOLON: {
        enterOuterAlt(_localctx, 1);
        setState(1359);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::OPTIONS_GS || _la == Gauss200Parser::TYPE_GS

        || _la == Gauss200Parser::VERSION_GS) {
          setState(1356);
          data_src_type_version_option();
          setState(1361);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1362);
        rename_owner_to_option();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_src_type_version_optionContext ------------------------------------------------------------------

Gauss200Parser::Data_src_type_version_optionContext::Data_src_type_version_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Data_src_type_version_optionContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Data_src_type_version_optionContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Data_src_type_version_optionContext::VERSION_GS() {
  return getToken(Gauss200Parser::VERSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Data_src_type_version_optionContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::Data_src_type_version_optionContext::alter_property_options() {
  return getRuleContext<Gauss200Parser::Alter_property_optionsContext>(0);
}


size_t Gauss200Parser::Data_src_type_version_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleData_src_type_version_option;
}

void Gauss200Parser::Data_src_type_version_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_src_type_version_option(this);
}

void Gauss200Parser::Data_src_type_version_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_src_type_version_option(this);
}


antlrcpp::Any Gauss200Parser::Data_src_type_version_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitData_src_type_version_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Data_src_type_version_optionContext* Gauss200Parser::data_src_type_version_option() {
  Data_src_type_version_optionContext *_localctx = _tracker.createInstance<Data_src_type_version_optionContext>(_ctx, getState());
  enterRule(_localctx, 60, Gauss200Parser::RuleData_src_type_version_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1370);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::TYPE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1365);
        match(Gauss200Parser::TYPE_GS);
        setState(1366);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::VERSION_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1367);
        match(Gauss200Parser::VERSION_GS);
        setState(1368);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::NULL_GS || _la == Gauss200Parser::CHAR_STRING)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::OPTIONS_GS: {
        enterOuterAlt(_localctx, 3);
        setState(1369);
        alter_property_options();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_property_optionsContext ------------------------------------------------------------------

Gauss200Parser::Alter_property_optionsContext::Alter_property_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionsContext::OPTIONS_GS() {
  return getToken(Gauss200Parser::OPTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionsContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Alter_property_optionContext *> Gauss200Parser::Alter_property_optionsContext::alter_property_option() {
  return getRuleContexts<Gauss200Parser::Alter_property_optionContext>();
}

Gauss200Parser::Alter_property_optionContext* Gauss200Parser::Alter_property_optionsContext::alter_property_option(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_property_optionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionsContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_property_optionsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Alter_property_optionsContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_property_options;
}

void Gauss200Parser::Alter_property_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_property_options(this);
}

void Gauss200Parser::Alter_property_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_property_options(this);
}


antlrcpp::Any Gauss200Parser::Alter_property_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_property_options(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::alter_property_options() {
  Alter_property_optionsContext *_localctx = _tracker.createInstance<Alter_property_optionsContext>(_ctx, getState());
  enterRule(_localctx, 62, Gauss200Parser::RuleAlter_property_options);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1372);
    match(Gauss200Parser::OPTIONS_GS);
    setState(1373);
    match(Gauss200Parser::LEFT_PAREN);
    setState(1374);
    alter_property_option();
    setState(1379);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1375);
      match(Gauss200Parser::COMMA);
      setState(1376);
      alter_property_option();
      setState(1381);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1382);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_property_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_property_optionContext::Alter_property_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::OptnameContext* Gauss200Parser::Alter_property_optionContext::optname() {
  return getRuleContext<Gauss200Parser::OptnameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_property_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}


size_t Gauss200Parser::Alter_property_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_property_option;
}

void Gauss200Parser::Alter_property_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_property_option(this);
}

void Gauss200Parser::Alter_property_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_property_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_property_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_property_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_property_optionContext* Gauss200Parser::alter_property_option() {
  Alter_property_optionContext *_localctx = _tracker.createInstance<Alter_property_optionContext>(_ctx, getState());
  enterRule(_localctx, 64, Gauss200Parser::RuleAlter_property_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1385);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(1384);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ADD_GS || _la == Gauss200Parser::DROP_GS || _la == Gauss200Parser::SET_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(1387);
    optname();
    setState(1389);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CHAR_STRING) {
      setState(1388);
      match(Gauss200Parser::CHAR_STRING);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptnameContext ------------------------------------------------------------------

Gauss200Parser::OptnameContext::OptnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::OptnameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::OptnameContext::getRuleIndex() const {
  return Gauss200Parser::RuleOptname;
}

void Gauss200Parser::OptnameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptname(this);
}

void Gauss200Parser::OptnameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptname(this);
}


antlrcpp::Any Gauss200Parser::OptnameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOptname(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::OptnameContext* Gauss200Parser::optname() {
  OptnameContext *_localctx = _tracker.createInstance<OptnameContext>(_ctx, getState());
  enterRule(_localctx, 66, Gauss200Parser::RuleOptname);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1391);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_default_privilege_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_default_privilege_stmtContext::Alter_default_privilege_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::PRIVILEGES_GS() {
  return getToken(Gauss200Parser::PRIVILEGES_GS, 0);
}

Gauss200Parser::Abbreviated_grant_or_revokeContext* Gauss200Parser::Alter_default_privilege_stmtContext::abbreviated_grant_or_revoke() {
  return getRuleContext<Gauss200Parser::Abbreviated_grant_or_revokeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Target_role_listContext* Gauss200Parser::Alter_default_privilege_stmtContext::target_role_list() {
  return getRuleContext<Gauss200Parser::Target_role_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

Gauss200Parser::Schema_name_listContext* Gauss200Parser::Alter_default_privilege_stmtContext::schema_name_list() {
  return getRuleContext<Gauss200Parser::Schema_name_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_default_privilege_stmtContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}


size_t Gauss200Parser::Alter_default_privilege_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_default_privilege_stmt;
}

void Gauss200Parser::Alter_default_privilege_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_default_privilege_stmt(this);
}

void Gauss200Parser::Alter_default_privilege_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_default_privilege_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_default_privilege_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_default_privilege_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_default_privilege_stmtContext* Gauss200Parser::alter_default_privilege_stmt() {
  Alter_default_privilege_stmtContext *_localctx = _tracker.createInstance<Alter_default_privilege_stmtContext>(_ctx, getState());
  enterRule(_localctx, 68, Gauss200Parser::RuleAlter_default_privilege_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1393);
    match(Gauss200Parser::ALTER_GS);
    setState(1394);
    match(Gauss200Parser::DEFAULT_GS);
    setState(1395);
    match(Gauss200Parser::PRIVILEGES_GS);
    setState(1399);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FOR_GS) {
      setState(1396);
      match(Gauss200Parser::FOR_GS);
      setState(1397);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::USER_GS || _la == Gauss200Parser::ROLE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1398);
      target_role_list();
    }
    setState(1404);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::IN_GS) {
      setState(1401);
      match(Gauss200Parser::IN_GS);
      setState(1402);
      match(Gauss200Parser::SCHEMA_GS);
      setState(1403);
      schema_name_list();
    }
    setState(1406);
    abbreviated_grant_or_revoke();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_role_listContext ------------------------------------------------------------------

Gauss200Parser::Target_role_listContext::Target_role_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Target_roleContext *> Gauss200Parser::Target_role_listContext::target_role() {
  return getRuleContexts<Gauss200Parser::Target_roleContext>();
}

Gauss200Parser::Target_roleContext* Gauss200Parser::Target_role_listContext::target_role(size_t i) {
  return getRuleContext<Gauss200Parser::Target_roleContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Target_role_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Target_role_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Target_role_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleTarget_role_list;
}

void Gauss200Parser::Target_role_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget_role_list(this);
}

void Gauss200Parser::Target_role_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget_role_list(this);
}


antlrcpp::Any Gauss200Parser::Target_role_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTarget_role_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Target_role_listContext* Gauss200Parser::target_role_list() {
  Target_role_listContext *_localctx = _tracker.createInstance<Target_role_listContext>(_ctx, getState());
  enterRule(_localctx, 70, Gauss200Parser::RuleTarget_role_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1408);
    target_role();
    setState(1413);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1409);
      match(Gauss200Parser::COMMA);
      setState(1410);
      target_role();
      setState(1415);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_roleContext ------------------------------------------------------------------

Gauss200Parser::Target_roleContext::Target_roleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Target_roleContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Target_roleContext::getRuleIndex() const {
  return Gauss200Parser::RuleTarget_role;
}

void Gauss200Parser::Target_roleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget_role(this);
}

void Gauss200Parser::Target_roleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget_role(this);
}


antlrcpp::Any Gauss200Parser::Target_roleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTarget_role(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Target_roleContext* Gauss200Parser::target_role() {
  Target_roleContext *_localctx = _tracker.createInstance<Target_roleContext>(_ctx, getState());
  enterRule(_localctx, 72, Gauss200Parser::RuleTarget_role);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1416);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Schema_name_listContext ------------------------------------------------------------------

Gauss200Parser::Schema_name_listContext::Schema_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Schema_nameContext *> Gauss200Parser::Schema_name_listContext::schema_name() {
  return getRuleContexts<Gauss200Parser::Schema_nameContext>();
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Schema_name_listContext::schema_name(size_t i) {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Schema_name_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Schema_name_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Schema_name_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleSchema_name_list;
}

void Gauss200Parser::Schema_name_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSchema_name_list(this);
}

void Gauss200Parser::Schema_name_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSchema_name_list(this);
}


antlrcpp::Any Gauss200Parser::Schema_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSchema_name_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Schema_name_listContext* Gauss200Parser::schema_name_list() {
  Schema_name_listContext *_localctx = _tracker.createInstance<Schema_name_listContext>(_ctx, getState());
  enterRule(_localctx, 74, Gauss200Parser::RuleSchema_name_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1418);
    schema_name();
    setState(1423);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1419);
      match(Gauss200Parser::COMMA);
      setState(1420);
      schema_name();
      setState(1425);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Schema_nameContext ------------------------------------------------------------------

Gauss200Parser::Schema_nameContext::Schema_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Schema_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Schema_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleSchema_name;
}

void Gauss200Parser::Schema_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSchema_name(this);
}

void Gauss200Parser::Schema_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSchema_name(this);
}


antlrcpp::Any Gauss200Parser::Schema_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSchema_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::schema_name() {
  Schema_nameContext *_localctx = _tracker.createInstance<Schema_nameContext>(_ctx, getState());
  enterRule(_localctx, 76, Gauss200Parser::RuleSchema_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1426);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Abbreviated_grant_or_revokeContext ------------------------------------------------------------------

Gauss200Parser::Abbreviated_grant_or_revokeContext::Abbreviated_grant_or_revokeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Grant_on_tables_clauseContext* Gauss200Parser::Abbreviated_grant_or_revokeContext::grant_on_tables_clause() {
  return getRuleContext<Gauss200Parser::Grant_on_tables_clauseContext>(0);
}

Gauss200Parser::Grant_on_functions_clauseContext* Gauss200Parser::Abbreviated_grant_or_revokeContext::grant_on_functions_clause() {
  return getRuleContext<Gauss200Parser::Grant_on_functions_clauseContext>(0);
}

Gauss200Parser::Grant_on_types_clauseContext* Gauss200Parser::Abbreviated_grant_or_revokeContext::grant_on_types_clause() {
  return getRuleContext<Gauss200Parser::Grant_on_types_clauseContext>(0);
}

Gauss200Parser::Revoke_on_tables_clauseContext* Gauss200Parser::Abbreviated_grant_or_revokeContext::revoke_on_tables_clause() {
  return getRuleContext<Gauss200Parser::Revoke_on_tables_clauseContext>(0);
}

Gauss200Parser::Revoke_on_functions_clauseContext* Gauss200Parser::Abbreviated_grant_or_revokeContext::revoke_on_functions_clause() {
  return getRuleContext<Gauss200Parser::Revoke_on_functions_clauseContext>(0);
}

Gauss200Parser::Revoke_on_types_clauseContext* Gauss200Parser::Abbreviated_grant_or_revokeContext::revoke_on_types_clause() {
  return getRuleContext<Gauss200Parser::Revoke_on_types_clauseContext>(0);
}


size_t Gauss200Parser::Abbreviated_grant_or_revokeContext::getRuleIndex() const {
  return Gauss200Parser::RuleAbbreviated_grant_or_revoke;
}

void Gauss200Parser::Abbreviated_grant_or_revokeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbbreviated_grant_or_revoke(this);
}

void Gauss200Parser::Abbreviated_grant_or_revokeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbbreviated_grant_or_revoke(this);
}


antlrcpp::Any Gauss200Parser::Abbreviated_grant_or_revokeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviated_grant_or_revoke(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Abbreviated_grant_or_revokeContext* Gauss200Parser::abbreviated_grant_or_revoke() {
  Abbreviated_grant_or_revokeContext *_localctx = _tracker.createInstance<Abbreviated_grant_or_revokeContext>(_ctx, getState());
  enterRule(_localctx, 78, Gauss200Parser::RuleAbbreviated_grant_or_revoke);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1434);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1428);
      grant_on_tables_clause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1429);
      grant_on_functions_clause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1430);
      grant_on_types_clause();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1431);
      revoke_on_tables_clause();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1432);
      revoke_on_functions_clause();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1433);
      revoke_on_types_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_on_tables_clauseContext ------------------------------------------------------------------

Gauss200Parser::Grant_on_tables_clauseContext::Grant_on_tables_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Grant_on_tables_clauseContext::GRANT_GS() {
  return getToken(Gauss200Parser::GRANT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_tables_clauseContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_tables_clauseContext::TABLES_GS() {
  return getToken(Gauss200Parser::TABLES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_tables_clauseContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Grant_on_tables_clauseContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

Gauss200Parser::Table_privilegesContext* Gauss200Parser::Grant_on_tables_clauseContext::table_privileges() {
  return getRuleContext<Gauss200Parser::Table_privilegesContext>(0);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::Grant_on_tables_clauseContext::all_privileges() {
  return getRuleContext<Gauss200Parser::All_privilegesContext>(0);
}

Gauss200Parser::With_grant_optionContext* Gauss200Parser::Grant_on_tables_clauseContext::with_grant_option() {
  return getRuleContext<Gauss200Parser::With_grant_optionContext>(0);
}


size_t Gauss200Parser::Grant_on_tables_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_on_tables_clause;
}

void Gauss200Parser::Grant_on_tables_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_on_tables_clause(this);
}

void Gauss200Parser::Grant_on_tables_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_on_tables_clause(this);
}


antlrcpp::Any Gauss200Parser::Grant_on_tables_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_on_tables_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_on_tables_clauseContext* Gauss200Parser::grant_on_tables_clause() {
  Grant_on_tables_clauseContext *_localctx = _tracker.createInstance<Grant_on_tables_clauseContext>(_ctx, getState());
  enterRule(_localctx, 80, Gauss200Parser::RuleGrant_on_tables_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1436);
    match(Gauss200Parser::GRANT_GS);
    setState(1439);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::UPDATE_GS: {
        setState(1437);
        table_privileges();
        break;
      }

      case Gauss200Parser::ALL_GS: {
        setState(1438);
        all_privileges();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1441);
    match(Gauss200Parser::ON_GS);
    setState(1442);
    match(Gauss200Parser::TABLES_GS);
    setState(1443);
    match(Gauss200Parser::TO_GS);
    setState(1444);
    grant_revoke_objects();
    setState(1446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(1445);
      with_grant_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_privilegesContext ------------------------------------------------------------------

Gauss200Parser::All_privilegesContext::All_privilegesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::All_privilegesContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::All_privilegesContext::PRIVILEGES_GS() {
  return getToken(Gauss200Parser::PRIVILEGES_GS, 0);
}


size_t Gauss200Parser::All_privilegesContext::getRuleIndex() const {
  return Gauss200Parser::RuleAll_privileges;
}

void Gauss200Parser::All_privilegesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAll_privileges(this);
}

void Gauss200Parser::All_privilegesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAll_privileges(this);
}


antlrcpp::Any Gauss200Parser::All_privilegesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAll_privileges(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::all_privileges() {
  All_privilegesContext *_localctx = _tracker.createInstance<All_privilegesContext>(_ctx, getState());
  enterRule(_localctx, 82, Gauss200Parser::RuleAll_privileges);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1448);
    match(Gauss200Parser::ALL_GS);
    setState(1450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::PRIVILEGES_GS) {
      setState(1449);
      match(Gauss200Parser::PRIVILEGES_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_privilegesContext ------------------------------------------------------------------

Gauss200Parser::Table_privilegesContext::Table_privilegesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Table_privilegeContext *> Gauss200Parser::Table_privilegesContext::table_privilege() {
  return getRuleContexts<Gauss200Parser::Table_privilegeContext>();
}

Gauss200Parser::Table_privilegeContext* Gauss200Parser::Table_privilegesContext::table_privilege(size_t i) {
  return getRuleContext<Gauss200Parser::Table_privilegeContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Table_privilegesContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Table_privilegesContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Table_privilegesContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_privileges;
}

void Gauss200Parser::Table_privilegesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_privileges(this);
}

void Gauss200Parser::Table_privilegesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_privileges(this);
}


antlrcpp::Any Gauss200Parser::Table_privilegesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_privileges(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_privilegesContext* Gauss200Parser::table_privileges() {
  Table_privilegesContext *_localctx = _tracker.createInstance<Table_privilegesContext>(_ctx, getState());
  enterRule(_localctx, 84, Gauss200Parser::RuleTable_privileges);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1452);
    table_privilege();
    setState(1457);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1453);
      match(Gauss200Parser::COMMA);
      setState(1454);
      table_privilege();
      setState(1459);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_privilegeContext ------------------------------------------------------------------

Gauss200Parser::Table_privilegeContext::Table_privilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Table_privilegeContext::SELECT_GS() {
  return getToken(Gauss200Parser::SELECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_privilegeContext::INSERT_GS() {
  return getToken(Gauss200Parser::INSERT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_privilegeContext::UPDATE_GS() {
  return getToken(Gauss200Parser::UPDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_privilegeContext::DELETE_GS() {
  return getToken(Gauss200Parser::DELETE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_privilegeContext::TRUNCATE_GS() {
  return getToken(Gauss200Parser::TRUNCATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_privilegeContext::REFERENCES_GS() {
  return getToken(Gauss200Parser::REFERENCES_GS, 0);
}


size_t Gauss200Parser::Table_privilegeContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_privilege;
}

void Gauss200Parser::Table_privilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_privilege(this);
}

void Gauss200Parser::Table_privilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_privilege(this);
}


antlrcpp::Any Gauss200Parser::Table_privilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_privilege(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_privilegeContext* Gauss200Parser::table_privilege() {
  Table_privilegeContext *_localctx = _tracker.createInstance<Table_privilegeContext>(_ctx, getState());
  enterRule(_localctx, 86, Gauss200Parser::RuleTable_privilege);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1460);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::REFERENCES_GS

    || _la == Gauss200Parser::SELECT_GS || _la == Gauss200Parser::DELETE_GS || _la == Gauss200Parser::INSERT_GS || _la == Gauss200Parser::TRUNCATE_GS

    || _la == Gauss200Parser::UPDATE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_revoke_objectsContext ------------------------------------------------------------------

Gauss200Parser::Grant_revoke_objectsContext::Grant_revoke_objectsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Grant_revoke_objContext *> Gauss200Parser::Grant_revoke_objectsContext::grant_revoke_obj() {
  return getRuleContexts<Gauss200Parser::Grant_revoke_objContext>();
}

Gauss200Parser::Grant_revoke_objContext* Gauss200Parser::Grant_revoke_objectsContext::grant_revoke_obj(size_t i) {
  return getRuleContext<Gauss200Parser::Grant_revoke_objContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Grant_revoke_objectsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Grant_revoke_objectsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Grant_revoke_objectsContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_revoke_objects;
}

void Gauss200Parser::Grant_revoke_objectsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_revoke_objects(this);
}

void Gauss200Parser::Grant_revoke_objectsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_revoke_objects(this);
}


antlrcpp::Any Gauss200Parser::Grant_revoke_objectsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_revoke_objects(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::grant_revoke_objects() {
  Grant_revoke_objectsContext *_localctx = _tracker.createInstance<Grant_revoke_objectsContext>(_ctx, getState());
  enterRule(_localctx, 88, Gauss200Parser::RuleGrant_revoke_objects);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1462);
    grant_revoke_obj();
    setState(1467);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1463);
      match(Gauss200Parser::COMMA);
      setState(1464);
      grant_revoke_obj();
      setState(1469);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_revoke_objContext ------------------------------------------------------------------

Gauss200Parser::Grant_revoke_objContext::Grant_revoke_objContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Grant_revoke_objContext::role_name() {
  return getRuleContext<Gauss200Parser::Role_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Grant_revoke_objContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_revoke_objContext::PUBLIC_GS() {
  return getToken(Gauss200Parser::PUBLIC_GS, 0);
}


size_t Gauss200Parser::Grant_revoke_objContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_revoke_obj;
}

void Gauss200Parser::Grant_revoke_objContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_revoke_obj(this);
}

void Gauss200Parser::Grant_revoke_objContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_revoke_obj(this);
}


antlrcpp::Any Gauss200Parser::Grant_revoke_objContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_revoke_obj(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_revoke_objContext* Gauss200Parser::grant_revoke_obj() {
  Grant_revoke_objContext *_localctx = _tracker.createInstance<Grant_revoke_objContext>(_ctx, getState());
  enterRule(_localctx, 90, Gauss200Parser::RuleGrant_revoke_obj);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1475);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1471);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
      case 1: {
        setState(1470);
        match(Gauss200Parser::GROUP_GS);
        break;
      }

      }
      setState(1473);
      role_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1474);
      match(Gauss200Parser::PUBLIC_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Role_nameContext ------------------------------------------------------------------

Gauss200Parser::Role_nameContext::Role_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Role_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Role_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleRole_name;
}

void Gauss200Parser::Role_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRole_name(this);
}

void Gauss200Parser::Role_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRole_name(this);
}


antlrcpp::Any Gauss200Parser::Role_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRole_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Role_nameContext* Gauss200Parser::role_name() {
  Role_nameContext *_localctx = _tracker.createInstance<Role_nameContext>(_ctx, getState());
  enterRule(_localctx, 92, Gauss200Parser::RuleRole_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1477);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_grant_optionContext ------------------------------------------------------------------

Gauss200Parser::With_grant_optionContext::With_grant_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::With_grant_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::With_grant_optionContext::GRANT_GS() {
  return getToken(Gauss200Parser::GRANT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::With_grant_optionContext::OPTION_GS() {
  return getToken(Gauss200Parser::OPTION_GS, 0);
}


size_t Gauss200Parser::With_grant_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleWith_grant_option;
}

void Gauss200Parser::With_grant_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_grant_option(this);
}

void Gauss200Parser::With_grant_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_grant_option(this);
}


antlrcpp::Any Gauss200Parser::With_grant_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWith_grant_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::With_grant_optionContext* Gauss200Parser::with_grant_option() {
  With_grant_optionContext *_localctx = _tracker.createInstance<With_grant_optionContext>(_ctx, getState());
  enterRule(_localctx, 94, Gauss200Parser::RuleWith_grant_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1479);
    match(Gauss200Parser::WITH_GS);
    setState(1480);
    match(Gauss200Parser::GRANT_GS);
    setState(1481);
    match(Gauss200Parser::OPTION_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_on_functions_clauseContext ------------------------------------------------------------------

Gauss200Parser::Grant_on_functions_clauseContext::Grant_on_functions_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Grant_on_functions_clauseContext::GRANT_GS() {
  return getToken(Gauss200Parser::GRANT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_functions_clauseContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_functions_clauseContext::FUNCTIONS_GS() {
  return getToken(Gauss200Parser::FUNCTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_functions_clauseContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Grant_on_functions_clauseContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

Gauss200Parser::Function_privilegeContext* Gauss200Parser::Grant_on_functions_clauseContext::function_privilege() {
  return getRuleContext<Gauss200Parser::Function_privilegeContext>(0);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::Grant_on_functions_clauseContext::all_privileges() {
  return getRuleContext<Gauss200Parser::All_privilegesContext>(0);
}

Gauss200Parser::With_grant_optionContext* Gauss200Parser::Grant_on_functions_clauseContext::with_grant_option() {
  return getRuleContext<Gauss200Parser::With_grant_optionContext>(0);
}


size_t Gauss200Parser::Grant_on_functions_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_on_functions_clause;
}

void Gauss200Parser::Grant_on_functions_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_on_functions_clause(this);
}

void Gauss200Parser::Grant_on_functions_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_on_functions_clause(this);
}


antlrcpp::Any Gauss200Parser::Grant_on_functions_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_on_functions_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_on_functions_clauseContext* Gauss200Parser::grant_on_functions_clause() {
  Grant_on_functions_clauseContext *_localctx = _tracker.createInstance<Grant_on_functions_clauseContext>(_ctx, getState());
  enterRule(_localctx, 96, Gauss200Parser::RuleGrant_on_functions_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1483);
    match(Gauss200Parser::GRANT_GS);
    setState(1486);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::EXECUTE_GS: {
        setState(1484);
        function_privilege();
        break;
      }

      case Gauss200Parser::ALL_GS: {
        setState(1485);
        all_privileges();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1488);
    match(Gauss200Parser::ON_GS);
    setState(1489);
    match(Gauss200Parser::FUNCTIONS_GS);
    setState(1490);
    match(Gauss200Parser::TO_GS);
    setState(1491);
    grant_revoke_objects();
    setState(1493);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(1492);
      with_grant_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_privilegeContext ------------------------------------------------------------------

Gauss200Parser::Function_privilegeContext::Function_privilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Function_privilegeContext::EXECUTE_GS() {
  return getToken(Gauss200Parser::EXECUTE_GS, 0);
}


size_t Gauss200Parser::Function_privilegeContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunction_privilege;
}

void Gauss200Parser::Function_privilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_privilege(this);
}

void Gauss200Parser::Function_privilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_privilege(this);
}


antlrcpp::Any Gauss200Parser::Function_privilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunction_privilege(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Function_privilegeContext* Gauss200Parser::function_privilege() {
  Function_privilegeContext *_localctx = _tracker.createInstance<Function_privilegeContext>(_ctx, getState());
  enterRule(_localctx, 98, Gauss200Parser::RuleFunction_privilege);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1495);
    match(Gauss200Parser::EXECUTE_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_on_types_clauseContext ------------------------------------------------------------------

Gauss200Parser::Grant_on_types_clauseContext::Grant_on_types_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Grant_on_types_clauseContext::GRANT_GS() {
  return getToken(Gauss200Parser::GRANT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_types_clauseContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_types_clauseContext::TYPES_GS() {
  return getToken(Gauss200Parser::TYPES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_types_clauseContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Grant_on_types_clauseContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

Gauss200Parser::Type_privilegeContext* Gauss200Parser::Grant_on_types_clauseContext::type_privilege() {
  return getRuleContext<Gauss200Parser::Type_privilegeContext>(0);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::Grant_on_types_clauseContext::all_privileges() {
  return getRuleContext<Gauss200Parser::All_privilegesContext>(0);
}

Gauss200Parser::With_grant_optionContext* Gauss200Parser::Grant_on_types_clauseContext::with_grant_option() {
  return getRuleContext<Gauss200Parser::With_grant_optionContext>(0);
}


size_t Gauss200Parser::Grant_on_types_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_on_types_clause;
}

void Gauss200Parser::Grant_on_types_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_on_types_clause(this);
}

void Gauss200Parser::Grant_on_types_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_on_types_clause(this);
}


antlrcpp::Any Gauss200Parser::Grant_on_types_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_on_types_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_on_types_clauseContext* Gauss200Parser::grant_on_types_clause() {
  Grant_on_types_clauseContext *_localctx = _tracker.createInstance<Grant_on_types_clauseContext>(_ctx, getState());
  enterRule(_localctx, 100, Gauss200Parser::RuleGrant_on_types_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1497);
    match(Gauss200Parser::GRANT_GS);
    setState(1500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::USAGE_GS: {
        setState(1498);
        type_privilege();
        break;
      }

      case Gauss200Parser::ALL_GS: {
        setState(1499);
        all_privileges();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1502);
    match(Gauss200Parser::ON_GS);
    setState(1503);
    match(Gauss200Parser::TYPES_GS);
    setState(1504);
    match(Gauss200Parser::TO_GS);
    setState(1505);
    grant_revoke_objects();
    setState(1507);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(1506);
      with_grant_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_privilegeContext ------------------------------------------------------------------

Gauss200Parser::Type_privilegeContext::Type_privilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Type_privilegeContext::USAGE_GS() {
  return getToken(Gauss200Parser::USAGE_GS, 0);
}


size_t Gauss200Parser::Type_privilegeContext::getRuleIndex() const {
  return Gauss200Parser::RuleType_privilege;
}

void Gauss200Parser::Type_privilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_privilege(this);
}

void Gauss200Parser::Type_privilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_privilege(this);
}


antlrcpp::Any Gauss200Parser::Type_privilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitType_privilege(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Type_privilegeContext* Gauss200Parser::type_privilege() {
  Type_privilegeContext *_localctx = _tracker.createInstance<Type_privilegeContext>(_ctx, getState());
  enterRule(_localctx, 102, Gauss200Parser::RuleType_privilege);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1509);
    match(Gauss200Parser::USAGE_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Revoke_on_tables_clauseContext ------------------------------------------------------------------

Gauss200Parser::Revoke_on_tables_clauseContext::Revoke_on_tables_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Revoke_on_tables_clauseContext::REVOKE_GS() {
  return getToken(Gauss200Parser::REVOKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_tables_clauseContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_tables_clauseContext::TABLES_GS() {
  return getToken(Gauss200Parser::TABLES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_tables_clauseContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Revoke_on_tables_clauseContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

Gauss200Parser::Table_privilegesContext* Gauss200Parser::Revoke_on_tables_clauseContext::table_privileges() {
  return getRuleContext<Gauss200Parser::Table_privilegesContext>(0);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::Revoke_on_tables_clauseContext::all_privileges() {
  return getRuleContext<Gauss200Parser::All_privilegesContext>(0);
}

Gauss200Parser::Grant_option_forContext* Gauss200Parser::Revoke_on_tables_clauseContext::grant_option_for() {
  return getRuleContext<Gauss200Parser::Grant_option_forContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Revoke_on_tables_clauseContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Revoke_on_tables_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleRevoke_on_tables_clause;
}

void Gauss200Parser::Revoke_on_tables_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRevoke_on_tables_clause(this);
}

void Gauss200Parser::Revoke_on_tables_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRevoke_on_tables_clause(this);
}


antlrcpp::Any Gauss200Parser::Revoke_on_tables_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRevoke_on_tables_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Revoke_on_tables_clauseContext* Gauss200Parser::revoke_on_tables_clause() {
  Revoke_on_tables_clauseContext *_localctx = _tracker.createInstance<Revoke_on_tables_clauseContext>(_ctx, getState());
  enterRule(_localctx, 104, Gauss200Parser::RuleRevoke_on_tables_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1511);
    match(Gauss200Parser::REVOKE_GS);
    setState(1513);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::GRANT_GS) {
      setState(1512);
      grant_option_for();
    }
    setState(1517);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::UPDATE_GS: {
        setState(1515);
        table_privileges();
        break;
      }

      case Gauss200Parser::ALL_GS: {
        setState(1516);
        all_privileges();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1519);
    match(Gauss200Parser::ON_GS);
    setState(1520);
    match(Gauss200Parser::TABLES_GS);
    setState(1521);
    match(Gauss200Parser::FROM_GS);
    setState(1522);
    grant_revoke_objects();
    setState(1524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(1523);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_option_forContext ------------------------------------------------------------------

Gauss200Parser::Grant_option_forContext::Grant_option_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Grant_option_forContext::GRANT_GS() {
  return getToken(Gauss200Parser::GRANT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_option_forContext::OPTION_GS() {
  return getToken(Gauss200Parser::OPTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_option_forContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}


size_t Gauss200Parser::Grant_option_forContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_option_for;
}

void Gauss200Parser::Grant_option_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_option_for(this);
}

void Gauss200Parser::Grant_option_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_option_for(this);
}


antlrcpp::Any Gauss200Parser::Grant_option_forContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_option_for(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_option_forContext* Gauss200Parser::grant_option_for() {
  Grant_option_forContext *_localctx = _tracker.createInstance<Grant_option_forContext>(_ctx, getState());
  enterRule(_localctx, 106, Gauss200Parser::RuleGrant_option_for);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1526);
    match(Gauss200Parser::GRANT_GS);
    setState(1527);
    match(Gauss200Parser::OPTION_GS);
    setState(1528);
    match(Gauss200Parser::FOR_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cascade_restrictContext ------------------------------------------------------------------

Gauss200Parser::Cascade_restrictContext::Cascade_restrictContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Cascade_restrictContext::CASCADE_GS() {
  return getToken(Gauss200Parser::CASCADE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cascade_restrictContext::CONSTRAINTS_GS() {
  return getToken(Gauss200Parser::CONSTRAINTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cascade_restrictContext::RESTRICT_GS() {
  return getToken(Gauss200Parser::RESTRICT_GS, 0);
}


size_t Gauss200Parser::Cascade_restrictContext::getRuleIndex() const {
  return Gauss200Parser::RuleCascade_restrict;
}

void Gauss200Parser::Cascade_restrictContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCascade_restrict(this);
}

void Gauss200Parser::Cascade_restrictContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCascade_restrict(this);
}


antlrcpp::Any Gauss200Parser::Cascade_restrictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCascade_restrict(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::cascade_restrict() {
  Cascade_restrictContext *_localctx = _tracker.createInstance<Cascade_restrictContext>(_ctx, getState());
  enterRule(_localctx, 108, Gauss200Parser::RuleCascade_restrict);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1535);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::CASCADE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1530);
        match(Gauss200Parser::CASCADE_GS);
        setState(1532);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::CONSTRAINTS_GS) {
          setState(1531);
          match(Gauss200Parser::CONSTRAINTS_GS);
        }
        break;
      }

      case Gauss200Parser::RESTRICT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1534);
        match(Gauss200Parser::RESTRICT_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Revoke_on_functions_clauseContext ------------------------------------------------------------------

Gauss200Parser::Revoke_on_functions_clauseContext::Revoke_on_functions_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Revoke_on_functions_clauseContext::REVOKE_GS() {
  return getToken(Gauss200Parser::REVOKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_functions_clauseContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_functions_clauseContext::FUNCTIONS_GS() {
  return getToken(Gauss200Parser::FUNCTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_functions_clauseContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Revoke_on_functions_clauseContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

Gauss200Parser::Function_privilegeContext* Gauss200Parser::Revoke_on_functions_clauseContext::function_privilege() {
  return getRuleContext<Gauss200Parser::Function_privilegeContext>(0);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::Revoke_on_functions_clauseContext::all_privileges() {
  return getRuleContext<Gauss200Parser::All_privilegesContext>(0);
}

Gauss200Parser::Grant_option_forContext* Gauss200Parser::Revoke_on_functions_clauseContext::grant_option_for() {
  return getRuleContext<Gauss200Parser::Grant_option_forContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Revoke_on_functions_clauseContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Revoke_on_functions_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleRevoke_on_functions_clause;
}

void Gauss200Parser::Revoke_on_functions_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRevoke_on_functions_clause(this);
}

void Gauss200Parser::Revoke_on_functions_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRevoke_on_functions_clause(this);
}


antlrcpp::Any Gauss200Parser::Revoke_on_functions_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRevoke_on_functions_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Revoke_on_functions_clauseContext* Gauss200Parser::revoke_on_functions_clause() {
  Revoke_on_functions_clauseContext *_localctx = _tracker.createInstance<Revoke_on_functions_clauseContext>(_ctx, getState());
  enterRule(_localctx, 110, Gauss200Parser::RuleRevoke_on_functions_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1537);
    match(Gauss200Parser::REVOKE_GS);
    setState(1539);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::GRANT_GS) {
      setState(1538);
      grant_option_for();
    }
    setState(1543);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::EXECUTE_GS: {
        setState(1541);
        function_privilege();
        break;
      }

      case Gauss200Parser::ALL_GS: {
        setState(1542);
        all_privileges();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1545);
    match(Gauss200Parser::ON_GS);
    setState(1546);
    match(Gauss200Parser::FUNCTIONS_GS);
    setState(1547);
    match(Gauss200Parser::FROM_GS);
    setState(1548);
    grant_revoke_objects();
    setState(1550);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(1549);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Revoke_on_types_clauseContext ------------------------------------------------------------------

Gauss200Parser::Revoke_on_types_clauseContext::Revoke_on_types_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Revoke_on_types_clauseContext::REVOKE_GS() {
  return getToken(Gauss200Parser::REVOKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_types_clauseContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_types_clauseContext::TYPES_GS() {
  return getToken(Gauss200Parser::TYPES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Revoke_on_types_clauseContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Revoke_on_types_clauseContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

Gauss200Parser::Type_privilegeContext* Gauss200Parser::Revoke_on_types_clauseContext::type_privilege() {
  return getRuleContext<Gauss200Parser::Type_privilegeContext>(0);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::Revoke_on_types_clauseContext::all_privileges() {
  return getRuleContext<Gauss200Parser::All_privilegesContext>(0);
}

Gauss200Parser::Grant_option_forContext* Gauss200Parser::Revoke_on_types_clauseContext::grant_option_for() {
  return getRuleContext<Gauss200Parser::Grant_option_forContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Revoke_on_types_clauseContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Revoke_on_types_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleRevoke_on_types_clause;
}

void Gauss200Parser::Revoke_on_types_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRevoke_on_types_clause(this);
}

void Gauss200Parser::Revoke_on_types_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRevoke_on_types_clause(this);
}


antlrcpp::Any Gauss200Parser::Revoke_on_types_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRevoke_on_types_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Revoke_on_types_clauseContext* Gauss200Parser::revoke_on_types_clause() {
  Revoke_on_types_clauseContext *_localctx = _tracker.createInstance<Revoke_on_types_clauseContext>(_ctx, getState());
  enterRule(_localctx, 112, Gauss200Parser::RuleRevoke_on_types_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1552);
    match(Gauss200Parser::REVOKE_GS);
    setState(1554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::GRANT_GS) {
      setState(1553);
      grant_option_for();
    }
    setState(1558);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::USAGE_GS: {
        setState(1556);
        type_privilege();
        break;
      }

      case Gauss200Parser::ALL_GS: {
        setState(1557);
        all_privileges();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1560);
    match(Gauss200Parser::ON_GS);
    setState(1561);
    match(Gauss200Parser::TYPES_GS);
    setState(1562);
    match(Gauss200Parser::FROM_GS);
    setState(1563);
    grant_revoke_objects();
    setState(1565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(1564);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_directory_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_directory_stmtContext::Alter_directory_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_directory_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_directory_stmtContext::DIRECTORY_GS() {
  return getToken(Gauss200Parser::DIRECTORY_GS, 0);
}

Gauss200Parser::Directory_nameContext* Gauss200Parser::Alter_directory_stmtContext::directory_name() {
  return getRuleContext<Gauss200Parser::Directory_nameContext>(0);
}

Gauss200Parser::Owner_to_optionContext* Gauss200Parser::Alter_directory_stmtContext::owner_to_option() {
  return getRuleContext<Gauss200Parser::Owner_to_optionContext>(0);
}


size_t Gauss200Parser::Alter_directory_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_directory_stmt;
}

void Gauss200Parser::Alter_directory_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_directory_stmt(this);
}

void Gauss200Parser::Alter_directory_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_directory_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_directory_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_directory_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_directory_stmtContext* Gauss200Parser::alter_directory_stmt() {
  Alter_directory_stmtContext *_localctx = _tracker.createInstance<Alter_directory_stmtContext>(_ctx, getState());
  enterRule(_localctx, 114, Gauss200Parser::RuleAlter_directory_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1567);
    match(Gauss200Parser::ALTER_GS);
    setState(1568);
    match(Gauss200Parser::DIRECTORY_GS);
    setState(1569);
    directory_name();
    setState(1570);
    owner_to_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Directory_nameContext ------------------------------------------------------------------

Gauss200Parser::Directory_nameContext::Directory_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Directory_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Directory_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleDirectory_name;
}

void Gauss200Parser::Directory_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirectory_name(this);
}

void Gauss200Parser::Directory_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirectory_name(this);
}


antlrcpp::Any Gauss200Parser::Directory_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDirectory_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Directory_nameContext* Gauss200Parser::directory_name() {
  Directory_nameContext *_localctx = _tracker.createInstance<Directory_nameContext>(_ctx, getState());
  enterRule(_localctx, 116, Gauss200Parser::RuleDirectory_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1572);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_foreign_table_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_foreign_table_stmtContext::Alter_foreign_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_stmtContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Alter_foreign_table_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Alter_foreign_table_optionContext* Gauss200Parser::Alter_foreign_table_stmtContext::alter_foreign_table_option() {
  return getRuleContext<Gauss200Parser::Alter_foreign_table_optionContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_foreign_table_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Alter_foreign_table_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Alter_foreign_table_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_foreign_table_stmt;
}

void Gauss200Parser::Alter_foreign_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_foreign_table_stmt(this);
}

void Gauss200Parser::Alter_foreign_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_foreign_table_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_foreign_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_foreign_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_foreign_table_stmtContext* Gauss200Parser::alter_foreign_table_stmt() {
  Alter_foreign_table_stmtContext *_localctx = _tracker.createInstance<Alter_foreign_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 118, Gauss200Parser::RuleAlter_foreign_table_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1574);
    match(Gauss200Parser::ALTER_GS);
    setState(1575);
    match(Gauss200Parser::FOREIGN_GS);
    setState(1576);
    match(Gauss200Parser::TABLE_GS);
    setState(1578);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      setState(1577);
      if_exists_or_not();
      break;
    }

    }
    setState(1580);
    table_name();
    setState(1581);
    alter_foreign_table_option();
    setState(1583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(1582);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_exists_or_notContext ------------------------------------------------------------------

Gauss200Parser::If_exists_or_notContext::If_exists_or_notContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::If_exists_or_notContext::IF_GS() {
  return getToken(Gauss200Parser::IF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::If_exists_or_notContext::EXISTS_GS() {
  return getToken(Gauss200Parser::EXISTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::If_exists_or_notContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}


size_t Gauss200Parser::If_exists_or_notContext::getRuleIndex() const {
  return Gauss200Parser::RuleIf_exists_or_not;
}

void Gauss200Parser::If_exists_or_notContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_exists_or_not(this);
}

void Gauss200Parser::If_exists_or_notContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_exists_or_not(this);
}


antlrcpp::Any Gauss200Parser::If_exists_or_notContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIf_exists_or_not(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::if_exists_or_not() {
  If_exists_or_notContext *_localctx = _tracker.createInstance<If_exists_or_notContext>(_ctx, getState());
  enterRule(_localctx, 120, Gauss200Parser::RuleIf_exists_or_not);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1585);
    match(Gauss200Parser::IF_GS);
    setState(1587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::NOT_GS) {
      setState(1586);
      match(Gauss200Parser::NOT_GS);
    }
    setState(1589);
    match(Gauss200Parser::EXISTS_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_nameContext ------------------------------------------------------------------

Gauss200Parser::Table_nameContext::Table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Table_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::Table_nameContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::Table_nameContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::Table_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_name;
}

void Gauss200Parser::Table_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_name(this);
}

void Gauss200Parser::Table_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_name(this);
}


antlrcpp::Any Gauss200Parser::Table_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::table_name() {
  Table_nameContext *_localctx = _tracker.createInstance<Table_nameContext>(_ctx, getState());
  enterRule(_localctx, 122, Gauss200Parser::RuleTable_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1591);
    identifier();
    setState(1595);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1592);
        attr(); 
      }
      setState(1597);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrContext ------------------------------------------------------------------

Gauss200Parser::AttrContext::AttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::AttrContext::PERIOD() {
  return getToken(Gauss200Parser::PERIOD, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::AttrContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::AttrContext::getRuleIndex() const {
  return Gauss200Parser::RuleAttr;
}

void Gauss200Parser::AttrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttr(this);
}

void Gauss200Parser::AttrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttr(this);
}


antlrcpp::Any Gauss200Parser::AttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAttr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::AttrContext* Gauss200Parser::attr() {
  AttrContext *_localctx = _tracker.createInstance<AttrContext>(_ctx, getState());
  enterRule(_localctx, 124, Gauss200Parser::RuleAttr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1598);
    match(Gauss200Parser::PERIOD);
    setState(1599);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_foreign_table_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_foreign_table_optionContext::Alter_foreign_table_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::Alter_foreign_table_optionContext::alter_property_options() {
  return getRuleContext<Gauss200Parser::Alter_property_optionsContext>(0);
}

Gauss200Parser::Owner_to_optionContext* Gauss200Parser::Alter_foreign_table_optionContext::owner_to_option() {
  return getRuleContext<Gauss200Parser::Owner_to_optionContext>(0);
}

Gauss200Parser::Alter_foreign_table_action_listContext* Gauss200Parser::Alter_foreign_table_optionContext::alter_foreign_table_action_list() {
  return getRuleContext<Gauss200Parser::Alter_foreign_table_action_listContext>(0);
}

Gauss200Parser::Alter_add_information_constraintContext* Gauss200Parser::Alter_foreign_table_optionContext::alter_add_information_constraint() {
  return getRuleContext<Gauss200Parser::Alter_add_information_constraintContext>(0);
}

Gauss200Parser::Alter_drop_information_constraintContext* Gauss200Parser::Alter_foreign_table_optionContext::alter_drop_information_constraint() {
  return getRuleContext<Gauss200Parser::Alter_drop_information_constraintContext>(0);
}


size_t Gauss200Parser::Alter_foreign_table_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_foreign_table_option;
}

void Gauss200Parser::Alter_foreign_table_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_foreign_table_option(this);
}

void Gauss200Parser::Alter_foreign_table_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_foreign_table_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_foreign_table_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_foreign_table_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_foreign_table_optionContext* Gauss200Parser::alter_foreign_table_option() {
  Alter_foreign_table_optionContext *_localctx = _tracker.createInstance<Alter_foreign_table_optionContext>(_ctx, getState());
  enterRule(_localctx, 126, Gauss200Parser::RuleAlter_foreign_table_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1606);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::OPTIONS_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1601);
        alter_property_options();
        break;
      }

      case Gauss200Parser::OWNER_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1602);
        owner_to_option();
        break;
      }

      case Gauss200Parser::ALTER_GS: {
        enterOuterAlt(_localctx, 3);
        setState(1603);
        alter_foreign_table_action_list();
        break;
      }

      case Gauss200Parser::ADD_GS: {
        enterOuterAlt(_localctx, 4);
        setState(1604);
        alter_add_information_constraint();
        break;
      }

      case Gauss200Parser::DROP_GS: {
        enterOuterAlt(_localctx, 5);
        setState(1605);
        alter_drop_information_constraint();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_foreign_table_action_listContext ------------------------------------------------------------------

Gauss200Parser::Alter_foreign_table_action_listContext::Alter_foreign_table_action_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Alter_foreign_table_actionContext *> Gauss200Parser::Alter_foreign_table_action_listContext::alter_foreign_table_action() {
  return getRuleContexts<Gauss200Parser::Alter_foreign_table_actionContext>();
}

Gauss200Parser::Alter_foreign_table_actionContext* Gauss200Parser::Alter_foreign_table_action_listContext::alter_foreign_table_action(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_foreign_table_actionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_foreign_table_action_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_action_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Alter_foreign_table_action_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_foreign_table_action_list;
}

void Gauss200Parser::Alter_foreign_table_action_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_foreign_table_action_list(this);
}

void Gauss200Parser::Alter_foreign_table_action_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_foreign_table_action_list(this);
}


antlrcpp::Any Gauss200Parser::Alter_foreign_table_action_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_foreign_table_action_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_foreign_table_action_listContext* Gauss200Parser::alter_foreign_table_action_list() {
  Alter_foreign_table_action_listContext *_localctx = _tracker.createInstance<Alter_foreign_table_action_listContext>(_ctx, getState());
  enterRule(_localctx, 128, Gauss200Parser::RuleAlter_foreign_table_action_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1608);
    alter_foreign_table_action();
    setState(1613);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1609);
      match(Gauss200Parser::COMMA);
      setState(1610);
      alter_foreign_table_action();
      setState(1615);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_foreign_table_actionContext ------------------------------------------------------------------

Gauss200Parser::Alter_foreign_table_actionContext::Alter_foreign_table_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_actionContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Alter_foreign_table_actionContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

Gauss200Parser::Alter_foreign_table_action_optionContext* Gauss200Parser::Alter_foreign_table_actionContext::alter_foreign_table_action_option() {
  return getRuleContext<Gauss200Parser::Alter_foreign_table_action_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_actionContext::COLUMN_GS() {
  return getToken(Gauss200Parser::COLUMN_GS, 0);
}


size_t Gauss200Parser::Alter_foreign_table_actionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_foreign_table_action;
}

void Gauss200Parser::Alter_foreign_table_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_foreign_table_action(this);
}

void Gauss200Parser::Alter_foreign_table_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_foreign_table_action(this);
}


antlrcpp::Any Gauss200Parser::Alter_foreign_table_actionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_foreign_table_action(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_foreign_table_actionContext* Gauss200Parser::alter_foreign_table_action() {
  Alter_foreign_table_actionContext *_localctx = _tracker.createInstance<Alter_foreign_table_actionContext>(_ctx, getState());
  enterRule(_localctx, 130, Gauss200Parser::RuleAlter_foreign_table_action);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1616);
    match(Gauss200Parser::ALTER_GS);
    setState(1618);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      setState(1617);
      match(Gauss200Parser::COLUMN_GS);
      break;
    }

    }
    setState(1620);
    column_name();
    setState(1621);
    alter_foreign_table_action_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_nameContext ------------------------------------------------------------------

Gauss200Parser::Column_nameContext::Column_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Column_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::Column_nameContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::Column_nameContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::Column_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_name;
}

void Gauss200Parser::Column_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_name(this);
}

void Gauss200Parser::Column_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_name(this);
}


antlrcpp::Any Gauss200Parser::Column_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::column_name() {
  Column_nameContext *_localctx = _tracker.createInstance<Column_nameContext>(_ctx, getState());
  enterRule(_localctx, 132, Gauss200Parser::RuleColumn_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1623);
    identifier();
    setState(1627);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::PERIOD) {
      setState(1624);
      attr();
      setState(1629);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_foreign_table_action_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_foreign_table_action_optionContext::Alter_foreign_table_action_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_action_optionContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Alter_foreign_table_action_optionContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_action_optionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_action_optionContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_action_optionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_action_optionContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_foreign_table_action_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

Gauss200Parser::Alter_set_statistics_optionContext* Gauss200Parser::Alter_foreign_table_action_optionContext::alter_set_statistics_option() {
  return getRuleContext<Gauss200Parser::Alter_set_statistics_optionContext>(0);
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::Alter_foreign_table_action_optionContext::alter_property_options() {
  return getRuleContext<Gauss200Parser::Alter_property_optionsContext>(0);
}


size_t Gauss200Parser::Alter_foreign_table_action_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_foreign_table_action_option;
}

void Gauss200Parser::Alter_foreign_table_action_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_foreign_table_action_option(this);
}

void Gauss200Parser::Alter_foreign_table_action_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_foreign_table_action_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_foreign_table_action_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_foreign_table_action_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_foreign_table_action_optionContext* Gauss200Parser::alter_foreign_table_action_option() {
  Alter_foreign_table_action_optionContext *_localctx = _tracker.createInstance<Alter_foreign_table_action_optionContext>(_ctx, getState());
  enterRule(_localctx, 134, Gauss200Parser::RuleAlter_foreign_table_action_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1641);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1632);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::SET_GS) {
        setState(1630);
        match(Gauss200Parser::SET_GS);
        setState(1631);
        match(Gauss200Parser::DATA_GS);
      }
      setState(1634);
      match(Gauss200Parser::TYPE_GS);
      setState(1635);
      typename_gs();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1636);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::DROP_GS || _la == Gauss200Parser::SET_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1637);
      match(Gauss200Parser::NOT_GS);
      setState(1638);
      match(Gauss200Parser::NULL_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1639);
      alter_set_statistics_option();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1640);
      alter_property_options();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_set_statistics_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_set_statistics_optionContext::Alter_set_statistics_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_set_statistics_optionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_set_statistics_optionContext::STATISTICS_GS() {
  return getToken(Gauss200Parser::STATISTICS_GS, 0);
}

Gauss200Parser::IntegerContext* Gauss200Parser::Alter_set_statistics_optionContext::integer() {
  return getRuleContext<Gauss200Parser::IntegerContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_set_statistics_optionContext::PERCENT_GS() {
  return getToken(Gauss200Parser::PERCENT_GS, 0);
}


size_t Gauss200Parser::Alter_set_statistics_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_set_statistics_option;
}

void Gauss200Parser::Alter_set_statistics_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_set_statistics_option(this);
}

void Gauss200Parser::Alter_set_statistics_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_set_statistics_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_set_statistics_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_set_statistics_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_set_statistics_optionContext* Gauss200Parser::alter_set_statistics_option() {
  Alter_set_statistics_optionContext *_localctx = _tracker.createInstance<Alter_set_statistics_optionContext>(_ctx, getState());
  enterRule(_localctx, 136, Gauss200Parser::RuleAlter_set_statistics_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1643);
    match(Gauss200Parser::SET_GS);
    setState(1644);
    match(Gauss200Parser::STATISTICS_GS);
    setState(1646);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(1645);
      match(Gauss200Parser::PERCENT_GS);
      break;
    }

    }
    setState(1648);
    integer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_add_information_constraintContext ------------------------------------------------------------------

Gauss200Parser::Alter_add_information_constraintContext::Alter_add_information_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_add_information_constraintContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

Gauss200Parser::Column_constraint_primary_uniqueContext* Gauss200Parser::Alter_add_information_constraintContext::column_constraint_primary_unique() {
  return getRuleContext<Gauss200Parser::Column_constraint_primary_uniqueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_add_information_constraintContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Alter_add_information_constraintContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

Gauss200Parser::Add_info_constraint_optionContext* Gauss200Parser::Alter_add_information_constraintContext::add_info_constraint_option() {
  return getRuleContext<Gauss200Parser::Add_info_constraint_optionContext>(0);
}


size_t Gauss200Parser::Alter_add_information_constraintContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_add_information_constraint;
}

void Gauss200Parser::Alter_add_information_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_add_information_constraint(this);
}

void Gauss200Parser::Alter_add_information_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_add_information_constraint(this);
}


antlrcpp::Any Gauss200Parser::Alter_add_information_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_add_information_constraint(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_add_information_constraintContext* Gauss200Parser::alter_add_information_constraint() {
  Alter_add_information_constraintContext *_localctx = _tracker.createInstance<Alter_add_information_constraintContext>(_ctx, getState());
  enterRule(_localctx, 138, Gauss200Parser::RuleAlter_add_information_constraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1650);
    match(Gauss200Parser::ADD_GS);
    setState(1653);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONSTRAINT_GS) {
      setState(1651);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(1652);
      constraint_name();
    }
    setState(1655);
    column_constraint_primary_unique();
    setState(1657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::NOT_GS || _la == Gauss200Parser::ENFORCED_GS) {
      setState(1656);
      add_info_constraint_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_constraint_primary_uniqueContext ------------------------------------------------------------------

Gauss200Parser::Column_constraint_primary_uniqueContext::Column_constraint_primary_uniqueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Column_constraint_primary_uniqueContext::PRIMARY_GS() {
  return getToken(Gauss200Parser::PRIMARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_constraint_primary_uniqueContext::KEY_GS() {
  return getToken(Gauss200Parser::KEY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_constraint_primary_uniqueContext::UNIQUE_GS() {
  return getToken(Gauss200Parser::UNIQUE_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Column_constraint_primary_uniqueContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}


size_t Gauss200Parser::Column_constraint_primary_uniqueContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_constraint_primary_unique;
}

void Gauss200Parser::Column_constraint_primary_uniqueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_constraint_primary_unique(this);
}

void Gauss200Parser::Column_constraint_primary_uniqueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_constraint_primary_unique(this);
}


antlrcpp::Any Gauss200Parser::Column_constraint_primary_uniqueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_constraint_primary_unique(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_constraint_primary_uniqueContext* Gauss200Parser::column_constraint_primary_unique() {
  Column_constraint_primary_uniqueContext *_localctx = _tracker.createInstance<Column_constraint_primary_uniqueContext>(_ctx, getState());
  enterRule(_localctx, 140, Gauss200Parser::RuleColumn_constraint_primary_unique);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1662);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::PRIMARY_GS: {
        setState(1659);
        match(Gauss200Parser::PRIMARY_GS);
        setState(1660);
        match(Gauss200Parser::KEY_GS);
        break;
      }

      case Gauss200Parser::UNIQUE_GS: {
        setState(1661);
        match(Gauss200Parser::UNIQUE_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1665);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(1664);
      paren_column_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraint_nameContext ------------------------------------------------------------------

Gauss200Parser::Constraint_nameContext::Constraint_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Constraint_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Constraint_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleConstraint_name;
}

void Gauss200Parser::Constraint_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint_name(this);
}

void Gauss200Parser::Constraint_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint_name(this);
}


antlrcpp::Any Gauss200Parser::Constraint_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConstraint_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::constraint_name() {
  Constraint_nameContext *_localctx = _tracker.createInstance<Constraint_nameContext>(_ctx, getState());
  enterRule(_localctx, 142, Gauss200Parser::RuleConstraint_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1667);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_info_constraint_optionContext ------------------------------------------------------------------

Gauss200Parser::Add_info_constraint_optionContext::Add_info_constraint_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Add_info_constraint_optionContext::ENFORCED_GS() {
  return getToken(Gauss200Parser::ENFORCED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Add_info_constraint_optionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Add_info_constraint_optionContext::QUERY_GS() {
  return getToken(Gauss200Parser::QUERY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Add_info_constraint_optionContext::OPTIMIZATION_GS() {
  return getToken(Gauss200Parser::OPTIMIZATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Add_info_constraint_optionContext::ENABLE_GS() {
  return getToken(Gauss200Parser::ENABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Add_info_constraint_optionContext::DISABLE_GS() {
  return getToken(Gauss200Parser::DISABLE_GS, 0);
}


size_t Gauss200Parser::Add_info_constraint_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAdd_info_constraint_option;
}

void Gauss200Parser::Add_info_constraint_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_info_constraint_option(this);
}

void Gauss200Parser::Add_info_constraint_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_info_constraint_option(this);
}


antlrcpp::Any Gauss200Parser::Add_info_constraint_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAdd_info_constraint_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Add_info_constraint_optionContext* Gauss200Parser::add_info_constraint_option() {
  Add_info_constraint_optionContext *_localctx = _tracker.createInstance<Add_info_constraint_optionContext>(_ctx, getState());
  enterRule(_localctx, 144, Gauss200Parser::RuleAdd_info_constraint_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1677);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ENFORCED_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1669);
        match(Gauss200Parser::ENFORCED_GS);
        break;
      }

      case Gauss200Parser::NOT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1670);
        match(Gauss200Parser::NOT_GS);
        setState(1671);
        match(Gauss200Parser::ENFORCED_GS);
        setState(1675);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::DISABLE_GS

        || _la == Gauss200Parser::ENABLE_GS) {
          setState(1672);
          _la = _input->LA(1);
          if (!(_la == Gauss200Parser::DISABLE_GS

          || _la == Gauss200Parser::ENABLE_GS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1673);
          match(Gauss200Parser::QUERY_GS);
          setState(1674);
          match(Gauss200Parser::OPTIMIZATION_GS);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_drop_information_constraintContext ------------------------------------------------------------------

Gauss200Parser::Alter_drop_information_constraintContext::Alter_drop_information_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_drop_information_constraintContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_drop_information_constraintContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Alter_drop_information_constraintContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}


size_t Gauss200Parser::Alter_drop_information_constraintContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_drop_information_constraint;
}

void Gauss200Parser::Alter_drop_information_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_drop_information_constraint(this);
}

void Gauss200Parser::Alter_drop_information_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_drop_information_constraint(this);
}


antlrcpp::Any Gauss200Parser::Alter_drop_information_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_drop_information_constraint(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_drop_information_constraintContext* Gauss200Parser::alter_drop_information_constraint() {
  Alter_drop_information_constraintContext *_localctx = _tracker.createInstance<Alter_drop_information_constraintContext>(_ctx, getState());
  enterRule(_localctx, 146, Gauss200Parser::RuleAlter_drop_information_constraint);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1679);
    match(Gauss200Parser::DROP_GS);
    setState(1680);
    match(Gauss200Parser::CONSTRAINT_GS);
    setState(1681);
    constraint_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_function_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_function_stmtContext::Alter_function_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_function_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_stmtContext::FUNCTION_GS() {
  return getToken(Gauss200Parser::FUNCTION_GS, 0);
}

Gauss200Parser::Function_with_argtypesContext* Gauss200Parser::Alter_function_stmtContext::function_with_argtypes() {
  return getRuleContext<Gauss200Parser::Function_with_argtypesContext>(0);
}

Gauss200Parser::Alter_func_optionContext* Gauss200Parser::Alter_function_stmtContext::alter_func_option() {
  return getRuleContext<Gauss200Parser::Alter_func_optionContext>(0);
}


size_t Gauss200Parser::Alter_function_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_function_stmt;
}

void Gauss200Parser::Alter_function_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_function_stmt(this);
}

void Gauss200Parser::Alter_function_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_function_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_function_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_function_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_function_stmtContext* Gauss200Parser::alter_function_stmt() {
  Alter_function_stmtContext *_localctx = _tracker.createInstance<Alter_function_stmtContext>(_ctx, getState());
  enterRule(_localctx, 148, Gauss200Parser::RuleAlter_function_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1683);
    match(Gauss200Parser::ALTER_GS);
    setState(1684);
    match(Gauss200Parser::FUNCTION_GS);
    setState(1685);
    function_with_argtypes();
    setState(1686);
    alter_func_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_with_argtypesContext ------------------------------------------------------------------

Gauss200Parser::Function_with_argtypesContext::Function_with_argtypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Func_nameContext* Gauss200Parser::Function_with_argtypesContext::func_name() {
  return getRuleContext<Gauss200Parser::Func_nameContext>(0);
}

Gauss200Parser::Func_argsContext* Gauss200Parser::Function_with_argtypesContext::func_args() {
  return getRuleContext<Gauss200Parser::Func_argsContext>(0);
}


size_t Gauss200Parser::Function_with_argtypesContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunction_with_argtypes;
}

void Gauss200Parser::Function_with_argtypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_with_argtypes(this);
}

void Gauss200Parser::Function_with_argtypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_with_argtypes(this);
}


antlrcpp::Any Gauss200Parser::Function_with_argtypesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunction_with_argtypes(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Function_with_argtypesContext* Gauss200Parser::function_with_argtypes() {
  Function_with_argtypesContext *_localctx = _tracker.createInstance<Function_with_argtypesContext>(_ctx, getState());
  enterRule(_localctx, 150, Gauss200Parser::RuleFunction_with_argtypes);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1688);
    func_name();
    setState(1689);
    func_args();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_argsContext ------------------------------------------------------------------

Gauss200Parser::Func_argsContext::Func_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Func_argsContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Func_argsContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Func_args_listContext* Gauss200Parser::Func_argsContext::func_args_list() {
  return getRuleContext<Gauss200Parser::Func_args_listContext>(0);
}


size_t Gauss200Parser::Func_argsContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunc_args;
}

void Gauss200Parser::Func_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_args(this);
}

void Gauss200Parser::Func_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_args(this);
}


antlrcpp::Any Gauss200Parser::Func_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunc_args(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Func_argsContext* Gauss200Parser::func_args() {
  Func_argsContext *_localctx = _tracker.createInstance<Func_argsContext>(_ctx, getState());
  enterRule(_localctx, 152, Gauss200Parser::RuleFunc_args);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1691);
    match(Gauss200Parser::LEFT_PAREN);
    setState(1693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
      | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
      | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
      | (1ULL << (Gauss200Parser::AND_GS - 1))
      | (1ULL << (Gauss200Parser::ANY_GS - 1))
      | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
      | (1ULL << (Gauss200Parser::ASC_GS - 1))
      | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
      | (1ULL << (Gauss200Parser::AS_GS - 1))
      | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
      | (1ULL << (Gauss200Parser::BOTH_GS - 1))
      | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
      | (1ULL << (Gauss200Parser::CASE_GS - 1))
      | (1ULL << (Gauss200Parser::CAST_GS - 1))
      | (1ULL << (Gauss200Parser::CHECK_GS - 1))
      | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
      | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
      | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
      | (1ULL << (Gauss200Parser::CREATE_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
      | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
      | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
      | (1ULL << (Gauss200Parser::DESC_GS - 1))
      | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
      | (1ULL << (Gauss200Parser::DO_GS - 1))
      | (1ULL << (Gauss200Parser::ELSE_GS - 1))
      | (1ULL << (Gauss200Parser::END_GS - 1))
      | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
      | (1ULL << (Gauss200Parser::FALSE_GS - 1))
      | (1ULL << (Gauss200Parser::FETCH_GS - 1))
      | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
      | (1ULL << (Gauss200Parser::FOR_GS - 1))
      | (1ULL << (Gauss200Parser::FROM_GS - 1))
      | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
      | (1ULL << (Gauss200Parser::GRANT_GS - 1))
      | (1ULL << (Gauss200Parser::GROUP_GS - 1))
      | (1ULL << (Gauss200Parser::HAVING_GS - 1))
      | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
      | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
      | (1ULL << (Gauss200Parser::INTO_GS - 1))
      | (1ULL << (Gauss200Parser::IN_GS - 1))
      | (1ULL << (Gauss200Parser::IS_GS - 1))
      | (1ULL << (Gauss200Parser::LEADING_GS - 1))
      | (1ULL << (Gauss200Parser::LESS_GS - 1))
      | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
      | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
      | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
      | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
      | (1ULL << (Gauss200Parser::MINUS_GS - 1))
      | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
      | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
      | (1ULL << (Gauss200Parser::NOT_GS - 1))
      | (1ULL << (Gauss200Parser::NULL_GS - 1))
      | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
      | (1ULL << (Gauss200Parser::ONLY_GS - 1))
      | (1ULL << (Gauss200Parser::ON_GS - 1))
      | (1ULL << (Gauss200Parser::ORDER_GS - 1))
      | (1ULL << (Gauss200Parser::OR_GS - 1))
      | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
      | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
      | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
      | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
      | (1ULL << (Gauss200Parser::REJECT_GS - 65))
      | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
      | (1ULL << (Gauss200Parser::RETURN_GS - 65))
      | (1ULL << (Gauss200Parser::SELECT_GS - 65))
      | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
      | (1ULL << (Gauss200Parser::SOME_GS - 65))
      | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
      | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
      | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
      | (1ULL << (Gauss200Parser::THEN_GS - 65))
      | (1ULL << (Gauss200Parser::TO_GS - 65))
      | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
      | (1ULL << (Gauss200Parser::TRUE_GS - 65))
      | (1ULL << (Gauss200Parser::UNION_GS - 65))
      | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
      | (1ULL << (Gauss200Parser::USER_GS - 65))
      | (1ULL << (Gauss200Parser::USING_GS - 65))
      | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
      | (1ULL << (Gauss200Parser::WHEN_GS - 65))
      | (1ULL << (Gauss200Parser::WHERE_GS - 65))
      | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
      | (1ULL << (Gauss200Parser::WITH_GS - 65))
      | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
      | (1ULL << (Gauss200Parser::BINARY_GS - 65))
      | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
      | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
      | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
      | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
      | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
      | (1ULL << (Gauss200Parser::INNER_GS - 65))
      | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
      | (1ULL << (Gauss200Parser::JOIN_GS - 65))
      | (1ULL << (Gauss200Parser::LEFT_GS - 65))
      | (1ULL << (Gauss200Parser::LIKE_GS - 65))
      | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
      | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
      | (1ULL << (Gauss200Parser::OUTER_GS - 65))
      | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
      | (1ULL << (Gauss200Parser::OVER_GS - 65))
      | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
      | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
      | (1ULL << (Gauss200Parser::ABORT_GS - 65))
      | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
      | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
      | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
      | (1ULL << (Gauss200Parser::ACTION_GS - 65))
      | (1ULL << (Gauss200Parser::ADD_GS - 65))
      | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
      | (1ULL << (Gauss200Parser::AFTER_GS - 65))
      | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
      | (1ULL << (Gauss200Parser::ALSO_GS - 65))
      | (1ULL << (Gauss200Parser::ALTER_GS - 65))
      | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
      | (1ULL << (Gauss200Parser::APP_GS - 65))
      | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
      | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
      | (1ULL << (Gauss200Parser::AT_GS - 129))
      | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
      | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
      | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
      | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
      | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
      | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
      | (1ULL << (Gauss200Parser::BLOB_GS - 129))
      | (1ULL << (Gauss200Parser::BY_GS - 129))
      | (1ULL << (Gauss200Parser::CACHE_GS - 129))
      | (1ULL << (Gauss200Parser::CALLED_GS - 129))
      | (1ULL << (Gauss200Parser::CALL_GS - 129))
      | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
      | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
      | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
      | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
      | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
      | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
      | (1ULL << (Gauss200Parser::CLASS_GS - 129))
      | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
      | (1ULL << (Gauss200Parser::CLOB_GS - 129))
      | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
      | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
      | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
      | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
      | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
      | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
      | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
      | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
      | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
      | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
      | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
      | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
      | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
      | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
      | (1ULL << (Gauss200Parser::COPY_GS - 129))
      | (1ULL << (Gauss200Parser::COST_GS - 129))
      | (1ULL << (Gauss200Parser::CSV_GS - 129))
      | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
      | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
      | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
      | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
      | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
      | (1ULL << (Gauss200Parser::DATA_GS - 129))
      | (1ULL << (Gauss200Parser::DAY_GS - 129))
      | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
      | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
      | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
      | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
      | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
      | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
      | (1ULL << (Gauss200Parser::DELETE_GS - 129))
      | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
      | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
      | (1ULL << (Gauss200Parser::DELTA_GS - 129))
      | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
      | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
      | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
      | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
      | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
      | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
      | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
      | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
      | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
      | (1ULL << (Gauss200Parser::DROP_GS - 193))
      | (1ULL << (Gauss200Parser::EACH_GS - 193))
      | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
      | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
      | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
      | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
      | (1ULL << (Gauss200Parser::ENUM_GS - 193))
      | (1ULL << (Gauss200Parser::EOL_GS - 193))
      | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
      | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
      | (1ULL << (Gauss200Parser::EVERY_GS - 193))
      | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
      | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
      | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
      | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
      | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
      | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
      | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
      | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
      | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
      | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
      | (1ULL << (Gauss200Parser::FIRST_GS - 193))
      | (1ULL << (Gauss200Parser::FIXED_GS - 193))
      | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
      | (1ULL << (Gauss200Parser::FORCE_GS - 193))
      | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
      | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
      | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
      | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
      | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
      | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
      | (1ULL << (Gauss200Parser::HEADER_GS - 193))
      | (1ULL << (Gauss200Parser::HOLD_GS - 193))
      | (1ULL << (Gauss200Parser::HOUR_GS - 193))
      | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
      | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
      | (1ULL << (Gauss200Parser::IF_GS - 193))
      | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
      | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
      | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
      | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
      | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
      | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
      | (1ULL << (Gauss200Parser::INDEX_GS - 193))
      | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
      | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
      | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
      | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
      | (1ULL << (Gauss200Parser::INLINE_GS - 193))
      | (1ULL << (Gauss200Parser::INPUT_GS - 193))
      | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
      | (1ULL << (Gauss200Parser::INSERT_GS - 193))
      | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
      | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
      | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
      | (1ULL << (Gauss200Parser::KEY_GS - 193))
      | (1ULL << (Gauss200Parser::LABEL_GS - 193))
      | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
      | (1ULL << (Gauss200Parser::LARGE_GS - 193))
      | (1ULL << (Gauss200Parser::LAST_GS - 193))
      | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
      | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
      | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
      | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
      | (1ULL << (Gauss200Parser::LOAD_GS - 257))
      | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
      | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
      | (1ULL << (Gauss200Parser::LOCK_GS - 257))
      | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
      | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
      | (1ULL << (Gauss200Parser::LOG_GS - 257))
      | (1ULL << (Gauss200Parser::LOOP_GS - 257))
      | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
      | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
      | (1ULL << (Gauss200Parser::MATCH_GS - 257))
      | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
      | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
      | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
      | (1ULL << (Gauss200Parser::MERGE_GS - 257))
      | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
      | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
      | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
      | (1ULL << (Gauss200Parser::MODE_GS - 257))
      | (1ULL << (Gauss200Parser::MONTH_GS - 257))
      | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
      | (1ULL << (Gauss200Parser::MOVE_GS - 257))
      | (1ULL << (Gauss200Parser::NAMES_GS - 257))
      | (1ULL << (Gauss200Parser::NAME_GS - 257))
      | (1ULL << (Gauss200Parser::NEXT_GS - 257))
      | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
      | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
      | (1ULL << (Gauss200Parser::NODE_GS - 257))
      | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
      | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
      | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
      | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
      | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
      | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
      | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
      | (1ULL << (Gauss200Parser::NO_GS - 257))
      | (1ULL << (Gauss200Parser::NULLS_GS - 257))
      | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
      | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
      | (1ULL << (Gauss200Parser::OFF_GS - 257))
      | (1ULL << (Gauss200Parser::OF_GS - 257))
      | (1ULL << (Gauss200Parser::OIDS_GS - 257))
      | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
      | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
      | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
      | (1ULL << (Gauss200Parser::OPTION_GS - 257))
      | (1ULL << (Gauss200Parser::OWNED_GS - 257))
      | (1ULL << (Gauss200Parser::OWNER_GS - 257))
      | (1ULL << (Gauss200Parser::PARSER_GS - 257))
      | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
      | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
      | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
      | (1ULL << (Gauss200Parser::PASSING_GS - 257))
      | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
      | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
      | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
      | (1ULL << (Gauss200Parser::PER_GS - 257))
      | (1ULL << (Gauss200Parser::PLANS_GS - 257))
      | (1ULL << (Gauss200Parser::POOL_GS - 257))
      | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
      | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
      | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
      | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
      | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
      | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
      | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
      | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
      | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
      | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
      | (1ULL << (Gauss200Parser::QUERY_GS - 321))
      | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
      | (1ULL << (Gauss200Parser::RANGE_GS - 321))
      | (1ULL << (Gauss200Parser::RAW_GS - 321))
      | (1ULL << (Gauss200Parser::READ_GS - 321))
      | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
      | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
      | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
      | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
      | (1ULL << (Gauss200Parser::REF_GS - 321))
      | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
      | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
      | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
      | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
      | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
      | (1ULL << (Gauss200Parser::RENAME_GS - 321))
      | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
      | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
      | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
      | (1ULL << (Gauss200Parser::RESET_GS - 321))
      | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
      | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
      | (1ULL << (Gauss200Parser::RESTART_GS - 321))
      | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
      | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
      | (1ULL << (Gauss200Parser::REUSE_GS - 321))
      | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
      | (1ULL << (Gauss200Parser::ROLE_GS - 321))
      | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
      | (1ULL << (Gauss200Parser::ROWS_GS - 321))
      | (1ULL << (Gauss200Parser::RULE_GS - 321))
      | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
      | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
      | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
      | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
      | (1ULL << (Gauss200Parser::SECOND_GS - 321))
      | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
      | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
      | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
      | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
      | (1ULL << (Gauss200Parser::SERVER_GS - 321))
      | (1ULL << (Gauss200Parser::SESSION_GS - 321))
      | (1ULL << (Gauss200Parser::SET_GS - 321))
      | (1ULL << (Gauss200Parser::SHARE_GS - 321))
      | (1ULL << (Gauss200Parser::SHOW_GS - 321))
      | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
      | (1ULL << (Gauss200Parser::SIZE_GS - 321))
      | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
      | (1ULL << (Gauss200Parser::STABLE_GS - 321))
      | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
      | (1ULL << (Gauss200Parser::START_GS - 321))
      | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
      | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
      | (1ULL << (Gauss200Parser::STDIN_GS - 321))
      | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
      | (1ULL << (Gauss200Parser::STORE_GS - 385))
      | (1ULL << (Gauss200Parser::STRICT_GS - 385))
      | (1ULL << (Gauss200Parser::STRIP_GS - 385))
      | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
      | (1ULL << (Gauss200Parser::SYSID_GS - 385))
      | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
      | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
      | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
      | (1ULL << (Gauss200Parser::TABLES_GS - 385))
      | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
      | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
      | (1ULL << (Gauss200Parser::TEMP_GS - 385))
      | (1ULL << (Gauss200Parser::TEXT_GS - 385))
      | (1ULL << (Gauss200Parser::THAN_GS - 385))
      | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
      | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
      | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
      | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
      | (1ULL << (Gauss200Parser::TYPES_GS - 385))
      | (1ULL << (Gauss200Parser::TYPE_GS - 385))
      | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
      | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
      | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
      | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
      | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
      | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
      | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
      | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
      | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
      | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
      | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
      | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
      | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
      | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
      | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
      | (1ULL << (Gauss200Parser::VALID_GS - 385))
      | (1ULL << (Gauss200Parser::VALUE_GS - 385))
      | (1ULL << (Gauss200Parser::VARYING_GS - 385))
      | (1ULL << (Gauss200Parser::VERSION_GS - 385))
      | (1ULL << (Gauss200Parser::VIEW_GS - 385))
      | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
      | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
      | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
      | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
      | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
      | (1ULL << (Gauss200Parser::WORK_GS - 385))
      | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
      | (1ULL << (Gauss200Parser::WRITE_GS - 385))
      | (1ULL << (Gauss200Parser::XML_GS - 385))
      | (1ULL << (Gauss200Parser::YEAR_GS - 385))
      | (1ULL << (Gauss200Parser::YES_GS - 385))
      | (1ULL << (Gauss200Parser::ZONE_GS - 385))
      | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
      | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
      | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
      | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
      | (1ULL << (Gauss200Parser::BIT_GS - 385))
      | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
      | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
      | (1ULL << (Gauss200Parser::CHAR_GS - 385))
      | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
      | (1ULL << (Gauss200Parser::DATE_GS - 385))
      | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
      | (1ULL << (Gauss200Parser::DEC_GS - 449))
      | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
      | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
      | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
      | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
      | (1ULL << (Gauss200Parser::INOUT_GS - 449))
      | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
      | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
      | (1ULL << (Gauss200Parser::INT_GS - 449))
      | (1ULL << (Gauss200Parser::LEAST_GS - 449))
      | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
      | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
      | (1ULL << (Gauss200Parser::NONE_GS - 449))
      | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
      | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
      | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
      | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
      | (1ULL << (Gauss200Parser::NVL_GS - 449))
      | (1ULL << (Gauss200Parser::OUT_GS - 449))
      | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
      | (1ULL << (Gauss200Parser::POSITION_GS - 449))
      | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
      | (1ULL << (Gauss200Parser::REAL_GS - 449))
      | (1ULL << (Gauss200Parser::ROW_GS - 449))
      | (1ULL << (Gauss200Parser::SETOF_GS - 449))
      | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
      | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
      | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
      | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
      | (1ULL << (Gauss200Parser::TIME_GS - 449))
      | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
      | (1ULL << (Gauss200Parser::TREAT_GS - 449))
      | (1ULL << (Gauss200Parser::TRIM_GS - 449))
      | (1ULL << (Gauss200Parser::VALUES_GS - 449))
      | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
      | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
      | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
      | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
      | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
      | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
      | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
      | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
      | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
      | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
      | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
      | (1ULL << (Gauss200Parser::SMALLSERIAL_GS - 449))
      | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
      | (1ULL << (Gauss200Parser::BIGSERIAL_GS - 449))
      | (1ULL << (Gauss200Parser::FLOAT4_GS - 449))
      | (1ULL << (Gauss200Parser::FLOAT8_GS - 449))
      | (1ULL << (Gauss200Parser::MONEY_GS - 449))
      | (1ULL << (Gauss200Parser::BYTEA_GS - 449))
      | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
      | (1ULL << (Gauss200Parser::POINT_GS - 449))
      | (1ULL << (Gauss200Parser::LSEG_GS - 449))
      | (1ULL << (Gauss200Parser::BOX_GS - 449))
      | (1ULL << (Gauss200Parser::PATH_GS - 449))
      | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
      | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
      | (1ULL << (Gauss200Parser::CIDR_GS - 449))
      | (1ULL << (Gauss200Parser::INET_GS - 449))
      | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 513) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 513)) & ((1ULL << (Gauss200Parser::TSVECTOR_GS - 513))
      | (1ULL << (Gauss200Parser::TSQUERY_GS - 513))
      | (1ULL << (Gauss200Parser::HLL_GS - 513))
      | (1ULL << (Gauss200Parser::OID_GS - 513))
      | (1ULL << (Gauss200Parser::CID_GS - 513))
      | (1ULL << (Gauss200Parser::XID_GS - 513))
      | (1ULL << (Gauss200Parser::TID_GS - 513))
      | (1ULL << (Gauss200Parser::REGCONFIG_GS - 513))
      | (1ULL << (Gauss200Parser::REGDICTIONARY_GS - 513))
      | (1ULL << (Gauss200Parser::REGOPER - 513))
      | (1ULL << (Gauss200Parser::REGOPERATOR - 513))
      | (1ULL << (Gauss200Parser::REGPROC - 513))
      | (1ULL << (Gauss200Parser::REGPROCEDURE - 513))
      | (1ULL << (Gauss200Parser::REGCLASS - 513))
      | (1ULL << (Gauss200Parser::REGTYPE - 513))
      | (1ULL << (Gauss200Parser::ANYELEMENT_GS - 513))
      | (1ULL << (Gauss200Parser::ANYARRAY_GS - 513))
      | (1ULL << (Gauss200Parser::ANYNONARRAY_GS - 513))
      | (1ULL << (Gauss200Parser::ANYENUM_GS - 513))
      | (1ULL << (Gauss200Parser::ANYRANGE_GS - 513))
      | (1ULL << (Gauss200Parser::CSTRING_GS - 513))
      | (1ULL << (Gauss200Parser::INTERNAL_GS - 513))
      | (1ULL << (Gauss200Parser::LANGUAGE_HANDLER_GS - 513))
      | (1ULL << (Gauss200Parser::FDW_HANDLER_GS - 513))
      | (1ULL << (Gauss200Parser::RECORD_GS - 513))
      | (1ULL << (Gauss200Parser::VOID_GS - 513))
      | (1ULL << (Gauss200Parser::OPAQUE_GS - 513))
      | (1ULL << (Gauss200Parser::SOURCE_GS - 513))
      | (1ULL << (Gauss200Parser::PUBLIC_GS - 513))
      | (1ULL << (Gauss200Parser::USAGE_GS - 513))
      | (1ULL << (Gauss200Parser::SPACE_GS - 513))
      | (1ULL << (Gauss200Parser::FORMAT_GS - 513)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
      | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
      | (1ULL << (Gauss200Parser::CUBE_GS - 601))
      | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
      | (1ULL << (Gauss200Parser::SETS_GS - 601))
      | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
      | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
      | (1ULL << (Gauss200Parser::SCONST - 601)))) != 0)) {
      setState(1692);
      func_args_list();
    }
    setState(1695);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_args_listContext ------------------------------------------------------------------

Gauss200Parser::Func_args_listContext::Func_args_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Func_argContext *> Gauss200Parser::Func_args_listContext::func_arg() {
  return getRuleContexts<Gauss200Parser::Func_argContext>();
}

Gauss200Parser::Func_argContext* Gauss200Parser::Func_args_listContext::func_arg(size_t i) {
  return getRuleContext<Gauss200Parser::Func_argContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Func_args_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Func_args_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Func_args_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunc_args_list;
}

void Gauss200Parser::Func_args_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_args_list(this);
}

void Gauss200Parser::Func_args_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_args_list(this);
}


antlrcpp::Any Gauss200Parser::Func_args_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunc_args_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Func_args_listContext* Gauss200Parser::func_args_list() {
  Func_args_listContext *_localctx = _tracker.createInstance<Func_args_listContext>(_ctx, getState());
  enterRule(_localctx, 154, Gauss200Parser::RuleFunc_args_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    func_arg();
    setState(1702);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1698);
      match(Gauss200Parser::COMMA);
      setState(1699);
      func_arg();
      setState(1704);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_argContext ------------------------------------------------------------------

Gauss200Parser::Func_argContext::Func_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Func_argContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

Gauss200Parser::ArgmodeContext* Gauss200Parser::Func_argContext::argmode() {
  return getRuleContext<Gauss200Parser::ArgmodeContext>(0);
}

Gauss200Parser::Param_nameContext* Gauss200Parser::Func_argContext::param_name() {
  return getRuleContext<Gauss200Parser::Param_nameContext>(0);
}


size_t Gauss200Parser::Func_argContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunc_arg;
}

void Gauss200Parser::Func_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_arg(this);
}

void Gauss200Parser::Func_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_arg(this);
}


antlrcpp::Any Gauss200Parser::Func_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunc_arg(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Func_argContext* Gauss200Parser::func_arg() {
  Func_argContext *_localctx = _tracker.createInstance<Func_argContext>(_ctx, getState());
  enterRule(_localctx, 156, Gauss200Parser::RuleFunc_arg);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1706);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(1705);
      argmode();
      break;
    }

    }
    setState(1709);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(1708);
      param_name();
      break;
    }

    }
    setState(1711);
    typename_gs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgmodeContext ------------------------------------------------------------------

Gauss200Parser::ArgmodeContext::ArgmodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::ArgmodeContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::ArgmodeContext::OUT_GS() {
  return getToken(Gauss200Parser::OUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::ArgmodeContext::INOUT_GS() {
  return getToken(Gauss200Parser::INOUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::ArgmodeContext::VARIADIC_GS() {
  return getToken(Gauss200Parser::VARIADIC_GS, 0);
}


size_t Gauss200Parser::ArgmodeContext::getRuleIndex() const {
  return Gauss200Parser::RuleArgmode;
}

void Gauss200Parser::ArgmodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgmode(this);
}

void Gauss200Parser::ArgmodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgmode(this);
}


antlrcpp::Any Gauss200Parser::ArgmodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitArgmode(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::ArgmodeContext* Gauss200Parser::argmode() {
  ArgmodeContext *_localctx = _tracker.createInstance<ArgmodeContext>(_ctx, getState());
  enterRule(_localctx, 158, Gauss200Parser::RuleArgmode);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1713);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::IN_GS

    || _la == Gauss200Parser::VARIADIC_GS || _la == Gauss200Parser::INOUT_GS

    || _la == Gauss200Parser::OUT_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_nameContext ------------------------------------------------------------------

Gauss200Parser::Param_nameContext::Param_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Param_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Param_nameContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::Param_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleParam_name;
}

void Gauss200Parser::Param_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_name(this);
}

void Gauss200Parser::Param_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_name(this);
}


antlrcpp::Any Gauss200Parser::Param_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParam_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Param_nameContext* Gauss200Parser::param_name() {
  Param_nameContext *_localctx = _tracker.createInstance<Param_nameContext>(_ctx, getState());
  enterRule(_localctx, 160, Gauss200Parser::RuleParam_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1717);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1715);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1716);
      match(Gauss200Parser::SCONST);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_func_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_func_optionContext::Alter_func_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Alter_function_actionContext *> Gauss200Parser::Alter_func_optionContext::alter_function_action() {
  return getRuleContexts<Gauss200Parser::Alter_function_actionContext>();
}

Gauss200Parser::Alter_function_actionContext* Gauss200Parser::Alter_func_optionContext::alter_function_action(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_function_actionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Alter_func_optionContext::RESTRICT_GS() {
  return getToken(Gauss200Parser::RESTRICT_GS, 0);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_func_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}

Gauss200Parser::Alter_set_schemaContext* Gauss200Parser::Alter_func_optionContext::alter_set_schema() {
  return getRuleContext<Gauss200Parser::Alter_set_schemaContext>(0);
}


size_t Gauss200Parser::Alter_func_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_func_option;
}

void Gauss200Parser::Alter_func_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_func_option(this);
}

void Gauss200Parser::Alter_func_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_func_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_func_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_func_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_func_optionContext* Gauss200Parser::alter_func_option() {
  Alter_func_optionContext *_localctx = _tracker.createInstance<Alter_func_optionContext>(_ctx, getState());
  enterRule(_localctx, 162, Gauss200Parser::RuleAlter_func_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1730);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1722);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::AUTHID_GS

      || _la == Gauss200Parser::NOT_GS || _la == Gauss200Parser::CALLED_GS

      || _la == Gauss200Parser::COST_GS || ((((_la - 213) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 213)) & ((1ULL << (Gauss200Parser::EXTERNAL_GS - 213))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 213))
        | (1ULL << (Gauss200Parser::LEAKPROOF_GS - 213)))) != 0) || ((((_la - 349) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 349)) & ((1ULL << (Gauss200Parser::RESET_GS - 349))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 349))
        | (1ULL << (Gauss200Parser::ROWS_GS - 349))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 349))
        | (1ULL << (Gauss200Parser::SET_GS - 349))
        | (1ULL << (Gauss200Parser::STABLE_GS - 349))
        | (1ULL << (Gauss200Parser::STRICT_GS - 349)))) != 0) || _la == Gauss200Parser::VOLATILE_GS || _la == Gauss200Parser::SHIPPABLE_GS

      || _la == Gauss200Parser::FENCED_GS || _la == Gauss200Parser::PACKAGE_GS) {
        setState(1719);
        alter_function_action();
        setState(1724);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1726);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::RESTRICT_GS) {
        setState(1725);
        match(Gauss200Parser::RESTRICT_GS);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1728);
      rename_owner_to_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1729);
      alter_set_schema();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_function_actionContext ------------------------------------------------------------------

Gauss200Parser::Alter_function_actionContext::Alter_function_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::CALLED_GS() {
  return getToken(Gauss200Parser::CALLED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_function_actionContext::NULL_GS() {
  return getTokens(Gauss200Parser::NULL_GS);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::NULL_GS(size_t i) {
  return getToken(Gauss200Parser::NULL_GS, i);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::INPUT_GS() {
  return getToken(Gauss200Parser::INPUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::RETURNS_GS() {
  return getToken(Gauss200Parser::RETURNS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::STRICT_GS() {
  return getToken(Gauss200Parser::STRICT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::IMMUTABLE_GS() {
  return getToken(Gauss200Parser::IMMUTABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::STABLE_GS() {
  return getToken(Gauss200Parser::STABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::VOLATILE_GS() {
  return getToken(Gauss200Parser::VOLATILE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::SHIPPABLE_GS() {
  return getToken(Gauss200Parser::SHIPPABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::FENCED_GS() {
  return getToken(Gauss200Parser::FENCED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::LEAKPROOF_GS() {
  return getToken(Gauss200Parser::LEAKPROOF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::SECURITY_GS() {
  return getToken(Gauss200Parser::SECURITY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::INVOKER_GS() {
  return getToken(Gauss200Parser::INVOKER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::DEFINER_GS() {
  return getToken(Gauss200Parser::DEFINER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::EXTERNAL_GS() {
  return getToken(Gauss200Parser::EXTERNAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::AUTHID_GS() {
  return getToken(Gauss200Parser::AUTHID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::CURRENT_USER_GS() {
  return getToken(Gauss200Parser::CURRENT_USER_GS, 0);
}

Gauss200Parser::NumericContext* Gauss200Parser::Alter_function_actionContext::numeric() {
  return getRuleContext<Gauss200Parser::NumericContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::COST_GS() {
  return getToken(Gauss200Parser::COST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::ROWS_GS() {
  return getToken(Gauss200Parser::ROWS_GS, 0);
}

Gauss200Parser::Set_configuration_paramContext* Gauss200Parser::Alter_function_actionContext::set_configuration_param() {
  return getRuleContext<Gauss200Parser::Set_configuration_paramContext>(0);
}

Gauss200Parser::Reset_configuration_paramContext* Gauss200Parser::Alter_function_actionContext::reset_configuration_param() {
  return getRuleContext<Gauss200Parser::Reset_configuration_paramContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_function_actionContext::PACKAGE_GS() {
  return getToken(Gauss200Parser::PACKAGE_GS, 0);
}


size_t Gauss200Parser::Alter_function_actionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_function_action;
}

void Gauss200Parser::Alter_function_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_function_action(this);
}

void Gauss200Parser::Alter_function_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_function_action(this);
}


antlrcpp::Any Gauss200Parser::Alter_function_actionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_function_action(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_function_actionContext* Gauss200Parser::alter_function_action() {
  Alter_function_actionContext *_localctx = _tracker.createInstance<Alter_function_actionContext>(_ctx, getState());
  enterRule(_localctx, 164, Gauss200Parser::RuleAlter_function_action);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1759);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::CALLED_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1732);
        match(Gauss200Parser::CALLED_GS);
        setState(1733);
        match(Gauss200Parser::ON_GS);
        setState(1734);
        match(Gauss200Parser::NULL_GS);
        setState(1735);
        match(Gauss200Parser::INPUT_GS);
        break;
      }

      case Gauss200Parser::RETURNS_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1736);
        match(Gauss200Parser::RETURNS_GS);
        setState(1737);
        match(Gauss200Parser::NULL_GS);
        setState(1738);
        match(Gauss200Parser::ON_GS);
        setState(1739);
        match(Gauss200Parser::NULL_GS);
        setState(1740);
        match(Gauss200Parser::INPUT_GS);
        break;
      }

      case Gauss200Parser::STRICT_GS: {
        enterOuterAlt(_localctx, 3);
        setState(1741);
        match(Gauss200Parser::STRICT_GS);
        break;
      }

      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::VOLATILE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(1742);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::IMMUTABLE_GS || _la == Gauss200Parser::STABLE_GS

        || _la == Gauss200Parser::VOLATILE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::SHIPPABLE_GS:
      case Gauss200Parser::FENCED_GS: {
        enterOuterAlt(_localctx, 5);
        setState(1744);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::NOT_GS) {
          setState(1743);
          match(Gauss200Parser::NOT_GS);
        }
        setState(1746);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::LEAKPROOF_GS || _la == Gauss200Parser::SHIPPABLE_GS

        || _la == Gauss200Parser::FENCED_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::SECURITY_GS: {
        enterOuterAlt(_localctx, 6);
        setState(1748);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::EXTERNAL_GS) {
          setState(1747);
          match(Gauss200Parser::EXTERNAL_GS);
        }
        setState(1750);
        match(Gauss200Parser::SECURITY_GS);
        setState(1751);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::DEFINER_GS || _la == Gauss200Parser::INVOKER_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::AUTHID_GS: {
        enterOuterAlt(_localctx, 7);
        setState(1752);
        match(Gauss200Parser::AUTHID_GS);
        setState(1753);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::CURRENT_USER_GS || _la == Gauss200Parser::DEFINER_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::COST_GS:
      case Gauss200Parser::ROWS_GS: {
        enterOuterAlt(_localctx, 8);
        setState(1754);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::COST_GS || _la == Gauss200Parser::ROWS_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1755);
        numeric();
        break;
      }

      case Gauss200Parser::SET_GS: {
        enterOuterAlt(_localctx, 9);
        setState(1756);
        set_configuration_param();
        break;
      }

      case Gauss200Parser::RESET_GS: {
        enterOuterAlt(_localctx, 10);
        setState(1757);
        reset_configuration_param();
        break;
      }

      case Gauss200Parser::PACKAGE_GS: {
        enterOuterAlt(_localctx, 11);
        setState(1758);
        match(Gauss200Parser::PACKAGE_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_set_schemaContext ------------------------------------------------------------------

Gauss200Parser::Alter_set_schemaContext::Alter_set_schemaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_set_schemaContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_set_schemaContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Alter_set_schemaContext::schema_name() {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(0);
}


size_t Gauss200Parser::Alter_set_schemaContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_set_schema;
}

void Gauss200Parser::Alter_set_schemaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_set_schema(this);
}

void Gauss200Parser::Alter_set_schemaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_set_schema(this);
}


antlrcpp::Any Gauss200Parser::Alter_set_schemaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_set_schema(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_set_schemaContext* Gauss200Parser::alter_set_schema() {
  Alter_set_schemaContext *_localctx = _tracker.createInstance<Alter_set_schemaContext>(_ctx, getState());
  enterRule(_localctx, 166, Gauss200Parser::RuleAlter_set_schema);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1761);
    match(Gauss200Parser::SET_GS);
    setState(1762);
    match(Gauss200Parser::SCHEMA_GS);
    setState(1763);
    schema_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_group_stmtContext::Alter_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_group_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Alter_group_stmtContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

Gauss200Parser::Alter_group_optionContext* Gauss200Parser::Alter_group_stmtContext::alter_group_option() {
  return getRuleContext<Gauss200Parser::Alter_group_optionContext>(0);
}


size_t Gauss200Parser::Alter_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_group_stmt;
}

void Gauss200Parser::Alter_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_group_stmt(this);
}

void Gauss200Parser::Alter_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_group_stmtContext* Gauss200Parser::alter_group_stmt() {
  Alter_group_stmtContext *_localctx = _tracker.createInstance<Alter_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 168, Gauss200Parser::RuleAlter_group_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1765);
    match(Gauss200Parser::ALTER_GS);
    setState(1766);
    match(Gauss200Parser::GROUP_GS);
    setState(1767);
    group_name();
    setState(1768);
    alter_group_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_nameContext ------------------------------------------------------------------

Gauss200Parser::Group_nameContext::Group_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Group_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Group_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleGroup_name;
}

void Gauss200Parser::Group_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_name(this);
}

void Gauss200Parser::Group_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_name(this);
}


antlrcpp::Any Gauss200Parser::Group_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGroup_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::group_name() {
  Group_nameContext *_localctx = _tracker.createInstance<Group_nameContext>(_ctx, getState());
  enterRule(_localctx, 170, Gauss200Parser::RuleGroup_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1770);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_group_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_group_optionContext::Alter_group_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_group_optionContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

Gauss200Parser::User_name_listContext* Gauss200Parser::Alter_group_optionContext::user_name_list() {
  return getRuleContext<Gauss200Parser::User_name_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_optionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_group_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_group_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}


size_t Gauss200Parser::Alter_group_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_group_option;
}

void Gauss200Parser::Alter_group_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_group_option(this);
}

void Gauss200Parser::Alter_group_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_group_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_group_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_group_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_group_optionContext* Gauss200Parser::alter_group_option() {
  Alter_group_optionContext *_localctx = _tracker.createInstance<Alter_group_optionContext>(_ctx, getState());
  enterRule(_localctx, 172, Gauss200Parser::RuleAlter_group_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1776);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::DROP_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1772);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::ADD_GS || _la == Gauss200Parser::DROP_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1773);
        match(Gauss200Parser::USER_GS);
        setState(1774);
        user_name_list();
        break;
      }

      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1775);
        rename_to_option();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_name_listContext ------------------------------------------------------------------

Gauss200Parser::User_name_listContext::User_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::User_nameContext *> Gauss200Parser::User_name_listContext::user_name() {
  return getRuleContexts<Gauss200Parser::User_nameContext>();
}

Gauss200Parser::User_nameContext* Gauss200Parser::User_name_listContext::user_name(size_t i) {
  return getRuleContext<Gauss200Parser::User_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::User_name_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::User_name_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::User_name_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleUser_name_list;
}

void Gauss200Parser::User_name_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUser_name_list(this);
}

void Gauss200Parser::User_name_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUser_name_list(this);
}


antlrcpp::Any Gauss200Parser::User_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUser_name_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::User_name_listContext* Gauss200Parser::user_name_list() {
  User_name_listContext *_localctx = _tracker.createInstance<User_name_listContext>(_ctx, getState());
  enterRule(_localctx, 174, Gauss200Parser::RuleUser_name_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1778);
    user_name();
    setState(1783);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1779);
      match(Gauss200Parser::COMMA);
      setState(1780);
      user_name();
      setState(1785);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_nameContext ------------------------------------------------------------------

Gauss200Parser::User_nameContext::User_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::User_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::User_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleUser_name;
}

void Gauss200Parser::User_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUser_name(this);
}

void Gauss200Parser::User_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUser_name(this);
}


antlrcpp::Any Gauss200Parser::User_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUser_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::User_nameContext* Gauss200Parser::user_name() {
  User_nameContext *_localctx = _tracker.createInstance<User_nameContext>(_ctx, getState());
  enterRule(_localctx, 176, Gauss200Parser::RuleUser_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1786);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_index_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_index_stmtContext::Alter_index_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_index_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_stmtContext::INDEX_GS() {
  return getToken(Gauss200Parser::INDEX_GS, 0);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Alter_index_stmtContext::index_name() {
  return getRuleContext<Gauss200Parser::Index_nameContext>(0);
}

Gauss200Parser::Alter_index_optionContext* Gauss200Parser::Alter_index_stmtContext::alter_index_option() {
  return getRuleContext<Gauss200Parser::Alter_index_optionContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_index_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Alter_index_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_index_stmt;
}

void Gauss200Parser::Alter_index_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_index_stmt(this);
}

void Gauss200Parser::Alter_index_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_index_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_index_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_index_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_index_stmtContext* Gauss200Parser::alter_index_stmt() {
  Alter_index_stmtContext *_localctx = _tracker.createInstance<Alter_index_stmtContext>(_ctx, getState());
  enterRule(_localctx, 178, Gauss200Parser::RuleAlter_index_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1788);
    match(Gauss200Parser::ALTER_GS);
    setState(1789);
    match(Gauss200Parser::INDEX_GS);
    setState(1791);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(1790);
      if_exists_or_not();
      break;
    }

    }
    setState(1793);
    index_name();
    setState(1794);
    alter_index_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_nameContext ------------------------------------------------------------------

Gauss200Parser::Index_nameContext::Index_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Index_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::Index_nameContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::Index_nameContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::Index_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleIndex_name;
}

void Gauss200Parser::Index_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_name(this);
}

void Gauss200Parser::Index_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_name(this);
}


antlrcpp::Any Gauss200Parser::Index_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIndex_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::index_name() {
  Index_nameContext *_localctx = _tracker.createInstance<Index_nameContext>(_ctx, getState());
  enterRule(_localctx, 180, Gauss200Parser::RuleIndex_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1796);
    identifier();
    setState(1800);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::PERIOD) {
      setState(1797);
      attr();
      setState(1802);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_index_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_index_optionContext::Alter_index_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_index_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

Gauss200Parser::Set_tablespace_optionContext* Gauss200Parser::Alter_index_optionContext::set_tablespace_option() {
  return getRuleContext<Gauss200Parser::Set_tablespace_optionContext>(0);
}

Gauss200Parser::Set_assignment_listContext* Gauss200Parser::Alter_index_optionContext::set_assignment_list() {
  return getRuleContext<Gauss200Parser::Set_assignment_listContext>(0);
}

Gauss200Parser::Reset_param_listContext* Gauss200Parser::Alter_index_optionContext::reset_param_list() {
  return getRuleContext<Gauss200Parser::Reset_param_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::UNUSABLE_GS() {
  return getToken(Gauss200Parser::UNUSABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::MODIFY_GS() {
  return getToken(Gauss200Parser::MODIFY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Alter_index_optionContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::REBUILD_GS() {
  return getToken(Gauss200Parser::REBUILD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::RENAME_GS() {
  return getToken(Gauss200Parser::RENAME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Alter_index_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::MOVE_GS() {
  return getToken(Gauss200Parser::MOVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_index_optionContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}


size_t Gauss200Parser::Alter_index_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_index_option;
}

void Gauss200Parser::Alter_index_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_index_option(this);
}

void Gauss200Parser::Alter_index_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_index_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_index_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_index_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_index_optionContext* Gauss200Parser::alter_index_option() {
  Alter_index_optionContext *_localctx = _tracker.createInstance<Alter_index_optionContext>(_ctx, getState());
  enterRule(_localctx, 182, Gauss200Parser::RuleAlter_index_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1830);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1803);
      rename_to_option();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1804);
      set_tablespace_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1805);
      set_assignment_list();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1806);
      reset_param_list();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1810);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::MODIFY_GS) {
        setState(1807);
        match(Gauss200Parser::MODIFY_GS);
        setState(1808);
        match(Gauss200Parser::PARTITION_GS);
        setState(1809);
        partition_name();
      }
      setState(1812);
      match(Gauss200Parser::UNUSABLE_GS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1813);
      match(Gauss200Parser::REBUILD_GS);
      setState(1816);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::PARTITION_GS) {
        setState(1814);
        match(Gauss200Parser::PARTITION_GS);
        setState(1815);
        partition_name();
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1818);
      match(Gauss200Parser::RENAME_GS);
      setState(1819);
      match(Gauss200Parser::PARTITION_GS);
      setState(1820);
      partition_name();
      setState(1821);
      match(Gauss200Parser::TO_GS);
      setState(1822);
      new_name();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1824);
      match(Gauss200Parser::MOVE_GS);
      setState(1825);
      match(Gauss200Parser::PARTITION_GS);
      setState(1826);
      partition_name();
      setState(1827);
      match(Gauss200Parser::TABLESPACE_GS);
      setState(1828);
      new_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_tablespace_optionContext ------------------------------------------------------------------

Gauss200Parser::Set_tablespace_optionContext::Set_tablespace_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_tablespace_optionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Set_tablespace_optionContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}


size_t Gauss200Parser::Set_tablespace_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_tablespace_option;
}

void Gauss200Parser::Set_tablespace_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_tablespace_option(this);
}

void Gauss200Parser::Set_tablespace_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_tablespace_option(this);
}


antlrcpp::Any Gauss200Parser::Set_tablespace_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_tablespace_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_tablespace_optionContext* Gauss200Parser::set_tablespace_option() {
  Set_tablespace_optionContext *_localctx = _tracker.createInstance<Set_tablespace_optionContext>(_ctx, getState());
  enterRule(_localctx, 184, Gauss200Parser::RuleSet_tablespace_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1832);
    match(Gauss200Parser::SET_GS);
    setState(1833);
    tablespace_name_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tablespace_name_optionContext ------------------------------------------------------------------

Gauss200Parser::Tablespace_name_optionContext::Tablespace_name_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Tablespace_name_optionContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}

Gauss200Parser::Tablespace_nameContext* Gauss200Parser::Tablespace_name_optionContext::tablespace_name() {
  return getRuleContext<Gauss200Parser::Tablespace_nameContext>(0);
}


size_t Gauss200Parser::Tablespace_name_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleTablespace_name_option;
}

void Gauss200Parser::Tablespace_name_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTablespace_name_option(this);
}

void Gauss200Parser::Tablespace_name_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTablespace_name_option(this);
}


antlrcpp::Any Gauss200Parser::Tablespace_name_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTablespace_name_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::tablespace_name_option() {
  Tablespace_name_optionContext *_localctx = _tracker.createInstance<Tablespace_name_optionContext>(_ctx, getState());
  enterRule(_localctx, 186, Gauss200Parser::RuleTablespace_name_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1835);
    match(Gauss200Parser::TABLESPACE_GS);
    setState(1836);
    tablespace_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_assignment_listContext ------------------------------------------------------------------

Gauss200Parser::Set_assignment_listContext::Set_assignment_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_assignment_listContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Set_assignment_listContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}


size_t Gauss200Parser::Set_assignment_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_assignment_list;
}

void Gauss200Parser::Set_assignment_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_assignment_list(this);
}

void Gauss200Parser::Set_assignment_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_assignment_list(this);
}


antlrcpp::Any Gauss200Parser::Set_assignment_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_assignment_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_assignment_listContext* Gauss200Parser::set_assignment_list() {
  Set_assignment_listContext *_localctx = _tracker.createInstance<Set_assignment_listContext>(_ctx, getState());
  enterRule(_localctx, 188, Gauss200Parser::RuleSet_assignment_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1838);
    match(Gauss200Parser::SET_GS);
    setState(1839);
    paren_assignment_stmt_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reset_param_listContext ------------------------------------------------------------------

Gauss200Parser::Reset_param_listContext::Reset_param_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reset_param_listContext::RESET_GS() {
  return getToken(Gauss200Parser::RESET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_param_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Parameter_listContext* Gauss200Parser::Reset_param_listContext::parameter_list() {
  return getRuleContext<Gauss200Parser::Parameter_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Reset_param_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Reset_param_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleReset_param_list;
}

void Gauss200Parser::Reset_param_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReset_param_list(this);
}

void Gauss200Parser::Reset_param_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReset_param_list(this);
}


antlrcpp::Any Gauss200Parser::Reset_param_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReset_param_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reset_param_listContext* Gauss200Parser::reset_param_list() {
  Reset_param_listContext *_localctx = _tracker.createInstance<Reset_param_listContext>(_ctx, getState());
  enterRule(_localctx, 190, Gauss200Parser::RuleReset_param_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1841);
    match(Gauss200Parser::RESET_GS);
    setState(1842);
    match(Gauss200Parser::LEFT_PAREN);
    setState(1843);
    parameter_list();
    setState(1844);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tablespace_nameContext ------------------------------------------------------------------

Gauss200Parser::Tablespace_nameContext::Tablespace_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Tablespace_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Tablespace_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleTablespace_name;
}

void Gauss200Parser::Tablespace_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTablespace_name(this);
}

void Gauss200Parser::Tablespace_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTablespace_name(this);
}


antlrcpp::Any Gauss200Parser::Tablespace_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTablespace_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Tablespace_nameContext* Gauss200Parser::tablespace_name() {
  Tablespace_nameContext *_localctx = _tracker.createInstance<Tablespace_nameContext>(_ctx, getState());
  enterRule(_localctx, 192, Gauss200Parser::RuleTablespace_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1846);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_listContext ------------------------------------------------------------------

Gauss200Parser::Parameter_listContext::Parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Parameter_nameContext *> Gauss200Parser::Parameter_listContext::parameter_name() {
  return getRuleContexts<Gauss200Parser::Parameter_nameContext>();
}

Gauss200Parser::Parameter_nameContext* Gauss200Parser::Parameter_listContext::parameter_name(size_t i) {
  return getRuleContext<Gauss200Parser::Parameter_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Parameter_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Parameter_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Parameter_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParameter_list;
}

void Gauss200Parser::Parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_list(this);
}

void Gauss200Parser::Parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_list(this);
}


antlrcpp::Any Gauss200Parser::Parameter_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParameter_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Parameter_listContext* Gauss200Parser::parameter_list() {
  Parameter_listContext *_localctx = _tracker.createInstance<Parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 194, Gauss200Parser::RuleParameter_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1848);
    parameter_name();
    setState(1853);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1849);
      match(Gauss200Parser::COMMA);
      setState(1850);
      parameter_name();
      setState(1855);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_nameContext ------------------------------------------------------------------

Gauss200Parser::Parameter_nameContext::Parameter_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Parameter_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Parameter_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleParameter_name;
}

void Gauss200Parser::Parameter_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_name(this);
}

void Gauss200Parser::Parameter_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_name(this);
}


antlrcpp::Any Gauss200Parser::Parameter_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParameter_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Parameter_nameContext* Gauss200Parser::parameter_name() {
  Parameter_nameContext *_localctx = _tracker.createInstance<Parameter_nameContext>(_ctx, getState());
  enterRule(_localctx, 196, Gauss200Parser::RuleParameter_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1856);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_nameContext ------------------------------------------------------------------

Gauss200Parser::Partition_nameContext::Partition_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Partition_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Partition_nameContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_name;
}

void Gauss200Parser::Partition_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_name(this);
}

void Gauss200Parser::Partition_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_name(this);
}


antlrcpp::Any Gauss200Parser::Partition_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::partition_name() {
  Partition_nameContext *_localctx = _tracker.createInstance<Partition_nameContext>(_ctx, getState());
  enterRule(_localctx, 198, Gauss200Parser::RulePartition_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1858);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_large_obj_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_large_obj_stmtContext::Alter_large_obj_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_large_obj_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_large_obj_stmtContext::LARGE_GS() {
  return getToken(Gauss200Parser::LARGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_large_obj_stmtContext::OBJECT_GS() {
  return getToken(Gauss200Parser::OBJECT_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Alter_large_obj_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

Gauss200Parser::Owner_to_optionContext* Gauss200Parser::Alter_large_obj_stmtContext::owner_to_option() {
  return getRuleContext<Gauss200Parser::Owner_to_optionContext>(0);
}


size_t Gauss200Parser::Alter_large_obj_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_large_obj_stmt;
}

void Gauss200Parser::Alter_large_obj_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_large_obj_stmt(this);
}

void Gauss200Parser::Alter_large_obj_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_large_obj_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_large_obj_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_large_obj_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_large_obj_stmtContext* Gauss200Parser::alter_large_obj_stmt() {
  Alter_large_obj_stmtContext *_localctx = _tracker.createInstance<Alter_large_obj_stmtContext>(_ctx, getState());
  enterRule(_localctx, 200, Gauss200Parser::RuleAlter_large_obj_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1860);
    match(Gauss200Parser::ALTER_GS);
    setState(1861);
    match(Gauss200Parser::LARGE_GS);
    setState(1862);
    match(Gauss200Parser::OBJECT_GS);
    setState(1863);
    identifier();
    setState(1864);
    owner_to_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_node_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_node_stmtContext::Alter_node_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_node_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_stmtContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::NodenameContext* Gauss200Parser::Alter_node_stmtContext::nodename() {
  return getRuleContext<Gauss200Parser::NodenameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Alter_node_stmtContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}


size_t Gauss200Parser::Alter_node_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_node_stmt;
}

void Gauss200Parser::Alter_node_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_node_stmt(this);
}

void Gauss200Parser::Alter_node_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_node_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_node_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_node_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_node_stmtContext* Gauss200Parser::alter_node_stmt() {
  Alter_node_stmtContext *_localctx = _tracker.createInstance<Alter_node_stmtContext>(_ctx, getState());
  enterRule(_localctx, 202, Gauss200Parser::RuleAlter_node_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1866);
    match(Gauss200Parser::ALTER_GS);
    setState(1867);
    match(Gauss200Parser::NODE_GS);
    setState(1868);
    nodename();
    setState(1869);
    match(Gauss200Parser::WITH_GS);
    setState(1870);
    paren_assignment_stmt_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodenameContext ------------------------------------------------------------------

Gauss200Parser::NodenameContext::NodenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::NodenameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::NodenameContext::getRuleIndex() const {
  return Gauss200Parser::RuleNodename;
}

void Gauss200Parser::NodenameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNodename(this);
}

void Gauss200Parser::NodenameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNodename(this);
}


antlrcpp::Any Gauss200Parser::NodenameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNodename(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::NodenameContext* Gauss200Parser::nodename() {
  NodenameContext *_localctx = _tracker.createInstance<NodenameContext>(_ctx, getState());
  enterRule(_localctx, 204, Gauss200Parser::RuleNodename);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1872);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_node_listContext ------------------------------------------------------------------

Gauss200Parser::Paren_node_listContext::Paren_node_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_node_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Node_listContext* Gauss200Parser::Paren_node_listContext::node_list() {
  return getRuleContext<Gauss200Parser::Node_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Paren_node_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Paren_node_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_node_list;
}

void Gauss200Parser::Paren_node_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_node_list(this);
}

void Gauss200Parser::Paren_node_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_node_list(this);
}


antlrcpp::Any Gauss200Parser::Paren_node_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_node_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::paren_node_list() {
  Paren_node_listContext *_localctx = _tracker.createInstance<Paren_node_listContext>(_ctx, getState());
  enterRule(_localctx, 206, Gauss200Parser::RuleParen_node_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1874);
    match(Gauss200Parser::LEFT_PAREN);
    setState(1875);
    node_list();
    setState(1876);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Node_listContext ------------------------------------------------------------------

Gauss200Parser::Node_listContext::Node_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::NodenameContext *> Gauss200Parser::Node_listContext::nodename() {
  return getRuleContexts<Gauss200Parser::NodenameContext>();
}

Gauss200Parser::NodenameContext* Gauss200Parser::Node_listContext::nodename(size_t i) {
  return getRuleContext<Gauss200Parser::NodenameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Node_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Node_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Node_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleNode_list;
}

void Gauss200Parser::Node_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNode_list(this);
}

void Gauss200Parser::Node_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNode_list(this);
}


antlrcpp::Any Gauss200Parser::Node_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNode_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Node_listContext* Gauss200Parser::node_list() {
  Node_listContext *_localctx = _tracker.createInstance<Node_listContext>(_ctx, getState());
  enterRule(_localctx, 208, Gauss200Parser::RuleNode_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1878);
    nodename();
    setState(1883);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(1879);
      match(Gauss200Parser::COMMA);
      setState(1880);
      nodename();
      setState(1885);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_node_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_node_optionContext::Alter_node_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Gauss200Parser::Alter_node_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_node_option;
}

void Gauss200Parser::Alter_node_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_node_option(this);
}

void Gauss200Parser::Alter_node_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_node_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_node_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_node_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_node_optionContext* Gauss200Parser::alter_node_option() {
  Alter_node_optionContext *_localctx = _tracker.createInstance<Alter_node_optionContext>(_ctx, getState());
  enterRule(_localctx, 210, Gauss200Parser::RuleAlter_node_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_node_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_node_group_stmtContext::Alter_node_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_stmtContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Alter_node_group_stmtContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

Gauss200Parser::Alter_node_group_optionContext* Gauss200Parser::Alter_node_group_stmtContext::alter_node_group_option() {
  return getRuleContext<Gauss200Parser::Alter_node_group_optionContext>(0);
}


size_t Gauss200Parser::Alter_node_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_node_group_stmt;
}

void Gauss200Parser::Alter_node_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_node_group_stmt(this);
}

void Gauss200Parser::Alter_node_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_node_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_node_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_node_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_node_group_stmtContext* Gauss200Parser::alter_node_group_stmt() {
  Alter_node_group_stmtContext *_localctx = _tracker.createInstance<Alter_node_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 212, Gauss200Parser::RuleAlter_node_group_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1888);
    match(Gauss200Parser::ALTER_GS);
    setState(1889);
    match(Gauss200Parser::NODE_GS);
    setState(1890);
    match(Gauss200Parser::GROUP_GS);
    setState(1891);
    group_name();
    setState(1892);
    alter_node_group_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_node_group_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_node_group_optionContext::Alter_node_group_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_node_group_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::VCGROUP_GS() {
  return getToken(Gauss200Parser::VCGROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Alter_node_group_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::COPY_GS() {
  return getToken(Gauss200Parser::COPY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::BUCKETS_GS() {
  return getToken(Gauss200Parser::BUCKETS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Alter_node_group_optionContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

Gauss200Parser::Add_node_listContext* Gauss200Parser::Alter_node_group_optionContext::add_node_list() {
  return getRuleContext<Gauss200Parser::Add_node_listContext>(0);
}

Gauss200Parser::Delete_node_listContext* Gauss200Parser::Alter_node_group_optionContext::delete_node_list() {
  return getRuleContext<Gauss200Parser::Delete_node_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::RESIZE_GS() {
  return getToken(Gauss200Parser::RESIZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_node_group_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}


size_t Gauss200Parser::Alter_node_group_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_node_group_option;
}

void Gauss200Parser::Alter_node_group_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_node_group_option(this);
}

void Gauss200Parser::Alter_node_group_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_node_group_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_node_group_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_node_group_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_node_group_optionContext* Gauss200Parser::alter_node_group_option() {
  Alter_node_group_optionContext *_localctx = _tracker.createInstance<Alter_node_group_optionContext>(_ctx, getState());
  enterRule(_localctx, 214, Gauss200Parser::RuleAlter_node_group_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1922);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1894);
      match(Gauss200Parser::SET_GS);
      setState(1895);
      match(Gauss200Parser::DEFAULT_GS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1898);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::SET_GS) {
        setState(1896);
        match(Gauss200Parser::SET_GS);
        setState(1897);
        match(Gauss200Parser::VCGROUP_GS);
      }
      setState(1900);
      rename_to_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1901);
      match(Gauss200Parser::SET_GS);
      setState(1902);
      match(Gauss200Parser::NOT_GS);
      setState(1903);
      match(Gauss200Parser::VCGROUP_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1904);
      match(Gauss200Parser::SET_GS);
      setState(1905);
      match(Gauss200Parser::TABLE_GS);
      setState(1906);
      match(Gauss200Parser::GROUP_GS);
      setState(1907);
      new_name();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1908);
      match(Gauss200Parser::COPY_GS);
      setState(1909);
      match(Gauss200Parser::BUCKETS_GS);
      setState(1910);
      match(Gauss200Parser::FROM_GS);
      setState(1911);
      group_name();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1912);
      add_node_list();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1913);
      delete_node_list();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1914);
      match(Gauss200Parser::RESIZE_GS);
      setState(1915);
      match(Gauss200Parser::TO_GS);
      setState(1916);
      group_name();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1917);
      match(Gauss200Parser::SET_GS);
      setState(1918);
      match(Gauss200Parser::VCGROUP_GS);
      setState(1919);
      match(Gauss200Parser::WITH_GS);
      setState(1920);
      match(Gauss200Parser::GROUP_GS);
      setState(1921);
      group_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_node_listContext ------------------------------------------------------------------

Gauss200Parser::Add_node_listContext::Add_node_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Add_node_listContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Add_node_listContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Add_node_listContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}


size_t Gauss200Parser::Add_node_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleAdd_node_list;
}

void Gauss200Parser::Add_node_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_node_list(this);
}

void Gauss200Parser::Add_node_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_node_list(this);
}


antlrcpp::Any Gauss200Parser::Add_node_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAdd_node_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Add_node_listContext* Gauss200Parser::add_node_list() {
  Add_node_listContext *_localctx = _tracker.createInstance<Add_node_listContext>(_ctx, getState());
  enterRule(_localctx, 216, Gauss200Parser::RuleAdd_node_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1924);
    match(Gauss200Parser::ADD_GS);
    setState(1925);
    match(Gauss200Parser::NODE_GS);
    setState(1926);
    paren_node_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_node_listContext ------------------------------------------------------------------

Gauss200Parser::Delete_node_listContext::Delete_node_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Delete_node_listContext::DELETE_GS() {
  return getToken(Gauss200Parser::DELETE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Delete_node_listContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Delete_node_listContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}


size_t Gauss200Parser::Delete_node_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleDelete_node_list;
}

void Gauss200Parser::Delete_node_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelete_node_list(this);
}

void Gauss200Parser::Delete_node_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelete_node_list(this);
}


antlrcpp::Any Gauss200Parser::Delete_node_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDelete_node_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Delete_node_listContext* Gauss200Parser::delete_node_list() {
  Delete_node_listContext *_localctx = _tracker.createInstance<Delete_node_listContext>(_ctx, getState());
  enterRule(_localctx, 218, Gauss200Parser::RuleDelete_node_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1928);
    match(Gauss200Parser::DELETE_GS);
    setState(1929);
    match(Gauss200Parser::NODE_GS);
    setState(1930);
    paren_node_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_resource_pool_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_resource_pool_stmtContext::Alter_resource_pool_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_resource_pool_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_resource_pool_stmtContext::RESOURCE_GS() {
  return getToken(Gauss200Parser::RESOURCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_resource_pool_stmtContext::POOL_GS() {
  return getToken(Gauss200Parser::POOL_GS, 0);
}

Gauss200Parser::Pool_nameContext* Gauss200Parser::Alter_resource_pool_stmtContext::pool_name() {
  return getRuleContext<Gauss200Parser::Pool_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_resource_pool_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Alter_resource_pool_stmtContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}


size_t Gauss200Parser::Alter_resource_pool_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_resource_pool_stmt;
}

void Gauss200Parser::Alter_resource_pool_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_resource_pool_stmt(this);
}

void Gauss200Parser::Alter_resource_pool_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_resource_pool_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_resource_pool_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_resource_pool_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_resource_pool_stmtContext* Gauss200Parser::alter_resource_pool_stmt() {
  Alter_resource_pool_stmtContext *_localctx = _tracker.createInstance<Alter_resource_pool_stmtContext>(_ctx, getState());
  enterRule(_localctx, 220, Gauss200Parser::RuleAlter_resource_pool_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1932);
    match(Gauss200Parser::ALTER_GS);
    setState(1933);
    match(Gauss200Parser::RESOURCE_GS);
    setState(1934);
    match(Gauss200Parser::POOL_GS);
    setState(1935);
    pool_name();
    setState(1936);
    match(Gauss200Parser::WITH_GS);
    setState(1937);
    paren_assignment_stmt_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pool_nameContext ------------------------------------------------------------------

Gauss200Parser::Pool_nameContext::Pool_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Pool_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Pool_nameContext::getRuleIndex() const {
  return Gauss200Parser::RulePool_name;
}

void Gauss200Parser::Pool_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPool_name(this);
}

void Gauss200Parser::Pool_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPool_name(this);
}


antlrcpp::Any Gauss200Parser::Pool_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPool_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Pool_nameContext* Gauss200Parser::pool_name() {
  Pool_nameContext *_localctx = _tracker.createInstance<Pool_nameContext>(_ctx, getState());
  enterRule(_localctx, 222, Gauss200Parser::RulePool_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1939);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_role_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_role_stmtContext::Alter_role_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_role_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_stmtContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Alter_role_stmtContext::role_name() {
  return getRuleContext<Gauss200Parser::Role_nameContext>(0);
}

Gauss200Parser::Alter_role_optionContext* Gauss200Parser::Alter_role_stmtContext::alter_role_option() {
  return getRuleContext<Gauss200Parser::Alter_role_optionContext>(0);
}


size_t Gauss200Parser::Alter_role_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_role_stmt;
}

void Gauss200Parser::Alter_role_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_role_stmt(this);
}

void Gauss200Parser::Alter_role_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_role_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_role_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_role_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_role_stmtContext* Gauss200Parser::alter_role_stmt() {
  Alter_role_stmtContext *_localctx = _tracker.createInstance<Alter_role_stmtContext>(_ctx, getState());
  enterRule(_localctx, 224, Gauss200Parser::RuleAlter_role_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1941);
    match(Gauss200Parser::ALTER_GS);
    setState(1942);
    match(Gauss200Parser::ROLE_GS);
    setState(1943);
    role_name();
    setState(1944);
    alter_role_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_role_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_role_optionContext::Alter_role_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_role_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::Alter_role_with_optionContext *> Gauss200Parser::Alter_role_optionContext::alter_role_with_option() {
  return getRuleContexts<Gauss200Parser::Alter_role_with_optionContext>();
}

Gauss200Parser::Alter_role_with_optionContext* Gauss200Parser::Alter_role_optionContext::alter_role_with_option(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_role_with_optionContext>(i);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_role_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

Gauss200Parser::Set_configuration_paramContext* Gauss200Parser::Alter_role_optionContext::set_configuration_param() {
  return getRuleContext<Gauss200Parser::Set_configuration_paramContext>(0);
}

Gauss200Parser::Reset_configuration_paramContext* Gauss200Parser::Alter_role_optionContext::reset_configuration_param() {
  return getRuleContext<Gauss200Parser::Reset_configuration_paramContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_optionContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_optionContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

Gauss200Parser::Database_nameContext* Gauss200Parser::Alter_role_optionContext::database_name() {
  return getRuleContext<Gauss200Parser::Database_nameContext>(0);
}


size_t Gauss200Parser::Alter_role_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_role_option;
}

void Gauss200Parser::Alter_role_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_role_option(this);
}

void Gauss200Parser::Alter_role_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_role_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_role_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_role_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_role_optionContext* Gauss200Parser::alter_role_option() {
  Alter_role_optionContext *_localctx = _tracker.createInstance<Alter_role_optionContext>(_ctx, getState());
  enterRule(_localctx, 226, Gauss200Parser::RuleAlter_role_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1965);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::EOF:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::CREATEDB_GS:
      case Gauss200Parser::NOCREATEDB_GS:
      case Gauss200Parser::CREATEROLE_GS:
      case Gauss200Parser::NOCREATEROLE_GS:
      case Gauss200Parser::NOINHERIT_GS:
      case Gauss200Parser::AUDITADMIN_GS:
      case Gauss200Parser::NOAUDITADMIN_GS:
      case Gauss200Parser::SYSADMIN_GS:
      case Gauss200Parser::NOSYSADMIN_GS:
      case Gauss200Parser::USEFT_GS:
      case Gauss200Parser::NOUSEFT_GS:
      case Gauss200Parser::REPLICATION_GS:
      case Gauss200Parser::NOREPLICATION_GS:
      case Gauss200Parser::INDEPENDENT_GS:
      case Gauss200Parser::NOINDEPENDENT_GS:
      case Gauss200Parser::VCADMIN_GS:
      case Gauss200Parser::NOVCADMIN_GS:
      case Gauss200Parser::PERM_GS:
      case Gauss200Parser::PGUSER_GS:
      case Gauss200Parser::SEMICOLON: {
        enterOuterAlt(_localctx, 1);
        setState(1947);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::WITH_GS) {
          setState(1946);
          match(Gauss200Parser::WITH_GS);
        }
        setState(1952);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::USER_GS

        || _la == Gauss200Parser::ACCOUNT_GS || _la == Gauss200Parser::CONNECTION_GS

        || _la == Gauss200Parser::ENCRYPTED_GS || ((((_la - 229) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 229)) & ((1ULL << (Gauss200Parser::IDENTIFIED_GS - 229))
          | (1ULL << (Gauss200Parser::INHERIT_GS - 229))
          | (1ULL << (Gauss200Parser::LOGIN_GS - 229))
          | (1ULL << (Gauss200Parser::NODE_GS - 229))
          | (1ULL << (Gauss200Parser::NOLOGIN_GS - 229)))) != 0) || _la == Gauss200Parser::PASSWORD_GS

        || _la == Gauss200Parser::RESOURCE_GS || _la == Gauss200Parser::UNENCRYPTED_GS

        || _la == Gauss200Parser::VALID_GS || ((((_la - 549) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 549)) & ((1ULL << (Gauss200Parser::CREATEDB_GS - 549))
          | (1ULL << (Gauss200Parser::NOCREATEDB_GS - 549))
          | (1ULL << (Gauss200Parser::CREATEROLE_GS - 549))
          | (1ULL << (Gauss200Parser::NOCREATEROLE_GS - 549))
          | (1ULL << (Gauss200Parser::NOINHERIT_GS - 549))
          | (1ULL << (Gauss200Parser::AUDITADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::NOAUDITADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::SYSADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::NOSYSADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::USEFT_GS - 549))
          | (1ULL << (Gauss200Parser::NOUSEFT_GS - 549))
          | (1ULL << (Gauss200Parser::REPLICATION_GS - 549))
          | (1ULL << (Gauss200Parser::NOREPLICATION_GS - 549))
          | (1ULL << (Gauss200Parser::INDEPENDENT_GS - 549))
          | (1ULL << (Gauss200Parser::NOINDEPENDENT_GS - 549))
          | (1ULL << (Gauss200Parser::VCADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::NOVCADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::PERM_GS - 549))
          | (1ULL << (Gauss200Parser::PGUSER_GS - 549)))) != 0)) {
          setState(1949);
          alter_role_with_option();
          setState(1954);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1955);
        rename_to_option();
        break;
      }

      case Gauss200Parser::IN_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::SET_GS: {
        enterOuterAlt(_localctx, 3);
        setState(1959);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::IN_GS) {
          setState(1956);
          match(Gauss200Parser::IN_GS);
          setState(1957);
          match(Gauss200Parser::DATABASE_GS);
          setState(1958);
          database_name();
        }
        setState(1963);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::SET_GS: {
            setState(1961);
            set_configuration_param();
            break;
          }

          case Gauss200Parser::RESET_GS: {
            setState(1962);
            reset_configuration_param();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Role_option_commonContext ------------------------------------------------------------------

Gauss200Parser::Role_option_commonContext::Role_option_commonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::SYSADMIN_GS() {
  return getToken(Gauss200Parser::SYSADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOSYSADMIN_GS() {
  return getToken(Gauss200Parser::NOSYSADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::AUDITADMIN_GS() {
  return getToken(Gauss200Parser::AUDITADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOAUDITADMIN_GS() {
  return getToken(Gauss200Parser::NOAUDITADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::CREATEDB_GS() {
  return getToken(Gauss200Parser::CREATEDB_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOCREATEDB_GS() {
  return getToken(Gauss200Parser::NOCREATEDB_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::USEFT_GS() {
  return getToken(Gauss200Parser::USEFT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOUSEFT_GS() {
  return getToken(Gauss200Parser::NOUSEFT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::CREATEROLE_GS() {
  return getToken(Gauss200Parser::CREATEROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOCREATEROLE_GS() {
  return getToken(Gauss200Parser::NOCREATEROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::INHERIT_GS() {
  return getToken(Gauss200Parser::INHERIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOINHERIT_GS() {
  return getToken(Gauss200Parser::NOINHERIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::LOGIN_GS() {
  return getToken(Gauss200Parser::LOGIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOLOGIN_GS() {
  return getToken(Gauss200Parser::NOLOGIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::REPLICATION_GS() {
  return getToken(Gauss200Parser::REPLICATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOREPLICATION_GS() {
  return getToken(Gauss200Parser::NOREPLICATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::INDEPENDENT_GS() {
  return getToken(Gauss200Parser::INDEPENDENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOINDEPENDENT_GS() {
  return getToken(Gauss200Parser::NOINDEPENDENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::VCADMIN_GS() {
  return getToken(Gauss200Parser::VCADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NOVCADMIN_GS() {
  return getToken(Gauss200Parser::NOVCADMIN_GS, 0);
}

Gauss200Parser::Connection_limitContext* Gauss200Parser::Role_option_commonContext::connection_limit() {
  return getRuleContext<Gauss200Parser::Connection_limitContext>(0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::VALID_GS() {
  return getToken(Gauss200Parser::VALID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::BEGIN_GS() {
  return getToken(Gauss200Parser::BEGIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::UNTIL_GS() {
  return getToken(Gauss200Parser::UNTIL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::RESOURCE_GS() {
  return getToken(Gauss200Parser::RESOURCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::POOL_GS() {
  return getToken(Gauss200Parser::POOL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::PERM_GS() {
  return getToken(Gauss200Parser::PERM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::SPACE_GS() {
  return getToken(Gauss200Parser::SPACE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::Logic_cluster_nameContext* Gauss200Parser::Role_option_commonContext::logic_cluster_name() {
  return getRuleContext<Gauss200Parser::Logic_cluster_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Role_option_commonContext::PGUSER_GS() {
  return getToken(Gauss200Parser::PGUSER_GS, 0);
}


size_t Gauss200Parser::Role_option_commonContext::getRuleIndex() const {
  return Gauss200Parser::RuleRole_option_common;
}

void Gauss200Parser::Role_option_commonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRole_option_common(this);
}

void Gauss200Parser::Role_option_commonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRole_option_common(this);
}


antlrcpp::Any Gauss200Parser::Role_option_commonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRole_option_common(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Role_option_commonContext* Gauss200Parser::role_option_common() {
  Role_option_commonContext *_localctx = _tracker.createInstance<Role_option_commonContext>(_ctx, getState());
  enterRule(_localctx, 228, Gauss200Parser::RuleRole_option_common);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1994);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::SYSADMIN_GS:
      case Gauss200Parser::NOSYSADMIN_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1967);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::SYSADMIN_GS

        || _la == Gauss200Parser::NOSYSADMIN_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::AUDITADMIN_GS:
      case Gauss200Parser::NOAUDITADMIN_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1968);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::AUDITADMIN_GS

        || _la == Gauss200Parser::NOAUDITADMIN_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::CREATEDB_GS:
      case Gauss200Parser::NOCREATEDB_GS: {
        enterOuterAlt(_localctx, 3);
        setState(1969);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::CREATEDB_GS

        || _la == Gauss200Parser::NOCREATEDB_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::USEFT_GS:
      case Gauss200Parser::NOUSEFT_GS: {
        enterOuterAlt(_localctx, 4);
        setState(1970);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::USEFT_GS

        || _la == Gauss200Parser::NOUSEFT_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::CREATEROLE_GS:
      case Gauss200Parser::NOCREATEROLE_GS: {
        enterOuterAlt(_localctx, 5);
        setState(1971);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::CREATEROLE_GS

        || _la == Gauss200Parser::NOCREATEROLE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::NOINHERIT_GS: {
        enterOuterAlt(_localctx, 6);
        setState(1972);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::INHERIT_GS || _la == Gauss200Parser::NOINHERIT_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::NOLOGIN_GS: {
        enterOuterAlt(_localctx, 7);
        setState(1973);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::LOGIN_GS

        || _la == Gauss200Parser::NOLOGIN_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::REPLICATION_GS:
      case Gauss200Parser::NOREPLICATION_GS: {
        enterOuterAlt(_localctx, 8);
        setState(1974);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::REPLICATION_GS

        || _la == Gauss200Parser::NOREPLICATION_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::INDEPENDENT_GS:
      case Gauss200Parser::NOINDEPENDENT_GS: {
        enterOuterAlt(_localctx, 9);
        setState(1975);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::INDEPENDENT_GS

        || _la == Gauss200Parser::NOINDEPENDENT_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::VCADMIN_GS:
      case Gauss200Parser::NOVCADMIN_GS: {
        enterOuterAlt(_localctx, 10);
        setState(1976);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::VCADMIN_GS

        || _la == Gauss200Parser::NOVCADMIN_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::CONNECTION_GS: {
        enterOuterAlt(_localctx, 11);
        setState(1977);
        connection_limit();
        break;
      }

      case Gauss200Parser::VALID_GS: {
        enterOuterAlt(_localctx, 12);
        setState(1978);
        match(Gauss200Parser::VALID_GS);
        setState(1979);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::BEGIN_GS || _la == Gauss200Parser::UNTIL_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1980);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::RESOURCE_GS: {
        enterOuterAlt(_localctx, 13);
        setState(1981);
        match(Gauss200Parser::RESOURCE_GS);
        setState(1982);
        match(Gauss200Parser::POOL_GS);
        setState(1983);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::USER_GS: {
        enterOuterAlt(_localctx, 14);
        setState(1984);
        match(Gauss200Parser::USER_GS);
        setState(1985);
        match(Gauss200Parser::GROUP_GS);
        setState(1986);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::PERM_GS: {
        enterOuterAlt(_localctx, 15);
        setState(1987);
        match(Gauss200Parser::PERM_GS);
        setState(1988);
        match(Gauss200Parser::SPACE_GS);
        setState(1989);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::NODE_GS: {
        enterOuterAlt(_localctx, 16);
        setState(1990);
        match(Gauss200Parser::NODE_GS);
        setState(1991);
        match(Gauss200Parser::GROUP_GS);
        setState(1992);
        logic_cluster_name();
        break;
      }

      case Gauss200Parser::PGUSER_GS: {
        enterOuterAlt(_localctx, 17);
        setState(1993);
        match(Gauss200Parser::PGUSER_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_role_with_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_role_with_optionContext::Alter_role_with_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Role_option_commonContext* Gauss200Parser::Alter_role_with_optionContext::role_option_common() {
  return getRuleContext<Gauss200Parser::Role_option_commonContext>(0);
}

Gauss200Parser::Alter_role_encrypt_optionContext* Gauss200Parser::Alter_role_with_optionContext::alter_role_encrypt_option() {
  return getRuleContext<Gauss200Parser::Alter_role_encrypt_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_with_optionContext::ENCRYPTED_GS() {
  return getToken(Gauss200Parser::ENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_with_optionContext::UNENCRYPTED_GS() {
  return getToken(Gauss200Parser::UNENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_with_optionContext::ACCOUNT_GS() {
  return getToken(Gauss200Parser::ACCOUNT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_with_optionContext::LOCK_GS() {
  return getToken(Gauss200Parser::LOCK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_with_optionContext::UNLOCK_GS() {
  return getToken(Gauss200Parser::UNLOCK_GS, 0);
}


size_t Gauss200Parser::Alter_role_with_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_role_with_option;
}

void Gauss200Parser::Alter_role_with_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_role_with_option(this);
}

void Gauss200Parser::Alter_role_with_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_role_with_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_role_with_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_role_with_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_role_with_optionContext* Gauss200Parser::alter_role_with_option() {
  Alter_role_with_optionContext *_localctx = _tracker.createInstance<Alter_role_with_optionContext>(_ctx, getState());
  enterRule(_localctx, 230, Gauss200Parser::RuleAlter_role_with_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2003);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::CREATEDB_GS:
      case Gauss200Parser::NOCREATEDB_GS:
      case Gauss200Parser::CREATEROLE_GS:
      case Gauss200Parser::NOCREATEROLE_GS:
      case Gauss200Parser::NOINHERIT_GS:
      case Gauss200Parser::AUDITADMIN_GS:
      case Gauss200Parser::NOAUDITADMIN_GS:
      case Gauss200Parser::SYSADMIN_GS:
      case Gauss200Parser::NOSYSADMIN_GS:
      case Gauss200Parser::USEFT_GS:
      case Gauss200Parser::NOUSEFT_GS:
      case Gauss200Parser::REPLICATION_GS:
      case Gauss200Parser::NOREPLICATION_GS:
      case Gauss200Parser::INDEPENDENT_GS:
      case Gauss200Parser::NOINDEPENDENT_GS:
      case Gauss200Parser::VCADMIN_GS:
      case Gauss200Parser::NOVCADMIN_GS:
      case Gauss200Parser::PERM_GS:
      case Gauss200Parser::PGUSER_GS: {
        enterOuterAlt(_localctx, 1);
        setState(1996);
        role_option_common();
        break;
      }

      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::UNENCRYPTED_GS: {
        enterOuterAlt(_localctx, 2);
        setState(1998);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS) {
          setState(1997);
          _la = _input->LA(1);
          if (!(_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(2000);
        alter_role_encrypt_option();
        break;
      }

      case Gauss200Parser::ACCOUNT_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2001);
        match(Gauss200Parser::ACCOUNT_GS);
        setState(2002);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::LOCK_GS || _la == Gauss200Parser::UNLOCK_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_role_encrypt_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_role_encrypt_optionContext::Alter_role_encrypt_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_role_encrypt_optionContext::PASSWORD_GS() {
  return getToken(Gauss200Parser::PASSWORD_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_role_encrypt_optionContext::CHAR_STRING() {
  return getTokens(Gauss200Parser::CHAR_STRING);
}

tree::TerminalNode* Gauss200Parser::Alter_role_encrypt_optionContext::CHAR_STRING(size_t i) {
  return getToken(Gauss200Parser::CHAR_STRING, i);
}

tree::TerminalNode* Gauss200Parser::Alter_role_encrypt_optionContext::DISABLE_GS() {
  return getToken(Gauss200Parser::DISABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_encrypt_optionContext::IDENTIFIED_GS() {
  return getToken(Gauss200Parser::IDENTIFIED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_encrypt_optionContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_encrypt_optionContext::REPLACE_GS() {
  return getToken(Gauss200Parser::REPLACE_GS, 0);
}


size_t Gauss200Parser::Alter_role_encrypt_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_role_encrypt_option;
}

void Gauss200Parser::Alter_role_encrypt_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_role_encrypt_option(this);
}

void Gauss200Parser::Alter_role_encrypt_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_role_encrypt_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_role_encrypt_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_role_encrypt_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_role_encrypt_optionContext* Gauss200Parser::alter_role_encrypt_option() {
  Alter_role_encrypt_optionContext *_localctx = _tracker.createInstance<Alter_role_encrypt_optionContext>(_ctx, getState());
  enterRule(_localctx, 232, Gauss200Parser::RuleAlter_role_encrypt_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2017);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::PASSWORD_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2005);
        match(Gauss200Parser::PASSWORD_GS);
        setState(2006);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::DISABLE_GS || _la == Gauss200Parser::CHAR_STRING)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::IDENTIFIED_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2007);
        match(Gauss200Parser::IDENTIFIED_GS);
        setState(2008);
        match(Gauss200Parser::BY_GS);
        setState(2015);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::CHAR_STRING: {
            setState(2009);
            match(Gauss200Parser::CHAR_STRING);
            setState(2012);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == Gauss200Parser::REPLACE_GS) {
              setState(2010);
              match(Gauss200Parser::REPLACE_GS);
              setState(2011);
              match(Gauss200Parser::CHAR_STRING);
            }
            break;
          }

          case Gauss200Parser::DISABLE_GS: {
            setState(2014);
            match(Gauss200Parser::DISABLE_GS);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logic_cluster_nameContext ------------------------------------------------------------------

Gauss200Parser::Logic_cluster_nameContext::Logic_cluster_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Logic_cluster_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Logic_cluster_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleLogic_cluster_name;
}

void Gauss200Parser::Logic_cluster_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogic_cluster_name(this);
}

void Gauss200Parser::Logic_cluster_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogic_cluster_name(this);
}


antlrcpp::Any Gauss200Parser::Logic_cluster_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLogic_cluster_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Logic_cluster_nameContext* Gauss200Parser::logic_cluster_name() {
  Logic_cluster_nameContext *_localctx = _tracker.createInstance<Logic_cluster_nameContext>(_ctx, getState());
  enterRule(_localctx, 234, Gauss200Parser::RuleLogic_cluster_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2019);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_role_level_security_policy_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_role_level_security_policy_stmtContext::Alter_role_level_security_policy_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_role_level_security_policy_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_level_security_policy_stmtContext::POLICY_GS() {
  return getToken(Gauss200Parser::POLICY_GS, 0);
}

Gauss200Parser::Policy_nameContext* Gauss200Parser::Alter_role_level_security_policy_stmtContext::policy_name() {
  return getRuleContext<Gauss200Parser::Policy_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_role_level_security_policy_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Alter_role_level_security_policy_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Alter_role_level_security_policy_optionContext* Gauss200Parser::Alter_role_level_security_policy_stmtContext::alter_role_level_security_policy_option() {
  return getRuleContext<Gauss200Parser::Alter_role_level_security_policy_optionContext>(0);
}

Gauss200Parser::Row_level_securityContext* Gauss200Parser::Alter_role_level_security_policy_stmtContext::row_level_security() {
  return getRuleContext<Gauss200Parser::Row_level_securityContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_role_level_security_policy_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Alter_role_level_security_policy_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_role_level_security_policy_stmt;
}

void Gauss200Parser::Alter_role_level_security_policy_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_role_level_security_policy_stmt(this);
}

void Gauss200Parser::Alter_role_level_security_policy_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_role_level_security_policy_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_role_level_security_policy_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_role_level_security_policy_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_role_level_security_policy_stmtContext* Gauss200Parser::alter_role_level_security_policy_stmt() {
  Alter_role_level_security_policy_stmtContext *_localctx = _tracker.createInstance<Alter_role_level_security_policy_stmtContext>(_ctx, getState());
  enterRule(_localctx, 236, Gauss200Parser::RuleAlter_role_level_security_policy_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2021);
    match(Gauss200Parser::ALTER_GS);
    setState(2023);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ROW_GS) {
      setState(2022);
      row_level_security();
    }
    setState(2025);
    match(Gauss200Parser::POLICY_GS);
    setState(2027);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      setState(2026);
      if_exists_or_not();
      break;
    }

    }
    setState(2029);
    policy_name();
    setState(2030);
    match(Gauss200Parser::ON_GS);
    setState(2031);
    table_name();
    setState(2032);
    alter_role_level_security_policy_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_level_securityContext ------------------------------------------------------------------

Gauss200Parser::Row_level_securityContext::Row_level_securityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Row_level_securityContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Row_level_securityContext::LEVEL_GS() {
  return getToken(Gauss200Parser::LEVEL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Row_level_securityContext::SECURITY_GS() {
  return getToken(Gauss200Parser::SECURITY_GS, 0);
}


size_t Gauss200Parser::Row_level_securityContext::getRuleIndex() const {
  return Gauss200Parser::RuleRow_level_security;
}

void Gauss200Parser::Row_level_securityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRow_level_security(this);
}

void Gauss200Parser::Row_level_securityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRow_level_security(this);
}


antlrcpp::Any Gauss200Parser::Row_level_securityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRow_level_security(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Row_level_securityContext* Gauss200Parser::row_level_security() {
  Row_level_securityContext *_localctx = _tracker.createInstance<Row_level_securityContext>(_ctx, getState());
  enterRule(_localctx, 238, Gauss200Parser::RuleRow_level_security);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2034);
    match(Gauss200Parser::ROW_GS);
    setState(2035);
    match(Gauss200Parser::LEVEL_GS);
    setState(2036);
    match(Gauss200Parser::SECURITY_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Policy_nameContext ------------------------------------------------------------------

Gauss200Parser::Policy_nameContext::Policy_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Policy_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Policy_nameContext::getRuleIndex() const {
  return Gauss200Parser::RulePolicy_name;
}

void Gauss200Parser::Policy_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPolicy_name(this);
}

void Gauss200Parser::Policy_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPolicy_name(this);
}


antlrcpp::Any Gauss200Parser::Policy_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPolicy_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Policy_nameContext* Gauss200Parser::policy_name() {
  Policy_nameContext *_localctx = _tracker.createInstance<Policy_nameContext>(_ctx, getState());
  enterRule(_localctx, 240, Gauss200Parser::RulePolicy_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2038);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_role_level_security_policy_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_role_level_security_policy_optionContext::Alter_role_level_security_policy_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_role_level_security_policy_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_role_level_security_policy_optionContext::TO_GS() {
  return getTokens(Gauss200Parser::TO_GS);
}

tree::TerminalNode* Gauss200Parser::Alter_role_level_security_policy_optionContext::TO_GS(size_t i) {
  return getToken(Gauss200Parser::TO_GS, i);
}

std::vector<Gauss200Parser::Grant_revoke_objectsContext *> Gauss200Parser::Alter_role_level_security_policy_optionContext::grant_revoke_objects() {
  return getRuleContexts<Gauss200Parser::Grant_revoke_objectsContext>();
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Alter_role_level_security_policy_optionContext::grant_revoke_objects(size_t i) {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(i);
}

std::vector<Gauss200Parser::Using_expr_optionContext *> Gauss200Parser::Alter_role_level_security_policy_optionContext::using_expr_option() {
  return getRuleContexts<Gauss200Parser::Using_expr_optionContext>();
}

Gauss200Parser::Using_expr_optionContext* Gauss200Parser::Alter_role_level_security_policy_optionContext::using_expr_option(size_t i) {
  return getRuleContext<Gauss200Parser::Using_expr_optionContext>(i);
}


size_t Gauss200Parser::Alter_role_level_security_policy_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_role_level_security_policy_option;
}

void Gauss200Parser::Alter_role_level_security_policy_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_role_level_security_policy_option(this);
}

void Gauss200Parser::Alter_role_level_security_policy_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_role_level_security_policy_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_role_level_security_policy_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_role_level_security_policy_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_role_level_security_policy_optionContext* Gauss200Parser::alter_role_level_security_policy_option() {
  Alter_role_level_security_policy_optionContext *_localctx = _tracker.createInstance<Alter_role_level_security_policy_optionContext>(_ctx, getState());
  enterRule(_localctx, 242, Gauss200Parser::RuleAlter_role_level_security_policy_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2049);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2040);
        rename_to_option();
        break;
      }

      case Gauss200Parser::EOF:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(2046);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::TO_GS

        || _la == Gauss200Parser::USING_GS) {
          setState(2044);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case Gauss200Parser::TO_GS: {
              setState(2041);
              match(Gauss200Parser::TO_GS);
              setState(2042);
              grant_revoke_objects();
              break;
            }

            case Gauss200Parser::USING_GS: {
              setState(2043);
              using_expr_option();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2048);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Using_expr_optionContext ------------------------------------------------------------------

Gauss200Parser::Using_expr_optionContext::Using_expr_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Using_expr_optionContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Using_expr_optionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Using_expr_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Using_expr_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Using_expr_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleUsing_expr_option;
}

void Gauss200Parser::Using_expr_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsing_expr_option(this);
}

void Gauss200Parser::Using_expr_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsing_expr_option(this);
}


antlrcpp::Any Gauss200Parser::Using_expr_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUsing_expr_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Using_expr_optionContext* Gauss200Parser::using_expr_option() {
  Using_expr_optionContext *_localctx = _tracker.createInstance<Using_expr_optionContext>(_ctx, getState());
  enterRule(_localctx, 244, Gauss200Parser::RuleUsing_expr_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2058);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2051);
      match(Gauss200Parser::USING_GS);
      setState(2052);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2053);
      match(Gauss200Parser::USING_GS);
      setState(2054);
      match(Gauss200Parser::LEFT_PAREN);
      setState(2055);
      expression();
      setState(2056);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_schema_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_schema_stmtContext::Alter_schema_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_schema_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_schema_stmtContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Alter_schema_stmtContext::schema_name() {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(0);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_schema_stmtContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}


size_t Gauss200Parser::Alter_schema_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_schema_stmt;
}

void Gauss200Parser::Alter_schema_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_schema_stmt(this);
}

void Gauss200Parser::Alter_schema_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_schema_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_schema_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_schema_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_schema_stmtContext* Gauss200Parser::alter_schema_stmt() {
  Alter_schema_stmtContext *_localctx = _tracker.createInstance<Alter_schema_stmtContext>(_ctx, getState());
  enterRule(_localctx, 246, Gauss200Parser::RuleAlter_schema_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2060);
    match(Gauss200Parser::ALTER_GS);
    setState(2061);
    match(Gauss200Parser::SCHEMA_GS);
    setState(2062);
    schema_name();
    setState(2063);
    rename_owner_to_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_sequence_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_sequence_stmtContext::Alter_sequence_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_sequence_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_sequence_stmtContext::SEQUENCE_GS() {
  return getToken(Gauss200Parser::SEQUENCE_GS, 0);
}

Gauss200Parser::Sequence_nameContext* Gauss200Parser::Alter_sequence_stmtContext::sequence_name() {
  return getRuleContext<Gauss200Parser::Sequence_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_sequence_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Alter_seq_optionContext* Gauss200Parser::Alter_sequence_stmtContext::alter_seq_option() {
  return getRuleContext<Gauss200Parser::Alter_seq_optionContext>(0);
}


size_t Gauss200Parser::Alter_sequence_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_sequence_stmt;
}

void Gauss200Parser::Alter_sequence_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_sequence_stmt(this);
}

void Gauss200Parser::Alter_sequence_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_sequence_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_sequence_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_sequence_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_sequence_stmtContext* Gauss200Parser::alter_sequence_stmt() {
  Alter_sequence_stmtContext *_localctx = _tracker.createInstance<Alter_sequence_stmtContext>(_ctx, getState());
  enterRule(_localctx, 248, Gauss200Parser::RuleAlter_sequence_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2065);
    match(Gauss200Parser::ALTER_GS);
    setState(2066);
    match(Gauss200Parser::SEQUENCE_GS);
    setState(2068);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      setState(2067);
      if_exists_or_not();
      break;
    }

    }
    setState(2070);
    sequence_name();
    setState(2072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::OWNED_GS

    || _la == Gauss200Parser::OWNER_GS) {
      setState(2071);
      alter_seq_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_nameContext ------------------------------------------------------------------

Gauss200Parser::Sequence_nameContext::Sequence_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Sequence_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Sequence_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleSequence_name;
}

void Gauss200Parser::Sequence_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_name(this);
}

void Gauss200Parser::Sequence_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_name(this);
}


antlrcpp::Any Gauss200Parser::Sequence_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSequence_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Sequence_nameContext* Gauss200Parser::sequence_name() {
  Sequence_nameContext *_localctx = _tracker.createInstance<Sequence_nameContext>(_ctx, getState());
  enterRule(_localctx, 250, Gauss200Parser::RuleSequence_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2074);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_seq_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_seq_optionContext::Alter_seq_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Owner_to_optionContext* Gauss200Parser::Alter_seq_optionContext::owner_to_option() {
  return getRuleContext<Gauss200Parser::Owner_to_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_seq_optionContext::OWNED_GS() {
  return getToken(Gauss200Parser::OWNED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_seq_optionContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

Gauss200Parser::General_elementContext* Gauss200Parser::Alter_seq_optionContext::general_element() {
  return getRuleContext<Gauss200Parser::General_elementContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_seq_optionContext::NONE_GS() {
  return getToken(Gauss200Parser::NONE_GS, 0);
}


size_t Gauss200Parser::Alter_seq_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_seq_option;
}

void Gauss200Parser::Alter_seq_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_seq_option(this);
}

void Gauss200Parser::Alter_seq_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_seq_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_seq_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_seq_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_seq_optionContext* Gauss200Parser::alter_seq_option() {
  Alter_seq_optionContext *_localctx = _tracker.createInstance<Alter_seq_optionContext>(_ctx, getState());
  enterRule(_localctx, 252, Gauss200Parser::RuleAlter_seq_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2083);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::OWNER_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2076);
        owner_to_option();
        break;
      }

      case Gauss200Parser::OWNED_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2077);
        match(Gauss200Parser::OWNED_GS);
        setState(2078);
        match(Gauss200Parser::BY_GS);
        setState(2081);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
        case 1: {
          setState(2079);
          general_element();
          break;
        }

        case 2: {
          setState(2080);
          match(Gauss200Parser::NONE_GS);
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_server_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_server_stmtContext::Alter_server_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_server_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_server_stmtContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

Gauss200Parser::Server_nameContext* Gauss200Parser::Alter_server_stmtContext::server_name() {
  return getRuleContext<Gauss200Parser::Server_nameContext>(0);
}

Gauss200Parser::Alter_server_optionContext* Gauss200Parser::Alter_server_stmtContext::alter_server_option() {
  return getRuleContext<Gauss200Parser::Alter_server_optionContext>(0);
}


size_t Gauss200Parser::Alter_server_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_server_stmt;
}

void Gauss200Parser::Alter_server_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_server_stmt(this);
}

void Gauss200Parser::Alter_server_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_server_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_server_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_server_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_server_stmtContext* Gauss200Parser::alter_server_stmt() {
  Alter_server_stmtContext *_localctx = _tracker.createInstance<Alter_server_stmtContext>(_ctx, getState());
  enterRule(_localctx, 254, Gauss200Parser::RuleAlter_server_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2085);
    match(Gauss200Parser::ALTER_GS);
    setState(2086);
    match(Gauss200Parser::SERVER_GS);
    setState(2087);
    server_name();
    setState(2089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 304) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 304)) & ((1ULL << (Gauss200Parser::OPTIONS_GS - 304))
      | (1ULL << (Gauss200Parser::OWNER_GS - 304))
      | (1ULL << (Gauss200Parser::RENAME_GS - 304)))) != 0) || _la == Gauss200Parser::VERSION_GS) {
      setState(2088);
      alter_server_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Server_nameContext ------------------------------------------------------------------

Gauss200Parser::Server_nameContext::Server_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Server_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Server_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleServer_name;
}

void Gauss200Parser::Server_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterServer_name(this);
}

void Gauss200Parser::Server_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitServer_name(this);
}


antlrcpp::Any Gauss200Parser::Server_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitServer_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Server_nameContext* Gauss200Parser::server_name() {
  Server_nameContext *_localctx = _tracker.createInstance<Server_nameContext>(_ctx, getState());
  enterRule(_localctx, 256, Gauss200Parser::RuleServer_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2091);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_server_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_server_optionContext::Alter_server_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_server_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::Alter_server_optionContext::alter_property_options() {
  return getRuleContext<Gauss200Parser::Alter_property_optionsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_server_optionContext::VERSION_GS() {
  return getToken(Gauss200Parser::VERSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_server_optionContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}


size_t Gauss200Parser::Alter_server_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_server_option;
}

void Gauss200Parser::Alter_server_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_server_option(this);
}

void Gauss200Parser::Alter_server_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_server_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_server_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_server_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_server_optionContext* Gauss200Parser::alter_server_option() {
  Alter_server_optionContext *_localctx = _tracker.createInstance<Alter_server_optionContext>(_ctx, getState());
  enterRule(_localctx, 258, Gauss200Parser::RuleAlter_server_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2099);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2093);
        rename_owner_to_option();
        break;
      }

      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::VERSION_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2096);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::VERSION_GS) {
          setState(2094);
          match(Gauss200Parser::VERSION_GS);
          setState(2095);
          match(Gauss200Parser::CHAR_STRING);
        }
        setState(2098);
        alter_property_options();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_session_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_session_stmtContext::Alter_session_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_session_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_stmtContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_stmtContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Alter_session_optionContext* Gauss200Parser::Alter_session_stmtContext::alter_session_option() {
  return getRuleContext<Gauss200Parser::Alter_session_optionContext>(0);
}


size_t Gauss200Parser::Alter_session_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_session_stmt;
}

void Gauss200Parser::Alter_session_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_session_stmt(this);
}

void Gauss200Parser::Alter_session_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_session_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_session_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_session_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_session_stmtContext* Gauss200Parser::alter_session_stmt() {
  Alter_session_stmtContext *_localctx = _tracker.createInstance<Alter_session_stmtContext>(_ctx, getState());
  enterRule(_localctx, 260, Gauss200Parser::RuleAlter_session_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2101);
    match(Gauss200Parser::ALTER_GS);
    setState(2102);
    match(Gauss200Parser::SESSION_GS);
    setState(2103);
    match(Gauss200Parser::SET_GS);
    setState(2104);
    alter_session_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_session_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_session_optionContext::Alter_session_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_session_optionContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}

Gauss200Parser::Alter_session_transaction_param_listContext* Gauss200Parser::Alter_session_optionContext::alter_session_transaction_param_list() {
  return getRuleContext<Gauss200Parser::Alter_session_transaction_param_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_optionContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_optionContext::CHARACTERISTICS_GS() {
  return getToken(Gauss200Parser::CHARACTERISTICS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_optionContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::Alter_session_runtime_paramContext* Gauss200Parser::Alter_session_optionContext::alter_session_runtime_param() {
  return getRuleContext<Gauss200Parser::Alter_session_runtime_paramContext>(0);
}


size_t Gauss200Parser::Alter_session_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_session_option;
}

void Gauss200Parser::Alter_session_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_session_option(this);
}

void Gauss200Parser::Alter_session_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_session_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_session_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_session_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_session_optionContext* Gauss200Parser::alter_session_option() {
  Alter_session_optionContext *_localctx = _tracker.createInstance<Alter_session_optionContext>(_ctx, getState());
  enterRule(_localctx, 262, Gauss200Parser::RuleAlter_session_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2114);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2109);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::SESSION_GS) {
        setState(2106);
        match(Gauss200Parser::SESSION_GS);
        setState(2107);
        match(Gauss200Parser::CHARACTERISTICS_GS);
        setState(2108);
        match(Gauss200Parser::AS_GS);
      }
      setState(2111);
      match(Gauss200Parser::TRANSACTION_GS);
      setState(2112);
      alter_session_transaction_param_list();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2113);
      alter_session_runtime_param();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_session_transaction_param_listContext ------------------------------------------------------------------

Gauss200Parser::Alter_session_transaction_param_listContext::Alter_session_transaction_param_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Alter_session_transaction_paramContext *> Gauss200Parser::Alter_session_transaction_param_listContext::alter_session_transaction_param() {
  return getRuleContexts<Gauss200Parser::Alter_session_transaction_paramContext>();
}

Gauss200Parser::Alter_session_transaction_paramContext* Gauss200Parser::Alter_session_transaction_param_listContext::alter_session_transaction_param(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_session_transaction_paramContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_session_transaction_param_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_param_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Alter_session_transaction_param_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_session_transaction_param_list;
}

void Gauss200Parser::Alter_session_transaction_param_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_session_transaction_param_list(this);
}

void Gauss200Parser::Alter_session_transaction_param_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_session_transaction_param_list(this);
}


antlrcpp::Any Gauss200Parser::Alter_session_transaction_param_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_session_transaction_param_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_session_transaction_param_listContext* Gauss200Parser::alter_session_transaction_param_list() {
  Alter_session_transaction_param_listContext *_localctx = _tracker.createInstance<Alter_session_transaction_param_listContext>(_ctx, getState());
  enterRule(_localctx, 264, Gauss200Parser::RuleAlter_session_transaction_param_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2116);
    alter_session_transaction_param();
    setState(2121);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2117);
      match(Gauss200Parser::COMMA);
      setState(2118);
      alter_session_transaction_param();
      setState(2123);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_session_transaction_paramContext ------------------------------------------------------------------

Gauss200Parser::Alter_session_transaction_paramContext::Alter_session_transaction_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_paramContext::ISOLATION_GS() {
  return getToken(Gauss200Parser::ISOLATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_paramContext::LEVEL_GS() {
  return getToken(Gauss200Parser::LEVEL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_paramContext::READ_GS() {
  return getToken(Gauss200Parser::READ_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_paramContext::COMMITTED_GS() {
  return getToken(Gauss200Parser::COMMITTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_paramContext::UNCOMMITTED_GS() {
  return getToken(Gauss200Parser::UNCOMMITTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_paramContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_transaction_paramContext::WRITE_GS() {
  return getToken(Gauss200Parser::WRITE_GS, 0);
}


size_t Gauss200Parser::Alter_session_transaction_paramContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_session_transaction_param;
}

void Gauss200Parser::Alter_session_transaction_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_session_transaction_param(this);
}

void Gauss200Parser::Alter_session_transaction_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_session_transaction_param(this);
}


antlrcpp::Any Gauss200Parser::Alter_session_transaction_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_session_transaction_param(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_session_transaction_paramContext* Gauss200Parser::alter_session_transaction_param() {
  Alter_session_transaction_paramContext *_localctx = _tracker.createInstance<Alter_session_transaction_paramContext>(_ctx, getState());
  enterRule(_localctx, 266, Gauss200Parser::RuleAlter_session_transaction_param);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2130);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ISOLATION_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2124);
        match(Gauss200Parser::ISOLATION_GS);
        setState(2125);
        match(Gauss200Parser::LEVEL_GS);
        setState(2126);
        match(Gauss200Parser::READ_GS);
        setState(2127);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::COMMITTED_GS || _la == Gauss200Parser::UNCOMMITTED_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::READ_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2128);
        match(Gauss200Parser::READ_GS);
        setState(2129);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::ONLY_GS || _la == Gauss200Parser::WRITE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_session_runtime_paramContext ------------------------------------------------------------------

Gauss200Parser::Alter_session_runtime_paramContext::Alter_session_runtime_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Param_nameContext* Gauss200Parser::Alter_session_runtime_paramContext::param_name() {
  return getRuleContext<Gauss200Parser::Param_nameContext>(0);
}

Gauss200Parser::Expr_defaultContext* Gauss200Parser::Alter_session_runtime_paramContext::expr_default() {
  return getRuleContext<Gauss200Parser::Expr_defaultContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::CURRENT_GS() {
  return getToken(Gauss200Parser::CURRENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::CURRENT_SCHEMA_GS() {
  return getToken(Gauss200Parser::CURRENT_SCHEMA_GS, 0);
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Alter_session_runtime_paramContext::schema_name() {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::ZONE_GS() {
  return getToken(Gauss200Parser::ZONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::NAMES_GS() {
  return getToken(Gauss200Parser::NAMES_GS, 0);
}

Gauss200Parser::Encoding_nameContext* Gauss200Parser::Alter_session_runtime_paramContext::encoding_name() {
  return getRuleContext<Gauss200Parser::Encoding_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Alter_session_runtime_paramContext::role_name() {
  return getRuleContext<Gauss200Parser::Role_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::PASSWORD_GS() {
  return getToken(Gauss200Parser::PASSWORD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::AUTHORIZATION_GS() {
  return getToken(Gauss200Parser::AUTHORIZATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::XML_GS() {
  return getToken(Gauss200Parser::XML_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::OPTION_GS() {
  return getToken(Gauss200Parser::OPTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::DOCUMENT_GS() {
  return getToken(Gauss200Parser::DOCUMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_session_runtime_paramContext::CONTENT_GS() {
  return getToken(Gauss200Parser::CONTENT_GS, 0);
}


size_t Gauss200Parser::Alter_session_runtime_paramContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_session_runtime_param;
}

void Gauss200Parser::Alter_session_runtime_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_session_runtime_param(this);
}

void Gauss200Parser::Alter_session_runtime_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_session_runtime_param(this);
}


antlrcpp::Any Gauss200Parser::Alter_session_runtime_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_session_runtime_param(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_session_runtime_paramContext* Gauss200Parser::alter_session_runtime_param() {
  Alter_session_runtime_paramContext *_localctx = _tracker.createInstance<Alter_session_runtime_paramContext>(_ctx, getState());
  enterRule(_localctx, 268, Gauss200Parser::RuleAlter_session_runtime_param);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2172);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2132);
      param_name();
      setState(2137);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::TO_GS:
        case Gauss200Parser::EQUALS_OP: {
          setState(2133);
          _la = _input->LA(1);
          if (!(_la == Gauss200Parser::TO_GS || _la == Gauss200Parser::EQUALS_OP)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2134);
          expr_default();
          break;
        }

        case Gauss200Parser::FROM_GS: {
          setState(2135);
          match(Gauss200Parser::FROM_GS);
          setState(2136);
          match(Gauss200Parser::CURRENT_GS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2139);
      match(Gauss200Parser::CURRENT_SCHEMA_GS);
      setState(2141);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
      case 1: {
        setState(2140);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::TO_GS || _la == Gauss200Parser::EQUALS_OP)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(2145);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
      case 1: {
        setState(2143);
        schema_name();
        break;
      }

      case 2: {
        setState(2144);
        match(Gauss200Parser::DEFAULT_GS);
        break;
      }

      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2147);
      match(Gauss200Parser::TIME_GS);
      setState(2148);
      match(Gauss200Parser::ZONE_GS);
      setState(2149);
      match(Gauss200Parser::CHAR_STRING);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2150);
      match(Gauss200Parser::SCHEMA_GS);
      setState(2151);
      schema_name();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2152);
      match(Gauss200Parser::NAMES_GS);
      setState(2153);
      encoding_name();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2154);
      match(Gauss200Parser::ROLE_GS);
      setState(2155);
      role_name();
      setState(2156);
      match(Gauss200Parser::PASSWORD_GS);
      setState(2157);
      match(Gauss200Parser::CHAR_STRING);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2159);
      match(Gauss200Parser::SESSION_GS);
      setState(2160);
      match(Gauss200Parser::AUTHORIZATION_GS);
      setState(2166);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
      case 1: {
        setState(2161);
        role_name();
        setState(2162);
        match(Gauss200Parser::PASSWORD_GS);
        setState(2163);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case 2: {
        setState(2165);
        match(Gauss200Parser::DEFAULT_GS);
        break;
      }

      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2168);
      match(Gauss200Parser::XML_GS);
      setState(2169);
      match(Gauss200Parser::OPTION_GS);
      setState(2170);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::CONTENT_GS

      || _la == Gauss200Parser::DOCUMENT_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);

      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_defaultContext ------------------------------------------------------------------

Gauss200Parser::Expr_defaultContext::Expr_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Expr_defaultContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Expr_defaultContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}


size_t Gauss200Parser::Expr_defaultContext::getRuleIndex() const {
  return Gauss200Parser::RuleExpr_default;
}

void Gauss200Parser::Expr_defaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_default(this);
}

void Gauss200Parser::Expr_defaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_default(this);
}


antlrcpp::Any Gauss200Parser::Expr_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExpr_default(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Expr_defaultContext* Gauss200Parser::expr_default() {
  Expr_defaultContext *_localctx = _tracker.createInstance<Expr_defaultContext>(_ctx, getState());
  enterRule(_localctx, 270, Gauss200Parser::RuleExpr_default);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2176);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2174);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2175);
      match(Gauss200Parser::DEFAULT_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Encoding_nameContext ------------------------------------------------------------------

Gauss200Parser::Encoding_nameContext::Encoding_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Encoding_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Encoding_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleEncoding_name;
}

void Gauss200Parser::Encoding_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEncoding_name(this);
}

void Gauss200Parser::Encoding_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEncoding_name(this);
}


antlrcpp::Any Gauss200Parser::Encoding_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitEncoding_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Encoding_nameContext* Gauss200Parser::encoding_name() {
  Encoding_nameContext *_localctx = _tracker.createInstance<Encoding_nameContext>(_ctx, getState());
  enterRule(_localctx, 272, Gauss200Parser::RuleEncoding_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2178);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_sys_kill_session_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_sys_kill_session_stmtContext::Alter_sys_kill_session_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_sys_kill_session_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_sys_kill_session_stmtContext::SYSTEM_GS() {
  return getToken(Gauss200Parser::SYSTEM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_sys_kill_session_stmtContext::KILL_GS() {
  return getToken(Gauss200Parser::KILL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_sys_kill_session_stmtContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_sys_kill_session_stmtContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_sys_kill_session_stmtContext::IMMEDIATE_GS() {
  return getToken(Gauss200Parser::IMMEDIATE_GS, 0);
}


size_t Gauss200Parser::Alter_sys_kill_session_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_sys_kill_session_stmt;
}

void Gauss200Parser::Alter_sys_kill_session_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_sys_kill_session_stmt(this);
}

void Gauss200Parser::Alter_sys_kill_session_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_sys_kill_session_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_sys_kill_session_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_sys_kill_session_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_sys_kill_session_stmtContext* Gauss200Parser::alter_sys_kill_session_stmt() {
  Alter_sys_kill_session_stmtContext *_localctx = _tracker.createInstance<Alter_sys_kill_session_stmtContext>(_ctx, getState());
  enterRule(_localctx, 274, Gauss200Parser::RuleAlter_sys_kill_session_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2180);
    match(Gauss200Parser::ALTER_GS);
    setState(2181);
    match(Gauss200Parser::SYSTEM_GS);
    setState(2182);
    match(Gauss200Parser::KILL_GS);
    setState(2183);
    match(Gauss200Parser::SESSION_GS);
    setState(2184);
    match(Gauss200Parser::CHAR_STRING);
    setState(2186);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::IMMEDIATE_GS) {
      setState(2185);
      match(Gauss200Parser::IMMEDIATE_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_stmtContext::Alter_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_table_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Alter_table_nameContext* Gauss200Parser::Alter_table_stmtContext::alter_table_name() {
  return getRuleContext<Gauss200Parser::Alter_table_nameContext>(0);
}

Gauss200Parser::Alter_table_stmt_optionContext* Gauss200Parser::Alter_table_stmtContext::alter_table_stmt_option() {
  return getRuleContext<Gauss200Parser::Alter_table_stmt_optionContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_table_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Alter_table_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_stmt;
}

void Gauss200Parser::Alter_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_stmt(this);
}

void Gauss200Parser::Alter_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_stmtContext* Gauss200Parser::alter_table_stmt() {
  Alter_table_stmtContext *_localctx = _tracker.createInstance<Alter_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 276, Gauss200Parser::RuleAlter_table_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2188);
    match(Gauss200Parser::ALTER_GS);
    setState(2189);
    match(Gauss200Parser::TABLE_GS);
    setState(2191);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(2190);
      if_exists_or_not();
      break;
    }

    }
    setState(2193);
    alter_table_name();
    setState(2194);
    alter_table_stmt_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_nameContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_nameContext::Alter_table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Alter_table_nameContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_nameContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_nameContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_nameContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_nameContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Alter_table_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_name;
}

void Gauss200Parser::Alter_table_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_name(this);
}

void Gauss200Parser::Alter_table_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_name(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_nameContext* Gauss200Parser::alter_table_name() {
  Alter_table_nameContext *_localctx = _tracker.createInstance<Alter_table_nameContext>(_ctx, getState());
  enterRule(_localctx, 278, Gauss200Parser::RuleAlter_table_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2207);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2196);
      table_name();
      setState(2198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::ASTERISK) {
        setState(2197);
        match(Gauss200Parser::ASTERISK);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2200);
      match(Gauss200Parser::ONLY_GS);
      setState(2201);
      table_name();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2202);
      match(Gauss200Parser::ONLY_GS);
      setState(2203);
      match(Gauss200Parser::LEFT_PAREN);
      setState(2204);
      table_name();
      setState(2205);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_stmt_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_stmt_optionContext::Alter_table_stmt_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alter_table_optionContext* Gauss200Parser::Alter_table_stmt_optionContext::alter_table_option() {
  return getRuleContext<Gauss200Parser::Alter_table_optionContext>(0);
}

Gauss200Parser::Alter_table_partition_optionContext* Gauss200Parser::Alter_table_stmt_optionContext::alter_table_partition_option() {
  return getRuleContext<Gauss200Parser::Alter_table_partition_optionContext>(0);
}


size_t Gauss200Parser::Alter_table_stmt_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_stmt_option;
}

void Gauss200Parser::Alter_table_stmt_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_stmt_option(this);
}

void Gauss200Parser::Alter_table_stmt_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_stmt_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_stmt_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_stmt_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_stmt_optionContext* Gauss200Parser::alter_table_stmt_option() {
  Alter_table_stmt_optionContext *_localctx = _tracker.createInstance<Alter_table_stmt_optionContext>(_ctx, getState());
  enterRule(_localctx, 280, Gauss200Parser::RuleAlter_table_stmt_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2211);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2209);
      alter_table_option();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2210);
      alter_table_partition_option();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_optionContext::Alter_table_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alter_table_action_listContext* Gauss200Parser::Alter_table_optionContext::alter_table_action_list() {
  return getRuleContext<Gauss200Parser::Alter_table_action_listContext>(0);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_table_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::RENAME_GS() {
  return getToken(Gauss200Parser::RENAME_GS, 0);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Alter_table_optionContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Alter_table_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::COLUMN_GS() {
  return getToken(Gauss200Parser::COLUMN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Alter_table_optionContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

Gauss200Parser::Alter_set_schemaContext* Gauss200Parser::Alter_table_optionContext::alter_set_schema() {
  return getRuleContext<Gauss200Parser::Alter_set_schemaContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Column_clause_add_column_optionContext *> Gauss200Parser::Alter_table_optionContext::column_clause_add_column_option() {
  return getRuleContexts<Gauss200Parser::Column_clause_add_column_optionContext>();
}

Gauss200Parser::Column_clause_add_column_optionContext* Gauss200Parser::Alter_table_optionContext::column_clause_add_column_option(size_t i) {
  return getRuleContext<Gauss200Parser::Column_clause_add_column_optionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_table_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

tree::TerminalNode* Gauss200Parser::Alter_table_optionContext::MODIFY_GS() {
  return getToken(Gauss200Parser::MODIFY_GS, 0);
}

std::vector<Gauss200Parser::Column_with_typeContext *> Gauss200Parser::Alter_table_optionContext::column_with_type() {
  return getRuleContexts<Gauss200Parser::Column_with_typeContext>();
}

Gauss200Parser::Column_with_typeContext* Gauss200Parser::Alter_table_optionContext::column_with_type(size_t i) {
  return getRuleContext<Gauss200Parser::Column_with_typeContext>(i);
}


size_t Gauss200Parser::Alter_table_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_option;
}

void Gauss200Parser::Alter_table_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_option(this);
}

void Gauss200Parser::Alter_table_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_optionContext* Gauss200Parser::alter_table_option() {
  Alter_table_optionContext *_localctx = _tracker.createInstance<Alter_table_optionContext>(_ctx, getState());
  enterRule(_localctx, 282, Gauss200Parser::RuleAlter_table_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2254);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2213);
      alter_table_action_list();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2214);
      rename_to_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2215);
      match(Gauss200Parser::RENAME_GS);
      setState(2217);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
      case 1: {
        setState(2216);
        match(Gauss200Parser::COLUMN_GS);
        break;
      }

      }
      setState(2219);
      column_name();
      setState(2220);
      match(Gauss200Parser::TO_GS);
      setState(2221);
      new_name();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2223);
      match(Gauss200Parser::RENAME_GS);
      setState(2224);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(2225);
      constraint_name();
      setState(2226);
      match(Gauss200Parser::TO_GS);
      setState(2227);
      new_name();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2229);
      alter_set_schema();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2230);
      match(Gauss200Parser::ADD_GS);
      setState(2231);
      match(Gauss200Parser::LEFT_PAREN);
      setState(2232);
      column_clause_add_column_option();
      setState(2237);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(2233);
        match(Gauss200Parser::COMMA);
        setState(2234);
        column_clause_add_column_option();
        setState(2239);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2240);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2242);
      match(Gauss200Parser::MODIFY_GS);
      setState(2243);
      match(Gauss200Parser::LEFT_PAREN);
      setState(2244);
      column_with_type();
      setState(2249);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(2245);
        match(Gauss200Parser::COMMA);
        setState(2246);
        column_with_type();
        setState(2251);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2252);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_action_listContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_action_listContext::Alter_table_action_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Alter_table_actionContext *> Gauss200Parser::Alter_table_action_listContext::alter_table_action() {
  return getRuleContexts<Gauss200Parser::Alter_table_actionContext>();
}

Gauss200Parser::Alter_table_actionContext* Gauss200Parser::Alter_table_action_listContext::alter_table_action(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_table_actionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_table_action_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Alter_table_action_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Alter_table_action_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_action_list;
}

void Gauss200Parser::Alter_table_action_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_action_list(this);
}

void Gauss200Parser::Alter_table_action_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_action_list(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_action_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_action_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_action_listContext* Gauss200Parser::alter_table_action_list() {
  Alter_table_action_listContext *_localctx = _tracker.createInstance<Alter_table_action_listContext>(_ctx, getState());
  enterRule(_localctx, 284, Gauss200Parser::RuleAlter_table_action_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2256);
    alter_table_action();
    setState(2261);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2257);
      match(Gauss200Parser::COMMA);
      setState(2258);
      alter_table_action();
      setState(2263);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_actionContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_actionContext::Alter_table_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_clauseContext* Gauss200Parser::Alter_table_actionContext::column_clause() {
  return getRuleContext<Gauss200Parser::Column_clauseContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

Gauss200Parser::Alter_table_constraintContext* Gauss200Parser::Alter_table_actionContext::alter_table_constraint() {
  return getRuleContext<Gauss200Parser::Alter_table_constraintContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::VALID_GS() {
  return getToken(Gauss200Parser::VALID_GS, 0);
}

Gauss200Parser::Table_constraint_using_indexContext* Gauss200Parser::Alter_table_actionContext::table_constraint_using_index() {
  return getRuleContext<Gauss200Parser::Table_constraint_using_indexContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::VALIDATE_GS() {
  return getToken(Gauss200Parser::VALIDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Alter_table_actionContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_table_actionContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Alter_table_actionContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::CLUSTER_GS() {
  return getToken(Gauss200Parser::CLUSTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Alter_table_actionContext::index_name() {
  return getRuleContext<Gauss200Parser::Index_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::WITHOUT_GS() {
  return getToken(Gauss200Parser::WITHOUT_GS, 0);
}

Gauss200Parser::Set_assignment_listContext* Gauss200Parser::Alter_table_actionContext::set_assignment_list() {
  return getRuleContext<Gauss200Parser::Set_assignment_listContext>(0);
}

Gauss200Parser::Reset_param_listContext* Gauss200Parser::Alter_table_actionContext::reset_param_list() {
  return getRuleContext<Gauss200Parser::Reset_param_listContext>(0);
}

Gauss200Parser::Owner_to_optionContext* Gauss200Parser::Alter_table_actionContext::owner_to_option() {
  return getRuleContext<Gauss200Parser::Owner_to_optionContext>(0);
}

Gauss200Parser::Set_tablespace_optionContext* Gauss200Parser::Alter_table_actionContext::set_tablespace_option() {
  return getRuleContext<Gauss200Parser::Set_tablespace_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::COMPRESS_GS() {
  return getToken(Gauss200Parser::COMPRESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::NOCOMPRESS_GS() {
  return getToken(Gauss200Parser::NOCOMPRESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Alter_table_actionContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Alter_table_actionContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}

Gauss200Parser::Add_node_listContext* Gauss200Parser::Alter_table_actionContext::add_node_list() {
  return getRuleContext<Gauss200Parser::Add_node_listContext>(0);
}

Gauss200Parser::Delete_node_listContext* Gauss200Parser::Alter_table_actionContext::delete_node_list() {
  return getRuleContext<Gauss200Parser::Delete_node_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::TRIGGER_GS() {
  return getToken(Gauss200Parser::TRIGGER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::DISABLE_GS() {
  return getToken(Gauss200Parser::DISABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::ENABLE_GS() {
  return getToken(Gauss200Parser::ENABLE_GS, 0);
}

Gauss200Parser::Trigger_nameContext* Gauss200Parser::Alter_table_actionContext::trigger_name() {
  return getRuleContext<Gauss200Parser::Trigger_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::REPLICA_GS() {
  return getToken(Gauss200Parser::REPLICA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::ALWAYS_GS() {
  return getToken(Gauss200Parser::ALWAYS_GS, 0);
}

Gauss200Parser::Row_level_securityContext* Gauss200Parser::Alter_table_actionContext::row_level_security() {
  return getRuleContext<Gauss200Parser::Row_level_securityContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::FORCE_GS() {
  return getToken(Gauss200Parser::FORCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_actionContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}


size_t Gauss200Parser::Alter_table_actionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_action;
}

void Gauss200Parser::Alter_table_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_action(this);
}

void Gauss200Parser::Alter_table_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_action(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_actionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_action(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_actionContext* Gauss200Parser::alter_table_action() {
  Alter_table_actionContext *_localctx = _tracker.createInstance<Alter_table_actionContext>(_ctx, getState());
  enterRule(_localctx, 286, Gauss200Parser::RuleAlter_table_action);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2325);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2264);
      column_clause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2265);
      match(Gauss200Parser::ADD_GS);
      setState(2266);
      alter_table_constraint();
      setState(2269);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::NOT_GS) {
        setState(2267);
        match(Gauss200Parser::NOT_GS);
        setState(2268);
        match(Gauss200Parser::VALID_GS);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2271);
      match(Gauss200Parser::ADD_GS);
      setState(2272);
      table_constraint_using_index();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2273);
      match(Gauss200Parser::VALIDATE_GS);
      setState(2274);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(2275);
      constraint_name();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2276);
      match(Gauss200Parser::DROP_GS);
      setState(2277);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(2279);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
      case 1: {
        setState(2278);
        if_exists_or_not();
        break;
      }

      }
      setState(2281);
      constraint_name();
      setState(2283);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
        setState(2282);
        cascade_restrict();
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2285);
      match(Gauss200Parser::CLUSTER_GS);
      setState(2286);
      match(Gauss200Parser::ON_GS);
      setState(2287);
      index_name();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2288);
      match(Gauss200Parser::SET_GS);
      setState(2289);
      match(Gauss200Parser::WITHOUT_GS);
      setState(2290);
      match(Gauss200Parser::CLUSTER_GS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2291);
      set_assignment_list();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2292);
      reset_param_list();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2293);
      owner_to_option();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2294);
      set_tablespace_option();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2295);
      match(Gauss200Parser::SET_GS);
      setState(2296);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::COMPRESS_GS || _la == Gauss200Parser::NOCOMPRESS_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2297);
      match(Gauss200Parser::TO_GS);
      setState(2302);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::GROUP_GS: {
          setState(2298);
          match(Gauss200Parser::GROUP_GS);
          setState(2299);
          group_name();
          break;
        }

        case Gauss200Parser::NODE_GS: {
          setState(2300);
          match(Gauss200Parser::NODE_GS);
          setState(2301);
          paren_node_list();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2304);
      add_node_list();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2305);
      delete_node_list();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2306);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::DISABLE_GS

      || _la == Gauss200Parser::ENABLE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2307);
      match(Gauss200Parser::TRIGGER_GS);
      setState(2311);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
      case 1: {
        setState(2308);
        trigger_name();
        break;
      }

      case 2: {
        setState(2309);
        match(Gauss200Parser::ALL_GS);
        break;
      }

      case 3: {
        setState(2310);
        match(Gauss200Parser::USER_GS);
        break;
      }

      }
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(2313);
      match(Gauss200Parser::ENABLE_GS);
      setState(2314);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ALWAYS_GS || _la == Gauss200Parser::REPLICA_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2315);
      match(Gauss200Parser::TRIGGER_GS);
      setState(2316);
      trigger_name();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(2322);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::DISABLE_GS: {
          setState(2317);
          match(Gauss200Parser::DISABLE_GS);
          break;
        }

        case Gauss200Parser::ENABLE_GS: {
          setState(2318);
          match(Gauss200Parser::ENABLE_GS);
          break;
        }

        case Gauss200Parser::FORCE_GS: {
          setState(2319);
          match(Gauss200Parser::FORCE_GS);
          break;
        }

        case Gauss200Parser::NO_GS: {
          setState(2320);
          match(Gauss200Parser::NO_GS);
          setState(2321);
          match(Gauss200Parser::FORCE_GS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2324);
      row_level_security();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_clauseContext ------------------------------------------------------------------

Gauss200Parser::Column_clauseContext::Column_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Column_clauseContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

Gauss200Parser::Column_clause_add_column_optionContext* Gauss200Parser::Column_clauseContext::column_clause_add_column_option() {
  return getRuleContext<Gauss200Parser::Column_clause_add_column_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clauseContext::COLUMN_GS() {
  return getToken(Gauss200Parser::COLUMN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clauseContext::MODIFY_GS() {
  return getToken(Gauss200Parser::MODIFY_GS, 0);
}

Gauss200Parser::Column_with_typeContext* Gauss200Parser::Column_clauseContext::column_with_type() {
  return getRuleContext<Gauss200Parser::Column_with_typeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clauseContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Column_clauseContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Column_clauseContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Column_clauseContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clauseContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

Gauss200Parser::Column_clause_alter_column_optionContext* Gauss200Parser::Column_clauseContext::column_clause_alter_column_option() {
  return getRuleContext<Gauss200Parser::Column_clause_alter_column_optionContext>(0);
}


size_t Gauss200Parser::Column_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_clause;
}

void Gauss200Parser::Column_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_clause(this);
}

void Gauss200Parser::Column_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_clause(this);
}


antlrcpp::Any Gauss200Parser::Column_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_clauseContext* Gauss200Parser::column_clause() {
  Column_clauseContext *_localctx = _tracker.createInstance<Column_clauseContext>(_ctx, getState());
  enterRule(_localctx, 288, Gauss200Parser::RuleColumn_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2352);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ADD_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2327);
        match(Gauss200Parser::ADD_GS);
        setState(2329);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
        case 1: {
          setState(2328);
          match(Gauss200Parser::COLUMN_GS);
          break;
        }

        }
        setState(2331);
        column_clause_add_column_option();
        break;
      }

      case Gauss200Parser::MODIFY_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2332);
        match(Gauss200Parser::MODIFY_GS);
        setState(2333);
        column_with_type();
        break;
      }

      case Gauss200Parser::DROP_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2334);
        match(Gauss200Parser::DROP_GS);
        setState(2336);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
        case 1: {
          setState(2335);
          match(Gauss200Parser::COLUMN_GS);
          break;
        }

        }
        setState(2339);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
        case 1: {
          setState(2338);
          if_exists_or_not();
          break;
        }

        }
        setState(2341);
        column_name();
        setState(2343);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
          setState(2342);
          cascade_restrict();
        }
        break;
      }

      case Gauss200Parser::ALTER_GS: {
        enterOuterAlt(_localctx, 4);
        setState(2345);
        match(Gauss200Parser::ALTER_GS);
        setState(2347);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
        case 1: {
          setState(2346);
          match(Gauss200Parser::COLUMN_GS);
          break;
        }

        }
        setState(2349);
        column_name();
        setState(2350);
        column_clause_alter_column_option();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_clause_add_column_optionContext ------------------------------------------------------------------

Gauss200Parser::Column_clause_add_column_optionContext::Column_clause_add_column_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_with_typeContext* Gauss200Parser::Column_clause_add_column_optionContext::column_with_type() {
  return getRuleContext<Gauss200Parser::Column_with_typeContext>(0);
}

Gauss200Parser::Compress_typeContext* Gauss200Parser::Column_clause_add_column_optionContext::compress_type() {
  return getRuleContext<Gauss200Parser::Compress_typeContext>(0);
}

Gauss200Parser::Collate_optionContext* Gauss200Parser::Column_clause_add_column_optionContext::collate_option() {
  return getRuleContext<Gauss200Parser::Collate_optionContext>(0);
}

std::vector<Gauss200Parser::Alter_table_column_constraintContext *> Gauss200Parser::Column_clause_add_column_optionContext::alter_table_column_constraint() {
  return getRuleContexts<Gauss200Parser::Alter_table_column_constraintContext>();
}

Gauss200Parser::Alter_table_column_constraintContext* Gauss200Parser::Column_clause_add_column_optionContext::alter_table_column_constraint(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_table_column_constraintContext>(i);
}


size_t Gauss200Parser::Column_clause_add_column_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_clause_add_column_option;
}

void Gauss200Parser::Column_clause_add_column_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_clause_add_column_option(this);
}

void Gauss200Parser::Column_clause_add_column_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_clause_add_column_option(this);
}


antlrcpp::Any Gauss200Parser::Column_clause_add_column_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_clause_add_column_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_clause_add_column_optionContext* Gauss200Parser::column_clause_add_column_option() {
  Column_clause_add_column_optionContext *_localctx = _tracker.createInstance<Column_clause_add_column_optionContext>(_ctx, getState());
  enterRule(_localctx, 290, Gauss200Parser::RuleColumn_clause_add_column_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2354);
    column_with_type();
    setState(2356);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DELTA_GS

    || _la == Gauss200Parser::DICTIONARY_GS || ((((_la - 285) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 285)) & ((1ULL << (Gauss200Parser::NOCOMPRESS_GS - 285))
      | (1ULL << (Gauss200Parser::NUMSTR_GS - 285))
      | (1ULL << (Gauss200Parser::PREFIX_GS - 285)))) != 0)) {
      setState(2355);
      compress_type();
    }
    setState(2359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::COLLATE_GS) {
      setState(2358);
      collate_option();
    }
    setState(2364);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Gauss200Parser::CHECK_GS)
      | (1ULL << Gauss200Parser::CONSTRAINT_GS)
      | (1ULL << Gauss200Parser::DEFAULT_GS)
      | (1ULL << Gauss200Parser::NOT_GS)
      | (1ULL << Gauss200Parser::NULL_GS))) != 0) || _la == Gauss200Parser::PRIMARY_GS

    || _la == Gauss200Parser::UNIQUE_GS) {
      setState(2361);
      alter_table_column_constraint();
      setState(2366);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_with_typeContext ------------------------------------------------------------------

Gauss200Parser::Column_with_typeContext::Column_with_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Column_with_typeContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Column_with_typeContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}


size_t Gauss200Parser::Column_with_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_with_type;
}

void Gauss200Parser::Column_with_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_with_type(this);
}

void Gauss200Parser::Column_with_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_with_type(this);
}


antlrcpp::Any Gauss200Parser::Column_with_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_with_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_with_typeContext* Gauss200Parser::column_with_type() {
  Column_with_typeContext *_localctx = _tracker.createInstance<Column_with_typeContext>(_ctx, getState());
  enterRule(_localctx, 292, Gauss200Parser::RuleColumn_with_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2367);
    column_name();
    setState(2368);
    typename_gs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compress_typeContext ------------------------------------------------------------------

Gauss200Parser::Compress_typeContext::Compress_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Compress_typeContext::DELTA_GS() {
  return getToken(Gauss200Parser::DELTA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compress_typeContext::PREFIX_GS() {
  return getToken(Gauss200Parser::PREFIX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compress_typeContext::DICTIONARY_GS() {
  return getToken(Gauss200Parser::DICTIONARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compress_typeContext::NUMSTR_GS() {
  return getToken(Gauss200Parser::NUMSTR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compress_typeContext::NOCOMPRESS_GS() {
  return getToken(Gauss200Parser::NOCOMPRESS_GS, 0);
}


size_t Gauss200Parser::Compress_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleCompress_type;
}

void Gauss200Parser::Compress_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompress_type(this);
}

void Gauss200Parser::Compress_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompress_type(this);
}


antlrcpp::Any Gauss200Parser::Compress_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCompress_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Compress_typeContext* Gauss200Parser::compress_type() {
  Compress_typeContext *_localctx = _tracker.createInstance<Compress_typeContext>(_ctx, getState());
  enterRule(_localctx, 294, Gauss200Parser::RuleCompress_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2370);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::DELTA_GS

    || _la == Gauss200Parser::DICTIONARY_GS || ((((_la - 285) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 285)) & ((1ULL << (Gauss200Parser::NOCOMPRESS_GS - 285))
      | (1ULL << (Gauss200Parser::NUMSTR_GS - 285))
      | (1ULL << (Gauss200Parser::PREFIX_GS - 285)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collate_optionContext ------------------------------------------------------------------

Gauss200Parser::Collate_optionContext::Collate_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Collate_optionContext::COLLATE_GS() {
  return getToken(Gauss200Parser::COLLATE_GS, 0);
}

Gauss200Parser::CollationContext* Gauss200Parser::Collate_optionContext::collation() {
  return getRuleContext<Gauss200Parser::CollationContext>(0);
}


size_t Gauss200Parser::Collate_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCollate_option;
}

void Gauss200Parser::Collate_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollate_option(this);
}

void Gauss200Parser::Collate_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollate_option(this);
}


antlrcpp::Any Gauss200Parser::Collate_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCollate_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Collate_optionContext* Gauss200Parser::collate_option() {
  Collate_optionContext *_localctx = _tracker.createInstance<Collate_optionContext>(_ctx, getState());
  enterRule(_localctx, 296, Gauss200Parser::RuleCollate_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2372);
    match(Gauss200Parser::COLLATE_GS);
    setState(2373);
    collation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollationContext ------------------------------------------------------------------

Gauss200Parser::CollationContext::CollationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::CollationContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::CollationContext::getRuleIndex() const {
  return Gauss200Parser::RuleCollation;
}

void Gauss200Parser::CollationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollation(this);
}

void Gauss200Parser::CollationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollation(this);
}


antlrcpp::Any Gauss200Parser::CollationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCollation(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::CollationContext* Gauss200Parser::collation() {
  CollationContext *_localctx = _tracker.createInstance<CollationContext>(_ctx, getState());
  enterRule(_localctx, 298, Gauss200Parser::RuleCollation);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2375);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_column_constraintContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_column_constraintContext::Alter_table_column_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_constraint_optionContext* Gauss200Parser::Alter_table_column_constraintContext::column_constraint_option() {
  return getRuleContext<Gauss200Parser::Column_constraint_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_column_constraintContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Alter_table_column_constraintContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

Gauss200Parser::Table_constraint_deferrableContext* Gauss200Parser::Alter_table_column_constraintContext::table_constraint_deferrable() {
  return getRuleContext<Gauss200Parser::Table_constraint_deferrableContext>(0);
}


size_t Gauss200Parser::Alter_table_column_constraintContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_column_constraint;
}

void Gauss200Parser::Alter_table_column_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_column_constraint(this);
}

void Gauss200Parser::Alter_table_column_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_column_constraint(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_column_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_column_constraint(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_column_constraintContext* Gauss200Parser::alter_table_column_constraint() {
  Alter_table_column_constraintContext *_localctx = _tracker.createInstance<Alter_table_column_constraintContext>(_ctx, getState());
  enterRule(_localctx, 300, Gauss200Parser::RuleAlter_table_column_constraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONSTRAINT_GS) {
      setState(2377);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(2378);
      constraint_name();
    }
    setState(2381);
    column_constraint_option();
    setState(2383);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(2382);
      table_constraint_deferrable();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_constraint_optionContext ------------------------------------------------------------------

Gauss200Parser::Column_constraint_optionContext::Column_constraint_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Column_constraint_optionContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_constraint_optionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_constraint_optionContext::CHECK_GS() {
  return getToken(Gauss200Parser::CHECK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_constraint_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Column_constraint_optionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_constraint_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Column_constraint_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

Gauss200Parser::Column_constraint_primary_uniqueContext* Gauss200Parser::Column_constraint_optionContext::column_constraint_primary_unique() {
  return getRuleContext<Gauss200Parser::Column_constraint_primary_uniqueContext>(0);
}

Gauss200Parser::Index_parametersContext* Gauss200Parser::Column_constraint_optionContext::index_parameters() {
  return getRuleContext<Gauss200Parser::Index_parametersContext>(0);
}


size_t Gauss200Parser::Column_constraint_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_constraint_option;
}

void Gauss200Parser::Column_constraint_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_constraint_option(this);
}

void Gauss200Parser::Column_constraint_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_constraint_option(this);
}


antlrcpp::Any Gauss200Parser::Column_constraint_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_constraint_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_constraint_optionContext* Gauss200Parser::column_constraint_option() {
  Column_constraint_optionContext *_localctx = _tracker.createInstance<Column_constraint_optionContext>(_ctx, getState());
  enterRule(_localctx, 302, Gauss200Parser::RuleColumn_constraint_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2399);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2386);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::NOT_GS) {
          setState(2385);
          match(Gauss200Parser::NOT_GS);
        }
        setState(2388);
        match(Gauss200Parser::NULL_GS);
        break;
      }

      case Gauss200Parser::CHECK_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2389);
        match(Gauss200Parser::CHECK_GS);
        setState(2390);
        match(Gauss200Parser::LEFT_PAREN);
        setState(2391);
        expression();
        setState(2392);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

      case Gauss200Parser::DEFAULT_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2394);
        match(Gauss200Parser::DEFAULT_GS);
        setState(2395);
        expression();
        break;
      }

      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::UNIQUE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(2396);
        column_constraint_primary_unique();
        setState(2397);
        index_parameters();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_clause_alter_column_optionContext ------------------------------------------------------------------

Gauss200Parser::Column_clause_alter_column_optionContext::Column_clause_alter_column_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Column_clause_alter_column_optionContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

Gauss200Parser::Collate_optionContext* Gauss200Parser::Column_clause_alter_column_optionContext::collate_option() {
  return getRuleContext<Gauss200Parser::Collate_optionContext>(0);
}

Gauss200Parser::Using_expr_optionContext* Gauss200Parser::Column_clause_alter_column_optionContext::using_expr_option() {
  return getRuleContext<Gauss200Parser::Using_expr_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Column_clause_alter_column_optionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

Gauss200Parser::Alter_set_statistics_optionContext* Gauss200Parser::Column_clause_alter_column_optionContext::alter_set_statistics_option() {
  return getRuleContext<Gauss200Parser::Alter_set_statistics_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::STATISTICS_GS() {
  return getToken(Gauss200Parser::STATISTICS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Column_clause_alter_column_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::DELETE_GS() {
  return getToken(Gauss200Parser::DELETE_GS, 0);
}

Gauss200Parser::Set_assignment_listContext* Gauss200Parser::Column_clause_alter_column_optionContext::set_assignment_list() {
  return getRuleContext<Gauss200Parser::Set_assignment_listContext>(0);
}

Gauss200Parser::Reset_param_listContext* Gauss200Parser::Column_clause_alter_column_optionContext::reset_param_list() {
  return getRuleContext<Gauss200Parser::Reset_param_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::STORAGE_GS() {
  return getToken(Gauss200Parser::STORAGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::PLAIN_GS() {
  return getToken(Gauss200Parser::PLAIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::EXTERNAL_GS() {
  return getToken(Gauss200Parser::EXTERNAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::EXTENDED_GS() {
  return getToken(Gauss200Parser::EXTENDED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Column_clause_alter_column_optionContext::MAIN_GS() {
  return getToken(Gauss200Parser::MAIN_GS, 0);
}


size_t Gauss200Parser::Column_clause_alter_column_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_clause_alter_column_option;
}

void Gauss200Parser::Column_clause_alter_column_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_clause_alter_column_option(this);
}

void Gauss200Parser::Column_clause_alter_column_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_clause_alter_column_option(this);
}


antlrcpp::Any Gauss200Parser::Column_clause_alter_column_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_clause_alter_column_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_clause_alter_column_optionContext* Gauss200Parser::column_clause_alter_column_option() {
  Column_clause_alter_column_optionContext *_localctx = _tracker.createInstance<Column_clause_alter_column_optionContext>(_ctx, getState());
  enterRule(_localctx, 304, Gauss200Parser::RuleColumn_clause_alter_column_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2435);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2403);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::SET_GS) {
        setState(2401);
        match(Gauss200Parser::SET_GS);
        setState(2402);
        match(Gauss200Parser::DATA_GS);
      }
      setState(2405);
      match(Gauss200Parser::TYPE_GS);
      setState(2406);
      typename_gs();
      setState(2408);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::COLLATE_GS) {
        setState(2407);
        collate_option();
      }
      setState(2411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::USING_GS) {
        setState(2410);
        using_expr_option();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2418);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::SET_GS: {
          setState(2413);
          match(Gauss200Parser::SET_GS);
          setState(2414);
          match(Gauss200Parser::DEFAULT_GS);
          setState(2415);
          expression();
          break;
        }

        case Gauss200Parser::DROP_GS: {
          setState(2416);
          match(Gauss200Parser::DROP_GS);
          setState(2417);
          match(Gauss200Parser::DEFAULT_GS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2420);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::DROP_GS || _la == Gauss200Parser::SET_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2421);
      match(Gauss200Parser::NOT_GS);
      setState(2422);
      match(Gauss200Parser::NULL_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2423);
      alter_set_statistics_option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2424);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ADD_GS

      || _la == Gauss200Parser::DELETE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2425);
      match(Gauss200Parser::STATISTICS_GS);
      setState(2426);
      match(Gauss200Parser::LEFT_PAREN);
      setState(2427);
      paren_column_list();
      setState(2428);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2430);
      set_assignment_list();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2431);
      reset_param_list();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2432);
      match(Gauss200Parser::SET_GS);
      setState(2433);
      match(Gauss200Parser::STORAGE_GS);
      setState(2434);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::EXTERNAL_GS || ((((_la - 571) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 571)) & ((1ULL << (Gauss200Parser::PLAIN_GS - 571))
        | (1ULL << (Gauss200Parser::EXTENDED_GS - 571))
        | (1ULL << (Gauss200Parser::MAIN_GS - 571)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_constraintContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_constraintContext::Alter_table_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alter_table_constraint_optionContext* Gauss200Parser::Alter_table_constraintContext::alter_table_constraint_option() {
  return getRuleContext<Gauss200Parser::Alter_table_constraint_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_constraintContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Alter_table_constraintContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

Gauss200Parser::Table_constraint_deferrableContext* Gauss200Parser::Alter_table_constraintContext::table_constraint_deferrable() {
  return getRuleContext<Gauss200Parser::Table_constraint_deferrableContext>(0);
}


size_t Gauss200Parser::Alter_table_constraintContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_constraint;
}

void Gauss200Parser::Alter_table_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_constraint(this);
}

void Gauss200Parser::Alter_table_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_constraint(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_constraint(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_constraintContext* Gauss200Parser::alter_table_constraint() {
  Alter_table_constraintContext *_localctx = _tracker.createInstance<Alter_table_constraintContext>(_ctx, getState());
  enterRule(_localctx, 306, Gauss200Parser::RuleAlter_table_constraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2439);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONSTRAINT_GS) {
      setState(2437);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(2438);
      constraint_name();
    }
    setState(2441);
    alter_table_constraint_option();
    setState(2443);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(2442);
      table_constraint_deferrable();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_constraint_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_constraint_optionContext::Alter_table_constraint_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_table_constraint_optionContext::CHECK_GS() {
  return getToken(Gauss200Parser::CHECK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_constraint_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Alter_table_constraint_optionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_constraint_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Column_constraint_primary_uniqueContext* Gauss200Parser::Alter_table_constraint_optionContext::column_constraint_primary_unique() {
  return getRuleContext<Gauss200Parser::Column_constraint_primary_uniqueContext>(0);
}

Gauss200Parser::Index_parametersContext* Gauss200Parser::Alter_table_constraint_optionContext::index_parameters() {
  return getRuleContext<Gauss200Parser::Index_parametersContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_constraint_optionContext::PARTIAL_GS() {
  return getToken(Gauss200Parser::PARTIAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_constraint_optionContext::CLUSTER_GS() {
  return getToken(Gauss200Parser::CLUSTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_constraint_optionContext::KEY_GS() {
  return getToken(Gauss200Parser::KEY_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Alter_table_constraint_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}


size_t Gauss200Parser::Alter_table_constraint_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_constraint_option;
}

void Gauss200Parser::Alter_table_constraint_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_constraint_option(this);
}

void Gauss200Parser::Alter_table_constraint_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_constraint_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_constraint_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_constraint_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_constraint_optionContext* Gauss200Parser::alter_table_constraint_option() {
  Alter_table_constraint_optionContext *_localctx = _tracker.createInstance<Alter_table_constraint_optionContext>(_ctx, getState());
  enterRule(_localctx, 308, Gauss200Parser::RuleAlter_table_constraint_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2457);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::CHECK_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2445);
        match(Gauss200Parser::CHECK_GS);
        setState(2446);
        match(Gauss200Parser::LEFT_PAREN);
        setState(2447);
        expression();
        setState(2448);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::UNIQUE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2450);
        column_constraint_primary_unique();
        setState(2451);
        index_parameters();
        break;
      }

      case Gauss200Parser::PARTIAL_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2453);
        match(Gauss200Parser::PARTIAL_GS);
        setState(2454);
        match(Gauss200Parser::CLUSTER_GS);
        setState(2455);
        match(Gauss200Parser::KEY_GS);
        setState(2456);
        paren_column_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_column_listContext ------------------------------------------------------------------

Gauss200Parser::Paren_column_listContext::Paren_column_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_column_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Column_nameContext *> Gauss200Parser::Paren_column_listContext::column_name() {
  return getRuleContexts<Gauss200Parser::Column_nameContext>();
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Paren_column_listContext::column_name(size_t i) {
  return getRuleContext<Gauss200Parser::Column_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Paren_column_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Paren_column_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Paren_column_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Paren_column_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_column_list;
}

void Gauss200Parser::Paren_column_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_column_list(this);
}

void Gauss200Parser::Paren_column_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_column_list(this);
}


antlrcpp::Any Gauss200Parser::Paren_column_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_column_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::paren_column_list() {
  Paren_column_listContext *_localctx = _tracker.createInstance<Paren_column_listContext>(_ctx, getState());
  enterRule(_localctx, 310, Gauss200Parser::RuleParen_column_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2459);
    match(Gauss200Parser::LEFT_PAREN);
    setState(2460);
    column_name();
    setState(2465);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2461);
      match(Gauss200Parser::COMMA);
      setState(2462);
      column_name();
      setState(2467);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2468);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_parametersContext ------------------------------------------------------------------

Gauss200Parser::Index_parametersContext::Index_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Gauss200Parser::Index_parametersContext::WITH_GS() {
  return getTokens(Gauss200Parser::WITH_GS);
}

tree::TerminalNode* Gauss200Parser::Index_parametersContext::WITH_GS(size_t i) {
  return getToken(Gauss200Parser::WITH_GS, i);
}

std::vector<Gauss200Parser::Paren_assignment_stmt_listContext *> Gauss200Parser::Index_parametersContext::paren_assignment_stmt_list() {
  return getRuleContexts<Gauss200Parser::Paren_assignment_stmt_listContext>();
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Index_parametersContext::paren_assignment_stmt_list(size_t i) {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Index_parametersContext::USING_GS() {
  return getTokens(Gauss200Parser::USING_GS);
}

tree::TerminalNode* Gauss200Parser::Index_parametersContext::USING_GS(size_t i) {
  return getToken(Gauss200Parser::USING_GS, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Index_parametersContext::INDEX_GS() {
  return getTokens(Gauss200Parser::INDEX_GS);
}

tree::TerminalNode* Gauss200Parser::Index_parametersContext::INDEX_GS(size_t i) {
  return getToken(Gauss200Parser::INDEX_GS, i);
}

std::vector<Gauss200Parser::Tablespace_name_optionContext *> Gauss200Parser::Index_parametersContext::tablespace_name_option() {
  return getRuleContexts<Gauss200Parser::Tablespace_name_optionContext>();
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Index_parametersContext::tablespace_name_option(size_t i) {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(i);
}


size_t Gauss200Parser::Index_parametersContext::getRuleIndex() const {
  return Gauss200Parser::RuleIndex_parameters;
}

void Gauss200Parser::Index_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_parameters(this);
}

void Gauss200Parser::Index_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_parameters(this);
}


antlrcpp::Any Gauss200Parser::Index_parametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIndex_parameters(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Index_parametersContext* Gauss200Parser::index_parameters() {
  Index_parametersContext *_localctx = _tracker.createInstance<Index_parametersContext>(_ctx, getState());
  enterRule(_localctx, 312, Gauss200Parser::RuleIndex_parameters);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2477);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::USING_GS

    || _la == Gauss200Parser::WITH_GS) {
      setState(2475);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::WITH_GS: {
          setState(2470);
          match(Gauss200Parser::WITH_GS);
          setState(2471);
          paren_assignment_stmt_list();
          break;
        }

        case Gauss200Parser::USING_GS: {
          setState(2472);
          match(Gauss200Parser::USING_GS);
          setState(2473);
          match(Gauss200Parser::INDEX_GS);
          setState(2474);
          tablespace_name_option();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2479);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_constraint_deferrableContext ------------------------------------------------------------------

Gauss200Parser::Table_constraint_deferrableContext::Table_constraint_deferrableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Table_constraint_deferrableContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_deferrableContext::DEFERRABLE_GS() {
  return getToken(Gauss200Parser::DEFERRABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_deferrableContext::INITIALLY_GS() {
  return getToken(Gauss200Parser::INITIALLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_deferrableContext::DEFERRED_GS() {
  return getToken(Gauss200Parser::DEFERRED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_deferrableContext::IMMEDIATE_GS() {
  return getToken(Gauss200Parser::IMMEDIATE_GS, 0);
}


size_t Gauss200Parser::Table_constraint_deferrableContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_constraint_deferrable;
}

void Gauss200Parser::Table_constraint_deferrableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_constraint_deferrable(this);
}

void Gauss200Parser::Table_constraint_deferrableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_constraint_deferrable(this);
}


antlrcpp::Any Gauss200Parser::Table_constraint_deferrableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_constraint_deferrable(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_constraint_deferrableContext* Gauss200Parser::table_constraint_deferrable() {
  Table_constraint_deferrableContext *_localctx = _tracker.createInstance<Table_constraint_deferrableContext>(_ctx, getState());
  enterRule(_localctx, 314, Gauss200Parser::RuleTable_constraint_deferrable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2487);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::NOT_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2480);
        match(Gauss200Parser::NOT_GS);
        setState(2481);
        match(Gauss200Parser::DEFERRABLE_GS);
        break;
      }

      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::INITIALLY_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2483);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::DEFERRABLE_GS) {
          setState(2482);
          match(Gauss200Parser::DEFERRABLE_GS);
        }
        setState(2485);
        match(Gauss200Parser::INITIALLY_GS);
        setState(2486);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::DEFERRED_GS

        || _la == Gauss200Parser::IMMEDIATE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_constraint_using_indexContext ------------------------------------------------------------------

Gauss200Parser::Table_constraint_using_indexContext::Table_constraint_using_indexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_constraint_primary_uniqueContext* Gauss200Parser::Table_constraint_using_indexContext::column_constraint_primary_unique() {
  return getRuleContext<Gauss200Parser::Column_constraint_primary_uniqueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_using_indexContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_using_indexContext::INDEX_GS() {
  return getToken(Gauss200Parser::INDEX_GS, 0);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Table_constraint_using_indexContext::index_name() {
  return getRuleContext<Gauss200Parser::Index_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_using_indexContext::CONSTRAINTS_GS() {
  return getToken(Gauss200Parser::CONSTRAINTS_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Table_constraint_using_indexContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

Gauss200Parser::Table_constraint_deferrableContext* Gauss200Parser::Table_constraint_using_indexContext::table_constraint_deferrable() {
  return getRuleContext<Gauss200Parser::Table_constraint_deferrableContext>(0);
}


size_t Gauss200Parser::Table_constraint_using_indexContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_constraint_using_index;
}

void Gauss200Parser::Table_constraint_using_indexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_constraint_using_index(this);
}

void Gauss200Parser::Table_constraint_using_indexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_constraint_using_index(this);
}


antlrcpp::Any Gauss200Parser::Table_constraint_using_indexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_constraint_using_index(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_constraint_using_indexContext* Gauss200Parser::table_constraint_using_index() {
  Table_constraint_using_indexContext *_localctx = _tracker.createInstance<Table_constraint_using_indexContext>(_ctx, getState());
  enterRule(_localctx, 316, Gauss200Parser::RuleTable_constraint_using_index);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2491);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONSTRAINTS_GS) {
      setState(2489);
      match(Gauss200Parser::CONSTRAINTS_GS);
      setState(2490);
      constraint_name();
    }
    setState(2493);
    column_constraint_primary_unique();
    setState(2494);
    match(Gauss200Parser::USING_GS);
    setState(2495);
    match(Gauss200Parser::INDEX_GS);
    setState(2496);
    index_name();
    setState(2498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Gauss200Parser::DEFERRABLE_GS)
      | (1ULL << Gauss200Parser::INITIALLY_GS)
      | (1ULL << Gauss200Parser::NOT_GS))) != 0)) {
      setState(2497);
      table_constraint_deferrable();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_nameContext ------------------------------------------------------------------

Gauss200Parser::Trigger_nameContext::Trigger_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Trigger_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Trigger_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleTrigger_name;
}

void Gauss200Parser::Trigger_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_name(this);
}

void Gauss200Parser::Trigger_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_name(this);
}


antlrcpp::Any Gauss200Parser::Trigger_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTrigger_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Trigger_nameContext* Gauss200Parser::trigger_name() {
  Trigger_nameContext *_localctx = _tracker.createInstance<Trigger_nameContext>(_ctx, getState());
  enterRule(_localctx, 318, Gauss200Parser::RuleTrigger_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2500);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_partition_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_partition_optionContext::Alter_table_partition_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Alter_table_partition_actionContext *> Gauss200Parser::Alter_table_partition_optionContext::alter_table_partition_action() {
  return getRuleContexts<Gauss200Parser::Alter_table_partition_actionContext>();
}

Gauss200Parser::Alter_table_partition_actionContext* Gauss200Parser::Alter_table_partition_optionContext::alter_table_partition_action(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_table_partition_actionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_table_partition_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Alter_table_partition_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

tree::TerminalNode* Gauss200Parser::Alter_table_partition_optionContext::RENAME_GS() {
  return getToken(Gauss200Parser::RENAME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_partition_optionContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_partition_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Alter_table_partition_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Alter_table_partition_optionContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_partition_optionContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Paren_partition_value_listContext* Gauss200Parser::Alter_table_partition_optionContext::paren_partition_value_list() {
  return getRuleContext<Gauss200Parser::Paren_partition_value_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_table_partition_optionContext::TRUNCATE_GS() {
  return getToken(Gauss200Parser::TRUNCATE_GS, 0);
}


size_t Gauss200Parser::Alter_table_partition_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_partition_option;
}

void Gauss200Parser::Alter_table_partition_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_partition_option(this);
}

void Gauss200Parser::Alter_table_partition_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_partition_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_partition_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_partition_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_partition_optionContext* Gauss200Parser::alter_table_partition_option() {
  Alter_table_partition_optionContext *_localctx = _tracker.createInstance<Alter_table_partition_optionContext>(_ctx, getState());
  enterRule(_localctx, 320, Gauss200Parser::RuleAlter_table_partition_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2527);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MOVE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2502);
        alter_table_partition_action();
        setState(2507);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::COMMA) {
          setState(2503);
          match(Gauss200Parser::COMMA);
          setState(2504);
          alter_table_partition_action();
          setState(2509);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2510);
        match(Gauss200Parser::RENAME_GS);
        setState(2511);
        match(Gauss200Parser::PARTITION_GS);
        setState(2515);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
        case 1: {
          setState(2512);
          partition_name();
          break;
        }

        case 2: {
          setState(2513);
          match(Gauss200Parser::FOR_GS);
          setState(2514);
          paren_partition_value_list();
          break;
        }

        }
        setState(2517);
        match(Gauss200Parser::TO_GS);
        setState(2518);
        new_name();
        break;
      }

      case Gauss200Parser::TRUNCATE_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2520);
        match(Gauss200Parser::TRUNCATE_GS);
        setState(2521);
        match(Gauss200Parser::PARTITION_GS);
        setState(2525);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
        case 1: {
          setState(2522);
          partition_name();
          break;
        }

        case 2: {
          setState(2523);
          match(Gauss200Parser::FOR_GS);
          setState(2524);
          paren_partition_value_list();
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_partition_actionContext ------------------------------------------------------------------

Gauss200Parser::Alter_table_partition_actionContext::Alter_table_partition_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Move_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::move_clause() {
  return getRuleContext<Gauss200Parser::Move_clauseContext>(0);
}

Gauss200Parser::Exchange_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::exchange_clause() {
  return getRuleContext<Gauss200Parser::Exchange_clauseContext>(0);
}

Gauss200Parser::Row_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::row_clause() {
  return getRuleContext<Gauss200Parser::Row_clauseContext>(0);
}

Gauss200Parser::Merge_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::merge_clause() {
  return getRuleContext<Gauss200Parser::Merge_clauseContext>(0);
}

Gauss200Parser::Modify_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::modify_clause() {
  return getRuleContext<Gauss200Parser::Modify_clauseContext>(0);
}

Gauss200Parser::Split_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::split_clause() {
  return getRuleContext<Gauss200Parser::Split_clauseContext>(0);
}

Gauss200Parser::Add_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::add_clause() {
  return getRuleContext<Gauss200Parser::Add_clauseContext>(0);
}

Gauss200Parser::Drop_clauseContext* Gauss200Parser::Alter_table_partition_actionContext::drop_clause() {
  return getRuleContext<Gauss200Parser::Drop_clauseContext>(0);
}


size_t Gauss200Parser::Alter_table_partition_actionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_table_partition_action;
}

void Gauss200Parser::Alter_table_partition_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_partition_action(this);
}

void Gauss200Parser::Alter_table_partition_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_partition_action(this);
}


antlrcpp::Any Gauss200Parser::Alter_table_partition_actionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_partition_action(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_table_partition_actionContext* Gauss200Parser::alter_table_partition_action() {
  Alter_table_partition_actionContext *_localctx = _tracker.createInstance<Alter_table_partition_actionContext>(_ctx, getState());
  enterRule(_localctx, 322, Gauss200Parser::RuleAlter_table_partition_action);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2537);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::MOVE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2529);
        move_clause();
        break;
      }

      case Gauss200Parser::EXCHANGE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2530);
        exchange_clause();
        break;
      }

      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::ENABLE_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2531);
        row_clause();
        break;
      }

      case Gauss200Parser::MERGE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(2532);
        merge_clause();
        break;
      }

      case Gauss200Parser::MODIFY_GS: {
        enterOuterAlt(_localctx, 5);
        setState(2533);
        modify_clause();
        break;
      }

      case Gauss200Parser::SPLIT_GS: {
        enterOuterAlt(_localctx, 6);
        setState(2534);
        split_clause();
        break;
      }

      case Gauss200Parser::ADD_GS: {
        enterOuterAlt(_localctx, 7);
        setState(2535);
        add_clause();
        break;
      }

      case Gauss200Parser::DROP_GS: {
        enterOuterAlt(_localctx, 8);
        setState(2536);
        drop_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Move_clauseContext ------------------------------------------------------------------

Gauss200Parser::Move_clauseContext::Move_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Move_clauseContext::MOVE_GS() {
  return getToken(Gauss200Parser::MOVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Move_clauseContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Move_clauseContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Move_clauseContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Move_clauseContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Paren_partition_value_listContext* Gauss200Parser::Move_clauseContext::paren_partition_value_list() {
  return getRuleContext<Gauss200Parser::Paren_partition_value_listContext>(0);
}


size_t Gauss200Parser::Move_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleMove_clause;
}

void Gauss200Parser::Move_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMove_clause(this);
}

void Gauss200Parser::Move_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMove_clause(this);
}


antlrcpp::Any Gauss200Parser::Move_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitMove_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Move_clauseContext* Gauss200Parser::move_clause() {
  Move_clauseContext *_localctx = _tracker.createInstance<Move_clauseContext>(_ctx, getState());
  enterRule(_localctx, 324, Gauss200Parser::RuleMove_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2539);
    match(Gauss200Parser::MOVE_GS);
    setState(2540);
    match(Gauss200Parser::PARTITION_GS);
    setState(2544);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(2541);
      partition_name();
      break;
    }

    case 2: {
      setState(2542);
      match(Gauss200Parser::FOR_GS);
      setState(2543);
      paren_partition_value_list();
      break;
    }

    }
    setState(2546);
    tablespace_name_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_partition_value_listContext ------------------------------------------------------------------

Gauss200Parser::Paren_partition_value_listContext::Paren_partition_value_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_partition_value_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Partition_valueContext *> Gauss200Parser::Paren_partition_value_listContext::partition_value() {
  return getRuleContexts<Gauss200Parser::Partition_valueContext>();
}

Gauss200Parser::Partition_valueContext* Gauss200Parser::Paren_partition_value_listContext::partition_value(size_t i) {
  return getRuleContext<Gauss200Parser::Partition_valueContext>(i);
}

tree::TerminalNode* Gauss200Parser::Paren_partition_value_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Paren_partition_value_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Paren_partition_value_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Paren_partition_value_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_partition_value_list;
}

void Gauss200Parser::Paren_partition_value_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_partition_value_list(this);
}

void Gauss200Parser::Paren_partition_value_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_partition_value_list(this);
}


antlrcpp::Any Gauss200Parser::Paren_partition_value_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_partition_value_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_partition_value_listContext* Gauss200Parser::paren_partition_value_list() {
  Paren_partition_value_listContext *_localctx = _tracker.createInstance<Paren_partition_value_listContext>(_ctx, getState());
  enterRule(_localctx, 326, Gauss200Parser::RuleParen_partition_value_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2548);
    match(Gauss200Parser::LEFT_PAREN);
    setState(2549);
    partition_value();
    setState(2554);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2550);
      match(Gauss200Parser::COMMA);
      setState(2551);
      partition_value();
      setState(2556);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2557);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_partition_valueContext ------------------------------------------------------------------

Gauss200Parser::Paren_partition_valueContext::Paren_partition_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_partition_valueContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Partition_valueContext* Gauss200Parser::Paren_partition_valueContext::partition_value() {
  return getRuleContext<Gauss200Parser::Partition_valueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Paren_partition_valueContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Paren_partition_valueContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_partition_value;
}

void Gauss200Parser::Paren_partition_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_partition_value(this);
}

void Gauss200Parser::Paren_partition_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_partition_value(this);
}


antlrcpp::Any Gauss200Parser::Paren_partition_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_partition_value(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_partition_valueContext* Gauss200Parser::paren_partition_value() {
  Paren_partition_valueContext *_localctx = _tracker.createInstance<Paren_partition_valueContext>(_ctx, getState());
  enterRule(_localctx, 328, Gauss200Parser::RuleParen_partition_value);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2559);
    match(Gauss200Parser::LEFT_PAREN);
    setState(2560);
    partition_value();
    setState(2561);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_valueContext ------------------------------------------------------------------

Gauss200Parser::Partition_valueContext::Partition_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Partition_valueContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Partition_valueContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_value;
}

void Gauss200Parser::Partition_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_value(this);
}

void Gauss200Parser::Partition_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_value(this);
}


antlrcpp::Any Gauss200Parser::Partition_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_value(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_valueContext* Gauss200Parser::partition_value() {
  Partition_valueContext *_localctx = _tracker.createInstance<Partition_valueContext>(_ctx, getState());
  enterRule(_localctx, 330, Gauss200Parser::RulePartition_value);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2563);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exchange_clauseContext ------------------------------------------------------------------

Gauss200Parser::Exchange_clauseContext::Exchange_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::EXCHANGE_GS() {
  return getToken(Gauss200Parser::EXCHANGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Exchange_clauseContext::WITH_GS() {
  return getTokens(Gauss200Parser::WITH_GS);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::WITH_GS(size_t i) {
  return getToken(Gauss200Parser::WITH_GS, i);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Alter_table_nameContext* Gauss200Parser::Exchange_clauseContext::alter_table_name() {
  return getRuleContext<Gauss200Parser::Alter_table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Exchange_clauseContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Paren_partition_value_listContext* Gauss200Parser::Exchange_clauseContext::paren_partition_value_list() {
  return getRuleContext<Gauss200Parser::Paren_partition_value_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::VALIDATION_GS() {
  return getToken(Gauss200Parser::VALIDATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::VERBOSE_GS() {
  return getToken(Gauss200Parser::VERBOSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Exchange_clauseContext::WITHOUT_GS() {
  return getToken(Gauss200Parser::WITHOUT_GS, 0);
}


size_t Gauss200Parser::Exchange_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleExchange_clause;
}

void Gauss200Parser::Exchange_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExchange_clause(this);
}

void Gauss200Parser::Exchange_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExchange_clause(this);
}


antlrcpp::Any Gauss200Parser::Exchange_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExchange_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Exchange_clauseContext* Gauss200Parser::exchange_clause() {
  Exchange_clauseContext *_localctx = _tracker.createInstance<Exchange_clauseContext>(_ctx, getState());
  enterRule(_localctx, 332, Gauss200Parser::RuleExchange_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2565);
    match(Gauss200Parser::EXCHANGE_GS);
    setState(2566);
    match(Gauss200Parser::PARTITION_GS);
    setState(2573);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::LEFT_PAREN: {
        setState(2567);
        match(Gauss200Parser::LEFT_PAREN);
        setState(2568);
        partition_name();
        setState(2569);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

      case Gauss200Parser::FOR_GS: {
        setState(2571);
        match(Gauss200Parser::FOR_GS);
        setState(2572);
        paren_partition_value_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2575);
    match(Gauss200Parser::WITH_GS);
    setState(2576);
    match(Gauss200Parser::TABLE_GS);
    setState(2577);
    alter_table_name();
    setState(2580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS || _la == Gauss200Parser::WITHOUT_GS) {
      setState(2578);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::WITH_GS || _la == Gauss200Parser::WITHOUT_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2579);
      match(Gauss200Parser::VALIDATION_GS);
    }
    setState(2583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::VERBOSE_GS) {
      setState(2582);
      match(Gauss200Parser::VERBOSE_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_clauseContext ------------------------------------------------------------------

Gauss200Parser::Row_clauseContext::Row_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Row_clauseContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Row_clauseContext::MOVEMENT_GS() {
  return getToken(Gauss200Parser::MOVEMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Row_clauseContext::ENABLE_GS() {
  return getToken(Gauss200Parser::ENABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Row_clauseContext::DISABLE_GS() {
  return getToken(Gauss200Parser::DISABLE_GS, 0);
}


size_t Gauss200Parser::Row_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleRow_clause;
}

void Gauss200Parser::Row_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRow_clause(this);
}

void Gauss200Parser::Row_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRow_clause(this);
}


antlrcpp::Any Gauss200Parser::Row_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRow_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Row_clauseContext* Gauss200Parser::row_clause() {
  Row_clauseContext *_localctx = _tracker.createInstance<Row_clauseContext>(_ctx, getState());
  enterRule(_localctx, 334, Gauss200Parser::RuleRow_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2585);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::DISABLE_GS

    || _la == Gauss200Parser::ENABLE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2586);
    match(Gauss200Parser::ROW_GS);
    setState(2587);
    match(Gauss200Parser::MOVEMENT_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_clauseContext ------------------------------------------------------------------

Gauss200Parser::Merge_clauseContext::Merge_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Merge_clauseContext::MERGE_GS() {
  return getToken(Gauss200Parser::MERGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Merge_clauseContext::PARTITIONS_GS() {
  return getToken(Gauss200Parser::PARTITIONS_GS, 0);
}

std::vector<Gauss200Parser::Partition_nameContext *> Gauss200Parser::Merge_clauseContext::partition_name() {
  return getRuleContexts<Gauss200Parser::Partition_nameContext>();
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Merge_clauseContext::partition_name(size_t i) {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Merge_clauseContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Merge_clauseContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Merge_clauseContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Merge_clauseContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Merge_clauseContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}


size_t Gauss200Parser::Merge_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleMerge_clause;
}

void Gauss200Parser::Merge_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_clause(this);
}

void Gauss200Parser::Merge_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_clause(this);
}


antlrcpp::Any Gauss200Parser::Merge_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitMerge_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Merge_clauseContext* Gauss200Parser::merge_clause() {
  Merge_clauseContext *_localctx = _tracker.createInstance<Merge_clauseContext>(_ctx, getState());
  enterRule(_localctx, 336, Gauss200Parser::RuleMerge_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2589);
    match(Gauss200Parser::MERGE_GS);
    setState(2590);
    match(Gauss200Parser::PARTITIONS_GS);
    setState(2591);
    partition_name();
    setState(2596);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2592);
      match(Gauss200Parser::COMMA);
      setState(2593);
      partition_name();
      setState(2598);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2599);
    match(Gauss200Parser::INTO_GS);
    setState(2600);
    match(Gauss200Parser::PARTITION_GS);
    setState(2601);
    partition_name();
    setState(2603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLESPACE_GS) {
      setState(2602);
      tablespace_name_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modify_clauseContext ------------------------------------------------------------------

Gauss200Parser::Modify_clauseContext::Modify_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Modify_clauseContext::MODIFY_GS() {
  return getToken(Gauss200Parser::MODIFY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Modify_clauseContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Modify_clauseContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Modify_clauseContext::UNUSABLE_GS() {
  return getToken(Gauss200Parser::UNUSABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Modify_clauseContext::LOCAL_GS() {
  return getToken(Gauss200Parser::LOCAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Modify_clauseContext::INDEXES_GS() {
  return getToken(Gauss200Parser::INDEXES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Modify_clauseContext::REBUILD_GS() {
  return getToken(Gauss200Parser::REBUILD_GS, 0);
}


size_t Gauss200Parser::Modify_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleModify_clause;
}

void Gauss200Parser::Modify_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModify_clause(this);
}

void Gauss200Parser::Modify_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModify_clause(this);
}


antlrcpp::Any Gauss200Parser::Modify_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitModify_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Modify_clauseContext* Gauss200Parser::modify_clause() {
  Modify_clauseContext *_localctx = _tracker.createInstance<Modify_clauseContext>(_ctx, getState());
  enterRule(_localctx, 338, Gauss200Parser::RuleModify_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2605);
    match(Gauss200Parser::MODIFY_GS);
    setState(2606);
    match(Gauss200Parser::PARTITION_GS);
    setState(2607);
    partition_name();
    setState(2609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::REBUILD_GS) {
      setState(2608);
      match(Gauss200Parser::REBUILD_GS);
    }
    setState(2611);
    match(Gauss200Parser::UNUSABLE_GS);
    setState(2612);
    match(Gauss200Parser::LOCAL_GS);
    setState(2613);
    match(Gauss200Parser::INDEXES_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Split_clauseContext ------------------------------------------------------------------

Gauss200Parser::Split_clauseContext::Split_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Split_clauseContext::SPLIT_GS() {
  return getToken(Gauss200Parser::SPLIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Split_clauseContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Split_clauseContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Split_clauseContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Paren_partition_value_listContext* Gauss200Parser::Split_clauseContext::paren_partition_value_list() {
  return getRuleContext<Gauss200Parser::Paren_partition_value_listContext>(0);
}

Gauss200Parser::Split_point_clauseContext* Gauss200Parser::Split_clauseContext::split_point_clause() {
  return getRuleContext<Gauss200Parser::Split_point_clauseContext>(0);
}

Gauss200Parser::No_split_point_clauseContext* Gauss200Parser::Split_clauseContext::no_split_point_clause() {
  return getRuleContext<Gauss200Parser::No_split_point_clauseContext>(0);
}


size_t Gauss200Parser::Split_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleSplit_clause;
}

void Gauss200Parser::Split_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSplit_clause(this);
}

void Gauss200Parser::Split_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSplit_clause(this);
}


antlrcpp::Any Gauss200Parser::Split_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSplit_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Split_clauseContext* Gauss200Parser::split_clause() {
  Split_clauseContext *_localctx = _tracker.createInstance<Split_clauseContext>(_ctx, getState());
  enterRule(_localctx, 340, Gauss200Parser::RuleSplit_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2615);
    match(Gauss200Parser::SPLIT_GS);
    setState(2616);
    match(Gauss200Parser::PARTITION_GS);
    setState(2620);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      setState(2617);
      partition_name();
      break;
    }

    case 2: {
      setState(2618);
      match(Gauss200Parser::FOR_GS);
      setState(2619);
      paren_partition_value_list();
      break;
    }

    }
    setState(2624);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::AT_GS: {
        setState(2622);
        split_point_clause();
        break;
      }

      case Gauss200Parser::INTO_GS: {
        setState(2623);
        no_split_point_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Split_point_clauseContext ------------------------------------------------------------------

Gauss200Parser::Split_point_clauseContext::Split_point_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Split_point_clauseContext::AT_GS() {
  return getToken(Gauss200Parser::AT_GS, 0);
}

Gauss200Parser::Paren_partition_valueContext* Gauss200Parser::Split_point_clauseContext::paren_partition_value() {
  return getRuleContext<Gauss200Parser::Paren_partition_valueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Split_point_clauseContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Split_point_clauseContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Split_point_clause_optionContext *> Gauss200Parser::Split_point_clauseContext::split_point_clause_option() {
  return getRuleContexts<Gauss200Parser::Split_point_clause_optionContext>();
}

Gauss200Parser::Split_point_clause_optionContext* Gauss200Parser::Split_point_clauseContext::split_point_clause_option(size_t i) {
  return getRuleContext<Gauss200Parser::Split_point_clause_optionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Split_point_clauseContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

tree::TerminalNode* Gauss200Parser::Split_point_clauseContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Split_point_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleSplit_point_clause;
}

void Gauss200Parser::Split_point_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSplit_point_clause(this);
}

void Gauss200Parser::Split_point_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSplit_point_clause(this);
}


antlrcpp::Any Gauss200Parser::Split_point_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSplit_point_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Split_point_clauseContext* Gauss200Parser::split_point_clause() {
  Split_point_clauseContext *_localctx = _tracker.createInstance<Split_point_clauseContext>(_ctx, getState());
  enterRule(_localctx, 342, Gauss200Parser::RuleSplit_point_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2626);
    match(Gauss200Parser::AT_GS);
    setState(2627);
    paren_partition_value();
    setState(2628);
    match(Gauss200Parser::INTO_GS);
    setState(2629);
    match(Gauss200Parser::LEFT_PAREN);
    setState(2630);
    split_point_clause_option();
    setState(2631);
    match(Gauss200Parser::COMMA);
    setState(2632);
    split_point_clause_option();
    setState(2633);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Split_point_clause_optionContext ------------------------------------------------------------------

Gauss200Parser::Split_point_clause_optionContext::Split_point_clause_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Split_point_clause_optionContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Split_point_clause_optionContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Split_point_clause_optionContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}


size_t Gauss200Parser::Split_point_clause_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleSplit_point_clause_option;
}

void Gauss200Parser::Split_point_clause_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSplit_point_clause_option(this);
}

void Gauss200Parser::Split_point_clause_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSplit_point_clause_option(this);
}


antlrcpp::Any Gauss200Parser::Split_point_clause_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSplit_point_clause_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Split_point_clause_optionContext* Gauss200Parser::split_point_clause_option() {
  Split_point_clause_optionContext *_localctx = _tracker.createInstance<Split_point_clause_optionContext>(_ctx, getState());
  enterRule(_localctx, 344, Gauss200Parser::RuleSplit_point_clause_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2635);
    match(Gauss200Parser::PARTITION_GS);
    setState(2636);
    partition_name();
    setState(2638);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLESPACE_GS) {
      setState(2637);
      tablespace_name_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- No_split_point_clauseContext ------------------------------------------------------------------

Gauss200Parser::No_split_point_clauseContext::No_split_point_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::No_split_point_clauseContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::No_split_point_clauseContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Partition_item_listContext* Gauss200Parser::No_split_point_clauseContext::partition_item_list() {
  return getRuleContext<Gauss200Parser::Partition_item_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::No_split_point_clauseContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::No_split_point_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleNo_split_point_clause;
}

void Gauss200Parser::No_split_point_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNo_split_point_clause(this);
}

void Gauss200Parser::No_split_point_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNo_split_point_clause(this);
}


antlrcpp::Any Gauss200Parser::No_split_point_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNo_split_point_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::No_split_point_clauseContext* Gauss200Parser::no_split_point_clause() {
  No_split_point_clauseContext *_localctx = _tracker.createInstance<No_split_point_clauseContext>(_ctx, getState());
  enterRule(_localctx, 346, Gauss200Parser::RuleNo_split_point_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2640);
    match(Gauss200Parser::INTO_GS);
    setState(2641);
    match(Gauss200Parser::LEFT_PAREN);
    setState(2642);
    partition_item_list();
    setState(2643);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_item_listContext ------------------------------------------------------------------

Gauss200Parser::Partition_item_listContext::Partition_item_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Partition_itemContext *> Gauss200Parser::Partition_item_listContext::partition_item() {
  return getRuleContexts<Gauss200Parser::Partition_itemContext>();
}

Gauss200Parser::Partition_itemContext* Gauss200Parser::Partition_item_listContext::partition_item(size_t i) {
  return getRuleContext<Gauss200Parser::Partition_itemContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Partition_item_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Partition_item_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Partition_item_listContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_item_list;
}

void Gauss200Parser::Partition_item_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_item_list(this);
}

void Gauss200Parser::Partition_item_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_item_list(this);
}


antlrcpp::Any Gauss200Parser::Partition_item_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_item_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_item_listContext* Gauss200Parser::partition_item_list() {
  Partition_item_listContext *_localctx = _tracker.createInstance<Partition_item_listContext>(_ctx, getState());
  enterRule(_localctx, 348, Gauss200Parser::RulePartition_item_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2645);
    partition_item();
    setState(2650);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2646);
      match(Gauss200Parser::COMMA);
      setState(2647);
      partition_item();
      setState(2652);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_itemContext ------------------------------------------------------------------

Gauss200Parser::Partition_itemContext::Partition_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Partition_less_than_itemContext* Gauss200Parser::Partition_itemContext::partition_less_than_item() {
  return getRuleContext<Gauss200Parser::Partition_less_than_itemContext>(0);
}

Gauss200Parser::Partition_start_end_itemContext* Gauss200Parser::Partition_itemContext::partition_start_end_item() {
  return getRuleContext<Gauss200Parser::Partition_start_end_itemContext>(0);
}


size_t Gauss200Parser::Partition_itemContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_item;
}

void Gauss200Parser::Partition_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_item(this);
}

void Gauss200Parser::Partition_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_item(this);
}


antlrcpp::Any Gauss200Parser::Partition_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_item(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_itemContext* Gauss200Parser::partition_item() {
  Partition_itemContext *_localctx = _tracker.createInstance<Partition_itemContext>(_ctx, getState());
  enterRule(_localctx, 350, Gauss200Parser::RulePartition_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2655);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2653);
      partition_less_than_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2654);
      partition_start_end_item();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_less_than_itemContext ------------------------------------------------------------------

Gauss200Parser::Partition_less_than_itemContext::Partition_less_than_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Partition_less_than_itemContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::VALUES_GS() {
  return getToken(Gauss200Parser::VALUES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::LESS_GS() {
  return getToken(Gauss200Parser::LESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::THAN_GS() {
  return getToken(Gauss200Parser::THAN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<Gauss200Parser::Partition_valueContext *> Gauss200Parser::Partition_less_than_itemContext::partition_value() {
  return getRuleContexts<Gauss200Parser::Partition_valueContext>();
}

Gauss200Parser::Partition_valueContext* Gauss200Parser::Partition_less_than_itemContext::partition_value(size_t i) {
  return getRuleContext<Gauss200Parser::Partition_valueContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Partition_less_than_itemContext::MAXVALUE_GS() {
  return getTokens(Gauss200Parser::MAXVALUE_GS);
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::MAXVALUE_GS(size_t i) {
  return getToken(Gauss200Parser::MAXVALUE_GS, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Partition_less_than_itemContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Partition_less_than_itemContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Partition_less_than_itemContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}


size_t Gauss200Parser::Partition_less_than_itemContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_less_than_item;
}

void Gauss200Parser::Partition_less_than_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_less_than_item(this);
}

void Gauss200Parser::Partition_less_than_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_less_than_item(this);
}


antlrcpp::Any Gauss200Parser::Partition_less_than_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_less_than_item(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_less_than_itemContext* Gauss200Parser::partition_less_than_item() {
  Partition_less_than_itemContext *_localctx = _tracker.createInstance<Partition_less_than_itemContext>(_ctx, getState());
  enterRule(_localctx, 352, Gauss200Parser::RulePartition_less_than_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2657);
    match(Gauss200Parser::PARTITION_GS);
    setState(2658);
    partition_name();
    setState(2659);
    match(Gauss200Parser::VALUES_GS);
    setState(2660);
    match(Gauss200Parser::LESS_GS);
    setState(2661);
    match(Gauss200Parser::THAN_GS);
    setState(2662);
    match(Gauss200Parser::LEFT_PAREN);
    setState(2665);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(2663);
      partition_value();
      break;
    }

    case 2: {
      setState(2664);
      match(Gauss200Parser::MAXVALUE_GS);
      break;
    }

    }
    setState(2674);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2667);
      match(Gauss200Parser::COMMA);
      setState(2670);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
      case 1: {
        setState(2668);
        partition_value();
        break;
      }

      case 2: {
        setState(2669);
        match(Gauss200Parser::MAXVALUE_GS);
        break;
      }

      }
      setState(2676);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2677);
    match(Gauss200Parser::RIGHT_PAREN);
    setState(2679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLESPACE_GS) {
      setState(2678);
      tablespace_name_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_start_end_itemContext ------------------------------------------------------------------

Gauss200Parser::Partition_start_end_itemContext::Partition_start_end_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Partition_start_end_itemContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Partition_start_end_itemContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

Gauss200Parser::Partition_start_end_item_optionContext* Gauss200Parser::Partition_start_end_itemContext::partition_start_end_item_option() {
  return getRuleContext<Gauss200Parser::Partition_start_end_item_optionContext>(0);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Partition_start_end_itemContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}


size_t Gauss200Parser::Partition_start_end_itemContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_start_end_item;
}

void Gauss200Parser::Partition_start_end_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_start_end_item(this);
}

void Gauss200Parser::Partition_start_end_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_start_end_item(this);
}


antlrcpp::Any Gauss200Parser::Partition_start_end_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_start_end_item(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_start_end_itemContext* Gauss200Parser::partition_start_end_item() {
  Partition_start_end_itemContext *_localctx = _tracker.createInstance<Partition_start_end_itemContext>(_ctx, getState());
  enterRule(_localctx, 354, Gauss200Parser::RulePartition_start_end_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2681);
    match(Gauss200Parser::PARTITION_GS);
    setState(2682);
    partition_name();
    setState(2683);
    partition_start_end_item_option();
    setState(2685);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLESPACE_GS) {
      setState(2684);
      tablespace_name_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_start_end_item_optionContext ------------------------------------------------------------------

Gauss200Parser::Partition_start_end_item_optionContext::Partition_start_end_item_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Partition_start_end_item_optionContext::START_GS() {
  return getToken(Gauss200Parser::START_GS, 0);
}

std::vector<Gauss200Parser::Paren_partition_valueContext *> Gauss200Parser::Partition_start_end_item_optionContext::paren_partition_value() {
  return getRuleContexts<Gauss200Parser::Paren_partition_valueContext>();
}

Gauss200Parser::Paren_partition_valueContext* Gauss200Parser::Partition_start_end_item_optionContext::paren_partition_value(size_t i) {
  return getRuleContext<Gauss200Parser::Paren_partition_valueContext>(i);
}

tree::TerminalNode* Gauss200Parser::Partition_start_end_item_optionContext::END_GS() {
  return getToken(Gauss200Parser::END_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_start_end_item_optionContext::EVERY_GS() {
  return getToken(Gauss200Parser::EVERY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_start_end_item_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_start_end_item_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Partition_valueContext* Gauss200Parser::Partition_start_end_item_optionContext::partition_value() {
  return getRuleContext<Gauss200Parser::Partition_valueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Partition_start_end_item_optionContext::MAXVALUE_GS() {
  return getToken(Gauss200Parser::MAXVALUE_GS, 0);
}


size_t Gauss200Parser::Partition_start_end_item_optionContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_start_end_item_option;
}

void Gauss200Parser::Partition_start_end_item_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_start_end_item_option(this);
}

void Gauss200Parser::Partition_start_end_item_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_start_end_item_option(this);
}


antlrcpp::Any Gauss200Parser::Partition_start_end_item_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_start_end_item_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_start_end_item_optionContext* Gauss200Parser::partition_start_end_item_option() {
  Partition_start_end_item_optionContext *_localctx = _tracker.createInstance<Partition_start_end_item_optionContext>(_ctx, getState());
  enterRule(_localctx, 356, Gauss200Parser::RulePartition_start_end_item_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2713);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2687);
      match(Gauss200Parser::START_GS);
      setState(2688);
      paren_partition_value();
      setState(2689);
      match(Gauss200Parser::END_GS);
      setState(2690);
      paren_partition_value();
      setState(2691);
      match(Gauss200Parser::EVERY_GS);
      setState(2692);
      paren_partition_value();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2694);
      match(Gauss200Parser::START_GS);
      setState(2695);
      paren_partition_value();
      setState(2696);
      match(Gauss200Parser::END_GS);
      setState(2697);
      match(Gauss200Parser::LEFT_PAREN);
      setState(2700);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
      case 1: {
        setState(2698);
        partition_value();
        break;
      }

      case 2: {
        setState(2699);
        match(Gauss200Parser::MAXVALUE_GS);
        break;
      }

      }
      setState(2702);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2704);
      match(Gauss200Parser::START_GS);
      setState(2705);
      paren_partition_value();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2706);
      match(Gauss200Parser::END_GS);
      setState(2707);
      match(Gauss200Parser::LEFT_PAREN);
      setState(2710);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
      case 1: {
        setState(2708);
        partition_value();
        break;
      }

      case 2: {
        setState(2709);
        match(Gauss200Parser::MAXVALUE_GS);
        break;
      }

      }
      setState(2712);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_clauseContext ------------------------------------------------------------------

Gauss200Parser::Add_clauseContext::Add_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Add_clauseContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

Gauss200Parser::Partition_less_than_itemContext* Gauss200Parser::Add_clauseContext::partition_less_than_item() {
  return getRuleContext<Gauss200Parser::Partition_less_than_itemContext>(0);
}

Gauss200Parser::Partition_start_end_itemContext* Gauss200Parser::Add_clauseContext::partition_start_end_item() {
  return getRuleContext<Gauss200Parser::Partition_start_end_itemContext>(0);
}


size_t Gauss200Parser::Add_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleAdd_clause;
}

void Gauss200Parser::Add_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_clause(this);
}

void Gauss200Parser::Add_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_clause(this);
}


antlrcpp::Any Gauss200Parser::Add_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAdd_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Add_clauseContext* Gauss200Parser::add_clause() {
  Add_clauseContext *_localctx = _tracker.createInstance<Add_clauseContext>(_ctx, getState());
  enterRule(_localctx, 358, Gauss200Parser::RuleAdd_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2715);
    match(Gauss200Parser::ADD_GS);
    setState(2718);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      setState(2716);
      partition_less_than_item();
      break;
    }

    case 2: {
      setState(2717);
      partition_start_end_item();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_clauseContext ------------------------------------------------------------------

Gauss200Parser::Drop_clauseContext::Drop_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_clauseContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_clauseContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Drop_clauseContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Drop_clauseContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Paren_partition_value_listContext* Gauss200Parser::Drop_clauseContext::paren_partition_value_list() {
  return getRuleContext<Gauss200Parser::Paren_partition_value_listContext>(0);
}


size_t Gauss200Parser::Drop_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_clause;
}

void Gauss200Parser::Drop_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_clause(this);
}

void Gauss200Parser::Drop_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_clause(this);
}


antlrcpp::Any Gauss200Parser::Drop_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_clauseContext* Gauss200Parser::drop_clause() {
  Drop_clauseContext *_localctx = _tracker.createInstance<Drop_clauseContext>(_ctx, getState());
  enterRule(_localctx, 360, Gauss200Parser::RuleDrop_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2720);
    match(Gauss200Parser::DROP_GS);
    setState(2721);
    match(Gauss200Parser::PARTITION_GS);
    setState(2725);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(2722);
      partition_name();
      break;
    }

    case 2: {
      setState(2723);
      match(Gauss200Parser::FOR_GS);
      setState(2724);
      paren_partition_value_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_tablespace_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_tablespace_stmtContext::Alter_tablespace_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_tablespace_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Alter_tablespace_stmtContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}

Gauss200Parser::Alter_tablespace_optionContext* Gauss200Parser::Alter_tablespace_stmtContext::alter_tablespace_option() {
  return getRuleContext<Gauss200Parser::Alter_tablespace_optionContext>(0);
}


size_t Gauss200Parser::Alter_tablespace_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_tablespace_stmt;
}

void Gauss200Parser::Alter_tablespace_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_tablespace_stmt(this);
}

void Gauss200Parser::Alter_tablespace_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_tablespace_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_tablespace_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_tablespace_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_tablespace_stmtContext* Gauss200Parser::alter_tablespace_stmt() {
  Alter_tablespace_stmtContext *_localctx = _tracker.createInstance<Alter_tablespace_stmtContext>(_ctx, getState());
  enterRule(_localctx, 362, Gauss200Parser::RuleAlter_tablespace_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2727);
    match(Gauss200Parser::ALTER_GS);
    setState(2728);
    tablespace_name_option();
    setState(2729);
    alter_tablespace_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_tablespace_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_tablespace_optionContext::Alter_tablespace_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_tablespace_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}

Gauss200Parser::Set_assignment_listContext* Gauss200Parser::Alter_tablespace_optionContext::set_assignment_list() {
  return getRuleContext<Gauss200Parser::Set_assignment_listContext>(0);
}

Gauss200Parser::Reset_param_listContext* Gauss200Parser::Alter_tablespace_optionContext::reset_param_list() {
  return getRuleContext<Gauss200Parser::Reset_param_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_tablespace_optionContext::RESIZE_GS() {
  return getToken(Gauss200Parser::RESIZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_tablespace_optionContext::MAXSIZE_GS() {
  return getToken(Gauss200Parser::MAXSIZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_tablespace_optionContext::UNLIMITED_GS() {
  return getToken(Gauss200Parser::UNLIMITED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_tablespace_optionContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}


size_t Gauss200Parser::Alter_tablespace_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_tablespace_option;
}

void Gauss200Parser::Alter_tablespace_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_tablespace_option(this);
}

void Gauss200Parser::Alter_tablespace_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_tablespace_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_tablespace_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_tablespace_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_tablespace_optionContext* Gauss200Parser::alter_tablespace_option() {
  Alter_tablespace_optionContext *_localctx = _tracker.createInstance<Alter_tablespace_optionContext>(_ctx, getState());
  enterRule(_localctx, 364, Gauss200Parser::RuleAlter_tablespace_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2737);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2731);
        rename_owner_to_option();
        break;
      }

      case Gauss200Parser::SET_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2732);
        set_assignment_list();
        break;
      }

      case Gauss200Parser::RESET_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2733);
        reset_param_list();
        break;
      }

      case Gauss200Parser::RESIZE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(2734);
        match(Gauss200Parser::RESIZE_GS);
        setState(2735);
        match(Gauss200Parser::MAXSIZE_GS);
        setState(2736);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::UNLIMITED_GS || _la == Gauss200Parser::CHAR_STRING)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_txt_search_conf_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_txt_search_conf_stmtContext::Alter_txt_search_conf_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_stmtContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_stmtContext::SEARCH_GS() {
  return getToken(Gauss200Parser::SEARCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_stmtContext::CONFIGURATION_GS() {
  return getToken(Gauss200Parser::CONFIGURATION_GS, 0);
}

Gauss200Parser::Configuration_nameContext* Gauss200Parser::Alter_txt_search_conf_stmtContext::configuration_name() {
  return getRuleContext<Gauss200Parser::Configuration_nameContext>(0);
}

Gauss200Parser::Alter_txt_search_conf_optionContext* Gauss200Parser::Alter_txt_search_conf_stmtContext::alter_txt_search_conf_option() {
  return getRuleContext<Gauss200Parser::Alter_txt_search_conf_optionContext>(0);
}


size_t Gauss200Parser::Alter_txt_search_conf_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_txt_search_conf_stmt;
}

void Gauss200Parser::Alter_txt_search_conf_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_txt_search_conf_stmt(this);
}

void Gauss200Parser::Alter_txt_search_conf_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_txt_search_conf_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_txt_search_conf_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_txt_search_conf_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_txt_search_conf_stmtContext* Gauss200Parser::alter_txt_search_conf_stmt() {
  Alter_txt_search_conf_stmtContext *_localctx = _tracker.createInstance<Alter_txt_search_conf_stmtContext>(_ctx, getState());
  enterRule(_localctx, 366, Gauss200Parser::RuleAlter_txt_search_conf_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2739);
    match(Gauss200Parser::ALTER_GS);
    setState(2740);
    match(Gauss200Parser::TEXT_GS);
    setState(2741);
    match(Gauss200Parser::SEARCH_GS);
    setState(2742);
    match(Gauss200Parser::CONFIGURATION_GS);
    setState(2743);
    configuration_name();
    setState(2744);
    alter_txt_search_conf_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Configuration_nameContext ------------------------------------------------------------------

Gauss200Parser::Configuration_nameContext::Configuration_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Configuration_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::Configuration_nameContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::Configuration_nameContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::Configuration_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleConfiguration_name;
}

void Gauss200Parser::Configuration_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfiguration_name(this);
}

void Gauss200Parser::Configuration_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfiguration_name(this);
}


antlrcpp::Any Gauss200Parser::Configuration_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConfiguration_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Configuration_nameContext* Gauss200Parser::configuration_name() {
  Configuration_nameContext *_localctx = _tracker.createInstance<Configuration_nameContext>(_ctx, getState());
  enterRule(_localctx, 368, Gauss200Parser::RuleConfiguration_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2746);
    identifier();
    setState(2750);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::PERIOD) {
      setState(2747);
      attr();
      setState(2752);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_txt_search_conf_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_txt_search_conf_optionContext::Alter_txt_search_conf_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_optionContext::MAPPING_GS() {
  return getToken(Gauss200Parser::MAPPING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_optionContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Token_type_listContext* Gauss200Parser::Alter_txt_search_conf_optionContext::token_type_list() {
  return getRuleContext<Gauss200Parser::Token_type_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Dictionary_name_listContext* Gauss200Parser::Alter_txt_search_conf_optionContext::dictionary_name_list() {
  return getRuleContext<Gauss200Parser::Dictionary_name_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_optionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_optionContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_optionContext::REPLACE_GS() {
  return getToken(Gauss200Parser::REPLACE_GS, 0);
}

Gauss200Parser::Dictionary_nameContext* Gauss200Parser::Alter_txt_search_conf_optionContext::dictionary_name() {
  return getRuleContext<Gauss200Parser::Dictionary_nameContext>(0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Alter_txt_search_conf_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_conf_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_txt_search_conf_optionContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_txt_search_conf_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}

Gauss200Parser::Alter_set_schemaContext* Gauss200Parser::Alter_txt_search_conf_optionContext::alter_set_schema() {
  return getRuleContext<Gauss200Parser::Alter_set_schemaContext>(0);
}

Gauss200Parser::Set_assignment_listContext* Gauss200Parser::Alter_txt_search_conf_optionContext::set_assignment_list() {
  return getRuleContext<Gauss200Parser::Set_assignment_listContext>(0);
}

Gauss200Parser::Reset_param_listContext* Gauss200Parser::Alter_txt_search_conf_optionContext::reset_param_list() {
  return getRuleContext<Gauss200Parser::Reset_param_listContext>(0);
}


size_t Gauss200Parser::Alter_txt_search_conf_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_txt_search_conf_option;
}

void Gauss200Parser::Alter_txt_search_conf_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_txt_search_conf_option(this);
}

void Gauss200Parser::Alter_txt_search_conf_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_txt_search_conf_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_txt_search_conf_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_txt_search_conf_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_txt_search_conf_optionContext* Gauss200Parser::alter_txt_search_conf_option() {
  Alter_txt_search_conf_optionContext *_localctx = _tracker.createInstance<Alter_txt_search_conf_optionContext>(_ctx, getState());
  enterRule(_localctx, 370, Gauss200Parser::RuleAlter_txt_search_conf_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2782);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2753);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ADD_GS

      || _la == Gauss200Parser::ALTER_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2754);
      match(Gauss200Parser::MAPPING_GS);
      setState(2755);
      match(Gauss200Parser::FOR_GS);
      setState(2756);
      token_type_list();
      setState(2757);
      match(Gauss200Parser::WITH_GS);
      setState(2758);
      dictionary_name_list();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2760);
      match(Gauss200Parser::ALTER_GS);
      setState(2761);
      match(Gauss200Parser::MAPPING_GS);
      setState(2764);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::FOR_GS) {
        setState(2762);
        match(Gauss200Parser::FOR_GS);
        setState(2763);
        token_type_list();
      }
      setState(2766);
      match(Gauss200Parser::REPLACE_GS);
      setState(2767);
      dictionary_name();
      setState(2768);
      match(Gauss200Parser::WITH_GS);
      setState(2769);
      new_name();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2771);
      match(Gauss200Parser::DROP_GS);
      setState(2772);
      match(Gauss200Parser::MAPPING_GS);
      setState(2774);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::IF_GS) {
        setState(2773);
        if_exists_or_not();
      }
      setState(2776);
      match(Gauss200Parser::FOR_GS);
      setState(2777);
      token_type_list();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2778);
      rename_owner_to_option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2779);
      alter_set_schema();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2780);
      set_assignment_list();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2781);
      reset_param_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Token_type_listContext ------------------------------------------------------------------

Gauss200Parser::Token_type_listContext::Token_type_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Token_typeContext *> Gauss200Parser::Token_type_listContext::token_type() {
  return getRuleContexts<Gauss200Parser::Token_typeContext>();
}

Gauss200Parser::Token_typeContext* Gauss200Parser::Token_type_listContext::token_type(size_t i) {
  return getRuleContext<Gauss200Parser::Token_typeContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Token_type_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Token_type_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Token_type_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleToken_type_list;
}

void Gauss200Parser::Token_type_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterToken_type_list(this);
}

void Gauss200Parser::Token_type_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitToken_type_list(this);
}


antlrcpp::Any Gauss200Parser::Token_type_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitToken_type_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Token_type_listContext* Gauss200Parser::token_type_list() {
  Token_type_listContext *_localctx = _tracker.createInstance<Token_type_listContext>(_ctx, getState());
  enterRule(_localctx, 372, Gauss200Parser::RuleToken_type_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2784);
    token_type();
    setState(2789);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2785);
      match(Gauss200Parser::COMMA);
      setState(2786);
      token_type();
      setState(2791);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Token_typeContext ------------------------------------------------------------------

Gauss200Parser::Token_typeContext::Token_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Token_typeContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Token_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleToken_type;
}

void Gauss200Parser::Token_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterToken_type(this);
}

void Gauss200Parser::Token_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitToken_type(this);
}


antlrcpp::Any Gauss200Parser::Token_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitToken_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Token_typeContext* Gauss200Parser::token_type() {
  Token_typeContext *_localctx = _tracker.createInstance<Token_typeContext>(_ctx, getState());
  enterRule(_localctx, 374, Gauss200Parser::RuleToken_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2792);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_name_listContext ------------------------------------------------------------------

Gauss200Parser::Dictionary_name_listContext::Dictionary_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Dictionary_nameContext *> Gauss200Parser::Dictionary_name_listContext::dictionary_name() {
  return getRuleContexts<Gauss200Parser::Dictionary_nameContext>();
}

Gauss200Parser::Dictionary_nameContext* Gauss200Parser::Dictionary_name_listContext::dictionary_name(size_t i) {
  return getRuleContext<Gauss200Parser::Dictionary_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Dictionary_name_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Dictionary_name_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Dictionary_name_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleDictionary_name_list;
}

void Gauss200Parser::Dictionary_name_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_name_list(this);
}

void Gauss200Parser::Dictionary_name_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_name_list(this);
}


antlrcpp::Any Gauss200Parser::Dictionary_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_name_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Dictionary_name_listContext* Gauss200Parser::dictionary_name_list() {
  Dictionary_name_listContext *_localctx = _tracker.createInstance<Dictionary_name_listContext>(_ctx, getState());
  enterRule(_localctx, 376, Gauss200Parser::RuleDictionary_name_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2794);
    dictionary_name();
    setState(2799);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2795);
      match(Gauss200Parser::COMMA);
      setState(2796);
      dictionary_name();
      setState(2801);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_nameContext ------------------------------------------------------------------

Gauss200Parser::Dictionary_nameContext::Dictionary_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Dictionary_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Dictionary_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleDictionary_name;
}

void Gauss200Parser::Dictionary_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_name(this);
}

void Gauss200Parser::Dictionary_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_name(this);
}


antlrcpp::Any Gauss200Parser::Dictionary_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Dictionary_nameContext* Gauss200Parser::dictionary_name() {
  Dictionary_nameContext *_localctx = _tracker.createInstance<Dictionary_nameContext>(_ctx, getState());
  enterRule(_localctx, 378, Gauss200Parser::RuleDictionary_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2802);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_txt_search_dictionary_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_txt_search_dictionary_stmtContext::Alter_txt_search_dictionary_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_dictionary_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_dictionary_stmtContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_dictionary_stmtContext::SEARCH_GS() {
  return getToken(Gauss200Parser::SEARCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_txt_search_dictionary_stmtContext::DICTIONARY_GS() {
  return getToken(Gauss200Parser::DICTIONARY_GS, 0);
}

Gauss200Parser::Dictionary_nameContext* Gauss200Parser::Alter_txt_search_dictionary_stmtContext::dictionary_name() {
  return getRuleContext<Gauss200Parser::Dictionary_nameContext>(0);
}

Gauss200Parser::Alter_txt_search_dictionary_optionContext* Gauss200Parser::Alter_txt_search_dictionary_stmtContext::alter_txt_search_dictionary_option() {
  return getRuleContext<Gauss200Parser::Alter_txt_search_dictionary_optionContext>(0);
}


size_t Gauss200Parser::Alter_txt_search_dictionary_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_txt_search_dictionary_stmt;
}

void Gauss200Parser::Alter_txt_search_dictionary_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_txt_search_dictionary_stmt(this);
}

void Gauss200Parser::Alter_txt_search_dictionary_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_txt_search_dictionary_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_txt_search_dictionary_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_txt_search_dictionary_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_txt_search_dictionary_stmtContext* Gauss200Parser::alter_txt_search_dictionary_stmt() {
  Alter_txt_search_dictionary_stmtContext *_localctx = _tracker.createInstance<Alter_txt_search_dictionary_stmtContext>(_ctx, getState());
  enterRule(_localctx, 380, Gauss200Parser::RuleAlter_txt_search_dictionary_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2804);
    match(Gauss200Parser::ALTER_GS);
    setState(2805);
    match(Gauss200Parser::TEXT_GS);
    setState(2806);
    match(Gauss200Parser::SEARCH_GS);
    setState(2807);
    match(Gauss200Parser::DICTIONARY_GS);
    setState(2808);
    dictionary_name();
    setState(2809);
    alter_txt_search_dictionary_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_txt_search_dictionary_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_txt_search_dictionary_optionContext::Alter_txt_search_dictionary_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Alter_txt_search_dictionary_optionContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_txt_search_dictionary_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}

Gauss200Parser::Alter_set_schemaContext* Gauss200Parser::Alter_txt_search_dictionary_optionContext::alter_set_schema() {
  return getRuleContext<Gauss200Parser::Alter_set_schemaContext>(0);
}


size_t Gauss200Parser::Alter_txt_search_dictionary_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_txt_search_dictionary_option;
}

void Gauss200Parser::Alter_txt_search_dictionary_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_txt_search_dictionary_option(this);
}

void Gauss200Parser::Alter_txt_search_dictionary_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_txt_search_dictionary_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_txt_search_dictionary_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_txt_search_dictionary_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_txt_search_dictionary_optionContext* Gauss200Parser::alter_txt_search_dictionary_option() {
  Alter_txt_search_dictionary_optionContext *_localctx = _tracker.createInstance<Alter_txt_search_dictionary_optionContext>(_ctx, getState());
  enterRule(_localctx, 382, Gauss200Parser::RuleAlter_txt_search_dictionary_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2814);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2811);
        paren_assignment_stmt_list();
        break;
      }

      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2812);
        rename_owner_to_option();
        break;
      }

      case Gauss200Parser::SET_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2813);
        alter_set_schema();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_trigger_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_trigger_stmtContext::Alter_trigger_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_trigger_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_trigger_stmtContext::TRIGGER_GS() {
  return getToken(Gauss200Parser::TRIGGER_GS, 0);
}

Gauss200Parser::Trigger_nameContext* Gauss200Parser::Alter_trigger_stmtContext::trigger_name() {
  return getRuleContext<Gauss200Parser::Trigger_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_trigger_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Alter_trigger_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_trigger_stmtContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}


size_t Gauss200Parser::Alter_trigger_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_trigger_stmt;
}

void Gauss200Parser::Alter_trigger_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_trigger_stmt(this);
}

void Gauss200Parser::Alter_trigger_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_trigger_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_trigger_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_trigger_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_trigger_stmtContext* Gauss200Parser::alter_trigger_stmt() {
  Alter_trigger_stmtContext *_localctx = _tracker.createInstance<Alter_trigger_stmtContext>(_ctx, getState());
  enterRule(_localctx, 384, Gauss200Parser::RuleAlter_trigger_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2816);
    match(Gauss200Parser::ALTER_GS);
    setState(2817);
    match(Gauss200Parser::TRIGGER_GS);
    setState(2818);
    trigger_name();
    setState(2819);
    match(Gauss200Parser::ON_GS);
    setState(2820);
    table_name();
    setState(2821);
    rename_to_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_type_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_type_stmtContext::Alter_type_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_type_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_stmtContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

Gauss200Parser::Type_nameContext* Gauss200Parser::Alter_type_stmtContext::type_name() {
  return getRuleContext<Gauss200Parser::Type_nameContext>(0);
}

Gauss200Parser::Alter_type_optionContext* Gauss200Parser::Alter_type_stmtContext::alter_type_option() {
  return getRuleContext<Gauss200Parser::Alter_type_optionContext>(0);
}


size_t Gauss200Parser::Alter_type_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_type_stmt;
}

void Gauss200Parser::Alter_type_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_type_stmt(this);
}

void Gauss200Parser::Alter_type_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_type_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_type_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_type_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_type_stmtContext* Gauss200Parser::alter_type_stmt() {
  Alter_type_stmtContext *_localctx = _tracker.createInstance<Alter_type_stmtContext>(_ctx, getState());
  enterRule(_localctx, 386, Gauss200Parser::RuleAlter_type_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2823);
    match(Gauss200Parser::ALTER_GS);
    setState(2824);
    match(Gauss200Parser::TYPE_GS);
    setState(2825);
    type_name();
    setState(2826);
    alter_type_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_nameContext ------------------------------------------------------------------

Gauss200Parser::Type_nameContext::Type_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Type_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::Type_nameContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::Type_nameContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::Type_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleType_name;
}

void Gauss200Parser::Type_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_name(this);
}

void Gauss200Parser::Type_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_name(this);
}


antlrcpp::Any Gauss200Parser::Type_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitType_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Type_nameContext* Gauss200Parser::type_name() {
  Type_nameContext *_localctx = _tracker.createInstance<Type_nameContext>(_ctx, getState());
  enterRule(_localctx, 388, Gauss200Parser::RuleType_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2828);
    identifier();
    setState(2832);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::PERIOD) {
      setState(2829);
      attr();
      setState(2834);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_type_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_type_optionContext::Alter_type_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alter_type_action_listContext* Gauss200Parser::Alter_type_optionContext::alter_type_action_list() {
  return getRuleContext<Gauss200Parser::Alter_type_action_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::OWNER_GS() {
  return getToken(Gauss200Parser::OWNER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Alter_type_optionContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::CURRENT_USER_GS() {
  return getToken(Gauss200Parser::CURRENT_USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::SESSION_USER_GS() {
  return getToken(Gauss200Parser::SESSION_USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::RENAME_GS() {
  return getToken(Gauss200Parser::RENAME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::ATTRIBUTE_GS() {
  return getToken(Gauss200Parser::ATTRIBUTE_GS, 0);
}

Gauss200Parser::Attr_nameContext* Gauss200Parser::Alter_type_optionContext::attr_name() {
  return getRuleContext<Gauss200Parser::Attr_nameContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Alter_type_optionContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_type_optionContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

Gauss200Parser::Alter_set_schemaContext* Gauss200Parser::Alter_type_optionContext::alter_set_schema() {
  return getRuleContext<Gauss200Parser::Alter_set_schemaContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::VALUE_GS() {
  return getToken(Gauss200Parser::VALUE_GS, 0);
}

std::vector<Gauss200Parser::Enum_valueContext *> Gauss200Parser::Alter_type_optionContext::enum_value() {
  return getRuleContexts<Gauss200Parser::Enum_valueContext>();
}

Gauss200Parser::Enum_valueContext* Gauss200Parser::Alter_type_optionContext::enum_value(size_t i) {
  return getRuleContext<Gauss200Parser::Enum_valueContext>(i);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::IF_GS() {
  return getToken(Gauss200Parser::IF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::EXISTS_GS() {
  return getToken(Gauss200Parser::EXISTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::BEFORE_GS() {
  return getToken(Gauss200Parser::BEFORE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_optionContext::AFTER_GS() {
  return getToken(Gauss200Parser::AFTER_GS, 0);
}

Gauss200Parser::Alter_type_add_attr_optionContext* Gauss200Parser::Alter_type_optionContext::alter_type_add_attr_option() {
  return getRuleContext<Gauss200Parser::Alter_type_add_attr_optionContext>(0);
}

Gauss200Parser::Alter_type_drop_attr_optionContext* Gauss200Parser::Alter_type_optionContext::alter_type_drop_attr_option() {
  return getRuleContext<Gauss200Parser::Alter_type_drop_attr_optionContext>(0);
}

Gauss200Parser::Alter_type_alter_attrContext* Gauss200Parser::Alter_type_optionContext::alter_type_alter_attr() {
  return getRuleContext<Gauss200Parser::Alter_type_alter_attrContext>(0);
}


size_t Gauss200Parser::Alter_type_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_type_option;
}

void Gauss200Parser::Alter_type_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_type_option(this);
}

void Gauss200Parser::Alter_type_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_type_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_type_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_type_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_type_optionContext* Gauss200Parser::alter_type_option() {
  Alter_type_optionContext *_localctx = _tracker.createInstance<Alter_type_optionContext>(_ctx, getState());
  enterRule(_localctx, 390, Gauss200Parser::RuleAlter_type_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2874);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2835);
      alter_type_action_list();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2836);
      match(Gauss200Parser::OWNER_GS);
      setState(2837);
      match(Gauss200Parser::TO_GS);
      setState(2841);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
      case 1: {
        setState(2838);
        new_name();
        break;
      }

      case 2: {
        setState(2839);
        match(Gauss200Parser::CURRENT_USER_GS);
        break;
      }

      case 3: {
        setState(2840);
        match(Gauss200Parser::SESSION_USER_GS);
        break;
      }

      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2843);
      match(Gauss200Parser::RENAME_GS);
      setState(2844);
      match(Gauss200Parser::ATTRIBUTE_GS);
      setState(2845);
      attr_name();
      setState(2846);
      match(Gauss200Parser::TO_GS);
      setState(2847);
      new_name();
      setState(2849);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
        setState(2848);
        cascade_restrict();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2851);
      rename_to_option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2852);
      alter_set_schema();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2853);
      match(Gauss200Parser::ADD_GS);
      setState(2854);
      match(Gauss200Parser::VALUE_GS);
      setState(2858);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::IF_GS) {
        setState(2855);
        match(Gauss200Parser::IF_GS);
        setState(2856);
        match(Gauss200Parser::NOT_GS);
        setState(2857);
        match(Gauss200Parser::EXISTS_GS);
      }
      setState(2860);
      enum_value();
      setState(2863);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::AFTER_GS

      || _la == Gauss200Parser::BEFORE_GS) {
        setState(2861);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::AFTER_GS

        || _la == Gauss200Parser::BEFORE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2862);
        enum_value();
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2865);
      match(Gauss200Parser::RENAME_GS);
      setState(2866);
      match(Gauss200Parser::VALUE_GS);
      setState(2867);
      enum_value();
      setState(2868);
      match(Gauss200Parser::TO_GS);
      setState(2869);
      enum_value();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2871);
      alter_type_add_attr_option();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2872);
      alter_type_drop_attr_option();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2873);
      alter_type_alter_attr();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_type_action_listContext ------------------------------------------------------------------

Gauss200Parser::Alter_type_action_listContext::Alter_type_action_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Alter_type_actionContext *> Gauss200Parser::Alter_type_action_listContext::alter_type_action() {
  return getRuleContexts<Gauss200Parser::Alter_type_actionContext>();
}

Gauss200Parser::Alter_type_actionContext* Gauss200Parser::Alter_type_action_listContext::alter_type_action(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_type_actionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Alter_type_action_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Alter_type_action_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Alter_type_action_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_type_action_list;
}

void Gauss200Parser::Alter_type_action_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_type_action_list(this);
}

void Gauss200Parser::Alter_type_action_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_type_action_list(this);
}


antlrcpp::Any Gauss200Parser::Alter_type_action_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_type_action_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_type_action_listContext* Gauss200Parser::alter_type_action_list() {
  Alter_type_action_listContext *_localctx = _tracker.createInstance<Alter_type_action_listContext>(_ctx, getState());
  enterRule(_localctx, 392, Gauss200Parser::RuleAlter_type_action_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2876);
    alter_type_action();
    setState(2881);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(2877);
      match(Gauss200Parser::COMMA);
      setState(2878);
      alter_type_action();
      setState(2883);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_type_actionContext ------------------------------------------------------------------

Gauss200Parser::Alter_type_actionContext::Alter_type_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alter_type_add_attr_optionContext* Gauss200Parser::Alter_type_actionContext::alter_type_add_attr_option() {
  return getRuleContext<Gauss200Parser::Alter_type_add_attr_optionContext>(0);
}

Gauss200Parser::Alter_type_drop_attr_optionContext* Gauss200Parser::Alter_type_actionContext::alter_type_drop_attr_option() {
  return getRuleContext<Gauss200Parser::Alter_type_drop_attr_optionContext>(0);
}

Gauss200Parser::Alter_type_alter_attrContext* Gauss200Parser::Alter_type_actionContext::alter_type_alter_attr() {
  return getRuleContext<Gauss200Parser::Alter_type_alter_attrContext>(0);
}


size_t Gauss200Parser::Alter_type_actionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_type_action;
}

void Gauss200Parser::Alter_type_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_type_action(this);
}

void Gauss200Parser::Alter_type_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_type_action(this);
}


antlrcpp::Any Gauss200Parser::Alter_type_actionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_type_action(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_type_actionContext* Gauss200Parser::alter_type_action() {
  Alter_type_actionContext *_localctx = _tracker.createInstance<Alter_type_actionContext>(_ctx, getState());
  enterRule(_localctx, 394, Gauss200Parser::RuleAlter_type_action);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2887);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ADD_GS: {
        enterOuterAlt(_localctx, 1);
        setState(2884);
        alter_type_add_attr_option();
        break;
      }

      case Gauss200Parser::DROP_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2885);
        alter_type_drop_attr_option();
        break;
      }

      case Gauss200Parser::ALTER_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2886);
        alter_type_alter_attr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attr_nameContext ------------------------------------------------------------------

Gauss200Parser::Attr_nameContext::Attr_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Attr_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Attr_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleAttr_name;
}

void Gauss200Parser::Attr_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttr_name(this);
}

void Gauss200Parser::Attr_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttr_name(this);
}


antlrcpp::Any Gauss200Parser::Attr_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAttr_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Attr_nameContext* Gauss200Parser::attr_name() {
  Attr_nameContext *_localctx = _tracker.createInstance<Attr_nameContext>(_ctx, getState());
  enterRule(_localctx, 396, Gauss200Parser::RuleAttr_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2889);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_valueContext ------------------------------------------------------------------

Gauss200Parser::Enum_valueContext::Enum_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Enum_valueContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Enum_valueContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::Enum_valueContext::getRuleIndex() const {
  return Gauss200Parser::RuleEnum_value;
}

void Gauss200Parser::Enum_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_value(this);
}

void Gauss200Parser::Enum_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_value(this);
}


antlrcpp::Any Gauss200Parser::Enum_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitEnum_value(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Enum_valueContext* Gauss200Parser::enum_value() {
  Enum_valueContext *_localctx = _tracker.createInstance<Enum_valueContext>(_ctx, getState());
  enterRule(_localctx, 398, Gauss200Parser::RuleEnum_value);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2891);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::CHAR_STRING

    || _la == Gauss200Parser::SCONST)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_type_add_attr_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_type_add_attr_optionContext::Alter_type_add_attr_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_type_add_attr_optionContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_add_attr_optionContext::ATTRIBUTE_GS() {
  return getToken(Gauss200Parser::ATTRIBUTE_GS, 0);
}

Gauss200Parser::Attr_nameContext* Gauss200Parser::Alter_type_add_attr_optionContext::attr_name() {
  return getRuleContext<Gauss200Parser::Attr_nameContext>(0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Alter_type_add_attr_optionContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

Gauss200Parser::Collate_optionContext* Gauss200Parser::Alter_type_add_attr_optionContext::collate_option() {
  return getRuleContext<Gauss200Parser::Collate_optionContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Alter_type_add_attr_optionContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Alter_type_add_attr_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_type_add_attr_option;
}

void Gauss200Parser::Alter_type_add_attr_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_type_add_attr_option(this);
}

void Gauss200Parser::Alter_type_add_attr_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_type_add_attr_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_type_add_attr_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_type_add_attr_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_type_add_attr_optionContext* Gauss200Parser::alter_type_add_attr_option() {
  Alter_type_add_attr_optionContext *_localctx = _tracker.createInstance<Alter_type_add_attr_optionContext>(_ctx, getState());
  enterRule(_localctx, 400, Gauss200Parser::RuleAlter_type_add_attr_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2893);
    match(Gauss200Parser::ADD_GS);
    setState(2894);
    match(Gauss200Parser::ATTRIBUTE_GS);
    setState(2895);
    attr_name();
    setState(2896);
    typename_gs();
    setState(2898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::COLLATE_GS) {
      setState(2897);
      collate_option();
    }
    setState(2901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(2900);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_type_drop_attr_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_type_drop_attr_optionContext::Alter_type_drop_attr_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_type_drop_attr_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_drop_attr_optionContext::ATTRIBUTE_GS() {
  return getToken(Gauss200Parser::ATTRIBUTE_GS, 0);
}

Gauss200Parser::Attr_nameContext* Gauss200Parser::Alter_type_drop_attr_optionContext::attr_name() {
  return getRuleContext<Gauss200Parser::Attr_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_type_drop_attr_optionContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Alter_type_drop_attr_optionContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Alter_type_drop_attr_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_type_drop_attr_option;
}

void Gauss200Parser::Alter_type_drop_attr_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_type_drop_attr_option(this);
}

void Gauss200Parser::Alter_type_drop_attr_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_type_drop_attr_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_type_drop_attr_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_type_drop_attr_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_type_drop_attr_optionContext* Gauss200Parser::alter_type_drop_attr_option() {
  Alter_type_drop_attr_optionContext *_localctx = _tracker.createInstance<Alter_type_drop_attr_optionContext>(_ctx, getState());
  enterRule(_localctx, 402, Gauss200Parser::RuleAlter_type_drop_attr_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2903);
    match(Gauss200Parser::DROP_GS);
    setState(2904);
    match(Gauss200Parser::ATTRIBUTE_GS);
    setState(2906);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      setState(2905);
      if_exists_or_not();
      break;
    }

    }
    setState(2908);
    attr_name();
    setState(2910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(2909);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_type_alter_attrContext ------------------------------------------------------------------

Gauss200Parser::Alter_type_alter_attrContext::Alter_type_alter_attrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_type_alter_attrContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_alter_attrContext::ATTRIBUTE_GS() {
  return getToken(Gauss200Parser::ATTRIBUTE_GS, 0);
}

Gauss200Parser::Attr_nameContext* Gauss200Parser::Alter_type_alter_attrContext::attr_name() {
  return getRuleContext<Gauss200Parser::Attr_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_alter_attrContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Alter_type_alter_attrContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_alter_attrContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_type_alter_attrContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

Gauss200Parser::Collate_optionContext* Gauss200Parser::Alter_type_alter_attrContext::collate_option() {
  return getRuleContext<Gauss200Parser::Collate_optionContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Alter_type_alter_attrContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Alter_type_alter_attrContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_type_alter_attr;
}

void Gauss200Parser::Alter_type_alter_attrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_type_alter_attr(this);
}

void Gauss200Parser::Alter_type_alter_attrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_type_alter_attr(this);
}


antlrcpp::Any Gauss200Parser::Alter_type_alter_attrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_type_alter_attr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_type_alter_attrContext* Gauss200Parser::alter_type_alter_attr() {
  Alter_type_alter_attrContext *_localctx = _tracker.createInstance<Alter_type_alter_attrContext>(_ctx, getState());
  enterRule(_localctx, 404, Gauss200Parser::RuleAlter_type_alter_attr);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2912);
    match(Gauss200Parser::ALTER_GS);
    setState(2913);
    match(Gauss200Parser::ATTRIBUTE_GS);
    setState(2914);
    attr_name();
    setState(2917);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::SET_GS) {
      setState(2915);
      match(Gauss200Parser::SET_GS);
      setState(2916);
      match(Gauss200Parser::DATA_GS);
    }
    setState(2919);
    match(Gauss200Parser::TYPE_GS);
    setState(2920);
    typename_gs();
    setState(2922);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::COLLATE_GS) {
      setState(2921);
      collate_option();
    }
    setState(2925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(2924);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_user_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_user_stmtContext::Alter_user_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_user_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_user_stmtContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

Gauss200Parser::User_nameContext* Gauss200Parser::Alter_user_stmtContext::user_name() {
  return getRuleContext<Gauss200Parser::User_nameContext>(0);
}

Gauss200Parser::Alter_user_clauseContext* Gauss200Parser::Alter_user_stmtContext::alter_user_clause() {
  return getRuleContext<Gauss200Parser::Alter_user_clauseContext>(0);
}


size_t Gauss200Parser::Alter_user_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_user_stmt;
}

void Gauss200Parser::Alter_user_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_user_stmt(this);
}

void Gauss200Parser::Alter_user_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_user_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_user_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_user_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_user_stmtContext* Gauss200Parser::alter_user_stmt() {
  Alter_user_stmtContext *_localctx = _tracker.createInstance<Alter_user_stmtContext>(_ctx, getState());
  enterRule(_localctx, 406, Gauss200Parser::RuleAlter_user_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2927);
    match(Gauss200Parser::ALTER_GS);
    setState(2928);
    match(Gauss200Parser::USER_GS);
    setState(2929);
    user_name();
    setState(2930);
    alter_user_clause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_user_clauseContext ------------------------------------------------------------------

Gauss200Parser::Alter_user_clauseContext::Alter_user_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_user_clauseContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::Alter_role_with_optionContext *> Gauss200Parser::Alter_user_clauseContext::alter_role_with_option() {
  return getRuleContexts<Gauss200Parser::Alter_role_with_optionContext>();
}

Gauss200Parser::Alter_role_with_optionContext* Gauss200Parser::Alter_user_clauseContext::alter_role_with_option(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_role_with_optionContext>(i);
}

Gauss200Parser::Rename_to_optionContext* Gauss200Parser::Alter_user_clauseContext::rename_to_option() {
  return getRuleContext<Gauss200Parser::Rename_to_optionContext>(0);
}

Gauss200Parser::Set_configuration_paramContext* Gauss200Parser::Alter_user_clauseContext::set_configuration_param() {
  return getRuleContext<Gauss200Parser::Set_configuration_paramContext>(0);
}

Gauss200Parser::Reset_configuration_paramContext* Gauss200Parser::Alter_user_clauseContext::reset_configuration_param() {
  return getRuleContext<Gauss200Parser::Reset_configuration_paramContext>(0);
}


size_t Gauss200Parser::Alter_user_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_user_clause;
}

void Gauss200Parser::Alter_user_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_user_clause(this);
}

void Gauss200Parser::Alter_user_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_user_clause(this);
}


antlrcpp::Any Gauss200Parser::Alter_user_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_user_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_user_clauseContext* Gauss200Parser::alter_user_clause() {
  Alter_user_clauseContext *_localctx = _tracker.createInstance<Alter_user_clauseContext>(_ctx, getState());
  enterRule(_localctx, 408, Gauss200Parser::RuleAlter_user_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2944);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::EOF:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::CREATEDB_GS:
      case Gauss200Parser::NOCREATEDB_GS:
      case Gauss200Parser::CREATEROLE_GS:
      case Gauss200Parser::NOCREATEROLE_GS:
      case Gauss200Parser::NOINHERIT_GS:
      case Gauss200Parser::AUDITADMIN_GS:
      case Gauss200Parser::NOAUDITADMIN_GS:
      case Gauss200Parser::SYSADMIN_GS:
      case Gauss200Parser::NOSYSADMIN_GS:
      case Gauss200Parser::USEFT_GS:
      case Gauss200Parser::NOUSEFT_GS:
      case Gauss200Parser::REPLICATION_GS:
      case Gauss200Parser::NOREPLICATION_GS:
      case Gauss200Parser::INDEPENDENT_GS:
      case Gauss200Parser::NOINDEPENDENT_GS:
      case Gauss200Parser::VCADMIN_GS:
      case Gauss200Parser::NOVCADMIN_GS:
      case Gauss200Parser::PERM_GS:
      case Gauss200Parser::PGUSER_GS:
      case Gauss200Parser::SEMICOLON: {
        enterOuterAlt(_localctx, 1);
        setState(2933);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::WITH_GS) {
          setState(2932);
          match(Gauss200Parser::WITH_GS);
        }
        setState(2938);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::USER_GS

        || _la == Gauss200Parser::ACCOUNT_GS || _la == Gauss200Parser::CONNECTION_GS

        || _la == Gauss200Parser::ENCRYPTED_GS || ((((_la - 229) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 229)) & ((1ULL << (Gauss200Parser::IDENTIFIED_GS - 229))
          | (1ULL << (Gauss200Parser::INHERIT_GS - 229))
          | (1ULL << (Gauss200Parser::LOGIN_GS - 229))
          | (1ULL << (Gauss200Parser::NODE_GS - 229))
          | (1ULL << (Gauss200Parser::NOLOGIN_GS - 229)))) != 0) || _la == Gauss200Parser::PASSWORD_GS

        || _la == Gauss200Parser::RESOURCE_GS || _la == Gauss200Parser::UNENCRYPTED_GS

        || _la == Gauss200Parser::VALID_GS || ((((_la - 549) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 549)) & ((1ULL << (Gauss200Parser::CREATEDB_GS - 549))
          | (1ULL << (Gauss200Parser::NOCREATEDB_GS - 549))
          | (1ULL << (Gauss200Parser::CREATEROLE_GS - 549))
          | (1ULL << (Gauss200Parser::NOCREATEROLE_GS - 549))
          | (1ULL << (Gauss200Parser::NOINHERIT_GS - 549))
          | (1ULL << (Gauss200Parser::AUDITADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::NOAUDITADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::SYSADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::NOSYSADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::USEFT_GS - 549))
          | (1ULL << (Gauss200Parser::NOUSEFT_GS - 549))
          | (1ULL << (Gauss200Parser::REPLICATION_GS - 549))
          | (1ULL << (Gauss200Parser::NOREPLICATION_GS - 549))
          | (1ULL << (Gauss200Parser::INDEPENDENT_GS - 549))
          | (1ULL << (Gauss200Parser::NOINDEPENDENT_GS - 549))
          | (1ULL << (Gauss200Parser::VCADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::NOVCADMIN_GS - 549))
          | (1ULL << (Gauss200Parser::PERM_GS - 549))
          | (1ULL << (Gauss200Parser::PGUSER_GS - 549)))) != 0)) {
          setState(2935);
          alter_role_with_option();
          setState(2940);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case Gauss200Parser::RENAME_GS: {
        enterOuterAlt(_localctx, 2);
        setState(2941);
        rename_to_option();
        break;
      }

      case Gauss200Parser::SET_GS: {
        enterOuterAlt(_localctx, 3);
        setState(2942);
        set_configuration_param();
        break;
      }

      case Gauss200Parser::RESET_GS: {
        enterOuterAlt(_localctx, 4);
        setState(2943);
        reset_configuration_param();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_view_stmtContext ------------------------------------------------------------------

Gauss200Parser::Alter_view_stmtContext::Alter_view_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_view_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_view_stmtContext::VIEW_GS() {
  return getToken(Gauss200Parser::VIEW_GS, 0);
}

Gauss200Parser::View_nameContext* Gauss200Parser::Alter_view_stmtContext::view_name() {
  return getRuleContext<Gauss200Parser::View_nameContext>(0);
}

Gauss200Parser::Alter_view_optionContext* Gauss200Parser::Alter_view_stmtContext::alter_view_option() {
  return getRuleContext<Gauss200Parser::Alter_view_optionContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Alter_view_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Alter_view_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_view_stmt;
}

void Gauss200Parser::Alter_view_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_view_stmt(this);
}

void Gauss200Parser::Alter_view_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_view_stmt(this);
}


antlrcpp::Any Gauss200Parser::Alter_view_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_view_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_view_stmtContext* Gauss200Parser::alter_view_stmt() {
  Alter_view_stmtContext *_localctx = _tracker.createInstance<Alter_view_stmtContext>(_ctx, getState());
  enterRule(_localctx, 410, Gauss200Parser::RuleAlter_view_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2946);
    match(Gauss200Parser::ALTER_GS);
    setState(2947);
    match(Gauss200Parser::VIEW_GS);
    setState(2949);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      setState(2948);
      if_exists_or_not();
      break;
    }

    }
    setState(2951);
    view_name();
    setState(2952);
    alter_view_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_nameContext ------------------------------------------------------------------

Gauss200Parser::View_nameContext::View_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::View_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::View_nameContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::View_nameContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::View_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleView_name;
}

void Gauss200Parser::View_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_name(this);
}

void Gauss200Parser::View_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_name(this);
}


antlrcpp::Any Gauss200Parser::View_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitView_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::View_nameContext* Gauss200Parser::view_name() {
  View_nameContext *_localctx = _tracker.createInstance<View_nameContext>(_ctx, getState());
  enterRule(_localctx, 412, Gauss200Parser::RuleView_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2954);
    identifier();
    setState(2958);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::PERIOD) {
      setState(2955);
      attr();
      setState(2960);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_view_optionContext ------------------------------------------------------------------

Gauss200Parser::Alter_view_optionContext::Alter_view_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Alter_view_optionContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Alter_view_optionContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_view_optionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_view_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Alter_view_optionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alter_view_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Alter_view_optionContext::COLUMN_GS() {
  return getToken(Gauss200Parser::COLUMN_GS, 0);
}

Gauss200Parser::Rename_owner_to_optionContext* Gauss200Parser::Alter_view_optionContext::rename_owner_to_option() {
  return getRuleContext<Gauss200Parser::Rename_owner_to_optionContext>(0);
}

Gauss200Parser::Alter_set_schemaContext* Gauss200Parser::Alter_view_optionContext::alter_set_schema() {
  return getRuleContext<Gauss200Parser::Alter_set_schemaContext>(0);
}

Gauss200Parser::Set_assignment_listContext* Gauss200Parser::Alter_view_optionContext::set_assignment_list() {
  return getRuleContext<Gauss200Parser::Set_assignment_listContext>(0);
}

Gauss200Parser::Reset_param_listContext* Gauss200Parser::Alter_view_optionContext::reset_param_list() {
  return getRuleContext<Gauss200Parser::Reset_param_listContext>(0);
}


size_t Gauss200Parser::Alter_view_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlter_view_option;
}

void Gauss200Parser::Alter_view_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_view_option(this);
}

void Gauss200Parser::Alter_view_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_view_option(this);
}


antlrcpp::Any Gauss200Parser::Alter_view_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlter_view_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alter_view_optionContext* Gauss200Parser::alter_view_option() {
  Alter_view_optionContext *_localctx = _tracker.createInstance<Alter_view_optionContext>(_ctx, getState());
  enterRule(_localctx, 414, Gauss200Parser::RuleAlter_view_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2977);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2961);
      match(Gauss200Parser::ALTER_GS);
      setState(2963);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
      case 1: {
        setState(2962);
        match(Gauss200Parser::COLUMN_GS);
        break;
      }

      }
      setState(2965);
      column_name();
      setState(2971);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::SET_GS: {
          setState(2966);
          match(Gauss200Parser::SET_GS);
          setState(2967);
          match(Gauss200Parser::DEFAULT_GS);
          setState(2968);
          expression();
          break;
        }

        case Gauss200Parser::DROP_GS: {
          setState(2969);
          match(Gauss200Parser::DROP_GS);
          setState(2970);
          match(Gauss200Parser::DEFAULT_GS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2973);
      rename_owner_to_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2974);
      alter_set_schema();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2975);
      set_assignment_list();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2976);
      reset_param_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Workload_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Workload_group_stmtContext::Workload_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::WORKLOAD_GS() {
  return getToken(Gauss200Parser::WORKLOAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Workload_group_stmtContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::RESOURCE_GS() {
  return getToken(Gauss200Parser::RESOURCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::POOL_GS() {
  return getToken(Gauss200Parser::POOL_GS, 0);
}

Gauss200Parser::Pool_nameContext* Gauss200Parser::Workload_group_stmtContext::pool_name() {
  return getRuleContext<Gauss200Parser::Pool_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::Workload_group_stmtContext::assignment_stmt() {
  return getRuleContext<Gauss200Parser::Assignment_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Workload_group_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Workload_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleWorkload_group_stmt;
}

void Gauss200Parser::Workload_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWorkload_group_stmt(this);
}

void Gauss200Parser::Workload_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWorkload_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Workload_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWorkload_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Workload_group_stmtContext* Gauss200Parser::workload_group_stmt() {
  Workload_group_stmtContext *_localctx = _tracker.createInstance<Workload_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 416, Gauss200Parser::RuleWorkload_group_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2979);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::CREATE_GS || _la == Gauss200Parser::ALTER_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2980);
    match(Gauss200Parser::WORKLOAD_GS);
    setState(2981);
    match(Gauss200Parser::GROUP_GS);
    setState(2982);
    group_name();
    setState(2994);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::USING_GS) {
      setState(2983);
      match(Gauss200Parser::USING_GS);
      setState(2984);
      match(Gauss200Parser::RESOURCE_GS);
      setState(2985);
      match(Gauss200Parser::POOL_GS);
      setState(2986);
      pool_name();
      setState(2992);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(2987);
        match(Gauss200Parser::WITH_GS);
        setState(2988);
        match(Gauss200Parser::LEFT_PAREN);
        setState(2989);
        assignment_stmt();
        setState(2990);
        match(Gauss200Parser::RIGHT_PAREN);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_group_mapping_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_group_mapping_stmtContext::Create_group_mapping_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::APP_GS() {
  return getToken(Gauss200Parser::APP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::WORKLOAD_GS() {
  return getToken(Gauss200Parser::WORKLOAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::MAPPING_GS() {
  return getToken(Gauss200Parser::MAPPING_GS, 0);
}

Gauss200Parser::App_nameContext* Gauss200Parser::Create_group_mapping_stmtContext::app_name() {
  return getRuleContext<Gauss200Parser::App_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::Create_group_mapping_stmtContext::assignment_stmt() {
  return getRuleContext<Gauss200Parser::Assignment_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_group_mapping_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Create_group_mapping_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_group_mapping_stmt;
}

void Gauss200Parser::Create_group_mapping_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_group_mapping_stmt(this);
}

void Gauss200Parser::Create_group_mapping_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_group_mapping_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_group_mapping_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_group_mapping_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_group_mapping_stmtContext* Gauss200Parser::create_group_mapping_stmt() {
  Create_group_mapping_stmtContext *_localctx = _tracker.createInstance<Create_group_mapping_stmtContext>(_ctx, getState());
  enterRule(_localctx, 418, Gauss200Parser::RuleCreate_group_mapping_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2996);
    match(Gauss200Parser::CREATE_GS);
    setState(2997);
    match(Gauss200Parser::APP_GS);
    setState(2998);
    match(Gauss200Parser::WORKLOAD_GS);
    setState(2999);
    match(Gauss200Parser::GROUP_GS);
    setState(3000);
    match(Gauss200Parser::MAPPING_GS);
    setState(3001);
    app_name();
    setState(3007);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3002);
      match(Gauss200Parser::WITH_GS);
      setState(3003);
      match(Gauss200Parser::LEFT_PAREN);
      setState(3004);
      assignment_stmt();
      setState(3005);
      match(Gauss200Parser::RIGHT_PAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_barrier_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_barrier_stmtContext::Create_barrier_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_barrier_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_barrier_stmtContext::BARRIER_GS() {
  return getToken(Gauss200Parser::BARRIER_GS, 0);
}

Gauss200Parser::Barrier_nameContext* Gauss200Parser::Create_barrier_stmtContext::barrier_name() {
  return getRuleContext<Gauss200Parser::Barrier_nameContext>(0);
}


size_t Gauss200Parser::Create_barrier_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_barrier_stmt;
}

void Gauss200Parser::Create_barrier_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_barrier_stmt(this);
}

void Gauss200Parser::Create_barrier_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_barrier_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_barrier_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_barrier_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_barrier_stmtContext* Gauss200Parser::create_barrier_stmt() {
  Create_barrier_stmtContext *_localctx = _tracker.createInstance<Create_barrier_stmtContext>(_ctx, getState());
  enterRule(_localctx, 420, Gauss200Parser::RuleCreate_barrier_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3009);
    match(Gauss200Parser::CREATE_GS);
    setState(3010);
    match(Gauss200Parser::BARRIER_GS);
    setState(3012);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(3011);
      barrier_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Barrier_nameContext ------------------------------------------------------------------

Gauss200Parser::Barrier_nameContext::Barrier_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Barrier_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Barrier_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleBarrier_name;
}

void Gauss200Parser::Barrier_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBarrier_name(this);
}

void Gauss200Parser::Barrier_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBarrier_name(this);
}


antlrcpp::Any Gauss200Parser::Barrier_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitBarrier_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Barrier_nameContext* Gauss200Parser::barrier_name() {
  Barrier_nameContext *_localctx = _tracker.createInstance<Barrier_nameContext>(_ctx, getState());
  enterRule(_localctx, 422, Gauss200Parser::RuleBarrier_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3014);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_database_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_database_stmtContext::Create_database_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_database_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_database_stmtContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

Gauss200Parser::Database_nameContext* Gauss200Parser::Create_database_stmtContext::database_name() {
  return getRuleContext<Gauss200Parser::Database_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_database_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::Assignment_stmtContext *> Gauss200Parser::Create_database_stmtContext::assignment_stmt() {
  return getRuleContexts<Gauss200Parser::Assignment_stmtContext>();
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::Create_database_stmtContext::assignment_stmt(size_t i) {
  return getRuleContext<Gauss200Parser::Assignment_stmtContext>(i);
}


size_t Gauss200Parser::Create_database_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_database_stmt;
}

void Gauss200Parser::Create_database_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_database_stmt(this);
}

void Gauss200Parser::Create_database_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_database_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_database_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_database_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_database_stmtContext* Gauss200Parser::create_database_stmt() {
  Create_database_stmtContext *_localctx = _tracker.createInstance<Create_database_stmtContext>(_ctx, getState());
  enterRule(_localctx, 424, Gauss200Parser::RuleCreate_database_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3016);
    match(Gauss200Parser::CREATE_GS);
    setState(3017);
    match(Gauss200Parser::DATABASE_GS);
    setState(3018);
    database_name();
    setState(3027);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
    case 1: {
      setState(3020);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
      case 1: {
        setState(3019);
        match(Gauss200Parser::WITH_GS);
        break;
      }

      }
      setState(3023); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3022);
                assignment_stmt();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3025); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_data_source_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_data_source_stmtContext::Create_data_source_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_data_source_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_data_source_stmtContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_data_source_stmtContext::SOURCE_GS() {
  return getToken(Gauss200Parser::SOURCE_GS, 0);
}

Gauss200Parser::Src_nameContext* Gauss200Parser::Create_data_source_stmtContext::src_name() {
  return getRuleContext<Gauss200Parser::Src_nameContext>(0);
}

std::vector<Gauss200Parser::Data_src_type_version_optionContext *> Gauss200Parser::Create_data_source_stmtContext::data_src_type_version_option() {
  return getRuleContexts<Gauss200Parser::Data_src_type_version_optionContext>();
}

Gauss200Parser::Data_src_type_version_optionContext* Gauss200Parser::Create_data_source_stmtContext::data_src_type_version_option(size_t i) {
  return getRuleContext<Gauss200Parser::Data_src_type_version_optionContext>(i);
}


size_t Gauss200Parser::Create_data_source_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_data_source_stmt;
}

void Gauss200Parser::Create_data_source_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_data_source_stmt(this);
}

void Gauss200Parser::Create_data_source_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_data_source_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_data_source_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_data_source_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_data_source_stmtContext* Gauss200Parser::create_data_source_stmt() {
  Create_data_source_stmtContext *_localctx = _tracker.createInstance<Create_data_source_stmtContext>(_ctx, getState());
  enterRule(_localctx, 426, Gauss200Parser::RuleCreate_data_source_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3029);
    match(Gauss200Parser::CREATE_GS);
    setState(3030);
    match(Gauss200Parser::DATA_GS);
    setState(3031);
    match(Gauss200Parser::SOURCE_GS);
    setState(3032);
    src_name();
    setState(3036);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::OPTIONS_GS || _la == Gauss200Parser::TYPE_GS

    || _la == Gauss200Parser::VERSION_GS) {
      setState(3033);
      data_src_type_version_option();
      setState(3038);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_directory_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_directory_stmtContext::Create_directory_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_directory_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_directory_stmtContext::DIRECTORY_GS() {
  return getToken(Gauss200Parser::DIRECTORY_GS, 0);
}

Gauss200Parser::Directory_nameContext* Gauss200Parser::Create_directory_stmtContext::directory_name() {
  return getRuleContext<Gauss200Parser::Directory_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_directory_stmtContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_directory_stmtContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

Gauss200Parser::Or_replaceContext* Gauss200Parser::Create_directory_stmtContext::or_replace() {
  return getRuleContext<Gauss200Parser::Or_replaceContext>(0);
}


size_t Gauss200Parser::Create_directory_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_directory_stmt;
}

void Gauss200Parser::Create_directory_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_directory_stmt(this);
}

void Gauss200Parser::Create_directory_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_directory_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_directory_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_directory_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_directory_stmtContext* Gauss200Parser::create_directory_stmt() {
  Create_directory_stmtContext *_localctx = _tracker.createInstance<Create_directory_stmtContext>(_ctx, getState());
  enterRule(_localctx, 428, Gauss200Parser::RuleCreate_directory_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3039);
    match(Gauss200Parser::CREATE_GS);
    setState(3041);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::OR_GS) {
      setState(3040);
      or_replace();
    }
    setState(3043);
    match(Gauss200Parser::DIRECTORY_GS);
    setState(3044);
    directory_name();
    setState(3045);
    match(Gauss200Parser::AS_GS);
    setState(3046);
    match(Gauss200Parser::CHAR_STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Or_replaceContext ------------------------------------------------------------------

Gauss200Parser::Or_replaceContext::Or_replaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Or_replaceContext::OR_GS() {
  return getToken(Gauss200Parser::OR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Or_replaceContext::REPLACE_GS() {
  return getToken(Gauss200Parser::REPLACE_GS, 0);
}


size_t Gauss200Parser::Or_replaceContext::getRuleIndex() const {
  return Gauss200Parser::RuleOr_replace;
}

void Gauss200Parser::Or_replaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOr_replace(this);
}

void Gauss200Parser::Or_replaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOr_replace(this);
}


antlrcpp::Any Gauss200Parser::Or_replaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOr_replace(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Or_replaceContext* Gauss200Parser::or_replace() {
  Or_replaceContext *_localctx = _tracker.createInstance<Or_replaceContext>(_ctx, getState());
  enterRule(_localctx, 430, Gauss200Parser::RuleOr_replace);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3048);
    match(Gauss200Parser::OR_GS);
    setState(3049);
    match(Gauss200Parser::REPLACE_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_foreign_table_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_foreign_table_stmtContext::Create_foreign_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_stmtContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_foreign_table_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Create_foreign_table_optionContext* Gauss200Parser::Create_foreign_table_stmtContext::create_foreign_table_option() {
  return getRuleContext<Gauss200Parser::Create_foreign_table_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_stmtContext::IF_GS() {
  return getToken(Gauss200Parser::IF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_stmtContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_stmtContext::EXISTS_GS() {
  return getToken(Gauss200Parser::EXISTS_GS, 0);
}


size_t Gauss200Parser::Create_foreign_table_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_foreign_table_stmt;
}

void Gauss200Parser::Create_foreign_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_foreign_table_stmt(this);
}

void Gauss200Parser::Create_foreign_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_foreign_table_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_foreign_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_foreign_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_foreign_table_stmtContext* Gauss200Parser::create_foreign_table_stmt() {
  Create_foreign_table_stmtContext *_localctx = _tracker.createInstance<Create_foreign_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 432, Gauss200Parser::RuleCreate_foreign_table_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3051);
    match(Gauss200Parser::CREATE_GS);
    setState(3052);
    match(Gauss200Parser::FOREIGN_GS);
    setState(3053);
    match(Gauss200Parser::TABLE_GS);
    setState(3057);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
    case 1: {
      setState(3054);
      match(Gauss200Parser::IF_GS);
      setState(3055);
      match(Gauss200Parser::NOT_GS);
      setState(3056);
      match(Gauss200Parser::EXISTS_GS);
      break;
    }

    }
    setState(3059);
    table_name();
    setState(3060);
    create_foreign_table_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_foreign_table_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_foreign_table_optionContext::Create_foreign_table_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Create_foreign_table_import_export_optionContext* Gauss200Parser::Create_foreign_table_optionContext::create_foreign_table_import_export_option() {
  return getRuleContext<Gauss200Parser::Create_foreign_table_import_export_optionContext>(0);
}

Gauss200Parser::Create_foreign_table_on_hadoop_optionContext* Gauss200Parser::Create_foreign_table_optionContext::create_foreign_table_on_hadoop_option() {
  return getRuleContext<Gauss200Parser::Create_foreign_table_on_hadoop_optionContext>(0);
}


size_t Gauss200Parser::Create_foreign_table_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_foreign_table_option;
}

void Gauss200Parser::Create_foreign_table_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_foreign_table_option(this);
}

void Gauss200Parser::Create_foreign_table_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_foreign_table_option(this);
}


antlrcpp::Any Gauss200Parser::Create_foreign_table_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_foreign_table_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_foreign_table_optionContext* Gauss200Parser::create_foreign_table_option() {
  Create_foreign_table_optionContext *_localctx = _tracker.createInstance<Create_foreign_table_optionContext>(_ctx, getState());
  enterRule(_localctx, 434, Gauss200Parser::RuleCreate_foreign_table_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3064);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3062);
      create_foreign_table_import_export_option();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3063);
      create_foreign_table_on_hadoop_option();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_foreign_table_import_export_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_foreign_table_import_export_optionContext::Create_foreign_table_import_export_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Foreign_table_import_export_column_type_listContext* Gauss200Parser::Create_foreign_table_import_export_optionContext::foreign_table_import_export_column_type_list() {
  return getRuleContext<Gauss200Parser::Foreign_table_import_export_column_type_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

Gauss200Parser::Server_nameContext* Gauss200Parser::Create_foreign_table_import_export_optionContext::server_name() {
  return getRuleContext<Gauss200Parser::Server_nameContext>(0);
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::Create_foreign_table_import_export_optionContext::alter_property_options() {
  return getRuleContext<Gauss200Parser::Alter_property_optionsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_foreign_table_import_export_optionContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::REMOTE_GS() {
  return getToken(Gauss200Parser::REMOTE_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_foreign_table_import_export_optionContext::LOG_GS() {
  return getTokens(Gauss200Parser::LOG_GS);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::LOG_GS(size_t i) {
  return getToken(Gauss200Parser::LOG_GS, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_foreign_table_import_export_optionContext::CHAR_STRING() {
  return getTokens(Gauss200Parser::CHAR_STRING);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::CHAR_STRING(size_t i) {
  return getToken(Gauss200Parser::CHAR_STRING, i);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::PER_GS() {
  return getToken(Gauss200Parser::PER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::REJECT_GS() {
  return getToken(Gauss200Parser::REJECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::LIMIT_GS() {
  return getToken(Gauss200Parser::LIMIT_GS, 0);
}

Gauss200Parser::Table_constraint_to_group_nodeContext* Gauss200Parser::Create_foreign_table_import_export_optionContext::table_constraint_to_group_node() {
  return getRuleContext<Gauss200Parser::Table_constraint_to_group_nodeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::WRITE_GS() {
  return getToken(Gauss200Parser::WRITE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::READ_GS() {
  return getToken(Gauss200Parser::READ_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_import_export_optionContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}


size_t Gauss200Parser::Create_foreign_table_import_export_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_foreign_table_import_export_option;
}

void Gauss200Parser::Create_foreign_table_import_export_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_foreign_table_import_export_option(this);
}

void Gauss200Parser::Create_foreign_table_import_export_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_foreign_table_import_export_option(this);
}


antlrcpp::Any Gauss200Parser::Create_foreign_table_import_export_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_foreign_table_import_export_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_foreign_table_import_export_optionContext* Gauss200Parser::create_foreign_table_import_export_option() {
  Create_foreign_table_import_export_optionContext *_localctx = _tracker.createInstance<Create_foreign_table_import_export_optionContext>(_ctx, getState());
  enterRule(_localctx, 436, Gauss200Parser::RuleCreate_foreign_table_import_export_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3066);
    match(Gauss200Parser::LEFT_PAREN);
    setState(3067);
    foreign_table_import_export_column_type_list();
    setState(3068);
    match(Gauss200Parser::RIGHT_PAREN);
    setState(3069);
    match(Gauss200Parser::SERVER_GS);
    setState(3070);
    server_name();
    setState(3071);
    alter_property_options();
    setState(3074);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::READ_GS || _la == Gauss200Parser::WRITE_GS) {
      setState(3072);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::READ_GS || _la == Gauss200Parser::WRITE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3073);
      match(Gauss200Parser::ONLY_GS);
    }
    setState(3082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS || _la == Gauss200Parser::LOG_GS) {
      setState(3079);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::WITH_GS: {
          setState(3076);
          match(Gauss200Parser::WITH_GS);
          break;
        }

        case Gauss200Parser::LOG_GS: {
          setState(3077);
          match(Gauss200Parser::LOG_GS);
          setState(3078);
          match(Gauss200Parser::INTO_GS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3081);
      table_name();
    }
    setState(3087);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::REMOTE_GS) {
      setState(3084);
      match(Gauss200Parser::REMOTE_GS);
      setState(3085);
      match(Gauss200Parser::LOG_GS);
      setState(3086);
      match(Gauss200Parser::CHAR_STRING);
    }
    setState(3094);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::PER_GS) {
      setState(3089);
      match(Gauss200Parser::PER_GS);
      setState(3090);
      match(Gauss200Parser::NODE_GS);
      setState(3091);
      match(Gauss200Parser::REJECT_GS);
      setState(3092);
      match(Gauss200Parser::LIMIT_GS);
      setState(3093);
      match(Gauss200Parser::CHAR_STRING);
    }
    setState(3097);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TO_GS) {
      setState(3096);
      table_constraint_to_group_node();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Foreign_table_import_export_column_type_listContext ------------------------------------------------------------------

Gauss200Parser::Foreign_table_import_export_column_type_listContext::Foreign_table_import_export_column_type_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Foreign_table_import_export_column_typeContext *> Gauss200Parser::Foreign_table_import_export_column_type_listContext::foreign_table_import_export_column_type() {
  return getRuleContexts<Gauss200Parser::Foreign_table_import_export_column_typeContext>();
}

Gauss200Parser::Foreign_table_import_export_column_typeContext* Gauss200Parser::Foreign_table_import_export_column_type_listContext::foreign_table_import_export_column_type(size_t i) {
  return getRuleContext<Gauss200Parser::Foreign_table_import_export_column_typeContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Foreign_table_import_export_column_type_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_import_export_column_type_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Foreign_table_import_export_column_type_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleForeign_table_import_export_column_type_list;
}

void Gauss200Parser::Foreign_table_import_export_column_type_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForeign_table_import_export_column_type_list(this);
}

void Gauss200Parser::Foreign_table_import_export_column_type_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForeign_table_import_export_column_type_list(this);
}


antlrcpp::Any Gauss200Parser::Foreign_table_import_export_column_type_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitForeign_table_import_export_column_type_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Foreign_table_import_export_column_type_listContext* Gauss200Parser::foreign_table_import_export_column_type_list() {
  Foreign_table_import_export_column_type_listContext *_localctx = _tracker.createInstance<Foreign_table_import_export_column_type_listContext>(_ctx, getState());
  enterRule(_localctx, 438, Gauss200Parser::RuleForeign_table_import_export_column_type_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3099);
    foreign_table_import_export_column_type();
    setState(3104);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(3100);
      match(Gauss200Parser::COMMA);
      setState(3101);
      foreign_table_import_export_column_type();
      setState(3106);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Foreign_table_import_export_column_typeContext ------------------------------------------------------------------

Gauss200Parser::Foreign_table_import_export_column_typeContext::Foreign_table_import_export_column_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_with_typeContext* Gauss200Parser::Foreign_table_import_export_column_typeContext::column_with_type() {
  return getRuleContext<Gauss200Parser::Column_with_typeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_import_export_column_typeContext::POSITION_GS() {
  return getToken(Gauss200Parser::POSITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_import_export_column_typeContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::NumericContext *> Gauss200Parser::Foreign_table_import_export_column_typeContext::numeric() {
  return getRuleContexts<Gauss200Parser::NumericContext>();
}

Gauss200Parser::NumericContext* Gauss200Parser::Foreign_table_import_export_column_typeContext::numeric(size_t i) {
  return getRuleContext<Gauss200Parser::NumericContext>(i);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_import_export_column_typeContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_import_export_column_typeContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_import_export_column_typeContext::LIKE_GS() {
  return getToken(Gauss200Parser::LIKE_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Foreign_table_import_export_column_typeContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}


size_t Gauss200Parser::Foreign_table_import_export_column_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleForeign_table_import_export_column_type;
}

void Gauss200Parser::Foreign_table_import_export_column_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForeign_table_import_export_column_type(this);
}

void Gauss200Parser::Foreign_table_import_export_column_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForeign_table_import_export_column_type(this);
}


antlrcpp::Any Gauss200Parser::Foreign_table_import_export_column_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitForeign_table_import_export_column_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Foreign_table_import_export_column_typeContext* Gauss200Parser::foreign_table_import_export_column_type() {
  Foreign_table_import_export_column_typeContext *_localctx = _tracker.createInstance<Foreign_table_import_export_column_typeContext>(_ctx, getState());
  enterRule(_localctx, 440, Gauss200Parser::RuleForeign_table_import_export_column_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3119);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::BETWEEN_GS:
      case Gauss200Parser::BIGINT_GS:
      case Gauss200Parser::BINARY_DOUBLE_GS:
      case Gauss200Parser::BINARY_INTEGER_GS:
      case Gauss200Parser::BIT_GS:
      case Gauss200Parser::BOOLEAN_GS:
      case Gauss200Parser::CHARACTER_GS:
      case Gauss200Parser::CHAR_GS:
      case Gauss200Parser::COALESCE_GS:
      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::DECIMAL_GS:
      case Gauss200Parser::DECODE_GS:
      case Gauss200Parser::DEC_GS:
      case Gauss200Parser::EXISTS_GS:
      case Gauss200Parser::EXTRACT_GS:
      case Gauss200Parser::FLOAT_GS:
      case Gauss200Parser::GREATEST_GS:
      case Gauss200Parser::INOUT_GS:
      case Gauss200Parser::INTEGER_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::INT_GS:
      case Gauss200Parser::LEAST_GS:
      case Gauss200Parser::NATIONAL_GS:
      case Gauss200Parser::NCHAR_GS:
      case Gauss200Parser::NONE_GS:
      case Gauss200Parser::NULLIF_GS:
      case Gauss200Parser::NUMBER_GS:
      case Gauss200Parser::NUMERIC_GS:
      case Gauss200Parser::NVARCHAR2_GS:
      case Gauss200Parser::NVL_GS:
      case Gauss200Parser::OUT_GS:
      case Gauss200Parser::OVERLAY_GS:
      case Gauss200Parser::POSITION_GS:
      case Gauss200Parser::PRECISION_GS:
      case Gauss200Parser::REAL_GS:
      case Gauss200Parser::ROW_GS:
      case Gauss200Parser::SETOF_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::SMALLINT_GS:
      case Gauss200Parser::SUBSTRING_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::TINYINT_GS:
      case Gauss200Parser::TREAT_GS:
      case Gauss200Parser::TRIM_GS:
      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::VARCHAR2_GS:
      case Gauss200Parser::VARCHAR_GS:
      case Gauss200Parser::XMLATTRIBUTES_GS:
      case Gauss200Parser::XMLCONCAT_GS:
      case Gauss200Parser::XMLELEMENT_GS:
      case Gauss200Parser::XMLEXISTS_GS:
      case Gauss200Parser::XMLFOREST_GS:
      case Gauss200Parser::XMLPARSE_GS:
      case Gauss200Parser::XMLPI_GS:
      case Gauss200Parser::XMLROOT_GS:
      case Gauss200Parser::XMLSERIALIZE_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::CHAR_STRING:
      case Gauss200Parser::REGULAR_ID:
      case Gauss200Parser::SCONST: {
        enterOuterAlt(_localctx, 1);
        setState(3107);
        column_with_type();
        setState(3115);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::POSITION_GS) {
          setState(3108);
          match(Gauss200Parser::POSITION_GS);
          setState(3109);
          match(Gauss200Parser::LEFT_PAREN);
          setState(3110);
          numeric();
          setState(3111);
          match(Gauss200Parser::COMMA);
          setState(3112);
          numeric();
          setState(3113);
          match(Gauss200Parser::RIGHT_PAREN);
        }
        break;
      }

      case Gauss200Parser::LIKE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3117);
        match(Gauss200Parser::LIKE_GS);
        setState(3118);
        table_name();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_constraint_to_group_nodeContext ------------------------------------------------------------------

Gauss200Parser::Table_constraint_to_group_nodeContext::Table_constraint_to_group_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Table_constraint_to_group_nodeContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_to_group_nodeContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Table_constraint_to_group_nodeContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Table_constraint_to_group_nodeContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Table_constraint_to_group_nodeContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}


size_t Gauss200Parser::Table_constraint_to_group_nodeContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_constraint_to_group_node;
}

void Gauss200Parser::Table_constraint_to_group_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_constraint_to_group_node(this);
}

void Gauss200Parser::Table_constraint_to_group_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_constraint_to_group_node(this);
}


antlrcpp::Any Gauss200Parser::Table_constraint_to_group_nodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_constraint_to_group_node(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_constraint_to_group_nodeContext* Gauss200Parser::table_constraint_to_group_node() {
  Table_constraint_to_group_nodeContext *_localctx = _tracker.createInstance<Table_constraint_to_group_nodeContext>(_ctx, getState());
  enterRule(_localctx, 442, Gauss200Parser::RuleTable_constraint_to_group_node);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3121);
    match(Gauss200Parser::TO_GS);
    setState(3126);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::GROUP_GS: {
        setState(3122);
        match(Gauss200Parser::GROUP_GS);
        setState(3123);
        group_name();
        break;
      }

      case Gauss200Parser::NODE_GS: {
        setState(3124);
        match(Gauss200Parser::NODE_GS);
        setState(3125);
        paren_node_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_foreign_table_on_hadoop_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::Create_foreign_table_on_hadoop_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::foreign_table_on_hadoop_column_type_list() {
  return getRuleContext<Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

Gauss200Parser::Server_nameContext* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::server_name() {
  return getRuleContext<Gauss200Parser::Server_nameContext>(0);
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::alter_property_options() {
  return getRuleContext<Gauss200Parser::Alter_property_optionsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::DISTRIBUTE_GS() {
  return getToken(Gauss200Parser::DISTRIBUTE_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::BY_GS() {
  return getTokens(Gauss200Parser::BY_GS);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::BY_GS(size_t i) {
  return getToken(Gauss200Parser::BY_GS, i);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::ROUNDROBIN_GS() {
  return getToken(Gauss200Parser::ROUNDROBIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::REPLICATION_GS() {
  return getToken(Gauss200Parser::REPLICATION_GS, 0);
}

Gauss200Parser::Table_constraint_to_group_nodeContext* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::table_constraint_to_group_node() {
  return getRuleContext<Gauss200Parser::Table_constraint_to_group_nodeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::AUTOMAPPED_GS() {
  return getToken(Gauss200Parser::AUTOMAPPED_GS, 0);
}


size_t Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_foreign_table_on_hadoop_option;
}

void Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_foreign_table_on_hadoop_option(this);
}

void Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_foreign_table_on_hadoop_option(this);
}


antlrcpp::Any Gauss200Parser::Create_foreign_table_on_hadoop_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_foreign_table_on_hadoop_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_foreign_table_on_hadoop_optionContext* Gauss200Parser::create_foreign_table_on_hadoop_option() {
  Create_foreign_table_on_hadoop_optionContext *_localctx = _tracker.createInstance<Create_foreign_table_on_hadoop_optionContext>(_ctx, getState());
  enterRule(_localctx, 444, Gauss200Parser::RuleCreate_foreign_table_on_hadoop_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3128);
    match(Gauss200Parser::LEFT_PAREN);
    setState(3129);
    foreign_table_on_hadoop_column_type_list();
    setState(3130);
    match(Gauss200Parser::RIGHT_PAREN);
    setState(3131);
    match(Gauss200Parser::SERVER_GS);
    setState(3132);
    server_name();
    setState(3133);
    alter_property_options();
    setState(3134);
    match(Gauss200Parser::DISTRIBUTE_GS);
    setState(3135);
    match(Gauss200Parser::BY_GS);
    setState(3136);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::REPLICATION_GS

    || _la == Gauss200Parser::ROUNDROBIN_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3138);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TO_GS) {
      setState(3137);
      table_constraint_to_group_node();
    }
    setState(3146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::PARTITION_GS) {
      setState(3140);
      match(Gauss200Parser::PARTITION_GS);
      setState(3141);
      match(Gauss200Parser::BY_GS);
      setState(3142);
      paren_column_list();
      setState(3144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::AUTOMAPPED_GS) {
        setState(3143);
        match(Gauss200Parser::AUTOMAPPED_GS);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Foreign_table_on_hadoop_column_type_listContext ------------------------------------------------------------------

Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::Foreign_table_on_hadoop_column_type_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Foreign_table_on_hadoop_column_typeContext *> Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::foreign_table_on_hadoop_column_type() {
  return getRuleContexts<Gauss200Parser::Foreign_table_on_hadoop_column_typeContext>();
}

Gauss200Parser::Foreign_table_on_hadoop_column_typeContext* Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::foreign_table_on_hadoop_column_type(size_t i) {
  return getRuleContext<Gauss200Parser::Foreign_table_on_hadoop_column_typeContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleForeign_table_on_hadoop_column_type_list;
}

void Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForeign_table_on_hadoop_column_type_list(this);
}

void Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForeign_table_on_hadoop_column_type_list(this);
}


antlrcpp::Any Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitForeign_table_on_hadoop_column_type_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Foreign_table_on_hadoop_column_type_listContext* Gauss200Parser::foreign_table_on_hadoop_column_type_list() {
  Foreign_table_on_hadoop_column_type_listContext *_localctx = _tracker.createInstance<Foreign_table_on_hadoop_column_type_listContext>(_ctx, getState());
  enterRule(_localctx, 446, Gauss200Parser::RuleForeign_table_on_hadoop_column_type_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3148);
    foreign_table_on_hadoop_column_type();
    setState(3153);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(3149);
      match(Gauss200Parser::COMMA);
      setState(3150);
      foreign_table_on_hadoop_column_type();
      setState(3155);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Foreign_table_on_hadoop_column_typeContext ------------------------------------------------------------------

Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::Foreign_table_on_hadoop_column_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_with_typeContext* Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::column_with_type() {
  return getRuleContext<Gauss200Parser::Column_with_typeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

std::vector<Gauss200Parser::Create_foreign_table_column_constraintContext *> Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::create_foreign_table_column_constraint() {
  return getRuleContexts<Gauss200Parser::Create_foreign_table_column_constraintContext>();
}

Gauss200Parser::Create_foreign_table_column_constraintContext* Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::create_foreign_table_column_constraint(size_t i) {
  return getRuleContext<Gauss200Parser::Create_foreign_table_column_constraintContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleForeign_table_on_hadoop_column_type;
}

void Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForeign_table_on_hadoop_column_type(this);
}

void Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForeign_table_on_hadoop_column_type(this);
}


antlrcpp::Any Gauss200Parser::Foreign_table_on_hadoop_column_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitForeign_table_on_hadoop_column_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Foreign_table_on_hadoop_column_typeContext* Gauss200Parser::foreign_table_on_hadoop_column_type() {
  Foreign_table_on_hadoop_column_typeContext *_localctx = _tracker.createInstance<Foreign_table_on_hadoop_column_typeContext>(_ctx, getState());
  enterRule(_localctx, 448, Gauss200Parser::RuleForeign_table_on_hadoop_column_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3180);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3156);
      column_with_type();
      setState(3170);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
      case 1: {
        setState(3159);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::CONSTRAINT_GS) {
          setState(3157);
          match(Gauss200Parser::CONSTRAINT_GS);
          setState(3158);
          constraint_name();
        }
        setState(3162);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::NOT_GS) {
          setState(3161);
          match(Gauss200Parser::NOT_GS);
        }
        setState(3164);
        match(Gauss200Parser::NULL_GS);
        break;
      }

      case 2: {
        setState(3166); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3165);
          create_foreign_table_column_constraint();
          setState(3168); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == Gauss200Parser::CONSTRAINT_GS || _la == Gauss200Parser::PRIMARY_GS

        || _la == Gauss200Parser::UNIQUE_GS);
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3172);
      create_foreign_table_column_constraint();
      setState(3177);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3173);
          match(Gauss200Parser::COMMA);
          setState(3174);
          create_foreign_table_column_constraint(); 
        }
        setState(3179);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_foreign_table_column_constraintContext ------------------------------------------------------------------

Gauss200Parser::Create_foreign_table_column_constraintContext::Create_foreign_table_column_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_constraint_primary_uniqueContext* Gauss200Parser::Create_foreign_table_column_constraintContext::column_constraint_primary_unique() {
  return getRuleContext<Gauss200Parser::Column_constraint_primary_uniqueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_foreign_table_column_constraintContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Create_foreign_table_column_constraintContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

Gauss200Parser::Add_info_constraint_optionContext* Gauss200Parser::Create_foreign_table_column_constraintContext::add_info_constraint_option() {
  return getRuleContext<Gauss200Parser::Add_info_constraint_optionContext>(0);
}


size_t Gauss200Parser::Create_foreign_table_column_constraintContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_foreign_table_column_constraint;
}

void Gauss200Parser::Create_foreign_table_column_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_foreign_table_column_constraint(this);
}

void Gauss200Parser::Create_foreign_table_column_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_foreign_table_column_constraint(this);
}


antlrcpp::Any Gauss200Parser::Create_foreign_table_column_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_foreign_table_column_constraint(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_foreign_table_column_constraintContext* Gauss200Parser::create_foreign_table_column_constraint() {
  Create_foreign_table_column_constraintContext *_localctx = _tracker.createInstance<Create_foreign_table_column_constraintContext>(_ctx, getState());
  enterRule(_localctx, 450, Gauss200Parser::RuleCreate_foreign_table_column_constraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3184);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONSTRAINT_GS) {
      setState(3182);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(3183);
      constraint_name();
    }
    setState(3186);
    column_constraint_primary_unique();
    setState(3188);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::NOT_GS || _la == Gauss200Parser::ENFORCED_GS) {
      setState(3187);
      add_info_constraint_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_function_procedure_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_function_procedure_stmtContext::Create_function_procedure_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

Gauss200Parser::Func_nameContext* Gauss200Parser::Create_function_procedure_stmtContext::func_name() {
  return getRuleContext<Gauss200Parser::Func_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_stmtContext::FUNCTION_GS() {
  return getToken(Gauss200Parser::FUNCTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_stmtContext::PROCEDURE_GS() {
  return getToken(Gauss200Parser::PROCEDURE_GS, 0);
}

Gauss200Parser::Or_replaceContext* Gauss200Parser::Create_function_procedure_stmtContext::or_replace() {
  return getRuleContext<Gauss200Parser::Or_replaceContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Func_return_typeContext* Gauss200Parser::Create_function_procedure_stmtContext::func_return_type() {
  return getRuleContext<Gauss200Parser::Func_return_typeContext>(0);
}

std::vector<Gauss200Parser::Create_function_procedure_clauseContext *> Gauss200Parser::Create_function_procedure_stmtContext::create_function_procedure_clause() {
  return getRuleContexts<Gauss200Parser::Create_function_procedure_clauseContext>();
}

Gauss200Parser::Create_function_procedure_clauseContext* Gauss200Parser::Create_function_procedure_stmtContext::create_function_procedure_clause(size_t i) {
  return getRuleContext<Gauss200Parser::Create_function_procedure_clauseContext>(i);
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_stmtContext::RETURNS_GS() {
  return getToken(Gauss200Parser::RETURNS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_stmtContext::RETURN_GS() {
  return getToken(Gauss200Parser::RETURN_GS, 0);
}

Gauss200Parser::Create_func_arg_listContext* Gauss200Parser::Create_function_procedure_stmtContext::create_func_arg_list() {
  return getRuleContext<Gauss200Parser::Create_func_arg_listContext>(0);
}


size_t Gauss200Parser::Create_function_procedure_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_function_procedure_stmt;
}

void Gauss200Parser::Create_function_procedure_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_function_procedure_stmt(this);
}

void Gauss200Parser::Create_function_procedure_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_function_procedure_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_function_procedure_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_function_procedure_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_function_procedure_stmtContext* Gauss200Parser::create_function_procedure_stmt() {
  Create_function_procedure_stmtContext *_localctx = _tracker.createInstance<Create_function_procedure_stmtContext>(_ctx, getState());
  enterRule(_localctx, 452, Gauss200Parser::RuleCreate_function_procedure_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3190);
    match(Gauss200Parser::CREATE_GS);
    setState(3192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::OR_GS) {
      setState(3191);
      or_replace();
    }
    setState(3194);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::FUNCTION_GS

    || _la == Gauss200Parser::PROCEDURE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3195);
    func_name();
    setState(3201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(3196);
      match(Gauss200Parser::LEFT_PAREN);
      setState(3198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
        | (1ULL << (Gauss200Parser::AND_GS - 1))
        | (1ULL << (Gauss200Parser::ANY_GS - 1))
        | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
        | (1ULL << (Gauss200Parser::ASC_GS - 1))
        | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
        | (1ULL << (Gauss200Parser::AS_GS - 1))
        | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
        | (1ULL << (Gauss200Parser::BOTH_GS - 1))
        | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
        | (1ULL << (Gauss200Parser::CASE_GS - 1))
        | (1ULL << (Gauss200Parser::CAST_GS - 1))
        | (1ULL << (Gauss200Parser::CHECK_GS - 1))
        | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
        | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
        | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
        | (1ULL << (Gauss200Parser::CREATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
        | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
        | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
        | (1ULL << (Gauss200Parser::DESC_GS - 1))
        | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
        | (1ULL << (Gauss200Parser::DO_GS - 1))
        | (1ULL << (Gauss200Parser::ELSE_GS - 1))
        | (1ULL << (Gauss200Parser::END_GS - 1))
        | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
        | (1ULL << (Gauss200Parser::FALSE_GS - 1))
        | (1ULL << (Gauss200Parser::FETCH_GS - 1))
        | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
        | (1ULL << (Gauss200Parser::FOR_GS - 1))
        | (1ULL << (Gauss200Parser::FROM_GS - 1))
        | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
        | (1ULL << (Gauss200Parser::GRANT_GS - 1))
        | (1ULL << (Gauss200Parser::GROUP_GS - 1))
        | (1ULL << (Gauss200Parser::HAVING_GS - 1))
        | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
        | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
        | (1ULL << (Gauss200Parser::INTO_GS - 1))
        | (1ULL << (Gauss200Parser::IN_GS - 1))
        | (1ULL << (Gauss200Parser::IS_GS - 1))
        | (1ULL << (Gauss200Parser::LEADING_GS - 1))
        | (1ULL << (Gauss200Parser::LESS_GS - 1))
        | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
        | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
        | (1ULL << (Gauss200Parser::MINUS_GS - 1))
        | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
        | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
        | (1ULL << (Gauss200Parser::NOT_GS - 1))
        | (1ULL << (Gauss200Parser::NULL_GS - 1))
        | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
        | (1ULL << (Gauss200Parser::ONLY_GS - 1))
        | (1ULL << (Gauss200Parser::ON_GS - 1))
        | (1ULL << (Gauss200Parser::ORDER_GS - 1))
        | (1ULL << (Gauss200Parser::OR_GS - 1))
        | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
        | (1ULL << (Gauss200Parser::REJECT_GS - 65))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
        | (1ULL << (Gauss200Parser::RETURN_GS - 65))
        | (1ULL << (Gauss200Parser::SELECT_GS - 65))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
        | (1ULL << (Gauss200Parser::SOME_GS - 65))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
        | (1ULL << (Gauss200Parser::THEN_GS - 65))
        | (1ULL << (Gauss200Parser::TO_GS - 65))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
        | (1ULL << (Gauss200Parser::TRUE_GS - 65))
        | (1ULL << (Gauss200Parser::UNION_GS - 65))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
        | (1ULL << (Gauss200Parser::USER_GS - 65))
        | (1ULL << (Gauss200Parser::USING_GS - 65))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
        | (1ULL << (Gauss200Parser::WHEN_GS - 65))
        | (1ULL << (Gauss200Parser::WHERE_GS - 65))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
        | (1ULL << (Gauss200Parser::WITH_GS - 65))
        | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
        | (1ULL << (Gauss200Parser::BINARY_GS - 65))
        | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
        | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
        | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
        | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
        | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
        | (1ULL << (Gauss200Parser::INNER_GS - 65))
        | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
        | (1ULL << (Gauss200Parser::JOIN_GS - 65))
        | (1ULL << (Gauss200Parser::LEFT_GS - 65))
        | (1ULL << (Gauss200Parser::LIKE_GS - 65))
        | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
        | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
        | (1ULL << (Gauss200Parser::OUTER_GS - 65))
        | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
        | (1ULL << (Gauss200Parser::OVER_GS - 65))
        | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
        | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
        | (1ULL << (Gauss200Parser::ABORT_GS - 65))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
        | (1ULL << (Gauss200Parser::ACTION_GS - 65))
        | (1ULL << (Gauss200Parser::ADD_GS - 65))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
        | (1ULL << (Gauss200Parser::AFTER_GS - 65))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
        | (1ULL << (Gauss200Parser::ALSO_GS - 65))
        | (1ULL << (Gauss200Parser::ALTER_GS - 65))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
        | (1ULL << (Gauss200Parser::APP_GS - 65))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
        | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::AT_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
        | (1ULL << (Gauss200Parser::BLOB_GS - 129))
        | (1ULL << (Gauss200Parser::BY_GS - 129))
        | (1ULL << (Gauss200Parser::CACHE_GS - 129))
        | (1ULL << (Gauss200Parser::CALLED_GS - 129))
        | (1ULL << (Gauss200Parser::CALL_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
        | (1ULL << (Gauss200Parser::CLASS_GS - 129))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
        | (1ULL << (Gauss200Parser::CLOB_GS - 129))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
        | (1ULL << (Gauss200Parser::COPY_GS - 129))
        | (1ULL << (Gauss200Parser::COST_GS - 129))
        | (1ULL << (Gauss200Parser::CSV_GS - 129))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
        | (1ULL << (Gauss200Parser::DATA_GS - 129))
        | (1ULL << (Gauss200Parser::DAY_GS - 129))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
        | (1ULL << (Gauss200Parser::DELETE_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
        | (1ULL << (Gauss200Parser::DELTA_GS - 129))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
        | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
        | (1ULL << (Gauss200Parser::DROP_GS - 193))
        | (1ULL << (Gauss200Parser::EACH_GS - 193))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
        | (1ULL << (Gauss200Parser::ENUM_GS - 193))
        | (1ULL << (Gauss200Parser::EOL_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
        | (1ULL << (Gauss200Parser::EVERY_GS - 193))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
        | (1ULL << (Gauss200Parser::FIRST_GS - 193))
        | (1ULL << (Gauss200Parser::FIXED_GS - 193))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
        | (1ULL << (Gauss200Parser::FORCE_GS - 193))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
        | (1ULL << (Gauss200Parser::HEADER_GS - 193))
        | (1ULL << (Gauss200Parser::HOLD_GS - 193))
        | (1ULL << (Gauss200Parser::HOUR_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
        | (1ULL << (Gauss200Parser::IF_GS - 193))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
        | (1ULL << (Gauss200Parser::INDEX_GS - 193))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
        | (1ULL << (Gauss200Parser::INLINE_GS - 193))
        | (1ULL << (Gauss200Parser::INPUT_GS - 193))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
        | (1ULL << (Gauss200Parser::INSERT_GS - 193))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
        | (1ULL << (Gauss200Parser::KEY_GS - 193))
        | (1ULL << (Gauss200Parser::LABEL_GS - 193))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
        | (1ULL << (Gauss200Parser::LARGE_GS - 193))
        | (1ULL << (Gauss200Parser::LAST_GS - 193))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
        | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
        | (1ULL << (Gauss200Parser::LOAD_GS - 257))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
        | (1ULL << (Gauss200Parser::LOCK_GS - 257))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::LOG_GS - 257))
        | (1ULL << (Gauss200Parser::LOOP_GS - 257))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
        | (1ULL << (Gauss200Parser::MATCH_GS - 257))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
        | (1ULL << (Gauss200Parser::MERGE_GS - 257))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::MODE_GS - 257))
        | (1ULL << (Gauss200Parser::MONTH_GS - 257))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
        | (1ULL << (Gauss200Parser::MOVE_GS - 257))
        | (1ULL << (Gauss200Parser::NAMES_GS - 257))
        | (1ULL << (Gauss200Parser::NAME_GS - 257))
        | (1ULL << (Gauss200Parser::NEXT_GS - 257))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
        | (1ULL << (Gauss200Parser::NODE_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
        | (1ULL << (Gauss200Parser::NO_GS - 257))
        | (1ULL << (Gauss200Parser::NULLS_GS - 257))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
        | (1ULL << (Gauss200Parser::OFF_GS - 257))
        | (1ULL << (Gauss200Parser::OF_GS - 257))
        | (1ULL << (Gauss200Parser::OIDS_GS - 257))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
        | (1ULL << (Gauss200Parser::OPTION_GS - 257))
        | (1ULL << (Gauss200Parser::OWNED_GS - 257))
        | (1ULL << (Gauss200Parser::OWNER_GS - 257))
        | (1ULL << (Gauss200Parser::PARSER_GS - 257))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
        | (1ULL << (Gauss200Parser::PASSING_GS - 257))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
        | (1ULL << (Gauss200Parser::PER_GS - 257))
        | (1ULL << (Gauss200Parser::PLANS_GS - 257))
        | (1ULL << (Gauss200Parser::POOL_GS - 257))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
        | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
        | (1ULL << (Gauss200Parser::QUERY_GS - 321))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RANGE_GS - 321))
        | (1ULL << (Gauss200Parser::RAW_GS - 321))
        | (1ULL << (Gauss200Parser::READ_GS - 321))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
        | (1ULL << (Gauss200Parser::REF_GS - 321))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RENAME_GS - 321))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
        | (1ULL << (Gauss200Parser::RESET_GS - 321))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
        | (1ULL << (Gauss200Parser::RESTART_GS - 321))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
        | (1ULL << (Gauss200Parser::REUSE_GS - 321))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
        | (1ULL << (Gauss200Parser::ROWS_GS - 321))
        | (1ULL << (Gauss200Parser::RULE_GS - 321))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
        | (1ULL << (Gauss200Parser::SECOND_GS - 321))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
        | (1ULL << (Gauss200Parser::SERVER_GS - 321))
        | (1ULL << (Gauss200Parser::SESSION_GS - 321))
        | (1ULL << (Gauss200Parser::SET_GS - 321))
        | (1ULL << (Gauss200Parser::SHARE_GS - 321))
        | (1ULL << (Gauss200Parser::SHOW_GS - 321))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
        | (1ULL << (Gauss200Parser::SIZE_GS - 321))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
        | (1ULL << (Gauss200Parser::STABLE_GS - 321))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
        | (1ULL << (Gauss200Parser::START_GS - 321))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
        | (1ULL << (Gauss200Parser::STDIN_GS - 321))
        | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
        | (1ULL << (Gauss200Parser::STORE_GS - 385))
        | (1ULL << (Gauss200Parser::STRICT_GS - 385))
        | (1ULL << (Gauss200Parser::STRIP_GS - 385))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
        | (1ULL << (Gauss200Parser::SYSID_GS - 385))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::TABLES_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
        | (1ULL << (Gauss200Parser::TEMP_GS - 385))
        | (1ULL << (Gauss200Parser::TEXT_GS - 385))
        | (1ULL << (Gauss200Parser::THAN_GS - 385))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
        | (1ULL << (Gauss200Parser::TYPES_GS - 385))
        | (1ULL << (Gauss200Parser::TYPE_GS - 385))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
        | (1ULL << (Gauss200Parser::VALID_GS - 385))
        | (1ULL << (Gauss200Parser::VALUE_GS - 385))
        | (1ULL << (Gauss200Parser::VARYING_GS - 385))
        | (1ULL << (Gauss200Parser::VERSION_GS - 385))
        | (1ULL << (Gauss200Parser::VIEW_GS - 385))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
        | (1ULL << (Gauss200Parser::WORK_GS - 385))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
        | (1ULL << (Gauss200Parser::WRITE_GS - 385))
        | (1ULL << (Gauss200Parser::XML_GS - 385))
        | (1ULL << (Gauss200Parser::YEAR_GS - 385))
        | (1ULL << (Gauss200Parser::YES_GS - 385))
        | (1ULL << (Gauss200Parser::ZONE_GS - 385))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
        | (1ULL << (Gauss200Parser::BIT_GS - 385))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
        | (1ULL << (Gauss200Parser::CHAR_GS - 385))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
        | (1ULL << (Gauss200Parser::DATE_GS - 385))
        | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
        | (1ULL << (Gauss200Parser::DEC_GS - 449))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
        | (1ULL << (Gauss200Parser::INOUT_GS - 449))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
        | (1ULL << (Gauss200Parser::INT_GS - 449))
        | (1ULL << (Gauss200Parser::LEAST_GS - 449))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::NONE_GS - 449))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::NVL_GS - 449))
        | (1ULL << (Gauss200Parser::OUT_GS - 449))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
        | (1ULL << (Gauss200Parser::POSITION_GS - 449))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
        | (1ULL << (Gauss200Parser::REAL_GS - 449))
        | (1ULL << (Gauss200Parser::ROW_GS - 449))
        | (1ULL << (Gauss200Parser::SETOF_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
        | (1ULL << (Gauss200Parser::TIME_GS - 449))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
        | (1ULL << (Gauss200Parser::TREAT_GS - 449))
        | (1ULL << (Gauss200Parser::TRIM_GS - 449))
        | (1ULL << (Gauss200Parser::VALUES_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLSERIAL_GS - 449))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
        | (1ULL << (Gauss200Parser::BIGSERIAL_GS - 449))
        | (1ULL << (Gauss200Parser::FLOAT4_GS - 449))
        | (1ULL << (Gauss200Parser::FLOAT8_GS - 449))
        | (1ULL << (Gauss200Parser::MONEY_GS - 449))
        | (1ULL << (Gauss200Parser::BYTEA_GS - 449))
        | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
        | (1ULL << (Gauss200Parser::POINT_GS - 449))
        | (1ULL << (Gauss200Parser::LSEG_GS - 449))
        | (1ULL << (Gauss200Parser::BOX_GS - 449))
        | (1ULL << (Gauss200Parser::PATH_GS - 449))
        | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
        | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
        | (1ULL << (Gauss200Parser::CIDR_GS - 449))
        | (1ULL << (Gauss200Parser::INET_GS - 449))
        | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 513) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 513)) & ((1ULL << (Gauss200Parser::TSVECTOR_GS - 513))
        | (1ULL << (Gauss200Parser::TSQUERY_GS - 513))
        | (1ULL << (Gauss200Parser::HLL_GS - 513))
        | (1ULL << (Gauss200Parser::OID_GS - 513))
        | (1ULL << (Gauss200Parser::CID_GS - 513))
        | (1ULL << (Gauss200Parser::XID_GS - 513))
        | (1ULL << (Gauss200Parser::TID_GS - 513))
        | (1ULL << (Gauss200Parser::REGCONFIG_GS - 513))
        | (1ULL << (Gauss200Parser::REGDICTIONARY_GS - 513))
        | (1ULL << (Gauss200Parser::REGOPER - 513))
        | (1ULL << (Gauss200Parser::REGOPERATOR - 513))
        | (1ULL << (Gauss200Parser::REGPROC - 513))
        | (1ULL << (Gauss200Parser::REGPROCEDURE - 513))
        | (1ULL << (Gauss200Parser::REGCLASS - 513))
        | (1ULL << (Gauss200Parser::REGTYPE - 513))
        | (1ULL << (Gauss200Parser::ANYELEMENT_GS - 513))
        | (1ULL << (Gauss200Parser::ANYARRAY_GS - 513))
        | (1ULL << (Gauss200Parser::ANYNONARRAY_GS - 513))
        | (1ULL << (Gauss200Parser::ANYENUM_GS - 513))
        | (1ULL << (Gauss200Parser::ANYRANGE_GS - 513))
        | (1ULL << (Gauss200Parser::CSTRING_GS - 513))
        | (1ULL << (Gauss200Parser::INTERNAL_GS - 513))
        | (1ULL << (Gauss200Parser::LANGUAGE_HANDLER_GS - 513))
        | (1ULL << (Gauss200Parser::FDW_HANDLER_GS - 513))
        | (1ULL << (Gauss200Parser::RECORD_GS - 513))
        | (1ULL << (Gauss200Parser::VOID_GS - 513))
        | (1ULL << (Gauss200Parser::OPAQUE_GS - 513))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 513))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 513))
        | (1ULL << (Gauss200Parser::USAGE_GS - 513))
        | (1ULL << (Gauss200Parser::SPACE_GS - 513))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 513)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601)))) != 0)) {
        setState(3197);
        create_func_arg_list();
      }
      setState(3200);
      match(Gauss200Parser::RIGHT_PAREN);
    }
    setState(3205);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
    case 1: {
      setState(3203);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::RETURN_GS || _la == Gauss200Parser::RETURNS_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3204);
      func_return_type();
      break;
    }

    }
    setState(3210);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Gauss200Parser::AS_GS)
      | (1ULL << Gauss200Parser::AUTHID_GS)
      | (1ULL << Gauss200Parser::IS_GS)
      | (1ULL << Gauss200Parser::NOT_GS))) != 0) || _la == Gauss200Parser::CALLED_GS

    || _la == Gauss200Parser::COST_GS || ((((_la - 213) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 213)) & ((1ULL << (Gauss200Parser::EXTERNAL_GS - 213))
      | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 213))
      | (1ULL << (Gauss200Parser::LANGUAGE_GS - 213))
      | (1ULL << (Gauss200Parser::LEAKPROOF_GS - 213)))) != 0) || ((((_la - 349) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 349)) & ((1ULL << (Gauss200Parser::RESET_GS - 349))
      | (1ULL << (Gauss200Parser::RETURNS_GS - 349))
      | (1ULL << (Gauss200Parser::ROWS_GS - 349))
      | (1ULL << (Gauss200Parser::SECURITY_GS - 349))
      | (1ULL << (Gauss200Parser::SET_GS - 349))
      | (1ULL << (Gauss200Parser::STABLE_GS - 349))
      | (1ULL << (Gauss200Parser::STRICT_GS - 349)))) != 0) || _la == Gauss200Parser::VOLATILE_GS || _la == Gauss200Parser::SHIPPABLE_GS

    || _la == Gauss200Parser::FENCED_GS || _la == Gauss200Parser::PACKAGE_GS) {
      setState(3207);
      create_function_procedure_clause();
      setState(3212);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_function_procedure_clauseContext ------------------------------------------------------------------

Gauss200Parser::Create_function_procedure_clauseContext::Create_function_procedure_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_function_procedure_clauseContext::LANGUAGE_GS() {
  return getToken(Gauss200Parser::LANGUAGE_GS, 0);
}

Gauss200Parser::Lang_nameContext* Gauss200Parser::Create_function_procedure_clauseContext::lang_name() {
  return getRuleContext<Gauss200Parser::Lang_nameContext>(0);
}

std::vector<Gauss200Parser::Alter_function_actionContext *> Gauss200Parser::Create_function_procedure_clauseContext::alter_function_action() {
  return getRuleContexts<Gauss200Parser::Alter_function_actionContext>();
}

Gauss200Parser::Alter_function_actionContext* Gauss200Parser::Create_function_procedure_clauseContext::alter_function_action(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_function_actionContext>(i);
}

Gauss200Parser::Create_func_procedure_as_optionContext* Gauss200Parser::Create_function_procedure_clauseContext::create_func_procedure_as_option() {
  return getRuleContext<Gauss200Parser::Create_func_procedure_as_optionContext>(0);
}

Gauss200Parser::PlsqlbodyContext* Gauss200Parser::Create_function_procedure_clauseContext::plsqlbody() {
  return getRuleContext<Gauss200Parser::PlsqlbodyContext>(0);
}


size_t Gauss200Parser::Create_function_procedure_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_function_procedure_clause;
}

void Gauss200Parser::Create_function_procedure_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_function_procedure_clause(this);
}

void Gauss200Parser::Create_function_procedure_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_function_procedure_clause(this);
}


antlrcpp::Any Gauss200Parser::Create_function_procedure_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_function_procedure_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_function_procedure_clauseContext* Gauss200Parser::create_function_procedure_clause() {
  Create_function_procedure_clauseContext *_localctx = _tracker.createInstance<Create_function_procedure_clauseContext>(_ctx, getState());
  enterRule(_localctx, 454, Gauss200Parser::RuleCreate_function_procedure_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3224);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::LANGUAGE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3213);
        match(Gauss200Parser::LANGUAGE_GS);
        setState(3214);
        lang_name();
        break;
      }

      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::SHIPPABLE_GS:
      case Gauss200Parser::FENCED_GS:
      case Gauss200Parser::PACKAGE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3216); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(3215);
                  alter_function_action();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(3218); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

      case Gauss200Parser::AS_GS:
      case Gauss200Parser::IS_GS: {
        enterOuterAlt(_localctx, 3);
        setState(3220);
        create_func_procedure_as_option();
        setState(3222);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::BEGIN_GS

        || _la == Gauss200Parser::DECLARE_GS) {
          setState(3221);
          plsqlbody();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_func_arg_listContext ------------------------------------------------------------------

Gauss200Parser::Create_func_arg_listContext::Create_func_arg_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Create_func_argContext *> Gauss200Parser::Create_func_arg_listContext::create_func_arg() {
  return getRuleContexts<Gauss200Parser::Create_func_argContext>();
}

Gauss200Parser::Create_func_argContext* Gauss200Parser::Create_func_arg_listContext::create_func_arg(size_t i) {
  return getRuleContext<Gauss200Parser::Create_func_argContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_func_arg_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Create_func_arg_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Create_func_arg_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_func_arg_list;
}

void Gauss200Parser::Create_func_arg_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_func_arg_list(this);
}

void Gauss200Parser::Create_func_arg_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_func_arg_list(this);
}


antlrcpp::Any Gauss200Parser::Create_func_arg_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_func_arg_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_func_arg_listContext* Gauss200Parser::create_func_arg_list() {
  Create_func_arg_listContext *_localctx = _tracker.createInstance<Create_func_arg_listContext>(_ctx, getState());
  enterRule(_localctx, 456, Gauss200Parser::RuleCreate_func_arg_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3226);
    create_func_arg();
    setState(3231);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(3227);
      match(Gauss200Parser::COMMA);
      setState(3228);
      create_func_arg();
      setState(3233);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_func_argContext ------------------------------------------------------------------

Gauss200Parser::Create_func_argContext::Create_func_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Create_func_argContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

Gauss200Parser::Param_nameContext* Gauss200Parser::Create_func_argContext::param_name() {
  return getRuleContext<Gauss200Parser::Param_nameContext>(0);
}

Gauss200Parser::ArgmodeContext* Gauss200Parser::Create_func_argContext::argmode() {
  return getRuleContext<Gauss200Parser::ArgmodeContext>(0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Create_func_argContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_func_argContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_func_argContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Create_func_argContext::COLON() {
  return getToken(Gauss200Parser::COLON, 0);
}


size_t Gauss200Parser::Create_func_argContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_func_arg;
}

void Gauss200Parser::Create_func_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_func_arg(this);
}

void Gauss200Parser::Create_func_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_func_arg(this);
}


antlrcpp::Any Gauss200Parser::Create_func_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_func_arg(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_func_argContext* Gauss200Parser::create_func_arg() {
  Create_func_argContext *_localctx = _tracker.createInstance<Create_func_argContext>(_ctx, getState());
  enterRule(_localctx, 458, Gauss200Parser::RuleCreate_func_arg);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3235);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      setState(3234);
      param_name();
      break;
    }

    }
    setState(3238);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      setState(3237);
      argmode();
      break;
    }

    }
    setState(3240);
    typename_gs();
    setState(3249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DEFAULT_GS || _la == Gauss200Parser::COLON

    || _la == Gauss200Parser::EQUALS_OP) {
      setState(3246);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::DEFAULT_GS: {
          setState(3241);
          match(Gauss200Parser::DEFAULT_GS);
          break;
        }

        case Gauss200Parser::COLON:
        case Gauss200Parser::EQUALS_OP: {
          setState(3243);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Gauss200Parser::COLON) {
            setState(3242);
            match(Gauss200Parser::COLON);
          }
          setState(3245);
          match(Gauss200Parser::EQUALS_OP);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3248);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_return_typeContext ------------------------------------------------------------------

Gauss200Parser::Func_return_typeContext::Func_return_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Func_return_typeContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Func_return_typeContext::SETOF_GS() {
  return getToken(Gauss200Parser::SETOF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Func_return_typeContext::DETERMINISTIC_GS() {
  return getToken(Gauss200Parser::DETERMINISTIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Func_return_typeContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Func_return_typeContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Column_with_typeContext *> Gauss200Parser::Func_return_typeContext::column_with_type() {
  return getRuleContexts<Gauss200Parser::Column_with_typeContext>();
}

Gauss200Parser::Column_with_typeContext* Gauss200Parser::Func_return_typeContext::column_with_type(size_t i) {
  return getRuleContext<Gauss200Parser::Column_with_typeContext>(i);
}

tree::TerminalNode* Gauss200Parser::Func_return_typeContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Func_return_typeContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Func_return_typeContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Func_return_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunc_return_type;
}

void Gauss200Parser::Func_return_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_return_type(this);
}

void Gauss200Parser::Func_return_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_return_type(this);
}


antlrcpp::Any Gauss200Parser::Func_return_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunc_return_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Func_return_typeContext* Gauss200Parser::func_return_type() {
  Func_return_typeContext *_localctx = _tracker.createInstance<Func_return_typeContext>(_ctx, getState());
  enterRule(_localctx, 460, Gauss200Parser::RuleFunc_return_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3270);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::AUTHORIZATION_GS:
      case Gauss200Parser::BINARY_GS:
      case Gauss200Parser::COLLATION_GS:
      case Gauss200Parser::CONCURRENTLY_GS:
      case Gauss200Parser::CURRENT_SCHEMA_GS:
      case Gauss200Parser::FREEZE_GS:
      case Gauss200Parser::ILIKE_GS:
      case Gauss200Parser::INNER_GS:
      case Gauss200Parser::ISNULL_GS:
      case Gauss200Parser::JOIN_GS:
      case Gauss200Parser::LEFT_GS:
      case Gauss200Parser::LIKE_GS:
      case Gauss200Parser::NATURAL_GS:
      case Gauss200Parser::NOTNULL_GS:
      case Gauss200Parser::OUTER_GS:
      case Gauss200Parser::OVERLAPS_GS:
      case Gauss200Parser::OVER_GS:
      case Gauss200Parser::SIMILAR_GS:
      case Gauss200Parser::VERBOSE_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::BETWEEN_GS:
      case Gauss200Parser::BIGINT_GS:
      case Gauss200Parser::BINARY_DOUBLE_GS:
      case Gauss200Parser::BINARY_INTEGER_GS:
      case Gauss200Parser::BIT_GS:
      case Gauss200Parser::BOOLEAN_GS:
      case Gauss200Parser::CHARACTER_GS:
      case Gauss200Parser::CHAR_GS:
      case Gauss200Parser::COALESCE_GS:
      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::DECIMAL_GS:
      case Gauss200Parser::DECODE_GS:
      case Gauss200Parser::DEC_GS:
      case Gauss200Parser::EXISTS_GS:
      case Gauss200Parser::EXTRACT_GS:
      case Gauss200Parser::FLOAT_GS:
      case Gauss200Parser::GREATEST_GS:
      case Gauss200Parser::INOUT_GS:
      case Gauss200Parser::INTEGER_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::INT_GS:
      case Gauss200Parser::LEAST_GS:
      case Gauss200Parser::NATIONAL_GS:
      case Gauss200Parser::NCHAR_GS:
      case Gauss200Parser::NONE_GS:
      case Gauss200Parser::NULLIF_GS:
      case Gauss200Parser::NUMBER_GS:
      case Gauss200Parser::NUMERIC_GS:
      case Gauss200Parser::NVARCHAR2_GS:
      case Gauss200Parser::NVL_GS:
      case Gauss200Parser::OUT_GS:
      case Gauss200Parser::OVERLAY_GS:
      case Gauss200Parser::POSITION_GS:
      case Gauss200Parser::PRECISION_GS:
      case Gauss200Parser::REAL_GS:
      case Gauss200Parser::ROW_GS:
      case Gauss200Parser::SETOF_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::SMALLINT_GS:
      case Gauss200Parser::SUBSTRING_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::TINYINT_GS:
      case Gauss200Parser::TREAT_GS:
      case Gauss200Parser::TRIM_GS:
      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::VARCHAR2_GS:
      case Gauss200Parser::VARCHAR_GS:
      case Gauss200Parser::XMLATTRIBUTES_GS:
      case Gauss200Parser::XMLCONCAT_GS:
      case Gauss200Parser::XMLELEMENT_GS:
      case Gauss200Parser::XMLEXISTS_GS:
      case Gauss200Parser::XMLFOREST_GS:
      case Gauss200Parser::XMLPARSE_GS:
      case Gauss200Parser::XMLPI_GS:
      case Gauss200Parser::XMLROOT_GS:
      case Gauss200Parser::XMLSERIALIZE_GS:
      case Gauss200Parser::SMALLSERIAL_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::BIGSERIAL_GS:
      case Gauss200Parser::FLOAT4_GS:
      case Gauss200Parser::FLOAT8_GS:
      case Gauss200Parser::MONEY_GS:
      case Gauss200Parser::BYTEA_GS:
      case Gauss200Parser::RELTIME_GS:
      case Gauss200Parser::POINT_GS:
      case Gauss200Parser::LSEG_GS:
      case Gauss200Parser::BOX_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::POLYGON_GS:
      case Gauss200Parser::CIRCLE_GS:
      case Gauss200Parser::CIDR_GS:
      case Gauss200Parser::INET_GS:
      case Gauss200Parser::MACADDR_GS:
      case Gauss200Parser::TSVECTOR_GS:
      case Gauss200Parser::TSQUERY_GS:
      case Gauss200Parser::HLL_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::CID_GS:
      case Gauss200Parser::XID_GS:
      case Gauss200Parser::TID_GS:
      case Gauss200Parser::REGCONFIG_GS:
      case Gauss200Parser::REGDICTIONARY_GS:
      case Gauss200Parser::REGOPER:
      case Gauss200Parser::REGOPERATOR:
      case Gauss200Parser::REGPROC:
      case Gauss200Parser::REGPROCEDURE:
      case Gauss200Parser::REGCLASS:
      case Gauss200Parser::REGTYPE:
      case Gauss200Parser::ANYELEMENT_GS:
      case Gauss200Parser::ANYARRAY_GS:
      case Gauss200Parser::ANYNONARRAY_GS:
      case Gauss200Parser::ANYENUM_GS:
      case Gauss200Parser::ANYRANGE_GS:
      case Gauss200Parser::CSTRING_GS:
      case Gauss200Parser::INTERNAL_GS:
      case Gauss200Parser::LANGUAGE_HANDLER_GS:
      case Gauss200Parser::FDW_HANDLER_GS:
      case Gauss200Parser::RECORD_GS:
      case Gauss200Parser::VOID_GS:
      case Gauss200Parser::OPAQUE_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::CHAR_STRING:
      case Gauss200Parser::REGULAR_ID:
      case Gauss200Parser::SCONST: {
        enterOuterAlt(_localctx, 1);
        setState(3252);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx)) {
        case 1: {
          setState(3251);
          match(Gauss200Parser::SETOF_GS);
          break;
        }

        }
        setState(3254);
        typename_gs();
        setState(3256);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::DETERMINISTIC_GS) {
          setState(3255);
          match(Gauss200Parser::DETERMINISTIC_GS);
        }
        break;
      }

      case Gauss200Parser::TABLE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3258);
        match(Gauss200Parser::TABLE_GS);
        setState(3259);
        match(Gauss200Parser::LEFT_PAREN);
        setState(3260);
        column_with_type();
        setState(3265);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::COMMA) {
          setState(3261);
          match(Gauss200Parser::COMMA);
          setState(3262);
          column_with_type();
          setState(3267);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3268);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lang_nameContext ------------------------------------------------------------------

Gauss200Parser::Lang_nameContext::Lang_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Lang_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Lang_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleLang_name;
}

void Gauss200Parser::Lang_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLang_name(this);
}

void Gauss200Parser::Lang_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLang_name(this);
}


antlrcpp::Any Gauss200Parser::Lang_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLang_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Lang_nameContext* Gauss200Parser::lang_name() {
  Lang_nameContext *_localctx = _tracker.createInstance<Lang_nameContext>(_ctx, getState());
  enterRule(_localctx, 462, Gauss200Parser::RuleLang_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3272);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_func_procedure_as_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_func_procedure_as_optionContext::Create_func_procedure_as_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_func_procedure_as_optionContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_func_procedure_as_optionContext::CHAR_STRING() {
  return getTokens(Gauss200Parser::CHAR_STRING);
}

tree::TerminalNode* Gauss200Parser::Create_func_procedure_as_optionContext::CHAR_STRING(size_t i) {
  return getToken(Gauss200Parser::CHAR_STRING, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_func_procedure_as_optionContext::SCONST() {
  return getTokens(Gauss200Parser::SCONST);
}

tree::TerminalNode* Gauss200Parser::Create_func_procedure_as_optionContext::SCONST(size_t i) {
  return getToken(Gauss200Parser::SCONST, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_func_procedure_as_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Create_func_procedure_as_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

tree::TerminalNode* Gauss200Parser::Create_func_procedure_as_optionContext::IS_GS() {
  return getToken(Gauss200Parser::IS_GS, 0);
}


size_t Gauss200Parser::Create_func_procedure_as_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_func_procedure_as_option;
}

void Gauss200Parser::Create_func_procedure_as_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_func_procedure_as_option(this);
}

void Gauss200Parser::Create_func_procedure_as_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_func_procedure_as_option(this);
}


antlrcpp::Any Gauss200Parser::Create_func_procedure_as_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_func_procedure_as_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_func_procedure_as_optionContext* Gauss200Parser::create_func_procedure_as_option() {
  Create_func_procedure_as_optionContext *_localctx = _tracker.createInstance<Create_func_procedure_as_optionContext>(_ctx, getState());
  enterRule(_localctx, 464, Gauss200Parser::RuleCreate_func_procedure_as_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3285);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::AS_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3274);
        match(Gauss200Parser::AS_GS);
        setState(3281);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 621) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 621)) & ((1ULL << (Gauss200Parser::COMMA - 621))
          | (1ULL << (Gauss200Parser::CHAR_STRING - 621))
          | (1ULL << (Gauss200Parser::SCONST - 621)))) != 0)) {
          setState(3276);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Gauss200Parser::COMMA) {
            setState(3275);
            match(Gauss200Parser::COMMA);
          }
          setState(3278);
          _la = _input->LA(1);
          if (!(_la == Gauss200Parser::CHAR_STRING

          || _la == Gauss200Parser::SCONST)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3283);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case Gauss200Parser::IS_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3284);
        match(Gauss200Parser::IS_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlsqlbodyContext ------------------------------------------------------------------

Gauss200Parser::PlsqlbodyContext::PlsqlbodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::PlsqlbodyContext::BEGIN_GS() {
  return getToken(Gauss200Parser::BEGIN_GS, 0);
}

Gauss200Parser::Sequence_of_statementsContext* Gauss200Parser::PlsqlbodyContext::sequence_of_statements() {
  return getRuleContext<Gauss200Parser::Sequence_of_statementsContext>(0);
}

tree::TerminalNode* Gauss200Parser::PlsqlbodyContext::END_GS() {
  return getToken(Gauss200Parser::END_GS, 0);
}

tree::TerminalNode* Gauss200Parser::PlsqlbodyContext::DECLARE_GS() {
  return getToken(Gauss200Parser::DECLARE_GS, 0);
}

Gauss200Parser::Variable_declarationsContext* Gauss200Parser::PlsqlbodyContext::variable_declarations() {
  return getRuleContext<Gauss200Parser::Variable_declarationsContext>(0);
}

Gauss200Parser::Cursor_declarationContext* Gauss200Parser::PlsqlbodyContext::cursor_declaration() {
  return getRuleContext<Gauss200Parser::Cursor_declarationContext>(0);
}


size_t Gauss200Parser::PlsqlbodyContext::getRuleIndex() const {
  return Gauss200Parser::RulePlsqlbody;
}

void Gauss200Parser::PlsqlbodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlsqlbody(this);
}

void Gauss200Parser::PlsqlbodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlsqlbody(this);
}


antlrcpp::Any Gauss200Parser::PlsqlbodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPlsqlbody(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::PlsqlbodyContext* Gauss200Parser::plsqlbody() {
  PlsqlbodyContext *_localctx = _tracker.createInstance<PlsqlbodyContext>(_ctx, getState());
  enterRule(_localctx, 466, Gauss200Parser::RulePlsqlbody);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3294);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DECLARE_GS) {
      setState(3287);
      match(Gauss200Parser::DECLARE_GS);
      setState(3289);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
      case 1: {
        setState(3288);
        variable_declarations();
        break;
      }

      }
      setState(3292);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::CURSOR_GS) {
        setState(3291);
        cursor_declaration();
      }
    }
    setState(3296);
    match(Gauss200Parser::BEGIN_GS);
    setState(3297);
    sequence_of_statements();
    setState(3298);
    match(Gauss200Parser::END_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declarationsContext ------------------------------------------------------------------

Gauss200Parser::Variable_declarationsContext::Variable_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Variable_declarationContext *> Gauss200Parser::Variable_declarationsContext::variable_declaration() {
  return getRuleContexts<Gauss200Parser::Variable_declarationContext>();
}

Gauss200Parser::Variable_declarationContext* Gauss200Parser::Variable_declarationsContext::variable_declaration(size_t i) {
  return getRuleContext<Gauss200Parser::Variable_declarationContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Variable_declarationsContext::SEMICOLON() {
  return getTokens(Gauss200Parser::SEMICOLON);
}

tree::TerminalNode* Gauss200Parser::Variable_declarationsContext::SEMICOLON(size_t i) {
  return getToken(Gauss200Parser::SEMICOLON, i);
}


size_t Gauss200Parser::Variable_declarationsContext::getRuleIndex() const {
  return Gauss200Parser::RuleVariable_declarations;
}

void Gauss200Parser::Variable_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declarations(this);
}

void Gauss200Parser::Variable_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declarations(this);
}


antlrcpp::Any Gauss200Parser::Variable_declarationsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitVariable_declarations(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Variable_declarationsContext* Gauss200Parser::variable_declarations() {
  Variable_declarationsContext *_localctx = _tracker.createInstance<Variable_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 468, Gauss200Parser::RuleVariable_declarations);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3300);
    variable_declaration();
    setState(3305);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3301);
        match(Gauss200Parser::SEMICOLON);
        setState(3302);
        variable_declaration(); 
      }
      setState(3307);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx);
    }
    setState(3308);
    match(Gauss200Parser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declarationContext ------------------------------------------------------------------

Gauss200Parser::Variable_declarationContext::Variable_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Variable_declarationContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Variable_declarationContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Variable_declarationContext::CONSTANT_GS() {
  return getToken(Gauss200Parser::CONSTANT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Variable_declarationContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Variable_declarationContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

Gauss200Parser::Default_value_partContext* Gauss200Parser::Variable_declarationContext::default_value_part() {
  return getRuleContext<Gauss200Parser::Default_value_partContext>(0);
}


size_t Gauss200Parser::Variable_declarationContext::getRuleIndex() const {
  return Gauss200Parser::RuleVariable_declaration;
}

void Gauss200Parser::Variable_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declaration(this);
}

void Gauss200Parser::Variable_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declaration(this);
}


antlrcpp::Any Gauss200Parser::Variable_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitVariable_declaration(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Variable_declarationContext* Gauss200Parser::variable_declaration() {
  Variable_declarationContext *_localctx = _tracker.createInstance<Variable_declarationContext>(_ctx, getState());
  enterRule(_localctx, 470, Gauss200Parser::RuleVariable_declaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3310);
    identifier();
    setState(3312);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONSTANT_GS) {
      setState(3311);
      match(Gauss200Parser::CONSTANT_GS);
    }
    setState(3314);
    typename_gs();
    setState(3317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::NOT_GS) {
      setState(3315);
      match(Gauss200Parser::NOT_GS);
      setState(3316);
      match(Gauss200Parser::NULL_GS);
    }
    setState(3320);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DEFAULT_GS || _la == Gauss200Parser::COLON) {
      setState(3319);
      default_value_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_value_partContext ------------------------------------------------------------------

Gauss200Parser::Default_value_partContext::Default_value_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Default_value_partContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Default_value_partContext::COLON() {
  return getToken(Gauss200Parser::COLON, 0);
}

tree::TerminalNode* Gauss200Parser::Default_value_partContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Default_value_partContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}


size_t Gauss200Parser::Default_value_partContext::getRuleIndex() const {
  return Gauss200Parser::RuleDefault_value_part;
}

void Gauss200Parser::Default_value_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_value_part(this);
}

void Gauss200Parser::Default_value_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_value_part(this);
}


antlrcpp::Any Gauss200Parser::Default_value_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDefault_value_part(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Default_value_partContext* Gauss200Parser::default_value_part() {
  Default_value_partContext *_localctx = _tracker.createInstance<Default_value_partContext>(_ctx, getState());
  enterRule(_localctx, 472, Gauss200Parser::RuleDefault_value_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3325);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::COLON: {
        setState(3322);
        match(Gauss200Parser::COLON);
        setState(3323);
        match(Gauss200Parser::EQUALS_OP);
        break;
      }

      case Gauss200Parser::DEFAULT_GS: {
        setState(3324);
        match(Gauss200Parser::DEFAULT_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3327);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_declarationContext ------------------------------------------------------------------

Gauss200Parser::Cursor_declarationContext::Cursor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Cursor_declarationContext::CURSOR_GS() {
  return getToken(Gauss200Parser::CURSOR_GS, 0);
}

Gauss200Parser::Cursor_nameContext* Gauss200Parser::Cursor_declarationContext::cursor_name() {
  return getRuleContext<Gauss200Parser::Cursor_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Cursor_declarationContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Cursor_declarationContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Cursor_declarationContext::SEMICOLON() {
  return getToken(Gauss200Parser::SEMICOLON, 0);
}

tree::TerminalNode* Gauss200Parser::Cursor_declarationContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Cursor_declarationContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<Gauss200Parser::Parameter_specContext *> Gauss200Parser::Cursor_declarationContext::parameter_spec() {
  return getRuleContexts<Gauss200Parser::Parameter_specContext>();
}

Gauss200Parser::Parameter_specContext* Gauss200Parser::Cursor_declarationContext::parameter_spec(size_t i) {
  return getRuleContext<Gauss200Parser::Parameter_specContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Cursor_declarationContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Cursor_declarationContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Cursor_declarationContext::getRuleIndex() const {
  return Gauss200Parser::RuleCursor_declaration;
}

void Gauss200Parser::Cursor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCursor_declaration(this);
}

void Gauss200Parser::Cursor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCursor_declaration(this);
}


antlrcpp::Any Gauss200Parser::Cursor_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCursor_declaration(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Cursor_declarationContext* Gauss200Parser::cursor_declaration() {
  Cursor_declarationContext *_localctx = _tracker.createInstance<Cursor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 474, Gauss200Parser::RuleCursor_declaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3329);
    match(Gauss200Parser::CURSOR_GS);
    setState(3330);
    cursor_name();
    setState(3342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(3331);
      match(Gauss200Parser::LEFT_PAREN);
      setState(3336); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3333);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::COMMA) {
          setState(3332);
          match(Gauss200Parser::COMMA);
        }
        setState(3335);
        parameter_spec();
        setState(3338); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Gauss200Parser::ALL_GS)
        | (1ULL << Gauss200Parser::ANALYSE_GS)
        | (1ULL << Gauss200Parser::ANALYZE_GS)
        | (1ULL << Gauss200Parser::AND_GS)
        | (1ULL << Gauss200Parser::ANY_GS)
        | (1ULL << Gauss200Parser::ARRAY_GS)
        | (1ULL << Gauss200Parser::ASC_GS)
        | (1ULL << Gauss200Parser::ASYMMETRIC_GS)
        | (1ULL << Gauss200Parser::AS_GS)
        | (1ULL << Gauss200Parser::AUTHID_GS)
        | (1ULL << Gauss200Parser::BOTH_GS)
        | (1ULL << Gauss200Parser::BUCKETS_GS)
        | (1ULL << Gauss200Parser::CASE_GS)
        | (1ULL << Gauss200Parser::CAST_GS)
        | (1ULL << Gauss200Parser::CHECK_GS)
        | (1ULL << Gauss200Parser::COLLATE_GS)
        | (1ULL << Gauss200Parser::COLUMN_GS)
        | (1ULL << Gauss200Parser::CONSTRAINT_GS)
        | (1ULL << Gauss200Parser::CREATE_GS)
        | (1ULL << Gauss200Parser::CURRENT_CATALOG_GS)
        | (1ULL << Gauss200Parser::CURRENT_DATE_GS)
        | (1ULL << Gauss200Parser::CURRENT_ROLE_GS)
        | (1ULL << Gauss200Parser::CURRENT_TIMESTAMP_GS)
        | (1ULL << Gauss200Parser::CURRENT_TIME_GS)
        | (1ULL << Gauss200Parser::CURRENT_USER_GS)
        | (1ULL << Gauss200Parser::DEFAULT_GS)
        | (1ULL << Gauss200Parser::DEFERRABLE_GS)
        | (1ULL << Gauss200Parser::DESC_GS)
        | (1ULL << Gauss200Parser::DISTINCT_GS)
        | (1ULL << Gauss200Parser::DO_GS)
        | (1ULL << Gauss200Parser::ELSE_GS)
        | (1ULL << Gauss200Parser::END_GS)
        | (1ULL << Gauss200Parser::EXCEPT_GS)
        | (1ULL << Gauss200Parser::FALSE_GS)
        | (1ULL << Gauss200Parser::FETCH_GS)
        | (1ULL << Gauss200Parser::FOREIGN_GS)
        | (1ULL << Gauss200Parser::FOR_GS)
        | (1ULL << Gauss200Parser::FROM_GS)
        | (1ULL << Gauss200Parser::FUNCTION_GS)
        | (1ULL << Gauss200Parser::GRANT_GS)
        | (1ULL << Gauss200Parser::GROUP_GS)
        | (1ULL << Gauss200Parser::HAVING_GS)
        | (1ULL << Gauss200Parser::INITIALLY_GS)
        | (1ULL << Gauss200Parser::INTERSECT_GS)
        | (1ULL << Gauss200Parser::INTO_GS)
        | (1ULL << Gauss200Parser::IN_GS)
        | (1ULL << Gauss200Parser::IS_GS)
        | (1ULL << Gauss200Parser::LEADING_GS)
        | (1ULL << Gauss200Parser::LESS_GS)
        | (1ULL << Gauss200Parser::LIMIT_GS)
        | (1ULL << Gauss200Parser::LOCALTIMESTAMP_GS)
        | (1ULL << Gauss200Parser::LOCALTIME_GS)
        | (1ULL << Gauss200Parser::MAXVALUE_GS)
        | (1ULL << Gauss200Parser::MINUS_GS)
        | (1ULL << Gauss200Parser::MODIFY_GS)
        | (1ULL << Gauss200Parser::NLSSORT_GS)
        | (1ULL << Gauss200Parser::NOT_GS)
        | (1ULL << Gauss200Parser::NULL_GS)
        | (1ULL << Gauss200Parser::OFFSET_GS)
        | (1ULL << Gauss200Parser::ONLY_GS)
        | (1ULL << Gauss200Parser::ON_GS)
        | (1ULL << Gauss200Parser::ORDER_GS)
        | (1ULL << Gauss200Parser::OR_GS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Gauss200Parser::PERFORMANCE_GS - 64))
        | (1ULL << (Gauss200Parser::PLACING_GS - 64))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 64))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 64))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 64))
        | (1ULL << (Gauss200Parser::REJECT_GS - 64))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 64))
        | (1ULL << (Gauss200Parser::RETURN_GS - 64))
        | (1ULL << (Gauss200Parser::SELECT_GS - 64))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 64))
        | (1ULL << (Gauss200Parser::SOME_GS - 64))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 64))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 64))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 64))
        | (1ULL << (Gauss200Parser::THEN_GS - 64))
        | (1ULL << (Gauss200Parser::TO_GS - 64))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 64))
        | (1ULL << (Gauss200Parser::TRUE_GS - 64))
        | (1ULL << (Gauss200Parser::UNION_GS - 64))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 64))
        | (1ULL << (Gauss200Parser::USER_GS - 64))
        | (1ULL << (Gauss200Parser::USING_GS - 64))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 64))
        | (1ULL << (Gauss200Parser::WHEN_GS - 64))
        | (1ULL << (Gauss200Parser::WHERE_GS - 64))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 64))
        | (1ULL << (Gauss200Parser::WITH_GS - 64))
        | (1ULL << (Gauss200Parser::ABORT_GS - 64))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 64))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 64))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 64))
        | (1ULL << (Gauss200Parser::ACTION_GS - 64))
        | (1ULL << (Gauss200Parser::ADD_GS - 64))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 64))
        | (1ULL << (Gauss200Parser::AFTER_GS - 64))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 64))
        | (1ULL << (Gauss200Parser::ALSO_GS - 64))
        | (1ULL << (Gauss200Parser::ALTER_GS - 64))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 64))
        | (1ULL << (Gauss200Parser::APP_GS - 64))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (Gauss200Parser::ASSIGNMENT_GS - 128))
        | (1ULL << (Gauss200Parser::ATTRIBUTE_GS - 128))
        | (1ULL << (Gauss200Parser::AT_GS - 128))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 128))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 128))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 128))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 128))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 128))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 128))
        | (1ULL << (Gauss200Parser::BLOB_GS - 128))
        | (1ULL << (Gauss200Parser::BY_GS - 128))
        | (1ULL << (Gauss200Parser::CACHE_GS - 128))
        | (1ULL << (Gauss200Parser::CALLED_GS - 128))
        | (1ULL << (Gauss200Parser::CALL_GS - 128))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 128))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 128))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 128))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 128))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 128))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 128))
        | (1ULL << (Gauss200Parser::CLASS_GS - 128))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 128))
        | (1ULL << (Gauss200Parser::CLOB_GS - 128))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 128))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 128))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 128))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 128))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 128))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 128))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 128))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 128))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 128))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 128))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 128))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 128))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 128))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 128))
        | (1ULL << (Gauss200Parser::COPY_GS - 128))
        | (1ULL << (Gauss200Parser::COST_GS - 128))
        | (1ULL << (Gauss200Parser::CSV_GS - 128))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 128))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 128))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 128))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 128))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 128))
        | (1ULL << (Gauss200Parser::DATA_GS - 128))
        | (1ULL << (Gauss200Parser::DAY_GS - 128))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 128))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 128))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 128))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 128))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 128))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 128))
        | (1ULL << (Gauss200Parser::DELETE_GS - 128))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 128))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 128))
        | (1ULL << (Gauss200Parser::DELTA_GS - 128))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 128))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 128))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 128))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 128))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 128))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 128))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (Gauss200Parser::DOCUMENT_GS - 192))
        | (1ULL << (Gauss200Parser::DOMAIN_GS - 192))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 192))
        | (1ULL << (Gauss200Parser::DROP_GS - 192))
        | (1ULL << (Gauss200Parser::EACH_GS - 192))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 192))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 192))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 192))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 192))
        | (1ULL << (Gauss200Parser::ENUM_GS - 192))
        | (1ULL << (Gauss200Parser::EOL_GS - 192))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 192))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 192))
        | (1ULL << (Gauss200Parser::EVERY_GS - 192))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 192))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 192))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 192))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 192))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 192))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 192))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 192))
        | (1ULL << (Gauss200Parser::FIRST_GS - 192))
        | (1ULL << (Gauss200Parser::FIXED_GS - 192))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 192))
        | (1ULL << (Gauss200Parser::FORCE_GS - 192))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 192))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 192))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 192))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 192))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 192))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 192))
        | (1ULL << (Gauss200Parser::HEADER_GS - 192))
        | (1ULL << (Gauss200Parser::HOLD_GS - 192))
        | (1ULL << (Gauss200Parser::HOUR_GS - 192))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 192))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 192))
        | (1ULL << (Gauss200Parser::IF_GS - 192))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 192))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 192))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 192))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 192))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 192))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 192))
        | (1ULL << (Gauss200Parser::INDEX_GS - 192))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 192))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 192))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 192))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 192))
        | (1ULL << (Gauss200Parser::INLINE_GS - 192))
        | (1ULL << (Gauss200Parser::INPUT_GS - 192))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 192))
        | (1ULL << (Gauss200Parser::INSERT_GS - 192))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 192))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 192))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 192))
        | (1ULL << (Gauss200Parser::KEY_GS - 192))
        | (1ULL << (Gauss200Parser::LABEL_GS - 192))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 192))
        | (1ULL << (Gauss200Parser::LARGE_GS - 192))
        | (1ULL << (Gauss200Parser::LAST_GS - 192))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (Gauss200Parser::LC_CTYPE_GS - 256))
        | (1ULL << (Gauss200Parser::LEAKPROOF_GS - 256))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 256))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 256))
        | (1ULL << (Gauss200Parser::LOAD_GS - 256))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 256))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 256))
        | (1ULL << (Gauss200Parser::LOCK_GS - 256))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 256))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 256))
        | (1ULL << (Gauss200Parser::LOG_GS - 256))
        | (1ULL << (Gauss200Parser::LOOP_GS - 256))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 256))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 256))
        | (1ULL << (Gauss200Parser::MATCH_GS - 256))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 256))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 256))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 256))
        | (1ULL << (Gauss200Parser::MERGE_GS - 256))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 256))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 256))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::MODE_GS - 256))
        | (1ULL << (Gauss200Parser::MONTH_GS - 256))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 256))
        | (1ULL << (Gauss200Parser::MOVE_GS - 256))
        | (1ULL << (Gauss200Parser::NAMES_GS - 256))
        | (1ULL << (Gauss200Parser::NAME_GS - 256))
        | (1ULL << (Gauss200Parser::NEXT_GS - 256))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 256))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 256))
        | (1ULL << (Gauss200Parser::NODE_GS - 256))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 256))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 256))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 256))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 256))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 256))
        | (1ULL << (Gauss200Parser::NO_GS - 256))
        | (1ULL << (Gauss200Parser::NULLS_GS - 256))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 256))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 256))
        | (1ULL << (Gauss200Parser::OFF_GS - 256))
        | (1ULL << (Gauss200Parser::OF_GS - 256))
        | (1ULL << (Gauss200Parser::OIDS_GS - 256))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 256))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 256))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 256))
        | (1ULL << (Gauss200Parser::OPTION_GS - 256))
        | (1ULL << (Gauss200Parser::OWNED_GS - 256))
        | (1ULL << (Gauss200Parser::OWNER_GS - 256))
        | (1ULL << (Gauss200Parser::PARSER_GS - 256))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 256))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 256))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 256))
        | (1ULL << (Gauss200Parser::PASSING_GS - 256))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 256))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 256))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 256))
        | (1ULL << (Gauss200Parser::PER_GS - 256))
        | (1ULL << (Gauss200Parser::PLANS_GS - 256))
        | (1ULL << (Gauss200Parser::POOL_GS - 256))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (Gauss200Parser::PREFERRED_GS - 320))
        | (1ULL << (Gauss200Parser::PREFIX_GS - 320))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 320))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 320))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 320))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 320))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 320))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 320))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 320))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 320))
        | (1ULL << (Gauss200Parser::QUERY_GS - 320))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 320))
        | (1ULL << (Gauss200Parser::RANGE_GS - 320))
        | (1ULL << (Gauss200Parser::RAW_GS - 320))
        | (1ULL << (Gauss200Parser::READ_GS - 320))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 320))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 320))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 320))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 320))
        | (1ULL << (Gauss200Parser::REF_GS - 320))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 320))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 320))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 320))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 320))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 320))
        | (1ULL << (Gauss200Parser::RENAME_GS - 320))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 320))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 320))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 320))
        | (1ULL << (Gauss200Parser::RESET_GS - 320))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 320))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 320))
        | (1ULL << (Gauss200Parser::RESTART_GS - 320))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 320))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 320))
        | (1ULL << (Gauss200Parser::REUSE_GS - 320))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 320))
        | (1ULL << (Gauss200Parser::ROLE_GS - 320))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 320))
        | (1ULL << (Gauss200Parser::ROWS_GS - 320))
        | (1ULL << (Gauss200Parser::RULE_GS - 320))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 320))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 320))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 320))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 320))
        | (1ULL << (Gauss200Parser::SECOND_GS - 320))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 320))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 320))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 320))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 320))
        | (1ULL << (Gauss200Parser::SERVER_GS - 320))
        | (1ULL << (Gauss200Parser::SESSION_GS - 320))
        | (1ULL << (Gauss200Parser::SET_GS - 320))
        | (1ULL << (Gauss200Parser::SHARE_GS - 320))
        | (1ULL << (Gauss200Parser::SHOW_GS - 320))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 320))
        | (1ULL << (Gauss200Parser::SIZE_GS - 320))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 320))
        | (1ULL << (Gauss200Parser::STABLE_GS - 320))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 320))
        | (1ULL << (Gauss200Parser::START_GS - 320))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 320))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 320))
        | (1ULL << (Gauss200Parser::STDIN_GS - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 384)) & ((1ULL << (Gauss200Parser::STDOUT_GS - 384))
        | (1ULL << (Gauss200Parser::STORAGE_GS - 384))
        | (1ULL << (Gauss200Parser::STORE_GS - 384))
        | (1ULL << (Gauss200Parser::STRICT_GS - 384))
        | (1ULL << (Gauss200Parser::STRIP_GS - 384))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 384))
        | (1ULL << (Gauss200Parser::SYSID_GS - 384))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 384))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 384))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 384))
        | (1ULL << (Gauss200Parser::TABLES_GS - 384))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 384))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 384))
        | (1ULL << (Gauss200Parser::TEMP_GS - 384))
        | (1ULL << (Gauss200Parser::TEXT_GS - 384))
        | (1ULL << (Gauss200Parser::THAN_GS - 384))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 384))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 384))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 384))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 384))
        | (1ULL << (Gauss200Parser::TYPES_GS - 384))
        | (1ULL << (Gauss200Parser::TYPE_GS - 384))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 384))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 384))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 384))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 384))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 384))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 384))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 384))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 384))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 384))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 384))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 384))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 384))
        | (1ULL << (Gauss200Parser::VALID_GS - 384))
        | (1ULL << (Gauss200Parser::VALUE_GS - 384))
        | (1ULL << (Gauss200Parser::VARYING_GS - 384))
        | (1ULL << (Gauss200Parser::VERSION_GS - 384))
        | (1ULL << (Gauss200Parser::VIEW_GS - 384))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 384))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 384))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 384))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 384))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 384))
        | (1ULL << (Gauss200Parser::WORK_GS - 384))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 384))
        | (1ULL << (Gauss200Parser::WRITE_GS - 384))
        | (1ULL << (Gauss200Parser::XML_GS - 384))
        | (1ULL << (Gauss200Parser::YEAR_GS - 384))
        | (1ULL << (Gauss200Parser::YES_GS - 384))
        | (1ULL << (Gauss200Parser::ZONE_GS - 384))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 384))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 384))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 384))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 384))
        | (1ULL << (Gauss200Parser::BIT_GS - 384))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 384))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 384))
        | (1ULL << (Gauss200Parser::CHAR_GS - 384))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 384))
        | (1ULL << (Gauss200Parser::DATE_GS - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 448)) & ((1ULL << (Gauss200Parser::DECIMAL_GS - 448))
        | (1ULL << (Gauss200Parser::DECODE_GS - 448))
        | (1ULL << (Gauss200Parser::DEC_GS - 448))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 448))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 448))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 448))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 448))
        | (1ULL << (Gauss200Parser::INOUT_GS - 448))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 448))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 448))
        | (1ULL << (Gauss200Parser::INT_GS - 448))
        | (1ULL << (Gauss200Parser::LEAST_GS - 448))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 448))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 448))
        | (1ULL << (Gauss200Parser::NONE_GS - 448))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 448))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 448))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 448))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 448))
        | (1ULL << (Gauss200Parser::NVL_GS - 448))
        | (1ULL << (Gauss200Parser::OUT_GS - 448))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 448))
        | (1ULL << (Gauss200Parser::POSITION_GS - 448))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 448))
        | (1ULL << (Gauss200Parser::REAL_GS - 448))
        | (1ULL << (Gauss200Parser::ROW_GS - 448))
        | (1ULL << (Gauss200Parser::SETOF_GS - 448))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 448))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 448))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 448))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 448))
        | (1ULL << (Gauss200Parser::TIME_GS - 448))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 448))
        | (1ULL << (Gauss200Parser::TREAT_GS - 448))
        | (1ULL << (Gauss200Parser::TRIM_GS - 448))
        | (1ULL << (Gauss200Parser::VALUES_GS - 448))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 448))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 448))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 448))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 448))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 448))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 448))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 448))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 448))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 448))
        | (1ULL << (Gauss200Parser::PATH_GS - 448)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
        | (1ULL << (Gauss200Parser::USAGE_GS - 516))
        | (1ULL << (Gauss200Parser::SPACE_GS - 516))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::COMMA - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601)))) != 0));
      setState(3340);
      match(Gauss200Parser::RIGHT_PAREN);
    }
    setState(3344);
    match(Gauss200Parser::FOR_GS);
    setState(3345);
    select_stmt();
    setState(3346);
    match(Gauss200Parser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_specContext ------------------------------------------------------------------

Gauss200Parser::Parameter_specContext::Parameter_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Parameter_nameContext* Gauss200Parser::Parameter_specContext::parameter_name() {
  return getRuleContext<Gauss200Parser::Parameter_nameContext>(0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Parameter_specContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}


size_t Gauss200Parser::Parameter_specContext::getRuleIndex() const {
  return Gauss200Parser::RuleParameter_spec;
}

void Gauss200Parser::Parameter_specContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_spec(this);
}

void Gauss200Parser::Parameter_specContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_spec(this);
}


antlrcpp::Any Gauss200Parser::Parameter_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParameter_spec(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Parameter_specContext* Gauss200Parser::parameter_spec() {
  Parameter_specContext *_localctx = _tracker.createInstance<Parameter_specContext>(_ctx, getState());
  enterRule(_localctx, 476, Gauss200Parser::RuleParameter_spec);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3348);
    parameter_name();
    setState(3349);
    typename_gs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_of_statementsContext ------------------------------------------------------------------

Gauss200Parser::Sequence_of_statementsContext::Sequence_of_statementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Sequence_of_statementContext *> Gauss200Parser::Sequence_of_statementsContext::sequence_of_statement() {
  return getRuleContexts<Gauss200Parser::Sequence_of_statementContext>();
}

Gauss200Parser::Sequence_of_statementContext* Gauss200Parser::Sequence_of_statementsContext::sequence_of_statement(size_t i) {
  return getRuleContext<Gauss200Parser::Sequence_of_statementContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Sequence_of_statementsContext::SEMICOLON() {
  return getTokens(Gauss200Parser::SEMICOLON);
}

tree::TerminalNode* Gauss200Parser::Sequence_of_statementsContext::SEMICOLON(size_t i) {
  return getToken(Gauss200Parser::SEMICOLON, i);
}


size_t Gauss200Parser::Sequence_of_statementsContext::getRuleIndex() const {
  return Gauss200Parser::RuleSequence_of_statements;
}

void Gauss200Parser::Sequence_of_statementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_of_statements(this);
}

void Gauss200Parser::Sequence_of_statementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_of_statements(this);
}


antlrcpp::Any Gauss200Parser::Sequence_of_statementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSequence_of_statements(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Sequence_of_statementsContext* Gauss200Parser::sequence_of_statements() {
  Sequence_of_statementsContext *_localctx = _tracker.createInstance<Sequence_of_statementsContext>(_ctx, getState());
  enterRule(_localctx, 478, Gauss200Parser::RuleSequence_of_statements);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3351);
    sequence_of_statement();
    setState(3356);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3352);
        match(Gauss200Parser::SEMICOLON);
        setState(3353);
        sequence_of_statement(); 
      }
      setState(3358);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    }
    setState(3360);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::SEMICOLON) {
      setState(3359);
      match(Gauss200Parser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_of_statementContext ------------------------------------------------------------------

Gauss200Parser::Sequence_of_statementContext::Sequence_of_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::StmtContext* Gauss200Parser::Sequence_of_statementContext::stmt() {
  return getRuleContext<Gauss200Parser::StmtContext>(0);
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::Sequence_of_statementContext::assignment_stmt() {
  return getRuleContext<Gauss200Parser::Assignment_stmtContext>(0);
}


size_t Gauss200Parser::Sequence_of_statementContext::getRuleIndex() const {
  return Gauss200Parser::RuleSequence_of_statement;
}

void Gauss200Parser::Sequence_of_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_of_statement(this);
}

void Gauss200Parser::Sequence_of_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_of_statement(this);
}


antlrcpp::Any Gauss200Parser::Sequence_of_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSequence_of_statement(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Sequence_of_statementContext* Gauss200Parser::sequence_of_statement() {
  Sequence_of_statementContext *_localctx = _tracker.createInstance<Sequence_of_statementContext>(_ctx, getState());
  enterRule(_localctx, 480, Gauss200Parser::RuleSequence_of_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3364);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3362);
      stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3363);
      assignment_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_group_stmtContext::Create_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_group_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Create_group_stmtContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

Gauss200Parser::Alter_role_encrypt_optionContext* Gauss200Parser::Create_group_stmtContext::alter_role_encrypt_option() {
  return getRuleContext<Gauss200Parser::Alter_role_encrypt_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_group_stmtContext::ENCRYPTED_GS() {
  return getToken(Gauss200Parser::ENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_stmtContext::UNENCRYPTED_GS() {
  return getToken(Gauss200Parser::UNENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_group_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::Alter_role_with_optionContext *> Gauss200Parser::Create_group_stmtContext::alter_role_with_option() {
  return getRuleContexts<Gauss200Parser::Alter_role_with_optionContext>();
}

Gauss200Parser::Alter_role_with_optionContext* Gauss200Parser::Create_group_stmtContext::alter_role_with_option(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_role_with_optionContext>(i);
}


size_t Gauss200Parser::Create_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_group_stmt;
}

void Gauss200Parser::Create_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_group_stmt(this);
}

void Gauss200Parser::Create_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_group_stmtContext* Gauss200Parser::create_group_stmt() {
  Create_group_stmtContext *_localctx = _tracker.createInstance<Create_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 482, Gauss200Parser::RuleCreate_group_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3366);
    match(Gauss200Parser::CREATE_GS);
    setState(3367);
    match(Gauss200Parser::GROUP_GS);
    setState(3368);
    group_name();
    setState(3377);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
    case 1: {
      setState(3370);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(3369);
        match(Gauss200Parser::WITH_GS);
      }
      setState(3373); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3372);
                alter_role_with_option();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3375); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    }
    setState(3380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS) {
      setState(3379);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3382);
    alter_role_encrypt_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_index_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_index_stmtContext::Create_index_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_index_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_index_stmtContext::INDEX_GS() {
  return getToken(Gauss200Parser::INDEX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_index_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_index_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Create_index_column_listContext* Gauss200Parser::Create_index_stmtContext::create_index_column_list() {
  return getRuleContext<Gauss200Parser::Create_index_column_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_index_stmtContext::UNIQUE_GS() {
  return getToken(Gauss200Parser::UNIQUE_GS, 0);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Create_index_stmtContext::index_name() {
  return getRuleContext<Gauss200Parser::Index_nameContext>(0);
}

Gauss200Parser::Using_expr_optionContext* Gauss200Parser::Create_index_stmtContext::using_expr_option() {
  return getRuleContext<Gauss200Parser::Using_expr_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_index_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Create_index_stmtContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Create_index_stmtContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_index_stmtContext::WHERE_GS() {
  return getToken(Gauss200Parser::WHERE_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Create_index_stmtContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Create_index_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_index_stmt;
}

void Gauss200Parser::Create_index_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_index_stmt(this);
}

void Gauss200Parser::Create_index_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_index_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_index_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_index_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_index_stmtContext* Gauss200Parser::create_index_stmt() {
  Create_index_stmtContext *_localctx = _tracker.createInstance<Create_index_stmtContext>(_ctx, getState());
  enterRule(_localctx, 484, Gauss200Parser::RuleCreate_index_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3384);
    match(Gauss200Parser::CREATE_GS);
    setState(3386);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::UNIQUE_GS) {
      setState(3385);
      match(Gauss200Parser::UNIQUE_GS);
    }
    setState(3388);
    match(Gauss200Parser::INDEX_GS);
    setState(3390);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
    case 1: {
      setState(3389);
      index_name();
      break;
    }

    }
    setState(3392);
    match(Gauss200Parser::ON_GS);
    setState(3393);
    table_name();
    setState(3395);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx)) {
    case 1: {
      setState(3394);
      using_expr_option();
      break;
    }

    }
    setState(3397);
    create_index_column_list();
    setState(3400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3398);
      match(Gauss200Parser::WITH_GS);
      setState(3399);
      paren_assignment_stmt_list();
    }
    setState(3403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLESPACE_GS) {
      setState(3402);
      tablespace_name_option();
    }
    setState(3407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WHERE_GS) {
      setState(3405);
      match(Gauss200Parser::WHERE_GS);
      setState(3406);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_index_column_listContext ------------------------------------------------------------------

Gauss200Parser::Create_index_column_listContext::Create_index_column_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Create_index_columnContext *> Gauss200Parser::Create_index_column_listContext::create_index_column() {
  return getRuleContexts<Gauss200Parser::Create_index_columnContext>();
}

Gauss200Parser::Create_index_columnContext* Gauss200Parser::Create_index_column_listContext::create_index_column(size_t i) {
  return getRuleContext<Gauss200Parser::Create_index_columnContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_index_column_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Create_index_column_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Create_index_column_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_index_column_list;
}

void Gauss200Parser::Create_index_column_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_index_column_list(this);
}

void Gauss200Parser::Create_index_column_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_index_column_list(this);
}


antlrcpp::Any Gauss200Parser::Create_index_column_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_index_column_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_index_column_listContext* Gauss200Parser::create_index_column_list() {
  Create_index_column_listContext *_localctx = _tracker.createInstance<Create_index_column_listContext>(_ctx, getState());
  enterRule(_localctx, 486, Gauss200Parser::RuleCreate_index_column_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3409);
    create_index_column();
    setState(3414);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(3410);
      match(Gauss200Parser::COMMA);
      setState(3411);
      create_index_column();
      setState(3416);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_index_columnContext ------------------------------------------------------------------

Gauss200Parser::Create_index_columnContext::Create_index_columnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Create_index_columnContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_index_columnContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Create_index_columnContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_index_columnContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Collate_optionContext* Gauss200Parser::Create_index_columnContext::collate_option() {
  return getRuleContext<Gauss200Parser::Collate_optionContext>(0);
}

Gauss200Parser::OpclassContext* Gauss200Parser::Create_index_columnContext::opclass() {
  return getRuleContext<Gauss200Parser::OpclassContext>(0);
}

Gauss200Parser::Asc_descContext* Gauss200Parser::Create_index_columnContext::asc_desc() {
  return getRuleContext<Gauss200Parser::Asc_descContext>(0);
}

Gauss200Parser::Nulls_first_lastContext* Gauss200Parser::Create_index_columnContext::nulls_first_last() {
  return getRuleContext<Gauss200Parser::Nulls_first_lastContext>(0);
}


size_t Gauss200Parser::Create_index_columnContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_index_column;
}

void Gauss200Parser::Create_index_columnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_index_column(this);
}

void Gauss200Parser::Create_index_columnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_index_column(this);
}


antlrcpp::Any Gauss200Parser::Create_index_columnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_index_column(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_index_columnContext* Gauss200Parser::create_index_column() {
  Create_index_columnContext *_localctx = _tracker.createInstance<Create_index_columnContext>(_ctx, getState());
  enterRule(_localctx, 488, Gauss200Parser::RuleCreate_index_column);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3422);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::BETWEEN_GS:
      case Gauss200Parser::BIGINT_GS:
      case Gauss200Parser::BINARY_DOUBLE_GS:
      case Gauss200Parser::BINARY_INTEGER_GS:
      case Gauss200Parser::BIT_GS:
      case Gauss200Parser::BOOLEAN_GS:
      case Gauss200Parser::CHARACTER_GS:
      case Gauss200Parser::CHAR_GS:
      case Gauss200Parser::COALESCE_GS:
      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::DECIMAL_GS:
      case Gauss200Parser::DECODE_GS:
      case Gauss200Parser::DEC_GS:
      case Gauss200Parser::EXISTS_GS:
      case Gauss200Parser::EXTRACT_GS:
      case Gauss200Parser::FLOAT_GS:
      case Gauss200Parser::GREATEST_GS:
      case Gauss200Parser::INOUT_GS:
      case Gauss200Parser::INTEGER_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::INT_GS:
      case Gauss200Parser::LEAST_GS:
      case Gauss200Parser::NATIONAL_GS:
      case Gauss200Parser::NCHAR_GS:
      case Gauss200Parser::NONE_GS:
      case Gauss200Parser::NULLIF_GS:
      case Gauss200Parser::NUMBER_GS:
      case Gauss200Parser::NUMERIC_GS:
      case Gauss200Parser::NVARCHAR2_GS:
      case Gauss200Parser::NVL_GS:
      case Gauss200Parser::OUT_GS:
      case Gauss200Parser::OVERLAY_GS:
      case Gauss200Parser::POSITION_GS:
      case Gauss200Parser::PRECISION_GS:
      case Gauss200Parser::REAL_GS:
      case Gauss200Parser::ROW_GS:
      case Gauss200Parser::SETOF_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::SMALLINT_GS:
      case Gauss200Parser::SUBSTRING_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::TINYINT_GS:
      case Gauss200Parser::TREAT_GS:
      case Gauss200Parser::TRIM_GS:
      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::VARCHAR2_GS:
      case Gauss200Parser::VARCHAR_GS:
      case Gauss200Parser::XMLATTRIBUTES_GS:
      case Gauss200Parser::XMLCONCAT_GS:
      case Gauss200Parser::XMLELEMENT_GS:
      case Gauss200Parser::XMLEXISTS_GS:
      case Gauss200Parser::XMLFOREST_GS:
      case Gauss200Parser::XMLPARSE_GS:
      case Gauss200Parser::XMLPI_GS:
      case Gauss200Parser::XMLROOT_GS:
      case Gauss200Parser::XMLSERIALIZE_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::CHAR_STRING:
      case Gauss200Parser::REGULAR_ID:
      case Gauss200Parser::SCONST: {
        setState(3417);
        column_name();
        break;
      }

      case Gauss200Parser::LEFT_PAREN: {
        setState(3418);
        match(Gauss200Parser::LEFT_PAREN);
        setState(3419);
        expression();
        setState(3420);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3425);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
    case 1: {
      setState(3424);
      collate_option();
      break;
    }

    }
    setState(3428);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      setState(3427);
      opclass();
      break;
    }

    }
    setState(3431);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ASC_GS

    || _la == Gauss200Parser::DESC_GS) {
      setState(3430);
      asc_desc();
    }
    setState(3434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::NULLS_GS) {
      setState(3433);
      nulls_first_last();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpclassContext ------------------------------------------------------------------

Gauss200Parser::OpclassContext::OpclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::OpclassContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::OpclassContext::getRuleIndex() const {
  return Gauss200Parser::RuleOpclass;
}

void Gauss200Parser::OpclassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpclass(this);
}

void Gauss200Parser::OpclassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpclass(this);
}


antlrcpp::Any Gauss200Parser::OpclassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOpclass(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::OpclassContext* Gauss200Parser::opclass() {
  OpclassContext *_localctx = _tracker.createInstance<OpclassContext>(_ctx, getState());
  enterRule(_localctx, 490, Gauss200Parser::RuleOpclass);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3436);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Asc_descContext ------------------------------------------------------------------

Gauss200Parser::Asc_descContext::Asc_descContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Asc_descContext::ASC_GS() {
  return getToken(Gauss200Parser::ASC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Asc_descContext::DESC_GS() {
  return getToken(Gauss200Parser::DESC_GS, 0);
}


size_t Gauss200Parser::Asc_descContext::getRuleIndex() const {
  return Gauss200Parser::RuleAsc_desc;
}

void Gauss200Parser::Asc_descContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsc_desc(this);
}

void Gauss200Parser::Asc_descContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsc_desc(this);
}


antlrcpp::Any Gauss200Parser::Asc_descContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAsc_desc(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Asc_descContext* Gauss200Parser::asc_desc() {
  Asc_descContext *_localctx = _tracker.createInstance<Asc_descContext>(_ctx, getState());
  enterRule(_localctx, 492, Gauss200Parser::RuleAsc_desc);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3438);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::ASC_GS

    || _la == Gauss200Parser::DESC_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nulls_first_lastContext ------------------------------------------------------------------

Gauss200Parser::Nulls_first_lastContext::Nulls_first_lastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Nulls_first_lastContext::NULLS_GS() {
  return getToken(Gauss200Parser::NULLS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nulls_first_lastContext::FIRST_GS() {
  return getToken(Gauss200Parser::FIRST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nulls_first_lastContext::LAST_GS() {
  return getToken(Gauss200Parser::LAST_GS, 0);
}


size_t Gauss200Parser::Nulls_first_lastContext::getRuleIndex() const {
  return Gauss200Parser::RuleNulls_first_last;
}

void Gauss200Parser::Nulls_first_lastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNulls_first_last(this);
}

void Gauss200Parser::Nulls_first_lastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNulls_first_last(this);
}


antlrcpp::Any Gauss200Parser::Nulls_first_lastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNulls_first_last(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Nulls_first_lastContext* Gauss200Parser::nulls_first_last() {
  Nulls_first_lastContext *_localctx = _tracker.createInstance<Nulls_first_lastContext>(_ctx, getState());
  enterRule(_localctx, 494, Gauss200Parser::RuleNulls_first_last);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3440);
    match(Gauss200Parser::NULLS_GS);
    setState(3441);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::FIRST_GS

    || _la == Gauss200Parser::LAST_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_node_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_node_stmtContext::Create_node_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_node_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_node_stmtContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::NodenameContext* Gauss200Parser::Create_node_stmtContext::nodename() {
  return getRuleContext<Gauss200Parser::NodenameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_node_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Create_node_stmtContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}


size_t Gauss200Parser::Create_node_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_node_stmt;
}

void Gauss200Parser::Create_node_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_node_stmt(this);
}

void Gauss200Parser::Create_node_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_node_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_node_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_node_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_node_stmtContext* Gauss200Parser::create_node_stmt() {
  Create_node_stmtContext *_localctx = _tracker.createInstance<Create_node_stmtContext>(_ctx, getState());
  enterRule(_localctx, 496, Gauss200Parser::RuleCreate_node_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3443);
    match(Gauss200Parser::CREATE_GS);
    setState(3444);
    match(Gauss200Parser::NODE_GS);
    setState(3445);
    nodename();
    setState(3446);
    match(Gauss200Parser::WITH_GS);
    setState(3447);
    paren_assignment_stmt_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_node_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_node_group_stmtContext::Create_node_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

std::vector<Gauss200Parser::Group_nameContext *> Gauss200Parser::Create_node_group_stmtContext::group_name() {
  return getRuleContexts<Gauss200Parser::Group_nameContext>();
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Create_node_group_stmtContext::group_name(size_t i) {
  return getRuleContext<Gauss200Parser::Group_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Create_node_group_stmtContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::BUCKETS_GS() {
  return getToken(Gauss200Parser::BUCKETS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::VCGROUP_GS() {
  return getToken(Gauss200Parser::VCGROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::DISTRIBUTE_GS() {
  return getToken(Gauss200Parser::DISTRIBUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_node_group_stmtContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::Create_node_group_stmtContext::paren_expr_list() {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(0);
}


size_t Gauss200Parser::Create_node_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_node_group_stmt;
}

void Gauss200Parser::Create_node_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_node_group_stmt(this);
}

void Gauss200Parser::Create_node_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_node_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_node_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_node_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_node_group_stmtContext* Gauss200Parser::create_node_group_stmt() {
  Create_node_group_stmtContext *_localctx = _tracker.createInstance<Create_node_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 498, Gauss200Parser::RuleCreate_node_group_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3449);
    match(Gauss200Parser::CREATE_GS);
    setState(3450);
    match(Gauss200Parser::NODE_GS);
    setState(3451);
    match(Gauss200Parser::GROUP_GS);
    setState(3452);
    group_name();
    setState(3453);
    match(Gauss200Parser::WITH_GS);
    setState(3454);
    paren_node_list();
    setState(3459);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::BUCKETS_GS) {
      setState(3455);
      match(Gauss200Parser::BUCKETS_GS);
      setState(3457);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::LEFT_PAREN) {
        setState(3456);
        paren_expr_list();
      }
    }
    setState(3462);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::VCGROUP_GS) {
      setState(3461);
      match(Gauss200Parser::VCGROUP_GS);
    }
    setState(3467);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DISTRIBUTE_GS) {
      setState(3464);
      match(Gauss200Parser::DISTRIBUTE_GS);
      setState(3465);
      match(Gauss200Parser::FROM_GS);
      setState(3466);
      group_name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_row_level_security_policy_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_row_level_security_policy_stmtContext::Create_row_level_security_policy_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::POLICY_GS() {
  return getToken(Gauss200Parser::POLICY_GS, 0);
}

Gauss200Parser::Policy_nameContext* Gauss200Parser::Create_row_level_security_policy_stmtContext::policy_name() {
  return getRuleContext<Gauss200Parser::Policy_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_row_level_security_policy_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Using_expr_optionContext* Gauss200Parser::Create_row_level_security_policy_stmtContext::using_expr_option() {
  return getRuleContext<Gauss200Parser::Using_expr_optionContext>(0);
}

Gauss200Parser::Row_level_securityContext* Gauss200Parser::Create_row_level_security_policy_stmtContext::row_level_security() {
  return getRuleContext<Gauss200Parser::Row_level_securityContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::Row_level_security_policy_objectsContext* Gauss200Parser::Create_row_level_security_policy_stmtContext::row_level_security_policy_objects() {
  return getRuleContext<Gauss200Parser::Row_level_security_policy_objectsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::PERMISSIVE_GS() {
  return getToken(Gauss200Parser::PERMISSIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::RESTRICTIVE_GS() {
  return getToken(Gauss200Parser::RESTRICTIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_row_level_security_policy_stmtContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

Gauss200Parser::Table_privilegeContext* Gauss200Parser::Create_row_level_security_policy_stmtContext::table_privilege() {
  return getRuleContext<Gauss200Parser::Table_privilegeContext>(0);
}


size_t Gauss200Parser::Create_row_level_security_policy_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_row_level_security_policy_stmt;
}

void Gauss200Parser::Create_row_level_security_policy_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_row_level_security_policy_stmt(this);
}

void Gauss200Parser::Create_row_level_security_policy_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_row_level_security_policy_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_row_level_security_policy_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_row_level_security_policy_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_row_level_security_policy_stmtContext* Gauss200Parser::create_row_level_security_policy_stmt() {
  Create_row_level_security_policy_stmtContext *_localctx = _tracker.createInstance<Create_row_level_security_policy_stmtContext>(_ctx, getState());
  enterRule(_localctx, 500, Gauss200Parser::RuleCreate_row_level_security_policy_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3469);
    match(Gauss200Parser::CREATE_GS);
    setState(3471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ROW_GS) {
      setState(3470);
      row_level_security();
    }
    setState(3473);
    match(Gauss200Parser::POLICY_GS);
    setState(3474);
    policy_name();
    setState(3475);
    match(Gauss200Parser::ON_GS);
    setState(3476);
    table_name();
    setState(3479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::AS_GS) {
      setState(3477);
      match(Gauss200Parser::AS_GS);
      setState(3478);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::PERMISSIVE_GS

      || _la == Gauss200Parser::RESTRICTIVE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FOR_GS) {
      setState(3481);
      match(Gauss200Parser::FOR_GS);
      setState(3484);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::ALL_GS: {
          setState(3482);
          match(Gauss200Parser::ALL_GS);
          break;
        }

        case Gauss200Parser::REFERENCES_GS:
        case Gauss200Parser::SELECT_GS:
        case Gauss200Parser::DELETE_GS:
        case Gauss200Parser::INSERT_GS:
        case Gauss200Parser::TRUNCATE_GS:
        case Gauss200Parser::UPDATE_GS: {
          setState(3483);
          table_privilege();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(3490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TO_GS) {
      setState(3488);
      match(Gauss200Parser::TO_GS);
      setState(3489);
      row_level_security_policy_objects();
    }
    setState(3492);
    using_expr_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_level_security_policy_objectsContext ------------------------------------------------------------------

Gauss200Parser::Row_level_security_policy_objectsContext::Row_level_security_policy_objectsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Row_level_security_policy_objContext *> Gauss200Parser::Row_level_security_policy_objectsContext::row_level_security_policy_obj() {
  return getRuleContexts<Gauss200Parser::Row_level_security_policy_objContext>();
}

Gauss200Parser::Row_level_security_policy_objContext* Gauss200Parser::Row_level_security_policy_objectsContext::row_level_security_policy_obj(size_t i) {
  return getRuleContext<Gauss200Parser::Row_level_security_policy_objContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Row_level_security_policy_objectsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Row_level_security_policy_objectsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Row_level_security_policy_objectsContext::getRuleIndex() const {
  return Gauss200Parser::RuleRow_level_security_policy_objects;
}

void Gauss200Parser::Row_level_security_policy_objectsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRow_level_security_policy_objects(this);
}

void Gauss200Parser::Row_level_security_policy_objectsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRow_level_security_policy_objects(this);
}


antlrcpp::Any Gauss200Parser::Row_level_security_policy_objectsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRow_level_security_policy_objects(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Row_level_security_policy_objectsContext* Gauss200Parser::row_level_security_policy_objects() {
  Row_level_security_policy_objectsContext *_localctx = _tracker.createInstance<Row_level_security_policy_objectsContext>(_ctx, getState());
  enterRule(_localctx, 502, Gauss200Parser::RuleRow_level_security_policy_objects);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3494);
    row_level_security_policy_obj();
    setState(3499);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(3495);
      match(Gauss200Parser::COMMA);
      setState(3496);
      row_level_security_policy_obj();
      setState(3501);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_level_security_policy_objContext ------------------------------------------------------------------

Gauss200Parser::Row_level_security_policy_objContext::Row_level_security_policy_objContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Row_level_security_policy_objContext::role_name() {
  return getRuleContext<Gauss200Parser::Role_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Row_level_security_policy_objContext::PUBLIC_GS() {
  return getToken(Gauss200Parser::PUBLIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Row_level_security_policy_objContext::CURRENT_USER_GS() {
  return getToken(Gauss200Parser::CURRENT_USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Row_level_security_policy_objContext::SESSION_USER_GS() {
  return getToken(Gauss200Parser::SESSION_USER_GS, 0);
}


size_t Gauss200Parser::Row_level_security_policy_objContext::getRuleIndex() const {
  return Gauss200Parser::RuleRow_level_security_policy_obj;
}

void Gauss200Parser::Row_level_security_policy_objContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRow_level_security_policy_obj(this);
}

void Gauss200Parser::Row_level_security_policy_objContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRow_level_security_policy_obj(this);
}


antlrcpp::Any Gauss200Parser::Row_level_security_policy_objContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRow_level_security_policy_obj(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Row_level_security_policy_objContext* Gauss200Parser::row_level_security_policy_obj() {
  Row_level_security_policy_objContext *_localctx = _tracker.createInstance<Row_level_security_policy_objContext>(_ctx, getState());
  enterRule(_localctx, 504, Gauss200Parser::RuleRow_level_security_policy_obj);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3502);
      role_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3503);
      match(Gauss200Parser::PUBLIC_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3504);
      match(Gauss200Parser::CURRENT_USER_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3505);
      match(Gauss200Parser::SESSION_USER_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_resource_pool_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_resource_pool_stmtContext::Create_resource_pool_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_resource_pool_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_resource_pool_stmtContext::RESOURCE_GS() {
  return getToken(Gauss200Parser::RESOURCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_resource_pool_stmtContext::POOL_GS() {
  return getToken(Gauss200Parser::POOL_GS, 0);
}

Gauss200Parser::Pool_nameContext* Gauss200Parser::Create_resource_pool_stmtContext::pool_name() {
  return getRuleContext<Gauss200Parser::Pool_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_resource_pool_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Create_resource_pool_stmtContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}


size_t Gauss200Parser::Create_resource_pool_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_resource_pool_stmt;
}

void Gauss200Parser::Create_resource_pool_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_resource_pool_stmt(this);
}

void Gauss200Parser::Create_resource_pool_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_resource_pool_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_resource_pool_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_resource_pool_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_resource_pool_stmtContext* Gauss200Parser::create_resource_pool_stmt() {
  Create_resource_pool_stmtContext *_localctx = _tracker.createInstance<Create_resource_pool_stmtContext>(_ctx, getState());
  enterRule(_localctx, 506, Gauss200Parser::RuleCreate_resource_pool_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3508);
    match(Gauss200Parser::CREATE_GS);
    setState(3509);
    match(Gauss200Parser::RESOURCE_GS);
    setState(3510);
    match(Gauss200Parser::POOL_GS);
    setState(3511);
    pool_name();
    setState(3514);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3512);
      match(Gauss200Parser::WITH_GS);
      setState(3513);
      paren_assignment_stmt_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_role_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_role_stmtContext::Create_role_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_role_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_stmtContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Create_role_stmtContext::role_name() {
  return getRuleContext<Gauss200Parser::Role_nameContext>(0);
}

Gauss200Parser::Alter_role_encrypt_optionContext* Gauss200Parser::Create_role_stmtContext::alter_role_encrypt_option() {
  return getRuleContext<Gauss200Parser::Alter_role_encrypt_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_role_stmtContext::ENCRYPTED_GS() {
  return getToken(Gauss200Parser::ENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_stmtContext::UNENCRYPTED_GS() {
  return getToken(Gauss200Parser::UNENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::Create_role_with_optionContext *> Gauss200Parser::Create_role_stmtContext::create_role_with_option() {
  return getRuleContexts<Gauss200Parser::Create_role_with_optionContext>();
}

Gauss200Parser::Create_role_with_optionContext* Gauss200Parser::Create_role_stmtContext::create_role_with_option(size_t i) {
  return getRuleContext<Gauss200Parser::Create_role_with_optionContext>(i);
}


size_t Gauss200Parser::Create_role_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_role_stmt;
}

void Gauss200Parser::Create_role_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_role_stmt(this);
}

void Gauss200Parser::Create_role_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_role_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_role_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_role_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_role_stmtContext* Gauss200Parser::create_role_stmt() {
  Create_role_stmtContext *_localctx = _tracker.createInstance<Create_role_stmtContext>(_ctx, getState());
  enterRule(_localctx, 508, Gauss200Parser::RuleCreate_role_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3516);
    match(Gauss200Parser::CREATE_GS);
    setState(3517);
    match(Gauss200Parser::ROLE_GS);
    setState(3518);
    role_name();
    setState(3527);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DEFAULT_GS

    || _la == Gauss200Parser::IN_GS || ((((_la - 85) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 85)) & ((1ULL << (Gauss200Parser::USER_GS - 85))
      | (1ULL << (Gauss200Parser::WITH_GS - 85))
      | (1ULL << (Gauss200Parser::ADMIN_GS - 85)))) != 0) || _la == Gauss200Parser::CONNECTION_GS || ((((_la - 240) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 240)) & ((1ULL << (Gauss200Parser::INHERIT_GS - 240))
      | (1ULL << (Gauss200Parser::LOGIN_GS - 240))
      | (1ULL << (Gauss200Parser::NODE_GS - 240))
      | (1ULL << (Gauss200Parser::NOLOGIN_GS - 240)))) != 0) || ((((_la - 329) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 329)) & ((1ULL << (Gauss200Parser::PROFILE_GS - 329))
      | (1ULL << (Gauss200Parser::RESOURCE_GS - 329))
      | (1ULL << (Gauss200Parser::ROLE_GS - 329))
      | (1ULL << (Gauss200Parser::SYSID_GS - 329)))) != 0) || _la == Gauss200Parser::VALID_GS || ((((_la - 549) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 549)) & ((1ULL << (Gauss200Parser::CREATEDB_GS - 549))
      | (1ULL << (Gauss200Parser::NOCREATEDB_GS - 549))
      | (1ULL << (Gauss200Parser::CREATEROLE_GS - 549))
      | (1ULL << (Gauss200Parser::NOCREATEROLE_GS - 549))
      | (1ULL << (Gauss200Parser::NOINHERIT_GS - 549))
      | (1ULL << (Gauss200Parser::AUDITADMIN_GS - 549))
      | (1ULL << (Gauss200Parser::NOAUDITADMIN_GS - 549))
      | (1ULL << (Gauss200Parser::SYSADMIN_GS - 549))
      | (1ULL << (Gauss200Parser::NOSYSADMIN_GS - 549))
      | (1ULL << (Gauss200Parser::USEFT_GS - 549))
      | (1ULL << (Gauss200Parser::NOUSEFT_GS - 549))
      | (1ULL << (Gauss200Parser::REPLICATION_GS - 549))
      | (1ULL << (Gauss200Parser::NOREPLICATION_GS - 549))
      | (1ULL << (Gauss200Parser::INDEPENDENT_GS - 549))
      | (1ULL << (Gauss200Parser::NOINDEPENDENT_GS - 549))
      | (1ULL << (Gauss200Parser::VCADMIN_GS - 549))
      | (1ULL << (Gauss200Parser::NOVCADMIN_GS - 549))
      | (1ULL << (Gauss200Parser::PERM_GS - 549))
      | (1ULL << (Gauss200Parser::PGUSER_GS - 549)))) != 0)) {
      setState(3520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(3519);
        match(Gauss200Parser::WITH_GS);
      }
      setState(3523); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3522);
        create_role_with_option();
        setState(3525); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 26) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 26)) & ((1ULL << (Gauss200Parser::DEFAULT_GS - 26))
        | (1ULL << (Gauss200Parser::IN_GS - 26))
        | (1ULL << (Gauss200Parser::USER_GS - 26)))) != 0) || _la == Gauss200Parser::ADMIN_GS

      || _la == Gauss200Parser::CONNECTION_GS || ((((_la - 240) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 240)) & ((1ULL << (Gauss200Parser::INHERIT_GS - 240))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 240))
        | (1ULL << (Gauss200Parser::NODE_GS - 240))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 240)))) != 0) || ((((_la - 329) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 329)) & ((1ULL << (Gauss200Parser::PROFILE_GS - 329))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 329))
        | (1ULL << (Gauss200Parser::ROLE_GS - 329))
        | (1ULL << (Gauss200Parser::SYSID_GS - 329)))) != 0) || _la == Gauss200Parser::VALID_GS || ((((_la - 549) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 549)) & ((1ULL << (Gauss200Parser::CREATEDB_GS - 549))
        | (1ULL << (Gauss200Parser::NOCREATEDB_GS - 549))
        | (1ULL << (Gauss200Parser::CREATEROLE_GS - 549))
        | (1ULL << (Gauss200Parser::NOCREATEROLE_GS - 549))
        | (1ULL << (Gauss200Parser::NOINHERIT_GS - 549))
        | (1ULL << (Gauss200Parser::AUDITADMIN_GS - 549))
        | (1ULL << (Gauss200Parser::NOAUDITADMIN_GS - 549))
        | (1ULL << (Gauss200Parser::SYSADMIN_GS - 549))
        | (1ULL << (Gauss200Parser::NOSYSADMIN_GS - 549))
        | (1ULL << (Gauss200Parser::USEFT_GS - 549))
        | (1ULL << (Gauss200Parser::NOUSEFT_GS - 549))
        | (1ULL << (Gauss200Parser::REPLICATION_GS - 549))
        | (1ULL << (Gauss200Parser::NOREPLICATION_GS - 549))
        | (1ULL << (Gauss200Parser::INDEPENDENT_GS - 549))
        | (1ULL << (Gauss200Parser::NOINDEPENDENT_GS - 549))
        | (1ULL << (Gauss200Parser::VCADMIN_GS - 549))
        | (1ULL << (Gauss200Parser::NOVCADMIN_GS - 549))
        | (1ULL << (Gauss200Parser::PERM_GS - 549))
        | (1ULL << (Gauss200Parser::PGUSER_GS - 549)))) != 0));
    }
    setState(3530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS) {
      setState(3529);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3532);
    alter_role_encrypt_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_role_with_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_role_with_optionContext::Create_role_with_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Role_option_commonContext* Gauss200Parser::Create_role_with_optionContext::role_option_common() {
  return getRuleContext<Gauss200Parser::Role_option_commonContext>(0);
}

std::vector<Gauss200Parser::Role_nameContext *> Gauss200Parser::Create_role_with_optionContext::role_name() {
  return getRuleContexts<Gauss200Parser::Role_nameContext>();
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Create_role_with_optionContext::role_name(size_t i) {
  return getRuleContext<Gauss200Parser::Role_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::ADMIN_GS() {
  return getToken(Gauss200Parser::ADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_role_with_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::SYSID_GS() {
  return getToken(Gauss200Parser::SYSID_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Create_role_with_optionContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}

Gauss200Parser::Tablespace_nameContext* Gauss200Parser::Create_role_with_optionContext::tablespace_name() {
  return getRuleContext<Gauss200Parser::Tablespace_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_role_with_optionContext::PROFILE_GS() {
  return getToken(Gauss200Parser::PROFILE_GS, 0);
}

Gauss200Parser::Profile_nameContext* Gauss200Parser::Create_role_with_optionContext::profile_name() {
  return getRuleContext<Gauss200Parser::Profile_nameContext>(0);
}


size_t Gauss200Parser::Create_role_with_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_role_with_option;
}

void Gauss200Parser::Create_role_with_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_role_with_option(this);
}

void Gauss200Parser::Create_role_with_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_role_with_option(this);
}


antlrcpp::Any Gauss200Parser::Create_role_with_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_role_with_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_role_with_optionContext* Gauss200Parser::create_role_with_option() {
  Create_role_with_optionContext *_localctx = _tracker.createInstance<Create_role_with_optionContext>(_ctx, getState());
  enterRule(_localctx, 510, Gauss200Parser::RuleCreate_role_with_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3563);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3534);
      role_option_common();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3543);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
      case 1: {
        setState(3536);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::IN_GS) {
          setState(3535);
          match(Gauss200Parser::IN_GS);
        }
        setState(3538);
        match(Gauss200Parser::ROLE_GS);
        break;
      }

      case 2: {
        setState(3539);
        match(Gauss200Parser::IN_GS);
        setState(3540);
        match(Gauss200Parser::GROUP_GS);
        break;
      }

      case 3: {
        setState(3541);
        match(Gauss200Parser::ADMIN_GS);
        break;
      }

      case 4: {
        setState(3542);
        match(Gauss200Parser::USER_GS);
        break;
      }

      }
      setState(3545);
      role_name();
      setState(3550);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(3546);
        match(Gauss200Parser::COMMA);
        setState(3547);
        role_name();
        setState(3552);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3553);
      match(Gauss200Parser::SYSID_GS);
      setState(3554);
      identifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3555);
      match(Gauss200Parser::DEFAULT_GS);
      setState(3556);
      match(Gauss200Parser::TABLESPACE_GS);
      setState(3557);
      tablespace_name();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3558);
      match(Gauss200Parser::PROFILE_GS);
      setState(3561);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
      case 1: {
        setState(3559);
        match(Gauss200Parser::DEFAULT_GS);
        break;
      }

      case 2: {
        setState(3560);
        profile_name();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Profile_nameContext ------------------------------------------------------------------

Gauss200Parser::Profile_nameContext::Profile_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Profile_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Profile_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleProfile_name;
}

void Gauss200Parser::Profile_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProfile_name(this);
}

void Gauss200Parser::Profile_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProfile_name(this);
}


antlrcpp::Any Gauss200Parser::Profile_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitProfile_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Profile_nameContext* Gauss200Parser::profile_name() {
  Profile_nameContext *_localctx = _tracker.createInstance<Profile_nameContext>(_ctx, getState());
  enterRule(_localctx, 512, Gauss200Parser::RuleProfile_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3565);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_schema_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_schema_stmtContext::Create_schema_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_schema_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_schema_stmtContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

Gauss200Parser::Create_schema_optionContext* Gauss200Parser::Create_schema_stmtContext::create_schema_option() {
  return getRuleContext<Gauss200Parser::Create_schema_optionContext>(0);
}


size_t Gauss200Parser::Create_schema_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_schema_stmt;
}

void Gauss200Parser::Create_schema_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_schema_stmt(this);
}

void Gauss200Parser::Create_schema_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_schema_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_schema_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_schema_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_schema_stmtContext* Gauss200Parser::create_schema_stmt() {
  Create_schema_stmtContext *_localctx = _tracker.createInstance<Create_schema_stmtContext>(_ctx, getState());
  enterRule(_localctx, 514, Gauss200Parser::RuleCreate_schema_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3567);
    match(Gauss200Parser::CREATE_GS);
    setState(3568);
    match(Gauss200Parser::SCHEMA_GS);
    setState(3569);
    create_schema_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_schema_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_schema_optionContext::Create_schema_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Create_schema_optionContext::schema_name() {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_schema_optionContext::AUTHORIZATION_GS() {
  return getToken(Gauss200Parser::AUTHORIZATION_GS, 0);
}

Gauss200Parser::User_nameContext* Gauss200Parser::Create_schema_optionContext::user_name() {
  return getRuleContext<Gauss200Parser::User_nameContext>(0);
}

std::vector<Gauss200Parser::Schema_elementContext *> Gauss200Parser::Create_schema_optionContext::schema_element() {
  return getRuleContexts<Gauss200Parser::Schema_elementContext>();
}

Gauss200Parser::Schema_elementContext* Gauss200Parser::Create_schema_optionContext::schema_element(size_t i) {
  return getRuleContext<Gauss200Parser::Schema_elementContext>(i);
}


size_t Gauss200Parser::Create_schema_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_schema_option;
}

void Gauss200Parser::Create_schema_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_schema_option(this);
}

void Gauss200Parser::Create_schema_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_schema_option(this);
}


antlrcpp::Any Gauss200Parser::Create_schema_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_schema_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_schema_optionContext* Gauss200Parser::create_schema_option() {
  Create_schema_optionContext *_localctx = _tracker.createInstance<Create_schema_optionContext>(_ctx, getState());
  enterRule(_localctx, 516, Gauss200Parser::RuleCreate_schema_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3572);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
      setState(3571);
      schema_name();
      break;
    }

    }
    setState(3576);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::AUTHORIZATION_GS) {
      setState(3574);
      match(Gauss200Parser::AUTHORIZATION_GS);
      setState(3575);
      user_name();
    }
    setState(3581);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::CREATE_GS

    || _la == Gauss200Parser::GRANT_GS) {
      setState(3578);
      schema_element();
      setState(3583);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Schema_elementContext ------------------------------------------------------------------

Gauss200Parser::Schema_elementContext::Schema_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Create_table_stmtContext* Gauss200Parser::Schema_elementContext::create_table_stmt() {
  return getRuleContext<Gauss200Parser::Create_table_stmtContext>(0);
}

Gauss200Parser::Create_view_stmtContext* Gauss200Parser::Schema_elementContext::create_view_stmt() {
  return getRuleContext<Gauss200Parser::Create_view_stmtContext>(0);
}

Gauss200Parser::Create_index_stmtContext* Gauss200Parser::Schema_elementContext::create_index_stmt() {
  return getRuleContext<Gauss200Parser::Create_index_stmtContext>(0);
}

Gauss200Parser::Grant_stmtContext* Gauss200Parser::Schema_elementContext::grant_stmt() {
  return getRuleContext<Gauss200Parser::Grant_stmtContext>(0);
}


size_t Gauss200Parser::Schema_elementContext::getRuleIndex() const {
  return Gauss200Parser::RuleSchema_element;
}

void Gauss200Parser::Schema_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSchema_element(this);
}

void Gauss200Parser::Schema_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSchema_element(this);
}


antlrcpp::Any Gauss200Parser::Schema_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSchema_element(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Schema_elementContext* Gauss200Parser::schema_element() {
  Schema_elementContext *_localctx = _tracker.createInstance<Schema_elementContext>(_ctx, getState());
  enterRule(_localctx, 518, Gauss200Parser::RuleSchema_element);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3588);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3584);
      create_table_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3585);
      create_view_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3586);
      create_index_stmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3587);
      grant_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_sequence_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_sequence_stmtContext::Create_sequence_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::SEQUENCE_GS() {
  return getToken(Gauss200Parser::SEQUENCE_GS, 0);
}

Gauss200Parser::Sequence_nameContext* Gauss200Parser::Create_sequence_stmtContext::sequence_name() {
  return getRuleContext<Gauss200Parser::Sequence_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::INCREMENT_GS() {
  return getToken(Gauss200Parser::INCREMENT_GS, 0);
}

std::vector<Gauss200Parser::Unary_exprContext *> Gauss200Parser::Create_sequence_stmtContext::unary_expr() {
  return getRuleContexts<Gauss200Parser::Unary_exprContext>();
}

Gauss200Parser::Unary_exprContext* Gauss200Parser::Create_sequence_stmtContext::unary_expr(size_t i) {
  return getRuleContext<Gauss200Parser::Unary_exprContext>(i);
}

Gauss200Parser::Minvalue_optionContext* Gauss200Parser::Create_sequence_stmtContext::minvalue_option() {
  return getRuleContext<Gauss200Parser::Minvalue_optionContext>(0);
}

Gauss200Parser::Maxvalue_optionContext* Gauss200Parser::Create_sequence_stmtContext::maxvalue_option() {
  return getRuleContext<Gauss200Parser::Maxvalue_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::START_GS() {
  return getToken(Gauss200Parser::START_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::CACHE_GS() {
  return getToken(Gauss200Parser::CACHE_GS, 0);
}

Gauss200Parser::NumericContext* Gauss200Parser::Create_sequence_stmtContext::numeric() {
  return getRuleContext<Gauss200Parser::NumericContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::CYCLE_GS() {
  return getToken(Gauss200Parser::CYCLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::NOCYCLE_GS() {
  return getToken(Gauss200Parser::NOCYCLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::OWNED_GS() {
  return getToken(Gauss200Parser::OWNED_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_sequence_stmtContext::BY_GS() {
  return getTokens(Gauss200Parser::BY_GS);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::BY_GS(size_t i) {
  return getToken(Gauss200Parser::BY_GS, i);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_sequence_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::PERIOD() {
  return getToken(Gauss200Parser::PERIOD, 0);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Create_sequence_stmtContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::NONE_GS() {
  return getToken(Gauss200Parser::NONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_sequence_stmtContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}


size_t Gauss200Parser::Create_sequence_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_sequence_stmt;
}

void Gauss200Parser::Create_sequence_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_sequence_stmt(this);
}

void Gauss200Parser::Create_sequence_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_sequence_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_sequence_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_sequence_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_sequence_stmtContext* Gauss200Parser::create_sequence_stmt() {
  Create_sequence_stmtContext *_localctx = _tracker.createInstance<Create_sequence_stmtContext>(_ctx, getState());
  enterRule(_localctx, 520, Gauss200Parser::RuleCreate_sequence_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3590);
    match(Gauss200Parser::CREATE_GS);
    setState(3591);
    match(Gauss200Parser::SEQUENCE_GS);
    setState(3592);
    sequence_name();
    setState(3598);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::INCREMENT_GS) {
      setState(3593);
      match(Gauss200Parser::INCREMENT_GS);
      setState(3595);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
      case 1: {
        setState(3594);
        match(Gauss200Parser::BY_GS);
        break;
      }

      }
      setState(3597);
      unary_expr(0);
    }
    setState(3601);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
    case 1: {
      setState(3600);
      minvalue_option();
      break;
    }

    }
    setState(3604);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
    case 1: {
      setState(3603);
      maxvalue_option();
      break;
    }

    }
    setState(3611);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::START_GS) {
      setState(3606);
      match(Gauss200Parser::START_GS);
      setState(3608);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
      case 1: {
        setState(3607);
        match(Gauss200Parser::WITH_GS);
        break;
      }

      }
      setState(3610);
      unary_expr(0);
    }
    setState(3615);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CACHE_GS) {
      setState(3613);
      match(Gauss200Parser::CACHE_GS);
      setState(3614);
      numeric();
    }
    setState(3622);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::NO_GS: {
        setState(3618);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::NO_GS) {
          setState(3617);
          match(Gauss200Parser::NO_GS);
        }
        setState(3620);
        match(Gauss200Parser::CYCLE_GS);
        break;
      }

      case Gauss200Parser::NOCYCLE_GS: {
        setState(3621);
        match(Gauss200Parser::NOCYCLE_GS);
        break;
      }

      case Gauss200Parser::EOF:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::SEMICOLON: {
        break;
      }

    default:
      break;
    }
    setState(3633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::OWNED_GS) {
      setState(3624);
      match(Gauss200Parser::OWNED_GS);
      setState(3625);
      match(Gauss200Parser::BY_GS);
      setState(3631);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
      case 1: {
        setState(3626);
        table_name();
        setState(3627);
        match(Gauss200Parser::PERIOD);
        setState(3628);
        column_name();
        break;
      }

      case 2: {
        setState(3630);
        match(Gauss200Parser::NONE_GS);
        break;
      }

      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Minvalue_optionContext ------------------------------------------------------------------

Gauss200Parser::Minvalue_optionContext::Minvalue_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Minvalue_optionContext::MINVALUE_GS() {
  return getToken(Gauss200Parser::MINVALUE_GS, 0);
}

Gauss200Parser::Unary_exprContext* Gauss200Parser::Minvalue_optionContext::unary_expr() {
  return getRuleContext<Gauss200Parser::Unary_exprContext>(0);
}

tree::TerminalNode* Gauss200Parser::Minvalue_optionContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Minvalue_optionContext::NOMINVALUE_GS() {
  return getToken(Gauss200Parser::NOMINVALUE_GS, 0);
}


size_t Gauss200Parser::Minvalue_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleMinvalue_option;
}

void Gauss200Parser::Minvalue_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMinvalue_option(this);
}

void Gauss200Parser::Minvalue_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMinvalue_option(this);
}


antlrcpp::Any Gauss200Parser::Minvalue_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitMinvalue_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Minvalue_optionContext* Gauss200Parser::minvalue_option() {
  Minvalue_optionContext *_localctx = _tracker.createInstance<Minvalue_optionContext>(_ctx, getState());
  enterRule(_localctx, 522, Gauss200Parser::RuleMinvalue_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3640);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::MINVALUE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3635);
        match(Gauss200Parser::MINVALUE_GS);
        setState(3636);
        unary_expr(0);
        break;
      }

      case Gauss200Parser::NO_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3637);
        match(Gauss200Parser::NO_GS);
        setState(3638);
        match(Gauss200Parser::MINVALUE_GS);
        break;
      }

      case Gauss200Parser::NOMINVALUE_GS: {
        enterOuterAlt(_localctx, 3);
        setState(3639);
        match(Gauss200Parser::NOMINVALUE_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maxvalue_optionContext ------------------------------------------------------------------

Gauss200Parser::Maxvalue_optionContext::Maxvalue_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Maxvalue_optionContext::MAXVALUE_GS() {
  return getToken(Gauss200Parser::MAXVALUE_GS, 0);
}

Gauss200Parser::Unary_exprContext* Gauss200Parser::Maxvalue_optionContext::unary_expr() {
  return getRuleContext<Gauss200Parser::Unary_exprContext>(0);
}

tree::TerminalNode* Gauss200Parser::Maxvalue_optionContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Maxvalue_optionContext::NOMAXVALUE_GS() {
  return getToken(Gauss200Parser::NOMAXVALUE_GS, 0);
}


size_t Gauss200Parser::Maxvalue_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleMaxvalue_option;
}

void Gauss200Parser::Maxvalue_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMaxvalue_option(this);
}

void Gauss200Parser::Maxvalue_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMaxvalue_option(this);
}


antlrcpp::Any Gauss200Parser::Maxvalue_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitMaxvalue_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Maxvalue_optionContext* Gauss200Parser::maxvalue_option() {
  Maxvalue_optionContext *_localctx = _tracker.createInstance<Maxvalue_optionContext>(_ctx, getState());
  enterRule(_localctx, 524, Gauss200Parser::RuleMaxvalue_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3647);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::MAXVALUE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3642);
        match(Gauss200Parser::MAXVALUE_GS);
        setState(3643);
        unary_expr(0);
        break;
      }

      case Gauss200Parser::NO_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3644);
        match(Gauss200Parser::NO_GS);
        setState(3645);
        match(Gauss200Parser::MAXVALUE_GS);
        break;
      }

      case Gauss200Parser::NOMAXVALUE_GS: {
        enterOuterAlt(_localctx, 3);
        setState(3646);
        match(Gauss200Parser::NOMAXVALUE_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_server_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_server_stmtContext::Create_server_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_server_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_server_stmtContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

Gauss200Parser::Server_nameContext* Gauss200Parser::Create_server_stmtContext::server_name() {
  return getRuleContext<Gauss200Parser::Server_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_server_stmtContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_server_stmtContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_server_stmtContext::WRAPPER_GS() {
  return getToken(Gauss200Parser::WRAPPER_GS, 0);
}

Gauss200Parser::Object_nameContext* Gauss200Parser::Create_server_stmtContext::object_name() {
  return getRuleContext<Gauss200Parser::Object_nameContext>(0);
}

Gauss200Parser::Alter_property_optionsContext* Gauss200Parser::Create_server_stmtContext::alter_property_options() {
  return getRuleContext<Gauss200Parser::Alter_property_optionsContext>(0);
}


size_t Gauss200Parser::Create_server_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_server_stmt;
}

void Gauss200Parser::Create_server_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_server_stmt(this);
}

void Gauss200Parser::Create_server_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_server_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_server_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_server_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_server_stmtContext* Gauss200Parser::create_server_stmt() {
  Create_server_stmtContext *_localctx = _tracker.createInstance<Create_server_stmtContext>(_ctx, getState());
  enterRule(_localctx, 526, Gauss200Parser::RuleCreate_server_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3649);
    match(Gauss200Parser::CREATE_GS);
    setState(3650);
    match(Gauss200Parser::SERVER_GS);
    setState(3651);
    server_name();
    setState(3652);
    match(Gauss200Parser::FOREIGN_GS);
    setState(3653);
    match(Gauss200Parser::DATA_GS);
    setState(3654);
    match(Gauss200Parser::WRAPPER_GS);
    setState(3655);
    object_name();
    setState(3656);
    alter_property_options();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_table_stmtContext::Create_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_table_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

Gauss200Parser::Partition_by_optionContext* Gauss200Parser::Create_table_stmtContext::partition_by_option() {
  return getRuleContext<Gauss200Parser::Partition_by_optionContext>(0);
}

Gauss200Parser::Temporary_tempContext* Gauss200Parser::Create_table_stmtContext::temporary_temp() {
  return getRuleContext<Gauss200Parser::Temporary_tempContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::UNLOGGED_GS() {
  return getToken(Gauss200Parser::UNLOGGED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::IF_GS() {
  return getToken(Gauss200Parser::IF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::EXISTS_GS() {
  return getToken(Gauss200Parser::EXISTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<Gauss200Parser::Create_table_stmt_optionContext *> Gauss200Parser::Create_table_stmtContext::create_table_stmt_option() {
  return getRuleContexts<Gauss200Parser::Create_table_stmt_optionContext>();
}

Gauss200Parser::Create_table_stmt_optionContext* Gauss200Parser::Create_table_stmtContext::create_table_stmt_option(size_t i) {
  return getRuleContext<Gauss200Parser::Create_table_stmt_optionContext>(i);
}

Gauss200Parser::Create_table_as_optionContext* Gauss200Parser::Create_table_stmtContext::create_table_as_option() {
  return getRuleContext<Gauss200Parser::Create_table_as_optionContext>(0);
}

Gauss200Parser::Row_clauseContext* Gauss200Parser::Create_table_stmtContext::row_clause() {
  return getRuleContext<Gauss200Parser::Row_clauseContext>(0);
}

Gauss200Parser::Create_table_column_type_option_listContext* Gauss200Parser::Create_table_stmtContext::create_table_column_type_option_list() {
  return getRuleContext<Gauss200Parser::Create_table_column_type_option_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::GLOBAL_GS() {
  return getToken(Gauss200Parser::GLOBAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmtContext::LOCAL_GS() {
  return getToken(Gauss200Parser::LOCAL_GS, 0);
}


size_t Gauss200Parser::Create_table_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_table_stmt;
}

void Gauss200Parser::Create_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_stmt(this);
}

void Gauss200Parser::Create_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_table_stmtContext* Gauss200Parser::create_table_stmt() {
  Create_table_stmtContext *_localctx = _tracker.createInstance<Create_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 528, Gauss200Parser::RuleCreate_table_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3658);
    match(Gauss200Parser::CREATE_GS);
    setState(3664);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS: {
        setState(3660);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::GLOBAL_GS

        || _la == Gauss200Parser::LOCAL_GS) {
          setState(3659);
          _la = _input->LA(1);
          if (!(_la == Gauss200Parser::GLOBAL_GS

          || _la == Gauss200Parser::LOCAL_GS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3662);
        temporary_temp();
        break;
      }

      case Gauss200Parser::UNLOGGED_GS: {
        setState(3663);
        match(Gauss200Parser::UNLOGGED_GS);
        break;
      }

      case Gauss200Parser::TABLE_GS: {
        break;
      }

    default:
      break;
    }
    setState(3666);
    match(Gauss200Parser::TABLE_GS);
    setState(3670);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      setState(3667);
      match(Gauss200Parser::IF_GS);
      setState(3668);
      match(Gauss200Parser::NOT_GS);
      setState(3669);
      match(Gauss200Parser::EXISTS_GS);
      break;
    }

    }
    setState(3672);
    table_name();
    setState(3678);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(3673);
      match(Gauss200Parser::LEFT_PAREN);
      setState(3675);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Gauss200Parser::ALL_GS)
        | (1ULL << Gauss200Parser::ANALYSE_GS)
        | (1ULL << Gauss200Parser::ANALYZE_GS)
        | (1ULL << Gauss200Parser::AND_GS)
        | (1ULL << Gauss200Parser::ANY_GS)
        | (1ULL << Gauss200Parser::ARRAY_GS)
        | (1ULL << Gauss200Parser::ASC_GS)
        | (1ULL << Gauss200Parser::ASYMMETRIC_GS)
        | (1ULL << Gauss200Parser::AS_GS)
        | (1ULL << Gauss200Parser::AUTHID_GS)
        | (1ULL << Gauss200Parser::BOTH_GS)
        | (1ULL << Gauss200Parser::BUCKETS_GS)
        | (1ULL << Gauss200Parser::CASE_GS)
        | (1ULL << Gauss200Parser::CAST_GS)
        | (1ULL << Gauss200Parser::CHECK_GS)
        | (1ULL << Gauss200Parser::COLLATE_GS)
        | (1ULL << Gauss200Parser::COLUMN_GS)
        | (1ULL << Gauss200Parser::CONSTRAINT_GS)
        | (1ULL << Gauss200Parser::CREATE_GS)
        | (1ULL << Gauss200Parser::CURRENT_CATALOG_GS)
        | (1ULL << Gauss200Parser::CURRENT_DATE_GS)
        | (1ULL << Gauss200Parser::CURRENT_ROLE_GS)
        | (1ULL << Gauss200Parser::CURRENT_TIMESTAMP_GS)
        | (1ULL << Gauss200Parser::CURRENT_TIME_GS)
        | (1ULL << Gauss200Parser::CURRENT_USER_GS)
        | (1ULL << Gauss200Parser::DEFAULT_GS)
        | (1ULL << Gauss200Parser::DEFERRABLE_GS)
        | (1ULL << Gauss200Parser::DESC_GS)
        | (1ULL << Gauss200Parser::DISTINCT_GS)
        | (1ULL << Gauss200Parser::DO_GS)
        | (1ULL << Gauss200Parser::ELSE_GS)
        | (1ULL << Gauss200Parser::END_GS)
        | (1ULL << Gauss200Parser::EXCEPT_GS)
        | (1ULL << Gauss200Parser::FALSE_GS)
        | (1ULL << Gauss200Parser::FETCH_GS)
        | (1ULL << Gauss200Parser::FOREIGN_GS)
        | (1ULL << Gauss200Parser::FOR_GS)
        | (1ULL << Gauss200Parser::FROM_GS)
        | (1ULL << Gauss200Parser::FUNCTION_GS)
        | (1ULL << Gauss200Parser::GRANT_GS)
        | (1ULL << Gauss200Parser::GROUP_GS)
        | (1ULL << Gauss200Parser::HAVING_GS)
        | (1ULL << Gauss200Parser::INITIALLY_GS)
        | (1ULL << Gauss200Parser::INTERSECT_GS)
        | (1ULL << Gauss200Parser::INTO_GS)
        | (1ULL << Gauss200Parser::IN_GS)
        | (1ULL << Gauss200Parser::IS_GS)
        | (1ULL << Gauss200Parser::LEADING_GS)
        | (1ULL << Gauss200Parser::LESS_GS)
        | (1ULL << Gauss200Parser::LIMIT_GS)
        | (1ULL << Gauss200Parser::LOCALTIMESTAMP_GS)
        | (1ULL << Gauss200Parser::LOCALTIME_GS)
        | (1ULL << Gauss200Parser::MAXVALUE_GS)
        | (1ULL << Gauss200Parser::MINUS_GS)
        | (1ULL << Gauss200Parser::MODIFY_GS)
        | (1ULL << Gauss200Parser::NLSSORT_GS)
        | (1ULL << Gauss200Parser::NOT_GS)
        | (1ULL << Gauss200Parser::NULL_GS)
        | (1ULL << Gauss200Parser::OFFSET_GS)
        | (1ULL << Gauss200Parser::ONLY_GS)
        | (1ULL << Gauss200Parser::ON_GS)
        | (1ULL << Gauss200Parser::ORDER_GS)
        | (1ULL << Gauss200Parser::OR_GS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Gauss200Parser::PERFORMANCE_GS - 64))
        | (1ULL << (Gauss200Parser::PLACING_GS - 64))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 64))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 64))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 64))
        | (1ULL << (Gauss200Parser::REJECT_GS - 64))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 64))
        | (1ULL << (Gauss200Parser::RETURN_GS - 64))
        | (1ULL << (Gauss200Parser::SELECT_GS - 64))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 64))
        | (1ULL << (Gauss200Parser::SOME_GS - 64))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 64))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 64))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 64))
        | (1ULL << (Gauss200Parser::THEN_GS - 64))
        | (1ULL << (Gauss200Parser::TO_GS - 64))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 64))
        | (1ULL << (Gauss200Parser::TRUE_GS - 64))
        | (1ULL << (Gauss200Parser::UNION_GS - 64))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 64))
        | (1ULL << (Gauss200Parser::USER_GS - 64))
        | (1ULL << (Gauss200Parser::USING_GS - 64))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 64))
        | (1ULL << (Gauss200Parser::WHEN_GS - 64))
        | (1ULL << (Gauss200Parser::WHERE_GS - 64))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 64))
        | (1ULL << (Gauss200Parser::WITH_GS - 64))
        | (1ULL << (Gauss200Parser::LIKE_GS - 64))
        | (1ULL << (Gauss200Parser::ABORT_GS - 64))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 64))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 64))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 64))
        | (1ULL << (Gauss200Parser::ACTION_GS - 64))
        | (1ULL << (Gauss200Parser::ADD_GS - 64))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 64))
        | (1ULL << (Gauss200Parser::AFTER_GS - 64))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 64))
        | (1ULL << (Gauss200Parser::ALSO_GS - 64))
        | (1ULL << (Gauss200Parser::ALTER_GS - 64))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 64))
        | (1ULL << (Gauss200Parser::APP_GS - 64))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (Gauss200Parser::ASSIGNMENT_GS - 128))
        | (1ULL << (Gauss200Parser::ATTRIBUTE_GS - 128))
        | (1ULL << (Gauss200Parser::AT_GS - 128))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 128))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 128))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 128))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 128))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 128))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 128))
        | (1ULL << (Gauss200Parser::BLOB_GS - 128))
        | (1ULL << (Gauss200Parser::BY_GS - 128))
        | (1ULL << (Gauss200Parser::CACHE_GS - 128))
        | (1ULL << (Gauss200Parser::CALLED_GS - 128))
        | (1ULL << (Gauss200Parser::CALL_GS - 128))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 128))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 128))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 128))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 128))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 128))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 128))
        | (1ULL << (Gauss200Parser::CLASS_GS - 128))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 128))
        | (1ULL << (Gauss200Parser::CLOB_GS - 128))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 128))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 128))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 128))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 128))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 128))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 128))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 128))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 128))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 128))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 128))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 128))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 128))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 128))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 128))
        | (1ULL << (Gauss200Parser::COPY_GS - 128))
        | (1ULL << (Gauss200Parser::COST_GS - 128))
        | (1ULL << (Gauss200Parser::CSV_GS - 128))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 128))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 128))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 128))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 128))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 128))
        | (1ULL << (Gauss200Parser::DATA_GS - 128))
        | (1ULL << (Gauss200Parser::DAY_GS - 128))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 128))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 128))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 128))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 128))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 128))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 128))
        | (1ULL << (Gauss200Parser::DELETE_GS - 128))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 128))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 128))
        | (1ULL << (Gauss200Parser::DELTA_GS - 128))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 128))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 128))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 128))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 128))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 128))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 128))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (Gauss200Parser::DOCUMENT_GS - 192))
        | (1ULL << (Gauss200Parser::DOMAIN_GS - 192))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 192))
        | (1ULL << (Gauss200Parser::DROP_GS - 192))
        | (1ULL << (Gauss200Parser::EACH_GS - 192))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 192))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 192))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 192))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 192))
        | (1ULL << (Gauss200Parser::ENUM_GS - 192))
        | (1ULL << (Gauss200Parser::EOL_GS - 192))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 192))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 192))
        | (1ULL << (Gauss200Parser::EVERY_GS - 192))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 192))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 192))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 192))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 192))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 192))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 192))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 192))
        | (1ULL << (Gauss200Parser::FIRST_GS - 192))
        | (1ULL << (Gauss200Parser::FIXED_GS - 192))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 192))
        | (1ULL << (Gauss200Parser::FORCE_GS - 192))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 192))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 192))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 192))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 192))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 192))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 192))
        | (1ULL << (Gauss200Parser::HEADER_GS - 192))
        | (1ULL << (Gauss200Parser::HOLD_GS - 192))
        | (1ULL << (Gauss200Parser::HOUR_GS - 192))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 192))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 192))
        | (1ULL << (Gauss200Parser::IF_GS - 192))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 192))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 192))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 192))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 192))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 192))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 192))
        | (1ULL << (Gauss200Parser::INDEX_GS - 192))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 192))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 192))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 192))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 192))
        | (1ULL << (Gauss200Parser::INLINE_GS - 192))
        | (1ULL << (Gauss200Parser::INPUT_GS - 192))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 192))
        | (1ULL << (Gauss200Parser::INSERT_GS - 192))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 192))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 192))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 192))
        | (1ULL << (Gauss200Parser::KEY_GS - 192))
        | (1ULL << (Gauss200Parser::LABEL_GS - 192))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 192))
        | (1ULL << (Gauss200Parser::LARGE_GS - 192))
        | (1ULL << (Gauss200Parser::LAST_GS - 192))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (Gauss200Parser::LC_CTYPE_GS - 256))
        | (1ULL << (Gauss200Parser::LEAKPROOF_GS - 256))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 256))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 256))
        | (1ULL << (Gauss200Parser::LOAD_GS - 256))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 256))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 256))
        | (1ULL << (Gauss200Parser::LOCK_GS - 256))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 256))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 256))
        | (1ULL << (Gauss200Parser::LOG_GS - 256))
        | (1ULL << (Gauss200Parser::LOOP_GS - 256))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 256))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 256))
        | (1ULL << (Gauss200Parser::MATCH_GS - 256))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 256))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 256))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 256))
        | (1ULL << (Gauss200Parser::MERGE_GS - 256))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 256))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 256))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::MODE_GS - 256))
        | (1ULL << (Gauss200Parser::MONTH_GS - 256))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 256))
        | (1ULL << (Gauss200Parser::MOVE_GS - 256))
        | (1ULL << (Gauss200Parser::NAMES_GS - 256))
        | (1ULL << (Gauss200Parser::NAME_GS - 256))
        | (1ULL << (Gauss200Parser::NEXT_GS - 256))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 256))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 256))
        | (1ULL << (Gauss200Parser::NODE_GS - 256))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 256))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 256))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 256))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 256))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 256))
        | (1ULL << (Gauss200Parser::NO_GS - 256))
        | (1ULL << (Gauss200Parser::NULLS_GS - 256))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 256))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 256))
        | (1ULL << (Gauss200Parser::OFF_GS - 256))
        | (1ULL << (Gauss200Parser::OF_GS - 256))
        | (1ULL << (Gauss200Parser::OIDS_GS - 256))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 256))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 256))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 256))
        | (1ULL << (Gauss200Parser::OPTION_GS - 256))
        | (1ULL << (Gauss200Parser::OWNED_GS - 256))
        | (1ULL << (Gauss200Parser::OWNER_GS - 256))
        | (1ULL << (Gauss200Parser::PARSER_GS - 256))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 256))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 256))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 256))
        | (1ULL << (Gauss200Parser::PASSING_GS - 256))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 256))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 256))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 256))
        | (1ULL << (Gauss200Parser::PER_GS - 256))
        | (1ULL << (Gauss200Parser::PLANS_GS - 256))
        | (1ULL << (Gauss200Parser::POOL_GS - 256))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (Gauss200Parser::PREFERRED_GS - 320))
        | (1ULL << (Gauss200Parser::PREFIX_GS - 320))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 320))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 320))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 320))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 320))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 320))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 320))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 320))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 320))
        | (1ULL << (Gauss200Parser::QUERY_GS - 320))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 320))
        | (1ULL << (Gauss200Parser::RANGE_GS - 320))
        | (1ULL << (Gauss200Parser::RAW_GS - 320))
        | (1ULL << (Gauss200Parser::READ_GS - 320))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 320))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 320))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 320))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 320))
        | (1ULL << (Gauss200Parser::REF_GS - 320))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 320))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 320))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 320))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 320))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 320))
        | (1ULL << (Gauss200Parser::RENAME_GS - 320))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 320))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 320))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 320))
        | (1ULL << (Gauss200Parser::RESET_GS - 320))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 320))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 320))
        | (1ULL << (Gauss200Parser::RESTART_GS - 320))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 320))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 320))
        | (1ULL << (Gauss200Parser::REUSE_GS - 320))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 320))
        | (1ULL << (Gauss200Parser::ROLE_GS - 320))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 320))
        | (1ULL << (Gauss200Parser::ROWS_GS - 320))
        | (1ULL << (Gauss200Parser::RULE_GS - 320))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 320))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 320))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 320))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 320))
        | (1ULL << (Gauss200Parser::SECOND_GS - 320))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 320))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 320))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 320))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 320))
        | (1ULL << (Gauss200Parser::SERVER_GS - 320))
        | (1ULL << (Gauss200Parser::SESSION_GS - 320))
        | (1ULL << (Gauss200Parser::SET_GS - 320))
        | (1ULL << (Gauss200Parser::SHARE_GS - 320))
        | (1ULL << (Gauss200Parser::SHOW_GS - 320))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 320))
        | (1ULL << (Gauss200Parser::SIZE_GS - 320))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 320))
        | (1ULL << (Gauss200Parser::STABLE_GS - 320))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 320))
        | (1ULL << (Gauss200Parser::START_GS - 320))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 320))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 320))
        | (1ULL << (Gauss200Parser::STDIN_GS - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 384)) & ((1ULL << (Gauss200Parser::STDOUT_GS - 384))
        | (1ULL << (Gauss200Parser::STORAGE_GS - 384))
        | (1ULL << (Gauss200Parser::STORE_GS - 384))
        | (1ULL << (Gauss200Parser::STRICT_GS - 384))
        | (1ULL << (Gauss200Parser::STRIP_GS - 384))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 384))
        | (1ULL << (Gauss200Parser::SYSID_GS - 384))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 384))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 384))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 384))
        | (1ULL << (Gauss200Parser::TABLES_GS - 384))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 384))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 384))
        | (1ULL << (Gauss200Parser::TEMP_GS - 384))
        | (1ULL << (Gauss200Parser::TEXT_GS - 384))
        | (1ULL << (Gauss200Parser::THAN_GS - 384))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 384))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 384))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 384))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 384))
        | (1ULL << (Gauss200Parser::TYPES_GS - 384))
        | (1ULL << (Gauss200Parser::TYPE_GS - 384))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 384))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 384))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 384))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 384))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 384))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 384))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 384))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 384))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 384))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 384))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 384))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 384))
        | (1ULL << (Gauss200Parser::VALID_GS - 384))
        | (1ULL << (Gauss200Parser::VALUE_GS - 384))
        | (1ULL << (Gauss200Parser::VARYING_GS - 384))
        | (1ULL << (Gauss200Parser::VERSION_GS - 384))
        | (1ULL << (Gauss200Parser::VIEW_GS - 384))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 384))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 384))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 384))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 384))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 384))
        | (1ULL << (Gauss200Parser::WORK_GS - 384))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 384))
        | (1ULL << (Gauss200Parser::WRITE_GS - 384))
        | (1ULL << (Gauss200Parser::XML_GS - 384))
        | (1ULL << (Gauss200Parser::YEAR_GS - 384))
        | (1ULL << (Gauss200Parser::YES_GS - 384))
        | (1ULL << (Gauss200Parser::ZONE_GS - 384))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 384))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 384))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 384))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 384))
        | (1ULL << (Gauss200Parser::BIT_GS - 384))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 384))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 384))
        | (1ULL << (Gauss200Parser::CHAR_GS - 384))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 384))
        | (1ULL << (Gauss200Parser::DATE_GS - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 448)) & ((1ULL << (Gauss200Parser::DECIMAL_GS - 448))
        | (1ULL << (Gauss200Parser::DECODE_GS - 448))
        | (1ULL << (Gauss200Parser::DEC_GS - 448))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 448))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 448))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 448))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 448))
        | (1ULL << (Gauss200Parser::INOUT_GS - 448))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 448))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 448))
        | (1ULL << (Gauss200Parser::INT_GS - 448))
        | (1ULL << (Gauss200Parser::LEAST_GS - 448))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 448))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 448))
        | (1ULL << (Gauss200Parser::NONE_GS - 448))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 448))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 448))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 448))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 448))
        | (1ULL << (Gauss200Parser::NVL_GS - 448))
        | (1ULL << (Gauss200Parser::OUT_GS - 448))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 448))
        | (1ULL << (Gauss200Parser::POSITION_GS - 448))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 448))
        | (1ULL << (Gauss200Parser::REAL_GS - 448))
        | (1ULL << (Gauss200Parser::ROW_GS - 448))
        | (1ULL << (Gauss200Parser::SETOF_GS - 448))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 448))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 448))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 448))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 448))
        | (1ULL << (Gauss200Parser::TIME_GS - 448))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 448))
        | (1ULL << (Gauss200Parser::TREAT_GS - 448))
        | (1ULL << (Gauss200Parser::TRIM_GS - 448))
        | (1ULL << (Gauss200Parser::VALUES_GS - 448))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 448))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 448))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 448))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 448))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 448))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 448))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 448))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 448))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 448))
        | (1ULL << (Gauss200Parser::PATH_GS - 448)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
        | (1ULL << (Gauss200Parser::USAGE_GS - 516))
        | (1ULL << (Gauss200Parser::SPACE_GS - 516))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601)))) != 0)) {
        setState(3674);
        create_table_column_type_option_list();
      }
      setState(3677);
      match(Gauss200Parser::RIGHT_PAREN);
    }
    setState(3683);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 61) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 61)) & ((1ULL << (Gauss200Parser::ON_GS - 61))
      | (1ULL << (Gauss200Parser::TO_GS - 61))
      | (1ULL << (Gauss200Parser::WITH_GS - 61)))) != 0) || _la == Gauss200Parser::COMPRESS_GS

    || _la == Gauss200Parser::DISTRIBUTE_GS || _la == Gauss200Parser::NOCOMPRESS_GS || _la == Gauss200Parser::TABLESPACE_GS) {
      setState(3680);
      create_table_stmt_option();
      setState(3685);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3695);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::EOF:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::SEMICOLON: {
        setState(3687);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::AS_GS) {
          setState(3686);
          create_table_as_option();
        }
        break;
      }

      case Gauss200Parser::PARTITION_GS: {
        setState(3689);
        match(Gauss200Parser::PARTITION_GS);
        setState(3690);
        match(Gauss200Parser::BY_GS);
        setState(3691);
        partition_by_option();
        setState(3693);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::DISABLE_GS

        || _la == Gauss200Parser::ENABLE_GS) {
          setState(3692);
          row_clause();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Temporary_tempContext ------------------------------------------------------------------

Gauss200Parser::Temporary_tempContext::Temporary_tempContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Temporary_tempContext::TEMPORARY_GS() {
  return getToken(Gauss200Parser::TEMPORARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Temporary_tempContext::TEMP_GS() {
  return getToken(Gauss200Parser::TEMP_GS, 0);
}


size_t Gauss200Parser::Temporary_tempContext::getRuleIndex() const {
  return Gauss200Parser::RuleTemporary_temp;
}

void Gauss200Parser::Temporary_tempContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemporary_temp(this);
}

void Gauss200Parser::Temporary_tempContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemporary_temp(this);
}


antlrcpp::Any Gauss200Parser::Temporary_tempContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTemporary_temp(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Temporary_tempContext* Gauss200Parser::temporary_temp() {
  Temporary_tempContext *_localctx = _tracker.createInstance<Temporary_tempContext>(_ctx, getState());
  enterRule(_localctx, 530, Gauss200Parser::RuleTemporary_temp);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3697);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::TEMPORARY_GS

    || _la == Gauss200Parser::TEMP_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_column_type_option_listContext ------------------------------------------------------------------

Gauss200Parser::Create_table_column_type_option_listContext::Create_table_column_type_option_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Create_table_column_type_optionContext *> Gauss200Parser::Create_table_column_type_option_listContext::create_table_column_type_option() {
  return getRuleContexts<Gauss200Parser::Create_table_column_type_optionContext>();
}

Gauss200Parser::Create_table_column_type_optionContext* Gauss200Parser::Create_table_column_type_option_listContext::create_table_column_type_option(size_t i) {
  return getRuleContext<Gauss200Parser::Create_table_column_type_optionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_table_column_type_option_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Create_table_column_type_option_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Create_table_column_type_option_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_table_column_type_option_list;
}

void Gauss200Parser::Create_table_column_type_option_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_column_type_option_list(this);
}

void Gauss200Parser::Create_table_column_type_option_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_column_type_option_list(this);
}


antlrcpp::Any Gauss200Parser::Create_table_column_type_option_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_column_type_option_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_table_column_type_option_listContext* Gauss200Parser::create_table_column_type_option_list() {
  Create_table_column_type_option_listContext *_localctx = _tracker.createInstance<Create_table_column_type_option_listContext>(_ctx, getState());
  enterRule(_localctx, 532, Gauss200Parser::RuleCreate_table_column_type_option_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3699);
    create_table_column_type_option();
    setState(3704);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(3700);
      match(Gauss200Parser::COMMA);
      setState(3701);
      create_table_column_type_option();
      setState(3706);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_column_type_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_table_column_type_optionContext::Create_table_column_type_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_clause_add_column_optionContext* Gauss200Parser::Create_table_column_type_optionContext::column_clause_add_column_option() {
  return getRuleContext<Gauss200Parser::Column_clause_add_column_optionContext>(0);
}

Gauss200Parser::Alter_table_constraintContext* Gauss200Parser::Create_table_column_type_optionContext::alter_table_constraint() {
  return getRuleContext<Gauss200Parser::Alter_table_constraintContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_column_type_optionContext::LIKE_GS() {
  return getToken(Gauss200Parser::LIKE_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_table_column_type_optionContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

std::vector<Gauss200Parser::Like_optionContext *> Gauss200Parser::Create_table_column_type_optionContext::like_option() {
  return getRuleContexts<Gauss200Parser::Like_optionContext>();
}

Gauss200Parser::Like_optionContext* Gauss200Parser::Create_table_column_type_optionContext::like_option(size_t i) {
  return getRuleContext<Gauss200Parser::Like_optionContext>(i);
}


size_t Gauss200Parser::Create_table_column_type_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_table_column_type_option;
}

void Gauss200Parser::Create_table_column_type_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_column_type_option(this);
}

void Gauss200Parser::Create_table_column_type_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_column_type_option(this);
}


antlrcpp::Any Gauss200Parser::Create_table_column_type_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_column_type_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_table_column_type_optionContext* Gauss200Parser::create_table_column_type_option() {
  Create_table_column_type_optionContext *_localctx = _tracker.createInstance<Create_table_column_type_optionContext>(_ctx, getState());
  enterRule(_localctx, 534, Gauss200Parser::RuleCreate_table_column_type_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3717);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 366, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3707);
      column_clause_add_column_option();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3708);
      alter_table_constraint();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3709);
      match(Gauss200Parser::LIKE_GS);
      setState(3710);
      table_name();
      setState(3714);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::EXCLUDING_GS

      || _la == Gauss200Parser::INCLUDING_GS) {
        setState(3711);
        like_option();
        setState(3716);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Like_optionContext ------------------------------------------------------------------

Gauss200Parser::Like_optionContext::Like_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Like_option_otherContext* Gauss200Parser::Like_optionContext::like_option_other() {
  return getRuleContext<Gauss200Parser::Like_option_otherContext>(0);
}

tree::TerminalNode* Gauss200Parser::Like_optionContext::INCLUDING_GS() {
  return getToken(Gauss200Parser::INCLUDING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_optionContext::EXCLUDING_GS() {
  return getToken(Gauss200Parser::EXCLUDING_GS, 0);
}


size_t Gauss200Parser::Like_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleLike_option;
}

void Gauss200Parser::Like_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLike_option(this);
}

void Gauss200Parser::Like_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLike_option(this);
}


antlrcpp::Any Gauss200Parser::Like_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLike_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Like_optionContext* Gauss200Parser::like_option() {
  Like_optionContext *_localctx = _tracker.createInstance<Like_optionContext>(_ctx, getState());
  enterRule(_localctx, 536, Gauss200Parser::RuleLike_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3719);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::EXCLUDING_GS

    || _la == Gauss200Parser::INCLUDING_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3720);
    like_option_other();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Like_option_otherContext ------------------------------------------------------------------

Gauss200Parser::Like_option_otherContext::Like_option_otherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::DEFAULTS_GS() {
  return getToken(Gauss200Parser::DEFAULTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::INDEXES_GS() {
  return getToken(Gauss200Parser::INDEXES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::STORAGE_GS() {
  return getToken(Gauss200Parser::STORAGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::COMMENTS_GS() {
  return getToken(Gauss200Parser::COMMENTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::RELOPTIONS_GS() {
  return getToken(Gauss200Parser::RELOPTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::DISTRIBUTION_GS() {
  return getToken(Gauss200Parser::DISTRIBUTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Like_option_otherContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}


size_t Gauss200Parser::Like_option_otherContext::getRuleIndex() const {
  return Gauss200Parser::RuleLike_option_other;
}

void Gauss200Parser::Like_option_otherContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLike_option_other(this);
}

void Gauss200Parser::Like_option_otherContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLike_option_other(this);
}


antlrcpp::Any Gauss200Parser::Like_option_otherContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLike_option_other(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Like_option_otherContext* Gauss200Parser::like_option_other() {
  Like_option_otherContext *_localctx = _tracker.createInstance<Like_option_otherContext>(_ctx, getState());
  enterRule(_localctx, 538, Gauss200Parser::RuleLike_option_other);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3722);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::ALL_GS

    || _la == Gauss200Parser::CONSTRAINT_GS || ((((_la - 153) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 153)) & ((1ULL << (Gauss200Parser::COMMENTS_GS - 153))
      | (1ULL << (Gauss200Parser::DEFAULTS_GS - 153))
      | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 153)))) != 0) || _la == Gauss200Parser::INDEXES_GS || _la == Gauss200Parser::PARTITION_GS

    || _la == Gauss200Parser::RELOPTIONS_GS || _la == Gauss200Parser::STORAGE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_stmt_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_table_stmt_optionContext::Create_table_stmt_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Create_table_stmt_optionContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::COMMIT_GS() {
  return getToken(Gauss200Parser::COMMIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::PRESERVE_GS() {
  return getToken(Gauss200Parser::PRESERVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::DELETE_GS() {
  return getToken(Gauss200Parser::DELETE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::COMPRESS_GS() {
  return getToken(Gauss200Parser::COMPRESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::NOCOMPRESS_GS() {
  return getToken(Gauss200Parser::NOCOMPRESS_GS, 0);
}

Gauss200Parser::Tablespace_name_optionContext* Gauss200Parser::Create_table_stmt_optionContext::tablespace_name_option() {
  return getRuleContext<Gauss200Parser::Tablespace_name_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::DISTRIBUTE_GS() {
  return getToken(Gauss200Parser::DISTRIBUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::REPLICATION_GS() {
  return getToken(Gauss200Parser::REPLICATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_stmt_optionContext::HASH_GS() {
  return getToken(Gauss200Parser::HASH_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Create_table_stmt_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

Gauss200Parser::Table_constraint_to_group_nodeContext* Gauss200Parser::Create_table_stmt_optionContext::table_constraint_to_group_node() {
  return getRuleContext<Gauss200Parser::Table_constraint_to_group_nodeContext>(0);
}


size_t Gauss200Parser::Create_table_stmt_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_table_stmt_option;
}

void Gauss200Parser::Create_table_stmt_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_stmt_option(this);
}

void Gauss200Parser::Create_table_stmt_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_stmt_option(this);
}


antlrcpp::Any Gauss200Parser::Create_table_stmt_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_stmt_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_table_stmt_optionContext* Gauss200Parser::create_table_stmt_option() {
  Create_table_stmt_optionContext *_localctx = _tracker.createInstance<Create_table_stmt_optionContext>(_ctx, getState());
  enterRule(_localctx, 540, Gauss200Parser::RuleCreate_table_stmt_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3745);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::WITH_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3724);
        match(Gauss200Parser::WITH_GS);
        setState(3725);
        paren_assignment_stmt_list();
        break;
      }

      case Gauss200Parser::ON_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3726);
        match(Gauss200Parser::ON_GS);
        setState(3727);
        match(Gauss200Parser::COMMIT_GS);
        setState(3733);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::PRESERVE_GS: {
            setState(3728);
            match(Gauss200Parser::PRESERVE_GS);
            setState(3729);
            match(Gauss200Parser::ROW_GS);
            break;
          }

          case Gauss200Parser::DELETE_GS: {
            setState(3730);
            match(Gauss200Parser::DELETE_GS);
            setState(3731);
            match(Gauss200Parser::ROW_GS);
            break;
          }

          case Gauss200Parser::DROP_GS: {
            setState(3732);
            match(Gauss200Parser::DROP_GS);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::NOCOMPRESS_GS: {
        enterOuterAlt(_localctx, 3);
        setState(3735);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::COMPRESS_GS || _la == Gauss200Parser::NOCOMPRESS_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case Gauss200Parser::TABLESPACE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(3736);
        tablespace_name_option();
        break;
      }

      case Gauss200Parser::DISTRIBUTE_GS: {
        enterOuterAlt(_localctx, 5);
        setState(3737);
        match(Gauss200Parser::DISTRIBUTE_GS);
        setState(3738);
        match(Gauss200Parser::BY_GS);
        setState(3742);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::REPLICATION_GS: {
            setState(3739);
            match(Gauss200Parser::REPLICATION_GS);
            break;
          }

          case Gauss200Parser::HASH_GS: {
            setState(3740);
            match(Gauss200Parser::HASH_GS);
            setState(3741);
            paren_column_list();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case Gauss200Parser::TO_GS: {
        enterOuterAlt(_localctx, 6);
        setState(3744);
        table_constraint_to_group_node();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_as_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_table_as_optionContext::Create_table_as_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_table_as_optionContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Create_table_as_optionContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_as_optionContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_table_as_optionContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_table_as_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_as_optionContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_table_as_optionContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}


size_t Gauss200Parser::Create_table_as_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_table_as_option;
}

void Gauss200Parser::Create_table_as_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_as_option(this);
}

void Gauss200Parser::Create_table_as_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_as_option(this);
}


antlrcpp::Any Gauss200Parser::Create_table_as_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_as_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_table_as_optionContext* Gauss200Parser::create_table_as_option() {
  Create_table_as_optionContext *_localctx = _tracker.createInstance<Create_table_as_optionContext>(_ctx, getState());
  enterRule(_localctx, 542, Gauss200Parser::RuleCreate_table_as_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3747);
    match(Gauss200Parser::AS_GS);
    setState(3751);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::LEFT_PAREN: {
        setState(3748);
        select_stmt();
        break;
      }

      case Gauss200Parser::TABLE_GS: {
        setState(3749);
        match(Gauss200Parser::TABLE_GS);
        setState(3750);
        table_name();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3758);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3753);
      match(Gauss200Parser::WITH_GS);
      setState(3755);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::NO_GS) {
        setState(3754);
        match(Gauss200Parser::NO_GS);
      }
      setState(3757);
      match(Gauss200Parser::DATA_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_by_optionContext ------------------------------------------------------------------

Gauss200Parser::Partition_by_optionContext::Partition_by_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Partition_by_optionContext::VALUES_GS() {
  return getToken(Gauss200Parser::VALUES_GS, 0);
}

Gauss200Parser::Paren_partition_keyContext* Gauss200Parser::Partition_by_optionContext::paren_partition_key() {
  return getRuleContext<Gauss200Parser::Paren_partition_keyContext>(0);
}

tree::TerminalNode* Gauss200Parser::Partition_by_optionContext::RANGE_GS() {
  return getToken(Gauss200Parser::RANGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_by_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Partition_item_listContext* Gauss200Parser::Partition_by_optionContext::partition_item_list() {
  return getRuleContext<Gauss200Parser::Partition_item_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Partition_by_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Partition_by_optionContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_by_option;
}

void Gauss200Parser::Partition_by_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_by_option(this);
}

void Gauss200Parser::Partition_by_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_by_option(this);
}


antlrcpp::Any Gauss200Parser::Partition_by_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_by_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_by_optionContext* Gauss200Parser::partition_by_option() {
  Partition_by_optionContext *_localctx = _tracker.createInstance<Partition_by_optionContext>(_ctx, getState());
  enterRule(_localctx, 544, Gauss200Parser::RulePartition_by_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3768);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::VALUES_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3760);
        match(Gauss200Parser::VALUES_GS);
        setState(3761);
        paren_partition_key();
        break;
      }

      case Gauss200Parser::RANGE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3762);
        match(Gauss200Parser::RANGE_GS);
        setState(3763);
        paren_partition_key();
        setState(3764);
        match(Gauss200Parser::LEFT_PAREN);
        setState(3765);
        partition_item_list();
        setState(3766);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_partition_keyContext ------------------------------------------------------------------

Gauss200Parser::Paren_partition_keyContext::Paren_partition_keyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_partition_keyContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Partition_keyContext* Gauss200Parser::Paren_partition_keyContext::partition_key() {
  return getRuleContext<Gauss200Parser::Partition_keyContext>(0);
}

tree::TerminalNode* Gauss200Parser::Paren_partition_keyContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Paren_partition_keyContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_partition_key;
}

void Gauss200Parser::Paren_partition_keyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_partition_key(this);
}

void Gauss200Parser::Paren_partition_keyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_partition_key(this);
}


antlrcpp::Any Gauss200Parser::Paren_partition_keyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_partition_key(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_partition_keyContext* Gauss200Parser::paren_partition_key() {
  Paren_partition_keyContext *_localctx = _tracker.createInstance<Paren_partition_keyContext>(_ctx, getState());
  enterRule(_localctx, 546, Gauss200Parser::RuleParen_partition_key);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3770);
    match(Gauss200Parser::LEFT_PAREN);
    setState(3771);
    partition_key();
    setState(3772);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_keyContext ------------------------------------------------------------------

Gauss200Parser::Partition_keyContext::Partition_keyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Partition_keyContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Partition_keyContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_key;
}

void Gauss200Parser::Partition_keyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_key(this);
}

void Gauss200Parser::Partition_keyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_key(this);
}


antlrcpp::Any Gauss200Parser::Partition_keyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_key(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_keyContext* Gauss200Parser::partition_key() {
  Partition_keyContext *_localctx = _tracker.createInstance<Partition_keyContext>(_ctx, getState());
  enterRule(_localctx, 548, Gauss200Parser::RulePartition_key);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3774);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_tablespace_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_tablespace_stmtContext::Create_tablespace_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}

Gauss200Parser::Tablespace_nameContext* Gauss200Parser::Create_tablespace_stmtContext::tablespace_name() {
  return getRuleContext<Gauss200Parser::Tablespace_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::RELATIVE_GS() {
  return getToken(Gauss200Parser::RELATIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::LOCATION_GS() {
  return getToken(Gauss200Parser::LOCATION_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_tablespace_stmtContext::CHAR_STRING() {
  return getTokens(Gauss200Parser::CHAR_STRING);
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::CHAR_STRING(size_t i) {
  return getToken(Gauss200Parser::CHAR_STRING, i);
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::OWNER_GS() {
  return getToken(Gauss200Parser::OWNER_GS, 0);
}

Gauss200Parser::User_nameContext* Gauss200Parser::Create_tablespace_stmtContext::user_name() {
  return getRuleContext<Gauss200Parser::User_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::MAXSIZE_GS() {
  return getToken(Gauss200Parser::MAXSIZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_tablespace_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Create_tablespace_stmtContext::paren_assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(0);
}


size_t Gauss200Parser::Create_tablespace_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_tablespace_stmt;
}

void Gauss200Parser::Create_tablespace_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_tablespace_stmt(this);
}

void Gauss200Parser::Create_tablespace_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_tablespace_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_tablespace_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_tablespace_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_tablespace_stmtContext* Gauss200Parser::create_tablespace_stmt() {
  Create_tablespace_stmtContext *_localctx = _tracker.createInstance<Create_tablespace_stmtContext>(_ctx, getState());
  enterRule(_localctx, 550, Gauss200Parser::RuleCreate_tablespace_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3776);
    match(Gauss200Parser::CREATE_GS);
    setState(3777);
    match(Gauss200Parser::TABLESPACE_GS);
    setState(3778);
    tablespace_name();
    setState(3781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::OWNER_GS) {
      setState(3779);
      match(Gauss200Parser::OWNER_GS);
      setState(3780);
      user_name();
    }
    setState(3783);
    match(Gauss200Parser::RELATIVE_GS);
    setState(3784);
    match(Gauss200Parser::LOCATION_GS);
    setState(3785);
    match(Gauss200Parser::CHAR_STRING);
    setState(3788);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::MAXSIZE_GS) {
      setState(3786);
      match(Gauss200Parser::MAXSIZE_GS);
      setState(3787);
      match(Gauss200Parser::CHAR_STRING);
    }
    setState(3792);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3790);
      match(Gauss200Parser::WITH_GS);
      setState(3791);
      paren_assignment_stmt_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_txt_search_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_txt_search_stmtContext::Create_txt_search_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_txt_search_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_txt_search_stmtContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_txt_search_stmtContext::SEARCH_GS() {
  return getToken(Gauss200Parser::SEARCH_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Create_txt_search_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::Paren_assignment_stmt_listContext *> Gauss200Parser::Create_txt_search_stmtContext::paren_assignment_stmt_list() {
  return getRuleContexts<Gauss200Parser::Paren_assignment_stmt_listContext>();
}

Gauss200Parser::Paren_assignment_stmt_listContext* Gauss200Parser::Create_txt_search_stmtContext::paren_assignment_stmt_list(size_t i) {
  return getRuleContext<Gauss200Parser::Paren_assignment_stmt_listContext>(i);
}

tree::TerminalNode* Gauss200Parser::Create_txt_search_stmtContext::CONFIGURATION_GS() {
  return getToken(Gauss200Parser::CONFIGURATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_txt_search_stmtContext::DICTIONARY_GS() {
  return getToken(Gauss200Parser::DICTIONARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_txt_search_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}


size_t Gauss200Parser::Create_txt_search_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_txt_search_stmt;
}

void Gauss200Parser::Create_txt_search_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_txt_search_stmt(this);
}

void Gauss200Parser::Create_txt_search_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_txt_search_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_txt_search_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_txt_search_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_txt_search_stmtContext* Gauss200Parser::create_txt_search_stmt() {
  Create_txt_search_stmtContext *_localctx = _tracker.createInstance<Create_txt_search_stmtContext>(_ctx, getState());
  enterRule(_localctx, 552, Gauss200Parser::RuleCreate_txt_search_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3794);
    match(Gauss200Parser::CREATE_GS);
    setState(3795);
    match(Gauss200Parser::TEXT_GS);
    setState(3796);
    match(Gauss200Parser::SEARCH_GS);
    setState(3797);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::CONFIGURATION_GS

    || _la == Gauss200Parser::DICTIONARY_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3798);
    identifier();
    setState(3799);
    paren_assignment_stmt_list();
    setState(3802);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3800);
      match(Gauss200Parser::WITH_GS);
      setState(3801);
      paren_assignment_stmt_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_trigger_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_trigger_stmtContext::Create_trigger_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::TRIGGER_GS() {
  return getToken(Gauss200Parser::TRIGGER_GS, 0);
}

Gauss200Parser::Trigger_nameContext* Gauss200Parser::Create_trigger_stmtContext::trigger_name() {
  return getRuleContext<Gauss200Parser::Trigger_nameContext>(0);
}

Gauss200Parser::Trigger_typeContext* Gauss200Parser::Create_trigger_stmtContext::trigger_type() {
  return getRuleContext<Gauss200Parser::Trigger_typeContext>(0);
}

Gauss200Parser::Trigger_event_listContext* Gauss200Parser::Create_trigger_stmtContext::trigger_event_list() {
  return getRuleContext<Gauss200Parser::Trigger_event_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

std::vector<Gauss200Parser::Table_nameContext *> Gauss200Parser::Create_trigger_stmtContext::table_name() {
  return getRuleContexts<Gauss200Parser::Table_nameContext>();
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Create_trigger_stmtContext::table_name(size_t i) {
  return getRuleContext<Gauss200Parser::Table_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::EXECUTE_GS() {
  return getToken(Gauss200Parser::EXECUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::PROCEDURE_GS() {
  return getToken(Gauss200Parser::PROCEDURE_GS, 0);
}

Gauss200Parser::Func_nameContext* Gauss200Parser::Create_trigger_stmtContext::func_name() {
  return getRuleContext<Gauss200Parser::Func_nameContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_trigger_stmtContext::LEFT_PAREN() {
  return getTokens(Gauss200Parser::LEFT_PAREN);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::LEFT_PAREN(size_t i) {
  return getToken(Gauss200Parser::LEFT_PAREN, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_trigger_stmtContext::RIGHT_PAREN() {
  return getTokens(Gauss200Parser::RIGHT_PAREN);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::RIGHT_PAREN(size_t i) {
  return getToken(Gauss200Parser::RIGHT_PAREN, i);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Table_constraint_deferrableContext* Gauss200Parser::Create_trigger_stmtContext::table_constraint_deferrable() {
  return getRuleContext<Gauss200Parser::Table_constraint_deferrableContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::WHEN_GS() {
  return getToken(Gauss200Parser::WHEN_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Create_trigger_stmtContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Param_expr_listContext* Gauss200Parser::Create_trigger_stmtContext::param_expr_list() {
  return getRuleContext<Gauss200Parser::Param_expr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::STATEMENT_GS() {
  return getToken(Gauss200Parser::STATEMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_trigger_stmtContext::EACH_GS() {
  return getToken(Gauss200Parser::EACH_GS, 0);
}


size_t Gauss200Parser::Create_trigger_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_trigger_stmt;
}

void Gauss200Parser::Create_trigger_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_trigger_stmt(this);
}

void Gauss200Parser::Create_trigger_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_trigger_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_trigger_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_trigger_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_trigger_stmtContext* Gauss200Parser::create_trigger_stmt() {
  Create_trigger_stmtContext *_localctx = _tracker.createInstance<Create_trigger_stmtContext>(_ctx, getState());
  enterRule(_localctx, 554, Gauss200Parser::RuleCreate_trigger_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3804);
    match(Gauss200Parser::CREATE_GS);
    setState(3806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONSTRAINT_GS) {
      setState(3805);
      match(Gauss200Parser::CONSTRAINT_GS);
    }
    setState(3808);
    match(Gauss200Parser::TRIGGER_GS);
    setState(3809);
    trigger_name();
    setState(3810);
    trigger_type();
    setState(3811);
    trigger_event_list();
    setState(3812);
    match(Gauss200Parser::ON_GS);
    setState(3813);
    table_name();
    setState(3816);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FROM_GS) {
      setState(3814);
      match(Gauss200Parser::FROM_GS);
      setState(3815);
      table_name();
    }
    setState(3819);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Gauss200Parser::DEFERRABLE_GS)
      | (1ULL << Gauss200Parser::INITIALLY_GS)
      | (1ULL << Gauss200Parser::NOT_GS))) != 0)) {
      setState(3818);
      table_constraint_deferrable();
    }
    setState(3826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FOR_GS) {
      setState(3821);
      match(Gauss200Parser::FOR_GS);
      setState(3823);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::EACH_GS) {
        setState(3822);
        match(Gauss200Parser::EACH_GS);
      }
      setState(3825);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::STATEMENT_GS || _la == Gauss200Parser::ROW_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3833);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WHEN_GS) {
      setState(3828);
      match(Gauss200Parser::WHEN_GS);
      setState(3829);
      match(Gauss200Parser::LEFT_PAREN);
      setState(3830);
      expression();
      setState(3831);
      match(Gauss200Parser::RIGHT_PAREN);
    }
    setState(3835);
    match(Gauss200Parser::EXECUTE_GS);
    setState(3836);
    match(Gauss200Parser::PROCEDURE_GS);
    setState(3837);
    func_name();
    setState(3838);
    match(Gauss200Parser::LEFT_PAREN);
    setState(3840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
      | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
      | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
      | (1ULL << (Gauss200Parser::AND_GS - 1))
      | (1ULL << (Gauss200Parser::ANY_GS - 1))
      | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
      | (1ULL << (Gauss200Parser::ASC_GS - 1))
      | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
      | (1ULL << (Gauss200Parser::AS_GS - 1))
      | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
      | (1ULL << (Gauss200Parser::BOTH_GS - 1))
      | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
      | (1ULL << (Gauss200Parser::CASE_GS - 1))
      | (1ULL << (Gauss200Parser::CAST_GS - 1))
      | (1ULL << (Gauss200Parser::CHECK_GS - 1))
      | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
      | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
      | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
      | (1ULL << (Gauss200Parser::CREATE_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
      | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
      | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
      | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
      | (1ULL << (Gauss200Parser::DESC_GS - 1))
      | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
      | (1ULL << (Gauss200Parser::DO_GS - 1))
      | (1ULL << (Gauss200Parser::ELSE_GS - 1))
      | (1ULL << (Gauss200Parser::END_GS - 1))
      | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
      | (1ULL << (Gauss200Parser::FALSE_GS - 1))
      | (1ULL << (Gauss200Parser::FETCH_GS - 1))
      | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
      | (1ULL << (Gauss200Parser::FOR_GS - 1))
      | (1ULL << (Gauss200Parser::FROM_GS - 1))
      | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
      | (1ULL << (Gauss200Parser::GRANT_GS - 1))
      | (1ULL << (Gauss200Parser::GROUP_GS - 1))
      | (1ULL << (Gauss200Parser::HAVING_GS - 1))
      | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
      | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
      | (1ULL << (Gauss200Parser::INTO_GS - 1))
      | (1ULL << (Gauss200Parser::IN_GS - 1))
      | (1ULL << (Gauss200Parser::IS_GS - 1))
      | (1ULL << (Gauss200Parser::LEADING_GS - 1))
      | (1ULL << (Gauss200Parser::LESS_GS - 1))
      | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
      | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
      | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
      | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
      | (1ULL << (Gauss200Parser::MINUS_GS - 1))
      | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
      | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
      | (1ULL << (Gauss200Parser::NOT_GS - 1))
      | (1ULL << (Gauss200Parser::NULL_GS - 1))
      | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
      | (1ULL << (Gauss200Parser::ONLY_GS - 1))
      | (1ULL << (Gauss200Parser::ON_GS - 1))
      | (1ULL << (Gauss200Parser::ORDER_GS - 1))
      | (1ULL << (Gauss200Parser::OR_GS - 1))
      | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
      | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
      | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
      | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
      | (1ULL << (Gauss200Parser::REJECT_GS - 65))
      | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
      | (1ULL << (Gauss200Parser::RETURN_GS - 65))
      | (1ULL << (Gauss200Parser::SELECT_GS - 65))
      | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
      | (1ULL << (Gauss200Parser::SOME_GS - 65))
      | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
      | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
      | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
      | (1ULL << (Gauss200Parser::THEN_GS - 65))
      | (1ULL << (Gauss200Parser::TO_GS - 65))
      | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
      | (1ULL << (Gauss200Parser::TRUE_GS - 65))
      | (1ULL << (Gauss200Parser::UNION_GS - 65))
      | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
      | (1ULL << (Gauss200Parser::USER_GS - 65))
      | (1ULL << (Gauss200Parser::USING_GS - 65))
      | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
      | (1ULL << (Gauss200Parser::WHEN_GS - 65))
      | (1ULL << (Gauss200Parser::WHERE_GS - 65))
      | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
      | (1ULL << (Gauss200Parser::WITH_GS - 65))
      | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
      | (1ULL << (Gauss200Parser::BINARY_GS - 65))
      | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
      | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
      | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
      | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
      | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
      | (1ULL << (Gauss200Parser::INNER_GS - 65))
      | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
      | (1ULL << (Gauss200Parser::JOIN_GS - 65))
      | (1ULL << (Gauss200Parser::LEFT_GS - 65))
      | (1ULL << (Gauss200Parser::LIKE_GS - 65))
      | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
      | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
      | (1ULL << (Gauss200Parser::OUTER_GS - 65))
      | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
      | (1ULL << (Gauss200Parser::OVER_GS - 65))
      | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
      | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
      | (1ULL << (Gauss200Parser::ABORT_GS - 65))
      | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
      | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
      | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
      | (1ULL << (Gauss200Parser::ACTION_GS - 65))
      | (1ULL << (Gauss200Parser::ADD_GS - 65))
      | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
      | (1ULL << (Gauss200Parser::AFTER_GS - 65))
      | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
      | (1ULL << (Gauss200Parser::ALSO_GS - 65))
      | (1ULL << (Gauss200Parser::ALTER_GS - 65))
      | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
      | (1ULL << (Gauss200Parser::APP_GS - 65))
      | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
      | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
      | (1ULL << (Gauss200Parser::AT_GS - 129))
      | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
      | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
      | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
      | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
      | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
      | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
      | (1ULL << (Gauss200Parser::BLOB_GS - 129))
      | (1ULL << (Gauss200Parser::BY_GS - 129))
      | (1ULL << (Gauss200Parser::CACHE_GS - 129))
      | (1ULL << (Gauss200Parser::CALLED_GS - 129))
      | (1ULL << (Gauss200Parser::CALL_GS - 129))
      | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
      | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
      | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
      | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
      | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
      | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
      | (1ULL << (Gauss200Parser::CLASS_GS - 129))
      | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
      | (1ULL << (Gauss200Parser::CLOB_GS - 129))
      | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
      | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
      | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
      | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
      | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
      | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
      | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
      | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
      | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
      | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
      | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
      | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
      | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
      | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
      | (1ULL << (Gauss200Parser::COPY_GS - 129))
      | (1ULL << (Gauss200Parser::COST_GS - 129))
      | (1ULL << (Gauss200Parser::CSV_GS - 129))
      | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
      | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
      | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
      | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
      | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
      | (1ULL << (Gauss200Parser::DATA_GS - 129))
      | (1ULL << (Gauss200Parser::DAY_GS - 129))
      | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
      | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
      | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
      | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
      | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
      | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
      | (1ULL << (Gauss200Parser::DELETE_GS - 129))
      | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
      | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
      | (1ULL << (Gauss200Parser::DELTA_GS - 129))
      | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
      | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
      | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
      | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
      | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
      | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
      | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
      | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
      | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
      | (1ULL << (Gauss200Parser::DROP_GS - 193))
      | (1ULL << (Gauss200Parser::EACH_GS - 193))
      | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
      | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
      | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
      | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
      | (1ULL << (Gauss200Parser::ENUM_GS - 193))
      | (1ULL << (Gauss200Parser::EOL_GS - 193))
      | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
      | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
      | (1ULL << (Gauss200Parser::EVERY_GS - 193))
      | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
      | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
      | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
      | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
      | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
      | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
      | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
      | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
      | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
      | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
      | (1ULL << (Gauss200Parser::FIRST_GS - 193))
      | (1ULL << (Gauss200Parser::FIXED_GS - 193))
      | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
      | (1ULL << (Gauss200Parser::FORCE_GS - 193))
      | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
      | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
      | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
      | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
      | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
      | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
      | (1ULL << (Gauss200Parser::HEADER_GS - 193))
      | (1ULL << (Gauss200Parser::HOLD_GS - 193))
      | (1ULL << (Gauss200Parser::HOUR_GS - 193))
      | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
      | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
      | (1ULL << (Gauss200Parser::IF_GS - 193))
      | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
      | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
      | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
      | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
      | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
      | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
      | (1ULL << (Gauss200Parser::INDEX_GS - 193))
      | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
      | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
      | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
      | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
      | (1ULL << (Gauss200Parser::INLINE_GS - 193))
      | (1ULL << (Gauss200Parser::INPUT_GS - 193))
      | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
      | (1ULL << (Gauss200Parser::INSERT_GS - 193))
      | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
      | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
      | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
      | (1ULL << (Gauss200Parser::KEY_GS - 193))
      | (1ULL << (Gauss200Parser::LABEL_GS - 193))
      | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
      | (1ULL << (Gauss200Parser::LARGE_GS - 193))
      | (1ULL << (Gauss200Parser::LAST_GS - 193))
      | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
      | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
      | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
      | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
      | (1ULL << (Gauss200Parser::LOAD_GS - 257))
      | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
      | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
      | (1ULL << (Gauss200Parser::LOCK_GS - 257))
      | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
      | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
      | (1ULL << (Gauss200Parser::LOG_GS - 257))
      | (1ULL << (Gauss200Parser::LOOP_GS - 257))
      | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
      | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
      | (1ULL << (Gauss200Parser::MATCH_GS - 257))
      | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
      | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
      | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
      | (1ULL << (Gauss200Parser::MERGE_GS - 257))
      | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
      | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
      | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
      | (1ULL << (Gauss200Parser::MODE_GS - 257))
      | (1ULL << (Gauss200Parser::MONTH_GS - 257))
      | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
      | (1ULL << (Gauss200Parser::MOVE_GS - 257))
      | (1ULL << (Gauss200Parser::NAMES_GS - 257))
      | (1ULL << (Gauss200Parser::NAME_GS - 257))
      | (1ULL << (Gauss200Parser::NEXT_GS - 257))
      | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
      | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
      | (1ULL << (Gauss200Parser::NODE_GS - 257))
      | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
      | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
      | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
      | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
      | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
      | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
      | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
      | (1ULL << (Gauss200Parser::NO_GS - 257))
      | (1ULL << (Gauss200Parser::NULLS_GS - 257))
      | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
      | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
      | (1ULL << (Gauss200Parser::OFF_GS - 257))
      | (1ULL << (Gauss200Parser::OF_GS - 257))
      | (1ULL << (Gauss200Parser::OIDS_GS - 257))
      | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
      | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
      | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
      | (1ULL << (Gauss200Parser::OPTION_GS - 257))
      | (1ULL << (Gauss200Parser::OWNED_GS - 257))
      | (1ULL << (Gauss200Parser::OWNER_GS - 257))
      | (1ULL << (Gauss200Parser::PARSER_GS - 257))
      | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
      | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
      | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
      | (1ULL << (Gauss200Parser::PASSING_GS - 257))
      | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
      | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
      | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
      | (1ULL << (Gauss200Parser::PER_GS - 257))
      | (1ULL << (Gauss200Parser::PLANS_GS - 257))
      | (1ULL << (Gauss200Parser::POOL_GS - 257))
      | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
      | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
      | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
      | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
      | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
      | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
      | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
      | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
      | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
      | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
      | (1ULL << (Gauss200Parser::QUERY_GS - 321))
      | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
      | (1ULL << (Gauss200Parser::RANGE_GS - 321))
      | (1ULL << (Gauss200Parser::RAW_GS - 321))
      | (1ULL << (Gauss200Parser::READ_GS - 321))
      | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
      | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
      | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
      | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
      | (1ULL << (Gauss200Parser::REF_GS - 321))
      | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
      | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
      | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
      | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
      | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
      | (1ULL << (Gauss200Parser::RENAME_GS - 321))
      | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
      | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
      | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
      | (1ULL << (Gauss200Parser::RESET_GS - 321))
      | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
      | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
      | (1ULL << (Gauss200Parser::RESTART_GS - 321))
      | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
      | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
      | (1ULL << (Gauss200Parser::REUSE_GS - 321))
      | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
      | (1ULL << (Gauss200Parser::ROLE_GS - 321))
      | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
      | (1ULL << (Gauss200Parser::ROWS_GS - 321))
      | (1ULL << (Gauss200Parser::RULE_GS - 321))
      | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
      | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
      | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
      | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
      | (1ULL << (Gauss200Parser::SECOND_GS - 321))
      | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
      | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
      | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
      | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
      | (1ULL << (Gauss200Parser::SERVER_GS - 321))
      | (1ULL << (Gauss200Parser::SESSION_GS - 321))
      | (1ULL << (Gauss200Parser::SET_GS - 321))
      | (1ULL << (Gauss200Parser::SHARE_GS - 321))
      | (1ULL << (Gauss200Parser::SHOW_GS - 321))
      | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
      | (1ULL << (Gauss200Parser::SIZE_GS - 321))
      | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
      | (1ULL << (Gauss200Parser::STABLE_GS - 321))
      | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
      | (1ULL << (Gauss200Parser::START_GS - 321))
      | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
      | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
      | (1ULL << (Gauss200Parser::STDIN_GS - 321))
      | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
      | (1ULL << (Gauss200Parser::STORE_GS - 385))
      | (1ULL << (Gauss200Parser::STRICT_GS - 385))
      | (1ULL << (Gauss200Parser::STRIP_GS - 385))
      | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
      | (1ULL << (Gauss200Parser::SYSID_GS - 385))
      | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
      | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
      | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
      | (1ULL << (Gauss200Parser::TABLES_GS - 385))
      | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
      | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
      | (1ULL << (Gauss200Parser::TEMP_GS - 385))
      | (1ULL << (Gauss200Parser::TEXT_GS - 385))
      | (1ULL << (Gauss200Parser::THAN_GS - 385))
      | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
      | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
      | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
      | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
      | (1ULL << (Gauss200Parser::TYPES_GS - 385))
      | (1ULL << (Gauss200Parser::TYPE_GS - 385))
      | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
      | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
      | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
      | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
      | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
      | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
      | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
      | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
      | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
      | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
      | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
      | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
      | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
      | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
      | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
      | (1ULL << (Gauss200Parser::VALID_GS - 385))
      | (1ULL << (Gauss200Parser::VALUE_GS - 385))
      | (1ULL << (Gauss200Parser::VARYING_GS - 385))
      | (1ULL << (Gauss200Parser::VERSION_GS - 385))
      | (1ULL << (Gauss200Parser::VIEW_GS - 385))
      | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
      | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
      | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
      | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
      | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
      | (1ULL << (Gauss200Parser::WORK_GS - 385))
      | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
      | (1ULL << (Gauss200Parser::WRITE_GS - 385))
      | (1ULL << (Gauss200Parser::XML_GS - 385))
      | (1ULL << (Gauss200Parser::YEAR_GS - 385))
      | (1ULL << (Gauss200Parser::YES_GS - 385))
      | (1ULL << (Gauss200Parser::ZONE_GS - 385))
      | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
      | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
      | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
      | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
      | (1ULL << (Gauss200Parser::BIT_GS - 385))
      | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
      | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
      | (1ULL << (Gauss200Parser::CHAR_GS - 385))
      | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
      | (1ULL << (Gauss200Parser::DATE_GS - 385))
      | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
      | (1ULL << (Gauss200Parser::DEC_GS - 449))
      | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
      | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
      | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
      | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
      | (1ULL << (Gauss200Parser::INOUT_GS - 449))
      | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
      | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
      | (1ULL << (Gauss200Parser::INT_GS - 449))
      | (1ULL << (Gauss200Parser::LEAST_GS - 449))
      | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
      | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
      | (1ULL << (Gauss200Parser::NONE_GS - 449))
      | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
      | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
      | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
      | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
      | (1ULL << (Gauss200Parser::NVL_GS - 449))
      | (1ULL << (Gauss200Parser::OUT_GS - 449))
      | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
      | (1ULL << (Gauss200Parser::POSITION_GS - 449))
      | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
      | (1ULL << (Gauss200Parser::REAL_GS - 449))
      | (1ULL << (Gauss200Parser::ROW_GS - 449))
      | (1ULL << (Gauss200Parser::SETOF_GS - 449))
      | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
      | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
      | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
      | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
      | (1ULL << (Gauss200Parser::TIME_GS - 449))
      | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
      | (1ULL << (Gauss200Parser::TREAT_GS - 449))
      | (1ULL << (Gauss200Parser::TRIM_GS - 449))
      | (1ULL << (Gauss200Parser::VALUES_GS - 449))
      | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
      | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
      | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
      | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
      | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
      | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
      | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
      | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
      | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
      | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
      | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
      | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
      | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
      | (1ULL << (Gauss200Parser::POINT_GS - 449))
      | (1ULL << (Gauss200Parser::LSEG_GS - 449))
      | (1ULL << (Gauss200Parser::BOX_GS - 449))
      | (1ULL << (Gauss200Parser::PATH_GS - 449))
      | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
      | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
      | (1ULL << (Gauss200Parser::CIDR_GS - 449))
      | (1ULL << (Gauss200Parser::INET_GS - 449))
      | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
      | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
      | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
      | (1ULL << (Gauss200Parser::USAGE_GS - 516))
      | (1ULL << (Gauss200Parser::SPACE_GS - 516))
      | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
      | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
      | (1ULL << (Gauss200Parser::CUBE_GS - 601))
      | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
      | (1ULL << (Gauss200Parser::SETS_GS - 601))
      | (1ULL << (Gauss200Parser::LEFT_PAREN - 601))
      | (1ULL << (Gauss200Parser::PLUS_SIGN - 601))
      | (1ULL << (Gauss200Parser::MINUS_SIGN - 601))
      | (1ULL << (Gauss200Parser::AT_SIGN - 601))
      | (1ULL << (Gauss200Parser::QUESTION_MARK - 601))
      | (1ULL << (Gauss200Parser::TILDE_OPERATOR_PART - 601))
      | (1ULL << (Gauss200Parser::EXCLAMATION_OPERATOR_PART - 601))
      | (1ULL << (Gauss200Parser::POUND_SIGN - 601))
      | (1ULL << (Gauss200Parser::BAR - 601))
      | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
      | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
      | (1ULL << (Gauss200Parser::SCONST - 601))
      | (1ULL << (Gauss200Parser::ICONST - 601))
      | (1ULL << (Gauss200Parser::FCONST - 601))
      | (1ULL << (Gauss200Parser::BCONST - 601))
      | (1ULL << (Gauss200Parser::PARAM - 601)))) != 0)) {
      setState(3839);
      param_expr_list();
    }
    setState(3842);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_typeContext ------------------------------------------------------------------

Gauss200Parser::Trigger_typeContext::Trigger_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Trigger_typeContext::BEFORE_GS() {
  return getToken(Gauss200Parser::BEFORE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Trigger_typeContext::AFTER_GS() {
  return getToken(Gauss200Parser::AFTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Trigger_typeContext::INSTEAD_GS() {
  return getToken(Gauss200Parser::INSTEAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Trigger_typeContext::OF_GS() {
  return getToken(Gauss200Parser::OF_GS, 0);
}


size_t Gauss200Parser::Trigger_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleTrigger_type;
}

void Gauss200Parser::Trigger_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_type(this);
}

void Gauss200Parser::Trigger_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_type(this);
}


antlrcpp::Any Gauss200Parser::Trigger_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTrigger_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Trigger_typeContext* Gauss200Parser::trigger_type() {
  Trigger_typeContext *_localctx = _tracker.createInstance<Trigger_typeContext>(_ctx, getState());
  enterRule(_localctx, 556, Gauss200Parser::RuleTrigger_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3848);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::BEFORE_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3844);
        match(Gauss200Parser::BEFORE_GS);
        break;
      }

      case Gauss200Parser::AFTER_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3845);
        match(Gauss200Parser::AFTER_GS);
        break;
      }

      case Gauss200Parser::INSTEAD_GS: {
        enterOuterAlt(_localctx, 3);
        setState(3846);
        match(Gauss200Parser::INSTEAD_GS);
        setState(3847);
        match(Gauss200Parser::OF_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_event_listContext ------------------------------------------------------------------

Gauss200Parser::Trigger_event_listContext::Trigger_event_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Trigger_eventContext *> Gauss200Parser::Trigger_event_listContext::trigger_event() {
  return getRuleContexts<Gauss200Parser::Trigger_eventContext>();
}

Gauss200Parser::Trigger_eventContext* Gauss200Parser::Trigger_event_listContext::trigger_event(size_t i) {
  return getRuleContext<Gauss200Parser::Trigger_eventContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Trigger_event_listContext::OR_GS() {
  return getTokens(Gauss200Parser::OR_GS);
}

tree::TerminalNode* Gauss200Parser::Trigger_event_listContext::OR_GS(size_t i) {
  return getToken(Gauss200Parser::OR_GS, i);
}


size_t Gauss200Parser::Trigger_event_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleTrigger_event_list;
}

void Gauss200Parser::Trigger_event_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_event_list(this);
}

void Gauss200Parser::Trigger_event_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_event_list(this);
}


antlrcpp::Any Gauss200Parser::Trigger_event_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTrigger_event_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Trigger_event_listContext* Gauss200Parser::trigger_event_list() {
  Trigger_event_listContext *_localctx = _tracker.createInstance<Trigger_event_listContext>(_ctx, getState());
  enterRule(_localctx, 558, Gauss200Parser::RuleTrigger_event_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3850);
    trigger_event();
    setState(3855);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::OR_GS) {
      setState(3851);
      match(Gauss200Parser::OR_GS);
      setState(3852);
      trigger_event();
      setState(3857);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_eventContext ------------------------------------------------------------------

Gauss200Parser::Trigger_eventContext::Trigger_eventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Trigger_eventContext::INSERT_GS() {
  return getToken(Gauss200Parser::INSERT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Trigger_eventContext::UPDATE_GS() {
  return getToken(Gauss200Parser::UPDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Trigger_eventContext::OF_GS() {
  return getToken(Gauss200Parser::OF_GS, 0);
}

std::vector<Gauss200Parser::Column_nameContext *> Gauss200Parser::Trigger_eventContext::column_name() {
  return getRuleContexts<Gauss200Parser::Column_nameContext>();
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Trigger_eventContext::column_name(size_t i) {
  return getRuleContext<Gauss200Parser::Column_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Trigger_eventContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Trigger_eventContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

tree::TerminalNode* Gauss200Parser::Trigger_eventContext::DELETE_GS() {
  return getToken(Gauss200Parser::DELETE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Trigger_eventContext::TRUNCATE_GS() {
  return getToken(Gauss200Parser::TRUNCATE_GS, 0);
}


size_t Gauss200Parser::Trigger_eventContext::getRuleIndex() const {
  return Gauss200Parser::RuleTrigger_event;
}

void Gauss200Parser::Trigger_eventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_event(this);
}

void Gauss200Parser::Trigger_eventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_event(this);
}


antlrcpp::Any Gauss200Parser::Trigger_eventContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTrigger_event(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Trigger_eventContext* Gauss200Parser::trigger_event() {
  Trigger_eventContext *_localctx = _tracker.createInstance<Trigger_eventContext>(_ctx, getState());
  enterRule(_localctx, 560, Gauss200Parser::RuleTrigger_event);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3873);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::INSERT_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3858);
        match(Gauss200Parser::INSERT_GS);
        break;
      }

      case Gauss200Parser::UPDATE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(3859);
        match(Gauss200Parser::UPDATE_GS);
        setState(3869);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::OF_GS) {
          setState(3860);
          match(Gauss200Parser::OF_GS);
          setState(3861);
          column_name();
          setState(3866);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Gauss200Parser::COMMA) {
            setState(3862);
            match(Gauss200Parser::COMMA);
            setState(3863);
            column_name();
            setState(3868);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        break;
      }

      case Gauss200Parser::DELETE_GS: {
        enterOuterAlt(_localctx, 3);
        setState(3871);
        match(Gauss200Parser::DELETE_GS);
        break;
      }

      case Gauss200Parser::TRUNCATE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(3872);
        match(Gauss200Parser::TRUNCATE_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_type_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_type_stmtContext::Create_type_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_type_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_type_stmtContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

Gauss200Parser::Type_nameContext* Gauss200Parser::Create_type_stmtContext::type_name() {
  return getRuleContext<Gauss200Parser::Type_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_type_stmtContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_type_stmtContext::ENUM_GS() {
  return getToken(Gauss200Parser::ENUM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_type_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Create_type_optionContext* Gauss200Parser::Create_type_stmtContext::create_type_option() {
  return getRuleContext<Gauss200Parser::Create_type_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_type_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Create_type_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_type_stmt;
}

void Gauss200Parser::Create_type_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_type_stmt(this);
}

void Gauss200Parser::Create_type_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_type_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_type_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_type_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_type_stmtContext* Gauss200Parser::create_type_stmt() {
  Create_type_stmtContext *_localctx = _tracker.createInstance<Create_type_stmtContext>(_ctx, getState());
  enterRule(_localctx, 562, Gauss200Parser::RuleCreate_type_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3875);
    match(Gauss200Parser::CREATE_GS);
    setState(3876);
    match(Gauss200Parser::TYPE_GS);
    setState(3877);
    type_name();
    setState(3879);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::AS_GS) {
      setState(3878);
      match(Gauss200Parser::AS_GS);
    }
    setState(3882);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ENUM_GS) {
      setState(3881);
      match(Gauss200Parser::ENUM_GS);
    }
    setState(3888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(3884);
      match(Gauss200Parser::LEFT_PAREN);
      setState(3885);
      create_type_option();
      setState(3886);
      match(Gauss200Parser::RIGHT_PAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_type_optionContext ------------------------------------------------------------------

Gauss200Parser::Create_type_optionContext::Create_type_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Column_clause_add_column_optionContext *> Gauss200Parser::Create_type_optionContext::column_clause_add_column_option() {
  return getRuleContexts<Gauss200Parser::Column_clause_add_column_optionContext>();
}

Gauss200Parser::Column_clause_add_column_optionContext* Gauss200Parser::Create_type_optionContext::column_clause_add_column_option(size_t i) {
  return getRuleContext<Gauss200Parser::Column_clause_add_column_optionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Create_type_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Create_type_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Assignment_stmt_listContext* Gauss200Parser::Create_type_optionContext::assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Assignment_stmt_listContext>(0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Create_type_optionContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}


size_t Gauss200Parser::Create_type_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_type_option;
}

void Gauss200Parser::Create_type_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_type_option(this);
}

void Gauss200Parser::Create_type_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_type_option(this);
}


antlrcpp::Any Gauss200Parser::Create_type_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_type_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_type_optionContext* Gauss200Parser::create_type_option() {
  Create_type_optionContext *_localctx = _tracker.createInstance<Create_type_optionContext>(_ctx, getState());
  enterRule(_localctx, 564, Gauss200Parser::RuleCreate_type_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3900);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3890);
      column_clause_add_column_option();
      setState(3895);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(3891);
        match(Gauss200Parser::COMMA);
        setState(3892);
        column_clause_add_column_option();
        setState(3897);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3898);
      assignment_stmt_list();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3899);
      expression_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_user_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_user_stmtContext::Create_user_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_user_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_user_stmtContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

Gauss200Parser::User_nameContext* Gauss200Parser::Create_user_stmtContext::user_name() {
  return getRuleContext<Gauss200Parser::User_nameContext>(0);
}

Gauss200Parser::Alter_role_encrypt_optionContext* Gauss200Parser::Create_user_stmtContext::alter_role_encrypt_option() {
  return getRuleContext<Gauss200Parser::Alter_role_encrypt_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_user_stmtContext::ENCRYPTED_GS() {
  return getToken(Gauss200Parser::ENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_user_stmtContext::UNENCRYPTED_GS() {
  return getToken(Gauss200Parser::UNENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_user_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::Alter_role_with_optionContext *> Gauss200Parser::Create_user_stmtContext::alter_role_with_option() {
  return getRuleContexts<Gauss200Parser::Alter_role_with_optionContext>();
}

Gauss200Parser::Alter_role_with_optionContext* Gauss200Parser::Create_user_stmtContext::alter_role_with_option(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_role_with_optionContext>(i);
}


size_t Gauss200Parser::Create_user_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_user_stmt;
}

void Gauss200Parser::Create_user_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_user_stmt(this);
}

void Gauss200Parser::Create_user_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_user_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_user_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_user_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_user_stmtContext* Gauss200Parser::create_user_stmt() {
  Create_user_stmtContext *_localctx = _tracker.createInstance<Create_user_stmtContext>(_ctx, getState());
  enterRule(_localctx, 566, Gauss200Parser::RuleCreate_user_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3902);
    match(Gauss200Parser::CREATE_GS);
    setState(3903);
    match(Gauss200Parser::USER_GS);
    setState(3904);
    user_name();
    setState(3913);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx)) {
    case 1: {
      setState(3906);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(3905);
        match(Gauss200Parser::WITH_GS);
      }
      setState(3909); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3908);
                alter_role_with_option();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3911); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    }
    setState(3916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS) {
      setState(3915);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ENCRYPTED_GS || _la == Gauss200Parser::UNENCRYPTED_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3918);
    alter_role_encrypt_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_view_stmtContext ------------------------------------------------------------------

Gauss200Parser::Create_view_stmtContext::Create_view_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Create_view_stmtContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Create_view_stmtContext::VIEW_GS() {
  return getToken(Gauss200Parser::VIEW_GS, 0);
}

Gauss200Parser::View_nameContext* Gauss200Parser::Create_view_stmtContext::view_name() {
  return getRuleContext<Gauss200Parser::View_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_view_stmtContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Create_view_stmtContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

Gauss200Parser::Or_replaceContext* Gauss200Parser::Create_view_stmtContext::or_replace() {
  return getRuleContext<Gauss200Parser::Or_replaceContext>(0);
}

Gauss200Parser::Temporary_tempContext* Gauss200Parser::Create_view_stmtContext::temporary_temp() {
  return getRuleContext<Gauss200Parser::Temporary_tempContext>(0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Create_view_stmtContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Create_view_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Assignment_stmt_listContext* Gauss200Parser::Create_view_stmtContext::assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Assignment_stmt_listContext>(0);
}


size_t Gauss200Parser::Create_view_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCreate_view_stmt;
}

void Gauss200Parser::Create_view_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_view_stmt(this);
}

void Gauss200Parser::Create_view_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_view_stmt(this);
}


antlrcpp::Any Gauss200Parser::Create_view_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCreate_view_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Create_view_stmtContext* Gauss200Parser::create_view_stmt() {
  Create_view_stmtContext *_localctx = _tracker.createInstance<Create_view_stmtContext>(_ctx, getState());
  enterRule(_localctx, 568, Gauss200Parser::RuleCreate_view_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3920);
    match(Gauss200Parser::CREATE_GS);
    setState(3922);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::OR_GS) {
      setState(3921);
      or_replace();
    }
    setState(3925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TEMPORARY_GS

    || _la == Gauss200Parser::TEMP_GS) {
      setState(3924);
      temporary_temp();
    }
    setState(3927);
    match(Gauss200Parser::VIEW_GS);
    setState(3928);
    view_name();
    setState(3930);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(3929);
      paren_column_list();
    }
    setState(3934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3932);
      match(Gauss200Parser::WITH_GS);
      setState(3933);
      assignment_stmt_list();
    }
    setState(3936);
    match(Gauss200Parser::AS_GS);
    setState(3937);
    select_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_manipulate_stmtContext ------------------------------------------------------------------

Gauss200Parser::Data_manipulate_stmtContext::Data_manipulate_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Data_manipulate_stmtContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

Gauss200Parser::Insert_stmtContext* Gauss200Parser::Data_manipulate_stmtContext::insert_stmt() {
  return getRuleContext<Gauss200Parser::Insert_stmtContext>(0);
}

Gauss200Parser::Update_stmtContext* Gauss200Parser::Data_manipulate_stmtContext::update_stmt() {
  return getRuleContext<Gauss200Parser::Update_stmtContext>(0);
}

Gauss200Parser::Delete_stmtContext* Gauss200Parser::Data_manipulate_stmtContext::delete_stmt() {
  return getRuleContext<Gauss200Parser::Delete_stmtContext>(0);
}

Gauss200Parser::Values_stmtContext* Gauss200Parser::Data_manipulate_stmtContext::values_stmt() {
  return getRuleContext<Gauss200Parser::Values_stmtContext>(0);
}


size_t Gauss200Parser::Data_manipulate_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleData_manipulate_stmt;
}

void Gauss200Parser::Data_manipulate_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_manipulate_stmt(this);
}

void Gauss200Parser::Data_manipulate_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_manipulate_stmt(this);
}


antlrcpp::Any Gauss200Parser::Data_manipulate_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitData_manipulate_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Data_manipulate_stmtContext* Gauss200Parser::data_manipulate_stmt() {
  Data_manipulate_stmtContext *_localctx = _tracker.createInstance<Data_manipulate_stmtContext>(_ctx, getState());
  enterRule(_localctx, 570, Gauss200Parser::RuleData_manipulate_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3944);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3939);
      select_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3940);
      insert_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3941);
      update_stmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3942);
      delete_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3943);
      values_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_stmtContext ------------------------------------------------------------------

Gauss200Parser::Select_stmtContext::Select_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Subquery_basic_elementsContext* Gauss200Parser::Select_stmtContext::subquery_basic_elements() {
  return getRuleContext<Gauss200Parser::Subquery_basic_elementsContext>(0);
}

std::vector<Gauss200Parser::Subquery_operation_partContext *> Gauss200Parser::Select_stmtContext::subquery_operation_part() {
  return getRuleContexts<Gauss200Parser::Subquery_operation_partContext>();
}

Gauss200Parser::Subquery_operation_partContext* Gauss200Parser::Select_stmtContext::subquery_operation_part(size_t i) {
  return getRuleContext<Gauss200Parser::Subquery_operation_partContext>(i);
}


size_t Gauss200Parser::Select_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleSelect_stmt;
}

void Gauss200Parser::Select_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_stmt(this);
}

void Gauss200Parser::Select_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_stmt(this);
}


antlrcpp::Any Gauss200Parser::Select_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSelect_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::select_stmt() {
  Select_stmtContext *_localctx = _tracker.createInstance<Select_stmtContext>(_ctx, getState());
  enterRule(_localctx, 572, Gauss200Parser::RuleSelect_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3946);
    subquery_basic_elements();
    setState(3950);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3947);
        subquery_operation_part(); 
      }
      setState(3952);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subquery_basic_elementsContext ------------------------------------------------------------------

Gauss200Parser::Subquery_basic_elementsContext::Subquery_basic_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::SubqueryContext* Gauss200Parser::Subquery_basic_elementsContext::subquery() {
  return getRuleContext<Gauss200Parser::SubqueryContext>(0);
}

Gauss200Parser::Select_with_parensContext* Gauss200Parser::Subquery_basic_elementsContext::select_with_parens() {
  return getRuleContext<Gauss200Parser::Select_with_parensContext>(0);
}


size_t Gauss200Parser::Subquery_basic_elementsContext::getRuleIndex() const {
  return Gauss200Parser::RuleSubquery_basic_elements;
}

void Gauss200Parser::Subquery_basic_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubquery_basic_elements(this);
}

void Gauss200Parser::Subquery_basic_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubquery_basic_elements(this);
}


antlrcpp::Any Gauss200Parser::Subquery_basic_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSubquery_basic_elements(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Subquery_basic_elementsContext* Gauss200Parser::subquery_basic_elements() {
  Subquery_basic_elementsContext *_localctx = _tracker.createInstance<Subquery_basic_elementsContext>(_ctx, getState());
  enterRule(_localctx, 574, Gauss200Parser::RuleSubquery_basic_elements);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3955);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::WITH_GS: {
        enterOuterAlt(_localctx, 1);
        setState(3953);
        subquery();
        break;
      }

      case Gauss200Parser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(3954);
        select_with_parens();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_with_parensContext ------------------------------------------------------------------

Gauss200Parser::Select_with_parensContext::Select_with_parensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Select_with_parensContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Select_with_parensContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Select_with_parensContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Select_with_parensContext::getRuleIndex() const {
  return Gauss200Parser::RuleSelect_with_parens;
}

void Gauss200Parser::Select_with_parensContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_with_parens(this);
}

void Gauss200Parser::Select_with_parensContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_with_parens(this);
}


antlrcpp::Any Gauss200Parser::Select_with_parensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSelect_with_parens(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Select_with_parensContext* Gauss200Parser::select_with_parens() {
  Select_with_parensContext *_localctx = _tracker.createInstance<Select_with_parensContext>(_ctx, getState());
  enterRule(_localctx, 576, Gauss200Parser::RuleSelect_with_parens);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3957);
    match(Gauss200Parser::LEFT_PAREN);
    setState(3958);
    select_stmt();
    setState(3959);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subquery_operation_partContext ------------------------------------------------------------------

Gauss200Parser::Subquery_operation_partContext::Subquery_operation_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Subquery_basic_elementsContext* Gauss200Parser::Subquery_operation_partContext::subquery_basic_elements() {
  return getRuleContext<Gauss200Parser::Subquery_basic_elementsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Subquery_operation_partContext::UNION_GS() {
  return getToken(Gauss200Parser::UNION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Subquery_operation_partContext::INTERSECT_GS() {
  return getToken(Gauss200Parser::INTERSECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Subquery_operation_partContext::EXCEPT_GS() {
  return getToken(Gauss200Parser::EXCEPT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Subquery_operation_partContext::MINUS_GS() {
  return getToken(Gauss200Parser::MINUS_GS, 0);
}

Gauss200Parser::All_distinctContext* Gauss200Parser::Subquery_operation_partContext::all_distinct() {
  return getRuleContext<Gauss200Parser::All_distinctContext>(0);
}


size_t Gauss200Parser::Subquery_operation_partContext::getRuleIndex() const {
  return Gauss200Parser::RuleSubquery_operation_part;
}

void Gauss200Parser::Subquery_operation_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubquery_operation_part(this);
}

void Gauss200Parser::Subquery_operation_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubquery_operation_part(this);
}


antlrcpp::Any Gauss200Parser::Subquery_operation_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSubquery_operation_part(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Subquery_operation_partContext* Gauss200Parser::subquery_operation_part() {
  Subquery_operation_partContext *_localctx = _tracker.createInstance<Subquery_operation_partContext>(_ctx, getState());
  enterRule(_localctx, 578, Gauss200Parser::RuleSubquery_operation_part);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3961);
    _la = _input->LA(1);
    if (!(((((_la - 33) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 33)) & ((1ULL << (Gauss200Parser::EXCEPT_GS - 33))
      | (1ULL << (Gauss200Parser::INTERSECT_GS - 33))
      | (1ULL << (Gauss200Parser::MINUS_GS - 33))
      | (1ULL << (Gauss200Parser::UNION_GS - 33)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3963);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ALL_GS

    || _la == Gauss200Parser::DISTINCT_GS) {
      setState(3962);
      all_distinct();
    }
    setState(3965);
    subquery_basic_elements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubqueryContext ------------------------------------------------------------------

Gauss200Parser::SubqueryContext::SubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Simple_selectContext* Gauss200Parser::SubqueryContext::simple_select() {
  return getRuleContext<Gauss200Parser::Simple_selectContext>(0);
}

Gauss200Parser::With_clauseContext* Gauss200Parser::SubqueryContext::with_clause() {
  return getRuleContext<Gauss200Parser::With_clauseContext>(0);
}

Gauss200Parser::Window_clauseContext* Gauss200Parser::SubqueryContext::window_clause() {
  return getRuleContext<Gauss200Parser::Window_clauseContext>(0);
}

Gauss200Parser::Order_by_clauseContext* Gauss200Parser::SubqueryContext::order_by_clause() {
  return getRuleContext<Gauss200Parser::Order_by_clauseContext>(0);
}

Gauss200Parser::Limit_clauseContext* Gauss200Parser::SubqueryContext::limit_clause() {
  return getRuleContext<Gauss200Parser::Limit_clauseContext>(0);
}

Gauss200Parser::Offset_clauseContext* Gauss200Parser::SubqueryContext::offset_clause() {
  return getRuleContext<Gauss200Parser::Offset_clauseContext>(0);
}

Gauss200Parser::Fetch_clauseContext* Gauss200Parser::SubqueryContext::fetch_clause() {
  return getRuleContext<Gauss200Parser::Fetch_clauseContext>(0);
}

std::vector<Gauss200Parser::For_update_share_clauseContext *> Gauss200Parser::SubqueryContext::for_update_share_clause() {
  return getRuleContexts<Gauss200Parser::For_update_share_clauseContext>();
}

Gauss200Parser::For_update_share_clauseContext* Gauss200Parser::SubqueryContext::for_update_share_clause(size_t i) {
  return getRuleContext<Gauss200Parser::For_update_share_clauseContext>(i);
}


size_t Gauss200Parser::SubqueryContext::getRuleIndex() const {
  return Gauss200Parser::RuleSubquery;
}

void Gauss200Parser::SubqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubquery(this);
}

void Gauss200Parser::SubqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubquery(this);
}


antlrcpp::Any Gauss200Parser::SubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSubquery(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::SubqueryContext* Gauss200Parser::subquery() {
  SubqueryContext *_localctx = _tracker.createInstance<SubqueryContext>(_ctx, getState());
  enterRule(_localctx, 580, Gauss200Parser::RuleSubquery);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3968);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(3967);
      with_clause();
    }
    setState(3970);
    simple_select();
    setState(3972);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      setState(3971);
      window_clause();
      break;
    }

    }
    setState(3975);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 409, _ctx)) {
    case 1: {
      setState(3974);
      order_by_clause();
      break;
    }

    }
    setState(3978);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 410, _ctx)) {
    case 1: {
      setState(3977);
      limit_clause();
      break;
    }

    }
    setState(3981);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
    case 1: {
      setState(3980);
      offset_clause();
      break;
    }

    }
    setState(3984);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx)) {
    case 1: {
      setState(3983);
      fetch_clause();
      break;
    }

    }
    setState(3989);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3986);
        for_update_share_clause(); 
      }
      setState(3991);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_selectContext ------------------------------------------------------------------

Gauss200Parser::Simple_selectContext::Simple_selectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Simple_selectContext::SELECT_GS() {
  return getToken(Gauss200Parser::SELECT_GS, 0);
}

Gauss200Parser::Selected_listContext* Gauss200Parser::Simple_selectContext::selected_list() {
  return getRuleContext<Gauss200Parser::Selected_listContext>(0);
}

Gauss200Parser::All_distinctContext* Gauss200Parser::Simple_selectContext::all_distinct() {
  return getRuleContext<Gauss200Parser::All_distinctContext>(0);
}

Gauss200Parser::Into_clauseContext* Gauss200Parser::Simple_selectContext::into_clause() {
  return getRuleContext<Gauss200Parser::Into_clauseContext>(0);
}

Gauss200Parser::From_clauseContext* Gauss200Parser::Simple_selectContext::from_clause() {
  return getRuleContext<Gauss200Parser::From_clauseContext>(0);
}

Gauss200Parser::Where_clauseContext* Gauss200Parser::Simple_selectContext::where_clause() {
  return getRuleContext<Gauss200Parser::Where_clauseContext>(0);
}

Gauss200Parser::Group_by_clauseContext* Gauss200Parser::Simple_selectContext::group_by_clause() {
  return getRuleContext<Gauss200Parser::Group_by_clauseContext>(0);
}

Gauss200Parser::Having_clauseContext* Gauss200Parser::Simple_selectContext::having_clause() {
  return getRuleContext<Gauss200Parser::Having_clauseContext>(0);
}


size_t Gauss200Parser::Simple_selectContext::getRuleIndex() const {
  return Gauss200Parser::RuleSimple_select;
}

void Gauss200Parser::Simple_selectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_select(this);
}

void Gauss200Parser::Simple_selectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_select(this);
}


antlrcpp::Any Gauss200Parser::Simple_selectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSimple_select(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Simple_selectContext* Gauss200Parser::simple_select() {
  Simple_selectContext *_localctx = _tracker.createInstance<Simple_selectContext>(_ctx, getState());
  enterRule(_localctx, 582, Gauss200Parser::RuleSimple_select);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3992);
    match(Gauss200Parser::SELECT_GS);
    setState(3994);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx)) {
    case 1: {
      setState(3993);
      all_distinct();
      break;
    }

    }
    setState(3996);
    selected_list();
    setState(3998);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx)) {
    case 1: {
      setState(3997);
      into_clause();
      break;
    }

    }
    setState(4001);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 416, _ctx)) {
    case 1: {
      setState(4000);
      from_clause();
      break;
    }

    }
    setState(4004);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 417, _ctx)) {
    case 1: {
      setState(4003);
      where_clause();
      break;
    }

    }
    setState(4007);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 418, _ctx)) {
    case 1: {
      setState(4006);
      group_by_clause();
      break;
    }

    }
    setState(4010);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      setState(4009);
      having_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_distinctContext ------------------------------------------------------------------

Gauss200Parser::All_distinctContext::All_distinctContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::All_distinctContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::All_distinctContext::DISTINCT_GS() {
  return getToken(Gauss200Parser::DISTINCT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::All_distinctContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::All_distinctContext::paren_expr_list() {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(0);
}


size_t Gauss200Parser::All_distinctContext::getRuleIndex() const {
  return Gauss200Parser::RuleAll_distinct;
}

void Gauss200Parser::All_distinctContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAll_distinct(this);
}

void Gauss200Parser::All_distinctContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAll_distinct(this);
}


antlrcpp::Any Gauss200Parser::All_distinctContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAll_distinct(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::All_distinctContext* Gauss200Parser::all_distinct() {
  All_distinctContext *_localctx = _tracker.createInstance<All_distinctContext>(_ctx, getState());
  enterRule(_localctx, 584, Gauss200Parser::RuleAll_distinct);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4018);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS: {
        enterOuterAlt(_localctx, 1);
        setState(4012);
        match(Gauss200Parser::ALL_GS);
        break;
      }

      case Gauss200Parser::DISTINCT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(4013);
        match(Gauss200Parser::DISTINCT_GS);
        setState(4016);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 420, _ctx)) {
        case 1: {
          setState(4014);
          match(Gauss200Parser::ON_GS);
          setState(4015);
          paren_expr_list();
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_listContext ------------------------------------------------------------------

Gauss200Parser::Selected_listContext::Selected_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Selected_list_elementContext *> Gauss200Parser::Selected_listContext::selected_list_element() {
  return getRuleContexts<Gauss200Parser::Selected_list_elementContext>();
}

Gauss200Parser::Selected_list_elementContext* Gauss200Parser::Selected_listContext::selected_list_element(size_t i) {
  return getRuleContext<Gauss200Parser::Selected_list_elementContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Selected_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Selected_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Selected_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleSelected_list;
}

void Gauss200Parser::Selected_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_list(this);
}

void Gauss200Parser::Selected_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_list(this);
}


antlrcpp::Any Gauss200Parser::Selected_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSelected_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Selected_listContext* Gauss200Parser::selected_list() {
  Selected_listContext *_localctx = _tracker.createInstance<Selected_listContext>(_ctx, getState());
  enterRule(_localctx, 586, Gauss200Parser::RuleSelected_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4020);
    selected_list_element();
    setState(4025);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 422, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4021);
        match(Gauss200Parser::COMMA);
        setState(4022);
        selected_list_element(); 
      }
      setState(4027);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 422, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_list_elementContext ------------------------------------------------------------------

Gauss200Parser::Selected_list_elementContext::Selected_list_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Selected_list_elementContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::As_aliasContext* Gauss200Parser::Selected_list_elementContext::as_alias() {
  return getRuleContext<Gauss200Parser::As_aliasContext>(0);
}

tree::TerminalNode* Gauss200Parser::Selected_list_elementContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}


size_t Gauss200Parser::Selected_list_elementContext::getRuleIndex() const {
  return Gauss200Parser::RuleSelected_list_element;
}

void Gauss200Parser::Selected_list_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_list_element(this);
}

void Gauss200Parser::Selected_list_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_list_element(this);
}


antlrcpp::Any Gauss200Parser::Selected_list_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSelected_list_element(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Selected_list_elementContext* Gauss200Parser::selected_list_element() {
  Selected_list_elementContext *_localctx = _tracker.createInstance<Selected_list_elementContext>(_ctx, getState());
  enterRule(_localctx, 588, Gauss200Parser::RuleSelected_list_element);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4033);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::AUTHORIZATION_GS:
      case Gauss200Parser::BINARY_GS:
      case Gauss200Parser::COLLATION_GS:
      case Gauss200Parser::CONCURRENTLY_GS:
      case Gauss200Parser::CURRENT_SCHEMA_GS:
      case Gauss200Parser::FREEZE_GS:
      case Gauss200Parser::ILIKE_GS:
      case Gauss200Parser::INNER_GS:
      case Gauss200Parser::ISNULL_GS:
      case Gauss200Parser::JOIN_GS:
      case Gauss200Parser::LEFT_GS:
      case Gauss200Parser::LIKE_GS:
      case Gauss200Parser::NATURAL_GS:
      case Gauss200Parser::NOTNULL_GS:
      case Gauss200Parser::OUTER_GS:
      case Gauss200Parser::OVERLAPS_GS:
      case Gauss200Parser::OVER_GS:
      case Gauss200Parser::SIMILAR_GS:
      case Gauss200Parser::VERBOSE_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::BETWEEN_GS:
      case Gauss200Parser::BIGINT_GS:
      case Gauss200Parser::BINARY_DOUBLE_GS:
      case Gauss200Parser::BINARY_INTEGER_GS:
      case Gauss200Parser::BIT_GS:
      case Gauss200Parser::BOOLEAN_GS:
      case Gauss200Parser::CHARACTER_GS:
      case Gauss200Parser::CHAR_GS:
      case Gauss200Parser::COALESCE_GS:
      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::DECIMAL_GS:
      case Gauss200Parser::DECODE_GS:
      case Gauss200Parser::DEC_GS:
      case Gauss200Parser::EXISTS_GS:
      case Gauss200Parser::EXTRACT_GS:
      case Gauss200Parser::FLOAT_GS:
      case Gauss200Parser::GREATEST_GS:
      case Gauss200Parser::INOUT_GS:
      case Gauss200Parser::INTEGER_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::INT_GS:
      case Gauss200Parser::LEAST_GS:
      case Gauss200Parser::NATIONAL_GS:
      case Gauss200Parser::NCHAR_GS:
      case Gauss200Parser::NONE_GS:
      case Gauss200Parser::NULLIF_GS:
      case Gauss200Parser::NUMBER_GS:
      case Gauss200Parser::NUMERIC_GS:
      case Gauss200Parser::NVARCHAR2_GS:
      case Gauss200Parser::NVL_GS:
      case Gauss200Parser::OUT_GS:
      case Gauss200Parser::OVERLAY_GS:
      case Gauss200Parser::POSITION_GS:
      case Gauss200Parser::PRECISION_GS:
      case Gauss200Parser::REAL_GS:
      case Gauss200Parser::ROW_GS:
      case Gauss200Parser::SETOF_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::SMALLINT_GS:
      case Gauss200Parser::SUBSTRING_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::TINYINT_GS:
      case Gauss200Parser::TREAT_GS:
      case Gauss200Parser::TRIM_GS:
      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::VARCHAR2_GS:
      case Gauss200Parser::VARCHAR_GS:
      case Gauss200Parser::XMLATTRIBUTES_GS:
      case Gauss200Parser::XMLCONCAT_GS:
      case Gauss200Parser::XMLELEMENT_GS:
      case Gauss200Parser::XMLEXISTS_GS:
      case Gauss200Parser::XMLFOREST_GS:
      case Gauss200Parser::XMLPARSE_GS:
      case Gauss200Parser::XMLPI_GS:
      case Gauss200Parser::XMLROOT_GS:
      case Gauss200Parser::XMLSERIALIZE_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::RELTIME_GS:
      case Gauss200Parser::POINT_GS:
      case Gauss200Parser::LSEG_GS:
      case Gauss200Parser::BOX_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::POLYGON_GS:
      case Gauss200Parser::CIRCLE_GS:
      case Gauss200Parser::CIDR_GS:
      case Gauss200Parser::INET_GS:
      case Gauss200Parser::MACADDR_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::LEFT_PAREN:
      case Gauss200Parser::PLUS_SIGN:
      case Gauss200Parser::MINUS_SIGN:
      case Gauss200Parser::AT_SIGN:
      case Gauss200Parser::QUESTION_MARK:
      case Gauss200Parser::TILDE_OPERATOR_PART:
      case Gauss200Parser::EXCLAMATION_OPERATOR_PART:
      case Gauss200Parser::POUND_SIGN:
      case Gauss200Parser::BAR:
      case Gauss200Parser::CHAR_STRING:
      case Gauss200Parser::REGULAR_ID:
      case Gauss200Parser::SCONST:
      case Gauss200Parser::ICONST:
      case Gauss200Parser::FCONST:
      case Gauss200Parser::BCONST:
      case Gauss200Parser::PARAM: {
        enterOuterAlt(_localctx, 1);
        setState(4028);
        expression();
        setState(4030);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx)) {
        case 1: {
          setState(4029);
          as_alias();
          break;
        }

        }
        break;
      }

      case Gauss200Parser::ASTERISK: {
        enterOuterAlt(_localctx, 2);
        setState(4032);
        match(Gauss200Parser::ASTERISK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Into_clauseContext ------------------------------------------------------------------

Gauss200Parser::Into_clauseContext::Into_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Into_clauseContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Into_clauseContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Into_clauseContext::UNLOGGED_GS() {
  return getToken(Gauss200Parser::UNLOGGED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Into_clauseContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}


size_t Gauss200Parser::Into_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleInto_clause;
}

void Gauss200Parser::Into_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInto_clause(this);
}

void Gauss200Parser::Into_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInto_clause(this);
}


antlrcpp::Any Gauss200Parser::Into_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitInto_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Into_clauseContext* Gauss200Parser::into_clause() {
  Into_clauseContext *_localctx = _tracker.createInstance<Into_clauseContext>(_ctx, getState());
  enterRule(_localctx, 590, Gauss200Parser::RuleInto_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4035);
    match(Gauss200Parser::INTO_GS);
    setState(4037);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 425, _ctx)) {
    case 1: {
      setState(4036);
      match(Gauss200Parser::UNLOGGED_GS);
      break;
    }

    }
    setState(4040);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLE_GS) {
      setState(4039);
      match(Gauss200Parser::TABLE_GS);
    }
    setState(4042);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_clauseContext ------------------------------------------------------------------

Gauss200Parser::From_clauseContext::From_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::From_clauseContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::From_listContext* Gauss200Parser::From_clauseContext::from_list() {
  return getRuleContext<Gauss200Parser::From_listContext>(0);
}


size_t Gauss200Parser::From_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleFrom_clause;
}

void Gauss200Parser::From_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_clause(this);
}

void Gauss200Parser::From_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_clause(this);
}


antlrcpp::Any Gauss200Parser::From_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFrom_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::From_clauseContext* Gauss200Parser::from_clause() {
  From_clauseContext *_localctx = _tracker.createInstance<From_clauseContext>(_ctx, getState());
  enterRule(_localctx, 592, Gauss200Parser::RuleFrom_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4044);
    match(Gauss200Parser::FROM_GS);
    setState(4045);
    from_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_listContext ------------------------------------------------------------------

Gauss200Parser::From_listContext::From_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Table_refContext *> Gauss200Parser::From_listContext::table_ref() {
  return getRuleContexts<Gauss200Parser::Table_refContext>();
}

Gauss200Parser::Table_refContext* Gauss200Parser::From_listContext::table_ref(size_t i) {
  return getRuleContext<Gauss200Parser::Table_refContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::From_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::From_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::From_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleFrom_list;
}

void Gauss200Parser::From_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_list(this);
}

void Gauss200Parser::From_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_list(this);
}


antlrcpp::Any Gauss200Parser::From_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFrom_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::From_listContext* Gauss200Parser::from_list() {
  From_listContext *_localctx = _tracker.createInstance<From_listContext>(_ctx, getState());
  enterRule(_localctx, 594, Gauss200Parser::RuleFrom_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4047);
    table_ref(0);
    setState(4052);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 427, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4048);
        match(Gauss200Parser::COMMA);
        setState(4049);
        table_ref(0); 
      }
      setState(4054);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 427, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_refContext ------------------------------------------------------------------

Gauss200Parser::Table_refContext::Table_refContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Gauss200Parser::Table_refContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_ref;
}

void Gauss200Parser::Table_refContext::copyFrom(Table_refContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Table_ref_joinContext ------------------------------------------------------------------

std::vector<Gauss200Parser::Table_refContext *> Gauss200Parser::Table_ref_joinContext::table_ref() {
  return getRuleContexts<Gauss200Parser::Table_refContext>();
}

Gauss200Parser::Table_refContext* Gauss200Parser::Table_ref_joinContext::table_ref(size_t i) {
  return getRuleContext<Gauss200Parser::Table_refContext>(i);
}

tree::TerminalNode* Gauss200Parser::Table_ref_joinContext::JOIN_GS() {
  return getToken(Gauss200Parser::JOIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_ref_joinContext::NATURAL_GS() {
  return getToken(Gauss200Parser::NATURAL_GS, 0);
}

Gauss200Parser::Join_typeContext* Gauss200Parser::Table_ref_joinContext::join_type() {
  return getRuleContext<Gauss200Parser::Join_typeContext>(0);
}

Gauss200Parser::On_condition_clauseContext* Gauss200Parser::Table_ref_joinContext::on_condition_clause() {
  return getRuleContext<Gauss200Parser::On_condition_clauseContext>(0);
}

Gauss200Parser::Using_clauseContext* Gauss200Parser::Table_ref_joinContext::using_clause() {
  return getRuleContext<Gauss200Parser::Using_clauseContext>(0);
}

Gauss200Parser::Table_ref_joinContext::Table_ref_joinContext(Table_refContext *ctx) { copyFrom(ctx); }

void Gauss200Parser::Table_ref_joinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_ref_join(this);
}
void Gauss200Parser::Table_ref_joinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_ref_join(this);
}

antlrcpp::Any Gauss200Parser::Table_ref_joinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_ref_join(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Table_ref_subqueryContext ------------------------------------------------------------------

Gauss200Parser::Select_with_parensContext* Gauss200Parser::Table_ref_subqueryContext::select_with_parens() {
  return getRuleContext<Gauss200Parser::Select_with_parensContext>(0);
}

Gauss200Parser::Table_aliasContext* Gauss200Parser::Table_ref_subqueryContext::table_alias() {
  return getRuleContext<Gauss200Parser::Table_aliasContext>(0);
}

Gauss200Parser::Table_ref_subqueryContext::Table_ref_subqueryContext(Table_refContext *ctx) { copyFrom(ctx); }

void Gauss200Parser::Table_ref_subqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_ref_subquery(this);
}
void Gauss200Parser::Table_ref_subqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_ref_subquery(this);
}

antlrcpp::Any Gauss200Parser::Table_ref_subqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_ref_subquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Table_ref_funcContext ------------------------------------------------------------------

Gauss200Parser::Func_nameContext* Gauss200Parser::Table_ref_funcContext::func_name() {
  return getRuleContext<Gauss200Parser::Func_nameContext>(0);
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::Table_ref_funcContext::paren_expr_list() {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Table_ref_funcContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::Alias_nameContext* Gauss200Parser::Table_ref_funcContext::alias_name() {
  return getRuleContext<Gauss200Parser::Alias_nameContext>(0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Table_ref_funcContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

Gauss200Parser::Table_ref_funcContext::Table_ref_funcContext(Table_refContext *ctx) { copyFrom(ctx); }

void Gauss200Parser::Table_ref_funcContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_ref_func(this);
}
void Gauss200Parser::Table_ref_funcContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_ref_func(this);
}

antlrcpp::Any Gauss200Parser::Table_ref_funcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_ref_func(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Table_ref_simpleContext ------------------------------------------------------------------

Gauss200Parser::Table_nameContext* Gauss200Parser::Table_ref_simpleContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Table_ref_simpleContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Table_ref_simpleContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

Gauss200Parser::Partition_clauseContext* Gauss200Parser::Table_ref_simpleContext::partition_clause() {
  return getRuleContext<Gauss200Parser::Partition_clauseContext>(0);
}

Gauss200Parser::Table_aliasContext* Gauss200Parser::Table_ref_simpleContext::table_alias() {
  return getRuleContext<Gauss200Parser::Table_aliasContext>(0);
}

Gauss200Parser::Table_sampling_clauseContext* Gauss200Parser::Table_ref_simpleContext::table_sampling_clause() {
  return getRuleContext<Gauss200Parser::Table_sampling_clauseContext>(0);
}

Gauss200Parser::Table_ref_simpleContext::Table_ref_simpleContext(Table_refContext *ctx) { copyFrom(ctx); }

void Gauss200Parser::Table_ref_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_ref_simple(this);
}
void Gauss200Parser::Table_ref_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_ref_simple(this);
}

antlrcpp::Any Gauss200Parser::Table_ref_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_ref_simple(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_refContext* Gauss200Parser::table_ref() {
   return table_ref(0);
}

Gauss200Parser::Table_refContext* Gauss200Parser::table_ref(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Gauss200Parser::Table_refContext *_localctx = _tracker.createInstance<Table_refContext>(_ctx, parentState);
  Gauss200Parser::Table_refContext *previousContext = _localctx;
  size_t startState = 596;
  enterRecursionRule(_localctx, 596, Gauss200Parser::RuleTable_ref, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4087);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 437, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<Table_ref_simpleContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(4057);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 428, _ctx)) {
      case 1: {
        setState(4056);
        match(Gauss200Parser::ONLY_GS);
        break;
      }

      }
      setState(4059);
      table_name();
      setState(4061);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 429, _ctx)) {
      case 1: {
        setState(4060);
        match(Gauss200Parser::ASTERISK);
        break;
      }

      }
      setState(4064);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 430, _ctx)) {
      case 1: {
        setState(4063);
        partition_clause();
        break;
      }

      }
      setState(4067);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 431, _ctx)) {
      case 1: {
        setState(4066);
        table_alias();
        break;
      }

      }
      setState(4070);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 432, _ctx)) {
      case 1: {
        setState(4069);
        table_sampling_clause();
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<Table_ref_subqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(4072);
      select_with_parens();
      setState(4074);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
      case 1: {
        setState(4073);
        table_alias();
        break;
      }

      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<Table_ref_funcContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(4076);
      func_name();
      setState(4077);
      paren_expr_list();
      setState(4079);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 434, _ctx)) {
      case 1: {
        setState(4078);
        match(Gauss200Parser::AS_GS);
        break;
      }

      }
      setState(4082);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 435, _ctx)) {
      case 1: {
        setState(4081);
        alias_name();
        break;
      }

      }
      setState(4085);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 436, _ctx)) {
      case 1: {
        setState(4084);
        paren_column_list();
        break;
      }

      }
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(4104);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<Table_ref_joinContext>(_tracker.createInstance<Table_refContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleTable_ref);
        setState(4089);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(4091);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::NATURAL_GS) {
          setState(4090);
          match(Gauss200Parser::NATURAL_GS);
        }
        setState(4094);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 96) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 96)) & ((1ULL << (Gauss200Parser::CROSS_GS - 96))
          | (1ULL << (Gauss200Parser::FULL_GS - 96))
          | (1ULL << (Gauss200Parser::INNER_GS - 96))
          | (1ULL << (Gauss200Parser::LEFT_GS - 96))
          | (1ULL << (Gauss200Parser::RIGHT_GS - 96)))) != 0)) {
          setState(4093);
          join_type();
        }
        setState(4096);
        match(Gauss200Parser::JOIN_GS);
        setState(4097);
        table_ref(0);
        setState(4100);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx)) {
        case 1: {
          setState(4098);
          on_condition_clause();
          break;
        }

        case 2: {
          setState(4099);
          using_clause();
          break;
        }

        } 
      }
      setState(4106);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Partition_clauseContext ------------------------------------------------------------------

Gauss200Parser::Partition_clauseContext::Partition_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Partition_clauseContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_clauseContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Partition_clauseContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Partition_clauseContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_clauseContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Paren_partition_value_listContext* Gauss200Parser::Partition_clauseContext::paren_partition_value_list() {
  return getRuleContext<Gauss200Parser::Paren_partition_value_listContext>(0);
}


size_t Gauss200Parser::Partition_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_clause;
}

void Gauss200Parser::Partition_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_clause(this);
}

void Gauss200Parser::Partition_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_clause(this);
}


antlrcpp::Any Gauss200Parser::Partition_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_clauseContext* Gauss200Parser::partition_clause() {
  Partition_clauseContext *_localctx = _tracker.createInstance<Partition_clauseContext>(_ctx, getState());
  enterRule(_localctx, 598, Gauss200Parser::RulePartition_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4107);
    match(Gauss200Parser::PARTITION_GS);
    setState(4114);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::LEFT_PAREN: {
        setState(4108);
        match(Gauss200Parser::LEFT_PAREN);
        setState(4109);
        partition_name();
        setState(4110);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

      case Gauss200Parser::FOR_GS: {
        setState(4112);
        match(Gauss200Parser::FOR_GS);
        setState(4113);
        paren_partition_value_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_aliasContext ------------------------------------------------------------------

Gauss200Parser::Table_aliasContext::Table_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alias_nameContext* Gauss200Parser::Table_aliasContext::alias_name() {
  return getRuleContext<Gauss200Parser::Alias_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Table_aliasContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Table_aliasContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}


size_t Gauss200Parser::Table_aliasContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_alias;
}

void Gauss200Parser::Table_aliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_alias(this);
}

void Gauss200Parser::Table_aliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_alias(this);
}


antlrcpp::Any Gauss200Parser::Table_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_alias(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_aliasContext* Gauss200Parser::table_alias() {
  Table_aliasContext *_localctx = _tracker.createInstance<Table_aliasContext>(_ctx, getState());
  enterRule(_localctx, 600, Gauss200Parser::RuleTable_alias);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4117);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 443, _ctx)) {
    case 1: {
      setState(4116);
      match(Gauss200Parser::AS_GS);
      break;
    }

    }
    setState(4119);
    alias_name();
    setState(4121);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 444, _ctx)) {
    case 1: {
      setState(4120);
      paren_column_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_sampling_clauseContext ------------------------------------------------------------------

Gauss200Parser::Table_sampling_clauseContext::Table_sampling_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Table_sampling_clauseContext::TABLESAMPLE_GS() {
  return getToken(Gauss200Parser::TABLESAMPLE_GS, 0);
}

Gauss200Parser::Sample_methodContext* Gauss200Parser::Table_sampling_clauseContext::sample_method() {
  return getRuleContext<Gauss200Parser::Sample_methodContext>(0);
}

std::vector<Gauss200Parser::Paren_expr_listContext *> Gauss200Parser::Table_sampling_clauseContext::paren_expr_list() {
  return getRuleContexts<Gauss200Parser::Paren_expr_listContext>();
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::Table_sampling_clauseContext::paren_expr_list(size_t i) {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(i);
}

tree::TerminalNode* Gauss200Parser::Table_sampling_clauseContext::REPEATABLE_GS() {
  return getToken(Gauss200Parser::REPEATABLE_GS, 0);
}


size_t Gauss200Parser::Table_sampling_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleTable_sampling_clause;
}

void Gauss200Parser::Table_sampling_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_sampling_clause(this);
}

void Gauss200Parser::Table_sampling_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_sampling_clause(this);
}


antlrcpp::Any Gauss200Parser::Table_sampling_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTable_sampling_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Table_sampling_clauseContext* Gauss200Parser::table_sampling_clause() {
  Table_sampling_clauseContext *_localctx = _tracker.createInstance<Table_sampling_clauseContext>(_ctx, getState());
  enterRule(_localctx, 602, Gauss200Parser::RuleTable_sampling_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4123);
    match(Gauss200Parser::TABLESAMPLE_GS);
    setState(4124);
    sample_method();
    setState(4125);
    paren_expr_list();
    setState(4128);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 445, _ctx)) {
    case 1: {
      setState(4126);
      match(Gauss200Parser::REPEATABLE_GS);
      setState(4127);
      paren_expr_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sample_methodContext ------------------------------------------------------------------

Gauss200Parser::Sample_methodContext::Sample_methodContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Sample_methodContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Sample_methodContext::getRuleIndex() const {
  return Gauss200Parser::RuleSample_method;
}

void Gauss200Parser::Sample_methodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSample_method(this);
}

void Gauss200Parser::Sample_methodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSample_method(this);
}


antlrcpp::Any Gauss200Parser::Sample_methodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSample_method(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Sample_methodContext* Gauss200Parser::sample_method() {
  Sample_methodContext *_localctx = _tracker.createInstance<Sample_methodContext>(_ctx, getState());
  enterRule(_localctx, 604, Gauss200Parser::RuleSample_method);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4130);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Join_typeContext ------------------------------------------------------------------

Gauss200Parser::Join_typeContext::Join_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Join_typeContext::INNER_GS() {
  return getToken(Gauss200Parser::INNER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Join_typeContext::LEFT_GS() {
  return getToken(Gauss200Parser::LEFT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Join_typeContext::RIGHT_GS() {
  return getToken(Gauss200Parser::RIGHT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Join_typeContext::FULL_GS() {
  return getToken(Gauss200Parser::FULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Join_typeContext::OUTER_GS() {
  return getToken(Gauss200Parser::OUTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Join_typeContext::CROSS_GS() {
  return getToken(Gauss200Parser::CROSS_GS, 0);
}


size_t Gauss200Parser::Join_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleJoin_type;
}

void Gauss200Parser::Join_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoin_type(this);
}

void Gauss200Parser::Join_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoin_type(this);
}


antlrcpp::Any Gauss200Parser::Join_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitJoin_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Join_typeContext* Gauss200Parser::join_type() {
  Join_typeContext *_localctx = _tracker.createInstance<Join_typeContext>(_ctx, getState());
  enterRule(_localctx, 606, Gauss200Parser::RuleJoin_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4138);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::INNER_GS: {
        enterOuterAlt(_localctx, 1);
        setState(4132);
        match(Gauss200Parser::INNER_GS);
        break;
      }

      case Gauss200Parser::FULL_GS:
      case Gauss200Parser::LEFT_GS:
      case Gauss200Parser::RIGHT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(4133);
        _la = _input->LA(1);
        if (!(((((_la - 99) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 99)) & ((1ULL << (Gauss200Parser::FULL_GS - 99))
          | (1ULL << (Gauss200Parser::LEFT_GS - 99))
          | (1ULL << (Gauss200Parser::RIGHT_GS - 99)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4135);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::OUTER_GS) {
          setState(4134);
          match(Gauss200Parser::OUTER_GS);
        }
        break;
      }

      case Gauss200Parser::CROSS_GS: {
        enterOuterAlt(_localctx, 3);
        setState(4137);
        match(Gauss200Parser::CROSS_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Using_clauseContext ------------------------------------------------------------------

Gauss200Parser::Using_clauseContext::Using_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Using_clauseContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Using_clauseContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}


size_t Gauss200Parser::Using_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleUsing_clause;
}

void Gauss200Parser::Using_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsing_clause(this);
}

void Gauss200Parser::Using_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsing_clause(this);
}


antlrcpp::Any Gauss200Parser::Using_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUsing_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Using_clauseContext* Gauss200Parser::using_clause() {
  Using_clauseContext *_localctx = _tracker.createInstance<Using_clauseContext>(_ctx, getState());
  enterRule(_localctx, 608, Gauss200Parser::RuleUsing_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4140);
    match(Gauss200Parser::USING_GS);
    setState(4141);
    paren_column_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_by_clauseContext ------------------------------------------------------------------

Gauss200Parser::Group_by_clauseContext::Group_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Group_by_clauseContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Group_by_clauseContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

Gauss200Parser::Grouping_elementsContext* Gauss200Parser::Group_by_clauseContext::grouping_elements() {
  return getRuleContext<Gauss200Parser::Grouping_elementsContext>(0);
}


size_t Gauss200Parser::Group_by_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleGroup_by_clause;
}

void Gauss200Parser::Group_by_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_by_clause(this);
}

void Gauss200Parser::Group_by_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_by_clause(this);
}


antlrcpp::Any Gauss200Parser::Group_by_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGroup_by_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Group_by_clauseContext* Gauss200Parser::group_by_clause() {
  Group_by_clauseContext *_localctx = _tracker.createInstance<Group_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 610, Gauss200Parser::RuleGroup_by_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4143);
    match(Gauss200Parser::GROUP_GS);
    setState(4144);
    match(Gauss200Parser::BY_GS);
    setState(4145);
    grouping_elements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grouping_elementsContext ------------------------------------------------------------------

Gauss200Parser::Grouping_elementsContext::Grouping_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Grouping_elementContext *> Gauss200Parser::Grouping_elementsContext::grouping_element() {
  return getRuleContexts<Gauss200Parser::Grouping_elementContext>();
}

Gauss200Parser::Grouping_elementContext* Gauss200Parser::Grouping_elementsContext::grouping_element(size_t i) {
  return getRuleContext<Gauss200Parser::Grouping_elementContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Grouping_elementsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Grouping_elementsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Grouping_elementsContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrouping_elements;
}

void Gauss200Parser::Grouping_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrouping_elements(this);
}

void Gauss200Parser::Grouping_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrouping_elements(this);
}


antlrcpp::Any Gauss200Parser::Grouping_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrouping_elements(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grouping_elementsContext* Gauss200Parser::grouping_elements() {
  Grouping_elementsContext *_localctx = _tracker.createInstance<Grouping_elementsContext>(_ctx, getState());
  enterRule(_localctx, 612, Gauss200Parser::RuleGrouping_elements);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4147);
    grouping_element();
    setState(4152);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 448, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4148);
        match(Gauss200Parser::COMMA);
        setState(4149);
        grouping_element(); 
      }
      setState(4154);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 448, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grouping_elementContext ------------------------------------------------------------------

Gauss200Parser::Grouping_elementContext::Grouping_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Grouping_elementContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Grouping_elementContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Grouping_elementContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Grouping_elementContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Paren_group_element_expr_listContext* Gauss200Parser::Grouping_elementContext::paren_group_element_expr_list() {
  return getRuleContext<Gauss200Parser::Paren_group_element_expr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Grouping_elementContext::ROLLUP_GS() {
  return getToken(Gauss200Parser::ROLLUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grouping_elementContext::CUBE_GS() {
  return getToken(Gauss200Parser::CUBE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grouping_elementContext::GROUPING_GS() {
  return getToken(Gauss200Parser::GROUPING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grouping_elementContext::SETS_GS() {
  return getToken(Gauss200Parser::SETS_GS, 0);
}

Gauss200Parser::Grouping_elementsContext* Gauss200Parser::Grouping_elementContext::grouping_elements() {
  return getRuleContext<Gauss200Parser::Grouping_elementsContext>(0);
}


size_t Gauss200Parser::Grouping_elementContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrouping_element;
}

void Gauss200Parser::Grouping_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrouping_element(this);
}

void Gauss200Parser::Grouping_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrouping_element(this);
}


antlrcpp::Any Gauss200Parser::Grouping_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrouping_element(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grouping_elementContext* Gauss200Parser::grouping_element() {
  Grouping_elementContext *_localctx = _tracker.createInstance<Grouping_elementContext>(_ctx, getState());
  enterRule(_localctx, 614, Gauss200Parser::RuleGrouping_element);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4169);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 450, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4155);
      match(Gauss200Parser::LEFT_PAREN);
      setState(4157);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
        | (1ULL << (Gauss200Parser::AND_GS - 1))
        | (1ULL << (Gauss200Parser::ANY_GS - 1))
        | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
        | (1ULL << (Gauss200Parser::ASC_GS - 1))
        | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
        | (1ULL << (Gauss200Parser::AS_GS - 1))
        | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
        | (1ULL << (Gauss200Parser::BOTH_GS - 1))
        | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
        | (1ULL << (Gauss200Parser::CASE_GS - 1))
        | (1ULL << (Gauss200Parser::CAST_GS - 1))
        | (1ULL << (Gauss200Parser::CHECK_GS - 1))
        | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
        | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
        | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
        | (1ULL << (Gauss200Parser::CREATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
        | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
        | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
        | (1ULL << (Gauss200Parser::DESC_GS - 1))
        | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
        | (1ULL << (Gauss200Parser::DO_GS - 1))
        | (1ULL << (Gauss200Parser::ELSE_GS - 1))
        | (1ULL << (Gauss200Parser::END_GS - 1))
        | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
        | (1ULL << (Gauss200Parser::FALSE_GS - 1))
        | (1ULL << (Gauss200Parser::FETCH_GS - 1))
        | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
        | (1ULL << (Gauss200Parser::FOR_GS - 1))
        | (1ULL << (Gauss200Parser::FROM_GS - 1))
        | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
        | (1ULL << (Gauss200Parser::GRANT_GS - 1))
        | (1ULL << (Gauss200Parser::GROUP_GS - 1))
        | (1ULL << (Gauss200Parser::HAVING_GS - 1))
        | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
        | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
        | (1ULL << (Gauss200Parser::INTO_GS - 1))
        | (1ULL << (Gauss200Parser::IN_GS - 1))
        | (1ULL << (Gauss200Parser::IS_GS - 1))
        | (1ULL << (Gauss200Parser::LEADING_GS - 1))
        | (1ULL << (Gauss200Parser::LESS_GS - 1))
        | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
        | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
        | (1ULL << (Gauss200Parser::MINUS_GS - 1))
        | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
        | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
        | (1ULL << (Gauss200Parser::NOT_GS - 1))
        | (1ULL << (Gauss200Parser::NULL_GS - 1))
        | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
        | (1ULL << (Gauss200Parser::ONLY_GS - 1))
        | (1ULL << (Gauss200Parser::ON_GS - 1))
        | (1ULL << (Gauss200Parser::ORDER_GS - 1))
        | (1ULL << (Gauss200Parser::OR_GS - 1))
        | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
        | (1ULL << (Gauss200Parser::REJECT_GS - 65))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
        | (1ULL << (Gauss200Parser::RETURN_GS - 65))
        | (1ULL << (Gauss200Parser::SELECT_GS - 65))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
        | (1ULL << (Gauss200Parser::SOME_GS - 65))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
        | (1ULL << (Gauss200Parser::THEN_GS - 65))
        | (1ULL << (Gauss200Parser::TO_GS - 65))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
        | (1ULL << (Gauss200Parser::TRUE_GS - 65))
        | (1ULL << (Gauss200Parser::UNION_GS - 65))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
        | (1ULL << (Gauss200Parser::USER_GS - 65))
        | (1ULL << (Gauss200Parser::USING_GS - 65))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
        | (1ULL << (Gauss200Parser::WHEN_GS - 65))
        | (1ULL << (Gauss200Parser::WHERE_GS - 65))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
        | (1ULL << (Gauss200Parser::WITH_GS - 65))
        | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
        | (1ULL << (Gauss200Parser::BINARY_GS - 65))
        | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
        | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
        | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
        | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
        | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
        | (1ULL << (Gauss200Parser::INNER_GS - 65))
        | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
        | (1ULL << (Gauss200Parser::JOIN_GS - 65))
        | (1ULL << (Gauss200Parser::LEFT_GS - 65))
        | (1ULL << (Gauss200Parser::LIKE_GS - 65))
        | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
        | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
        | (1ULL << (Gauss200Parser::OUTER_GS - 65))
        | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
        | (1ULL << (Gauss200Parser::OVER_GS - 65))
        | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
        | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
        | (1ULL << (Gauss200Parser::ABORT_GS - 65))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
        | (1ULL << (Gauss200Parser::ACTION_GS - 65))
        | (1ULL << (Gauss200Parser::ADD_GS - 65))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
        | (1ULL << (Gauss200Parser::AFTER_GS - 65))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
        | (1ULL << (Gauss200Parser::ALSO_GS - 65))
        | (1ULL << (Gauss200Parser::ALTER_GS - 65))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
        | (1ULL << (Gauss200Parser::APP_GS - 65))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
        | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::AT_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
        | (1ULL << (Gauss200Parser::BLOB_GS - 129))
        | (1ULL << (Gauss200Parser::BY_GS - 129))
        | (1ULL << (Gauss200Parser::CACHE_GS - 129))
        | (1ULL << (Gauss200Parser::CALLED_GS - 129))
        | (1ULL << (Gauss200Parser::CALL_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
        | (1ULL << (Gauss200Parser::CLASS_GS - 129))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
        | (1ULL << (Gauss200Parser::CLOB_GS - 129))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
        | (1ULL << (Gauss200Parser::COPY_GS - 129))
        | (1ULL << (Gauss200Parser::COST_GS - 129))
        | (1ULL << (Gauss200Parser::CSV_GS - 129))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
        | (1ULL << (Gauss200Parser::DATA_GS - 129))
        | (1ULL << (Gauss200Parser::DAY_GS - 129))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
        | (1ULL << (Gauss200Parser::DELETE_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
        | (1ULL << (Gauss200Parser::DELTA_GS - 129))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
        | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
        | (1ULL << (Gauss200Parser::DROP_GS - 193))
        | (1ULL << (Gauss200Parser::EACH_GS - 193))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
        | (1ULL << (Gauss200Parser::ENUM_GS - 193))
        | (1ULL << (Gauss200Parser::EOL_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
        | (1ULL << (Gauss200Parser::EVERY_GS - 193))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
        | (1ULL << (Gauss200Parser::FIRST_GS - 193))
        | (1ULL << (Gauss200Parser::FIXED_GS - 193))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
        | (1ULL << (Gauss200Parser::FORCE_GS - 193))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
        | (1ULL << (Gauss200Parser::HEADER_GS - 193))
        | (1ULL << (Gauss200Parser::HOLD_GS - 193))
        | (1ULL << (Gauss200Parser::HOUR_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
        | (1ULL << (Gauss200Parser::IF_GS - 193))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
        | (1ULL << (Gauss200Parser::INDEX_GS - 193))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
        | (1ULL << (Gauss200Parser::INLINE_GS - 193))
        | (1ULL << (Gauss200Parser::INPUT_GS - 193))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
        | (1ULL << (Gauss200Parser::INSERT_GS - 193))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
        | (1ULL << (Gauss200Parser::KEY_GS - 193))
        | (1ULL << (Gauss200Parser::LABEL_GS - 193))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
        | (1ULL << (Gauss200Parser::LARGE_GS - 193))
        | (1ULL << (Gauss200Parser::LAST_GS - 193))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
        | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
        | (1ULL << (Gauss200Parser::LOAD_GS - 257))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
        | (1ULL << (Gauss200Parser::LOCK_GS - 257))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::LOG_GS - 257))
        | (1ULL << (Gauss200Parser::LOOP_GS - 257))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
        | (1ULL << (Gauss200Parser::MATCH_GS - 257))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
        | (1ULL << (Gauss200Parser::MERGE_GS - 257))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::MODE_GS - 257))
        | (1ULL << (Gauss200Parser::MONTH_GS - 257))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
        | (1ULL << (Gauss200Parser::MOVE_GS - 257))
        | (1ULL << (Gauss200Parser::NAMES_GS - 257))
        | (1ULL << (Gauss200Parser::NAME_GS - 257))
        | (1ULL << (Gauss200Parser::NEXT_GS - 257))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
        | (1ULL << (Gauss200Parser::NODE_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
        | (1ULL << (Gauss200Parser::NO_GS - 257))
        | (1ULL << (Gauss200Parser::NULLS_GS - 257))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
        | (1ULL << (Gauss200Parser::OFF_GS - 257))
        | (1ULL << (Gauss200Parser::OF_GS - 257))
        | (1ULL << (Gauss200Parser::OIDS_GS - 257))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
        | (1ULL << (Gauss200Parser::OPTION_GS - 257))
        | (1ULL << (Gauss200Parser::OWNED_GS - 257))
        | (1ULL << (Gauss200Parser::OWNER_GS - 257))
        | (1ULL << (Gauss200Parser::PARSER_GS - 257))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
        | (1ULL << (Gauss200Parser::PASSING_GS - 257))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
        | (1ULL << (Gauss200Parser::PER_GS - 257))
        | (1ULL << (Gauss200Parser::PLANS_GS - 257))
        | (1ULL << (Gauss200Parser::POOL_GS - 257))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
        | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
        | (1ULL << (Gauss200Parser::QUERY_GS - 321))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RANGE_GS - 321))
        | (1ULL << (Gauss200Parser::RAW_GS - 321))
        | (1ULL << (Gauss200Parser::READ_GS - 321))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
        | (1ULL << (Gauss200Parser::REF_GS - 321))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RENAME_GS - 321))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
        | (1ULL << (Gauss200Parser::RESET_GS - 321))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
        | (1ULL << (Gauss200Parser::RESTART_GS - 321))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
        | (1ULL << (Gauss200Parser::REUSE_GS - 321))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
        | (1ULL << (Gauss200Parser::ROWS_GS - 321))
        | (1ULL << (Gauss200Parser::RULE_GS - 321))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
        | (1ULL << (Gauss200Parser::SECOND_GS - 321))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
        | (1ULL << (Gauss200Parser::SERVER_GS - 321))
        | (1ULL << (Gauss200Parser::SESSION_GS - 321))
        | (1ULL << (Gauss200Parser::SET_GS - 321))
        | (1ULL << (Gauss200Parser::SHARE_GS - 321))
        | (1ULL << (Gauss200Parser::SHOW_GS - 321))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
        | (1ULL << (Gauss200Parser::SIZE_GS - 321))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
        | (1ULL << (Gauss200Parser::STABLE_GS - 321))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
        | (1ULL << (Gauss200Parser::START_GS - 321))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
        | (1ULL << (Gauss200Parser::STDIN_GS - 321))
        | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
        | (1ULL << (Gauss200Parser::STORE_GS - 385))
        | (1ULL << (Gauss200Parser::STRICT_GS - 385))
        | (1ULL << (Gauss200Parser::STRIP_GS - 385))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
        | (1ULL << (Gauss200Parser::SYSID_GS - 385))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::TABLES_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
        | (1ULL << (Gauss200Parser::TEMP_GS - 385))
        | (1ULL << (Gauss200Parser::TEXT_GS - 385))
        | (1ULL << (Gauss200Parser::THAN_GS - 385))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
        | (1ULL << (Gauss200Parser::TYPES_GS - 385))
        | (1ULL << (Gauss200Parser::TYPE_GS - 385))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
        | (1ULL << (Gauss200Parser::VALID_GS - 385))
        | (1ULL << (Gauss200Parser::VALUE_GS - 385))
        | (1ULL << (Gauss200Parser::VARYING_GS - 385))
        | (1ULL << (Gauss200Parser::VERSION_GS - 385))
        | (1ULL << (Gauss200Parser::VIEW_GS - 385))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
        | (1ULL << (Gauss200Parser::WORK_GS - 385))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
        | (1ULL << (Gauss200Parser::WRITE_GS - 385))
        | (1ULL << (Gauss200Parser::XML_GS - 385))
        | (1ULL << (Gauss200Parser::YEAR_GS - 385))
        | (1ULL << (Gauss200Parser::YES_GS - 385))
        | (1ULL << (Gauss200Parser::ZONE_GS - 385))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
        | (1ULL << (Gauss200Parser::BIT_GS - 385))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
        | (1ULL << (Gauss200Parser::CHAR_GS - 385))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
        | (1ULL << (Gauss200Parser::DATE_GS - 385))
        | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
        | (1ULL << (Gauss200Parser::DEC_GS - 449))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
        | (1ULL << (Gauss200Parser::INOUT_GS - 449))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
        | (1ULL << (Gauss200Parser::INT_GS - 449))
        | (1ULL << (Gauss200Parser::LEAST_GS - 449))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::NONE_GS - 449))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::NVL_GS - 449))
        | (1ULL << (Gauss200Parser::OUT_GS - 449))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
        | (1ULL << (Gauss200Parser::POSITION_GS - 449))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
        | (1ULL << (Gauss200Parser::REAL_GS - 449))
        | (1ULL << (Gauss200Parser::ROW_GS - 449))
        | (1ULL << (Gauss200Parser::SETOF_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
        | (1ULL << (Gauss200Parser::TIME_GS - 449))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
        | (1ULL << (Gauss200Parser::TREAT_GS - 449))
        | (1ULL << (Gauss200Parser::TRIM_GS - 449))
        | (1ULL << (Gauss200Parser::VALUES_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
        | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
        | (1ULL << (Gauss200Parser::POINT_GS - 449))
        | (1ULL << (Gauss200Parser::LSEG_GS - 449))
        | (1ULL << (Gauss200Parser::BOX_GS - 449))
        | (1ULL << (Gauss200Parser::PATH_GS - 449))
        | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
        | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
        | (1ULL << (Gauss200Parser::CIDR_GS - 449))
        | (1ULL << (Gauss200Parser::INET_GS - 449))
        | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
        | (1ULL << (Gauss200Parser::USAGE_GS - 516))
        | (1ULL << (Gauss200Parser::SPACE_GS - 516))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::LEFT_PAREN - 601))
        | (1ULL << (Gauss200Parser::PLUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::MINUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::AT_SIGN - 601))
        | (1ULL << (Gauss200Parser::QUESTION_MARK - 601))
        | (1ULL << (Gauss200Parser::TILDE_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::EXCLAMATION_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::POUND_SIGN - 601))
        | (1ULL << (Gauss200Parser::BAR - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601))
        | (1ULL << (Gauss200Parser::ICONST - 601))
        | (1ULL << (Gauss200Parser::FCONST - 601))
        | (1ULL << (Gauss200Parser::BCONST - 601))
        | (1ULL << (Gauss200Parser::PARAM - 601)))) != 0)) {
        setState(4156);
        expression_list();
      }
      setState(4159);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4160);
      expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4161);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ROLLUP_GS

      || _la == Gauss200Parser::CUBE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4162);
      paren_group_element_expr_list();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4163);
      match(Gauss200Parser::GROUPING_GS);
      setState(4164);
      match(Gauss200Parser::SETS_GS);
      setState(4165);
      match(Gauss200Parser::LEFT_PAREN);
      setState(4166);
      grouping_elements();
      setState(4167);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_group_element_expr_listContext ------------------------------------------------------------------

Gauss200Parser::Paren_group_element_expr_listContext::Paren_group_element_expr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_group_element_expr_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Group_element_exprContext *> Gauss200Parser::Paren_group_element_expr_listContext::group_element_expr() {
  return getRuleContexts<Gauss200Parser::Group_element_exprContext>();
}

Gauss200Parser::Group_element_exprContext* Gauss200Parser::Paren_group_element_expr_listContext::group_element_expr(size_t i) {
  return getRuleContext<Gauss200Parser::Group_element_exprContext>(i);
}

tree::TerminalNode* Gauss200Parser::Paren_group_element_expr_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Paren_group_element_expr_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Paren_group_element_expr_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Paren_group_element_expr_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_group_element_expr_list;
}

void Gauss200Parser::Paren_group_element_expr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_group_element_expr_list(this);
}

void Gauss200Parser::Paren_group_element_expr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_group_element_expr_list(this);
}


antlrcpp::Any Gauss200Parser::Paren_group_element_expr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_group_element_expr_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_group_element_expr_listContext* Gauss200Parser::paren_group_element_expr_list() {
  Paren_group_element_expr_listContext *_localctx = _tracker.createInstance<Paren_group_element_expr_listContext>(_ctx, getState());
  enterRule(_localctx, 616, Gauss200Parser::RuleParen_group_element_expr_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4171);
    match(Gauss200Parser::LEFT_PAREN);
    setState(4172);
    group_element_expr();
    setState(4177);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4173);
      match(Gauss200Parser::COMMA);
      setState(4174);
      group_element_expr();
      setState(4179);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4180);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_element_exprContext ------------------------------------------------------------------

Gauss200Parser::Group_element_exprContext::Group_element_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Group_element_exprContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::Group_element_exprContext::paren_expr_list() {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(0);
}


size_t Gauss200Parser::Group_element_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleGroup_element_expr;
}

void Gauss200Parser::Group_element_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_element_expr(this);
}

void Gauss200Parser::Group_element_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_element_expr(this);
}


antlrcpp::Any Gauss200Parser::Group_element_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGroup_element_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Group_element_exprContext* Gauss200Parser::group_element_expr() {
  Group_element_exprContext *_localctx = _tracker.createInstance<Group_element_exprContext>(_ctx, getState());
  enterRule(_localctx, 618, Gauss200Parser::RuleGroup_element_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4184);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 452, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4182);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4183);
      paren_expr_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Having_clauseContext ------------------------------------------------------------------

Gauss200Parser::Having_clauseContext::Having_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Having_clauseContext::HAVING_GS() {
  return getToken(Gauss200Parser::HAVING_GS, 0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Having_clauseContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}


size_t Gauss200Parser::Having_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleHaving_clause;
}

void Gauss200Parser::Having_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHaving_clause(this);
}

void Gauss200Parser::Having_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHaving_clause(this);
}


antlrcpp::Any Gauss200Parser::Having_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitHaving_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Having_clauseContext* Gauss200Parser::having_clause() {
  Having_clauseContext *_localctx = _tracker.createInstance<Having_clauseContext>(_ctx, getState());
  enterRule(_localctx, 620, Gauss200Parser::RuleHaving_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4186);
    match(Gauss200Parser::HAVING_GS);
    setState(4187);
    expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_clauseContext ------------------------------------------------------------------

Gauss200Parser::Window_clauseContext::Window_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Window_clauseContext::WINDOW_GS() {
  return getToken(Gauss200Parser::WINDOW_GS, 0);
}

Gauss200Parser::Window_clause_optionsContext* Gauss200Parser::Window_clauseContext::window_clause_options() {
  return getRuleContext<Gauss200Parser::Window_clause_optionsContext>(0);
}


size_t Gauss200Parser::Window_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleWindow_clause;
}

void Gauss200Parser::Window_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindow_clause(this);
}

void Gauss200Parser::Window_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindow_clause(this);
}


antlrcpp::Any Gauss200Parser::Window_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWindow_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Window_clauseContext* Gauss200Parser::window_clause() {
  Window_clauseContext *_localctx = _tracker.createInstance<Window_clauseContext>(_ctx, getState());
  enterRule(_localctx, 622, Gauss200Parser::RuleWindow_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4189);
    match(Gauss200Parser::WINDOW_GS);
    setState(4190);
    window_clause_options();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_clause_optionsContext ------------------------------------------------------------------

Gauss200Parser::Window_clause_optionsContext::Window_clause_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Window_clause_optionContext *> Gauss200Parser::Window_clause_optionsContext::window_clause_option() {
  return getRuleContexts<Gauss200Parser::Window_clause_optionContext>();
}

Gauss200Parser::Window_clause_optionContext* Gauss200Parser::Window_clause_optionsContext::window_clause_option(size_t i) {
  return getRuleContext<Gauss200Parser::Window_clause_optionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Window_clause_optionsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Window_clause_optionsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Window_clause_optionsContext::getRuleIndex() const {
  return Gauss200Parser::RuleWindow_clause_options;
}

void Gauss200Parser::Window_clause_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindow_clause_options(this);
}

void Gauss200Parser::Window_clause_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindow_clause_options(this);
}


antlrcpp::Any Gauss200Parser::Window_clause_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWindow_clause_options(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Window_clause_optionsContext* Gauss200Parser::window_clause_options() {
  Window_clause_optionsContext *_localctx = _tracker.createInstance<Window_clause_optionsContext>(_ctx, getState());
  enterRule(_localctx, 624, Gauss200Parser::RuleWindow_clause_options);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4192);
    window_clause_option();
    setState(4197);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4193);
      match(Gauss200Parser::COMMA);
      setState(4194);
      window_clause_option();
      setState(4199);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_clause_optionContext ------------------------------------------------------------------

Gauss200Parser::Window_clause_optionContext::Window_clause_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Window_nameContext* Gauss200Parser::Window_clause_optionContext::window_name() {
  return getRuleContext<Gauss200Parser::Window_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Window_clause_optionContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Window_clause_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Window_definitionContext* Gauss200Parser::Window_clause_optionContext::window_definition() {
  return getRuleContext<Gauss200Parser::Window_definitionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Window_clause_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Window_clause_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleWindow_clause_option;
}

void Gauss200Parser::Window_clause_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindow_clause_option(this);
}

void Gauss200Parser::Window_clause_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindow_clause_option(this);
}


antlrcpp::Any Gauss200Parser::Window_clause_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWindow_clause_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Window_clause_optionContext* Gauss200Parser::window_clause_option() {
  Window_clause_optionContext *_localctx = _tracker.createInstance<Window_clause_optionContext>(_ctx, getState());
  enterRule(_localctx, 626, Gauss200Parser::RuleWindow_clause_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4200);
    window_name();
    setState(4201);
    match(Gauss200Parser::AS_GS);
    setState(4202);
    match(Gauss200Parser::LEFT_PAREN);
    setState(4203);
    window_definition();
    setState(4204);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_nameContext ------------------------------------------------------------------

Gauss200Parser::Window_nameContext::Window_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Window_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Window_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleWindow_name;
}

void Gauss200Parser::Window_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindow_name(this);
}

void Gauss200Parser::Window_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindow_name(this);
}


antlrcpp::Any Gauss200Parser::Window_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWindow_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Window_nameContext* Gauss200Parser::window_name() {
  Window_nameContext *_localctx = _tracker.createInstance<Window_nameContext>(_ctx, getState());
  enterRule(_localctx, 628, Gauss200Parser::RuleWindow_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4206);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_definitionContext ------------------------------------------------------------------

Gauss200Parser::Window_definitionContext::Window_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Window_nameContext* Gauss200Parser::Window_definitionContext::window_name() {
  return getRuleContext<Gauss200Parser::Window_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Window_definitionContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Window_definitionContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Window_definitionContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}

Gauss200Parser::Order_by_clauseContext* Gauss200Parser::Window_definitionContext::order_by_clause() {
  return getRuleContext<Gauss200Parser::Order_by_clauseContext>(0);
}

Gauss200Parser::Frame_clauseContext* Gauss200Parser::Window_definitionContext::frame_clause() {
  return getRuleContext<Gauss200Parser::Frame_clauseContext>(0);
}


size_t Gauss200Parser::Window_definitionContext::getRuleIndex() const {
  return Gauss200Parser::RuleWindow_definition;
}

void Gauss200Parser::Window_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindow_definition(this);
}

void Gauss200Parser::Window_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindow_definition(this);
}


antlrcpp::Any Gauss200Parser::Window_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWindow_definition(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Window_definitionContext* Gauss200Parser::window_definition() {
  Window_definitionContext *_localctx = _tracker.createInstance<Window_definitionContext>(_ctx, getState());
  enterRule(_localctx, 630, Gauss200Parser::RuleWindow_definition);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4214);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 454, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4208);
      window_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4209);
      match(Gauss200Parser::PARTITION_GS);
      setState(4210);
      match(Gauss200Parser::BY_GS);
      setState(4211);
      expression_list();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4212);
      order_by_clause();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4213);
      frame_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Frame_clauseContext ------------------------------------------------------------------

Gauss200Parser::Frame_clauseContext::Frame_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Frame_start_endContext *> Gauss200Parser::Frame_clauseContext::frame_start_end() {
  return getRuleContexts<Gauss200Parser::Frame_start_endContext>();
}

Gauss200Parser::Frame_start_endContext* Gauss200Parser::Frame_clauseContext::frame_start_end(size_t i) {
  return getRuleContext<Gauss200Parser::Frame_start_endContext>(i);
}

tree::TerminalNode* Gauss200Parser::Frame_clauseContext::RANGE_GS() {
  return getToken(Gauss200Parser::RANGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Frame_clauseContext::ROWS_GS() {
  return getToken(Gauss200Parser::ROWS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Frame_clauseContext::BETWEEN_GS() {
  return getToken(Gauss200Parser::BETWEEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Frame_clauseContext::AND_GS() {
  return getToken(Gauss200Parser::AND_GS, 0);
}


size_t Gauss200Parser::Frame_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleFrame_clause;
}

void Gauss200Parser::Frame_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrame_clause(this);
}

void Gauss200Parser::Frame_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrame_clause(this);
}


antlrcpp::Any Gauss200Parser::Frame_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFrame_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Frame_clauseContext* Gauss200Parser::frame_clause() {
  Frame_clauseContext *_localctx = _tracker.createInstance<Frame_clauseContext>(_ctx, getState());
  enterRule(_localctx, 632, Gauss200Parser::RuleFrame_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4228);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4217);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 455, _ctx)) {
      case 1: {
        setState(4216);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::RANGE_GS

        || _la == Gauss200Parser::ROWS_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(4219);
      frame_start_end();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4221);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::RANGE_GS

      || _la == Gauss200Parser::ROWS_GS) {
        setState(4220);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::RANGE_GS

        || _la == Gauss200Parser::ROWS_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(4223);
      match(Gauss200Parser::BETWEEN_GS);
      setState(4224);
      frame_start_end();
      setState(4225);
      match(Gauss200Parser::AND_GS);
      setState(4226);
      frame_start_end();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Frame_start_endContext ------------------------------------------------------------------

Gauss200Parser::Frame_start_endContext::Frame_start_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Frame_start_endContext::UNBOUNDED_GS() {
  return getToken(Gauss200Parser::UNBOUNDED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Frame_start_endContext::PRECEDING_GS() {
  return getToken(Gauss200Parser::PRECEDING_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Frame_start_endContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Frame_start_endContext::CURRENT_GS() {
  return getToken(Gauss200Parser::CURRENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Frame_start_endContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Frame_start_endContext::FOLLOWING_GS() {
  return getToken(Gauss200Parser::FOLLOWING_GS, 0);
}


size_t Gauss200Parser::Frame_start_endContext::getRuleIndex() const {
  return Gauss200Parser::RuleFrame_start_end;
}

void Gauss200Parser::Frame_start_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrame_start_end(this);
}

void Gauss200Parser::Frame_start_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrame_start_end(this);
}


antlrcpp::Any Gauss200Parser::Frame_start_endContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFrame_start_end(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Frame_start_endContext* Gauss200Parser::frame_start_end() {
  Frame_start_endContext *_localctx = _tracker.createInstance<Frame_start_endContext>(_ctx, getState());
  enterRule(_localctx, 634, Gauss200Parser::RuleFrame_start_end);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4242);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 458, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4230);
      match(Gauss200Parser::UNBOUNDED_GS);
      setState(4231);
      match(Gauss200Parser::PRECEDING_GS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4232);
      expression();
      setState(4233);
      match(Gauss200Parser::PRECEDING_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4235);
      match(Gauss200Parser::CURRENT_GS);
      setState(4236);
      match(Gauss200Parser::ROW_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4237);
      expression();
      setState(4238);
      match(Gauss200Parser::FOLLOWING_GS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4240);
      match(Gauss200Parser::UNBOUNDED_GS);
      setState(4241);
      match(Gauss200Parser::FOLLOWING_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clauseContext ------------------------------------------------------------------

Gauss200Parser::Order_by_clauseContext::Order_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Order_by_clauseContext::ORDER_GS() {
  return getToken(Gauss200Parser::ORDER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Order_by_clauseContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

Gauss200Parser::Order_by_clause_optionsContext* Gauss200Parser::Order_by_clauseContext::order_by_clause_options() {
  return getRuleContext<Gauss200Parser::Order_by_clause_optionsContext>(0);
}


size_t Gauss200Parser::Order_by_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleOrder_by_clause;
}

void Gauss200Parser::Order_by_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_clause(this);
}

void Gauss200Parser::Order_by_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_clause(this);
}


antlrcpp::Any Gauss200Parser::Order_by_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOrder_by_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Order_by_clauseContext* Gauss200Parser::order_by_clause() {
  Order_by_clauseContext *_localctx = _tracker.createInstance<Order_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 636, Gauss200Parser::RuleOrder_by_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4244);
    match(Gauss200Parser::ORDER_GS);
    setState(4245);
    match(Gauss200Parser::BY_GS);
    setState(4246);
    order_by_clause_options();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clause_optionsContext ------------------------------------------------------------------

Gauss200Parser::Order_by_clause_optionsContext::Order_by_clause_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Order_by_clause_optionContext *> Gauss200Parser::Order_by_clause_optionsContext::order_by_clause_option() {
  return getRuleContexts<Gauss200Parser::Order_by_clause_optionContext>();
}

Gauss200Parser::Order_by_clause_optionContext* Gauss200Parser::Order_by_clause_optionsContext::order_by_clause_option(size_t i) {
  return getRuleContext<Gauss200Parser::Order_by_clause_optionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Order_by_clause_optionsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Order_by_clause_optionsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Order_by_clause_optionsContext::getRuleIndex() const {
  return Gauss200Parser::RuleOrder_by_clause_options;
}

void Gauss200Parser::Order_by_clause_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_clause_options(this);
}

void Gauss200Parser::Order_by_clause_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_clause_options(this);
}


antlrcpp::Any Gauss200Parser::Order_by_clause_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOrder_by_clause_options(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Order_by_clause_optionsContext* Gauss200Parser::order_by_clause_options() {
  Order_by_clause_optionsContext *_localctx = _tracker.createInstance<Order_by_clause_optionsContext>(_ctx, getState());
  enterRule(_localctx, 638, Gauss200Parser::RuleOrder_by_clause_options);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4248);
    order_by_clause_option();
    setState(4253);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4249);
      match(Gauss200Parser::COMMA);
      setState(4250);
      order_by_clause_option();
      setState(4255);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clause_optionContext ------------------------------------------------------------------

Gauss200Parser::Order_by_clause_optionContext::Order_by_clause_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Order_by_clause_optionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Order_by_clause_exprContext* Gauss200Parser::Order_by_clause_optionContext::order_by_clause_expr() {
  return getRuleContext<Gauss200Parser::Order_by_clause_exprContext>(0);
}

Gauss200Parser::Nulls_first_lastContext* Gauss200Parser::Order_by_clause_optionContext::nulls_first_last() {
  return getRuleContext<Gauss200Parser::Nulls_first_lastContext>(0);
}


size_t Gauss200Parser::Order_by_clause_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleOrder_by_clause_option;
}

void Gauss200Parser::Order_by_clause_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_clause_option(this);
}

void Gauss200Parser::Order_by_clause_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_clause_option(this);
}


antlrcpp::Any Gauss200Parser::Order_by_clause_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOrder_by_clause_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Order_by_clause_optionContext* Gauss200Parser::order_by_clause_option() {
  Order_by_clause_optionContext *_localctx = _tracker.createInstance<Order_by_clause_optionContext>(_ctx, getState());
  enterRule(_localctx, 640, Gauss200Parser::RuleOrder_by_clause_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4256);
    expression();
    setState(4258);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx)) {
    case 1: {
      setState(4257);
      order_by_clause_expr();
      break;
    }

    }
    setState(4261);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      setState(4260);
      nulls_first_last();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clause_exprContext ------------------------------------------------------------------

Gauss200Parser::Order_by_clause_exprContext::Order_by_clause_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Order_by_clause_exprContext::ASC_GS() {
  return getToken(Gauss200Parser::ASC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Order_by_clause_exprContext::DESC_GS() {
  return getToken(Gauss200Parser::DESC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Order_by_clause_exprContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Order_by_clause_exprContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

Gauss200Parser::Nlssort_expression_clauseContext* Gauss200Parser::Order_by_clause_exprContext::nlssort_expression_clause() {
  return getRuleContext<Gauss200Parser::Nlssort_expression_clauseContext>(0);
}


size_t Gauss200Parser::Order_by_clause_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleOrder_by_clause_expr;
}

void Gauss200Parser::Order_by_clause_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_clause_expr(this);
}

void Gauss200Parser::Order_by_clause_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_clause_expr(this);
}


antlrcpp::Any Gauss200Parser::Order_by_clause_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOrder_by_clause_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Order_by_clause_exprContext* Gauss200Parser::order_by_clause_expr() {
  Order_by_clause_exprContext *_localctx = _tracker.createInstance<Order_by_clause_exprContext>(_ctx, getState());
  enterRule(_localctx, 642, Gauss200Parser::RuleOrder_by_clause_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4270);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::USING_GS: {
        enterOuterAlt(_localctx, 1);
        setState(4267);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::ASC_GS: {
            setState(4263);
            match(Gauss200Parser::ASC_GS);
            break;
          }

          case Gauss200Parser::DESC_GS: {
            setState(4264);
            match(Gauss200Parser::DESC_GS);
            break;
          }

          case Gauss200Parser::USING_GS: {
            setState(4265);
            match(Gauss200Parser::USING_GS);
            setState(4266);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case Gauss200Parser::NLSSORT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(4269);
        nlssort_expression_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nlssort_expression_clauseContext ------------------------------------------------------------------

Gauss200Parser::Nlssort_expression_clauseContext::Nlssort_expression_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Nlssort_expression_clauseContext::NLSSORT_GS() {
  return getToken(Gauss200Parser::NLSSORT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nlssort_expression_clauseContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Nlssort_expression_clauseContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Nlssort_expression_clauseContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

tree::TerminalNode* Gauss200Parser::Nlssort_expression_clauseContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Nlssort_expression_clauseContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Nlssort_expression_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleNlssort_expression_clause;
}

void Gauss200Parser::Nlssort_expression_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNlssort_expression_clause(this);
}

void Gauss200Parser::Nlssort_expression_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNlssort_expression_clause(this);
}


antlrcpp::Any Gauss200Parser::Nlssort_expression_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNlssort_expression_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Nlssort_expression_clauseContext* Gauss200Parser::nlssort_expression_clause() {
  Nlssort_expression_clauseContext *_localctx = _tracker.createInstance<Nlssort_expression_clauseContext>(_ctx, getState());
  enterRule(_localctx, 644, Gauss200Parser::RuleNlssort_expression_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4272);
    match(Gauss200Parser::NLSSORT_GS);
    setState(4273);
    match(Gauss200Parser::LEFT_PAREN);
    setState(4274);
    column_name();
    setState(4275);
    match(Gauss200Parser::COMMA);
    setState(4276);
    match(Gauss200Parser::CHAR_STRING);
    setState(4277);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Limit_clauseContext ------------------------------------------------------------------

Gauss200Parser::Limit_clauseContext::Limit_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Limit_clauseContext::LIMIT_GS() {
  return getToken(Gauss200Parser::LIMIT_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Limit_clauseContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Limit_clauseContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}


size_t Gauss200Parser::Limit_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleLimit_clause;
}

void Gauss200Parser::Limit_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLimit_clause(this);
}

void Gauss200Parser::Limit_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLimit_clause(this);
}


antlrcpp::Any Gauss200Parser::Limit_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLimit_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Limit_clauseContext* Gauss200Parser::limit_clause() {
  Limit_clauseContext *_localctx = _tracker.createInstance<Limit_clauseContext>(_ctx, getState());
  enterRule(_localctx, 646, Gauss200Parser::RuleLimit_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4279);
    match(Gauss200Parser::LIMIT_GS);
    setState(4282);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx)) {
    case 1: {
      setState(4280);
      expression();
      break;
    }

    case 2: {
      setState(4281);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Offset_clauseContext ------------------------------------------------------------------

Gauss200Parser::Offset_clauseContext::Offset_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Offset_clauseContext::OFFSET_GS() {
  return getToken(Gauss200Parser::OFFSET_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Offset_clauseContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Offset_clauseContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Offset_clauseContext::ROWS_GS() {
  return getToken(Gauss200Parser::ROWS_GS, 0);
}


size_t Gauss200Parser::Offset_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleOffset_clause;
}

void Gauss200Parser::Offset_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOffset_clause(this);
}

void Gauss200Parser::Offset_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOffset_clause(this);
}


antlrcpp::Any Gauss200Parser::Offset_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOffset_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Offset_clauseContext* Gauss200Parser::offset_clause() {
  Offset_clauseContext *_localctx = _tracker.createInstance<Offset_clauseContext>(_ctx, getState());
  enterRule(_localctx, 648, Gauss200Parser::RuleOffset_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4284);
    match(Gauss200Parser::OFFSET_GS);
    setState(4285);
    expression();
    setState(4287);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 465, _ctx)) {
    case 1: {
      setState(4286);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ROWS_GS || _la == Gauss200Parser::ROW_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fetch_clauseContext ------------------------------------------------------------------

Gauss200Parser::Fetch_clauseContext::Fetch_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Fetch_clauseContext::FETCH_GS() {
  return getToken(Gauss200Parser::FETCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_clauseContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_clauseContext::FIRST_GS() {
  return getToken(Gauss200Parser::FIRST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_clauseContext::NEXT_GS() {
  return getToken(Gauss200Parser::NEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_clauseContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_clauseContext::ROWS_GS() {
  return getToken(Gauss200Parser::ROWS_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Fetch_clauseContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Fetch_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleFetch_clause;
}

void Gauss200Parser::Fetch_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFetch_clause(this);
}

void Gauss200Parser::Fetch_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFetch_clause(this);
}


antlrcpp::Any Gauss200Parser::Fetch_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFetch_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Fetch_clauseContext* Gauss200Parser::fetch_clause() {
  Fetch_clauseContext *_localctx = _tracker.createInstance<Fetch_clauseContext>(_ctx, getState());
  enterRule(_localctx, 650, Gauss200Parser::RuleFetch_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4289);
    match(Gauss200Parser::FETCH_GS);
    setState(4290);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::FIRST_GS || _la == Gauss200Parser::NEXT_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4292);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 466, _ctx)) {
    case 1: {
      setState(4291);
      expression();
      break;
    }

    }
    setState(4294);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::ROWS_GS || _la == Gauss200Parser::ROW_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4295);
    match(Gauss200Parser::ONLY_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_update_share_clauseContext ------------------------------------------------------------------

Gauss200Parser::For_update_share_clauseContext::For_update_share_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::For_update_share_clauseContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::For_update_share_clauseContext::UPDATE_GS() {
  return getToken(Gauss200Parser::UPDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::For_update_share_clauseContext::SHARE_GS() {
  return getToken(Gauss200Parser::SHARE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::For_update_share_clauseContext::OF_GS() {
  return getToken(Gauss200Parser::OF_GS, 0);
}

std::vector<Gauss200Parser::Table_nameContext *> Gauss200Parser::For_update_share_clauseContext::table_name() {
  return getRuleContexts<Gauss200Parser::Table_nameContext>();
}

Gauss200Parser::Table_nameContext* Gauss200Parser::For_update_share_clauseContext::table_name(size_t i) {
  return getRuleContext<Gauss200Parser::Table_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::For_update_share_clauseContext::NOWAIT_GS() {
  return getToken(Gauss200Parser::NOWAIT_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::For_update_share_clauseContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::For_update_share_clauseContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::For_update_share_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleFor_update_share_clause;
}

void Gauss200Parser::For_update_share_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_update_share_clause(this);
}

void Gauss200Parser::For_update_share_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_update_share_clause(this);
}


antlrcpp::Any Gauss200Parser::For_update_share_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFor_update_share_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::For_update_share_clauseContext* Gauss200Parser::for_update_share_clause() {
  For_update_share_clauseContext *_localctx = _tracker.createInstance<For_update_share_clauseContext>(_ctx, getState());
  enterRule(_localctx, 652, Gauss200Parser::RuleFor_update_share_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4297);
    match(Gauss200Parser::FOR_GS);
    setState(4298);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::SHARE_GS

    || _la == Gauss200Parser::UPDATE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4308);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx)) {
    case 1: {
      setState(4299);
      match(Gauss200Parser::OF_GS);
      setState(4300);
      table_name();
      setState(4305);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(4301);
        match(Gauss200Parser::COMMA);
        setState(4302);
        table_name();
        setState(4307);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
    setState(4311);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 469, _ctx)) {
    case 1: {
      setState(4310);
      match(Gauss200Parser::NOWAIT_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_stmtContext ------------------------------------------------------------------

Gauss200Parser::Insert_stmtContext::Insert_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Insert_stmtContext::INSERT_GS() {
  return getToken(Gauss200Parser::INSERT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Insert_stmtContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Insert_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Insert_values_optionContext* Gauss200Parser::Insert_stmtContext::insert_values_option() {
  return getRuleContext<Gauss200Parser::Insert_values_optionContext>(0);
}

Gauss200Parser::With_clauseContext* Gauss200Parser::Insert_stmtContext::with_clause() {
  return getRuleContext<Gauss200Parser::With_clauseContext>(0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Insert_stmtContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

Gauss200Parser::Return_clauseContext* Gauss200Parser::Insert_stmtContext::return_clause() {
  return getRuleContext<Gauss200Parser::Return_clauseContext>(0);
}


size_t Gauss200Parser::Insert_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleInsert_stmt;
}

void Gauss200Parser::Insert_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_stmt(this);
}

void Gauss200Parser::Insert_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_stmt(this);
}


antlrcpp::Any Gauss200Parser::Insert_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitInsert_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Insert_stmtContext* Gauss200Parser::insert_stmt() {
  Insert_stmtContext *_localctx = _tracker.createInstance<Insert_stmtContext>(_ctx, getState());
  enterRule(_localctx, 654, Gauss200Parser::RuleInsert_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4314);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(4313);
      with_clause();
    }
    setState(4316);
    match(Gauss200Parser::INSERT_GS);
    setState(4317);
    match(Gauss200Parser::INTO_GS);
    setState(4318);
    table_name();
    setState(4320);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 471, _ctx)) {
    case 1: {
      setState(4319);
      paren_column_list();
      break;
    }

    }
    setState(4322);
    insert_values_option();
    setState(4324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::RETURNING_GS) {
      setState(4323);
      return_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_values_optionContext ------------------------------------------------------------------

Gauss200Parser::Insert_values_optionContext::Insert_values_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Insert_values_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Insert_values_optionContext::VALUES_GS() {
  return getToken(Gauss200Parser::VALUES_GS, 0);
}

std::vector<Gauss200Parser::Values_expressionContext *> Gauss200Parser::Insert_values_optionContext::values_expression() {
  return getRuleContexts<Gauss200Parser::Values_expressionContext>();
}

Gauss200Parser::Values_expressionContext* Gauss200Parser::Insert_values_optionContext::values_expression(size_t i) {
  return getRuleContext<Gauss200Parser::Values_expressionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Insert_values_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Insert_values_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Insert_values_optionContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}


size_t Gauss200Parser::Insert_values_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleInsert_values_option;
}

void Gauss200Parser::Insert_values_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_values_option(this);
}

void Gauss200Parser::Insert_values_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_values_option(this);
}


antlrcpp::Any Gauss200Parser::Insert_values_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitInsert_values_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Insert_values_optionContext* Gauss200Parser::insert_values_option() {
  Insert_values_optionContext *_localctx = _tracker.createInstance<Insert_values_optionContext>(_ctx, getState());
  enterRule(_localctx, 656, Gauss200Parser::RuleInsert_values_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4338);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::DEFAULT_GS: {
        enterOuterAlt(_localctx, 1);
        setState(4326);
        match(Gauss200Parser::DEFAULT_GS);
        setState(4327);
        match(Gauss200Parser::VALUES_GS);
        break;
      }

      case Gauss200Parser::VALUES_GS: {
        enterOuterAlt(_localctx, 2);
        setState(4328);
        match(Gauss200Parser::VALUES_GS);
        setState(4329);
        values_expression();
        setState(4334);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::COMMA) {
          setState(4330);
          match(Gauss200Parser::COMMA);
          setState(4331);
          values_expression();
          setState(4336);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 3);
        setState(4337);
        select_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Values_expressionContext ------------------------------------------------------------------

Gauss200Parser::Values_expressionContext::Values_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Values_expressionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Expr_defaultContext *> Gauss200Parser::Values_expressionContext::expr_default() {
  return getRuleContexts<Gauss200Parser::Expr_defaultContext>();
}

Gauss200Parser::Expr_defaultContext* Gauss200Parser::Values_expressionContext::expr_default(size_t i) {
  return getRuleContext<Gauss200Parser::Expr_defaultContext>(i);
}

tree::TerminalNode* Gauss200Parser::Values_expressionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Values_expressionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Values_expressionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Values_expressionContext::getRuleIndex() const {
  return Gauss200Parser::RuleValues_expression;
}

void Gauss200Parser::Values_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValues_expression(this);
}

void Gauss200Parser::Values_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValues_expression(this);
}


antlrcpp::Any Gauss200Parser::Values_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitValues_expression(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Values_expressionContext* Gauss200Parser::values_expression() {
  Values_expressionContext *_localctx = _tracker.createInstance<Values_expressionContext>(_ctx, getState());
  enterRule(_localctx, 658, Gauss200Parser::RuleValues_expression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4340);
    match(Gauss200Parser::LEFT_PAREN);
    setState(4341);
    expr_default();
    setState(4346);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4342);
      match(Gauss200Parser::COMMA);
      setState(4343);
      expr_default();
      setState(4348);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4349);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_stmtContext ------------------------------------------------------------------

Gauss200Parser::Update_stmtContext::Update_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Update_stmtContext::UPDATE_GS() {
  return getToken(Gauss200Parser::UPDATE_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Update_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Update_stmtContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Update_set_clauseContext* Gauss200Parser::Update_stmtContext::update_set_clause() {
  return getRuleContext<Gauss200Parser::Update_set_clauseContext>(0);
}

tree::TerminalNode* Gauss200Parser::Update_stmtContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Update_stmtContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

Gauss200Parser::As_aliasContext* Gauss200Parser::Update_stmtContext::as_alias() {
  return getRuleContext<Gauss200Parser::As_aliasContext>(0);
}

Gauss200Parser::From_clauseContext* Gauss200Parser::Update_stmtContext::from_clause() {
  return getRuleContext<Gauss200Parser::From_clauseContext>(0);
}

Gauss200Parser::Where_clauseContext* Gauss200Parser::Update_stmtContext::where_clause() {
  return getRuleContext<Gauss200Parser::Where_clauseContext>(0);
}

Gauss200Parser::Return_clauseContext* Gauss200Parser::Update_stmtContext::return_clause() {
  return getRuleContext<Gauss200Parser::Return_clauseContext>(0);
}


size_t Gauss200Parser::Update_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleUpdate_stmt;
}

void Gauss200Parser::Update_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_stmt(this);
}

void Gauss200Parser::Update_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_stmt(this);
}


antlrcpp::Any Gauss200Parser::Update_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUpdate_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Update_stmtContext* Gauss200Parser::update_stmt() {
  Update_stmtContext *_localctx = _tracker.createInstance<Update_stmtContext>(_ctx, getState());
  enterRule(_localctx, 660, Gauss200Parser::RuleUpdate_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4351);
    match(Gauss200Parser::UPDATE_GS);
    setState(4353);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 476, _ctx)) {
    case 1: {
      setState(4352);
      match(Gauss200Parser::ONLY_GS);
      break;
    }

    }
    setState(4355);
    table_name();
    setState(4357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ASTERISK) {
      setState(4356);
      match(Gauss200Parser::ASTERISK);
    }
    setState(4360);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 478, _ctx)) {
    case 1: {
      setState(4359);
      as_alias();
      break;
    }

    }
    setState(4362);
    match(Gauss200Parser::SET_GS);
    setState(4363);
    update_set_clause();
    setState(4365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FROM_GS) {
      setState(4364);
      from_clause();
    }
    setState(4368);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WHERE_GS) {
      setState(4367);
      where_clause();
    }
    setState(4371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::RETURNING_GS) {
      setState(4370);
      return_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_set_clauseContext ------------------------------------------------------------------

Gauss200Parser::Update_set_clauseContext::Update_set_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Update_set_column_optionContext *> Gauss200Parser::Update_set_clauseContext::update_set_column_option() {
  return getRuleContexts<Gauss200Parser::Update_set_column_optionContext>();
}

Gauss200Parser::Update_set_column_optionContext* Gauss200Parser::Update_set_clauseContext::update_set_column_option(size_t i) {
  return getRuleContext<Gauss200Parser::Update_set_column_optionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Update_set_clauseContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Update_set_clauseContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Update_set_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleUpdate_set_clause;
}

void Gauss200Parser::Update_set_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_set_clause(this);
}

void Gauss200Parser::Update_set_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_set_clause(this);
}


antlrcpp::Any Gauss200Parser::Update_set_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUpdate_set_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Update_set_clauseContext* Gauss200Parser::update_set_clause() {
  Update_set_clauseContext *_localctx = _tracker.createInstance<Update_set_clauseContext>(_ctx, getState());
  enterRule(_localctx, 662, Gauss200Parser::RuleUpdate_set_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4373);
    update_set_column_option();
    setState(4378);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4374);
      match(Gauss200Parser::COMMA);
      setState(4375);
      update_set_column_option();
      setState(4380);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_stmtContext ------------------------------------------------------------------

Gauss200Parser::Delete_stmtContext::Delete_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Delete_stmtContext::DELETE_GS() {
  return getToken(Gauss200Parser::DELETE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Delete_stmtContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Delete_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::With_clauseContext* Gauss200Parser::Delete_stmtContext::with_clause() {
  return getRuleContext<Gauss200Parser::With_clauseContext>(0);
}

tree::TerminalNode* Gauss200Parser::Delete_stmtContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Delete_stmtContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

Gauss200Parser::As_aliasContext* Gauss200Parser::Delete_stmtContext::as_alias() {
  return getRuleContext<Gauss200Parser::As_aliasContext>(0);
}

Gauss200Parser::Using_expr_optionContext* Gauss200Parser::Delete_stmtContext::using_expr_option() {
  return getRuleContext<Gauss200Parser::Using_expr_optionContext>(0);
}

Gauss200Parser::Where_clauseContext* Gauss200Parser::Delete_stmtContext::where_clause() {
  return getRuleContext<Gauss200Parser::Where_clauseContext>(0);
}

Gauss200Parser::Return_clauseContext* Gauss200Parser::Delete_stmtContext::return_clause() {
  return getRuleContext<Gauss200Parser::Return_clauseContext>(0);
}


size_t Gauss200Parser::Delete_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDelete_stmt;
}

void Gauss200Parser::Delete_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelete_stmt(this);
}

void Gauss200Parser::Delete_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelete_stmt(this);
}


antlrcpp::Any Gauss200Parser::Delete_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDelete_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Delete_stmtContext* Gauss200Parser::delete_stmt() {
  Delete_stmtContext *_localctx = _tracker.createInstance<Delete_stmtContext>(_ctx, getState());
  enterRule(_localctx, 664, Gauss200Parser::RuleDelete_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4382);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(4381);
      with_clause();
    }
    setState(4384);
    match(Gauss200Parser::DELETE_GS);
    setState(4385);
    match(Gauss200Parser::FROM_GS);
    setState(4387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx)) {
    case 1: {
      setState(4386);
      match(Gauss200Parser::ONLY_GS);
      break;
    }

    }
    setState(4389);
    table_name();
    setState(4391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ASTERISK) {
      setState(4390);
      match(Gauss200Parser::ASTERISK);
    }
    setState(4394);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 486, _ctx)) {
    case 1: {
      setState(4393);
      as_alias();
      break;
    }

    }
    setState(4397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::USING_GS) {
      setState(4396);
      using_expr_option();
    }
    setState(4400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WHERE_GS) {
      setState(4399);
      where_clause();
    }
    setState(4403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::RETURNING_GS) {
      setState(4402);
      return_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_clauseContext ------------------------------------------------------------------

Gauss200Parser::With_clauseContext::With_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::With_clauseContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::With_queryContext *> Gauss200Parser::With_clauseContext::with_query() {
  return getRuleContexts<Gauss200Parser::With_queryContext>();
}

Gauss200Parser::With_queryContext* Gauss200Parser::With_clauseContext::with_query(size_t i) {
  return getRuleContext<Gauss200Parser::With_queryContext>(i);
}

tree::TerminalNode* Gauss200Parser::With_clauseContext::RECURSIVE_GS() {
  return getToken(Gauss200Parser::RECURSIVE_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::With_clauseContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::With_clauseContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::With_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleWith_clause;
}

void Gauss200Parser::With_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_clause(this);
}

void Gauss200Parser::With_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_clause(this);
}


antlrcpp::Any Gauss200Parser::With_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWith_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::With_clauseContext* Gauss200Parser::with_clause() {
  With_clauseContext *_localctx = _tracker.createInstance<With_clauseContext>(_ctx, getState());
  enterRule(_localctx, 666, Gauss200Parser::RuleWith_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4405);
    match(Gauss200Parser::WITH_GS);
    setState(4407);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 490, _ctx)) {
    case 1: {
      setState(4406);
      match(Gauss200Parser::RECURSIVE_GS);
      break;
    }

    }
    setState(4409);
    with_query();
    setState(4414);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4410);
      match(Gauss200Parser::COMMA);
      setState(4411);
      with_query();
      setState(4416);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_queryContext ------------------------------------------------------------------

Gauss200Parser::With_queryContext::With_queryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::With_query_nameContext* Gauss200Parser::With_queryContext::with_query_name() {
  return getRuleContext<Gauss200Parser::With_query_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::With_queryContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::With_queryContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Data_manipulate_stmtContext* Gauss200Parser::With_queryContext::data_manipulate_stmt() {
  return getRuleContext<Gauss200Parser::Data_manipulate_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::With_queryContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::With_queryContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}


size_t Gauss200Parser::With_queryContext::getRuleIndex() const {
  return Gauss200Parser::RuleWith_query;
}

void Gauss200Parser::With_queryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_query(this);
}

void Gauss200Parser::With_queryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_query(this);
}


antlrcpp::Any Gauss200Parser::With_queryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWith_query(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::With_queryContext* Gauss200Parser::with_query() {
  With_queryContext *_localctx = _tracker.createInstance<With_queryContext>(_ctx, getState());
  enterRule(_localctx, 668, Gauss200Parser::RuleWith_query);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4417);
    with_query_name();
    setState(4419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(4418);
      paren_column_list();
    }
    setState(4421);
    match(Gauss200Parser::AS_GS);
    setState(4422);
    match(Gauss200Parser::LEFT_PAREN);
    setState(4423);
    data_manipulate_stmt();
    setState(4424);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_query_nameContext ------------------------------------------------------------------

Gauss200Parser::With_query_nameContext::With_query_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::With_query_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::With_query_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleWith_query_name;
}

void Gauss200Parser::With_query_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_query_name(this);
}

void Gauss200Parser::With_query_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_query_name(this);
}


antlrcpp::Any Gauss200Parser::With_query_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWith_query_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::With_query_nameContext* Gauss200Parser::with_query_name() {
  With_query_nameContext *_localctx = _tracker.createInstance<With_query_nameContext>(_ctx, getState());
  enterRule(_localctx, 670, Gauss200Parser::RuleWith_query_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4426);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- As_aliasContext ------------------------------------------------------------------

Gauss200Parser::As_aliasContext::As_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Alias_nameContext* Gauss200Parser::As_aliasContext::alias_name() {
  return getRuleContext<Gauss200Parser::Alias_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::As_aliasContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}


size_t Gauss200Parser::As_aliasContext::getRuleIndex() const {
  return Gauss200Parser::RuleAs_alias;
}

void Gauss200Parser::As_aliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAs_alias(this);
}

void Gauss200Parser::As_aliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAs_alias(this);
}


antlrcpp::Any Gauss200Parser::As_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAs_alias(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::As_aliasContext* Gauss200Parser::as_alias() {
  As_aliasContext *_localctx = _tracker.createInstance<As_aliasContext>(_ctx, getState());
  enterRule(_localctx, 672, Gauss200Parser::RuleAs_alias);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4429);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 493, _ctx)) {
    case 1: {
      setState(4428);
      match(Gauss200Parser::AS_GS);
      break;
    }

    }
    setState(4431);
    alias_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alias_nameContext ------------------------------------------------------------------

Gauss200Parser::Alias_nameContext::Alias_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Alias_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Alias_nameContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::Alias_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleAlias_name;
}

void Gauss200Parser::Alias_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias_name(this);
}

void Gauss200Parser::Alias_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias_name(this);
}


antlrcpp::Any Gauss200Parser::Alias_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAlias_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Alias_nameContext* Gauss200Parser::alias_name() {
  Alias_nameContext *_localctx = _tracker.createInstance<Alias_nameContext>(_ctx, getState());
  enterRule(_localctx, 674, Gauss200Parser::RuleAlias_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4435);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 494, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4433);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4434);
      match(Gauss200Parser::SCONST);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Where_clauseContext ------------------------------------------------------------------

Gauss200Parser::Where_clauseContext::Where_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Where_clauseContext::WHERE_GS() {
  return getToken(Gauss200Parser::WHERE_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Where_clauseContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Where_clauseContext::CURRENT_GS() {
  return getToken(Gauss200Parser::CURRENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Where_clauseContext::OF_GS() {
  return getToken(Gauss200Parser::OF_GS, 0);
}

Gauss200Parser::Cursor_nameContext* Gauss200Parser::Where_clauseContext::cursor_name() {
  return getRuleContext<Gauss200Parser::Cursor_nameContext>(0);
}


size_t Gauss200Parser::Where_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleWhere_clause;
}

void Gauss200Parser::Where_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhere_clause(this);
}

void Gauss200Parser::Where_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhere_clause(this);
}


antlrcpp::Any Gauss200Parser::Where_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWhere_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Where_clauseContext* Gauss200Parser::where_clause() {
  Where_clauseContext *_localctx = _tracker.createInstance<Where_clauseContext>(_ctx, getState());
  enterRule(_localctx, 676, Gauss200Parser::RuleWhere_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4443);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 495, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4437);
      match(Gauss200Parser::WHERE_GS);
      setState(4438);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4439);
      match(Gauss200Parser::WHERE_GS);
      setState(4440);
      match(Gauss200Parser::CURRENT_GS);
      setState(4441);
      match(Gauss200Parser::OF_GS);
      setState(4442);
      cursor_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_clauseContext ------------------------------------------------------------------

Gauss200Parser::Return_clauseContext::Return_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Return_clauseContext::RETURNING_GS() {
  return getToken(Gauss200Parser::RETURNING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Return_clauseContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

std::vector<Gauss200Parser::Output_expr_aliasContext *> Gauss200Parser::Return_clauseContext::output_expr_alias() {
  return getRuleContexts<Gauss200Parser::Output_expr_aliasContext>();
}

Gauss200Parser::Output_expr_aliasContext* Gauss200Parser::Return_clauseContext::output_expr_alias(size_t i) {
  return getRuleContext<Gauss200Parser::Output_expr_aliasContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Return_clauseContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Return_clauseContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Return_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleReturn_clause;
}

void Gauss200Parser::Return_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_clause(this);
}

void Gauss200Parser::Return_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_clause(this);
}


antlrcpp::Any Gauss200Parser::Return_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReturn_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Return_clauseContext* Gauss200Parser::return_clause() {
  Return_clauseContext *_localctx = _tracker.createInstance<Return_clauseContext>(_ctx, getState());
  enterRule(_localctx, 678, Gauss200Parser::RuleReturn_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4445);
    match(Gauss200Parser::RETURNING_GS);
    setState(4455);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ASTERISK: {
        setState(4446);
        match(Gauss200Parser::ASTERISK);
        break;
      }

      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::AUTHORIZATION_GS:
      case Gauss200Parser::BINARY_GS:
      case Gauss200Parser::COLLATION_GS:
      case Gauss200Parser::CONCURRENTLY_GS:
      case Gauss200Parser::CURRENT_SCHEMA_GS:
      case Gauss200Parser::FREEZE_GS:
      case Gauss200Parser::ILIKE_GS:
      case Gauss200Parser::INNER_GS:
      case Gauss200Parser::ISNULL_GS:
      case Gauss200Parser::JOIN_GS:
      case Gauss200Parser::LEFT_GS:
      case Gauss200Parser::LIKE_GS:
      case Gauss200Parser::NATURAL_GS:
      case Gauss200Parser::NOTNULL_GS:
      case Gauss200Parser::OUTER_GS:
      case Gauss200Parser::OVERLAPS_GS:
      case Gauss200Parser::OVER_GS:
      case Gauss200Parser::SIMILAR_GS:
      case Gauss200Parser::VERBOSE_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::BETWEEN_GS:
      case Gauss200Parser::BIGINT_GS:
      case Gauss200Parser::BINARY_DOUBLE_GS:
      case Gauss200Parser::BINARY_INTEGER_GS:
      case Gauss200Parser::BIT_GS:
      case Gauss200Parser::BOOLEAN_GS:
      case Gauss200Parser::CHARACTER_GS:
      case Gauss200Parser::CHAR_GS:
      case Gauss200Parser::COALESCE_GS:
      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::DECIMAL_GS:
      case Gauss200Parser::DECODE_GS:
      case Gauss200Parser::DEC_GS:
      case Gauss200Parser::EXISTS_GS:
      case Gauss200Parser::EXTRACT_GS:
      case Gauss200Parser::FLOAT_GS:
      case Gauss200Parser::GREATEST_GS:
      case Gauss200Parser::INOUT_GS:
      case Gauss200Parser::INTEGER_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::INT_GS:
      case Gauss200Parser::LEAST_GS:
      case Gauss200Parser::NATIONAL_GS:
      case Gauss200Parser::NCHAR_GS:
      case Gauss200Parser::NONE_GS:
      case Gauss200Parser::NULLIF_GS:
      case Gauss200Parser::NUMBER_GS:
      case Gauss200Parser::NUMERIC_GS:
      case Gauss200Parser::NVARCHAR2_GS:
      case Gauss200Parser::NVL_GS:
      case Gauss200Parser::OUT_GS:
      case Gauss200Parser::OVERLAY_GS:
      case Gauss200Parser::POSITION_GS:
      case Gauss200Parser::PRECISION_GS:
      case Gauss200Parser::REAL_GS:
      case Gauss200Parser::ROW_GS:
      case Gauss200Parser::SETOF_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::SMALLINT_GS:
      case Gauss200Parser::SUBSTRING_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::TINYINT_GS:
      case Gauss200Parser::TREAT_GS:
      case Gauss200Parser::TRIM_GS:
      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::VARCHAR2_GS:
      case Gauss200Parser::VARCHAR_GS:
      case Gauss200Parser::XMLATTRIBUTES_GS:
      case Gauss200Parser::XMLCONCAT_GS:
      case Gauss200Parser::XMLELEMENT_GS:
      case Gauss200Parser::XMLEXISTS_GS:
      case Gauss200Parser::XMLFOREST_GS:
      case Gauss200Parser::XMLPARSE_GS:
      case Gauss200Parser::XMLPI_GS:
      case Gauss200Parser::XMLROOT_GS:
      case Gauss200Parser::XMLSERIALIZE_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::RELTIME_GS:
      case Gauss200Parser::POINT_GS:
      case Gauss200Parser::LSEG_GS:
      case Gauss200Parser::BOX_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::POLYGON_GS:
      case Gauss200Parser::CIRCLE_GS:
      case Gauss200Parser::CIDR_GS:
      case Gauss200Parser::INET_GS:
      case Gauss200Parser::MACADDR_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::LEFT_PAREN:
      case Gauss200Parser::PLUS_SIGN:
      case Gauss200Parser::MINUS_SIGN:
      case Gauss200Parser::AT_SIGN:
      case Gauss200Parser::QUESTION_MARK:
      case Gauss200Parser::TILDE_OPERATOR_PART:
      case Gauss200Parser::EXCLAMATION_OPERATOR_PART:
      case Gauss200Parser::POUND_SIGN:
      case Gauss200Parser::BAR:
      case Gauss200Parser::CHAR_STRING:
      case Gauss200Parser::REGULAR_ID:
      case Gauss200Parser::SCONST:
      case Gauss200Parser::ICONST:
      case Gauss200Parser::FCONST:
      case Gauss200Parser::BCONST:
      case Gauss200Parser::PARAM: {
        setState(4447);
        output_expr_alias();
        setState(4452);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::COMMA) {
          setState(4448);
          match(Gauss200Parser::COMMA);
          setState(4449);
          output_expr_alias();
          setState(4454);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Output_expr_aliasContext ------------------------------------------------------------------

Gauss200Parser::Output_expr_aliasContext::Output_expr_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Output_expr_aliasContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::As_aliasContext* Gauss200Parser::Output_expr_aliasContext::as_alias() {
  return getRuleContext<Gauss200Parser::As_aliasContext>(0);
}


size_t Gauss200Parser::Output_expr_aliasContext::getRuleIndex() const {
  return Gauss200Parser::RuleOutput_expr_alias;
}

void Gauss200Parser::Output_expr_aliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOutput_expr_alias(this);
}

void Gauss200Parser::Output_expr_aliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOutput_expr_alias(this);
}


antlrcpp::Any Gauss200Parser::Output_expr_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOutput_expr_alias(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Output_expr_aliasContext* Gauss200Parser::output_expr_alias() {
  Output_expr_aliasContext *_localctx = _tracker.createInstance<Output_expr_aliasContext>(_ctx, getState());
  enterRule(_localctx, 680, Gauss200Parser::RuleOutput_expr_alias);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4457);
    expression();
    setState(4459);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx)) {
    case 1: {
      setState(4458);
      as_alias();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_database_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_database_stmtContext::Drop_database_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_database_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_database_stmtContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

Gauss200Parser::Database_nameContext* Gauss200Parser::Drop_database_stmtContext::database_name() {
  return getRuleContext<Gauss200Parser::Database_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_database_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Drop_database_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_database_stmt;
}

void Gauss200Parser::Drop_database_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_database_stmt(this);
}

void Gauss200Parser::Drop_database_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_database_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_database_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_database_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_database_stmtContext* Gauss200Parser::drop_database_stmt() {
  Drop_database_stmtContext *_localctx = _tracker.createInstance<Drop_database_stmtContext>(_ctx, getState());
  enterRule(_localctx, 682, Gauss200Parser::RuleDrop_database_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4461);
    match(Gauss200Parser::DROP_GS);
    setState(4462);
    match(Gauss200Parser::DATABASE_GS);
    setState(4464);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 499, _ctx)) {
    case 1: {
      setState(4463);
      if_exists_or_not();
      break;
    }

    }
    setState(4466);
    database_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_group_mapping_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_group_mapping_stmtContext::Drop_group_mapping_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_group_mapping_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_group_mapping_stmtContext::APP_GS() {
  return getToken(Gauss200Parser::APP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_group_mapping_stmtContext::WORKLOAD_GS() {
  return getToken(Gauss200Parser::WORKLOAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_group_mapping_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_group_mapping_stmtContext::MAPPING_GS() {
  return getToken(Gauss200Parser::MAPPING_GS, 0);
}

Gauss200Parser::App_nameContext* Gauss200Parser::Drop_group_mapping_stmtContext::app_name() {
  return getRuleContext<Gauss200Parser::App_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_group_mapping_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Drop_group_mapping_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_group_mapping_stmt;
}

void Gauss200Parser::Drop_group_mapping_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_group_mapping_stmt(this);
}

void Gauss200Parser::Drop_group_mapping_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_group_mapping_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_group_mapping_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_group_mapping_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_group_mapping_stmtContext* Gauss200Parser::drop_group_mapping_stmt() {
  Drop_group_mapping_stmtContext *_localctx = _tracker.createInstance<Drop_group_mapping_stmtContext>(_ctx, getState());
  enterRule(_localctx, 684, Gauss200Parser::RuleDrop_group_mapping_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4468);
    match(Gauss200Parser::DROP_GS);
    setState(4469);
    match(Gauss200Parser::APP_GS);
    setState(4470);
    match(Gauss200Parser::WORKLOAD_GS);
    setState(4471);
    match(Gauss200Parser::GROUP_GS);
    setState(4472);
    match(Gauss200Parser::MAPPING_GS);
    setState(4474);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 500, _ctx)) {
    case 1: {
      setState(4473);
      if_exists_or_not();
      break;
    }

    }
    setState(4476);
    app_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_data_source_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_data_source_stmtContext::Drop_data_source_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_data_source_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_data_source_stmtContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_data_source_stmtContext::SOURCE_GS() {
  return getToken(Gauss200Parser::SOURCE_GS, 0);
}

Gauss200Parser::Src_nameContext* Gauss200Parser::Drop_data_source_stmtContext::src_name() {
  return getRuleContext<Gauss200Parser::Src_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_data_source_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_data_source_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_data_source_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_data_source_stmt;
}

void Gauss200Parser::Drop_data_source_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_data_source_stmt(this);
}

void Gauss200Parser::Drop_data_source_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_data_source_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_data_source_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_data_source_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_data_source_stmtContext* Gauss200Parser::drop_data_source_stmt() {
  Drop_data_source_stmtContext *_localctx = _tracker.createInstance<Drop_data_source_stmtContext>(_ctx, getState());
  enterRule(_localctx, 686, Gauss200Parser::RuleDrop_data_source_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4478);
    match(Gauss200Parser::DROP_GS);
    setState(4479);
    match(Gauss200Parser::DATA_GS);
    setState(4480);
    match(Gauss200Parser::SOURCE_GS);
    setState(4482);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 501, _ctx)) {
    case 1: {
      setState(4481);
      if_exists_or_not();
      break;
    }

    }
    setState(4484);
    src_name();
    setState(4486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4485);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_directory_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_directory_stmtContext::Drop_directory_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_directory_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_directory_stmtContext::DIRECTORY_GS() {
  return getToken(Gauss200Parser::DIRECTORY_GS, 0);
}

Gauss200Parser::Directory_nameContext* Gauss200Parser::Drop_directory_stmtContext::directory_name() {
  return getRuleContext<Gauss200Parser::Directory_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_directory_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Drop_directory_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_directory_stmt;
}

void Gauss200Parser::Drop_directory_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_directory_stmt(this);
}

void Gauss200Parser::Drop_directory_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_directory_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_directory_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_directory_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_directory_stmtContext* Gauss200Parser::drop_directory_stmt() {
  Drop_directory_stmtContext *_localctx = _tracker.createInstance<Drop_directory_stmtContext>(_ctx, getState());
  enterRule(_localctx, 688, Gauss200Parser::RuleDrop_directory_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4488);
    match(Gauss200Parser::DROP_GS);
    setState(4489);
    match(Gauss200Parser::DIRECTORY_GS);
    setState(4491);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 503, _ctx)) {
    case 1: {
      setState(4490);
      if_exists_or_not();
      break;
    }

    }
    setState(4493);
    directory_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_foreign_table_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_foreign_table_stmtContext::Drop_foreign_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_foreign_table_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_foreign_table_stmtContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_foreign_table_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

std::vector<Gauss200Parser::Table_nameContext *> Gauss200Parser::Drop_foreign_table_stmtContext::table_name() {
  return getRuleContexts<Gauss200Parser::Table_nameContext>();
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Drop_foreign_table_stmtContext::table_name(size_t i) {
  return getRuleContext<Gauss200Parser::Table_nameContext>(i);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_foreign_table_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_foreign_table_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_foreign_table_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_foreign_table_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_foreign_table_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_foreign_table_stmt;
}

void Gauss200Parser::Drop_foreign_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_foreign_table_stmt(this);
}

void Gauss200Parser::Drop_foreign_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_foreign_table_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_foreign_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_foreign_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_foreign_table_stmtContext* Gauss200Parser::drop_foreign_table_stmt() {
  Drop_foreign_table_stmtContext *_localctx = _tracker.createInstance<Drop_foreign_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 690, Gauss200Parser::RuleDrop_foreign_table_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4495);
    match(Gauss200Parser::DROP_GS);
    setState(4496);
    match(Gauss200Parser::FOREIGN_GS);
    setState(4497);
    match(Gauss200Parser::TABLE_GS);
    setState(4499);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 504, _ctx)) {
    case 1: {
      setState(4498);
      if_exists_or_not();
      break;
    }

    }
    setState(4501);
    table_name();
    setState(4506);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4502);
      match(Gauss200Parser::COMMA);
      setState(4503);
      table_name();
      setState(4508);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4509);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_function_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_function_stmtContext::Drop_function_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_function_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_function_stmtContext::FUNCTION_GS() {
  return getToken(Gauss200Parser::FUNCTION_GS, 0);
}

Gauss200Parser::Func_nameContext* Gauss200Parser::Drop_function_stmtContext::func_name() {
  return getRuleContext<Gauss200Parser::Func_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_function_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Func_argsContext* Gauss200Parser::Drop_function_stmtContext::func_args() {
  return getRuleContext<Gauss200Parser::Func_argsContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_function_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_function_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_function_stmt;
}

void Gauss200Parser::Drop_function_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_function_stmt(this);
}

void Gauss200Parser::Drop_function_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_function_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_function_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_function_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_function_stmtContext* Gauss200Parser::drop_function_stmt() {
  Drop_function_stmtContext *_localctx = _tracker.createInstance<Drop_function_stmtContext>(_ctx, getState());
  enterRule(_localctx, 692, Gauss200Parser::RuleDrop_function_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4512);
    match(Gauss200Parser::DROP_GS);
    setState(4513);
    match(Gauss200Parser::FUNCTION_GS);
    setState(4515);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 507, _ctx)) {
    case 1: {
      setState(4514);
      if_exists_or_not();
      break;
    }

    }
    setState(4517);
    func_name();
    setState(4522);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(4518);
      func_args();
      setState(4520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
        setState(4519);
        cascade_restrict();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_group_stmtContext::Drop_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_group_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

std::vector<Gauss200Parser::Group_nameContext *> Gauss200Parser::Drop_group_stmtContext::group_name() {
  return getRuleContexts<Gauss200Parser::Group_nameContext>();
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Drop_group_stmtContext::group_name(size_t i) {
  return getRuleContext<Gauss200Parser::Group_nameContext>(i);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_group_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_group_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_group_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Drop_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_group_stmt;
}

void Gauss200Parser::Drop_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_group_stmt(this);
}

void Gauss200Parser::Drop_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_group_stmtContext* Gauss200Parser::drop_group_stmt() {
  Drop_group_stmtContext *_localctx = _tracker.createInstance<Drop_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 694, Gauss200Parser::RuleDrop_group_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4524);
    match(Gauss200Parser::DROP_GS);
    setState(4525);
    match(Gauss200Parser::GROUP_GS);
    setState(4527);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 510, _ctx)) {
    case 1: {
      setState(4526);
      if_exists_or_not();
      break;
    }

    }
    setState(4529);
    group_name();
    setState(4534);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4530);
      match(Gauss200Parser::COMMA);
      setState(4531);
      group_name();
      setState(4536);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_index_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_index_stmtContext::Drop_index_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_index_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_index_stmtContext::INDEX_GS() {
  return getToken(Gauss200Parser::INDEX_GS, 0);
}

std::vector<Gauss200Parser::Index_nameContext *> Gauss200Parser::Drop_index_stmtContext::index_name() {
  return getRuleContexts<Gauss200Parser::Index_nameContext>();
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Drop_index_stmtContext::index_name(size_t i) {
  return getRuleContext<Gauss200Parser::Index_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Drop_index_stmtContext::CONCURRENTLY_GS() {
  return getToken(Gauss200Parser::CONCURRENTLY_GS, 0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_index_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_index_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_index_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_index_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_index_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_index_stmt;
}

void Gauss200Parser::Drop_index_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_index_stmt(this);
}

void Gauss200Parser::Drop_index_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_index_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_index_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_index_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_index_stmtContext* Gauss200Parser::drop_index_stmt() {
  Drop_index_stmtContext *_localctx = _tracker.createInstance<Drop_index_stmtContext>(_ctx, getState());
  enterRule(_localctx, 696, Gauss200Parser::RuleDrop_index_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4537);
    match(Gauss200Parser::DROP_GS);
    setState(4538);
    match(Gauss200Parser::INDEX_GS);
    setState(4540);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONCURRENTLY_GS) {
      setState(4539);
      match(Gauss200Parser::CONCURRENTLY_GS);
    }
    setState(4543);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 513, _ctx)) {
    case 1: {
      setState(4542);
      if_exists_or_not();
      break;
    }

    }
    setState(4545);
    index_name();
    setState(4550);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4546);
      match(Gauss200Parser::COMMA);
      setState(4547);
      index_name();
      setState(4552);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4553);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_node_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_node_stmtContext::Drop_node_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_node_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_node_stmtContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

Gauss200Parser::NodenameContext* Gauss200Parser::Drop_node_stmtContext::nodename() {
  return getRuleContext<Gauss200Parser::NodenameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_node_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

tree::TerminalNode* Gauss200Parser::Drop_node_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Drop_node_stmtContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}


size_t Gauss200Parser::Drop_node_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_node_stmt;
}

void Gauss200Parser::Drop_node_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_node_stmt(this);
}

void Gauss200Parser::Drop_node_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_node_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_node_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_node_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_node_stmtContext* Gauss200Parser::drop_node_stmt() {
  Drop_node_stmtContext *_localctx = _tracker.createInstance<Drop_node_stmtContext>(_ctx, getState());
  enterRule(_localctx, 698, Gauss200Parser::RuleDrop_node_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4556);
    match(Gauss200Parser::DROP_GS);
    setState(4557);
    match(Gauss200Parser::NODE_GS);
    setState(4559);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 516, _ctx)) {
    case 1: {
      setState(4558);
      if_exists_or_not();
      break;
    }

    }
    setState(4561);
    nodename();
    setState(4564);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(4562);
      match(Gauss200Parser::WITH_GS);
      setState(4563);
      paren_node_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_node_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_node_group_stmtContext::Drop_node_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_node_group_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_node_group_stmtContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_node_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

std::vector<Gauss200Parser::Group_nameContext *> Gauss200Parser::Drop_node_group_stmtContext::group_name() {
  return getRuleContexts<Gauss200Parser::Group_nameContext>();
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Drop_node_group_stmtContext::group_name(size_t i) {
  return getRuleContext<Gauss200Parser::Group_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Drop_node_group_stmtContext::DISTRIBUTE_GS() {
  return getToken(Gauss200Parser::DISTRIBUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_node_group_stmtContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}


size_t Gauss200Parser::Drop_node_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_node_group_stmt;
}

void Gauss200Parser::Drop_node_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_node_group_stmt(this);
}

void Gauss200Parser::Drop_node_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_node_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_node_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_node_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_node_group_stmtContext* Gauss200Parser::drop_node_group_stmt() {
  Drop_node_group_stmtContext *_localctx = _tracker.createInstance<Drop_node_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 700, Gauss200Parser::RuleDrop_node_group_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4566);
    match(Gauss200Parser::DROP_GS);
    setState(4567);
    match(Gauss200Parser::NODE_GS);
    setState(4568);
    match(Gauss200Parser::GROUP_GS);
    setState(4569);
    group_name();
    setState(4573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::DISTRIBUTE_GS) {
      setState(4570);
      match(Gauss200Parser::DISTRIBUTE_GS);
      setState(4571);
      match(Gauss200Parser::FROM_GS);
      setState(4572);
      group_name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_owned_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_owned_stmtContext::Drop_owned_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_owned_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_owned_stmtContext::OWNED_GS() {
  return getToken(Gauss200Parser::OWNED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_owned_stmtContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

std::vector<Gauss200Parser::Role_nameContext *> Gauss200Parser::Drop_owned_stmtContext::role_name() {
  return getRuleContexts<Gauss200Parser::Role_nameContext>();
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Drop_owned_stmtContext::role_name(size_t i) {
  return getRuleContext<Gauss200Parser::Role_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_owned_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_owned_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_owned_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_owned_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_owned_stmt;
}

void Gauss200Parser::Drop_owned_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_owned_stmt(this);
}

void Gauss200Parser::Drop_owned_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_owned_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_owned_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_owned_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_owned_stmtContext* Gauss200Parser::drop_owned_stmt() {
  Drop_owned_stmtContext *_localctx = _tracker.createInstance<Drop_owned_stmtContext>(_ctx, getState());
  enterRule(_localctx, 702, Gauss200Parser::RuleDrop_owned_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4575);
    match(Gauss200Parser::DROP_GS);
    setState(4576);
    match(Gauss200Parser::OWNED_GS);
    setState(4577);
    match(Gauss200Parser::BY_GS);
    setState(4578);
    role_name();
    setState(4583);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4579);
      match(Gauss200Parser::COMMA);
      setState(4580);
      role_name();
      setState(4585);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4586);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_row_level_security_policy_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_row_level_security_policy_stmtContext::Drop_row_level_security_policy_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_row_level_security_policy_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_row_level_security_policy_stmtContext::POLICY_GS() {
  return getToken(Gauss200Parser::POLICY_GS, 0);
}

Gauss200Parser::Policy_nameContext* Gauss200Parser::Drop_row_level_security_policy_stmtContext::policy_name() {
  return getRuleContext<Gauss200Parser::Policy_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Drop_row_level_security_policy_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Drop_row_level_security_policy_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Row_level_securityContext* Gauss200Parser::Drop_row_level_security_policy_stmtContext::row_level_security() {
  return getRuleContext<Gauss200Parser::Row_level_securityContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_row_level_security_policy_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_row_level_security_policy_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_row_level_security_policy_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_row_level_security_policy_stmt;
}

void Gauss200Parser::Drop_row_level_security_policy_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_row_level_security_policy_stmt(this);
}

void Gauss200Parser::Drop_row_level_security_policy_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_row_level_security_policy_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_row_level_security_policy_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_row_level_security_policy_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_row_level_security_policy_stmtContext* Gauss200Parser::drop_row_level_security_policy_stmt() {
  Drop_row_level_security_policy_stmtContext *_localctx = _tracker.createInstance<Drop_row_level_security_policy_stmtContext>(_ctx, getState());
  enterRule(_localctx, 704, Gauss200Parser::RuleDrop_row_level_security_policy_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4589);
    match(Gauss200Parser::DROP_GS);
    setState(4591);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ROW_GS) {
      setState(4590);
      row_level_security();
    }
    setState(4593);
    match(Gauss200Parser::POLICY_GS);
    setState(4595);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 522, _ctx)) {
    case 1: {
      setState(4594);
      if_exists_or_not();
      break;
    }

    }
    setState(4597);
    policy_name();
    setState(4598);
    match(Gauss200Parser::ON_GS);
    setState(4599);
    table_name();
    setState(4601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4600);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_procedure_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_procedure_stmtContext::Drop_procedure_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_procedure_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_procedure_stmtContext::PROCEDURE_GS() {
  return getToken(Gauss200Parser::PROCEDURE_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Drop_procedure_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_procedure_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Drop_procedure_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_procedure_stmt;
}

void Gauss200Parser::Drop_procedure_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_procedure_stmt(this);
}

void Gauss200Parser::Drop_procedure_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_procedure_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_procedure_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_procedure_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_procedure_stmtContext* Gauss200Parser::drop_procedure_stmt() {
  Drop_procedure_stmtContext *_localctx = _tracker.createInstance<Drop_procedure_stmtContext>(_ctx, getState());
  enterRule(_localctx, 706, Gauss200Parser::RuleDrop_procedure_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4603);
    match(Gauss200Parser::DROP_GS);
    setState(4604);
    match(Gauss200Parser::PROCEDURE_GS);
    setState(4606);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 524, _ctx)) {
    case 1: {
      setState(4605);
      if_exists_or_not();
      break;
    }

    }
    setState(4608);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_resource_pool_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_resource_pool_stmtContext::Drop_resource_pool_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_resource_pool_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_resource_pool_stmtContext::RESOURCE_GS() {
  return getToken(Gauss200Parser::RESOURCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_resource_pool_stmtContext::POOL_GS() {
  return getToken(Gauss200Parser::POOL_GS, 0);
}

Gauss200Parser::Pool_nameContext* Gauss200Parser::Drop_resource_pool_stmtContext::pool_name() {
  return getRuleContext<Gauss200Parser::Pool_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_resource_pool_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Drop_resource_pool_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_resource_pool_stmt;
}

void Gauss200Parser::Drop_resource_pool_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_resource_pool_stmt(this);
}

void Gauss200Parser::Drop_resource_pool_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_resource_pool_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_resource_pool_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_resource_pool_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_resource_pool_stmtContext* Gauss200Parser::drop_resource_pool_stmt() {
  Drop_resource_pool_stmtContext *_localctx = _tracker.createInstance<Drop_resource_pool_stmtContext>(_ctx, getState());
  enterRule(_localctx, 708, Gauss200Parser::RuleDrop_resource_pool_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4610);
    match(Gauss200Parser::DROP_GS);
    setState(4611);
    match(Gauss200Parser::RESOURCE_GS);
    setState(4612);
    match(Gauss200Parser::POOL_GS);
    setState(4614);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 525, _ctx)) {
    case 1: {
      setState(4613);
      if_exists_or_not();
      break;
    }

    }
    setState(4616);
    pool_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_role_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_role_stmtContext::Drop_role_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_role_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_role_stmtContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

std::vector<Gauss200Parser::Role_nameContext *> Gauss200Parser::Drop_role_stmtContext::role_name() {
  return getRuleContexts<Gauss200Parser::Role_nameContext>();
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Drop_role_stmtContext::role_name(size_t i) {
  return getRuleContext<Gauss200Parser::Role_nameContext>(i);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_role_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_role_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_role_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Drop_role_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_role_stmt;
}

void Gauss200Parser::Drop_role_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_role_stmt(this);
}

void Gauss200Parser::Drop_role_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_role_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_role_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_role_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_role_stmtContext* Gauss200Parser::drop_role_stmt() {
  Drop_role_stmtContext *_localctx = _tracker.createInstance<Drop_role_stmtContext>(_ctx, getState());
  enterRule(_localctx, 710, Gauss200Parser::RuleDrop_role_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4618);
    match(Gauss200Parser::DROP_GS);
    setState(4619);
    match(Gauss200Parser::ROLE_GS);
    setState(4621);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 526, _ctx)) {
    case 1: {
      setState(4620);
      if_exists_or_not();
      break;
    }

    }
    setState(4623);
    role_name();
    setState(4628);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4624);
      match(Gauss200Parser::COMMA);
      setState(4625);
      role_name();
      setState(4630);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_schema_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_schema_stmtContext::Drop_schema_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_schema_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_schema_stmtContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

std::vector<Gauss200Parser::Schema_nameContext *> Gauss200Parser::Drop_schema_stmtContext::schema_name() {
  return getRuleContexts<Gauss200Parser::Schema_nameContext>();
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Drop_schema_stmtContext::schema_name(size_t i) {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(i);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_schema_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_schema_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_schema_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_schema_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_schema_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_schema_stmt;
}

void Gauss200Parser::Drop_schema_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_schema_stmt(this);
}

void Gauss200Parser::Drop_schema_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_schema_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_schema_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_schema_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_schema_stmtContext* Gauss200Parser::drop_schema_stmt() {
  Drop_schema_stmtContext *_localctx = _tracker.createInstance<Drop_schema_stmtContext>(_ctx, getState());
  enterRule(_localctx, 712, Gauss200Parser::RuleDrop_schema_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4631);
    match(Gauss200Parser::DROP_GS);
    setState(4632);
    match(Gauss200Parser::SCHEMA_GS);
    setState(4634);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 528, _ctx)) {
    case 1: {
      setState(4633);
      if_exists_or_not();
      break;
    }

    }
    setState(4636);
    schema_name();
    setState(4641);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4637);
      match(Gauss200Parser::COMMA);
      setState(4638);
      schema_name();
      setState(4643);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4644);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_sequence_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_sequence_stmtContext::Drop_sequence_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_sequence_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_sequence_stmtContext::SEQUENCE_GS() {
  return getToken(Gauss200Parser::SEQUENCE_GS, 0);
}

Gauss200Parser::Drop_name_listContext* Gauss200Parser::Drop_sequence_stmtContext::drop_name_list() {
  return getRuleContext<Gauss200Parser::Drop_name_listContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_sequence_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_sequence_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_sequence_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_sequence_stmt;
}

void Gauss200Parser::Drop_sequence_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_sequence_stmt(this);
}

void Gauss200Parser::Drop_sequence_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_sequence_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_sequence_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_sequence_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_sequence_stmtContext* Gauss200Parser::drop_sequence_stmt() {
  Drop_sequence_stmtContext *_localctx = _tracker.createInstance<Drop_sequence_stmtContext>(_ctx, getState());
  enterRule(_localctx, 714, Gauss200Parser::RuleDrop_sequence_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4647);
    match(Gauss200Parser::DROP_GS);
    setState(4648);
    match(Gauss200Parser::SEQUENCE_GS);
    setState(4650);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 531, _ctx)) {
    case 1: {
      setState(4649);
      if_exists_or_not();
      break;
    }

    }
    setState(4652);
    drop_name_list();
    setState(4654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4653);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_name_listContext ------------------------------------------------------------------

Gauss200Parser::Drop_name_listContext::Drop_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Drop_nameContext *> Gauss200Parser::Drop_name_listContext::drop_name() {
  return getRuleContexts<Gauss200Parser::Drop_nameContext>();
}

Gauss200Parser::Drop_nameContext* Gauss200Parser::Drop_name_listContext::drop_name(size_t i) {
  return getRuleContext<Gauss200Parser::Drop_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_name_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_name_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Drop_name_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_name_list;
}

void Gauss200Parser::Drop_name_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_name_list(this);
}

void Gauss200Parser::Drop_name_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_name_list(this);
}


antlrcpp::Any Gauss200Parser::Drop_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_name_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_name_listContext* Gauss200Parser::drop_name_list() {
  Drop_name_listContext *_localctx = _tracker.createInstance<Drop_name_listContext>(_ctx, getState());
  enterRule(_localctx, 716, Gauss200Parser::RuleDrop_name_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4656);
    drop_name();
    setState(4661);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4657);
      match(Gauss200Parser::COMMA);
      setState(4658);
      drop_name();
      setState(4663);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_nameContext ------------------------------------------------------------------

Gauss200Parser::Drop_nameContext::Drop_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Drop_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Drop_nameContext::schema_name() {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Drop_nameContext::PERIOD() {
  return getToken(Gauss200Parser::PERIOD, 0);
}


size_t Gauss200Parser::Drop_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_name;
}

void Gauss200Parser::Drop_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_name(this);
}

void Gauss200Parser::Drop_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_name(this);
}


antlrcpp::Any Gauss200Parser::Drop_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_nameContext* Gauss200Parser::drop_name() {
  Drop_nameContext *_localctx = _tracker.createInstance<Drop_nameContext>(_ctx, getState());
  enterRule(_localctx, 718, Gauss200Parser::RuleDrop_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4667);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 534, _ctx)) {
    case 1: {
      setState(4664);
      schema_name();
      setState(4665);
      match(Gauss200Parser::PERIOD);
      break;
    }

    }
    setState(4669);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_server_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_server_stmtContext::Drop_server_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_server_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_server_stmtContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

Gauss200Parser::Server_nameContext* Gauss200Parser::Drop_server_stmtContext::server_name() {
  return getRuleContext<Gauss200Parser::Server_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_server_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_server_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_server_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_server_stmt;
}

void Gauss200Parser::Drop_server_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_server_stmt(this);
}

void Gauss200Parser::Drop_server_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_server_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_server_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_server_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_server_stmtContext* Gauss200Parser::drop_server_stmt() {
  Drop_server_stmtContext *_localctx = _tracker.createInstance<Drop_server_stmtContext>(_ctx, getState());
  enterRule(_localctx, 720, Gauss200Parser::RuleDrop_server_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4671);
    match(Gauss200Parser::DROP_GS);
    setState(4672);
    match(Gauss200Parser::SERVER_GS);
    setState(4674);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 535, _ctx)) {
    case 1: {
      setState(4673);
      if_exists_or_not();
      break;
    }

    }
    setState(4676);
    server_name();
    setState(4678);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4677);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_table_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_table_stmtContext::Drop_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_table_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_table_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Drop_name_listContext* Gauss200Parser::Drop_table_stmtContext::drop_name_list() {
  return getRuleContext<Gauss200Parser::Drop_name_listContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_table_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_table_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_table_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_table_stmt;
}

void Gauss200Parser::Drop_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_table_stmt(this);
}

void Gauss200Parser::Drop_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_table_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_table_stmtContext* Gauss200Parser::drop_table_stmt() {
  Drop_table_stmtContext *_localctx = _tracker.createInstance<Drop_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 722, Gauss200Parser::RuleDrop_table_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4680);
    match(Gauss200Parser::DROP_GS);
    setState(4681);
    match(Gauss200Parser::TABLE_GS);
    setState(4683);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 537, _ctx)) {
    case 1: {
      setState(4682);
      if_exists_or_not();
      break;
    }

    }
    setState(4685);
    drop_name_list();
    setState(4687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4686);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_tablespace_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_tablespace_stmtContext::Drop_tablespace_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_tablespace_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_tablespace_stmtContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}

Gauss200Parser::Tablespace_nameContext* Gauss200Parser::Drop_tablespace_stmtContext::tablespace_name() {
  return getRuleContext<Gauss200Parser::Tablespace_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_tablespace_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Drop_tablespace_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_tablespace_stmt;
}

void Gauss200Parser::Drop_tablespace_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_tablespace_stmt(this);
}

void Gauss200Parser::Drop_tablespace_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_tablespace_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_tablespace_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_tablespace_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_tablespace_stmtContext* Gauss200Parser::drop_tablespace_stmt() {
  Drop_tablespace_stmtContext *_localctx = _tracker.createInstance<Drop_tablespace_stmtContext>(_ctx, getState());
  enterRule(_localctx, 724, Gauss200Parser::RuleDrop_tablespace_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4689);
    match(Gauss200Parser::DROP_GS);
    setState(4690);
    match(Gauss200Parser::TABLESPACE_GS);
    setState(4692);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 539, _ctx)) {
    case 1: {
      setState(4691);
      if_exists_or_not();
      break;
    }

    }
    setState(4694);
    tablespace_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_txt_search_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_txt_search_stmtContext::Drop_txt_search_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_txt_search_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_txt_search_stmtContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_txt_search_stmtContext::SEARCH_GS() {
  return getToken(Gauss200Parser::SEARCH_GS, 0);
}

Gauss200Parser::Configuration_nameContext* Gauss200Parser::Drop_txt_search_stmtContext::configuration_name() {
  return getRuleContext<Gauss200Parser::Configuration_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Drop_txt_search_stmtContext::CONFIGURATION_GS() {
  return getToken(Gauss200Parser::CONFIGURATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_txt_search_stmtContext::DICTIONARY_GS() {
  return getToken(Gauss200Parser::DICTIONARY_GS, 0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_txt_search_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_txt_search_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_txt_search_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_txt_search_stmt;
}

void Gauss200Parser::Drop_txt_search_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_txt_search_stmt(this);
}

void Gauss200Parser::Drop_txt_search_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_txt_search_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_txt_search_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_txt_search_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_txt_search_stmtContext* Gauss200Parser::drop_txt_search_stmt() {
  Drop_txt_search_stmtContext *_localctx = _tracker.createInstance<Drop_txt_search_stmtContext>(_ctx, getState());
  enterRule(_localctx, 726, Gauss200Parser::RuleDrop_txt_search_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4696);
    match(Gauss200Parser::DROP_GS);
    setState(4697);
    match(Gauss200Parser::TEXT_GS);
    setState(4698);
    match(Gauss200Parser::SEARCH_GS);
    setState(4699);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::CONFIGURATION_GS

    || _la == Gauss200Parser::DICTIONARY_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4701);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 540, _ctx)) {
    case 1: {
      setState(4700);
      if_exists_or_not();
      break;
    }

    }
    setState(4703);
    configuration_name();
    setState(4705);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4704);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_trigger_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_trigger_stmtContext::Drop_trigger_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_trigger_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_trigger_stmtContext::TRIGGER_GS() {
  return getToken(Gauss200Parser::TRIGGER_GS, 0);
}

Gauss200Parser::Trigger_nameContext* Gauss200Parser::Drop_trigger_stmtContext::trigger_name() {
  return getRuleContext<Gauss200Parser::Trigger_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Drop_trigger_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Drop_trigger_stmtContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_trigger_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_trigger_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_trigger_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_trigger_stmt;
}

void Gauss200Parser::Drop_trigger_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_trigger_stmt(this);
}

void Gauss200Parser::Drop_trigger_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_trigger_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_trigger_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_trigger_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_trigger_stmtContext* Gauss200Parser::drop_trigger_stmt() {
  Drop_trigger_stmtContext *_localctx = _tracker.createInstance<Drop_trigger_stmtContext>(_ctx, getState());
  enterRule(_localctx, 728, Gauss200Parser::RuleDrop_trigger_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4707);
    match(Gauss200Parser::DROP_GS);
    setState(4708);
    match(Gauss200Parser::TRIGGER_GS);
    setState(4710);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 542, _ctx)) {
    case 1: {
      setState(4709);
      if_exists_or_not();
      break;
    }

    }
    setState(4712);
    trigger_name();
    setState(4713);
    match(Gauss200Parser::ON_GS);
    setState(4714);
    table_name();
    setState(4716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4715);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_type_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_type_stmtContext::Drop_type_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_type_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_type_stmtContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

std::vector<Gauss200Parser::Type_nameContext *> Gauss200Parser::Drop_type_stmtContext::type_name() {
  return getRuleContexts<Gauss200Parser::Type_nameContext>();
}

Gauss200Parser::Type_nameContext* Gauss200Parser::Drop_type_stmtContext::type_name(size_t i) {
  return getRuleContext<Gauss200Parser::Type_nameContext>(i);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_type_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_type_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_type_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_type_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_type_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_type_stmt;
}

void Gauss200Parser::Drop_type_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_type_stmt(this);
}

void Gauss200Parser::Drop_type_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_type_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_type_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_type_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_type_stmtContext* Gauss200Parser::drop_type_stmt() {
  Drop_type_stmtContext *_localctx = _tracker.createInstance<Drop_type_stmtContext>(_ctx, getState());
  enterRule(_localctx, 730, Gauss200Parser::RuleDrop_type_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4718);
    match(Gauss200Parser::DROP_GS);
    setState(4719);
    match(Gauss200Parser::TYPE_GS);
    setState(4721);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 544, _ctx)) {
    case 1: {
      setState(4720);
      if_exists_or_not();
      break;
    }

    }
    setState(4723);
    type_name();
    setState(4728);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4724);
      match(Gauss200Parser::COMMA);
      setState(4725);
      type_name();
      setState(4730);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4731);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_user_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_user_stmtContext::Drop_user_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_user_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_user_stmtContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

std::vector<Gauss200Parser::User_nameContext *> Gauss200Parser::Drop_user_stmtContext::user_name() {
  return getRuleContexts<Gauss200Parser::User_nameContext>();
}

Gauss200Parser::User_nameContext* Gauss200Parser::Drop_user_stmtContext::user_name(size_t i) {
  return getRuleContext<Gauss200Parser::User_nameContext>(i);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_user_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_user_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_user_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_user_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_user_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_user_stmt;
}

void Gauss200Parser::Drop_user_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_user_stmt(this);
}

void Gauss200Parser::Drop_user_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_user_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_user_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_user_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_user_stmtContext* Gauss200Parser::drop_user_stmt() {
  Drop_user_stmtContext *_localctx = _tracker.createInstance<Drop_user_stmtContext>(_ctx, getState());
  enterRule(_localctx, 732, Gauss200Parser::RuleDrop_user_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4734);
    match(Gauss200Parser::DROP_GS);
    setState(4735);
    match(Gauss200Parser::USER_GS);
    setState(4737);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 547, _ctx)) {
    case 1: {
      setState(4736);
      if_exists_or_not();
      break;
    }

    }
    setState(4739);
    user_name();
    setState(4744);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4740);
      match(Gauss200Parser::COMMA);
      setState(4741);
      user_name();
      setState(4746);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4747);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_view_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_view_stmtContext::Drop_view_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_view_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_view_stmtContext::VIEW_GS() {
  return getToken(Gauss200Parser::VIEW_GS, 0);
}

std::vector<Gauss200Parser::View_nameContext *> Gauss200Parser::Drop_view_stmtContext::view_name() {
  return getRuleContexts<Gauss200Parser::View_nameContext>();
}

Gauss200Parser::View_nameContext* Gauss200Parser::Drop_view_stmtContext::view_name(size_t i) {
  return getRuleContext<Gauss200Parser::View_nameContext>(i);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_view_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Drop_view_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Drop_view_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Drop_view_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Drop_view_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_view_stmt;
}

void Gauss200Parser::Drop_view_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_view_stmt(this);
}

void Gauss200Parser::Drop_view_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_view_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_view_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_view_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_view_stmtContext* Gauss200Parser::drop_view_stmt() {
  Drop_view_stmtContext *_localctx = _tracker.createInstance<Drop_view_stmtContext>(_ctx, getState());
  enterRule(_localctx, 734, Gauss200Parser::RuleDrop_view_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4750);
    match(Gauss200Parser::DROP_GS);
    setState(4751);
    match(Gauss200Parser::VIEW_GS);
    setState(4753);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 550, _ctx)) {
    case 1: {
      setState(4752);
      if_exists_or_not();
      break;
    }

    }
    setState(4755);
    view_name();
    setState(4760);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(4756);
      match(Gauss200Parser::COMMA);
      setState(4757);
      view_name();
      setState(4762);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4764);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(4763);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_workload_group_stmtContext ------------------------------------------------------------------

Gauss200Parser::Drop_workload_group_stmtContext::Drop_workload_group_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Drop_workload_group_stmtContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_workload_group_stmtContext::WORKLOAD_GS() {
  return getToken(Gauss200Parser::WORKLOAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Drop_workload_group_stmtContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Drop_workload_group_stmtContext::group_name() {
  return getRuleContext<Gauss200Parser::Group_nameContext>(0);
}

Gauss200Parser::If_exists_or_notContext* Gauss200Parser::Drop_workload_group_stmtContext::if_exists_or_not() {
  return getRuleContext<Gauss200Parser::If_exists_or_notContext>(0);
}


size_t Gauss200Parser::Drop_workload_group_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDrop_workload_group_stmt;
}

void Gauss200Parser::Drop_workload_group_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_workload_group_stmt(this);
}

void Gauss200Parser::Drop_workload_group_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_workload_group_stmt(this);
}


antlrcpp::Any Gauss200Parser::Drop_workload_group_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDrop_workload_group_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Drop_workload_group_stmtContext* Gauss200Parser::drop_workload_group_stmt() {
  Drop_workload_group_stmtContext *_localctx = _tracker.createInstance<Drop_workload_group_stmtContext>(_ctx, getState());
  enterRule(_localctx, 736, Gauss200Parser::RuleDrop_workload_group_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4766);
    match(Gauss200Parser::DROP_GS);
    setState(4767);
    match(Gauss200Parser::WORKLOAD_GS);
    setState(4768);
    match(Gauss200Parser::GROUP_GS);
    setState(4770);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 553, _ctx)) {
    case 1: {
      setState(4769);
      if_exists_or_not();
      break;
    }

    }
    setState(4772);
    group_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Analyze_stmtContext ------------------------------------------------------------------

Gauss200Parser::Analyze_stmtContext::Analyze_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Analyze_keywordContext* Gauss200Parser::Analyze_stmtContext::analyze_keyword() {
  return getRuleContext<Gauss200Parser::Analyze_keywordContext>(0);
}

Gauss200Parser::Analyze_optionContext* Gauss200Parser::Analyze_stmtContext::analyze_option() {
  return getRuleContext<Gauss200Parser::Analyze_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Analyze_stmtContext::VERBOSE_GS() {
  return getToken(Gauss200Parser::VERBOSE_GS, 0);
}


size_t Gauss200Parser::Analyze_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleAnalyze_stmt;
}

void Gauss200Parser::Analyze_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalyze_stmt(this);
}

void Gauss200Parser::Analyze_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalyze_stmt(this);
}


antlrcpp::Any Gauss200Parser::Analyze_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAnalyze_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Analyze_stmtContext* Gauss200Parser::analyze_stmt() {
  Analyze_stmtContext *_localctx = _tracker.createInstance<Analyze_stmtContext>(_ctx, getState());
  enterRule(_localctx, 738, Gauss200Parser::RuleAnalyze_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4774);
    analyze_keyword();
    setState(4776);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::VERBOSE_GS) {
      setState(4775);
      match(Gauss200Parser::VERBOSE_GS);
    }
    setState(4778);
    analyze_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Analyze_keywordContext ------------------------------------------------------------------

Gauss200Parser::Analyze_keywordContext::Analyze_keywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Analyze_keywordContext::ANALYZE_GS() {
  return getToken(Gauss200Parser::ANALYZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Analyze_keywordContext::ANALYSE_GS() {
  return getToken(Gauss200Parser::ANALYSE_GS, 0);
}


size_t Gauss200Parser::Analyze_keywordContext::getRuleIndex() const {
  return Gauss200Parser::RuleAnalyze_keyword;
}

void Gauss200Parser::Analyze_keywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalyze_keyword(this);
}

void Gauss200Parser::Analyze_keywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalyze_keyword(this);
}


antlrcpp::Any Gauss200Parser::Analyze_keywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAnalyze_keyword(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Analyze_keywordContext* Gauss200Parser::analyze_keyword() {
  Analyze_keywordContext *_localctx = _tracker.createInstance<Analyze_keywordContext>(_ctx, getState());
  enterRule(_localctx, 740, Gauss200Parser::RuleAnalyze_keyword);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4780);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::ANALYSE_GS

    || _la == Gauss200Parser::ANALYZE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Analyze_optionContext ------------------------------------------------------------------

Gauss200Parser::Analyze_optionContext::Analyze_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Partition_name_optionContext* Gauss200Parser::Analyze_optionContext::partition_name_option() {
  return getRuleContext<Gauss200Parser::Partition_name_optionContext>(0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Analyze_optionContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Analyze_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Analyze_optionContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Analyze_optionContext::TABLES_GS() {
  return getToken(Gauss200Parser::TABLES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Analyze_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Analyze_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Analyze_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleAnalyze_option;
}

void Gauss200Parser::Analyze_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalyze_option(this);
}

void Gauss200Parser::Analyze_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalyze_option(this);
}


antlrcpp::Any Gauss200Parser::Analyze_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAnalyze_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Analyze_optionContext* Gauss200Parser::analyze_option() {
  Analyze_optionContext *_localctx = _tracker.createInstance<Analyze_optionContext>(_ctx, getState());
  enterRule(_localctx, 742, Gauss200Parser::RuleAnalyze_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4799);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 558, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4786);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 556, _ctx)) {
      case 1: {
        setState(4782);
        table_name();
        setState(4784);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::LEFT_PAREN) {
          setState(4783);
          paren_column_list();
        }
        break;
      }

      }
      setState(4788);
      partition_name_option();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4792);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 557, _ctx)) {
      case 1: {
        setState(4789);
        table_name();
        break;
      }

      case 2: {
        setState(4790);
        match(Gauss200Parser::FOREIGN_GS);
        setState(4791);
        match(Gauss200Parser::TABLES_GS);
        break;
      }

      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4794);
      table_name();
      setState(4795);
      match(Gauss200Parser::LEFT_PAREN);
      setState(4796);
      paren_column_list();
      setState(4797);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_name_optionContext ------------------------------------------------------------------

Gauss200Parser::Partition_name_optionContext::Partition_name_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Partition_name_optionContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Partition_name_optionContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Partition_name_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Partition_name_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Partition_name_optionContext::getRuleIndex() const {
  return Gauss200Parser::RulePartition_name_option;
}

void Gauss200Parser::Partition_name_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_name_option(this);
}

void Gauss200Parser::Partition_name_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_name_option(this);
}


antlrcpp::Any Gauss200Parser::Partition_name_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPartition_name_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Partition_name_optionContext* Gauss200Parser::partition_name_option() {
  Partition_name_optionContext *_localctx = _tracker.createInstance<Partition_name_optionContext>(_ctx, getState());
  enterRule(_localctx, 744, Gauss200Parser::RulePartition_name_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4808);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 559, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4801);
      match(Gauss200Parser::PARTITION_GS);
      setState(4802);
      partition_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4803);
      match(Gauss200Parser::PARTITION_GS);
      setState(4804);
      match(Gauss200Parser::LEFT_PAREN);
      setState(4805);
      partition_name();
      setState(4806);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_stmtContext ------------------------------------------------------------------

Gauss200Parser::Call_stmtContext::Call_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Call_stmtContext::CALL_GS() {
  return getToken(Gauss200Parser::CALL_GS, 0);
}

Gauss200Parser::Func_nameContext* Gauss200Parser::Call_stmtContext::func_name() {
  return getRuleContext<Gauss200Parser::Func_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Call_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Param_expr_listContext* Gauss200Parser::Call_stmtContext::param_expr_list() {
  return getRuleContext<Gauss200Parser::Param_expr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Call_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Call_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Call_stmtContext::PERIOD() {
  return getToken(Gauss200Parser::PERIOD, 0);
}


size_t Gauss200Parser::Call_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCall_stmt;
}

void Gauss200Parser::Call_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_stmt(this);
}

void Gauss200Parser::Call_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_stmt(this);
}


antlrcpp::Any Gauss200Parser::Call_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCall_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Call_stmtContext* Gauss200Parser::call_stmt() {
  Call_stmtContext *_localctx = _tracker.createInstance<Call_stmtContext>(_ctx, getState());
  enterRule(_localctx, 746, Gauss200Parser::RuleCall_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4810);
    match(Gauss200Parser::CALL_GS);
    setState(4814);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 560, _ctx)) {
    case 1: {
      setState(4811);
      identifier();
      setState(4812);
      match(Gauss200Parser::PERIOD);
      break;
    }

    }
    setState(4816);
    func_name();
    setState(4817);
    match(Gauss200Parser::LEFT_PAREN);
    setState(4818);
    param_expr_list();
    setState(4819);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_expr_listContext ------------------------------------------------------------------

Gauss200Parser::Param_expr_listContext::Param_expr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Param_exprContext *> Gauss200Parser::Param_expr_listContext::param_expr() {
  return getRuleContexts<Gauss200Parser::Param_exprContext>();
}

Gauss200Parser::Param_exprContext* Gauss200Parser::Param_expr_listContext::param_expr(size_t i) {
  return getRuleContext<Gauss200Parser::Param_exprContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Param_expr_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Param_expr_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Param_expr_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParam_expr_list;
}

void Gauss200Parser::Param_expr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_expr_list(this);
}

void Gauss200Parser::Param_expr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_expr_list(this);
}


antlrcpp::Any Gauss200Parser::Param_expr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParam_expr_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Param_expr_listContext* Gauss200Parser::param_expr_list() {
  Param_expr_listContext *_localctx = _tracker.createInstance<Param_expr_listContext>(_ctx, getState());
  enterRule(_localctx, 748, Gauss200Parser::RuleParam_expr_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4821);
    param_expr();
    setState(4826);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 561, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4822);
        match(Gauss200Parser::COMMA);
        setState(4823);
        param_expr(); 
      }
      setState(4828);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 561, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_exprContext ------------------------------------------------------------------

Gauss200Parser::Param_exprContext::Param_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Param_exprContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Param_nameContext* Gauss200Parser::Param_exprContext::param_name() {
  return getRuleContext<Gauss200Parser::Param_nameContext>(0);
}

Gauss200Parser::Param_opContext* Gauss200Parser::Param_exprContext::param_op() {
  return getRuleContext<Gauss200Parser::Param_opContext>(0);
}


size_t Gauss200Parser::Param_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleParam_expr;
}

void Gauss200Parser::Param_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_expr(this);
}

void Gauss200Parser::Param_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_expr(this);
}


antlrcpp::Any Gauss200Parser::Param_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParam_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Param_exprContext* Gauss200Parser::param_expr() {
  Param_exprContext *_localctx = _tracker.createInstance<Param_exprContext>(_ctx, getState());
  enterRule(_localctx, 750, Gauss200Parser::RuleParam_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4832);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 562, _ctx)) {
    case 1: {
      setState(4829);
      param_name();
      setState(4830);
      param_op();
      break;
    }

    }
    setState(4834);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_opContext ------------------------------------------------------------------

Gauss200Parser::Param_opContext::Param_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Param_opContext::COLON() {
  return getToken(Gauss200Parser::COLON, 0);
}

tree::TerminalNode* Gauss200Parser::Param_opContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Param_opContext::GREATER_THAN_OP() {
  return getToken(Gauss200Parser::GREATER_THAN_OP, 0);
}


size_t Gauss200Parser::Param_opContext::getRuleIndex() const {
  return Gauss200Parser::RuleParam_op;
}

void Gauss200Parser::Param_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_op(this);
}

void Gauss200Parser::Param_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_op(this);
}


antlrcpp::Any Gauss200Parser::Param_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParam_op(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Param_opContext* Gauss200Parser::param_op() {
  Param_opContext *_localctx = _tracker.createInstance<Param_opContext>(_ctx, getState());
  enterRule(_localctx, 752, Gauss200Parser::RuleParam_op);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4840);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::COLON: {
        enterOuterAlt(_localctx, 1);
        setState(4836);
        match(Gauss200Parser::COLON);
        setState(4837);
        match(Gauss200Parser::EQUALS_OP);
        break;
      }

      case Gauss200Parser::EQUALS_OP: {
        enterOuterAlt(_localctx, 2);
        setState(4838);
        match(Gauss200Parser::EQUALS_OP);
        setState(4839);
        match(Gauss200Parser::GREATER_THAN_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Checkpoint_stmtContext ------------------------------------------------------------------

Gauss200Parser::Checkpoint_stmtContext::Checkpoint_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Checkpoint_stmtContext::CHECKPOINT_GS() {
  return getToken(Gauss200Parser::CHECKPOINT_GS, 0);
}


size_t Gauss200Parser::Checkpoint_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCheckpoint_stmt;
}

void Gauss200Parser::Checkpoint_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckpoint_stmt(this);
}

void Gauss200Parser::Checkpoint_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckpoint_stmt(this);
}


antlrcpp::Any Gauss200Parser::Checkpoint_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCheckpoint_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Checkpoint_stmtContext* Gauss200Parser::checkpoint_stmt() {
  Checkpoint_stmtContext *_localctx = _tracker.createInstance<Checkpoint_stmtContext>(_ctx, getState());
  enterRule(_localctx, 754, Gauss200Parser::RuleCheckpoint_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4842);
    match(Gauss200Parser::CHECKPOINT_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Clean_connection_stmtContext ------------------------------------------------------------------

Gauss200Parser::Clean_connection_stmtContext::Clean_connection_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::CLEAN_GS() {
  return getToken(Gauss200Parser::CLEAN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::CONNECTION_GS() {
  return getToken(Gauss200Parser::CONNECTION_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Clean_connection_stmtContext::TO_GS() {
  return getTokens(Gauss200Parser::TO_GS);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::TO_GS(size_t i) {
  return getToken(Gauss200Parser::TO_GS, i);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Clean_connection_stmtContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::COORDINATOR_GS() {
  return getToken(Gauss200Parser::COORDINATOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

Gauss200Parser::Database_nameContext* Gauss200Parser::Clean_connection_stmtContext::database_name() {
  return getRuleContext<Gauss200Parser::Database_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

Gauss200Parser::User_nameContext* Gauss200Parser::Clean_connection_stmtContext::user_name() {
  return getRuleContext<Gauss200Parser::User_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::CHECK_GS() {
  return getToken(Gauss200Parser::CHECK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Clean_connection_stmtContext::FORCE_GS() {
  return getToken(Gauss200Parser::FORCE_GS, 0);
}


size_t Gauss200Parser::Clean_connection_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleClean_connection_stmt;
}

void Gauss200Parser::Clean_connection_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClean_connection_stmt(this);
}

void Gauss200Parser::Clean_connection_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClean_connection_stmt(this);
}


antlrcpp::Any Gauss200Parser::Clean_connection_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitClean_connection_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Clean_connection_stmtContext* Gauss200Parser::clean_connection_stmt() {
  Clean_connection_stmtContext *_localctx = _tracker.createInstance<Clean_connection_stmtContext>(_ctx, getState());
  enterRule(_localctx, 756, Gauss200Parser::RuleClean_connection_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4844);
    match(Gauss200Parser::CLEAN_GS);
    setState(4845);
    match(Gauss200Parser::CONNECTION_GS);
    setState(4846);
    match(Gauss200Parser::TO_GS);
    setState(4856);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::NODE_GS: {
        setState(4847);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::COORDINATOR_GS || _la == Gauss200Parser::NODE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4848);
        paren_node_list();
        break;
      }

      case Gauss200Parser::ALL_GS: {
        setState(4849);
        match(Gauss200Parser::ALL_GS);
        setState(4851);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::CHECK_GS) {
          setState(4850);
          match(Gauss200Parser::CHECK_GS);
        }
        setState(4854);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::FORCE_GS) {
          setState(4853);
          match(Gauss200Parser::FORCE_GS);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4861);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FOR_GS) {
      setState(4858);
      match(Gauss200Parser::FOR_GS);
      setState(4859);
      match(Gauss200Parser::DATABASE_GS);
      setState(4860);
      database_name();
    }
    setState(4866);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TO_GS) {
      setState(4863);
      match(Gauss200Parser::TO_GS);
      setState(4864);
      match(Gauss200Parser::USER_GS);
      setState(4865);
      user_name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Close_stmtContext ------------------------------------------------------------------

Gauss200Parser::Close_stmtContext::Close_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Close_stmtContext::CLOSE_GS() {
  return getToken(Gauss200Parser::CLOSE_GS, 0);
}

Gauss200Parser::Cursor_nameContext* Gauss200Parser::Close_stmtContext::cursor_name() {
  return getRuleContext<Gauss200Parser::Cursor_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Close_stmtContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}


size_t Gauss200Parser::Close_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleClose_stmt;
}

void Gauss200Parser::Close_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClose_stmt(this);
}

void Gauss200Parser::Close_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClose_stmt(this);
}


antlrcpp::Any Gauss200Parser::Close_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitClose_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Close_stmtContext* Gauss200Parser::close_stmt() {
  Close_stmtContext *_localctx = _tracker.createInstance<Close_stmtContext>(_ctx, getState());
  enterRule(_localctx, 758, Gauss200Parser::RuleClose_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4868);
    match(Gauss200Parser::CLOSE_GS);
    setState(4871);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 569, _ctx)) {
    case 1: {
      setState(4869);
      cursor_name();
      break;
    }

    case 2: {
      setState(4870);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_nameContext ------------------------------------------------------------------

Gauss200Parser::Cursor_nameContext::Cursor_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Cursor_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Cursor_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleCursor_name;
}

void Gauss200Parser::Cursor_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCursor_name(this);
}

void Gauss200Parser::Cursor_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCursor_name(this);
}


antlrcpp::Any Gauss200Parser::Cursor_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCursor_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Cursor_nameContext* Gauss200Parser::cursor_name() {
  Cursor_nameContext *_localctx = _tracker.createInstance<Cursor_nameContext>(_ctx, getState());
  enterRule(_localctx, 760, Gauss200Parser::RuleCursor_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4873);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cluster_stmtContext ------------------------------------------------------------------

Gauss200Parser::Cluster_stmtContext::Cluster_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Cluster_stmtContext::CLUSTER_GS() {
  return getToken(Gauss200Parser::CLUSTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cluster_stmtContext::VERBOSE_GS() {
  return getToken(Gauss200Parser::VERBOSE_GS, 0);
}

Gauss200Parser::Cluster_stmt_optionContext* Gauss200Parser::Cluster_stmtContext::cluster_stmt_option() {
  return getRuleContext<Gauss200Parser::Cluster_stmt_optionContext>(0);
}


size_t Gauss200Parser::Cluster_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCluster_stmt;
}

void Gauss200Parser::Cluster_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCluster_stmt(this);
}

void Gauss200Parser::Cluster_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCluster_stmt(this);
}


antlrcpp::Any Gauss200Parser::Cluster_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCluster_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Cluster_stmtContext* Gauss200Parser::cluster_stmt() {
  Cluster_stmtContext *_localctx = _tracker.createInstance<Cluster_stmtContext>(_ctx, getState());
  enterRule(_localctx, 762, Gauss200Parser::RuleCluster_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4875);
    match(Gauss200Parser::CLUSTER_GS);
    setState(4877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::VERBOSE_GS) {
      setState(4876);
      match(Gauss200Parser::VERBOSE_GS);
    }
    setState(4880);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 571, _ctx)) {
    case 1: {
      setState(4879);
      cluster_stmt_option();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cluster_stmt_optionContext ------------------------------------------------------------------

Gauss200Parser::Cluster_stmt_optionContext::Cluster_stmt_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Cluster_stmt_optionContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Cluster_stmt_optionContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Cluster_stmt_optionContext::index_name() {
  return getRuleContext<Gauss200Parser::Index_nameContext>(0);
}

Gauss200Parser::Partition_name_optionContext* Gauss200Parser::Cluster_stmt_optionContext::partition_name_option() {
  return getRuleContext<Gauss200Parser::Partition_name_optionContext>(0);
}


size_t Gauss200Parser::Cluster_stmt_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCluster_stmt_option;
}

void Gauss200Parser::Cluster_stmt_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCluster_stmt_option(this);
}

void Gauss200Parser::Cluster_stmt_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCluster_stmt_option(this);
}


antlrcpp::Any Gauss200Parser::Cluster_stmt_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCluster_stmt_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Cluster_stmt_optionContext* Gauss200Parser::cluster_stmt_option() {
  Cluster_stmt_optionContext *_localctx = _tracker.createInstance<Cluster_stmt_optionContext>(_ctx, getState());
  enterRule(_localctx, 764, Gauss200Parser::RuleCluster_stmt_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4893);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 574, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4882);
      table_name();
      setState(4885);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::USING_GS) {
        setState(4883);
        match(Gauss200Parser::USING_GS);
        setState(4884);
        index_name();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4887);
      table_name();
      setState(4888);
      partition_name_option();
      setState(4891);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::USING_GS) {
        setState(4889);
        match(Gauss200Parser::USING_GS);
        setState(4890);
        index_name();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comment_stmtContext ------------------------------------------------------------------

Gauss200Parser::Comment_stmtContext::Comment_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Comment_stmtContext::COMMENT_GS() {
  return getToken(Gauss200Parser::COMMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Comment_stmt_optionContext* Gauss200Parser::Comment_stmtContext::comment_stmt_option() {
  return getRuleContext<Gauss200Parser::Comment_stmt_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmtContext::IS_GS() {
  return getToken(Gauss200Parser::IS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmtContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}


size_t Gauss200Parser::Comment_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleComment_stmt;
}

void Gauss200Parser::Comment_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment_stmt(this);
}

void Gauss200Parser::Comment_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment_stmt(this);
}


antlrcpp::Any Gauss200Parser::Comment_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitComment_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Comment_stmtContext* Gauss200Parser::comment_stmt() {
  Comment_stmtContext *_localctx = _tracker.createInstance<Comment_stmtContext>(_ctx, getState());
  enterRule(_localctx, 766, Gauss200Parser::RuleComment_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4895);
    match(Gauss200Parser::COMMENT_GS);
    setState(4896);
    match(Gauss200Parser::ON_GS);
    setState(4897);
    comment_stmt_option();
    setState(4898);
    match(Gauss200Parser::IS_GS);
    setState(4899);
    match(Gauss200Parser::CHAR_STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comment_stmt_optionContext ------------------------------------------------------------------

Gauss200Parser::Comment_stmt_optionContext::Comment_stmt_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::AGGREGATE_GS() {
  return getToken(Gauss200Parser::AGGREGATE_GS, 0);
}

Gauss200Parser::Agg_nameContext* Gauss200Parser::Comment_stmt_optionContext::agg_name() {
  return getRuleContext<Gauss200Parser::Agg_nameContext>(0);
}

Gauss200Parser::Func_argsContext* Gauss200Parser::Comment_stmt_optionContext::func_args() {
  return getRuleContext<Gauss200Parser::Func_argsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::CAST_GS() {
  return getToken(Gauss200Parser::CAST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Typename_gsContext *> Gauss200Parser::Comment_stmt_optionContext::typename_gs() {
  return getRuleContexts<Gauss200Parser::Typename_gsContext>();
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Comment_stmt_optionContext::typename_gs(size_t i) {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(i);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::COLUMN_GS() {
  return getToken(Gauss200Parser::COLUMN_GS, 0);
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Comment_stmt_optionContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::PERIOD() {
  return getToken(Gauss200Parser::PERIOD, 0);
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Comment_stmt_optionContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Comment_stmt_optionContext::constraint_name() {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::FUNCTION_GS() {
  return getToken(Gauss200Parser::FUNCTION_GS, 0);
}

Gauss200Parser::Function_with_argtypesContext* Gauss200Parser::Comment_stmt_optionContext::function_with_argtypes() {
  return getRuleContext<Gauss200Parser::Function_with_argtypesContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::OPERATOR_GS() {
  return getToken(Gauss200Parser::OPERATOR_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Comment_stmt_optionContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

Gauss200Parser::Object_nameContext* Gauss200Parser::Comment_stmt_optionContext::object_name() {
  return getRuleContext<Gauss200Parser::Object_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Comment_stmt_optionContext::index_name() {
  return getRuleContext<Gauss200Parser::Index_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::CLASS_GS() {
  return getToken(Gauss200Parser::CLASS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::FAMILY_GS() {
  return getToken(Gauss200Parser::FAMILY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::COLLATE_GS() {
  return getToken(Gauss200Parser::COLLATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::CONVERSION_GS() {
  return getToken(Gauss200Parser::CONVERSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::DOMAIN_GS() {
  return getToken(Gauss200Parser::DOMAIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::EXTENSION_GS() {
  return getToken(Gauss200Parser::EXTENSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::INDEX_GS() {
  return getToken(Gauss200Parser::INDEX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::LARGE_GS() {
  return getToken(Gauss200Parser::LARGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::OBJECT_GS() {
  return getToken(Gauss200Parser::OBJECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::LANGUAGE_GS() {
  return getToken(Gauss200Parser::LANGUAGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::VIEW_GS() {
  return getToken(Gauss200Parser::VIEW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::SEARCH_GS() {
  return getToken(Gauss200Parser::SEARCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::WRAPPER_GS() {
  return getToken(Gauss200Parser::WRAPPER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::CONFIGURATION_GS() {
  return getToken(Gauss200Parser::CONFIGURATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::DICTIONARY_GS() {
  return getToken(Gauss200Parser::DICTIONARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::PARSER_GS() {
  return getToken(Gauss200Parser::PARSER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::TEMPLATE_GS() {
  return getToken(Gauss200Parser::TEMPLATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Comment_stmt_optionContext::PROCEDURAL_GS() {
  return getToken(Gauss200Parser::PROCEDURAL_GS, 0);
}


size_t Gauss200Parser::Comment_stmt_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleComment_stmt_option;
}

void Gauss200Parser::Comment_stmt_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment_stmt_option(this);
}

void Gauss200Parser::Comment_stmt_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment_stmt_option(this);
}


antlrcpp::Any Gauss200Parser::Comment_stmt_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitComment_stmt_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Comment_stmt_optionContext* Gauss200Parser::comment_stmt_option() {
  Comment_stmt_optionContext *_localctx = _tracker.createInstance<Comment_stmt_optionContext>(_ctx, getState());
  enterRule(_localctx, 768, Gauss200Parser::RuleComment_stmt_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4968);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 577, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4901);
      match(Gauss200Parser::AGGREGATE_GS);
      setState(4902);
      agg_name();
      setState(4903);
      func_args();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4905);
      match(Gauss200Parser::CAST_GS);
      setState(4906);
      match(Gauss200Parser::LEFT_PAREN);
      setState(4907);
      typename_gs();
      setState(4908);
      match(Gauss200Parser::AS_GS);
      setState(4909);
      typename_gs();
      setState(4910);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4912);
      match(Gauss200Parser::COLUMN_GS);
      setState(4913);
      table_name();
      setState(4914);
      match(Gauss200Parser::PERIOD);
      setState(4915);
      column_name();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4917);
      match(Gauss200Parser::CONSTRAINT_GS);
      setState(4918);
      constraint_name();
      setState(4919);
      match(Gauss200Parser::ON_GS);
      setState(4920);
      table_name();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4922);
      match(Gauss200Parser::FUNCTION_GS);
      setState(4923);
      function_with_argtypes();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4924);
      match(Gauss200Parser::OPERATOR_GS);
      setState(4925);
      identifier();
      setState(4926);
      match(Gauss200Parser::LEFT_PAREN);
      setState(4927);
      typename_gs();
      setState(4928);
      match(Gauss200Parser::COMMA);
      setState(4929);
      typename_gs();
      setState(4930);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4932);
      match(Gauss200Parser::OPERATOR_GS);
      setState(4933);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::CLASS_GS || _la == Gauss200Parser::FAMILY_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4934);
      object_name();
      setState(4935);
      match(Gauss200Parser::USING_GS);
      setState(4936);
      index_name();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(4965);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 576, _ctx)) {
      case 1: {
        setState(4938);
        match(Gauss200Parser::COLLATE_GS);
        break;
      }

      case 2: {
        setState(4939);
        match(Gauss200Parser::CONVERSION_GS);
        break;
      }

      case 3: {
        setState(4940);
        match(Gauss200Parser::DATABASE_GS);
        break;
      }

      case 4: {
        setState(4941);
        match(Gauss200Parser::DOMAIN_GS);
        break;
      }

      case 5: {
        setState(4942);
        match(Gauss200Parser::EXTENSION_GS);
        break;
      }

      case 6: {
        setState(4943);
        match(Gauss200Parser::FOREIGN_GS);
        setState(4944);
        match(Gauss200Parser::TABLE_GS);
        break;
      }

      case 7: {
        setState(4945);
        match(Gauss200Parser::INDEX_GS);
        break;
      }

      case 8: {
        setState(4946);
        match(Gauss200Parser::LARGE_GS);
        setState(4947);
        match(Gauss200Parser::OBJECT_GS);
        break;
      }

      case 9: {
        setState(4949);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::PROCEDURAL_GS) {
          setState(4948);
          match(Gauss200Parser::PROCEDURAL_GS);
        }
        setState(4951);
        match(Gauss200Parser::LANGUAGE_GS);
        break;
      }

      case 10: {
        setState(4952);
        match(Gauss200Parser::ROLE_GS);
        break;
      }

      case 11: {
        setState(4953);
        match(Gauss200Parser::SCHEMA_GS);
        break;
      }

      case 12: {
        setState(4954);
        match(Gauss200Parser::SERVER_GS);
        break;
      }

      case 13: {
        setState(4955);
        match(Gauss200Parser::TABLE_GS);
        break;
      }

      case 14: {
        setState(4956);
        match(Gauss200Parser::TABLESPACE_GS);
        break;
      }

      case 15: {
        setState(4957);
        match(Gauss200Parser::TYPE_GS);
        break;
      }

      case 16: {
        setState(4958);
        match(Gauss200Parser::VIEW_GS);
        break;
      }

      case 17: {
        setState(4959);
        match(Gauss200Parser::TEXT_GS);
        setState(4960);
        match(Gauss200Parser::SEARCH_GS);
        setState(4961);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::CONFIGURATION_GS

        || _la == Gauss200Parser::DICTIONARY_GS || _la == Gauss200Parser::PARSER_GS || _la == Gauss200Parser::TEMPLATE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case 18: {
        setState(4962);
        match(Gauss200Parser::FOREIGN_GS);
        setState(4963);
        match(Gauss200Parser::DATA_GS);
        setState(4964);
        match(Gauss200Parser::WRAPPER_GS);
        break;
      }

      }
      setState(4967);
      object_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Agg_nameContext ------------------------------------------------------------------

Gauss200Parser::Agg_nameContext::Agg_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Agg_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Agg_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleAgg_name;
}

void Gauss200Parser::Agg_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAgg_name(this);
}

void Gauss200Parser::Agg_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAgg_name(this);
}


antlrcpp::Any Gauss200Parser::Agg_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAgg_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Agg_nameContext* Gauss200Parser::agg_name() {
  Agg_nameContext *_localctx = _tracker.createInstance<Agg_nameContext>(_ctx, getState());
  enterRule(_localctx, 770, Gauss200Parser::RuleAgg_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4970);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_nameContext ------------------------------------------------------------------

Gauss200Parser::Object_nameContext::Object_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Object_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::Object_nameContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::Object_nameContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::Object_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleObject_name;
}

void Gauss200Parser::Object_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_name(this);
}

void Gauss200Parser::Object_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_name(this);
}


antlrcpp::Any Gauss200Parser::Object_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitObject_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Object_nameContext* Gauss200Parser::object_name() {
  Object_nameContext *_localctx = _tracker.createInstance<Object_nameContext>(_ctx, getState());
  enterRule(_localctx, 772, Gauss200Parser::RuleObject_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4972);
    identifier();
    setState(4976);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::PERIOD) {
      setState(4973);
      attr();
      setState(4978);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Commit_end_stmtContext ------------------------------------------------------------------

Gauss200Parser::Commit_end_stmtContext::Commit_end_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Commit_end_stmtContext::COMMIT_GS() {
  return getToken(Gauss200Parser::COMMIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Commit_end_stmtContext::END_GS() {
  return getToken(Gauss200Parser::END_GS, 0);
}

Gauss200Parser::Work_transactionContext* Gauss200Parser::Commit_end_stmtContext::work_transaction() {
  return getRuleContext<Gauss200Parser::Work_transactionContext>(0);
}


size_t Gauss200Parser::Commit_end_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCommit_end_stmt;
}

void Gauss200Parser::Commit_end_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommit_end_stmt(this);
}

void Gauss200Parser::Commit_end_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommit_end_stmt(this);
}


antlrcpp::Any Gauss200Parser::Commit_end_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCommit_end_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Commit_end_stmtContext* Gauss200Parser::commit_end_stmt() {
  Commit_end_stmtContext *_localctx = _tracker.createInstance<Commit_end_stmtContext>(_ctx, getState());
  enterRule(_localctx, 774, Gauss200Parser::RuleCommit_end_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4979);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::END_GS || _la == Gauss200Parser::COMMIT_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4981);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TRANSACTION_GS

    || _la == Gauss200Parser::WORK_GS) {
      setState(4980);
      work_transaction();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Commit_prepared_stmtContext ------------------------------------------------------------------

Gauss200Parser::Commit_prepared_stmtContext::Commit_prepared_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Commit_prepared_stmtContext::COMMIT_GS() {
  return getToken(Gauss200Parser::COMMIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Commit_prepared_stmtContext::PREPARED_GS() {
  return getToken(Gauss200Parser::PREPARED_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Commit_prepared_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Commit_prepared_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Commit_prepared_stmtContext::CSN_GS() {
  return getToken(Gauss200Parser::CSN_GS, 0);
}


size_t Gauss200Parser::Commit_prepared_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCommit_prepared_stmt;
}

void Gauss200Parser::Commit_prepared_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommit_prepared_stmt(this);
}

void Gauss200Parser::Commit_prepared_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommit_prepared_stmt(this);
}


antlrcpp::Any Gauss200Parser::Commit_prepared_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCommit_prepared_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Commit_prepared_stmtContext* Gauss200Parser::commit_prepared_stmt() {
  Commit_prepared_stmtContext *_localctx = _tracker.createInstance<Commit_prepared_stmtContext>(_ctx, getState());
  enterRule(_localctx, 776, Gauss200Parser::RuleCommit_prepared_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4983);
    match(Gauss200Parser::COMMIT_GS);
    setState(4984);
    match(Gauss200Parser::PREPARED_GS);
    setState(4985);
    identifier();
    setState(4988);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS) {
      setState(4986);
      match(Gauss200Parser::WITH_GS);
      setState(4987);
      match(Gauss200Parser::CSN_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_stmtContext ------------------------------------------------------------------

Gauss200Parser::Copy_stmtContext::Copy_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Copy_stmtContext::COPY_GS() {
  return getToken(Gauss200Parser::COPY_GS, 0);
}

Gauss200Parser::Copy_objContext* Gauss200Parser::Copy_stmtContext::copy_obj() {
  return getRuleContext<Gauss200Parser::Copy_objContext>(0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmtContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmtContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmtContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmtContext::STDOUT_GS() {
  return getToken(Gauss200Parser::STDOUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmtContext::STDIN_GS() {
  return getToken(Gauss200Parser::STDIN_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Copy_stmtContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

std::vector<Gauss200Parser::Copy_stmt_clauseContext *> Gauss200Parser::Copy_stmtContext::copy_stmt_clause() {
  return getRuleContexts<Gauss200Parser::Copy_stmt_clauseContext>();
}

Gauss200Parser::Copy_stmt_clauseContext* Gauss200Parser::Copy_stmtContext::copy_stmt_clause(size_t i) {
  return getRuleContext<Gauss200Parser::Copy_stmt_clauseContext>(i);
}

std::vector<Gauss200Parser::Copy_stmt_optionContext *> Gauss200Parser::Copy_stmtContext::copy_stmt_option() {
  return getRuleContexts<Gauss200Parser::Copy_stmt_optionContext>();
}

Gauss200Parser::Copy_stmt_optionContext* Gauss200Parser::Copy_stmtContext::copy_stmt_option(size_t i) {
  return getRuleContext<Gauss200Parser::Copy_stmt_optionContext>(i);
}


size_t Gauss200Parser::Copy_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCopy_stmt;
}

void Gauss200Parser::Copy_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_stmt(this);
}

void Gauss200Parser::Copy_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_stmt(this);
}


antlrcpp::Any Gauss200Parser::Copy_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCopy_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Copy_stmtContext* Gauss200Parser::copy_stmt() {
  Copy_stmtContext *_localctx = _tracker.createInstance<Copy_stmtContext>(_ctx, getState());
  enterRule(_localctx, 778, Gauss200Parser::RuleCopy_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4990);
    match(Gauss200Parser::COPY_GS);
    setState(4991);
    copy_obj();
    setState(4993);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(4992);
      paren_column_list();
    }
    setState(4995);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::FROM_GS

    || _la == Gauss200Parser::TO_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4996);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::STDIN_GS

    || _la == Gauss200Parser::STDOUT_GS || _la == Gauss200Parser::CHAR_STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5000);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::REJECT_GS

    || _la == Gauss200Parser::USING_GS || _la == Gauss200Parser::LOG_GS || _la == Gauss200Parser::WITHOUT_GS) {
      setState(4997);
      copy_stmt_clause();
      setState(5002);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5006);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 58) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 58)) & ((1ULL << (Gauss200Parser::NULL_GS - 58))
      | (1ULL << (Gauss200Parser::WITH_GS - 58))
      | (1ULL << (Gauss200Parser::BINARY_GS - 58))
      | (1ULL << (Gauss200Parser::FREEZE_GS - 58)))) != 0) || ((((_la - 167) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 167)) & ((1ULL << (Gauss200Parser::CSV_GS - 167))
      | (1ULL << (Gauss200Parser::ENCODING_GS - 167))
      | (1ULL << (Gauss200Parser::EOL_GS - 167))
      | (1ULL << (Gauss200Parser::ESCAPE_GS - 167))
      | (1ULL << (Gauss200Parser::FILEHEADER_GS - 167))
      | (1ULL << (Gauss200Parser::FIXED_GS - 167))
      | (1ULL << (Gauss200Parser::HEADER_GS - 167)))) != 0) || _la == Gauss200Parser::OIDS_GS

    || _la == Gauss200Parser::QUOTE_GS || ((((_la - 580) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 580)) & ((1ULL << (Gauss200Parser::IGNORE_EXTRA_DATA_GS - 580))
      | (1ULL << (Gauss200Parser::FILL_MISSING_FIELDS_GS - 580))
      | (1ULL << (Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS - 580))
      | (1ULL << (Gauss200Parser::DATE_FORMAT_GS - 580))
      | (1ULL << (Gauss200Parser::TIME_FORMAT_GS - 580))
      | (1ULL << (Gauss200Parser::TIMESTAMP_FORMAT_GS - 580))
      | (1ULL << (Gauss200Parser::SMALLDATETIME_FORMAT_GS - 580))
      | (1ULL << (Gauss200Parser::LEFT_PAREN - 580)))) != 0)) {
      setState(5003);
      copy_stmt_option();
      setState(5008);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_objContext ------------------------------------------------------------------

Gauss200Parser::Copy_objContext::Copy_objContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Copy_objContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Copy_objContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_objContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Copy_objContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

Gauss200Parser::Values_stmtContext* Gauss200Parser::Copy_objContext::values_stmt() {
  return getRuleContext<Gauss200Parser::Values_stmtContext>(0);
}


size_t Gauss200Parser::Copy_objContext::getRuleIndex() const {
  return Gauss200Parser::RuleCopy_obj;
}

void Gauss200Parser::Copy_objContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_obj(this);
}

void Gauss200Parser::Copy_objContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_obj(this);
}


antlrcpp::Any Gauss200Parser::Copy_objContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCopy_obj(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Copy_objContext* Gauss200Parser::copy_obj() {
  Copy_objContext *_localctx = _tracker.createInstance<Copy_objContext>(_ctx, getState());
  enterRule(_localctx, 780, Gauss200Parser::RuleCopy_obj);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5017);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::BETWEEN_GS:
      case Gauss200Parser::BIGINT_GS:
      case Gauss200Parser::BINARY_DOUBLE_GS:
      case Gauss200Parser::BINARY_INTEGER_GS:
      case Gauss200Parser::BIT_GS:
      case Gauss200Parser::BOOLEAN_GS:
      case Gauss200Parser::CHARACTER_GS:
      case Gauss200Parser::CHAR_GS:
      case Gauss200Parser::COALESCE_GS:
      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::DECIMAL_GS:
      case Gauss200Parser::DECODE_GS:
      case Gauss200Parser::DEC_GS:
      case Gauss200Parser::EXISTS_GS:
      case Gauss200Parser::EXTRACT_GS:
      case Gauss200Parser::FLOAT_GS:
      case Gauss200Parser::GREATEST_GS:
      case Gauss200Parser::INOUT_GS:
      case Gauss200Parser::INTEGER_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::INT_GS:
      case Gauss200Parser::LEAST_GS:
      case Gauss200Parser::NATIONAL_GS:
      case Gauss200Parser::NCHAR_GS:
      case Gauss200Parser::NONE_GS:
      case Gauss200Parser::NULLIF_GS:
      case Gauss200Parser::NUMBER_GS:
      case Gauss200Parser::NUMERIC_GS:
      case Gauss200Parser::NVARCHAR2_GS:
      case Gauss200Parser::NVL_GS:
      case Gauss200Parser::OUT_GS:
      case Gauss200Parser::OVERLAY_GS:
      case Gauss200Parser::POSITION_GS:
      case Gauss200Parser::PRECISION_GS:
      case Gauss200Parser::REAL_GS:
      case Gauss200Parser::ROW_GS:
      case Gauss200Parser::SETOF_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::SMALLINT_GS:
      case Gauss200Parser::SUBSTRING_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::TINYINT_GS:
      case Gauss200Parser::TREAT_GS:
      case Gauss200Parser::TRIM_GS:
      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::VARCHAR2_GS:
      case Gauss200Parser::VARCHAR_GS:
      case Gauss200Parser::XMLATTRIBUTES_GS:
      case Gauss200Parser::XMLCONCAT_GS:
      case Gauss200Parser::XMLELEMENT_GS:
      case Gauss200Parser::XMLEXISTS_GS:
      case Gauss200Parser::XMLFOREST_GS:
      case Gauss200Parser::XMLPARSE_GS:
      case Gauss200Parser::XMLPI_GS:
      case Gauss200Parser::XMLROOT_GS:
      case Gauss200Parser::XMLSERIALIZE_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::CHAR_STRING:
      case Gauss200Parser::REGULAR_ID:
      case Gauss200Parser::SCONST: {
        enterOuterAlt(_localctx, 1);
        setState(5009);
        table_name();
        break;
      }

      case Gauss200Parser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(5010);
        match(Gauss200Parser::LEFT_PAREN);
        setState(5013);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::SELECT_GS:
          case Gauss200Parser::WITH_GS:
          case Gauss200Parser::LEFT_PAREN: {
            setState(5011);
            select_stmt();
            break;
          }

          case Gauss200Parser::VALUES_GS: {
            setState(5012);
            values_stmt();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5015);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_stmt_clauseContext ------------------------------------------------------------------

Gauss200Parser::Copy_stmt_clauseContext::Copy_stmt_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::DELIMITERS_GS() {
  return getToken(Gauss200Parser::DELIMITERS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::WITHOUT_GS() {
  return getToken(Gauss200Parser::WITHOUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::ESCAPE_GS() {
  return getToken(Gauss200Parser::ESCAPE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::LOG_GS() {
  return getToken(Gauss200Parser::LOG_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::ERRORS_GS() {
  return getToken(Gauss200Parser::ERRORS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::REJECT_GS() {
  return getToken(Gauss200Parser::REJECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_clauseContext::LIMIT_GS() {
  return getToken(Gauss200Parser::LIMIT_GS, 0);
}


size_t Gauss200Parser::Copy_stmt_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleCopy_stmt_clause;
}

void Gauss200Parser::Copy_stmt_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_stmt_clause(this);
}

void Gauss200Parser::Copy_stmt_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_stmt_clause(this);
}


antlrcpp::Any Gauss200Parser::Copy_stmt_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCopy_stmt_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Copy_stmt_clauseContext* Gauss200Parser::copy_stmt_clause() {
  Copy_stmt_clauseContext *_localctx = _tracker.createInstance<Copy_stmt_clauseContext>(_ctx, getState());
  enterRule(_localctx, 782, Gauss200Parser::RuleCopy_stmt_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5029);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::USING_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5019);
        match(Gauss200Parser::USING_GS);
        setState(5020);
        match(Gauss200Parser::DELIMITERS_GS);
        setState(5021);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::WITHOUT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5022);
        match(Gauss200Parser::WITHOUT_GS);
        setState(5023);
        match(Gauss200Parser::ESCAPE_GS);
        break;
      }

      case Gauss200Parser::LOG_GS: {
        enterOuterAlt(_localctx, 3);
        setState(5024);
        match(Gauss200Parser::LOG_GS);
        setState(5025);
        match(Gauss200Parser::ERRORS_GS);
        break;
      }

      case Gauss200Parser::REJECT_GS: {
        enterOuterAlt(_localctx, 4);
        setState(5026);
        match(Gauss200Parser::REJECT_GS);
        setState(5027);
        match(Gauss200Parser::LIMIT_GS);
        setState(5028);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_stmt_optionContext ------------------------------------------------------------------

Gauss200Parser::Copy_stmt_optionContext::Copy_stmt_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Paren_copy_clause_option_listContext* Gauss200Parser::Copy_stmt_optionContext::paren_copy_clause_option_list() {
  return getRuleContext<Gauss200Parser::Paren_copy_clause_option_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_optionContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

std::vector<Gauss200Parser::Copy_optionContext *> Gauss200Parser::Copy_stmt_optionContext::copy_option() {
  return getRuleContexts<Gauss200Parser::Copy_optionContext>();
}

Gauss200Parser::Copy_optionContext* Gauss200Parser::Copy_stmt_optionContext::copy_option(size_t i) {
  return getRuleContext<Gauss200Parser::Copy_optionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_optionContext::FIXED_GS() {
  return getToken(Gauss200Parser::FIXED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_optionContext::FORMATTER_GS() {
  return getToken(Gauss200Parser::FORMATTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Column_offset_listContext* Gauss200Parser::Copy_stmt_optionContext::column_offset_list() {
  return getRuleContext<Gauss200Parser::Column_offset_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Copy_stmt_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Copy_stmt_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCopy_stmt_option;
}

void Gauss200Parser::Copy_stmt_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_stmt_option(this);
}

void Gauss200Parser::Copy_stmt_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_stmt_option(this);
}


antlrcpp::Any Gauss200Parser::Copy_stmt_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCopy_stmt_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Copy_stmt_optionContext* Gauss200Parser::copy_stmt_option() {
  Copy_stmt_optionContext *_localctx = _tracker.createInstance<Copy_stmt_optionContext>(_ctx, getState());
  enterRule(_localctx, 784, Gauss200Parser::RuleCopy_stmt_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(5065);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 592, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5032);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(5031);
        match(Gauss200Parser::WITH_GS);
      }
      setState(5034);
      paren_copy_clause_option_list();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5035);
      copy_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5036);
      match(Gauss200Parser::FIXED_GS);
      setState(5037);
      match(Gauss200Parser::FORMATTER_GS);
      setState(5038);
      match(Gauss200Parser::LEFT_PAREN);
      setState(5039);
      column_offset_list();
      setState(5040);
      match(Gauss200Parser::RIGHT_PAREN);
      setState(5048);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 589, _ctx)) {
      case 1: {
        setState(5041);
        paren_copy_clause_option_list();
        break;
      }

      case 2: {
        setState(5045);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(5042);
            copy_option(); 
          }
          setState(5047);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
        }
        break;
      }

      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5057);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::LEFT_PAREN: {
          setState(5050);
          paren_copy_clause_option_list();
          break;
        }

        case Gauss200Parser::NULL_GS:
        case Gauss200Parser::BINARY_GS:
        case Gauss200Parser::FREEZE_GS:
        case Gauss200Parser::CSV_GS:
        case Gauss200Parser::ENCODING_GS:
        case Gauss200Parser::EOL_GS:
        case Gauss200Parser::ESCAPE_GS:
        case Gauss200Parser::FILEHEADER_GS:
        case Gauss200Parser::FIXED_GS:
        case Gauss200Parser::HEADER_GS:
        case Gauss200Parser::OIDS_GS:
        case Gauss200Parser::QUOTE_GS:
        case Gauss200Parser::IGNORE_EXTRA_DATA_GS:
        case Gauss200Parser::FILL_MISSING_FIELDS_GS:
        case Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS:
        case Gauss200Parser::DATE_FORMAT_GS:
        case Gauss200Parser::TIME_FORMAT_GS:
        case Gauss200Parser::TIMESTAMP_FORMAT_GS:
        case Gauss200Parser::SMALLDATETIME_FORMAT_GS: {
          setState(5054);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (((((_la - 58) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 58)) & ((1ULL << (Gauss200Parser::NULL_GS - 58))
            | (1ULL << (Gauss200Parser::BINARY_GS - 58))
            | (1ULL << (Gauss200Parser::FREEZE_GS - 58)))) != 0) || ((((_la - 167) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 167)) & ((1ULL << (Gauss200Parser::CSV_GS - 167))
            | (1ULL << (Gauss200Parser::ENCODING_GS - 167))
            | (1ULL << (Gauss200Parser::EOL_GS - 167))
            | (1ULL << (Gauss200Parser::ESCAPE_GS - 167))
            | (1ULL << (Gauss200Parser::FILEHEADER_GS - 167))
            | (1ULL << (Gauss200Parser::HEADER_GS - 167)))) != 0) || _la == Gauss200Parser::OIDS_GS

          || _la == Gauss200Parser::QUOTE_GS || ((((_la - 580) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 580)) & ((1ULL << (Gauss200Parser::IGNORE_EXTRA_DATA_GS - 580))
            | (1ULL << (Gauss200Parser::FILL_MISSING_FIELDS_GS - 580))
            | (1ULL << (Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS - 580))
            | (1ULL << (Gauss200Parser::DATE_FORMAT_GS - 580))
            | (1ULL << (Gauss200Parser::TIME_FORMAT_GS - 580))
            | (1ULL << (Gauss200Parser::TIMESTAMP_FORMAT_GS - 580))
            | (1ULL << (Gauss200Parser::SMALLDATETIME_FORMAT_GS - 580)))) != 0)) {
            setState(5051);
            copy_option();
            setState(5056);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5059);
      match(Gauss200Parser::FIXED_GS);
      setState(5060);
      match(Gauss200Parser::FORMATTER_GS);
      setState(5061);
      match(Gauss200Parser::LEFT_PAREN);
      setState(5062);
      column_offset_list();
      setState(5063);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_copy_clause_option_listContext ------------------------------------------------------------------

Gauss200Parser::Paren_copy_clause_option_listContext::Paren_copy_clause_option_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_copy_clause_option_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Copy_clause_optionContext *> Gauss200Parser::Paren_copy_clause_option_listContext::copy_clause_option() {
  return getRuleContexts<Gauss200Parser::Copy_clause_optionContext>();
}

Gauss200Parser::Copy_clause_optionContext* Gauss200Parser::Paren_copy_clause_option_listContext::copy_clause_option(size_t i) {
  return getRuleContext<Gauss200Parser::Copy_clause_optionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Paren_copy_clause_option_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Paren_copy_clause_option_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Paren_copy_clause_option_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Paren_copy_clause_option_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_copy_clause_option_list;
}

void Gauss200Parser::Paren_copy_clause_option_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_copy_clause_option_list(this);
}

void Gauss200Parser::Paren_copy_clause_option_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_copy_clause_option_list(this);
}


antlrcpp::Any Gauss200Parser::Paren_copy_clause_option_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_copy_clause_option_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_copy_clause_option_listContext* Gauss200Parser::paren_copy_clause_option_list() {
  Paren_copy_clause_option_listContext *_localctx = _tracker.createInstance<Paren_copy_clause_option_listContext>(_ctx, getState());
  enterRule(_localctx, 786, Gauss200Parser::RuleParen_copy_clause_option_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5067);
    match(Gauss200Parser::LEFT_PAREN);
    setState(5068);
    copy_clause_option();
    setState(5073);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5069);
      match(Gauss200Parser::COMMA);
      setState(5070);
      copy_clause_option();
      setState(5075);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5076);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_clause_optionContext ------------------------------------------------------------------

Gauss200Parser::Copy_clause_optionContext::Copy_clause_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Copy_clause_optionContext::FORMAT_GS() {
  return getToken(Gauss200Parser::FORMAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_optionContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_optionContext::DELIMITER_GS() {
  return getToken(Gauss200Parser::DELIMITER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_optionContext::NOESCAPING_GS() {
  return getToken(Gauss200Parser::NOESCAPING_GS, 0);
}

Gauss200Parser::Boolean_valueContext* Gauss200Parser::Copy_clause_optionContext::boolean_value() {
  return getRuleContext<Gauss200Parser::Boolean_valueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_optionContext::FORCE_QUOTE_GS() {
  return getToken(Gauss200Parser::FORCE_QUOTE_GS, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Copy_clause_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_optionContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_optionContext::FORCE_NOT_NULL_GS() {
  return getToken(Gauss200Parser::FORCE_NOT_NULL_GS, 0);
}

Gauss200Parser::Copy_clause_common_optionContext* Gauss200Parser::Copy_clause_optionContext::copy_clause_common_option() {
  return getRuleContext<Gauss200Parser::Copy_clause_common_optionContext>(0);
}


size_t Gauss200Parser::Copy_clause_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCopy_clause_option;
}

void Gauss200Parser::Copy_clause_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_clause_option(this);
}

void Gauss200Parser::Copy_clause_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_clause_option(this);
}


antlrcpp::Any Gauss200Parser::Copy_clause_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCopy_clause_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Copy_clause_optionContext* Gauss200Parser::copy_clause_option() {
  Copy_clause_optionContext *_localctx = _tracker.createInstance<Copy_clause_optionContext>(_ctx, getState());
  enterRule(_localctx, 788, Gauss200Parser::RuleCopy_clause_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5094);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::FORMAT_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5078);
        match(Gauss200Parser::FORMAT_GS);
        setState(5079);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::DELIMITER_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5080);
        match(Gauss200Parser::DELIMITER_GS);
        setState(5081);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::NOESCAPING_GS: {
        enterOuterAlt(_localctx, 3);
        setState(5082);
        match(Gauss200Parser::NOESCAPING_GS);
        setState(5084);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5083);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::FORCE_QUOTE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(5086);
        match(Gauss200Parser::FORCE_QUOTE_GS);
        setState(5089);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::LEFT_PAREN: {
            setState(5087);
            paren_column_list();
            break;
          }

          case Gauss200Parser::ASTERISK: {
            setState(5088);
            match(Gauss200Parser::ASTERISK);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case Gauss200Parser::FORCE_NOT_NULL_GS: {
        enterOuterAlt(_localctx, 5);
        setState(5091);
        match(Gauss200Parser::FORCE_NOT_NULL_GS);
        setState(5092);
        paren_column_list();
        break;
      }

      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::FREEZE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::IGNORE_EXTRA_DATA_GS:
      case Gauss200Parser::FILL_MISSING_FIELDS_GS:
      case Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS:
      case Gauss200Parser::DATE_FORMAT_GS:
      case Gauss200Parser::TIME_FORMAT_GS:
      case Gauss200Parser::TIMESTAMP_FORMAT_GS:
      case Gauss200Parser::SMALLDATETIME_FORMAT_GS: {
        enterOuterAlt(_localctx, 6);
        setState(5093);
        copy_clause_common_option();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_offset_listContext ------------------------------------------------------------------

Gauss200Parser::Column_offset_listContext::Column_offset_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Column_offset_eleContext *> Gauss200Parser::Column_offset_listContext::column_offset_ele() {
  return getRuleContexts<Gauss200Parser::Column_offset_eleContext>();
}

Gauss200Parser::Column_offset_eleContext* Gauss200Parser::Column_offset_listContext::column_offset_ele(size_t i) {
  return getRuleContext<Gauss200Parser::Column_offset_eleContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Column_offset_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Column_offset_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Column_offset_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_offset_list;
}

void Gauss200Parser::Column_offset_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_offset_list(this);
}

void Gauss200Parser::Column_offset_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_offset_list(this);
}


antlrcpp::Any Gauss200Parser::Column_offset_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_offset_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_offset_listContext* Gauss200Parser::column_offset_list() {
  Column_offset_listContext *_localctx = _tracker.createInstance<Column_offset_listContext>(_ctx, getState());
  enterRule(_localctx, 790, Gauss200Parser::RuleColumn_offset_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5096);
    column_offset_ele();
    setState(5101);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5097);
      match(Gauss200Parser::COMMA);
      setState(5098);
      column_offset_ele();
      setState(5103);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_offset_eleContext ------------------------------------------------------------------

Gauss200Parser::Column_offset_eleContext::Column_offset_eleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Column_nameContext* Gauss200Parser::Column_offset_eleContext::column_name() {
  return getRuleContext<Gauss200Parser::Column_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Column_offset_eleContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::NumericContext *> Gauss200Parser::Column_offset_eleContext::numeric() {
  return getRuleContexts<Gauss200Parser::NumericContext>();
}

Gauss200Parser::NumericContext* Gauss200Parser::Column_offset_eleContext::numeric(size_t i) {
  return getRuleContext<Gauss200Parser::NumericContext>(i);
}

tree::TerminalNode* Gauss200Parser::Column_offset_eleContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

tree::TerminalNode* Gauss200Parser::Column_offset_eleContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Column_offset_eleContext::getRuleIndex() const {
  return Gauss200Parser::RuleColumn_offset_ele;
}

void Gauss200Parser::Column_offset_eleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_offset_ele(this);
}

void Gauss200Parser::Column_offset_eleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_offset_ele(this);
}


antlrcpp::Any Gauss200Parser::Column_offset_eleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitColumn_offset_ele(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Column_offset_eleContext* Gauss200Parser::column_offset_ele() {
  Column_offset_eleContext *_localctx = _tracker.createInstance<Column_offset_eleContext>(_ctx, getState());
  enterRule(_localctx, 792, Gauss200Parser::RuleColumn_offset_ele);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5104);
    column_name();
    setState(5105);
    match(Gauss200Parser::LEFT_PAREN);
    setState(5106);
    numeric();
    setState(5107);
    match(Gauss200Parser::COMMA);
    setState(5108);
    numeric();
    setState(5109);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_optionContext ------------------------------------------------------------------

Gauss200Parser::Copy_optionContext::Copy_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Copy_optionContext::BINARY_GS() {
  return getToken(Gauss200Parser::BINARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_optionContext::CSV_GS() {
  return getToken(Gauss200Parser::CSV_GS, 0);
}

Gauss200Parser::Copy_clause_common_optionContext* Gauss200Parser::Copy_optionContext::copy_clause_common_option() {
  return getRuleContext<Gauss200Parser::Copy_clause_common_optionContext>(0);
}


size_t Gauss200Parser::Copy_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCopy_option;
}

void Gauss200Parser::Copy_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_option(this);
}

void Gauss200Parser::Copy_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_option(this);
}


antlrcpp::Any Gauss200Parser::Copy_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCopy_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Copy_optionContext* Gauss200Parser::copy_option() {
  Copy_optionContext *_localctx = _tracker.createInstance<Copy_optionContext>(_ctx, getState());
  enterRule(_localctx, 794, Gauss200Parser::RuleCopy_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5114);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::BINARY_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5111);
        match(Gauss200Parser::BINARY_GS);
        break;
      }

      case Gauss200Parser::CSV_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5112);
        match(Gauss200Parser::CSV_GS);
        break;
      }

      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::FREEZE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::IGNORE_EXTRA_DATA_GS:
      case Gauss200Parser::FILL_MISSING_FIELDS_GS:
      case Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS:
      case Gauss200Parser::DATE_FORMAT_GS:
      case Gauss200Parser::TIME_FORMAT_GS:
      case Gauss200Parser::TIMESTAMP_FORMAT_GS:
      case Gauss200Parser::SMALLDATETIME_FORMAT_GS: {
        enterOuterAlt(_localctx, 3);
        setState(5113);
        copy_clause_common_option();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_clause_common_optionContext ------------------------------------------------------------------

Gauss200Parser::Copy_clause_common_optionContext::Copy_clause_common_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::OIDS_GS() {
  return getToken(Gauss200Parser::OIDS_GS, 0);
}

Gauss200Parser::Boolean_valueContext* Gauss200Parser::Copy_clause_common_optionContext::boolean_value() {
  return getRuleContext<Gauss200Parser::Boolean_valueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::HEADER_GS() {
  return getToken(Gauss200Parser::HEADER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::FILEHEADER_GS() {
  return getToken(Gauss200Parser::FILEHEADER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::FREEZE_GS() {
  return getToken(Gauss200Parser::FREEZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::QUOTE_GS() {
  return getToken(Gauss200Parser::QUOTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::ESCAPE_GS() {
  return getToken(Gauss200Parser::ESCAPE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::EOL_GS() {
  return getToken(Gauss200Parser::EOL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::ENCODING_GS() {
  return getToken(Gauss200Parser::ENCODING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::IGNORE_EXTRA_DATA_GS() {
  return getToken(Gauss200Parser::IGNORE_EXTRA_DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::FILL_MISSING_FIELDS_GS() {
  return getToken(Gauss200Parser::FILL_MISSING_FIELDS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::COMPATIBLE_ILLEGAL_CHARS_GS() {
  return getToken(Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::DATE_FORMAT_GS() {
  return getToken(Gauss200Parser::DATE_FORMAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::TIME_FORMAT_GS() {
  return getToken(Gauss200Parser::TIME_FORMAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::TIMESTAMP_FORMAT_GS() {
  return getToken(Gauss200Parser::TIMESTAMP_FORMAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Copy_clause_common_optionContext::SMALLDATETIME_FORMAT_GS() {
  return getToken(Gauss200Parser::SMALLDATETIME_FORMAT_GS, 0);
}


size_t Gauss200Parser::Copy_clause_common_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleCopy_clause_common_option;
}

void Gauss200Parser::Copy_clause_common_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_clause_common_option(this);
}

void Gauss200Parser::Copy_clause_common_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_clause_common_option(this);
}


antlrcpp::Any Gauss200Parser::Copy_clause_common_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCopy_clause_common_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Copy_clause_common_optionContext* Gauss200Parser::copy_clause_common_option() {
  Copy_clause_common_optionContext *_localctx = _tracker.createInstance<Copy_clause_common_optionContext>(_ctx, getState());
  enterRule(_localctx, 796, Gauss200Parser::RuleCopy_clause_common_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5155);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::OIDS_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5116);
        match(Gauss200Parser::OIDS_GS);
        setState(5118);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5117);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::NULL_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5120);
        match(Gauss200Parser::NULL_GS);
        setState(5121);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::HEADER_GS: {
        enterOuterAlt(_localctx, 3);
        setState(5122);
        match(Gauss200Parser::HEADER_GS);
        setState(5124);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5123);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::FILEHEADER_GS: {
        enterOuterAlt(_localctx, 4);
        setState(5126);
        match(Gauss200Parser::FILEHEADER_GS);
        setState(5127);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::FREEZE_GS: {
        enterOuterAlt(_localctx, 5);
        setState(5128);
        match(Gauss200Parser::FREEZE_GS);
        setState(5130);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5129);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::QUOTE_GS: {
        enterOuterAlt(_localctx, 6);
        setState(5132);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::ESCAPE_GS || _la == Gauss200Parser::QUOTE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5134);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::AS_GS) {
          setState(5133);
          match(Gauss200Parser::AS_GS);
        }
        setState(5136);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::EOL_GS: {
        enterOuterAlt(_localctx, 7);
        setState(5137);
        match(Gauss200Parser::EOL_GS);
        setState(5138);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::ENCODING_GS: {
        enterOuterAlt(_localctx, 8);
        setState(5139);
        match(Gauss200Parser::ENCODING_GS);
        setState(5140);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::IGNORE_EXTRA_DATA_GS: {
        enterOuterAlt(_localctx, 9);
        setState(5141);
        match(Gauss200Parser::IGNORE_EXTRA_DATA_GS);
        setState(5143);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5142);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::FILL_MISSING_FIELDS_GS: {
        enterOuterAlt(_localctx, 10);
        setState(5145);
        match(Gauss200Parser::FILL_MISSING_FIELDS_GS);
        setState(5147);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5146);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS: {
        enterOuterAlt(_localctx, 11);
        setState(5149);
        match(Gauss200Parser::COMPATIBLE_ILLEGAL_CHARS_GS);
        setState(5151);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5150);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::DATE_FORMAT_GS:
      case Gauss200Parser::TIME_FORMAT_GS:
      case Gauss200Parser::TIMESTAMP_FORMAT_GS:
      case Gauss200Parser::SMALLDATETIME_FORMAT_GS: {
        enterOuterAlt(_localctx, 12);
        setState(5153);
        _la = _input->LA(1);
        if (!(((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (Gauss200Parser::DATE_FORMAT_GS - 583))
          | (1ULL << (Gauss200Parser::TIME_FORMAT_GS - 583))
          | (1ULL << (Gauss200Parser::TIMESTAMP_FORMAT_GS - 583))
          | (1ULL << (Gauss200Parser::SMALLDATETIME_FORMAT_GS - 583)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5154);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_valueContext ------------------------------------------------------------------

Gauss200Parser::Boolean_valueContext::Boolean_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Boolean_valueContext::TRUE_GS() {
  return getToken(Gauss200Parser::TRUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Boolean_valueContext::FALSE_GS() {
  return getToken(Gauss200Parser::FALSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Boolean_valueContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Boolean_valueContext::OFF_GS() {
  return getToken(Gauss200Parser::OFF_GS, 0);
}


size_t Gauss200Parser::Boolean_valueContext::getRuleIndex() const {
  return Gauss200Parser::RuleBoolean_value;
}

void Gauss200Parser::Boolean_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_value(this);
}

void Gauss200Parser::Boolean_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_value(this);
}


antlrcpp::Any Gauss200Parser::Boolean_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitBoolean_value(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Boolean_valueContext* Gauss200Parser::boolean_value() {
  Boolean_valueContext *_localctx = _tracker.createInstance<Boolean_valueContext>(_ctx, getState());
  enterRule(_localctx, 798, Gauss200Parser::RuleBoolean_value);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5157);
    _la = _input->LA(1);
    if (!(((((_la - 34) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
      | (1ULL << (Gauss200Parser::ON_GS - 34))
      | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_stmtContext ------------------------------------------------------------------

Gauss200Parser::Cursor_stmtContext::Cursor_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::CURSOR_GS() {
  return getToken(Gauss200Parser::CURSOR_GS, 0);
}

Gauss200Parser::Cursor_nameContext* Gauss200Parser::Cursor_stmtContext::cursor_name() {
  return getRuleContext<Gauss200Parser::Cursor_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Cursor_stmtContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

Gauss200Parser::Values_stmtContext* Gauss200Parser::Cursor_stmtContext::values_stmt() {
  return getRuleContext<Gauss200Parser::Values_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::BINARY_GS() {
  return getToken(Gauss200Parser::BINARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::SCROLL_GS() {
  return getToken(Gauss200Parser::SCROLL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::HOLD_GS() {
  return getToken(Gauss200Parser::HOLD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cursor_stmtContext::WITHOUT_GS() {
  return getToken(Gauss200Parser::WITHOUT_GS, 0);
}


size_t Gauss200Parser::Cursor_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleCursor_stmt;
}

void Gauss200Parser::Cursor_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCursor_stmt(this);
}

void Gauss200Parser::Cursor_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCursor_stmt(this);
}


antlrcpp::Any Gauss200Parser::Cursor_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCursor_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Cursor_stmtContext* Gauss200Parser::cursor_stmt() {
  Cursor_stmtContext *_localctx = _tracker.createInstance<Cursor_stmtContext>(_ctx, getState());
  enterRule(_localctx, 800, Gauss200Parser::RuleCursor_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5159);
    match(Gauss200Parser::CURSOR_GS);
    setState(5160);
    cursor_name();
    setState(5162);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::BINARY_GS) {
      setState(5161);
      match(Gauss200Parser::BINARY_GS);
    }
    setState(5166);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::NO_GS) {
      setState(5164);
      match(Gauss200Parser::NO_GS);
      setState(5165);
      match(Gauss200Parser::SCROLL_GS);
    }
    setState(5170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WITH_GS || _la == Gauss200Parser::WITHOUT_GS) {
      setState(5168);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::WITH_GS || _la == Gauss200Parser::WITHOUT_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5169);
      match(Gauss200Parser::HOLD_GS);
    }
    setState(5172);
    match(Gauss200Parser::FOR_GS);
    setState(5175);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::LEFT_PAREN: {
        setState(5173);
        select_stmt();
        break;
      }

      case Gauss200Parser::VALUES_GS: {
        setState(5174);
        values_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deallocate_stmtContext ------------------------------------------------------------------

Gauss200Parser::Deallocate_stmtContext::Deallocate_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Deallocate_stmtContext::DEALLOCATE_GS() {
  return getToken(Gauss200Parser::DEALLOCATE_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Deallocate_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Deallocate_stmtContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Deallocate_stmtContext::PREPARE_GS() {
  return getToken(Gauss200Parser::PREPARE_GS, 0);
}


size_t Gauss200Parser::Deallocate_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDeallocate_stmt;
}

void Gauss200Parser::Deallocate_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeallocate_stmt(this);
}

void Gauss200Parser::Deallocate_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeallocate_stmt(this);
}


antlrcpp::Any Gauss200Parser::Deallocate_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDeallocate_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Deallocate_stmtContext* Gauss200Parser::deallocate_stmt() {
  Deallocate_stmtContext *_localctx = _tracker.createInstance<Deallocate_stmtContext>(_ctx, getState());
  enterRule(_localctx, 802, Gauss200Parser::RuleDeallocate_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5177);
    match(Gauss200Parser::DEALLOCATE_GS);
    setState(5179);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 611, _ctx)) {
    case 1: {
      setState(5178);
      match(Gauss200Parser::PREPARE_GS);
      break;
    }

    }
    setState(5184);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 612, _ctx)) {
    case 1: {
      setState(5181);
      identifier();
      break;
    }

    case 2: {
      break;
    }

    case 3: {
      setState(5183);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Do_stmtContext ------------------------------------------------------------------

Gauss200Parser::Do_stmtContext::Do_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Do_stmtContext::DO_GS() {
  return getToken(Gauss200Parser::DO_GS, 0);
}

Gauss200Parser::Do_stmt_codeContext* Gauss200Parser::Do_stmtContext::do_stmt_code() {
  return getRuleContext<Gauss200Parser::Do_stmt_codeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Do_stmtContext::LANGUAGE_GS() {
  return getToken(Gauss200Parser::LANGUAGE_GS, 0);
}

Gauss200Parser::Lang_nameContext* Gauss200Parser::Do_stmtContext::lang_name() {
  return getRuleContext<Gauss200Parser::Lang_nameContext>(0);
}


size_t Gauss200Parser::Do_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleDo_stmt;
}

void Gauss200Parser::Do_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDo_stmt(this);
}

void Gauss200Parser::Do_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDo_stmt(this);
}


antlrcpp::Any Gauss200Parser::Do_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDo_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Do_stmtContext* Gauss200Parser::do_stmt() {
  Do_stmtContext *_localctx = _tracker.createInstance<Do_stmtContext>(_ctx, getState());
  enterRule(_localctx, 804, Gauss200Parser::RuleDo_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5186);
    match(Gauss200Parser::DO_GS);
    setState(5189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LANGUAGE_GS) {
      setState(5187);
      match(Gauss200Parser::LANGUAGE_GS);
      setState(5188);
      lang_name();
    }
    setState(5191);
    do_stmt_code();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Do_stmt_codeContext ------------------------------------------------------------------

Gauss200Parser::Do_stmt_codeContext::Do_stmt_codeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Do_stmt_codeContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::Do_stmt_codeContext::getRuleIndex() const {
  return Gauss200Parser::RuleDo_stmt_code;
}

void Gauss200Parser::Do_stmt_codeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDo_stmt_code(this);
}

void Gauss200Parser::Do_stmt_codeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDo_stmt_code(this);
}


antlrcpp::Any Gauss200Parser::Do_stmt_codeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDo_stmt_code(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Do_stmt_codeContext* Gauss200Parser::do_stmt_code() {
  Do_stmt_codeContext *_localctx = _tracker.createInstance<Do_stmt_codeContext>(_ctx, getState());
  enterRule(_localctx, 806, Gauss200Parser::RuleDo_stmt_code);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5193);
    match(Gauss200Parser::SCONST);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_stmtsContext ------------------------------------------------------------------

Gauss200Parser::Execute_stmtsContext::Execute_stmtsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Execute_stmtContext *> Gauss200Parser::Execute_stmtsContext::execute_stmt() {
  return getRuleContexts<Gauss200Parser::Execute_stmtContext>();
}

Gauss200Parser::Execute_stmtContext* Gauss200Parser::Execute_stmtsContext::execute_stmt(size_t i) {
  return getRuleContext<Gauss200Parser::Execute_stmtContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Execute_stmtsContext::SEMICOLON() {
  return getTokens(Gauss200Parser::SEMICOLON);
}

tree::TerminalNode* Gauss200Parser::Execute_stmtsContext::SEMICOLON(size_t i) {
  return getToken(Gauss200Parser::SEMICOLON, i);
}


size_t Gauss200Parser::Execute_stmtsContext::getRuleIndex() const {
  return Gauss200Parser::RuleExecute_stmts;
}

void Gauss200Parser::Execute_stmtsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecute_stmts(this);
}

void Gauss200Parser::Execute_stmtsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecute_stmts(this);
}


antlrcpp::Any Gauss200Parser::Execute_stmtsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExecute_stmts(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Execute_stmtsContext* Gauss200Parser::execute_stmts() {
  Execute_stmtsContext *_localctx = _tracker.createInstance<Execute_stmtsContext>(_ctx, getState());
  enterRule(_localctx, 808, Gauss200Parser::RuleExecute_stmts);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5195);
    execute_stmt();
    setState(5200);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 614, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5196);
        match(Gauss200Parser::SEMICOLON);
        setState(5197);
        execute_stmt(); 
      }
      setState(5202);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 614, _ctx);
    }
    setState(5203);
    match(Gauss200Parser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_stmtContext ------------------------------------------------------------------

Gauss200Parser::Execute_stmtContext::Execute_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Execute_stmtContext::EXECUTE_GS() {
  return getToken(Gauss200Parser::EXECUTE_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Execute_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Execute_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Param_expr_listContext* Gauss200Parser::Execute_stmtContext::param_expr_list() {
  return getRuleContext<Gauss200Parser::Param_expr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Execute_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<Gauss200Parser::AttrContext *> Gauss200Parser::Execute_stmtContext::attr() {
  return getRuleContexts<Gauss200Parser::AttrContext>();
}

Gauss200Parser::AttrContext* Gauss200Parser::Execute_stmtContext::attr(size_t i) {
  return getRuleContext<Gauss200Parser::AttrContext>(i);
}


size_t Gauss200Parser::Execute_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleExecute_stmt;
}

void Gauss200Parser::Execute_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecute_stmt(this);
}

void Gauss200Parser::Execute_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecute_stmt(this);
}


antlrcpp::Any Gauss200Parser::Execute_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExecute_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Execute_stmtContext* Gauss200Parser::execute_stmt() {
  Execute_stmtContext *_localctx = _tracker.createInstance<Execute_stmtContext>(_ctx, getState());
  enterRule(_localctx, 810, Gauss200Parser::RuleExecute_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5205);
    match(Gauss200Parser::EXECUTE_GS);
    setState(5206);
    identifier();
    setState(5210);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::PERIOD) {
      setState(5207);
      attr();
      setState(5212);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5213);
    match(Gauss200Parser::LEFT_PAREN);
    setState(5214);
    param_expr_list();
    setState(5215);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_direct_stmtContext ------------------------------------------------------------------

Gauss200Parser::Execute_direct_stmtContext::Execute_direct_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Execute_direct_stmtContext::EXECUTE_GS() {
  return getToken(Gauss200Parser::EXECUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Execute_direct_stmtContext::DIRECT_GS() {
  return getToken(Gauss200Parser::DIRECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Execute_direct_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Paren_node_listContext* Gauss200Parser::Execute_direct_stmtContext::paren_node_list() {
  return getRuleContext<Gauss200Parser::Paren_node_listContext>(0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Execute_direct_stmtContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Execute_direct_stmtContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}


size_t Gauss200Parser::Execute_direct_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleExecute_direct_stmt;
}

void Gauss200Parser::Execute_direct_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecute_direct_stmt(this);
}

void Gauss200Parser::Execute_direct_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecute_direct_stmt(this);
}


antlrcpp::Any Gauss200Parser::Execute_direct_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExecute_direct_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Execute_direct_stmtContext* Gauss200Parser::execute_direct_stmt() {
  Execute_direct_stmtContext *_localctx = _tracker.createInstance<Execute_direct_stmtContext>(_ctx, getState());
  enterRule(_localctx, 812, Gauss200Parser::RuleExecute_direct_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5217);
    match(Gauss200Parser::EXECUTE_GS);
    setState(5218);
    match(Gauss200Parser::DIRECT_GS);
    setState(5219);
    match(Gauss200Parser::ON_GS);
    setState(5220);
    paren_node_list();
    setState(5223);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::LEFT_PAREN: {
        setState(5221);
        select_stmt();
        break;
      }

      case Gauss200Parser::CHAR_STRING: {
        setState(5222);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explain_stmtContext ------------------------------------------------------------------

Gauss200Parser::Explain_stmtContext::Explain_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Explain_stmtContext::EXPLAIN_GS() {
  return getToken(Gauss200Parser::EXPLAIN_GS, 0);
}

Gauss200Parser::StmtContext* Gauss200Parser::Explain_stmtContext::stmt() {
  return getRuleContext<Gauss200Parser::StmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Explain_stmtContext::VERBOSE_GS() {
  return getToken(Gauss200Parser::VERBOSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_stmtContext::PERFORMANCE_GS() {
  return getToken(Gauss200Parser::PERFORMANCE_GS, 0);
}

Gauss200Parser::Explain_option_listContext* Gauss200Parser::Explain_stmtContext::explain_option_list() {
  return getRuleContext<Gauss200Parser::Explain_option_listContext>(0);
}

Gauss200Parser::Analyze_keywordContext* Gauss200Parser::Explain_stmtContext::analyze_keyword() {
  return getRuleContext<Gauss200Parser::Analyze_keywordContext>(0);
}


size_t Gauss200Parser::Explain_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleExplain_stmt;
}

void Gauss200Parser::Explain_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplain_stmt(this);
}

void Gauss200Parser::Explain_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplain_stmt(this);
}


antlrcpp::Any Gauss200Parser::Explain_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExplain_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Explain_stmtContext* Gauss200Parser::explain_stmt() {
  Explain_stmtContext *_localctx = _tracker.createInstance<Explain_stmtContext>(_ctx, getState());
  enterRule(_localctx, 814, Gauss200Parser::RuleExplain_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5225);
    match(Gauss200Parser::EXPLAIN_GS);
    setState(5234);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 619, _ctx)) {
    case 1: {
      setState(5227);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 617, _ctx)) {
      case 1: {
        setState(5226);
        explain_option_list();
        break;
      }

      }
      break;
    }

    case 2: {
      setState(5230);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::ANALYSE_GS

      || _la == Gauss200Parser::ANALYZE_GS) {
        setState(5229);
        analyze_keyword();
      }
      setState(5232);
      match(Gauss200Parser::VERBOSE_GS);
      break;
    }

    case 3: {
      setState(5233);
      match(Gauss200Parser::PERFORMANCE_GS);
      break;
    }

    }
    setState(5236);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explain_option_listContext ------------------------------------------------------------------

Gauss200Parser::Explain_option_listContext::Explain_option_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Explain_option_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Explain_optionContext *> Gauss200Parser::Explain_option_listContext::explain_option() {
  return getRuleContexts<Gauss200Parser::Explain_optionContext>();
}

Gauss200Parser::Explain_optionContext* Gauss200Parser::Explain_option_listContext::explain_option(size_t i) {
  return getRuleContext<Gauss200Parser::Explain_optionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Explain_option_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Explain_option_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Explain_option_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Explain_option_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleExplain_option_list;
}

void Gauss200Parser::Explain_option_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplain_option_list(this);
}

void Gauss200Parser::Explain_option_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplain_option_list(this);
}


antlrcpp::Any Gauss200Parser::Explain_option_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExplain_option_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Explain_option_listContext* Gauss200Parser::explain_option_list() {
  Explain_option_listContext *_localctx = _tracker.createInstance<Explain_option_listContext>(_ctx, getState());
  enterRule(_localctx, 816, Gauss200Parser::RuleExplain_option_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5238);
    match(Gauss200Parser::LEFT_PAREN);
    setState(5239);
    explain_option();
    setState(5244);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5240);
      match(Gauss200Parser::COMMA);
      setState(5241);
      explain_option();
      setState(5246);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5247);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explain_optionContext ------------------------------------------------------------------

Gauss200Parser::Explain_optionContext::Explain_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Analyze_keywordContext* Gauss200Parser::Explain_optionContext::analyze_keyword() {
  return getRuleContext<Gauss200Parser::Analyze_keywordContext>(0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::VERBOSE_GS() {
  return getToken(Gauss200Parser::VERBOSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::COSTS_GS() {
  return getToken(Gauss200Parser::COSTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::CPU_GS() {
  return getToken(Gauss200Parser::CPU_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::DETAIL_GS() {
  return getToken(Gauss200Parser::DETAIL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::NODES_GS() {
  return getToken(Gauss200Parser::NODES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::NUM_NODES_GS() {
  return getToken(Gauss200Parser::NUM_NODES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::BUFFERS_GS() {
  return getToken(Gauss200Parser::BUFFERS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::TIMING_GS() {
  return getToken(Gauss200Parser::TIMING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::PLAN_GS() {
  return getToken(Gauss200Parser::PLAN_GS, 0);
}

Gauss200Parser::Boolean_valueContext* Gauss200Parser::Explain_optionContext::boolean_value() {
  return getRuleContext<Gauss200Parser::Boolean_valueContext>(0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::FORMAT_GS() {
  return getToken(Gauss200Parser::FORMAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::XML_GS() {
  return getToken(Gauss200Parser::XML_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::JSON_GS() {
  return getToken(Gauss200Parser::JSON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_optionContext::YAML_GS() {
  return getToken(Gauss200Parser::YAML_GS, 0);
}


size_t Gauss200Parser::Explain_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleExplain_option;
}

void Gauss200Parser::Explain_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplain_option(this);
}

void Gauss200Parser::Explain_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplain_option(this);
}


antlrcpp::Any Gauss200Parser::Explain_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExplain_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Explain_optionContext* Gauss200Parser::explain_option() {
  Explain_optionContext *_localctx = _tracker.createInstance<Explain_optionContext>(_ctx, getState());
  enterRule(_localctx, 818, Gauss200Parser::RuleExplain_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5266);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::VERBOSE_GS:
      case Gauss200Parser::COSTS_GS:
      case Gauss200Parser::CPU_GS:
      case Gauss200Parser::DETAIL_GS:
      case Gauss200Parser::NODES_GS:
      case Gauss200Parser::NUM_NODES_GS:
      case Gauss200Parser::BUFFERS_GS:
      case Gauss200Parser::TIMING_GS:
      case Gauss200Parser::PLAN_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5259);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::ANALYSE_GS:
          case Gauss200Parser::ANALYZE_GS: {
            setState(5249);
            analyze_keyword();
            break;
          }

          case Gauss200Parser::VERBOSE_GS: {
            setState(5250);
            match(Gauss200Parser::VERBOSE_GS);
            break;
          }

          case Gauss200Parser::COSTS_GS: {
            setState(5251);
            match(Gauss200Parser::COSTS_GS);
            break;
          }

          case Gauss200Parser::CPU_GS: {
            setState(5252);
            match(Gauss200Parser::CPU_GS);
            break;
          }

          case Gauss200Parser::DETAIL_GS: {
            setState(5253);
            match(Gauss200Parser::DETAIL_GS);
            break;
          }

          case Gauss200Parser::NODES_GS: {
            setState(5254);
            match(Gauss200Parser::NODES_GS);
            break;
          }

          case Gauss200Parser::NUM_NODES_GS: {
            setState(5255);
            match(Gauss200Parser::NUM_NODES_GS);
            break;
          }

          case Gauss200Parser::BUFFERS_GS: {
            setState(5256);
            match(Gauss200Parser::BUFFERS_GS);
            break;
          }

          case Gauss200Parser::TIMING_GS: {
            setState(5257);
            match(Gauss200Parser::TIMING_GS);
            break;
          }

          case Gauss200Parser::PLAN_GS: {
            setState(5258);
            match(Gauss200Parser::PLAN_GS);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5262);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 34) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 34)) & ((1ULL << (Gauss200Parser::FALSE_GS - 34))
          | (1ULL << (Gauss200Parser::ON_GS - 34))
          | (1ULL << (Gauss200Parser::TRUE_GS - 34)))) != 0) || _la == Gauss200Parser::OFF_GS) {
          setState(5261);
          boolean_value();
        }
        break;
      }

      case Gauss200Parser::FORMAT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5264);
        match(Gauss200Parser::FORMAT_GS);
        setState(5265);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::TEXT_GS

        || _la == Gauss200Parser::XML_GS || _la == Gauss200Parser::JSON_GS

        || _la == Gauss200Parser::YAML_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explain_plan_stmtContext ------------------------------------------------------------------

Gauss200Parser::Explain_plan_stmtContext::Explain_plan_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Explain_plan_stmtContext::EXPLAIN_GS() {
  return getToken(Gauss200Parser::EXPLAIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_plan_stmtContext::PLAN_GS() {
  return getToken(Gauss200Parser::PLAN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Explain_plan_stmtContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::StmtContext* Gauss200Parser::Explain_plan_stmtContext::stmt() {
  return getRuleContext<Gauss200Parser::StmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Explain_plan_stmtContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Assignment_stmtContext* Gauss200Parser::Explain_plan_stmtContext::assignment_stmt() {
  return getRuleContext<Gauss200Parser::Assignment_stmtContext>(0);
}


size_t Gauss200Parser::Explain_plan_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleExplain_plan_stmt;
}

void Gauss200Parser::Explain_plan_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplain_plan_stmt(this);
}

void Gauss200Parser::Explain_plan_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplain_plan_stmt(this);
}


antlrcpp::Any Gauss200Parser::Explain_plan_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExplain_plan_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Explain_plan_stmtContext* Gauss200Parser::explain_plan_stmt() {
  Explain_plan_stmtContext *_localctx = _tracker.createInstance<Explain_plan_stmtContext>(_ctx, getState());
  enterRule(_localctx, 820, Gauss200Parser::RuleExplain_plan_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5268);
    match(Gauss200Parser::EXPLAIN_GS);
    setState(5269);
    match(Gauss200Parser::PLAN_GS);
    setState(5272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::SET_GS) {
      setState(5270);
      match(Gauss200Parser::SET_GS);
      setState(5271);
      assignment_stmt();
    }
    setState(5274);
    match(Gauss200Parser::FOR_GS);
    setState(5275);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fetch_move_stmtContext ------------------------------------------------------------------

Gauss200Parser::Fetch_move_stmtContext::Fetch_move_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Cursor_nameContext* Gauss200Parser::Fetch_move_stmtContext::cursor_name() {
  return getRuleContext<Gauss200Parser::Cursor_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Fetch_move_stmtContext::FETCH_GS() {
  return getToken(Gauss200Parser::FETCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_move_stmtContext::MOVE_GS() {
  return getToken(Gauss200Parser::MOVE_GS, 0);
}

Gauss200Parser::Fetch_direction_clauseContext* Gauss200Parser::Fetch_move_stmtContext::fetch_direction_clause() {
  return getRuleContext<Gauss200Parser::Fetch_direction_clauseContext>(0);
}

tree::TerminalNode* Gauss200Parser::Fetch_move_stmtContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_move_stmtContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}


size_t Gauss200Parser::Fetch_move_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleFetch_move_stmt;
}

void Gauss200Parser::Fetch_move_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFetch_move_stmt(this);
}

void Gauss200Parser::Fetch_move_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFetch_move_stmt(this);
}


antlrcpp::Any Gauss200Parser::Fetch_move_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFetch_move_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Fetch_move_stmtContext* Gauss200Parser::fetch_move_stmt() {
  Fetch_move_stmtContext *_localctx = _tracker.createInstance<Fetch_move_stmtContext>(_ctx, getState());
  enterRule(_localctx, 822, Gauss200Parser::RuleFetch_move_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5277);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::FETCH_GS || _la == Gauss200Parser::MOVE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5281);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 625, _ctx)) {
    case 1: {
      setState(5278);
      fetch_direction_clause();
      setState(5279);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::FROM_GS

      || _la == Gauss200Parser::IN_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(5283);
    cursor_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fetch_direction_clauseContext ------------------------------------------------------------------

Gauss200Parser::Fetch_direction_clauseContext::Fetch_direction_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::NEXT_GS() {
  return getToken(Gauss200Parser::NEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::FIRST_GS() {
  return getToken(Gauss200Parser::FIRST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::LAST_GS() {
  return getToken(Gauss200Parser::LAST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::ICONST() {
  return getToken(Gauss200Parser::ICONST, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::ABSOLUTE_GS() {
  return getToken(Gauss200Parser::ABSOLUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::RELATIVE_GS() {
  return getToken(Gauss200Parser::RELATIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::FORWARD_GS() {
  return getToken(Gauss200Parser::FORWARD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::BACKWARD_GS() {
  return getToken(Gauss200Parser::BACKWARD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Fetch_direction_clauseContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}


size_t Gauss200Parser::Fetch_direction_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleFetch_direction_clause;
}

void Gauss200Parser::Fetch_direction_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFetch_direction_clause(this);
}

void Gauss200Parser::Fetch_direction_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFetch_direction_clause(this);
}


antlrcpp::Any Gauss200Parser::Fetch_direction_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFetch_direction_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Fetch_direction_clauseContext* Gauss200Parser::fetch_direction_clause() {
  Fetch_direction_clauseContext *_localctx = _tracker.createInstance<Fetch_direction_clauseContext>(_ctx, getState());
  enterRule(_localctx, 824, Gauss200Parser::RuleFetch_direction_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5298);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 628, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5285);
      match(Gauss200Parser::NEXT_GS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5286);
      match(Gauss200Parser::FIRST_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5287);
      match(Gauss200Parser::LAST_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5289);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::ABSOLUTE_GS

      || _la == Gauss200Parser::BACKWARD_GS || _la == Gauss200Parser::FORWARD_GS || _la == Gauss200Parser::RELATIVE_GS) {
        setState(5288);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::ABSOLUTE_GS

        || _la == Gauss200Parser::BACKWARD_GS || _la == Gauss200Parser::FORWARD_GS || _la == Gauss200Parser::RELATIVE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5291);
      match(Gauss200Parser::ICONST);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5293);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::BACKWARD_GS || _la == Gauss200Parser::FORWARD_GS) {
        setState(5292);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::BACKWARD_GS || _la == Gauss200Parser::FORWARD_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5295);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5296);
      match(Gauss200Parser::FORWARD_GS);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5297);
      match(Gauss200Parser::BACKWARD_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_stmtContext ------------------------------------------------------------------

Gauss200Parser::Grant_stmtContext::Grant_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Grant_stmtContext::GRANT_GS() {
  return getToken(Gauss200Parser::GRANT_GS, 0);
}

Gauss200Parser::Privileges_for_objContext* Gauss200Parser::Grant_stmtContext::privileges_for_obj() {
  return getRuleContext<Gauss200Parser::Privileges_for_objContext>(0);
}

tree::TerminalNode* Gauss200Parser::Grant_stmtContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Grant_stmtContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Grant_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Grant_on_optionContext* Gauss200Parser::Grant_stmtContext::grant_on_option() {
  return getRuleContext<Gauss200Parser::Grant_on_optionContext>(0);
}

Gauss200Parser::With_grant_optionContext* Gauss200Parser::Grant_stmtContext::with_grant_option() {
  return getRuleContext<Gauss200Parser::With_grant_optionContext>(0);
}

std::vector<Gauss200Parser::Role_nameContext *> Gauss200Parser::Grant_stmtContext::role_name() {
  return getRuleContexts<Gauss200Parser::Role_nameContext>();
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Grant_stmtContext::role_name(size_t i) {
  return getRuleContext<Gauss200Parser::Role_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Grant_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Grant_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Grant_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_stmt;
}

void Gauss200Parser::Grant_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_stmt(this);
}

void Gauss200Parser::Grant_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_stmt(this);
}


antlrcpp::Any Gauss200Parser::Grant_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_stmtContext* Gauss200Parser::grant_stmt() {
  Grant_stmtContext *_localctx = _tracker.createInstance<Grant_stmtContext>(_ctx, getState());
  enterRule(_localctx, 826, Gauss200Parser::RuleGrant_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5325);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 633, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5300);
      match(Gauss200Parser::GRANT_GS);
      setState(5301);
      privileges_for_obj();
      setState(5304);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::ON_GS) {
        setState(5302);
        match(Gauss200Parser::ON_GS);
        setState(5303);
        grant_on_option();
      }
      setState(5306);
      match(Gauss200Parser::TO_GS);
      setState(5307);
      grant_revoke_objects();
      setState(5309);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(5308);
        with_grant_option();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5311);
      match(Gauss200Parser::GRANT_GS);
      setState(5312);
      role_name();
      setState(5317);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5313);
        match(Gauss200Parser::COMMA);
        setState(5314);
        role_name();
        setState(5319);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5320);
      match(Gauss200Parser::TO_GS);
      setState(5321);
      grant_revoke_objects();
      setState(5323);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::WITH_GS) {
        setState(5322);
        with_grant_option();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Privileges_for_objContext ------------------------------------------------------------------

Gauss200Parser::Privileges_for_objContext::Privileges_for_objContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Table_privilegesContext* Gauss200Parser::Privileges_for_objContext::table_privileges() {
  return getRuleContext<Gauss200Parser::Table_privilegesContext>(0);
}

Gauss200Parser::All_privilegesContext* Gauss200Parser::Privileges_for_objContext::all_privileges() {
  return getRuleContext<Gauss200Parser::All_privilegesContext>(0);
}

std::vector<Gauss200Parser::Table_privilegeContext *> Gauss200Parser::Privileges_for_objContext::table_privilege() {
  return getRuleContexts<Gauss200Parser::Table_privilegeContext>();
}

Gauss200Parser::Table_privilegeContext* Gauss200Parser::Privileges_for_objContext::table_privilege(size_t i) {
  return getRuleContext<Gauss200Parser::Table_privilegeContext>(i);
}

std::vector<Gauss200Parser::Paren_column_listContext *> Gauss200Parser::Privileges_for_objContext::paren_column_list() {
  return getRuleContexts<Gauss200Parser::Paren_column_listContext>();
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Privileges_for_objContext::paren_column_list(size_t i) {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Privileges_for_objContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Privileges_for_objContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Database_privilegesContext* Gauss200Parser::Privileges_for_objContext::database_privileges() {
  return getRuleContext<Gauss200Parser::Database_privilegesContext>(0);
}

tree::TerminalNode* Gauss200Parser::Privileges_for_objContext::USAGE_GS() {
  return getToken(Gauss200Parser::USAGE_GS, 0);
}

Gauss200Parser::Function_privilegeContext* Gauss200Parser::Privileges_for_objContext::function_privilege() {
  return getRuleContext<Gauss200Parser::Function_privilegeContext>(0);
}

std::vector<Gauss200Parser::Cluster_privilegeContext *> Gauss200Parser::Privileges_for_objContext::cluster_privilege() {
  return getRuleContexts<Gauss200Parser::Cluster_privilegeContext>();
}

Gauss200Parser::Cluster_privilegeContext* Gauss200Parser::Privileges_for_objContext::cluster_privilege(size_t i) {
  return getRuleContext<Gauss200Parser::Cluster_privilegeContext>(i);
}

tree::TerminalNode* Gauss200Parser::Privileges_for_objContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Privileges_for_objContext::PRIVILEGE_GS() {
  return getToken(Gauss200Parser::PRIVILEGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Privileges_for_objContext::READ_GS() {
  return getToken(Gauss200Parser::READ_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Privileges_for_objContext::WRITE_GS() {
  return getToken(Gauss200Parser::WRITE_GS, 0);
}


size_t Gauss200Parser::Privileges_for_objContext::getRuleIndex() const {
  return Gauss200Parser::RulePrivileges_for_obj;
}

void Gauss200Parser::Privileges_for_objContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivileges_for_obj(this);
}

void Gauss200Parser::Privileges_for_objContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivileges_for_obj(this);
}


antlrcpp::Any Gauss200Parser::Privileges_for_objContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPrivileges_for_obj(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Privileges_for_objContext* Gauss200Parser::privileges_for_obj() {
  Privileges_for_objContext *_localctx = _tracker.createInstance<Privileges_for_objContext>(_ctx, getState());
  enterRule(_localctx, 828, Gauss200Parser::RulePrivileges_for_obj);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5374);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 642, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5329);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::REFERENCES_GS:
        case Gauss200Parser::SELECT_GS:
        case Gauss200Parser::DELETE_GS:
        case Gauss200Parser::INSERT_GS:
        case Gauss200Parser::TRUNCATE_GS:
        case Gauss200Parser::UPDATE_GS: {
          setState(5327);
          table_privileges();
          break;
        }

        case Gauss200Parser::ALL_GS: {
          setState(5328);
          all_privileges();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5345);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::REFERENCES_GS:
        case Gauss200Parser::SELECT_GS:
        case Gauss200Parser::DELETE_GS:
        case Gauss200Parser::INSERT_GS:
        case Gauss200Parser::TRUNCATE_GS:
        case Gauss200Parser::UPDATE_GS: {
          setState(5331);
          table_privilege();
          setState(5332);
          paren_column_list();
          setState(5339);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Gauss200Parser::COMMA) {
            setState(5333);
            match(Gauss200Parser::COMMA);
            setState(5334);
            table_privilege();
            setState(5335);
            paren_column_list();
            setState(5341);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case Gauss200Parser::ALL_GS: {
          setState(5342);
          all_privileges();
          setState(5343);
          paren_column_list();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5349);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::CREATE_GS:
        case Gauss200Parser::TEMPORARY_GS:
        case Gauss200Parser::TEMP_GS:
        case Gauss200Parser::CONNECT_GS: {
          setState(5347);
          database_privileges();
          break;
        }

        case Gauss200Parser::ALL_GS: {
          setState(5348);
          all_privileges();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5353);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::USAGE_GS: {
          setState(5351);
          match(Gauss200Parser::USAGE_GS);
          break;
        }

        case Gauss200Parser::ALL_GS: {
          setState(5352);
          all_privileges();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5357);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::EXECUTE_GS: {
          setState(5355);
          function_privilege();
          break;
        }

        case Gauss200Parser::ALL_GS: {
          setState(5356);
          all_privileges();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5359);
      cluster_privilege();
      setState(5364);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5360);
        match(Gauss200Parser::COMMA);
        setState(5361);
        cluster_privilege();
        setState(5366);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5367);
      match(Gauss200Parser::ALL_GS);
      setState(5368);
      match(Gauss200Parser::PRIVILEGE_GS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5372);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::READ_GS: {
          setState(5369);
          match(Gauss200Parser::READ_GS);
          break;
        }

        case Gauss200Parser::WRITE_GS: {
          setState(5370);
          match(Gauss200Parser::WRITE_GS);
          break;
        }

        case Gauss200Parser::ALL_GS: {
          setState(5371);
          all_privileges();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Database_privilegesContext ------------------------------------------------------------------

Gauss200Parser::Database_privilegesContext::Database_privilegesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Database_privilegeContext *> Gauss200Parser::Database_privilegesContext::database_privilege() {
  return getRuleContexts<Gauss200Parser::Database_privilegeContext>();
}

Gauss200Parser::Database_privilegeContext* Gauss200Parser::Database_privilegesContext::database_privilege(size_t i) {
  return getRuleContext<Gauss200Parser::Database_privilegeContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Database_privilegesContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Database_privilegesContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Database_privilegesContext::getRuleIndex() const {
  return Gauss200Parser::RuleDatabase_privileges;
}

void Gauss200Parser::Database_privilegesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDatabase_privileges(this);
}

void Gauss200Parser::Database_privilegesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDatabase_privileges(this);
}


antlrcpp::Any Gauss200Parser::Database_privilegesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDatabase_privileges(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Database_privilegesContext* Gauss200Parser::database_privileges() {
  Database_privilegesContext *_localctx = _tracker.createInstance<Database_privilegesContext>(_ctx, getState());
  enterRule(_localctx, 830, Gauss200Parser::RuleDatabase_privileges);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5376);
    database_privilege();
    setState(5381);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5377);
      match(Gauss200Parser::COMMA);
      setState(5378);
      database_privilege();
      setState(5383);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Database_privilegeContext ------------------------------------------------------------------

Gauss200Parser::Database_privilegeContext::Database_privilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Database_privilegeContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Database_privilegeContext::CONNECT_GS() {
  return getToken(Gauss200Parser::CONNECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Database_privilegeContext::TEMPORARY_GS() {
  return getToken(Gauss200Parser::TEMPORARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Database_privilegeContext::TEMP_GS() {
  return getToken(Gauss200Parser::TEMP_GS, 0);
}


size_t Gauss200Parser::Database_privilegeContext::getRuleIndex() const {
  return Gauss200Parser::RuleDatabase_privilege;
}

void Gauss200Parser::Database_privilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDatabase_privilege(this);
}

void Gauss200Parser::Database_privilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDatabase_privilege(this);
}


antlrcpp::Any Gauss200Parser::Database_privilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDatabase_privilege(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Database_privilegeContext* Gauss200Parser::database_privilege() {
  Database_privilegeContext *_localctx = _tracker.createInstance<Database_privilegeContext>(_ctx, getState());
  enterRule(_localctx, 832, Gauss200Parser::RuleDatabase_privilege);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5384);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::CREATE_GS || _la == Gauss200Parser::TEMPORARY_GS

    || _la == Gauss200Parser::TEMP_GS || _la == Gauss200Parser::CONNECT_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cluster_privilegeContext ------------------------------------------------------------------

Gauss200Parser::Cluster_privilegeContext::Cluster_privilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Cluster_privilegeContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cluster_privilegeContext::USAGE_GS() {
  return getToken(Gauss200Parser::USAGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Cluster_privilegeContext::COMPUTE_GS() {
  return getToken(Gauss200Parser::COMPUTE_GS, 0);
}


size_t Gauss200Parser::Cluster_privilegeContext::getRuleIndex() const {
  return Gauss200Parser::RuleCluster_privilege;
}

void Gauss200Parser::Cluster_privilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCluster_privilege(this);
}

void Gauss200Parser::Cluster_privilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCluster_privilege(this);
}


antlrcpp::Any Gauss200Parser::Cluster_privilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCluster_privilege(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Cluster_privilegeContext* Gauss200Parser::cluster_privilege() {
  Cluster_privilegeContext *_localctx = _tracker.createInstance<Cluster_privilegeContext>(_ctx, getState());
  enterRule(_localctx, 834, Gauss200Parser::RuleCluster_privilege);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5386);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::CREATE_GS || _la == Gauss200Parser::USAGE_GS

    || _la == Gauss200Parser::COMPUTE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_on_optionContext ------------------------------------------------------------------

Gauss200Parser::Grant_on_optionContext::Grant_on_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Table_nameContext *> Gauss200Parser::Grant_on_optionContext::table_name() {
  return getRuleContexts<Gauss200Parser::Table_nameContext>();
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Grant_on_optionContext::table_name(size_t i) {
  return getRuleContext<Gauss200Parser::Table_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::TABLES_GS() {
  return getToken(Gauss200Parser::TABLES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

Gauss200Parser::Schema_name_listContext* Gauss200Parser::Grant_on_optionContext::schema_name_list() {
  return getRuleContext<Gauss200Parser::Schema_name_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Grant_on_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

std::vector<Gauss200Parser::Database_nameContext *> Gauss200Parser::Grant_on_optionContext::database_name() {
  return getRuleContexts<Gauss200Parser::Database_nameContext>();
}

Gauss200Parser::Database_nameContext* Gauss200Parser::Grant_on_optionContext::database_name(size_t i) {
  return getRuleContext<Gauss200Parser::Database_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::WRAPPER_GS() {
  return getToken(Gauss200Parser::WRAPPER_GS, 0);
}

std::vector<Gauss200Parser::Object_nameContext *> Gauss200Parser::Grant_on_optionContext::object_name() {
  return getRuleContexts<Gauss200Parser::Object_nameContext>();
}

Gauss200Parser::Object_nameContext* Gauss200Parser::Grant_on_optionContext::object_name(size_t i) {
  return getRuleContext<Gauss200Parser::Object_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

std::vector<Gauss200Parser::Server_nameContext *> Gauss200Parser::Grant_on_optionContext::server_name() {
  return getRuleContexts<Gauss200Parser::Server_nameContext>();
}

Gauss200Parser::Server_nameContext* Gauss200Parser::Grant_on_optionContext::server_name(size_t i) {
  return getRuleContext<Gauss200Parser::Server_nameContext>(i);
}

Gauss200Parser::Grant_on_function_option_listContext* Gauss200Parser::Grant_on_optionContext::grant_on_function_option_list() {
  return getRuleContext<Gauss200Parser::Grant_on_function_option_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::FUNCTIONS_GS() {
  return getToken(Gauss200Parser::FUNCTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::LANGUAGE_GS() {
  return getToken(Gauss200Parser::LANGUAGE_GS, 0);
}

std::vector<Gauss200Parser::Lang_nameContext *> Gauss200Parser::Grant_on_optionContext::lang_name() {
  return getRuleContexts<Gauss200Parser::Lang_nameContext>();
}

Gauss200Parser::Lang_nameContext* Gauss200Parser::Grant_on_optionContext::lang_name(size_t i) {
  return getRuleContext<Gauss200Parser::Lang_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

std::vector<Gauss200Parser::Group_nameContext *> Gauss200Parser::Grant_on_optionContext::group_name() {
  return getRuleContexts<Gauss200Parser::Group_nameContext>();
}

Gauss200Parser::Group_nameContext* Gauss200Parser::Grant_on_optionContext::group_name(size_t i) {
  return getRuleContext<Gauss200Parser::Group_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}

std::vector<Gauss200Parser::Tablespace_nameContext *> Gauss200Parser::Grant_on_optionContext::tablespace_name() {
  return getRuleContexts<Gauss200Parser::Tablespace_nameContext>();
}

Gauss200Parser::Tablespace_nameContext* Gauss200Parser::Grant_on_optionContext::tablespace_name(size_t i) {
  return getRuleContext<Gauss200Parser::Tablespace_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

std::vector<Gauss200Parser::Type_nameContext *> Gauss200Parser::Grant_on_optionContext::type_name() {
  return getRuleContexts<Gauss200Parser::Type_nameContext>();
}

Gauss200Parser::Type_nameContext* Gauss200Parser::Grant_on_optionContext::type_name(size_t i) {
  return getRuleContext<Gauss200Parser::Type_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::SOURCE_GS() {
  return getToken(Gauss200Parser::SOURCE_GS, 0);
}

std::vector<Gauss200Parser::Src_nameContext *> Gauss200Parser::Grant_on_optionContext::src_name() {
  return getRuleContexts<Gauss200Parser::Src_nameContext>();
}

Gauss200Parser::Src_nameContext* Gauss200Parser::Grant_on_optionContext::src_name(size_t i) {
  return getRuleContext<Gauss200Parser::Src_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Grant_on_optionContext::DIRECTORY_GS() {
  return getToken(Gauss200Parser::DIRECTORY_GS, 0);
}

std::vector<Gauss200Parser::Directory_nameContext *> Gauss200Parser::Grant_on_optionContext::directory_name() {
  return getRuleContexts<Gauss200Parser::Directory_nameContext>();
}

Gauss200Parser::Directory_nameContext* Gauss200Parser::Grant_on_optionContext::directory_name(size_t i) {
  return getRuleContext<Gauss200Parser::Directory_nameContext>(i);
}


size_t Gauss200Parser::Grant_on_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_on_option;
}

void Gauss200Parser::Grant_on_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_on_option(this);
}

void Gauss200Parser::Grant_on_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_on_option(this);
}


antlrcpp::Any Gauss200Parser::Grant_on_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_on_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_on_optionContext* Gauss200Parser::grant_on_option() {
  Grant_on_optionContext *_localctx = _tracker.createInstance<Grant_on_optionContext>(_ctx, getState());
  enterRule(_localctx, 836, Gauss200Parser::RuleGrant_on_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 657, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5404);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 646, _ctx)) {
      case 1: {
        setState(5389);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::TABLE_GS) {
          setState(5388);
          match(Gauss200Parser::TABLE_GS);
        }
        setState(5391);
        table_name();
        setState(5396);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::COMMA) {
          setState(5392);
          match(Gauss200Parser::COMMA);
          setState(5393);
          table_name();
          setState(5398);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(5399);
        match(Gauss200Parser::ALL_GS);
        setState(5400);
        match(Gauss200Parser::TABLES_GS);
        setState(5401);
        match(Gauss200Parser::IN_GS);
        setState(5402);
        match(Gauss200Parser::SCHEMA_GS);
        setState(5403);
        schema_name_list();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5406);
      match(Gauss200Parser::DATABASE_GS);
      setState(5407);
      database_name();
      setState(5412);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5408);
        match(Gauss200Parser::COMMA);
        setState(5409);
        database_name();
        setState(5414);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5415);
      match(Gauss200Parser::FOREIGN_GS);
      setState(5416);
      match(Gauss200Parser::DATA_GS);
      setState(5417);
      match(Gauss200Parser::WRAPPER_GS);
      setState(5418);
      object_name();
      setState(5423);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5419);
        match(Gauss200Parser::COMMA);
        setState(5420);
        object_name();
        setState(5425);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5426);
      match(Gauss200Parser::FOREIGN_GS);
      setState(5427);
      match(Gauss200Parser::SERVER_GS);
      setState(5428);
      server_name();
      setState(5433);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5429);
        match(Gauss200Parser::COMMA);
        setState(5430);
        server_name();
        setState(5435);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5442);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::FUNCTION_GS: {
          setState(5436);
          grant_on_function_option_list();
          break;
        }

        case Gauss200Parser::ALL_GS: {
          setState(5437);
          match(Gauss200Parser::ALL_GS);
          setState(5438);
          match(Gauss200Parser::FUNCTIONS_GS);
          setState(5439);
          match(Gauss200Parser::IN_GS);
          setState(5440);
          match(Gauss200Parser::SCHEMA_GS);
          setState(5441);
          schema_name_list();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5444);
      match(Gauss200Parser::LANGUAGE_GS);
      setState(5445);
      lang_name();
      setState(5450);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5446);
        match(Gauss200Parser::COMMA);
        setState(5447);
        lang_name();
        setState(5452);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5453);
      match(Gauss200Parser::NODE_GS);
      setState(5454);
      match(Gauss200Parser::GROUP_GS);
      setState(5455);
      group_name();
      setState(5460);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5456);
        match(Gauss200Parser::COMMA);
        setState(5457);
        group_name();
        setState(5462);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5463);
      match(Gauss200Parser::SCHEMA_GS);
      setState(5464);
      schema_name_list();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5465);
      match(Gauss200Parser::TABLESPACE_GS);
      setState(5466);
      tablespace_name();
      setState(5471);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5467);
        match(Gauss200Parser::COMMA);
        setState(5468);
        tablespace_name();
        setState(5473);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(5474);
      match(Gauss200Parser::TYPE_GS);
      setState(5475);
      type_name();
      setState(5480);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5476);
        match(Gauss200Parser::COMMA);
        setState(5477);
        type_name();
        setState(5482);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(5483);
      match(Gauss200Parser::DATA_GS);
      setState(5484);
      match(Gauss200Parser::SOURCE_GS);
      setState(5485);
      src_name();
      setState(5490);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5486);
        match(Gauss200Parser::COMMA);
        setState(5487);
        src_name();
        setState(5492);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(5493);
      match(Gauss200Parser::DIRECTORY_GS);
      setState(5494);
      directory_name();
      setState(5499);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5495);
        match(Gauss200Parser::COMMA);
        setState(5496);
        directory_name();
        setState(5501);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_on_function_option_listContext ------------------------------------------------------------------

Gauss200Parser::Grant_on_function_option_listContext::Grant_on_function_option_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Grant_on_function_optionContext *> Gauss200Parser::Grant_on_function_option_listContext::grant_on_function_option() {
  return getRuleContexts<Gauss200Parser::Grant_on_function_optionContext>();
}

Gauss200Parser::Grant_on_function_optionContext* Gauss200Parser::Grant_on_function_option_listContext::grant_on_function_option(size_t i) {
  return getRuleContext<Gauss200Parser::Grant_on_function_optionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Grant_on_function_option_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Grant_on_function_option_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Grant_on_function_option_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_on_function_option_list;
}

void Gauss200Parser::Grant_on_function_option_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_on_function_option_list(this);
}

void Gauss200Parser::Grant_on_function_option_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_on_function_option_list(this);
}


antlrcpp::Any Gauss200Parser::Grant_on_function_option_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_on_function_option_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_on_function_option_listContext* Gauss200Parser::grant_on_function_option_list() {
  Grant_on_function_option_listContext *_localctx = _tracker.createInstance<Grant_on_function_option_listContext>(_ctx, getState());
  enterRule(_localctx, 838, Gauss200Parser::RuleGrant_on_function_option_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5504);
    grant_on_function_option();
    setState(5509);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5505);
      match(Gauss200Parser::COMMA);
      setState(5506);
      grant_on_function_option();
      setState(5511);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_on_function_optionContext ------------------------------------------------------------------

Gauss200Parser::Grant_on_function_optionContext::Grant_on_function_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Grant_on_function_optionContext::FUNCTION_GS() {
  return getToken(Gauss200Parser::FUNCTION_GS, 0);
}

Gauss200Parser::Function_with_argtypesContext* Gauss200Parser::Grant_on_function_optionContext::function_with_argtypes() {
  return getRuleContext<Gauss200Parser::Function_with_argtypesContext>(0);
}


size_t Gauss200Parser::Grant_on_function_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleGrant_on_function_option;
}

void Gauss200Parser::Grant_on_function_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_on_function_option(this);
}

void Gauss200Parser::Grant_on_function_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_on_function_option(this);
}


antlrcpp::Any Gauss200Parser::Grant_on_function_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGrant_on_function_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Grant_on_function_optionContext* Gauss200Parser::grant_on_function_option() {
  Grant_on_function_optionContext *_localctx = _tracker.createInstance<Grant_on_function_optionContext>(_ctx, getState());
  enterRule(_localctx, 840, Gauss200Parser::RuleGrant_on_function_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5512);
    match(Gauss200Parser::FUNCTION_GS);
    setState(5513);
    function_with_argtypes();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lock_stmtContext ------------------------------------------------------------------

Gauss200Parser::Lock_stmtContext::Lock_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Lock_stmtContext::LOCK_GS() {
  return getToken(Gauss200Parser::LOCK_GS, 0);
}

std::vector<Gauss200Parser::Alter_table_nameContext *> Gauss200Parser::Lock_stmtContext::alter_table_name() {
  return getRuleContexts<Gauss200Parser::Alter_table_nameContext>();
}

Gauss200Parser::Alter_table_nameContext* Gauss200Parser::Lock_stmtContext::alter_table_name(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_table_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Lock_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

Gauss200Parser::Lock_in_modeContext* Gauss200Parser::Lock_stmtContext::lock_in_mode() {
  return getRuleContext<Gauss200Parser::Lock_in_modeContext>(0);
}

tree::TerminalNode* Gauss200Parser::Lock_stmtContext::NOWAIT_GS() {
  return getToken(Gauss200Parser::NOWAIT_GS, 0);
}


size_t Gauss200Parser::Lock_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleLock_stmt;
}

void Gauss200Parser::Lock_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLock_stmt(this);
}

void Gauss200Parser::Lock_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLock_stmt(this);
}


antlrcpp::Any Gauss200Parser::Lock_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLock_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Lock_stmtContext* Gauss200Parser::lock_stmt() {
  Lock_stmtContext *_localctx = _tracker.createInstance<Lock_stmtContext>(_ctx, getState());
  enterRule(_localctx, 842, Gauss200Parser::RuleLock_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5515);
    match(Gauss200Parser::LOCK_GS);
    setState(5517);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLE_GS) {
      setState(5516);
      match(Gauss200Parser::TABLE_GS);
    }
    setState(5519);
    alter_table_name();
    setState(5523);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 660, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5520);
        alter_table_name(); 
      }
      setState(5525);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 660, _ctx);
    }
    setState(5527);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::IN_GS) {
      setState(5526);
      lock_in_mode();
    }
    setState(5530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::NOWAIT_GS) {
      setState(5529);
      match(Gauss200Parser::NOWAIT_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lock_in_modeContext ------------------------------------------------------------------

Gauss200Parser::Lock_in_modeContext::Lock_in_modeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Lock_in_modeContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

Gauss200Parser::In_mode_optionContext* Gauss200Parser::Lock_in_modeContext::in_mode_option() {
  return getRuleContext<Gauss200Parser::In_mode_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Lock_in_modeContext::MODE_GS() {
  return getToken(Gauss200Parser::MODE_GS, 0);
}


size_t Gauss200Parser::Lock_in_modeContext::getRuleIndex() const {
  return Gauss200Parser::RuleLock_in_mode;
}

void Gauss200Parser::Lock_in_modeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLock_in_mode(this);
}

void Gauss200Parser::Lock_in_modeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLock_in_mode(this);
}


antlrcpp::Any Gauss200Parser::Lock_in_modeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLock_in_mode(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Lock_in_modeContext* Gauss200Parser::lock_in_mode() {
  Lock_in_modeContext *_localctx = _tracker.createInstance<Lock_in_modeContext>(_ctx, getState());
  enterRule(_localctx, 844, Gauss200Parser::RuleLock_in_mode);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5532);
    match(Gauss200Parser::IN_GS);
    setState(5533);
    in_mode_option();
    setState(5534);
    match(Gauss200Parser::MODE_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- In_mode_optionContext ------------------------------------------------------------------

Gauss200Parser::In_mode_optionContext::In_mode_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::In_mode_optionContext::SHARE_GS() {
  return getToken(Gauss200Parser::SHARE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::In_mode_optionContext::EXCLUSIVE_GS() {
  return getToken(Gauss200Parser::EXCLUSIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::In_mode_optionContext::ACCESS_GS() {
  return getToken(Gauss200Parser::ACCESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::In_mode_optionContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::In_mode_optionContext::UPDATE_GS() {
  return getToken(Gauss200Parser::UPDATE_GS, 0);
}


size_t Gauss200Parser::In_mode_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleIn_mode_option;
}

void Gauss200Parser::In_mode_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIn_mode_option(this);
}

void Gauss200Parser::In_mode_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIn_mode_option(this);
}


antlrcpp::Any Gauss200Parser::In_mode_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIn_mode_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::In_mode_optionContext* Gauss200Parser::in_mode_option() {
  In_mode_optionContext *_localctx = _tracker.createInstance<In_mode_optionContext>(_ctx, getState());
  enterRule(_localctx, 846, Gauss200Parser::RuleIn_mode_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5543);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 664, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5537);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::ACCESS_GS || _la == Gauss200Parser::ROW_GS) {
        setState(5536);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::ACCESS_GS || _la == Gauss200Parser::ROW_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5539);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::EXCLUSIVE_GS || _la == Gauss200Parser::SHARE_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5540);
      match(Gauss200Parser::SHARE_GS);
      setState(5541);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::UPDATE_GS

      || _la == Gauss200Parser::ROW_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5542);
      match(Gauss200Parser::EXCLUSIVE_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prepare_stmtContext ------------------------------------------------------------------

Gauss200Parser::Prepare_stmtContext::Prepare_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Prepare_stmtContext::PREPARE_GS() {
  return getToken(Gauss200Parser::PREPARE_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Prepare_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Prepare_stmtContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::StmtContext* Gauss200Parser::Prepare_stmtContext::stmt() {
  return getRuleContext<Gauss200Parser::StmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Prepare_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Typename_gsContext *> Gauss200Parser::Prepare_stmtContext::typename_gs() {
  return getRuleContexts<Gauss200Parser::Typename_gsContext>();
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Prepare_stmtContext::typename_gs(size_t i) {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(i);
}

tree::TerminalNode* Gauss200Parser::Prepare_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Prepare_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Prepare_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Prepare_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RulePrepare_stmt;
}

void Gauss200Parser::Prepare_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrepare_stmt(this);
}

void Gauss200Parser::Prepare_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrepare_stmt(this);
}


antlrcpp::Any Gauss200Parser::Prepare_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPrepare_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Prepare_stmtContext* Gauss200Parser::prepare_stmt() {
  Prepare_stmtContext *_localctx = _tracker.createInstance<Prepare_stmtContext>(_ctx, getState());
  enterRule(_localctx, 848, Gauss200Parser::RulePrepare_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5545);
    match(Gauss200Parser::PREPARE_GS);
    setState(5546);
    identifier();
    setState(5558);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(5547);
      match(Gauss200Parser::LEFT_PAREN);
      setState(5548);
      typename_gs();
      setState(5553);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5549);
        match(Gauss200Parser::COMMA);
        setState(5550);
        typename_gs();
        setState(5555);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5556);
      match(Gauss200Parser::RIGHT_PAREN);
    }
    setState(5560);
    match(Gauss200Parser::AS_GS);
    setState(5561);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prepare_transaction_stmtContext ------------------------------------------------------------------

Gauss200Parser::Prepare_transaction_stmtContext::Prepare_transaction_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Prepare_transaction_stmtContext::PREPARE_GS() {
  return getToken(Gauss200Parser::PREPARE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Prepare_transaction_stmtContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Prepare_transaction_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Prepare_transaction_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RulePrepare_transaction_stmt;
}

void Gauss200Parser::Prepare_transaction_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrepare_transaction_stmt(this);
}

void Gauss200Parser::Prepare_transaction_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrepare_transaction_stmt(this);
}


antlrcpp::Any Gauss200Parser::Prepare_transaction_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPrepare_transaction_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Prepare_transaction_stmtContext* Gauss200Parser::prepare_transaction_stmt() {
  Prepare_transaction_stmtContext *_localctx = _tracker.createInstance<Prepare_transaction_stmtContext>(_ctx, getState());
  enterRule(_localctx, 850, Gauss200Parser::RulePrepare_transaction_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5563);
    match(Gauss200Parser::PREPARE_GS);
    setState(5564);
    match(Gauss200Parser::TRANSACTION_GS);
    setState(5565);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_into_stmtContext ------------------------------------------------------------------

Gauss200Parser::Merge_into_stmtContext::Merge_into_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Merge_into_stmtContext::MERGE_GS() {
  return getToken(Gauss200Parser::MERGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Merge_into_stmtContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}

std::vector<Gauss200Parser::Table_nameContext *> Gauss200Parser::Merge_into_stmtContext::table_name() {
  return getRuleContexts<Gauss200Parser::Table_nameContext>();
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Merge_into_stmtContext::table_name(size_t i) {
  return getRuleContext<Gauss200Parser::Table_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Merge_into_stmtContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

Gauss200Parser::On_condition_clauseContext* Gauss200Parser::Merge_into_stmtContext::on_condition_clause() {
  return getRuleContext<Gauss200Parser::On_condition_clauseContext>(0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Merge_into_stmtContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

std::vector<Gauss200Parser::As_aliasContext *> Gauss200Parser::Merge_into_stmtContext::as_alias() {
  return getRuleContexts<Gauss200Parser::As_aliasContext>();
}

Gauss200Parser::As_aliasContext* Gauss200Parser::Merge_into_stmtContext::as_alias(size_t i) {
  return getRuleContext<Gauss200Parser::As_aliasContext>(i);
}

Gauss200Parser::When_matched_update_clauseContext* Gauss200Parser::Merge_into_stmtContext::when_matched_update_clause() {
  return getRuleContext<Gauss200Parser::When_matched_update_clauseContext>(0);
}

Gauss200Parser::When_not_matched_insert_clauseContext* Gauss200Parser::Merge_into_stmtContext::when_not_matched_insert_clause() {
  return getRuleContext<Gauss200Parser::When_not_matched_insert_clauseContext>(0);
}


size_t Gauss200Parser::Merge_into_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleMerge_into_stmt;
}

void Gauss200Parser::Merge_into_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_into_stmt(this);
}

void Gauss200Parser::Merge_into_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_into_stmt(this);
}


antlrcpp::Any Gauss200Parser::Merge_into_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitMerge_into_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Merge_into_stmtContext* Gauss200Parser::merge_into_stmt() {
  Merge_into_stmtContext *_localctx = _tracker.createInstance<Merge_into_stmtContext>(_ctx, getState());
  enterRule(_localctx, 852, Gauss200Parser::RuleMerge_into_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5567);
    match(Gauss200Parser::MERGE_GS);
    setState(5568);
    match(Gauss200Parser::INTO_GS);
    setState(5569);
    table_name();
    setState(5571);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 667, _ctx)) {
    case 1: {
      setState(5570);
      as_alias();
      break;
    }

    }
    setState(5573);
    match(Gauss200Parser::USING_GS);
    setState(5576);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 668, _ctx)) {
    case 1: {
      setState(5574);
      table_name();
      break;
    }

    case 2: {
      setState(5575);
      select_stmt();
      break;
    }

    }
    setState(5579);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 669, _ctx)) {
    case 1: {
      setState(5578);
      as_alias();
      break;
    }

    }
    setState(5581);
    on_condition_clause();
    setState(5583);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 670, _ctx)) {
    case 1: {
      setState(5582);
      when_matched_update_clause();
      break;
    }

    }
    setState(5586);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WHEN_GS) {
      setState(5585);
      when_not_matched_insert_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- On_condition_clauseContext ------------------------------------------------------------------

Gauss200Parser::On_condition_clauseContext::On_condition_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::On_condition_clauseContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::On_condition_clauseContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::On_condition_clauseContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::On_condition_clauseContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::On_condition_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleOn_condition_clause;
}

void Gauss200Parser::On_condition_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOn_condition_clause(this);
}

void Gauss200Parser::On_condition_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOn_condition_clause(this);
}


antlrcpp::Any Gauss200Parser::On_condition_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOn_condition_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::On_condition_clauseContext* Gauss200Parser::on_condition_clause() {
  On_condition_clauseContext *_localctx = _tracker.createInstance<On_condition_clauseContext>(_ctx, getState());
  enterRule(_localctx, 854, Gauss200Parser::RuleOn_condition_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5595);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 672, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5588);
      match(Gauss200Parser::ON_GS);
      setState(5589);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5590);
      match(Gauss200Parser::ON_GS);
      setState(5591);
      match(Gauss200Parser::LEFT_PAREN);
      setState(5592);
      expression();
      setState(5593);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_matched_update_clauseContext ------------------------------------------------------------------

Gauss200Parser::When_matched_update_clauseContext::When_matched_update_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::When_matched_update_clauseContext::WHEN_GS() {
  return getToken(Gauss200Parser::WHEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_matched_update_clauseContext::MATCHED_GS() {
  return getToken(Gauss200Parser::MATCHED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_matched_update_clauseContext::THEN_GS() {
  return getToken(Gauss200Parser::THEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_matched_update_clauseContext::UPDATE_GS() {
  return getToken(Gauss200Parser::UPDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_matched_update_clauseContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Update_set_column_optionContext* Gauss200Parser::When_matched_update_clauseContext::update_set_column_option() {
  return getRuleContext<Gauss200Parser::Update_set_column_optionContext>(0);
}

Gauss200Parser::Where_clauseContext* Gauss200Parser::When_matched_update_clauseContext::where_clause() {
  return getRuleContext<Gauss200Parser::Where_clauseContext>(0);
}


size_t Gauss200Parser::When_matched_update_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleWhen_matched_update_clause;
}

void Gauss200Parser::When_matched_update_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_matched_update_clause(this);
}

void Gauss200Parser::When_matched_update_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_matched_update_clause(this);
}


antlrcpp::Any Gauss200Parser::When_matched_update_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWhen_matched_update_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::When_matched_update_clauseContext* Gauss200Parser::when_matched_update_clause() {
  When_matched_update_clauseContext *_localctx = _tracker.createInstance<When_matched_update_clauseContext>(_ctx, getState());
  enterRule(_localctx, 856, Gauss200Parser::RuleWhen_matched_update_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5597);
    match(Gauss200Parser::WHEN_GS);
    setState(5598);
    match(Gauss200Parser::MATCHED_GS);
    setState(5599);
    match(Gauss200Parser::THEN_GS);
    setState(5600);
    match(Gauss200Parser::UPDATE_GS);
    setState(5601);
    match(Gauss200Parser::SET_GS);
    setState(5602);
    update_set_column_option();
    setState(5604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::WHERE_GS) {
      setState(5603);
      where_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_set_column_optionContext ------------------------------------------------------------------

Gauss200Parser::Update_set_column_optionContext::Update_set_column_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Assignment_stmt_listContext* Gauss200Parser::Update_set_column_optionContext::assignment_stmt_list() {
  return getRuleContext<Gauss200Parser::Assignment_stmt_listContext>(0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Update_set_column_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Update_set_column_optionContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Update_set_column_optionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Expr_defaultContext *> Gauss200Parser::Update_set_column_optionContext::expr_default() {
  return getRuleContexts<Gauss200Parser::Expr_defaultContext>();
}

Gauss200Parser::Expr_defaultContext* Gauss200Parser::Update_set_column_optionContext::expr_default(size_t i) {
  return getRuleContext<Gauss200Parser::Expr_defaultContext>(i);
}

tree::TerminalNode* Gauss200Parser::Update_set_column_optionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Simple_selectContext* Gauss200Parser::Update_set_column_optionContext::simple_select() {
  return getRuleContext<Gauss200Parser::Simple_selectContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Update_set_column_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Update_set_column_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Update_set_column_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleUpdate_set_column_option;
}

void Gauss200Parser::Update_set_column_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_set_column_option(this);
}

void Gauss200Parser::Update_set_column_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_set_column_option(this);
}


antlrcpp::Any Gauss200Parser::Update_set_column_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUpdate_set_column_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Update_set_column_optionContext* Gauss200Parser::update_set_column_option() {
  Update_set_column_optionContext *_localctx = _tracker.createInstance<Update_set_column_optionContext>(_ctx, getState());
  enterRule(_localctx, 858, Gauss200Parser::RuleUpdate_set_column_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5623);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 676, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5606);
      assignment_stmt_list();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5607);
      paren_column_list();
      setState(5608);
      match(Gauss200Parser::EQUALS_OP);
      setState(5621);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::LEFT_PAREN: {
          setState(5609);
          match(Gauss200Parser::LEFT_PAREN);
          setState(5610);
          expr_default();
          setState(5615);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Gauss200Parser::COMMA) {
            setState(5611);
            match(Gauss200Parser::COMMA);
            setState(5612);
            expr_default();
            setState(5617);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(5618);
          match(Gauss200Parser::RIGHT_PAREN);
          break;
        }

        case Gauss200Parser::SELECT_GS: {
          setState(5620);
          simple_select();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_not_matched_insert_clauseContext ------------------------------------------------------------------

Gauss200Parser::When_not_matched_insert_clauseContext::When_not_matched_insert_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::When_not_matched_insert_clauseContext::WHEN_GS() {
  return getToken(Gauss200Parser::WHEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_not_matched_insert_clauseContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_not_matched_insert_clauseContext::MATCHED_GS() {
  return getToken(Gauss200Parser::MATCHED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_not_matched_insert_clauseContext::THEN_GS() {
  return getToken(Gauss200Parser::THEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::When_not_matched_insert_clauseContext::INSERT_GS() {
  return getToken(Gauss200Parser::INSERT_GS, 0);
}

Gauss200Parser::Not_matched_insert_value_optionContext* Gauss200Parser::When_not_matched_insert_clauseContext::not_matched_insert_value_option() {
  return getRuleContext<Gauss200Parser::Not_matched_insert_value_optionContext>(0);
}


size_t Gauss200Parser::When_not_matched_insert_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleWhen_not_matched_insert_clause;
}

void Gauss200Parser::When_not_matched_insert_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_not_matched_insert_clause(this);
}

void Gauss200Parser::When_not_matched_insert_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_not_matched_insert_clause(this);
}


antlrcpp::Any Gauss200Parser::When_not_matched_insert_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWhen_not_matched_insert_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::When_not_matched_insert_clauseContext* Gauss200Parser::when_not_matched_insert_clause() {
  When_not_matched_insert_clauseContext *_localctx = _tracker.createInstance<When_not_matched_insert_clauseContext>(_ctx, getState());
  enterRule(_localctx, 860, Gauss200Parser::RuleWhen_not_matched_insert_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5625);
    match(Gauss200Parser::WHEN_GS);
    setState(5626);
    match(Gauss200Parser::NOT_GS);
    setState(5627);
    match(Gauss200Parser::MATCHED_GS);
    setState(5628);
    match(Gauss200Parser::THEN_GS);
    setState(5629);
    match(Gauss200Parser::INSERT_GS);
    setState(5630);
    not_matched_insert_value_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Not_matched_insert_value_optionContext ------------------------------------------------------------------

Gauss200Parser::Not_matched_insert_value_optionContext::Not_matched_insert_value_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Not_matched_insert_value_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Not_matched_insert_value_optionContext::VALUES_GS() {
  return getToken(Gauss200Parser::VALUES_GS, 0);
}

std::vector<Gauss200Parser::Not_matched_insert_valueContext *> Gauss200Parser::Not_matched_insert_value_optionContext::not_matched_insert_value() {
  return getRuleContexts<Gauss200Parser::Not_matched_insert_valueContext>();
}

Gauss200Parser::Not_matched_insert_valueContext* Gauss200Parser::Not_matched_insert_value_optionContext::not_matched_insert_value(size_t i) {
  return getRuleContext<Gauss200Parser::Not_matched_insert_valueContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Not_matched_insert_value_optionContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Not_matched_insert_value_optionContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Where_clauseContext* Gauss200Parser::Not_matched_insert_value_optionContext::where_clause() {
  return getRuleContext<Gauss200Parser::Where_clauseContext>(0);
}


size_t Gauss200Parser::Not_matched_insert_value_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleNot_matched_insert_value_option;
}

void Gauss200Parser::Not_matched_insert_value_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot_matched_insert_value_option(this);
}

void Gauss200Parser::Not_matched_insert_value_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot_matched_insert_value_option(this);
}


antlrcpp::Any Gauss200Parser::Not_matched_insert_value_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNot_matched_insert_value_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Not_matched_insert_value_optionContext* Gauss200Parser::not_matched_insert_value_option() {
  Not_matched_insert_value_optionContext *_localctx = _tracker.createInstance<Not_matched_insert_value_optionContext>(_ctx, getState());
  enterRule(_localctx, 862, Gauss200Parser::RuleNot_matched_insert_value_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5645);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::DEFAULT_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5632);
        match(Gauss200Parser::DEFAULT_GS);
        setState(5633);
        match(Gauss200Parser::VALUES_GS);
        break;
      }

      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(5634);
        not_matched_insert_value();
        setState(5639);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Gauss200Parser::COMMA) {
          setState(5635);
          match(Gauss200Parser::COMMA);
          setState(5636);
          not_matched_insert_value();
          setState(5641);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5643);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::WHERE_GS) {
          setState(5642);
          where_clause();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Not_matched_insert_valueContext ------------------------------------------------------------------

Gauss200Parser::Not_matched_insert_valueContext::Not_matched_insert_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Not_matched_insert_valueContext::VALUES_GS() {
  return getToken(Gauss200Parser::VALUES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Not_matched_insert_valueContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::Expr_defaultContext *> Gauss200Parser::Not_matched_insert_valueContext::expr_default() {
  return getRuleContexts<Gauss200Parser::Expr_defaultContext>();
}

Gauss200Parser::Expr_defaultContext* Gauss200Parser::Not_matched_insert_valueContext::expr_default(size_t i) {
  return getRuleContext<Gauss200Parser::Expr_defaultContext>(i);
}

tree::TerminalNode* Gauss200Parser::Not_matched_insert_valueContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Not_matched_insert_valueContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Not_matched_insert_valueContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Not_matched_insert_valueContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Not_matched_insert_valueContext::getRuleIndex() const {
  return Gauss200Parser::RuleNot_matched_insert_value;
}

void Gauss200Parser::Not_matched_insert_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot_matched_insert_value(this);
}

void Gauss200Parser::Not_matched_insert_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot_matched_insert_value(this);
}


antlrcpp::Any Gauss200Parser::Not_matched_insert_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNot_matched_insert_value(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Not_matched_insert_valueContext* Gauss200Parser::not_matched_insert_value() {
  Not_matched_insert_valueContext *_localctx = _tracker.createInstance<Not_matched_insert_valueContext>(_ctx, getState());
  enterRule(_localctx, 864, Gauss200Parser::RuleNot_matched_insert_value);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(5647);
      paren_column_list();
    }
    setState(5650);
    match(Gauss200Parser::VALUES_GS);
    setState(5651);
    match(Gauss200Parser::LEFT_PAREN);
    setState(5652);
    expr_default();
    setState(5657);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5653);
      match(Gauss200Parser::COMMA);
      setState(5654);
      expr_default();
      setState(5659);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5660);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reassign_owned_stmtContext ------------------------------------------------------------------

Gauss200Parser::Reassign_owned_stmtContext::Reassign_owned_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reassign_owned_stmtContext::REASSIGN_GS() {
  return getToken(Gauss200Parser::REASSIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reassign_owned_stmtContext::OWNED_GS() {
  return getToken(Gauss200Parser::OWNED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reassign_owned_stmtContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

std::vector<Gauss200Parser::Role_nameContext *> Gauss200Parser::Reassign_owned_stmtContext::role_name() {
  return getRuleContexts<Gauss200Parser::Role_nameContext>();
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Reassign_owned_stmtContext::role_name(size_t i) {
  return getRuleContext<Gauss200Parser::Role_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Reassign_owned_stmtContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::New_nameContext* Gauss200Parser::Reassign_owned_stmtContext::new_name() {
  return getRuleContext<Gauss200Parser::New_nameContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Reassign_owned_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Reassign_owned_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Reassign_owned_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleReassign_owned_stmt;
}

void Gauss200Parser::Reassign_owned_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReassign_owned_stmt(this);
}

void Gauss200Parser::Reassign_owned_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReassign_owned_stmt(this);
}


antlrcpp::Any Gauss200Parser::Reassign_owned_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReassign_owned_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reassign_owned_stmtContext* Gauss200Parser::reassign_owned_stmt() {
  Reassign_owned_stmtContext *_localctx = _tracker.createInstance<Reassign_owned_stmtContext>(_ctx, getState());
  enterRule(_localctx, 866, Gauss200Parser::RuleReassign_owned_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5662);
    match(Gauss200Parser::REASSIGN_GS);
    setState(5663);
    match(Gauss200Parser::OWNED_GS);
    setState(5664);
    match(Gauss200Parser::BY_GS);
    setState(5665);
    role_name();
    setState(5670);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5666);
      match(Gauss200Parser::COMMA);
      setState(5667);
      role_name();
      setState(5672);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5673);
    match(Gauss200Parser::TO_GS);
    setState(5674);
    new_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reindex_stmtContext ------------------------------------------------------------------

Gauss200Parser::Reindex_stmtContext::Reindex_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reindex_stmtContext::REINDEX_GS() {
  return getToken(Gauss200Parser::REINDEX_GS, 0);
}

Gauss200Parser::Reindex_optionContext* Gauss200Parser::Reindex_stmtContext::reindex_option() {
  return getRuleContext<Gauss200Parser::Reindex_optionContext>(0);
}

Gauss200Parser::Index_nameContext* Gauss200Parser::Reindex_stmtContext::index_name() {
  return getRuleContext<Gauss200Parser::Index_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Reindex_stmtContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

Gauss200Parser::Partition_nameContext* Gauss200Parser::Reindex_stmtContext::partition_name() {
  return getRuleContext<Gauss200Parser::Partition_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Reindex_stmtContext::FORCE_GS() {
  return getToken(Gauss200Parser::FORCE_GS, 0);
}


size_t Gauss200Parser::Reindex_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleReindex_stmt;
}

void Gauss200Parser::Reindex_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReindex_stmt(this);
}

void Gauss200Parser::Reindex_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReindex_stmt(this);
}


antlrcpp::Any Gauss200Parser::Reindex_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReindex_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reindex_stmtContext* Gauss200Parser::reindex_stmt() {
  Reindex_stmtContext *_localctx = _tracker.createInstance<Reindex_stmtContext>(_ctx, getState());
  enterRule(_localctx, 868, Gauss200Parser::RuleReindex_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5676);
    match(Gauss200Parser::REINDEX_GS);
    setState(5677);
    reindex_option();
    setState(5678);
    index_name();
    setState(5681);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::PARTITION_GS) {
      setState(5679);
      match(Gauss200Parser::PARTITION_GS);
      setState(5680);
      partition_name();
    }
    setState(5684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FORCE_GS) {
      setState(5683);
      match(Gauss200Parser::FORCE_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reindex_optionContext ------------------------------------------------------------------

Gauss200Parser::Reindex_optionContext::Reindex_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reindex_optionContext::INDEX_GS() {
  return getToken(Gauss200Parser::INDEX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reindex_optionContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reindex_optionContext::INTERNAL_GS() {
  return getToken(Gauss200Parser::INTERNAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reindex_optionContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reindex_optionContext::SYSTEM_GS() {
  return getToken(Gauss200Parser::SYSTEM_GS, 0);
}


size_t Gauss200Parser::Reindex_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleReindex_option;
}

void Gauss200Parser::Reindex_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReindex_option(this);
}

void Gauss200Parser::Reindex_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReindex_option(this);
}


antlrcpp::Any Gauss200Parser::Reindex_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReindex_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reindex_optionContext* Gauss200Parser::reindex_option() {
  Reindex_optionContext *_localctx = _tracker.createInstance<Reindex_optionContext>(_ctx, getState());
  enterRule(_localctx, 870, Gauss200Parser::RuleReindex_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5693);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::INDEX_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5686);
        match(Gauss200Parser::INDEX_GS);
        break;
      }

      case Gauss200Parser::TABLE_GS:
      case Gauss200Parser::INTERNAL_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5688);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::INTERNAL_GS) {
          setState(5687);
          match(Gauss200Parser::INTERNAL_GS);
        }
        setState(5690);
        match(Gauss200Parser::TABLE_GS);
        break;
      }

      case Gauss200Parser::DATABASE_GS: {
        enterOuterAlt(_localctx, 3);
        setState(5691);
        match(Gauss200Parser::DATABASE_GS);
        break;
      }

      case Gauss200Parser::SYSTEM_GS: {
        enterOuterAlt(_localctx, 4);
        setState(5692);
        match(Gauss200Parser::SYSTEM_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Release_savepoint_stmtContext ------------------------------------------------------------------

Gauss200Parser::Release_savepoint_stmtContext::Release_savepoint_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Release_savepoint_stmtContext::RELEASE_GS() {
  return getToken(Gauss200Parser::RELEASE_GS, 0);
}

Gauss200Parser::Savepoint_nameContext* Gauss200Parser::Release_savepoint_stmtContext::savepoint_name() {
  return getRuleContext<Gauss200Parser::Savepoint_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Release_savepoint_stmtContext::SAVEPOINT_GS() {
  return getToken(Gauss200Parser::SAVEPOINT_GS, 0);
}


size_t Gauss200Parser::Release_savepoint_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleRelease_savepoint_stmt;
}

void Gauss200Parser::Release_savepoint_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelease_savepoint_stmt(this);
}

void Gauss200Parser::Release_savepoint_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelease_savepoint_stmt(this);
}


antlrcpp::Any Gauss200Parser::Release_savepoint_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRelease_savepoint_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Release_savepoint_stmtContext* Gauss200Parser::release_savepoint_stmt() {
  Release_savepoint_stmtContext *_localctx = _tracker.createInstance<Release_savepoint_stmtContext>(_ctx, getState());
  enterRule(_localctx, 872, Gauss200Parser::RuleRelease_savepoint_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5695);
    match(Gauss200Parser::RELEASE_GS);
    setState(5697);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 687, _ctx)) {
    case 1: {
      setState(5696);
      match(Gauss200Parser::SAVEPOINT_GS);
      break;
    }

    }
    setState(5699);
    savepoint_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reset_stmtContext ------------------------------------------------------------------

Gauss200Parser::Reset_stmtContext::Reset_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::RESET_GS() {
  return getToken(Gauss200Parser::RESET_GS, 0);
}

Gauss200Parser::Configuration_paramContext* Gauss200Parser::Reset_stmtContext::configuration_param() {
  return getRuleContext<Gauss200Parser::Configuration_paramContext>(0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::CURRENT_SCHEMA_GS() {
  return getToken(Gauss200Parser::CURRENT_SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::ZONE_GS() {
  return getToken(Gauss200Parser::ZONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::ISOLATION_GS() {
  return getToken(Gauss200Parser::ISOLATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::LEVEL_GS() {
  return getToken(Gauss200Parser::LEVEL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::AUTHORIZATION_GS() {
  return getToken(Gauss200Parser::AUTHORIZATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_stmtContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}


size_t Gauss200Parser::Reset_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleReset_stmt;
}

void Gauss200Parser::Reset_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReset_stmt(this);
}

void Gauss200Parser::Reset_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReset_stmt(this);
}


antlrcpp::Any Gauss200Parser::Reset_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReset_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reset_stmtContext* Gauss200Parser::reset_stmt() {
  Reset_stmtContext *_localctx = _tracker.createInstance<Reset_stmtContext>(_ctx, getState());
  enterRule(_localctx, 874, Gauss200Parser::RuleReset_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5701);
    match(Gauss200Parser::RESET_GS);
    setState(5712);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 688, _ctx)) {
    case 1: {
      setState(5702);
      configuration_param();
      break;
    }

    case 2: {
      setState(5703);
      match(Gauss200Parser::CURRENT_SCHEMA_GS);
      break;
    }

    case 3: {
      setState(5704);
      match(Gauss200Parser::TIME_GS);
      setState(5705);
      match(Gauss200Parser::ZONE_GS);
      break;
    }

    case 4: {
      setState(5706);
      match(Gauss200Parser::TRANSACTION_GS);
      setState(5707);
      match(Gauss200Parser::ISOLATION_GS);
      setState(5708);
      match(Gauss200Parser::LEVEL_GS);
      break;
    }

    case 5: {
      setState(5709);
      match(Gauss200Parser::SESSION_GS);
      setState(5710);
      match(Gauss200Parser::AUTHORIZATION_GS);
      break;
    }

    case 6: {
      setState(5711);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Savepoint_nameContext ------------------------------------------------------------------

Gauss200Parser::Savepoint_nameContext::Savepoint_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Savepoint_nameContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}


size_t Gauss200Parser::Savepoint_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleSavepoint_name;
}

void Gauss200Parser::Savepoint_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavepoint_name(this);
}

void Gauss200Parser::Savepoint_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavepoint_name(this);
}


antlrcpp::Any Gauss200Parser::Savepoint_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSavepoint_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Savepoint_nameContext* Gauss200Parser::savepoint_name() {
  Savepoint_nameContext *_localctx = _tracker.createInstance<Savepoint_nameContext>(_ctx, getState());
  enterRule(_localctx, 876, Gauss200Parser::RuleSavepoint_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5714);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Revoke_stmtContext ------------------------------------------------------------------

Gauss200Parser::Revoke_stmtContext::Revoke_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Revoke_stmtContext::REVOKE_GS() {
  return getToken(Gauss200Parser::REVOKE_GS, 0);
}

Gauss200Parser::Privileges_for_objContext* Gauss200Parser::Revoke_stmtContext::privileges_for_obj() {
  return getRuleContext<Gauss200Parser::Privileges_for_objContext>(0);
}

tree::TerminalNode* Gauss200Parser::Revoke_stmtContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::Grant_revoke_objectsContext* Gauss200Parser::Revoke_stmtContext::grant_revoke_objects() {
  return getRuleContext<Gauss200Parser::Grant_revoke_objectsContext>(0);
}

Gauss200Parser::Grant_option_forContext* Gauss200Parser::Revoke_stmtContext::grant_option_for() {
  return getRuleContext<Gauss200Parser::Grant_option_forContext>(0);
}

tree::TerminalNode* Gauss200Parser::Revoke_stmtContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

Gauss200Parser::Grant_on_optionContext* Gauss200Parser::Revoke_stmtContext::grant_on_option() {
  return getRuleContext<Gauss200Parser::Grant_on_optionContext>(0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Revoke_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}

std::vector<Gauss200Parser::Role_nameContext *> Gauss200Parser::Revoke_stmtContext::role_name() {
  return getRuleContexts<Gauss200Parser::Role_nameContext>();
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Revoke_stmtContext::role_name(size_t i) {
  return getRuleContext<Gauss200Parser::Role_nameContext>(i);
}

Gauss200Parser::Admin_option_forContext* Gauss200Parser::Revoke_stmtContext::admin_option_for() {
  return getRuleContext<Gauss200Parser::Admin_option_forContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Revoke_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Revoke_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Revoke_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleRevoke_stmt;
}

void Gauss200Parser::Revoke_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRevoke_stmt(this);
}

void Gauss200Parser::Revoke_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRevoke_stmt(this);
}


antlrcpp::Any Gauss200Parser::Revoke_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRevoke_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Revoke_stmtContext* Gauss200Parser::revoke_stmt() {
  Revoke_stmtContext *_localctx = _tracker.createInstance<Revoke_stmtContext>(_ctx, getState());
  enterRule(_localctx, 878, Gauss200Parser::RuleRevoke_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5754);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 696, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5716);
      match(Gauss200Parser::REVOKE_GS);
      setState(5718);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::GRANT_GS) {
        setState(5717);
        grant_option_for();
      }
      setState(5720);
      privileges_for_obj();
      setState(5723);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::ON_GS) {
        setState(5721);
        match(Gauss200Parser::ON_GS);
        setState(5722);
        grant_on_option();
      }
      setState(5725);
      match(Gauss200Parser::FROM_GS);
      setState(5726);
      grant_revoke_objects();
      setState(5728);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
        setState(5727);
        cascade_restrict();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5730);
      match(Gauss200Parser::REVOKE_GS);
      setState(5732);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 692, _ctx)) {
      case 1: {
        setState(5731);
        admin_option_for();
        break;
      }

      }
      setState(5734);
      role_name();
      setState(5739);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5735);
        match(Gauss200Parser::COMMA);
        setState(5736);
        role_name();
        setState(5741);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5742);
      match(Gauss200Parser::FROM_GS);
      setState(5743);
      role_name();
      setState(5748);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5744);
        match(Gauss200Parser::COMMA);
        setState(5745);
        role_name();
        setState(5750);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5752);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
        setState(5751);
        cascade_restrict();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Admin_option_forContext ------------------------------------------------------------------

Gauss200Parser::Admin_option_forContext::Admin_option_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Admin_option_forContext::ADMIN_GS() {
  return getToken(Gauss200Parser::ADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Admin_option_forContext::OPTION_GS() {
  return getToken(Gauss200Parser::OPTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Admin_option_forContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}


size_t Gauss200Parser::Admin_option_forContext::getRuleIndex() const {
  return Gauss200Parser::RuleAdmin_option_for;
}

void Gauss200Parser::Admin_option_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdmin_option_for(this);
}

void Gauss200Parser::Admin_option_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdmin_option_for(this);
}


antlrcpp::Any Gauss200Parser::Admin_option_forContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAdmin_option_for(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Admin_option_forContext* Gauss200Parser::admin_option_for() {
  Admin_option_forContext *_localctx = _tracker.createInstance<Admin_option_forContext>(_ctx, getState());
  enterRule(_localctx, 880, Gauss200Parser::RuleAdmin_option_for);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5756);
    match(Gauss200Parser::ADMIN_GS);
    setState(5757);
    match(Gauss200Parser::OPTION_GS);
    setState(5758);
    match(Gauss200Parser::FOR_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rollback_stmtContext ------------------------------------------------------------------

Gauss200Parser::Rollback_stmtContext::Rollback_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Rollback_stmtContext::ROLLBACK_GS() {
  return getToken(Gauss200Parser::ROLLBACK_GS, 0);
}

Gauss200Parser::Work_transactionContext* Gauss200Parser::Rollback_stmtContext::work_transaction() {
  return getRuleContext<Gauss200Parser::Work_transactionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Rollback_stmtContext::PREPARED_GS() {
  return getToken(Gauss200Parser::PREPARED_GS, 0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Rollback_stmtContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Rollback_stmtContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

Gauss200Parser::Savepoint_nameContext* Gauss200Parser::Rollback_stmtContext::savepoint_name() {
  return getRuleContext<Gauss200Parser::Savepoint_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Rollback_stmtContext::SAVEPOINT_GS() {
  return getToken(Gauss200Parser::SAVEPOINT_GS, 0);
}


size_t Gauss200Parser::Rollback_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleRollback_stmt;
}

void Gauss200Parser::Rollback_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollback_stmt(this);
}

void Gauss200Parser::Rollback_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollback_stmt(this);
}


antlrcpp::Any Gauss200Parser::Rollback_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRollback_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Rollback_stmtContext* Gauss200Parser::rollback_stmt() {
  Rollback_stmtContext *_localctx = _tracker.createInstance<Rollback_stmtContext>(_ctx, getState());
  enterRule(_localctx, 882, Gauss200Parser::RuleRollback_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5776);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 700, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5760);
      match(Gauss200Parser::ROLLBACK_GS);
      setState(5762);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::TRANSACTION_GS

      || _la == Gauss200Parser::WORK_GS) {
        setState(5761);
        work_transaction();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5764);
      match(Gauss200Parser::ROLLBACK_GS);
      setState(5765);
      match(Gauss200Parser::PREPARED_GS);
      setState(5766);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5767);
      match(Gauss200Parser::ROLLBACK_GS);
      setState(5769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::TRANSACTION_GS

      || _la == Gauss200Parser::WORK_GS) {
        setState(5768);
        work_transaction();
      }
      setState(5771);
      match(Gauss200Parser::TO_GS);
      setState(5773);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 699, _ctx)) {
      case 1: {
        setState(5772);
        match(Gauss200Parser::SAVEPOINT_GS);
        break;
      }

      }
      setState(5775);
      savepoint_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Savepoint_stmtContext ------------------------------------------------------------------

Gauss200Parser::Savepoint_stmtContext::Savepoint_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Savepoint_stmtContext::SAVEPOINT_GS() {
  return getToken(Gauss200Parser::SAVEPOINT_GS, 0);
}

Gauss200Parser::Savepoint_nameContext* Gauss200Parser::Savepoint_stmtContext::savepoint_name() {
  return getRuleContext<Gauss200Parser::Savepoint_nameContext>(0);
}


size_t Gauss200Parser::Savepoint_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleSavepoint_stmt;
}

void Gauss200Parser::Savepoint_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavepoint_stmt(this);
}

void Gauss200Parser::Savepoint_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavepoint_stmt(this);
}


antlrcpp::Any Gauss200Parser::Savepoint_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSavepoint_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Savepoint_stmtContext* Gauss200Parser::savepoint_stmt() {
  Savepoint_stmtContext *_localctx = _tracker.createInstance<Savepoint_stmtContext>(_ctx, getState());
  enterRule(_localctx, 884, Gauss200Parser::RuleSavepoint_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5778);
    match(Gauss200Parser::SAVEPOINT_GS);
    setState(5779);
    savepoint_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_reset_stmtContext ------------------------------------------------------------------

Gauss200Parser::Set_reset_stmtContext::Set_reset_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Set_config_parametersContext* Gauss200Parser::Set_reset_stmtContext::set_config_parameters() {
  return getRuleContext<Gauss200Parser::Set_config_parametersContext>(0);
}

Gauss200Parser::Set_constraintsContext* Gauss200Parser::Set_reset_stmtContext::set_constraints() {
  return getRuleContext<Gauss200Parser::Set_constraintsContext>(0);
}

Gauss200Parser::Set_roleContext* Gauss200Parser::Set_reset_stmtContext::set_role() {
  return getRuleContext<Gauss200Parser::Set_roleContext>(0);
}

Gauss200Parser::Set_session_authorizationContext* Gauss200Parser::Set_reset_stmtContext::set_session_authorization() {
  return getRuleContext<Gauss200Parser::Set_session_authorizationContext>(0);
}

Gauss200Parser::Set_transactionContext* Gauss200Parser::Set_reset_stmtContext::set_transaction() {
  return getRuleContext<Gauss200Parser::Set_transactionContext>(0);
}

Gauss200Parser::Reset_config_parametersContext* Gauss200Parser::Set_reset_stmtContext::reset_config_parameters() {
  return getRuleContext<Gauss200Parser::Reset_config_parametersContext>(0);
}


size_t Gauss200Parser::Set_reset_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_reset_stmt;
}

void Gauss200Parser::Set_reset_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_reset_stmt(this);
}

void Gauss200Parser::Set_reset_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_reset_stmt(this);
}


antlrcpp::Any Gauss200Parser::Set_reset_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_reset_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_reset_stmtContext* Gauss200Parser::set_reset_stmt() {
  Set_reset_stmtContext *_localctx = _tracker.createInstance<Set_reset_stmtContext>(_ctx, getState());
  enterRule(_localctx, 886, Gauss200Parser::RuleSet_reset_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 701, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5781);
      set_config_parameters();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5782);
      set_constraints();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5783);
      set_role();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5784);
      set_session_authorization();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5785);
      set_transaction();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5786);
      reset_config_parameters();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_config_parametersContext ------------------------------------------------------------------

Gauss200Parser::Set_config_parametersContext::Set_config_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Set_configuration_paramContext* Gauss200Parser::Set_config_parametersContext::set_configuration_param() {
  return getRuleContext<Gauss200Parser::Set_configuration_paramContext>(0);
}

tree::TerminalNode* Gauss200Parser::Set_config_parametersContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

Gauss200Parser::Set_parameter_optionContext* Gauss200Parser::Set_config_parametersContext::set_parameter_option() {
  return getRuleContext<Gauss200Parser::Set_parameter_optionContext>(0);
}

Gauss200Parser::Session_localContext* Gauss200Parser::Set_config_parametersContext::session_local() {
  return getRuleContext<Gauss200Parser::Session_localContext>(0);
}


size_t Gauss200Parser::Set_config_parametersContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_config_parameters;
}

void Gauss200Parser::Set_config_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_config_parameters(this);
}

void Gauss200Parser::Set_config_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_config_parameters(this);
}


antlrcpp::Any Gauss200Parser::Set_config_parametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_config_parameters(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_config_parametersContext* Gauss200Parser::set_config_parameters() {
  Set_config_parametersContext *_localctx = _tracker.createInstance<Set_config_parametersContext>(_ctx, getState());
  enterRule(_localctx, 888, Gauss200Parser::RuleSet_config_parameters);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5795);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 703, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5789);
      set_configuration_param();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5790);
      match(Gauss200Parser::SET_GS);
      setState(5792);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::LOCAL_GS || _la == Gauss200Parser::SESSION_GS) {
        setState(5791);
        session_local();
      }
      setState(5794);
      set_parameter_option();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Session_localContext ------------------------------------------------------------------

Gauss200Parser::Session_localContext::Session_localContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Session_localContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Session_localContext::LOCAL_GS() {
  return getToken(Gauss200Parser::LOCAL_GS, 0);
}


size_t Gauss200Parser::Session_localContext::getRuleIndex() const {
  return Gauss200Parser::RuleSession_local;
}

void Gauss200Parser::Session_localContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSession_local(this);
}

void Gauss200Parser::Session_localContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSession_local(this);
}


antlrcpp::Any Gauss200Parser::Session_localContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSession_local(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Session_localContext* Gauss200Parser::session_local() {
  Session_localContext *_localctx = _tracker.createInstance<Session_localContext>(_ctx, getState());
  enterRule(_localctx, 890, Gauss200Parser::RuleSession_local);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5797);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::LOCAL_GS || _la == Gauss200Parser::SESSION_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_parameter_optionContext ------------------------------------------------------------------

Gauss200Parser::Set_parameter_optionContext::Set_parameter_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::ZONE_GS() {
  return getToken(Gauss200Parser::ZONE_GS, 0);
}

Gauss200Parser::TimezoneContext* Gauss200Parser::Set_parameter_optionContext::timezone() {
  return getRuleContext<Gauss200Parser::TimezoneContext>(0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::LOCAL_GS() {
  return getToken(Gauss200Parser::LOCAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::CURRENT_SCHEMA_GS() {
  return getToken(Gauss200Parser::CURRENT_SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

Gauss200Parser::Schema_nameContext* Gauss200Parser::Set_parameter_optionContext::schema_name() {
  return getRuleContext<Gauss200Parser::Schema_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::NAMES_GS() {
  return getToken(Gauss200Parser::NAMES_GS, 0);
}

Gauss200Parser::Encoding_nameContext* Gauss200Parser::Set_parameter_optionContext::encoding_name() {
  return getRuleContext<Gauss200Parser::Encoding_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::XML_GS() {
  return getToken(Gauss200Parser::XML_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::OPTION_GS() {
  return getToken(Gauss200Parser::OPTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::DOCUMENT_GS() {
  return getToken(Gauss200Parser::DOCUMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_parameter_optionContext::CONTENT_GS() {
  return getToken(Gauss200Parser::CONTENT_GS, 0);
}


size_t Gauss200Parser::Set_parameter_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_parameter_option;
}

void Gauss200Parser::Set_parameter_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_parameter_option(this);
}

void Gauss200Parser::Set_parameter_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_parameter_option(this);
}


antlrcpp::Any Gauss200Parser::Set_parameter_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_parameter_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_parameter_optionContext* Gauss200Parser::set_parameter_option() {
  Set_parameter_optionContext *_localctx = _tracker.createInstance<Set_parameter_optionContext>(_ctx, getState());
  enterRule(_localctx, 892, Gauss200Parser::RuleSet_parameter_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5821);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::TIME_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5799);
        match(Gauss200Parser::TIME_GS);
        setState(5800);
        match(Gauss200Parser::ZONE_GS);
        setState(5804);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::CHAR_STRING: {
            setState(5801);
            timezone();
            break;
          }

          case Gauss200Parser::LOCAL_GS: {
            setState(5802);
            match(Gauss200Parser::LOCAL_GS);
            break;
          }

          case Gauss200Parser::DEFAULT_GS: {
            setState(5803);
            match(Gauss200Parser::DEFAULT_GS);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case Gauss200Parser::CURRENT_SCHEMA_GS:
      case Gauss200Parser::SCHEMA_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5814);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::CURRENT_SCHEMA_GS: {
            setState(5806);
            match(Gauss200Parser::CURRENT_SCHEMA_GS);
            setState(5807);
            _la = _input->LA(1);
            if (!(_la == Gauss200Parser::TO_GS || _la == Gauss200Parser::EQUALS_OP)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(5810);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 705, _ctx)) {
            case 1: {
              setState(5808);
              schema_name();
              break;
            }

            case 2: {
              setState(5809);
              match(Gauss200Parser::DEFAULT_GS);
              break;
            }

            }
            break;
          }

          case Gauss200Parser::SCHEMA_GS: {
            setState(5812);
            match(Gauss200Parser::SCHEMA_GS);
            setState(5813);
            match(Gauss200Parser::CHAR_STRING);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case Gauss200Parser::NAMES_GS: {
        enterOuterAlt(_localctx, 3);
        setState(5816);
        match(Gauss200Parser::NAMES_GS);
        setState(5817);
        encoding_name();
        break;
      }

      case Gauss200Parser::XML_GS: {
        enterOuterAlt(_localctx, 4);
        setState(5818);
        match(Gauss200Parser::XML_GS);
        setState(5819);
        match(Gauss200Parser::OPTION_GS);
        setState(5820);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::CONTENT_GS

        || _la == Gauss200Parser::DOCUMENT_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimezoneContext ------------------------------------------------------------------

Gauss200Parser::TimezoneContext::TimezoneContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::TimezoneContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}


size_t Gauss200Parser::TimezoneContext::getRuleIndex() const {
  return Gauss200Parser::RuleTimezone;
}

void Gauss200Parser::TimezoneContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimezone(this);
}

void Gauss200Parser::TimezoneContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimezone(this);
}


antlrcpp::Any Gauss200Parser::TimezoneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTimezone(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::TimezoneContext* Gauss200Parser::timezone() {
  TimezoneContext *_localctx = _tracker.createInstance<TimezoneContext>(_ctx, getState());
  enterRule(_localctx, 894, Gauss200Parser::RuleTimezone);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5823);
    match(Gauss200Parser::CHAR_STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_constraintsContext ------------------------------------------------------------------

Gauss200Parser::Set_constraintsContext::Set_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_constraintsContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_constraintsContext::CONSTRAINTS_GS() {
  return getToken(Gauss200Parser::CONSTRAINTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_constraintsContext::DEFERRED_GS() {
  return getToken(Gauss200Parser::DEFERRED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_constraintsContext::IMMEDIATE_GS() {
  return getToken(Gauss200Parser::IMMEDIATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_constraintsContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

std::vector<Gauss200Parser::Constraint_nameContext *> Gauss200Parser::Set_constraintsContext::constraint_name() {
  return getRuleContexts<Gauss200Parser::Constraint_nameContext>();
}

Gauss200Parser::Constraint_nameContext* Gauss200Parser::Set_constraintsContext::constraint_name(size_t i) {
  return getRuleContext<Gauss200Parser::Constraint_nameContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Set_constraintsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Set_constraintsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Set_constraintsContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_constraints;
}

void Gauss200Parser::Set_constraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_constraints(this);
}

void Gauss200Parser::Set_constraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_constraints(this);
}


antlrcpp::Any Gauss200Parser::Set_constraintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_constraints(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_constraintsContext* Gauss200Parser::set_constraints() {
  Set_constraintsContext *_localctx = _tracker.createInstance<Set_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 896, Gauss200Parser::RuleSet_constraints);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5825);
    match(Gauss200Parser::SET_GS);
    setState(5826);
    match(Gauss200Parser::CONSTRAINTS_GS);
    setState(5836);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 709, _ctx)) {
    case 1: {
      setState(5827);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    case 2: {
      setState(5828);
      constraint_name();
      setState(5833);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Gauss200Parser::COMMA) {
        setState(5829);
        match(Gauss200Parser::COMMA);
        setState(5830);
        constraint_name();
        setState(5835);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
    setState(5838);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::DEFERRED_GS

    || _la == Gauss200Parser::IMMEDIATE_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_roleContext ------------------------------------------------------------------

Gauss200Parser::Set_roleContext::Set_roleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_roleContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_roleContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Set_roleContext::role_name() {
  return getRuleContext<Gauss200Parser::Role_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Set_roleContext::PASSWORD_GS() {
  return getToken(Gauss200Parser::PASSWORD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_roleContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

Gauss200Parser::Session_localContext* Gauss200Parser::Set_roleContext::session_local() {
  return getRuleContext<Gauss200Parser::Session_localContext>(0);
}


size_t Gauss200Parser::Set_roleContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_role;
}

void Gauss200Parser::Set_roleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_role(this);
}

void Gauss200Parser::Set_roleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_role(this);
}


antlrcpp::Any Gauss200Parser::Set_roleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_role(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_roleContext* Gauss200Parser::set_role() {
  Set_roleContext *_localctx = _tracker.createInstance<Set_roleContext>(_ctx, getState());
  enterRule(_localctx, 898, Gauss200Parser::RuleSet_role);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5840);
    match(Gauss200Parser::SET_GS);
    setState(5842);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LOCAL_GS || _la == Gauss200Parser::SESSION_GS) {
      setState(5841);
      session_local();
    }
    setState(5844);
    match(Gauss200Parser::ROLE_GS);
    setState(5845);
    role_name();
    setState(5846);
    match(Gauss200Parser::PASSWORD_GS);
    setState(5847);
    match(Gauss200Parser::CHAR_STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reset_config_parametersContext ------------------------------------------------------------------

Gauss200Parser::Reset_config_parametersContext::Reset_config_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reset_config_parametersContext::RESET_GS() {
  return getToken(Gauss200Parser::RESET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_config_parametersContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_config_parametersContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reset_config_parametersContext::AUTHORIZATION_GS() {
  return getToken(Gauss200Parser::AUTHORIZATION_GS, 0);
}


size_t Gauss200Parser::Reset_config_parametersContext::getRuleIndex() const {
  return Gauss200Parser::RuleReset_config_parameters;
}

void Gauss200Parser::Reset_config_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReset_config_parameters(this);
}

void Gauss200Parser::Reset_config_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReset_config_parameters(this);
}


antlrcpp::Any Gauss200Parser::Reset_config_parametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReset_config_parameters(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reset_config_parametersContext* Gauss200Parser::reset_config_parameters() {
  Reset_config_parametersContext *_localctx = _tracker.createInstance<Reset_config_parametersContext>(_ctx, getState());
  enterRule(_localctx, 900, Gauss200Parser::RuleReset_config_parameters);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5854);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 711, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5849);
      match(Gauss200Parser::RESET_GS);
      setState(5850);
      match(Gauss200Parser::ROLE_GS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5851);
      match(Gauss200Parser::RESET_GS);
      setState(5852);
      match(Gauss200Parser::SESSION_GS);
      setState(5853);
      match(Gauss200Parser::AUTHORIZATION_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_session_authorizationContext ------------------------------------------------------------------

Gauss200Parser::Set_session_authorizationContext::Set_session_authorizationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_session_authorizationContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_session_authorizationContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_session_authorizationContext::AUTHORIZATION_GS() {
  return getToken(Gauss200Parser::AUTHORIZATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_session_authorizationContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

Gauss200Parser::Role_nameContext* Gauss200Parser::Set_session_authorizationContext::role_name() {
  return getRuleContext<Gauss200Parser::Role_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Set_session_authorizationContext::PASSWORD_GS() {
  return getToken(Gauss200Parser::PASSWORD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_session_authorizationContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

Gauss200Parser::Session_localContext* Gauss200Parser::Set_session_authorizationContext::session_local() {
  return getRuleContext<Gauss200Parser::Session_localContext>(0);
}


size_t Gauss200Parser::Set_session_authorizationContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_session_authorization;
}

void Gauss200Parser::Set_session_authorizationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_session_authorization(this);
}

void Gauss200Parser::Set_session_authorizationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_session_authorization(this);
}


antlrcpp::Any Gauss200Parser::Set_session_authorizationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_session_authorization(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_session_authorizationContext* Gauss200Parser::set_session_authorization() {
  Set_session_authorizationContext *_localctx = _tracker.createInstance<Set_session_authorizationContext>(_ctx, getState());
  enterRule(_localctx, 902, Gauss200Parser::RuleSet_session_authorization);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5856);
    match(Gauss200Parser::SET_GS);
    setState(5858);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 712, _ctx)) {
    case 1: {
      setState(5857);
      session_local();
      break;
    }

    }
    setState(5860);
    match(Gauss200Parser::SESSION_GS);
    setState(5861);
    match(Gauss200Parser::AUTHORIZATION_GS);
    setState(5867);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 713, _ctx)) {
    case 1: {
      setState(5862);
      match(Gauss200Parser::DEFAULT_GS);
      break;
    }

    case 2: {
      setState(5863);
      role_name();
      setState(5864);
      match(Gauss200Parser::PASSWORD_GS);
      setState(5865);
      match(Gauss200Parser::CHAR_STRING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_transactionContext ------------------------------------------------------------------

Gauss200Parser::Set_transactionContext::Set_transactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Set_transactionContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_transactionContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}

Gauss200Parser::Isolation_level_optionsContext* Gauss200Parser::Set_transactionContext::isolation_level_options() {
  return getRuleContext<Gauss200Parser::Isolation_level_optionsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Set_transactionContext::LOCAL_GS() {
  return getToken(Gauss200Parser::LOCAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_transactionContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_transactionContext::CHARACTERISTICS_GS() {
  return getToken(Gauss200Parser::CHARACTERISTICS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Set_transactionContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}


size_t Gauss200Parser::Set_transactionContext::getRuleIndex() const {
  return Gauss200Parser::RuleSet_transaction;
}

void Gauss200Parser::Set_transactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_transaction(this);
}

void Gauss200Parser::Set_transactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_transaction(this);
}


antlrcpp::Any Gauss200Parser::Set_transactionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSet_transaction(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Set_transactionContext* Gauss200Parser::set_transaction() {
  Set_transactionContext *_localctx = _tracker.createInstance<Set_transactionContext>(_ctx, getState());
  enterRule(_localctx, 904, Gauss200Parser::RuleSet_transaction);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5869);
    match(Gauss200Parser::SET_GS);
    setState(5874);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::LOCAL_GS: {
        setState(5870);
        match(Gauss200Parser::LOCAL_GS);
        break;
      }

      case Gauss200Parser::SESSION_GS: {
        setState(5871);
        match(Gauss200Parser::SESSION_GS);
        setState(5872);
        match(Gauss200Parser::CHARACTERISTICS_GS);
        setState(5873);
        match(Gauss200Parser::AS_GS);
        break;
      }

      case Gauss200Parser::TRANSACTION_GS: {
        break;
      }

    default:
      break;
    }
    setState(5876);
    match(Gauss200Parser::TRANSACTION_GS);
    setState(5877);
    isolation_level_options();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Isolation_level_optionsContext ------------------------------------------------------------------

Gauss200Parser::Isolation_level_optionsContext::Isolation_level_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Isolation_level_optionContext *> Gauss200Parser::Isolation_level_optionsContext::isolation_level_option() {
  return getRuleContexts<Gauss200Parser::Isolation_level_optionContext>();
}

Gauss200Parser::Isolation_level_optionContext* Gauss200Parser::Isolation_level_optionsContext::isolation_level_option(size_t i) {
  return getRuleContext<Gauss200Parser::Isolation_level_optionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Isolation_level_optionsContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionsContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Isolation_level_optionsContext::getRuleIndex() const {
  return Gauss200Parser::RuleIsolation_level_options;
}

void Gauss200Parser::Isolation_level_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsolation_level_options(this);
}

void Gauss200Parser::Isolation_level_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsolation_level_options(this);
}


antlrcpp::Any Gauss200Parser::Isolation_level_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIsolation_level_options(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Isolation_level_optionsContext* Gauss200Parser::isolation_level_options() {
  Isolation_level_optionsContext *_localctx = _tracker.createInstance<Isolation_level_optionsContext>(_ctx, getState());
  enterRule(_localctx, 906, Gauss200Parser::RuleIsolation_level_options);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5879);
    isolation_level_option();
    setState(5884);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5880);
      match(Gauss200Parser::COMMA);
      setState(5881);
      isolation_level_option();
      setState(5886);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Isolation_level_optionContext ------------------------------------------------------------------

Gauss200Parser::Isolation_level_optionContext::Isolation_level_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::ISOLATION_GS() {
  return getToken(Gauss200Parser::ISOLATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::LEVEL_GS() {
  return getToken(Gauss200Parser::LEVEL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::READ_GS() {
  return getToken(Gauss200Parser::READ_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::COMMITTED_GS() {
  return getToken(Gauss200Parser::COMMITTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::UNCOMMITTED_GS() {
  return getToken(Gauss200Parser::UNCOMMITTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::SERIALIZABLE_GS() {
  return getToken(Gauss200Parser::SERIALIZABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::REPEATABLE_GS() {
  return getToken(Gauss200Parser::REPEATABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::WRITE_GS() {
  return getToken(Gauss200Parser::WRITE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Isolation_level_optionContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}


size_t Gauss200Parser::Isolation_level_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleIsolation_level_option;
}

void Gauss200Parser::Isolation_level_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsolation_level_option(this);
}

void Gauss200Parser::Isolation_level_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsolation_level_option(this);
}


antlrcpp::Any Gauss200Parser::Isolation_level_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIsolation_level_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Isolation_level_optionContext* Gauss200Parser::isolation_level_option() {
  Isolation_level_optionContext *_localctx = _tracker.createInstance<Isolation_level_optionContext>(_ctx, getState());
  enterRule(_localctx, 908, Gauss200Parser::RuleIsolation_level_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5900);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ISOLATION_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5887);
        match(Gauss200Parser::ISOLATION_GS);
        setState(5888);
        match(Gauss200Parser::LEVEL_GS);
        setState(5896);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 716, _ctx)) {
        case 1: {
          setState(5889);
          match(Gauss200Parser::READ_GS);
          setState(5890);
          match(Gauss200Parser::COMMITTED_GS);
          break;
        }

        case 2: {
          setState(5891);
          match(Gauss200Parser::READ_GS);
          setState(5892);
          match(Gauss200Parser::UNCOMMITTED_GS);
          break;
        }

        case 3: {
          setState(5893);
          match(Gauss200Parser::SERIALIZABLE_GS);
          break;
        }

        case 4: {
          setState(5894);
          match(Gauss200Parser::REPEATABLE_GS);
          setState(5895);
          match(Gauss200Parser::READ_GS);
          break;
        }

        }
        break;
      }

      case Gauss200Parser::READ_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5898);
        match(Gauss200Parser::READ_GS);
        setState(5899);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::ONLY_GS || _la == Gauss200Parser::WRITE_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_stmtContext ------------------------------------------------------------------

Gauss200Parser::Show_stmtContext::Show_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::SHOW_GS() {
  return getToken(Gauss200Parser::SHOW_GS, 0);
}

Gauss200Parser::Configuration_nameContext* Gauss200Parser::Show_stmtContext::configuration_name() {
  return getRuleContext<Gauss200Parser::Configuration_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::CURRENT_SCHEMA_GS() {
  return getToken(Gauss200Parser::CURRENT_SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::ZONE_GS() {
  return getToken(Gauss200Parser::ZONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::ISOLATION_GS() {
  return getToken(Gauss200Parser::ISOLATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::LEVEL_GS() {
  return getToken(Gauss200Parser::LEVEL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::AUTHORIZATION_GS() {
  return getToken(Gauss200Parser::AUTHORIZATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Show_stmtContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}


size_t Gauss200Parser::Show_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleShow_stmt;
}

void Gauss200Parser::Show_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_stmt(this);
}

void Gauss200Parser::Show_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_stmt(this);
}


antlrcpp::Any Gauss200Parser::Show_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitShow_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Show_stmtContext* Gauss200Parser::show_stmt() {
  Show_stmtContext *_localctx = _tracker.createInstance<Show_stmtContext>(_ctx, getState());
  enterRule(_localctx, 910, Gauss200Parser::RuleShow_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5902);
    match(Gauss200Parser::SHOW_GS);
    setState(5913);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 718, _ctx)) {
    case 1: {
      setState(5903);
      configuration_name();
      break;
    }

    case 2: {
      setState(5904);
      match(Gauss200Parser::CURRENT_SCHEMA_GS);
      break;
    }

    case 3: {
      setState(5905);
      match(Gauss200Parser::TIME_GS);
      setState(5906);
      match(Gauss200Parser::ZONE_GS);
      break;
    }

    case 4: {
      setState(5907);
      match(Gauss200Parser::TRANSACTION_GS);
      setState(5908);
      match(Gauss200Parser::ISOLATION_GS);
      setState(5909);
      match(Gauss200Parser::LEVEL_GS);
      break;
    }

    case 5: {
      setState(5910);
      match(Gauss200Parser::SESSION_GS);
      setState(5911);
      match(Gauss200Parser::AUTHORIZATION_GS);
      break;
    }

    case 6: {
      setState(5912);
      match(Gauss200Parser::ALL_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_transaction_stmtContext ------------------------------------------------------------------

Gauss200Parser::Start_transaction_stmtContext::Start_transaction_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Start_transaction_optionContext* Gauss200Parser::Start_transaction_stmtContext::start_transaction_option() {
  return getRuleContext<Gauss200Parser::Start_transaction_optionContext>(0);
}

Gauss200Parser::Isolation_level_optionsContext* Gauss200Parser::Start_transaction_stmtContext::isolation_level_options() {
  return getRuleContext<Gauss200Parser::Isolation_level_optionsContext>(0);
}


size_t Gauss200Parser::Start_transaction_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleStart_transaction_stmt;
}

void Gauss200Parser::Start_transaction_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_transaction_stmt(this);
}

void Gauss200Parser::Start_transaction_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_transaction_stmt(this);
}


antlrcpp::Any Gauss200Parser::Start_transaction_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitStart_transaction_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Start_transaction_stmtContext* Gauss200Parser::start_transaction_stmt() {
  Start_transaction_stmtContext *_localctx = _tracker.createInstance<Start_transaction_stmtContext>(_ctx, getState());
  enterRule(_localctx, 912, Gauss200Parser::RuleStart_transaction_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5915);
    start_transaction_option();
    setState(5917);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ISOLATION_GS || _la == Gauss200Parser::READ_GS) {
      setState(5916);
      isolation_level_options();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_transaction_optionContext ------------------------------------------------------------------

Gauss200Parser::Start_transaction_optionContext::Start_transaction_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Start_transaction_optionContext::START_GS() {
  return getToken(Gauss200Parser::START_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Start_transaction_optionContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Start_transaction_optionContext::BEGIN_GS() {
  return getToken(Gauss200Parser::BEGIN_GS, 0);
}

Gauss200Parser::Work_transactionContext* Gauss200Parser::Start_transaction_optionContext::work_transaction() {
  return getRuleContext<Gauss200Parser::Work_transactionContext>(0);
}


size_t Gauss200Parser::Start_transaction_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleStart_transaction_option;
}

void Gauss200Parser::Start_transaction_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_transaction_option(this);
}

void Gauss200Parser::Start_transaction_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_transaction_option(this);
}


antlrcpp::Any Gauss200Parser::Start_transaction_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitStart_transaction_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Start_transaction_optionContext* Gauss200Parser::start_transaction_option() {
  Start_transaction_optionContext *_localctx = _tracker.createInstance<Start_transaction_optionContext>(_ctx, getState());
  enterRule(_localctx, 914, Gauss200Parser::RuleStart_transaction_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5925);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::START_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5919);
        match(Gauss200Parser::START_GS);
        setState(5920);
        match(Gauss200Parser::TRANSACTION_GS);
        break;
      }

      case Gauss200Parser::BEGIN_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5921);
        match(Gauss200Parser::BEGIN_GS);
        setState(5923);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::TRANSACTION_GS

        || _la == Gauss200Parser::WORK_GS) {
          setState(5922);
          work_transaction();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Truncate_stmtContext ------------------------------------------------------------------

Gauss200Parser::Truncate_stmtContext::Truncate_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Truncate_stmtContext::TRUNCATE_GS() {
  return getToken(Gauss200Parser::TRUNCATE_GS, 0);
}

std::vector<Gauss200Parser::Alter_table_nameContext *> Gauss200Parser::Truncate_stmtContext::alter_table_name() {
  return getRuleContexts<Gauss200Parser::Alter_table_nameContext>();
}

Gauss200Parser::Alter_table_nameContext* Gauss200Parser::Truncate_stmtContext::alter_table_name(size_t i) {
  return getRuleContext<Gauss200Parser::Alter_table_nameContext>(i);
}

tree::TerminalNode* Gauss200Parser::Truncate_stmtContext::TABLE_GS() {
  return getToken(Gauss200Parser::TABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Truncate_stmtContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Truncate_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Truncate_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

tree::TerminalNode* Gauss200Parser::Truncate_stmtContext::CONTINUE_GS() {
  return getToken(Gauss200Parser::CONTINUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Truncate_stmtContext::IDENTITY_GS() {
  return getToken(Gauss200Parser::IDENTITY_GS, 0);
}

Gauss200Parser::Cascade_restrictContext* Gauss200Parser::Truncate_stmtContext::cascade_restrict() {
  return getRuleContext<Gauss200Parser::Cascade_restrictContext>(0);
}


size_t Gauss200Parser::Truncate_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleTruncate_stmt;
}

void Gauss200Parser::Truncate_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTruncate_stmt(this);
}

void Gauss200Parser::Truncate_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTruncate_stmt(this);
}


antlrcpp::Any Gauss200Parser::Truncate_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTruncate_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Truncate_stmtContext* Gauss200Parser::truncate_stmt() {
  Truncate_stmtContext *_localctx = _tracker.createInstance<Truncate_stmtContext>(_ctx, getState());
  enterRule(_localctx, 916, Gauss200Parser::RuleTruncate_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5927);
    match(Gauss200Parser::TRUNCATE_GS);
    setState(5929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::TABLE_GS) {
      setState(5928);
      match(Gauss200Parser::TABLE_GS);
    }
    setState(5932);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 723, _ctx)) {
    case 1: {
      setState(5931);
      match(Gauss200Parser::ONLY_GS);
      break;
    }

    }
    setState(5934);
    alter_table_name();
    setState(5939);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5935);
      match(Gauss200Parser::COMMA);
      setState(5936);
      alter_table_name();
      setState(5941);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5944);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CONTINUE_GS) {
      setState(5942);
      match(Gauss200Parser::CONTINUE_GS);
      setState(5943);
      match(Gauss200Parser::IDENTITY_GS);
    }
    setState(5947);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::CASCADE_GS || _la == Gauss200Parser::RESTRICT_GS) {
      setState(5946);
      cascade_restrict();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Vacuum_stmtContext ------------------------------------------------------------------

Gauss200Parser::Vacuum_stmtContext::Vacuum_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Vacuum_stmtContext::VACUUM_GS() {
  return getToken(Gauss200Parser::VACUUM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Vacuum_stmtContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Vacuum_keyword_listContext* Gauss200Parser::Vacuum_stmtContext::vacuum_keyword_list() {
  return getRuleContext<Gauss200Parser::Vacuum_keyword_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Vacuum_stmtContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<Gauss200Parser::Vacuum_optionContext *> Gauss200Parser::Vacuum_stmtContext::vacuum_option() {
  return getRuleContexts<Gauss200Parser::Vacuum_optionContext>();
}

Gauss200Parser::Vacuum_optionContext* Gauss200Parser::Vacuum_stmtContext::vacuum_option(size_t i) {
  return getRuleContext<Gauss200Parser::Vacuum_optionContext>(i);
}


size_t Gauss200Parser::Vacuum_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleVacuum_stmt;
}

void Gauss200Parser::Vacuum_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVacuum_stmt(this);
}

void Gauss200Parser::Vacuum_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVacuum_stmt(this);
}


antlrcpp::Any Gauss200Parser::Vacuum_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitVacuum_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Vacuum_stmtContext* Gauss200Parser::vacuum_stmt() {
  Vacuum_stmtContext *_localctx = _tracker.createInstance<Vacuum_stmtContext>(_ctx, getState());
  enterRule(_localctx, 918, Gauss200Parser::RuleVacuum_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5949);
    match(Gauss200Parser::VACUUM_GS);
    setState(5951);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LEFT_PAREN) {
      setState(5950);
      match(Gauss200Parser::LEFT_PAREN);
    }
    setState(5954);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 728, _ctx)) {
    case 1: {
      setState(5953);
      vacuum_keyword_list();
      break;
    }

    }
    setState(5957);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::RIGHT_PAREN) {
      setState(5956);
      match(Gauss200Parser::RIGHT_PAREN);
    }
    setState(5962);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Gauss200Parser::ALL_GS)
      | (1ULL << Gauss200Parser::ANALYSE_GS)
      | (1ULL << Gauss200Parser::ANALYZE_GS)
      | (1ULL << Gauss200Parser::AND_GS)
      | (1ULL << Gauss200Parser::ANY_GS)
      | (1ULL << Gauss200Parser::ARRAY_GS)
      | (1ULL << Gauss200Parser::ASC_GS)
      | (1ULL << Gauss200Parser::ASYMMETRIC_GS)
      | (1ULL << Gauss200Parser::AS_GS)
      | (1ULL << Gauss200Parser::AUTHID_GS)
      | (1ULL << Gauss200Parser::BOTH_GS)
      | (1ULL << Gauss200Parser::BUCKETS_GS)
      | (1ULL << Gauss200Parser::CASE_GS)
      | (1ULL << Gauss200Parser::CAST_GS)
      | (1ULL << Gauss200Parser::CHECK_GS)
      | (1ULL << Gauss200Parser::COLLATE_GS)
      | (1ULL << Gauss200Parser::COLUMN_GS)
      | (1ULL << Gauss200Parser::CONSTRAINT_GS)
      | (1ULL << Gauss200Parser::CREATE_GS)
      | (1ULL << Gauss200Parser::CURRENT_CATALOG_GS)
      | (1ULL << Gauss200Parser::CURRENT_DATE_GS)
      | (1ULL << Gauss200Parser::CURRENT_ROLE_GS)
      | (1ULL << Gauss200Parser::CURRENT_TIMESTAMP_GS)
      | (1ULL << Gauss200Parser::CURRENT_TIME_GS)
      | (1ULL << Gauss200Parser::CURRENT_USER_GS)
      | (1ULL << Gauss200Parser::DEFAULT_GS)
      | (1ULL << Gauss200Parser::DEFERRABLE_GS)
      | (1ULL << Gauss200Parser::DESC_GS)
      | (1ULL << Gauss200Parser::DISTINCT_GS)
      | (1ULL << Gauss200Parser::DO_GS)
      | (1ULL << Gauss200Parser::ELSE_GS)
      | (1ULL << Gauss200Parser::END_GS)
      | (1ULL << Gauss200Parser::EXCEPT_GS)
      | (1ULL << Gauss200Parser::FALSE_GS)
      | (1ULL << Gauss200Parser::FETCH_GS)
      | (1ULL << Gauss200Parser::FOREIGN_GS)
      | (1ULL << Gauss200Parser::FOR_GS)
      | (1ULL << Gauss200Parser::FROM_GS)
      | (1ULL << Gauss200Parser::FUNCTION_GS)
      | (1ULL << Gauss200Parser::GRANT_GS)
      | (1ULL << Gauss200Parser::GROUP_GS)
      | (1ULL << Gauss200Parser::HAVING_GS)
      | (1ULL << Gauss200Parser::INITIALLY_GS)
      | (1ULL << Gauss200Parser::INTERSECT_GS)
      | (1ULL << Gauss200Parser::INTO_GS)
      | (1ULL << Gauss200Parser::IN_GS)
      | (1ULL << Gauss200Parser::IS_GS)
      | (1ULL << Gauss200Parser::LEADING_GS)
      | (1ULL << Gauss200Parser::LESS_GS)
      | (1ULL << Gauss200Parser::LIMIT_GS)
      | (1ULL << Gauss200Parser::LOCALTIMESTAMP_GS)
      | (1ULL << Gauss200Parser::LOCALTIME_GS)
      | (1ULL << Gauss200Parser::MAXVALUE_GS)
      | (1ULL << Gauss200Parser::MINUS_GS)
      | (1ULL << Gauss200Parser::MODIFY_GS)
      | (1ULL << Gauss200Parser::NLSSORT_GS)
      | (1ULL << Gauss200Parser::NOT_GS)
      | (1ULL << Gauss200Parser::NULL_GS)
      | (1ULL << Gauss200Parser::OFFSET_GS)
      | (1ULL << Gauss200Parser::ONLY_GS)
      | (1ULL << Gauss200Parser::ON_GS)
      | (1ULL << Gauss200Parser::ORDER_GS)
      | (1ULL << Gauss200Parser::OR_GS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Gauss200Parser::PERFORMANCE_GS - 64))
      | (1ULL << (Gauss200Parser::PLACING_GS - 64))
      | (1ULL << (Gauss200Parser::PRIMARY_GS - 64))
      | (1ULL << (Gauss200Parser::PROCEDURE_GS - 64))
      | (1ULL << (Gauss200Parser::REFERENCES_GS - 64))
      | (1ULL << (Gauss200Parser::REJECT_GS - 64))
      | (1ULL << (Gauss200Parser::RETURNING_GS - 64))
      | (1ULL << (Gauss200Parser::RETURN_GS - 64))
      | (1ULL << (Gauss200Parser::SELECT_GS - 64))
      | (1ULL << (Gauss200Parser::SESSION_USER_GS - 64))
      | (1ULL << (Gauss200Parser::SOME_GS - 64))
      | (1ULL << (Gauss200Parser::SPLIT_GS - 64))
      | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 64))
      | (1ULL << (Gauss200Parser::SYSDATE_GS - 64))
      | (1ULL << (Gauss200Parser::THEN_GS - 64))
      | (1ULL << (Gauss200Parser::TO_GS - 64))
      | (1ULL << (Gauss200Parser::TRAILING_GS - 64))
      | (1ULL << (Gauss200Parser::TRUE_GS - 64))
      | (1ULL << (Gauss200Parser::UNION_GS - 64))
      | (1ULL << (Gauss200Parser::UNIQUE_GS - 64))
      | (1ULL << (Gauss200Parser::USER_GS - 64))
      | (1ULL << (Gauss200Parser::USING_GS - 64))
      | (1ULL << (Gauss200Parser::VARIADIC_GS - 64))
      | (1ULL << (Gauss200Parser::WHEN_GS - 64))
      | (1ULL << (Gauss200Parser::WHERE_GS - 64))
      | (1ULL << (Gauss200Parser::WINDOW_GS - 64))
      | (1ULL << (Gauss200Parser::WITH_GS - 64))
      | (1ULL << (Gauss200Parser::ABORT_GS - 64))
      | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 64))
      | (1ULL << (Gauss200Parser::ACCESS_GS - 64))
      | (1ULL << (Gauss200Parser::ACCOUNT_GS - 64))
      | (1ULL << (Gauss200Parser::ACTION_GS - 64))
      | (1ULL << (Gauss200Parser::ADD_GS - 64))
      | (1ULL << (Gauss200Parser::ADMIN_GS - 64))
      | (1ULL << (Gauss200Parser::AFTER_GS - 64))
      | (1ULL << (Gauss200Parser::AGGREGATE_GS - 64))
      | (1ULL << (Gauss200Parser::ALSO_GS - 64))
      | (1ULL << (Gauss200Parser::ALTER_GS - 64))
      | (1ULL << (Gauss200Parser::ALWAYS_GS - 64))
      | (1ULL << (Gauss200Parser::APP_GS - 64))
      | (1ULL << (Gauss200Parser::ASSERTION_GS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (Gauss200Parser::ASSIGNMENT_GS - 128))
      | (1ULL << (Gauss200Parser::ATTRIBUTE_GS - 128))
      | (1ULL << (Gauss200Parser::AT_GS - 128))
      | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 128))
      | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 128))
      | (1ULL << (Gauss200Parser::BACKWARD_GS - 128))
      | (1ULL << (Gauss200Parser::BARRIER_GS - 128))
      | (1ULL << (Gauss200Parser::BEFORE_GS - 128))
      | (1ULL << (Gauss200Parser::BEGIN_GS - 128))
      | (1ULL << (Gauss200Parser::BLOB_GS - 128))
      | (1ULL << (Gauss200Parser::BY_GS - 128))
      | (1ULL << (Gauss200Parser::CACHE_GS - 128))
      | (1ULL << (Gauss200Parser::CALLED_GS - 128))
      | (1ULL << (Gauss200Parser::CALL_GS - 128))
      | (1ULL << (Gauss200Parser::CASCADED_GS - 128))
      | (1ULL << (Gauss200Parser::CASCADE_GS - 128))
      | (1ULL << (Gauss200Parser::CATALOG_GS - 128))
      | (1ULL << (Gauss200Parser::CHAIN_GS - 128))
      | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 128))
      | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 128))
      | (1ULL << (Gauss200Parser::CLASS_GS - 128))
      | (1ULL << (Gauss200Parser::CLEAN_GS - 128))
      | (1ULL << (Gauss200Parser::CLOB_GS - 128))
      | (1ULL << (Gauss200Parser::CLOSE_GS - 128))
      | (1ULL << (Gauss200Parser::CLUSTER_GS - 128))
      | (1ULL << (Gauss200Parser::COMMENTS_GS - 128))
      | (1ULL << (Gauss200Parser::COMMENT_GS - 128))
      | (1ULL << (Gauss200Parser::COMMITTED_GS - 128))
      | (1ULL << (Gauss200Parser::COMMIT_GS - 128))
      | (1ULL << (Gauss200Parser::COMPRESS_GS - 128))
      | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 128))
      | (1ULL << (Gauss200Parser::CONNECTION_GS - 128))
      | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 128))
      | (1ULL << (Gauss200Parser::CONTENT_GS - 128))
      | (1ULL << (Gauss200Parser::CONTINUE_GS - 128))
      | (1ULL << (Gauss200Parser::CONVERSION_GS - 128))
      | (1ULL << (Gauss200Parser::COORDINATOR_GS - 128))
      | (1ULL << (Gauss200Parser::COPY_GS - 128))
      | (1ULL << (Gauss200Parser::COST_GS - 128))
      | (1ULL << (Gauss200Parser::CSV_GS - 128))
      | (1ULL << (Gauss200Parser::CURRENT_GS - 128))
      | (1ULL << (Gauss200Parser::CURSOR_GS - 128))
      | (1ULL << (Gauss200Parser::CYCLE_GS - 128))
      | (1ULL << (Gauss200Parser::DATABASE_GS - 128))
      | (1ULL << (Gauss200Parser::DATAFILE_GS - 128))
      | (1ULL << (Gauss200Parser::DATA_GS - 128))
      | (1ULL << (Gauss200Parser::DAY_GS - 128))
      | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 128))
      | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 128))
      | (1ULL << (Gauss200Parser::DECLARE_GS - 128))
      | (1ULL << (Gauss200Parser::DEFAULTS_GS - 128))
      | (1ULL << (Gauss200Parser::DEFERRED_GS - 128))
      | (1ULL << (Gauss200Parser::DEFINER_GS - 128))
      | (1ULL << (Gauss200Parser::DELETE_GS - 128))
      | (1ULL << (Gauss200Parser::DELIMITERS_GS - 128))
      | (1ULL << (Gauss200Parser::DELIMITER_GS - 128))
      | (1ULL << (Gauss200Parser::DELTA_GS - 128))
      | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 128))
      | (1ULL << (Gauss200Parser::DICTIONARY_GS - 128))
      | (1ULL << (Gauss200Parser::DIRECT_GS - 128))
      | (1ULL << (Gauss200Parser::DISABLE_GS - 128))
      | (1ULL << (Gauss200Parser::DISCARD_GS - 128))
      | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 128))
      | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (Gauss200Parser::DOCUMENT_GS - 192))
      | (1ULL << (Gauss200Parser::DOMAIN_GS - 192))
      | (1ULL << (Gauss200Parser::DOUBLE_GS - 192))
      | (1ULL << (Gauss200Parser::DROP_GS - 192))
      | (1ULL << (Gauss200Parser::EACH_GS - 192))
      | (1ULL << (Gauss200Parser::ENABLE_GS - 192))
      | (1ULL << (Gauss200Parser::ENCODING_GS - 192))
      | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 192))
      | (1ULL << (Gauss200Parser::ENFORCED_GS - 192))
      | (1ULL << (Gauss200Parser::ENUM_GS - 192))
      | (1ULL << (Gauss200Parser::EOL_GS - 192))
      | (1ULL << (Gauss200Parser::ESCAPE_GS - 192))
      | (1ULL << (Gauss200Parser::ESCAPING_GS - 192))
      | (1ULL << (Gauss200Parser::EVERY_GS - 192))
      | (1ULL << (Gauss200Parser::EXCHANGE_GS - 192))
      | (1ULL << (Gauss200Parser::EXCLUDE_GS - 192))
      | (1ULL << (Gauss200Parser::EXCLUDING_GS - 192))
      | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 192))
      | (1ULL << (Gauss200Parser::EXECUTE_GS - 192))
      | (1ULL << (Gauss200Parser::EXPLAIN_GS - 192))
      | (1ULL << (Gauss200Parser::EXTENSION_GS - 192))
      | (1ULL << (Gauss200Parser::EXTERNAL_GS - 192))
      | (1ULL << (Gauss200Parser::FAMILY_GS - 192))
      | (1ULL << (Gauss200Parser::FILEHEADER_GS - 192))
      | (1ULL << (Gauss200Parser::FIRST_GS - 192))
      | (1ULL << (Gauss200Parser::FIXED_GS - 192))
      | (1ULL << (Gauss200Parser::FOLLOWING_GS - 192))
      | (1ULL << (Gauss200Parser::FORCE_GS - 192))
      | (1ULL << (Gauss200Parser::FORMATTER_GS - 192))
      | (1ULL << (Gauss200Parser::FORWARD_GS - 192))
      | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 192))
      | (1ULL << (Gauss200Parser::GLOBAL_GS - 192))
      | (1ULL << (Gauss200Parser::GRANTED_GS - 192))
      | (1ULL << (Gauss200Parser::HANDLER_GS - 192))
      | (1ULL << (Gauss200Parser::HEADER_GS - 192))
      | (1ULL << (Gauss200Parser::HOLD_GS - 192))
      | (1ULL << (Gauss200Parser::HOUR_GS - 192))
      | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 192))
      | (1ULL << (Gauss200Parser::IDENTITY_GS - 192))
      | (1ULL << (Gauss200Parser::IF_GS - 192))
      | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 192))
      | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 192))
      | (1ULL << (Gauss200Parser::IMPLICIT_GS - 192))
      | (1ULL << (Gauss200Parser::INCLUDING_GS - 192))
      | (1ULL << (Gauss200Parser::INCREMENT_GS - 192))
      | (1ULL << (Gauss200Parser::INDEXES_GS - 192))
      | (1ULL << (Gauss200Parser::INDEX_GS - 192))
      | (1ULL << (Gauss200Parser::INHERITS_GS - 192))
      | (1ULL << (Gauss200Parser::INHERIT_GS - 192))
      | (1ULL << (Gauss200Parser::INITIAL_GS - 192))
      | (1ULL << (Gauss200Parser::INITRANS_GS - 192))
      | (1ULL << (Gauss200Parser::INLINE_GS - 192))
      | (1ULL << (Gauss200Parser::INPUT_GS - 192))
      | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 192))
      | (1ULL << (Gauss200Parser::INSERT_GS - 192))
      | (1ULL << (Gauss200Parser::INSTEAD_GS - 192))
      | (1ULL << (Gauss200Parser::INVOKER_GS - 192))
      | (1ULL << (Gauss200Parser::ISOLATION_GS - 192))
      | (1ULL << (Gauss200Parser::KEY_GS - 192))
      | (1ULL << (Gauss200Parser::LABEL_GS - 192))
      | (1ULL << (Gauss200Parser::LANGUAGE_GS - 192))
      | (1ULL << (Gauss200Parser::LARGE_GS - 192))
      | (1ULL << (Gauss200Parser::LAST_GS - 192))
      | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (Gauss200Parser::LC_CTYPE_GS - 256))
      | (1ULL << (Gauss200Parser::LEAKPROOF_GS - 256))
      | (1ULL << (Gauss200Parser::LEVEL_GS - 256))
      | (1ULL << (Gauss200Parser::LISTEN_GS - 256))
      | (1ULL << (Gauss200Parser::LOAD_GS - 256))
      | (1ULL << (Gauss200Parser::LOCAL_GS - 256))
      | (1ULL << (Gauss200Parser::LOCATION_GS - 256))
      | (1ULL << (Gauss200Parser::LOCK_GS - 256))
      | (1ULL << (Gauss200Parser::LOGGING_GS - 256))
      | (1ULL << (Gauss200Parser::LOGIN_GS - 256))
      | (1ULL << (Gauss200Parser::LOG_GS - 256))
      | (1ULL << (Gauss200Parser::LOOP_GS - 256))
      | (1ULL << (Gauss200Parser::MAPPING_GS - 256))
      | (1ULL << (Gauss200Parser::MATCHED_GS - 256))
      | (1ULL << (Gauss200Parser::MATCH_GS - 256))
      | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 256))
      | (1ULL << (Gauss200Parser::MAXSIZE_GS - 256))
      | (1ULL << (Gauss200Parser::MAXTRANS_GS - 256))
      | (1ULL << (Gauss200Parser::MERGE_GS - 256))
      | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 256))
      | (1ULL << (Gauss200Parser::MINUTE_GS - 256))
      | (1ULL << (Gauss200Parser::MINVALUE_GS - 256))
      | (1ULL << (Gauss200Parser::MODE_GS - 256))
      | (1ULL << (Gauss200Parser::MONTH_GS - 256))
      | (1ULL << (Gauss200Parser::MOVEMENT_GS - 256))
      | (1ULL << (Gauss200Parser::MOVE_GS - 256))
      | (1ULL << (Gauss200Parser::NAMES_GS - 256))
      | (1ULL << (Gauss200Parser::NAME_GS - 256))
      | (1ULL << (Gauss200Parser::NEXT_GS - 256))
      | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 256))
      | (1ULL << (Gauss200Parser::NOCYCLE_GS - 256))
      | (1ULL << (Gauss200Parser::NODE_GS - 256))
      | (1ULL << (Gauss200Parser::NOLOGGING_GS - 256))
      | (1ULL << (Gauss200Parser::NOLOGIN_GS - 256))
      | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 256))
      | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 256))
      | (1ULL << (Gauss200Parser::NOTHING_GS - 256))
      | (1ULL << (Gauss200Parser::NOTIFY_GS - 256))
      | (1ULL << (Gauss200Parser::NOWAIT_GS - 256))
      | (1ULL << (Gauss200Parser::NO_GS - 256))
      | (1ULL << (Gauss200Parser::NULLS_GS - 256))
      | (1ULL << (Gauss200Parser::NUMSTR_GS - 256))
      | (1ULL << (Gauss200Parser::OBJECT_GS - 256))
      | (1ULL << (Gauss200Parser::OFF_GS - 256))
      | (1ULL << (Gauss200Parser::OF_GS - 256))
      | (1ULL << (Gauss200Parser::OIDS_GS - 256))
      | (1ULL << (Gauss200Parser::OPERATOR_GS - 256))
      | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 256))
      | (1ULL << (Gauss200Parser::OPTIONS_GS - 256))
      | (1ULL << (Gauss200Parser::OPTION_GS - 256))
      | (1ULL << (Gauss200Parser::OWNED_GS - 256))
      | (1ULL << (Gauss200Parser::OWNER_GS - 256))
      | (1ULL << (Gauss200Parser::PARSER_GS - 256))
      | (1ULL << (Gauss200Parser::PARTIAL_GS - 256))
      | (1ULL << (Gauss200Parser::PARTITIONS_GS - 256))
      | (1ULL << (Gauss200Parser::PARTITION_GS - 256))
      | (1ULL << (Gauss200Parser::PASSING_GS - 256))
      | (1ULL << (Gauss200Parser::PASSWORD_GS - 256))
      | (1ULL << (Gauss200Parser::PCTFREE_GS - 256))
      | (1ULL << (Gauss200Parser::PERCENT_GS - 256))
      | (1ULL << (Gauss200Parser::PER_GS - 256))
      | (1ULL << (Gauss200Parser::PLANS_GS - 256))
      | (1ULL << (Gauss200Parser::POOL_GS - 256))
      | (1ULL << (Gauss200Parser::PRECEDING_GS - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (Gauss200Parser::PREFERRED_GS - 320))
      | (1ULL << (Gauss200Parser::PREFIX_GS - 320))
      | (1ULL << (Gauss200Parser::PREPARED_GS - 320))
      | (1ULL << (Gauss200Parser::PREPARE_GS - 320))
      | (1ULL << (Gauss200Parser::PRESERVE_GS - 320))
      | (1ULL << (Gauss200Parser::PRIOR_GS - 320))
      | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 320))
      | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 320))
      | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 320))
      | (1ULL << (Gauss200Parser::PROFILE_GS - 320))
      | (1ULL << (Gauss200Parser::QUERY_GS - 320))
      | (1ULL << (Gauss200Parser::QUOTE_GS - 320))
      | (1ULL << (Gauss200Parser::RANGE_GS - 320))
      | (1ULL << (Gauss200Parser::RAW_GS - 320))
      | (1ULL << (Gauss200Parser::READ_GS - 320))
      | (1ULL << (Gauss200Parser::REASSIGN_GS - 320))
      | (1ULL << (Gauss200Parser::REBUILD_GS - 320))
      | (1ULL << (Gauss200Parser::RECHECK_GS - 320))
      | (1ULL << (Gauss200Parser::RECURSIVE_GS - 320))
      | (1ULL << (Gauss200Parser::REF_GS - 320))
      | (1ULL << (Gauss200Parser::REINDEX_GS - 320))
      | (1ULL << (Gauss200Parser::RELATIVE_GS - 320))
      | (1ULL << (Gauss200Parser::RELEASE_GS - 320))
      | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 320))
      | (1ULL << (Gauss200Parser::REMOTE_GS - 320))
      | (1ULL << (Gauss200Parser::RENAME_GS - 320))
      | (1ULL << (Gauss200Parser::REPEATABLE_GS - 320))
      | (1ULL << (Gauss200Parser::REPLACE_GS - 320))
      | (1ULL << (Gauss200Parser::REPLICA_GS - 320))
      | (1ULL << (Gauss200Parser::RESET_GS - 320))
      | (1ULL << (Gauss200Parser::RESIZE_GS - 320))
      | (1ULL << (Gauss200Parser::RESOURCE_GS - 320))
      | (1ULL << (Gauss200Parser::RESTART_GS - 320))
      | (1ULL << (Gauss200Parser::RESTRICT_GS - 320))
      | (1ULL << (Gauss200Parser::RETURNS_GS - 320))
      | (1ULL << (Gauss200Parser::REUSE_GS - 320))
      | (1ULL << (Gauss200Parser::REVOKE_GS - 320))
      | (1ULL << (Gauss200Parser::ROLE_GS - 320))
      | (1ULL << (Gauss200Parser::ROLLBACK_GS - 320))
      | (1ULL << (Gauss200Parser::ROWS_GS - 320))
      | (1ULL << (Gauss200Parser::RULE_GS - 320))
      | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 320))
      | (1ULL << (Gauss200Parser::SCHEMA_GS - 320))
      | (1ULL << (Gauss200Parser::SCROLL_GS - 320))
      | (1ULL << (Gauss200Parser::SEARCH_GS - 320))
      | (1ULL << (Gauss200Parser::SECOND_GS - 320))
      | (1ULL << (Gauss200Parser::SECURITY_GS - 320))
      | (1ULL << (Gauss200Parser::SEQUENCES_GS - 320))
      | (1ULL << (Gauss200Parser::SEQUENCE_GS - 320))
      | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 320))
      | (1ULL << (Gauss200Parser::SERVER_GS - 320))
      | (1ULL << (Gauss200Parser::SESSION_GS - 320))
      | (1ULL << (Gauss200Parser::SET_GS - 320))
      | (1ULL << (Gauss200Parser::SHARE_GS - 320))
      | (1ULL << (Gauss200Parser::SHOW_GS - 320))
      | (1ULL << (Gauss200Parser::SIMPLE_GS - 320))
      | (1ULL << (Gauss200Parser::SIZE_GS - 320))
      | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 320))
      | (1ULL << (Gauss200Parser::STABLE_GS - 320))
      | (1ULL << (Gauss200Parser::STANDALONE_GS - 320))
      | (1ULL << (Gauss200Parser::START_GS - 320))
      | (1ULL << (Gauss200Parser::STATEMENT_GS - 320))
      | (1ULL << (Gauss200Parser::STATISTICS_GS - 320))
      | (1ULL << (Gauss200Parser::STDIN_GS - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 384)) & ((1ULL << (Gauss200Parser::STDOUT_GS - 384))
      | (1ULL << (Gauss200Parser::STORAGE_GS - 384))
      | (1ULL << (Gauss200Parser::STORE_GS - 384))
      | (1ULL << (Gauss200Parser::STRICT_GS - 384))
      | (1ULL << (Gauss200Parser::STRIP_GS - 384))
      | (1ULL << (Gauss200Parser::SUPERUSER_GS - 384))
      | (1ULL << (Gauss200Parser::SYSID_GS - 384))
      | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 384))
      | (1ULL << (Gauss200Parser::SYSTEM_GS - 384))
      | (1ULL << (Gauss200Parser::TABLESPACE_GS - 384))
      | (1ULL << (Gauss200Parser::TABLES_GS - 384))
      | (1ULL << (Gauss200Parser::TEMPLATE_GS - 384))
      | (1ULL << (Gauss200Parser::TEMPORARY_GS - 384))
      | (1ULL << (Gauss200Parser::TEMP_GS - 384))
      | (1ULL << (Gauss200Parser::TEXT_GS - 384))
      | (1ULL << (Gauss200Parser::THAN_GS - 384))
      | (1ULL << (Gauss200Parser::TRANSACTION_GS - 384))
      | (1ULL << (Gauss200Parser::TRIGGER_GS - 384))
      | (1ULL << (Gauss200Parser::TRUNCATE_GS - 384))
      | (1ULL << (Gauss200Parser::TRUSTED_GS - 384))
      | (1ULL << (Gauss200Parser::TYPES_GS - 384))
      | (1ULL << (Gauss200Parser::TYPE_GS - 384))
      | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 384))
      | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 384))
      | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 384))
      | (1ULL << (Gauss200Parser::UNKNOWN_GS - 384))
      | (1ULL << (Gauss200Parser::UNLIMITED_GS - 384))
      | (1ULL << (Gauss200Parser::UNLISTEN_GS - 384))
      | (1ULL << (Gauss200Parser::UNLOCK_GS - 384))
      | (1ULL << (Gauss200Parser::UNLOGGED_GS - 384))
      | (1ULL << (Gauss200Parser::UNTIL_GS - 384))
      | (1ULL << (Gauss200Parser::UNUSABLE_GS - 384))
      | (1ULL << (Gauss200Parser::UPDATE_GS - 384))
      | (1ULL << (Gauss200Parser::VACUUM_GS - 384))
      | (1ULL << (Gauss200Parser::VALIDATE_GS - 384))
      | (1ULL << (Gauss200Parser::VALIDATION_GS - 384))
      | (1ULL << (Gauss200Parser::VALIDATOR_GS - 384))
      | (1ULL << (Gauss200Parser::VALID_GS - 384))
      | (1ULL << (Gauss200Parser::VALUE_GS - 384))
      | (1ULL << (Gauss200Parser::VARYING_GS - 384))
      | (1ULL << (Gauss200Parser::VERSION_GS - 384))
      | (1ULL << (Gauss200Parser::VIEW_GS - 384))
      | (1ULL << (Gauss200Parser::VOLATILE_GS - 384))
      | (1ULL << (Gauss200Parser::WHITESPACE_GS - 384))
      | (1ULL << (Gauss200Parser::WITHIN_GS - 384))
      | (1ULL << (Gauss200Parser::WITHOUT_GS - 384))
      | (1ULL << (Gauss200Parser::WORKLOAD_GS - 384))
      | (1ULL << (Gauss200Parser::WORK_GS - 384))
      | (1ULL << (Gauss200Parser::WRAPPER_GS - 384))
      | (1ULL << (Gauss200Parser::WRITE_GS - 384))
      | (1ULL << (Gauss200Parser::XML_GS - 384))
      | (1ULL << (Gauss200Parser::YEAR_GS - 384))
      | (1ULL << (Gauss200Parser::YES_GS - 384))
      | (1ULL << (Gauss200Parser::ZONE_GS - 384))
      | (1ULL << (Gauss200Parser::BETWEEN_GS - 384))
      | (1ULL << (Gauss200Parser::BIGINT_GS - 384))
      | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 384))
      | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 384))
      | (1ULL << (Gauss200Parser::BIT_GS - 384))
      | (1ULL << (Gauss200Parser::BOOLEAN_GS - 384))
      | (1ULL << (Gauss200Parser::CHARACTER_GS - 384))
      | (1ULL << (Gauss200Parser::CHAR_GS - 384))
      | (1ULL << (Gauss200Parser::COALESCE_GS - 384))
      | (1ULL << (Gauss200Parser::DATE_GS - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 448)) & ((1ULL << (Gauss200Parser::DECIMAL_GS - 448))
      | (1ULL << (Gauss200Parser::DECODE_GS - 448))
      | (1ULL << (Gauss200Parser::DEC_GS - 448))
      | (1ULL << (Gauss200Parser::EXISTS_GS - 448))
      | (1ULL << (Gauss200Parser::EXTRACT_GS - 448))
      | (1ULL << (Gauss200Parser::FLOAT_GS - 448))
      | (1ULL << (Gauss200Parser::GREATEST_GS - 448))
      | (1ULL << (Gauss200Parser::INOUT_GS - 448))
      | (1ULL << (Gauss200Parser::INTEGER_GS - 448))
      | (1ULL << (Gauss200Parser::INTERVAL_GS - 448))
      | (1ULL << (Gauss200Parser::INT_GS - 448))
      | (1ULL << (Gauss200Parser::LEAST_GS - 448))
      | (1ULL << (Gauss200Parser::NATIONAL_GS - 448))
      | (1ULL << (Gauss200Parser::NCHAR_GS - 448))
      | (1ULL << (Gauss200Parser::NONE_GS - 448))
      | (1ULL << (Gauss200Parser::NULLIF_GS - 448))
      | (1ULL << (Gauss200Parser::NUMBER_GS - 448))
      | (1ULL << (Gauss200Parser::NUMERIC_GS - 448))
      | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 448))
      | (1ULL << (Gauss200Parser::NVL_GS - 448))
      | (1ULL << (Gauss200Parser::OUT_GS - 448))
      | (1ULL << (Gauss200Parser::OVERLAY_GS - 448))
      | (1ULL << (Gauss200Parser::POSITION_GS - 448))
      | (1ULL << (Gauss200Parser::PRECISION_GS - 448))
      | (1ULL << (Gauss200Parser::REAL_GS - 448))
      | (1ULL << (Gauss200Parser::ROW_GS - 448))
      | (1ULL << (Gauss200Parser::SETOF_GS - 448))
      | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 448))
      | (1ULL << (Gauss200Parser::SMALLINT_GS - 448))
      | (1ULL << (Gauss200Parser::SUBSTRING_GS - 448))
      | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 448))
      | (1ULL << (Gauss200Parser::TIME_GS - 448))
      | (1ULL << (Gauss200Parser::TINYINT_GS - 448))
      | (1ULL << (Gauss200Parser::TREAT_GS - 448))
      | (1ULL << (Gauss200Parser::TRIM_GS - 448))
      | (1ULL << (Gauss200Parser::VALUES_GS - 448))
      | (1ULL << (Gauss200Parser::VARCHAR2_GS - 448))
      | (1ULL << (Gauss200Parser::VARCHAR_GS - 448))
      | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 448))
      | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 448))
      | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 448))
      | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 448))
      | (1ULL << (Gauss200Parser::XMLFOREST_GS - 448))
      | (1ULL << (Gauss200Parser::XMLPARSE_GS - 448))
      | (1ULL << (Gauss200Parser::XMLPI_GS - 448))
      | (1ULL << (Gauss200Parser::XMLROOT_GS - 448))
      | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 448))
      | (1ULL << (Gauss200Parser::SERIAL_GS - 448))
      | (1ULL << (Gauss200Parser::PATH_GS - 448)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
      | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
      | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
      | (1ULL << (Gauss200Parser::USAGE_GS - 516))
      | (1ULL << (Gauss200Parser::SPACE_GS - 516))
      | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
      | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
      | (1ULL << (Gauss200Parser::CUBE_GS - 601))
      | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
      | (1ULL << (Gauss200Parser::SETS_GS - 601))
      | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
      | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
      | (1ULL << (Gauss200Parser::SCONST - 601)))) != 0)) {
      setState(5959);
      vacuum_option();
      setState(5964);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Vacuum_keyword_listContext ------------------------------------------------------------------

Gauss200Parser::Vacuum_keyword_listContext::Vacuum_keyword_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Vacuum_keywordContext *> Gauss200Parser::Vacuum_keyword_listContext::vacuum_keyword() {
  return getRuleContexts<Gauss200Parser::Vacuum_keywordContext>();
}

Gauss200Parser::Vacuum_keywordContext* Gauss200Parser::Vacuum_keyword_listContext::vacuum_keyword(size_t i) {
  return getRuleContext<Gauss200Parser::Vacuum_keywordContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Vacuum_keyword_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Vacuum_keyword_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Vacuum_keyword_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleVacuum_keyword_list;
}

void Gauss200Parser::Vacuum_keyword_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVacuum_keyword_list(this);
}

void Gauss200Parser::Vacuum_keyword_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVacuum_keyword_list(this);
}


antlrcpp::Any Gauss200Parser::Vacuum_keyword_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitVacuum_keyword_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Vacuum_keyword_listContext* Gauss200Parser::vacuum_keyword_list() {
  Vacuum_keyword_listContext *_localctx = _tracker.createInstance<Vacuum_keyword_listContext>(_ctx, getState());
  enterRule(_localctx, 920, Gauss200Parser::RuleVacuum_keyword_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5965);
    vacuum_keyword();
    setState(5972);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 732, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5967);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::COMMA) {
          setState(5966);
          match(Gauss200Parser::COMMA);
        }
        setState(5969);
        vacuum_keyword(); 
      }
      setState(5974);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 732, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Vacuum_keywordContext ------------------------------------------------------------------

Gauss200Parser::Vacuum_keywordContext::Vacuum_keywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Vacuum_keywordContext::FULL_GS() {
  return getToken(Gauss200Parser::FULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Vacuum_keywordContext::COMPACT_GS() {
  return getToken(Gauss200Parser::COMPACT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Vacuum_keywordContext::FREEZE_GS() {
  return getToken(Gauss200Parser::FREEZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Vacuum_keywordContext::VERBOSE_GS() {
  return getToken(Gauss200Parser::VERBOSE_GS, 0);
}

Gauss200Parser::Analyze_keywordContext* Gauss200Parser::Vacuum_keywordContext::analyze_keyword() {
  return getRuleContext<Gauss200Parser::Analyze_keywordContext>(0);
}

tree::TerminalNode* Gauss200Parser::Vacuum_keywordContext::DELTAMERGE_GS() {
  return getToken(Gauss200Parser::DELTAMERGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Vacuum_keywordContext::HDFSDIRECTORY_GS() {
  return getToken(Gauss200Parser::HDFSDIRECTORY_GS, 0);
}


size_t Gauss200Parser::Vacuum_keywordContext::getRuleIndex() const {
  return Gauss200Parser::RuleVacuum_keyword;
}

void Gauss200Parser::Vacuum_keywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVacuum_keyword(this);
}

void Gauss200Parser::Vacuum_keywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVacuum_keyword(this);
}


antlrcpp::Any Gauss200Parser::Vacuum_keywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitVacuum_keyword(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Vacuum_keywordContext* Gauss200Parser::vacuum_keyword() {
  Vacuum_keywordContext *_localctx = _tracker.createInstance<Vacuum_keywordContext>(_ctx, getState());
  enterRule(_localctx, 922, Gauss200Parser::RuleVacuum_keyword);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5984);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::FULL_GS: {
        enterOuterAlt(_localctx, 1);
        setState(5975);
        match(Gauss200Parser::FULL_GS);
        setState(5977);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::COMPACT_GS) {
          setState(5976);
          match(Gauss200Parser::COMPACT_GS);
        }
        break;
      }

      case Gauss200Parser::FREEZE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(5979);
        match(Gauss200Parser::FREEZE_GS);
        break;
      }

      case Gauss200Parser::VERBOSE_GS: {
        enterOuterAlt(_localctx, 3);
        setState(5980);
        match(Gauss200Parser::VERBOSE_GS);
        break;
      }

      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS: {
        enterOuterAlt(_localctx, 4);
        setState(5981);
        analyze_keyword();
        break;
      }

      case Gauss200Parser::DELTAMERGE_GS: {
        enterOuterAlt(_localctx, 5);
        setState(5982);
        match(Gauss200Parser::DELTAMERGE_GS);
        break;
      }

      case Gauss200Parser::HDFSDIRECTORY_GS: {
        enterOuterAlt(_localctx, 6);
        setState(5983);
        match(Gauss200Parser::HDFSDIRECTORY_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Vacuum_optionContext ------------------------------------------------------------------

Gauss200Parser::Vacuum_optionContext::Vacuum_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Table_nameContext* Gauss200Parser::Vacuum_optionContext::table_name() {
  return getRuleContext<Gauss200Parser::Table_nameContext>(0);
}

Gauss200Parser::Paren_column_listContext* Gauss200Parser::Vacuum_optionContext::paren_column_list() {
  return getRuleContext<Gauss200Parser::Paren_column_listContext>(0);
}

Gauss200Parser::Partition_name_optionContext* Gauss200Parser::Vacuum_optionContext::partition_name_option() {
  return getRuleContext<Gauss200Parser::Partition_name_optionContext>(0);
}


size_t Gauss200Parser::Vacuum_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleVacuum_option;
}

void Gauss200Parser::Vacuum_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVacuum_option(this);
}

void Gauss200Parser::Vacuum_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVacuum_option(this);
}


antlrcpp::Any Gauss200Parser::Vacuum_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitVacuum_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Vacuum_optionContext* Gauss200Parser::vacuum_option() {
  Vacuum_optionContext *_localctx = _tracker.createInstance<Vacuum_optionContext>(_ctx, getState());
  enterRule(_localctx, 924, Gauss200Parser::RuleVacuum_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5991);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 736, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5986);
      table_name();
      setState(5988);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::LEFT_PAREN) {
        setState(5987);
        paren_column_list();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5990);
      partition_name_option();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Values_stmtContext ------------------------------------------------------------------

Gauss200Parser::Values_stmtContext::Values_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Values_stmtContext::VALUES_GS() {
  return getToken(Gauss200Parser::VALUES_GS, 0);
}

std::vector<Gauss200Parser::Paren_expr_listContext *> Gauss200Parser::Values_stmtContext::paren_expr_list() {
  return getRuleContexts<Gauss200Parser::Paren_expr_listContext>();
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::Values_stmtContext::paren_expr_list(size_t i) {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Values_stmtContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Values_stmtContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Order_by_clauseContext* Gauss200Parser::Values_stmtContext::order_by_clause() {
  return getRuleContext<Gauss200Parser::Order_by_clauseContext>(0);
}

Gauss200Parser::Limit_clauseContext* Gauss200Parser::Values_stmtContext::limit_clause() {
  return getRuleContext<Gauss200Parser::Limit_clauseContext>(0);
}

Gauss200Parser::Offset_clauseContext* Gauss200Parser::Values_stmtContext::offset_clause() {
  return getRuleContext<Gauss200Parser::Offset_clauseContext>(0);
}

Gauss200Parser::Fetch_clauseContext* Gauss200Parser::Values_stmtContext::fetch_clause() {
  return getRuleContext<Gauss200Parser::Fetch_clauseContext>(0);
}


size_t Gauss200Parser::Values_stmtContext::getRuleIndex() const {
  return Gauss200Parser::RuleValues_stmt;
}

void Gauss200Parser::Values_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValues_stmt(this);
}

void Gauss200Parser::Values_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValues_stmt(this);
}


antlrcpp::Any Gauss200Parser::Values_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitValues_stmt(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Values_stmtContext* Gauss200Parser::values_stmt() {
  Values_stmtContext *_localctx = _tracker.createInstance<Values_stmtContext>(_ctx, getState());
  enterRule(_localctx, 926, Gauss200Parser::RuleValues_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5993);
    match(Gauss200Parser::VALUES_GS);
    setState(5994);
    paren_expr_list();
    setState(5999);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(5995);
      match(Gauss200Parser::COMMA);
      setState(5996);
      paren_expr_list();
      setState(6001);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(6003);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ORDER_GS) {
      setState(6002);
      order_by_clause();
    }
    setState(6006);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::LIMIT_GS) {
      setState(6005);
      limit_clause();
    }
    setState(6009);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::OFFSET_GS) {
      setState(6008);
      offset_clause();
    }
    setState(6012);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FETCH_GS) {
      setState(6011);
      fetch_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_expr_listContext ------------------------------------------------------------------

Gauss200Parser::Paren_expr_listContext::Paren_expr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Paren_expr_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Paren_expr_listContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Paren_expr_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Paren_expr_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleParen_expr_list;
}

void Gauss200Parser::Paren_expr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_expr_list(this);
}

void Gauss200Parser::Paren_expr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_expr_list(this);
}


antlrcpp::Any Gauss200Parser::Paren_expr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitParen_expr_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::paren_expr_list() {
  Paren_expr_listContext *_localctx = _tracker.createInstance<Paren_expr_listContext>(_ctx, getState());
  enterRule(_localctx, 928, Gauss200Parser::RuleParen_expr_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6014);
    match(Gauss200Parser::LEFT_PAREN);
    setState(6015);
    expression_list();
    setState(6016);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_listContext ------------------------------------------------------------------

Gauss200Parser::Expression_listContext::Expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::ExpressionContext *> Gauss200Parser::Expression_listContext::expression() {
  return getRuleContexts<Gauss200Parser::ExpressionContext>();
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Expression_listContext::expression(size_t i) {
  return getRuleContext<Gauss200Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Expression_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Expression_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Expression_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleExpression_list;
}

void Gauss200Parser::Expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_list(this);
}

void Gauss200Parser::Expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_list(this);
}


antlrcpp::Any Gauss200Parser::Expression_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExpression_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::expression_list() {
  Expression_listContext *_localctx = _tracker.createInstance<Expression_listContext>(_ctx, getState());
  enterRule(_localctx, 930, Gauss200Parser::RuleExpression_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6018);
    expression();
    setState(6023);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 742, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(6019);
        match(Gauss200Parser::COMMA);
        setState(6020);
        expression(); 
      }
      setState(6025);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 742, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

Gauss200Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Logical_exprContext* Gauss200Parser::ExpressionContext::logical_expr() {
  return getRuleContext<Gauss200Parser::Logical_exprContext>(0);
}


size_t Gauss200Parser::ExpressionContext::getRuleIndex() const {
  return Gauss200Parser::RuleExpression;
}

void Gauss200Parser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void Gauss200Parser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


antlrcpp::Any Gauss200Parser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 932, Gauss200Parser::RuleExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6026);
    logical_expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_exprContext ------------------------------------------------------------------

Gauss200Parser::Logical_exprContext::Logical_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Multiset_exprContext* Gauss200Parser::Logical_exprContext::multiset_expr() {
  return getRuleContext<Gauss200Parser::Multiset_exprContext>(0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::IS_GS() {
  return getToken(Gauss200Parser::IS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::DISTINCT_GS() {
  return getToken(Gauss200Parser::DISTINCT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

std::vector<Gauss200Parser::Logical_exprContext *> Gauss200Parser::Logical_exprContext::logical_expr() {
  return getRuleContexts<Gauss200Parser::Logical_exprContext>();
}

Gauss200Parser::Logical_exprContext* Gauss200Parser::Logical_exprContext::logical_expr(size_t i) {
  return getRuleContext<Gauss200Parser::Logical_exprContext>(i);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::ISNULL_GS() {
  return getToken(Gauss200Parser::ISNULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::NOTNULL_GS() {
  return getToken(Gauss200Parser::NOTNULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::AND_GS() {
  return getToken(Gauss200Parser::AND_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Logical_exprContext::OR_GS() {
  return getToken(Gauss200Parser::OR_GS, 0);
}


size_t Gauss200Parser::Logical_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleLogical_expr;
}

void Gauss200Parser::Logical_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_expr(this);
}

void Gauss200Parser::Logical_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_expr(this);
}


antlrcpp::Any Gauss200Parser::Logical_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitLogical_expr(this);
  else
    return visitor->visitChildren(this);
}


Gauss200Parser::Logical_exprContext* Gauss200Parser::logical_expr() {
   return logical_expr(0);
}

Gauss200Parser::Logical_exprContext* Gauss200Parser::logical_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Gauss200Parser::Logical_exprContext *_localctx = _tracker.createInstance<Logical_exprContext>(_ctx, parentState);
  Gauss200Parser::Logical_exprContext *previousContext = _localctx;
  size_t startState = 934;
  enterRecursionRule(_localctx, 934, Gauss200Parser::RuleLogical_expr, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6047);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 746, _ctx)) {
    case 1: {
      setState(6029);
      multiset_expr();
      setState(6040);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 745, _ctx)) {
      case 1: {
        setState(6030);
        match(Gauss200Parser::IS_GS);
        setState(6032);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::NOT_GS) {
          setState(6031);
          match(Gauss200Parser::NOT_GS);
        }
        setState(6038);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::NULL_GS: {
            setState(6034);
            match(Gauss200Parser::NULL_GS);
            break;
          }

          case Gauss200Parser::DISTINCT_GS: {
            setState(6035);
            match(Gauss200Parser::DISTINCT_GS);
            setState(6036);
            match(Gauss200Parser::FROM_GS);
            setState(6037);
            logical_expr(0);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      }
      break;
    }

    case 2: {
      setState(6042);
      multiset_expr();
      setState(6043);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::ISNULL_GS

      || _la == Gauss200Parser::NOTNULL_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 3: {
      setState(6045);
      match(Gauss200Parser::NOT_GS);
      setState(6046);
      logical_expr(3);
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(6057);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 748, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(6055);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 747, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Logical_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleLogical_expr);
          setState(6049);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(6050);
          match(Gauss200Parser::AND_GS);
          setState(6051);
          logical_expr(3);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Logical_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleLogical_expr);
          setState(6052);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(6053);
          match(Gauss200Parser::OR_GS);
          setState(6054);
          logical_expr(2);
          break;
        }

        } 
      }
      setState(6059);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 748, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Multiset_exprContext ------------------------------------------------------------------

Gauss200Parser::Multiset_exprContext::Multiset_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Relational_exprContext* Gauss200Parser::Multiset_exprContext::relational_expr() {
  return getRuleContext<Gauss200Parser::Relational_exprContext>(0);
}


size_t Gauss200Parser::Multiset_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleMultiset_expr;
}

void Gauss200Parser::Multiset_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiset_expr(this);
}

void Gauss200Parser::Multiset_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiset_expr(this);
}


antlrcpp::Any Gauss200Parser::Multiset_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitMultiset_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Multiset_exprContext* Gauss200Parser::multiset_expr() {
  Multiset_exprContext *_localctx = _tracker.createInstance<Multiset_exprContext>(_ctx, getState());
  enterRule(_localctx, 936, Gauss200Parser::RuleMultiset_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6060);
    relational_expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relational_exprContext ------------------------------------------------------------------

Gauss200Parser::Relational_exprContext::Relational_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Compound_exprContext* Gauss200Parser::Relational_exprContext::compound_expr() {
  return getRuleContext<Gauss200Parser::Compound_exprContext>(0);
}

std::vector<Gauss200Parser::Relational_exprContext *> Gauss200Parser::Relational_exprContext::relational_expr() {
  return getRuleContexts<Gauss200Parser::Relational_exprContext>();
}

Gauss200Parser::Relational_exprContext* Gauss200Parser::Relational_exprContext::relational_expr(size_t i) {
  return getRuleContext<Gauss200Parser::Relational_exprContext>(i);
}

Gauss200Parser::Relational_opContext* Gauss200Parser::Relational_exprContext::relational_op() {
  return getRuleContext<Gauss200Parser::Relational_opContext>(0);
}


size_t Gauss200Parser::Relational_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleRelational_expr;
}

void Gauss200Parser::Relational_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelational_expr(this);
}

void Gauss200Parser::Relational_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelational_expr(this);
}


antlrcpp::Any Gauss200Parser::Relational_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRelational_expr(this);
  else
    return visitor->visitChildren(this);
}


Gauss200Parser::Relational_exprContext* Gauss200Parser::relational_expr() {
   return relational_expr(0);
}

Gauss200Parser::Relational_exprContext* Gauss200Parser::relational_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Gauss200Parser::Relational_exprContext *_localctx = _tracker.createInstance<Relational_exprContext>(_ctx, parentState);
  Gauss200Parser::Relational_exprContext *previousContext = _localctx;
  size_t startState = 938;
  enterRecursionRule(_localctx, 938, Gauss200Parser::RuleRelational_expr, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6063);
    compound_expr();
    _ctx->stop = _input->LT(-1);
    setState(6071);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 749, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Relational_exprContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleRelational_expr);
        setState(6065);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(6066);
        relational_op();
        setState(6067);
        relational_expr(3); 
      }
      setState(6073);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 749, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Relational_opContext ------------------------------------------------------------------

Gauss200Parser::Relational_opContext::Relational_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Relational_opContext::LESS_THAN_OP() {
  return getToken(Gauss200Parser::LESS_THAN_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Relational_opContext::GREATER_THAN_OP() {
  return getToken(Gauss200Parser::GREATER_THAN_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Relational_opContext::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}

tree::TerminalNode* Gauss200Parser::Relational_opContext::NOT_EQUAL_OP() {
  return getToken(Gauss200Parser::NOT_EQUAL_OP, 0);
}


size_t Gauss200Parser::Relational_opContext::getRuleIndex() const {
  return Gauss200Parser::RuleRelational_op;
}

void Gauss200Parser::Relational_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelational_op(this);
}

void Gauss200Parser::Relational_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelational_op(this);
}


antlrcpp::Any Gauss200Parser::Relational_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRelational_op(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Relational_opContext* Gauss200Parser::relational_op() {
  Relational_opContext *_localctx = _tracker.createInstance<Relational_opContext>(_ctx, getState());
  enterRule(_localctx, 940, Gauss200Parser::RuleRelational_op);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6080);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::GREATER_THAN_OP:
      case Gauss200Parser::LESS_THAN_OP: {
        enterOuterAlt(_localctx, 1);
        setState(6074);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::GREATER_THAN_OP

        || _la == Gauss200Parser::LESS_THAN_OP)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(6076);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::EQUALS_OP) {
          setState(6075);
          match(Gauss200Parser::EQUALS_OP);
        }
        break;
      }

      case Gauss200Parser::EQUALS_OP: {
        enterOuterAlt(_localctx, 2);
        setState(6078);
        match(Gauss200Parser::EQUALS_OP);
        break;
      }

      case Gauss200Parser::NOT_EQUAL_OP: {
        enterOuterAlt(_localctx, 3);
        setState(6079);
        match(Gauss200Parser::NOT_EQUAL_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_exprContext ------------------------------------------------------------------

Gauss200Parser::Compound_exprContext::Compound_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::ConcatenationContext *> Gauss200Parser::Compound_exprContext::concatenation() {
  return getRuleContexts<Gauss200Parser::ConcatenationContext>();
}

Gauss200Parser::ConcatenationContext* Gauss200Parser::Compound_exprContext::concatenation(size_t i) {
  return getRuleContext<Gauss200Parser::ConcatenationContext>(i);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

Gauss200Parser::In_exprContext* Gauss200Parser::Compound_exprContext::in_expr() {
  return getRuleContext<Gauss200Parser::In_exprContext>(0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::BETWEEN_GS() {
  return getToken(Gauss200Parser::BETWEEN_GS, 0);
}

Gauss200Parser::Between_elementsContext* Gauss200Parser::Compound_exprContext::between_elements() {
  return getRuleContext<Gauss200Parser::Between_elementsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::SYMMETRIC_GS() {
  return getToken(Gauss200Parser::SYMMETRIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::LIKE_GS() {
  return getToken(Gauss200Parser::LIKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::ILIKE_GS() {
  return getToken(Gauss200Parser::ILIKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::SIMILAR_GS() {
  return getToken(Gauss200Parser::SIMILAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::ESCAPE_GS() {
  return getToken(Gauss200Parser::ESCAPE_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Compound_exprContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::ASYMMETRIC_GS() {
  return getToken(Gauss200Parser::ASYMMETRIC_GS, 0);
}

std::vector<Gauss200Parser::Concatenation_listContext *> Gauss200Parser::Compound_exprContext::concatenation_list() {
  return getRuleContexts<Gauss200Parser::Concatenation_listContext>();
}

Gauss200Parser::Concatenation_listContext* Gauss200Parser::Compound_exprContext::concatenation_list(size_t i) {
  return getRuleContext<Gauss200Parser::Concatenation_listContext>(i);
}

tree::TerminalNode* Gauss200Parser::Compound_exprContext::OVERLAPS_GS() {
  return getToken(Gauss200Parser::OVERLAPS_GS, 0);
}


size_t Gauss200Parser::Compound_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleCompound_expr;
}

void Gauss200Parser::Compound_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompound_expr(this);
}

void Gauss200Parser::Compound_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompound_expr(this);
}


antlrcpp::Any Gauss200Parser::Compound_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCompound_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Compound_exprContext* Gauss200Parser::compound_expr() {
  Compound_exprContext *_localctx = _tracker.createInstance<Compound_exprContext>(_ctx, getState());
  enterRule(_localctx, 942, Gauss200Parser::RuleCompound_expr);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6115);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 759, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6082);
      concatenation(0);
      setState(6109);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 758, _ctx)) {
      case 1: {
        setState(6084);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::NOT_GS) {
          setState(6083);
          match(Gauss200Parser::NOT_GS);
        }
        setState(6107);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::IN_GS: {
            setState(6086);
            match(Gauss200Parser::IN_GS);
            setState(6087);
            in_expr();
            break;
          }

          case Gauss200Parser::BETWEEN_GS: {
            setState(6088);
            match(Gauss200Parser::BETWEEN_GS);
            setState(6093);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 754, _ctx)) {
            case 1: {
              setState(6090);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 753, _ctx)) {
              case 1: {
                setState(6089);
                match(Gauss200Parser::ASYMMETRIC_GS);
                break;
              }

              }
              break;
            }

            case 2: {
              setState(6092);
              match(Gauss200Parser::SYMMETRIC_GS);
              break;
            }

            }
            setState(6095);
            between_elements();
            break;
          }

          case Gauss200Parser::ILIKE_GS:
          case Gauss200Parser::LIKE_GS:
          case Gauss200Parser::SIMILAR_GS: {
            setState(6100);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case Gauss200Parser::LIKE_GS: {
                setState(6096);
                match(Gauss200Parser::LIKE_GS);
                break;
              }

              case Gauss200Parser::ILIKE_GS: {
                setState(6097);
                match(Gauss200Parser::ILIKE_GS);
                break;
              }

              case Gauss200Parser::SIMILAR_GS: {
                setState(6098);
                match(Gauss200Parser::SIMILAR_GS);
                setState(6099);
                match(Gauss200Parser::TO_GS);
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(6102);
            concatenation(0);
            setState(6105);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 756, _ctx)) {
            case 1: {
              setState(6103);
              match(Gauss200Parser::ESCAPE_GS);
              setState(6104);
              expression();
              break;
            }

            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6111);
      concatenation_list();
      setState(6112);
      match(Gauss200Parser::OVERLAPS_GS);
      setState(6113);
      concatenation_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- In_exprContext ------------------------------------------------------------------

Gauss200Parser::In_exprContext::In_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::In_exprContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::In_exprContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::In_exprContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::In_exprContext::paren_expr_list() {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(0);
}


size_t Gauss200Parser::In_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleIn_expr;
}

void Gauss200Parser::In_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIn_expr(this);
}

void Gauss200Parser::In_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIn_expr(this);
}


antlrcpp::Any Gauss200Parser::In_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIn_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::In_exprContext* Gauss200Parser::in_expr() {
  In_exprContext *_localctx = _tracker.createInstance<In_exprContext>(_ctx, getState());
  enterRule(_localctx, 944, Gauss200Parser::RuleIn_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6122);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 760, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6117);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6118);
      select_stmt();
      setState(6119);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6121);
      paren_expr_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Between_elementsContext ------------------------------------------------------------------

Gauss200Parser::Between_elementsContext::Between_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::ConcatenationContext *> Gauss200Parser::Between_elementsContext::concatenation() {
  return getRuleContexts<Gauss200Parser::ConcatenationContext>();
}

Gauss200Parser::ConcatenationContext* Gauss200Parser::Between_elementsContext::concatenation(size_t i) {
  return getRuleContext<Gauss200Parser::ConcatenationContext>(i);
}

tree::TerminalNode* Gauss200Parser::Between_elementsContext::AND_GS() {
  return getToken(Gauss200Parser::AND_GS, 0);
}


size_t Gauss200Parser::Between_elementsContext::getRuleIndex() const {
  return Gauss200Parser::RuleBetween_elements;
}

void Gauss200Parser::Between_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBetween_elements(this);
}

void Gauss200Parser::Between_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBetween_elements(this);
}


antlrcpp::Any Gauss200Parser::Between_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitBetween_elements(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Between_elementsContext* Gauss200Parser::between_elements() {
  Between_elementsContext *_localctx = _tracker.createInstance<Between_elementsContext>(_ctx, getState());
  enterRule(_localctx, 946, Gauss200Parser::RuleBetween_elements);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6124);
    concatenation(0);
    setState(6125);
    match(Gauss200Parser::AND_GS);
    setState(6126);
    concatenation(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concatenation_listContext ------------------------------------------------------------------

Gauss200Parser::Concatenation_listContext::Concatenation_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Concatenation_listContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

std::vector<Gauss200Parser::ConcatenationContext *> Gauss200Parser::Concatenation_listContext::concatenation() {
  return getRuleContexts<Gauss200Parser::ConcatenationContext>();
}

Gauss200Parser::ConcatenationContext* Gauss200Parser::Concatenation_listContext::concatenation(size_t i) {
  return getRuleContext<Gauss200Parser::ConcatenationContext>(i);
}

tree::TerminalNode* Gauss200Parser::Concatenation_listContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Concatenation_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Concatenation_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Concatenation_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleConcatenation_list;
}

void Gauss200Parser::Concatenation_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcatenation_list(this);
}

void Gauss200Parser::Concatenation_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcatenation_list(this);
}


antlrcpp::Any Gauss200Parser::Concatenation_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConcatenation_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Concatenation_listContext* Gauss200Parser::concatenation_list() {
  Concatenation_listContext *_localctx = _tracker.createInstance<Concatenation_listContext>(_ctx, getState());
  enterRule(_localctx, 948, Gauss200Parser::RuleConcatenation_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6128);
    match(Gauss200Parser::LEFT_PAREN);
    setState(6129);
    concatenation(0);
    setState(6134);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(6130);
      match(Gauss200Parser::COMMA);
      setState(6131);
      concatenation(0);
      setState(6136);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(6137);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConcatenationContext ------------------------------------------------------------------

Gauss200Parser::ConcatenationContext::ConcatenationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Model_exprContext* Gauss200Parser::ConcatenationContext::model_expr() {
  return getRuleContext<Gauss200Parser::Model_exprContext>(0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::AT_GS() {
  return getToken(Gauss200Parser::AT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::ZONE_GS() {
  return getToken(Gauss200Parser::ZONE_GS, 0);
}

std::vector<Gauss200Parser::ConcatenationContext *> Gauss200Parser::ConcatenationContext::concatenation() {
  return getRuleContexts<Gauss200Parser::ConcatenationContext>();
}

Gauss200Parser::ConcatenationContext* Gauss200Parser::ConcatenationContext::concatenation(size_t i) {
  return getRuleContext<Gauss200Parser::ConcatenationContext>(i);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::CARRET_OPERATOR_PART() {
  return getToken(Gauss200Parser::CARRET_OPERATOR_PART, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::SOLIDUS() {
  return getToken(Gauss200Parser::SOLIDUS, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::PERCENT_SIGN() {
  return getToken(Gauss200Parser::PERCENT_SIGN, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::PLUS_SIGN() {
  return getToken(Gauss200Parser::PLUS_SIGN, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::MINUS_SIGN() {
  return getToken(Gauss200Parser::MINUS_SIGN, 0);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::AMPERSAND() {
  return getToken(Gauss200Parser::AMPERSAND, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::ConcatenationContext::BAR() {
  return getTokens(Gauss200Parser::BAR);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::BAR(size_t i) {
  return getToken(Gauss200Parser::BAR, i);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::POUND_SIGN() {
  return getToken(Gauss200Parser::POUND_SIGN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::ConcatenationContext::GREATER_THAN_OP() {
  return getTokens(Gauss200Parser::GREATER_THAN_OP);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::GREATER_THAN_OP(size_t i) {
  return getToken(Gauss200Parser::GREATER_THAN_OP, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::ConcatenationContext::LESS_THAN_OP() {
  return getTokens(Gauss200Parser::LESS_THAN_OP);
}

tree::TerminalNode* Gauss200Parser::ConcatenationContext::LESS_THAN_OP(size_t i) {
  return getToken(Gauss200Parser::LESS_THAN_OP, i);
}

Gauss200Parser::Geometry_op1Context* Gauss200Parser::ConcatenationContext::geometry_op1() {
  return getRuleContext<Gauss200Parser::Geometry_op1Context>(0);
}


size_t Gauss200Parser::ConcatenationContext::getRuleIndex() const {
  return Gauss200Parser::RuleConcatenation;
}

void Gauss200Parser::ConcatenationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcatenation(this);
}

void Gauss200Parser::ConcatenationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcatenation(this);
}


antlrcpp::Any Gauss200Parser::ConcatenationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConcatenation(this);
  else
    return visitor->visitChildren(this);
}


Gauss200Parser::ConcatenationContext* Gauss200Parser::concatenation() {
   return concatenation(0);
}

Gauss200Parser::ConcatenationContext* Gauss200Parser::concatenation(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Gauss200Parser::ConcatenationContext *_localctx = _tracker.createInstance<ConcatenationContext>(_ctx, parentState);
  Gauss200Parser::ConcatenationContext *previousContext = _localctx;
  size_t startState = 950;
  enterRecursionRule(_localctx, 950, Gauss200Parser::RuleConcatenation, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6140);
    model_expr();
    setState(6145);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 762, _ctx)) {
    case 1: {
      setState(6141);
      match(Gauss200Parser::AT_GS);
      setState(6142);
      match(Gauss200Parser::TIME_GS);
      setState(6143);
      match(Gauss200Parser::ZONE_GS);
      setState(6144);
      concatenation(0);
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(6177);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 765, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(6175);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 764, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ConcatenationContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleConcatenation);
          setState(6147);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(6148);
          match(Gauss200Parser::CARRET_OPERATOR_PART);
          setState(6149);
          concatenation(8);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ConcatenationContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleConcatenation);
          setState(6150);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(6151);
          dynamic_cast<ConcatenationContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 613) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 613)) & ((1ULL << (Gauss200Parser::PERCENT_SIGN - 613))
            | (1ULL << (Gauss200Parser::ASTERISK - 613))
            | (1ULL << (Gauss200Parser::SOLIDUS - 613)))) != 0))) {
            dynamic_cast<ConcatenationContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(6152);
          concatenation(7);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ConcatenationContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleConcatenation);
          setState(6153);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(6154);
          dynamic_cast<ConcatenationContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == Gauss200Parser::PLUS_SIGN

          || _la == Gauss200Parser::MINUS_SIGN)) {
            dynamic_cast<ConcatenationContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(6155);
          concatenation(6);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ConcatenationContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleConcatenation);
          setState(6156);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(6157);
          dynamic_cast<ConcatenationContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 614) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 614)) & ((1ULL << (Gauss200Parser::AMPERSAND - 614))
            | (1ULL << (Gauss200Parser::POUND_SIGN - 614))
            | (1ULL << (Gauss200Parser::BAR - 614)))) != 0))) {
            dynamic_cast<ConcatenationContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(6158);
          concatenation(5);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ConcatenationContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleConcatenation);
          setState(6159);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(6164);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case Gauss200Parser::GREATER_THAN_OP: {
              setState(6160);
              match(Gauss200Parser::GREATER_THAN_OP);
              setState(6161);
              match(Gauss200Parser::GREATER_THAN_OP);
              break;
            }

            case Gauss200Parser::LESS_THAN_OP: {
              setState(6162);
              match(Gauss200Parser::LESS_THAN_OP);
              setState(6163);
              match(Gauss200Parser::LESS_THAN_OP);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(6166);
          concatenation(4);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ConcatenationContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleConcatenation);
          setState(6167);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(6168);
          geometry_op1();
          setState(6169);
          concatenation(3);
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ConcatenationContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleConcatenation);
          setState(6171);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(6172);
          match(Gauss200Parser::BAR);
          setState(6173);
          match(Gauss200Parser::BAR);
          setState(6174);
          concatenation(2);
          break;
        }

        } 
      }
      setState(6179);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 765, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Geometry_op1Context ------------------------------------------------------------------

Gauss200Parser::Geometry_op1Context::Geometry_op1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Gauss200Parser::Geometry_op1Context::POUND_SIGN() {
  return getTokens(Gauss200Parser::POUND_SIGN);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::POUND_SIGN(size_t i) {
  return getToken(Gauss200Parser::POUND_SIGN, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Geometry_op1Context::AMPERSAND() {
  return getTokens(Gauss200Parser::AMPERSAND);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::AMPERSAND(size_t i) {
  return getToken(Gauss200Parser::AMPERSAND, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Geometry_op1Context::GREATER_THAN_OP() {
  return getTokens(Gauss200Parser::GREATER_THAN_OP);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::GREATER_THAN_OP(size_t i) {
  return getToken(Gauss200Parser::GREATER_THAN_OP, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Geometry_op1Context::LESS_THAN_OP() {
  return getTokens(Gauss200Parser::LESS_THAN_OP);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::LESS_THAN_OP(size_t i) {
  return getToken(Gauss200Parser::LESS_THAN_OP, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Geometry_op1Context::BAR() {
  return getTokens(Gauss200Parser::BAR);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::BAR(size_t i) {
  return getToken(Gauss200Parser::BAR, i);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::CARRET_OPERATOR_PART() {
  return getToken(Gauss200Parser::CARRET_OPERATOR_PART, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::QUESTION_MARK() {
  return getToken(Gauss200Parser::QUESTION_MARK, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::AT_SIGN() {
  return getToken(Gauss200Parser::AT_SIGN, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::TILDE_OPERATOR_PART() {
  return getToken(Gauss200Parser::TILDE_OPERATOR_PART, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_op1Context::EQUALS_OP() {
  return getToken(Gauss200Parser::EQUALS_OP, 0);
}


size_t Gauss200Parser::Geometry_op1Context::getRuleIndex() const {
  return Gauss200Parser::RuleGeometry_op1;
}

void Gauss200Parser::Geometry_op1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeometry_op1(this);
}

void Gauss200Parser::Geometry_op1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeometry_op1(this);
}


antlrcpp::Any Gauss200Parser::Geometry_op1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGeometry_op1(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Geometry_op1Context* Gauss200Parser::geometry_op1() {
  Geometry_op1Context *_localctx = _tracker.createInstance<Geometry_op1Context>(_ctx, getState());
  enterRule(_localctx, 952, Gauss200Parser::RuleGeometry_op1);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6217);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 766, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6180);
      match(Gauss200Parser::POUND_SIGN);
      setState(6181);
      match(Gauss200Parser::POUND_SIGN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6182);
      match(Gauss200Parser::AMPERSAND);
      setState(6183);
      match(Gauss200Parser::AMPERSAND);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6184);
      match(Gauss200Parser::AMPERSAND);
      setState(6185);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::GREATER_THAN_OP

      || _la == Gauss200Parser::LESS_THAN_OP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6186);
      match(Gauss200Parser::LESS_THAN_OP);
      setState(6187);
      match(Gauss200Parser::MINUS_SIGN);
      setState(6188);
      match(Gauss200Parser::GREATER_THAN_OP);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6189);
      match(Gauss200Parser::BAR);
      setState(6190);
      match(Gauss200Parser::GREATER_THAN_OP);
      setState(6191);
      match(Gauss200Parser::GREATER_THAN_OP);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6192);
      match(Gauss200Parser::LESS_THAN_OP);
      setState(6193);
      match(Gauss200Parser::LESS_THAN_OP);
      setState(6194);
      match(Gauss200Parser::BAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6195);
      match(Gauss200Parser::AMPERSAND);
      setState(6196);
      match(Gauss200Parser::LESS_THAN_OP);
      setState(6197);
      match(Gauss200Parser::BAR);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(6198);
      match(Gauss200Parser::BAR);
      setState(6199);
      match(Gauss200Parser::AMPERSAND);
      setState(6200);
      match(Gauss200Parser::GREATER_THAN_OP);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(6201);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::GREATER_THAN_OP

      || _la == Gauss200Parser::LESS_THAN_OP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6202);
      match(Gauss200Parser::CARRET_OPERATOR_PART);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(6203);
      match(Gauss200Parser::QUESTION_MARK);
      setState(6204);
      _la = _input->LA(1);
      if (!(((((_la - 620) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 620)) & ((1ULL << (Gauss200Parser::MINUS_SIGN - 620))
        | (1ULL << (Gauss200Parser::POUND_SIGN - 620))
        | (1ULL << (Gauss200Parser::BAR - 620)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(6205);
      match(Gauss200Parser::QUESTION_MARK);
      setState(6206);
      match(Gauss200Parser::MINUS_SIGN);
      setState(6207);
      match(Gauss200Parser::BAR);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(6208);
      match(Gauss200Parser::QUESTION_MARK);
      setState(6209);
      match(Gauss200Parser::BAR);
      setState(6210);
      match(Gauss200Parser::BAR);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(6211);
      match(Gauss200Parser::AT_SIGN);
      setState(6212);
      match(Gauss200Parser::GREATER_THAN_OP);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(6213);
      match(Gauss200Parser::LESS_THAN_OP);
      setState(6214);
      match(Gauss200Parser::AT_SIGN);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(6215);
      match(Gauss200Parser::TILDE_OPERATOR_PART);
      setState(6216);
      match(Gauss200Parser::EQUALS_OP);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Model_exprContext ------------------------------------------------------------------

Gauss200Parser::Model_exprContext::Model_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Unary_exprContext* Gauss200Parser::Model_exprContext::unary_expr() {
  return getRuleContext<Gauss200Parser::Unary_exprContext>(0);
}


size_t Gauss200Parser::Model_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleModel_expr;
}

void Gauss200Parser::Model_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModel_expr(this);
}

void Gauss200Parser::Model_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModel_expr(this);
}


antlrcpp::Any Gauss200Parser::Model_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitModel_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Model_exprContext* Gauss200Parser::model_expr() {
  Model_exprContext *_localctx = _tracker.createInstance<Model_exprContext>(_ctx, getState());
  enterRule(_localctx, 954, Gauss200Parser::RuleModel_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6219);
    unary_expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_exprContext ------------------------------------------------------------------

Gauss200Parser::Unary_exprContext::Unary_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Unary_exprContext *> Gauss200Parser::Unary_exprContext::unary_expr() {
  return getRuleContexts<Gauss200Parser::Unary_exprContext>();
}

Gauss200Parser::Unary_exprContext* Gauss200Parser::Unary_exprContext::unary_expr(size_t i) {
  return getRuleContext<Gauss200Parser::Unary_exprContext>(i);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::MINUS_SIGN() {
  return getToken(Gauss200Parser::MINUS_SIGN, 0);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::PLUS_SIGN() {
  return getToken(Gauss200Parser::PLUS_SIGN, 0);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::AT_SIGN() {
  return getToken(Gauss200Parser::AT_SIGN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Unary_exprContext::BAR() {
  return getTokens(Gauss200Parser::BAR);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::BAR(size_t i) {
  return getToken(Gauss200Parser::BAR, i);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::SOLIDUS() {
  return getToken(Gauss200Parser::SOLIDUS, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Unary_exprContext::EXCLAMATION_OPERATOR_PART() {
  return getTokens(Gauss200Parser::EXCLAMATION_OPERATOR_PART);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::EXCLAMATION_OPERATOR_PART(size_t i) {
  return getToken(Gauss200Parser::EXCLAMATION_OPERATOR_PART, i);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::TILDE_OPERATOR_PART() {
  return getToken(Gauss200Parser::TILDE_OPERATOR_PART, 0);
}

Gauss200Parser::Geometry_op2Context* Gauss200Parser::Unary_exprContext::geometry_op2() {
  return getRuleContext<Gauss200Parser::Geometry_op2Context>(0);
}

Gauss200Parser::Case_exprContext* Gauss200Parser::Unary_exprContext::case_expr() {
  return getRuleContext<Gauss200Parser::Case_exprContext>(0);
}

Gauss200Parser::Function_exprContext* Gauss200Parser::Unary_exprContext::function_expr() {
  return getRuleContext<Gauss200Parser::Function_exprContext>(0);
}

Gauss200Parser::Quantified_expressionContext* Gauss200Parser::Unary_exprContext::quantified_expression() {
  return getRuleContext<Gauss200Parser::Quantified_expressionContext>(0);
}

Gauss200Parser::AtomContext* Gauss200Parser::Unary_exprContext::atom() {
  return getRuleContext<Gauss200Parser::AtomContext>(0);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::ARRAY_GS() {
  return getToken(Gauss200Parser::ARRAY_GS, 0);
}

Gauss200Parser::Array_exprContext* Gauss200Parser::Unary_exprContext::array_expr() {
  return getRuleContext<Gauss200Parser::Array_exprContext>(0);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::PARAM() {
  return getToken(Gauss200Parser::PARAM, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Unary_exprContext::TYPECAST() {
  return getTokens(Gauss200Parser::TYPECAST);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::TYPECAST(size_t i) {
  return getToken(Gauss200Parser::TYPECAST, i);
}

std::vector<Gauss200Parser::Typename_gsContext *> Gauss200Parser::Unary_exprContext::typename_gs() {
  return getRuleContexts<Gauss200Parser::Typename_gsContext>();
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Unary_exprContext::typename_gs(size_t i) {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(i);
}

std::vector<Gauss200Parser::Typecast_argContext *> Gauss200Parser::Unary_exprContext::typecast_arg() {
  return getRuleContexts<Gauss200Parser::Typecast_argContext>();
}

Gauss200Parser::Typecast_argContext* Gauss200Parser::Unary_exprContext::typecast_arg(size_t i) {
  return getRuleContext<Gauss200Parser::Typecast_argContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Unary_exprContext::PERIOD() {
  return getTokens(Gauss200Parser::PERIOD);
}

tree::TerminalNode* Gauss200Parser::Unary_exprContext::PERIOD(size_t i) {
  return getToken(Gauss200Parser::PERIOD, i);
}


size_t Gauss200Parser::Unary_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleUnary_expr;
}

void Gauss200Parser::Unary_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_expr(this);
}

void Gauss200Parser::Unary_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_expr(this);
}


antlrcpp::Any Gauss200Parser::Unary_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitUnary_expr(this);
  else
    return visitor->visitChildren(this);
}


Gauss200Parser::Unary_exprContext* Gauss200Parser::unary_expr() {
   return unary_expr(0);
}

Gauss200Parser::Unary_exprContext* Gauss200Parser::unary_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Gauss200Parser::Unary_exprContext *_localctx = _tracker.createInstance<Unary_exprContext>(_ctx, parentState);
  Gauss200Parser::Unary_exprContext *previousContext = _localctx;
  size_t startState = 956;
  enterRecursionRule(_localctx, 956, Gauss200Parser::RuleUnary_expr, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6248);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 767, _ctx)) {
    case 1: {
      setState(6222);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::PLUS_SIGN

      || _la == Gauss200Parser::MINUS_SIGN)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6223);
      unary_expr(16);
      break;
    }

    case 2: {
      setState(6224);
      match(Gauss200Parser::AT_SIGN);
      setState(6225);
      unary_expr(15);
      break;
    }

    case 3: {
      setState(6226);
      match(Gauss200Parser::BAR);
      setState(6227);
      match(Gauss200Parser::SOLIDUS);
      setState(6228);
      unary_expr(14);
      break;
    }

    case 4: {
      setState(6229);
      match(Gauss200Parser::BAR);
      setState(6230);
      match(Gauss200Parser::BAR);
      setState(6231);
      match(Gauss200Parser::SOLIDUS);
      setState(6232);
      unary_expr(13);
      break;
    }

    case 5: {
      setState(6233);
      match(Gauss200Parser::EXCLAMATION_OPERATOR_PART);
      setState(6234);
      match(Gauss200Parser::EXCLAMATION_OPERATOR_PART);
      setState(6235);
      unary_expr(12);
      break;
    }

    case 6: {
      setState(6236);
      match(Gauss200Parser::TILDE_OPERATOR_PART);
      setState(6237);
      unary_expr(10);
      break;
    }

    case 7: {
      setState(6238);
      geometry_op2();
      setState(6239);
      unary_expr(9);
      break;
    }

    case 8: {
      setState(6241);
      case_expr();
      break;
    }

    case 9: {
      setState(6242);
      function_expr();
      break;
    }

    case 10: {
      setState(6243);
      quantified_expression();
      break;
    }

    case 11: {
      setState(6244);
      atom();
      break;
    }

    case 12: {
      setState(6245);
      match(Gauss200Parser::ARRAY_GS);
      setState(6246);
      array_expr();
      break;
    }

    case 13: {
      setState(6247);
      match(Gauss200Parser::PARAM);
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(6271);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 772, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(6269);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 771, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Unary_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleUnary_expr);
          setState(6250);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(6251);
          match(Gauss200Parser::EXCLAMATION_OPERATOR_PART);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Unary_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleUnary_expr);
          setState(6252);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(6258); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(6253);
                    match(Gauss200Parser::TYPECAST);
                    setState(6254);
                    typename_gs();
                    setState(6256);
                    _errHandler->sync(this);

                    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 768, _ctx)) {
                    case 1: {
                      setState(6255);
                      typecast_arg();
                      break;
                    }

                    }
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(6260); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 769, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<Unary_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleUnary_expr);
          setState(6262);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(6265); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(6263);
                    match(Gauss200Parser::PERIOD);
                    setState(6264);
                    unary_expr(0);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(6267); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 770, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        } 
      }
      setState(6273);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 772, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Geometry_op2Context ------------------------------------------------------------------

Gauss200Parser::Geometry_op2Context::Geometry_op2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Geometry_op2Context::POUND_SIGN() {
  return getToken(Gauss200Parser::POUND_SIGN, 0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Geometry_op2Context::AT_SIGN() {
  return getTokens(Gauss200Parser::AT_SIGN);
}

tree::TerminalNode* Gauss200Parser::Geometry_op2Context::AT_SIGN(size_t i) {
  return getToken(Gauss200Parser::AT_SIGN, i);
}

tree::TerminalNode* Gauss200Parser::Geometry_op2Context::QUESTION_MARK() {
  return getToken(Gauss200Parser::QUESTION_MARK, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_op2Context::BAR() {
  return getToken(Gauss200Parser::BAR, 0);
}


size_t Gauss200Parser::Geometry_op2Context::getRuleIndex() const {
  return Gauss200Parser::RuleGeometry_op2;
}

void Gauss200Parser::Geometry_op2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeometry_op2(this);
}

void Gauss200Parser::Geometry_op2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeometry_op2(this);
}


antlrcpp::Any Gauss200Parser::Geometry_op2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGeometry_op2(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Geometry_op2Context* Gauss200Parser::geometry_op2() {
  Geometry_op2Context *_localctx = _tracker.createInstance<Geometry_op2Context>(_ctx, getState());
  enterRule(_localctx, 958, Gauss200Parser::RuleGeometry_op2);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6282);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::POUND_SIGN: {
        enterOuterAlt(_localctx, 1);
        setState(6274);
        match(Gauss200Parser::POUND_SIGN);
        break;
      }

      case Gauss200Parser::AT_SIGN: {
        enterOuterAlt(_localctx, 2);
        setState(6275);
        match(Gauss200Parser::AT_SIGN);
        setState(6277);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::MINUS_SIGN) {
          setState(6276);
          match(Gauss200Parser::MINUS_SIGN);
        }
        setState(6279);
        match(Gauss200Parser::AT_SIGN);
        break;
      }

      case Gauss200Parser::QUESTION_MARK: {
        enterOuterAlt(_localctx, 3);
        setState(6280);
        match(Gauss200Parser::QUESTION_MARK);
        setState(6281);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::MINUS_SIGN

        || _la == Gauss200Parser::BAR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typename_gsContext ------------------------------------------------------------------

Gauss200Parser::Typename_gsContext::Typename_gsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Number_typeContext* Gauss200Parser::Typename_gsContext::number_type() {
  return getRuleContext<Gauss200Parser::Number_typeContext>(0);
}

Gauss200Parser::Precision_partContext* Gauss200Parser::Typename_gsContext::precision_part() {
  return getRuleContext<Gauss200Parser::Precision_partContext>(0);
}

Gauss200Parser::Concurrency_typeContext* Gauss200Parser::Typename_gsContext::concurrency_type() {
  return getRuleContext<Gauss200Parser::Concurrency_typeContext>(0);
}

Gauss200Parser::Boolean_typeContext* Gauss200Parser::Typename_gsContext::boolean_type() {
  return getRuleContext<Gauss200Parser::Boolean_typeContext>(0);
}

Gauss200Parser::Char_typeContext* Gauss200Parser::Typename_gsContext::char_type() {
  return getRuleContext<Gauss200Parser::Char_typeContext>(0);
}

Gauss200Parser::Binary_typeContext* Gauss200Parser::Typename_gsContext::binary_type() {
  return getRuleContext<Gauss200Parser::Binary_typeContext>(0);
}

Gauss200Parser::Date_typeContext* Gauss200Parser::Typename_gsContext::date_type() {
  return getRuleContext<Gauss200Parser::Date_typeContext>(0);
}

Gauss200Parser::Geometry_typeContext* Gauss200Parser::Typename_gsContext::geometry_type() {
  return getRuleContext<Gauss200Parser::Geometry_typeContext>(0);
}

Gauss200Parser::Inet_typeContext* Gauss200Parser::Typename_gsContext::inet_type() {
  return getRuleContext<Gauss200Parser::Inet_typeContext>(0);
}

Gauss200Parser::Bit_typeContext* Gauss200Parser::Typename_gsContext::bit_type() {
  return getRuleContext<Gauss200Parser::Bit_typeContext>(0);
}

Gauss200Parser::Txt_search_typeContext* Gauss200Parser::Typename_gsContext::txt_search_type() {
  return getRuleContext<Gauss200Parser::Txt_search_typeContext>(0);
}

Gauss200Parser::Hll_typeContext* Gauss200Parser::Typename_gsContext::hll_type() {
  return getRuleContext<Gauss200Parser::Hll_typeContext>(0);
}

Gauss200Parser::Oid_typeContext* Gauss200Parser::Typename_gsContext::oid_type() {
  return getRuleContext<Gauss200Parser::Oid_typeContext>(0);
}

Gauss200Parser::Other_typeContext* Gauss200Parser::Typename_gsContext::other_type() {
  return getRuleContext<Gauss200Parser::Other_typeContext>(0);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Typename_gsContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

Gauss200Parser::Reserved_keywords_can_be_nameContext* Gauss200Parser::Typename_gsContext::reserved_keywords_can_be_name() {
  return getRuleContext<Gauss200Parser::Reserved_keywords_can_be_nameContext>(0);
}


size_t Gauss200Parser::Typename_gsContext::getRuleIndex() const {
  return Gauss200Parser::RuleTypename_gs;
}

void Gauss200Parser::Typename_gsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypename_gs(this);
}

void Gauss200Parser::Typename_gsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypename_gs(this);
}


antlrcpp::Any Gauss200Parser::Typename_gsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTypename_gs(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::typename_gs() {
  Typename_gsContext *_localctx = _tracker.createInstance<Typename_gsContext>(_ctx, getState());
  enterRule(_localctx, 960, Gauss200Parser::RuleTypename_gs);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6308);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 778, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6284);
      number_type();
      setState(6286);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 775, _ctx)) {
      case 1: {
        setState(6285);
        precision_part();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6288);
      concurrency_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6289);
      boolean_type();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6290);
      char_type();
      setState(6292);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 776, _ctx)) {
      case 1: {
        setState(6291);
        precision_part();
        break;
      }

      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6294);
      binary_type();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6295);
      date_type();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6296);
      geometry_type();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(6297);
      inet_type();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(6298);
      bit_type();
      setState(6300);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 777, _ctx)) {
      case 1: {
        setState(6299);
        precision_part();
        break;
      }

      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(6302);
      txt_search_type();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(6303);
      hll_type();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(6304);
      oid_type();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(6305);
      other_type();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(6306);
      identifier();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(6307);
      reserved_keywords_can_be_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Precision_partContext ------------------------------------------------------------------

Gauss200Parser::Precision_partContext::Precision_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Precision_partContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Precision_partContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

std::vector<Gauss200Parser::NumericContext *> Gauss200Parser::Precision_partContext::numeric() {
  return getRuleContexts<Gauss200Parser::NumericContext>();
}

Gauss200Parser::NumericContext* Gauss200Parser::Precision_partContext::numeric(size_t i) {
  return getRuleContext<Gauss200Parser::NumericContext>(i);
}

tree::TerminalNode* Gauss200Parser::Precision_partContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

tree::TerminalNode* Gauss200Parser::Precision_partContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

tree::TerminalNode* Gauss200Parser::Precision_partContext::LEFT_BRACKET() {
  return getToken(Gauss200Parser::LEFT_BRACKET, 0);
}

tree::TerminalNode* Gauss200Parser::Precision_partContext::RIGHT_BRACKET() {
  return getToken(Gauss200Parser::RIGHT_BRACKET, 0);
}

tree::TerminalNode* Gauss200Parser::Precision_partContext::ICONST() {
  return getToken(Gauss200Parser::ICONST, 0);
}


size_t Gauss200Parser::Precision_partContext::getRuleIndex() const {
  return Gauss200Parser::RulePrecision_part;
}

void Gauss200Parser::Precision_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrecision_part(this);
}

void Gauss200Parser::Precision_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrecision_part(this);
}


antlrcpp::Any Gauss200Parser::Precision_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPrecision_part(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Precision_partContext* Gauss200Parser::precision_part() {
  Precision_partContext *_localctx = _tracker.createInstance<Precision_partContext>(_ctx, getState());
  enterRule(_localctx, 962, Gauss200Parser::RulePrecision_part);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6325);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(6310);
        match(Gauss200Parser::LEFT_PAREN);
        setState(6313);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Gauss200Parser::ICONST:
          case Gauss200Parser::FCONST: {
            setState(6311);
            numeric();
            break;
          }

          case Gauss200Parser::ASTERISK: {
            setState(6312);
            match(Gauss200Parser::ASTERISK);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(6317);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::COMMA) {
          setState(6315);
          match(Gauss200Parser::COMMA);
          setState(6316);
          numeric();
        }
        setState(6319);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

      case Gauss200Parser::LEFT_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(6320);
        match(Gauss200Parser::LEFT_BRACKET);
        setState(6322);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::ICONST) {
          setState(6321);
          match(Gauss200Parser::ICONST);
        }
        setState(6324);
        match(Gauss200Parser::RIGHT_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericContext ------------------------------------------------------------------

Gauss200Parser::NumericContext::NumericContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::NumericContext::ICONST() {
  return getToken(Gauss200Parser::ICONST, 0);
}

tree::TerminalNode* Gauss200Parser::NumericContext::FCONST() {
  return getToken(Gauss200Parser::FCONST, 0);
}


size_t Gauss200Parser::NumericContext::getRuleIndex() const {
  return Gauss200Parser::RuleNumeric;
}

void Gauss200Parser::NumericContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumeric(this);
}

void Gauss200Parser::NumericContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumeric(this);
}


antlrcpp::Any Gauss200Parser::NumericContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNumeric(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::NumericContext* Gauss200Parser::numeric() {
  NumericContext *_localctx = _tracker.createInstance<NumericContext>(_ctx, getState());
  enterRule(_localctx, 964, Gauss200Parser::RuleNumeric);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6327);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::ICONST

    || _la == Gauss200Parser::FCONST)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Number_typeContext ------------------------------------------------------------------

Gauss200Parser::Number_typeContext::Number_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::TINYINT_GS() {
  return getToken(Gauss200Parser::TINYINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::SMALLINT_GS() {
  return getToken(Gauss200Parser::SMALLINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::INTEGER_GS() {
  return getToken(Gauss200Parser::INTEGER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::BINARY_INTEGER_GS() {
  return getToken(Gauss200Parser::BINARY_INTEGER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::BIGINT_GS() {
  return getToken(Gauss200Parser::BIGINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::DECIMAL_GS() {
  return getToken(Gauss200Parser::DECIMAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::NUMERIC_GS() {
  return getToken(Gauss200Parser::NUMERIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::NUMBER_GS() {
  return getToken(Gauss200Parser::NUMBER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::SMALLSERIAL_GS() {
  return getToken(Gauss200Parser::SMALLSERIAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::SERIAL_GS() {
  return getToken(Gauss200Parser::SERIAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::BIGSERIAL_GS() {
  return getToken(Gauss200Parser::BIGSERIAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::REAL_GS() {
  return getToken(Gauss200Parser::REAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::FLOAT4_GS() {
  return getToken(Gauss200Parser::FLOAT4_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::FLOAT_GS() {
  return getToken(Gauss200Parser::FLOAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::FLOAT8_GS() {
  return getToken(Gauss200Parser::FLOAT8_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::DOUBLE_GS() {
  return getToken(Gauss200Parser::DOUBLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::PRECISION_GS() {
  return getToken(Gauss200Parser::PRECISION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::BINARY_DOUBLE_GS() {
  return getToken(Gauss200Parser::BINARY_DOUBLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::DEC_GS() {
  return getToken(Gauss200Parser::DEC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Number_typeContext::INT_GS() {
  return getToken(Gauss200Parser::INT_GS, 0);
}


size_t Gauss200Parser::Number_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleNumber_type;
}

void Gauss200Parser::Number_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber_type(this);
}

void Gauss200Parser::Number_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber_type(this);
}


antlrcpp::Any Gauss200Parser::Number_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNumber_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Number_typeContext* Gauss200Parser::number_type() {
  Number_typeContext *_localctx = _tracker.createInstance<Number_typeContext>(_ctx, getState());
  enterRule(_localctx, 966, Gauss200Parser::RuleNumber_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6349);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::TINYINT_GS: {
        enterOuterAlt(_localctx, 1);
        setState(6329);
        match(Gauss200Parser::TINYINT_GS);
        break;
      }

      case Gauss200Parser::SMALLINT_GS: {
        enterOuterAlt(_localctx, 2);
        setState(6330);
        match(Gauss200Parser::SMALLINT_GS);
        break;
      }

      case Gauss200Parser::INTEGER_GS: {
        enterOuterAlt(_localctx, 3);
        setState(6331);
        match(Gauss200Parser::INTEGER_GS);
        break;
      }

      case Gauss200Parser::BINARY_INTEGER_GS: {
        enterOuterAlt(_localctx, 4);
        setState(6332);
        match(Gauss200Parser::BINARY_INTEGER_GS);
        break;
      }

      case Gauss200Parser::BIGINT_GS: {
        enterOuterAlt(_localctx, 5);
        setState(6333);
        match(Gauss200Parser::BIGINT_GS);
        break;
      }

      case Gauss200Parser::DECIMAL_GS: {
        enterOuterAlt(_localctx, 6);
        setState(6334);
        match(Gauss200Parser::DECIMAL_GS);
        break;
      }

      case Gauss200Parser::NUMERIC_GS: {
        enterOuterAlt(_localctx, 7);
        setState(6335);
        match(Gauss200Parser::NUMERIC_GS);
        break;
      }

      case Gauss200Parser::NUMBER_GS: {
        enterOuterAlt(_localctx, 8);
        setState(6336);
        match(Gauss200Parser::NUMBER_GS);
        break;
      }

      case Gauss200Parser::SMALLSERIAL_GS: {
        enterOuterAlt(_localctx, 9);
        setState(6337);
        match(Gauss200Parser::SMALLSERIAL_GS);
        break;
      }

      case Gauss200Parser::SERIAL_GS: {
        enterOuterAlt(_localctx, 10);
        setState(6338);
        match(Gauss200Parser::SERIAL_GS);
        break;
      }

      case Gauss200Parser::BIGSERIAL_GS: {
        enterOuterAlt(_localctx, 11);
        setState(6339);
        match(Gauss200Parser::BIGSERIAL_GS);
        break;
      }

      case Gauss200Parser::REAL_GS: {
        enterOuterAlt(_localctx, 12);
        setState(6340);
        match(Gauss200Parser::REAL_GS);
        break;
      }

      case Gauss200Parser::FLOAT4_GS: {
        enterOuterAlt(_localctx, 13);
        setState(6341);
        match(Gauss200Parser::FLOAT4_GS);
        break;
      }

      case Gauss200Parser::FLOAT_GS: {
        enterOuterAlt(_localctx, 14);
        setState(6342);
        match(Gauss200Parser::FLOAT_GS);
        break;
      }

      case Gauss200Parser::FLOAT8_GS: {
        enterOuterAlt(_localctx, 15);
        setState(6343);
        match(Gauss200Parser::FLOAT8_GS);
        break;
      }

      case Gauss200Parser::DOUBLE_GS: {
        enterOuterAlt(_localctx, 16);
        setState(6344);
        match(Gauss200Parser::DOUBLE_GS);
        setState(6345);
        match(Gauss200Parser::PRECISION_GS);
        break;
      }

      case Gauss200Parser::BINARY_DOUBLE_GS: {
        enterOuterAlt(_localctx, 17);
        setState(6346);
        match(Gauss200Parser::BINARY_DOUBLE_GS);
        break;
      }

      case Gauss200Parser::DEC_GS: {
        enterOuterAlt(_localctx, 18);
        setState(6347);
        match(Gauss200Parser::DEC_GS);
        break;
      }

      case Gauss200Parser::INT_GS: {
        enterOuterAlt(_localctx, 19);
        setState(6348);
        match(Gauss200Parser::INT_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrency_typeContext ------------------------------------------------------------------

Gauss200Parser::Concurrency_typeContext::Concurrency_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Concurrency_typeContext::MONEY_GS() {
  return getToken(Gauss200Parser::MONEY_GS, 0);
}


size_t Gauss200Parser::Concurrency_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleConcurrency_type;
}

void Gauss200Parser::Concurrency_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrency_type(this);
}

void Gauss200Parser::Concurrency_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrency_type(this);
}


antlrcpp::Any Gauss200Parser::Concurrency_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConcurrency_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Concurrency_typeContext* Gauss200Parser::concurrency_type() {
  Concurrency_typeContext *_localctx = _tracker.createInstance<Concurrency_typeContext>(_ctx, getState());
  enterRule(_localctx, 968, Gauss200Parser::RuleConcurrency_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6351);
    match(Gauss200Parser::MONEY_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_typeContext ------------------------------------------------------------------

Gauss200Parser::Boolean_typeContext::Boolean_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Boolean_typeContext::BOOLEAN_GS() {
  return getToken(Gauss200Parser::BOOLEAN_GS, 0);
}


size_t Gauss200Parser::Boolean_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleBoolean_type;
}

void Gauss200Parser::Boolean_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_type(this);
}

void Gauss200Parser::Boolean_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_type(this);
}


antlrcpp::Any Gauss200Parser::Boolean_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitBoolean_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Boolean_typeContext* Gauss200Parser::boolean_type() {
  Boolean_typeContext *_localctx = _tracker.createInstance<Boolean_typeContext>(_ctx, getState());
  enterRule(_localctx, 970, Gauss200Parser::RuleBoolean_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6353);
    match(Gauss200Parser::BOOLEAN_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Char_typeContext ------------------------------------------------------------------

Gauss200Parser::Char_typeContext::Char_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::CHAR_GS() {
  return getToken(Gauss200Parser::CHAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::CHARACTER_GS() {
  return getToken(Gauss200Parser::CHARACTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::NCHAR_GS() {
  return getToken(Gauss200Parser::NCHAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::VARCHAR_GS() {
  return getToken(Gauss200Parser::VARCHAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::VARYING_GS() {
  return getToken(Gauss200Parser::VARYING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::VARCHAR2_GS() {
  return getToken(Gauss200Parser::VARCHAR2_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::NVARCHAR2_GS() {
  return getToken(Gauss200Parser::NVARCHAR2_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::CLOB_GS() {
  return getToken(Gauss200Parser::CLOB_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Char_typeContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}


size_t Gauss200Parser::Char_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleChar_type;
}

void Gauss200Parser::Char_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChar_type(this);
}

void Gauss200Parser::Char_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChar_type(this);
}


antlrcpp::Any Gauss200Parser::Char_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitChar_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Char_typeContext* Gauss200Parser::char_type() {
  Char_typeContext *_localctx = _tracker.createInstance<Char_typeContext>(_ctx, getState());
  enterRule(_localctx, 972, Gauss200Parser::RuleChar_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6365);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 784, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6355);
      match(Gauss200Parser::CHAR_GS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6356);
      match(Gauss200Parser::CHARACTER_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6357);
      match(Gauss200Parser::NCHAR_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6358);
      match(Gauss200Parser::VARCHAR_GS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6359);
      match(Gauss200Parser::CHARACTER_GS);
      setState(6360);
      match(Gauss200Parser::VARYING_GS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6361);
      match(Gauss200Parser::VARCHAR2_GS);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6362);
      match(Gauss200Parser::NVARCHAR2_GS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(6363);
      match(Gauss200Parser::CLOB_GS);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(6364);
      match(Gauss200Parser::TEXT_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_typeContext ------------------------------------------------------------------

Gauss200Parser::Binary_typeContext::Binary_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Binary_typeContext::BLOB_GS() {
  return getToken(Gauss200Parser::BLOB_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Binary_typeContext::RAW_GS() {
  return getToken(Gauss200Parser::RAW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Binary_typeContext::BYTEA_GS() {
  return getToken(Gauss200Parser::BYTEA_GS, 0);
}


size_t Gauss200Parser::Binary_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleBinary_type;
}

void Gauss200Parser::Binary_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_type(this);
}

void Gauss200Parser::Binary_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_type(this);
}


antlrcpp::Any Gauss200Parser::Binary_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitBinary_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Binary_typeContext* Gauss200Parser::binary_type() {
  Binary_typeContext *_localctx = _tracker.createInstance<Binary_typeContext>(_ctx, getState());
  enterRule(_localctx, 974, Gauss200Parser::RuleBinary_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6367);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::BLOB_GS || _la == Gauss200Parser::RAW_GS || _la == Gauss200Parser::BYTEA_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Date_typeContext ------------------------------------------------------------------

Gauss200Parser::Date_typeContext::Date_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::DATE_GS() {
  return getToken(Gauss200Parser::DATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::TIMESTAMP_GS() {
  return getToken(Gauss200Parser::TIMESTAMP_GS, 0);
}

std::vector<Gauss200Parser::Precision_partContext *> Gauss200Parser::Date_typeContext::precision_part() {
  return getRuleContexts<Gauss200Parser::Precision_partContext>();
}

Gauss200Parser::Precision_partContext* Gauss200Parser::Date_typeContext::precision_part(size_t i) {
  return getRuleContext<Gauss200Parser::Precision_partContext>(i);
}

Gauss200Parser::Time_zone_partContext* Gauss200Parser::Date_typeContext::time_zone_part() {
  return getRuleContext<Gauss200Parser::Time_zone_partContext>(0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::WITHOUT_GS() {
  return getToken(Gauss200Parser::WITHOUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::SMALLDATETIME_GS() {
  return getToken(Gauss200Parser::SMALLDATETIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::INTERVAL_GS() {
  return getToken(Gauss200Parser::INTERVAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::DAY_GS() {
  return getToken(Gauss200Parser::DAY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::SECOND_GS() {
  return getToken(Gauss200Parser::SECOND_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::FIELDS_GS() {
  return getToken(Gauss200Parser::FIELDS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Date_typeContext::RELTIME_GS() {
  return getToken(Gauss200Parser::RELTIME_GS, 0);
}


size_t Gauss200Parser::Date_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleDate_type;
}

void Gauss200Parser::Date_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDate_type(this);
}

void Gauss200Parser::Date_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDate_type(this);
}


antlrcpp::Any Gauss200Parser::Date_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDate_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Date_typeContext* Gauss200Parser::date_type() {
  Date_typeContext *_localctx = _tracker.createInstance<Date_typeContext>(_ctx, getState());
  enterRule(_localctx, 976, Gauss200Parser::RuleDate_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6394);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 789, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6369);
      match(Gauss200Parser::DATE_GS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6370);
      _la = _input->LA(1);
      if (!(_la == Gauss200Parser::TIMESTAMP_GS

      || _la == Gauss200Parser::TIME_GS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6372);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 785, _ctx)) {
      case 1: {
        setState(6371);
        precision_part();
        break;
      }

      }
      setState(6376);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 786, _ctx)) {
      case 1: {
        setState(6374);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::WITH_GS || _la == Gauss200Parser::WITHOUT_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(6375);
        time_zone_part();
        break;
      }

      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6378);
      match(Gauss200Parser::SMALLDATETIME_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6379);
      match(Gauss200Parser::INTERVAL_GS);
      setState(6380);
      match(Gauss200Parser::DAY_GS);
      setState(6381);
      precision_part();
      setState(6382);
      match(Gauss200Parser::TO_GS);
      setState(6383);
      match(Gauss200Parser::SECOND_GS);
      setState(6384);
      precision_part();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6386);
      match(Gauss200Parser::INTERVAL_GS);
      setState(6388);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 787, _ctx)) {
      case 1: {
        setState(6387);
        match(Gauss200Parser::FIELDS_GS);
        break;
      }

      }
      setState(6391);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 788, _ctx)) {
      case 1: {
        setState(6390);
        precision_part();
        break;
      }

      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6393);
      match(Gauss200Parser::RELTIME_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Time_zone_partContext ------------------------------------------------------------------

Gauss200Parser::Time_zone_partContext::Time_zone_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Time_zone_partContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Time_zone_partContext::ZONE_GS() {
  return getToken(Gauss200Parser::ZONE_GS, 0);
}


size_t Gauss200Parser::Time_zone_partContext::getRuleIndex() const {
  return Gauss200Parser::RuleTime_zone_part;
}

void Gauss200Parser::Time_zone_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTime_zone_part(this);
}

void Gauss200Parser::Time_zone_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTime_zone_part(this);
}


antlrcpp::Any Gauss200Parser::Time_zone_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTime_zone_part(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Time_zone_partContext* Gauss200Parser::time_zone_part() {
  Time_zone_partContext *_localctx = _tracker.createInstance<Time_zone_partContext>(_ctx, getState());
  enterRule(_localctx, 978, Gauss200Parser::RuleTime_zone_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6396);
    match(Gauss200Parser::TIME_GS);
    setState(6397);
    match(Gauss200Parser::ZONE_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Geometry_typeContext ------------------------------------------------------------------

Gauss200Parser::Geometry_typeContext::Geometry_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Geometry_typeContext::POINT_GS() {
  return getToken(Gauss200Parser::POINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_typeContext::LSEG_GS() {
  return getToken(Gauss200Parser::LSEG_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_typeContext::BOX_GS() {
  return getToken(Gauss200Parser::BOX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_typeContext::PATH_GS() {
  return getToken(Gauss200Parser::PATH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_typeContext::POLYGON_GS() {
  return getToken(Gauss200Parser::POLYGON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Geometry_typeContext::CIRCLE_GS() {
  return getToken(Gauss200Parser::CIRCLE_GS, 0);
}


size_t Gauss200Parser::Geometry_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleGeometry_type;
}

void Gauss200Parser::Geometry_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeometry_type(this);
}

void Gauss200Parser::Geometry_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeometry_type(this);
}


antlrcpp::Any Gauss200Parser::Geometry_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGeometry_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Geometry_typeContext* Gauss200Parser::geometry_type() {
  Geometry_typeContext *_localctx = _tracker.createInstance<Geometry_typeContext>(_ctx, getState());
  enterRule(_localctx, 980, Gauss200Parser::RuleGeometry_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6399);
    _la = _input->LA(1);
    if (!(((((_la - 504) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 504)) & ((1ULL << (Gauss200Parser::POINT_GS - 504))
      | (1ULL << (Gauss200Parser::LSEG_GS - 504))
      | (1ULL << (Gauss200Parser::BOX_GS - 504))
      | (1ULL << (Gauss200Parser::PATH_GS - 504))
      | (1ULL << (Gauss200Parser::POLYGON_GS - 504))
      | (1ULL << (Gauss200Parser::CIRCLE_GS - 504)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inet_typeContext ------------------------------------------------------------------

Gauss200Parser::Inet_typeContext::Inet_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Inet_typeContext::CIDR_GS() {
  return getToken(Gauss200Parser::CIDR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Inet_typeContext::INET_GS() {
  return getToken(Gauss200Parser::INET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Inet_typeContext::MACADDR_GS() {
  return getToken(Gauss200Parser::MACADDR_GS, 0);
}


size_t Gauss200Parser::Inet_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleInet_type;
}

void Gauss200Parser::Inet_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInet_type(this);
}

void Gauss200Parser::Inet_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInet_type(this);
}


antlrcpp::Any Gauss200Parser::Inet_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitInet_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Inet_typeContext* Gauss200Parser::inet_type() {
  Inet_typeContext *_localctx = _tracker.createInstance<Inet_typeContext>(_ctx, getState());
  enterRule(_localctx, 982, Gauss200Parser::RuleInet_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6401);
    _la = _input->LA(1);
    if (!(((((_la - 510) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 510)) & ((1ULL << (Gauss200Parser::CIDR_GS - 510))
      | (1ULL << (Gauss200Parser::INET_GS - 510))
      | (1ULL << (Gauss200Parser::MACADDR_GS - 510)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bit_typeContext ------------------------------------------------------------------

Gauss200Parser::Bit_typeContext::Bit_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Bit_typeContext::BIT_GS() {
  return getToken(Gauss200Parser::BIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Bit_typeContext::VARYING_GS() {
  return getToken(Gauss200Parser::VARYING_GS, 0);
}


size_t Gauss200Parser::Bit_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleBit_type;
}

void Gauss200Parser::Bit_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBit_type(this);
}

void Gauss200Parser::Bit_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBit_type(this);
}


antlrcpp::Any Gauss200Parser::Bit_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitBit_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Bit_typeContext* Gauss200Parser::bit_type() {
  Bit_typeContext *_localctx = _tracker.createInstance<Bit_typeContext>(_ctx, getState());
  enterRule(_localctx, 984, Gauss200Parser::RuleBit_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6406);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 790, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6403);
      match(Gauss200Parser::BIT_GS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6404);
      match(Gauss200Parser::BIT_GS);
      setState(6405);
      match(Gauss200Parser::VARYING_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Txt_search_typeContext ------------------------------------------------------------------

Gauss200Parser::Txt_search_typeContext::Txt_search_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Txt_search_typeContext::TSVECTOR_GS() {
  return getToken(Gauss200Parser::TSVECTOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Txt_search_typeContext::TSQUERY_GS() {
  return getToken(Gauss200Parser::TSQUERY_GS, 0);
}


size_t Gauss200Parser::Txt_search_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleTxt_search_type;
}

void Gauss200Parser::Txt_search_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTxt_search_type(this);
}

void Gauss200Parser::Txt_search_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTxt_search_type(this);
}


antlrcpp::Any Gauss200Parser::Txt_search_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTxt_search_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Txt_search_typeContext* Gauss200Parser::txt_search_type() {
  Txt_search_typeContext *_localctx = _tracker.createInstance<Txt_search_typeContext>(_ctx, getState());
  enterRule(_localctx, 986, Gauss200Parser::RuleTxt_search_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6408);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::TSVECTOR_GS

    || _la == Gauss200Parser::TSQUERY_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Hll_typeContext ------------------------------------------------------------------

Gauss200Parser::Hll_typeContext::Hll_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Hll_typeContext::HLL_GS() {
  return getToken(Gauss200Parser::HLL_GS, 0);
}


size_t Gauss200Parser::Hll_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleHll_type;
}

void Gauss200Parser::Hll_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHll_type(this);
}

void Gauss200Parser::Hll_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHll_type(this);
}


antlrcpp::Any Gauss200Parser::Hll_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitHll_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Hll_typeContext* Gauss200Parser::hll_type() {
  Hll_typeContext *_localctx = _tracker.createInstance<Hll_typeContext>(_ctx, getState());
  enterRule(_localctx, 988, Gauss200Parser::RuleHll_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6410);
    match(Gauss200Parser::HLL_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Oid_typeContext ------------------------------------------------------------------

Gauss200Parser::Oid_typeContext::Oid_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::OID_GS() {
  return getToken(Gauss200Parser::OID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::CID_GS() {
  return getToken(Gauss200Parser::CID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::XID_GS() {
  return getToken(Gauss200Parser::XID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::TID_GS() {
  return getToken(Gauss200Parser::TID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGCONFIG_GS() {
  return getToken(Gauss200Parser::REGCONFIG_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGDICTIONARY_GS() {
  return getToken(Gauss200Parser::REGDICTIONARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGOPER() {
  return getToken(Gauss200Parser::REGOPER, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGOPERATOR() {
  return getToken(Gauss200Parser::REGOPERATOR, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGPROC() {
  return getToken(Gauss200Parser::REGPROC, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGPROCEDURE() {
  return getToken(Gauss200Parser::REGPROCEDURE, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGCLASS() {
  return getToken(Gauss200Parser::REGCLASS, 0);
}

tree::TerminalNode* Gauss200Parser::Oid_typeContext::REGTYPE() {
  return getToken(Gauss200Parser::REGTYPE, 0);
}


size_t Gauss200Parser::Oid_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleOid_type;
}

void Gauss200Parser::Oid_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOid_type(this);
}

void Gauss200Parser::Oid_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOid_type(this);
}


antlrcpp::Any Gauss200Parser::Oid_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOid_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Oid_typeContext* Gauss200Parser::oid_type() {
  Oid_typeContext *_localctx = _tracker.createInstance<Oid_typeContext>(_ctx, getState());
  enterRule(_localctx, 990, Gauss200Parser::RuleOid_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6412);
    _la = _input->LA(1);
    if (!(((((_la - 516) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
      | (1ULL << (Gauss200Parser::CID_GS - 516))
      | (1ULL << (Gauss200Parser::XID_GS - 516))
      | (1ULL << (Gauss200Parser::TID_GS - 516))
      | (1ULL << (Gauss200Parser::REGCONFIG_GS - 516))
      | (1ULL << (Gauss200Parser::REGDICTIONARY_GS - 516))
      | (1ULL << (Gauss200Parser::REGOPER - 516))
      | (1ULL << (Gauss200Parser::REGOPERATOR - 516))
      | (1ULL << (Gauss200Parser::REGPROC - 516))
      | (1ULL << (Gauss200Parser::REGPROCEDURE - 516))
      | (1ULL << (Gauss200Parser::REGCLASS - 516))
      | (1ULL << (Gauss200Parser::REGTYPE - 516)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Other_typeContext ------------------------------------------------------------------

Gauss200Parser::Other_typeContext::Other_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::ANY_GS() {
  return getToken(Gauss200Parser::ANY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::ANYELEMENT_GS() {
  return getToken(Gauss200Parser::ANYELEMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::ANYARRAY_GS() {
  return getToken(Gauss200Parser::ANYARRAY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::ANYNONARRAY_GS() {
  return getToken(Gauss200Parser::ANYNONARRAY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::ANYENUM_GS() {
  return getToken(Gauss200Parser::ANYENUM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::ANYRANGE_GS() {
  return getToken(Gauss200Parser::ANYRANGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::CSTRING_GS() {
  return getToken(Gauss200Parser::CSTRING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::INTERNAL_GS() {
  return getToken(Gauss200Parser::INTERNAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::LANGUAGE_HANDLER_GS() {
  return getToken(Gauss200Parser::LANGUAGE_HANDLER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::FDW_HANDLER_GS() {
  return getToken(Gauss200Parser::FDW_HANDLER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::RECORD_GS() {
  return getToken(Gauss200Parser::RECORD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::TRIGGER_GS() {
  return getToken(Gauss200Parser::TRIGGER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::VOID_GS() {
  return getToken(Gauss200Parser::VOID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Other_typeContext::OPAQUE_GS() {
  return getToken(Gauss200Parser::OPAQUE_GS, 0);
}


size_t Gauss200Parser::Other_typeContext::getRuleIndex() const {
  return Gauss200Parser::RuleOther_type;
}

void Gauss200Parser::Other_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOther_type(this);
}

void Gauss200Parser::Other_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOther_type(this);
}


antlrcpp::Any Gauss200Parser::Other_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOther_type(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Other_typeContext* Gauss200Parser::other_type() {
  Other_typeContext *_localctx = _tracker.createInstance<Other_typeContext>(_ctx, getState());
  enterRule(_localctx, 992, Gauss200Parser::RuleOther_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6414);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::ANY_GS || _la == Gauss200Parser::TRIGGER_GS || ((((_la - 528) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 528)) & ((1ULL << (Gauss200Parser::ANYELEMENT_GS - 528))
      | (1ULL << (Gauss200Parser::ANYARRAY_GS - 528))
      | (1ULL << (Gauss200Parser::ANYNONARRAY_GS - 528))
      | (1ULL << (Gauss200Parser::ANYENUM_GS - 528))
      | (1ULL << (Gauss200Parser::ANYRANGE_GS - 528))
      | (1ULL << (Gauss200Parser::CSTRING_GS - 528))
      | (1ULL << (Gauss200Parser::INTERNAL_GS - 528))
      | (1ULL << (Gauss200Parser::LANGUAGE_HANDLER_GS - 528))
      | (1ULL << (Gauss200Parser::FDW_HANDLER_GS - 528))
      | (1ULL << (Gauss200Parser::RECORD_GS - 528))
      | (1ULL << (Gauss200Parser::VOID_GS - 528))
      | (1ULL << (Gauss200Parser::OPAQUE_GS - 528)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typecast_argContext ------------------------------------------------------------------

Gauss200Parser::Typecast_argContext::Typecast_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Typecast_argContext::LEFT_BRACKET() {
  return getToken(Gauss200Parser::LEFT_BRACKET, 0);
}

tree::TerminalNode* Gauss200Parser::Typecast_argContext::RIGHT_BRACKET() {
  return getToken(Gauss200Parser::RIGHT_BRACKET, 0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Typecast_argContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Typecast_argContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Typecast_argContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Typecast_argContext::getRuleIndex() const {
  return Gauss200Parser::RuleTypecast_arg;
}

void Gauss200Parser::Typecast_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypecast_arg(this);
}

void Gauss200Parser::Typecast_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypecast_arg(this);
}


antlrcpp::Any Gauss200Parser::Typecast_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTypecast_arg(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Typecast_argContext* Gauss200Parser::typecast_arg() {
  Typecast_argContext *_localctx = _tracker.createInstance<Typecast_argContext>(_ctx, getState());
  enterRule(_localctx, 994, Gauss200Parser::RuleTypecast_arg);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6426);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::LEFT_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(6416);
        match(Gauss200Parser::LEFT_BRACKET);
        setState(6418);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 1) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
          | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
          | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
          | (1ULL << (Gauss200Parser::AND_GS - 1))
          | (1ULL << (Gauss200Parser::ANY_GS - 1))
          | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
          | (1ULL << (Gauss200Parser::ASC_GS - 1))
          | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
          | (1ULL << (Gauss200Parser::AS_GS - 1))
          | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
          | (1ULL << (Gauss200Parser::BOTH_GS - 1))
          | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
          | (1ULL << (Gauss200Parser::CASE_GS - 1))
          | (1ULL << (Gauss200Parser::CAST_GS - 1))
          | (1ULL << (Gauss200Parser::CHECK_GS - 1))
          | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
          | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
          | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
          | (1ULL << (Gauss200Parser::CREATE_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
          | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
          | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
          | (1ULL << (Gauss200Parser::DESC_GS - 1))
          | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
          | (1ULL << (Gauss200Parser::DO_GS - 1))
          | (1ULL << (Gauss200Parser::ELSE_GS - 1))
          | (1ULL << (Gauss200Parser::END_GS - 1))
          | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
          | (1ULL << (Gauss200Parser::FALSE_GS - 1))
          | (1ULL << (Gauss200Parser::FETCH_GS - 1))
          | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
          | (1ULL << (Gauss200Parser::FOR_GS - 1))
          | (1ULL << (Gauss200Parser::FROM_GS - 1))
          | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
          | (1ULL << (Gauss200Parser::GRANT_GS - 1))
          | (1ULL << (Gauss200Parser::GROUP_GS - 1))
          | (1ULL << (Gauss200Parser::HAVING_GS - 1))
          | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
          | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
          | (1ULL << (Gauss200Parser::INTO_GS - 1))
          | (1ULL << (Gauss200Parser::IN_GS - 1))
          | (1ULL << (Gauss200Parser::IS_GS - 1))
          | (1ULL << (Gauss200Parser::LEADING_GS - 1))
          | (1ULL << (Gauss200Parser::LESS_GS - 1))
          | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
          | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
          | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
          | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
          | (1ULL << (Gauss200Parser::MINUS_GS - 1))
          | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
          | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
          | (1ULL << (Gauss200Parser::NOT_GS - 1))
          | (1ULL << (Gauss200Parser::NULL_GS - 1))
          | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
          | (1ULL << (Gauss200Parser::ONLY_GS - 1))
          | (1ULL << (Gauss200Parser::ON_GS - 1))
          | (1ULL << (Gauss200Parser::ORDER_GS - 1))
          | (1ULL << (Gauss200Parser::OR_GS - 1))
          | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
          | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
          | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
          | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
          | (1ULL << (Gauss200Parser::REJECT_GS - 65))
          | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
          | (1ULL << (Gauss200Parser::RETURN_GS - 65))
          | (1ULL << (Gauss200Parser::SELECT_GS - 65))
          | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
          | (1ULL << (Gauss200Parser::SOME_GS - 65))
          | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
          | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
          | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
          | (1ULL << (Gauss200Parser::THEN_GS - 65))
          | (1ULL << (Gauss200Parser::TO_GS - 65))
          | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
          | (1ULL << (Gauss200Parser::TRUE_GS - 65))
          | (1ULL << (Gauss200Parser::UNION_GS - 65))
          | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
          | (1ULL << (Gauss200Parser::USER_GS - 65))
          | (1ULL << (Gauss200Parser::USING_GS - 65))
          | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
          | (1ULL << (Gauss200Parser::WHEN_GS - 65))
          | (1ULL << (Gauss200Parser::WHERE_GS - 65))
          | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
          | (1ULL << (Gauss200Parser::WITH_GS - 65))
          | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
          | (1ULL << (Gauss200Parser::BINARY_GS - 65))
          | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
          | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
          | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
          | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
          | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
          | (1ULL << (Gauss200Parser::INNER_GS - 65))
          | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
          | (1ULL << (Gauss200Parser::JOIN_GS - 65))
          | (1ULL << (Gauss200Parser::LEFT_GS - 65))
          | (1ULL << (Gauss200Parser::LIKE_GS - 65))
          | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
          | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
          | (1ULL << (Gauss200Parser::OUTER_GS - 65))
          | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
          | (1ULL << (Gauss200Parser::OVER_GS - 65))
          | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
          | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
          | (1ULL << (Gauss200Parser::ABORT_GS - 65))
          | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
          | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
          | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
          | (1ULL << (Gauss200Parser::ACTION_GS - 65))
          | (1ULL << (Gauss200Parser::ADD_GS - 65))
          | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
          | (1ULL << (Gauss200Parser::AFTER_GS - 65))
          | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
          | (1ULL << (Gauss200Parser::ALSO_GS - 65))
          | (1ULL << (Gauss200Parser::ALTER_GS - 65))
          | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
          | (1ULL << (Gauss200Parser::APP_GS - 65))
          | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
          | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
          | (1ULL << (Gauss200Parser::AT_GS - 129))
          | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
          | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
          | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
          | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
          | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
          | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
          | (1ULL << (Gauss200Parser::BLOB_GS - 129))
          | (1ULL << (Gauss200Parser::BY_GS - 129))
          | (1ULL << (Gauss200Parser::CACHE_GS - 129))
          | (1ULL << (Gauss200Parser::CALLED_GS - 129))
          | (1ULL << (Gauss200Parser::CALL_GS - 129))
          | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
          | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
          | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
          | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
          | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
          | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
          | (1ULL << (Gauss200Parser::CLASS_GS - 129))
          | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
          | (1ULL << (Gauss200Parser::CLOB_GS - 129))
          | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
          | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
          | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
          | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
          | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
          | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
          | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
          | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
          | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
          | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
          | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
          | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
          | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
          | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
          | (1ULL << (Gauss200Parser::COPY_GS - 129))
          | (1ULL << (Gauss200Parser::COST_GS - 129))
          | (1ULL << (Gauss200Parser::CSV_GS - 129))
          | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
          | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
          | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
          | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
          | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
          | (1ULL << (Gauss200Parser::DATA_GS - 129))
          | (1ULL << (Gauss200Parser::DAY_GS - 129))
          | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
          | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
          | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
          | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
          | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
          | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
          | (1ULL << (Gauss200Parser::DELETE_GS - 129))
          | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
          | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
          | (1ULL << (Gauss200Parser::DELTA_GS - 129))
          | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
          | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
          | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
          | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
          | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
          | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
          | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
          | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
          | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
          | (1ULL << (Gauss200Parser::DROP_GS - 193))
          | (1ULL << (Gauss200Parser::EACH_GS - 193))
          | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
          | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
          | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
          | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
          | (1ULL << (Gauss200Parser::ENUM_GS - 193))
          | (1ULL << (Gauss200Parser::EOL_GS - 193))
          | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
          | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
          | (1ULL << (Gauss200Parser::EVERY_GS - 193))
          | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
          | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
          | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
          | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
          | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
          | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
          | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
          | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
          | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
          | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
          | (1ULL << (Gauss200Parser::FIRST_GS - 193))
          | (1ULL << (Gauss200Parser::FIXED_GS - 193))
          | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
          | (1ULL << (Gauss200Parser::FORCE_GS - 193))
          | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
          | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
          | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
          | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
          | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
          | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
          | (1ULL << (Gauss200Parser::HEADER_GS - 193))
          | (1ULL << (Gauss200Parser::HOLD_GS - 193))
          | (1ULL << (Gauss200Parser::HOUR_GS - 193))
          | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
          | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
          | (1ULL << (Gauss200Parser::IF_GS - 193))
          | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
          | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
          | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
          | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
          | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
          | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
          | (1ULL << (Gauss200Parser::INDEX_GS - 193))
          | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
          | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
          | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
          | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
          | (1ULL << (Gauss200Parser::INLINE_GS - 193))
          | (1ULL << (Gauss200Parser::INPUT_GS - 193))
          | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
          | (1ULL << (Gauss200Parser::INSERT_GS - 193))
          | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
          | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
          | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
          | (1ULL << (Gauss200Parser::KEY_GS - 193))
          | (1ULL << (Gauss200Parser::LABEL_GS - 193))
          | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
          | (1ULL << (Gauss200Parser::LARGE_GS - 193))
          | (1ULL << (Gauss200Parser::LAST_GS - 193))
          | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
          | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
          | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
          | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
          | (1ULL << (Gauss200Parser::LOAD_GS - 257))
          | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
          | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
          | (1ULL << (Gauss200Parser::LOCK_GS - 257))
          | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
          | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
          | (1ULL << (Gauss200Parser::LOG_GS - 257))
          | (1ULL << (Gauss200Parser::LOOP_GS - 257))
          | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
          | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
          | (1ULL << (Gauss200Parser::MATCH_GS - 257))
          | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
          | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
          | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
          | (1ULL << (Gauss200Parser::MERGE_GS - 257))
          | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
          | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
          | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
          | (1ULL << (Gauss200Parser::MODE_GS - 257))
          | (1ULL << (Gauss200Parser::MONTH_GS - 257))
          | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
          | (1ULL << (Gauss200Parser::MOVE_GS - 257))
          | (1ULL << (Gauss200Parser::NAMES_GS - 257))
          | (1ULL << (Gauss200Parser::NAME_GS - 257))
          | (1ULL << (Gauss200Parser::NEXT_GS - 257))
          | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
          | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
          | (1ULL << (Gauss200Parser::NODE_GS - 257))
          | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
          | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
          | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
          | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
          | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
          | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
          | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
          | (1ULL << (Gauss200Parser::NO_GS - 257))
          | (1ULL << (Gauss200Parser::NULLS_GS - 257))
          | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
          | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
          | (1ULL << (Gauss200Parser::OFF_GS - 257))
          | (1ULL << (Gauss200Parser::OF_GS - 257))
          | (1ULL << (Gauss200Parser::OIDS_GS - 257))
          | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
          | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
          | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
          | (1ULL << (Gauss200Parser::OPTION_GS - 257))
          | (1ULL << (Gauss200Parser::OWNED_GS - 257))
          | (1ULL << (Gauss200Parser::OWNER_GS - 257))
          | (1ULL << (Gauss200Parser::PARSER_GS - 257))
          | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
          | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
          | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
          | (1ULL << (Gauss200Parser::PASSING_GS - 257))
          | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
          | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
          | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
          | (1ULL << (Gauss200Parser::PER_GS - 257))
          | (1ULL << (Gauss200Parser::PLANS_GS - 257))
          | (1ULL << (Gauss200Parser::POOL_GS - 257))
          | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
          | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
          | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
          | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
          | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
          | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
          | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
          | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
          | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
          | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
          | (1ULL << (Gauss200Parser::QUERY_GS - 321))
          | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
          | (1ULL << (Gauss200Parser::RANGE_GS - 321))
          | (1ULL << (Gauss200Parser::RAW_GS - 321))
          | (1ULL << (Gauss200Parser::READ_GS - 321))
          | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
          | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
          | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
          | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
          | (1ULL << (Gauss200Parser::REF_GS - 321))
          | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
          | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
          | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
          | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
          | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
          | (1ULL << (Gauss200Parser::RENAME_GS - 321))
          | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
          | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
          | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
          | (1ULL << (Gauss200Parser::RESET_GS - 321))
          | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
          | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
          | (1ULL << (Gauss200Parser::RESTART_GS - 321))
          | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
          | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
          | (1ULL << (Gauss200Parser::REUSE_GS - 321))
          | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
          | (1ULL << (Gauss200Parser::ROLE_GS - 321))
          | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
          | (1ULL << (Gauss200Parser::ROWS_GS - 321))
          | (1ULL << (Gauss200Parser::RULE_GS - 321))
          | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
          | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
          | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
          | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
          | (1ULL << (Gauss200Parser::SECOND_GS - 321))
          | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
          | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
          | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
          | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
          | (1ULL << (Gauss200Parser::SERVER_GS - 321))
          | (1ULL << (Gauss200Parser::SESSION_GS - 321))
          | (1ULL << (Gauss200Parser::SET_GS - 321))
          | (1ULL << (Gauss200Parser::SHARE_GS - 321))
          | (1ULL << (Gauss200Parser::SHOW_GS - 321))
          | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
          | (1ULL << (Gauss200Parser::SIZE_GS - 321))
          | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
          | (1ULL << (Gauss200Parser::STABLE_GS - 321))
          | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
          | (1ULL << (Gauss200Parser::START_GS - 321))
          | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
          | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
          | (1ULL << (Gauss200Parser::STDIN_GS - 321))
          | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
          | (1ULL << (Gauss200Parser::STORE_GS - 385))
          | (1ULL << (Gauss200Parser::STRICT_GS - 385))
          | (1ULL << (Gauss200Parser::STRIP_GS - 385))
          | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
          | (1ULL << (Gauss200Parser::SYSID_GS - 385))
          | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
          | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
          | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
          | (1ULL << (Gauss200Parser::TABLES_GS - 385))
          | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
          | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
          | (1ULL << (Gauss200Parser::TEMP_GS - 385))
          | (1ULL << (Gauss200Parser::TEXT_GS - 385))
          | (1ULL << (Gauss200Parser::THAN_GS - 385))
          | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
          | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
          | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
          | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
          | (1ULL << (Gauss200Parser::TYPES_GS - 385))
          | (1ULL << (Gauss200Parser::TYPE_GS - 385))
          | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
          | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
          | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
          | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
          | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
          | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
          | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
          | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
          | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
          | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
          | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
          | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
          | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
          | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
          | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
          | (1ULL << (Gauss200Parser::VALID_GS - 385))
          | (1ULL << (Gauss200Parser::VALUE_GS - 385))
          | (1ULL << (Gauss200Parser::VARYING_GS - 385))
          | (1ULL << (Gauss200Parser::VERSION_GS - 385))
          | (1ULL << (Gauss200Parser::VIEW_GS - 385))
          | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
          | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
          | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
          | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
          | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
          | (1ULL << (Gauss200Parser::WORK_GS - 385))
          | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
          | (1ULL << (Gauss200Parser::WRITE_GS - 385))
          | (1ULL << (Gauss200Parser::XML_GS - 385))
          | (1ULL << (Gauss200Parser::YEAR_GS - 385))
          | (1ULL << (Gauss200Parser::YES_GS - 385))
          | (1ULL << (Gauss200Parser::ZONE_GS - 385))
          | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
          | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
          | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
          | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
          | (1ULL << (Gauss200Parser::BIT_GS - 385))
          | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
          | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
          | (1ULL << (Gauss200Parser::CHAR_GS - 385))
          | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
          | (1ULL << (Gauss200Parser::DATE_GS - 385))
          | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
          | (1ULL << (Gauss200Parser::DEC_GS - 449))
          | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
          | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
          | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
          | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
          | (1ULL << (Gauss200Parser::INOUT_GS - 449))
          | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
          | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
          | (1ULL << (Gauss200Parser::INT_GS - 449))
          | (1ULL << (Gauss200Parser::LEAST_GS - 449))
          | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
          | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
          | (1ULL << (Gauss200Parser::NONE_GS - 449))
          | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
          | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
          | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
          | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
          | (1ULL << (Gauss200Parser::NVL_GS - 449))
          | (1ULL << (Gauss200Parser::OUT_GS - 449))
          | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
          | (1ULL << (Gauss200Parser::POSITION_GS - 449))
          | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
          | (1ULL << (Gauss200Parser::REAL_GS - 449))
          | (1ULL << (Gauss200Parser::ROW_GS - 449))
          | (1ULL << (Gauss200Parser::SETOF_GS - 449))
          | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
          | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
          | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
          | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
          | (1ULL << (Gauss200Parser::TIME_GS - 449))
          | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
          | (1ULL << (Gauss200Parser::TREAT_GS - 449))
          | (1ULL << (Gauss200Parser::TRIM_GS - 449))
          | (1ULL << (Gauss200Parser::VALUES_GS - 449))
          | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
          | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
          | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
          | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
          | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
          | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
          | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
          | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
          | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
          | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
          | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
          | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
          | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
          | (1ULL << (Gauss200Parser::POINT_GS - 449))
          | (1ULL << (Gauss200Parser::LSEG_GS - 449))
          | (1ULL << (Gauss200Parser::BOX_GS - 449))
          | (1ULL << (Gauss200Parser::PATH_GS - 449))
          | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
          | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
          | (1ULL << (Gauss200Parser::CIDR_GS - 449))
          | (1ULL << (Gauss200Parser::INET_GS - 449))
          | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
          | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
          | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
          | (1ULL << (Gauss200Parser::USAGE_GS - 516))
          | (1ULL << (Gauss200Parser::SPACE_GS - 516))
          | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
          | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
          | (1ULL << (Gauss200Parser::CUBE_GS - 601))
          | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
          | (1ULL << (Gauss200Parser::SETS_GS - 601))
          | (1ULL << (Gauss200Parser::LEFT_PAREN - 601))
          | (1ULL << (Gauss200Parser::PLUS_SIGN - 601))
          | (1ULL << (Gauss200Parser::MINUS_SIGN - 601))
          | (1ULL << (Gauss200Parser::AT_SIGN - 601))
          | (1ULL << (Gauss200Parser::QUESTION_MARK - 601))
          | (1ULL << (Gauss200Parser::TILDE_OPERATOR_PART - 601))
          | (1ULL << (Gauss200Parser::EXCLAMATION_OPERATOR_PART - 601))
          | (1ULL << (Gauss200Parser::POUND_SIGN - 601))
          | (1ULL << (Gauss200Parser::BAR - 601))
          | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
          | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
          | (1ULL << (Gauss200Parser::SCONST - 601))
          | (1ULL << (Gauss200Parser::ICONST - 601))
          | (1ULL << (Gauss200Parser::FCONST - 601))
          | (1ULL << (Gauss200Parser::BCONST - 601))
          | (1ULL << (Gauss200Parser::PARAM - 601)))) != 0)) {
          setState(6417);
          expression_list();
        }
        setState(6420);
        match(Gauss200Parser::RIGHT_BRACKET);
        break;
      }

      case Gauss200Parser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(6421);
        match(Gauss200Parser::LEFT_PAREN);
        setState(6423);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 1) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
          | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
          | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
          | (1ULL << (Gauss200Parser::AND_GS - 1))
          | (1ULL << (Gauss200Parser::ANY_GS - 1))
          | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
          | (1ULL << (Gauss200Parser::ASC_GS - 1))
          | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
          | (1ULL << (Gauss200Parser::AS_GS - 1))
          | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
          | (1ULL << (Gauss200Parser::BOTH_GS - 1))
          | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
          | (1ULL << (Gauss200Parser::CASE_GS - 1))
          | (1ULL << (Gauss200Parser::CAST_GS - 1))
          | (1ULL << (Gauss200Parser::CHECK_GS - 1))
          | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
          | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
          | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
          | (1ULL << (Gauss200Parser::CREATE_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
          | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
          | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
          | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
          | (1ULL << (Gauss200Parser::DESC_GS - 1))
          | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
          | (1ULL << (Gauss200Parser::DO_GS - 1))
          | (1ULL << (Gauss200Parser::ELSE_GS - 1))
          | (1ULL << (Gauss200Parser::END_GS - 1))
          | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
          | (1ULL << (Gauss200Parser::FALSE_GS - 1))
          | (1ULL << (Gauss200Parser::FETCH_GS - 1))
          | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
          | (1ULL << (Gauss200Parser::FOR_GS - 1))
          | (1ULL << (Gauss200Parser::FROM_GS - 1))
          | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
          | (1ULL << (Gauss200Parser::GRANT_GS - 1))
          | (1ULL << (Gauss200Parser::GROUP_GS - 1))
          | (1ULL << (Gauss200Parser::HAVING_GS - 1))
          | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
          | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
          | (1ULL << (Gauss200Parser::INTO_GS - 1))
          | (1ULL << (Gauss200Parser::IN_GS - 1))
          | (1ULL << (Gauss200Parser::IS_GS - 1))
          | (1ULL << (Gauss200Parser::LEADING_GS - 1))
          | (1ULL << (Gauss200Parser::LESS_GS - 1))
          | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
          | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
          | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
          | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
          | (1ULL << (Gauss200Parser::MINUS_GS - 1))
          | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
          | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
          | (1ULL << (Gauss200Parser::NOT_GS - 1))
          | (1ULL << (Gauss200Parser::NULL_GS - 1))
          | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
          | (1ULL << (Gauss200Parser::ONLY_GS - 1))
          | (1ULL << (Gauss200Parser::ON_GS - 1))
          | (1ULL << (Gauss200Parser::ORDER_GS - 1))
          | (1ULL << (Gauss200Parser::OR_GS - 1))
          | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
          | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
          | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
          | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
          | (1ULL << (Gauss200Parser::REJECT_GS - 65))
          | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
          | (1ULL << (Gauss200Parser::RETURN_GS - 65))
          | (1ULL << (Gauss200Parser::SELECT_GS - 65))
          | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
          | (1ULL << (Gauss200Parser::SOME_GS - 65))
          | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
          | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
          | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
          | (1ULL << (Gauss200Parser::THEN_GS - 65))
          | (1ULL << (Gauss200Parser::TO_GS - 65))
          | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
          | (1ULL << (Gauss200Parser::TRUE_GS - 65))
          | (1ULL << (Gauss200Parser::UNION_GS - 65))
          | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
          | (1ULL << (Gauss200Parser::USER_GS - 65))
          | (1ULL << (Gauss200Parser::USING_GS - 65))
          | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
          | (1ULL << (Gauss200Parser::WHEN_GS - 65))
          | (1ULL << (Gauss200Parser::WHERE_GS - 65))
          | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
          | (1ULL << (Gauss200Parser::WITH_GS - 65))
          | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
          | (1ULL << (Gauss200Parser::BINARY_GS - 65))
          | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
          | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
          | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
          | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
          | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
          | (1ULL << (Gauss200Parser::INNER_GS - 65))
          | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
          | (1ULL << (Gauss200Parser::JOIN_GS - 65))
          | (1ULL << (Gauss200Parser::LEFT_GS - 65))
          | (1ULL << (Gauss200Parser::LIKE_GS - 65))
          | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
          | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
          | (1ULL << (Gauss200Parser::OUTER_GS - 65))
          | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
          | (1ULL << (Gauss200Parser::OVER_GS - 65))
          | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
          | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
          | (1ULL << (Gauss200Parser::ABORT_GS - 65))
          | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
          | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
          | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
          | (1ULL << (Gauss200Parser::ACTION_GS - 65))
          | (1ULL << (Gauss200Parser::ADD_GS - 65))
          | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
          | (1ULL << (Gauss200Parser::AFTER_GS - 65))
          | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
          | (1ULL << (Gauss200Parser::ALSO_GS - 65))
          | (1ULL << (Gauss200Parser::ALTER_GS - 65))
          | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
          | (1ULL << (Gauss200Parser::APP_GS - 65))
          | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
          | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
          | (1ULL << (Gauss200Parser::AT_GS - 129))
          | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
          | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
          | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
          | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
          | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
          | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
          | (1ULL << (Gauss200Parser::BLOB_GS - 129))
          | (1ULL << (Gauss200Parser::BY_GS - 129))
          | (1ULL << (Gauss200Parser::CACHE_GS - 129))
          | (1ULL << (Gauss200Parser::CALLED_GS - 129))
          | (1ULL << (Gauss200Parser::CALL_GS - 129))
          | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
          | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
          | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
          | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
          | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
          | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
          | (1ULL << (Gauss200Parser::CLASS_GS - 129))
          | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
          | (1ULL << (Gauss200Parser::CLOB_GS - 129))
          | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
          | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
          | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
          | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
          | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
          | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
          | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
          | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
          | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
          | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
          | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
          | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
          | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
          | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
          | (1ULL << (Gauss200Parser::COPY_GS - 129))
          | (1ULL << (Gauss200Parser::COST_GS - 129))
          | (1ULL << (Gauss200Parser::CSV_GS - 129))
          | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
          | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
          | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
          | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
          | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
          | (1ULL << (Gauss200Parser::DATA_GS - 129))
          | (1ULL << (Gauss200Parser::DAY_GS - 129))
          | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
          | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
          | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
          | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
          | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
          | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
          | (1ULL << (Gauss200Parser::DELETE_GS - 129))
          | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
          | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
          | (1ULL << (Gauss200Parser::DELTA_GS - 129))
          | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
          | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
          | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
          | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
          | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
          | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
          | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
          | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
          | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
          | (1ULL << (Gauss200Parser::DROP_GS - 193))
          | (1ULL << (Gauss200Parser::EACH_GS - 193))
          | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
          | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
          | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
          | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
          | (1ULL << (Gauss200Parser::ENUM_GS - 193))
          | (1ULL << (Gauss200Parser::EOL_GS - 193))
          | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
          | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
          | (1ULL << (Gauss200Parser::EVERY_GS - 193))
          | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
          | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
          | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
          | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
          | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
          | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
          | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
          | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
          | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
          | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
          | (1ULL << (Gauss200Parser::FIRST_GS - 193))
          | (1ULL << (Gauss200Parser::FIXED_GS - 193))
          | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
          | (1ULL << (Gauss200Parser::FORCE_GS - 193))
          | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
          | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
          | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
          | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
          | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
          | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
          | (1ULL << (Gauss200Parser::HEADER_GS - 193))
          | (1ULL << (Gauss200Parser::HOLD_GS - 193))
          | (1ULL << (Gauss200Parser::HOUR_GS - 193))
          | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
          | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
          | (1ULL << (Gauss200Parser::IF_GS - 193))
          | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
          | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
          | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
          | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
          | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
          | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
          | (1ULL << (Gauss200Parser::INDEX_GS - 193))
          | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
          | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
          | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
          | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
          | (1ULL << (Gauss200Parser::INLINE_GS - 193))
          | (1ULL << (Gauss200Parser::INPUT_GS - 193))
          | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
          | (1ULL << (Gauss200Parser::INSERT_GS - 193))
          | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
          | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
          | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
          | (1ULL << (Gauss200Parser::KEY_GS - 193))
          | (1ULL << (Gauss200Parser::LABEL_GS - 193))
          | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
          | (1ULL << (Gauss200Parser::LARGE_GS - 193))
          | (1ULL << (Gauss200Parser::LAST_GS - 193))
          | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
          | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
          | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
          | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
          | (1ULL << (Gauss200Parser::LOAD_GS - 257))
          | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
          | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
          | (1ULL << (Gauss200Parser::LOCK_GS - 257))
          | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
          | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
          | (1ULL << (Gauss200Parser::LOG_GS - 257))
          | (1ULL << (Gauss200Parser::LOOP_GS - 257))
          | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
          | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
          | (1ULL << (Gauss200Parser::MATCH_GS - 257))
          | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
          | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
          | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
          | (1ULL << (Gauss200Parser::MERGE_GS - 257))
          | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
          | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
          | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
          | (1ULL << (Gauss200Parser::MODE_GS - 257))
          | (1ULL << (Gauss200Parser::MONTH_GS - 257))
          | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
          | (1ULL << (Gauss200Parser::MOVE_GS - 257))
          | (1ULL << (Gauss200Parser::NAMES_GS - 257))
          | (1ULL << (Gauss200Parser::NAME_GS - 257))
          | (1ULL << (Gauss200Parser::NEXT_GS - 257))
          | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
          | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
          | (1ULL << (Gauss200Parser::NODE_GS - 257))
          | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
          | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
          | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
          | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
          | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
          | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
          | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
          | (1ULL << (Gauss200Parser::NO_GS - 257))
          | (1ULL << (Gauss200Parser::NULLS_GS - 257))
          | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
          | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
          | (1ULL << (Gauss200Parser::OFF_GS - 257))
          | (1ULL << (Gauss200Parser::OF_GS - 257))
          | (1ULL << (Gauss200Parser::OIDS_GS - 257))
          | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
          | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
          | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
          | (1ULL << (Gauss200Parser::OPTION_GS - 257))
          | (1ULL << (Gauss200Parser::OWNED_GS - 257))
          | (1ULL << (Gauss200Parser::OWNER_GS - 257))
          | (1ULL << (Gauss200Parser::PARSER_GS - 257))
          | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
          | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
          | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
          | (1ULL << (Gauss200Parser::PASSING_GS - 257))
          | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
          | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
          | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
          | (1ULL << (Gauss200Parser::PER_GS - 257))
          | (1ULL << (Gauss200Parser::PLANS_GS - 257))
          | (1ULL << (Gauss200Parser::POOL_GS - 257))
          | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
          | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
          | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
          | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
          | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
          | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
          | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
          | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
          | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
          | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
          | (1ULL << (Gauss200Parser::QUERY_GS - 321))
          | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
          | (1ULL << (Gauss200Parser::RANGE_GS - 321))
          | (1ULL << (Gauss200Parser::RAW_GS - 321))
          | (1ULL << (Gauss200Parser::READ_GS - 321))
          | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
          | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
          | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
          | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
          | (1ULL << (Gauss200Parser::REF_GS - 321))
          | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
          | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
          | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
          | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
          | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
          | (1ULL << (Gauss200Parser::RENAME_GS - 321))
          | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
          | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
          | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
          | (1ULL << (Gauss200Parser::RESET_GS - 321))
          | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
          | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
          | (1ULL << (Gauss200Parser::RESTART_GS - 321))
          | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
          | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
          | (1ULL << (Gauss200Parser::REUSE_GS - 321))
          | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
          | (1ULL << (Gauss200Parser::ROLE_GS - 321))
          | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
          | (1ULL << (Gauss200Parser::ROWS_GS - 321))
          | (1ULL << (Gauss200Parser::RULE_GS - 321))
          | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
          | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
          | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
          | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
          | (1ULL << (Gauss200Parser::SECOND_GS - 321))
          | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
          | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
          | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
          | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
          | (1ULL << (Gauss200Parser::SERVER_GS - 321))
          | (1ULL << (Gauss200Parser::SESSION_GS - 321))
          | (1ULL << (Gauss200Parser::SET_GS - 321))
          | (1ULL << (Gauss200Parser::SHARE_GS - 321))
          | (1ULL << (Gauss200Parser::SHOW_GS - 321))
          | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
          | (1ULL << (Gauss200Parser::SIZE_GS - 321))
          | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
          | (1ULL << (Gauss200Parser::STABLE_GS - 321))
          | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
          | (1ULL << (Gauss200Parser::START_GS - 321))
          | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
          | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
          | (1ULL << (Gauss200Parser::STDIN_GS - 321))
          | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
          | (1ULL << (Gauss200Parser::STORE_GS - 385))
          | (1ULL << (Gauss200Parser::STRICT_GS - 385))
          | (1ULL << (Gauss200Parser::STRIP_GS - 385))
          | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
          | (1ULL << (Gauss200Parser::SYSID_GS - 385))
          | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
          | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
          | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
          | (1ULL << (Gauss200Parser::TABLES_GS - 385))
          | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
          | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
          | (1ULL << (Gauss200Parser::TEMP_GS - 385))
          | (1ULL << (Gauss200Parser::TEXT_GS - 385))
          | (1ULL << (Gauss200Parser::THAN_GS - 385))
          | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
          | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
          | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
          | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
          | (1ULL << (Gauss200Parser::TYPES_GS - 385))
          | (1ULL << (Gauss200Parser::TYPE_GS - 385))
          | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
          | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
          | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
          | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
          | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
          | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
          | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
          | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
          | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
          | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
          | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
          | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
          | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
          | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
          | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
          | (1ULL << (Gauss200Parser::VALID_GS - 385))
          | (1ULL << (Gauss200Parser::VALUE_GS - 385))
          | (1ULL << (Gauss200Parser::VARYING_GS - 385))
          | (1ULL << (Gauss200Parser::VERSION_GS - 385))
          | (1ULL << (Gauss200Parser::VIEW_GS - 385))
          | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
          | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
          | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
          | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
          | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
          | (1ULL << (Gauss200Parser::WORK_GS - 385))
          | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
          | (1ULL << (Gauss200Parser::WRITE_GS - 385))
          | (1ULL << (Gauss200Parser::XML_GS - 385))
          | (1ULL << (Gauss200Parser::YEAR_GS - 385))
          | (1ULL << (Gauss200Parser::YES_GS - 385))
          | (1ULL << (Gauss200Parser::ZONE_GS - 385))
          | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
          | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
          | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
          | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
          | (1ULL << (Gauss200Parser::BIT_GS - 385))
          | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
          | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
          | (1ULL << (Gauss200Parser::CHAR_GS - 385))
          | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
          | (1ULL << (Gauss200Parser::DATE_GS - 385))
          | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
          | (1ULL << (Gauss200Parser::DEC_GS - 449))
          | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
          | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
          | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
          | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
          | (1ULL << (Gauss200Parser::INOUT_GS - 449))
          | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
          | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
          | (1ULL << (Gauss200Parser::INT_GS - 449))
          | (1ULL << (Gauss200Parser::LEAST_GS - 449))
          | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
          | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
          | (1ULL << (Gauss200Parser::NONE_GS - 449))
          | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
          | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
          | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
          | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
          | (1ULL << (Gauss200Parser::NVL_GS - 449))
          | (1ULL << (Gauss200Parser::OUT_GS - 449))
          | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
          | (1ULL << (Gauss200Parser::POSITION_GS - 449))
          | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
          | (1ULL << (Gauss200Parser::REAL_GS - 449))
          | (1ULL << (Gauss200Parser::ROW_GS - 449))
          | (1ULL << (Gauss200Parser::SETOF_GS - 449))
          | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
          | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
          | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
          | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
          | (1ULL << (Gauss200Parser::TIME_GS - 449))
          | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
          | (1ULL << (Gauss200Parser::TREAT_GS - 449))
          | (1ULL << (Gauss200Parser::TRIM_GS - 449))
          | (1ULL << (Gauss200Parser::VALUES_GS - 449))
          | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
          | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
          | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
          | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
          | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
          | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
          | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
          | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
          | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
          | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
          | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
          | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
          | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
          | (1ULL << (Gauss200Parser::POINT_GS - 449))
          | (1ULL << (Gauss200Parser::LSEG_GS - 449))
          | (1ULL << (Gauss200Parser::BOX_GS - 449))
          | (1ULL << (Gauss200Parser::PATH_GS - 449))
          | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
          | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
          | (1ULL << (Gauss200Parser::CIDR_GS - 449))
          | (1ULL << (Gauss200Parser::INET_GS - 449))
          | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
          | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
          | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
          | (1ULL << (Gauss200Parser::USAGE_GS - 516))
          | (1ULL << (Gauss200Parser::SPACE_GS - 516))
          | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
          | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
          | (1ULL << (Gauss200Parser::CUBE_GS - 601))
          | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
          | (1ULL << (Gauss200Parser::SETS_GS - 601))
          | (1ULL << (Gauss200Parser::LEFT_PAREN - 601))
          | (1ULL << (Gauss200Parser::PLUS_SIGN - 601))
          | (1ULL << (Gauss200Parser::MINUS_SIGN - 601))
          | (1ULL << (Gauss200Parser::AT_SIGN - 601))
          | (1ULL << (Gauss200Parser::QUESTION_MARK - 601))
          | (1ULL << (Gauss200Parser::TILDE_OPERATOR_PART - 601))
          | (1ULL << (Gauss200Parser::EXCLAMATION_OPERATOR_PART - 601))
          | (1ULL << (Gauss200Parser::POUND_SIGN - 601))
          | (1ULL << (Gauss200Parser::BAR - 601))
          | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
          | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
          | (1ULL << (Gauss200Parser::SCONST - 601))
          | (1ULL << (Gauss200Parser::ICONST - 601))
          | (1ULL << (Gauss200Parser::FCONST - 601))
          | (1ULL << (Gauss200Parser::BCONST - 601))
          | (1ULL << (Gauss200Parser::PARAM - 601)))) != 0)) {
          setState(6422);
          expression_list();
        }
        setState(6425);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_exprContext ------------------------------------------------------------------

Gauss200Parser::Function_exprContext::Function_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Simple_functionContext* Gauss200Parser::Function_exprContext::simple_function() {
  return getRuleContext<Gauss200Parser::Simple_functionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::FILTER_GS() {
  return getToken(Gauss200Parser::FILTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::WHERE_GS() {
  return getToken(Gauss200Parser::WHERE_GS, 0);
}

std::vector<Gauss200Parser::ExpressionContext *> Gauss200Parser::Function_exprContext::expression() {
  return getRuleContexts<Gauss200Parser::ExpressionContext>();
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Function_exprContext::expression(size_t i) {
  return getRuleContext<Gauss200Parser::ExpressionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CURRENT_DATE_GS() {
  return getToken(Gauss200Parser::CURRENT_DATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CURRENT_TIME_GS() {
  return getToken(Gauss200Parser::CURRENT_TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CURRENT_TIMESTAMP_GS() {
  return getToken(Gauss200Parser::CURRENT_TIMESTAMP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::LOCALTIME_GS() {
  return getToken(Gauss200Parser::LOCALTIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::LOCALTIMESTAMP_GS() {
  return getToken(Gauss200Parser::LOCALTIMESTAMP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::ICONST() {
  return getToken(Gauss200Parser::ICONST, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CURRENT_ROLE_GS() {
  return getToken(Gauss200Parser::CURRENT_ROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CURRENT_USER_GS() {
  return getToken(Gauss200Parser::CURRENT_USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::SESSION_USER_GS() {
  return getToken(Gauss200Parser::SESSION_USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CURRENT_CATALOG_GS() {
  return getToken(Gauss200Parser::CURRENT_CATALOG_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CURRENT_SCHEMA_GS() {
  return getToken(Gauss200Parser::CURRENT_SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::CAST_GS() {
  return getToken(Gauss200Parser::CAST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::Typename_gsContext* Gauss200Parser::Function_exprContext::typename_gs() {
  return getRuleContext<Gauss200Parser::Typename_gsContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::EXTRACT_GS() {
  return getToken(Gauss200Parser::EXTRACT_GS, 0);
}

Gauss200Parser::Extract_listContext* Gauss200Parser::Function_exprContext::extract_list() {
  return getRuleContext<Gauss200Parser::Extract_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::OVERLAY_GS() {
  return getToken(Gauss200Parser::OVERLAY_GS, 0);
}

Gauss200Parser::Overlay_listContext* Gauss200Parser::Function_exprContext::overlay_list() {
  return getRuleContext<Gauss200Parser::Overlay_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::POSITION_GS() {
  return getToken(Gauss200Parser::POSITION_GS, 0);
}

Gauss200Parser::Position_listContext* Gauss200Parser::Function_exprContext::position_list() {
  return getRuleContext<Gauss200Parser::Position_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::SUBSTRING_GS() {
  return getToken(Gauss200Parser::SUBSTRING_GS, 0);
}

Gauss200Parser::Substr_listContext* Gauss200Parser::Function_exprContext::substr_list() {
  return getRuleContext<Gauss200Parser::Substr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::TREAT_GS() {
  return getToken(Gauss200Parser::TREAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::TRIM_GS() {
  return getToken(Gauss200Parser::TRIM_GS, 0);
}

Gauss200Parser::Trim_listContext* Gauss200Parser::Function_exprContext::trim_list() {
  return getRuleContext<Gauss200Parser::Trim_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::BOTH_GS() {
  return getToken(Gauss200Parser::BOTH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::LEADING_GS() {
  return getToken(Gauss200Parser::LEADING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::TRAILING_GS() {
  return getToken(Gauss200Parser::TRAILING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::NULLIF_GS() {
  return getToken(Gauss200Parser::NULLIF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::COALESCE_GS() {
  return getToken(Gauss200Parser::COALESCE_GS, 0);
}

Gauss200Parser::Paren_expr_listContext* Gauss200Parser::Function_exprContext::paren_expr_list() {
  return getRuleContext<Gauss200Parser::Paren_expr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::GREATEST_GS() {
  return getToken(Gauss200Parser::GREATEST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::LEAST_GS() {
  return getToken(Gauss200Parser::LEAST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::DECODE_GS() {
  return getToken(Gauss200Parser::DECODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLCONCAT_GS() {
  return getToken(Gauss200Parser::XMLCONCAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLELEMENT_GS() {
  return getToken(Gauss200Parser::XMLELEMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::NAME_GS() {
  return getToken(Gauss200Parser::NAME_GS, 0);
}

Gauss200Parser::Col_labelContext* Gauss200Parser::Function_exprContext::col_label() {
  return getRuleContext<Gauss200Parser::Col_labelContext>(0);
}

Gauss200Parser::Xmlelement_partContext* Gauss200Parser::Function_exprContext::xmlelement_part() {
  return getRuleContext<Gauss200Parser::Xmlelement_partContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLEXISTS_GS() {
  return getToken(Gauss200Parser::XMLEXISTS_GS, 0);
}

Gauss200Parser::Xmlexists_argumentContext* Gauss200Parser::Function_exprContext::xmlexists_argument() {
  return getRuleContext<Gauss200Parser::Xmlexists_argumentContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLFOREST_GS() {
  return getToken(Gauss200Parser::XMLFOREST_GS, 0);
}

Gauss200Parser::Xml_attribute_listContext* Gauss200Parser::Function_exprContext::xml_attribute_list() {
  return getRuleContext<Gauss200Parser::Xml_attribute_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLPARSE_GS() {
  return getToken(Gauss200Parser::XMLPARSE_GS, 0);
}

Gauss200Parser::Document_or_contentContext* Gauss200Parser::Function_exprContext::document_or_content() {
  return getRuleContext<Gauss200Parser::Document_or_contentContext>(0);
}

Gauss200Parser::Xml_whitespace_optionContext* Gauss200Parser::Function_exprContext::xml_whitespace_option() {
  return getRuleContext<Gauss200Parser::Xml_whitespace_optionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLPI_GS() {
  return getToken(Gauss200Parser::XMLPI_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLROOT_GS() {
  return getToken(Gauss200Parser::XMLROOT_GS, 0);
}

Gauss200Parser::Xml_root_versionContext* Gauss200Parser::Function_exprContext::xml_root_version() {
  return getRuleContext<Gauss200Parser::Xml_root_versionContext>(0);
}

Gauss200Parser::Opt_xml_root_standaloneContext* Gauss200Parser::Function_exprContext::opt_xml_root_standalone() {
  return getRuleContext<Gauss200Parser::Opt_xml_root_standaloneContext>(0);
}

tree::TerminalNode* Gauss200Parser::Function_exprContext::XMLSERIALIZE_GS() {
  return getToken(Gauss200Parser::XMLSERIALIZE_GS, 0);
}


size_t Gauss200Parser::Function_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunction_expr;
}

void Gauss200Parser::Function_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_expr(this);
}

void Gauss200Parser::Function_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_expr(this);
}


antlrcpp::Any Gauss200Parser::Function_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunction_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Function_exprContext* Gauss200Parser::function_expr() {
  Function_exprContext *_localctx = _tracker.createInstance<Function_exprContext>(_ctx, getState());
  enterRule(_localctx, 996, Gauss200Parser::RuleFunction_expr);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6577);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 804, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6428);
      simple_function();
      setState(6429);
      match(Gauss200Parser::FILTER_GS);
      setState(6430);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6431);
      match(Gauss200Parser::WHERE_GS);
      setState(6432);
      expression();
      setState(6433);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6435);
      simple_function();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6436);
      match(Gauss200Parser::CURRENT_DATE_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6437);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Gauss200Parser::CURRENT_TIMESTAMP_GS)
        | (1ULL << Gauss200Parser::CURRENT_TIME_GS)
        | (1ULL << Gauss200Parser::LOCALTIMESTAMP_GS)
        | (1ULL << Gauss200Parser::LOCALTIME_GS))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6441);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 794, _ctx)) {
      case 1: {
        setState(6438);
        match(Gauss200Parser::LEFT_PAREN);
        setState(6439);
        match(Gauss200Parser::ICONST);
        setState(6440);
        match(Gauss200Parser::RIGHT_PAREN);
        break;
      }

      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6443);
      match(Gauss200Parser::CURRENT_ROLE_GS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6444);
      match(Gauss200Parser::CURRENT_USER_GS);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6445);
      match(Gauss200Parser::SESSION_USER_GS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(6446);
      match(Gauss200Parser::USER_GS);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(6447);
      match(Gauss200Parser::CURRENT_CATALOG_GS);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(6448);
      match(Gauss200Parser::CURRENT_SCHEMA_GS);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(6449);
      match(Gauss200Parser::CAST_GS);
      setState(6450);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6451);
      expression();
      setState(6452);
      match(Gauss200Parser::AS_GS);
      setState(6453);
      typename_gs();
      setState(6454);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(6456);
      match(Gauss200Parser::EXTRACT_GS);
      setState(6457);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6459);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << Gauss200Parser::ALL_GS)
        | (1ULL << Gauss200Parser::ANALYSE_GS)
        | (1ULL << Gauss200Parser::ANALYZE_GS)
        | (1ULL << Gauss200Parser::AND_GS)
        | (1ULL << Gauss200Parser::ANY_GS)
        | (1ULL << Gauss200Parser::ARRAY_GS)
        | (1ULL << Gauss200Parser::ASC_GS)
        | (1ULL << Gauss200Parser::ASYMMETRIC_GS)
        | (1ULL << Gauss200Parser::AS_GS)
        | (1ULL << Gauss200Parser::AUTHID_GS)
        | (1ULL << Gauss200Parser::BOTH_GS)
        | (1ULL << Gauss200Parser::BUCKETS_GS)
        | (1ULL << Gauss200Parser::CASE_GS)
        | (1ULL << Gauss200Parser::CAST_GS)
        | (1ULL << Gauss200Parser::CHECK_GS)
        | (1ULL << Gauss200Parser::COLLATE_GS)
        | (1ULL << Gauss200Parser::COLUMN_GS)
        | (1ULL << Gauss200Parser::CONSTRAINT_GS)
        | (1ULL << Gauss200Parser::CREATE_GS)
        | (1ULL << Gauss200Parser::CURRENT_CATALOG_GS)
        | (1ULL << Gauss200Parser::CURRENT_DATE_GS)
        | (1ULL << Gauss200Parser::CURRENT_ROLE_GS)
        | (1ULL << Gauss200Parser::CURRENT_TIMESTAMP_GS)
        | (1ULL << Gauss200Parser::CURRENT_TIME_GS)
        | (1ULL << Gauss200Parser::CURRENT_USER_GS)
        | (1ULL << Gauss200Parser::DEFAULT_GS)
        | (1ULL << Gauss200Parser::DEFERRABLE_GS)
        | (1ULL << Gauss200Parser::DESC_GS)
        | (1ULL << Gauss200Parser::DISTINCT_GS)
        | (1ULL << Gauss200Parser::DO_GS)
        | (1ULL << Gauss200Parser::ELSE_GS)
        | (1ULL << Gauss200Parser::END_GS)
        | (1ULL << Gauss200Parser::EXCEPT_GS)
        | (1ULL << Gauss200Parser::FALSE_GS)
        | (1ULL << Gauss200Parser::FETCH_GS)
        | (1ULL << Gauss200Parser::FOREIGN_GS)
        | (1ULL << Gauss200Parser::FOR_GS)
        | (1ULL << Gauss200Parser::FROM_GS)
        | (1ULL << Gauss200Parser::FUNCTION_GS)
        | (1ULL << Gauss200Parser::GRANT_GS)
        | (1ULL << Gauss200Parser::GROUP_GS)
        | (1ULL << Gauss200Parser::HAVING_GS)
        | (1ULL << Gauss200Parser::INITIALLY_GS)
        | (1ULL << Gauss200Parser::INTERSECT_GS)
        | (1ULL << Gauss200Parser::INTO_GS)
        | (1ULL << Gauss200Parser::IN_GS)
        | (1ULL << Gauss200Parser::IS_GS)
        | (1ULL << Gauss200Parser::LEADING_GS)
        | (1ULL << Gauss200Parser::LESS_GS)
        | (1ULL << Gauss200Parser::LIMIT_GS)
        | (1ULL << Gauss200Parser::LOCALTIMESTAMP_GS)
        | (1ULL << Gauss200Parser::LOCALTIME_GS)
        | (1ULL << Gauss200Parser::MAXVALUE_GS)
        | (1ULL << Gauss200Parser::MINUS_GS)
        | (1ULL << Gauss200Parser::MODIFY_GS)
        | (1ULL << Gauss200Parser::NLSSORT_GS)
        | (1ULL << Gauss200Parser::NOT_GS)
        | (1ULL << Gauss200Parser::NULL_GS)
        | (1ULL << Gauss200Parser::OFFSET_GS)
        | (1ULL << Gauss200Parser::ONLY_GS)
        | (1ULL << Gauss200Parser::ON_GS)
        | (1ULL << Gauss200Parser::ORDER_GS)
        | (1ULL << Gauss200Parser::OR_GS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (Gauss200Parser::PERFORMANCE_GS - 64))
        | (1ULL << (Gauss200Parser::PLACING_GS - 64))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 64))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 64))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 64))
        | (1ULL << (Gauss200Parser::REJECT_GS - 64))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 64))
        | (1ULL << (Gauss200Parser::RETURN_GS - 64))
        | (1ULL << (Gauss200Parser::SELECT_GS - 64))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 64))
        | (1ULL << (Gauss200Parser::SOME_GS - 64))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 64))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 64))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 64))
        | (1ULL << (Gauss200Parser::THEN_GS - 64))
        | (1ULL << (Gauss200Parser::TO_GS - 64))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 64))
        | (1ULL << (Gauss200Parser::TRUE_GS - 64))
        | (1ULL << (Gauss200Parser::UNION_GS - 64))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 64))
        | (1ULL << (Gauss200Parser::USER_GS - 64))
        | (1ULL << (Gauss200Parser::USING_GS - 64))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 64))
        | (1ULL << (Gauss200Parser::WHEN_GS - 64))
        | (1ULL << (Gauss200Parser::WHERE_GS - 64))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 64))
        | (1ULL << (Gauss200Parser::WITH_GS - 64))
        | (1ULL << (Gauss200Parser::ABORT_GS - 64))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 64))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 64))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 64))
        | (1ULL << (Gauss200Parser::ACTION_GS - 64))
        | (1ULL << (Gauss200Parser::ADD_GS - 64))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 64))
        | (1ULL << (Gauss200Parser::AFTER_GS - 64))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 64))
        | (1ULL << (Gauss200Parser::ALSO_GS - 64))
        | (1ULL << (Gauss200Parser::ALTER_GS - 64))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 64))
        | (1ULL << (Gauss200Parser::APP_GS - 64))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (Gauss200Parser::ASSIGNMENT_GS - 128))
        | (1ULL << (Gauss200Parser::ATTRIBUTE_GS - 128))
        | (1ULL << (Gauss200Parser::AT_GS - 128))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 128))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 128))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 128))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 128))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 128))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 128))
        | (1ULL << (Gauss200Parser::BLOB_GS - 128))
        | (1ULL << (Gauss200Parser::BY_GS - 128))
        | (1ULL << (Gauss200Parser::CACHE_GS - 128))
        | (1ULL << (Gauss200Parser::CALLED_GS - 128))
        | (1ULL << (Gauss200Parser::CALL_GS - 128))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 128))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 128))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 128))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 128))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 128))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 128))
        | (1ULL << (Gauss200Parser::CLASS_GS - 128))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 128))
        | (1ULL << (Gauss200Parser::CLOB_GS - 128))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 128))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 128))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 128))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 128))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 128))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 128))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 128))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 128))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 128))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 128))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 128))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 128))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 128))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 128))
        | (1ULL << (Gauss200Parser::COPY_GS - 128))
        | (1ULL << (Gauss200Parser::COST_GS - 128))
        | (1ULL << (Gauss200Parser::CSV_GS - 128))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 128))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 128))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 128))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 128))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 128))
        | (1ULL << (Gauss200Parser::DATA_GS - 128))
        | (1ULL << (Gauss200Parser::DAY_GS - 128))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 128))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 128))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 128))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 128))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 128))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 128))
        | (1ULL << (Gauss200Parser::DELETE_GS - 128))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 128))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 128))
        | (1ULL << (Gauss200Parser::DELTA_GS - 128))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 128))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 128))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 128))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 128))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 128))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 128))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (Gauss200Parser::DOCUMENT_GS - 192))
        | (1ULL << (Gauss200Parser::DOMAIN_GS - 192))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 192))
        | (1ULL << (Gauss200Parser::DROP_GS - 192))
        | (1ULL << (Gauss200Parser::EACH_GS - 192))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 192))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 192))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 192))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 192))
        | (1ULL << (Gauss200Parser::ENUM_GS - 192))
        | (1ULL << (Gauss200Parser::EOL_GS - 192))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 192))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 192))
        | (1ULL << (Gauss200Parser::EVERY_GS - 192))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 192))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 192))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 192))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 192))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 192))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 192))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 192))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 192))
        | (1ULL << (Gauss200Parser::FIRST_GS - 192))
        | (1ULL << (Gauss200Parser::FIXED_GS - 192))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 192))
        | (1ULL << (Gauss200Parser::FORCE_GS - 192))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 192))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 192))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 192))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 192))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 192))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 192))
        | (1ULL << (Gauss200Parser::HEADER_GS - 192))
        | (1ULL << (Gauss200Parser::HOLD_GS - 192))
        | (1ULL << (Gauss200Parser::HOUR_GS - 192))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 192))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 192))
        | (1ULL << (Gauss200Parser::IF_GS - 192))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 192))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 192))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 192))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 192))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 192))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 192))
        | (1ULL << (Gauss200Parser::INDEX_GS - 192))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 192))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 192))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 192))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 192))
        | (1ULL << (Gauss200Parser::INLINE_GS - 192))
        | (1ULL << (Gauss200Parser::INPUT_GS - 192))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 192))
        | (1ULL << (Gauss200Parser::INSERT_GS - 192))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 192))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 192))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 192))
        | (1ULL << (Gauss200Parser::KEY_GS - 192))
        | (1ULL << (Gauss200Parser::LABEL_GS - 192))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 192))
        | (1ULL << (Gauss200Parser::LARGE_GS - 192))
        | (1ULL << (Gauss200Parser::LAST_GS - 192))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (Gauss200Parser::LC_CTYPE_GS - 256))
        | (1ULL << (Gauss200Parser::LEAKPROOF_GS - 256))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 256))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 256))
        | (1ULL << (Gauss200Parser::LOAD_GS - 256))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 256))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 256))
        | (1ULL << (Gauss200Parser::LOCK_GS - 256))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 256))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 256))
        | (1ULL << (Gauss200Parser::LOG_GS - 256))
        | (1ULL << (Gauss200Parser::LOOP_GS - 256))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 256))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 256))
        | (1ULL << (Gauss200Parser::MATCH_GS - 256))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 256))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 256))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 256))
        | (1ULL << (Gauss200Parser::MERGE_GS - 256))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 256))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 256))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::MODE_GS - 256))
        | (1ULL << (Gauss200Parser::MONTH_GS - 256))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 256))
        | (1ULL << (Gauss200Parser::MOVE_GS - 256))
        | (1ULL << (Gauss200Parser::NAMES_GS - 256))
        | (1ULL << (Gauss200Parser::NAME_GS - 256))
        | (1ULL << (Gauss200Parser::NEXT_GS - 256))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 256))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 256))
        | (1ULL << (Gauss200Parser::NODE_GS - 256))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 256))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 256))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 256))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 256))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 256))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 256))
        | (1ULL << (Gauss200Parser::NO_GS - 256))
        | (1ULL << (Gauss200Parser::NULLS_GS - 256))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 256))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 256))
        | (1ULL << (Gauss200Parser::OFF_GS - 256))
        | (1ULL << (Gauss200Parser::OF_GS - 256))
        | (1ULL << (Gauss200Parser::OIDS_GS - 256))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 256))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 256))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 256))
        | (1ULL << (Gauss200Parser::OPTION_GS - 256))
        | (1ULL << (Gauss200Parser::OWNED_GS - 256))
        | (1ULL << (Gauss200Parser::OWNER_GS - 256))
        | (1ULL << (Gauss200Parser::PARSER_GS - 256))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 256))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 256))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 256))
        | (1ULL << (Gauss200Parser::PASSING_GS - 256))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 256))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 256))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 256))
        | (1ULL << (Gauss200Parser::PER_GS - 256))
        | (1ULL << (Gauss200Parser::PLANS_GS - 256))
        | (1ULL << (Gauss200Parser::POOL_GS - 256))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (Gauss200Parser::PREFERRED_GS - 320))
        | (1ULL << (Gauss200Parser::PREFIX_GS - 320))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 320))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 320))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 320))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 320))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 320))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 320))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 320))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 320))
        | (1ULL << (Gauss200Parser::QUERY_GS - 320))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 320))
        | (1ULL << (Gauss200Parser::RANGE_GS - 320))
        | (1ULL << (Gauss200Parser::RAW_GS - 320))
        | (1ULL << (Gauss200Parser::READ_GS - 320))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 320))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 320))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 320))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 320))
        | (1ULL << (Gauss200Parser::REF_GS - 320))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 320))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 320))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 320))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 320))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 320))
        | (1ULL << (Gauss200Parser::RENAME_GS - 320))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 320))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 320))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 320))
        | (1ULL << (Gauss200Parser::RESET_GS - 320))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 320))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 320))
        | (1ULL << (Gauss200Parser::RESTART_GS - 320))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 320))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 320))
        | (1ULL << (Gauss200Parser::REUSE_GS - 320))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 320))
        | (1ULL << (Gauss200Parser::ROLE_GS - 320))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 320))
        | (1ULL << (Gauss200Parser::ROWS_GS - 320))
        | (1ULL << (Gauss200Parser::RULE_GS - 320))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 320))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 320))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 320))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 320))
        | (1ULL << (Gauss200Parser::SECOND_GS - 320))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 320))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 320))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 320))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 320))
        | (1ULL << (Gauss200Parser::SERVER_GS - 320))
        | (1ULL << (Gauss200Parser::SESSION_GS - 320))
        | (1ULL << (Gauss200Parser::SET_GS - 320))
        | (1ULL << (Gauss200Parser::SHARE_GS - 320))
        | (1ULL << (Gauss200Parser::SHOW_GS - 320))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 320))
        | (1ULL << (Gauss200Parser::SIZE_GS - 320))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 320))
        | (1ULL << (Gauss200Parser::STABLE_GS - 320))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 320))
        | (1ULL << (Gauss200Parser::START_GS - 320))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 320))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 320))
        | (1ULL << (Gauss200Parser::STDIN_GS - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 384)) & ((1ULL << (Gauss200Parser::STDOUT_GS - 384))
        | (1ULL << (Gauss200Parser::STORAGE_GS - 384))
        | (1ULL << (Gauss200Parser::STORE_GS - 384))
        | (1ULL << (Gauss200Parser::STRICT_GS - 384))
        | (1ULL << (Gauss200Parser::STRIP_GS - 384))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 384))
        | (1ULL << (Gauss200Parser::SYSID_GS - 384))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 384))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 384))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 384))
        | (1ULL << (Gauss200Parser::TABLES_GS - 384))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 384))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 384))
        | (1ULL << (Gauss200Parser::TEMP_GS - 384))
        | (1ULL << (Gauss200Parser::TEXT_GS - 384))
        | (1ULL << (Gauss200Parser::THAN_GS - 384))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 384))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 384))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 384))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 384))
        | (1ULL << (Gauss200Parser::TYPES_GS - 384))
        | (1ULL << (Gauss200Parser::TYPE_GS - 384))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 384))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 384))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 384))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 384))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 384))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 384))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 384))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 384))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 384))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 384))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 384))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 384))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 384))
        | (1ULL << (Gauss200Parser::VALID_GS - 384))
        | (1ULL << (Gauss200Parser::VALUE_GS - 384))
        | (1ULL << (Gauss200Parser::VARYING_GS - 384))
        | (1ULL << (Gauss200Parser::VERSION_GS - 384))
        | (1ULL << (Gauss200Parser::VIEW_GS - 384))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 384))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 384))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 384))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 384))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 384))
        | (1ULL << (Gauss200Parser::WORK_GS - 384))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 384))
        | (1ULL << (Gauss200Parser::WRITE_GS - 384))
        | (1ULL << (Gauss200Parser::XML_GS - 384))
        | (1ULL << (Gauss200Parser::YEAR_GS - 384))
        | (1ULL << (Gauss200Parser::YES_GS - 384))
        | (1ULL << (Gauss200Parser::ZONE_GS - 384))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 384))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 384))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 384))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 384))
        | (1ULL << (Gauss200Parser::BIT_GS - 384))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 384))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 384))
        | (1ULL << (Gauss200Parser::CHAR_GS - 384))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 384))
        | (1ULL << (Gauss200Parser::DATE_GS - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 448)) & ((1ULL << (Gauss200Parser::DECIMAL_GS - 448))
        | (1ULL << (Gauss200Parser::DECODE_GS - 448))
        | (1ULL << (Gauss200Parser::DEC_GS - 448))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 448))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 448))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 448))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 448))
        | (1ULL << (Gauss200Parser::INOUT_GS - 448))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 448))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 448))
        | (1ULL << (Gauss200Parser::INT_GS - 448))
        | (1ULL << (Gauss200Parser::LEAST_GS - 448))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 448))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 448))
        | (1ULL << (Gauss200Parser::NONE_GS - 448))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 448))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 448))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 448))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 448))
        | (1ULL << (Gauss200Parser::NVL_GS - 448))
        | (1ULL << (Gauss200Parser::OUT_GS - 448))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 448))
        | (1ULL << (Gauss200Parser::POSITION_GS - 448))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 448))
        | (1ULL << (Gauss200Parser::REAL_GS - 448))
        | (1ULL << (Gauss200Parser::ROW_GS - 448))
        | (1ULL << (Gauss200Parser::SETOF_GS - 448))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 448))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 448))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 448))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 448))
        | (1ULL << (Gauss200Parser::TIME_GS - 448))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 448))
        | (1ULL << (Gauss200Parser::TREAT_GS - 448))
        | (1ULL << (Gauss200Parser::TRIM_GS - 448))
        | (1ULL << (Gauss200Parser::VALUES_GS - 448))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 448))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 448))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 448))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 448))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 448))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 448))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 448))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 448))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 448))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 448))
        | (1ULL << (Gauss200Parser::PATH_GS - 448)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
        | (1ULL << (Gauss200Parser::USAGE_GS - 516))
        | (1ULL << (Gauss200Parser::SPACE_GS - 516))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::DELIMITED_STR - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601)))) != 0)) {
        setState(6458);
        extract_list();
      }
      setState(6461);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(6462);
      match(Gauss200Parser::OVERLAY_GS);
      setState(6463);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6464);
      overlay_list();
      setState(6465);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(6467);
      match(Gauss200Parser::POSITION_GS);
      setState(6468);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6470);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
        | (1ULL << (Gauss200Parser::AND_GS - 1))
        | (1ULL << (Gauss200Parser::ANY_GS - 1))
        | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
        | (1ULL << (Gauss200Parser::ASC_GS - 1))
        | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
        | (1ULL << (Gauss200Parser::AS_GS - 1))
        | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
        | (1ULL << (Gauss200Parser::BOTH_GS - 1))
        | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
        | (1ULL << (Gauss200Parser::CASE_GS - 1))
        | (1ULL << (Gauss200Parser::CAST_GS - 1))
        | (1ULL << (Gauss200Parser::CHECK_GS - 1))
        | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
        | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
        | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
        | (1ULL << (Gauss200Parser::CREATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
        | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
        | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
        | (1ULL << (Gauss200Parser::DESC_GS - 1))
        | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
        | (1ULL << (Gauss200Parser::DO_GS - 1))
        | (1ULL << (Gauss200Parser::ELSE_GS - 1))
        | (1ULL << (Gauss200Parser::END_GS - 1))
        | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
        | (1ULL << (Gauss200Parser::FALSE_GS - 1))
        | (1ULL << (Gauss200Parser::FETCH_GS - 1))
        | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
        | (1ULL << (Gauss200Parser::FOR_GS - 1))
        | (1ULL << (Gauss200Parser::FROM_GS - 1))
        | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
        | (1ULL << (Gauss200Parser::GRANT_GS - 1))
        | (1ULL << (Gauss200Parser::GROUP_GS - 1))
        | (1ULL << (Gauss200Parser::HAVING_GS - 1))
        | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
        | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
        | (1ULL << (Gauss200Parser::INTO_GS - 1))
        | (1ULL << (Gauss200Parser::IN_GS - 1))
        | (1ULL << (Gauss200Parser::IS_GS - 1))
        | (1ULL << (Gauss200Parser::LEADING_GS - 1))
        | (1ULL << (Gauss200Parser::LESS_GS - 1))
        | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
        | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
        | (1ULL << (Gauss200Parser::MINUS_GS - 1))
        | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
        | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
        | (1ULL << (Gauss200Parser::NOT_GS - 1))
        | (1ULL << (Gauss200Parser::NULL_GS - 1))
        | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
        | (1ULL << (Gauss200Parser::ONLY_GS - 1))
        | (1ULL << (Gauss200Parser::ON_GS - 1))
        | (1ULL << (Gauss200Parser::ORDER_GS - 1))
        | (1ULL << (Gauss200Parser::OR_GS - 1))
        | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
        | (1ULL << (Gauss200Parser::REJECT_GS - 65))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
        | (1ULL << (Gauss200Parser::RETURN_GS - 65))
        | (1ULL << (Gauss200Parser::SELECT_GS - 65))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
        | (1ULL << (Gauss200Parser::SOME_GS - 65))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
        | (1ULL << (Gauss200Parser::THEN_GS - 65))
        | (1ULL << (Gauss200Parser::TO_GS - 65))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
        | (1ULL << (Gauss200Parser::TRUE_GS - 65))
        | (1ULL << (Gauss200Parser::UNION_GS - 65))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
        | (1ULL << (Gauss200Parser::USER_GS - 65))
        | (1ULL << (Gauss200Parser::USING_GS - 65))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
        | (1ULL << (Gauss200Parser::WHEN_GS - 65))
        | (1ULL << (Gauss200Parser::WHERE_GS - 65))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
        | (1ULL << (Gauss200Parser::WITH_GS - 65))
        | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
        | (1ULL << (Gauss200Parser::BINARY_GS - 65))
        | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
        | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
        | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
        | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
        | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
        | (1ULL << (Gauss200Parser::INNER_GS - 65))
        | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
        | (1ULL << (Gauss200Parser::JOIN_GS - 65))
        | (1ULL << (Gauss200Parser::LEFT_GS - 65))
        | (1ULL << (Gauss200Parser::LIKE_GS - 65))
        | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
        | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
        | (1ULL << (Gauss200Parser::OUTER_GS - 65))
        | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
        | (1ULL << (Gauss200Parser::OVER_GS - 65))
        | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
        | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
        | (1ULL << (Gauss200Parser::ABORT_GS - 65))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
        | (1ULL << (Gauss200Parser::ACTION_GS - 65))
        | (1ULL << (Gauss200Parser::ADD_GS - 65))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
        | (1ULL << (Gauss200Parser::AFTER_GS - 65))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
        | (1ULL << (Gauss200Parser::ALSO_GS - 65))
        | (1ULL << (Gauss200Parser::ALTER_GS - 65))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
        | (1ULL << (Gauss200Parser::APP_GS - 65))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
        | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::AT_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
        | (1ULL << (Gauss200Parser::BLOB_GS - 129))
        | (1ULL << (Gauss200Parser::BY_GS - 129))
        | (1ULL << (Gauss200Parser::CACHE_GS - 129))
        | (1ULL << (Gauss200Parser::CALLED_GS - 129))
        | (1ULL << (Gauss200Parser::CALL_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
        | (1ULL << (Gauss200Parser::CLASS_GS - 129))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
        | (1ULL << (Gauss200Parser::CLOB_GS - 129))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
        | (1ULL << (Gauss200Parser::COPY_GS - 129))
        | (1ULL << (Gauss200Parser::COST_GS - 129))
        | (1ULL << (Gauss200Parser::CSV_GS - 129))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
        | (1ULL << (Gauss200Parser::DATA_GS - 129))
        | (1ULL << (Gauss200Parser::DAY_GS - 129))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
        | (1ULL << (Gauss200Parser::DELETE_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
        | (1ULL << (Gauss200Parser::DELTA_GS - 129))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
        | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
        | (1ULL << (Gauss200Parser::DROP_GS - 193))
        | (1ULL << (Gauss200Parser::EACH_GS - 193))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
        | (1ULL << (Gauss200Parser::ENUM_GS - 193))
        | (1ULL << (Gauss200Parser::EOL_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
        | (1ULL << (Gauss200Parser::EVERY_GS - 193))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
        | (1ULL << (Gauss200Parser::FIRST_GS - 193))
        | (1ULL << (Gauss200Parser::FIXED_GS - 193))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
        | (1ULL << (Gauss200Parser::FORCE_GS - 193))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
        | (1ULL << (Gauss200Parser::HEADER_GS - 193))
        | (1ULL << (Gauss200Parser::HOLD_GS - 193))
        | (1ULL << (Gauss200Parser::HOUR_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
        | (1ULL << (Gauss200Parser::IF_GS - 193))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
        | (1ULL << (Gauss200Parser::INDEX_GS - 193))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
        | (1ULL << (Gauss200Parser::INLINE_GS - 193))
        | (1ULL << (Gauss200Parser::INPUT_GS - 193))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
        | (1ULL << (Gauss200Parser::INSERT_GS - 193))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
        | (1ULL << (Gauss200Parser::KEY_GS - 193))
        | (1ULL << (Gauss200Parser::LABEL_GS - 193))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
        | (1ULL << (Gauss200Parser::LARGE_GS - 193))
        | (1ULL << (Gauss200Parser::LAST_GS - 193))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
        | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
        | (1ULL << (Gauss200Parser::LOAD_GS - 257))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
        | (1ULL << (Gauss200Parser::LOCK_GS - 257))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::LOG_GS - 257))
        | (1ULL << (Gauss200Parser::LOOP_GS - 257))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
        | (1ULL << (Gauss200Parser::MATCH_GS - 257))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
        | (1ULL << (Gauss200Parser::MERGE_GS - 257))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::MODE_GS - 257))
        | (1ULL << (Gauss200Parser::MONTH_GS - 257))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
        | (1ULL << (Gauss200Parser::MOVE_GS - 257))
        | (1ULL << (Gauss200Parser::NAMES_GS - 257))
        | (1ULL << (Gauss200Parser::NAME_GS - 257))
        | (1ULL << (Gauss200Parser::NEXT_GS - 257))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
        | (1ULL << (Gauss200Parser::NODE_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
        | (1ULL << (Gauss200Parser::NO_GS - 257))
        | (1ULL << (Gauss200Parser::NULLS_GS - 257))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
        | (1ULL << (Gauss200Parser::OFF_GS - 257))
        | (1ULL << (Gauss200Parser::OF_GS - 257))
        | (1ULL << (Gauss200Parser::OIDS_GS - 257))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
        | (1ULL << (Gauss200Parser::OPTION_GS - 257))
        | (1ULL << (Gauss200Parser::OWNED_GS - 257))
        | (1ULL << (Gauss200Parser::OWNER_GS - 257))
        | (1ULL << (Gauss200Parser::PARSER_GS - 257))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
        | (1ULL << (Gauss200Parser::PASSING_GS - 257))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
        | (1ULL << (Gauss200Parser::PER_GS - 257))
        | (1ULL << (Gauss200Parser::PLANS_GS - 257))
        | (1ULL << (Gauss200Parser::POOL_GS - 257))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
        | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
        | (1ULL << (Gauss200Parser::QUERY_GS - 321))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RANGE_GS - 321))
        | (1ULL << (Gauss200Parser::RAW_GS - 321))
        | (1ULL << (Gauss200Parser::READ_GS - 321))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
        | (1ULL << (Gauss200Parser::REF_GS - 321))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RENAME_GS - 321))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
        | (1ULL << (Gauss200Parser::RESET_GS - 321))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
        | (1ULL << (Gauss200Parser::RESTART_GS - 321))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
        | (1ULL << (Gauss200Parser::REUSE_GS - 321))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
        | (1ULL << (Gauss200Parser::ROWS_GS - 321))
        | (1ULL << (Gauss200Parser::RULE_GS - 321))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
        | (1ULL << (Gauss200Parser::SECOND_GS - 321))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
        | (1ULL << (Gauss200Parser::SERVER_GS - 321))
        | (1ULL << (Gauss200Parser::SESSION_GS - 321))
        | (1ULL << (Gauss200Parser::SET_GS - 321))
        | (1ULL << (Gauss200Parser::SHARE_GS - 321))
        | (1ULL << (Gauss200Parser::SHOW_GS - 321))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
        | (1ULL << (Gauss200Parser::SIZE_GS - 321))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
        | (1ULL << (Gauss200Parser::STABLE_GS - 321))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
        | (1ULL << (Gauss200Parser::START_GS - 321))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
        | (1ULL << (Gauss200Parser::STDIN_GS - 321))
        | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
        | (1ULL << (Gauss200Parser::STORE_GS - 385))
        | (1ULL << (Gauss200Parser::STRICT_GS - 385))
        | (1ULL << (Gauss200Parser::STRIP_GS - 385))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
        | (1ULL << (Gauss200Parser::SYSID_GS - 385))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::TABLES_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
        | (1ULL << (Gauss200Parser::TEMP_GS - 385))
        | (1ULL << (Gauss200Parser::TEXT_GS - 385))
        | (1ULL << (Gauss200Parser::THAN_GS - 385))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
        | (1ULL << (Gauss200Parser::TYPES_GS - 385))
        | (1ULL << (Gauss200Parser::TYPE_GS - 385))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
        | (1ULL << (Gauss200Parser::VALID_GS - 385))
        | (1ULL << (Gauss200Parser::VALUE_GS - 385))
        | (1ULL << (Gauss200Parser::VARYING_GS - 385))
        | (1ULL << (Gauss200Parser::VERSION_GS - 385))
        | (1ULL << (Gauss200Parser::VIEW_GS - 385))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
        | (1ULL << (Gauss200Parser::WORK_GS - 385))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
        | (1ULL << (Gauss200Parser::WRITE_GS - 385))
        | (1ULL << (Gauss200Parser::XML_GS - 385))
        | (1ULL << (Gauss200Parser::YEAR_GS - 385))
        | (1ULL << (Gauss200Parser::YES_GS - 385))
        | (1ULL << (Gauss200Parser::ZONE_GS - 385))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
        | (1ULL << (Gauss200Parser::BIT_GS - 385))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
        | (1ULL << (Gauss200Parser::CHAR_GS - 385))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
        | (1ULL << (Gauss200Parser::DATE_GS - 385))
        | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
        | (1ULL << (Gauss200Parser::DEC_GS - 449))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
        | (1ULL << (Gauss200Parser::INOUT_GS - 449))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
        | (1ULL << (Gauss200Parser::INT_GS - 449))
        | (1ULL << (Gauss200Parser::LEAST_GS - 449))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::NONE_GS - 449))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::NVL_GS - 449))
        | (1ULL << (Gauss200Parser::OUT_GS - 449))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
        | (1ULL << (Gauss200Parser::POSITION_GS - 449))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
        | (1ULL << (Gauss200Parser::REAL_GS - 449))
        | (1ULL << (Gauss200Parser::ROW_GS - 449))
        | (1ULL << (Gauss200Parser::SETOF_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
        | (1ULL << (Gauss200Parser::TIME_GS - 449))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
        | (1ULL << (Gauss200Parser::TREAT_GS - 449))
        | (1ULL << (Gauss200Parser::TRIM_GS - 449))
        | (1ULL << (Gauss200Parser::VALUES_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
        | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
        | (1ULL << (Gauss200Parser::POINT_GS - 449))
        | (1ULL << (Gauss200Parser::LSEG_GS - 449))
        | (1ULL << (Gauss200Parser::BOX_GS - 449))
        | (1ULL << (Gauss200Parser::PATH_GS - 449))
        | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
        | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
        | (1ULL << (Gauss200Parser::CIDR_GS - 449))
        | (1ULL << (Gauss200Parser::INET_GS - 449))
        | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
        | (1ULL << (Gauss200Parser::USAGE_GS - 516))
        | (1ULL << (Gauss200Parser::SPACE_GS - 516))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::LEFT_PAREN - 601))
        | (1ULL << (Gauss200Parser::PLUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::MINUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::AT_SIGN - 601))
        | (1ULL << (Gauss200Parser::QUESTION_MARK - 601))
        | (1ULL << (Gauss200Parser::TILDE_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::EXCLAMATION_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::POUND_SIGN - 601))
        | (1ULL << (Gauss200Parser::BAR - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601))
        | (1ULL << (Gauss200Parser::ICONST - 601))
        | (1ULL << (Gauss200Parser::FCONST - 601))
        | (1ULL << (Gauss200Parser::BCONST - 601))
        | (1ULL << (Gauss200Parser::PARAM - 601)))) != 0)) {
        setState(6469);
        position_list();
      }
      setState(6472);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(6473);
      match(Gauss200Parser::SUBSTRING_GS);
      setState(6474);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
        | (1ULL << (Gauss200Parser::AND_GS - 1))
        | (1ULL << (Gauss200Parser::ANY_GS - 1))
        | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
        | (1ULL << (Gauss200Parser::ASC_GS - 1))
        | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
        | (1ULL << (Gauss200Parser::AS_GS - 1))
        | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
        | (1ULL << (Gauss200Parser::BOTH_GS - 1))
        | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
        | (1ULL << (Gauss200Parser::CASE_GS - 1))
        | (1ULL << (Gauss200Parser::CAST_GS - 1))
        | (1ULL << (Gauss200Parser::CHECK_GS - 1))
        | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
        | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
        | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
        | (1ULL << (Gauss200Parser::CREATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
        | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
        | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
        | (1ULL << (Gauss200Parser::DESC_GS - 1))
        | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
        | (1ULL << (Gauss200Parser::DO_GS - 1))
        | (1ULL << (Gauss200Parser::ELSE_GS - 1))
        | (1ULL << (Gauss200Parser::END_GS - 1))
        | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
        | (1ULL << (Gauss200Parser::FALSE_GS - 1))
        | (1ULL << (Gauss200Parser::FETCH_GS - 1))
        | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
        | (1ULL << (Gauss200Parser::FOR_GS - 1))
        | (1ULL << (Gauss200Parser::FROM_GS - 1))
        | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
        | (1ULL << (Gauss200Parser::GRANT_GS - 1))
        | (1ULL << (Gauss200Parser::GROUP_GS - 1))
        | (1ULL << (Gauss200Parser::HAVING_GS - 1))
        | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
        | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
        | (1ULL << (Gauss200Parser::INTO_GS - 1))
        | (1ULL << (Gauss200Parser::IN_GS - 1))
        | (1ULL << (Gauss200Parser::IS_GS - 1))
        | (1ULL << (Gauss200Parser::LEADING_GS - 1))
        | (1ULL << (Gauss200Parser::LESS_GS - 1))
        | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
        | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
        | (1ULL << (Gauss200Parser::MINUS_GS - 1))
        | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
        | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
        | (1ULL << (Gauss200Parser::NOT_GS - 1))
        | (1ULL << (Gauss200Parser::NULL_GS - 1))
        | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
        | (1ULL << (Gauss200Parser::ONLY_GS - 1))
        | (1ULL << (Gauss200Parser::ON_GS - 1))
        | (1ULL << (Gauss200Parser::ORDER_GS - 1))
        | (1ULL << (Gauss200Parser::OR_GS - 1))
        | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
        | (1ULL << (Gauss200Parser::REJECT_GS - 65))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
        | (1ULL << (Gauss200Parser::RETURN_GS - 65))
        | (1ULL << (Gauss200Parser::SELECT_GS - 65))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
        | (1ULL << (Gauss200Parser::SOME_GS - 65))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
        | (1ULL << (Gauss200Parser::THEN_GS - 65))
        | (1ULL << (Gauss200Parser::TO_GS - 65))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
        | (1ULL << (Gauss200Parser::TRUE_GS - 65))
        | (1ULL << (Gauss200Parser::UNION_GS - 65))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
        | (1ULL << (Gauss200Parser::USER_GS - 65))
        | (1ULL << (Gauss200Parser::USING_GS - 65))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
        | (1ULL << (Gauss200Parser::WHEN_GS - 65))
        | (1ULL << (Gauss200Parser::WHERE_GS - 65))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
        | (1ULL << (Gauss200Parser::WITH_GS - 65))
        | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
        | (1ULL << (Gauss200Parser::BINARY_GS - 65))
        | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
        | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
        | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
        | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
        | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
        | (1ULL << (Gauss200Parser::INNER_GS - 65))
        | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
        | (1ULL << (Gauss200Parser::JOIN_GS - 65))
        | (1ULL << (Gauss200Parser::LEFT_GS - 65))
        | (1ULL << (Gauss200Parser::LIKE_GS - 65))
        | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
        | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
        | (1ULL << (Gauss200Parser::OUTER_GS - 65))
        | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
        | (1ULL << (Gauss200Parser::OVER_GS - 65))
        | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
        | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
        | (1ULL << (Gauss200Parser::ABORT_GS - 65))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
        | (1ULL << (Gauss200Parser::ACTION_GS - 65))
        | (1ULL << (Gauss200Parser::ADD_GS - 65))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
        | (1ULL << (Gauss200Parser::AFTER_GS - 65))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
        | (1ULL << (Gauss200Parser::ALSO_GS - 65))
        | (1ULL << (Gauss200Parser::ALTER_GS - 65))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
        | (1ULL << (Gauss200Parser::APP_GS - 65))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
        | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::AT_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
        | (1ULL << (Gauss200Parser::BLOB_GS - 129))
        | (1ULL << (Gauss200Parser::BY_GS - 129))
        | (1ULL << (Gauss200Parser::CACHE_GS - 129))
        | (1ULL << (Gauss200Parser::CALLED_GS - 129))
        | (1ULL << (Gauss200Parser::CALL_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
        | (1ULL << (Gauss200Parser::CLASS_GS - 129))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
        | (1ULL << (Gauss200Parser::CLOB_GS - 129))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
        | (1ULL << (Gauss200Parser::COPY_GS - 129))
        | (1ULL << (Gauss200Parser::COST_GS - 129))
        | (1ULL << (Gauss200Parser::CSV_GS - 129))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
        | (1ULL << (Gauss200Parser::DATA_GS - 129))
        | (1ULL << (Gauss200Parser::DAY_GS - 129))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
        | (1ULL << (Gauss200Parser::DELETE_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
        | (1ULL << (Gauss200Parser::DELTA_GS - 129))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
        | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
        | (1ULL << (Gauss200Parser::DROP_GS - 193))
        | (1ULL << (Gauss200Parser::EACH_GS - 193))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
        | (1ULL << (Gauss200Parser::ENUM_GS - 193))
        | (1ULL << (Gauss200Parser::EOL_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
        | (1ULL << (Gauss200Parser::EVERY_GS - 193))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
        | (1ULL << (Gauss200Parser::FIRST_GS - 193))
        | (1ULL << (Gauss200Parser::FIXED_GS - 193))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
        | (1ULL << (Gauss200Parser::FORCE_GS - 193))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
        | (1ULL << (Gauss200Parser::HEADER_GS - 193))
        | (1ULL << (Gauss200Parser::HOLD_GS - 193))
        | (1ULL << (Gauss200Parser::HOUR_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
        | (1ULL << (Gauss200Parser::IF_GS - 193))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
        | (1ULL << (Gauss200Parser::INDEX_GS - 193))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
        | (1ULL << (Gauss200Parser::INLINE_GS - 193))
        | (1ULL << (Gauss200Parser::INPUT_GS - 193))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
        | (1ULL << (Gauss200Parser::INSERT_GS - 193))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
        | (1ULL << (Gauss200Parser::KEY_GS - 193))
        | (1ULL << (Gauss200Parser::LABEL_GS - 193))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
        | (1ULL << (Gauss200Parser::LARGE_GS - 193))
        | (1ULL << (Gauss200Parser::LAST_GS - 193))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
        | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
        | (1ULL << (Gauss200Parser::LOAD_GS - 257))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
        | (1ULL << (Gauss200Parser::LOCK_GS - 257))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::LOG_GS - 257))
        | (1ULL << (Gauss200Parser::LOOP_GS - 257))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
        | (1ULL << (Gauss200Parser::MATCH_GS - 257))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
        | (1ULL << (Gauss200Parser::MERGE_GS - 257))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::MODE_GS - 257))
        | (1ULL << (Gauss200Parser::MONTH_GS - 257))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
        | (1ULL << (Gauss200Parser::MOVE_GS - 257))
        | (1ULL << (Gauss200Parser::NAMES_GS - 257))
        | (1ULL << (Gauss200Parser::NAME_GS - 257))
        | (1ULL << (Gauss200Parser::NEXT_GS - 257))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
        | (1ULL << (Gauss200Parser::NODE_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
        | (1ULL << (Gauss200Parser::NO_GS - 257))
        | (1ULL << (Gauss200Parser::NULLS_GS - 257))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
        | (1ULL << (Gauss200Parser::OFF_GS - 257))
        | (1ULL << (Gauss200Parser::OF_GS - 257))
        | (1ULL << (Gauss200Parser::OIDS_GS - 257))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
        | (1ULL << (Gauss200Parser::OPTION_GS - 257))
        | (1ULL << (Gauss200Parser::OWNED_GS - 257))
        | (1ULL << (Gauss200Parser::OWNER_GS - 257))
        | (1ULL << (Gauss200Parser::PARSER_GS - 257))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
        | (1ULL << (Gauss200Parser::PASSING_GS - 257))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
        | (1ULL << (Gauss200Parser::PER_GS - 257))
        | (1ULL << (Gauss200Parser::PLANS_GS - 257))
        | (1ULL << (Gauss200Parser::POOL_GS - 257))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
        | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
        | (1ULL << (Gauss200Parser::QUERY_GS - 321))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RANGE_GS - 321))
        | (1ULL << (Gauss200Parser::RAW_GS - 321))
        | (1ULL << (Gauss200Parser::READ_GS - 321))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
        | (1ULL << (Gauss200Parser::REF_GS - 321))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RENAME_GS - 321))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
        | (1ULL << (Gauss200Parser::RESET_GS - 321))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
        | (1ULL << (Gauss200Parser::RESTART_GS - 321))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
        | (1ULL << (Gauss200Parser::REUSE_GS - 321))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
        | (1ULL << (Gauss200Parser::ROWS_GS - 321))
        | (1ULL << (Gauss200Parser::RULE_GS - 321))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
        | (1ULL << (Gauss200Parser::SECOND_GS - 321))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
        | (1ULL << (Gauss200Parser::SERVER_GS - 321))
        | (1ULL << (Gauss200Parser::SESSION_GS - 321))
        | (1ULL << (Gauss200Parser::SET_GS - 321))
        | (1ULL << (Gauss200Parser::SHARE_GS - 321))
        | (1ULL << (Gauss200Parser::SHOW_GS - 321))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
        | (1ULL << (Gauss200Parser::SIZE_GS - 321))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
        | (1ULL << (Gauss200Parser::STABLE_GS - 321))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
        | (1ULL << (Gauss200Parser::START_GS - 321))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
        | (1ULL << (Gauss200Parser::STDIN_GS - 321))
        | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
        | (1ULL << (Gauss200Parser::STORE_GS - 385))
        | (1ULL << (Gauss200Parser::STRICT_GS - 385))
        | (1ULL << (Gauss200Parser::STRIP_GS - 385))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
        | (1ULL << (Gauss200Parser::SYSID_GS - 385))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::TABLES_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
        | (1ULL << (Gauss200Parser::TEMP_GS - 385))
        | (1ULL << (Gauss200Parser::TEXT_GS - 385))
        | (1ULL << (Gauss200Parser::THAN_GS - 385))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
        | (1ULL << (Gauss200Parser::TYPES_GS - 385))
        | (1ULL << (Gauss200Parser::TYPE_GS - 385))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
        | (1ULL << (Gauss200Parser::VALID_GS - 385))
        | (1ULL << (Gauss200Parser::VALUE_GS - 385))
        | (1ULL << (Gauss200Parser::VARYING_GS - 385))
        | (1ULL << (Gauss200Parser::VERSION_GS - 385))
        | (1ULL << (Gauss200Parser::VIEW_GS - 385))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
        | (1ULL << (Gauss200Parser::WORK_GS - 385))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
        | (1ULL << (Gauss200Parser::WRITE_GS - 385))
        | (1ULL << (Gauss200Parser::XML_GS - 385))
        | (1ULL << (Gauss200Parser::YEAR_GS - 385))
        | (1ULL << (Gauss200Parser::YES_GS - 385))
        | (1ULL << (Gauss200Parser::ZONE_GS - 385))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
        | (1ULL << (Gauss200Parser::BIT_GS - 385))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
        | (1ULL << (Gauss200Parser::CHAR_GS - 385))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
        | (1ULL << (Gauss200Parser::DATE_GS - 385))
        | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
        | (1ULL << (Gauss200Parser::DEC_GS - 449))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
        | (1ULL << (Gauss200Parser::INOUT_GS - 449))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
        | (1ULL << (Gauss200Parser::INT_GS - 449))
        | (1ULL << (Gauss200Parser::LEAST_GS - 449))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::NONE_GS - 449))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::NVL_GS - 449))
        | (1ULL << (Gauss200Parser::OUT_GS - 449))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
        | (1ULL << (Gauss200Parser::POSITION_GS - 449))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
        | (1ULL << (Gauss200Parser::REAL_GS - 449))
        | (1ULL << (Gauss200Parser::ROW_GS - 449))
        | (1ULL << (Gauss200Parser::SETOF_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
        | (1ULL << (Gauss200Parser::TIME_GS - 449))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
        | (1ULL << (Gauss200Parser::TREAT_GS - 449))
        | (1ULL << (Gauss200Parser::TRIM_GS - 449))
        | (1ULL << (Gauss200Parser::VALUES_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
        | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
        | (1ULL << (Gauss200Parser::POINT_GS - 449))
        | (1ULL << (Gauss200Parser::LSEG_GS - 449))
        | (1ULL << (Gauss200Parser::BOX_GS - 449))
        | (1ULL << (Gauss200Parser::PATH_GS - 449))
        | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
        | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
        | (1ULL << (Gauss200Parser::CIDR_GS - 449))
        | (1ULL << (Gauss200Parser::INET_GS - 449))
        | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
        | (1ULL << (Gauss200Parser::USAGE_GS - 516))
        | (1ULL << (Gauss200Parser::SPACE_GS - 516))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::LEFT_PAREN - 601))
        | (1ULL << (Gauss200Parser::PLUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::MINUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::AT_SIGN - 601))
        | (1ULL << (Gauss200Parser::QUESTION_MARK - 601))
        | (1ULL << (Gauss200Parser::TILDE_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::EXCLAMATION_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::POUND_SIGN - 601))
        | (1ULL << (Gauss200Parser::BAR - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601))
        | (1ULL << (Gauss200Parser::ICONST - 601))
        | (1ULL << (Gauss200Parser::FCONST - 601))
        | (1ULL << (Gauss200Parser::BCONST - 601))
        | (1ULL << (Gauss200Parser::PARAM - 601)))) != 0)) {
        setState(6475);
        substr_list();
      }
      setState(6478);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(6479);
      match(Gauss200Parser::TREAT_GS);
      setState(6480);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6481);
      expression();
      setState(6482);
      match(Gauss200Parser::AS_GS);
      setState(6483);
      typename_gs();
      setState(6484);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(6486);
      match(Gauss200Parser::TRIM_GS);
      setState(6487);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6489);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 798, _ctx)) {
      case 1: {
        setState(6488);
        _la = _input->LA(1);
        if (!(_la == Gauss200Parser::BOTH_GS

        || _la == Gauss200Parser::LEADING_GS || _la == Gauss200Parser::TRAILING_GS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(6491);
      trim_list();
      setState(6492);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(6494);
      match(Gauss200Parser::NULLIF_GS);
      setState(6495);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6496);
      expression();
      setState(6497);
      match(Gauss200Parser::COMMA);
      setState(6498);
      expression();
      setState(6499);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(6501);
      match(Gauss200Parser::COALESCE_GS);
      setState(6502);
      paren_expr_list();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(6503);
      match(Gauss200Parser::GREATEST_GS);
      setState(6504);
      paren_expr_list();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(6505);
      match(Gauss200Parser::LEAST_GS);
      setState(6506);
      paren_expr_list();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(6507);
      match(Gauss200Parser::DECODE_GS);
      setState(6508);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6509);
      expression();
      setState(6510);
      match(Gauss200Parser::COMMA);
      setState(6511);
      expression();
      setState(6512);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(6514);
      match(Gauss200Parser::XMLCONCAT_GS);
      setState(6515);
      paren_expr_list();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(6516);
      match(Gauss200Parser::XMLELEMENT_GS);
      setState(6517);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6518);
      match(Gauss200Parser::NAME_GS);
      setState(6519);
      col_label();
      setState(6521);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::COMMA) {
        setState(6520);
        xmlelement_part();
      }
      setState(6523);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(6525);
      match(Gauss200Parser::XMLEXISTS_GS);
      setState(6526);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6527);
      expression();
      setState(6531);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::PASSING_GS: {
          setState(6528);
          xmlexists_argument();
          break;
        }

        case Gauss200Parser::COMMA: {
          setState(6529);
          match(Gauss200Parser::COMMA);
          setState(6530);
          expression();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(6533);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(6535);
      match(Gauss200Parser::XMLFOREST_GS);
      setState(6536);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6537);
      xml_attribute_list();
      setState(6538);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(6540);
      match(Gauss200Parser::XMLPARSE_GS);
      setState(6541);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6542);
      document_or_content();
      setState(6543);
      expression();
      setState(6545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::PRESERVE_GS || _la == Gauss200Parser::STRIP_GS) {
        setState(6544);
        xml_whitespace_option();
      }
      setState(6547);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(6549);
      match(Gauss200Parser::XMLPI_GS);
      setState(6550);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6551);
      match(Gauss200Parser::NAME_GS);
      setState(6552);
      col_label();
      setState(6555);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::COMMA) {
        setState(6553);
        match(Gauss200Parser::COMMA);
        setState(6554);
        expression();
      }
      setState(6557);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(6559);
      match(Gauss200Parser::XMLROOT_GS);
      setState(6560);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6561);
      expression();
      setState(6562);
      match(Gauss200Parser::COMMA);
      setState(6563);
      xml_root_version();
      setState(6565);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::COMMA) {
        setState(6564);
        opt_xml_root_standalone();
      }
      setState(6567);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(6569);
      match(Gauss200Parser::XMLSERIALIZE_GS);
      setState(6570);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6571);
      document_or_content();
      setState(6572);
      expression();
      setState(6573);
      match(Gauss200Parser::AS_GS);
      setState(6574);
      typename_gs();
      setState(6575);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_labelContext ------------------------------------------------------------------

Gauss200Parser::Col_labelContext::Col_labelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Col_labelContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Col_labelContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::Col_labelContext::getRuleIndex() const {
  return Gauss200Parser::RuleCol_label;
}

void Gauss200Parser::Col_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_label(this);
}

void Gauss200Parser::Col_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_label(this);
}


antlrcpp::Any Gauss200Parser::Col_labelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCol_label(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Col_labelContext* Gauss200Parser::col_label() {
  Col_labelContext *_localctx = _tracker.createInstance<Col_labelContext>(_ctx, getState());
  enterRule(_localctx, 998, Gauss200Parser::RuleCol_label);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6581);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 805, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6579);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6580);
      match(Gauss200Parser::SCONST);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xmlelement_partContext ------------------------------------------------------------------

Gauss200Parser::Xmlelement_partContext::Xmlelement_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Gauss200Parser::Xmlelement_partContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Xmlelement_partContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}

Gauss200Parser::Xml_attributesContext* Gauss200Parser::Xmlelement_partContext::xml_attributes() {
  return getRuleContext<Gauss200Parser::Xml_attributesContext>(0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Xmlelement_partContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}


size_t Gauss200Parser::Xmlelement_partContext::getRuleIndex() const {
  return Gauss200Parser::RuleXmlelement_part;
}

void Gauss200Parser::Xmlelement_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXmlelement_part(this);
}

void Gauss200Parser::Xmlelement_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXmlelement_part(this);
}


antlrcpp::Any Gauss200Parser::Xmlelement_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitXmlelement_part(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Xmlelement_partContext* Gauss200Parser::xmlelement_part() {
  Xmlelement_partContext *_localctx = _tracker.createInstance<Xmlelement_partContext>(_ctx, getState());
  enterRule(_localctx, 1000, Gauss200Parser::RuleXmlelement_part);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6583);
    match(Gauss200Parser::COMMA);
    setState(6590);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 807, _ctx)) {
    case 1: {
      setState(6584);
      xml_attributes();
      setState(6587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Gauss200Parser::COMMA) {
        setState(6585);
        match(Gauss200Parser::COMMA);
        setState(6586);
        expression_list();
      }
      break;
    }

    case 2: {
      setState(6589);
      expression_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xml_root_versionContext ------------------------------------------------------------------

Gauss200Parser::Xml_root_versionContext::Xml_root_versionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Xml_root_versionContext::VERSION_GS() {
  return getToken(Gauss200Parser::VERSION_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Xml_root_versionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Xml_root_versionContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Xml_root_versionContext::VALUE_GS() {
  return getToken(Gauss200Parser::VALUE_GS, 0);
}


size_t Gauss200Parser::Xml_root_versionContext::getRuleIndex() const {
  return Gauss200Parser::RuleXml_root_version;
}

void Gauss200Parser::Xml_root_versionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXml_root_version(this);
}

void Gauss200Parser::Xml_root_versionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXml_root_version(this);
}


antlrcpp::Any Gauss200Parser::Xml_root_versionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitXml_root_version(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Xml_root_versionContext* Gauss200Parser::xml_root_version() {
  Xml_root_versionContext *_localctx = _tracker.createInstance<Xml_root_versionContext>(_ctx, getState());
  enterRule(_localctx, 1002, Gauss200Parser::RuleXml_root_version);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6597);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 808, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6592);
      match(Gauss200Parser::VERSION_GS);
      setState(6593);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6594);
      match(Gauss200Parser::VERSION_GS);
      setState(6595);
      match(Gauss200Parser::NO_GS);
      setState(6596);
      match(Gauss200Parser::VALUE_GS);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Opt_xml_root_standaloneContext ------------------------------------------------------------------

Gauss200Parser::Opt_xml_root_standaloneContext::Opt_xml_root_standaloneContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Opt_xml_root_standaloneContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

tree::TerminalNode* Gauss200Parser::Opt_xml_root_standaloneContext::STANDALONE_GS() {
  return getToken(Gauss200Parser::STANDALONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Opt_xml_root_standaloneContext::YES_GS() {
  return getToken(Gauss200Parser::YES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Opt_xml_root_standaloneContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Opt_xml_root_standaloneContext::VALUE_GS() {
  return getToken(Gauss200Parser::VALUE_GS, 0);
}


size_t Gauss200Parser::Opt_xml_root_standaloneContext::getRuleIndex() const {
  return Gauss200Parser::RuleOpt_xml_root_standalone;
}

void Gauss200Parser::Opt_xml_root_standaloneContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpt_xml_root_standalone(this);
}

void Gauss200Parser::Opt_xml_root_standaloneContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpt_xml_root_standalone(this);
}


antlrcpp::Any Gauss200Parser::Opt_xml_root_standaloneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOpt_xml_root_standalone(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Opt_xml_root_standaloneContext* Gauss200Parser::opt_xml_root_standalone() {
  Opt_xml_root_standaloneContext *_localctx = _tracker.createInstance<Opt_xml_root_standaloneContext>(_ctx, getState());
  enterRule(_localctx, 1004, Gauss200Parser::RuleOpt_xml_root_standalone);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6599);
    match(Gauss200Parser::COMMA);
    setState(6600);
    match(Gauss200Parser::STANDALONE_GS);
    setState(6606);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::YES_GS: {
        setState(6601);
        match(Gauss200Parser::YES_GS);
        break;
      }

      case Gauss200Parser::NO_GS: {
        setState(6602);
        match(Gauss200Parser::NO_GS);
        setState(6604);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Gauss200Parser::VALUE_GS) {
          setState(6603);
          match(Gauss200Parser::VALUE_GS);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xml_attributesContext ------------------------------------------------------------------

Gauss200Parser::Xml_attributesContext::Xml_attributesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Xml_attributesContext::XMLATTRIBUTES_GS() {
  return getToken(Gauss200Parser::XMLATTRIBUTES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Xml_attributesContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Xml_attribute_listContext* Gauss200Parser::Xml_attributesContext::xml_attribute_list() {
  return getRuleContext<Gauss200Parser::Xml_attribute_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Xml_attributesContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}


size_t Gauss200Parser::Xml_attributesContext::getRuleIndex() const {
  return Gauss200Parser::RuleXml_attributes;
}

void Gauss200Parser::Xml_attributesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXml_attributes(this);
}

void Gauss200Parser::Xml_attributesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXml_attributes(this);
}


antlrcpp::Any Gauss200Parser::Xml_attributesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitXml_attributes(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Xml_attributesContext* Gauss200Parser::xml_attributes() {
  Xml_attributesContext *_localctx = _tracker.createInstance<Xml_attributesContext>(_ctx, getState());
  enterRule(_localctx, 1006, Gauss200Parser::RuleXml_attributes);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6608);
    match(Gauss200Parser::XMLATTRIBUTES_GS);
    setState(6609);
    match(Gauss200Parser::LEFT_PAREN);
    setState(6610);
    xml_attribute_list();
    setState(6611);
    match(Gauss200Parser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xml_attribute_listContext ------------------------------------------------------------------

Gauss200Parser::Xml_attribute_listContext::Xml_attribute_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Xml_attribute_elContext *> Gauss200Parser::Xml_attribute_listContext::xml_attribute_el() {
  return getRuleContexts<Gauss200Parser::Xml_attribute_elContext>();
}

Gauss200Parser::Xml_attribute_elContext* Gauss200Parser::Xml_attribute_listContext::xml_attribute_el(size_t i) {
  return getRuleContext<Gauss200Parser::Xml_attribute_elContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Xml_attribute_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Xml_attribute_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Xml_attribute_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleXml_attribute_list;
}

void Gauss200Parser::Xml_attribute_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXml_attribute_list(this);
}

void Gauss200Parser::Xml_attribute_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXml_attribute_list(this);
}


antlrcpp::Any Gauss200Parser::Xml_attribute_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitXml_attribute_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Xml_attribute_listContext* Gauss200Parser::xml_attribute_list() {
  Xml_attribute_listContext *_localctx = _tracker.createInstance<Xml_attribute_listContext>(_ctx, getState());
  enterRule(_localctx, 1008, Gauss200Parser::RuleXml_attribute_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6613);
    xml_attribute_el();
    setState(6618);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(6614);
      match(Gauss200Parser::COMMA);
      setState(6615);
      xml_attribute_el();
      setState(6620);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xml_attribute_elContext ------------------------------------------------------------------

Gauss200Parser::Xml_attribute_elContext::Xml_attribute_elContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Xml_attribute_elContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

tree::TerminalNode* Gauss200Parser::Xml_attribute_elContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

Gauss200Parser::Col_labelContext* Gauss200Parser::Xml_attribute_elContext::col_label() {
  return getRuleContext<Gauss200Parser::Col_labelContext>(0);
}


size_t Gauss200Parser::Xml_attribute_elContext::getRuleIndex() const {
  return Gauss200Parser::RuleXml_attribute_el;
}

void Gauss200Parser::Xml_attribute_elContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXml_attribute_el(this);
}

void Gauss200Parser::Xml_attribute_elContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXml_attribute_el(this);
}


antlrcpp::Any Gauss200Parser::Xml_attribute_elContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitXml_attribute_el(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Xml_attribute_elContext* Gauss200Parser::xml_attribute_el() {
  Xml_attribute_elContext *_localctx = _tracker.createInstance<Xml_attribute_elContext>(_ctx, getState());
  enterRule(_localctx, 1010, Gauss200Parser::RuleXml_attribute_el);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6621);
    expression();
    setState(6624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::AS_GS) {
      setState(6622);
      match(Gauss200Parser::AS_GS);
      setState(6623);
      col_label();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Document_or_contentContext ------------------------------------------------------------------

Gauss200Parser::Document_or_contentContext::Document_or_contentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Document_or_contentContext::DOCUMENT_GS() {
  return getToken(Gauss200Parser::DOCUMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Document_or_contentContext::CONTENT_GS() {
  return getToken(Gauss200Parser::CONTENT_GS, 0);
}


size_t Gauss200Parser::Document_or_contentContext::getRuleIndex() const {
  return Gauss200Parser::RuleDocument_or_content;
}

void Gauss200Parser::Document_or_contentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDocument_or_content(this);
}

void Gauss200Parser::Document_or_contentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDocument_or_content(this);
}


antlrcpp::Any Gauss200Parser::Document_or_contentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitDocument_or_content(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Document_or_contentContext* Gauss200Parser::document_or_content() {
  Document_or_contentContext *_localctx = _tracker.createInstance<Document_or_contentContext>(_ctx, getState());
  enterRule(_localctx, 1012, Gauss200Parser::RuleDocument_or_content);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6626);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::CONTENT_GS

    || _la == Gauss200Parser::DOCUMENT_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xml_whitespace_optionContext ------------------------------------------------------------------

Gauss200Parser::Xml_whitespace_optionContext::Xml_whitespace_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Xml_whitespace_optionContext::WHITESPACE_GS() {
  return getToken(Gauss200Parser::WHITESPACE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Xml_whitespace_optionContext::PRESERVE_GS() {
  return getToken(Gauss200Parser::PRESERVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Xml_whitespace_optionContext::STRIP_GS() {
  return getToken(Gauss200Parser::STRIP_GS, 0);
}


size_t Gauss200Parser::Xml_whitespace_optionContext::getRuleIndex() const {
  return Gauss200Parser::RuleXml_whitespace_option;
}

void Gauss200Parser::Xml_whitespace_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXml_whitespace_option(this);
}

void Gauss200Parser::Xml_whitespace_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXml_whitespace_option(this);
}


antlrcpp::Any Gauss200Parser::Xml_whitespace_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitXml_whitespace_option(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Xml_whitespace_optionContext* Gauss200Parser::xml_whitespace_option() {
  Xml_whitespace_optionContext *_localctx = _tracker.createInstance<Xml_whitespace_optionContext>(_ctx, getState());
  enterRule(_localctx, 1014, Gauss200Parser::RuleXml_whitespace_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6628);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::PRESERVE_GS || _la == Gauss200Parser::STRIP_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6629);
    match(Gauss200Parser::WHITESPACE_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xmlexists_argumentContext ------------------------------------------------------------------

Gauss200Parser::Xmlexists_argumentContext::Xmlexists_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Xmlexists_argumentContext::PASSING_GS() {
  return getToken(Gauss200Parser::PASSING_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Xmlexists_argumentContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Xmlexists_argumentContext::BY_GS() {
  return getTokens(Gauss200Parser::BY_GS);
}

tree::TerminalNode* Gauss200Parser::Xmlexists_argumentContext::BY_GS(size_t i) {
  return getToken(Gauss200Parser::BY_GS, i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Xmlexists_argumentContext::REF_GS() {
  return getTokens(Gauss200Parser::REF_GS);
}

tree::TerminalNode* Gauss200Parser::Xmlexists_argumentContext::REF_GS(size_t i) {
  return getToken(Gauss200Parser::REF_GS, i);
}


size_t Gauss200Parser::Xmlexists_argumentContext::getRuleIndex() const {
  return Gauss200Parser::RuleXmlexists_argument;
}

void Gauss200Parser::Xmlexists_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXmlexists_argument(this);
}

void Gauss200Parser::Xmlexists_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXmlexists_argument(this);
}


antlrcpp::Any Gauss200Parser::Xmlexists_argumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitXmlexists_argument(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Xmlexists_argumentContext* Gauss200Parser::xmlexists_argument() {
  Xmlexists_argumentContext *_localctx = _tracker.createInstance<Xmlexists_argumentContext>(_ctx, getState());
  enterRule(_localctx, 1016, Gauss200Parser::RuleXmlexists_argument);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6631);
    match(Gauss200Parser::PASSING_GS);
    setState(6634);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 813, _ctx)) {
    case 1: {
      setState(6632);
      match(Gauss200Parser::BY_GS);
      setState(6633);
      match(Gauss200Parser::REF_GS);
      break;
    }

    }
    setState(6636);
    expression();
    setState(6639);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::BY_GS) {
      setState(6637);
      match(Gauss200Parser::BY_GS);
      setState(6638);
      match(Gauss200Parser::REF_GS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extract_listContext ------------------------------------------------------------------

Gauss200Parser::Extract_listContext::Extract_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Extract_argContext* Gauss200Parser::Extract_listContext::extract_arg() {
  return getRuleContext<Gauss200Parser::Extract_argContext>(0);
}

tree::TerminalNode* Gauss200Parser::Extract_listContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Extract_listContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Extract_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleExtract_list;
}

void Gauss200Parser::Extract_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtract_list(this);
}

void Gauss200Parser::Extract_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtract_list(this);
}


antlrcpp::Any Gauss200Parser::Extract_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExtract_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Extract_listContext* Gauss200Parser::extract_list() {
  Extract_listContext *_localctx = _tracker.createInstance<Extract_listContext>(_ctx, getState());
  enterRule(_localctx, 1018, Gauss200Parser::RuleExtract_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6641);
    extract_arg();
    setState(6642);
    match(Gauss200Parser::FROM_GS);
    setState(6643);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extract_argContext ------------------------------------------------------------------

Gauss200Parser::Extract_argContext::Extract_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::IdentifierContext* Gauss200Parser::Extract_argContext::identifier() {
  return getRuleContext<Gauss200Parser::IdentifierContext>(0);
}

tree::TerminalNode* Gauss200Parser::Extract_argContext::YEAR_GS() {
  return getToken(Gauss200Parser::YEAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Extract_argContext::MONTH_GS() {
  return getToken(Gauss200Parser::MONTH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Extract_argContext::DAY_GS() {
  return getToken(Gauss200Parser::DAY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Extract_argContext::HOUR_GS() {
  return getToken(Gauss200Parser::HOUR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Extract_argContext::MINUTE_GS() {
  return getToken(Gauss200Parser::MINUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Extract_argContext::SECOND_GS() {
  return getToken(Gauss200Parser::SECOND_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Extract_argContext::DELIMITED_STR() {
  return getToken(Gauss200Parser::DELIMITED_STR, 0);
}


size_t Gauss200Parser::Extract_argContext::getRuleIndex() const {
  return Gauss200Parser::RuleExtract_arg;
}

void Gauss200Parser::Extract_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtract_arg(this);
}

void Gauss200Parser::Extract_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtract_arg(this);
}


antlrcpp::Any Gauss200Parser::Extract_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitExtract_arg(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Extract_argContext* Gauss200Parser::extract_arg() {
  Extract_argContext *_localctx = _tracker.createInstance<Extract_argContext>(_ctx, getState());
  enterRule(_localctx, 1020, Gauss200Parser::RuleExtract_arg);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6653);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 815, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6645);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6646);
      match(Gauss200Parser::YEAR_GS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6647);
      match(Gauss200Parser::MONTH_GS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6648);
      match(Gauss200Parser::DAY_GS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6649);
      match(Gauss200Parser::HOUR_GS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6650);
      match(Gauss200Parser::MINUTE_GS);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6651);
      match(Gauss200Parser::SECOND_GS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(6652);
      match(Gauss200Parser::DELIMITED_STR);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Overlay_listContext ------------------------------------------------------------------

Gauss200Parser::Overlay_listContext::Overlay_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Overlay_listContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Overlay_placingContext* Gauss200Parser::Overlay_listContext::overlay_placing() {
  return getRuleContext<Gauss200Parser::Overlay_placingContext>(0);
}

Gauss200Parser::Substr_fromContext* Gauss200Parser::Overlay_listContext::substr_from() {
  return getRuleContext<Gauss200Parser::Substr_fromContext>(0);
}

Gauss200Parser::Substr_forContext* Gauss200Parser::Overlay_listContext::substr_for() {
  return getRuleContext<Gauss200Parser::Substr_forContext>(0);
}


size_t Gauss200Parser::Overlay_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleOverlay_list;
}

void Gauss200Parser::Overlay_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOverlay_list(this);
}

void Gauss200Parser::Overlay_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOverlay_list(this);
}


antlrcpp::Any Gauss200Parser::Overlay_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOverlay_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Overlay_listContext* Gauss200Parser::overlay_list() {
  Overlay_listContext *_localctx = _tracker.createInstance<Overlay_listContext>(_ctx, getState());
  enterRule(_localctx, 1022, Gauss200Parser::RuleOverlay_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6655);
    expression();
    setState(6656);
    overlay_placing();
    setState(6657);
    substr_from();
    setState(6659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::FOR_GS) {
      setState(6658);
      substr_for();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Overlay_placingContext ------------------------------------------------------------------

Gauss200Parser::Overlay_placingContext::Overlay_placingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Overlay_placingContext::PLACING_GS() {
  return getToken(Gauss200Parser::PLACING_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Overlay_placingContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Overlay_placingContext::getRuleIndex() const {
  return Gauss200Parser::RuleOverlay_placing;
}

void Gauss200Parser::Overlay_placingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOverlay_placing(this);
}

void Gauss200Parser::Overlay_placingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOverlay_placing(this);
}


antlrcpp::Any Gauss200Parser::Overlay_placingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitOverlay_placing(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Overlay_placingContext* Gauss200Parser::overlay_placing() {
  Overlay_placingContext *_localctx = _tracker.createInstance<Overlay_placingContext>(_ctx, getState());
  enterRule(_localctx, 1024, Gauss200Parser::RuleOverlay_placing);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6661);
    match(Gauss200Parser::PLACING_GS);
    setState(6662);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Position_listContext ------------------------------------------------------------------

Gauss200Parser::Position_listContext::Position_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::ExpressionContext *> Gauss200Parser::Position_listContext::expression() {
  return getRuleContexts<Gauss200Parser::ExpressionContext>();
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Position_listContext::expression(size_t i) {
  return getRuleContext<Gauss200Parser::ExpressionContext>(i);
}

tree::TerminalNode* Gauss200Parser::Position_listContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}


size_t Gauss200Parser::Position_listContext::getRuleIndex() const {
  return Gauss200Parser::RulePosition_list;
}

void Gauss200Parser::Position_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPosition_list(this);
}

void Gauss200Parser::Position_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPosition_list(this);
}


antlrcpp::Any Gauss200Parser::Position_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitPosition_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Position_listContext* Gauss200Parser::position_list() {
  Position_listContext *_localctx = _tracker.createInstance<Position_listContext>(_ctx, getState());
  enterRule(_localctx, 1026, Gauss200Parser::RulePosition_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6664);
    expression();
    setState(6665);
    match(Gauss200Parser::IN_GS);
    setState(6666);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Substr_listContext ------------------------------------------------------------------

Gauss200Parser::Substr_listContext::Substr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Substr_listContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}

Gauss200Parser::Substr_fromContext* Gauss200Parser::Substr_listContext::substr_from() {
  return getRuleContext<Gauss200Parser::Substr_fromContext>(0);
}

Gauss200Parser::Substr_forContext* Gauss200Parser::Substr_listContext::substr_for() {
  return getRuleContext<Gauss200Parser::Substr_forContext>(0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Substr_listContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}


size_t Gauss200Parser::Substr_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleSubstr_list;
}

void Gauss200Parser::Substr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstr_list(this);
}

void Gauss200Parser::Substr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstr_list(this);
}


antlrcpp::Any Gauss200Parser::Substr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSubstr_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Substr_listContext* Gauss200Parser::substr_list() {
  Substr_listContext *_localctx = _tracker.createInstance<Substr_listContext>(_ctx, getState());
  enterRule(_localctx, 1028, Gauss200Parser::RuleSubstr_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6683);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 817, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6668);
      expression();
      setState(6669);
      substr_from();
      setState(6670);
      substr_for();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6672);
      expression();
      setState(6673);
      substr_for();
      setState(6674);
      substr_from();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6676);
      expression();
      setState(6677);
      substr_from();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6679);
      expression();
      setState(6680);
      substr_for();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6682);
      expression_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Substr_fromContext ------------------------------------------------------------------

Gauss200Parser::Substr_fromContext::Substr_fromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Substr_fromContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Substr_fromContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Substr_fromContext::getRuleIndex() const {
  return Gauss200Parser::RuleSubstr_from;
}

void Gauss200Parser::Substr_fromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstr_from(this);
}

void Gauss200Parser::Substr_fromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstr_from(this);
}


antlrcpp::Any Gauss200Parser::Substr_fromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSubstr_from(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Substr_fromContext* Gauss200Parser::substr_from() {
  Substr_fromContext *_localctx = _tracker.createInstance<Substr_fromContext>(_ctx, getState());
  enterRule(_localctx, 1030, Gauss200Parser::RuleSubstr_from);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6685);
    match(Gauss200Parser::FROM_GS);
    setState(6686);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Substr_forContext ------------------------------------------------------------------

Gauss200Parser::Substr_forContext::Substr_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Substr_forContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Substr_forContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Substr_forContext::getRuleIndex() const {
  return Gauss200Parser::RuleSubstr_for;
}

void Gauss200Parser::Substr_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstr_for(this);
}

void Gauss200Parser::Substr_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstr_for(this);
}


antlrcpp::Any Gauss200Parser::Substr_forContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSubstr_for(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Substr_forContext* Gauss200Parser::substr_for() {
  Substr_forContext *_localctx = _tracker.createInstance<Substr_forContext>(_ctx, getState());
  enterRule(_localctx, 1032, Gauss200Parser::RuleSubstr_for);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6688);
    match(Gauss200Parser::FOR_GS);
    setState(6689);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trim_listContext ------------------------------------------------------------------

Gauss200Parser::Trim_listContext::Trim_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Trim_listContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Trim_listContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Trim_listContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Trim_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleTrim_list;
}

void Gauss200Parser::Trim_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrim_list(this);
}

void Gauss200Parser::Trim_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrim_list(this);
}


antlrcpp::Any Gauss200Parser::Trim_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitTrim_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Trim_listContext* Gauss200Parser::trim_list() {
  Trim_listContext *_localctx = _tracker.createInstance<Trim_listContext>(_ctx, getState());
  enterRule(_localctx, 1034, Gauss200Parser::RuleTrim_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6695);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 819, _ctx)) {
    case 1: {
      setState(6692);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 818, _ctx)) {
      case 1: {
        setState(6691);
        expression();
        break;
      }

      }
      setState(6694);
      match(Gauss200Parser::FROM_GS);
      break;
    }

    }
    setState(6697);
    expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_functionContext ------------------------------------------------------------------

Gauss200Parser::Simple_functionContext::Simple_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Func_nameContext* Gauss200Parser::Simple_functionContext::func_name() {
  return getRuleContext<Gauss200Parser::Func_nameContext>(0);
}

Gauss200Parser::Simple_func_paramsContext* Gauss200Parser::Simple_functionContext::simple_func_params() {
  return getRuleContext<Gauss200Parser::Simple_func_paramsContext>(0);
}


size_t Gauss200Parser::Simple_functionContext::getRuleIndex() const {
  return Gauss200Parser::RuleSimple_function;
}

void Gauss200Parser::Simple_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_function(this);
}

void Gauss200Parser::Simple_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_function(this);
}


antlrcpp::Any Gauss200Parser::Simple_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSimple_function(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Simple_functionContext* Gauss200Parser::simple_function() {
  Simple_functionContext *_localctx = _tracker.createInstance<Simple_functionContext>(_ctx, getState());
  enterRule(_localctx, 1036, Gauss200Parser::RuleSimple_function);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6699);
    func_name();
    setState(6700);
    simple_func_params();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_nameContext ------------------------------------------------------------------

Gauss200Parser::Func_nameContext::Func_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Regular_id_commonContext* Gauss200Parser::Func_nameContext::regular_id_common() {
  return getRuleContext<Gauss200Parser::Regular_id_commonContext>(0);
}

Gauss200Parser::Reserved_keywords_can_be_nameContext* Gauss200Parser::Func_nameContext::reserved_keywords_can_be_name() {
  return getRuleContext<Gauss200Parser::Reserved_keywords_can_be_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::Func_nameContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::Func_nameContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::Func_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleFunc_name;
}

void Gauss200Parser::Func_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_name(this);
}

void Gauss200Parser::Func_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_name(this);
}


antlrcpp::Any Gauss200Parser::Func_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitFunc_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Func_nameContext* Gauss200Parser::func_name() {
  Func_nameContext *_localctx = _tracker.createInstance<Func_nameContext>(_ctx, getState());
  enterRule(_localctx, 1038, Gauss200Parser::RuleFunc_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6706);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::REGULAR_ID: {
        enterOuterAlt(_localctx, 1);
        setState(6702);
        regular_id_common();
        break;
      }

      case Gauss200Parser::AUTHORIZATION_GS:
      case Gauss200Parser::BINARY_GS:
      case Gauss200Parser::COLLATION_GS:
      case Gauss200Parser::CONCURRENTLY_GS:
      case Gauss200Parser::CURRENT_SCHEMA_GS:
      case Gauss200Parser::FREEZE_GS:
      case Gauss200Parser::ILIKE_GS:
      case Gauss200Parser::INNER_GS:
      case Gauss200Parser::ISNULL_GS:
      case Gauss200Parser::JOIN_GS:
      case Gauss200Parser::LEFT_GS:
      case Gauss200Parser::LIKE_GS:
      case Gauss200Parser::NATURAL_GS:
      case Gauss200Parser::NOTNULL_GS:
      case Gauss200Parser::OUTER_GS:
      case Gauss200Parser::OVERLAPS_GS:
      case Gauss200Parser::OVER_GS:
      case Gauss200Parser::SIMILAR_GS:
      case Gauss200Parser::VERBOSE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(6703);
        reserved_keywords_can_be_name();
        break;
      }

      case Gauss200Parser::CHAR_STRING: {
        enterOuterAlt(_localctx, 3);
        setState(6704);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::SCONST: {
        enterOuterAlt(_localctx, 4);
        setState(6705);
        match(Gauss200Parser::SCONST);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_func_paramsContext ------------------------------------------------------------------

Gauss200Parser::Simple_func_paramsContext::Simple_func_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Simple_func_paramsContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Simple_func_paramsContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

tree::TerminalNode* Gauss200Parser::Simple_func_paramsContext::ASTERISK() {
  return getToken(Gauss200Parser::ASTERISK, 0);
}

Gauss200Parser::Param_expr_listContext* Gauss200Parser::Simple_func_paramsContext::param_expr_list() {
  return getRuleContext<Gauss200Parser::Param_expr_listContext>(0);
}

tree::TerminalNode* Gauss200Parser::Simple_func_paramsContext::VARIADIC_GS() {
  return getToken(Gauss200Parser::VARIADIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Simple_func_paramsContext::COMMA() {
  return getToken(Gauss200Parser::COMMA, 0);
}

Gauss200Parser::Param_exprContext* Gauss200Parser::Simple_func_paramsContext::param_expr() {
  return getRuleContext<Gauss200Parser::Param_exprContext>(0);
}


size_t Gauss200Parser::Simple_func_paramsContext::getRuleIndex() const {
  return Gauss200Parser::RuleSimple_func_params;
}

void Gauss200Parser::Simple_func_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_func_params(this);
}

void Gauss200Parser::Simple_func_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_func_params(this);
}


antlrcpp::Any Gauss200Parser::Simple_func_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitSimple_func_params(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Simple_func_paramsContext* Gauss200Parser::simple_func_params() {
  Simple_func_paramsContext *_localctx = _tracker.createInstance<Simple_func_paramsContext>(_ctx, getState());
  enterRule(_localctx, 1040, Gauss200Parser::RuleSimple_func_params);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6726);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 822, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6708);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6711);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Gauss200Parser::ASTERISK: {
          setState(6709);
          match(Gauss200Parser::ASTERISK);
          break;
        }

        case Gauss200Parser::ALL_GS:
        case Gauss200Parser::ANALYSE_GS:
        case Gauss200Parser::ANALYZE_GS:
        case Gauss200Parser::AND_GS:
        case Gauss200Parser::ANY_GS:
        case Gauss200Parser::ARRAY_GS:
        case Gauss200Parser::ASC_GS:
        case Gauss200Parser::ASYMMETRIC_GS:
        case Gauss200Parser::AS_GS:
        case Gauss200Parser::AUTHID_GS:
        case Gauss200Parser::BOTH_GS:
        case Gauss200Parser::BUCKETS_GS:
        case Gauss200Parser::CASE_GS:
        case Gauss200Parser::CAST_GS:
        case Gauss200Parser::CHECK_GS:
        case Gauss200Parser::COLLATE_GS:
        case Gauss200Parser::COLUMN_GS:
        case Gauss200Parser::CONSTRAINT_GS:
        case Gauss200Parser::CREATE_GS:
        case Gauss200Parser::CURRENT_CATALOG_GS:
        case Gauss200Parser::CURRENT_DATE_GS:
        case Gauss200Parser::CURRENT_ROLE_GS:
        case Gauss200Parser::CURRENT_TIMESTAMP_GS:
        case Gauss200Parser::CURRENT_TIME_GS:
        case Gauss200Parser::CURRENT_USER_GS:
        case Gauss200Parser::DEFAULT_GS:
        case Gauss200Parser::DEFERRABLE_GS:
        case Gauss200Parser::DESC_GS:
        case Gauss200Parser::DISTINCT_GS:
        case Gauss200Parser::DO_GS:
        case Gauss200Parser::ELSE_GS:
        case Gauss200Parser::END_GS:
        case Gauss200Parser::EXCEPT_GS:
        case Gauss200Parser::FALSE_GS:
        case Gauss200Parser::FETCH_GS:
        case Gauss200Parser::FOREIGN_GS:
        case Gauss200Parser::FOR_GS:
        case Gauss200Parser::FROM_GS:
        case Gauss200Parser::FUNCTION_GS:
        case Gauss200Parser::GRANT_GS:
        case Gauss200Parser::GROUP_GS:
        case Gauss200Parser::HAVING_GS:
        case Gauss200Parser::INITIALLY_GS:
        case Gauss200Parser::INTERSECT_GS:
        case Gauss200Parser::INTO_GS:
        case Gauss200Parser::IN_GS:
        case Gauss200Parser::IS_GS:
        case Gauss200Parser::LEADING_GS:
        case Gauss200Parser::LESS_GS:
        case Gauss200Parser::LIMIT_GS:
        case Gauss200Parser::LOCALTIMESTAMP_GS:
        case Gauss200Parser::LOCALTIME_GS:
        case Gauss200Parser::MAXVALUE_GS:
        case Gauss200Parser::MINUS_GS:
        case Gauss200Parser::MODIFY_GS:
        case Gauss200Parser::NLSSORT_GS:
        case Gauss200Parser::NOT_GS:
        case Gauss200Parser::NULL_GS:
        case Gauss200Parser::OFFSET_GS:
        case Gauss200Parser::ONLY_GS:
        case Gauss200Parser::ON_GS:
        case Gauss200Parser::ORDER_GS:
        case Gauss200Parser::OR_GS:
        case Gauss200Parser::PERFORMANCE_GS:
        case Gauss200Parser::PLACING_GS:
        case Gauss200Parser::PRIMARY_GS:
        case Gauss200Parser::PROCEDURE_GS:
        case Gauss200Parser::REFERENCES_GS:
        case Gauss200Parser::REJECT_GS:
        case Gauss200Parser::RETURNING_GS:
        case Gauss200Parser::RETURN_GS:
        case Gauss200Parser::SELECT_GS:
        case Gauss200Parser::SESSION_USER_GS:
        case Gauss200Parser::SOME_GS:
        case Gauss200Parser::SPLIT_GS:
        case Gauss200Parser::SYMMETRIC_GS:
        case Gauss200Parser::SYSDATE_GS:
        case Gauss200Parser::THEN_GS:
        case Gauss200Parser::TO_GS:
        case Gauss200Parser::TRAILING_GS:
        case Gauss200Parser::TRUE_GS:
        case Gauss200Parser::UNION_GS:
        case Gauss200Parser::UNIQUE_GS:
        case Gauss200Parser::USER_GS:
        case Gauss200Parser::USING_GS:
        case Gauss200Parser::VARIADIC_GS:
        case Gauss200Parser::WHEN_GS:
        case Gauss200Parser::WHERE_GS:
        case Gauss200Parser::WINDOW_GS:
        case Gauss200Parser::WITH_GS:
        case Gauss200Parser::AUTHORIZATION_GS:
        case Gauss200Parser::BINARY_GS:
        case Gauss200Parser::COLLATION_GS:
        case Gauss200Parser::CONCURRENTLY_GS:
        case Gauss200Parser::CURRENT_SCHEMA_GS:
        case Gauss200Parser::FREEZE_GS:
        case Gauss200Parser::ILIKE_GS:
        case Gauss200Parser::INNER_GS:
        case Gauss200Parser::ISNULL_GS:
        case Gauss200Parser::JOIN_GS:
        case Gauss200Parser::LEFT_GS:
        case Gauss200Parser::LIKE_GS:
        case Gauss200Parser::NATURAL_GS:
        case Gauss200Parser::NOTNULL_GS:
        case Gauss200Parser::OUTER_GS:
        case Gauss200Parser::OVERLAPS_GS:
        case Gauss200Parser::OVER_GS:
        case Gauss200Parser::SIMILAR_GS:
        case Gauss200Parser::VERBOSE_GS:
        case Gauss200Parser::ABORT_GS:
        case Gauss200Parser::ABSOLUTE_GS:
        case Gauss200Parser::ACCESS_GS:
        case Gauss200Parser::ACCOUNT_GS:
        case Gauss200Parser::ACTION_GS:
        case Gauss200Parser::ADD_GS:
        case Gauss200Parser::ADMIN_GS:
        case Gauss200Parser::AFTER_GS:
        case Gauss200Parser::AGGREGATE_GS:
        case Gauss200Parser::ALSO_GS:
        case Gauss200Parser::ALTER_GS:
        case Gauss200Parser::ALWAYS_GS:
        case Gauss200Parser::APP_GS:
        case Gauss200Parser::ASSERTION_GS:
        case Gauss200Parser::ASSIGNMENT_GS:
        case Gauss200Parser::ATTRIBUTE_GS:
        case Gauss200Parser::AT_GS:
        case Gauss200Parser::AUTOEXTEND_GS:
        case Gauss200Parser::AUTOMAPPED_GS:
        case Gauss200Parser::BACKWARD_GS:
        case Gauss200Parser::BARRIER_GS:
        case Gauss200Parser::BEFORE_GS:
        case Gauss200Parser::BEGIN_GS:
        case Gauss200Parser::BLOB_GS:
        case Gauss200Parser::BY_GS:
        case Gauss200Parser::CACHE_GS:
        case Gauss200Parser::CALLED_GS:
        case Gauss200Parser::CALL_GS:
        case Gauss200Parser::CASCADED_GS:
        case Gauss200Parser::CASCADE_GS:
        case Gauss200Parser::CATALOG_GS:
        case Gauss200Parser::CHAIN_GS:
        case Gauss200Parser::CHARACTERISTICS_GS:
        case Gauss200Parser::CHECKPOINT_GS:
        case Gauss200Parser::CLASS_GS:
        case Gauss200Parser::CLEAN_GS:
        case Gauss200Parser::CLOB_GS:
        case Gauss200Parser::CLOSE_GS:
        case Gauss200Parser::CLUSTER_GS:
        case Gauss200Parser::COMMENTS_GS:
        case Gauss200Parser::COMMENT_GS:
        case Gauss200Parser::COMMITTED_GS:
        case Gauss200Parser::COMMIT_GS:
        case Gauss200Parser::COMPRESS_GS:
        case Gauss200Parser::CONFIGURATION_GS:
        case Gauss200Parser::CONNECTION_GS:
        case Gauss200Parser::CONSTRAINTS_GS:
        case Gauss200Parser::CONTENT_GS:
        case Gauss200Parser::CONTINUE_GS:
        case Gauss200Parser::CONVERSION_GS:
        case Gauss200Parser::COORDINATOR_GS:
        case Gauss200Parser::COPY_GS:
        case Gauss200Parser::COST_GS:
        case Gauss200Parser::CSV_GS:
        case Gauss200Parser::CURRENT_GS:
        case Gauss200Parser::CURSOR_GS:
        case Gauss200Parser::CYCLE_GS:
        case Gauss200Parser::DATABASE_GS:
        case Gauss200Parser::DATAFILE_GS:
        case Gauss200Parser::DATA_GS:
        case Gauss200Parser::DAY_GS:
        case Gauss200Parser::DBCOMPATIBILITY_GS:
        case Gauss200Parser::DEALLOCATE_GS:
        case Gauss200Parser::DECLARE_GS:
        case Gauss200Parser::DEFAULTS_GS:
        case Gauss200Parser::DEFERRED_GS:
        case Gauss200Parser::DEFINER_GS:
        case Gauss200Parser::DELETE_GS:
        case Gauss200Parser::DELIMITERS_GS:
        case Gauss200Parser::DELIMITER_GS:
        case Gauss200Parser::DELTA_GS:
        case Gauss200Parser::DETERMINISTIC_GS:
        case Gauss200Parser::DICTIONARY_GS:
        case Gauss200Parser::DIRECT_GS:
        case Gauss200Parser::DISABLE_GS:
        case Gauss200Parser::DISCARD_GS:
        case Gauss200Parser::DISTRIBUTE_GS:
        case Gauss200Parser::DISTRIBUTION_GS:
        case Gauss200Parser::DOCUMENT_GS:
        case Gauss200Parser::DOMAIN_GS:
        case Gauss200Parser::DOUBLE_GS:
        case Gauss200Parser::DROP_GS:
        case Gauss200Parser::EACH_GS:
        case Gauss200Parser::ENABLE_GS:
        case Gauss200Parser::ENCODING_GS:
        case Gauss200Parser::ENCRYPTED_GS:
        case Gauss200Parser::ENFORCED_GS:
        case Gauss200Parser::ENUM_GS:
        case Gauss200Parser::EOL_GS:
        case Gauss200Parser::ESCAPE_GS:
        case Gauss200Parser::ESCAPING_GS:
        case Gauss200Parser::EVERY_GS:
        case Gauss200Parser::EXCHANGE_GS:
        case Gauss200Parser::EXCLUDE_GS:
        case Gauss200Parser::EXCLUDING_GS:
        case Gauss200Parser::EXCLUSIVE_GS:
        case Gauss200Parser::EXECUTE_GS:
        case Gauss200Parser::EXPLAIN_GS:
        case Gauss200Parser::EXTENSION_GS:
        case Gauss200Parser::EXTERNAL_GS:
        case Gauss200Parser::FAMILY_GS:
        case Gauss200Parser::FILEHEADER_GS:
        case Gauss200Parser::FIRST_GS:
        case Gauss200Parser::FIXED_GS:
        case Gauss200Parser::FOLLOWING_GS:
        case Gauss200Parser::FORCE_GS:
        case Gauss200Parser::FORMATTER_GS:
        case Gauss200Parser::FORWARD_GS:
        case Gauss200Parser::FUNCTIONS_GS:
        case Gauss200Parser::GLOBAL_GS:
        case Gauss200Parser::GRANTED_GS:
        case Gauss200Parser::HANDLER_GS:
        case Gauss200Parser::HEADER_GS:
        case Gauss200Parser::HOLD_GS:
        case Gauss200Parser::HOUR_GS:
        case Gauss200Parser::IDENTIFIED_GS:
        case Gauss200Parser::IDENTITY_GS:
        case Gauss200Parser::IF_GS:
        case Gauss200Parser::IMMEDIATE_GS:
        case Gauss200Parser::IMMUTABLE_GS:
        case Gauss200Parser::IMPLICIT_GS:
        case Gauss200Parser::INCLUDING_GS:
        case Gauss200Parser::INCREMENT_GS:
        case Gauss200Parser::INDEXES_GS:
        case Gauss200Parser::INDEX_GS:
        case Gauss200Parser::INHERITS_GS:
        case Gauss200Parser::INHERIT_GS:
        case Gauss200Parser::INITIAL_GS:
        case Gauss200Parser::INITRANS_GS:
        case Gauss200Parser::INLINE_GS:
        case Gauss200Parser::INPUT_GS:
        case Gauss200Parser::INSENSITIVE_GS:
        case Gauss200Parser::INSERT_GS:
        case Gauss200Parser::INSTEAD_GS:
        case Gauss200Parser::INVOKER_GS:
        case Gauss200Parser::ISOLATION_GS:
        case Gauss200Parser::KEY_GS:
        case Gauss200Parser::LABEL_GS:
        case Gauss200Parser::LANGUAGE_GS:
        case Gauss200Parser::LARGE_GS:
        case Gauss200Parser::LAST_GS:
        case Gauss200Parser::LC_COLLATE_GS:
        case Gauss200Parser::LC_CTYPE_GS:
        case Gauss200Parser::LEAKPROOF_GS:
        case Gauss200Parser::LEVEL_GS:
        case Gauss200Parser::LISTEN_GS:
        case Gauss200Parser::LOAD_GS:
        case Gauss200Parser::LOCAL_GS:
        case Gauss200Parser::LOCATION_GS:
        case Gauss200Parser::LOCK_GS:
        case Gauss200Parser::LOGGING_GS:
        case Gauss200Parser::LOGIN_GS:
        case Gauss200Parser::LOG_GS:
        case Gauss200Parser::LOOP_GS:
        case Gauss200Parser::MAPPING_GS:
        case Gauss200Parser::MATCHED_GS:
        case Gauss200Parser::MATCH_GS:
        case Gauss200Parser::MAXEXTENTS_GS:
        case Gauss200Parser::MAXSIZE_GS:
        case Gauss200Parser::MAXTRANS_GS:
        case Gauss200Parser::MERGE_GS:
        case Gauss200Parser::MINEXTENTS_GS:
        case Gauss200Parser::MINUTE_GS:
        case Gauss200Parser::MINVALUE_GS:
        case Gauss200Parser::MODE_GS:
        case Gauss200Parser::MONTH_GS:
        case Gauss200Parser::MOVEMENT_GS:
        case Gauss200Parser::MOVE_GS:
        case Gauss200Parser::NAMES_GS:
        case Gauss200Parser::NAME_GS:
        case Gauss200Parser::NEXT_GS:
        case Gauss200Parser::NOCOMPRESS_GS:
        case Gauss200Parser::NOCYCLE_GS:
        case Gauss200Parser::NODE_GS:
        case Gauss200Parser::NOLOGGING_GS:
        case Gauss200Parser::NOLOGIN_GS:
        case Gauss200Parser::NOMAXVALUE_GS:
        case Gauss200Parser::NOMINVALUE_GS:
        case Gauss200Parser::NOTHING_GS:
        case Gauss200Parser::NOTIFY_GS:
        case Gauss200Parser::NOWAIT_GS:
        case Gauss200Parser::NO_GS:
        case Gauss200Parser::NULLS_GS:
        case Gauss200Parser::NUMSTR_GS:
        case Gauss200Parser::OBJECT_GS:
        case Gauss200Parser::OFF_GS:
        case Gauss200Parser::OF_GS:
        case Gauss200Parser::OIDS_GS:
        case Gauss200Parser::OPERATOR_GS:
        case Gauss200Parser::OPTIMIZATION_GS:
        case Gauss200Parser::OPTIONS_GS:
        case Gauss200Parser::OPTION_GS:
        case Gauss200Parser::OWNED_GS:
        case Gauss200Parser::OWNER_GS:
        case Gauss200Parser::PARSER_GS:
        case Gauss200Parser::PARTIAL_GS:
        case Gauss200Parser::PARTITIONS_GS:
        case Gauss200Parser::PARTITION_GS:
        case Gauss200Parser::PASSING_GS:
        case Gauss200Parser::PASSWORD_GS:
        case Gauss200Parser::PCTFREE_GS:
        case Gauss200Parser::PERCENT_GS:
        case Gauss200Parser::PER_GS:
        case Gauss200Parser::PLANS_GS:
        case Gauss200Parser::POOL_GS:
        case Gauss200Parser::PRECEDING_GS:
        case Gauss200Parser::PREFERRED_GS:
        case Gauss200Parser::PREFIX_GS:
        case Gauss200Parser::PREPARED_GS:
        case Gauss200Parser::PREPARE_GS:
        case Gauss200Parser::PRESERVE_GS:
        case Gauss200Parser::PRIOR_GS:
        case Gauss200Parser::PRIVILEGES_GS:
        case Gauss200Parser::PRIVILEGE_GS:
        case Gauss200Parser::PROCEDURAL_GS:
        case Gauss200Parser::PROFILE_GS:
        case Gauss200Parser::QUERY_GS:
        case Gauss200Parser::QUOTE_GS:
        case Gauss200Parser::RANGE_GS:
        case Gauss200Parser::RAW_GS:
        case Gauss200Parser::READ_GS:
        case Gauss200Parser::REASSIGN_GS:
        case Gauss200Parser::REBUILD_GS:
        case Gauss200Parser::RECHECK_GS:
        case Gauss200Parser::RECURSIVE_GS:
        case Gauss200Parser::REF_GS:
        case Gauss200Parser::REINDEX_GS:
        case Gauss200Parser::RELATIVE_GS:
        case Gauss200Parser::RELEASE_GS:
        case Gauss200Parser::RELOPTIONS_GS:
        case Gauss200Parser::REMOTE_GS:
        case Gauss200Parser::RENAME_GS:
        case Gauss200Parser::REPEATABLE_GS:
        case Gauss200Parser::REPLACE_GS:
        case Gauss200Parser::REPLICA_GS:
        case Gauss200Parser::RESET_GS:
        case Gauss200Parser::RESIZE_GS:
        case Gauss200Parser::RESOURCE_GS:
        case Gauss200Parser::RESTART_GS:
        case Gauss200Parser::RESTRICT_GS:
        case Gauss200Parser::RETURNS_GS:
        case Gauss200Parser::REUSE_GS:
        case Gauss200Parser::REVOKE_GS:
        case Gauss200Parser::ROLE_GS:
        case Gauss200Parser::ROLLBACK_GS:
        case Gauss200Parser::ROWS_GS:
        case Gauss200Parser::RULE_GS:
        case Gauss200Parser::SAVEPOINT_GS:
        case Gauss200Parser::SCHEMA_GS:
        case Gauss200Parser::SCROLL_GS:
        case Gauss200Parser::SEARCH_GS:
        case Gauss200Parser::SECOND_GS:
        case Gauss200Parser::SECURITY_GS:
        case Gauss200Parser::SEQUENCES_GS:
        case Gauss200Parser::SEQUENCE_GS:
        case Gauss200Parser::SERIALIZABLE_GS:
        case Gauss200Parser::SERVER_GS:
        case Gauss200Parser::SESSION_GS:
        case Gauss200Parser::SET_GS:
        case Gauss200Parser::SHARE_GS:
        case Gauss200Parser::SHOW_GS:
        case Gauss200Parser::SIMPLE_GS:
        case Gauss200Parser::SIZE_GS:
        case Gauss200Parser::SNAPSHOT_GS:
        case Gauss200Parser::STABLE_GS:
        case Gauss200Parser::STANDALONE_GS:
        case Gauss200Parser::START_GS:
        case Gauss200Parser::STATEMENT_GS:
        case Gauss200Parser::STATISTICS_GS:
        case Gauss200Parser::STDIN_GS:
        case Gauss200Parser::STDOUT_GS:
        case Gauss200Parser::STORAGE_GS:
        case Gauss200Parser::STORE_GS:
        case Gauss200Parser::STRICT_GS:
        case Gauss200Parser::STRIP_GS:
        case Gauss200Parser::SUPERUSER_GS:
        case Gauss200Parser::SYSID_GS:
        case Gauss200Parser::SYS_REFCURSOR_GS:
        case Gauss200Parser::SYSTEM_GS:
        case Gauss200Parser::TABLESPACE_GS:
        case Gauss200Parser::TABLES_GS:
        case Gauss200Parser::TEMPLATE_GS:
        case Gauss200Parser::TEMPORARY_GS:
        case Gauss200Parser::TEMP_GS:
        case Gauss200Parser::TEXT_GS:
        case Gauss200Parser::THAN_GS:
        case Gauss200Parser::TRANSACTION_GS:
        case Gauss200Parser::TRIGGER_GS:
        case Gauss200Parser::TRUNCATE_GS:
        case Gauss200Parser::TRUSTED_GS:
        case Gauss200Parser::TYPES_GS:
        case Gauss200Parser::TYPE_GS:
        case Gauss200Parser::UNBOUNDED_GS:
        case Gauss200Parser::UNCOMMITTED_GS:
        case Gauss200Parser::UNENCRYPTED_GS:
        case Gauss200Parser::UNKNOWN_GS:
        case Gauss200Parser::UNLIMITED_GS:
        case Gauss200Parser::UNLISTEN_GS:
        case Gauss200Parser::UNLOCK_GS:
        case Gauss200Parser::UNLOGGED_GS:
        case Gauss200Parser::UNTIL_GS:
        case Gauss200Parser::UNUSABLE_GS:
        case Gauss200Parser::UPDATE_GS:
        case Gauss200Parser::VACUUM_GS:
        case Gauss200Parser::VALIDATE_GS:
        case Gauss200Parser::VALIDATION_GS:
        case Gauss200Parser::VALIDATOR_GS:
        case Gauss200Parser::VALID_GS:
        case Gauss200Parser::VALUE_GS:
        case Gauss200Parser::VARYING_GS:
        case Gauss200Parser::VERSION_GS:
        case Gauss200Parser::VIEW_GS:
        case Gauss200Parser::VOLATILE_GS:
        case Gauss200Parser::WHITESPACE_GS:
        case Gauss200Parser::WITHIN_GS:
        case Gauss200Parser::WITHOUT_GS:
        case Gauss200Parser::WORKLOAD_GS:
        case Gauss200Parser::WORK_GS:
        case Gauss200Parser::WRAPPER_GS:
        case Gauss200Parser::WRITE_GS:
        case Gauss200Parser::XML_GS:
        case Gauss200Parser::YEAR_GS:
        case Gauss200Parser::YES_GS:
        case Gauss200Parser::ZONE_GS:
        case Gauss200Parser::BETWEEN_GS:
        case Gauss200Parser::BIGINT_GS:
        case Gauss200Parser::BINARY_DOUBLE_GS:
        case Gauss200Parser::BINARY_INTEGER_GS:
        case Gauss200Parser::BIT_GS:
        case Gauss200Parser::BOOLEAN_GS:
        case Gauss200Parser::CHARACTER_GS:
        case Gauss200Parser::CHAR_GS:
        case Gauss200Parser::COALESCE_GS:
        case Gauss200Parser::DATE_GS:
        case Gauss200Parser::DECIMAL_GS:
        case Gauss200Parser::DECODE_GS:
        case Gauss200Parser::DEC_GS:
        case Gauss200Parser::EXISTS_GS:
        case Gauss200Parser::EXTRACT_GS:
        case Gauss200Parser::FLOAT_GS:
        case Gauss200Parser::GREATEST_GS:
        case Gauss200Parser::INOUT_GS:
        case Gauss200Parser::INTEGER_GS:
        case Gauss200Parser::INTERVAL_GS:
        case Gauss200Parser::INT_GS:
        case Gauss200Parser::LEAST_GS:
        case Gauss200Parser::NATIONAL_GS:
        case Gauss200Parser::NCHAR_GS:
        case Gauss200Parser::NONE_GS:
        case Gauss200Parser::NULLIF_GS:
        case Gauss200Parser::NUMBER_GS:
        case Gauss200Parser::NUMERIC_GS:
        case Gauss200Parser::NVARCHAR2_GS:
        case Gauss200Parser::NVL_GS:
        case Gauss200Parser::OUT_GS:
        case Gauss200Parser::OVERLAY_GS:
        case Gauss200Parser::POSITION_GS:
        case Gauss200Parser::PRECISION_GS:
        case Gauss200Parser::REAL_GS:
        case Gauss200Parser::ROW_GS:
        case Gauss200Parser::SETOF_GS:
        case Gauss200Parser::SMALLDATETIME_GS:
        case Gauss200Parser::SMALLINT_GS:
        case Gauss200Parser::SUBSTRING_GS:
        case Gauss200Parser::TIMESTAMP_GS:
        case Gauss200Parser::TIME_GS:
        case Gauss200Parser::TINYINT_GS:
        case Gauss200Parser::TREAT_GS:
        case Gauss200Parser::TRIM_GS:
        case Gauss200Parser::VALUES_GS:
        case Gauss200Parser::VARCHAR2_GS:
        case Gauss200Parser::VARCHAR_GS:
        case Gauss200Parser::XMLATTRIBUTES_GS:
        case Gauss200Parser::XMLCONCAT_GS:
        case Gauss200Parser::XMLELEMENT_GS:
        case Gauss200Parser::XMLEXISTS_GS:
        case Gauss200Parser::XMLFOREST_GS:
        case Gauss200Parser::XMLPARSE_GS:
        case Gauss200Parser::XMLPI_GS:
        case Gauss200Parser::XMLROOT_GS:
        case Gauss200Parser::XMLSERIALIZE_GS:
        case Gauss200Parser::SERIAL_GS:
        case Gauss200Parser::RELTIME_GS:
        case Gauss200Parser::POINT_GS:
        case Gauss200Parser::LSEG_GS:
        case Gauss200Parser::BOX_GS:
        case Gauss200Parser::PATH_GS:
        case Gauss200Parser::POLYGON_GS:
        case Gauss200Parser::CIRCLE_GS:
        case Gauss200Parser::CIDR_GS:
        case Gauss200Parser::INET_GS:
        case Gauss200Parser::MACADDR_GS:
        case Gauss200Parser::OID_GS:
        case Gauss200Parser::SOURCE_GS:
        case Gauss200Parser::PUBLIC_GS:
        case Gauss200Parser::USAGE_GS:
        case Gauss200Parser::SPACE_GS:
        case Gauss200Parser::FORMAT_GS:
        case Gauss200Parser::CONNECT_GS:
        case Gauss200Parser::ROLLUP_GS:
        case Gauss200Parser::CUBE_GS:
        case Gauss200Parser::GROUPING_GS:
        case Gauss200Parser::SETS_GS:
        case Gauss200Parser::LEFT_PAREN:
        case Gauss200Parser::PLUS_SIGN:
        case Gauss200Parser::MINUS_SIGN:
        case Gauss200Parser::AT_SIGN:
        case Gauss200Parser::QUESTION_MARK:
        case Gauss200Parser::TILDE_OPERATOR_PART:
        case Gauss200Parser::EXCLAMATION_OPERATOR_PART:
        case Gauss200Parser::POUND_SIGN:
        case Gauss200Parser::BAR:
        case Gauss200Parser::CHAR_STRING:
        case Gauss200Parser::REGULAR_ID:
        case Gauss200Parser::SCONST:
        case Gauss200Parser::ICONST:
        case Gauss200Parser::FCONST:
        case Gauss200Parser::BCONST:
        case Gauss200Parser::PARAM: {
          setState(6710);
          param_expr_list();
          break;
        }

        case Gauss200Parser::RIGHT_PAREN: {
          break;
        }

      default:
        break;
      }
      setState(6713);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6714);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6715);
      match(Gauss200Parser::VARIADIC_GS);
      setState(6716);
      param_expr_list();
      setState(6717);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6719);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6720);
      param_expr_list();
      setState(6721);
      match(Gauss200Parser::COMMA);
      setState(6722);
      match(Gauss200Parser::VARIADIC_GS);
      setState(6723);
      param_expr();
      setState(6724);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

Gauss200Parser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::General_elementContext* Gauss200Parser::AtomContext::general_element() {
  return getRuleContext<Gauss200Parser::General_elementContext>(0);
}

Gauss200Parser::ConstantContext* Gauss200Parser::AtomContext::constant() {
  return getRuleContext<Gauss200Parser::ConstantContext>(0);
}

tree::TerminalNode* Gauss200Parser::AtomContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::AtomContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::AtomContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::AtomContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}


size_t Gauss200Parser::AtomContext::getRuleIndex() const {
  return Gauss200Parser::RuleAtom;
}

void Gauss200Parser::AtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtom(this);
}

void Gauss200Parser::AtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtom(this);
}


antlrcpp::Any Gauss200Parser::AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitAtom(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::AtomContext* Gauss200Parser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 1042, Gauss200Parser::RuleAtom);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6738);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 823, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6728);
      general_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6729);
      constant();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6730);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6731);
      select_stmt();
      setState(6732);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6734);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6735);
      expression_list();
      setState(6736);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_elementContext ------------------------------------------------------------------

Gauss200Parser::General_elementContext::General_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::General_element_partContext *> Gauss200Parser::General_elementContext::general_element_part() {
  return getRuleContexts<Gauss200Parser::General_element_partContext>();
}

Gauss200Parser::General_element_partContext* Gauss200Parser::General_elementContext::general_element_part(size_t i) {
  return getRuleContext<Gauss200Parser::General_element_partContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::General_elementContext::PERIOD() {
  return getTokens(Gauss200Parser::PERIOD);
}

tree::TerminalNode* Gauss200Parser::General_elementContext::PERIOD(size_t i) {
  return getToken(Gauss200Parser::PERIOD, i);
}


size_t Gauss200Parser::General_elementContext::getRuleIndex() const {
  return Gauss200Parser::RuleGeneral_element;
}

void Gauss200Parser::General_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_element(this);
}

void Gauss200Parser::General_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_element(this);
}


antlrcpp::Any Gauss200Parser::General_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGeneral_element(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::General_elementContext* Gauss200Parser::general_element() {
  General_elementContext *_localctx = _tracker.createInstance<General_elementContext>(_ctx, getState());
  enterRule(_localctx, 1044, Gauss200Parser::RuleGeneral_element);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6740);
    general_element_part();
    setState(6745);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 824, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(6741);
        match(Gauss200Parser::PERIOD);
        setState(6742);
        general_element_part(); 
      }
      setState(6747);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 824, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_element_partContext ------------------------------------------------------------------

Gauss200Parser::General_element_partContext::General_element_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::IdentifierContext *> Gauss200Parser::General_element_partContext::identifier() {
  return getRuleContexts<Gauss200Parser::IdentifierContext>();
}

Gauss200Parser::IdentifierContext* Gauss200Parser::General_element_partContext::identifier(size_t i) {
  return getRuleContext<Gauss200Parser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::General_element_partContext::PERIOD() {
  return getTokens(Gauss200Parser::PERIOD);
}

tree::TerminalNode* Gauss200Parser::General_element_partContext::PERIOD(size_t i) {
  return getToken(Gauss200Parser::PERIOD, i);
}


size_t Gauss200Parser::General_element_partContext::getRuleIndex() const {
  return Gauss200Parser::RuleGeneral_element_part;
}

void Gauss200Parser::General_element_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_element_part(this);
}

void Gauss200Parser::General_element_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_element_part(this);
}


antlrcpp::Any Gauss200Parser::General_element_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitGeneral_element_part(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::General_element_partContext* Gauss200Parser::general_element_part() {
  General_element_partContext *_localctx = _tracker.createInstance<General_element_partContext>(_ctx, getState());
  enterRule(_localctx, 1046, Gauss200Parser::RuleGeneral_element_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6748);
    identifier();
    setState(6753);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 825, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(6749);
        match(Gauss200Parser::PERIOD);
        setState(6750);
        identifier(); 
      }
      setState(6755);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 825, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

Gauss200Parser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Regular_id_commonContext* Gauss200Parser::IdentifierContext::regular_id_common() {
  return getRuleContext<Gauss200Parser::Regular_id_commonContext>(0);
}

Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext* Gauss200Parser::IdentifierContext::nonreserved_keywords_can_not_be_name() {
  return getRuleContext<Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext>(0);
}

tree::TerminalNode* Gauss200Parser::IdentifierContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::IdentifierContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}


size_t Gauss200Parser::IdentifierContext::getRuleIndex() const {
  return Gauss200Parser::RuleIdentifier;
}

void Gauss200Parser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void Gauss200Parser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


antlrcpp::Any Gauss200Parser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::IdentifierContext* Gauss200Parser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 1048, Gauss200Parser::RuleIdentifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6760);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS:
      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::FORMAT_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS:
      case Gauss200Parser::REGULAR_ID: {
        enterOuterAlt(_localctx, 1);
        setState(6756);
        regular_id_common();
        break;
      }

      case Gauss200Parser::BETWEEN_GS:
      case Gauss200Parser::BIGINT_GS:
      case Gauss200Parser::BINARY_DOUBLE_GS:
      case Gauss200Parser::BINARY_INTEGER_GS:
      case Gauss200Parser::BIT_GS:
      case Gauss200Parser::BOOLEAN_GS:
      case Gauss200Parser::CHARACTER_GS:
      case Gauss200Parser::CHAR_GS:
      case Gauss200Parser::COALESCE_GS:
      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::DECIMAL_GS:
      case Gauss200Parser::DECODE_GS:
      case Gauss200Parser::DEC_GS:
      case Gauss200Parser::EXISTS_GS:
      case Gauss200Parser::EXTRACT_GS:
      case Gauss200Parser::FLOAT_GS:
      case Gauss200Parser::GREATEST_GS:
      case Gauss200Parser::INOUT_GS:
      case Gauss200Parser::INTEGER_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::INT_GS:
      case Gauss200Parser::LEAST_GS:
      case Gauss200Parser::NATIONAL_GS:
      case Gauss200Parser::NCHAR_GS:
      case Gauss200Parser::NONE_GS:
      case Gauss200Parser::NULLIF_GS:
      case Gauss200Parser::NUMBER_GS:
      case Gauss200Parser::NUMERIC_GS:
      case Gauss200Parser::NVARCHAR2_GS:
      case Gauss200Parser::NVL_GS:
      case Gauss200Parser::OUT_GS:
      case Gauss200Parser::OVERLAY_GS:
      case Gauss200Parser::POSITION_GS:
      case Gauss200Parser::PRECISION_GS:
      case Gauss200Parser::REAL_GS:
      case Gauss200Parser::ROW_GS:
      case Gauss200Parser::SETOF_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::SMALLINT_GS:
      case Gauss200Parser::SUBSTRING_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::TINYINT_GS:
      case Gauss200Parser::TREAT_GS:
      case Gauss200Parser::TRIM_GS:
      case Gauss200Parser::VALUES_GS:
      case Gauss200Parser::VARCHAR2_GS:
      case Gauss200Parser::VARCHAR_GS:
      case Gauss200Parser::XMLATTRIBUTES_GS:
      case Gauss200Parser::XMLCONCAT_GS:
      case Gauss200Parser::XMLELEMENT_GS:
      case Gauss200Parser::XMLEXISTS_GS:
      case Gauss200Parser::XMLFOREST_GS:
      case Gauss200Parser::XMLPARSE_GS:
      case Gauss200Parser::XMLPI_GS:
      case Gauss200Parser::XMLROOT_GS:
      case Gauss200Parser::XMLSERIALIZE_GS: {
        enterOuterAlt(_localctx, 2);
        setState(6757);
        nonreserved_keywords_can_not_be_name();
        break;
      }

      case Gauss200Parser::CHAR_STRING: {
        enterOuterAlt(_localctx, 3);
        setState(6758);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::SCONST: {
        enterOuterAlt(_localctx, 4);
        setState(6759);
        match(Gauss200Parser::SCONST);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Regular_id_commonContext ------------------------------------------------------------------

Gauss200Parser::Regular_id_commonContext::Regular_id_commonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Regular_id_commonContext::REGULAR_ID() {
  return getToken(Gauss200Parser::REGULAR_ID, 0);
}

Gauss200Parser::Reserved_keywords_normalContext* Gauss200Parser::Regular_id_commonContext::reserved_keywords_normal() {
  return getRuleContext<Gauss200Parser::Reserved_keywords_normalContext>(0);
}

Gauss200Parser::Nonreserved_keywords_normalContext* Gauss200Parser::Regular_id_commonContext::nonreserved_keywords_normal() {
  return getRuleContext<Gauss200Parser::Nonreserved_keywords_normalContext>(0);
}

Gauss200Parser::Non_keywords_but_tokenContext* Gauss200Parser::Regular_id_commonContext::non_keywords_but_token() {
  return getRuleContext<Gauss200Parser::Non_keywords_but_tokenContext>(0);
}


size_t Gauss200Parser::Regular_id_commonContext::getRuleIndex() const {
  return Gauss200Parser::RuleRegular_id_common;
}

void Gauss200Parser::Regular_id_commonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRegular_id_common(this);
}

void Gauss200Parser::Regular_id_commonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRegular_id_common(this);
}


antlrcpp::Any Gauss200Parser::Regular_id_commonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRegular_id_common(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Regular_id_commonContext* Gauss200Parser::regular_id_common() {
  Regular_id_commonContext *_localctx = _tracker.createInstance<Regular_id_commonContext>(_ctx, getState());
  enterRule(_localctx, 1050, Gauss200Parser::RuleRegular_id_common);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6766);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::REGULAR_ID: {
        enterOuterAlt(_localctx, 1);
        setState(6762);
        match(Gauss200Parser::REGULAR_ID);
        break;
      }

      case Gauss200Parser::ALL_GS:
      case Gauss200Parser::ANALYSE_GS:
      case Gauss200Parser::ANALYZE_GS:
      case Gauss200Parser::AND_GS:
      case Gauss200Parser::ANY_GS:
      case Gauss200Parser::ARRAY_GS:
      case Gauss200Parser::ASC_GS:
      case Gauss200Parser::ASYMMETRIC_GS:
      case Gauss200Parser::AS_GS:
      case Gauss200Parser::AUTHID_GS:
      case Gauss200Parser::BOTH_GS:
      case Gauss200Parser::BUCKETS_GS:
      case Gauss200Parser::CASE_GS:
      case Gauss200Parser::CAST_GS:
      case Gauss200Parser::CHECK_GS:
      case Gauss200Parser::COLLATE_GS:
      case Gauss200Parser::COLUMN_GS:
      case Gauss200Parser::CONSTRAINT_GS:
      case Gauss200Parser::CREATE_GS:
      case Gauss200Parser::CURRENT_CATALOG_GS:
      case Gauss200Parser::CURRENT_DATE_GS:
      case Gauss200Parser::CURRENT_ROLE_GS:
      case Gauss200Parser::CURRENT_TIMESTAMP_GS:
      case Gauss200Parser::CURRENT_TIME_GS:
      case Gauss200Parser::CURRENT_USER_GS:
      case Gauss200Parser::DEFAULT_GS:
      case Gauss200Parser::DEFERRABLE_GS:
      case Gauss200Parser::DESC_GS:
      case Gauss200Parser::DISTINCT_GS:
      case Gauss200Parser::DO_GS:
      case Gauss200Parser::ELSE_GS:
      case Gauss200Parser::END_GS:
      case Gauss200Parser::EXCEPT_GS:
      case Gauss200Parser::FALSE_GS:
      case Gauss200Parser::FETCH_GS:
      case Gauss200Parser::FOREIGN_GS:
      case Gauss200Parser::FOR_GS:
      case Gauss200Parser::FROM_GS:
      case Gauss200Parser::FUNCTION_GS:
      case Gauss200Parser::GRANT_GS:
      case Gauss200Parser::GROUP_GS:
      case Gauss200Parser::HAVING_GS:
      case Gauss200Parser::INITIALLY_GS:
      case Gauss200Parser::INTERSECT_GS:
      case Gauss200Parser::INTO_GS:
      case Gauss200Parser::IN_GS:
      case Gauss200Parser::IS_GS:
      case Gauss200Parser::LEADING_GS:
      case Gauss200Parser::LESS_GS:
      case Gauss200Parser::LIMIT_GS:
      case Gauss200Parser::LOCALTIMESTAMP_GS:
      case Gauss200Parser::LOCALTIME_GS:
      case Gauss200Parser::MAXVALUE_GS:
      case Gauss200Parser::MINUS_GS:
      case Gauss200Parser::MODIFY_GS:
      case Gauss200Parser::NLSSORT_GS:
      case Gauss200Parser::NOT_GS:
      case Gauss200Parser::NULL_GS:
      case Gauss200Parser::OFFSET_GS:
      case Gauss200Parser::ONLY_GS:
      case Gauss200Parser::ON_GS:
      case Gauss200Parser::ORDER_GS:
      case Gauss200Parser::OR_GS:
      case Gauss200Parser::PERFORMANCE_GS:
      case Gauss200Parser::PLACING_GS:
      case Gauss200Parser::PRIMARY_GS:
      case Gauss200Parser::PROCEDURE_GS:
      case Gauss200Parser::REFERENCES_GS:
      case Gauss200Parser::REJECT_GS:
      case Gauss200Parser::RETURNING_GS:
      case Gauss200Parser::RETURN_GS:
      case Gauss200Parser::SELECT_GS:
      case Gauss200Parser::SESSION_USER_GS:
      case Gauss200Parser::SOME_GS:
      case Gauss200Parser::SPLIT_GS:
      case Gauss200Parser::SYMMETRIC_GS:
      case Gauss200Parser::SYSDATE_GS:
      case Gauss200Parser::THEN_GS:
      case Gauss200Parser::TO_GS:
      case Gauss200Parser::TRAILING_GS:
      case Gauss200Parser::TRUE_GS:
      case Gauss200Parser::UNION_GS:
      case Gauss200Parser::UNIQUE_GS:
      case Gauss200Parser::USER_GS:
      case Gauss200Parser::USING_GS:
      case Gauss200Parser::VARIADIC_GS:
      case Gauss200Parser::WHEN_GS:
      case Gauss200Parser::WHERE_GS:
      case Gauss200Parser::WINDOW_GS:
      case Gauss200Parser::WITH_GS: {
        enterOuterAlt(_localctx, 2);
        setState(6763);
        reserved_keywords_normal();
        break;
      }

      case Gauss200Parser::ABORT_GS:
      case Gauss200Parser::ABSOLUTE_GS:
      case Gauss200Parser::ACCESS_GS:
      case Gauss200Parser::ACCOUNT_GS:
      case Gauss200Parser::ACTION_GS:
      case Gauss200Parser::ADD_GS:
      case Gauss200Parser::ADMIN_GS:
      case Gauss200Parser::AFTER_GS:
      case Gauss200Parser::AGGREGATE_GS:
      case Gauss200Parser::ALSO_GS:
      case Gauss200Parser::ALTER_GS:
      case Gauss200Parser::ALWAYS_GS:
      case Gauss200Parser::APP_GS:
      case Gauss200Parser::ASSERTION_GS:
      case Gauss200Parser::ASSIGNMENT_GS:
      case Gauss200Parser::ATTRIBUTE_GS:
      case Gauss200Parser::AT_GS:
      case Gauss200Parser::AUTOEXTEND_GS:
      case Gauss200Parser::AUTOMAPPED_GS:
      case Gauss200Parser::BACKWARD_GS:
      case Gauss200Parser::BARRIER_GS:
      case Gauss200Parser::BEFORE_GS:
      case Gauss200Parser::BEGIN_GS:
      case Gauss200Parser::BLOB_GS:
      case Gauss200Parser::BY_GS:
      case Gauss200Parser::CACHE_GS:
      case Gauss200Parser::CALLED_GS:
      case Gauss200Parser::CALL_GS:
      case Gauss200Parser::CASCADED_GS:
      case Gauss200Parser::CASCADE_GS:
      case Gauss200Parser::CATALOG_GS:
      case Gauss200Parser::CHAIN_GS:
      case Gauss200Parser::CHARACTERISTICS_GS:
      case Gauss200Parser::CHECKPOINT_GS:
      case Gauss200Parser::CLASS_GS:
      case Gauss200Parser::CLEAN_GS:
      case Gauss200Parser::CLOB_GS:
      case Gauss200Parser::CLOSE_GS:
      case Gauss200Parser::CLUSTER_GS:
      case Gauss200Parser::COMMENTS_GS:
      case Gauss200Parser::COMMENT_GS:
      case Gauss200Parser::COMMITTED_GS:
      case Gauss200Parser::COMMIT_GS:
      case Gauss200Parser::COMPRESS_GS:
      case Gauss200Parser::CONFIGURATION_GS:
      case Gauss200Parser::CONNECTION_GS:
      case Gauss200Parser::CONSTRAINTS_GS:
      case Gauss200Parser::CONTENT_GS:
      case Gauss200Parser::CONTINUE_GS:
      case Gauss200Parser::CONVERSION_GS:
      case Gauss200Parser::COORDINATOR_GS:
      case Gauss200Parser::COPY_GS:
      case Gauss200Parser::COST_GS:
      case Gauss200Parser::CSV_GS:
      case Gauss200Parser::CURRENT_GS:
      case Gauss200Parser::CURSOR_GS:
      case Gauss200Parser::CYCLE_GS:
      case Gauss200Parser::DATABASE_GS:
      case Gauss200Parser::DATAFILE_GS:
      case Gauss200Parser::DATA_GS:
      case Gauss200Parser::DAY_GS:
      case Gauss200Parser::DBCOMPATIBILITY_GS:
      case Gauss200Parser::DEALLOCATE_GS:
      case Gauss200Parser::DECLARE_GS:
      case Gauss200Parser::DEFAULTS_GS:
      case Gauss200Parser::DEFERRED_GS:
      case Gauss200Parser::DEFINER_GS:
      case Gauss200Parser::DELETE_GS:
      case Gauss200Parser::DELIMITERS_GS:
      case Gauss200Parser::DELIMITER_GS:
      case Gauss200Parser::DELTA_GS:
      case Gauss200Parser::DETERMINISTIC_GS:
      case Gauss200Parser::DICTIONARY_GS:
      case Gauss200Parser::DIRECT_GS:
      case Gauss200Parser::DISABLE_GS:
      case Gauss200Parser::DISCARD_GS:
      case Gauss200Parser::DISTRIBUTE_GS:
      case Gauss200Parser::DISTRIBUTION_GS:
      case Gauss200Parser::DOCUMENT_GS:
      case Gauss200Parser::DOMAIN_GS:
      case Gauss200Parser::DOUBLE_GS:
      case Gauss200Parser::DROP_GS:
      case Gauss200Parser::EACH_GS:
      case Gauss200Parser::ENABLE_GS:
      case Gauss200Parser::ENCODING_GS:
      case Gauss200Parser::ENCRYPTED_GS:
      case Gauss200Parser::ENFORCED_GS:
      case Gauss200Parser::ENUM_GS:
      case Gauss200Parser::EOL_GS:
      case Gauss200Parser::ESCAPE_GS:
      case Gauss200Parser::ESCAPING_GS:
      case Gauss200Parser::EVERY_GS:
      case Gauss200Parser::EXCHANGE_GS:
      case Gauss200Parser::EXCLUDE_GS:
      case Gauss200Parser::EXCLUDING_GS:
      case Gauss200Parser::EXCLUSIVE_GS:
      case Gauss200Parser::EXECUTE_GS:
      case Gauss200Parser::EXPLAIN_GS:
      case Gauss200Parser::EXTENSION_GS:
      case Gauss200Parser::EXTERNAL_GS:
      case Gauss200Parser::FAMILY_GS:
      case Gauss200Parser::FILEHEADER_GS:
      case Gauss200Parser::FIRST_GS:
      case Gauss200Parser::FIXED_GS:
      case Gauss200Parser::FOLLOWING_GS:
      case Gauss200Parser::FORCE_GS:
      case Gauss200Parser::FORMATTER_GS:
      case Gauss200Parser::FORWARD_GS:
      case Gauss200Parser::FUNCTIONS_GS:
      case Gauss200Parser::GLOBAL_GS:
      case Gauss200Parser::GRANTED_GS:
      case Gauss200Parser::HANDLER_GS:
      case Gauss200Parser::HEADER_GS:
      case Gauss200Parser::HOLD_GS:
      case Gauss200Parser::HOUR_GS:
      case Gauss200Parser::IDENTIFIED_GS:
      case Gauss200Parser::IDENTITY_GS:
      case Gauss200Parser::IF_GS:
      case Gauss200Parser::IMMEDIATE_GS:
      case Gauss200Parser::IMMUTABLE_GS:
      case Gauss200Parser::IMPLICIT_GS:
      case Gauss200Parser::INCLUDING_GS:
      case Gauss200Parser::INCREMENT_GS:
      case Gauss200Parser::INDEXES_GS:
      case Gauss200Parser::INDEX_GS:
      case Gauss200Parser::INHERITS_GS:
      case Gauss200Parser::INHERIT_GS:
      case Gauss200Parser::INITIAL_GS:
      case Gauss200Parser::INITRANS_GS:
      case Gauss200Parser::INLINE_GS:
      case Gauss200Parser::INPUT_GS:
      case Gauss200Parser::INSENSITIVE_GS:
      case Gauss200Parser::INSERT_GS:
      case Gauss200Parser::INSTEAD_GS:
      case Gauss200Parser::INVOKER_GS:
      case Gauss200Parser::ISOLATION_GS:
      case Gauss200Parser::KEY_GS:
      case Gauss200Parser::LABEL_GS:
      case Gauss200Parser::LANGUAGE_GS:
      case Gauss200Parser::LARGE_GS:
      case Gauss200Parser::LAST_GS:
      case Gauss200Parser::LC_COLLATE_GS:
      case Gauss200Parser::LC_CTYPE_GS:
      case Gauss200Parser::LEAKPROOF_GS:
      case Gauss200Parser::LEVEL_GS:
      case Gauss200Parser::LISTEN_GS:
      case Gauss200Parser::LOAD_GS:
      case Gauss200Parser::LOCAL_GS:
      case Gauss200Parser::LOCATION_GS:
      case Gauss200Parser::LOCK_GS:
      case Gauss200Parser::LOGGING_GS:
      case Gauss200Parser::LOGIN_GS:
      case Gauss200Parser::LOG_GS:
      case Gauss200Parser::LOOP_GS:
      case Gauss200Parser::MAPPING_GS:
      case Gauss200Parser::MATCHED_GS:
      case Gauss200Parser::MATCH_GS:
      case Gauss200Parser::MAXEXTENTS_GS:
      case Gauss200Parser::MAXSIZE_GS:
      case Gauss200Parser::MAXTRANS_GS:
      case Gauss200Parser::MERGE_GS:
      case Gauss200Parser::MINEXTENTS_GS:
      case Gauss200Parser::MINUTE_GS:
      case Gauss200Parser::MINVALUE_GS:
      case Gauss200Parser::MODE_GS:
      case Gauss200Parser::MONTH_GS:
      case Gauss200Parser::MOVEMENT_GS:
      case Gauss200Parser::MOVE_GS:
      case Gauss200Parser::NAMES_GS:
      case Gauss200Parser::NAME_GS:
      case Gauss200Parser::NEXT_GS:
      case Gauss200Parser::NOCOMPRESS_GS:
      case Gauss200Parser::NOCYCLE_GS:
      case Gauss200Parser::NODE_GS:
      case Gauss200Parser::NOLOGGING_GS:
      case Gauss200Parser::NOLOGIN_GS:
      case Gauss200Parser::NOMAXVALUE_GS:
      case Gauss200Parser::NOMINVALUE_GS:
      case Gauss200Parser::NOTHING_GS:
      case Gauss200Parser::NOTIFY_GS:
      case Gauss200Parser::NOWAIT_GS:
      case Gauss200Parser::NO_GS:
      case Gauss200Parser::NULLS_GS:
      case Gauss200Parser::NUMSTR_GS:
      case Gauss200Parser::OBJECT_GS:
      case Gauss200Parser::OFF_GS:
      case Gauss200Parser::OF_GS:
      case Gauss200Parser::OIDS_GS:
      case Gauss200Parser::OPERATOR_GS:
      case Gauss200Parser::OPTIMIZATION_GS:
      case Gauss200Parser::OPTIONS_GS:
      case Gauss200Parser::OPTION_GS:
      case Gauss200Parser::OWNED_GS:
      case Gauss200Parser::OWNER_GS:
      case Gauss200Parser::PARSER_GS:
      case Gauss200Parser::PARTIAL_GS:
      case Gauss200Parser::PARTITIONS_GS:
      case Gauss200Parser::PARTITION_GS:
      case Gauss200Parser::PASSING_GS:
      case Gauss200Parser::PASSWORD_GS:
      case Gauss200Parser::PCTFREE_GS:
      case Gauss200Parser::PERCENT_GS:
      case Gauss200Parser::PER_GS:
      case Gauss200Parser::PLANS_GS:
      case Gauss200Parser::POOL_GS:
      case Gauss200Parser::PRECEDING_GS:
      case Gauss200Parser::PREFERRED_GS:
      case Gauss200Parser::PREFIX_GS:
      case Gauss200Parser::PREPARED_GS:
      case Gauss200Parser::PREPARE_GS:
      case Gauss200Parser::PRESERVE_GS:
      case Gauss200Parser::PRIOR_GS:
      case Gauss200Parser::PRIVILEGES_GS:
      case Gauss200Parser::PRIVILEGE_GS:
      case Gauss200Parser::PROCEDURAL_GS:
      case Gauss200Parser::PROFILE_GS:
      case Gauss200Parser::QUERY_GS:
      case Gauss200Parser::QUOTE_GS:
      case Gauss200Parser::RANGE_GS:
      case Gauss200Parser::RAW_GS:
      case Gauss200Parser::READ_GS:
      case Gauss200Parser::REASSIGN_GS:
      case Gauss200Parser::REBUILD_GS:
      case Gauss200Parser::RECHECK_GS:
      case Gauss200Parser::RECURSIVE_GS:
      case Gauss200Parser::REF_GS:
      case Gauss200Parser::REINDEX_GS:
      case Gauss200Parser::RELATIVE_GS:
      case Gauss200Parser::RELEASE_GS:
      case Gauss200Parser::RELOPTIONS_GS:
      case Gauss200Parser::REMOTE_GS:
      case Gauss200Parser::RENAME_GS:
      case Gauss200Parser::REPEATABLE_GS:
      case Gauss200Parser::REPLACE_GS:
      case Gauss200Parser::REPLICA_GS:
      case Gauss200Parser::RESET_GS:
      case Gauss200Parser::RESIZE_GS:
      case Gauss200Parser::RESOURCE_GS:
      case Gauss200Parser::RESTART_GS:
      case Gauss200Parser::RESTRICT_GS:
      case Gauss200Parser::RETURNS_GS:
      case Gauss200Parser::REUSE_GS:
      case Gauss200Parser::REVOKE_GS:
      case Gauss200Parser::ROLE_GS:
      case Gauss200Parser::ROLLBACK_GS:
      case Gauss200Parser::ROWS_GS:
      case Gauss200Parser::RULE_GS:
      case Gauss200Parser::SAVEPOINT_GS:
      case Gauss200Parser::SCHEMA_GS:
      case Gauss200Parser::SCROLL_GS:
      case Gauss200Parser::SEARCH_GS:
      case Gauss200Parser::SECOND_GS:
      case Gauss200Parser::SECURITY_GS:
      case Gauss200Parser::SEQUENCES_GS:
      case Gauss200Parser::SEQUENCE_GS:
      case Gauss200Parser::SERIALIZABLE_GS:
      case Gauss200Parser::SERVER_GS:
      case Gauss200Parser::SESSION_GS:
      case Gauss200Parser::SET_GS:
      case Gauss200Parser::SHARE_GS:
      case Gauss200Parser::SHOW_GS:
      case Gauss200Parser::SIMPLE_GS:
      case Gauss200Parser::SIZE_GS:
      case Gauss200Parser::SNAPSHOT_GS:
      case Gauss200Parser::STABLE_GS:
      case Gauss200Parser::STANDALONE_GS:
      case Gauss200Parser::START_GS:
      case Gauss200Parser::STATEMENT_GS:
      case Gauss200Parser::STATISTICS_GS:
      case Gauss200Parser::STDIN_GS:
      case Gauss200Parser::STDOUT_GS:
      case Gauss200Parser::STORAGE_GS:
      case Gauss200Parser::STORE_GS:
      case Gauss200Parser::STRICT_GS:
      case Gauss200Parser::STRIP_GS:
      case Gauss200Parser::SUPERUSER_GS:
      case Gauss200Parser::SYSID_GS:
      case Gauss200Parser::SYS_REFCURSOR_GS:
      case Gauss200Parser::SYSTEM_GS:
      case Gauss200Parser::TABLESPACE_GS:
      case Gauss200Parser::TABLES_GS:
      case Gauss200Parser::TEMPLATE_GS:
      case Gauss200Parser::TEMPORARY_GS:
      case Gauss200Parser::TEMP_GS:
      case Gauss200Parser::TEXT_GS:
      case Gauss200Parser::THAN_GS:
      case Gauss200Parser::TRANSACTION_GS:
      case Gauss200Parser::TRIGGER_GS:
      case Gauss200Parser::TRUNCATE_GS:
      case Gauss200Parser::TRUSTED_GS:
      case Gauss200Parser::TYPES_GS:
      case Gauss200Parser::TYPE_GS:
      case Gauss200Parser::UNBOUNDED_GS:
      case Gauss200Parser::UNCOMMITTED_GS:
      case Gauss200Parser::UNENCRYPTED_GS:
      case Gauss200Parser::UNKNOWN_GS:
      case Gauss200Parser::UNLIMITED_GS:
      case Gauss200Parser::UNLISTEN_GS:
      case Gauss200Parser::UNLOCK_GS:
      case Gauss200Parser::UNLOGGED_GS:
      case Gauss200Parser::UNTIL_GS:
      case Gauss200Parser::UNUSABLE_GS:
      case Gauss200Parser::UPDATE_GS:
      case Gauss200Parser::VACUUM_GS:
      case Gauss200Parser::VALIDATE_GS:
      case Gauss200Parser::VALIDATION_GS:
      case Gauss200Parser::VALIDATOR_GS:
      case Gauss200Parser::VALID_GS:
      case Gauss200Parser::VALUE_GS:
      case Gauss200Parser::VARYING_GS:
      case Gauss200Parser::VERSION_GS:
      case Gauss200Parser::VIEW_GS:
      case Gauss200Parser::VOLATILE_GS:
      case Gauss200Parser::WHITESPACE_GS:
      case Gauss200Parser::WITHIN_GS:
      case Gauss200Parser::WITHOUT_GS:
      case Gauss200Parser::WORKLOAD_GS:
      case Gauss200Parser::WORK_GS:
      case Gauss200Parser::WRAPPER_GS:
      case Gauss200Parser::WRITE_GS:
      case Gauss200Parser::XML_GS:
      case Gauss200Parser::YEAR_GS:
      case Gauss200Parser::YES_GS:
      case Gauss200Parser::ZONE_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::SOURCE_GS:
      case Gauss200Parser::USAGE_GS:
      case Gauss200Parser::SPACE_GS:
      case Gauss200Parser::CONNECT_GS:
      case Gauss200Parser::ROLLUP_GS:
      case Gauss200Parser::CUBE_GS:
      case Gauss200Parser::GROUPING_GS:
      case Gauss200Parser::SETS_GS: {
        enterOuterAlt(_localctx, 3);
        setState(6764);
        nonreserved_keywords_normal();
        break;
      }

      case Gauss200Parser::SERIAL_GS:
      case Gauss200Parser::OID_GS:
      case Gauss200Parser::PUBLIC_GS:
      case Gauss200Parser::FORMAT_GS: {
        enterOuterAlt(_localctx, 4);
        setState(6765);
        non_keywords_but_token();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Regular_idContext ------------------------------------------------------------------

Gauss200Parser::Regular_idContext::Regular_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::Regular_id_commonContext* Gauss200Parser::Regular_idContext::regular_id_common() {
  return getRuleContext<Gauss200Parser::Regular_id_commonContext>(0);
}


size_t Gauss200Parser::Regular_idContext::getRuleIndex() const {
  return Gauss200Parser::RuleRegular_id;
}

void Gauss200Parser::Regular_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRegular_id(this);
}

void Gauss200Parser::Regular_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRegular_id(this);
}


antlrcpp::Any Gauss200Parser::Regular_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitRegular_id(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Regular_idContext* Gauss200Parser::regular_id() {
  Regular_idContext *_localctx = _tracker.createInstance<Regular_idContext>(_ctx, getState());
  enterRule(_localctx, 1052, Gauss200Parser::RuleRegular_id);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6768);
    regular_id_common();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

Gauss200Parser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Gauss200Parser::NumericContext* Gauss200Parser::ConstantContext::numeric() {
  return getRuleContext<Gauss200Parser::NumericContext>(0);
}

tree::TerminalNode* Gauss200Parser::ConstantContext::CHAR_STRING() {
  return getToken(Gauss200Parser::CHAR_STRING, 0);
}

tree::TerminalNode* Gauss200Parser::ConstantContext::SCONST() {
  return getToken(Gauss200Parser::SCONST, 0);
}

Gauss200Parser::Date_typeContext* Gauss200Parser::ConstantContext::date_type() {
  return getRuleContext<Gauss200Parser::Date_typeContext>(0);
}

Gauss200Parser::Geometry_typeContext* Gauss200Parser::ConstantContext::geometry_type() {
  return getRuleContext<Gauss200Parser::Geometry_typeContext>(0);
}

tree::TerminalNode* Gauss200Parser::ConstantContext::BCONST() {
  return getToken(Gauss200Parser::BCONST, 0);
}

Gauss200Parser::Inet_typeContext* Gauss200Parser::ConstantContext::inet_type() {
  return getRuleContext<Gauss200Parser::Inet_typeContext>(0);
}

tree::TerminalNode* Gauss200Parser::ConstantContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::ConstantContext::FALSE_GS() {
  return getToken(Gauss200Parser::FALSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::ConstantContext::TRUE_GS() {
  return getToken(Gauss200Parser::TRUE_GS, 0);
}


size_t Gauss200Parser::ConstantContext::getRuleIndex() const {
  return Gauss200Parser::RuleConstant;
}

void Gauss200Parser::ConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant(this);
}

void Gauss200Parser::ConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant(this);
}


antlrcpp::Any Gauss200Parser::ConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitConstant(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::ConstantContext* Gauss200Parser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 1054, Gauss200Parser::RuleConstant);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6786);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Gauss200Parser::ICONST:
      case Gauss200Parser::FCONST: {
        enterOuterAlt(_localctx, 1);
        setState(6770);
        numeric();
        break;
      }

      case Gauss200Parser::CHAR_STRING: {
        enterOuterAlt(_localctx, 2);
        setState(6771);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::SCONST: {
        enterOuterAlt(_localctx, 3);
        setState(6772);
        match(Gauss200Parser::SCONST);
        break;
      }

      case Gauss200Parser::DATE_GS:
      case Gauss200Parser::INTERVAL_GS:
      case Gauss200Parser::SMALLDATETIME_GS:
      case Gauss200Parser::TIMESTAMP_GS:
      case Gauss200Parser::TIME_GS:
      case Gauss200Parser::RELTIME_GS: {
        enterOuterAlt(_localctx, 4);
        setState(6773);
        date_type();
        setState(6774);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::POINT_GS:
      case Gauss200Parser::LSEG_GS:
      case Gauss200Parser::BOX_GS:
      case Gauss200Parser::PATH_GS:
      case Gauss200Parser::POLYGON_GS:
      case Gauss200Parser::CIRCLE_GS: {
        enterOuterAlt(_localctx, 5);
        setState(6776);
        geometry_type();
        setState(6777);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::BCONST: {
        enterOuterAlt(_localctx, 6);
        setState(6779);
        match(Gauss200Parser::BCONST);
        break;
      }

      case Gauss200Parser::CIDR_GS:
      case Gauss200Parser::INET_GS:
      case Gauss200Parser::MACADDR_GS: {
        enterOuterAlt(_localctx, 7);
        setState(6780);
        inet_type();
        setState(6781);
        match(Gauss200Parser::CHAR_STRING);
        break;
      }

      case Gauss200Parser::NULL_GS: {
        enterOuterAlt(_localctx, 8);
        setState(6783);
        match(Gauss200Parser::NULL_GS);
        break;
      }

      case Gauss200Parser::FALSE_GS: {
        enterOuterAlt(_localctx, 9);
        setState(6784);
        match(Gauss200Parser::FALSE_GS);
        break;
      }

      case Gauss200Parser::TRUE_GS: {
        enterOuterAlt(_localctx, 10);
        setState(6785);
        match(Gauss200Parser::TRUE_GS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_exprContext ------------------------------------------------------------------

Gauss200Parser::Case_exprContext::Case_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Case_exprContext::CASE_GS() {
  return getToken(Gauss200Parser::CASE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Case_exprContext::END_GS() {
  return getToken(Gauss200Parser::END_GS, 0);
}

std::vector<Gauss200Parser::When_clauseContext *> Gauss200Parser::Case_exprContext::when_clause() {
  return getRuleContexts<Gauss200Parser::When_clauseContext>();
}

Gauss200Parser::When_clauseContext* Gauss200Parser::Case_exprContext::when_clause(size_t i) {
  return getRuleContext<Gauss200Parser::When_clauseContext>(i);
}

Gauss200Parser::Case_defaultContext* Gauss200Parser::Case_exprContext::case_default() {
  return getRuleContext<Gauss200Parser::Case_defaultContext>(0);
}


size_t Gauss200Parser::Case_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleCase_expr;
}

void Gauss200Parser::Case_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_expr(this);
}

void Gauss200Parser::Case_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_expr(this);
}


antlrcpp::Any Gauss200Parser::Case_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCase_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Case_exprContext* Gauss200Parser::case_expr() {
  Case_exprContext *_localctx = _tracker.createInstance<Case_exprContext>(_ctx, getState());
  enterRule(_localctx, 1056, Gauss200Parser::RuleCase_expr);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6788);
    match(Gauss200Parser::CASE_GS);
    setState(6790); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(6789);
      when_clause();
      setState(6792); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Gauss200Parser::WHEN_GS);
    setState(6795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Gauss200Parser::ELSE_GS) {
      setState(6794);
      case_default();
    }
    setState(6797);
    match(Gauss200Parser::END_GS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_clauseContext ------------------------------------------------------------------

Gauss200Parser::When_clauseContext::When_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::When_clauseContext::WHEN_GS() {
  return getToken(Gauss200Parser::WHEN_GS, 0);
}

std::vector<Gauss200Parser::ExpressionContext *> Gauss200Parser::When_clauseContext::expression() {
  return getRuleContexts<Gauss200Parser::ExpressionContext>();
}

Gauss200Parser::ExpressionContext* Gauss200Parser::When_clauseContext::expression(size_t i) {
  return getRuleContext<Gauss200Parser::ExpressionContext>(i);
}

tree::TerminalNode* Gauss200Parser::When_clauseContext::THEN_GS() {
  return getToken(Gauss200Parser::THEN_GS, 0);
}


size_t Gauss200Parser::When_clauseContext::getRuleIndex() const {
  return Gauss200Parser::RuleWhen_clause;
}

void Gauss200Parser::When_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_clause(this);
}

void Gauss200Parser::When_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_clause(this);
}


antlrcpp::Any Gauss200Parser::When_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitWhen_clause(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::When_clauseContext* Gauss200Parser::when_clause() {
  When_clauseContext *_localctx = _tracker.createInstance<When_clauseContext>(_ctx, getState());
  enterRule(_localctx, 1058, Gauss200Parser::RuleWhen_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6799);
    match(Gauss200Parser::WHEN_GS);
    setState(6800);
    expression();
    setState(6801);
    match(Gauss200Parser::THEN_GS);
    setState(6802);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_defaultContext ------------------------------------------------------------------

Gauss200Parser::Case_defaultContext::Case_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Case_defaultContext::ELSE_GS() {
  return getToken(Gauss200Parser::ELSE_GS, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Case_defaultContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Case_defaultContext::getRuleIndex() const {
  return Gauss200Parser::RuleCase_default;
}

void Gauss200Parser::Case_defaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_default(this);
}

void Gauss200Parser::Case_defaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_default(this);
}


antlrcpp::Any Gauss200Parser::Case_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitCase_default(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Case_defaultContext* Gauss200Parser::case_default() {
  Case_defaultContext *_localctx = _tracker.createInstance<Case_defaultContext>(_ctx, getState());
  enterRule(_localctx, 1060, Gauss200Parser::RuleCase_default);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6804);
    match(Gauss200Parser::ELSE_GS);
    setState(6805);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Quantified_expressionContext ------------------------------------------------------------------

Gauss200Parser::Quantified_expressionContext::Quantified_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Quantified_expressionContext::SOME_GS() {
  return getToken(Gauss200Parser::SOME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Quantified_expressionContext::EXISTS_GS() {
  return getToken(Gauss200Parser::EXISTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Quantified_expressionContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Quantified_expressionContext::ANY_GS() {
  return getToken(Gauss200Parser::ANY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Quantified_expressionContext::LEFT_PAREN() {
  return getToken(Gauss200Parser::LEFT_PAREN, 0);
}

Gauss200Parser::Select_stmtContext* Gauss200Parser::Quantified_expressionContext::select_stmt() {
  return getRuleContext<Gauss200Parser::Select_stmtContext>(0);
}

tree::TerminalNode* Gauss200Parser::Quantified_expressionContext::RIGHT_PAREN() {
  return getToken(Gauss200Parser::RIGHT_PAREN, 0);
}

Gauss200Parser::ExpressionContext* Gauss200Parser::Quantified_expressionContext::expression() {
  return getRuleContext<Gauss200Parser::ExpressionContext>(0);
}


size_t Gauss200Parser::Quantified_expressionContext::getRuleIndex() const {
  return Gauss200Parser::RuleQuantified_expression;
}

void Gauss200Parser::Quantified_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantified_expression(this);
}

void Gauss200Parser::Quantified_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantified_expression(this);
}


antlrcpp::Any Gauss200Parser::Quantified_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitQuantified_expression(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Quantified_expressionContext* Gauss200Parser::quantified_expression() {
  Quantified_expressionContext *_localctx = _tracker.createInstance<Quantified_expressionContext>(_ctx, getState());
  enterRule(_localctx, 1062, Gauss200Parser::RuleQuantified_expression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6807);
    _la = _input->LA(1);
    if (!(_la == Gauss200Parser::ALL_GS

    || _la == Gauss200Parser::ANY_GS || _la == Gauss200Parser::SOME_GS || _la == Gauss200Parser::EXISTS_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6816);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 831, _ctx)) {
    case 1: {
      setState(6808);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6809);
      select_stmt();
      setState(6810);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    case 2: {
      setState(6812);
      match(Gauss200Parser::LEFT_PAREN);
      setState(6813);
      expression();
      setState(6814);
      match(Gauss200Parser::RIGHT_PAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_exprContext ------------------------------------------------------------------

Gauss200Parser::Array_exprContext::Array_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Array_exprContext::LEFT_BRACKET() {
  return getToken(Gauss200Parser::LEFT_BRACKET, 0);
}

tree::TerminalNode* Gauss200Parser::Array_exprContext::RIGHT_BRACKET() {
  return getToken(Gauss200Parser::RIGHT_BRACKET, 0);
}

Gauss200Parser::Expression_listContext* Gauss200Parser::Array_exprContext::expression_list() {
  return getRuleContext<Gauss200Parser::Expression_listContext>(0);
}

Gauss200Parser::Array_expr_listContext* Gauss200Parser::Array_exprContext::array_expr_list() {
  return getRuleContext<Gauss200Parser::Array_expr_listContext>(0);
}


size_t Gauss200Parser::Array_exprContext::getRuleIndex() const {
  return Gauss200Parser::RuleArray_expr;
}

void Gauss200Parser::Array_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_expr(this);
}

void Gauss200Parser::Array_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_expr(this);
}


antlrcpp::Any Gauss200Parser::Array_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitArray_expr(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Array_exprContext* Gauss200Parser::array_expr() {
  Array_exprContext *_localctx = _tracker.createInstance<Array_exprContext>(_ctx, getState());
  enterRule(_localctx, 1064, Gauss200Parser::RuleArray_expr);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6827);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 833, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6818);
      match(Gauss200Parser::LEFT_BRACKET);
      setState(6820);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & ((1ULL << (Gauss200Parser::ALL_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYSE_GS - 1))
        | (1ULL << (Gauss200Parser::ANALYZE_GS - 1))
        | (1ULL << (Gauss200Parser::AND_GS - 1))
        | (1ULL << (Gauss200Parser::ANY_GS - 1))
        | (1ULL << (Gauss200Parser::ARRAY_GS - 1))
        | (1ULL << (Gauss200Parser::ASC_GS - 1))
        | (1ULL << (Gauss200Parser::ASYMMETRIC_GS - 1))
        | (1ULL << (Gauss200Parser::AS_GS - 1))
        | (1ULL << (Gauss200Parser::AUTHID_GS - 1))
        | (1ULL << (Gauss200Parser::BOTH_GS - 1))
        | (1ULL << (Gauss200Parser::BUCKETS_GS - 1))
        | (1ULL << (Gauss200Parser::CASE_GS - 1))
        | (1ULL << (Gauss200Parser::CAST_GS - 1))
        | (1ULL << (Gauss200Parser::CHECK_GS - 1))
        | (1ULL << (Gauss200Parser::COLLATE_GS - 1))
        | (1ULL << (Gauss200Parser::COLUMN_GS - 1))
        | (1ULL << (Gauss200Parser::CONSTRAINT_GS - 1))
        | (1ULL << (Gauss200Parser::CREATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_CATALOG_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_DATE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_ROLE_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_TIME_GS - 1))
        | (1ULL << (Gauss200Parser::CURRENT_USER_GS - 1))
        | (1ULL << (Gauss200Parser::DEFAULT_GS - 1))
        | (1ULL << (Gauss200Parser::DEFERRABLE_GS - 1))
        | (1ULL << (Gauss200Parser::DESC_GS - 1))
        | (1ULL << (Gauss200Parser::DISTINCT_GS - 1))
        | (1ULL << (Gauss200Parser::DO_GS - 1))
        | (1ULL << (Gauss200Parser::ELSE_GS - 1))
        | (1ULL << (Gauss200Parser::END_GS - 1))
        | (1ULL << (Gauss200Parser::EXCEPT_GS - 1))
        | (1ULL << (Gauss200Parser::FALSE_GS - 1))
        | (1ULL << (Gauss200Parser::FETCH_GS - 1))
        | (1ULL << (Gauss200Parser::FOREIGN_GS - 1))
        | (1ULL << (Gauss200Parser::FOR_GS - 1))
        | (1ULL << (Gauss200Parser::FROM_GS - 1))
        | (1ULL << (Gauss200Parser::FUNCTION_GS - 1))
        | (1ULL << (Gauss200Parser::GRANT_GS - 1))
        | (1ULL << (Gauss200Parser::GROUP_GS - 1))
        | (1ULL << (Gauss200Parser::HAVING_GS - 1))
        | (1ULL << (Gauss200Parser::INITIALLY_GS - 1))
        | (1ULL << (Gauss200Parser::INTERSECT_GS - 1))
        | (1ULL << (Gauss200Parser::INTO_GS - 1))
        | (1ULL << (Gauss200Parser::IN_GS - 1))
        | (1ULL << (Gauss200Parser::IS_GS - 1))
        | (1ULL << (Gauss200Parser::LEADING_GS - 1))
        | (1ULL << (Gauss200Parser::LESS_GS - 1))
        | (1ULL << (Gauss200Parser::LIMIT_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIMESTAMP_GS - 1))
        | (1ULL << (Gauss200Parser::LOCALTIME_GS - 1))
        | (1ULL << (Gauss200Parser::MAXVALUE_GS - 1))
        | (1ULL << (Gauss200Parser::MINUS_GS - 1))
        | (1ULL << (Gauss200Parser::MODIFY_GS - 1))
        | (1ULL << (Gauss200Parser::NLSSORT_GS - 1))
        | (1ULL << (Gauss200Parser::NOT_GS - 1))
        | (1ULL << (Gauss200Parser::NULL_GS - 1))
        | (1ULL << (Gauss200Parser::OFFSET_GS - 1))
        | (1ULL << (Gauss200Parser::ONLY_GS - 1))
        | (1ULL << (Gauss200Parser::ON_GS - 1))
        | (1ULL << (Gauss200Parser::ORDER_GS - 1))
        | (1ULL << (Gauss200Parser::OR_GS - 1))
        | (1ULL << (Gauss200Parser::PERFORMANCE_GS - 1)))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (Gauss200Parser::PLACING_GS - 65))
        | (1ULL << (Gauss200Parser::PRIMARY_GS - 65))
        | (1ULL << (Gauss200Parser::PROCEDURE_GS - 65))
        | (1ULL << (Gauss200Parser::REFERENCES_GS - 65))
        | (1ULL << (Gauss200Parser::REJECT_GS - 65))
        | (1ULL << (Gauss200Parser::RETURNING_GS - 65))
        | (1ULL << (Gauss200Parser::RETURN_GS - 65))
        | (1ULL << (Gauss200Parser::SELECT_GS - 65))
        | (1ULL << (Gauss200Parser::SESSION_USER_GS - 65))
        | (1ULL << (Gauss200Parser::SOME_GS - 65))
        | (1ULL << (Gauss200Parser::SPLIT_GS - 65))
        | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 65))
        | (1ULL << (Gauss200Parser::SYSDATE_GS - 65))
        | (1ULL << (Gauss200Parser::THEN_GS - 65))
        | (1ULL << (Gauss200Parser::TO_GS - 65))
        | (1ULL << (Gauss200Parser::TRAILING_GS - 65))
        | (1ULL << (Gauss200Parser::TRUE_GS - 65))
        | (1ULL << (Gauss200Parser::UNION_GS - 65))
        | (1ULL << (Gauss200Parser::UNIQUE_GS - 65))
        | (1ULL << (Gauss200Parser::USER_GS - 65))
        | (1ULL << (Gauss200Parser::USING_GS - 65))
        | (1ULL << (Gauss200Parser::VARIADIC_GS - 65))
        | (1ULL << (Gauss200Parser::WHEN_GS - 65))
        | (1ULL << (Gauss200Parser::WHERE_GS - 65))
        | (1ULL << (Gauss200Parser::WINDOW_GS - 65))
        | (1ULL << (Gauss200Parser::WITH_GS - 65))
        | (1ULL << (Gauss200Parser::AUTHORIZATION_GS - 65))
        | (1ULL << (Gauss200Parser::BINARY_GS - 65))
        | (1ULL << (Gauss200Parser::COLLATION_GS - 65))
        | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 65))
        | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 65))
        | (1ULL << (Gauss200Parser::FREEZE_GS - 65))
        | (1ULL << (Gauss200Parser::ILIKE_GS - 65))
        | (1ULL << (Gauss200Parser::INNER_GS - 65))
        | (1ULL << (Gauss200Parser::ISNULL_GS - 65))
        | (1ULL << (Gauss200Parser::JOIN_GS - 65))
        | (1ULL << (Gauss200Parser::LEFT_GS - 65))
        | (1ULL << (Gauss200Parser::LIKE_GS - 65))
        | (1ULL << (Gauss200Parser::NATURAL_GS - 65))
        | (1ULL << (Gauss200Parser::NOTNULL_GS - 65))
        | (1ULL << (Gauss200Parser::OUTER_GS - 65))
        | (1ULL << (Gauss200Parser::OVERLAPS_GS - 65))
        | (1ULL << (Gauss200Parser::OVER_GS - 65))
        | (1ULL << (Gauss200Parser::SIMILAR_GS - 65))
        | (1ULL << (Gauss200Parser::VERBOSE_GS - 65))
        | (1ULL << (Gauss200Parser::ABORT_GS - 65))
        | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 65))
        | (1ULL << (Gauss200Parser::ACCESS_GS - 65))
        | (1ULL << (Gauss200Parser::ACCOUNT_GS - 65))
        | (1ULL << (Gauss200Parser::ACTION_GS - 65))
        | (1ULL << (Gauss200Parser::ADD_GS - 65))
        | (1ULL << (Gauss200Parser::ADMIN_GS - 65))
        | (1ULL << (Gauss200Parser::AFTER_GS - 65))
        | (1ULL << (Gauss200Parser::AGGREGATE_GS - 65))
        | (1ULL << (Gauss200Parser::ALSO_GS - 65))
        | (1ULL << (Gauss200Parser::ALTER_GS - 65))
        | (1ULL << (Gauss200Parser::ALWAYS_GS - 65))
        | (1ULL << (Gauss200Parser::APP_GS - 65))
        | (1ULL << (Gauss200Parser::ASSERTION_GS - 65))
        | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 65)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (Gauss200Parser::ATTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::AT_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 129))
        | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 129))
        | (1ULL << (Gauss200Parser::BACKWARD_GS - 129))
        | (1ULL << (Gauss200Parser::BARRIER_GS - 129))
        | (1ULL << (Gauss200Parser::BEFORE_GS - 129))
        | (1ULL << (Gauss200Parser::BEGIN_GS - 129))
        | (1ULL << (Gauss200Parser::BLOB_GS - 129))
        | (1ULL << (Gauss200Parser::BY_GS - 129))
        | (1ULL << (Gauss200Parser::CACHE_GS - 129))
        | (1ULL << (Gauss200Parser::CALLED_GS - 129))
        | (1ULL << (Gauss200Parser::CALL_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADED_GS - 129))
        | (1ULL << (Gauss200Parser::CASCADE_GS - 129))
        | (1ULL << (Gauss200Parser::CATALOG_GS - 129))
        | (1ULL << (Gauss200Parser::CHAIN_GS - 129))
        | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 129))
        | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 129))
        | (1ULL << (Gauss200Parser::CLASS_GS - 129))
        | (1ULL << (Gauss200Parser::CLEAN_GS - 129))
        | (1ULL << (Gauss200Parser::CLOB_GS - 129))
        | (1ULL << (Gauss200Parser::CLOSE_GS - 129))
        | (1ULL << (Gauss200Parser::CLUSTER_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENTS_GS - 129))
        | (1ULL << (Gauss200Parser::COMMENT_GS - 129))
        | (1ULL << (Gauss200Parser::COMMITTED_GS - 129))
        | (1ULL << (Gauss200Parser::COMMIT_GS - 129))
        | (1ULL << (Gauss200Parser::COMPRESS_GS - 129))
        | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 129))
        | (1ULL << (Gauss200Parser::CONNECTION_GS - 129))
        | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 129))
        | (1ULL << (Gauss200Parser::CONTENT_GS - 129))
        | (1ULL << (Gauss200Parser::CONTINUE_GS - 129))
        | (1ULL << (Gauss200Parser::CONVERSION_GS - 129))
        | (1ULL << (Gauss200Parser::COORDINATOR_GS - 129))
        | (1ULL << (Gauss200Parser::COPY_GS - 129))
        | (1ULL << (Gauss200Parser::COST_GS - 129))
        | (1ULL << (Gauss200Parser::CSV_GS - 129))
        | (1ULL << (Gauss200Parser::CURRENT_GS - 129))
        | (1ULL << (Gauss200Parser::CURSOR_GS - 129))
        | (1ULL << (Gauss200Parser::CYCLE_GS - 129))
        | (1ULL << (Gauss200Parser::DATABASE_GS - 129))
        | (1ULL << (Gauss200Parser::DATAFILE_GS - 129))
        | (1ULL << (Gauss200Parser::DATA_GS - 129))
        | (1ULL << (Gauss200Parser::DAY_GS - 129))
        | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 129))
        | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 129))
        | (1ULL << (Gauss200Parser::DECLARE_GS - 129))
        | (1ULL << (Gauss200Parser::DEFAULTS_GS - 129))
        | (1ULL << (Gauss200Parser::DEFERRED_GS - 129))
        | (1ULL << (Gauss200Parser::DEFINER_GS - 129))
        | (1ULL << (Gauss200Parser::DELETE_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITERS_GS - 129))
        | (1ULL << (Gauss200Parser::DELIMITER_GS - 129))
        | (1ULL << (Gauss200Parser::DELTA_GS - 129))
        | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 129))
        | (1ULL << (Gauss200Parser::DICTIONARY_GS - 129))
        | (1ULL << (Gauss200Parser::DIRECT_GS - 129))
        | (1ULL << (Gauss200Parser::DISABLE_GS - 129))
        | (1ULL << (Gauss200Parser::DISCARD_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 129))
        | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 129))
        | (1ULL << (Gauss200Parser::DOCUMENT_GS - 129)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 193)) & ((1ULL << (Gauss200Parser::DOMAIN_GS - 193))
        | (1ULL << (Gauss200Parser::DOUBLE_GS - 193))
        | (1ULL << (Gauss200Parser::DROP_GS - 193))
        | (1ULL << (Gauss200Parser::EACH_GS - 193))
        | (1ULL << (Gauss200Parser::ENABLE_GS - 193))
        | (1ULL << (Gauss200Parser::ENCODING_GS - 193))
        | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 193))
        | (1ULL << (Gauss200Parser::ENFORCED_GS - 193))
        | (1ULL << (Gauss200Parser::ENUM_GS - 193))
        | (1ULL << (Gauss200Parser::EOL_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPE_GS - 193))
        | (1ULL << (Gauss200Parser::ESCAPING_GS - 193))
        | (1ULL << (Gauss200Parser::EVERY_GS - 193))
        | (1ULL << (Gauss200Parser::EXCHANGE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDE_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 193))
        | (1ULL << (Gauss200Parser::EXECUTE_GS - 193))
        | (1ULL << (Gauss200Parser::EXPLAIN_GS - 193))
        | (1ULL << (Gauss200Parser::EXTENSION_GS - 193))
        | (1ULL << (Gauss200Parser::EXTERNAL_GS - 193))
        | (1ULL << (Gauss200Parser::FAMILY_GS - 193))
        | (1ULL << (Gauss200Parser::FILEHEADER_GS - 193))
        | (1ULL << (Gauss200Parser::FIRST_GS - 193))
        | (1ULL << (Gauss200Parser::FIXED_GS - 193))
        | (1ULL << (Gauss200Parser::FOLLOWING_GS - 193))
        | (1ULL << (Gauss200Parser::FORCE_GS - 193))
        | (1ULL << (Gauss200Parser::FORMATTER_GS - 193))
        | (1ULL << (Gauss200Parser::FORWARD_GS - 193))
        | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 193))
        | (1ULL << (Gauss200Parser::GLOBAL_GS - 193))
        | (1ULL << (Gauss200Parser::GRANTED_GS - 193))
        | (1ULL << (Gauss200Parser::HANDLER_GS - 193))
        | (1ULL << (Gauss200Parser::HEADER_GS - 193))
        | (1ULL << (Gauss200Parser::HOLD_GS - 193))
        | (1ULL << (Gauss200Parser::HOUR_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 193))
        | (1ULL << (Gauss200Parser::IDENTITY_GS - 193))
        | (1ULL << (Gauss200Parser::IF_GS - 193))
        | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 193))
        | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 193))
        | (1ULL << (Gauss200Parser::IMPLICIT_GS - 193))
        | (1ULL << (Gauss200Parser::INCLUDING_GS - 193))
        | (1ULL << (Gauss200Parser::INCREMENT_GS - 193))
        | (1ULL << (Gauss200Parser::INDEXES_GS - 193))
        | (1ULL << (Gauss200Parser::INDEX_GS - 193))
        | (1ULL << (Gauss200Parser::INHERITS_GS - 193))
        | (1ULL << (Gauss200Parser::INHERIT_GS - 193))
        | (1ULL << (Gauss200Parser::INITIAL_GS - 193))
        | (1ULL << (Gauss200Parser::INITRANS_GS - 193))
        | (1ULL << (Gauss200Parser::INLINE_GS - 193))
        | (1ULL << (Gauss200Parser::INPUT_GS - 193))
        | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 193))
        | (1ULL << (Gauss200Parser::INSERT_GS - 193))
        | (1ULL << (Gauss200Parser::INSTEAD_GS - 193))
        | (1ULL << (Gauss200Parser::INVOKER_GS - 193))
        | (1ULL << (Gauss200Parser::ISOLATION_GS - 193))
        | (1ULL << (Gauss200Parser::KEY_GS - 193))
        | (1ULL << (Gauss200Parser::LABEL_GS - 193))
        | (1ULL << (Gauss200Parser::LANGUAGE_GS - 193))
        | (1ULL << (Gauss200Parser::LARGE_GS - 193))
        | (1ULL << (Gauss200Parser::LAST_GS - 193))
        | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 193))
        | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 257)) & ((1ULL << (Gauss200Parser::LEAKPROOF_GS - 257))
        | (1ULL << (Gauss200Parser::LEVEL_GS - 257))
        | (1ULL << (Gauss200Parser::LISTEN_GS - 257))
        | (1ULL << (Gauss200Parser::LOAD_GS - 257))
        | (1ULL << (Gauss200Parser::LOCAL_GS - 257))
        | (1ULL << (Gauss200Parser::LOCATION_GS - 257))
        | (1ULL << (Gauss200Parser::LOCK_GS - 257))
        | (1ULL << (Gauss200Parser::LOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::LOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::LOG_GS - 257))
        | (1ULL << (Gauss200Parser::LOOP_GS - 257))
        | (1ULL << (Gauss200Parser::MAPPING_GS - 257))
        | (1ULL << (Gauss200Parser::MATCHED_GS - 257))
        | (1ULL << (Gauss200Parser::MATCH_GS - 257))
        | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MAXSIZE_GS - 257))
        | (1ULL << (Gauss200Parser::MAXTRANS_GS - 257))
        | (1ULL << (Gauss200Parser::MERGE_GS - 257))
        | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 257))
        | (1ULL << (Gauss200Parser::MINUTE_GS - 257))
        | (1ULL << (Gauss200Parser::MINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::MODE_GS - 257))
        | (1ULL << (Gauss200Parser::MONTH_GS - 257))
        | (1ULL << (Gauss200Parser::MOVEMENT_GS - 257))
        | (1ULL << (Gauss200Parser::MOVE_GS - 257))
        | (1ULL << (Gauss200Parser::NAMES_GS - 257))
        | (1ULL << (Gauss200Parser::NAME_GS - 257))
        | (1ULL << (Gauss200Parser::NEXT_GS - 257))
        | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 257))
        | (1ULL << (Gauss200Parser::NOCYCLE_GS - 257))
        | (1ULL << (Gauss200Parser::NODE_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGGING_GS - 257))
        | (1ULL << (Gauss200Parser::NOLOGIN_GS - 257))
        | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 257))
        | (1ULL << (Gauss200Parser::NOTHING_GS - 257))
        | (1ULL << (Gauss200Parser::NOTIFY_GS - 257))
        | (1ULL << (Gauss200Parser::NOWAIT_GS - 257))
        | (1ULL << (Gauss200Parser::NO_GS - 257))
        | (1ULL << (Gauss200Parser::NULLS_GS - 257))
        | (1ULL << (Gauss200Parser::NUMSTR_GS - 257))
        | (1ULL << (Gauss200Parser::OBJECT_GS - 257))
        | (1ULL << (Gauss200Parser::OFF_GS - 257))
        | (1ULL << (Gauss200Parser::OF_GS - 257))
        | (1ULL << (Gauss200Parser::OIDS_GS - 257))
        | (1ULL << (Gauss200Parser::OPERATOR_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 257))
        | (1ULL << (Gauss200Parser::OPTIONS_GS - 257))
        | (1ULL << (Gauss200Parser::OPTION_GS - 257))
        | (1ULL << (Gauss200Parser::OWNED_GS - 257))
        | (1ULL << (Gauss200Parser::OWNER_GS - 257))
        | (1ULL << (Gauss200Parser::PARSER_GS - 257))
        | (1ULL << (Gauss200Parser::PARTIAL_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITIONS_GS - 257))
        | (1ULL << (Gauss200Parser::PARTITION_GS - 257))
        | (1ULL << (Gauss200Parser::PASSING_GS - 257))
        | (1ULL << (Gauss200Parser::PASSWORD_GS - 257))
        | (1ULL << (Gauss200Parser::PCTFREE_GS - 257))
        | (1ULL << (Gauss200Parser::PERCENT_GS - 257))
        | (1ULL << (Gauss200Parser::PER_GS - 257))
        | (1ULL << (Gauss200Parser::PLANS_GS - 257))
        | (1ULL << (Gauss200Parser::POOL_GS - 257))
        | (1ULL << (Gauss200Parser::PRECEDING_GS - 257))
        | (1ULL << (Gauss200Parser::PREFERRED_GS - 257)))) != 0) || ((((_la - 321) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 321)) & ((1ULL << (Gauss200Parser::PREFIX_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARED_GS - 321))
        | (1ULL << (Gauss200Parser::PREPARE_GS - 321))
        | (1ULL << (Gauss200Parser::PRESERVE_GS - 321))
        | (1ULL << (Gauss200Parser::PRIOR_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 321))
        | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 321))
        | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 321))
        | (1ULL << (Gauss200Parser::PROFILE_GS - 321))
        | (1ULL << (Gauss200Parser::QUERY_GS - 321))
        | (1ULL << (Gauss200Parser::QUOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RANGE_GS - 321))
        | (1ULL << (Gauss200Parser::RAW_GS - 321))
        | (1ULL << (Gauss200Parser::READ_GS - 321))
        | (1ULL << (Gauss200Parser::REASSIGN_GS - 321))
        | (1ULL << (Gauss200Parser::REBUILD_GS - 321))
        | (1ULL << (Gauss200Parser::RECHECK_GS - 321))
        | (1ULL << (Gauss200Parser::RECURSIVE_GS - 321))
        | (1ULL << (Gauss200Parser::REF_GS - 321))
        | (1ULL << (Gauss200Parser::REINDEX_GS - 321))
        | (1ULL << (Gauss200Parser::RELATIVE_GS - 321))
        | (1ULL << (Gauss200Parser::RELEASE_GS - 321))
        | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 321))
        | (1ULL << (Gauss200Parser::REMOTE_GS - 321))
        | (1ULL << (Gauss200Parser::RENAME_GS - 321))
        | (1ULL << (Gauss200Parser::REPEATABLE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLACE_GS - 321))
        | (1ULL << (Gauss200Parser::REPLICA_GS - 321))
        | (1ULL << (Gauss200Parser::RESET_GS - 321))
        | (1ULL << (Gauss200Parser::RESIZE_GS - 321))
        | (1ULL << (Gauss200Parser::RESOURCE_GS - 321))
        | (1ULL << (Gauss200Parser::RESTART_GS - 321))
        | (1ULL << (Gauss200Parser::RESTRICT_GS - 321))
        | (1ULL << (Gauss200Parser::RETURNS_GS - 321))
        | (1ULL << (Gauss200Parser::REUSE_GS - 321))
        | (1ULL << (Gauss200Parser::REVOKE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLE_GS - 321))
        | (1ULL << (Gauss200Parser::ROLLBACK_GS - 321))
        | (1ULL << (Gauss200Parser::ROWS_GS - 321))
        | (1ULL << (Gauss200Parser::RULE_GS - 321))
        | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 321))
        | (1ULL << (Gauss200Parser::SCHEMA_GS - 321))
        | (1ULL << (Gauss200Parser::SCROLL_GS - 321))
        | (1ULL << (Gauss200Parser::SEARCH_GS - 321))
        | (1ULL << (Gauss200Parser::SECOND_GS - 321))
        | (1ULL << (Gauss200Parser::SECURITY_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCES_GS - 321))
        | (1ULL << (Gauss200Parser::SEQUENCE_GS - 321))
        | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 321))
        | (1ULL << (Gauss200Parser::SERVER_GS - 321))
        | (1ULL << (Gauss200Parser::SESSION_GS - 321))
        | (1ULL << (Gauss200Parser::SET_GS - 321))
        | (1ULL << (Gauss200Parser::SHARE_GS - 321))
        | (1ULL << (Gauss200Parser::SHOW_GS - 321))
        | (1ULL << (Gauss200Parser::SIMPLE_GS - 321))
        | (1ULL << (Gauss200Parser::SIZE_GS - 321))
        | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 321))
        | (1ULL << (Gauss200Parser::STABLE_GS - 321))
        | (1ULL << (Gauss200Parser::STANDALONE_GS - 321))
        | (1ULL << (Gauss200Parser::START_GS - 321))
        | (1ULL << (Gauss200Parser::STATEMENT_GS - 321))
        | (1ULL << (Gauss200Parser::STATISTICS_GS - 321))
        | (1ULL << (Gauss200Parser::STDIN_GS - 321))
        | (1ULL << (Gauss200Parser::STDOUT_GS - 321)))) != 0) || ((((_la - 385) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 385)) & ((1ULL << (Gauss200Parser::STORAGE_GS - 385))
        | (1ULL << (Gauss200Parser::STORE_GS - 385))
        | (1ULL << (Gauss200Parser::STRICT_GS - 385))
        | (1ULL << (Gauss200Parser::STRIP_GS - 385))
        | (1ULL << (Gauss200Parser::SUPERUSER_GS - 385))
        | (1ULL << (Gauss200Parser::SYSID_GS - 385))
        | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 385))
        | (1ULL << (Gauss200Parser::SYSTEM_GS - 385))
        | (1ULL << (Gauss200Parser::TABLESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::TABLES_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPLATE_GS - 385))
        | (1ULL << (Gauss200Parser::TEMPORARY_GS - 385))
        | (1ULL << (Gauss200Parser::TEMP_GS - 385))
        | (1ULL << (Gauss200Parser::TEXT_GS - 385))
        | (1ULL << (Gauss200Parser::THAN_GS - 385))
        | (1ULL << (Gauss200Parser::TRANSACTION_GS - 385))
        | (1ULL << (Gauss200Parser::TRIGGER_GS - 385))
        | (1ULL << (Gauss200Parser::TRUNCATE_GS - 385))
        | (1ULL << (Gauss200Parser::TRUSTED_GS - 385))
        | (1ULL << (Gauss200Parser::TYPES_GS - 385))
        | (1ULL << (Gauss200Parser::TYPE_GS - 385))
        | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 385))
        | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 385))
        | (1ULL << (Gauss200Parser::UNKNOWN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLIMITED_GS - 385))
        | (1ULL << (Gauss200Parser::UNLISTEN_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOCK_GS - 385))
        | (1ULL << (Gauss200Parser::UNLOGGED_GS - 385))
        | (1ULL << (Gauss200Parser::UNTIL_GS - 385))
        | (1ULL << (Gauss200Parser::UNUSABLE_GS - 385))
        | (1ULL << (Gauss200Parser::UPDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VACUUM_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATE_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATION_GS - 385))
        | (1ULL << (Gauss200Parser::VALIDATOR_GS - 385))
        | (1ULL << (Gauss200Parser::VALID_GS - 385))
        | (1ULL << (Gauss200Parser::VALUE_GS - 385))
        | (1ULL << (Gauss200Parser::VARYING_GS - 385))
        | (1ULL << (Gauss200Parser::VERSION_GS - 385))
        | (1ULL << (Gauss200Parser::VIEW_GS - 385))
        | (1ULL << (Gauss200Parser::VOLATILE_GS - 385))
        | (1ULL << (Gauss200Parser::WHITESPACE_GS - 385))
        | (1ULL << (Gauss200Parser::WITHIN_GS - 385))
        | (1ULL << (Gauss200Parser::WITHOUT_GS - 385))
        | (1ULL << (Gauss200Parser::WORKLOAD_GS - 385))
        | (1ULL << (Gauss200Parser::WORK_GS - 385))
        | (1ULL << (Gauss200Parser::WRAPPER_GS - 385))
        | (1ULL << (Gauss200Parser::WRITE_GS - 385))
        | (1ULL << (Gauss200Parser::XML_GS - 385))
        | (1ULL << (Gauss200Parser::YEAR_GS - 385))
        | (1ULL << (Gauss200Parser::YES_GS - 385))
        | (1ULL << (Gauss200Parser::ZONE_GS - 385))
        | (1ULL << (Gauss200Parser::BETWEEN_GS - 385))
        | (1ULL << (Gauss200Parser::BIGINT_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 385))
        | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 385))
        | (1ULL << (Gauss200Parser::BIT_GS - 385))
        | (1ULL << (Gauss200Parser::BOOLEAN_GS - 385))
        | (1ULL << (Gauss200Parser::CHARACTER_GS - 385))
        | (1ULL << (Gauss200Parser::CHAR_GS - 385))
        | (1ULL << (Gauss200Parser::COALESCE_GS - 385))
        | (1ULL << (Gauss200Parser::DATE_GS - 385))
        | (1ULL << (Gauss200Parser::DECIMAL_GS - 385)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 449)) & ((1ULL << (Gauss200Parser::DECODE_GS - 449))
        | (1ULL << (Gauss200Parser::DEC_GS - 449))
        | (1ULL << (Gauss200Parser::EXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::EXTRACT_GS - 449))
        | (1ULL << (Gauss200Parser::FLOAT_GS - 449))
        | (1ULL << (Gauss200Parser::GREATEST_GS - 449))
        | (1ULL << (Gauss200Parser::INOUT_GS - 449))
        | (1ULL << (Gauss200Parser::INTEGER_GS - 449))
        | (1ULL << (Gauss200Parser::INTERVAL_GS - 449))
        | (1ULL << (Gauss200Parser::INT_GS - 449))
        | (1ULL << (Gauss200Parser::LEAST_GS - 449))
        | (1ULL << (Gauss200Parser::NATIONAL_GS - 449))
        | (1ULL << (Gauss200Parser::NCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::NONE_GS - 449))
        | (1ULL << (Gauss200Parser::NULLIF_GS - 449))
        | (1ULL << (Gauss200Parser::NUMBER_GS - 449))
        | (1ULL << (Gauss200Parser::NUMERIC_GS - 449))
        | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::NVL_GS - 449))
        | (1ULL << (Gauss200Parser::OUT_GS - 449))
        | (1ULL << (Gauss200Parser::OVERLAY_GS - 449))
        | (1ULL << (Gauss200Parser::POSITION_GS - 449))
        | (1ULL << (Gauss200Parser::PRECISION_GS - 449))
        | (1ULL << (Gauss200Parser::REAL_GS - 449))
        | (1ULL << (Gauss200Parser::ROW_GS - 449))
        | (1ULL << (Gauss200Parser::SETOF_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 449))
        | (1ULL << (Gauss200Parser::SMALLINT_GS - 449))
        | (1ULL << (Gauss200Parser::SUBSTRING_GS - 449))
        | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 449))
        | (1ULL << (Gauss200Parser::TIME_GS - 449))
        | (1ULL << (Gauss200Parser::TINYINT_GS - 449))
        | (1ULL << (Gauss200Parser::TREAT_GS - 449))
        | (1ULL << (Gauss200Parser::TRIM_GS - 449))
        | (1ULL << (Gauss200Parser::VALUES_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR2_GS - 449))
        | (1ULL << (Gauss200Parser::VARCHAR_GS - 449))
        | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 449))
        | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 449))
        | (1ULL << (Gauss200Parser::XMLFOREST_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPARSE_GS - 449))
        | (1ULL << (Gauss200Parser::XMLPI_GS - 449))
        | (1ULL << (Gauss200Parser::XMLROOT_GS - 449))
        | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 449))
        | (1ULL << (Gauss200Parser::SERIAL_GS - 449))
        | (1ULL << (Gauss200Parser::RELTIME_GS - 449))
        | (1ULL << (Gauss200Parser::POINT_GS - 449))
        | (1ULL << (Gauss200Parser::LSEG_GS - 449))
        | (1ULL << (Gauss200Parser::BOX_GS - 449))
        | (1ULL << (Gauss200Parser::PATH_GS - 449))
        | (1ULL << (Gauss200Parser::POLYGON_GS - 449))
        | (1ULL << (Gauss200Parser::CIRCLE_GS - 449))
        | (1ULL << (Gauss200Parser::CIDR_GS - 449))
        | (1ULL << (Gauss200Parser::INET_GS - 449))
        | (1ULL << (Gauss200Parser::MACADDR_GS - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 516)) & ((1ULL << (Gauss200Parser::OID_GS - 516))
        | (1ULL << (Gauss200Parser::SOURCE_GS - 516))
        | (1ULL << (Gauss200Parser::PUBLIC_GS - 516))
        | (1ULL << (Gauss200Parser::USAGE_GS - 516))
        | (1ULL << (Gauss200Parser::SPACE_GS - 516))
        | (1ULL << (Gauss200Parser::FORMAT_GS - 516)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
        | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
        | (1ULL << (Gauss200Parser::CUBE_GS - 601))
        | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
        | (1ULL << (Gauss200Parser::SETS_GS - 601))
        | (1ULL << (Gauss200Parser::LEFT_PAREN - 601))
        | (1ULL << (Gauss200Parser::PLUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::MINUS_SIGN - 601))
        | (1ULL << (Gauss200Parser::AT_SIGN - 601))
        | (1ULL << (Gauss200Parser::QUESTION_MARK - 601))
        | (1ULL << (Gauss200Parser::TILDE_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::EXCLAMATION_OPERATOR_PART - 601))
        | (1ULL << (Gauss200Parser::POUND_SIGN - 601))
        | (1ULL << (Gauss200Parser::BAR - 601))
        | (1ULL << (Gauss200Parser::CHAR_STRING - 601))
        | (1ULL << (Gauss200Parser::REGULAR_ID - 601))
        | (1ULL << (Gauss200Parser::SCONST - 601))
        | (1ULL << (Gauss200Parser::ICONST - 601))
        | (1ULL << (Gauss200Parser::FCONST - 601))
        | (1ULL << (Gauss200Parser::BCONST - 601))
        | (1ULL << (Gauss200Parser::PARAM - 601)))) != 0)) {
        setState(6819);
        expression_list();
      }
      setState(6822);
      match(Gauss200Parser::RIGHT_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6823);
      match(Gauss200Parser::LEFT_BRACKET);
      setState(6824);
      array_expr_list();
      setState(6825);
      match(Gauss200Parser::RIGHT_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_expr_listContext ------------------------------------------------------------------

Gauss200Parser::Array_expr_listContext::Array_expr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Gauss200Parser::Array_exprContext *> Gauss200Parser::Array_expr_listContext::array_expr() {
  return getRuleContexts<Gauss200Parser::Array_exprContext>();
}

Gauss200Parser::Array_exprContext* Gauss200Parser::Array_expr_listContext::array_expr(size_t i) {
  return getRuleContext<Gauss200Parser::Array_exprContext>(i);
}

std::vector<tree::TerminalNode *> Gauss200Parser::Array_expr_listContext::COMMA() {
  return getTokens(Gauss200Parser::COMMA);
}

tree::TerminalNode* Gauss200Parser::Array_expr_listContext::COMMA(size_t i) {
  return getToken(Gauss200Parser::COMMA, i);
}


size_t Gauss200Parser::Array_expr_listContext::getRuleIndex() const {
  return Gauss200Parser::RuleArray_expr_list;
}

void Gauss200Parser::Array_expr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_expr_list(this);
}

void Gauss200Parser::Array_expr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_expr_list(this);
}


antlrcpp::Any Gauss200Parser::Array_expr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitArray_expr_list(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Array_expr_listContext* Gauss200Parser::array_expr_list() {
  Array_expr_listContext *_localctx = _tracker.createInstance<Array_expr_listContext>(_ctx, getState());
  enterRule(_localctx, 1066, Gauss200Parser::RuleArray_expr_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6829);
    array_expr();
    setState(6834);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Gauss200Parser::COMMA) {
      setState(6830);
      match(Gauss200Parser::COMMA);
      setState(6831);
      array_expr();
      setState(6836);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reserved_keywords_normalContext ------------------------------------------------------------------

Gauss200Parser::Reserved_keywords_normalContext::Reserved_keywords_normalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ALL_GS() {
  return getToken(Gauss200Parser::ALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ANALYSE_GS() {
  return getToken(Gauss200Parser::ANALYSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ANALYZE_GS() {
  return getToken(Gauss200Parser::ANALYZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::AND_GS() {
  return getToken(Gauss200Parser::AND_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ANY_GS() {
  return getToken(Gauss200Parser::ANY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ARRAY_GS() {
  return getToken(Gauss200Parser::ARRAY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ASC_GS() {
  return getToken(Gauss200Parser::ASC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ASYMMETRIC_GS() {
  return getToken(Gauss200Parser::ASYMMETRIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::AS_GS() {
  return getToken(Gauss200Parser::AS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::AUTHID_GS() {
  return getToken(Gauss200Parser::AUTHID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::BOTH_GS() {
  return getToken(Gauss200Parser::BOTH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::BUCKETS_GS() {
  return getToken(Gauss200Parser::BUCKETS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CASE_GS() {
  return getToken(Gauss200Parser::CASE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CAST_GS() {
  return getToken(Gauss200Parser::CAST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CHECK_GS() {
  return getToken(Gauss200Parser::CHECK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::COLLATE_GS() {
  return getToken(Gauss200Parser::COLLATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::COLUMN_GS() {
  return getToken(Gauss200Parser::COLUMN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CONSTRAINT_GS() {
  return getToken(Gauss200Parser::CONSTRAINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CREATE_GS() {
  return getToken(Gauss200Parser::CREATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CURRENT_CATALOG_GS() {
  return getToken(Gauss200Parser::CURRENT_CATALOG_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CURRENT_DATE_GS() {
  return getToken(Gauss200Parser::CURRENT_DATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CURRENT_ROLE_GS() {
  return getToken(Gauss200Parser::CURRENT_ROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CURRENT_TIMESTAMP_GS() {
  return getToken(Gauss200Parser::CURRENT_TIMESTAMP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CURRENT_TIME_GS() {
  return getToken(Gauss200Parser::CURRENT_TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::CURRENT_USER_GS() {
  return getToken(Gauss200Parser::CURRENT_USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::DEFAULT_GS() {
  return getToken(Gauss200Parser::DEFAULT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::DEFERRABLE_GS() {
  return getToken(Gauss200Parser::DEFERRABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::DESC_GS() {
  return getToken(Gauss200Parser::DESC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::DISTINCT_GS() {
  return getToken(Gauss200Parser::DISTINCT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::DO_GS() {
  return getToken(Gauss200Parser::DO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ELSE_GS() {
  return getToken(Gauss200Parser::ELSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::END_GS() {
  return getToken(Gauss200Parser::END_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::EXCEPT_GS() {
  return getToken(Gauss200Parser::EXCEPT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::FALSE_GS() {
  return getToken(Gauss200Parser::FALSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::FETCH_GS() {
  return getToken(Gauss200Parser::FETCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::FOREIGN_GS() {
  return getToken(Gauss200Parser::FOREIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::FOR_GS() {
  return getToken(Gauss200Parser::FOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::FROM_GS() {
  return getToken(Gauss200Parser::FROM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::FUNCTION_GS() {
  return getToken(Gauss200Parser::FUNCTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::GRANT_GS() {
  return getToken(Gauss200Parser::GRANT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::GROUP_GS() {
  return getToken(Gauss200Parser::GROUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::HAVING_GS() {
  return getToken(Gauss200Parser::HAVING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::INITIALLY_GS() {
  return getToken(Gauss200Parser::INITIALLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::INTERSECT_GS() {
  return getToken(Gauss200Parser::INTERSECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::INTO_GS() {
  return getToken(Gauss200Parser::INTO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::IN_GS() {
  return getToken(Gauss200Parser::IN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::IS_GS() {
  return getToken(Gauss200Parser::IS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::LEADING_GS() {
  return getToken(Gauss200Parser::LEADING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::LESS_GS() {
  return getToken(Gauss200Parser::LESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::LIMIT_GS() {
  return getToken(Gauss200Parser::LIMIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::LOCALTIMESTAMP_GS() {
  return getToken(Gauss200Parser::LOCALTIMESTAMP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::LOCALTIME_GS() {
  return getToken(Gauss200Parser::LOCALTIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::MAXVALUE_GS() {
  return getToken(Gauss200Parser::MAXVALUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::MINUS_GS() {
  return getToken(Gauss200Parser::MINUS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::MODIFY_GS() {
  return getToken(Gauss200Parser::MODIFY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::NLSSORT_GS() {
  return getToken(Gauss200Parser::NLSSORT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::NOT_GS() {
  return getToken(Gauss200Parser::NOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::NULL_GS() {
  return getToken(Gauss200Parser::NULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::OFFSET_GS() {
  return getToken(Gauss200Parser::OFFSET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ONLY_GS() {
  return getToken(Gauss200Parser::ONLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ON_GS() {
  return getToken(Gauss200Parser::ON_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::ORDER_GS() {
  return getToken(Gauss200Parser::ORDER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::OR_GS() {
  return getToken(Gauss200Parser::OR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::PERFORMANCE_GS() {
  return getToken(Gauss200Parser::PERFORMANCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::PLACING_GS() {
  return getToken(Gauss200Parser::PLACING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::PRIMARY_GS() {
  return getToken(Gauss200Parser::PRIMARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::PROCEDURE_GS() {
  return getToken(Gauss200Parser::PROCEDURE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::REFERENCES_GS() {
  return getToken(Gauss200Parser::REFERENCES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::REJECT_GS() {
  return getToken(Gauss200Parser::REJECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::RETURNING_GS() {
  return getToken(Gauss200Parser::RETURNING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::RETURN_GS() {
  return getToken(Gauss200Parser::RETURN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::SELECT_GS() {
  return getToken(Gauss200Parser::SELECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::SESSION_USER_GS() {
  return getToken(Gauss200Parser::SESSION_USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::SOME_GS() {
  return getToken(Gauss200Parser::SOME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::SPLIT_GS() {
  return getToken(Gauss200Parser::SPLIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::SYMMETRIC_GS() {
  return getToken(Gauss200Parser::SYMMETRIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::SYSDATE_GS() {
  return getToken(Gauss200Parser::SYSDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::THEN_GS() {
  return getToken(Gauss200Parser::THEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::TO_GS() {
  return getToken(Gauss200Parser::TO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::TRAILING_GS() {
  return getToken(Gauss200Parser::TRAILING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::TRUE_GS() {
  return getToken(Gauss200Parser::TRUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::UNION_GS() {
  return getToken(Gauss200Parser::UNION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::UNIQUE_GS() {
  return getToken(Gauss200Parser::UNIQUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::USER_GS() {
  return getToken(Gauss200Parser::USER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::USING_GS() {
  return getToken(Gauss200Parser::USING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::VARIADIC_GS() {
  return getToken(Gauss200Parser::VARIADIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::WHEN_GS() {
  return getToken(Gauss200Parser::WHEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::WHERE_GS() {
  return getToken(Gauss200Parser::WHERE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::WINDOW_GS() {
  return getToken(Gauss200Parser::WINDOW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_normalContext::WITH_GS() {
  return getToken(Gauss200Parser::WITH_GS, 0);
}


size_t Gauss200Parser::Reserved_keywords_normalContext::getRuleIndex() const {
  return Gauss200Parser::RuleReserved_keywords_normal;
}

void Gauss200Parser::Reserved_keywords_normalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReserved_keywords_normal(this);
}

void Gauss200Parser::Reserved_keywords_normalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReserved_keywords_normal(this);
}


antlrcpp::Any Gauss200Parser::Reserved_keywords_normalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReserved_keywords_normal(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reserved_keywords_normalContext* Gauss200Parser::reserved_keywords_normal() {
  Reserved_keywords_normalContext *_localctx = _tracker.createInstance<Reserved_keywords_normalContext>(_ctx, getState());
  enterRule(_localctx, 1068, Gauss200Parser::RuleReserved_keywords_normal);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6837);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << Gauss200Parser::ALL_GS)
      | (1ULL << Gauss200Parser::ANALYSE_GS)
      | (1ULL << Gauss200Parser::ANALYZE_GS)
      | (1ULL << Gauss200Parser::AND_GS)
      | (1ULL << Gauss200Parser::ANY_GS)
      | (1ULL << Gauss200Parser::ARRAY_GS)
      | (1ULL << Gauss200Parser::ASC_GS)
      | (1ULL << Gauss200Parser::ASYMMETRIC_GS)
      | (1ULL << Gauss200Parser::AS_GS)
      | (1ULL << Gauss200Parser::AUTHID_GS)
      | (1ULL << Gauss200Parser::BOTH_GS)
      | (1ULL << Gauss200Parser::BUCKETS_GS)
      | (1ULL << Gauss200Parser::CASE_GS)
      | (1ULL << Gauss200Parser::CAST_GS)
      | (1ULL << Gauss200Parser::CHECK_GS)
      | (1ULL << Gauss200Parser::COLLATE_GS)
      | (1ULL << Gauss200Parser::COLUMN_GS)
      | (1ULL << Gauss200Parser::CONSTRAINT_GS)
      | (1ULL << Gauss200Parser::CREATE_GS)
      | (1ULL << Gauss200Parser::CURRENT_CATALOG_GS)
      | (1ULL << Gauss200Parser::CURRENT_DATE_GS)
      | (1ULL << Gauss200Parser::CURRENT_ROLE_GS)
      | (1ULL << Gauss200Parser::CURRENT_TIMESTAMP_GS)
      | (1ULL << Gauss200Parser::CURRENT_TIME_GS)
      | (1ULL << Gauss200Parser::CURRENT_USER_GS)
      | (1ULL << Gauss200Parser::DEFAULT_GS)
      | (1ULL << Gauss200Parser::DEFERRABLE_GS)
      | (1ULL << Gauss200Parser::DESC_GS)
      | (1ULL << Gauss200Parser::DISTINCT_GS)
      | (1ULL << Gauss200Parser::DO_GS)
      | (1ULL << Gauss200Parser::ELSE_GS)
      | (1ULL << Gauss200Parser::END_GS)
      | (1ULL << Gauss200Parser::EXCEPT_GS)
      | (1ULL << Gauss200Parser::FALSE_GS)
      | (1ULL << Gauss200Parser::FETCH_GS)
      | (1ULL << Gauss200Parser::FOREIGN_GS)
      | (1ULL << Gauss200Parser::FOR_GS)
      | (1ULL << Gauss200Parser::FROM_GS)
      | (1ULL << Gauss200Parser::FUNCTION_GS)
      | (1ULL << Gauss200Parser::GRANT_GS)
      | (1ULL << Gauss200Parser::GROUP_GS)
      | (1ULL << Gauss200Parser::HAVING_GS)
      | (1ULL << Gauss200Parser::INITIALLY_GS)
      | (1ULL << Gauss200Parser::INTERSECT_GS)
      | (1ULL << Gauss200Parser::INTO_GS)
      | (1ULL << Gauss200Parser::IN_GS)
      | (1ULL << Gauss200Parser::IS_GS)
      | (1ULL << Gauss200Parser::LEADING_GS)
      | (1ULL << Gauss200Parser::LESS_GS)
      | (1ULL << Gauss200Parser::LIMIT_GS)
      | (1ULL << Gauss200Parser::LOCALTIMESTAMP_GS)
      | (1ULL << Gauss200Parser::LOCALTIME_GS)
      | (1ULL << Gauss200Parser::MAXVALUE_GS)
      | (1ULL << Gauss200Parser::MINUS_GS)
      | (1ULL << Gauss200Parser::MODIFY_GS)
      | (1ULL << Gauss200Parser::NLSSORT_GS)
      | (1ULL << Gauss200Parser::NOT_GS)
      | (1ULL << Gauss200Parser::NULL_GS)
      | (1ULL << Gauss200Parser::OFFSET_GS)
      | (1ULL << Gauss200Parser::ONLY_GS)
      | (1ULL << Gauss200Parser::ON_GS)
      | (1ULL << Gauss200Parser::ORDER_GS)
      | (1ULL << Gauss200Parser::OR_GS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (Gauss200Parser::PERFORMANCE_GS - 64))
      | (1ULL << (Gauss200Parser::PLACING_GS - 64))
      | (1ULL << (Gauss200Parser::PRIMARY_GS - 64))
      | (1ULL << (Gauss200Parser::PROCEDURE_GS - 64))
      | (1ULL << (Gauss200Parser::REFERENCES_GS - 64))
      | (1ULL << (Gauss200Parser::REJECT_GS - 64))
      | (1ULL << (Gauss200Parser::RETURNING_GS - 64))
      | (1ULL << (Gauss200Parser::RETURN_GS - 64))
      | (1ULL << (Gauss200Parser::SELECT_GS - 64))
      | (1ULL << (Gauss200Parser::SESSION_USER_GS - 64))
      | (1ULL << (Gauss200Parser::SOME_GS - 64))
      | (1ULL << (Gauss200Parser::SPLIT_GS - 64))
      | (1ULL << (Gauss200Parser::SYMMETRIC_GS - 64))
      | (1ULL << (Gauss200Parser::SYSDATE_GS - 64))
      | (1ULL << (Gauss200Parser::THEN_GS - 64))
      | (1ULL << (Gauss200Parser::TO_GS - 64))
      | (1ULL << (Gauss200Parser::TRAILING_GS - 64))
      | (1ULL << (Gauss200Parser::TRUE_GS - 64))
      | (1ULL << (Gauss200Parser::UNION_GS - 64))
      | (1ULL << (Gauss200Parser::UNIQUE_GS - 64))
      | (1ULL << (Gauss200Parser::USER_GS - 64))
      | (1ULL << (Gauss200Parser::USING_GS - 64))
      | (1ULL << (Gauss200Parser::VARIADIC_GS - 64))
      | (1ULL << (Gauss200Parser::WHEN_GS - 64))
      | (1ULL << (Gauss200Parser::WHERE_GS - 64))
      | (1ULL << (Gauss200Parser::WINDOW_GS - 64))
      | (1ULL << (Gauss200Parser::WITH_GS - 64)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reserved_keywords_can_be_nameContext ------------------------------------------------------------------

Gauss200Parser::Reserved_keywords_can_be_nameContext::Reserved_keywords_can_be_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::AUTHORIZATION_GS() {
  return getToken(Gauss200Parser::AUTHORIZATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::BINARY_GS() {
  return getToken(Gauss200Parser::BINARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::COLLATION_GS() {
  return getToken(Gauss200Parser::COLLATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::CONCURRENTLY_GS() {
  return getToken(Gauss200Parser::CONCURRENTLY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::CURRENT_SCHEMA_GS() {
  return getToken(Gauss200Parser::CURRENT_SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::FREEZE_GS() {
  return getToken(Gauss200Parser::FREEZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::ILIKE_GS() {
  return getToken(Gauss200Parser::ILIKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::ISNULL_GS() {
  return getToken(Gauss200Parser::ISNULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::JOIN_GS() {
  return getToken(Gauss200Parser::JOIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::LEFT_GS() {
  return getToken(Gauss200Parser::LEFT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::OUTER_GS() {
  return getToken(Gauss200Parser::OUTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::INNER_GS() {
  return getToken(Gauss200Parser::INNER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::LIKE_GS() {
  return getToken(Gauss200Parser::LIKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::NATURAL_GS() {
  return getToken(Gauss200Parser::NATURAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::NOTNULL_GS() {
  return getToken(Gauss200Parser::NOTNULL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::OVERLAPS_GS() {
  return getToken(Gauss200Parser::OVERLAPS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::OVER_GS() {
  return getToken(Gauss200Parser::OVER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::SIMILAR_GS() {
  return getToken(Gauss200Parser::SIMILAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Reserved_keywords_can_be_nameContext::VERBOSE_GS() {
  return getToken(Gauss200Parser::VERBOSE_GS, 0);
}


size_t Gauss200Parser::Reserved_keywords_can_be_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleReserved_keywords_can_be_name;
}

void Gauss200Parser::Reserved_keywords_can_be_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReserved_keywords_can_be_name(this);
}

void Gauss200Parser::Reserved_keywords_can_be_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReserved_keywords_can_be_name(this);
}


antlrcpp::Any Gauss200Parser::Reserved_keywords_can_be_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitReserved_keywords_can_be_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Reserved_keywords_can_be_nameContext* Gauss200Parser::reserved_keywords_can_be_name() {
  Reserved_keywords_can_be_nameContext *_localctx = _tracker.createInstance<Reserved_keywords_can_be_nameContext>(_ctx, getState());
  enterRule(_localctx, 1070, Gauss200Parser::RuleReserved_keywords_can_be_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6839);
    _la = _input->LA(1);
    if (!(((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & ((1ULL << (Gauss200Parser::AUTHORIZATION_GS - 92))
      | (1ULL << (Gauss200Parser::BINARY_GS - 92))
      | (1ULL << (Gauss200Parser::COLLATION_GS - 92))
      | (1ULL << (Gauss200Parser::CONCURRENTLY_GS - 92))
      | (1ULL << (Gauss200Parser::CURRENT_SCHEMA_GS - 92))
      | (1ULL << (Gauss200Parser::FREEZE_GS - 92))
      | (1ULL << (Gauss200Parser::ILIKE_GS - 92))
      | (1ULL << (Gauss200Parser::INNER_GS - 92))
      | (1ULL << (Gauss200Parser::ISNULL_GS - 92))
      | (1ULL << (Gauss200Parser::JOIN_GS - 92))
      | (1ULL << (Gauss200Parser::LEFT_GS - 92))
      | (1ULL << (Gauss200Parser::LIKE_GS - 92))
      | (1ULL << (Gauss200Parser::NATURAL_GS - 92))
      | (1ULL << (Gauss200Parser::NOTNULL_GS - 92))
      | (1ULL << (Gauss200Parser::OUTER_GS - 92))
      | (1ULL << (Gauss200Parser::OVERLAPS_GS - 92))
      | (1ULL << (Gauss200Parser::OVER_GS - 92))
      | (1ULL << (Gauss200Parser::SIMILAR_GS - 92))
      | (1ULL << (Gauss200Parser::VERBOSE_GS - 92)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonreserved_keywords_normalContext ------------------------------------------------------------------

Gauss200Parser::Nonreserved_keywords_normalContext::Nonreserved_keywords_normalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ABORT_GS() {
  return getToken(Gauss200Parser::ABORT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ABSOLUTE_GS() {
  return getToken(Gauss200Parser::ABSOLUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ACCESS_GS() {
  return getToken(Gauss200Parser::ACCESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ACCOUNT_GS() {
  return getToken(Gauss200Parser::ACCOUNT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ACTION_GS() {
  return getToken(Gauss200Parser::ACTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ADD_GS() {
  return getToken(Gauss200Parser::ADD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ADMIN_GS() {
  return getToken(Gauss200Parser::ADMIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::AFTER_GS() {
  return getToken(Gauss200Parser::AFTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::AGGREGATE_GS() {
  return getToken(Gauss200Parser::AGGREGATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ALSO_GS() {
  return getToken(Gauss200Parser::ALSO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ALTER_GS() {
  return getToken(Gauss200Parser::ALTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ALWAYS_GS() {
  return getToken(Gauss200Parser::ALWAYS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::APP_GS() {
  return getToken(Gauss200Parser::APP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ASSERTION_GS() {
  return getToken(Gauss200Parser::ASSERTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ASSIGNMENT_GS() {
  return getToken(Gauss200Parser::ASSIGNMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ATTRIBUTE_GS() {
  return getToken(Gauss200Parser::ATTRIBUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::AT_GS() {
  return getToken(Gauss200Parser::AT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::AUTOEXTEND_GS() {
  return getToken(Gauss200Parser::AUTOEXTEND_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::AUTOMAPPED_GS() {
  return getToken(Gauss200Parser::AUTOMAPPED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::BACKWARD_GS() {
  return getToken(Gauss200Parser::BACKWARD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::BARRIER_GS() {
  return getToken(Gauss200Parser::BARRIER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::BEFORE_GS() {
  return getToken(Gauss200Parser::BEFORE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::BEGIN_GS() {
  return getToken(Gauss200Parser::BEGIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::BLOB_GS() {
  return getToken(Gauss200Parser::BLOB_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::BY_GS() {
  return getToken(Gauss200Parser::BY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CACHE_GS() {
  return getToken(Gauss200Parser::CACHE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CALLED_GS() {
  return getToken(Gauss200Parser::CALLED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CALL_GS() {
  return getToken(Gauss200Parser::CALL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CASCADED_GS() {
  return getToken(Gauss200Parser::CASCADED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CASCADE_GS() {
  return getToken(Gauss200Parser::CASCADE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CATALOG_GS() {
  return getToken(Gauss200Parser::CATALOG_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CHAIN_GS() {
  return getToken(Gauss200Parser::CHAIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CHARACTERISTICS_GS() {
  return getToken(Gauss200Parser::CHARACTERISTICS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CHECKPOINT_GS() {
  return getToken(Gauss200Parser::CHECKPOINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CLASS_GS() {
  return getToken(Gauss200Parser::CLASS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CLEAN_GS() {
  return getToken(Gauss200Parser::CLEAN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CLOB_GS() {
  return getToken(Gauss200Parser::CLOB_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CLOSE_GS() {
  return getToken(Gauss200Parser::CLOSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CLUSTER_GS() {
  return getToken(Gauss200Parser::CLUSTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COMMENTS_GS() {
  return getToken(Gauss200Parser::COMMENTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COMMENT_GS() {
  return getToken(Gauss200Parser::COMMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COMMITTED_GS() {
  return getToken(Gauss200Parser::COMMITTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COMMIT_GS() {
  return getToken(Gauss200Parser::COMMIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COMPRESS_GS() {
  return getToken(Gauss200Parser::COMPRESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CONFIGURATION_GS() {
  return getToken(Gauss200Parser::CONFIGURATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CONNECTION_GS() {
  return getToken(Gauss200Parser::CONNECTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CONSTRAINTS_GS() {
  return getToken(Gauss200Parser::CONSTRAINTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CONTENT_GS() {
  return getToken(Gauss200Parser::CONTENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CONTINUE_GS() {
  return getToken(Gauss200Parser::CONTINUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CONVERSION_GS() {
  return getToken(Gauss200Parser::CONVERSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COORDINATOR_GS() {
  return getToken(Gauss200Parser::COORDINATOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COPY_GS() {
  return getToken(Gauss200Parser::COPY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::COST_GS() {
  return getToken(Gauss200Parser::COST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CSV_GS() {
  return getToken(Gauss200Parser::CSV_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CURRENT_GS() {
  return getToken(Gauss200Parser::CURRENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CURSOR_GS() {
  return getToken(Gauss200Parser::CURSOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CYCLE_GS() {
  return getToken(Gauss200Parser::CYCLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DATABASE_GS() {
  return getToken(Gauss200Parser::DATABASE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DATAFILE_GS() {
  return getToken(Gauss200Parser::DATAFILE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DATA_GS() {
  return getToken(Gauss200Parser::DATA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DAY_GS() {
  return getToken(Gauss200Parser::DAY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DBCOMPATIBILITY_GS() {
  return getToken(Gauss200Parser::DBCOMPATIBILITY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DEALLOCATE_GS() {
  return getToken(Gauss200Parser::DEALLOCATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DECLARE_GS() {
  return getToken(Gauss200Parser::DECLARE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DEFAULTS_GS() {
  return getToken(Gauss200Parser::DEFAULTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DEFERRED_GS() {
  return getToken(Gauss200Parser::DEFERRED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DEFINER_GS() {
  return getToken(Gauss200Parser::DEFINER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DELETE_GS() {
  return getToken(Gauss200Parser::DELETE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DELIMITERS_GS() {
  return getToken(Gauss200Parser::DELIMITERS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DELIMITER_GS() {
  return getToken(Gauss200Parser::DELIMITER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DELTA_GS() {
  return getToken(Gauss200Parser::DELTA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DETERMINISTIC_GS() {
  return getToken(Gauss200Parser::DETERMINISTIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DICTIONARY_GS() {
  return getToken(Gauss200Parser::DICTIONARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DIRECT_GS() {
  return getToken(Gauss200Parser::DIRECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DISABLE_GS() {
  return getToken(Gauss200Parser::DISABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DISCARD_GS() {
  return getToken(Gauss200Parser::DISCARD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DISTRIBUTE_GS() {
  return getToken(Gauss200Parser::DISTRIBUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DISTRIBUTION_GS() {
  return getToken(Gauss200Parser::DISTRIBUTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DOCUMENT_GS() {
  return getToken(Gauss200Parser::DOCUMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DOMAIN_GS() {
  return getToken(Gauss200Parser::DOMAIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DOUBLE_GS() {
  return getToken(Gauss200Parser::DOUBLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::DROP_GS() {
  return getToken(Gauss200Parser::DROP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EACH_GS() {
  return getToken(Gauss200Parser::EACH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ENABLE_GS() {
  return getToken(Gauss200Parser::ENABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ENCODING_GS() {
  return getToken(Gauss200Parser::ENCODING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ENCRYPTED_GS() {
  return getToken(Gauss200Parser::ENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ENFORCED_GS() {
  return getToken(Gauss200Parser::ENFORCED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ENUM_GS() {
  return getToken(Gauss200Parser::ENUM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EOL_GS() {
  return getToken(Gauss200Parser::EOL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ESCAPE_GS() {
  return getToken(Gauss200Parser::ESCAPE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ESCAPING_GS() {
  return getToken(Gauss200Parser::ESCAPING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EVERY_GS() {
  return getToken(Gauss200Parser::EVERY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXCHANGE_GS() {
  return getToken(Gauss200Parser::EXCHANGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXCLUDE_GS() {
  return getToken(Gauss200Parser::EXCLUDE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXCLUDING_GS() {
  return getToken(Gauss200Parser::EXCLUDING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXCLUSIVE_GS() {
  return getToken(Gauss200Parser::EXCLUSIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXECUTE_GS() {
  return getToken(Gauss200Parser::EXECUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXPLAIN_GS() {
  return getToken(Gauss200Parser::EXPLAIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXTENSION_GS() {
  return getToken(Gauss200Parser::EXTENSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::EXTERNAL_GS() {
  return getToken(Gauss200Parser::EXTERNAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FAMILY_GS() {
  return getToken(Gauss200Parser::FAMILY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FILEHEADER_GS() {
  return getToken(Gauss200Parser::FILEHEADER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FIRST_GS() {
  return getToken(Gauss200Parser::FIRST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FIXED_GS() {
  return getToken(Gauss200Parser::FIXED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FOLLOWING_GS() {
  return getToken(Gauss200Parser::FOLLOWING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FORCE_GS() {
  return getToken(Gauss200Parser::FORCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FORMATTER_GS() {
  return getToken(Gauss200Parser::FORMATTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FORWARD_GS() {
  return getToken(Gauss200Parser::FORWARD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::FUNCTIONS_GS() {
  return getToken(Gauss200Parser::FUNCTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::GLOBAL_GS() {
  return getToken(Gauss200Parser::GLOBAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::GRANTED_GS() {
  return getToken(Gauss200Parser::GRANTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::HANDLER_GS() {
  return getToken(Gauss200Parser::HANDLER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::HEADER_GS() {
  return getToken(Gauss200Parser::HEADER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::HOLD_GS() {
  return getToken(Gauss200Parser::HOLD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::HOUR_GS() {
  return getToken(Gauss200Parser::HOUR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::IDENTIFIED_GS() {
  return getToken(Gauss200Parser::IDENTIFIED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::IDENTITY_GS() {
  return getToken(Gauss200Parser::IDENTITY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::IF_GS() {
  return getToken(Gauss200Parser::IF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::IMMEDIATE_GS() {
  return getToken(Gauss200Parser::IMMEDIATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::IMMUTABLE_GS() {
  return getToken(Gauss200Parser::IMMUTABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::IMPLICIT_GS() {
  return getToken(Gauss200Parser::IMPLICIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INCLUDING_GS() {
  return getToken(Gauss200Parser::INCLUDING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INCREMENT_GS() {
  return getToken(Gauss200Parser::INCREMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INDEXES_GS() {
  return getToken(Gauss200Parser::INDEXES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INDEX_GS() {
  return getToken(Gauss200Parser::INDEX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INHERITS_GS() {
  return getToken(Gauss200Parser::INHERITS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INHERIT_GS() {
  return getToken(Gauss200Parser::INHERIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INITIAL_GS() {
  return getToken(Gauss200Parser::INITIAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INITRANS_GS() {
  return getToken(Gauss200Parser::INITRANS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INLINE_GS() {
  return getToken(Gauss200Parser::INLINE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INPUT_GS() {
  return getToken(Gauss200Parser::INPUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INSENSITIVE_GS() {
  return getToken(Gauss200Parser::INSENSITIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INSERT_GS() {
  return getToken(Gauss200Parser::INSERT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INSTEAD_GS() {
  return getToken(Gauss200Parser::INSTEAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::INVOKER_GS() {
  return getToken(Gauss200Parser::INVOKER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ISOLATION_GS() {
  return getToken(Gauss200Parser::ISOLATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::KEY_GS() {
  return getToken(Gauss200Parser::KEY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LABEL_GS() {
  return getToken(Gauss200Parser::LABEL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LANGUAGE_GS() {
  return getToken(Gauss200Parser::LANGUAGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LARGE_GS() {
  return getToken(Gauss200Parser::LARGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LAST_GS() {
  return getToken(Gauss200Parser::LAST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LC_COLLATE_GS() {
  return getToken(Gauss200Parser::LC_COLLATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LC_CTYPE_GS() {
  return getToken(Gauss200Parser::LC_CTYPE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LEAKPROOF_GS() {
  return getToken(Gauss200Parser::LEAKPROOF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LEVEL_GS() {
  return getToken(Gauss200Parser::LEVEL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LISTEN_GS() {
  return getToken(Gauss200Parser::LISTEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOAD_GS() {
  return getToken(Gauss200Parser::LOAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOCAL_GS() {
  return getToken(Gauss200Parser::LOCAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOCATION_GS() {
  return getToken(Gauss200Parser::LOCATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOCK_GS() {
  return getToken(Gauss200Parser::LOCK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOGGING_GS() {
  return getToken(Gauss200Parser::LOGGING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOGIN_GS() {
  return getToken(Gauss200Parser::LOGIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOG_GS() {
  return getToken(Gauss200Parser::LOG_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::LOOP_GS() {
  return getToken(Gauss200Parser::LOOP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MAPPING_GS() {
  return getToken(Gauss200Parser::MAPPING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MATCHED_GS() {
  return getToken(Gauss200Parser::MATCHED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MATCH_GS() {
  return getToken(Gauss200Parser::MATCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MAXEXTENTS_GS() {
  return getToken(Gauss200Parser::MAXEXTENTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MAXSIZE_GS() {
  return getToken(Gauss200Parser::MAXSIZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MAXTRANS_GS() {
  return getToken(Gauss200Parser::MAXTRANS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MERGE_GS() {
  return getToken(Gauss200Parser::MERGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MINEXTENTS_GS() {
  return getToken(Gauss200Parser::MINEXTENTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MINUTE_GS() {
  return getToken(Gauss200Parser::MINUTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MINVALUE_GS() {
  return getToken(Gauss200Parser::MINVALUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MODE_GS() {
  return getToken(Gauss200Parser::MODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MONTH_GS() {
  return getToken(Gauss200Parser::MONTH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MOVEMENT_GS() {
  return getToken(Gauss200Parser::MOVEMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::MOVE_GS() {
  return getToken(Gauss200Parser::MOVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NAMES_GS() {
  return getToken(Gauss200Parser::NAMES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NAME_GS() {
  return getToken(Gauss200Parser::NAME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NEXT_GS() {
  return getToken(Gauss200Parser::NEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOCOMPRESS_GS() {
  return getToken(Gauss200Parser::NOCOMPRESS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOCYCLE_GS() {
  return getToken(Gauss200Parser::NOCYCLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NODE_GS() {
  return getToken(Gauss200Parser::NODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOLOGGING_GS() {
  return getToken(Gauss200Parser::NOLOGGING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOLOGIN_GS() {
  return getToken(Gauss200Parser::NOLOGIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOMAXVALUE_GS() {
  return getToken(Gauss200Parser::NOMAXVALUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOMINVALUE_GS() {
  return getToken(Gauss200Parser::NOMINVALUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOTHING_GS() {
  return getToken(Gauss200Parser::NOTHING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOTIFY_GS() {
  return getToken(Gauss200Parser::NOTIFY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NOWAIT_GS() {
  return getToken(Gauss200Parser::NOWAIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NO_GS() {
  return getToken(Gauss200Parser::NO_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NULLS_GS() {
  return getToken(Gauss200Parser::NULLS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::NUMSTR_GS() {
  return getToken(Gauss200Parser::NUMSTR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OBJECT_GS() {
  return getToken(Gauss200Parser::OBJECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OFF_GS() {
  return getToken(Gauss200Parser::OFF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OF_GS() {
  return getToken(Gauss200Parser::OF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OIDS_GS() {
  return getToken(Gauss200Parser::OIDS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OPERATOR_GS() {
  return getToken(Gauss200Parser::OPERATOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OPTIMIZATION_GS() {
  return getToken(Gauss200Parser::OPTIMIZATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OPTIONS_GS() {
  return getToken(Gauss200Parser::OPTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OPTION_GS() {
  return getToken(Gauss200Parser::OPTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OWNED_GS() {
  return getToken(Gauss200Parser::OWNED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::OWNER_GS() {
  return getToken(Gauss200Parser::OWNER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PARSER_GS() {
  return getToken(Gauss200Parser::PARSER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PARTIAL_GS() {
  return getToken(Gauss200Parser::PARTIAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PARTITIONS_GS() {
  return getToken(Gauss200Parser::PARTITIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PARTITION_GS() {
  return getToken(Gauss200Parser::PARTITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PASSING_GS() {
  return getToken(Gauss200Parser::PASSING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PASSWORD_GS() {
  return getToken(Gauss200Parser::PASSWORD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PCTFREE_GS() {
  return getToken(Gauss200Parser::PCTFREE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PERCENT_GS() {
  return getToken(Gauss200Parser::PERCENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PER_GS() {
  return getToken(Gauss200Parser::PER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PLANS_GS() {
  return getToken(Gauss200Parser::PLANS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::POOL_GS() {
  return getToken(Gauss200Parser::POOL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PRECEDING_GS() {
  return getToken(Gauss200Parser::PRECEDING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PREFERRED_GS() {
  return getToken(Gauss200Parser::PREFERRED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PREFIX_GS() {
  return getToken(Gauss200Parser::PREFIX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PREPARED_GS() {
  return getToken(Gauss200Parser::PREPARED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PREPARE_GS() {
  return getToken(Gauss200Parser::PREPARE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PRESERVE_GS() {
  return getToken(Gauss200Parser::PRESERVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PRIOR_GS() {
  return getToken(Gauss200Parser::PRIOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PRIVILEGES_GS() {
  return getToken(Gauss200Parser::PRIVILEGES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PRIVILEGE_GS() {
  return getToken(Gauss200Parser::PRIVILEGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PROCEDURAL_GS() {
  return getToken(Gauss200Parser::PROCEDURAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PROFILE_GS() {
  return getToken(Gauss200Parser::PROFILE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::QUERY_GS() {
  return getToken(Gauss200Parser::QUERY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::QUOTE_GS() {
  return getToken(Gauss200Parser::QUOTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RANGE_GS() {
  return getToken(Gauss200Parser::RANGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RAW_GS() {
  return getToken(Gauss200Parser::RAW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::READ_GS() {
  return getToken(Gauss200Parser::READ_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REASSIGN_GS() {
  return getToken(Gauss200Parser::REASSIGN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REBUILD_GS() {
  return getToken(Gauss200Parser::REBUILD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RECHECK_GS() {
  return getToken(Gauss200Parser::RECHECK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RECURSIVE_GS() {
  return getToken(Gauss200Parser::RECURSIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REF_GS() {
  return getToken(Gauss200Parser::REF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REINDEX_GS() {
  return getToken(Gauss200Parser::REINDEX_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RELATIVE_GS() {
  return getToken(Gauss200Parser::RELATIVE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RELEASE_GS() {
  return getToken(Gauss200Parser::RELEASE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RELOPTIONS_GS() {
  return getToken(Gauss200Parser::RELOPTIONS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REMOTE_GS() {
  return getToken(Gauss200Parser::REMOTE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RENAME_GS() {
  return getToken(Gauss200Parser::RENAME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REPEATABLE_GS() {
  return getToken(Gauss200Parser::REPEATABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REPLACE_GS() {
  return getToken(Gauss200Parser::REPLACE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REPLICA_GS() {
  return getToken(Gauss200Parser::REPLICA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RESET_GS() {
  return getToken(Gauss200Parser::RESET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RESIZE_GS() {
  return getToken(Gauss200Parser::RESIZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RESOURCE_GS() {
  return getToken(Gauss200Parser::RESOURCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RESTART_GS() {
  return getToken(Gauss200Parser::RESTART_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RESTRICT_GS() {
  return getToken(Gauss200Parser::RESTRICT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RETURNS_GS() {
  return getToken(Gauss200Parser::RETURNS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REUSE_GS() {
  return getToken(Gauss200Parser::REUSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::REVOKE_GS() {
  return getToken(Gauss200Parser::REVOKE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ROLE_GS() {
  return getToken(Gauss200Parser::ROLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ROLLBACK_GS() {
  return getToken(Gauss200Parser::ROLLBACK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ROWS_GS() {
  return getToken(Gauss200Parser::ROWS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::RULE_GS() {
  return getToken(Gauss200Parser::RULE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SAVEPOINT_GS() {
  return getToken(Gauss200Parser::SAVEPOINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SCHEMA_GS() {
  return getToken(Gauss200Parser::SCHEMA_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SCROLL_GS() {
  return getToken(Gauss200Parser::SCROLL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SEARCH_GS() {
  return getToken(Gauss200Parser::SEARCH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SECOND_GS() {
  return getToken(Gauss200Parser::SECOND_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SECURITY_GS() {
  return getToken(Gauss200Parser::SECURITY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SEQUENCES_GS() {
  return getToken(Gauss200Parser::SEQUENCES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SEQUENCE_GS() {
  return getToken(Gauss200Parser::SEQUENCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SERIALIZABLE_GS() {
  return getToken(Gauss200Parser::SERIALIZABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SERVER_GS() {
  return getToken(Gauss200Parser::SERVER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SESSION_GS() {
  return getToken(Gauss200Parser::SESSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SET_GS() {
  return getToken(Gauss200Parser::SET_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SHARE_GS() {
  return getToken(Gauss200Parser::SHARE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SHOW_GS() {
  return getToken(Gauss200Parser::SHOW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SIMPLE_GS() {
  return getToken(Gauss200Parser::SIMPLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SIZE_GS() {
  return getToken(Gauss200Parser::SIZE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SNAPSHOT_GS() {
  return getToken(Gauss200Parser::SNAPSHOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STABLE_GS() {
  return getToken(Gauss200Parser::STABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STANDALONE_GS() {
  return getToken(Gauss200Parser::STANDALONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::START_GS() {
  return getToken(Gauss200Parser::START_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STATEMENT_GS() {
  return getToken(Gauss200Parser::STATEMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STATISTICS_GS() {
  return getToken(Gauss200Parser::STATISTICS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STDIN_GS() {
  return getToken(Gauss200Parser::STDIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STDOUT_GS() {
  return getToken(Gauss200Parser::STDOUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STORAGE_GS() {
  return getToken(Gauss200Parser::STORAGE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STORE_GS() {
  return getToken(Gauss200Parser::STORE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STRICT_GS() {
  return getToken(Gauss200Parser::STRICT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::STRIP_GS() {
  return getToken(Gauss200Parser::STRIP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SUPERUSER_GS() {
  return getToken(Gauss200Parser::SUPERUSER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SYSID_GS() {
  return getToken(Gauss200Parser::SYSID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SYS_REFCURSOR_GS() {
  return getToken(Gauss200Parser::SYS_REFCURSOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SYSTEM_GS() {
  return getToken(Gauss200Parser::SYSTEM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TABLESPACE_GS() {
  return getToken(Gauss200Parser::TABLESPACE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TABLES_GS() {
  return getToken(Gauss200Parser::TABLES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TEMPLATE_GS() {
  return getToken(Gauss200Parser::TEMPLATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TEMPORARY_GS() {
  return getToken(Gauss200Parser::TEMPORARY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TEMP_GS() {
  return getToken(Gauss200Parser::TEMP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TEXT_GS() {
  return getToken(Gauss200Parser::TEXT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::THAN_GS() {
  return getToken(Gauss200Parser::THAN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TRANSACTION_GS() {
  return getToken(Gauss200Parser::TRANSACTION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TRIGGER_GS() {
  return getToken(Gauss200Parser::TRIGGER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TRUNCATE_GS() {
  return getToken(Gauss200Parser::TRUNCATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TRUSTED_GS() {
  return getToken(Gauss200Parser::TRUSTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TYPES_GS() {
  return getToken(Gauss200Parser::TYPES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::TYPE_GS() {
  return getToken(Gauss200Parser::TYPE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNBOUNDED_GS() {
  return getToken(Gauss200Parser::UNBOUNDED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNCOMMITTED_GS() {
  return getToken(Gauss200Parser::UNCOMMITTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNENCRYPTED_GS() {
  return getToken(Gauss200Parser::UNENCRYPTED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNKNOWN_GS() {
  return getToken(Gauss200Parser::UNKNOWN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNLIMITED_GS() {
  return getToken(Gauss200Parser::UNLIMITED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNLISTEN_GS() {
  return getToken(Gauss200Parser::UNLISTEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNLOCK_GS() {
  return getToken(Gauss200Parser::UNLOCK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNLOGGED_GS() {
  return getToken(Gauss200Parser::UNLOGGED_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNTIL_GS() {
  return getToken(Gauss200Parser::UNTIL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UNUSABLE_GS() {
  return getToken(Gauss200Parser::UNUSABLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::UPDATE_GS() {
  return getToken(Gauss200Parser::UPDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VACUUM_GS() {
  return getToken(Gauss200Parser::VACUUM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VALIDATE_GS() {
  return getToken(Gauss200Parser::VALIDATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VALIDATION_GS() {
  return getToken(Gauss200Parser::VALIDATION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VALIDATOR_GS() {
  return getToken(Gauss200Parser::VALIDATOR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VALID_GS() {
  return getToken(Gauss200Parser::VALID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VALUE_GS() {
  return getToken(Gauss200Parser::VALUE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VARYING_GS() {
  return getToken(Gauss200Parser::VARYING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VERSION_GS() {
  return getToken(Gauss200Parser::VERSION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VIEW_GS() {
  return getToken(Gauss200Parser::VIEW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::VOLATILE_GS() {
  return getToken(Gauss200Parser::VOLATILE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::WHITESPACE_GS() {
  return getToken(Gauss200Parser::WHITESPACE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::WITHIN_GS() {
  return getToken(Gauss200Parser::WITHIN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::WITHOUT_GS() {
  return getToken(Gauss200Parser::WITHOUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::WORKLOAD_GS() {
  return getToken(Gauss200Parser::WORKLOAD_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::WORK_GS() {
  return getToken(Gauss200Parser::WORK_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::WRAPPER_GS() {
  return getToken(Gauss200Parser::WRAPPER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::WRITE_GS() {
  return getToken(Gauss200Parser::WRITE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::XML_GS() {
  return getToken(Gauss200Parser::XML_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::YEAR_GS() {
  return getToken(Gauss200Parser::YEAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::YES_GS() {
  return getToken(Gauss200Parser::YES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ZONE_GS() {
  return getToken(Gauss200Parser::ZONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SPACE_GS() {
  return getToken(Gauss200Parser::SPACE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CONNECT_GS() {
  return getToken(Gauss200Parser::CONNECT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::CUBE_GS() {
  return getToken(Gauss200Parser::CUBE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::ROLLUP_GS() {
  return getToken(Gauss200Parser::ROLLUP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::GROUPING_GS() {
  return getToken(Gauss200Parser::GROUPING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::PATH_GS() {
  return getToken(Gauss200Parser::PATH_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SETS_GS() {
  return getToken(Gauss200Parser::SETS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::SOURCE_GS() {
  return getToken(Gauss200Parser::SOURCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_normalContext::USAGE_GS() {
  return getToken(Gauss200Parser::USAGE_GS, 0);
}


size_t Gauss200Parser::Nonreserved_keywords_normalContext::getRuleIndex() const {
  return Gauss200Parser::RuleNonreserved_keywords_normal;
}

void Gauss200Parser::Nonreserved_keywords_normalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonreserved_keywords_normal(this);
}

void Gauss200Parser::Nonreserved_keywords_normalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonreserved_keywords_normal(this);
}


antlrcpp::Any Gauss200Parser::Nonreserved_keywords_normalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNonreserved_keywords_normal(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Nonreserved_keywords_normalContext* Gauss200Parser::nonreserved_keywords_normal() {
  Nonreserved_keywords_normalContext *_localctx = _tracker.createInstance<Nonreserved_keywords_normalContext>(_ctx, getState());
  enterRule(_localctx, 1072, Gauss200Parser::RuleNonreserved_keywords_normal);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6841);
    _la = _input->LA(1);
    if (!(((((_la - 114) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 114)) & ((1ULL << (Gauss200Parser::ABORT_GS - 114))
      | (1ULL << (Gauss200Parser::ABSOLUTE_GS - 114))
      | (1ULL << (Gauss200Parser::ACCESS_GS - 114))
      | (1ULL << (Gauss200Parser::ACCOUNT_GS - 114))
      | (1ULL << (Gauss200Parser::ACTION_GS - 114))
      | (1ULL << (Gauss200Parser::ADD_GS - 114))
      | (1ULL << (Gauss200Parser::ADMIN_GS - 114))
      | (1ULL << (Gauss200Parser::AFTER_GS - 114))
      | (1ULL << (Gauss200Parser::AGGREGATE_GS - 114))
      | (1ULL << (Gauss200Parser::ALSO_GS - 114))
      | (1ULL << (Gauss200Parser::ALTER_GS - 114))
      | (1ULL << (Gauss200Parser::ALWAYS_GS - 114))
      | (1ULL << (Gauss200Parser::APP_GS - 114))
      | (1ULL << (Gauss200Parser::ASSERTION_GS - 114))
      | (1ULL << (Gauss200Parser::ASSIGNMENT_GS - 114))
      | (1ULL << (Gauss200Parser::ATTRIBUTE_GS - 114))
      | (1ULL << (Gauss200Parser::AT_GS - 114))
      | (1ULL << (Gauss200Parser::AUTOEXTEND_GS - 114))
      | (1ULL << (Gauss200Parser::AUTOMAPPED_GS - 114))
      | (1ULL << (Gauss200Parser::BACKWARD_GS - 114))
      | (1ULL << (Gauss200Parser::BARRIER_GS - 114))
      | (1ULL << (Gauss200Parser::BEFORE_GS - 114))
      | (1ULL << (Gauss200Parser::BEGIN_GS - 114))
      | (1ULL << (Gauss200Parser::BLOB_GS - 114))
      | (1ULL << (Gauss200Parser::BY_GS - 114))
      | (1ULL << (Gauss200Parser::CACHE_GS - 114))
      | (1ULL << (Gauss200Parser::CALLED_GS - 114))
      | (1ULL << (Gauss200Parser::CALL_GS - 114))
      | (1ULL << (Gauss200Parser::CASCADED_GS - 114))
      | (1ULL << (Gauss200Parser::CASCADE_GS - 114))
      | (1ULL << (Gauss200Parser::CATALOG_GS - 114))
      | (1ULL << (Gauss200Parser::CHAIN_GS - 114))
      | (1ULL << (Gauss200Parser::CHARACTERISTICS_GS - 114))
      | (1ULL << (Gauss200Parser::CHECKPOINT_GS - 114))
      | (1ULL << (Gauss200Parser::CLASS_GS - 114))
      | (1ULL << (Gauss200Parser::CLEAN_GS - 114))
      | (1ULL << (Gauss200Parser::CLOB_GS - 114))
      | (1ULL << (Gauss200Parser::CLOSE_GS - 114))
      | (1ULL << (Gauss200Parser::CLUSTER_GS - 114))
      | (1ULL << (Gauss200Parser::COMMENTS_GS - 114))
      | (1ULL << (Gauss200Parser::COMMENT_GS - 114))
      | (1ULL << (Gauss200Parser::COMMITTED_GS - 114))
      | (1ULL << (Gauss200Parser::COMMIT_GS - 114))
      | (1ULL << (Gauss200Parser::COMPRESS_GS - 114))
      | (1ULL << (Gauss200Parser::CONFIGURATION_GS - 114))
      | (1ULL << (Gauss200Parser::CONNECTION_GS - 114))
      | (1ULL << (Gauss200Parser::CONSTRAINTS_GS - 114))
      | (1ULL << (Gauss200Parser::CONTENT_GS - 114))
      | (1ULL << (Gauss200Parser::CONTINUE_GS - 114))
      | (1ULL << (Gauss200Parser::CONVERSION_GS - 114))
      | (1ULL << (Gauss200Parser::COORDINATOR_GS - 114))
      | (1ULL << (Gauss200Parser::COPY_GS - 114))
      | (1ULL << (Gauss200Parser::COST_GS - 114))
      | (1ULL << (Gauss200Parser::CSV_GS - 114))
      | (1ULL << (Gauss200Parser::CURRENT_GS - 114))
      | (1ULL << (Gauss200Parser::CURSOR_GS - 114))
      | (1ULL << (Gauss200Parser::CYCLE_GS - 114))
      | (1ULL << (Gauss200Parser::DATABASE_GS - 114))
      | (1ULL << (Gauss200Parser::DATAFILE_GS - 114))
      | (1ULL << (Gauss200Parser::DATA_GS - 114))
      | (1ULL << (Gauss200Parser::DAY_GS - 114))
      | (1ULL << (Gauss200Parser::DBCOMPATIBILITY_GS - 114))
      | (1ULL << (Gauss200Parser::DEALLOCATE_GS - 114))
      | (1ULL << (Gauss200Parser::DECLARE_GS - 114)))) != 0) || ((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & ((1ULL << (Gauss200Parser::DEFAULTS_GS - 178))
      | (1ULL << (Gauss200Parser::DEFERRED_GS - 178))
      | (1ULL << (Gauss200Parser::DEFINER_GS - 178))
      | (1ULL << (Gauss200Parser::DELETE_GS - 178))
      | (1ULL << (Gauss200Parser::DELIMITERS_GS - 178))
      | (1ULL << (Gauss200Parser::DELIMITER_GS - 178))
      | (1ULL << (Gauss200Parser::DELTA_GS - 178))
      | (1ULL << (Gauss200Parser::DETERMINISTIC_GS - 178))
      | (1ULL << (Gauss200Parser::DICTIONARY_GS - 178))
      | (1ULL << (Gauss200Parser::DIRECT_GS - 178))
      | (1ULL << (Gauss200Parser::DISABLE_GS - 178))
      | (1ULL << (Gauss200Parser::DISCARD_GS - 178))
      | (1ULL << (Gauss200Parser::DISTRIBUTE_GS - 178))
      | (1ULL << (Gauss200Parser::DISTRIBUTION_GS - 178))
      | (1ULL << (Gauss200Parser::DOCUMENT_GS - 178))
      | (1ULL << (Gauss200Parser::DOMAIN_GS - 178))
      | (1ULL << (Gauss200Parser::DOUBLE_GS - 178))
      | (1ULL << (Gauss200Parser::DROP_GS - 178))
      | (1ULL << (Gauss200Parser::EACH_GS - 178))
      | (1ULL << (Gauss200Parser::ENABLE_GS - 178))
      | (1ULL << (Gauss200Parser::ENCODING_GS - 178))
      | (1ULL << (Gauss200Parser::ENCRYPTED_GS - 178))
      | (1ULL << (Gauss200Parser::ENFORCED_GS - 178))
      | (1ULL << (Gauss200Parser::ENUM_GS - 178))
      | (1ULL << (Gauss200Parser::EOL_GS - 178))
      | (1ULL << (Gauss200Parser::ESCAPE_GS - 178))
      | (1ULL << (Gauss200Parser::ESCAPING_GS - 178))
      | (1ULL << (Gauss200Parser::EVERY_GS - 178))
      | (1ULL << (Gauss200Parser::EXCHANGE_GS - 178))
      | (1ULL << (Gauss200Parser::EXCLUDE_GS - 178))
      | (1ULL << (Gauss200Parser::EXCLUDING_GS - 178))
      | (1ULL << (Gauss200Parser::EXCLUSIVE_GS - 178))
      | (1ULL << (Gauss200Parser::EXECUTE_GS - 178))
      | (1ULL << (Gauss200Parser::EXPLAIN_GS - 178))
      | (1ULL << (Gauss200Parser::EXTENSION_GS - 178))
      | (1ULL << (Gauss200Parser::EXTERNAL_GS - 178))
      | (1ULL << (Gauss200Parser::FAMILY_GS - 178))
      | (1ULL << (Gauss200Parser::FILEHEADER_GS - 178))
      | (1ULL << (Gauss200Parser::FIRST_GS - 178))
      | (1ULL << (Gauss200Parser::FIXED_GS - 178))
      | (1ULL << (Gauss200Parser::FOLLOWING_GS - 178))
      | (1ULL << (Gauss200Parser::FORCE_GS - 178))
      | (1ULL << (Gauss200Parser::FORMATTER_GS - 178))
      | (1ULL << (Gauss200Parser::FORWARD_GS - 178))
      | (1ULL << (Gauss200Parser::FUNCTIONS_GS - 178))
      | (1ULL << (Gauss200Parser::GLOBAL_GS - 178))
      | (1ULL << (Gauss200Parser::GRANTED_GS - 178))
      | (1ULL << (Gauss200Parser::HANDLER_GS - 178))
      | (1ULL << (Gauss200Parser::HEADER_GS - 178))
      | (1ULL << (Gauss200Parser::HOLD_GS - 178))
      | (1ULL << (Gauss200Parser::HOUR_GS - 178))
      | (1ULL << (Gauss200Parser::IDENTIFIED_GS - 178))
      | (1ULL << (Gauss200Parser::IDENTITY_GS - 178))
      | (1ULL << (Gauss200Parser::IF_GS - 178))
      | (1ULL << (Gauss200Parser::IMMEDIATE_GS - 178))
      | (1ULL << (Gauss200Parser::IMMUTABLE_GS - 178))
      | (1ULL << (Gauss200Parser::IMPLICIT_GS - 178))
      | (1ULL << (Gauss200Parser::INCLUDING_GS - 178))
      | (1ULL << (Gauss200Parser::INCREMENT_GS - 178))
      | (1ULL << (Gauss200Parser::INDEXES_GS - 178))
      | (1ULL << (Gauss200Parser::INDEX_GS - 178))
      | (1ULL << (Gauss200Parser::INHERITS_GS - 178))
      | (1ULL << (Gauss200Parser::INHERIT_GS - 178))
      | (1ULL << (Gauss200Parser::INITIAL_GS - 178)))) != 0) || ((((_la - 242) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 242)) & ((1ULL << (Gauss200Parser::INITRANS_GS - 242))
      | (1ULL << (Gauss200Parser::INLINE_GS - 242))
      | (1ULL << (Gauss200Parser::INPUT_GS - 242))
      | (1ULL << (Gauss200Parser::INSENSITIVE_GS - 242))
      | (1ULL << (Gauss200Parser::INSERT_GS - 242))
      | (1ULL << (Gauss200Parser::INSTEAD_GS - 242))
      | (1ULL << (Gauss200Parser::INVOKER_GS - 242))
      | (1ULL << (Gauss200Parser::ISOLATION_GS - 242))
      | (1ULL << (Gauss200Parser::KEY_GS - 242))
      | (1ULL << (Gauss200Parser::LABEL_GS - 242))
      | (1ULL << (Gauss200Parser::LANGUAGE_GS - 242))
      | (1ULL << (Gauss200Parser::LARGE_GS - 242))
      | (1ULL << (Gauss200Parser::LAST_GS - 242))
      | (1ULL << (Gauss200Parser::LC_COLLATE_GS - 242))
      | (1ULL << (Gauss200Parser::LC_CTYPE_GS - 242))
      | (1ULL << (Gauss200Parser::LEAKPROOF_GS - 242))
      | (1ULL << (Gauss200Parser::LEVEL_GS - 242))
      | (1ULL << (Gauss200Parser::LISTEN_GS - 242))
      | (1ULL << (Gauss200Parser::LOAD_GS - 242))
      | (1ULL << (Gauss200Parser::LOCAL_GS - 242))
      | (1ULL << (Gauss200Parser::LOCATION_GS - 242))
      | (1ULL << (Gauss200Parser::LOCK_GS - 242))
      | (1ULL << (Gauss200Parser::LOGGING_GS - 242))
      | (1ULL << (Gauss200Parser::LOGIN_GS - 242))
      | (1ULL << (Gauss200Parser::LOG_GS - 242))
      | (1ULL << (Gauss200Parser::LOOP_GS - 242))
      | (1ULL << (Gauss200Parser::MAPPING_GS - 242))
      | (1ULL << (Gauss200Parser::MATCHED_GS - 242))
      | (1ULL << (Gauss200Parser::MATCH_GS - 242))
      | (1ULL << (Gauss200Parser::MAXEXTENTS_GS - 242))
      | (1ULL << (Gauss200Parser::MAXSIZE_GS - 242))
      | (1ULL << (Gauss200Parser::MAXTRANS_GS - 242))
      | (1ULL << (Gauss200Parser::MERGE_GS - 242))
      | (1ULL << (Gauss200Parser::MINEXTENTS_GS - 242))
      | (1ULL << (Gauss200Parser::MINUTE_GS - 242))
      | (1ULL << (Gauss200Parser::MINVALUE_GS - 242))
      | (1ULL << (Gauss200Parser::MODE_GS - 242))
      | (1ULL << (Gauss200Parser::MONTH_GS - 242))
      | (1ULL << (Gauss200Parser::MOVEMENT_GS - 242))
      | (1ULL << (Gauss200Parser::MOVE_GS - 242))
      | (1ULL << (Gauss200Parser::NAMES_GS - 242))
      | (1ULL << (Gauss200Parser::NAME_GS - 242))
      | (1ULL << (Gauss200Parser::NEXT_GS - 242))
      | (1ULL << (Gauss200Parser::NOCOMPRESS_GS - 242))
      | (1ULL << (Gauss200Parser::NOCYCLE_GS - 242))
      | (1ULL << (Gauss200Parser::NODE_GS - 242))
      | (1ULL << (Gauss200Parser::NOLOGGING_GS - 242))
      | (1ULL << (Gauss200Parser::NOLOGIN_GS - 242))
      | (1ULL << (Gauss200Parser::NOMAXVALUE_GS - 242))
      | (1ULL << (Gauss200Parser::NOMINVALUE_GS - 242))
      | (1ULL << (Gauss200Parser::NOTHING_GS - 242))
      | (1ULL << (Gauss200Parser::NOTIFY_GS - 242))
      | (1ULL << (Gauss200Parser::NOWAIT_GS - 242))
      | (1ULL << (Gauss200Parser::NO_GS - 242))
      | (1ULL << (Gauss200Parser::NULLS_GS - 242))
      | (1ULL << (Gauss200Parser::NUMSTR_GS - 242))
      | (1ULL << (Gauss200Parser::OBJECT_GS - 242))
      | (1ULL << (Gauss200Parser::OFF_GS - 242))
      | (1ULL << (Gauss200Parser::OF_GS - 242))
      | (1ULL << (Gauss200Parser::OIDS_GS - 242))
      | (1ULL << (Gauss200Parser::OPERATOR_GS - 242))
      | (1ULL << (Gauss200Parser::OPTIMIZATION_GS - 242))
      | (1ULL << (Gauss200Parser::OPTIONS_GS - 242))
      | (1ULL << (Gauss200Parser::OPTION_GS - 242)))) != 0) || ((((_la - 306) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 306)) & ((1ULL << (Gauss200Parser::OWNED_GS - 306))
      | (1ULL << (Gauss200Parser::OWNER_GS - 306))
      | (1ULL << (Gauss200Parser::PARSER_GS - 306))
      | (1ULL << (Gauss200Parser::PARTIAL_GS - 306))
      | (1ULL << (Gauss200Parser::PARTITIONS_GS - 306))
      | (1ULL << (Gauss200Parser::PARTITION_GS - 306))
      | (1ULL << (Gauss200Parser::PASSING_GS - 306))
      | (1ULL << (Gauss200Parser::PASSWORD_GS - 306))
      | (1ULL << (Gauss200Parser::PCTFREE_GS - 306))
      | (1ULL << (Gauss200Parser::PERCENT_GS - 306))
      | (1ULL << (Gauss200Parser::PER_GS - 306))
      | (1ULL << (Gauss200Parser::PLANS_GS - 306))
      | (1ULL << (Gauss200Parser::POOL_GS - 306))
      | (1ULL << (Gauss200Parser::PRECEDING_GS - 306))
      | (1ULL << (Gauss200Parser::PREFERRED_GS - 306))
      | (1ULL << (Gauss200Parser::PREFIX_GS - 306))
      | (1ULL << (Gauss200Parser::PREPARED_GS - 306))
      | (1ULL << (Gauss200Parser::PREPARE_GS - 306))
      | (1ULL << (Gauss200Parser::PRESERVE_GS - 306))
      | (1ULL << (Gauss200Parser::PRIOR_GS - 306))
      | (1ULL << (Gauss200Parser::PRIVILEGES_GS - 306))
      | (1ULL << (Gauss200Parser::PRIVILEGE_GS - 306))
      | (1ULL << (Gauss200Parser::PROCEDURAL_GS - 306))
      | (1ULL << (Gauss200Parser::PROFILE_GS - 306))
      | (1ULL << (Gauss200Parser::QUERY_GS - 306))
      | (1ULL << (Gauss200Parser::QUOTE_GS - 306))
      | (1ULL << (Gauss200Parser::RANGE_GS - 306))
      | (1ULL << (Gauss200Parser::RAW_GS - 306))
      | (1ULL << (Gauss200Parser::READ_GS - 306))
      | (1ULL << (Gauss200Parser::REASSIGN_GS - 306))
      | (1ULL << (Gauss200Parser::REBUILD_GS - 306))
      | (1ULL << (Gauss200Parser::RECHECK_GS - 306))
      | (1ULL << (Gauss200Parser::RECURSIVE_GS - 306))
      | (1ULL << (Gauss200Parser::REF_GS - 306))
      | (1ULL << (Gauss200Parser::REINDEX_GS - 306))
      | (1ULL << (Gauss200Parser::RELATIVE_GS - 306))
      | (1ULL << (Gauss200Parser::RELEASE_GS - 306))
      | (1ULL << (Gauss200Parser::RELOPTIONS_GS - 306))
      | (1ULL << (Gauss200Parser::REMOTE_GS - 306))
      | (1ULL << (Gauss200Parser::RENAME_GS - 306))
      | (1ULL << (Gauss200Parser::REPEATABLE_GS - 306))
      | (1ULL << (Gauss200Parser::REPLACE_GS - 306))
      | (1ULL << (Gauss200Parser::REPLICA_GS - 306))
      | (1ULL << (Gauss200Parser::RESET_GS - 306))
      | (1ULL << (Gauss200Parser::RESIZE_GS - 306))
      | (1ULL << (Gauss200Parser::RESOURCE_GS - 306))
      | (1ULL << (Gauss200Parser::RESTART_GS - 306))
      | (1ULL << (Gauss200Parser::RESTRICT_GS - 306))
      | (1ULL << (Gauss200Parser::RETURNS_GS - 306))
      | (1ULL << (Gauss200Parser::REUSE_GS - 306))
      | (1ULL << (Gauss200Parser::REVOKE_GS - 306))
      | (1ULL << (Gauss200Parser::ROLE_GS - 306))
      | (1ULL << (Gauss200Parser::ROLLBACK_GS - 306))
      | (1ULL << (Gauss200Parser::ROWS_GS - 306))
      | (1ULL << (Gauss200Parser::RULE_GS - 306))
      | (1ULL << (Gauss200Parser::SAVEPOINT_GS - 306))
      | (1ULL << (Gauss200Parser::SCHEMA_GS - 306))
      | (1ULL << (Gauss200Parser::SCROLL_GS - 306))
      | (1ULL << (Gauss200Parser::SEARCH_GS - 306))
      | (1ULL << (Gauss200Parser::SECOND_GS - 306))
      | (1ULL << (Gauss200Parser::SECURITY_GS - 306))
      | (1ULL << (Gauss200Parser::SEQUENCES_GS - 306))
      | (1ULL << (Gauss200Parser::SEQUENCE_GS - 306))
      | (1ULL << (Gauss200Parser::SERIALIZABLE_GS - 306)))) != 0) || ((((_la - 370) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 370)) & ((1ULL << (Gauss200Parser::SERVER_GS - 370))
      | (1ULL << (Gauss200Parser::SESSION_GS - 370))
      | (1ULL << (Gauss200Parser::SET_GS - 370))
      | (1ULL << (Gauss200Parser::SHARE_GS - 370))
      | (1ULL << (Gauss200Parser::SHOW_GS - 370))
      | (1ULL << (Gauss200Parser::SIMPLE_GS - 370))
      | (1ULL << (Gauss200Parser::SIZE_GS - 370))
      | (1ULL << (Gauss200Parser::SNAPSHOT_GS - 370))
      | (1ULL << (Gauss200Parser::STABLE_GS - 370))
      | (1ULL << (Gauss200Parser::STANDALONE_GS - 370))
      | (1ULL << (Gauss200Parser::START_GS - 370))
      | (1ULL << (Gauss200Parser::STATEMENT_GS - 370))
      | (1ULL << (Gauss200Parser::STATISTICS_GS - 370))
      | (1ULL << (Gauss200Parser::STDIN_GS - 370))
      | (1ULL << (Gauss200Parser::STDOUT_GS - 370))
      | (1ULL << (Gauss200Parser::STORAGE_GS - 370))
      | (1ULL << (Gauss200Parser::STORE_GS - 370))
      | (1ULL << (Gauss200Parser::STRICT_GS - 370))
      | (1ULL << (Gauss200Parser::STRIP_GS - 370))
      | (1ULL << (Gauss200Parser::SUPERUSER_GS - 370))
      | (1ULL << (Gauss200Parser::SYSID_GS - 370))
      | (1ULL << (Gauss200Parser::SYS_REFCURSOR_GS - 370))
      | (1ULL << (Gauss200Parser::SYSTEM_GS - 370))
      | (1ULL << (Gauss200Parser::TABLESPACE_GS - 370))
      | (1ULL << (Gauss200Parser::TABLES_GS - 370))
      | (1ULL << (Gauss200Parser::TEMPLATE_GS - 370))
      | (1ULL << (Gauss200Parser::TEMPORARY_GS - 370))
      | (1ULL << (Gauss200Parser::TEMP_GS - 370))
      | (1ULL << (Gauss200Parser::TEXT_GS - 370))
      | (1ULL << (Gauss200Parser::THAN_GS - 370))
      | (1ULL << (Gauss200Parser::TRANSACTION_GS - 370))
      | (1ULL << (Gauss200Parser::TRIGGER_GS - 370))
      | (1ULL << (Gauss200Parser::TRUNCATE_GS - 370))
      | (1ULL << (Gauss200Parser::TRUSTED_GS - 370))
      | (1ULL << (Gauss200Parser::TYPES_GS - 370))
      | (1ULL << (Gauss200Parser::TYPE_GS - 370))
      | (1ULL << (Gauss200Parser::UNBOUNDED_GS - 370))
      | (1ULL << (Gauss200Parser::UNCOMMITTED_GS - 370))
      | (1ULL << (Gauss200Parser::UNENCRYPTED_GS - 370))
      | (1ULL << (Gauss200Parser::UNKNOWN_GS - 370))
      | (1ULL << (Gauss200Parser::UNLIMITED_GS - 370))
      | (1ULL << (Gauss200Parser::UNLISTEN_GS - 370))
      | (1ULL << (Gauss200Parser::UNLOCK_GS - 370))
      | (1ULL << (Gauss200Parser::UNLOGGED_GS - 370))
      | (1ULL << (Gauss200Parser::UNTIL_GS - 370))
      | (1ULL << (Gauss200Parser::UNUSABLE_GS - 370))
      | (1ULL << (Gauss200Parser::UPDATE_GS - 370))
      | (1ULL << (Gauss200Parser::VACUUM_GS - 370))
      | (1ULL << (Gauss200Parser::VALIDATE_GS - 370))
      | (1ULL << (Gauss200Parser::VALIDATION_GS - 370))
      | (1ULL << (Gauss200Parser::VALIDATOR_GS - 370))
      | (1ULL << (Gauss200Parser::VALID_GS - 370))
      | (1ULL << (Gauss200Parser::VALUE_GS - 370))
      | (1ULL << (Gauss200Parser::VARYING_GS - 370))
      | (1ULL << (Gauss200Parser::VERSION_GS - 370))
      | (1ULL << (Gauss200Parser::VIEW_GS - 370))
      | (1ULL << (Gauss200Parser::VOLATILE_GS - 370))
      | (1ULL << (Gauss200Parser::WHITESPACE_GS - 370))
      | (1ULL << (Gauss200Parser::WITHIN_GS - 370))
      | (1ULL << (Gauss200Parser::WITHOUT_GS - 370))
      | (1ULL << (Gauss200Parser::WORKLOAD_GS - 370))
      | (1ULL << (Gauss200Parser::WORK_GS - 370))
      | (1ULL << (Gauss200Parser::WRAPPER_GS - 370))
      | (1ULL << (Gauss200Parser::WRITE_GS - 370)))) != 0) || ((((_la - 434) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 434)) & ((1ULL << (Gauss200Parser::XML_GS - 434))
      | (1ULL << (Gauss200Parser::YEAR_GS - 434))
      | (1ULL << (Gauss200Parser::YES_GS - 434))
      | (1ULL << (Gauss200Parser::ZONE_GS - 434)))) != 0) || ((((_la - 507) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 507)) & ((1ULL << (Gauss200Parser::PATH_GS - 507))
      | (1ULL << (Gauss200Parser::SOURCE_GS - 507))
      | (1ULL << (Gauss200Parser::USAGE_GS - 507))
      | (1ULL << (Gauss200Parser::SPACE_GS - 507)))) != 0) || ((((_la - 601) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 601)) & ((1ULL << (Gauss200Parser::CONNECT_GS - 601))
      | (1ULL << (Gauss200Parser::ROLLUP_GS - 601))
      | (1ULL << (Gauss200Parser::CUBE_GS - 601))
      | (1ULL << (Gauss200Parser::GROUPING_GS - 601))
      | (1ULL << (Gauss200Parser::SETS_GS - 601)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_keywords_but_tokenContext ------------------------------------------------------------------

Gauss200Parser::Non_keywords_but_tokenContext::Non_keywords_but_tokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Non_keywords_but_tokenContext::SERIAL_GS() {
  return getToken(Gauss200Parser::SERIAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Non_keywords_but_tokenContext::OID_GS() {
  return getToken(Gauss200Parser::OID_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Non_keywords_but_tokenContext::PUBLIC_GS() {
  return getToken(Gauss200Parser::PUBLIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Non_keywords_but_tokenContext::FORMAT_GS() {
  return getToken(Gauss200Parser::FORMAT_GS, 0);
}


size_t Gauss200Parser::Non_keywords_but_tokenContext::getRuleIndex() const {
  return Gauss200Parser::RuleNon_keywords_but_token;
}

void Gauss200Parser::Non_keywords_but_tokenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_keywords_but_token(this);
}

void Gauss200Parser::Non_keywords_but_tokenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_keywords_but_token(this);
}


antlrcpp::Any Gauss200Parser::Non_keywords_but_tokenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNon_keywords_but_token(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Non_keywords_but_tokenContext* Gauss200Parser::non_keywords_but_token() {
  Non_keywords_but_tokenContext *_localctx = _tracker.createInstance<Non_keywords_but_tokenContext>(_ctx, getState());
  enterRule(_localctx, 1074, Gauss200Parser::RuleNon_keywords_but_token);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6843);
    _la = _input->LA(1);
    if (!(((((_la - 496) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 496)) & ((1ULL << (Gauss200Parser::SERIAL_GS - 496))
      | (1ULL << (Gauss200Parser::OID_GS - 496))
      | (1ULL << (Gauss200Parser::PUBLIC_GS - 496)))) != 0) || _la == Gauss200Parser::FORMAT_GS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonreserved_keywords_can_not_be_nameContext ------------------------------------------------------------------

Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::Nonreserved_keywords_can_not_be_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::BETWEEN_GS() {
  return getToken(Gauss200Parser::BETWEEN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::BIGINT_GS() {
  return getToken(Gauss200Parser::BIGINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::BINARY_DOUBLE_GS() {
  return getToken(Gauss200Parser::BINARY_DOUBLE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::BINARY_INTEGER_GS() {
  return getToken(Gauss200Parser::BINARY_INTEGER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::BIT_GS() {
  return getToken(Gauss200Parser::BIT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::BOOLEAN_GS() {
  return getToken(Gauss200Parser::BOOLEAN_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::CHARACTER_GS() {
  return getToken(Gauss200Parser::CHARACTER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::CHAR_GS() {
  return getToken(Gauss200Parser::CHAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::COALESCE_GS() {
  return getToken(Gauss200Parser::COALESCE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::DATE_GS() {
  return getToken(Gauss200Parser::DATE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::DECIMAL_GS() {
  return getToken(Gauss200Parser::DECIMAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::DECODE_GS() {
  return getToken(Gauss200Parser::DECODE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::DEC_GS() {
  return getToken(Gauss200Parser::DEC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::EXISTS_GS() {
  return getToken(Gauss200Parser::EXISTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::EXTRACT_GS() {
  return getToken(Gauss200Parser::EXTRACT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::FLOAT_GS() {
  return getToken(Gauss200Parser::FLOAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::GREATEST_GS() {
  return getToken(Gauss200Parser::GREATEST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::INOUT_GS() {
  return getToken(Gauss200Parser::INOUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::INTEGER_GS() {
  return getToken(Gauss200Parser::INTEGER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::INTERVAL_GS() {
  return getToken(Gauss200Parser::INTERVAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::INT_GS() {
  return getToken(Gauss200Parser::INT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::LEAST_GS() {
  return getToken(Gauss200Parser::LEAST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NATIONAL_GS() {
  return getToken(Gauss200Parser::NATIONAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NCHAR_GS() {
  return getToken(Gauss200Parser::NCHAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NONE_GS() {
  return getToken(Gauss200Parser::NONE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NULLIF_GS() {
  return getToken(Gauss200Parser::NULLIF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NUMBER_GS() {
  return getToken(Gauss200Parser::NUMBER_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NUMERIC_GS() {
  return getToken(Gauss200Parser::NUMERIC_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NVARCHAR2_GS() {
  return getToken(Gauss200Parser::NVARCHAR2_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::NVL_GS() {
  return getToken(Gauss200Parser::NVL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::OUT_GS() {
  return getToken(Gauss200Parser::OUT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::OVERLAY_GS() {
  return getToken(Gauss200Parser::OVERLAY_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::POSITION_GS() {
  return getToken(Gauss200Parser::POSITION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::PRECISION_GS() {
  return getToken(Gauss200Parser::PRECISION_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::REAL_GS() {
  return getToken(Gauss200Parser::REAL_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::ROW_GS() {
  return getToken(Gauss200Parser::ROW_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::SETOF_GS() {
  return getToken(Gauss200Parser::SETOF_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::SMALLDATETIME_GS() {
  return getToken(Gauss200Parser::SMALLDATETIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::SMALLINT_GS() {
  return getToken(Gauss200Parser::SMALLINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::SUBSTRING_GS() {
  return getToken(Gauss200Parser::SUBSTRING_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::TIMESTAMP_GS() {
  return getToken(Gauss200Parser::TIMESTAMP_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::TIME_GS() {
  return getToken(Gauss200Parser::TIME_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::TINYINT_GS() {
  return getToken(Gauss200Parser::TINYINT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::TREAT_GS() {
  return getToken(Gauss200Parser::TREAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::TRIM_GS() {
  return getToken(Gauss200Parser::TRIM_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::VALUES_GS() {
  return getToken(Gauss200Parser::VALUES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::VARCHAR2_GS() {
  return getToken(Gauss200Parser::VARCHAR2_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::VARCHAR_GS() {
  return getToken(Gauss200Parser::VARCHAR_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLATTRIBUTES_GS() {
  return getToken(Gauss200Parser::XMLATTRIBUTES_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLCONCAT_GS() {
  return getToken(Gauss200Parser::XMLCONCAT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLELEMENT_GS() {
  return getToken(Gauss200Parser::XMLELEMENT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLEXISTS_GS() {
  return getToken(Gauss200Parser::XMLEXISTS_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLFOREST_GS() {
  return getToken(Gauss200Parser::XMLFOREST_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLPARSE_GS() {
  return getToken(Gauss200Parser::XMLPARSE_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLPI_GS() {
  return getToken(Gauss200Parser::XMLPI_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLROOT_GS() {
  return getToken(Gauss200Parser::XMLROOT_GS, 0);
}

tree::TerminalNode* Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::XMLSERIALIZE_GS() {
  return getToken(Gauss200Parser::XMLSERIALIZE_GS, 0);
}


size_t Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::getRuleIndex() const {
  return Gauss200Parser::RuleNonreserved_keywords_can_not_be_name;
}

void Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonreserved_keywords_can_not_be_name(this);
}

void Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Gauss200ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonreserved_keywords_can_not_be_name(this);
}


antlrcpp::Any Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Gauss200ParserVisitor*>(visitor))
    return parserVisitor->visitNonreserved_keywords_can_not_be_name(this);
  else
    return visitor->visitChildren(this);
}

Gauss200Parser::Nonreserved_keywords_can_not_be_nameContext* Gauss200Parser::nonreserved_keywords_can_not_be_name() {
  Nonreserved_keywords_can_not_be_nameContext *_localctx = _tracker.createInstance<Nonreserved_keywords_can_not_be_nameContext>(_ctx, getState());
  enterRule(_localctx, 1076, Gauss200Parser::RuleNonreserved_keywords_can_not_be_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6845);
    _la = _input->LA(1);
    if (!(((((_la - 438) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 438)) & ((1ULL << (Gauss200Parser::BETWEEN_GS - 438))
      | (1ULL << (Gauss200Parser::BIGINT_GS - 438))
      | (1ULL << (Gauss200Parser::BINARY_DOUBLE_GS - 438))
      | (1ULL << (Gauss200Parser::BINARY_INTEGER_GS - 438))
      | (1ULL << (Gauss200Parser::BIT_GS - 438))
      | (1ULL << (Gauss200Parser::BOOLEAN_GS - 438))
      | (1ULL << (Gauss200Parser::CHARACTER_GS - 438))
      | (1ULL << (Gauss200Parser::CHAR_GS - 438))
      | (1ULL << (Gauss200Parser::COALESCE_GS - 438))
      | (1ULL << (Gauss200Parser::DATE_GS - 438))
      | (1ULL << (Gauss200Parser::DECIMAL_GS - 438))
      | (1ULL << (Gauss200Parser::DECODE_GS - 438))
      | (1ULL << (Gauss200Parser::DEC_GS - 438))
      | (1ULL << (Gauss200Parser::EXISTS_GS - 438))
      | (1ULL << (Gauss200Parser::EXTRACT_GS - 438))
      | (1ULL << (Gauss200Parser::FLOAT_GS - 438))
      | (1ULL << (Gauss200Parser::GREATEST_GS - 438))
      | (1ULL << (Gauss200Parser::INOUT_GS - 438))
      | (1ULL << (Gauss200Parser::INTEGER_GS - 438))
      | (1ULL << (Gauss200Parser::INTERVAL_GS - 438))
      | (1ULL << (Gauss200Parser::INT_GS - 438))
      | (1ULL << (Gauss200Parser::LEAST_GS - 438))
      | (1ULL << (Gauss200Parser::NATIONAL_GS - 438))
      | (1ULL << (Gauss200Parser::NCHAR_GS - 438))
      | (1ULL << (Gauss200Parser::NONE_GS - 438))
      | (1ULL << (Gauss200Parser::NULLIF_GS - 438))
      | (1ULL << (Gauss200Parser::NUMBER_GS - 438))
      | (1ULL << (Gauss200Parser::NUMERIC_GS - 438))
      | (1ULL << (Gauss200Parser::NVARCHAR2_GS - 438))
      | (1ULL << (Gauss200Parser::NVL_GS - 438))
      | (1ULL << (Gauss200Parser::OUT_GS - 438))
      | (1ULL << (Gauss200Parser::OVERLAY_GS - 438))
      | (1ULL << (Gauss200Parser::POSITION_GS - 438))
      | (1ULL << (Gauss200Parser::PRECISION_GS - 438))
      | (1ULL << (Gauss200Parser::REAL_GS - 438))
      | (1ULL << (Gauss200Parser::ROW_GS - 438))
      | (1ULL << (Gauss200Parser::SETOF_GS - 438))
      | (1ULL << (Gauss200Parser::SMALLDATETIME_GS - 438))
      | (1ULL << (Gauss200Parser::SMALLINT_GS - 438))
      | (1ULL << (Gauss200Parser::SUBSTRING_GS - 438))
      | (1ULL << (Gauss200Parser::TIMESTAMP_GS - 438))
      | (1ULL << (Gauss200Parser::TIME_GS - 438))
      | (1ULL << (Gauss200Parser::TINYINT_GS - 438))
      | (1ULL << (Gauss200Parser::TREAT_GS - 438))
      | (1ULL << (Gauss200Parser::TRIM_GS - 438))
      | (1ULL << (Gauss200Parser::VALUES_GS - 438))
      | (1ULL << (Gauss200Parser::VARCHAR2_GS - 438))
      | (1ULL << (Gauss200Parser::VARCHAR_GS - 438))
      | (1ULL << (Gauss200Parser::XMLATTRIBUTES_GS - 438))
      | (1ULL << (Gauss200Parser::XMLCONCAT_GS - 438))
      | (1ULL << (Gauss200Parser::XMLELEMENT_GS - 438))
      | (1ULL << (Gauss200Parser::XMLEXISTS_GS - 438))
      | (1ULL << (Gauss200Parser::XMLFOREST_GS - 438))
      | (1ULL << (Gauss200Parser::XMLPARSE_GS - 438))
      | (1ULL << (Gauss200Parser::XMLPI_GS - 438))
      | (1ULL << (Gauss200Parser::XMLROOT_GS - 438))
      | (1ULL << (Gauss200Parser::XMLSERIALIZE_GS - 438)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool Gauss200Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 298: return table_refSempred(dynamic_cast<Table_refContext *>(context), predicateIndex);
    case 467: return logical_exprSempred(dynamic_cast<Logical_exprContext *>(context), predicateIndex);
    case 469: return relational_exprSempred(dynamic_cast<Relational_exprContext *>(context), predicateIndex);
    case 475: return concatenationSempred(dynamic_cast<ConcatenationContext *>(context), predicateIndex);
    case 478: return unary_exprSempred(dynamic_cast<Unary_exprContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool Gauss200Parser::table_refSempred(Table_refContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Gauss200Parser::logical_exprSempred(Logical_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 2);
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Gauss200Parser::relational_exprSempred(Relational_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool Gauss200Parser::concatenationSempred(ConcatenationContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 7);
    case 5: return precpred(_ctx, 6);
    case 6: return precpred(_ctx, 5);
    case 7: return precpred(_ctx, 4);
    case 8: return precpred(_ctx, 3);
    case 9: return precpred(_ctx, 2);
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Gauss200Parser::unary_exprSempred(Unary_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 11);
    case 12: return precpred(_ctx, 8);
    case 13: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> Gauss200Parser::_decisionToDFA;
atn::PredictionContextCache Gauss200Parser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN Gauss200Parser::_atn;
std::vector<uint16_t> Gauss200Parser::_serializedATN;

std::vector<std::string> Gauss200Parser::_ruleNames = {
  "stmtblock", "stmtmulti", "sql_stmt", "stmt", "other_stmt", "begin_stmt", 
  "abort_stmt", "work_transaction", "alter_group_mapping_stmt", "app_name", 
  "paren_assignment_stmt_list", "assignment_stmt_list", "assignment_stmt", 
  "assignment_value", "alter_database_stmt", "database_name", "alter_database_option", 
  "connection_limit", "integer", "rename_owner_to_option", "rename_to_option", 
  "owner_to_option", "new_name", "set_configuration_param", "configuration_param_value", 
  "reset_configuration_param", "configuration_param", "alter_data_source_stmt", 
  "src_name", "alter_data_src_option", "data_src_type_version_option", "alter_property_options", 
  "alter_property_option", "optname", "alter_default_privilege_stmt", "target_role_list", 
  "target_role", "schema_name_list", "schema_name", "abbreviated_grant_or_revoke", 
  "grant_on_tables_clause", "all_privileges", "table_privileges", "table_privilege", 
  "grant_revoke_objects", "grant_revoke_obj", "role_name", "with_grant_option", 
  "grant_on_functions_clause", "function_privilege", "grant_on_types_clause", 
  "type_privilege", "revoke_on_tables_clause", "grant_option_for", "cascade_restrict", 
  "revoke_on_functions_clause", "revoke_on_types_clause", "alter_directory_stmt", 
  "directory_name", "alter_foreign_table_stmt", "if_exists_or_not", "table_name", 
  "attr", "alter_foreign_table_option", "alter_foreign_table_action_list", 
  "alter_foreign_table_action", "column_name", "alter_foreign_table_action_option", 
  "alter_set_statistics_option", "alter_add_information_constraint", "column_constraint_primary_unique", 
  "constraint_name", "add_info_constraint_option", "alter_drop_information_constraint", 
  "alter_function_stmt", "function_with_argtypes", "func_args", "func_args_list", 
  "func_arg", "argmode", "param_name", "alter_func_option", "alter_function_action", 
  "alter_set_schema", "alter_group_stmt", "group_name", "alter_group_option", 
  "user_name_list", "user_name", "alter_index_stmt", "index_name", "alter_index_option", 
  "set_tablespace_option", "tablespace_name_option", "set_assignment_list", 
  "reset_param_list", "tablespace_name", "parameter_list", "parameter_name", 
  "partition_name", "alter_large_obj_stmt", "alter_node_stmt", "nodename", 
  "paren_node_list", "node_list", "alter_node_option", "alter_node_group_stmt", 
  "alter_node_group_option", "add_node_list", "delete_node_list", "alter_resource_pool_stmt", 
  "pool_name", "alter_role_stmt", "alter_role_option", "role_option_common", 
  "alter_role_with_option", "alter_role_encrypt_option", "logic_cluster_name", 
  "alter_role_level_security_policy_stmt", "row_level_security", "policy_name", 
  "alter_role_level_security_policy_option", "using_expr_option", "alter_schema_stmt", 
  "alter_sequence_stmt", "sequence_name", "alter_seq_option", "alter_server_stmt", 
  "server_name", "alter_server_option", "alter_session_stmt", "alter_session_option", 
  "alter_session_transaction_param_list", "alter_session_transaction_param", 
  "alter_session_runtime_param", "expr_default", "encoding_name", "alter_sys_kill_session_stmt", 
  "alter_table_stmt", "alter_table_name", "alter_table_stmt_option", "alter_table_option", 
  "alter_table_action_list", "alter_table_action", "column_clause", "column_clause_add_column_option", 
  "column_with_type", "compress_type", "collate_option", "collation", "alter_table_column_constraint", 
  "column_constraint_option", "column_clause_alter_column_option", "alter_table_constraint", 
  "alter_table_constraint_option", "paren_column_list", "index_parameters", 
  "table_constraint_deferrable", "table_constraint_using_index", "trigger_name", 
  "alter_table_partition_option", "alter_table_partition_action", "move_clause", 
  "paren_partition_value_list", "paren_partition_value", "partition_value", 
  "exchange_clause", "row_clause", "merge_clause", "modify_clause", "split_clause", 
  "split_point_clause", "split_point_clause_option", "no_split_point_clause", 
  "partition_item_list", "partition_item", "partition_less_than_item", "partition_start_end_item", 
  "partition_start_end_item_option", "add_clause", "drop_clause", "alter_tablespace_stmt", 
  "alter_tablespace_option", "alter_txt_search_conf_stmt", "configuration_name", 
  "alter_txt_search_conf_option", "token_type_list", "token_type", "dictionary_name_list", 
  "dictionary_name", "alter_txt_search_dictionary_stmt", "alter_txt_search_dictionary_option", 
  "alter_trigger_stmt", "alter_type_stmt", "type_name", "alter_type_option", 
  "alter_type_action_list", "alter_type_action", "attr_name", "enum_value", 
  "alter_type_add_attr_option", "alter_type_drop_attr_option", "alter_type_alter_attr", 
  "alter_user_stmt", "alter_user_clause", "alter_view_stmt", "view_name", 
  "alter_view_option", "workload_group_stmt", "create_group_mapping_stmt", 
  "create_barrier_stmt", "barrier_name", "create_database_stmt", "create_data_source_stmt", 
  "create_directory_stmt", "or_replace", "create_foreign_table_stmt", "create_foreign_table_option", 
  "create_foreign_table_import_export_option", "foreign_table_import_export_column_type_list", 
  "foreign_table_import_export_column_type", "table_constraint_to_group_node", 
  "create_foreign_table_on_hadoop_option", "foreign_table_on_hadoop_column_type_list", 
  "foreign_table_on_hadoop_column_type", "create_foreign_table_column_constraint", 
  "create_function_procedure_stmt", "create_function_procedure_clause", 
  "create_func_arg_list", "create_func_arg", "func_return_type", "lang_name", 
  "create_func_procedure_as_option", "plsqlbody", "variable_declarations", 
  "variable_declaration", "default_value_part", "cursor_declaration", "parameter_spec", 
  "sequence_of_statements", "sequence_of_statement", "create_group_stmt", 
  "create_index_stmt", "create_index_column_list", "create_index_column", 
  "opclass", "asc_desc", "nulls_first_last", "create_node_stmt", "create_node_group_stmt", 
  "create_row_level_security_policy_stmt", "row_level_security_policy_objects", 
  "row_level_security_policy_obj", "create_resource_pool_stmt", "create_role_stmt", 
  "create_role_with_option", "profile_name", "create_schema_stmt", "create_schema_option", 
  "schema_element", "create_sequence_stmt", "minvalue_option", "maxvalue_option", 
  "create_server_stmt", "create_table_stmt", "temporary_temp", "create_table_column_type_option_list", 
  "create_table_column_type_option", "like_option", "like_option_other", 
  "create_table_stmt_option", "create_table_as_option", "partition_by_option", 
  "paren_partition_key", "partition_key", "create_tablespace_stmt", "create_txt_search_stmt", 
  "create_trigger_stmt", "trigger_type", "trigger_event_list", "trigger_event", 
  "create_type_stmt", "create_type_option", "create_user_stmt", "create_view_stmt", 
  "data_manipulate_stmt", "select_stmt", "subquery_basic_elements", "select_with_parens", 
  "subquery_operation_part", "subquery", "simple_select", "all_distinct", 
  "selected_list", "selected_list_element", "into_clause", "from_clause", 
  "from_list", "table_ref", "partition_clause", "table_alias", "table_sampling_clause", 
  "sample_method", "join_type", "using_clause", "group_by_clause", "grouping_elements", 
  "grouping_element", "paren_group_element_expr_list", "group_element_expr", 
  "having_clause", "window_clause", "window_clause_options", "window_clause_option", 
  "window_name", "window_definition", "frame_clause", "frame_start_end", 
  "order_by_clause", "order_by_clause_options", "order_by_clause_option", 
  "order_by_clause_expr", "nlssort_expression_clause", "limit_clause", "offset_clause", 
  "fetch_clause", "for_update_share_clause", "insert_stmt", "insert_values_option", 
  "values_expression", "update_stmt", "update_set_clause", "delete_stmt", 
  "with_clause", "with_query", "with_query_name", "as_alias", "alias_name", 
  "where_clause", "return_clause", "output_expr_alias", "drop_database_stmt", 
  "drop_group_mapping_stmt", "drop_data_source_stmt", "drop_directory_stmt", 
  "drop_foreign_table_stmt", "drop_function_stmt", "drop_group_stmt", "drop_index_stmt", 
  "drop_node_stmt", "drop_node_group_stmt", "drop_owned_stmt", "drop_row_level_security_policy_stmt", 
  "drop_procedure_stmt", "drop_resource_pool_stmt", "drop_role_stmt", "drop_schema_stmt", 
  "drop_sequence_stmt", "drop_name_list", "drop_name", "drop_server_stmt", 
  "drop_table_stmt", "drop_tablespace_stmt", "drop_txt_search_stmt", "drop_trigger_stmt", 
  "drop_type_stmt", "drop_user_stmt", "drop_view_stmt", "drop_workload_group_stmt", 
  "analyze_stmt", "analyze_keyword", "analyze_option", "partition_name_option", 
  "call_stmt", "param_expr_list", "param_expr", "param_op", "checkpoint_stmt", 
  "clean_connection_stmt", "close_stmt", "cursor_name", "cluster_stmt", 
  "cluster_stmt_option", "comment_stmt", "comment_stmt_option", "agg_name", 
  "object_name", "commit_end_stmt", "commit_prepared_stmt", "copy_stmt", 
  "copy_obj", "copy_stmt_clause", "copy_stmt_option", "paren_copy_clause_option_list", 
  "copy_clause_option", "column_offset_list", "column_offset_ele", "copy_option", 
  "copy_clause_common_option", "boolean_value", "cursor_stmt", "deallocate_stmt", 
  "do_stmt", "do_stmt_code", "execute_stmts", "execute_stmt", "execute_direct_stmt", 
  "explain_stmt", "explain_option_list", "explain_option", "explain_plan_stmt", 
  "fetch_move_stmt", "fetch_direction_clause", "grant_stmt", "privileges_for_obj", 
  "database_privileges", "database_privilege", "cluster_privilege", "grant_on_option", 
  "grant_on_function_option_list", "grant_on_function_option", "lock_stmt", 
  "lock_in_mode", "in_mode_option", "prepare_stmt", "prepare_transaction_stmt", 
  "merge_into_stmt", "on_condition_clause", "when_matched_update_clause", 
  "update_set_column_option", "when_not_matched_insert_clause", "not_matched_insert_value_option", 
  "not_matched_insert_value", "reassign_owned_stmt", "reindex_stmt", "reindex_option", 
  "release_savepoint_stmt", "reset_stmt", "savepoint_name", "revoke_stmt", 
  "admin_option_for", "rollback_stmt", "savepoint_stmt", "set_reset_stmt", 
  "set_config_parameters", "session_local", "set_parameter_option", "timezone", 
  "set_constraints", "set_role", "reset_config_parameters", "set_session_authorization", 
  "set_transaction", "isolation_level_options", "isolation_level_option", 
  "show_stmt", "start_transaction_stmt", "start_transaction_option", "truncate_stmt", 
  "vacuum_stmt", "vacuum_keyword_list", "vacuum_keyword", "vacuum_option", 
  "values_stmt", "paren_expr_list", "expression_list", "expression", "logical_expr", 
  "multiset_expr", "relational_expr", "relational_op", "compound_expr", 
  "in_expr", "between_elements", "concatenation_list", "concatenation", 
  "geometry_op1", "model_expr", "unary_expr", "geometry_op2", "typename_gs", 
  "precision_part", "numeric", "number_type", "concurrency_type", "boolean_type", 
  "char_type", "binary_type", "date_type", "time_zone_part", "geometry_type", 
  "inet_type", "bit_type", "txt_search_type", "hll_type", "oid_type", "other_type", 
  "typecast_arg", "function_expr", "col_label", "xmlelement_part", "xml_root_version", 
  "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", "xml_attribute_el", 
  "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
  "extract_list", "extract_arg", "overlay_list", "overlay_placing", "position_list", 
  "substr_list", "substr_from", "substr_for", "trim_list", "simple_function", 
  "func_name", "simple_func_params", "atom", "general_element", "general_element_part", 
  "identifier", "regular_id_common", "regular_id", "constant", "case_expr", 
  "when_clause", "case_default", "quantified_expression", "array_expr", 
  "array_expr_list", "reserved_keywords_normal", "reserved_keywords_can_be_name", 
  "nonreserved_keywords_normal", "non_keywords_but_token", "nonreserved_keywords_can_not_be_name"
};

std::vector<std::string> Gauss200Parser::_literalNames = {
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
  "'@'", "'.'", "'`'", "'?'", "", "'^'", "'~'", "'!'", "'>'", "'<'", "':'", 
  "';'", "'#'", "'::'", "'|'", "'='", "'['", "']'"
};

std::vector<std::string> Gauss200Parser::_symbolicNames = {
  "", "ALL_GS", "ANALYSE_GS", "ANALYZE_GS", "AND_GS", "ANY_GS", "ARRAY_GS", 
  "ASC_GS", "ASYMMETRIC_GS", "AS_GS", "AUTHID_GS", "BOTH_GS", "BUCKETS_GS", 
  "CASE_GS", "CAST_GS", "CHECK_GS", "COLLATE_GS", "COLUMN_GS", "CONSTRAINT_GS", 
  "CREATE_GS", "CURRENT_CATALOG_GS", "CURRENT_DATE_GS", "CURRENT_ROLE_GS", 
  "CURRENT_TIMESTAMP_GS", "CURRENT_TIME_GS", "CURRENT_USER_GS", "DEFAULT_GS", 
  "DEFERRABLE_GS", "DESC_GS", "DISTINCT_GS", "DO_GS", "ELSE_GS", "END_GS", 
  "EXCEPT_GS", "FALSE_GS", "FETCH_GS", "FOREIGN_GS", "FOR_GS", "FROM_GS", 
  "FUNCTION_GS", "GRANT_GS", "GROUP_GS", "HAVING_GS", "INITIALLY_GS", "INTERSECT_GS", 
  "INTO_GS", "IN_GS", "IS_GS", "LEADING_GS", "LESS_GS", "LIMIT_GS", "LOCALTIMESTAMP_GS", 
  "LOCALTIME_GS", "MAXVALUE_GS", "MINUS_GS", "MODIFY_GS", "NLSSORT_GS", 
  "NOT_GS", "NULL_GS", "OFFSET_GS", "ONLY_GS", "ON_GS", "ORDER_GS", "OR_GS", 
  "PERFORMANCE_GS", "PLACING_GS", "PRIMARY_GS", "PROCEDURE_GS", "REFERENCES_GS", 
  "REJECT_GS", "RETURNING_GS", "RETURN_GS", "SELECT_GS", "SESSION_USER_GS", 
  "SOME_GS", "SPLIT_GS", "SYMMETRIC_GS", "SYSDATE_GS", "TABLE_GS", "THEN_GS", 
  "TO_GS", "TRAILING_GS", "TRUE_GS", "UNION_GS", "UNIQUE_GS", "USER_GS", 
  "USING_GS", "VARIADIC_GS", "WHEN_GS", "WHERE_GS", "WINDOW_GS", "WITH_GS", 
  "AUTHORIZATION_GS", "BINARY_GS", "COLLATION_GS", "CONCURRENTLY_GS", "CROSS_GS", 
  "CURRENT_SCHEMA_GS", "FREEZE_GS", "FULL_GS", "ILIKE_GS", "INNER_GS", "ISNULL_GS", 
  "JOIN_GS", "LEFT_GS", "LIKE_GS", "NATURAL_GS", "NOTNULL_GS", "OUTER_GS", 
  "OVERLAPS_GS", "OVER_GS", "RIGHT_GS", "SIMILAR_GS", "VERBOSE_GS", "ABORT_GS", 
  "ABSOLUTE_GS", "ACCESS_GS", "ACCOUNT_GS", "ACTION_GS", "ADD_GS", "ADMIN_GS", 
  "AFTER_GS", "AGGREGATE_GS", "ALSO_GS", "ALTER_GS", "ALWAYS_GS", "APP_GS", 
  "ASSERTION_GS", "ASSIGNMENT_GS", "ATTRIBUTE_GS", "AT_GS", "AUTOEXTEND_GS", 
  "AUTOMAPPED_GS", "BACKWARD_GS", "BARRIER_GS", "BEFORE_GS", "BEGIN_GS", 
  "BLOB_GS", "BY_GS", "CACHE_GS", "CALLED_GS", "CALL_GS", "CASCADED_GS", 
  "CASCADE_GS", "CATALOG_GS", "CHAIN_GS", "CHARACTERISTICS_GS", "CHECKPOINT_GS", 
  "CLASS_GS", "CLEAN_GS", "CLOB_GS", "CLOSE_GS", "CLUSTER_GS", "COMMENTS_GS", 
  "COMMENT_GS", "COMMITTED_GS", "COMMIT_GS", "COMPRESS_GS", "CONFIGURATION_GS", 
  "CONNECTION_GS", "CONSTRAINTS_GS", "CONTENT_GS", "CONTINUE_GS", "CONVERSION_GS", 
  "COORDINATOR_GS", "COPY_GS", "COST_GS", "CSV_GS", "CURRENT_GS", "CURSOR_GS", 
  "CYCLE_GS", "DATABASE_GS", "DATAFILE_GS", "DATA_GS", "DAY_GS", "DBCOMPATIBILITY_GS", 
  "DEALLOCATE_GS", "DECLARE_GS", "DEFAULTS_GS", "DEFERRED_GS", "DEFINER_GS", 
  "DELETE_GS", "DELIMITERS_GS", "DELIMITER_GS", "DELTA_GS", "DETERMINISTIC_GS", 
  "DICTIONARY_GS", "DIRECT_GS", "DISABLE_GS", "DISCARD_GS", "DISTRIBUTE_GS", 
  "DISTRIBUTION_GS", "DOCUMENT_GS", "DOMAIN_GS", "DOUBLE_GS", "DROP_GS", 
  "EACH_GS", "ENABLE_GS", "ENCODING_GS", "ENCRYPTED_GS", "ENFORCED_GS", 
  "ENUM_GS", "EOL_GS", "ESCAPE_GS", "ESCAPING_GS", "EVERY_GS", "EXCHANGE_GS", 
  "EXCLUDE_GS", "EXCLUDING_GS", "EXCLUSIVE_GS", "EXECUTE_GS", "EXPLAIN_GS", 
  "EXTENSION_GS", "EXTERNAL_GS", "FAMILY_GS", "FILEHEADER_GS", "FIRST_GS", 
  "FIXED_GS", "FOLLOWING_GS", "FORCE_GS", "FORMATTER_GS", "FORWARD_GS", 
  "FUNCTIONS_GS", "GLOBAL_GS", "GRANTED_GS", "HANDLER_GS", "HEADER_GS", 
  "HOLD_GS", "HOUR_GS", "IDENTIFIED_GS", "IDENTITY_GS", "IF_GS", "IMMEDIATE_GS", 
  "IMMUTABLE_GS", "IMPLICIT_GS", "INCLUDING_GS", "INCREMENT_GS", "INDEXES_GS", 
  "INDEX_GS", "INHERITS_GS", "INHERIT_GS", "INITIAL_GS", "INITRANS_GS", 
  "INLINE_GS", "INPUT_GS", "INSENSITIVE_GS", "INSERT_GS", "INSTEAD_GS", 
  "INVOKER_GS", "ISOLATION_GS", "KEY_GS", "LABEL_GS", "LANGUAGE_GS", "LARGE_GS", 
  "LAST_GS", "LC_COLLATE_GS", "LC_CTYPE_GS", "LEAKPROOF_GS", "LEVEL_GS", 
  "LISTEN_GS", "LOAD_GS", "LOCAL_GS", "LOCATION_GS", "LOCK_GS", "LOGGING_GS", 
  "LOGIN_GS", "LOG_GS", "LOOP_GS", "MAPPING_GS", "MATCHED_GS", "MATCH_GS", 
  "MAXEXTENTS_GS", "MAXSIZE_GS", "MAXTRANS_GS", "MERGE_GS", "MINEXTENTS_GS", 
  "MINUTE_GS", "MINVALUE_GS", "MODE_GS", "MONTH_GS", "MOVEMENT_GS", "MOVE_GS", 
  "NAMES_GS", "NAME_GS", "NEXT_GS", "NOCOMPRESS_GS", "NOCYCLE_GS", "NODE_GS", 
  "NOLOGGING_GS", "NOLOGIN_GS", "NOMAXVALUE_GS", "NOMINVALUE_GS", "NOTHING_GS", 
  "NOTIFY_GS", "NOWAIT_GS", "NO_GS", "NULLS_GS", "NUMSTR_GS", "OBJECT_GS", 
  "OFF_GS", "OF_GS", "OIDS_GS", "OPERATOR_GS", "OPTIMIZATION_GS", "OPTIONS_GS", 
  "OPTION_GS", "OWNED_GS", "OWNER_GS", "PARSER_GS", "PARTIAL_GS", "PARTITIONS_GS", 
  "PARTITION_GS", "PASSING_GS", "PASSWORD_GS", "PCTFREE_GS", "PERCENT_GS", 
  "PER_GS", "PLANS_GS", "POOL_GS", "PRECEDING_GS", "PREFERRED_GS", "PREFIX_GS", 
  "PREPARED_GS", "PREPARE_GS", "PRESERVE_GS", "PRIOR_GS", "PRIVILEGES_GS", 
  "PRIVILEGE_GS", "PROCEDURAL_GS", "PROFILE_GS", "QUERY_GS", "QUOTE_GS", 
  "RANGE_GS", "RAW_GS", "READ_GS", "REASSIGN_GS", "REBUILD_GS", "RECHECK_GS", 
  "RECURSIVE_GS", "REF_GS", "REINDEX_GS", "RELATIVE_GS", "RELEASE_GS", "RELOPTIONS_GS", 
  "REMOTE_GS", "RENAME_GS", "REPEATABLE_GS", "REPLACE_GS", "REPLICA_GS", 
  "RESET_GS", "RESIZE_GS", "RESOURCE_GS", "RESTART_GS", "RESTRICT_GS", "RETURNS_GS", 
  "REUSE_GS", "REVOKE_GS", "ROLE_GS", "ROLLBACK_GS", "ROWS_GS", "RULE_GS", 
  "SAVEPOINT_GS", "SCHEMA_GS", "SCROLL_GS", "SEARCH_GS", "SECOND_GS", "SECURITY_GS", 
  "SEQUENCES_GS", "SEQUENCE_GS", "SERIALIZABLE_GS", "SERVER_GS", "SESSION_GS", 
  "SET_GS", "SHARE_GS", "SHOW_GS", "SIMPLE_GS", "SIZE_GS", "SNAPSHOT_GS", 
  "STABLE_GS", "STANDALONE_GS", "START_GS", "STATEMENT_GS", "STATISTICS_GS", 
  "STDIN_GS", "STDOUT_GS", "STORAGE_GS", "STORE_GS", "STRICT_GS", "STRIP_GS", 
  "SUPERUSER_GS", "SYSID_GS", "SYS_REFCURSOR_GS", "SYSTEM_GS", "TABLESPACE_GS", 
  "TABLES_GS", "TEMPLATE_GS", "TEMPORARY_GS", "TEMP_GS", "TEXT_GS", "THAN_GS", 
  "TRANSACTION_GS", "TRIGGER_GS", "TRUNCATE_GS", "TRUSTED_GS", "TYPES_GS", 
  "TYPE_GS", "UNBOUNDED_GS", "UNCOMMITTED_GS", "UNENCRYPTED_GS", "UNKNOWN_GS", 
  "UNLIMITED_GS", "UNLISTEN_GS", "UNLOCK_GS", "UNLOGGED_GS", "UNTIL_GS", 
  "UNUSABLE_GS", "UPDATE_GS", "VACUUM_GS", "VALIDATE_GS", "VALIDATION_GS", 
  "VALIDATOR_GS", "VALID_GS", "VALUE_GS", "VARYING_GS", "VERSION_GS", "VIEW_GS", 
  "VOLATILE_GS", "WHITESPACE_GS", "WITHIN_GS", "WITHOUT_GS", "WORKLOAD_GS", 
  "WORK_GS", "WRAPPER_GS", "WRITE_GS", "XML_GS", "YEAR_GS", "YES_GS", "ZONE_GS", 
  "BETWEEN_GS", "BIGINT_GS", "BINARY_DOUBLE_GS", "BINARY_INTEGER_GS", "BIT_GS", 
  "BOOLEAN_GS", "CHARACTER_GS", "CHAR_GS", "COALESCE_GS", "DATE_GS", "DECIMAL_GS", 
  "DECODE_GS", "DEC_GS", "EXISTS_GS", "EXTRACT_GS", "FLOAT_GS", "GREATEST_GS", 
  "INOUT_GS", "INTEGER_GS", "INTERVAL_GS", "INT_GS", "LEAST_GS", "NATIONAL_GS", 
  "NCHAR_GS", "NONE_GS", "NULLIF_GS", "NUMBER_GS", "NUMERIC_GS", "NVARCHAR2_GS", 
  "NVL_GS", "OUT_GS", "OVERLAY_GS", "POSITION_GS", "PRECISION_GS", "REAL_GS", 
  "ROW_GS", "SETOF_GS", "SMALLDATETIME_GS", "SMALLINT_GS", "SUBSTRING_GS", 
  "TIMESTAMP_GS", "TIME_GS", "TINYINT_GS", "TREAT_GS", "TRIM_GS", "VALUES_GS", 
  "VARCHAR2_GS", "VARCHAR_GS", "XMLATTRIBUTES_GS", "XMLCONCAT_GS", "XMLELEMENT_GS", 
  "XMLEXISTS_GS", "XMLFOREST_GS", "XMLPARSE_GS", "XMLPI_GS", "XMLROOT_GS", 
  "XMLSERIALIZE_GS", "SMALLSERIAL_GS", "SERIAL_GS", "BIGSERIAL_GS", "FLOAT4_GS", 
  "FLOAT8_GS", "MONEY_GS", "BYTEA_GS", "FIELDS_GS", "RELTIME_GS", "POINT_GS", 
  "LSEG_GS", "BOX_GS", "PATH_GS", "POLYGON_GS", "CIRCLE_GS", "CIDR_GS", 
  "INET_GS", "MACADDR_GS", "TSVECTOR_GS", "TSQUERY_GS", "HLL_GS", "OID_GS", 
  "CID_GS", "XID_GS", "TID_GS", "REGCONFIG_GS", "REGDICTIONARY_GS", "REGOPER", 
  "REGOPERATOR", "REGPROC", "REGPROCEDURE", "REGCLASS", "REGTYPE", "ANYELEMENT_GS", 
  "ANYARRAY_GS", "ANYNONARRAY_GS", "ANYENUM_GS", "ANYRANGE_GS", "CSTRING_GS", 
  "INTERNAL_GS", "LANGUAGE_HANDLER_GS", "FDW_HANDLER_GS", "RECORD_GS", "VOID_GS", 
  "OPAQUE_GS", "FILTER_GS", "PRIVATE_GS", "SOURCE_GS", "PUBLIC_GS", "USAGE_GS", 
  "DIRECTORY_GS", "SHIPPABLE_GS", "FENCED_GS", "VCGROUP_GS", "CREATEDB_GS", 
  "NOCREATEDB_GS", "CREATEROLE_GS", "NOCREATEROLE_GS", "NOINHERIT_GS", "AUDITADMIN_GS", 
  "NOAUDITADMIN_GS", "SYSADMIN_GS", "NOSYSADMIN_GS", "USEFT_GS", "NOUSEFT_GS", 
  "REPLICATION_GS", "NOREPLICATION_GS", "INDEPENDENT_GS", "NOINDEPENDENT_GS", 
  "VCADMIN_GS", "NOVCADMIN_GS", "PERM_GS", "SPACE_GS", "PGUSER_GS", "POLICY_GS", 
  "KILL_GS", "PLAIN_GS", "EXTENDED_GS", "MAIN_GS", "CSN_GS", "ERRORS_GS", 
  "FORMAT_GS", "NOESCAPING_GS", "FORCE_QUOTE_GS", "FORCE_NOT_NULL_GS", "IGNORE_EXTRA_DATA_GS", 
  "FILL_MISSING_FIELDS_GS", "COMPATIBLE_ILLEGAL_CHARS_GS", "DATE_FORMAT_GS", 
  "TIME_FORMAT_GS", "TIMESTAMP_FORMAT_GS", "SMALLDATETIME_FORMAT_GS", "ROUNDROBIN_GS", 
  "PERMISSIVE_GS", "RESTRICTIVE_GS", "HASH_GS", "COSTS_GS", "CPU_GS", "DETAIL_GS", 
  "NODES_GS", "NUM_NODES_GS", "BUFFERS_GS", "TIMING_GS", "PLAN_GS", "JSON_GS", 
  "YAML_GS", "CONNECT_GS", "COMPUTE_GS", "TABLESAMPLE_GS", "ROLLUP_GS", 
  "CUBE_GS", "GROUPING_GS", "SETS_GS", "COMPACT_GS", "DELTAMERGE_GS", "HDFSDIRECTORY_GS", 
  "CONSTANT_GS", "PACKAGE_GS", "PERCENT_SIGN", "AMPERSAND", "LEFT_PAREN", 
  "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", 
  "COMMA", "SOLIDUS", "AT_SIGN", "PERIOD", "SLASH_SINGLE", "QUESTION_MARK", 
  "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
  "GREATER_THAN_OP", "LESS_THAN_OP", "COLON", "SEMICOLON", "POUND_SIGN", 
  "TYPECAST", "BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "SINGLE_LINE_COMMENT", 
  "MULTI_LINE_COMMENT", "SPACES", "CHAR_STRING", "REGULAR_ID", "DELIMITED_STR", 
  "SCONST", "ICONST", "FCONST", "BCONST", "XCONST", "PARAM"
};

dfa::Vocabulary Gauss200Parser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> Gauss200Parser::_tokenNames;

Gauss200Parser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x28e, 0x1ac2, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
       0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 
       0x9, 0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 
       0xa, 0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 
       0x4, 0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 
       0x11, 0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 
       0x14, 0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 
       0x17, 0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 
       0x1a, 0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 
       0x1d, 0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 
       0x20, 0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 
       0x23, 0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 
       0x26, 0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 
       0x29, 0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 
       0x2c, 0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 
       0x2f, 0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 
       0x32, 0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 
       0x35, 0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 
       0x38, 0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 
       0x3b, 0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 
       0x3e, 0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 
       0x41, 0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 
       0x44, 0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 
       0x47, 0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 
       0x4a, 0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 
       0x4d, 0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 
       0x50, 0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 
       0x53, 0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 
       0x56, 0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 
       0x59, 0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 
       0x5c, 0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 
       0x5f, 0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 
       0x62, 0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 
       0x65, 0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 
       0x68, 0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 
       0x6b, 0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 
       0x6e, 0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 
       0x71, 0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 
       0x74, 0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 
       0x77, 0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 
       0x7a, 0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 
       0x7d, 0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 
       0x80, 0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 
       0x83, 0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 
       0x86, 0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 
       0x89, 0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 
       0x8c, 0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 
       0x8f, 0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 
       0x92, 0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 
       0x95, 0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 
       0x98, 0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 
       0x9b, 0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 
       0x9e, 0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 
       0xa1, 0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 
       0xa4, 0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 
       0xa7, 0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 
       0xaa, 0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 
       0xad, 0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 
       0xb0, 0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 
       0xb3, 0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 
       0xb6, 0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 
       0xb9, 0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 
       0xbc, 0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 
       0xbf, 0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 
       0xc2, 0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 
       0xc5, 0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 
       0xc8, 0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 
       0xcb, 0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 
       0xce, 0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 
       0xd1, 0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 
       0xd4, 0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 
       0xd7, 0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 
       0xda, 0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 
       0xdd, 0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 
       0xe0, 0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 
       0xe3, 0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 
       0xe6, 0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 
       0xe9, 0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 
       0xec, 0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 
       0xef, 0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 
       0xf2, 0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 
       0xf5, 0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x4, 0xf7, 0x9, 0xf7, 0x4, 
       0xf8, 0x9, 0xf8, 0x4, 0xf9, 0x9, 0xf9, 0x4, 0xfa, 0x9, 0xfa, 0x4, 
       0xfb, 0x9, 0xfb, 0x4, 0xfc, 0x9, 0xfc, 0x4, 0xfd, 0x9, 0xfd, 0x4, 
       0xfe, 0x9, 0xfe, 0x4, 0xff, 0x9, 0xff, 0x4, 0x100, 0x9, 0x100, 0x4, 
       0x101, 0x9, 0x101, 0x4, 0x102, 0x9, 0x102, 0x4, 0x103, 0x9, 0x103, 
       0x4, 0x104, 0x9, 0x104, 0x4, 0x105, 0x9, 0x105, 0x4, 0x106, 0x9, 
       0x106, 0x4, 0x107, 0x9, 0x107, 0x4, 0x108, 0x9, 0x108, 0x4, 0x109, 
       0x9, 0x109, 0x4, 0x10a, 0x9, 0x10a, 0x4, 0x10b, 0x9, 0x10b, 0x4, 
       0x10c, 0x9, 0x10c, 0x4, 0x10d, 0x9, 0x10d, 0x4, 0x10e, 0x9, 0x10e, 
       0x4, 0x10f, 0x9, 0x10f, 0x4, 0x110, 0x9, 0x110, 0x4, 0x111, 0x9, 
       0x111, 0x4, 0x112, 0x9, 0x112, 0x4, 0x113, 0x9, 0x113, 0x4, 0x114, 
       0x9, 0x114, 0x4, 0x115, 0x9, 0x115, 0x4, 0x116, 0x9, 0x116, 0x4, 
       0x117, 0x9, 0x117, 0x4, 0x118, 0x9, 0x118, 0x4, 0x119, 0x9, 0x119, 
       0x4, 0x11a, 0x9, 0x11a, 0x4, 0x11b, 0x9, 0x11b, 0x4, 0x11c, 0x9, 
       0x11c, 0x4, 0x11d, 0x9, 0x11d, 0x4, 0x11e, 0x9, 0x11e, 0x4, 0x11f, 
       0x9, 0x11f, 0x4, 0x120, 0x9, 0x120, 0x4, 0x121, 0x9, 0x121, 0x4, 
       0x122, 0x9, 0x122, 0x4, 0x123, 0x9, 0x123, 0x4, 0x124, 0x9, 0x124, 
       0x4, 0x125, 0x9, 0x125, 0x4, 0x126, 0x9, 0x126, 0x4, 0x127, 0x9, 
       0x127, 0x4, 0x128, 0x9, 0x128, 0x4, 0x129, 0x9, 0x129, 0x4, 0x12a, 
       0x9, 0x12a, 0x4, 0x12b, 0x9, 0x12b, 0x4, 0x12c, 0x9, 0x12c, 0x4, 
       0x12d, 0x9, 0x12d, 0x4, 0x12e, 0x9, 0x12e, 0x4, 0x12f, 0x9, 0x12f, 
       0x4, 0x130, 0x9, 0x130, 0x4, 0x131, 0x9, 0x131, 0x4, 0x132, 0x9, 
       0x132, 0x4, 0x133, 0x9, 0x133, 0x4, 0x134, 0x9, 0x134, 0x4, 0x135, 
       0x9, 0x135, 0x4, 0x136, 0x9, 0x136, 0x4, 0x137, 0x9, 0x137, 0x4, 
       0x138, 0x9, 0x138, 0x4, 0x139, 0x9, 0x139, 0x4, 0x13a, 0x9, 0x13a, 
       0x4, 0x13b, 0x9, 0x13b, 0x4, 0x13c, 0x9, 0x13c, 0x4, 0x13d, 0x9, 
       0x13d, 0x4, 0x13e, 0x9, 0x13e, 0x4, 0x13f, 0x9, 0x13f, 0x4, 0x140, 
       0x9, 0x140, 0x4, 0x141, 0x9, 0x141, 0x4, 0x142, 0x9, 0x142, 0x4, 
       0x143, 0x9, 0x143, 0x4, 0x144, 0x9, 0x144, 0x4, 0x145, 0x9, 0x145, 
       0x4, 0x146, 0x9, 0x146, 0x4, 0x147, 0x9, 0x147, 0x4, 0x148, 0x9, 
       0x148, 0x4, 0x149, 0x9, 0x149, 0x4, 0x14a, 0x9, 0x14a, 0x4, 0x14b, 
       0x9, 0x14b, 0x4, 0x14c, 0x9, 0x14c, 0x4, 0x14d, 0x9, 0x14d, 0x4, 
       0x14e, 0x9, 0x14e, 0x4, 0x14f, 0x9, 0x14f, 0x4, 0x150, 0x9, 0x150, 
       0x4, 0x151, 0x9, 0x151, 0x4, 0x152, 0x9, 0x152, 0x4, 0x153, 0x9, 
       0x153, 0x4, 0x154, 0x9, 0x154, 0x4, 0x155, 0x9, 0x155, 0x4, 0x156, 
       0x9, 0x156, 0x4, 0x157, 0x9, 0x157, 0x4, 0x158, 0x9, 0x158, 0x4, 
       0x159, 0x9, 0x159, 0x4, 0x15a, 0x9, 0x15a, 0x4, 0x15b, 0x9, 0x15b, 
       0x4, 0x15c, 0x9, 0x15c, 0x4, 0x15d, 0x9, 0x15d, 0x4, 0x15e, 0x9, 
       0x15e, 0x4, 0x15f, 0x9, 0x15f, 0x4, 0x160, 0x9, 0x160, 0x4, 0x161, 
       0x9, 0x161, 0x4, 0x162, 0x9, 0x162, 0x4, 0x163, 0x9, 0x163, 0x4, 
       0x164, 0x9, 0x164, 0x4, 0x165, 0x9, 0x165, 0x4, 0x166, 0x9, 0x166, 
       0x4, 0x167, 0x9, 0x167, 0x4, 0x168, 0x9, 0x168, 0x4, 0x169, 0x9, 
       0x169, 0x4, 0x16a, 0x9, 0x16a, 0x4, 0x16b, 0x9, 0x16b, 0x4, 0x16c, 
       0x9, 0x16c, 0x4, 0x16d, 0x9, 0x16d, 0x4, 0x16e, 0x9, 0x16e, 0x4, 
       0x16f, 0x9, 0x16f, 0x4, 0x170, 0x9, 0x170, 0x4, 0x171, 0x9, 0x171, 
       0x4, 0x172, 0x9, 0x172, 0x4, 0x173, 0x9, 0x173, 0x4, 0x174, 0x9, 
       0x174, 0x4, 0x175, 0x9, 0x175, 0x4, 0x176, 0x9, 0x176, 0x4, 0x177, 
       0x9, 0x177, 0x4, 0x178, 0x9, 0x178, 0x4, 0x179, 0x9, 0x179, 0x4, 
       0x17a, 0x9, 0x17a, 0x4, 0x17b, 0x9, 0x17b, 0x4, 0x17c, 0x9, 0x17c, 
       0x4, 0x17d, 0x9, 0x17d, 0x4, 0x17e, 0x9, 0x17e, 0x4, 0x17f, 0x9, 
       0x17f, 0x4, 0x180, 0x9, 0x180, 0x4, 0x181, 0x9, 0x181, 0x4, 0x182, 
       0x9, 0x182, 0x4, 0x183, 0x9, 0x183, 0x4, 0x184, 0x9, 0x184, 0x4, 
       0x185, 0x9, 0x185, 0x4, 0x186, 0x9, 0x186, 0x4, 0x187, 0x9, 0x187, 
       0x4, 0x188, 0x9, 0x188, 0x4, 0x189, 0x9, 0x189, 0x4, 0x18a, 0x9, 
       0x18a, 0x4, 0x18b, 0x9, 0x18b, 0x4, 0x18c, 0x9, 0x18c, 0x4, 0x18d, 
       0x9, 0x18d, 0x4, 0x18e, 0x9, 0x18e, 0x4, 0x18f, 0x9, 0x18f, 0x4, 
       0x190, 0x9, 0x190, 0x4, 0x191, 0x9, 0x191, 0x4, 0x192, 0x9, 0x192, 
       0x4, 0x193, 0x9, 0x193, 0x4, 0x194, 0x9, 0x194, 0x4, 0x195, 0x9, 
       0x195, 0x4, 0x196, 0x9, 0x196, 0x4, 0x197, 0x9, 0x197, 0x4, 0x198, 
       0x9, 0x198, 0x4, 0x199, 0x9, 0x199, 0x4, 0x19a, 0x9, 0x19a, 0x4, 
       0x19b, 0x9, 0x19b, 0x4, 0x19c, 0x9, 0x19c, 0x4, 0x19d, 0x9, 0x19d, 
       0x4, 0x19e, 0x9, 0x19e, 0x4, 0x19f, 0x9, 0x19f, 0x4, 0x1a0, 0x9, 
       0x1a0, 0x4, 0x1a1, 0x9, 0x1a1, 0x4, 0x1a2, 0x9, 0x1a2, 0x4, 0x1a3, 
       0x9, 0x1a3, 0x4, 0x1a4, 0x9, 0x1a4, 0x4, 0x1a5, 0x9, 0x1a5, 0x4, 
       0x1a6, 0x9, 0x1a6, 0x4, 0x1a7, 0x9, 0x1a7, 0x4, 0x1a8, 0x9, 0x1a8, 
       0x4, 0x1a9, 0x9, 0x1a9, 0x4, 0x1aa, 0x9, 0x1aa, 0x4, 0x1ab, 0x9, 
       0x1ab, 0x4, 0x1ac, 0x9, 0x1ac, 0x4, 0x1ad, 0x9, 0x1ad, 0x4, 0x1ae, 
       0x9, 0x1ae, 0x4, 0x1af, 0x9, 0x1af, 0x4, 0x1b0, 0x9, 0x1b0, 0x4, 
       0x1b1, 0x9, 0x1b1, 0x4, 0x1b2, 0x9, 0x1b2, 0x4, 0x1b3, 0x9, 0x1b3, 
       0x4, 0x1b4, 0x9, 0x1b4, 0x4, 0x1b5, 0x9, 0x1b5, 0x4, 0x1b6, 0x9, 
       0x1b6, 0x4, 0x1b7, 0x9, 0x1b7, 0x4, 0x1b8, 0x9, 0x1b8, 0x4, 0x1b9, 
       0x9, 0x1b9, 0x4, 0x1ba, 0x9, 0x1ba, 0x4, 0x1bb, 0x9, 0x1bb, 0x4, 
       0x1bc, 0x9, 0x1bc, 0x4, 0x1bd, 0x9, 0x1bd, 0x4, 0x1be, 0x9, 0x1be, 
       0x4, 0x1bf, 0x9, 0x1bf, 0x4, 0x1c0, 0x9, 0x1c0, 0x4, 0x1c1, 0x9, 
       0x1c1, 0x4, 0x1c2, 0x9, 0x1c2, 0x4, 0x1c3, 0x9, 0x1c3, 0x4, 0x1c4, 
       0x9, 0x1c4, 0x4, 0x1c5, 0x9, 0x1c5, 0x4, 0x1c6, 0x9, 0x1c6, 0x4, 
       0x1c7, 0x9, 0x1c7, 0x4, 0x1c8, 0x9, 0x1c8, 0x4, 0x1c9, 0x9, 0x1c9, 
       0x4, 0x1ca, 0x9, 0x1ca, 0x4, 0x1cb, 0x9, 0x1cb, 0x4, 0x1cc, 0x9, 
       0x1cc, 0x4, 0x1cd, 0x9, 0x1cd, 0x4, 0x1ce, 0x9, 0x1ce, 0x4, 0x1cf, 
       0x9, 0x1cf, 0x4, 0x1d0, 0x9, 0x1d0, 0x4, 0x1d1, 0x9, 0x1d1, 0x4, 
       0x1d2, 0x9, 0x1d2, 0x4, 0x1d3, 0x9, 0x1d3, 0x4, 0x1d4, 0x9, 0x1d4, 
       0x4, 0x1d5, 0x9, 0x1d5, 0x4, 0x1d6, 0x9, 0x1d6, 0x4, 0x1d7, 0x9, 
       0x1d7, 0x4, 0x1d8, 0x9, 0x1d8, 0x4, 0x1d9, 0x9, 0x1d9, 0x4, 0x1da, 
       0x9, 0x1da, 0x4, 0x1db, 0x9, 0x1db, 0x4, 0x1dc, 0x9, 0x1dc, 0x4, 
       0x1dd, 0x9, 0x1dd, 0x4, 0x1de, 0x9, 0x1de, 0x4, 0x1df, 0x9, 0x1df, 
       0x4, 0x1e0, 0x9, 0x1e0, 0x4, 0x1e1, 0x9, 0x1e1, 0x4, 0x1e2, 0x9, 
       0x1e2, 0x4, 0x1e3, 0x9, 0x1e3, 0x4, 0x1e4, 0x9, 0x1e4, 0x4, 0x1e5, 
       0x9, 0x1e5, 0x4, 0x1e6, 0x9, 0x1e6, 0x4, 0x1e7, 0x9, 0x1e7, 0x4, 
       0x1e8, 0x9, 0x1e8, 0x4, 0x1e9, 0x9, 0x1e9, 0x4, 0x1ea, 0x9, 0x1ea, 
       0x4, 0x1eb, 0x9, 0x1eb, 0x4, 0x1ec, 0x9, 0x1ec, 0x4, 0x1ed, 0x9, 
       0x1ed, 0x4, 0x1ee, 0x9, 0x1ee, 0x4, 0x1ef, 0x9, 0x1ef, 0x4, 0x1f0, 
       0x9, 0x1f0, 0x4, 0x1f1, 0x9, 0x1f1, 0x4, 0x1f2, 0x9, 0x1f2, 0x4, 
       0x1f3, 0x9, 0x1f3, 0x4, 0x1f4, 0x9, 0x1f4, 0x4, 0x1f5, 0x9, 0x1f5, 
       0x4, 0x1f6, 0x9, 0x1f6, 0x4, 0x1f7, 0x9, 0x1f7, 0x4, 0x1f8, 0x9, 
       0x1f8, 0x4, 0x1f9, 0x9, 0x1f9, 0x4, 0x1fa, 0x9, 0x1fa, 0x4, 0x1fb, 
       0x9, 0x1fb, 0x4, 0x1fc, 0x9, 0x1fc, 0x4, 0x1fd, 0x9, 0x1fd, 0x4, 
       0x1fe, 0x9, 0x1fe, 0x4, 0x1ff, 0x9, 0x1ff, 0x4, 0x200, 0x9, 0x200, 
       0x4, 0x201, 0x9, 0x201, 0x4, 0x202, 0x9, 0x202, 0x4, 0x203, 0x9, 
       0x203, 0x4, 0x204, 0x9, 0x204, 0x4, 0x205, 0x9, 0x205, 0x4, 0x206, 
       0x9, 0x206, 0x4, 0x207, 0x9, 0x207, 0x4, 0x208, 0x9, 0x208, 0x4, 
       0x209, 0x9, 0x209, 0x4, 0x20a, 0x9, 0x20a, 0x4, 0x20b, 0x9, 0x20b, 
       0x4, 0x20c, 0x9, 0x20c, 0x4, 0x20d, 0x9, 0x20d, 0x4, 0x20e, 0x9, 
       0x20e, 0x4, 0x20f, 0x9, 0x20f, 0x4, 0x210, 0x9, 0x210, 0x4, 0x211, 
       0x9, 0x211, 0x4, 0x212, 0x9, 0x212, 0x4, 0x213, 0x9, 0x213, 0x4, 
       0x214, 0x9, 0x214, 0x4, 0x215, 0x9, 0x215, 0x4, 0x216, 0x9, 0x216, 
       0x4, 0x217, 0x9, 0x217, 0x4, 0x218, 0x9, 0x218, 0x4, 0x219, 0x9, 
       0x219, 0x4, 0x21a, 0x9, 0x21a, 0x4, 0x21b, 0x9, 0x21b, 0x4, 0x21c, 
       0x9, 0x21c, 0x3, 0x2, 0x3, 0x2, 0x5, 0x2, 0x43b, 0xa, 0x2, 0x3, 0x2, 
       0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x7, 0x3, 0x442, 0xa, 0x3, 
       0xc, 0x3, 0xe, 0x3, 0x445, 0xb, 0x3, 0x3, 0x4, 0x3, 0x4, 0x5, 0x4, 
       0x449, 0xa, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x5, 0x5, 0x4bb, 0xa, 0x5, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x5, 0x6, 0x4c5, 0xa, 0x6, 0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 0x4c9, 
       0xa, 0x7, 0x5, 0x7, 0x4cb, 0xa, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 
       0x3, 0x7, 0x3, 0x8, 0x3, 0x8, 0x5, 0x8, 0x4d3, 0xa, 0x8, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 
       0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xb, 
       0x3, 0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xd, 0x3, 
       0xd, 0x3, 0xd, 0x7, 0xd, 0x4eb, 0xa, 0xd, 0xc, 0xd, 0xe, 0xd, 0x4ee, 
       0xb, 0xd, 0x3, 0xe, 0x3, 0xe, 0x5, 0xe, 0x4f2, 0xa, 0xe, 0x3, 0xe, 
       0x5, 0xe, 0x4f5, 0xa, 0xe, 0x3, 0xe, 0x5, 0xe, 0x4f8, 0xa, 0xe, 0x3, 
       0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x4fd, 0xa, 0xf, 0x3, 0x10, 0x3, 
       0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x503, 0xa, 0x10, 0x3, 0x11, 
       0x3, 0x11, 0x3, 0x12, 0x5, 0x12, 0x508, 0xa, 0x12, 0x3, 0x12, 0x3, 
       0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x50f, 0xa, 0x12, 
       0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x514, 0xa, 0x12, 0x3, 
       0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 
       0x15, 0x3, 0x15, 0x5, 0x15, 0x51e, 0xa, 0x15, 0x3, 0x16, 0x3, 0x16, 
       0x3, 0x16, 0x3, 0x16, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x3, 0x18, 0x3, 0x18, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x52c, 0xa, 
       0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x7, 0x19, 0x532, 
       0xa, 0x19, 0xc, 0x19, 0xe, 0x19, 0x535, 0xb, 0x19, 0x3, 0x1a, 0x5, 
       0x1a, 0x538, 0xa, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 
       0x5, 0x1a, 0x53e, 0xa, 0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x5, 
       0x1b, 0x543, 0xa, 0x1b, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1d, 0x3, 0x1d, 
       0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1e, 0x3, 0x1e, 
       0x3, 0x1f, 0x7, 0x1f, 0x550, 0xa, 0x1f, 0xc, 0x1f, 0xe, 0x1f, 0x553, 
       0xb, 0x1f, 0x3, 0x1f, 0x5, 0x1f, 0x556, 0xa, 0x1f, 0x3, 0x20, 0x3, 
       0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 0x20, 0x55d, 0xa, 0x20, 
       0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x7, 0x21, 
       0x564, 0xa, 0x21, 0xc, 0x21, 0xe, 0x21, 0x567, 0xb, 0x21, 0x3, 0x21, 
       0x3, 0x21, 0x3, 0x22, 0x5, 0x22, 0x56c, 0xa, 0x22, 0x3, 0x22, 0x3, 
       0x22, 0x5, 0x22, 0x570, 0xa, 0x22, 0x3, 0x23, 0x3, 0x23, 0x3, 0x24, 
       0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x5, 0x24, 
       0x57a, 0xa, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x5, 0x24, 0x57f, 
       0xa, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 
       0x7, 0x25, 0x586, 0xa, 0x25, 0xc, 0x25, 0xe, 0x25, 0x589, 0xb, 0x25, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x7, 0x27, 
       0x590, 0xa, 0x27, 0xc, 0x27, 0xe, 0x27, 0x593, 0xb, 0x27, 0x3, 0x28, 
       0x3, 0x28, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 
       0x3, 0x29, 0x5, 0x29, 0x59d, 0xa, 0x29, 0x3, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x5, 0x2a, 0x5a2, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x5a9, 0xa, 0x2a, 0x3, 0x2b, 0x3, 
       0x2b, 0x5, 0x2b, 0x5ad, 0xa, 0x2b, 0x3, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 
       0x7, 0x2c, 0x5b2, 0xa, 0x2c, 0xc, 0x2c, 0xe, 0x2c, 0x5b5, 0xb, 0x2c, 
       0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x7, 0x2e, 
       0x5bc, 0xa, 0x2e, 0xc, 0x2e, 0xe, 0x2e, 0x5bf, 0xb, 0x2e, 0x3, 0x2f, 
       0x5, 0x2f, 0x5c2, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x5c6, 
       0xa, 0x2f, 0x3, 0x30, 0x3, 0x30, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 
       0x3, 0x31, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x5d1, 0xa, 
       0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 
       0x32, 0x5d8, 0xa, 0x32, 0x3, 0x33, 0x3, 0x33, 0x3, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x5, 0x34, 0x5df, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 
       0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x5e6, 0xa, 0x34, 0x3, 0x35, 
       0x3, 0x35, 0x3, 0x36, 0x3, 0x36, 0x5, 0x36, 0x5ec, 0xa, 0x36, 0x3, 
       0x36, 0x3, 0x36, 0x5, 0x36, 0x5f0, 0xa, 0x36, 0x3, 0x36, 0x3, 0x36, 
       0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x5, 0x36, 0x5f7, 0xa, 0x36, 0x3, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x38, 0x3, 0x38, 0x5, 
       0x38, 0x5ff, 0xa, 0x38, 0x3, 0x38, 0x5, 0x38, 0x602, 0xa, 0x38, 0x3, 
       0x39, 0x3, 0x39, 0x5, 0x39, 0x606, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 
       0x5, 0x39, 0x60a, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 
       0x39, 0x3, 0x39, 0x5, 0x39, 0x611, 0xa, 0x39, 0x3, 0x3a, 0x3, 0x3a, 
       0x5, 0x3a, 0x615, 0xa, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x619, 
       0xa, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 
       0x5, 0x3a, 0x620, 0xa, 0x3a, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 
       0x3b, 0x3, 0x3b, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3d, 0x3, 0x3d, 0x3, 
       0x3d, 0x3, 0x3d, 0x5, 0x3d, 0x62d, 0xa, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 
       0x3, 0x3d, 0x5, 0x3d, 0x632, 0xa, 0x3d, 0x3, 0x3e, 0x3, 0x3e, 0x5, 
       0x3e, 0x636, 0xa, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3f, 0x3, 0x3f, 
       0x7, 0x3f, 0x63c, 0xa, 0x3f, 0xc, 0x3f, 0xe, 0x3f, 0x63f, 0xb, 0x3f, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 
       0x3, 0x41, 0x3, 0x41, 0x5, 0x41, 0x649, 0xa, 0x41, 0x3, 0x42, 0x3, 
       0x42, 0x3, 0x42, 0x7, 0x42, 0x64e, 0xa, 0x42, 0xc, 0x42, 0xe, 0x42, 
       0x651, 0xb, 0x42, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x655, 0xa, 0x43, 
       0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 
       0x65c, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x65f, 0xb, 0x44, 0x3, 0x45, 
       0x3, 0x45, 0x5, 0x45, 0x663, 0xa, 0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 
       0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0x66c, 
       0xa, 0x45, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x5, 0x46, 0x671, 0xa, 
       0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x5, 
       0x47, 0x678, 0xa, 0x47, 0x3, 0x47, 0x3, 0x47, 0x5, 0x47, 0x67c, 0xa, 
       0x47, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x5, 0x48, 0x681, 0xa, 0x48, 
       0x3, 0x48, 0x5, 0x48, 0x684, 0xa, 0x48, 0x3, 0x49, 0x3, 0x49, 0x3, 
       0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x5, 
       0x4a, 0x68e, 0xa, 0x4a, 0x5, 0x4a, 0x690, 0xa, 0x4a, 0x3, 0x4b, 0x3, 
       0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 
       0x4c, 0x3, 0x4c, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4e, 0x3, 
       0x4e, 0x5, 0x4e, 0x6a0, 0xa, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4f, 
       0x3, 0x4f, 0x3, 0x4f, 0x7, 0x4f, 0x6a7, 0xa, 0x4f, 0xc, 0x4f, 0xe, 
       0x4f, 0x6aa, 0xb, 0x4f, 0x3, 0x50, 0x5, 0x50, 0x6ad, 0xa, 0x50, 0x3, 
       0x50, 0x5, 0x50, 0x6b0, 0xa, 0x50, 0x3, 0x50, 0x3, 0x50, 0x3, 0x51, 
       0x3, 0x51, 0x3, 0x52, 0x3, 0x52, 0x5, 0x52, 0x6b8, 0xa, 0x52, 0x3, 
       0x53, 0x7, 0x53, 0x6bb, 0xa, 0x53, 0xc, 0x53, 0xe, 0x53, 0x6be, 0xb, 
       0x53, 0x3, 0x53, 0x5, 0x53, 0x6c1, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 
       0x5, 0x53, 0x6c5, 0xa, 0x53, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6d3, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x5, 0x54, 0x6d7, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x5, 0x54, 0x6e2, 0xa, 0x54, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x57, 0x3, 0x57, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x5, 0x58, 0x6f3, 0xa, 0x58, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x7, 
       0x59, 0x6f8, 0xa, 0x59, 0xc, 0x59, 0xe, 0x59, 0x6fb, 0xb, 0x59, 0x3, 
       0x5a, 0x3, 0x5a, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0x702, 
       0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5c, 0x3, 0x5c, 
       0x7, 0x5c, 0x709, 0xa, 0x5c, 0xc, 0x5c, 0xe, 0x5c, 0x70c, 0xb, 0x5c, 
       0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 
       0x3, 0x5d, 0x5, 0x5d, 0x715, 0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x71b, 0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 
       0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 
       0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x729, 0xa, 
       0x5d, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5f, 0x3, 0x5f, 0x3, 
       0x5f, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x61, 0x3, 0x61, 0x3, 
       0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x62, 0x3, 0x62, 0x3, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x7, 0x63, 0x73e, 0xa, 0x63, 0xc, 0x63, 0xe, 0x63, 
       0x741, 0xb, 0x63, 0x3, 0x64, 0x3, 0x64, 0x3, 0x65, 0x3, 0x65, 0x3, 
       0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 
       0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 
       0x68, 0x3, 0x68, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 
       0x6a, 0x3, 0x6a, 0x3, 0x6a, 0x7, 0x6a, 0x75c, 0xa, 0x6a, 0xc, 0x6a, 
       0xe, 0x6a, 0x75f, 0xb, 0x6a, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6c, 0x3, 
       0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6d, 0x3, 
       0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x5, 0x6d, 0x76d, 0xa, 0x6d, 0x3, 0x6d, 
       0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x5, 0x6d, 0x785, 0xa, 0x6d, 0x3, 
       0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6f, 0x3, 0x6f, 0x3, 
       0x6f, 0x3, 0x6f, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 
       0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x71, 0x3, 0x71, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x73, 0x5, 0x73, 0x79e, 
       0xa, 0x73, 0x3, 0x73, 0x7, 0x73, 0x7a1, 0xa, 0x73, 0xc, 0x73, 0xe, 
       0x73, 0x7a4, 0xb, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 
       0x5, 0x73, 0x7aa, 0xa, 0x73, 0x3, 0x73, 0x3, 0x73, 0x5, 0x73, 0x7ae, 
       0xa, 0x73, 0x5, 0x73, 0x7b0, 0xa, 0x73, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x5, 0x74, 0x7cd, 0xa, 0x74, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 
       0x7d1, 0xa, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 0x7d6, 
       0xa, 0x75, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 
       0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 0x7df, 0xa, 0x76, 0x3, 0x76, 0x5, 
       0x76, 0x7e2, 0xa, 0x76, 0x5, 0x76, 0x7e4, 0xa, 0x76, 0x3, 0x77, 0x3, 
       0x77, 0x3, 0x78, 0x3, 0x78, 0x5, 0x78, 0x7ea, 0xa, 0x78, 0x3, 0x78, 
       0x3, 0x78, 0x5, 0x78, 0x7ee, 0xa, 0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 
       0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 
       0x79, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 
       0x7b, 0x7, 0x7b, 0x7ff, 0xa, 0x7b, 0xc, 0x7b, 0xe, 0x7b, 0x802, 0xb, 
       0x7b, 0x5, 0x7b, 0x804, 0xa, 0x7b, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 
       0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0x80d, 0xa, 
       0x7c, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 
       0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x5, 0x7e, 0x817, 0xa, 0x7e, 0x3, 0x7e, 
       0x3, 0x7e, 0x5, 0x7e, 0x81b, 0xa, 0x7e, 0x3, 0x7f, 0x3, 0x7f, 0x3, 
       0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x5, 0x80, 0x824, 
       0xa, 0x80, 0x5, 0x80, 0x826, 0xa, 0x80, 0x3, 0x81, 0x3, 0x81, 0x3, 
       0x81, 0x3, 0x81, 0x5, 0x81, 0x82c, 0xa, 0x81, 0x3, 0x82, 0x3, 0x82, 
       0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x5, 0x83, 0x833, 0xa, 0x83, 0x3, 
       0x83, 0x5, 0x83, 0x836, 0xa, 0x83, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 
       0x3, 0x84, 0x3, 0x84, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x5, 0x85, 
       0x840, 0xa, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x5, 0x85, 0x845, 
       0xa, 0x85, 0x3, 0x86, 0x3, 0x86, 0x3, 0x86, 0x7, 0x86, 0x84a, 0xa, 
       0x86, 0xc, 0x86, 0xe, 0x86, 0x84d, 0xb, 0x86, 0x3, 0x87, 0x3, 0x87, 
       0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x5, 0x87, 0x855, 0xa, 
       0x87, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x5, 
       0x88, 0x85c, 0xa, 0x88, 0x3, 0x88, 0x3, 0x88, 0x5, 0x88, 0x860, 0xa, 
       0x88, 0x3, 0x88, 0x3, 0x88, 0x5, 0x88, 0x864, 0xa, 0x88, 0x3, 0x88, 
       0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 
       0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 
       0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 
       0x5, 0x88, 0x879, 0xa, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 
       0x88, 0x5, 0x88, 0x87f, 0xa, 0x88, 0x3, 0x89, 0x3, 0x89, 0x5, 0x89, 
       0x883, 0xa, 0x89, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x3, 
       0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x5, 0x8b, 0x88d, 0xa, 0x8b, 
       0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x892, 0xa, 0x8c, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x5, 0x8d, 0x899, 
       0xa, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 
       0x3, 0x8d, 0x3, 0x8d, 0x5, 0x8d, 0x8a2, 0xa, 0x8d, 0x3, 0x8e, 0x3, 
       0x8e, 0x5, 0x8e, 0x8a6, 0xa, 0x8e, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 
       0x3, 0x8f, 0x5, 0x8f, 0x8ac, 0xa, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 
       0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 
       0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 
       0x8f, 0x3, 0x8f, 0x7, 0x8f, 0x8be, 0xa, 0x8f, 0xc, 0x8f, 0xe, 0x8f, 
       0x8c1, 0xb, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 
       0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x7, 0x8f, 0x8ca, 0xa, 0x8f, 0xc, 0x8f, 
       0xe, 0x8f, 0x8cd, 0xb, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x5, 0x8f, 0x8d1, 
       0xa, 0x8f, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x7, 0x90, 0x8d6, 0xa, 
       0x90, 0xc, 0x90, 0xe, 0x90, 0x8d9, 0xb, 0x90, 0x3, 0x91, 0x3, 0x91, 
       0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 0x8e0, 0xa, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x5, 0x91, 0x8ea, 0xa, 0x91, 0x3, 0x91, 0x3, 0x91, 
       0x5, 0x91, 0x8ee, 0xa, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x5, 0x91, 0x901, 0xa, 0x91, 0x3, 0x91, 0x3, 0x91, 
       0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 
       0x90a, 0xa, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 0x915, 
       0xa, 0x91, 0x3, 0x91, 0x5, 0x91, 0x918, 0xa, 0x91, 0x3, 0x92, 0x3, 
       0x92, 0x5, 0x92, 0x91c, 0xa, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 
       0x3, 0x92, 0x3, 0x92, 0x5, 0x92, 0x923, 0xa, 0x92, 0x3, 0x92, 0x5, 
       0x92, 0x926, 0xa, 0x92, 0x3, 0x92, 0x3, 0x92, 0x5, 0x92, 0x92a, 0xa, 
       0x92, 0x3, 0x92, 0x3, 0x92, 0x5, 0x92, 0x92e, 0xa, 0x92, 0x3, 0x92, 
       0x3, 0x92, 0x3, 0x92, 0x5, 0x92, 0x933, 0xa, 0x92, 0x3, 0x93, 0x3, 
       0x93, 0x5, 0x93, 0x937, 0xa, 0x93, 0x3, 0x93, 0x5, 0x93, 0x93a, 0xa, 
       0x93, 0x3, 0x93, 0x7, 0x93, 0x93d, 0xa, 0x93, 0xc, 0x93, 0xe, 0x93, 
       0x940, 0xb, 0x93, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x97, 0x3, 0x97, 0x3, 
       0x98, 0x3, 0x98, 0x5, 0x98, 0x94e, 0xa, 0x98, 0x3, 0x98, 0x3, 0x98, 
       0x5, 0x98, 0x952, 0xa, 0x98, 0x3, 0x99, 0x5, 0x99, 0x955, 0xa, 0x99, 
       0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 
       0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x5, 0x99, 
       0x962, 0xa, 0x99, 0x3, 0x9a, 0x3, 0x9a, 0x5, 0x9a, 0x966, 0xa, 0x9a, 
       0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x5, 0x9a, 0x96b, 0xa, 0x9a, 0x3, 
       0x9a, 0x5, 0x9a, 0x96e, 0xa, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 
       0x3, 0x9a, 0x3, 0x9a, 0x5, 0x9a, 0x975, 0xa, 0x9a, 0x3, 0x9a, 0x3, 
       0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 
       0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 
       0x9a, 0x3, 0x9a, 0x5, 0x9a, 0x986, 0xa, 0x9a, 0x3, 0x9b, 0x3, 0x9b, 
       0x5, 0x9b, 0x98a, 0xa, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x5, 0x9b, 0x98e, 
       0xa, 0x9b, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x5, 0x9c, 0x99c, 0xa, 0x9c, 0x3, 0x9d, 0x3, 0x9d, 0x3, 
       0x9d, 0x3, 0x9d, 0x7, 0x9d, 0x9a2, 0xa, 0x9d, 0xc, 0x9d, 0xe, 0x9d, 
       0x9a5, 0xb, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9e, 0x3, 0x9e, 0x3, 
       0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x7, 0x9e, 0x9ae, 0xa, 0x9e, 0xc, 0x9e, 
       0xe, 0x9e, 0x9b1, 0xb, 0x9e, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x5, 
       0x9f, 0x9b6, 0xa, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x5, 0x9f, 0x9ba, 0xa, 
       0x9f, 0x3, 0xa0, 0x3, 0xa0, 0x5, 0xa0, 0x9be, 0xa, 0xa0, 0x3, 0xa0, 
       0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x5, 0xa0, 0x9c5, 0xa, 
       0xa0, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x7, 
       0xa2, 0x9cc, 0xa, 0xa2, 0xc, 0xa2, 0xe, 0xa2, 0x9cf, 0xb, 0xa2, 0x3, 
       0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 0x9d6, 
       0xa, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 
       0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 0x9e0, 0xa, 0xa2, 0x5, 
       0xa2, 0x9e2, 0xa, 0xa2, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 
       0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 0x5, 0xa3, 0x9ec, 0xa, 
       0xa3, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x5, 
       0xa4, 0x9f3, 0xa, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x7, 0xa5, 0x9fb, 0xa, 0xa5, 0xc, 0xa5, 0xe, 
       0xa5, 0x9fe, 0xb, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa6, 0x3, 0xa6, 
       0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 
       0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 
       0x5, 0xa8, 0xa10, 0xa, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 
       0xa8, 0x3, 0xa8, 0x5, 0xa8, 0xa17, 0xa, 0xa8, 0x3, 0xa8, 0x5, 0xa8, 
       0xa1a, 0xa, 0xa8, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x7, 0xaa, 0xa25, 
       0xa, 0xaa, 0xc, 0xaa, 0xe, 0xaa, 0xa28, 0xb, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0xa2e, 0xa, 0xaa, 0x3, 0xab, 
       0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x5, 0xab, 0xa34, 0xa, 0xab, 0x3, 
       0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 
       0xac, 0x3, 0xac, 0x3, 0xac, 0x5, 0xac, 0xa3f, 0xa, 0xac, 0x3, 0xac, 
       0x3, 0xac, 0x5, 0xac, 0xa43, 0xa, 0xac, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x5, 0xae, 0xa51, 0xa, 0xae, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xb0, 
       0x3, 0xb0, 0x3, 0xb0, 0x7, 0xb0, 0xa5b, 0xa, 0xb0, 0xc, 0xb0, 0xe, 
       0xb0, 0xa5e, 0xb, 0xb0, 0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0xa62, 0xa, 
       0xb1, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 
       0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x5, 0xb2, 0xa6c, 0xa, 0xb2, 0x3, 0xb2, 
       0x3, 0xb2, 0x3, 0xb2, 0x5, 0xb2, 0xa71, 0xa, 0xb2, 0x7, 0xb2, 0xa73, 
       0xa, 0xb2, 0xc, 0xb2, 0xe, 0xb2, 0xa76, 0xb, 0xb2, 0x3, 0xb2, 0x3, 
       0xb2, 0x5, 0xb2, 0xa7a, 0xa, 0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 
       0x3, 0xb3, 0x5, 0xb3, 0xa80, 0xa, 0xb3, 0x3, 0xb4, 0x3, 0xb4, 0x3, 
       0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 
       0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x5, 0xb4, 0xa8f, 
       0xa, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 
       0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x5, 0xb4, 0xa99, 0xa, 0xb4, 0x3, 
       0xb4, 0x5, 0xb4, 0xa9c, 0xa, 0xb4, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 
       0x5, 0xb5, 0xaa1, 0xa, 0xb5, 0x3, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 
       0xb6, 0x3, 0xb6, 0x5, 0xb6, 0xaa8, 0xa, 0xb6, 0x3, 0xb7, 0x3, 0xb7, 
       0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 
       0x3, 0xb8, 0x3, 0xb8, 0x5, 0xb8, 0xab4, 0xa, 0xb8, 0x3, 0xb9, 0x3, 
       0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 
       0xba, 0x3, 0xba, 0x7, 0xba, 0xabf, 0xa, 0xba, 0xc, 0xba, 0xe, 0xba, 
       0xac2, 0xb, 0xba, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x5, 0xbb, 0xacf, 0xa, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x5, 0xbb, 
       0xad9, 0xa, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x5, 0xbb, 0xae1, 0xa, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 
       0x3, 0xbc, 0x7, 0xbc, 0xae6, 0xa, 0xbc, 0xc, 0xbc, 0xe, 0xbc, 0xae9, 
       0xb, 0xbc, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 
       0x7, 0xbe, 0xaf0, 0xa, 0xbe, 0xc, 0xbe, 0xe, 0xbe, 0xaf3, 0xb, 0xbe, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 
       0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 
       0x5, 0xc1, 0xb01, 0xa, 0xc1, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 
       0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc4, 0x3, 0xc4, 0x7, 0xc4, 0xb11, 
       0xa, 0xc4, 0xc, 0xc4, 0xe, 0xc4, 0xb14, 0xb, 0xc4, 0x3, 0xc5, 0x3, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xb1c, 
       0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 
       0x3, 0xc5, 0x5, 0xc5, 0xb24, 0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xb2d, 
       0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xb32, 0xa, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xb3d, 0xa, 0xc5, 
       0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x7, 0xc6, 0xb42, 0xa, 0xc6, 0xc, 
       0xc6, 0xe, 0xc6, 0xb45, 0xb, 0xc6, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 
       0x5, 0xc7, 0xb4a, 0xa, 0xc7, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc9, 0x3, 
       0xc9, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x5, 
       0xca, 0xb55, 0xa, 0xca, 0x3, 0xca, 0x5, 0xca, 0xb58, 0xa, 0xca, 0x3, 
       0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x5, 0xcb, 0xb5d, 0xa, 0xcb, 0x3, 0xcb, 
       0x3, 0xcb, 0x5, 0xcb, 0xb61, 0xa, 0xcb, 0x3, 0xcc, 0x3, 0xcc, 0x3, 
       0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x5, 0xcc, 0xb68, 0xa, 0xcc, 0x3, 0xcc, 
       0x3, 0xcc, 0x3, 0xcc, 0x5, 0xcc, 0xb6d, 0xa, 0xcc, 0x3, 0xcc, 0x5, 
       0xcc, 0xb70, 0xa, 0xcc, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xce, 0x5, 0xce, 0xb78, 0xa, 0xce, 0x3, 0xce, 0x7, 
       0xce, 0xb7b, 0xa, 0xce, 0xc, 0xce, 0xe, 0xce, 0xb7e, 0xb, 0xce, 0x3, 
       0xce, 0x3, 0xce, 0x3, 0xce, 0x5, 0xce, 0xb83, 0xa, 0xce, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0xb88, 0xa, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x3, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 0x7, 0xd0, 0xb8f, 0xa, 0xd0, 
       0xc, 0xd0, 0xe, 0xd0, 0xb92, 0xb, 0xd0, 0x3, 0xd1, 0x3, 0xd1, 0x5, 
       0xd1, 0xb96, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 
       0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xb9e, 0xa, 0xd1, 0x3, 0xd1, 0x3, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xba4, 0xa, 0xd1, 0x3, 0xd2, 
       0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 
       0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 
       0x5, 0xd2, 0xbb3, 0xa, 0xd2, 0x5, 0xd2, 0xbb5, 0xa, 0xd2, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xbc2, 0xa, 
       0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 0xbc7, 0xa, 0xd4, 
       0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 
       0x5, 0xd6, 0xbcf, 0xa, 0xd6, 0x3, 0xd6, 0x6, 0xd6, 0xbd2, 0xa, 0xd6, 
       0xd, 0xd6, 0xe, 0xd6, 0xbd3, 0x5, 0xd6, 0xbd6, 0xa, 0xd6, 0x3, 0xd7, 
       0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x7, 0xd7, 0xbdd, 0xa, 
       0xd7, 0xc, 0xd7, 0xe, 0xd7, 0xbe0, 0xb, 0xd7, 0x3, 0xd8, 0x3, 0xd8, 
       0x5, 0xd8, 0xbe4, 0xa, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 
       0xd8, 0x3, 0xd8, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xda, 0x3, 
       0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x5, 0xda, 0xbf4, 
       0xa, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xdb, 0x3, 0xdb, 
       0x5, 0xdb, 0xbfb, 0xa, 0xdb, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0xc05, 
       0xa, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0xc0a, 0xa, 
       0xdc, 0x3, 0xdc, 0x5, 0xdc, 0xc0d, 0xa, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 
       0x3, 0xdc, 0x5, 0xdc, 0xc12, 0xa, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0xc19, 0xa, 0xdc, 0x3, 0xdc, 
       0x5, 0xdc, 0xc1c, 0xa, 0xdc, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x7, 
       0xdd, 0xc21, 0xa, 0xdd, 0xc, 0xdd, 0xe, 0xdd, 0xc24, 0xb, 0xdd, 0x3, 
       0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 
       0xde, 0x3, 0xde, 0x5, 0xde, 0xc2e, 0xa, 0xde, 0x3, 0xde, 0x3, 0xde, 
       0x5, 0xde, 0xc32, 0xa, 0xde, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 
       0xdf, 0x3, 0xdf, 0x5, 0xdf, 0xc39, 0xa, 0xdf, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0xc45, 0xa, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0xc4b, 0xa, 0xe0, 0x5, 0xe0, 
       0xc4d, 0xa, 0xe0, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x7, 0xe1, 0xc52, 
       0xa, 0xe1, 0xc, 0xe1, 0xe, 0xe1, 0xc55, 0xb, 0xe1, 0x3, 0xe2, 0x3, 
       0xe2, 0x3, 0xe2, 0x5, 0xe2, 0xc5a, 0xa, 0xe2, 0x3, 0xe2, 0x5, 0xe2, 
       0xc5d, 0xa, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x6, 0xe2, 0xc61, 0xa, 0xe2, 
       0xd, 0xe2, 0xe, 0xe2, 0xc62, 0x5, 0xe2, 0xc65, 0xa, 0xe2, 0x3, 0xe2, 
       0x3, 0xe2, 0x3, 0xe2, 0x7, 0xe2, 0xc6a, 0xa, 0xe2, 0xc, 0xe2, 0xe, 
       0xe2, 0xc6d, 0xb, 0xe2, 0x5, 0xe2, 0xc6f, 0xa, 0xe2, 0x3, 0xe3, 0x3, 
       0xe3, 0x5, 0xe3, 0xc73, 0xa, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 
       0xc77, 0xa, 0xe3, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0xc7b, 0xa, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0xc81, 0xa, 
       0xe4, 0x3, 0xe4, 0x5, 0xe4, 0xc84, 0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x5, 0xe4, 0xc88, 0xa, 0xe4, 0x3, 0xe4, 0x7, 0xe4, 0xc8b, 0xa, 0xe4, 
       0xc, 0xe4, 0xe, 0xe4, 0xc8e, 0xb, 0xe4, 0x3, 0xe5, 0x3, 0xe5, 0x3, 
       0xe5, 0x6, 0xe5, 0xc93, 0xa, 0xe5, 0xd, 0xe5, 0xe, 0xe5, 0xc94, 0x3, 
       0xe5, 0x3, 0xe5, 0x5, 0xe5, 0xc99, 0xa, 0xe5, 0x5, 0xe5, 0xc9b, 0xa, 
       0xe5, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x7, 0xe6, 0xca0, 0xa, 0xe6, 
       0xc, 0xe6, 0xe, 0xe6, 0xca3, 0xb, 0xe6, 0x3, 0xe7, 0x5, 0xe7, 0xca6, 
       0xa, 0xe7, 0x3, 0xe7, 0x5, 0xe7, 0xca9, 0xa, 0xe7, 0x3, 0xe7, 0x3, 
       0xe7, 0x3, 0xe7, 0x5, 0xe7, 0xcae, 0xa, 0xe7, 0x3, 0xe7, 0x5, 0xe7, 
       0xcb1, 0xa, 0xe7, 0x3, 0xe7, 0x5, 0xe7, 0xcb4, 0xa, 0xe7, 0x3, 0xe8, 
       0x5, 0xe8, 0xcb7, 0xa, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x5, 0xe8, 0xcbb, 
       0xa, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 
       0x7, 0xe8, 0xcc2, 0xa, 0xe8, 0xc, 0xe8, 0xe, 0xe8, 0xcc5, 0xb, 0xe8, 
       0x3, 0xe8, 0x3, 0xe8, 0x5, 0xe8, 0xcc9, 0xa, 0xe8, 0x3, 0xe9, 0x3, 
       0xe9, 0x3, 0xea, 0x3, 0xea, 0x5, 0xea, 0xccf, 0xa, 0xea, 0x3, 0xea, 
       0x7, 0xea, 0xcd2, 0xa, 0xea, 0xc, 0xea, 0xe, 0xea, 0xcd5, 0xb, 0xea, 
       0x3, 0xea, 0x5, 0xea, 0xcd8, 0xa, 0xea, 0x3, 0xeb, 0x3, 0xeb, 0x5, 
       0xeb, 0xcdc, 0xa, 0xeb, 0x3, 0xeb, 0x5, 0xeb, 0xcdf, 0xa, 0xeb, 0x5, 
       0xeb, 0xce1, 0xa, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 
       0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x7, 0xec, 0xcea, 0xa, 0xec, 0xc, 
       0xec, 0xe, 0xec, 0xced, 0xb, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xed, 
       0x3, 0xed, 0x5, 0xed, 0xcf3, 0xa, 0xed, 0x3, 0xed, 0x3, 0xed, 0x3, 
       0xed, 0x5, 0xed, 0xcf8, 0xa, 0xed, 0x3, 0xed, 0x5, 0xed, 0xcfb, 0xa, 
       0xed, 0x3, 0xee, 0x3, 0xee, 0x3, 0xee, 0x5, 0xee, 0xd00, 0xa, 0xee, 
       0x3, 0xee, 0x3, 0xee, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 
       0x5, 0xef, 0xd08, 0xa, 0xef, 0x3, 0xef, 0x6, 0xef, 0xd0b, 0xa, 0xef, 
       0xd, 0xef, 0xe, 0xef, 0xd0c, 0x3, 0xef, 0x3, 0xef, 0x5, 0xef, 0xd11, 
       0xa, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xf0, 
       0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x7, 0xf1, 
       0xd1d, 0xa, 0xf1, 0xc, 0xf1, 0xe, 0xf1, 0xd20, 0xb, 0xf1, 0x3, 0xf1, 
       0x5, 0xf1, 0xd23, 0xa, 0xf1, 0x3, 0xf2, 0x3, 0xf2, 0x5, 0xf2, 0xd27, 
       0xa, 0xf2, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x5, 0xf3, 
       0xd2d, 0xa, 0xf3, 0x3, 0xf3, 0x6, 0xf3, 0xd30, 0xa, 0xf3, 0xd, 0xf3, 
       0xe, 0xf3, 0xd31, 0x5, 0xf3, 0xd34, 0xa, 0xf3, 0x3, 0xf3, 0x5, 0xf3, 
       0xd37, 0xa, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf4, 0x3, 0xf4, 0x5, 
       0xf4, 0xd3d, 0xa, 0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x5, 0xf4, 0xd41, 0xa, 
       0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x5, 0xf4, 0xd46, 0xa, 0xf4, 
       0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x5, 0xf4, 0xd4b, 0xa, 0xf4, 0x3, 
       0xf4, 0x5, 0xf4, 0xd4e, 0xa, 0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x5, 0xf4, 
       0xd52, 0xa, 0xf4, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x7, 0xf5, 0xd57, 
       0xa, 0xf5, 0xc, 0xf5, 0xe, 0xf5, 0xd5a, 0xb, 0xf5, 0x3, 0xf6, 0x3, 
       0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x5, 0xf6, 0xd61, 0xa, 0xf6, 
       0x3, 0xf6, 0x5, 0xf6, 0xd64, 0xa, 0xf6, 0x3, 0xf6, 0x5, 0xf6, 0xd67, 
       0xa, 0xf6, 0x3, 0xf6, 0x5, 0xf6, 0xd6a, 0xa, 0xf6, 0x3, 0xf6, 0x5, 
       0xf6, 0xd6d, 0xa, 0xf6, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf8, 0x3, 0xf8, 
       0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 
       0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 
       0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 
       0xd84, 0xa, 0xfb, 0x5, 0xfb, 0xd86, 0xa, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 
       0xd89, 0xa, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 0xd8e, 
       0xa, 0xfb, 0x3, 0xfc, 0x3, 0xfc, 0x5, 0xfc, 0xd92, 0xa, 0xfc, 0x3, 
       0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x5, 
       0xfc, 0xd9a, 0xa, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x5, 0xfc, 
       0xd9f, 0xa, 0xfc, 0x5, 0xfc, 0xda1, 0xa, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 
       0x5, 0xfc, 0xda5, 0xa, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfd, 0x3, 
       0xfd, 0x3, 0xfd, 0x7, 0xfd, 0xdac, 0xa, 0xfd, 0xc, 0xfd, 0xe, 0xfd, 
       0xdaf, 0xb, 0xfd, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x5, 
       0xfe, 0xdb5, 0xa, 0xfe, 0x3, 0xff, 0x3, 0xff, 0x3, 0xff, 0x3, 0xff, 
       0x3, 0xff, 0x3, 0xff, 0x5, 0xff, 0xdbd, 0xa, 0xff, 0x3, 0x100, 0x3, 
       0x100, 0x3, 0x100, 0x3, 0x100, 0x5, 0x100, 0xdc3, 0xa, 0x100, 0x3, 
       0x100, 0x6, 0x100, 0xdc6, 0xa, 0x100, 0xd, 0x100, 0xe, 0x100, 0xdc7, 
       0x5, 0x100, 0xdca, 0xa, 0x100, 0x3, 0x100, 0x5, 0x100, 0xdcd, 0xa, 
       0x100, 0x3, 0x100, 0x3, 0x100, 0x3, 0x101, 0x3, 0x101, 0x5, 0x101, 
       0xdd3, 0xa, 0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 
       0x3, 0x101, 0x5, 0x101, 0xdda, 0xa, 0x101, 0x3, 0x101, 0x3, 0x101, 
       0x3, 0x101, 0x7, 0x101, 0xddf, 0xa, 0x101, 0xc, 0x101, 0xe, 0x101, 
       0xde2, 0xb, 0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 
       0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x5, 0x101, 0xdec, 
       0xa, 0x101, 0x5, 0x101, 0xdee, 0xa, 0x101, 0x3, 0x102, 0x3, 0x102, 
       0x3, 0x103, 0x3, 0x103, 0x3, 0x103, 0x3, 0x103, 0x3, 0x104, 0x5, 
       0x104, 0xdf7, 0xa, 0x104, 0x3, 0x104, 0x3, 0x104, 0x5, 0x104, 0xdfb, 
       0xa, 0x104, 0x3, 0x104, 0x7, 0x104, 0xdfe, 0xa, 0x104, 0xc, 0x104, 
       0xe, 0x104, 0xe01, 0xb, 0x104, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 
       0x3, 0x105, 0x5, 0x105, 0xe07, 0xa, 0x105, 0x3, 0x106, 0x3, 0x106, 
       0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x5, 0x106, 0xe0e, 0xa, 0x106, 
       0x3, 0x106, 0x5, 0x106, 0xe11, 0xa, 0x106, 0x3, 0x106, 0x5, 0x106, 
       0xe14, 0xa, 0x106, 0x3, 0x106, 0x5, 0x106, 0xe17, 0xa, 0x106, 0x3, 
       0x106, 0x3, 0x106, 0x5, 0x106, 0xe1b, 0xa, 0x106, 0x3, 0x106, 0x5, 
       0x106, 0xe1e, 0xa, 0x106, 0x3, 0x106, 0x3, 0x106, 0x5, 0x106, 0xe22, 
       0xa, 0x106, 0x3, 0x106, 0x5, 0x106, 0xe25, 0xa, 0x106, 0x3, 0x106, 
       0x3, 0x106, 0x5, 0x106, 0xe29, 0xa, 0x106, 0x3, 0x106, 0x3, 0x106, 
       0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x5, 
       0x106, 0xe32, 0xa, 0x106, 0x5, 0x106, 0xe34, 0xa, 0x106, 0x3, 0x107, 
       0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 0x5, 0x107, 0xe3b, 
       0xa, 0x107, 0x3, 0x108, 0x3, 0x108, 0x3, 0x108, 0x3, 0x108, 0x3, 
       0x108, 0x5, 0x108, 0xe42, 0xa, 0x108, 0x3, 0x109, 0x3, 0x109, 0x3, 
       0x109, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 
       0x3, 0x109, 0x3, 0x10a, 0x3, 0x10a, 0x5, 0x10a, 0xe4f, 0xa, 0x10a, 
       0x3, 0x10a, 0x3, 0x10a, 0x5, 0x10a, 0xe53, 0xa, 0x10a, 0x3, 0x10a, 
       0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x5, 0x10a, 0xe59, 0xa, 0x10a, 
       0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x5, 0x10a, 0xe5e, 0xa, 0x10a, 
       0x3, 0x10a, 0x5, 0x10a, 0xe61, 0xa, 0x10a, 0x3, 0x10a, 0x7, 0x10a, 
       0xe64, 0xa, 0x10a, 0xc, 0x10a, 0xe, 0x10a, 0xe67, 0xb, 0x10a, 0x3, 
       0x10a, 0x5, 0x10a, 0xe6a, 0xa, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 
       0x10a, 0x3, 0x10a, 0x5, 0x10a, 0xe70, 0xa, 0x10a, 0x5, 0x10a, 0xe72, 
       0xa, 0x10a, 0x3, 0x10b, 0x3, 0x10b, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x7, 0x10c, 0xe79, 0xa, 0x10c, 0xc, 0x10c, 0xe, 0x10c, 0xe7c, 
       0xb, 0x10c, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 
       0x10d, 0x7, 0x10d, 0xe83, 0xa, 0x10d, 0xc, 0x10d, 0xe, 0x10d, 0xe86, 
       0xb, 0x10d, 0x5, 0x10d, 0xe88, 0xa, 0x10d, 0x3, 0x10e, 0x3, 0x10e, 
       0x3, 0x10e, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x110, 0x3, 0x110, 0x3, 
       0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 
       0x3, 0x110, 0x5, 0x110, 0xe98, 0xa, 0x110, 0x3, 0x110, 0x3, 0x110, 
       0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x5, 
       0x110, 0xea1, 0xa, 0x110, 0x3, 0x110, 0x5, 0x110, 0xea4, 0xa, 0x110, 
       0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0xeaa, 
       0xa, 0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0xeae, 0xa, 0x111, 
       0x3, 0x111, 0x5, 0x111, 0xeb1, 0xa, 0x111, 0x3, 0x112, 0x3, 0x112, 
       0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 
       0x112, 0x5, 0x112, 0xebb, 0xa, 0x112, 0x3, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x3, 0x114, 0x3, 0x114, 0x3, 0x115, 0x3, 0x115, 
       0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x5, 0x115, 0xec8, 0xa, 0x115, 
       0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x5, 
       0x115, 0xecf, 0xa, 0x115, 0x3, 0x115, 0x3, 0x115, 0x5, 0x115, 0xed3, 
       0xa, 0x115, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 
       0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x5, 0x116, 0xedd, 0xa, 
       0x116, 0x3, 0x117, 0x3, 0x117, 0x5, 0x117, 0xee1, 0xa, 0x117, 0x3, 
       0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 
       0x3, 0x117, 0x3, 0x117, 0x5, 0x117, 0xeeb, 0xa, 0x117, 0x3, 0x117, 
       0x5, 0x117, 0xeee, 0xa, 0x117, 0x3, 0x117, 0x3, 0x117, 0x5, 0x117, 
       0xef2, 0xa, 0x117, 0x3, 0x117, 0x5, 0x117, 0xef5, 0xa, 0x117, 0x3, 
       0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x5, 0x117, 
       0xefc, 0xa, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 
       0x3, 0x117, 0x5, 0x117, 0xf03, 0xa, 0x117, 0x3, 0x117, 0x3, 0x117, 
       0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x5, 0x118, 0xf0b, 
       0xa, 0x118, 0x3, 0x119, 0x3, 0x119, 0x3, 0x119, 0x7, 0x119, 0xf10, 
       0xa, 0x119, 0xc, 0x119, 0xe, 0x119, 0xf13, 0xb, 0x119, 0x3, 0x11a, 
       0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x7, 
       0x11a, 0xf1b, 0xa, 0x11a, 0xc, 0x11a, 0xe, 0x11a, 0xf1e, 0xb, 0x11a, 
       0x5, 0x11a, 0xf20, 0xa, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x5, 0x11a, 
       0xf24, 0xa, 0x11a, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 
       0x5, 0x11b, 0xf2a, 0xa, 0x11b, 0x3, 0x11b, 0x5, 0x11b, 0xf2d, 0xa, 
       0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x5, 0x11b, 
       0xf33, 0xa, 0x11b, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x7, 0x11c, 
       0xf38, 0xa, 0x11c, 0xc, 0x11c, 0xe, 0x11c, 0xf3b, 0xb, 0x11c, 0x3, 
       0x11c, 0x3, 0x11c, 0x5, 0x11c, 0xf3f, 0xa, 0x11c, 0x3, 0x11d, 0x3, 
       0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x5, 0x11d, 0xf45, 0xa, 0x11d, 0x3, 
       0x11d, 0x6, 0x11d, 0xf48, 0xa, 0x11d, 0xd, 0x11d, 0xe, 0x11d, 0xf49, 
       0x5, 0x11d, 0xf4c, 0xa, 0x11d, 0x3, 0x11d, 0x5, 0x11d, 0xf4f, 0xa, 
       0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11e, 0x3, 0x11e, 0x5, 0x11e, 
       0xf55, 0xa, 0x11e, 0x3, 0x11e, 0x5, 0x11e, 0xf58, 0xa, 0x11e, 0x3, 
       0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x5, 0x11e, 0xf5d, 0xa, 0x11e, 0x3, 
       0x11e, 0x3, 0x11e, 0x5, 0x11e, 0xf61, 0xa, 0x11e, 0x3, 0x11e, 0x3, 
       0x11e, 0x3, 0x11e, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 
       0x3, 0x11f, 0x5, 0x11f, 0xf6b, 0xa, 0x11f, 0x3, 0x120, 0x3, 0x120, 
       0x7, 0x120, 0xf6f, 0xa, 0x120, 0xc, 0x120, 0xe, 0x120, 0xf72, 0xb, 
       0x120, 0x3, 0x121, 0x3, 0x121, 0x5, 0x121, 0xf76, 0xa, 0x121, 0x3, 
       0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x123, 0x3, 0x123, 
       0x5, 0x123, 0xf7e, 0xa, 0x123, 0x3, 0x123, 0x3, 0x123, 0x3, 0x124, 
       0x5, 0x124, 0xf83, 0xa, 0x124, 0x3, 0x124, 0x3, 0x124, 0x5, 0x124, 
       0xf87, 0xa, 0x124, 0x3, 0x124, 0x5, 0x124, 0xf8a, 0xa, 0x124, 0x3, 
       0x124, 0x5, 0x124, 0xf8d, 0xa, 0x124, 0x3, 0x124, 0x5, 0x124, 0xf90, 
       0xa, 0x124, 0x3, 0x124, 0x5, 0x124, 0xf93, 0xa, 0x124, 0x3, 0x124, 
       0x7, 0x124, 0xf96, 0xa, 0x124, 0xc, 0x124, 0xe, 0x124, 0xf99, 0xb, 
       0x124, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0xf9d, 0xa, 0x125, 0x3, 
       0x125, 0x3, 0x125, 0x5, 0x125, 0xfa1, 0xa, 0x125, 0x3, 0x125, 0x5, 
       0x125, 0xfa4, 0xa, 0x125, 0x3, 0x125, 0x5, 0x125, 0xfa7, 0xa, 0x125, 
       0x3, 0x125, 0x5, 0x125, 0xfaa, 0xa, 0x125, 0x3, 0x125, 0x5, 0x125, 
       0xfad, 0xa, 0x125, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 
       0x5, 0x126, 0xfb3, 0xa, 0x126, 0x5, 0x126, 0xfb5, 0xa, 0x126, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x7, 0x127, 0xfba, 0xa, 0x127, 0xc, 
       0x127, 0xe, 0x127, 0xfbd, 0xb, 0x127, 0x3, 0x128, 0x3, 0x128, 0x5, 
       0x128, 0xfc1, 0xa, 0x128, 0x3, 0x128, 0x5, 0x128, 0xfc4, 0xa, 0x128, 
       0x3, 0x129, 0x3, 0x129, 0x5, 0x129, 0xfc8, 0xa, 0x129, 0x3, 0x129, 
       0x5, 0x129, 0xfcb, 0xa, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x12a, 
       0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x7, 
       0x12b, 0xfd5, 0xa, 0x12b, 0xc, 0x12b, 0xe, 0x12b, 0xfd8, 0xb, 0x12b, 
       0x3, 0x12c, 0x3, 0x12c, 0x5, 0x12c, 0xfdc, 0xa, 0x12c, 0x3, 0x12c, 
       0x3, 0x12c, 0x5, 0x12c, 0xfe0, 0xa, 0x12c, 0x3, 0x12c, 0x5, 0x12c, 
       0xfe3, 0xa, 0x12c, 0x3, 0x12c, 0x5, 0x12c, 0xfe6, 0xa, 0x12c, 0x3, 
       0x12c, 0x5, 0x12c, 0xfe9, 0xa, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x5, 
       0x12c, 0xfed, 0xa, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x5, 
       0x12c, 0xff2, 0xa, 0x12c, 0x3, 0x12c, 0x5, 0x12c, 0xff5, 0xa, 0x12c, 
       0x3, 0x12c, 0x5, 0x12c, 0xff8, 0xa, 0x12c, 0x5, 0x12c, 0xffa, 0xa, 
       0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x5, 0x12c, 0xffe, 0xa, 0x12c, 0x3, 
       0x12c, 0x5, 0x12c, 0x1001, 0xa, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 
       0x12c, 0x3, 0x12c, 0x5, 0x12c, 0x1007, 0xa, 0x12c, 0x7, 0x12c, 0x1009, 
       0xa, 0x12c, 0xc, 0x12c, 0xe, 0x12c, 0x100c, 0xb, 0x12c, 0x3, 0x12d, 
       0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 
       0x12d, 0x5, 0x12d, 0x1015, 0xa, 0x12d, 0x3, 0x12e, 0x5, 0x12e, 0x1018, 
       0xa, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x5, 0x12e, 0x101c, 0xa, 0x12e, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 
       0x12f, 0x1023, 0xa, 0x12f, 0x3, 0x130, 0x3, 0x130, 0x3, 0x131, 0x3, 
       0x131, 0x3, 0x131, 0x5, 0x131, 0x102a, 0xa, 0x131, 0x3, 0x131, 0x5, 
       0x131, 0x102d, 0xa, 0x131, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 
       0x133, 0x3, 0x133, 0x3, 0x133, 0x3, 0x133, 0x3, 0x134, 0x3, 0x134, 
       0x3, 0x134, 0x7, 0x134, 0x1039, 0xa, 0x134, 0xc, 0x134, 0xe, 0x134, 
       0x103c, 0xb, 0x134, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x1040, 0xa, 
       0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 
       0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x5, 
       0x135, 0x104c, 0xa, 0x135, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x7, 0x136, 0x1052, 0xa, 0x136, 0xc, 0x136, 0xe, 0x136, 0x1055, 
       0xb, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x137, 0x3, 0x137, 0x5, 
       0x137, 0x105b, 0xa, 0x137, 0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x3, 
       0x139, 0x3, 0x139, 0x3, 0x139, 0x3, 0x13a, 0x3, 0x13a, 0x3, 0x13a, 
       0x7, 0x13a, 0x1066, 0xa, 0x13a, 0xc, 0x13a, 0xe, 0x13a, 0x1069, 0xb, 
       0x13a, 0x3, 0x13b, 0x3, 0x13b, 0x3, 0x13b, 0x3, 0x13b, 0x3, 0x13b, 
       0x3, 0x13b, 0x3, 0x13c, 0x3, 0x13c, 0x3, 0x13d, 0x3, 0x13d, 0x3, 
       0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x5, 0x13d, 0x1079, 0xa, 
       0x13d, 0x3, 0x13e, 0x5, 0x13e, 0x107c, 0xa, 0x13e, 0x3, 0x13e, 0x3, 
       0x13e, 0x5, 0x13e, 0x1080, 0xa, 0x13e, 0x3, 0x13e, 0x3, 0x13e, 0x3, 
       0x13e, 0x3, 0x13e, 0x3, 0x13e, 0x5, 0x13e, 0x1087, 0xa, 0x13e, 0x3, 
       0x13f, 0x3, 0x13f, 0x3, 0x13f, 0x3, 0x13f, 0x3, 0x13f, 0x3, 0x13f, 
       0x3, 0x13f, 0x3, 0x13f, 0x3, 0x13f, 0x3, 0x13f, 0x3, 0x13f, 0x3, 
       0x13f, 0x5, 0x13f, 0x1095, 0xa, 0x13f, 0x3, 0x140, 0x3, 0x140, 0x3, 
       0x140, 0x3, 0x140, 0x3, 0x141, 0x3, 0x141, 0x3, 0x141, 0x7, 0x141, 
       0x109e, 0xa, 0x141, 0xc, 0x141, 0xe, 0x141, 0x10a1, 0xb, 0x141, 0x3, 
       0x142, 0x3, 0x142, 0x5, 0x142, 0x10a5, 0xa, 0x142, 0x3, 0x142, 0x5, 
       0x142, 0x10a8, 0xa, 0x142, 0x3, 0x143, 0x3, 0x143, 0x3, 0x143, 0x3, 
       0x143, 0x5, 0x143, 0x10ae, 0xa, 0x143, 0x3, 0x143, 0x5, 0x143, 0x10b1, 
       0xa, 0x143, 0x3, 0x144, 0x3, 0x144, 0x3, 0x144, 0x3, 0x144, 0x3, 
       0x144, 0x3, 0x144, 0x3, 0x144, 0x3, 0x145, 0x3, 0x145, 0x3, 0x145, 
       0x5, 0x145, 0x10bd, 0xa, 0x145, 0x3, 0x146, 0x3, 0x146, 0x3, 0x146, 
       0x5, 0x146, 0x10c2, 0xa, 0x146, 0x3, 0x147, 0x3, 0x147, 0x3, 0x147, 
       0x5, 0x147, 0x10c7, 0xa, 0x147, 0x3, 0x147, 0x3, 0x147, 0x3, 0x147, 
       0x3, 0x148, 0x3, 0x148, 0x3, 0x148, 0x3, 0x148, 0x3, 0x148, 0x3, 
       0x148, 0x7, 0x148, 0x10d2, 0xa, 0x148, 0xc, 0x148, 0xe, 0x148, 0x10d5, 
       0xb, 0x148, 0x5, 0x148, 0x10d7, 0xa, 0x148, 0x3, 0x148, 0x5, 0x148, 
       0x10da, 0xa, 0x148, 0x3, 0x149, 0x5, 0x149, 0x10dd, 0xa, 0x149, 0x3, 
       0x149, 0x3, 0x149, 0x3, 0x149, 0x3, 0x149, 0x5, 0x149, 0x10e3, 0xa, 
       0x149, 0x3, 0x149, 0x3, 0x149, 0x5, 0x149, 0x10e7, 0xa, 0x149, 0x3, 
       0x14a, 0x3, 0x14a, 0x3, 0x14a, 0x3, 0x14a, 0x3, 0x14a, 0x3, 0x14a, 
       0x7, 0x14a, 0x10ef, 0xa, 0x14a, 0xc, 0x14a, 0xe, 0x14a, 0x10f2, 0xb, 
       0x14a, 0x3, 0x14a, 0x5, 0x14a, 0x10f5, 0xa, 0x14a, 0x3, 0x14b, 0x3, 
       0x14b, 0x3, 0x14b, 0x3, 0x14b, 0x7, 0x14b, 0x10fb, 0xa, 0x14b, 0xc, 
       0x14b, 0xe, 0x14b, 0x10fe, 0xb, 0x14b, 0x3, 0x14b, 0x3, 0x14b, 0x3, 
       0x14c, 0x3, 0x14c, 0x5, 0x14c, 0x1104, 0xa, 0x14c, 0x3, 0x14c, 0x3, 
       0x14c, 0x5, 0x14c, 0x1108, 0xa, 0x14c, 0x3, 0x14c, 0x5, 0x14c, 0x110b, 
       0xa, 0x14c, 0x3, 0x14c, 0x3, 0x14c, 0x3, 0x14c, 0x5, 0x14c, 0x1110, 
       0xa, 0x14c, 0x3, 0x14c, 0x5, 0x14c, 0x1113, 0xa, 0x14c, 0x3, 0x14c, 
       0x5, 0x14c, 0x1116, 0xa, 0x14c, 0x3, 0x14d, 0x3, 0x14d, 0x3, 0x14d, 
       0x7, 0x14d, 0x111b, 0xa, 0x14d, 0xc, 0x14d, 0xe, 0x14d, 0x111e, 0xb, 
       0x14d, 0x3, 0x14e, 0x5, 0x14e, 0x1121, 0xa, 0x14e, 0x3, 0x14e, 0x3, 
       0x14e, 0x3, 0x14e, 0x5, 0x14e, 0x1126, 0xa, 0x14e, 0x3, 0x14e, 0x3, 
       0x14e, 0x5, 0x14e, 0x112a, 0xa, 0x14e, 0x3, 0x14e, 0x5, 0x14e, 0x112d, 
       0xa, 0x14e, 0x3, 0x14e, 0x5, 0x14e, 0x1130, 0xa, 0x14e, 0x3, 0x14e, 
       0x5, 0x14e, 0x1133, 0xa, 0x14e, 0x3, 0x14e, 0x5, 0x14e, 0x1136, 0xa, 
       0x14e, 0x3, 0x14f, 0x3, 0x14f, 0x5, 0x14f, 0x113a, 0xa, 0x14f, 0x3, 
       0x14f, 0x3, 0x14f, 0x3, 0x14f, 0x7, 0x14f, 0x113f, 0xa, 0x14f, 0xc, 
       0x14f, 0xe, 0x14f, 0x1142, 0xb, 0x14f, 0x3, 0x150, 0x3, 0x150, 0x5, 
       0x150, 0x1146, 0xa, 0x150, 0x3, 0x150, 0x3, 0x150, 0x3, 0x150, 0x3, 
       0x150, 0x3, 0x150, 0x3, 0x151, 0x3, 0x151, 0x3, 0x152, 0x5, 0x152, 
       0x1150, 0xa, 0x152, 0x3, 0x152, 0x3, 0x152, 0x3, 0x153, 0x3, 0x153, 
       0x5, 0x153, 0x1156, 0xa, 0x153, 0x3, 0x154, 0x3, 0x154, 0x3, 0x154, 
       0x3, 0x154, 0x3, 0x154, 0x3, 0x154, 0x5, 0x154, 0x115e, 0xa, 0x154, 
       0x3, 0x155, 0x3, 0x155, 0x3, 0x155, 0x3, 0x155, 0x3, 0x155, 0x7, 
       0x155, 0x1165, 0xa, 0x155, 0xc, 0x155, 0xe, 0x155, 0x1168, 0xb, 0x155, 
       0x5, 0x155, 0x116a, 0xa, 0x155, 0x3, 0x156, 0x3, 0x156, 0x5, 0x156, 
       0x116e, 0xa, 0x156, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 0x5, 0x157, 
       0x1173, 0xa, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x158, 0x3, 0x158, 
       0x3, 0x158, 0x3, 0x158, 0x3, 0x158, 0x3, 0x158, 0x5, 0x158, 0x117d, 
       0xa, 0x158, 0x3, 0x158, 0x3, 0x158, 0x3, 0x159, 0x3, 0x159, 0x3, 
       0x159, 0x3, 0x159, 0x5, 0x159, 0x1185, 0xa, 0x159, 0x3, 0x159, 0x3, 
       0x159, 0x5, 0x159, 0x1189, 0xa, 0x159, 0x3, 0x15a, 0x3, 0x15a, 0x3, 
       0x15a, 0x5, 0x15a, 0x118e, 0xa, 0x15a, 0x3, 0x15a, 0x3, 0x15a, 0x3, 
       0x15b, 0x3, 0x15b, 0x3, 0x15b, 0x3, 0x15b, 0x5, 0x15b, 0x1196, 0xa, 
       0x15b, 0x3, 0x15b, 0x3, 0x15b, 0x3, 0x15b, 0x7, 0x15b, 0x119b, 0xa, 
       0x15b, 0xc, 0x15b, 0xe, 0x15b, 0x119e, 0xb, 0x15b, 0x3, 0x15b, 0x5, 
       0x15b, 0x11a1, 0xa, 0x15b, 0x3, 0x15c, 0x3, 0x15c, 0x3, 0x15c, 0x5, 
       0x15c, 0x11a6, 0xa, 0x15c, 0x3, 0x15c, 0x3, 0x15c, 0x3, 0x15c, 0x5, 
       0x15c, 0x11ab, 0xa, 0x15c, 0x5, 0x15c, 0x11ad, 0xa, 0x15c, 0x3, 0x15d, 
       0x3, 0x15d, 0x3, 0x15d, 0x5, 0x15d, 0x11b2, 0xa, 0x15d, 0x3, 0x15d, 
       0x3, 0x15d, 0x3, 0x15d, 0x7, 0x15d, 0x11b7, 0xa, 0x15d, 0xc, 0x15d, 
       0xe, 0x15d, 0x11ba, 0xb, 0x15d, 0x3, 0x15e, 0x3, 0x15e, 0x3, 0x15e, 
       0x5, 0x15e, 0x11bf, 0xa, 0x15e, 0x3, 0x15e, 0x5, 0x15e, 0x11c2, 0xa, 
       0x15e, 0x3, 0x15e, 0x3, 0x15e, 0x3, 0x15e, 0x7, 0x15e, 0x11c7, 0xa, 
       0x15e, 0xc, 0x15e, 0xe, 0x15e, 0x11ca, 0xb, 0x15e, 0x3, 0x15e, 0x5, 
       0x15e, 0x11cd, 0xa, 0x15e, 0x3, 0x15f, 0x3, 0x15f, 0x3, 0x15f, 0x5, 
       0x15f, 0x11d2, 0xa, 0x15f, 0x3, 0x15f, 0x3, 0x15f, 0x3, 0x15f, 0x5, 
       0x15f, 0x11d7, 0xa, 0x15f, 0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 
       0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x5, 0x160, 0x11e0, 0xa, 
       0x160, 0x3, 0x161, 0x3, 0x161, 0x3, 0x161, 0x3, 0x161, 0x3, 0x161, 
       0x3, 0x161, 0x7, 0x161, 0x11e8, 0xa, 0x161, 0xc, 0x161, 0xe, 0x161, 
       0x11eb, 0xb, 0x161, 0x3, 0x161, 0x5, 0x161, 0x11ee, 0xa, 0x161, 0x3, 
       0x162, 0x3, 0x162, 0x5, 0x162, 0x11f2, 0xa, 0x162, 0x3, 0x162, 0x3, 
       0x162, 0x5, 0x162, 0x11f6, 0xa, 0x162, 0x3, 0x162, 0x3, 0x162, 0x3, 
       0x162, 0x3, 0x162, 0x5, 0x162, 0x11fc, 0xa, 0x162, 0x3, 0x163, 0x3, 
       0x163, 0x3, 0x163, 0x5, 0x163, 0x1201, 0xa, 0x163, 0x3, 0x163, 0x3, 
       0x163, 0x3, 0x164, 0x3, 0x164, 0x3, 0x164, 0x3, 0x164, 0x5, 0x164, 
       0x1209, 0xa, 0x164, 0x3, 0x164, 0x3, 0x164, 0x3, 0x165, 0x3, 0x165, 
       0x3, 0x165, 0x5, 0x165, 0x1210, 0xa, 0x165, 0x3, 0x165, 0x3, 0x165, 
       0x3, 0x165, 0x7, 0x165, 0x1215, 0xa, 0x165, 0xc, 0x165, 0xe, 0x165, 
       0x1218, 0xb, 0x165, 0x3, 0x166, 0x3, 0x166, 0x3, 0x166, 0x5, 0x166, 
       0x121d, 0xa, 0x166, 0x3, 0x166, 0x3, 0x166, 0x3, 0x166, 0x7, 0x166, 
       0x1222, 0xa, 0x166, 0xc, 0x166, 0xe, 0x166, 0x1225, 0xb, 0x166, 0x3, 
       0x166, 0x5, 0x166, 0x1228, 0xa, 0x166, 0x3, 0x167, 0x3, 0x167, 0x3, 
       0x167, 0x5, 0x167, 0x122d, 0xa, 0x167, 0x3, 0x167, 0x3, 0x167, 0x5, 
       0x167, 0x1231, 0xa, 0x167, 0x3, 0x168, 0x3, 0x168, 0x3, 0x168, 0x7, 
       0x168, 0x1236, 0xa, 0x168, 0xc, 0x168, 0xe, 0x168, 0x1239, 0xb, 0x168, 
       0x3, 0x169, 0x3, 0x169, 0x3, 0x169, 0x5, 0x169, 0x123e, 0xa, 0x169, 
       0x3, 0x169, 0x3, 0x169, 0x3, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x5, 
       0x16a, 0x1245, 0xa, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x5, 0x16a, 0x1249, 
       0xa, 0x16a, 0x3, 0x16b, 0x3, 0x16b, 0x3, 0x16b, 0x5, 0x16b, 0x124e, 
       0xa, 0x16b, 0x3, 0x16b, 0x3, 0x16b, 0x5, 0x16b, 0x1252, 0xa, 0x16b, 
       0x3, 0x16c, 0x3, 0x16c, 0x3, 0x16c, 0x5, 0x16c, 0x1257, 0xa, 0x16c, 
       0x3, 0x16c, 0x3, 0x16c, 0x3, 0x16d, 0x3, 0x16d, 0x3, 0x16d, 0x3, 
       0x16d, 0x3, 0x16d, 0x5, 0x16d, 0x1260, 0xa, 0x16d, 0x3, 0x16d, 0x3, 
       0x16d, 0x5, 0x16d, 0x1264, 0xa, 0x16d, 0x3, 0x16e, 0x3, 0x16e, 0x3, 
       0x16e, 0x5, 0x16e, 0x1269, 0xa, 0x16e, 0x3, 0x16e, 0x3, 0x16e, 0x3, 
       0x16e, 0x3, 0x16e, 0x5, 0x16e, 0x126f, 0xa, 0x16e, 0x3, 0x16f, 0x3, 
       0x16f, 0x3, 0x16f, 0x5, 0x16f, 0x1274, 0xa, 0x16f, 0x3, 0x16f, 0x3, 
       0x16f, 0x3, 0x16f, 0x7, 0x16f, 0x1279, 0xa, 0x16f, 0xc, 0x16f, 0xe, 
       0x16f, 0x127c, 0xb, 0x16f, 0x3, 0x16f, 0x5, 0x16f, 0x127f, 0xa, 0x16f, 
       0x3, 0x170, 0x3, 0x170, 0x3, 0x170, 0x5, 0x170, 0x1284, 0xa, 0x170, 
       0x3, 0x170, 0x3, 0x170, 0x3, 0x170, 0x7, 0x170, 0x1289, 0xa, 0x170, 
       0xc, 0x170, 0xe, 0x170, 0x128c, 0xb, 0x170, 0x3, 0x170, 0x5, 0x170, 
       0x128f, 0xa, 0x170, 0x3, 0x171, 0x3, 0x171, 0x3, 0x171, 0x5, 0x171, 
       0x1294, 0xa, 0x171, 0x3, 0x171, 0x3, 0x171, 0x3, 0x171, 0x7, 0x171, 
       0x1299, 0xa, 0x171, 0xc, 0x171, 0xe, 0x171, 0x129c, 0xb, 0x171, 0x3, 
       0x171, 0x5, 0x171, 0x129f, 0xa, 0x171, 0x3, 0x172, 0x3, 0x172, 0x3, 
       0x172, 0x3, 0x172, 0x5, 0x172, 0x12a5, 0xa, 0x172, 0x3, 0x172, 0x3, 
       0x172, 0x3, 0x173, 0x3, 0x173, 0x5, 0x173, 0x12ab, 0xa, 0x173, 0x3, 
       0x173, 0x3, 0x173, 0x3, 0x174, 0x3, 0x174, 0x3, 0x175, 0x3, 0x175, 
       0x5, 0x175, 0x12b3, 0xa, 0x175, 0x5, 0x175, 0x12b5, 0xa, 0x175, 0x3, 
       0x175, 0x3, 0x175, 0x3, 0x175, 0x3, 0x175, 0x5, 0x175, 0x12bb, 0xa, 
       0x175, 0x3, 0x175, 0x3, 0x175, 0x3, 0x175, 0x3, 0x175, 0x3, 0x175, 
       0x5, 0x175, 0x12c2, 0xa, 0x175, 0x3, 0x176, 0x3, 0x176, 0x3, 0x176, 
       0x3, 0x176, 0x3, 0x176, 0x3, 0x176, 0x3, 0x176, 0x5, 0x176, 0x12cb, 
       0xa, 0x176, 0x3, 0x177, 0x3, 0x177, 0x3, 0x177, 0x3, 0x177, 0x5, 
       0x177, 0x12d1, 0xa, 0x177, 0x3, 0x177, 0x3, 0x177, 0x3, 0x177, 0x3, 
       0x177, 0x3, 0x177, 0x3, 0x178, 0x3, 0x178, 0x3, 0x178, 0x7, 0x178, 
       0x12db, 0xa, 0x178, 0xc, 0x178, 0xe, 0x178, 0x12de, 0xb, 0x178, 0x3, 
       0x179, 0x3, 0x179, 0x3, 0x179, 0x5, 0x179, 0x12e3, 0xa, 0x179, 0x3, 
       0x179, 0x3, 0x179, 0x3, 0x17a, 0x3, 0x17a, 0x3, 0x17a, 0x3, 0x17a, 
       0x5, 0x17a, 0x12eb, 0xa, 0x17a, 0x3, 0x17b, 0x3, 0x17b, 0x3, 0x17c, 
       0x3, 0x17c, 0x3, 0x17c, 0x3, 0x17c, 0x3, 0x17c, 0x3, 0x17c, 0x3, 
       0x17c, 0x5, 0x17c, 0x12f6, 0xa, 0x17c, 0x3, 0x17c, 0x5, 0x17c, 0x12f9, 
       0xa, 0x17c, 0x5, 0x17c, 0x12fb, 0xa, 0x17c, 0x3, 0x17c, 0x3, 0x17c, 
       0x3, 0x17c, 0x5, 0x17c, 0x1300, 0xa, 0x17c, 0x3, 0x17c, 0x3, 0x17c, 
       0x3, 0x17c, 0x5, 0x17c, 0x1305, 0xa, 0x17c, 0x3, 0x17d, 0x3, 0x17d, 
       0x3, 0x17d, 0x5, 0x17d, 0x130a, 0xa, 0x17d, 0x3, 0x17e, 0x3, 0x17e, 
       0x3, 0x17f, 0x3, 0x17f, 0x5, 0x17f, 0x1310, 0xa, 0x17f, 0x3, 0x17f, 
       0x5, 0x17f, 0x1313, 0xa, 0x17f, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 
       0x5, 0x180, 0x1318, 0xa, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 
       0x3, 0x180, 0x5, 0x180, 0x131e, 0xa, 0x180, 0x5, 0x180, 0x1320, 0xa, 
       0x180, 0x3, 0x181, 0x3, 0x181, 0x3, 0x181, 0x3, 0x181, 0x3, 0x181, 
       0x3, 0x181, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 
       0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 
       0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 
       0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 
       0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 
       0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 
       0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 
       0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 
       0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x5, 
       0x182, 0x1358, 0xa, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 
       0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 
       0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x5, 
       0x182, 0x1368, 0xa, 0x182, 0x3, 0x182, 0x5, 0x182, 0x136b, 0xa, 0x182, 
       0x3, 0x183, 0x3, 0x183, 0x3, 0x184, 0x3, 0x184, 0x7, 0x184, 0x1371, 
       0xa, 0x184, 0xc, 0x184, 0xe, 0x184, 0x1374, 0xb, 0x184, 0x3, 0x185, 
       0x3, 0x185, 0x5, 0x185, 0x1378, 0xa, 0x185, 0x3, 0x186, 0x3, 0x186, 
       0x3, 0x186, 0x3, 0x186, 0x3, 0x186, 0x5, 0x186, 0x137f, 0xa, 0x186, 
       0x3, 0x187, 0x3, 0x187, 0x3, 0x187, 0x5, 0x187, 0x1384, 0xa, 0x187, 
       0x3, 0x187, 0x3, 0x187, 0x3, 0x187, 0x7, 0x187, 0x1389, 0xa, 0x187, 
       0xc, 0x187, 0xe, 0x187, 0x138c, 0xb, 0x187, 0x3, 0x187, 0x7, 0x187, 
       0x138f, 0xa, 0x187, 0xc, 0x187, 0xe, 0x187, 0x1392, 0xb, 0x187, 0x3, 
       0x188, 0x3, 0x188, 0x3, 0x188, 0x3, 0x188, 0x5, 0x188, 0x1398, 0xa, 
       0x188, 0x3, 0x188, 0x3, 0x188, 0x5, 0x188, 0x139c, 0xa, 0x188, 0x3, 
       0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 
       0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x5, 0x189, 0x13a8, 
       0xa, 0x189, 0x3, 0x18a, 0x5, 0x18a, 0x13ab, 0xa, 0x18a, 0x3, 0x18a, 
       0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 
       0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x7, 0x18a, 0x13b6, 0xa, 0x18a, 0xc, 
       0x18a, 0xe, 0x18a, 0x13b9, 0xb, 0x18a, 0x5, 0x18a, 0x13bb, 0xa, 0x18a, 
       0x3, 0x18a, 0x3, 0x18a, 0x7, 0x18a, 0x13bf, 0xa, 0x18a, 0xc, 0x18a, 
       0xe, 0x18a, 0x13c2, 0xb, 0x18a, 0x5, 0x18a, 0x13c4, 0xa, 0x18a, 0x3, 
       0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 
       0x5, 0x18a, 0x13cc, 0xa, 0x18a, 0x3, 0x18b, 0x3, 0x18b, 0x3, 0x18b, 
       0x3, 0x18b, 0x7, 0x18b, 0x13d2, 0xa, 0x18b, 0xc, 0x18b, 0xe, 0x18b, 
       0x13d5, 0xb, 0x18b, 0x3, 0x18b, 0x3, 0x18b, 0x3, 0x18c, 0x3, 0x18c, 
       0x3, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 0x5, 0x18c, 0x13df, 
       0xa, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 0x5, 0x18c, 0x13e4, 
       0xa, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 0x5, 0x18c, 0x13e9, 
       0xa, 0x18c, 0x3, 0x18d, 0x3, 0x18d, 0x3, 0x18d, 0x7, 0x18d, 0x13ee, 
       0xa, 0x18d, 0xc, 0x18d, 0xe, 0x18d, 0x13f1, 0xb, 0x18d, 0x3, 0x18e, 
       0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 
       0x18e, 0x3, 0x18f, 0x3, 0x18f, 0x3, 0x18f, 0x5, 0x18f, 0x13fd, 0xa, 
       0x18f, 0x3, 0x190, 0x3, 0x190, 0x5, 0x190, 0x1401, 0xa, 0x190, 0x3, 
       0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x5, 0x190, 0x1407, 0xa, 
       0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x5, 0x190, 
       0x140d, 0xa, 0x190, 0x3, 0x190, 0x3, 0x190, 0x5, 0x190, 0x1411, 0xa, 
       0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 
       0x3, 0x190, 0x3, 0x190, 0x5, 0x190, 0x141a, 0xa, 0x190, 0x3, 0x190, 
       0x3, 0x190, 0x5, 0x190, 0x141e, 0xa, 0x190, 0x3, 0x190, 0x3, 0x190, 
       0x5, 0x190, 0x1422, 0xa, 0x190, 0x3, 0x190, 0x3, 0x190, 0x5, 0x190, 
       0x1426, 0xa, 0x190, 0x3, 0x191, 0x3, 0x191, 0x3, 0x192, 0x3, 0x192, 
       0x3, 0x192, 0x5, 0x192, 0x142d, 0xa, 0x192, 0x3, 0x192, 0x3, 0x192, 
       0x5, 0x192, 0x1431, 0xa, 0x192, 0x3, 0x192, 0x3, 0x192, 0x5, 0x192, 
       0x1435, 0xa, 0x192, 0x3, 0x192, 0x3, 0x192, 0x3, 0x192, 0x5, 0x192, 
       0x143a, 0xa, 0x192, 0x3, 0x193, 0x3, 0x193, 0x5, 0x193, 0x143e, 0xa, 
       0x193, 0x3, 0x193, 0x3, 0x193, 0x3, 0x193, 0x5, 0x193, 0x1443, 0xa, 
       0x193, 0x3, 0x194, 0x3, 0x194, 0x3, 0x194, 0x5, 0x194, 0x1448, 0xa, 
       0x194, 0x3, 0x194, 0x3, 0x194, 0x3, 0x195, 0x3, 0x195, 0x3, 0x196, 
       0x3, 0x196, 0x3, 0x196, 0x7, 0x196, 0x1451, 0xa, 0x196, 0xc, 0x196, 
       0xe, 0x196, 0x1454, 0xb, 0x196, 0x3, 0x196, 0x3, 0x196, 0x3, 0x197, 
       0x3, 0x197, 0x3, 0x197, 0x7, 0x197, 0x145b, 0xa, 0x197, 0xc, 0x197, 
       0xe, 0x197, 0x145e, 0xb, 0x197, 0x3, 0x197, 0x3, 0x197, 0x3, 0x197, 
       0x3, 0x197, 0x3, 0x198, 0x3, 0x198, 0x3, 0x198, 0x3, 0x198, 0x3, 
       0x198, 0x3, 0x198, 0x5, 0x198, 0x146a, 0xa, 0x198, 0x3, 0x199, 0x3, 
       0x199, 0x5, 0x199, 0x146e, 0xa, 0x199, 0x3, 0x199, 0x5, 0x199, 0x1471, 
       0xa, 0x199, 0x3, 0x199, 0x3, 0x199, 0x5, 0x199, 0x1475, 0xa, 0x199, 
       0x3, 0x199, 0x3, 0x199, 0x3, 0x19a, 0x3, 0x19a, 0x3, 0x19a, 0x3, 
       0x19a, 0x7, 0x19a, 0x147d, 0xa, 0x19a, 0xc, 0x19a, 0xe, 0x19a, 0x1480, 
       0xb, 0x19a, 0x3, 0x19a, 0x3, 0x19a, 0x3, 0x19b, 0x3, 0x19b, 0x3, 
       0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 
       0x3, 0x19b, 0x3, 0x19b, 0x5, 0x19b, 0x148e, 0xa, 0x19b, 0x3, 0x19b, 
       0x5, 0x19b, 0x1491, 0xa, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x5, 0x19b, 
       0x1495, 0xa, 0x19b, 0x3, 0x19c, 0x3, 0x19c, 0x3, 0x19c, 0x3, 0x19c, 
       0x5, 0x19c, 0x149b, 0xa, 0x19c, 0x3, 0x19c, 0x3, 0x19c, 0x3, 0x19c, 
       0x3, 0x19d, 0x3, 0x19d, 0x3, 0x19d, 0x3, 0x19d, 0x5, 0x19d, 0x14a4, 
       0xa, 0x19d, 0x3, 0x19d, 0x3, 0x19d, 0x3, 0x19e, 0x3, 0x19e, 0x3, 
       0x19e, 0x3, 0x19e, 0x5, 0x19e, 0x14ac, 0xa, 0x19e, 0x3, 0x19e, 0x3, 
       0x19e, 0x5, 0x19e, 0x14b0, 0xa, 0x19e, 0x3, 0x19e, 0x3, 0x19e, 0x3, 
       0x19e, 0x5, 0x19e, 0x14b5, 0xa, 0x19e, 0x3, 0x19f, 0x3, 0x19f, 0x3, 
       0x19f, 0x3, 0x19f, 0x5, 0x19f, 0x14bb, 0xa, 0x19f, 0x3, 0x19f, 0x3, 
       0x19f, 0x3, 0x19f, 0x5, 0x19f, 0x14c0, 0xa, 0x19f, 0x3, 0x19f, 0x3, 
       0x19f, 0x3, 0x19f, 0x3, 0x19f, 0x7, 0x19f, 0x14c6, 0xa, 0x19f, 0xc, 
       0x19f, 0xe, 0x19f, 0x14c9, 0xb, 0x19f, 0x3, 0x19f, 0x3, 0x19f, 0x3, 
       0x19f, 0x5, 0x19f, 0x14ce, 0xa, 0x19f, 0x5, 0x19f, 0x14d0, 0xa, 0x19f, 
       0x3, 0x1a0, 0x3, 0x1a0, 0x5, 0x1a0, 0x14d4, 0xa, 0x1a0, 0x3, 0x1a0, 
       0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x7, 
       0x1a0, 0x14dc, 0xa, 0x1a0, 0xc, 0x1a0, 0xe, 0x1a0, 0x14df, 0xb, 0x1a0, 
       0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x5, 0x1a0, 0x14e4, 0xa, 0x1a0, 
       0x3, 0x1a0, 0x3, 0x1a0, 0x5, 0x1a0, 0x14e8, 0xa, 0x1a0, 0x3, 0x1a0, 
       0x3, 0x1a0, 0x5, 0x1a0, 0x14ec, 0xa, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 
       0x5, 0x1a0, 0x14f0, 0xa, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 
       0x7, 0x1a0, 0x14f5, 0xa, 0x1a0, 0xc, 0x1a0, 0xe, 0x1a0, 0x14f8, 0xb, 
       0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 
       0x5, 0x1a0, 0x14ff, 0xa, 0x1a0, 0x5, 0x1a0, 0x1501, 0xa, 0x1a0, 0x3, 
       0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x7, 0x1a1, 0x1506, 0xa, 0x1a1, 0xc, 
       0x1a1, 0xe, 0x1a1, 0x1509, 0xb, 0x1a1, 0x3, 0x1a2, 0x3, 0x1a2, 0x3, 
       0x1a3, 0x3, 0x1a3, 0x3, 0x1a4, 0x5, 0x1a4, 0x1510, 0xa, 0x1a4, 0x3, 
       0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x7, 0x1a4, 0x1515, 0xa, 0x1a4, 0xc, 
       0x1a4, 0xe, 0x1a4, 0x1518, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 
       0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x5, 0x1a4, 0x151f, 0xa, 0x1a4, 0x3, 
       0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x7, 0x1a4, 0x1525, 0xa, 
       0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 0x1528, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 
       0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x7, 0x1a4, 
       0x1530, 0xa, 0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 0x1533, 0xb, 0x1a4, 0x3, 
       0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x7, 0x1a4, 
       0x153a, 0xa, 0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 0x153d, 0xb, 0x1a4, 0x3, 
       0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x5, 0x1a4, 0x1545, 0xa, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x3, 0x1a4, 0x7, 0x1a4, 0x154b, 0xa, 0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 
       0x154e, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x3, 0x1a4, 0x7, 0x1a4, 0x1555, 0xa, 0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 
       0x1558, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x3, 0x1a4, 0x3, 0x1a4, 0x7, 0x1a4, 0x1560, 0xa, 0x1a4, 0xc, 0x1a4, 
       0xe, 0x1a4, 0x1563, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x3, 0x1a4, 0x7, 0x1a4, 0x1569, 0xa, 0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 
       0x156c, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x3, 0x1a4, 0x7, 0x1a4, 0x1573, 0xa, 0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 
       0x1576, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x7, 0x1a4, 0x157c, 0xa, 0x1a4, 0xc, 0x1a4, 0xe, 0x1a4, 0x157f, 0xb, 
       0x1a4, 0x5, 0x1a4, 0x1581, 0xa, 0x1a4, 0x3, 0x1a5, 0x3, 0x1a5, 0x3, 
       0x1a5, 0x7, 0x1a5, 0x1586, 0xa, 0x1a5, 0xc, 0x1a5, 0xe, 0x1a5, 0x1589, 
       0xb, 0x1a5, 0x3, 0x1a6, 0x3, 0x1a6, 0x3, 0x1a6, 0x3, 0x1a7, 0x3, 
       0x1a7, 0x5, 0x1a7, 0x1590, 0xa, 0x1a7, 0x3, 0x1a7, 0x3, 0x1a7, 0x7, 
       0x1a7, 0x1594, 0xa, 0x1a7, 0xc, 0x1a7, 0xe, 0x1a7, 0x1597, 0xb, 0x1a7, 
       0x3, 0x1a7, 0x5, 0x1a7, 0x159a, 0xa, 0x1a7, 0x3, 0x1a7, 0x5, 0x1a7, 
       0x159d, 0xa, 0x1a7, 0x3, 0x1a8, 0x3, 0x1a8, 0x3, 0x1a8, 0x3, 0x1a8, 
       0x3, 0x1a9, 0x5, 0x1a9, 0x15a4, 0xa, 0x1a9, 0x3, 0x1a9, 0x3, 0x1a9, 
       0x3, 0x1a9, 0x3, 0x1a9, 0x5, 0x1a9, 0x15aa, 0xa, 0x1a9, 0x3, 0x1aa, 
       0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x7, 
       0x1aa, 0x15b2, 0xa, 0x1aa, 0xc, 0x1aa, 0xe, 0x1aa, 0x15b5, 0xb, 0x1aa, 
       0x3, 0x1aa, 0x3, 0x1aa, 0x5, 0x1aa, 0x15b9, 0xa, 0x1aa, 0x3, 0x1aa, 
       0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1ab, 0x3, 0x1ab, 0x3, 0x1ab, 0x3, 
       0x1ab, 0x3, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x5, 0x1ac, 
       0x15c6, 0xa, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x5, 0x1ac, 
       0x15cb, 0xa, 0x1ac, 0x3, 0x1ac, 0x5, 0x1ac, 0x15ce, 0xa, 0x1ac, 0x3, 
       0x1ac, 0x3, 0x1ac, 0x5, 0x1ac, 0x15d2, 0xa, 0x1ac, 0x3, 0x1ac, 0x5, 
       0x1ac, 0x15d5, 0xa, 0x1ac, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 
       0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x5, 0x1ad, 0x15de, 0xa, 
       0x1ad, 0x3, 0x1ae, 0x3, 0x1ae, 0x3, 0x1ae, 0x3, 0x1ae, 0x3, 0x1ae, 
       0x3, 0x1ae, 0x3, 0x1ae, 0x5, 0x1ae, 0x15e7, 0xa, 0x1ae, 0x3, 0x1af, 
       0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 
       0x1af, 0x7, 0x1af, 0x15f0, 0xa, 0x1af, 0xc, 0x1af, 0xe, 0x1af, 0x15f3, 
       0xb, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x5, 0x1af, 0x15f8, 
       0xa, 0x1af, 0x5, 0x1af, 0x15fa, 0xa, 0x1af, 0x3, 0x1b0, 0x3, 0x1b0, 
       0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 
       0x1b1, 0x3, 0x1b1, 0x3, 0x1b1, 0x3, 0x1b1, 0x3, 0x1b1, 0x7, 0x1b1, 
       0x1608, 0xa, 0x1b1, 0xc, 0x1b1, 0xe, 0x1b1, 0x160b, 0xb, 0x1b1, 0x3, 
       0x1b1, 0x5, 0x1b1, 0x160e, 0xa, 0x1b1, 0x5, 0x1b1, 0x1610, 0xa, 0x1b1, 
       0x3, 0x1b2, 0x5, 0x1b2, 0x1613, 0xa, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 
       0x3, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 0x7, 0x1b2, 0x161a, 0xa, 0x1b2, 
       0xc, 0x1b2, 0xe, 0x1b2, 0x161d, 0xb, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 
       0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 
       0x1b3, 0x7, 0x1b3, 0x1627, 0xa, 0x1b3, 0xc, 0x1b3, 0xe, 0x1b3, 0x162a, 
       0xb, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b4, 0x3, 
       0x1b4, 0x3, 0x1b4, 0x3, 0x1b4, 0x3, 0x1b4, 0x5, 0x1b4, 0x1634, 0xa, 
       0x1b4, 0x3, 0x1b4, 0x5, 0x1b4, 0x1637, 0xa, 0x1b4, 0x3, 0x1b5, 0x3, 
       0x1b5, 0x5, 0x1b5, 0x163b, 0xa, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 
       0x1b5, 0x5, 0x1b5, 0x1640, 0xa, 0x1b5, 0x3, 0x1b6, 0x3, 0x1b6, 0x5, 
       0x1b6, 0x1644, 0xa, 0x1b6, 0x3, 0x1b6, 0x3, 0x1b6, 0x3, 0x1b7, 0x3, 
       0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 
       0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x1653, 
       0xa, 0x1b7, 0x3, 0x1b8, 0x3, 0x1b8, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 
       0x1b9, 0x1659, 0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 
       0x1b9, 0x165e, 0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 
       0x1b9, 0x1663, 0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 0x1b9, 0x1667, 
       0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x7, 0x1b9, 0x166c, 
       0xa, 0x1b9, 0xc, 0x1b9, 0xe, 0x1b9, 0x166f, 0xb, 0x1b9, 0x3, 0x1b9, 
       0x3, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x7, 0x1b9, 0x1675, 0xa, 0x1b9, 
       0xc, 0x1b9, 0xe, 0x1b9, 0x1678, 0xb, 0x1b9, 0x3, 0x1b9, 0x5, 0x1b9, 
       0x167b, 0xa, 0x1b9, 0x5, 0x1b9, 0x167d, 0xa, 0x1b9, 0x3, 0x1ba, 0x3, 
       0x1ba, 0x3, 0x1ba, 0x3, 0x1ba, 0x3, 0x1bb, 0x3, 0x1bb, 0x5, 0x1bb, 
       0x1685, 0xa, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 
       0x3, 0x1bb, 0x5, 0x1bb, 0x168c, 0xa, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 
       0x5, 0x1bb, 0x1690, 0xa, 0x1bb, 0x3, 0x1bb, 0x5, 0x1bb, 0x1693, 0xa, 
       0x1bb, 0x3, 0x1bc, 0x3, 0x1bc, 0x3, 0x1bc, 0x3, 0x1bd, 0x3, 0x1bd, 
       0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x5, 0x1bd, 0x169e, 
       0xa, 0x1bd, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x5, 0x1be, 0x16a3, 
       0xa, 0x1be, 0x3, 0x1be, 0x5, 0x1be, 0x16a6, 0xa, 0x1be, 0x3, 0x1bf, 
       0x3, 0x1bf, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 
       0x1c0, 0x5, 0x1c0, 0x16af, 0xa, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 
       0x1c0, 0x3, 0x1c0, 0x5, 0x1c0, 0x16b5, 0xa, 0x1c0, 0x3, 0x1c0, 0x3, 
       0x1c0, 0x5, 0x1c0, 0x16b9, 0xa, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 
       0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x5, 0x1c0, 0x16c0, 0xa, 0x1c0, 0x3, 
       0x1c1, 0x3, 0x1c1, 0x3, 0x1c2, 0x3, 0x1c2, 0x3, 0x1c2, 0x3, 0x1c2, 
       0x3, 0x1c2, 0x3, 0x1c2, 0x7, 0x1c2, 0x16ca, 0xa, 0x1c2, 0xc, 0x1c2, 
       0xe, 0x1c2, 0x16cd, 0xb, 0x1c2, 0x5, 0x1c2, 0x16cf, 0xa, 0x1c2, 0x3, 
       0x1c2, 0x3, 0x1c2, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 0x1c3, 0x16d5, 0xa, 
       0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 
       0x3, 0x1c4, 0x3, 0x1c4, 0x3, 0x1c4, 0x3, 0x1c4, 0x3, 0x1c4, 0x5, 
       0x1c4, 0x16e1, 0xa, 0x1c4, 0x3, 0x1c5, 0x3, 0x1c5, 0x5, 0x1c5, 0x16e5, 
       0xa, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 
       0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x5, 0x1c5, 0x16ee, 0xa, 0x1c5, 0x3, 
       0x1c6, 0x3, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c6, 0x5, 0x1c6, 
       0x16f5, 0xa, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c7, 
       0x3, 0x1c7, 0x3, 0x1c7, 0x7, 0x1c7, 0x16fd, 0xa, 0x1c7, 0xc, 0x1c7, 
       0xe, 0x1c7, 0x1700, 0xb, 0x1c7, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 
       0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 
       0x1c8, 0x5, 0x1c8, 0x170b, 0xa, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x5, 
       0x1c8, 0x170f, 0xa, 0x1c8, 0x3, 0x1c9, 0x3, 0x1c9, 0x3, 0x1c9, 0x3, 
       0x1c9, 0x3, 0x1c9, 0x3, 0x1c9, 0x3, 0x1c9, 0x3, 0x1c9, 0x3, 0x1c9, 
       0x3, 0x1c9, 0x3, 0x1c9, 0x5, 0x1c9, 0x171c, 0xa, 0x1c9, 0x3, 0x1ca, 
       0x3, 0x1ca, 0x5, 0x1ca, 0x1720, 0xa, 0x1ca, 0x3, 0x1cb, 0x3, 0x1cb, 
       0x3, 0x1cb, 0x3, 0x1cb, 0x5, 0x1cb, 0x1726, 0xa, 0x1cb, 0x5, 0x1cb, 
       0x1728, 0xa, 0x1cb, 0x3, 0x1cc, 0x3, 0x1cc, 0x5, 0x1cc, 0x172c, 0xa, 
       0x1cc, 0x3, 0x1cc, 0x5, 0x1cc, 0x172f, 0xa, 0x1cc, 0x3, 0x1cc, 0x3, 
       0x1cc, 0x3, 0x1cc, 0x7, 0x1cc, 0x1734, 0xa, 0x1cc, 0xc, 0x1cc, 0xe, 
       0x1cc, 0x1737, 0xb, 0x1cc, 0x3, 0x1cc, 0x3, 0x1cc, 0x5, 0x1cc, 0x173b, 
       0xa, 0x1cc, 0x3, 0x1cc, 0x5, 0x1cc, 0x173e, 0xa, 0x1cc, 0x3, 0x1cd, 
       0x3, 0x1cd, 0x5, 0x1cd, 0x1742, 0xa, 0x1cd, 0x3, 0x1cd, 0x5, 0x1cd, 
       0x1745, 0xa, 0x1cd, 0x3, 0x1cd, 0x5, 0x1cd, 0x1748, 0xa, 0x1cd, 0x3, 
       0x1cd, 0x7, 0x1cd, 0x174b, 0xa, 0x1cd, 0xc, 0x1cd, 0xe, 0x1cd, 0x174e, 
       0xb, 0x1cd, 0x3, 0x1ce, 0x3, 0x1ce, 0x5, 0x1ce, 0x1752, 0xa, 0x1ce, 
       0x3, 0x1ce, 0x7, 0x1ce, 0x1755, 0xa, 0x1ce, 0xc, 0x1ce, 0xe, 0x1ce, 
       0x1758, 0xb, 0x1ce, 0x3, 0x1cf, 0x3, 0x1cf, 0x5, 0x1cf, 0x175c, 0xa, 
       0x1cf, 0x3, 0x1cf, 0x3, 0x1cf, 0x3, 0x1cf, 0x3, 0x1cf, 0x3, 0x1cf, 
       0x5, 0x1cf, 0x1763, 0xa, 0x1cf, 0x3, 0x1d0, 0x3, 0x1d0, 0x5, 0x1d0, 
       0x1767, 0xa, 0x1d0, 0x3, 0x1d0, 0x5, 0x1d0, 0x176a, 0xa, 0x1d0, 0x3, 
       0x1d1, 0x3, 0x1d1, 0x3, 0x1d1, 0x3, 0x1d1, 0x7, 0x1d1, 0x1770, 0xa, 
       0x1d1, 0xc, 0x1d1, 0xe, 0x1d1, 0x1773, 0xb, 0x1d1, 0x3, 0x1d1, 0x5, 
       0x1d1, 0x1776, 0xa, 0x1d1, 0x3, 0x1d1, 0x5, 0x1d1, 0x1779, 0xa, 0x1d1, 
       0x3, 0x1d1, 0x5, 0x1d1, 0x177c, 0xa, 0x1d1, 0x3, 0x1d1, 0x5, 0x1d1, 
       0x177f, 0xa, 0x1d1, 0x3, 0x1d2, 0x3, 0x1d2, 0x3, 0x1d2, 0x3, 0x1d2, 
       0x3, 0x1d3, 0x3, 0x1d3, 0x3, 0x1d3, 0x7, 0x1d3, 0x1788, 0xa, 0x1d3, 
       0xc, 0x1d3, 0xe, 0x1d3, 0x178b, 0xb, 0x1d3, 0x3, 0x1d4, 0x3, 0x1d4, 
       0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x5, 0x1d5, 0x1793, 
       0xa, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x5, 
       0x1d5, 0x1799, 0xa, 0x1d5, 0x5, 0x1d5, 0x179b, 0xa, 0x1d5, 0x3, 0x1d5, 
       0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x5, 0x1d5, 0x17a2, 
       0xa, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 
       0x1d5, 0x3, 0x1d5, 0x7, 0x1d5, 0x17aa, 0xa, 0x1d5, 0xc, 0x1d5, 0xe, 
       0x1d5, 0x17ad, 0xb, 0x1d5, 0x3, 0x1d6, 0x3, 0x1d6, 0x3, 0x1d7, 0x3, 
       0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 
       0x7, 0x1d7, 0x17b8, 0xa, 0x1d7, 0xc, 0x1d7, 0xe, 0x1d7, 0x17bb, 0xb, 
       0x1d7, 0x3, 0x1d8, 0x3, 0x1d8, 0x5, 0x1d8, 0x17bf, 0xa, 0x1d8, 0x3, 
       0x1d8, 0x3, 0x1d8, 0x5, 0x1d8, 0x17c3, 0xa, 0x1d8, 0x3, 0x1d9, 0x3, 
       0x1d9, 0x5, 0x1d9, 0x17c7, 0xa, 0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 0x3, 
       0x1d9, 0x3, 0x1d9, 0x5, 0x1d9, 0x17cd, 0xa, 0x1d9, 0x3, 0x1d9, 0x5, 
       0x1d9, 0x17d0, 0xa, 0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 0x3, 
       0x1d9, 0x3, 0x1d9, 0x5, 0x1d9, 0x17d7, 0xa, 0x1d9, 0x3, 0x1d9, 0x3, 
       0x1d9, 0x3, 0x1d9, 0x5, 0x1d9, 0x17dc, 0xa, 0x1d9, 0x5, 0x1d9, 0x17de, 
       0xa, 0x1d9, 0x5, 0x1d9, 0x17e0, 0xa, 0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 
       0x3, 0x1d9, 0x3, 0x1d9, 0x5, 0x1d9, 0x17e6, 0xa, 0x1d9, 0x3, 0x1da, 
       0x3, 0x1da, 0x3, 0x1da, 0x3, 0x1da, 0x3, 0x1da, 0x5, 0x1da, 0x17ed, 
       0xa, 0x1da, 0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 
       0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x7, 0x1dc, 0x17f7, 0xa, 
       0x1dc, 0xc, 0x1dc, 0xe, 0x1dc, 0x17fa, 0xb, 0x1dc, 0x3, 0x1dc, 0x3, 
       0x1dc, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 
       0x3, 0x1dd, 0x5, 0x1dd, 0x1804, 0xa, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 
       0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 
       0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 
       0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x5, 0x1dd, 0x1817, 
       0xa, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 
       0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x7, 0x1dd, 
       0x1822, 0xa, 0x1dd, 0xc, 0x1dd, 0xe, 0x1dd, 0x1825, 0xb, 0x1dd, 0x3, 
       0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 
       0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 
       0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 
       0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 
       0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 
       0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 
       0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x5, 0x1de, 0x184c, 0xa, 
       0x1de, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 
       0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 
       0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 
       0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 
       0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 
       0x3, 0x1e0, 0x3, 0x1e0, 0x5, 0x1e0, 0x186b, 0xa, 0x1e0, 0x3, 0x1e0, 
       0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x5, 
       0x1e0, 0x1873, 0xa, 0x1e0, 0x6, 0x1e0, 0x1875, 0xa, 0x1e0, 0xd, 0x1e0, 
       0xe, 0x1e0, 0x1876, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x6, 0x1e0, 
       0x187c, 0xa, 0x1e0, 0xd, 0x1e0, 0xe, 0x1e0, 0x187d, 0x7, 0x1e0, 0x1880, 
       0xa, 0x1e0, 0xc, 0x1e0, 0xe, 0x1e0, 0x1883, 0xb, 0x1e0, 0x3, 0x1e1, 
       0x3, 0x1e1, 0x3, 0x1e1, 0x5, 0x1e1, 0x1888, 0xa, 0x1e1, 0x3, 0x1e1, 
       0x3, 0x1e1, 0x3, 0x1e1, 0x5, 0x1e1, 0x188d, 0xa, 0x1e1, 0x3, 0x1e2, 
       0x3, 0x1e2, 0x5, 0x1e2, 0x1891, 0xa, 0x1e2, 0x3, 0x1e2, 0x3, 0x1e2, 
       0x3, 0x1e2, 0x3, 0x1e2, 0x5, 0x1e2, 0x1897, 0xa, 0x1e2, 0x3, 0x1e2, 
       0x3, 0x1e2, 0x3, 0x1e2, 0x3, 0x1e2, 0x3, 0x1e2, 0x3, 0x1e2, 0x5, 
       0x1e2, 0x189f, 0xa, 0x1e2, 0x3, 0x1e2, 0x3, 0x1e2, 0x3, 0x1e2, 0x3, 
       0x1e2, 0x3, 0x1e2, 0x3, 0x1e2, 0x5, 0x1e2, 0x18a7, 0xa, 0x1e2, 0x3, 
       0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x5, 0x1e3, 0x18ac, 0xa, 0x1e3, 0x3, 
       0x1e3, 0x3, 0x1e3, 0x5, 0x1e3, 0x18b0, 0xa, 0x1e3, 0x3, 0x1e3, 0x3, 
       0x1e3, 0x3, 0x1e3, 0x5, 0x1e3, 0x18b5, 0xa, 0x1e3, 0x3, 0x1e3, 0x5, 
       0x1e3, 0x18b8, 0xa, 0x1e3, 0x3, 0x1e4, 0x3, 0x1e4, 0x3, 0x1e5, 0x3, 
       0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 
       0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 
       0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 
       0x3, 0x1e5, 0x3, 0x1e5, 0x5, 0x1e5, 0x18d0, 0xa, 0x1e5, 0x3, 0x1e6, 
       0x3, 0x1e6, 0x3, 0x1e7, 0x3, 0x1e7, 0x3, 0x1e8, 0x3, 0x1e8, 0x3, 
       0x1e8, 0x3, 0x1e8, 0x3, 0x1e8, 0x3, 0x1e8, 0x3, 0x1e8, 0x3, 0x1e8, 
       0x3, 0x1e8, 0x3, 0x1e8, 0x5, 0x1e8, 0x18e0, 0xa, 0x1e8, 0x3, 0x1e9, 
       0x3, 0x1e9, 0x3, 0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x5, 0x1ea, 0x18e7, 
       0xa, 0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x5, 0x1ea, 0x18eb, 0xa, 0x1ea, 
       0x3, 0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x3, 
       0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x5, 0x1ea, 
       0x18f7, 0xa, 0x1ea, 0x3, 0x1ea, 0x5, 0x1ea, 0x18fa, 0xa, 0x1ea, 0x3, 
       0x1ea, 0x5, 0x1ea, 0x18fd, 0xa, 0x1ea, 0x3, 0x1eb, 0x3, 0x1eb, 0x3, 
       0x1eb, 0x3, 0x1ec, 0x3, 0x1ec, 0x3, 0x1ed, 0x3, 0x1ed, 0x3, 0x1ee, 
       0x3, 0x1ee, 0x3, 0x1ee, 0x5, 0x1ee, 0x1909, 0xa, 0x1ee, 0x3, 0x1ef, 
       0x3, 0x1ef, 0x3, 0x1f0, 0x3, 0x1f0, 0x3, 0x1f1, 0x3, 0x1f1, 0x3, 
       0x1f2, 0x3, 0x1f2, 0x3, 0x1f3, 0x3, 0x1f3, 0x5, 0x1f3, 0x1915, 0xa, 
       0x1f3, 0x3, 0x1f3, 0x3, 0x1f3, 0x3, 0x1f3, 0x5, 0x1f3, 0x191a, 0xa, 
       0x1f3, 0x3, 0x1f3, 0x5, 0x1f3, 0x191d, 0xa, 0x1f3, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x5, 0x1f4, 0x192c, 0xa, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x5, 0x1f4, 0x193e, 0xa, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x5, 0x1f4, 0x1949, 0xa, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x5, 0x1f4, 0x194f, 
       0xa, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x5, 0x1f4, 0x195c, 0xa, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x5, 0x1f4, 0x197c, 0xa, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x5, 0x1f4, 0x1986, 0xa, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x5, 0x1f4, 0x1994, 0xa, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x5, 0x1f4, 0x199e, 0xa, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x5, 0x1f4, 0x19a8, 0xa, 0x1f4, 0x3, 
       0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 
       0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x3, 0x1f4, 0x5, 0x1f4, 0x19b4, 
       0xa, 0x1f4, 0x3, 0x1f5, 0x3, 0x1f5, 0x5, 0x1f5, 0x19b8, 0xa, 0x1f5, 
       0x3, 0x1f6, 0x3, 0x1f6, 0x3, 0x1f6, 0x3, 0x1f6, 0x5, 0x1f6, 0x19be, 
       0xa, 0x1f6, 0x3, 0x1f6, 0x5, 0x1f6, 0x19c1, 0xa, 0x1f6, 0x3, 0x1f7, 
       0x3, 0x1f7, 0x3, 0x1f7, 0x3, 0x1f7, 0x3, 0x1f7, 0x5, 0x1f7, 0x19c8, 
       0xa, 0x1f7, 0x3, 0x1f8, 0x3, 0x1f8, 0x3, 0x1f8, 0x3, 0x1f8, 0x3, 
       0x1f8, 0x5, 0x1f8, 0x19cf, 0xa, 0x1f8, 0x5, 0x1f8, 0x19d1, 0xa, 0x1f8, 
       0x3, 0x1f9, 0x3, 0x1f9, 0x3, 0x1f9, 0x3, 0x1f9, 0x3, 0x1f9, 0x3, 
       0x1fa, 0x3, 0x1fa, 0x3, 0x1fa, 0x7, 0x1fa, 0x19db, 0xa, 0x1fa, 0xc, 
       0x1fa, 0xe, 0x1fa, 0x19de, 0xb, 0x1fa, 0x3, 0x1fb, 0x3, 0x1fb, 0x3, 
       0x1fb, 0x5, 0x1fb, 0x19e3, 0xa, 0x1fb, 0x3, 0x1fc, 0x3, 0x1fc, 0x3, 
       0x1fd, 0x3, 0x1fd, 0x3, 0x1fd, 0x3, 0x1fe, 0x3, 0x1fe, 0x3, 0x1fe, 
       0x5, 0x1fe, 0x19ed, 0xa, 0x1fe, 0x3, 0x1fe, 0x3, 0x1fe, 0x3, 0x1fe, 
       0x5, 0x1fe, 0x19f2, 0xa, 0x1fe, 0x3, 0x1ff, 0x3, 0x1ff, 0x3, 0x1ff, 
       0x3, 0x1ff, 0x3, 0x200, 0x3, 0x200, 0x3, 0x200, 0x3, 0x200, 0x3, 
       0x200, 0x3, 0x200, 0x3, 0x200, 0x3, 0x200, 0x5, 0x200, 0x1a00, 0xa, 
       0x200, 0x3, 0x201, 0x3, 0x201, 0x3, 0x201, 0x3, 0x201, 0x5, 0x201, 
       0x1a06, 0xa, 0x201, 0x3, 0x202, 0x3, 0x202, 0x3, 0x202, 0x3, 0x203, 
       0x3, 0x203, 0x3, 0x203, 0x3, 0x203, 0x3, 0x204, 0x3, 0x204, 0x3, 
       0x204, 0x3, 0x204, 0x3, 0x204, 0x3, 0x204, 0x3, 0x204, 0x3, 0x204, 
       0x3, 0x204, 0x3, 0x204, 0x3, 0x204, 0x3, 0x204, 0x3, 0x204, 0x3, 
       0x204, 0x3, 0x204, 0x5, 0x204, 0x1a1e, 0xa, 0x204, 0x3, 0x205, 0x3, 
       0x205, 0x3, 0x205, 0x3, 0x206, 0x3, 0x206, 0x3, 0x206, 0x3, 0x207, 
       0x5, 0x207, 0x1a27, 0xa, 0x207, 0x3, 0x207, 0x5, 0x207, 0x1a2a, 0xa, 
       0x207, 0x3, 0x207, 0x3, 0x207, 0x3, 0x208, 0x3, 0x208, 0x3, 0x208, 
       0x3, 0x209, 0x3, 0x209, 0x3, 0x209, 0x3, 0x209, 0x5, 0x209, 0x1a35, 
       0xa, 0x209, 0x3, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x5, 0x20a, 0x1a3a, 
       0xa, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x3, 
       0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 
       0x3, 0x20a, 0x3, 0x20a, 0x3, 0x20a, 0x5, 0x20a, 0x1a49, 0xa, 0x20a, 
       0x3, 0x20b, 0x3, 0x20b, 0x3, 0x20b, 0x3, 0x20b, 0x3, 0x20b, 0x3, 
       0x20b, 0x3, 0x20b, 0x3, 0x20b, 0x3, 0x20b, 0x3, 0x20b, 0x5, 0x20b, 
       0x1a55, 0xa, 0x20b, 0x3, 0x20c, 0x3, 0x20c, 0x3, 0x20c, 0x7, 0x20c, 
       0x1a5a, 0xa, 0x20c, 0xc, 0x20c, 0xe, 0x20c, 0x1a5d, 0xb, 0x20c, 0x3, 
       0x20d, 0x3, 0x20d, 0x3, 0x20d, 0x7, 0x20d, 0x1a62, 0xa, 0x20d, 0xc, 
       0x20d, 0xe, 0x20d, 0x1a65, 0xb, 0x20d, 0x3, 0x20e, 0x3, 0x20e, 0x3, 
       0x20e, 0x3, 0x20e, 0x5, 0x20e, 0x1a6b, 0xa, 0x20e, 0x3, 0x20f, 0x3, 
       0x20f, 0x3, 0x20f, 0x3, 0x20f, 0x5, 0x20f, 0x1a71, 0xa, 0x20f, 0x3, 
       0x210, 0x3, 0x210, 0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 
       0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 0x3, 
       0x211, 0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 0x3, 0x211, 
       0x3, 0x211, 0x5, 0x211, 0x1a85, 0xa, 0x211, 0x3, 0x212, 0x3, 0x212, 
       0x6, 0x212, 0x1a89, 0xa, 0x212, 0xd, 0x212, 0xe, 0x212, 0x1a8a, 0x3, 
       0x212, 0x5, 0x212, 0x1a8e, 0xa, 0x212, 0x3, 0x212, 0x3, 0x212, 0x3, 
       0x213, 0x3, 0x213, 0x3, 0x213, 0x3, 0x213, 0x3, 0x213, 0x3, 0x214, 
       0x3, 0x214, 0x3, 0x214, 0x3, 0x215, 0x3, 0x215, 0x3, 0x215, 0x3, 
       0x215, 0x3, 0x215, 0x3, 0x215, 0x3, 0x215, 0x3, 0x215, 0x3, 0x215, 
       0x5, 0x215, 0x1aa3, 0xa, 0x215, 0x3, 0x216, 0x3, 0x216, 0x5, 0x216, 
       0x1aa7, 0xa, 0x216, 0x3, 0x216, 0x3, 0x216, 0x3, 0x216, 0x3, 0x216, 
       0x3, 0x216, 0x5, 0x216, 0x1aae, 0xa, 0x216, 0x3, 0x217, 0x3, 0x217, 
       0x3, 0x217, 0x7, 0x217, 0x1ab3, 0xa, 0x217, 0xc, 0x217, 0xe, 0x217, 
       0x1ab6, 0xb, 0x217, 0x3, 0x218, 0x3, 0x218, 0x3, 0x219, 0x3, 0x219, 
       0x3, 0x21a, 0x3, 0x21a, 0x3, 0x21b, 0x3, 0x21b, 0x3, 0x21c, 0x3, 
       0x21c, 0x3, 0x21c, 0x2, 0x7, 0x256, 0x3a8, 0x3ac, 0x3b8, 0x3be, 0x21d, 
       0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 0xe, 0x10, 0x12, 0x14, 0x16, 0x18, 
       0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 
       0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 
       0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 
       0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 
       0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 
       0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 
       0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 
       0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 
       0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
       0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 
       0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x100, 0x102, 0x104, 0x106, 0x108, 
       0x10a, 0x10c, 0x10e, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11a, 0x11c, 
       0x11e, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12a, 0x12c, 0x12e, 0x130, 
       0x132, 0x134, 0x136, 0x138, 0x13a, 0x13c, 0x13e, 0x140, 0x142, 0x144, 
       0x146, 0x148, 0x14a, 0x14c, 0x14e, 0x150, 0x152, 0x154, 0x156, 0x158, 
       0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16a, 0x16c, 
       0x16e, 0x170, 0x172, 0x174, 0x176, 0x178, 0x17a, 0x17c, 0x17e, 0x180, 
       0x182, 0x184, 0x186, 0x188, 0x18a, 0x18c, 0x18e, 0x190, 0x192, 0x194, 
       0x196, 0x198, 0x19a, 0x19c, 0x19e, 0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 
       0x1aa, 0x1ac, 0x1ae, 0x1b0, 0x1b2, 0x1b4, 0x1b6, 0x1b8, 0x1ba, 0x1bc, 
       0x1be, 0x1c0, 0x1c2, 0x1c4, 0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 
       0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1de, 0x1e0, 0x1e2, 0x1e4, 
       0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ee, 0x1f0, 0x1f2, 0x1f4, 0x1f6, 0x1f8, 
       0x1fa, 0x1fc, 0x1fe, 0x200, 0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c, 
       0x20e, 0x210, 0x212, 0x214, 0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x220, 
       0x222, 0x224, 0x226, 0x228, 0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x234, 
       0x236, 0x238, 0x23a, 0x23c, 0x23e, 0x240, 0x242, 0x244, 0x246, 0x248, 
       0x24a, 0x24c, 0x24e, 0x250, 0x252, 0x254, 0x256, 0x258, 0x25a, 0x25c, 
       0x25e, 0x260, 0x262, 0x264, 0x266, 0x268, 0x26a, 0x26c, 0x26e, 0x270, 
       0x272, 0x274, 0x276, 0x278, 0x27a, 0x27c, 0x27e, 0x280, 0x282, 0x284, 
       0x286, 0x288, 0x28a, 0x28c, 0x28e, 0x290, 0x292, 0x294, 0x296, 0x298, 
       0x29a, 0x29c, 0x29e, 0x2a0, 0x2a2, 0x2a4, 0x2a6, 0x2a8, 0x2aa, 0x2ac, 
       0x2ae, 0x2b0, 0x2b2, 0x2b4, 0x2b6, 0x2b8, 0x2ba, 0x2bc, 0x2be, 0x2c0, 
       0x2c2, 0x2c4, 0x2c6, 0x2c8, 0x2ca, 0x2cc, 0x2ce, 0x2d0, 0x2d2, 0x2d4, 
       0x2d6, 0x2d8, 0x2da, 0x2dc, 0x2de, 0x2e0, 0x2e2, 0x2e4, 0x2e6, 0x2e8, 
       0x2ea, 0x2ec, 0x2ee, 0x2f0, 0x2f2, 0x2f4, 0x2f6, 0x2f8, 0x2fa, 0x2fc, 
       0x2fe, 0x300, 0x302, 0x304, 0x306, 0x308, 0x30a, 0x30c, 0x30e, 0x310, 
       0x312, 0x314, 0x316, 0x318, 0x31a, 0x31c, 0x31e, 0x320, 0x322, 0x324, 
       0x326, 0x328, 0x32a, 0x32c, 0x32e, 0x330, 0x332, 0x334, 0x336, 0x338, 
       0x33a, 0x33c, 0x33e, 0x340, 0x342, 0x344, 0x346, 0x348, 0x34a, 0x34c, 
       0x34e, 0x350, 0x352, 0x354, 0x356, 0x358, 0x35a, 0x35c, 0x35e, 0x360, 
       0x362, 0x364, 0x366, 0x368, 0x36a, 0x36c, 0x36e, 0x370, 0x372, 0x374, 
       0x376, 0x378, 0x37a, 0x37c, 0x37e, 0x380, 0x382, 0x384, 0x386, 0x388, 
       0x38a, 0x38c, 0x38e, 0x390, 0x392, 0x394, 0x396, 0x398, 0x39a, 0x39c, 
       0x39e, 0x3a0, 0x3a2, 0x3a4, 0x3a6, 0x3a8, 0x3aa, 0x3ac, 0x3ae, 0x3b0, 
       0x3b2, 0x3b4, 0x3b6, 0x3b8, 0x3ba, 0x3bc, 0x3be, 0x3c0, 0x3c2, 0x3c4, 
       0x3c6, 0x3c8, 0x3ca, 0x3cc, 0x3ce, 0x3d0, 0x3d2, 0x3d4, 0x3d6, 0x3d8, 
       0x3da, 0x3dc, 0x3de, 0x3e0, 0x3e2, 0x3e4, 0x3e6, 0x3e8, 0x3ea, 0x3ec, 
       0x3ee, 0x3f0, 0x3f2, 0x3f4, 0x3f6, 0x3f8, 0x3fa, 0x3fc, 0x3fe, 0x400, 
       0x402, 0x404, 0x406, 0x408, 0x40a, 0x40c, 0x40e, 0x410, 0x412, 0x414, 
       0x416, 0x418, 0x41a, 0x41c, 0x41e, 0x420, 0x422, 0x424, 0x426, 0x428, 
       0x42a, 0x42c, 0x42e, 0x430, 0x432, 0x434, 0x436, 0x2, 0x6f, 0x4, 
       0x2, 0x192, 0x192, 0x1b1, 0x1b1, 0x4, 0x2, 0xbe, 0xbe, 0xc7, 0xc7, 
       0x4, 0x2, 0x52, 0x52, 0x280, 0x280, 0x4, 0x2, 0x3c, 0x3c, 0x286, 
       0x286, 0x5, 0x2, 0x79, 0x79, 0xc5, 0xc5, 0x176, 0x176, 0x4, 0x2, 
       0x57, 0x57, 0x167, 0x167, 0x8, 0x2, 0x46, 0x46, 0x4a, 0x4a, 0xb7, 
       0xb7, 0xf8, 0xf8, 0x194, 0x194, 0x1a2, 0x1a2, 0x4, 0x2, 0xc5, 0xc5, 
       0x176, 0x176, 0x6, 0x2, 0x30, 0x30, 0x59, 0x59, 0x1c9, 0x1c9, 0x1d6, 
       0x1d6, 0x5, 0x2, 0xeb, 0xeb, 0x17c, 0x17c, 0x1ac, 0x1ac, 0x4, 0x2, 
       0x103, 0x103, 0x224, 0x225, 0x4, 0x2, 0xb6, 0xb6, 0xfa, 0xfa, 0x4, 
       0x2, 0x1b, 0x1b, 0xb6, 0xb6, 0x4, 0x2, 0xa8, 0xa8, 0x169, 0x169, 
       0x4, 0x2, 0x79, 0x79, 0xc5, 0xc5, 0x3, 0x2, 0x22e, 0x22f, 0x3, 0x2, 
       0x22c, 0x22d, 0x3, 0x2, 0x227, 0x228, 0x3, 0x2, 0x230, 0x231, 0x3, 
       0x2, 0x229, 0x22a, 0x4, 0x2, 0xf2, 0xf2, 0x22b, 0x22b, 0x4, 0x2, 
       0x10b, 0x10b, 0x123, 0x123, 0x3, 0x2, 0x232, 0x233, 0x3, 0x2, 0x234, 
       0x235, 0x3, 0x2, 0x236, 0x237, 0x4, 0x2, 0x8a, 0x8a, 0x1a0, 0x1a0, 
       0x4, 0x2, 0xc9, 0xc9, 0x19a, 0x19a, 0x4, 0x2, 0x109, 0x109, 0x19e, 
       0x19e, 0x4, 0x2, 0xbe, 0xbe, 0x286, 0x286, 0x4, 0x2, 0x9d, 0x9d, 
       0x199, 0x199, 0x4, 0x2, 0x3e, 0x3e, 0x1b3, 0x1b3, 0x4, 0x2, 0xa3, 
       0xa3, 0xc2, 0xc2, 0x4, 0x2, 0x9f, 0x9f, 0x11f, 0x11f, 0x4, 0x2, 0x7f, 
       0x7f, 0x15e, 0x15e, 0x7, 0x2, 0xba, 0xba, 0xbc, 0xbc, 0x11f, 0x11f, 
       0x12b, 0x12b, 0x143, 0x143, 0x4, 0x2, 0x79, 0x79, 0xb7, 0xb7, 0x4, 
       0x2, 0xd7, 0xd7, 0x23d, 0x23f, 0x4, 0x2, 0xb5, 0xb5, 0xea, 0xea, 
       0x4, 0x2, 0x5d, 0x5d, 0x1af, 0x1af, 0x4, 0x2, 0x19c, 0x19c, 0x286, 
       0x286, 0x4, 0x2, 0x79, 0x79, 0x7e, 0x7e, 0x4, 0x2, 0x7b, 0x7b, 0x89, 
       0x89, 0x4, 0x2, 0x286, 0x286, 0x289, 0x289, 0x4, 0x2, 0x15, 0x15, 
       0x7e, 0x7e, 0x4, 0x2, 0x150, 0x150, 0x1b3, 0x1b3, 0x4, 0x2, 0x232, 
       0x232, 0x24d, 0x24d, 0x4, 0x2, 0x29, 0x29, 0x45, 0x45, 0x4, 0x2, 
       0x49, 0x49, 0x164, 0x164, 0x4, 0x2, 0x9, 0x9, 0x1e, 0x1e, 0x4, 0x2, 
       0xda, 0xda, 0x100, 0x100, 0x3, 0x2, 0x24e, 0x24f, 0x4, 0x2, 0xe1, 
       0xe1, 0x107, 0x107, 0x3, 0x2, 0x18e, 0x18f, 0x4, 0x2, 0xd2, 0xd2, 
       0xed, 0xed, 0xb, 0x2, 0x3, 0x3, 0x14, 0x14, 0x9b, 0x9b, 0xb4, 0xb4, 
       0xc1, 0xc1, 0xef, 0xef, 0x139, 0x139, 0x159, 0x159, 0x183, 0x183, 
       0x4, 0x2, 0xa0, 0xa0, 0xbc, 0xbc, 0x4, 0x2, 0x17f, 0x17f, 0x1db, 
       0x1db, 0x6, 0x2, 0x23, 0x23, 0x2e, 0x2e, 0x38, 0x38, 0x55, 0x55, 
       0x5, 0x2, 0x65, 0x65, 0x6a, 0x6a, 0x71, 0x71, 0x3, 0x2, 0x25e, 0x25f, 
       0x4, 0x2, 0x14e, 0x14e, 0x169, 0x169, 0x4, 0x2, 0x169, 0x169, 0x1db, 
       0x1db, 0x4, 0x2, 0xda, 0xda, 0x11e, 0x11e, 0x4, 0x2, 0x177, 0x177, 
       0x1a2, 0x1a2, 0x3, 0x2, 0x4, 0x5, 0x4, 0x2, 0xa6, 0xa6, 0x121, 0x121, 
       0x4, 0x2, 0x96, 0x96, 0xd8, 0xd8, 0x6, 0x2, 0xa0, 0xa0, 0xbc, 0xbc, 
       0x136, 0x136, 0x18d, 0x18d, 0x4, 0x2, 0x22, 0x22, 0x9e, 0x9e, 0x4, 
       0x2, 0x28, 0x28, 0x52, 0x52, 0x4, 0x2, 0x181, 0x182, 0x286, 0x286, 
       0x4, 0x2, 0xcd, 0xcd, 0x14d, 0x14d, 0x3, 0x2, 0x249, 0x24c, 0x6, 
       0x2, 0x24, 0x24, 0x3f, 0x3f, 0x54, 0x54, 0x12d, 0x12d, 0x5, 0x2, 
       0x190, 0x190, 0x1b4, 0x1b4, 0x259, 0x25a, 0x4, 0x2, 0x25, 0x25, 0x11b, 
       0x11b, 0x4, 0x2, 0x28, 0x28, 0x30, 0x30, 0x6, 0x2, 0x75, 0x75, 0x87, 
       0x87, 0xdf, 0xdf, 0x157, 0x157, 0x4, 0x2, 0x87, 0x87, 0xdf, 0xdf, 
       0x5, 0x2, 0x15, 0x15, 0x18e, 0x18f, 0x25b, 0x25b, 0x5, 0x2, 0x15, 
       0x15, 0x222, 0x222, 0x25c, 0x25c, 0x4, 0x2, 0x76, 0x76, 0x1db, 0x1db, 
       0x4, 0x2, 0xd3, 0xd3, 0x177, 0x177, 0x4, 0x2, 0x1a2, 0x1a2, 0x1db, 
       0x1db, 0x4, 0x2, 0x107, 0x107, 0x175, 0x175, 0x4, 0x2, 0x68, 0x68, 
       0x6d, 0x6d, 0x3, 0x2, 0x279, 0x27a, 0x5, 0x2, 0x267, 0x267, 0x26c, 
       0x26c, 0x270, 0x270, 0x3, 0x2, 0x26d, 0x26e, 0x5, 0x2, 0x268, 0x268, 
       0x27d, 0x27d, 0x27f, 0x27f, 0x5, 0x2, 0x26e, 0x26e, 0x27d, 0x27d, 
       0x27f, 0x27f, 0x4, 0x2, 0x26e, 0x26e, 0x27f, 0x27f, 0x3, 0x2, 0x28a, 
       0x28b, 0x5, 0x2, 0x8b, 0x8b, 0x14f, 0x14f, 0x1f7, 0x1f7, 0x3, 0x2, 
       0x1e0, 0x1e1, 0x3, 0x2, 0x1fa, 0x1ff, 0x3, 0x2, 0x200, 0x202, 0x3, 
       0x2, 0x203, 0x204, 0x3, 0x2, 0x206, 0x211, 0x5, 0x2, 0x7, 0x7, 0x193, 
       0x193, 0x212, 0x21d, 0x4, 0x2, 0x19, 0x1a, 0x35, 0x36, 0x5, 0x2, 
       0xd, 0xd, 0x32, 0x32, 0x53, 0x53, 0x4, 0x2, 0x146, 0x146, 0x186, 
       0x186, 0x6, 0x2, 0x3, 0x3, 0x7, 0x7, 0x4c, 0x4c, 0x1c5, 0x1c5, 0x4, 
       0x2, 0x3, 0x4f, 0x51, 0x5d, 0x6, 0x2, 0x5e, 0x61, 0x63, 0x64, 0x66, 
       0x70, 0x72, 0x73, 0x9, 0x2, 0x74, 0x1b7, 0x1fd, 0x1fd, 0x220, 0x220, 
       0x222, 0x222, 0x239, 0x239, 0x25b, 0x25b, 0x25e, 0x261, 0x6, 0x2, 
       0x1f2, 0x1f2, 0x206, 0x206, 0x221, 0x221, 0x242, 0x242, 0x3, 0x2, 
       0x1b8, 0x1f0, 0x2, 0x1ded, 0x2, 0x438, 0x3, 0x2, 0x2, 0x2, 0x4, 0x43e, 
       0x3, 0x2, 0x2, 0x2, 0x6, 0x448, 0x3, 0x2, 0x2, 0x2, 0x8, 0x4ba, 0x3, 
       0x2, 0x2, 0x2, 0xa, 0x4c4, 0x3, 0x2, 0x2, 0x2, 0xc, 0x4ca, 0x3, 0x2, 
       0x2, 0x2, 0xe, 0x4d0, 0x3, 0x2, 0x2, 0x2, 0x10, 0x4d4, 0x3, 0x2, 
       0x2, 0x2, 0x12, 0x4d6, 0x3, 0x2, 0x2, 0x2, 0x14, 0x4e1, 0x3, 0x2, 
       0x2, 0x2, 0x16, 0x4e3, 0x3, 0x2, 0x2, 0x2, 0x18, 0x4e7, 0x3, 0x2, 
       0x2, 0x2, 0x1a, 0x4ef, 0x3, 0x2, 0x2, 0x2, 0x1c, 0x4fc, 0x3, 0x2, 
       0x2, 0x2, 0x1e, 0x4fe, 0x3, 0x2, 0x2, 0x2, 0x20, 0x504, 0x3, 0x2, 
       0x2, 0x2, 0x22, 0x513, 0x3, 0x2, 0x2, 0x2, 0x24, 0x515, 0x3, 0x2, 
       0x2, 0x2, 0x26, 0x519, 0x3, 0x2, 0x2, 0x2, 0x28, 0x51d, 0x3, 0x2, 
       0x2, 0x2, 0x2a, 0x51f, 0x3, 0x2, 0x2, 0x2, 0x2c, 0x523, 0x3, 0x2, 
       0x2, 0x2, 0x2e, 0x527, 0x3, 0x2, 0x2, 0x2, 0x30, 0x529, 0x3, 0x2, 
       0x2, 0x2, 0x32, 0x53d, 0x3, 0x2, 0x2, 0x2, 0x34, 0x53f, 0x3, 0x2, 
       0x2, 0x2, 0x36, 0x544, 0x3, 0x2, 0x2, 0x2, 0x38, 0x546, 0x3, 0x2, 
       0x2, 0x2, 0x3a, 0x54c, 0x3, 0x2, 0x2, 0x2, 0x3c, 0x555, 0x3, 0x2, 
       0x2, 0x2, 0x3e, 0x55c, 0x3, 0x2, 0x2, 0x2, 0x40, 0x55e, 0x3, 0x2, 
       0x2, 0x2, 0x42, 0x56b, 0x3, 0x2, 0x2, 0x2, 0x44, 0x571, 0x3, 0x2, 
       0x2, 0x2, 0x46, 0x573, 0x3, 0x2, 0x2, 0x2, 0x48, 0x582, 0x3, 0x2, 
       0x2, 0x2, 0x4a, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x4c, 0x58c, 0x3, 0x2, 
       0x2, 0x2, 0x4e, 0x594, 0x3, 0x2, 0x2, 0x2, 0x50, 0x59c, 0x3, 0x2, 
       0x2, 0x2, 0x52, 0x59e, 0x3, 0x2, 0x2, 0x2, 0x54, 0x5aa, 0x3, 0x2, 
       0x2, 0x2, 0x56, 0x5ae, 0x3, 0x2, 0x2, 0x2, 0x58, 0x5b6, 0x3, 0x2, 
       0x2, 0x2, 0x5a, 0x5b8, 0x3, 0x2, 0x2, 0x2, 0x5c, 0x5c5, 0x3, 0x2, 
       0x2, 0x2, 0x5e, 0x5c7, 0x3, 0x2, 0x2, 0x2, 0x60, 0x5c9, 0x3, 0x2, 
       0x2, 0x2, 0x62, 0x5cd, 0x3, 0x2, 0x2, 0x2, 0x64, 0x5d9, 0x3, 0x2, 
       0x2, 0x2, 0x66, 0x5db, 0x3, 0x2, 0x2, 0x2, 0x68, 0x5e7, 0x3, 0x2, 
       0x2, 0x2, 0x6a, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x6c, 0x5f8, 0x3, 0x2, 
       0x2, 0x2, 0x6e, 0x601, 0x3, 0x2, 0x2, 0x2, 0x70, 0x603, 0x3, 0x2, 
       0x2, 0x2, 0x72, 0x612, 0x3, 0x2, 0x2, 0x2, 0x74, 0x621, 0x3, 0x2, 
       0x2, 0x2, 0x76, 0x626, 0x3, 0x2, 0x2, 0x2, 0x78, 0x628, 0x3, 0x2, 
       0x2, 0x2, 0x7a, 0x633, 0x3, 0x2, 0x2, 0x2, 0x7c, 0x639, 0x3, 0x2, 
       0x2, 0x2, 0x7e, 0x640, 0x3, 0x2, 0x2, 0x2, 0x80, 0x648, 0x3, 0x2, 
       0x2, 0x2, 0x82, 0x64a, 0x3, 0x2, 0x2, 0x2, 0x84, 0x652, 0x3, 0x2, 
       0x2, 0x2, 0x86, 0x659, 0x3, 0x2, 0x2, 0x2, 0x88, 0x66b, 0x3, 0x2, 
       0x2, 0x2, 0x8a, 0x66d, 0x3, 0x2, 0x2, 0x2, 0x8c, 0x674, 0x3, 0x2, 
       0x2, 0x2, 0x8e, 0x680, 0x3, 0x2, 0x2, 0x2, 0x90, 0x685, 0x3, 0x2, 
       0x2, 0x2, 0x92, 0x68f, 0x3, 0x2, 0x2, 0x2, 0x94, 0x691, 0x3, 0x2, 
       0x2, 0x2, 0x96, 0x695, 0x3, 0x2, 0x2, 0x2, 0x98, 0x69a, 0x3, 0x2, 
       0x2, 0x2, 0x9a, 0x69d, 0x3, 0x2, 0x2, 0x2, 0x9c, 0x6a3, 0x3, 0x2, 
       0x2, 0x2, 0x9e, 0x6ac, 0x3, 0x2, 0x2, 0x2, 0xa0, 0x6b3, 0x3, 0x2, 
       0x2, 0x2, 0xa2, 0x6b7, 0x3, 0x2, 0x2, 0x2, 0xa4, 0x6c4, 0x3, 0x2, 
       0x2, 0x2, 0xa6, 0x6e1, 0x3, 0x2, 0x2, 0x2, 0xa8, 0x6e3, 0x3, 0x2, 
       0x2, 0x2, 0xaa, 0x6e7, 0x3, 0x2, 0x2, 0x2, 0xac, 0x6ec, 0x3, 0x2, 
       0x2, 0x2, 0xae, 0x6f2, 0x3, 0x2, 0x2, 0x2, 0xb0, 0x6f4, 0x3, 0x2, 
       0x2, 0x2, 0xb2, 0x6fc, 0x3, 0x2, 0x2, 0x2, 0xb4, 0x6fe, 0x3, 0x2, 
       0x2, 0x2, 0xb6, 0x706, 0x3, 0x2, 0x2, 0x2, 0xb8, 0x728, 0x3, 0x2, 
       0x2, 0x2, 0xba, 0x72a, 0x3, 0x2, 0x2, 0x2, 0xbc, 0x72d, 0x3, 0x2, 
       0x2, 0x2, 0xbe, 0x730, 0x3, 0x2, 0x2, 0x2, 0xc0, 0x733, 0x3, 0x2, 
       0x2, 0x2, 0xc2, 0x738, 0x3, 0x2, 0x2, 0x2, 0xc4, 0x73a, 0x3, 0x2, 
       0x2, 0x2, 0xc6, 0x742, 0x3, 0x2, 0x2, 0x2, 0xc8, 0x744, 0x3, 0x2, 
       0x2, 0x2, 0xca, 0x746, 0x3, 0x2, 0x2, 0x2, 0xcc, 0x74c, 0x3, 0x2, 
       0x2, 0x2, 0xce, 0x752, 0x3, 0x2, 0x2, 0x2, 0xd0, 0x754, 0x3, 0x2, 
       0x2, 0x2, 0xd2, 0x758, 0x3, 0x2, 0x2, 0x2, 0xd4, 0x760, 0x3, 0x2, 
       0x2, 0x2, 0xd6, 0x762, 0x3, 0x2, 0x2, 0x2, 0xd8, 0x784, 0x3, 0x2, 
       0x2, 0x2, 0xda, 0x786, 0x3, 0x2, 0x2, 0x2, 0xdc, 0x78a, 0x3, 0x2, 
       0x2, 0x2, 0xde, 0x78e, 0x3, 0x2, 0x2, 0x2, 0xe0, 0x795, 0x3, 0x2, 
       0x2, 0x2, 0xe2, 0x797, 0x3, 0x2, 0x2, 0x2, 0xe4, 0x7af, 0x3, 0x2, 
       0x2, 0x2, 0xe6, 0x7cc, 0x3, 0x2, 0x2, 0x2, 0xe8, 0x7d5, 0x3, 0x2, 
       0x2, 0x2, 0xea, 0x7e3, 0x3, 0x2, 0x2, 0x2, 0xec, 0x7e5, 0x3, 0x2, 
       0x2, 0x2, 0xee, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0xf0, 0x7f4, 0x3, 0x2, 
       0x2, 0x2, 0xf2, 0x7f8, 0x3, 0x2, 0x2, 0x2, 0xf4, 0x803, 0x3, 0x2, 
       0x2, 0x2, 0xf6, 0x80c, 0x3, 0x2, 0x2, 0x2, 0xf8, 0x80e, 0x3, 0x2, 
       0x2, 0x2, 0xfa, 0x813, 0x3, 0x2, 0x2, 0x2, 0xfc, 0x81c, 0x3, 0x2, 
       0x2, 0x2, 0xfe, 0x825, 0x3, 0x2, 0x2, 0x2, 0x100, 0x827, 0x3, 0x2, 
       0x2, 0x2, 0x102, 0x82d, 0x3, 0x2, 0x2, 0x2, 0x104, 0x835, 0x3, 0x2, 
       0x2, 0x2, 0x106, 0x837, 0x3, 0x2, 0x2, 0x2, 0x108, 0x844, 0x3, 0x2, 
       0x2, 0x2, 0x10a, 0x846, 0x3, 0x2, 0x2, 0x2, 0x10c, 0x854, 0x3, 0x2, 
       0x2, 0x2, 0x10e, 0x87e, 0x3, 0x2, 0x2, 0x2, 0x110, 0x882, 0x3, 0x2, 
       0x2, 0x2, 0x112, 0x884, 0x3, 0x2, 0x2, 0x2, 0x114, 0x886, 0x3, 0x2, 
       0x2, 0x2, 0x116, 0x88e, 0x3, 0x2, 0x2, 0x2, 0x118, 0x8a1, 0x3, 0x2, 
       0x2, 0x2, 0x11a, 0x8a5, 0x3, 0x2, 0x2, 0x2, 0x11c, 0x8d0, 0x3, 0x2, 
       0x2, 0x2, 0x11e, 0x8d2, 0x3, 0x2, 0x2, 0x2, 0x120, 0x917, 0x3, 0x2, 
       0x2, 0x2, 0x122, 0x932, 0x3, 0x2, 0x2, 0x2, 0x124, 0x934, 0x3, 0x2, 
       0x2, 0x2, 0x126, 0x941, 0x3, 0x2, 0x2, 0x2, 0x128, 0x944, 0x3, 0x2, 
       0x2, 0x2, 0x12a, 0x946, 0x3, 0x2, 0x2, 0x2, 0x12c, 0x949, 0x3, 0x2, 
       0x2, 0x2, 0x12e, 0x94d, 0x3, 0x2, 0x2, 0x2, 0x130, 0x961, 0x3, 0x2, 
       0x2, 0x2, 0x132, 0x985, 0x3, 0x2, 0x2, 0x2, 0x134, 0x989, 0x3, 0x2, 
       0x2, 0x2, 0x136, 0x99b, 0x3, 0x2, 0x2, 0x2, 0x138, 0x99d, 0x3, 0x2, 
       0x2, 0x2, 0x13a, 0x9af, 0x3, 0x2, 0x2, 0x2, 0x13c, 0x9b9, 0x3, 0x2, 
       0x2, 0x2, 0x13e, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0x140, 0x9c6, 0x3, 0x2, 
       0x2, 0x2, 0x142, 0x9e1, 0x3, 0x2, 0x2, 0x2, 0x144, 0x9eb, 0x3, 0x2, 
       0x2, 0x2, 0x146, 0x9ed, 0x3, 0x2, 0x2, 0x2, 0x148, 0x9f6, 0x3, 0x2, 
       0x2, 0x2, 0x14a, 0xa01, 0x3, 0x2, 0x2, 0x2, 0x14c, 0xa05, 0x3, 0x2, 
       0x2, 0x2, 0x14e, 0xa07, 0x3, 0x2, 0x2, 0x2, 0x150, 0xa1b, 0x3, 0x2, 
       0x2, 0x2, 0x152, 0xa1f, 0x3, 0x2, 0x2, 0x2, 0x154, 0xa2f, 0x3, 0x2, 
       0x2, 0x2, 0x156, 0xa39, 0x3, 0x2, 0x2, 0x2, 0x158, 0xa44, 0x3, 0x2, 
       0x2, 0x2, 0x15a, 0xa4d, 0x3, 0x2, 0x2, 0x2, 0x15c, 0xa52, 0x3, 0x2, 
       0x2, 0x2, 0x15e, 0xa57, 0x3, 0x2, 0x2, 0x2, 0x160, 0xa61, 0x3, 0x2, 
       0x2, 0x2, 0x162, 0xa63, 0x3, 0x2, 0x2, 0x2, 0x164, 0xa7b, 0x3, 0x2, 
       0x2, 0x2, 0x166, 0xa9b, 0x3, 0x2, 0x2, 0x2, 0x168, 0xa9d, 0x3, 0x2, 
       0x2, 0x2, 0x16a, 0xaa2, 0x3, 0x2, 0x2, 0x2, 0x16c, 0xaa9, 0x3, 0x2, 
       0x2, 0x2, 0x16e, 0xab3, 0x3, 0x2, 0x2, 0x2, 0x170, 0xab5, 0x3, 0x2, 
       0x2, 0x2, 0x172, 0xabc, 0x3, 0x2, 0x2, 0x2, 0x174, 0xae0, 0x3, 0x2, 
       0x2, 0x2, 0x176, 0xae2, 0x3, 0x2, 0x2, 0x2, 0x178, 0xaea, 0x3, 0x2, 
       0x2, 0x2, 0x17a, 0xaec, 0x3, 0x2, 0x2, 0x2, 0x17c, 0xaf4, 0x3, 0x2, 
       0x2, 0x2, 0x17e, 0xaf6, 0x3, 0x2, 0x2, 0x2, 0x180, 0xb00, 0x3, 0x2, 
       0x2, 0x2, 0x182, 0xb02, 0x3, 0x2, 0x2, 0x2, 0x184, 0xb09, 0x3, 0x2, 
       0x2, 0x2, 0x186, 0xb0e, 0x3, 0x2, 0x2, 0x2, 0x188, 0xb3c, 0x3, 0x2, 
       0x2, 0x2, 0x18a, 0xb3e, 0x3, 0x2, 0x2, 0x2, 0x18c, 0xb49, 0x3, 0x2, 
       0x2, 0x2, 0x18e, 0xb4b, 0x3, 0x2, 0x2, 0x2, 0x190, 0xb4d, 0x3, 0x2, 
       0x2, 0x2, 0x192, 0xb4f, 0x3, 0x2, 0x2, 0x2, 0x194, 0xb59, 0x3, 0x2, 
       0x2, 0x2, 0x196, 0xb62, 0x3, 0x2, 0x2, 0x2, 0x198, 0xb71, 0x3, 0x2, 
       0x2, 0x2, 0x19a, 0xb82, 0x3, 0x2, 0x2, 0x2, 0x19c, 0xb84, 0x3, 0x2, 
       0x2, 0x2, 0x19e, 0xb8c, 0x3, 0x2, 0x2, 0x2, 0x1a0, 0xba3, 0x3, 0x2, 
       0x2, 0x2, 0x1a2, 0xba5, 0x3, 0x2, 0x2, 0x2, 0x1a4, 0xbb6, 0x3, 0x2, 
       0x2, 0x2, 0x1a6, 0xbc3, 0x3, 0x2, 0x2, 0x2, 0x1a8, 0xbc8, 0x3, 0x2, 
       0x2, 0x2, 0x1aa, 0xbca, 0x3, 0x2, 0x2, 0x2, 0x1ac, 0xbd7, 0x3, 0x2, 
       0x2, 0x2, 0x1ae, 0xbe1, 0x3, 0x2, 0x2, 0x2, 0x1b0, 0xbea, 0x3, 0x2, 
       0x2, 0x2, 0x1b2, 0xbed, 0x3, 0x2, 0x2, 0x2, 0x1b4, 0xbfa, 0x3, 0x2, 
       0x2, 0x2, 0x1b6, 0xbfc, 0x3, 0x2, 0x2, 0x2, 0x1b8, 0xc1d, 0x3, 0x2, 
       0x2, 0x2, 0x1ba, 0xc31, 0x3, 0x2, 0x2, 0x2, 0x1bc, 0xc33, 0x3, 0x2, 
       0x2, 0x2, 0x1be, 0xc3a, 0x3, 0x2, 0x2, 0x2, 0x1c0, 0xc4e, 0x3, 0x2, 
       0x2, 0x2, 0x1c2, 0xc6e, 0x3, 0x2, 0x2, 0x2, 0x1c4, 0xc72, 0x3, 0x2, 
       0x2, 0x2, 0x1c6, 0xc78, 0x3, 0x2, 0x2, 0x2, 0x1c8, 0xc9a, 0x3, 0x2, 
       0x2, 0x2, 0x1ca, 0xc9c, 0x3, 0x2, 0x2, 0x2, 0x1cc, 0xca5, 0x3, 0x2, 
       0x2, 0x2, 0x1ce, 0xcc8, 0x3, 0x2, 0x2, 0x2, 0x1d0, 0xcca, 0x3, 0x2, 
       0x2, 0x2, 0x1d2, 0xcd7, 0x3, 0x2, 0x2, 0x2, 0x1d4, 0xce0, 0x3, 0x2, 
       0x2, 0x2, 0x1d6, 0xce6, 0x3, 0x2, 0x2, 0x2, 0x1d8, 0xcf0, 0x3, 0x2, 
       0x2, 0x2, 0x1da, 0xcff, 0x3, 0x2, 0x2, 0x2, 0x1dc, 0xd03, 0x3, 0x2, 
       0x2, 0x2, 0x1de, 0xd16, 0x3, 0x2, 0x2, 0x2, 0x1e0, 0xd19, 0x3, 0x2, 
       0x2, 0x2, 0x1e2, 0xd26, 0x3, 0x2, 0x2, 0x2, 0x1e4, 0xd28, 0x3, 0x2, 
       0x2, 0x2, 0x1e6, 0xd3a, 0x3, 0x2, 0x2, 0x2, 0x1e8, 0xd53, 0x3, 0x2, 
       0x2, 0x2, 0x1ea, 0xd60, 0x3, 0x2, 0x2, 0x2, 0x1ec, 0xd6e, 0x3, 0x2, 
       0x2, 0x2, 0x1ee, 0xd70, 0x3, 0x2, 0x2, 0x2, 0x1f0, 0xd72, 0x3, 0x2, 
       0x2, 0x2, 0x1f2, 0xd75, 0x3, 0x2, 0x2, 0x2, 0x1f4, 0xd7b, 0x3, 0x2, 
       0x2, 0x2, 0x1f6, 0xd8f, 0x3, 0x2, 0x2, 0x2, 0x1f8, 0xda8, 0x3, 0x2, 
       0x2, 0x2, 0x1fa, 0xdb4, 0x3, 0x2, 0x2, 0x2, 0x1fc, 0xdb6, 0x3, 0x2, 
       0x2, 0x2, 0x1fe, 0xdbe, 0x3, 0x2, 0x2, 0x2, 0x200, 0xded, 0x3, 0x2, 
       0x2, 0x2, 0x202, 0xdef, 0x3, 0x2, 0x2, 0x2, 0x204, 0xdf1, 0x3, 0x2, 
       0x2, 0x2, 0x206, 0xdf6, 0x3, 0x2, 0x2, 0x2, 0x208, 0xe06, 0x3, 0x2, 
       0x2, 0x2, 0x20a, 0xe08, 0x3, 0x2, 0x2, 0x2, 0x20c, 0xe3a, 0x3, 0x2, 
       0x2, 0x2, 0x20e, 0xe41, 0x3, 0x2, 0x2, 0x2, 0x210, 0xe43, 0x3, 0x2, 
       0x2, 0x2, 0x212, 0xe4c, 0x3, 0x2, 0x2, 0x2, 0x214, 0xe73, 0x3, 0x2, 
       0x2, 0x2, 0x216, 0xe75, 0x3, 0x2, 0x2, 0x2, 0x218, 0xe87, 0x3, 0x2, 
       0x2, 0x2, 0x21a, 0xe89, 0x3, 0x2, 0x2, 0x2, 0x21c, 0xe8c, 0x3, 0x2, 
       0x2, 0x2, 0x21e, 0xea3, 0x3, 0x2, 0x2, 0x2, 0x220, 0xea5, 0x3, 0x2, 
       0x2, 0x2, 0x222, 0xeba, 0x3, 0x2, 0x2, 0x2, 0x224, 0xebc, 0x3, 0x2, 
       0x2, 0x2, 0x226, 0xec0, 0x3, 0x2, 0x2, 0x2, 0x228, 0xec2, 0x3, 0x2, 
       0x2, 0x2, 0x22a, 0xed4, 0x3, 0x2, 0x2, 0x2, 0x22c, 0xede, 0x3, 0x2, 
       0x2, 0x2, 0x22e, 0xf0a, 0x3, 0x2, 0x2, 0x2, 0x230, 0xf0c, 0x3, 0x2, 
       0x2, 0x2, 0x232, 0xf23, 0x3, 0x2, 0x2, 0x2, 0x234, 0xf25, 0x3, 0x2, 
       0x2, 0x2, 0x236, 0xf3e, 0x3, 0x2, 0x2, 0x2, 0x238, 0xf40, 0x3, 0x2, 
       0x2, 0x2, 0x23a, 0xf52, 0x3, 0x2, 0x2, 0x2, 0x23c, 0xf6a, 0x3, 0x2, 
       0x2, 0x2, 0x23e, 0xf6c, 0x3, 0x2, 0x2, 0x2, 0x240, 0xf75, 0x3, 0x2, 
       0x2, 0x2, 0x242, 0xf77, 0x3, 0x2, 0x2, 0x2, 0x244, 0xf7b, 0x3, 0x2, 
       0x2, 0x2, 0x246, 0xf82, 0x3, 0x2, 0x2, 0x2, 0x248, 0xf9a, 0x3, 0x2, 
       0x2, 0x2, 0x24a, 0xfb4, 0x3, 0x2, 0x2, 0x2, 0x24c, 0xfb6, 0x3, 0x2, 
       0x2, 0x2, 0x24e, 0xfc3, 0x3, 0x2, 0x2, 0x2, 0x250, 0xfc5, 0x3, 0x2, 
       0x2, 0x2, 0x252, 0xfce, 0x3, 0x2, 0x2, 0x2, 0x254, 0xfd1, 0x3, 0x2, 
       0x2, 0x2, 0x256, 0xff9, 0x3, 0x2, 0x2, 0x2, 0x258, 0x100d, 0x3, 0x2, 
       0x2, 0x2, 0x25a, 0x1017, 0x3, 0x2, 0x2, 0x2, 0x25c, 0x101d, 0x3, 
       0x2, 0x2, 0x2, 0x25e, 0x1024, 0x3, 0x2, 0x2, 0x2, 0x260, 0x102c, 
       0x3, 0x2, 0x2, 0x2, 0x262, 0x102e, 0x3, 0x2, 0x2, 0x2, 0x264, 0x1031, 
       0x3, 0x2, 0x2, 0x2, 0x266, 0x1035, 0x3, 0x2, 0x2, 0x2, 0x268, 0x104b, 
       0x3, 0x2, 0x2, 0x2, 0x26a, 0x104d, 0x3, 0x2, 0x2, 0x2, 0x26c, 0x105a, 
       0x3, 0x2, 0x2, 0x2, 0x26e, 0x105c, 0x3, 0x2, 0x2, 0x2, 0x270, 0x105f, 
       0x3, 0x2, 0x2, 0x2, 0x272, 0x1062, 0x3, 0x2, 0x2, 0x2, 0x274, 0x106a, 
       0x3, 0x2, 0x2, 0x2, 0x276, 0x1070, 0x3, 0x2, 0x2, 0x2, 0x278, 0x1078, 
       0x3, 0x2, 0x2, 0x2, 0x27a, 0x1086, 0x3, 0x2, 0x2, 0x2, 0x27c, 0x1094, 
       0x3, 0x2, 0x2, 0x2, 0x27e, 0x1096, 0x3, 0x2, 0x2, 0x2, 0x280, 0x109a, 
       0x3, 0x2, 0x2, 0x2, 0x282, 0x10a2, 0x3, 0x2, 0x2, 0x2, 0x284, 0x10b0, 
       0x3, 0x2, 0x2, 0x2, 0x286, 0x10b2, 0x3, 0x2, 0x2, 0x2, 0x288, 0x10b9, 
       0x3, 0x2, 0x2, 0x2, 0x28a, 0x10be, 0x3, 0x2, 0x2, 0x2, 0x28c, 0x10c3, 
       0x3, 0x2, 0x2, 0x2, 0x28e, 0x10cb, 0x3, 0x2, 0x2, 0x2, 0x290, 0x10dc, 
       0x3, 0x2, 0x2, 0x2, 0x292, 0x10f4, 0x3, 0x2, 0x2, 0x2, 0x294, 0x10f6, 
       0x3, 0x2, 0x2, 0x2, 0x296, 0x1101, 0x3, 0x2, 0x2, 0x2, 0x298, 0x1117, 
       0x3, 0x2, 0x2, 0x2, 0x29a, 0x1120, 0x3, 0x2, 0x2, 0x2, 0x29c, 0x1137, 
       0x3, 0x2, 0x2, 0x2, 0x29e, 0x1143, 0x3, 0x2, 0x2, 0x2, 0x2a0, 0x114c, 
       0x3, 0x2, 0x2, 0x2, 0x2a2, 0x114f, 0x3, 0x2, 0x2, 0x2, 0x2a4, 0x1155, 
       0x3, 0x2, 0x2, 0x2, 0x2a6, 0x115d, 0x3, 0x2, 0x2, 0x2, 0x2a8, 0x115f, 
       0x3, 0x2, 0x2, 0x2, 0x2aa, 0x116b, 0x3, 0x2, 0x2, 0x2, 0x2ac, 0x116f, 
       0x3, 0x2, 0x2, 0x2, 0x2ae, 0x1176, 0x3, 0x2, 0x2, 0x2, 0x2b0, 0x1180, 
       0x3, 0x2, 0x2, 0x2, 0x2b2, 0x118a, 0x3, 0x2, 0x2, 0x2, 0x2b4, 0x1191, 
       0x3, 0x2, 0x2, 0x2, 0x2b6, 0x11a2, 0x3, 0x2, 0x2, 0x2, 0x2b8, 0x11ae, 
       0x3, 0x2, 0x2, 0x2, 0x2ba, 0x11bb, 0x3, 0x2, 0x2, 0x2, 0x2bc, 0x11ce, 
       0x3, 0x2, 0x2, 0x2, 0x2be, 0x11d8, 0x3, 0x2, 0x2, 0x2, 0x2c0, 0x11e1, 
       0x3, 0x2, 0x2, 0x2, 0x2c2, 0x11ef, 0x3, 0x2, 0x2, 0x2, 0x2c4, 0x11fd, 
       0x3, 0x2, 0x2, 0x2, 0x2c6, 0x1204, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x120c, 
       0x3, 0x2, 0x2, 0x2, 0x2ca, 0x1219, 0x3, 0x2, 0x2, 0x2, 0x2cc, 0x1229, 
       0x3, 0x2, 0x2, 0x2, 0x2ce, 0x1232, 0x3, 0x2, 0x2, 0x2, 0x2d0, 0x123d, 
       0x3, 0x2, 0x2, 0x2, 0x2d2, 0x1241, 0x3, 0x2, 0x2, 0x2, 0x2d4, 0x124a, 
       0x3, 0x2, 0x2, 0x2, 0x2d6, 0x1253, 0x3, 0x2, 0x2, 0x2, 0x2d8, 0x125a, 
       0x3, 0x2, 0x2, 0x2, 0x2da, 0x1265, 0x3, 0x2, 0x2, 0x2, 0x2dc, 0x1270, 
       0x3, 0x2, 0x2, 0x2, 0x2de, 0x1280, 0x3, 0x2, 0x2, 0x2, 0x2e0, 0x1290, 
       0x3, 0x2, 0x2, 0x2, 0x2e2, 0x12a0, 0x3, 0x2, 0x2, 0x2, 0x2e4, 0x12a8, 
       0x3, 0x2, 0x2, 0x2, 0x2e6, 0x12ae, 0x3, 0x2, 0x2, 0x2, 0x2e8, 0x12c1, 
       0x3, 0x2, 0x2, 0x2, 0x2ea, 0x12ca, 0x3, 0x2, 0x2, 0x2, 0x2ec, 0x12cc, 
       0x3, 0x2, 0x2, 0x2, 0x2ee, 0x12d7, 0x3, 0x2, 0x2, 0x2, 0x2f0, 0x12e2, 
       0x3, 0x2, 0x2, 0x2, 0x2f2, 0x12ea, 0x3, 0x2, 0x2, 0x2, 0x2f4, 0x12ec, 
       0x3, 0x2, 0x2, 0x2, 0x2f6, 0x12ee, 0x3, 0x2, 0x2, 0x2, 0x2f8, 0x1306, 
       0x3, 0x2, 0x2, 0x2, 0x2fa, 0x130b, 0x3, 0x2, 0x2, 0x2, 0x2fc, 0x130d, 
       0x3, 0x2, 0x2, 0x2, 0x2fe, 0x131f, 0x3, 0x2, 0x2, 0x2, 0x300, 0x1321, 
       0x3, 0x2, 0x2, 0x2, 0x302, 0x136a, 0x3, 0x2, 0x2, 0x2, 0x304, 0x136c, 
       0x3, 0x2, 0x2, 0x2, 0x306, 0x136e, 0x3, 0x2, 0x2, 0x2, 0x308, 0x1375, 
       0x3, 0x2, 0x2, 0x2, 0x30a, 0x1379, 0x3, 0x2, 0x2, 0x2, 0x30c, 0x1380, 
       0x3, 0x2, 0x2, 0x2, 0x30e, 0x139b, 0x3, 0x2, 0x2, 0x2, 0x310, 0x13a7, 
       0x3, 0x2, 0x2, 0x2, 0x312, 0x13cb, 0x3, 0x2, 0x2, 0x2, 0x314, 0x13cd, 
       0x3, 0x2, 0x2, 0x2, 0x316, 0x13e8, 0x3, 0x2, 0x2, 0x2, 0x318, 0x13ea, 
       0x3, 0x2, 0x2, 0x2, 0x31a, 0x13f2, 0x3, 0x2, 0x2, 0x2, 0x31c, 0x13fc, 
       0x3, 0x2, 0x2, 0x2, 0x31e, 0x1425, 0x3, 0x2, 0x2, 0x2, 0x320, 0x1427, 
       0x3, 0x2, 0x2, 0x2, 0x322, 0x1429, 0x3, 0x2, 0x2, 0x2, 0x324, 0x143b, 
       0x3, 0x2, 0x2, 0x2, 0x326, 0x1444, 0x3, 0x2, 0x2, 0x2, 0x328, 0x144b, 
       0x3, 0x2, 0x2, 0x2, 0x32a, 0x144d, 0x3, 0x2, 0x2, 0x2, 0x32c, 0x1457, 
       0x3, 0x2, 0x2, 0x2, 0x32e, 0x1463, 0x3, 0x2, 0x2, 0x2, 0x330, 0x146b, 
       0x3, 0x2, 0x2, 0x2, 0x332, 0x1478, 0x3, 0x2, 0x2, 0x2, 0x334, 0x1494, 
       0x3, 0x2, 0x2, 0x2, 0x336, 0x1496, 0x3, 0x2, 0x2, 0x2, 0x338, 0x149f, 
       0x3, 0x2, 0x2, 0x2, 0x33a, 0x14b4, 0x3, 0x2, 0x2, 0x2, 0x33c, 0x14cf, 
       0x3, 0x2, 0x2, 0x2, 0x33e, 0x1500, 0x3, 0x2, 0x2, 0x2, 0x340, 0x1502, 
       0x3, 0x2, 0x2, 0x2, 0x342, 0x150a, 0x3, 0x2, 0x2, 0x2, 0x344, 0x150c, 
       0x3, 0x2, 0x2, 0x2, 0x346, 0x1580, 0x3, 0x2, 0x2, 0x2, 0x348, 0x1582, 
       0x3, 0x2, 0x2, 0x2, 0x34a, 0x158a, 0x3, 0x2, 0x2, 0x2, 0x34c, 0x158d, 
       0x3, 0x2, 0x2, 0x2, 0x34e, 0x159e, 0x3, 0x2, 0x2, 0x2, 0x350, 0x15a9, 
       0x3, 0x2, 0x2, 0x2, 0x352, 0x15ab, 0x3, 0x2, 0x2, 0x2, 0x354, 0x15bd, 
       0x3, 0x2, 0x2, 0x2, 0x356, 0x15c1, 0x3, 0x2, 0x2, 0x2, 0x358, 0x15dd, 
       0x3, 0x2, 0x2, 0x2, 0x35a, 0x15df, 0x3, 0x2, 0x2, 0x2, 0x35c, 0x15f9, 
       0x3, 0x2, 0x2, 0x2, 0x35e, 0x15fb, 0x3, 0x2, 0x2, 0x2, 0x360, 0x160f, 
       0x3, 0x2, 0x2, 0x2, 0x362, 0x1612, 0x3, 0x2, 0x2, 0x2, 0x364, 0x1620, 
       0x3, 0x2, 0x2, 0x2, 0x366, 0x162e, 0x3, 0x2, 0x2, 0x2, 0x368, 0x163f, 
       0x3, 0x2, 0x2, 0x2, 0x36a, 0x1641, 0x3, 0x2, 0x2, 0x2, 0x36c, 0x1647, 
       0x3, 0x2, 0x2, 0x2, 0x36e, 0x1654, 0x3, 0x2, 0x2, 0x2, 0x370, 0x167c, 
       0x3, 0x2, 0x2, 0x2, 0x372, 0x167e, 0x3, 0x2, 0x2, 0x2, 0x374, 0x1692, 
       0x3, 0x2, 0x2, 0x2, 0x376, 0x1694, 0x3, 0x2, 0x2, 0x2, 0x378, 0x169d, 
       0x3, 0x2, 0x2, 0x2, 0x37a, 0x16a5, 0x3, 0x2, 0x2, 0x2, 0x37c, 0x16a7, 
       0x3, 0x2, 0x2, 0x2, 0x37e, 0x16bf, 0x3, 0x2, 0x2, 0x2, 0x380, 0x16c1, 
       0x3, 0x2, 0x2, 0x2, 0x382, 0x16c3, 0x3, 0x2, 0x2, 0x2, 0x384, 0x16d2, 
       0x3, 0x2, 0x2, 0x2, 0x386, 0x16e0, 0x3, 0x2, 0x2, 0x2, 0x388, 0x16e2, 
       0x3, 0x2, 0x2, 0x2, 0x38a, 0x16ef, 0x3, 0x2, 0x2, 0x2, 0x38c, 0x16f9, 
       0x3, 0x2, 0x2, 0x2, 0x38e, 0x170e, 0x3, 0x2, 0x2, 0x2, 0x390, 0x1710, 
       0x3, 0x2, 0x2, 0x2, 0x392, 0x171d, 0x3, 0x2, 0x2, 0x2, 0x394, 0x1727, 
       0x3, 0x2, 0x2, 0x2, 0x396, 0x1729, 0x3, 0x2, 0x2, 0x2, 0x398, 0x173f, 
       0x3, 0x2, 0x2, 0x2, 0x39a, 0x174f, 0x3, 0x2, 0x2, 0x2, 0x39c, 0x1762, 
       0x3, 0x2, 0x2, 0x2, 0x39e, 0x1769, 0x3, 0x2, 0x2, 0x2, 0x3a0, 0x176b, 
       0x3, 0x2, 0x2, 0x2, 0x3a2, 0x1780, 0x3, 0x2, 0x2, 0x2, 0x3a4, 0x1784, 
       0x3, 0x2, 0x2, 0x2, 0x3a6, 0x178c, 0x3, 0x2, 0x2, 0x2, 0x3a8, 0x17a1, 
       0x3, 0x2, 0x2, 0x2, 0x3aa, 0x17ae, 0x3, 0x2, 0x2, 0x2, 0x3ac, 0x17b0, 
       0x3, 0x2, 0x2, 0x2, 0x3ae, 0x17c2, 0x3, 0x2, 0x2, 0x2, 0x3b0, 0x17e5, 
       0x3, 0x2, 0x2, 0x2, 0x3b2, 0x17ec, 0x3, 0x2, 0x2, 0x2, 0x3b4, 0x17ee, 
       0x3, 0x2, 0x2, 0x2, 0x3b6, 0x17f2, 0x3, 0x2, 0x2, 0x2, 0x3b8, 0x17fd, 
       0x3, 0x2, 0x2, 0x2, 0x3ba, 0x184b, 0x3, 0x2, 0x2, 0x2, 0x3bc, 0x184d, 
       0x3, 0x2, 0x2, 0x2, 0x3be, 0x186a, 0x3, 0x2, 0x2, 0x2, 0x3c0, 0x188c, 
       0x3, 0x2, 0x2, 0x2, 0x3c2, 0x18a6, 0x3, 0x2, 0x2, 0x2, 0x3c4, 0x18b7, 
       0x3, 0x2, 0x2, 0x2, 0x3c6, 0x18b9, 0x3, 0x2, 0x2, 0x2, 0x3c8, 0x18cf, 
       0x3, 0x2, 0x2, 0x2, 0x3ca, 0x18d1, 0x3, 0x2, 0x2, 0x2, 0x3cc, 0x18d3, 
       0x3, 0x2, 0x2, 0x2, 0x3ce, 0x18df, 0x3, 0x2, 0x2, 0x2, 0x3d0, 0x18e1, 
       0x3, 0x2, 0x2, 0x2, 0x3d2, 0x18fc, 0x3, 0x2, 0x2, 0x2, 0x3d4, 0x18fe, 
       0x3, 0x2, 0x2, 0x2, 0x3d6, 0x1901, 0x3, 0x2, 0x2, 0x2, 0x3d8, 0x1903, 
       0x3, 0x2, 0x2, 0x2, 0x3da, 0x1908, 0x3, 0x2, 0x2, 0x2, 0x3dc, 0x190a, 
       0x3, 0x2, 0x2, 0x2, 0x3de, 0x190c, 0x3, 0x2, 0x2, 0x2, 0x3e0, 0x190e, 
       0x3, 0x2, 0x2, 0x2, 0x3e2, 0x1910, 0x3, 0x2, 0x2, 0x2, 0x3e4, 0x191c, 
       0x3, 0x2, 0x2, 0x2, 0x3e6, 0x19b3, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x19b7, 
       0x3, 0x2, 0x2, 0x2, 0x3ea, 0x19b9, 0x3, 0x2, 0x2, 0x2, 0x3ec, 0x19c7, 
       0x3, 0x2, 0x2, 0x2, 0x3ee, 0x19c9, 0x3, 0x2, 0x2, 0x2, 0x3f0, 0x19d2, 
       0x3, 0x2, 0x2, 0x2, 0x3f2, 0x19d7, 0x3, 0x2, 0x2, 0x2, 0x3f4, 0x19df, 
       0x3, 0x2, 0x2, 0x2, 0x3f6, 0x19e4, 0x3, 0x2, 0x2, 0x2, 0x3f8, 0x19e6, 
       0x3, 0x2, 0x2, 0x2, 0x3fa, 0x19e9, 0x3, 0x2, 0x2, 0x2, 0x3fc, 0x19f3, 
       0x3, 0x2, 0x2, 0x2, 0x3fe, 0x19ff, 0x3, 0x2, 0x2, 0x2, 0x400, 0x1a01, 
       0x3, 0x2, 0x2, 0x2, 0x402, 0x1a07, 0x3, 0x2, 0x2, 0x2, 0x404, 0x1a0a, 
       0x3, 0x2, 0x2, 0x2, 0x406, 0x1a1d, 0x3, 0x2, 0x2, 0x2, 0x408, 0x1a1f, 
       0x3, 0x2, 0x2, 0x2, 0x40a, 0x1a22, 0x3, 0x2, 0x2, 0x2, 0x40c, 0x1a29, 
       0x3, 0x2, 0x2, 0x2, 0x40e, 0x1a2d, 0x3, 0x2, 0x2, 0x2, 0x410, 0x1a34, 
       0x3, 0x2, 0x2, 0x2, 0x412, 0x1a48, 0x3, 0x2, 0x2, 0x2, 0x414, 0x1a54, 
       0x3, 0x2, 0x2, 0x2, 0x416, 0x1a56, 0x3, 0x2, 0x2, 0x2, 0x418, 0x1a5e, 
       0x3, 0x2, 0x2, 0x2, 0x41a, 0x1a6a, 0x3, 0x2, 0x2, 0x2, 0x41c, 0x1a70, 
       0x3, 0x2, 0x2, 0x2, 0x41e, 0x1a72, 0x3, 0x2, 0x2, 0x2, 0x420, 0x1a84, 
       0x3, 0x2, 0x2, 0x2, 0x422, 0x1a86, 0x3, 0x2, 0x2, 0x2, 0x424, 0x1a91, 
       0x3, 0x2, 0x2, 0x2, 0x426, 0x1a96, 0x3, 0x2, 0x2, 0x2, 0x428, 0x1a99, 
       0x3, 0x2, 0x2, 0x2, 0x42a, 0x1aad, 0x3, 0x2, 0x2, 0x2, 0x42c, 0x1aaf, 
       0x3, 0x2, 0x2, 0x2, 0x42e, 0x1ab7, 0x3, 0x2, 0x2, 0x2, 0x430, 0x1ab9, 
       0x3, 0x2, 0x2, 0x2, 0x432, 0x1abb, 0x3, 0x2, 0x2, 0x2, 0x434, 0x1abd, 
       0x3, 0x2, 0x2, 0x2, 0x436, 0x1abf, 0x3, 0x2, 0x2, 0x2, 0x438, 0x43a, 
       0x5, 0x4, 0x3, 0x2, 0x439, 0x43b, 0x7, 0x27c, 0x2, 0x2, 0x43a, 0x439, 
       0x3, 0x2, 0x2, 0x2, 0x43a, 0x43b, 0x3, 0x2, 0x2, 0x2, 0x43b, 0x43c, 
       0x3, 0x2, 0x2, 0x2, 0x43c, 0x43d, 0x7, 0x2, 0x2, 0x3, 0x43d, 0x3, 
       0x3, 0x2, 0x2, 0x2, 0x43e, 0x443, 0x5, 0x6, 0x4, 0x2, 0x43f, 0x440, 
       0x7, 0x27c, 0x2, 0x2, 0x440, 0x442, 0x5, 0x6, 0x4, 0x2, 0x441, 0x43f, 
       0x3, 0x2, 0x2, 0x2, 0x442, 0x445, 0x3, 0x2, 0x2, 0x2, 0x443, 0x441, 
       0x3, 0x2, 0x2, 0x2, 0x443, 0x444, 0x3, 0x2, 0x2, 0x2, 0x444, 0x5, 
       0x3, 0x2, 0x2, 0x2, 0x445, 0x443, 0x3, 0x2, 0x2, 0x2, 0x446, 0x449, 
       0x5, 0x8, 0x5, 0x2, 0x447, 0x449, 0x5, 0xa, 0x6, 0x2, 0x448, 0x446, 
       0x3, 0x2, 0x2, 0x2, 0x448, 0x447, 0x3, 0x2, 0x2, 0x2, 0x449, 0x7, 
       0x3, 0x2, 0x2, 0x2, 0x44a, 0x4bb, 0x5, 0xe, 0x8, 0x2, 0x44b, 0x4bb, 
       0x5, 0x12, 0xa, 0x2, 0x44c, 0x4bb, 0x5, 0x1e, 0x10, 0x2, 0x44d, 0x4bb, 
       0x5, 0x38, 0x1d, 0x2, 0x44e, 0x4bb, 0x5, 0x46, 0x24, 0x2, 0x44f, 
       0x4bb, 0x5, 0x74, 0x3b, 0x2, 0x450, 0x4bb, 0x5, 0x78, 0x3d, 0x2, 
       0x451, 0x4bb, 0x5, 0x96, 0x4c, 0x2, 0x452, 0x4bb, 0x5, 0xaa, 0x56, 
       0x2, 0x453, 0x4bb, 0x5, 0xb4, 0x5b, 0x2, 0x454, 0x4bb, 0x5, 0xca, 
       0x66, 0x2, 0x455, 0x4bb, 0x5, 0xcc, 0x67, 0x2, 0x456, 0x4bb, 0x5, 
       0xd6, 0x6c, 0x2, 0x457, 0x4bb, 0x5, 0xde, 0x70, 0x2, 0x458, 0x4bb, 
       0x5, 0xe2, 0x72, 0x2, 0x459, 0x4bb, 0x5, 0xee, 0x78, 0x2, 0x45a, 
       0x4bb, 0x5, 0xf8, 0x7d, 0x2, 0x45b, 0x4bb, 0x5, 0xfa, 0x7e, 0x2, 
       0x45c, 0x4bb, 0x5, 0x100, 0x81, 0x2, 0x45d, 0x4bb, 0x5, 0x106, 0x84, 
       0x2, 0x45e, 0x4bb, 0x5, 0x114, 0x8b, 0x2, 0x45f, 0x4bb, 0x5, 0x116, 
       0x8c, 0x2, 0x460, 0x4bb, 0x5, 0x16c, 0xb7, 0x2, 0x461, 0x4bb, 0x5, 
       0x170, 0xb9, 0x2, 0x462, 0x4bb, 0x5, 0x17e, 0xc0, 0x2, 0x463, 0x4bb, 
       0x5, 0x182, 0xc2, 0x2, 0x464, 0x4bb, 0x5, 0x184, 0xc3, 0x2, 0x465, 
       0x4bb, 0x5, 0x198, 0xcd, 0x2, 0x466, 0x4bb, 0x5, 0x19c, 0xcf, 0x2, 
       0x467, 0x4bb, 0x5, 0x1a2, 0xd2, 0x2, 0x468, 0x4bb, 0x5, 0x1a4, 0xd3, 
       0x2, 0x469, 0x4bb, 0x5, 0x1a6, 0xd4, 0x2, 0x46a, 0x4bb, 0x5, 0x1aa, 
       0xd6, 0x2, 0x46b, 0x4bb, 0x5, 0x1ac, 0xd7, 0x2, 0x46c, 0x4bb, 0x5, 
       0x1ae, 0xd8, 0x2, 0x46d, 0x4bb, 0x5, 0x1b2, 0xda, 0x2, 0x46e, 0x4bb, 
       0x5, 0x1c6, 0xe4, 0x2, 0x46f, 0x4bb, 0x5, 0x1e4, 0xf3, 0x2, 0x470, 
       0x4bb, 0x5, 0x1e6, 0xf4, 0x2, 0x471, 0x4bb, 0x5, 0x1f2, 0xfa, 0x2, 
       0x472, 0x4bb, 0x5, 0x1f4, 0xfb, 0x2, 0x473, 0x4bb, 0x5, 0x1f6, 0xfc, 
       0x2, 0x474, 0x4bb, 0x5, 0x1fc, 0xff, 0x2, 0x475, 0x4bb, 0x5, 0x1fe, 
       0x100, 0x2, 0x476, 0x4bb, 0x5, 0x204, 0x103, 0x2, 0x477, 0x4bb, 0x5, 
       0x20a, 0x106, 0x2, 0x478, 0x4bb, 0x5, 0x210, 0x109, 0x2, 0x479, 0x4bb, 
       0x5, 0x212, 0x10a, 0x2, 0x47a, 0x4bb, 0x5, 0x228, 0x115, 0x2, 0x47b, 
       0x4bb, 0x5, 0x22a, 0x116, 0x2, 0x47c, 0x4bb, 0x5, 0x22c, 0x117, 0x2, 
       0x47d, 0x4bb, 0x5, 0x234, 0x11b, 0x2, 0x47e, 0x4bb, 0x5, 0x238, 0x11d, 
       0x2, 0x47f, 0x4bb, 0x5, 0x23a, 0x11e, 0x2, 0x480, 0x4bb, 0x5, 0x23c, 
       0x11f, 0x2, 0x481, 0x4bb, 0x5, 0x2ac, 0x157, 0x2, 0x482, 0x4bb, 0x5, 
       0x2ae, 0x158, 0x2, 0x483, 0x4bb, 0x5, 0x2b0, 0x159, 0x2, 0x484, 0x4bb, 
       0x5, 0x2b2, 0x15a, 0x2, 0x485, 0x4bb, 0x5, 0x2b4, 0x15b, 0x2, 0x486, 
       0x4bb, 0x5, 0x2b6, 0x15c, 0x2, 0x487, 0x4bb, 0x5, 0x2b8, 0x15d, 0x2, 
       0x488, 0x4bb, 0x5, 0x2ba, 0x15e, 0x2, 0x489, 0x4bb, 0x5, 0x2bc, 0x15f, 
       0x2, 0x48a, 0x4bb, 0x5, 0x2be, 0x160, 0x2, 0x48b, 0x4bb, 0x5, 0x2c0, 
       0x161, 0x2, 0x48c, 0x4bb, 0x5, 0x2c2, 0x162, 0x2, 0x48d, 0x4bb, 0x5, 
       0x2c4, 0x163, 0x2, 0x48e, 0x4bb, 0x5, 0x2c6, 0x164, 0x2, 0x48f, 0x4bb, 
       0x5, 0x2c8, 0x165, 0x2, 0x490, 0x4bb, 0x5, 0x2ca, 0x166, 0x2, 0x491, 
       0x4bb, 0x5, 0x2cc, 0x167, 0x2, 0x492, 0x4bb, 0x5, 0x2d2, 0x16a, 0x2, 
       0x493, 0x4bb, 0x5, 0x2d4, 0x16b, 0x2, 0x494, 0x4bb, 0x5, 0x2d6, 0x16c, 
       0x2, 0x495, 0x4bb, 0x5, 0x2d8, 0x16d, 0x2, 0x496, 0x4bb, 0x5, 0x2da, 
       0x16e, 0x2, 0x497, 0x4bb, 0x5, 0x2dc, 0x16f, 0x2, 0x498, 0x4bb, 0x5, 
       0x2de, 0x170, 0x2, 0x499, 0x4bb, 0x5, 0x2e0, 0x171, 0x2, 0x49a, 0x4bb, 
       0x5, 0x2e2, 0x172, 0x2, 0x49b, 0x4bb, 0x5, 0x2e4, 0x173, 0x2, 0x49c, 
       0x4bb, 0x5, 0x2ec, 0x177, 0x2, 0x49d, 0x4bb, 0x5, 0x2f4, 0x17b, 0x2, 
       0x49e, 0x4bb, 0x5, 0x2f6, 0x17c, 0x2, 0x49f, 0x4bb, 0x5, 0x2f8, 0x17d, 
       0x2, 0x4a0, 0x4bb, 0x5, 0x2fc, 0x17f, 0x2, 0x4a1, 0x4bb, 0x5, 0x300, 
       0x181, 0x2, 0x4a2, 0x4bb, 0x5, 0x30c, 0x187, 0x2, 0x4a3, 0x4bb, 0x5, 
       0x322, 0x192, 0x2, 0x4a4, 0x4bb, 0x5, 0x324, 0x193, 0x2, 0x4a5, 0x4bb, 
       0x5, 0x326, 0x194, 0x2, 0x4a6, 0x4bb, 0x5, 0x32c, 0x197, 0x2, 0x4a7, 
       0x4bb, 0x5, 0x32e, 0x198, 0x2, 0x4a8, 0x4bb, 0x5, 0x338, 0x19d, 0x2, 
       0x4a9, 0x4bb, 0x5, 0x33c, 0x19f, 0x2, 0x4aa, 0x4bb, 0x5, 0x34c, 0x1a7, 
       0x2, 0x4ab, 0x4bb, 0x5, 0x356, 0x1ac, 0x2, 0x4ac, 0x4bb, 0x5, 0x352, 
       0x1aa, 0x2, 0x4ad, 0x4bb, 0x5, 0x354, 0x1ab, 0x2, 0x4ae, 0x4bb, 0x5, 
       0x364, 0x1b3, 0x2, 0x4af, 0x4bb, 0x5, 0x366, 0x1b4, 0x2, 0x4b0, 0x4bb, 
       0x5, 0x36a, 0x1b6, 0x2, 0x4b1, 0x4bb, 0x5, 0x36c, 0x1b7, 0x2, 0x4b2, 
       0x4bb, 0x5, 0x370, 0x1b9, 0x2, 0x4b3, 0x4bb, 0x5, 0x374, 0x1bb, 0x2, 
       0x4b4, 0x4bb, 0x5, 0x376, 0x1bc, 0x2, 0x4b5, 0x4bb, 0x5, 0x378, 0x1bd, 
       0x2, 0x4b6, 0x4bb, 0x5, 0x392, 0x1ca, 0x2, 0x4b7, 0x4bb, 0x5, 0x396, 
       0x1cc, 0x2, 0x4b8, 0x4bb, 0x5, 0x296, 0x14c, 0x2, 0x4b9, 0x4bb, 0x7, 
       0x27c, 0x2, 0x2, 0x4ba, 0x44a, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x44b, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x44d, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x44e, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x44f, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x450, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x451, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x452, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x453, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x454, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x455, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x456, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x457, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x458, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x459, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x45a, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x45b, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x45c, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x45d, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x45e, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x45f, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x460, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x461, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x462, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x463, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x464, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x465, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x466, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x467, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x468, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x469, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x46a, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x46b, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x46c, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x46d, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x46e, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x46f, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x470, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x471, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x472, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x473, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x474, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x475, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x476, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x477, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x478, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x479, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x47a, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x47b, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x47c, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x47d, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x47e, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x47f, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x480, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x481, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x482, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x483, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x484, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x485, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x486, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x487, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x488, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x489, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x48a, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x48b, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x48c, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x48d, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x48e, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x48f, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x490, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x491, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x492, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x493, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x494, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x495, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x496, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x497, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x498, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x499, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x49a, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x49b, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x49c, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x49d, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x49e, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x49f, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a0, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a1, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a2, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a3, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a4, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a5, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a6, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a7, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a8, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4a9, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4aa, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4ab, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4ac, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4ad, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4ae, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4af, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b0, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b1, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b2, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b3, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b4, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b5, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b6, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b7, 
       0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b8, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4b9, 
       0x3, 0x2, 0x2, 0x2, 0x4bb, 0x9, 0x3, 0x2, 0x2, 0x2, 0x4bc, 0x4c5, 
       0x5, 0x398, 0x1cd, 0x2, 0x4bd, 0x4c5, 0x5, 0x3a0, 0x1d1, 0x2, 0x4be, 
       0x4c5, 0x5, 0x390, 0x1c9, 0x2, 0x4bf, 0x4c5, 0x5, 0x330, 0x199, 0x2, 
       0x4c0, 0x4c5, 0x5, 0x336, 0x19c, 0x2, 0x4c1, 0x4c5, 0x5, 0x308, 0x185, 
       0x2, 0x4c2, 0x4c5, 0x5, 0x30a, 0x186, 0x2, 0x4c3, 0x4c5, 0x5, 0xc, 
       0x7, 0x2, 0x4c4, 0x4bc, 0x3, 0x2, 0x2, 0x2, 0x4c4, 0x4bd, 0x3, 0x2, 
       0x2, 0x2, 0x4c4, 0x4be, 0x3, 0x2, 0x2, 0x2, 0x4c4, 0x4bf, 0x3, 0x2, 
       0x2, 0x2, 0x4c4, 0x4c0, 0x3, 0x2, 0x2, 0x2, 0x4c4, 0x4c1, 0x3, 0x2, 
       0x2, 0x2, 0x4c4, 0x4c2, 0x3, 0x2, 0x2, 0x2, 0x4c4, 0x4c3, 0x3, 0x2, 
       0x2, 0x2, 0x4c5, 0xb, 0x3, 0x2, 0x2, 0x2, 0x4c6, 0x4c8, 0x7, 0xb3, 
       0x2, 0x2, 0x4c7, 0x4c9, 0x5, 0x1d6, 0xec, 0x2, 0x4c8, 0x4c7, 0x3, 
       0x2, 0x2, 0x2, 0x4c8, 0x4c9, 0x3, 0x2, 0x2, 0x2, 0x4c9, 0x4cb, 0x3, 
       0x2, 0x2, 0x2, 0x4ca, 0x4c6, 0x3, 0x2, 0x2, 0x2, 0x4ca, 0x4cb, 0x3, 
       0x2, 0x2, 0x2, 0x4cb, 0x4cc, 0x3, 0x2, 0x2, 0x2, 0x4cc, 0x4cd, 0x7, 
       0x8a, 0x2, 0x2, 0x4cd, 0x4ce, 0x5, 0x32a, 0x196, 0x2, 0x4ce, 0x4cf, 
       0x7, 0x22, 0x2, 0x2, 0x4cf, 0xd, 0x3, 0x2, 0x2, 0x2, 0x4d0, 0x4d2, 
       0x7, 0x74, 0x2, 0x2, 0x4d1, 0x4d3, 0x5, 0x10, 0x9, 0x2, 0x4d2, 0x4d1, 
       0x3, 0x2, 0x2, 0x2, 0x4d2, 0x4d3, 0x3, 0x2, 0x2, 0x2, 0x4d3, 0xf, 
       0x3, 0x2, 0x2, 0x2, 0x4d4, 0x4d5, 0x9, 0x2, 0x2, 0x2, 0x4d5, 0x11, 
       0x3, 0x2, 0x2, 0x2, 0x4d6, 0x4d7, 0x7, 0x7e, 0x2, 0x2, 0x4d7, 0x4d8, 
       0x7, 0x80, 0x2, 0x2, 0x4d8, 0x4d9, 0x7, 0x1b0, 0x2, 0x2, 0x4d9, 0x4da, 
       0x7, 0x2b, 0x2, 0x2, 0x4da, 0x4db, 0x7, 0x10e, 0x2, 0x2, 0x4db, 0x4dc, 
       0x5, 0x14, 0xb, 0x2, 0x4dc, 0x4dd, 0x7, 0x5d, 0x2, 0x2, 0x4dd, 0x4de, 
       0x7, 0x269, 0x2, 0x2, 0x4de, 0x4df, 0x5, 0x1a, 0xe, 0x2, 0x4df, 0x4e0, 
       0x7, 0x26a, 0x2, 0x2, 0x4e0, 0x13, 0x3, 0x2, 0x2, 0x2, 0x4e1, 0x4e2, 
       0x5, 0x41a, 0x20e, 0x2, 0x4e2, 0x15, 0x3, 0x2, 0x2, 0x2, 0x4e3, 0x4e4, 
       0x7, 0x269, 0x2, 0x2, 0x4e4, 0x4e5, 0x5, 0x18, 0xd, 0x2, 0x4e5, 0x4e6, 
       0x7, 0x26a, 0x2, 0x2, 0x4e6, 0x17, 0x3, 0x2, 0x2, 0x2, 0x4e7, 0x4ec, 
       0x5, 0x1a, 0xe, 0x2, 0x4e8, 0x4e9, 0x7, 0x26f, 0x2, 0x2, 0x4e9, 0x4eb, 
       0x5, 0x1a, 0xe, 0x2, 0x4ea, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x4eb, 0x4ee, 
       0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4ea, 0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4ed, 
       0x3, 0x2, 0x2, 0x2, 0x4ed, 0x19, 0x3, 0x2, 0x2, 0x2, 0x4ee, 0x4ec, 
       0x3, 0x2, 0x2, 0x2, 0x4ef, 0x4f7, 0x5, 0x3a6, 0x1d4, 0x2, 0x4f0, 
       0x4f2, 0x7, 0x27b, 0x2, 0x2, 0x4f1, 0x4f0, 0x3, 0x2, 0x2, 0x2, 0x4f1, 
       0x4f2, 0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4f4, 0x3, 0x2, 0x2, 0x2, 0x4f3, 
       0x4f5, 0x7, 0x280, 0x2, 0x2, 0x4f4, 0x4f3, 0x3, 0x2, 0x2, 0x2, 0x4f4, 
       0x4f5, 0x3, 0x2, 0x2, 0x2, 0x4f5, 0x4f6, 0x3, 0x2, 0x2, 0x2, 0x4f6, 
       0x4f8, 0x5, 0x1c, 0xf, 0x2, 0x4f7, 0x4f1, 0x3, 0x2, 0x2, 0x2, 0x4f7, 
       0x4f8, 0x3, 0x2, 0x2, 0x2, 0x4f8, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x4f9, 
       0x4fd, 0x5, 0x3a6, 0x1d4, 0x2, 0x4fa, 0x4fd, 0x7, 0x1c, 0x2, 0x2, 
       0x4fb, 0x4fd, 0x7, 0x289, 0x2, 0x2, 0x4fc, 0x4f9, 0x3, 0x2, 0x2, 
       0x2, 0x4fc, 0x4fa, 0x3, 0x2, 0x2, 0x2, 0x4fc, 0x4fb, 0x3, 0x2, 0x2, 
       0x2, 0x4fd, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x4fe, 0x4ff, 0x7, 0x7e, 0x2, 
       0x2, 0x4ff, 0x500, 0x7, 0xad, 0x2, 0x2, 0x500, 0x502, 0x5, 0x20, 
       0x11, 0x2, 0x501, 0x503, 0x5, 0x22, 0x12, 0x2, 0x502, 0x501, 0x3, 
       0x2, 0x2, 0x2, 0x502, 0x503, 0x3, 0x2, 0x2, 0x2, 0x503, 0x1f, 0x3, 
       0x2, 0x2, 0x2, 0x504, 0x505, 0x5, 0x41a, 0x20e, 0x2, 0x505, 0x21, 
       0x3, 0x2, 0x2, 0x2, 0x506, 0x508, 0x7, 0x5d, 0x2, 0x2, 0x507, 0x506, 
       0x3, 0x2, 0x2, 0x2, 0x507, 0x508, 0x3, 0x2, 0x2, 0x2, 0x508, 0x509, 
       0x3, 0x2, 0x2, 0x2, 0x509, 0x514, 0x5, 0x24, 0x13, 0x2, 0x50a, 0x514, 
       0x5, 0x28, 0x15, 0x2, 0x50b, 0x514, 0x5, 0x30, 0x19, 0x2, 0x50c, 
       0x514, 0x5, 0x34, 0x1b, 0x2, 0x50d, 0x50f, 0x7, 0x5d, 0x2, 0x2, 0x50e, 
       0x50d, 0x3, 0x2, 0x2, 0x2, 0x50e, 0x50f, 0x3, 0x2, 0x2, 0x2, 0x50f, 
       0x510, 0x3, 0x2, 0x2, 0x2, 0x510, 0x511, 0x9, 0x3, 0x2, 0x2, 0x511, 
       0x512, 0x7, 0x21f, 0x2, 0x2, 0x512, 0x514, 0x7, 0x12c, 0x2, 0x2, 
       0x513, 0x507, 0x3, 0x2, 0x2, 0x2, 0x513, 0x50a, 0x3, 0x2, 0x2, 0x2, 
       0x513, 0x50b, 0x3, 0x2, 0x2, 0x2, 0x513, 0x50c, 0x3, 0x2, 0x2, 0x2, 
       0x513, 0x50e, 0x3, 0x2, 0x2, 0x2, 0x514, 0x23, 0x3, 0x2, 0x2, 0x2, 
       0x515, 0x516, 0x7, 0xa1, 0x2, 0x2, 0x516, 0x517, 0x7, 0x34, 0x2, 
       0x2, 0x517, 0x518, 0x5, 0x3a6, 0x1d4, 0x2, 0x518, 0x25, 0x3, 0x2, 
       0x2, 0x2, 0x519, 0x51a, 0x5, 0x3be, 0x1e0, 0x2, 0x51a, 0x27, 0x3, 
       0x2, 0x2, 0x2, 0x51b, 0x51e, 0x5, 0x2a, 0x16, 0x2, 0x51c, 0x51e, 
       0x5, 0x2c, 0x17, 0x2, 0x51d, 0x51b, 0x3, 0x2, 0x2, 0x2, 0x51d, 0x51c, 
       0x3, 0x2, 0x2, 0x2, 0x51e, 0x29, 0x3, 0x2, 0x2, 0x2, 0x51f, 0x520, 
       0x7, 0x15b, 0x2, 0x2, 0x520, 0x521, 0x7, 0x52, 0x2, 0x2, 0x521, 0x522, 
       0x5, 0x2e, 0x18, 0x2, 0x522, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x523, 0x524, 
       0x7, 0x135, 0x2, 0x2, 0x524, 0x525, 0x7, 0x52, 0x2, 0x2, 0x525, 0x526, 
       0x5, 0x2e, 0x18, 0x2, 0x526, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x527, 0x528, 
       0x5, 0x41a, 0x20e, 0x2, 0x528, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x529, 0x52b, 
       0x7, 0x176, 0x2, 0x2, 0x52a, 0x52c, 0x5, 0x37c, 0x1bf, 0x2, 0x52b, 
       0x52a, 0x3, 0x2, 0x2, 0x2, 0x52b, 0x52c, 0x3, 0x2, 0x2, 0x2, 0x52c, 
       0x52d, 0x3, 0x2, 0x2, 0x2, 0x52d, 0x52e, 0x5, 0x36, 0x1c, 0x2, 0x52e, 
       0x533, 0x5, 0x32, 0x1a, 0x2, 0x52f, 0x530, 0x7, 0x26f, 0x2, 0x2, 
       0x530, 0x532, 0x5, 0x32, 0x1a, 0x2, 0x531, 0x52f, 0x3, 0x2, 0x2, 
       0x2, 0x532, 0x535, 0x3, 0x2, 0x2, 0x2, 0x533, 0x531, 0x3, 0x2, 0x2, 
       0x2, 0x533, 0x534, 0x3, 0x2, 0x2, 0x2, 0x534, 0x31, 0x3, 0x2, 0x2, 
       0x2, 0x535, 0x533, 0x3, 0x2, 0x2, 0x2, 0x536, 0x538, 0x9, 0x4, 0x2, 
       0x2, 0x537, 0x536, 0x3, 0x2, 0x2, 0x2, 0x537, 0x538, 0x3, 0x2, 0x2, 
       0x2, 0x538, 0x539, 0x3, 0x2, 0x2, 0x2, 0x539, 0x53e, 0x5, 0x110, 
       0x89, 0x2, 0x53a, 0x53b, 0x7, 0x28, 0x2, 0x2, 0x53b, 0x53e, 0x7, 
       0xaa, 0x2, 0x2, 0x53c, 0x53e, 0x7, 0x221, 0x2, 0x2, 0x53d, 0x537, 
       0x3, 0x2, 0x2, 0x2, 0x53d, 0x53a, 0x3, 0x2, 0x2, 0x2, 0x53d, 0x53c, 
       0x3, 0x2, 0x2, 0x2, 0x53e, 0x33, 0x3, 0x2, 0x2, 0x2, 0x53f, 0x542, 
       0x7, 0x15f, 0x2, 0x2, 0x540, 0x543, 0x5, 0x36, 0x1c, 0x2, 0x541, 
       0x543, 0x7, 0x3, 0x2, 0x2, 0x542, 0x540, 0x3, 0x2, 0x2, 0x2, 0x542, 
       0x541, 0x3, 0x2, 0x2, 0x2, 0x543, 0x35, 0x3, 0x2, 0x2, 0x2, 0x544, 
       0x545, 0x5, 0x41a, 0x20e, 0x2, 0x545, 0x37, 0x3, 0x2, 0x2, 0x2, 0x546, 
       0x547, 0x7, 0x7e, 0x2, 0x2, 0x547, 0x548, 0x7, 0xaf, 0x2, 0x2, 0x548, 
       0x549, 0x7, 0x220, 0x2, 0x2, 0x549, 0x54a, 0x5, 0x3a, 0x1e, 0x2, 
       0x54a, 0x54b, 0x5, 0x3c, 0x1f, 0x2, 0x54b, 0x39, 0x3, 0x2, 0x2, 0x2, 
       0x54c, 0x54d, 0x5, 0x41a, 0x20e, 0x2, 0x54d, 0x3b, 0x3, 0x2, 0x2, 
       0x2, 0x54e, 0x550, 0x5, 0x3e, 0x20, 0x2, 0x54f, 0x54e, 0x3, 0x2, 
       0x2, 0x2, 0x550, 0x553, 0x3, 0x2, 0x2, 0x2, 0x551, 0x54f, 0x3, 0x2, 
       0x2, 0x2, 0x551, 0x552, 0x3, 0x2, 0x2, 0x2, 0x552, 0x556, 0x3, 0x2, 
       0x2, 0x2, 0x553, 0x551, 0x3, 0x2, 0x2, 0x2, 0x554, 0x556, 0x5, 0x28, 
       0x15, 0x2, 0x555, 0x551, 0x3, 0x2, 0x2, 0x2, 0x555, 0x554, 0x3, 0x2, 
       0x2, 0x2, 0x556, 0x3d, 0x3, 0x2, 0x2, 0x2, 0x557, 0x558, 0x7, 0x197, 
       0x2, 0x2, 0x558, 0x55d, 0x7, 0x286, 0x2, 0x2, 0x559, 0x55a, 0x7, 
       0x1aa, 0x2, 0x2, 0x55a, 0x55d, 0x9, 0x5, 0x2, 0x2, 0x55b, 0x55d, 
       0x5, 0x40, 0x21, 0x2, 0x55c, 0x557, 0x3, 0x2, 0x2, 0x2, 0x55c, 0x559, 
       0x3, 0x2, 0x2, 0x2, 0x55c, 0x55b, 0x3, 0x2, 0x2, 0x2, 0x55d, 0x3f, 
       0x3, 0x2, 0x2, 0x2, 0x55e, 0x55f, 0x7, 0x132, 0x2, 0x2, 0x55f, 0x560, 
       0x7, 0x269, 0x2, 0x2, 0x560, 0x565, 0x5, 0x42, 0x22, 0x2, 0x561, 
       0x562, 0x7, 0x26f, 
  };
  static uint16_t serializedATNSegment1[] = {
    0x2, 0x2, 0x562, 0x564, 0x5, 0x42, 0x22, 0x2, 0x563, 0x561, 0x3, 0x2, 
       0x2, 0x2, 0x564, 0x567, 0x3, 0x2, 0x2, 0x2, 0x565, 0x563, 0x3, 0x2, 
       0x2, 0x2, 0x565, 0x566, 0x3, 0x2, 0x2, 0x2, 0x566, 0x568, 0x3, 0x2, 
       0x2, 0x2, 0x567, 0x565, 0x3, 0x2, 0x2, 0x2, 0x568, 0x569, 0x7, 0x26a, 
       0x2, 0x2, 0x569, 0x41, 0x3, 0x2, 0x2, 0x2, 0x56a, 0x56c, 0x9, 0x6, 
       0x2, 0x2, 0x56b, 0x56a, 0x3, 0x2, 0x2, 0x2, 0x56b, 0x56c, 0x3, 0x2, 
       0x2, 0x2, 0x56c, 0x56d, 0x3, 0x2, 0x2, 0x2, 0x56d, 0x56f, 0x5, 0x44, 
       0x23, 0x2, 0x56e, 0x570, 0x7, 0x286, 0x2, 0x2, 0x56f, 0x56e, 0x3, 
       0x2, 0x2, 0x2, 0x56f, 0x570, 0x3, 0x2, 0x2, 0x2, 0x570, 0x43, 0x3, 
       0x2, 0x2, 0x2, 0x571, 0x572, 0x5, 0x41a, 0x20e, 0x2, 0x572, 0x45, 
       0x3, 0x2, 0x2, 0x2, 0x573, 0x574, 0x7, 0x7e, 0x2, 0x2, 0x574, 0x575, 
       0x7, 0x1c, 0x2, 0x2, 0x575, 0x579, 0x7, 0x148, 0x2, 0x2, 0x576, 0x577, 
       0x7, 0x27, 0x2, 0x2, 0x577, 0x578, 0x9, 0x7, 0x2, 0x2, 0x578, 0x57a, 
       0x5, 0x48, 0x25, 0x2, 0x579, 0x576, 0x3, 0x2, 0x2, 0x2, 0x579, 0x57a, 
       0x3, 0x2, 0x2, 0x2, 0x57a, 0x57e, 0x3, 0x2, 0x2, 0x2, 0x57b, 0x57c, 
       0x7, 0x30, 0x2, 0x2, 0x57c, 0x57d, 0x7, 0x16c, 0x2, 0x2, 0x57d, 0x57f, 
       0x5, 0x4c, 0x27, 0x2, 0x57e, 0x57b, 0x3, 0x2, 0x2, 0x2, 0x57e, 0x57f, 
       0x3, 0x2, 0x2, 0x2, 0x57f, 0x580, 0x3, 0x2, 0x2, 0x2, 0x580, 0x581, 
       0x5, 0x50, 0x29, 0x2, 0x581, 0x47, 0x3, 0x2, 0x2, 0x2, 0x582, 0x587, 
       0x5, 0x4a, 0x26, 0x2, 0x583, 0x584, 0x7, 0x26f, 0x2, 0x2, 0x584, 
       0x586, 0x5, 0x4a, 0x26, 0x2, 0x585, 0x583, 0x3, 0x2, 0x2, 0x2, 0x586, 
       0x589, 0x3, 0x2, 0x2, 0x2, 0x587, 0x585, 0x3, 0x2, 0x2, 0x2, 0x587, 
       0x588, 0x3, 0x2, 0x2, 0x2, 0x588, 0x49, 0x3, 0x2, 0x2, 0x2, 0x589, 
       0x587, 0x3, 0x2, 0x2, 0x2, 0x58a, 0x58b, 0x5, 0x41a, 0x20e, 0x2, 
       0x58b, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x58c, 0x591, 0x5, 0x4e, 0x28, 0x2, 
       0x58d, 0x58e, 0x7, 0x26f, 0x2, 0x2, 0x58e, 0x590, 0x5, 0x4e, 0x28, 
       0x2, 0x58f, 0x58d, 0x3, 0x2, 0x2, 0x2, 0x590, 0x593, 0x3, 0x2, 0x2, 
       0x2, 0x591, 0x58f, 0x3, 0x2, 0x2, 0x2, 0x591, 0x592, 0x3, 0x2, 0x2, 
       0x2, 0x592, 0x4d, 0x3, 0x2, 0x2, 0x2, 0x593, 0x591, 0x3, 0x2, 0x2, 
       0x2, 0x594, 0x595, 0x5, 0x41a, 0x20e, 0x2, 0x595, 0x4f, 0x3, 0x2, 
       0x2, 0x2, 0x596, 0x59d, 0x5, 0x52, 0x2a, 0x2, 0x597, 0x59d, 0x5, 
       0x62, 0x32, 0x2, 0x598, 0x59d, 0x5, 0x66, 0x34, 0x2, 0x599, 0x59d, 
       0x5, 0x6a, 0x36, 0x2, 0x59a, 0x59d, 0x5, 0x70, 0x39, 0x2, 0x59b, 
       0x59d, 0x5, 0x72, 0x3a, 0x2, 0x59c, 0x596, 0x3, 0x2, 0x2, 0x2, 0x59c, 
       0x597, 0x3, 0x2, 0x2, 0x2, 0x59c, 0x598, 0x3, 0x2, 0x2, 0x2, 0x59c, 
       0x599, 0x3, 0x2, 0x2, 0x2, 0x59c, 0x59a, 0x3, 0x2, 0x2, 0x2, 0x59c, 
       0x59b, 0x3, 0x2, 0x2, 0x2, 0x59d, 0x51, 0x3, 0x2, 0x2, 0x2, 0x59e, 
       0x5a1, 0x7, 0x2a, 0x2, 0x2, 0x59f, 0x5a2, 0x5, 0x56, 0x2c, 0x2, 0x5a0, 
       0x5a2, 0x5, 0x54, 0x2b, 0x2, 0x5a1, 0x59f, 0x3, 0x2, 0x2, 0x2, 0x5a1, 
       0x5a0, 0x3, 0x2, 0x2, 0x2, 0x5a2, 0x5a3, 0x3, 0x2, 0x2, 0x2, 0x5a3, 
       0x5a4, 0x7, 0x3f, 0x2, 0x2, 0x5a4, 0x5a5, 0x7, 0x18c, 0x2, 0x2, 0x5a5, 
       0x5a6, 0x7, 0x52, 0x2, 0x2, 0x5a6, 0x5a8, 0x5, 0x5a, 0x2e, 0x2, 0x5a7, 
       0x5a9, 0x5, 0x60, 0x31, 0x2, 0x5a8, 0x5a7, 0x3, 0x2, 0x2, 0x2, 0x5a8, 
       0x5a9, 0x3, 0x2, 0x2, 0x2, 0x5a9, 0x53, 0x3, 0x2, 0x2, 0x2, 0x5aa, 
       0x5ac, 0x7, 0x3, 0x2, 0x2, 0x5ab, 0x5ad, 0x7, 0x148, 0x2, 0x2, 0x5ac, 
       0x5ab, 0x3, 0x2, 0x2, 0x2, 0x5ac, 0x5ad, 0x3, 0x2, 0x2, 0x2, 0x5ad, 
       0x55, 0x3, 0x2, 0x2, 0x2, 0x5ae, 0x5b3, 0x5, 0x58, 0x2d, 0x2, 0x5af, 
       0x5b0, 0x7, 0x26f, 0x2, 0x2, 0x5b0, 0x5b2, 0x5, 0x58, 0x2d, 0x2, 
       0x5b1, 0x5af, 0x3, 0x2, 0x2, 0x2, 0x5b2, 0x5b5, 0x3, 0x2, 0x2, 0x2, 
       0x5b3, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x5b3, 0x5b4, 0x3, 0x2, 0x2, 0x2, 
       0x5b4, 0x57, 0x3, 0x2, 0x2, 0x2, 0x5b5, 0x5b3, 0x3, 0x2, 0x2, 0x2, 
       0x5b6, 0x5b7, 0x9, 0x8, 0x2, 0x2, 0x5b7, 0x59, 0x3, 0x2, 0x2, 0x2, 
       0x5b8, 0x5bd, 0x5, 0x5c, 0x2f, 0x2, 0x5b9, 0x5ba, 0x7, 0x26f, 0x2, 
       0x2, 0x5ba, 0x5bc, 0x5, 0x5c, 0x2f, 0x2, 0x5bb, 0x5b9, 0x3, 0x2, 
       0x2, 0x2, 0x5bc, 0x5bf, 0x3, 0x2, 0x2, 0x2, 0x5bd, 0x5bb, 0x3, 0x2, 
       0x2, 0x2, 0x5bd, 0x5be, 0x3, 0x2, 0x2, 0x2, 0x5be, 0x5b, 0x3, 0x2, 
       0x2, 0x2, 0x5bf, 0x5bd, 0x3, 0x2, 0x2, 0x2, 0x5c0, 0x5c2, 0x7, 0x2b, 
       0x2, 0x2, 0x5c1, 0x5c0, 0x3, 0x2, 0x2, 0x2, 0x5c1, 0x5c2, 0x3, 0x2, 
       0x2, 0x2, 0x5c2, 0x5c3, 0x3, 0x2, 0x2, 0x2, 0x5c3, 0x5c6, 0x5, 0x5e, 
       0x30, 0x2, 0x5c4, 0x5c6, 0x7, 0x221, 0x2, 0x2, 0x5c5, 0x5c1, 0x3, 
       0x2, 0x2, 0x2, 0x5c5, 0x5c4, 0x3, 0x2, 0x2, 0x2, 0x5c6, 0x5d, 0x3, 
       0x2, 0x2, 0x2, 0x5c7, 0x5c8, 0x5, 0x41a, 0x20e, 0x2, 0x5c8, 0x5f, 
       0x3, 0x2, 0x2, 0x2, 0x5c9, 0x5ca, 0x7, 0x5d, 0x2, 0x2, 0x5ca, 0x5cb, 
       0x7, 0x2a, 0x2, 0x2, 0x5cb, 0x5cc, 0x7, 0x133, 0x2, 0x2, 0x5cc, 0x61, 
       0x3, 0x2, 0x2, 0x2, 0x5cd, 0x5d0, 0x7, 0x2a, 0x2, 0x2, 0x5ce, 0x5d1, 
       0x5, 0x64, 0x33, 0x2, 0x5cf, 0x5d1, 0x5, 0x54, 0x2b, 0x2, 0x5d0, 
       0x5ce, 0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5cf, 0x3, 0x2, 0x2, 0x2, 0x5d1, 
       0x5d2, 0x3, 0x2, 0x2, 0x2, 0x5d2, 0x5d3, 0x7, 0x3f, 0x2, 0x2, 0x5d3, 
       0x5d4, 0x7, 0xe0, 0x2, 0x2, 0x5d4, 0x5d5, 0x7, 0x52, 0x2, 0x2, 0x5d5, 
       0x5d7, 0x5, 0x5a, 0x2e, 0x2, 0x5d6, 0x5d8, 0x5, 0x60, 0x31, 0x2, 
       0x5d7, 0x5d6, 0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d8, 0x3, 0x2, 0x2, 0x2, 
       0x5d8, 0x63, 0x3, 0x2, 0x2, 0x2, 0x5d9, 0x5da, 0x7, 0xd4, 0x2, 0x2, 
       0x5da, 0x65, 0x3, 0x2, 0x2, 0x2, 0x5db, 0x5de, 0x7, 0x2a, 0x2, 0x2, 
       0x5dc, 0x5df, 0x5, 0x68, 0x35, 0x2, 0x5dd, 0x5df, 0x5, 0x54, 0x2b, 
       0x2, 0x5de, 0x5dc, 0x3, 0x2, 0x2, 0x2, 0x5de, 0x5dd, 0x3, 0x2, 0x2, 
       0x2, 0x5df, 0x5e0, 0x3, 0x2, 0x2, 0x2, 0x5e0, 0x5e1, 0x7, 0x3f, 0x2, 
       0x2, 0x5e1, 0x5e2, 0x7, 0x196, 0x2, 0x2, 0x5e2, 0x5e3, 0x7, 0x52, 
       0x2, 0x2, 0x5e3, 0x5e5, 0x5, 0x5a, 0x2e, 0x2, 0x5e4, 0x5e6, 0x5, 
       0x60, 0x31, 0x2, 0x5e5, 0x5e4, 0x3, 0x2, 0x2, 0x2, 0x5e5, 0x5e6, 
       0x3, 0x2, 0x2, 0x2, 0x5e6, 0x67, 0x3, 0x2, 0x2, 0x2, 0x5e7, 0x5e8, 
       0x7, 0x222, 0x2, 0x2, 0x5e8, 0x69, 0x3, 0x2, 0x2, 0x2, 0x5e9, 0x5eb, 
       0x7, 0x166, 0x2, 0x2, 0x5ea, 0x5ec, 0x5, 0x6c, 0x37, 0x2, 0x5eb, 
       0x5ea, 0x3, 0x2, 0x2, 0x2, 0x5eb, 0x5ec, 0x3, 0x2, 0x2, 0x2, 0x5ec, 
       0x5ef, 0x3, 0x2, 0x2, 0x2, 0x5ed, 0x5f0, 0x5, 0x56, 0x2c, 0x2, 0x5ee, 
       0x5f0, 0x5, 0x54, 0x2b, 0x2, 0x5ef, 0x5ed, 0x3, 0x2, 0x2, 0x2, 0x5ef, 
       0x5ee, 0x3, 0x2, 0x2, 0x2, 0x5f0, 0x5f1, 0x3, 0x2, 0x2, 0x2, 0x5f1, 
       0x5f2, 0x7, 0x3f, 0x2, 0x2, 0x5f2, 0x5f3, 0x7, 0x18c, 0x2, 0x2, 0x5f3, 
       0x5f4, 0x7, 0x28, 0x2, 0x2, 0x5f4, 0x5f6, 0x5, 0x5a, 0x2e, 0x2, 0x5f5, 
       0x5f7, 0x5, 0x6e, 0x38, 0x2, 0x5f6, 0x5f5, 0x3, 0x2, 0x2, 0x2, 0x5f6, 
       0x5f7, 0x3, 0x2, 0x2, 0x2, 0x5f7, 0x6b, 0x3, 0x2, 0x2, 0x2, 0x5f8, 
       0x5f9, 0x7, 0x2a, 0x2, 0x2, 0x5f9, 0x5fa, 0x7, 0x133, 0x2, 0x2, 0x5fa, 
       0x5fb, 0x7, 0x27, 0x2, 0x2, 0x5fb, 0x6d, 0x3, 0x2, 0x2, 0x2, 0x5fc, 
       0x5fe, 0x7, 0x91, 0x2, 0x2, 0x5fd, 0x5ff, 0x7, 0xa2, 0x2, 0x2, 0x5fe, 
       0x5fd, 0x3, 0x2, 0x2, 0x2, 0x5fe, 0x5ff, 0x3, 0x2, 0x2, 0x2, 0x5ff, 
       0x602, 0x3, 0x2, 0x2, 0x2, 0x600, 0x602, 0x7, 0x163, 0x2, 0x2, 0x601, 
       0x5fc, 0x3, 0x2, 0x2, 0x2, 0x601, 0x600, 0x3, 0x2, 0x2, 0x2, 0x602, 
       0x6f, 0x3, 0x2, 0x2, 0x2, 0x603, 0x605, 0x7, 0x166, 0x2, 0x2, 0x604, 
       0x606, 0x5, 0x6c, 0x37, 0x2, 0x605, 0x604, 0x3, 0x2, 0x2, 0x2, 0x605, 
       0x606, 0x3, 0x2, 0x2, 0x2, 0x606, 0x609, 0x3, 0x2, 0x2, 0x2, 0x607, 
       0x60a, 0x5, 0x64, 0x33, 0x2, 0x608, 0x60a, 0x5, 0x54, 0x2b, 0x2, 
       0x609, 0x607, 0x3, 0x2, 0x2, 0x2, 0x609, 0x608, 0x3, 0x2, 0x2, 0x2, 
       0x60a, 0x60b, 0x3, 0x2, 0x2, 0x2, 0x60b, 0x60c, 0x7, 0x3f, 0x2, 0x2, 
       0x60c, 0x60d, 0x7, 0xe0, 0x2, 0x2, 0x60d, 0x60e, 0x7, 0x28, 0x2, 
       0x2, 0x60e, 0x610, 0x5, 0x5a, 0x2e, 0x2, 0x60f, 0x611, 0x5, 0x6e, 
       0x38, 0x2, 0x610, 0x60f, 0x3, 0x2, 0x2, 0x2, 0x610, 0x611, 0x3, 0x2, 
       0x2, 0x2, 0x611, 0x71, 0x3, 0x2, 0x2, 0x2, 0x612, 0x614, 0x7, 0x166, 
       0x2, 0x2, 0x613, 0x615, 0x5, 0x6c, 0x37, 0x2, 0x614, 0x613, 0x3, 
       0x2, 0x2, 0x2, 0x614, 0x615, 0x3, 0x2, 0x2, 0x2, 0x615, 0x618, 0x3, 
       0x2, 0x2, 0x2, 0x616, 0x619, 0x5, 0x68, 0x35, 0x2, 0x617, 0x619, 
       0x5, 0x54, 0x2b, 0x2, 0x618, 0x616, 0x3, 0x2, 0x2, 0x2, 0x618, 0x617, 
       0x3, 0x2, 0x2, 0x2, 0x619, 0x61a, 0x3, 0x2, 0x2, 0x2, 0x61a, 0x61b, 
       0x7, 0x3f, 0x2, 0x2, 0x61b, 0x61c, 0x7, 0x196, 0x2, 0x2, 0x61c, 0x61d, 
       0x7, 0x28, 0x2, 0x2, 0x61d, 0x61f, 0x5, 0x5a, 0x2e, 0x2, 0x61e, 0x620, 
       0x5, 0x6e, 0x38, 0x2, 0x61f, 0x61e, 0x3, 0x2, 0x2, 0x2, 0x61f, 0x620, 
       0x3, 0x2, 0x2, 0x2, 0x620, 0x73, 0x3, 0x2, 0x2, 0x2, 0x621, 0x622, 
       0x7, 0x7e, 0x2, 0x2, 0x622, 0x623, 0x7, 0x223, 0x2, 0x2, 0x623, 0x624, 
       0x5, 0x76, 0x3c, 0x2, 0x624, 0x625, 0x5, 0x2c, 0x17, 0x2, 0x625, 
       0x75, 0x3, 0x2, 0x2, 0x2, 0x626, 0x627, 0x5, 0x41a, 0x20e, 0x2, 0x627, 
       0x77, 0x3, 0x2, 0x2, 0x2, 0x628, 0x629, 0x7, 0x7e, 0x2, 0x2, 0x629, 
       0x62a, 0x7, 0x26, 0x2, 0x2, 0x62a, 0x62c, 0x7, 0x50, 0x2, 0x2, 0x62b, 
       0x62d, 0x5, 0x7a, 0x3e, 0x2, 0x62c, 0x62b, 0x3, 0x2, 0x2, 0x2, 0x62c, 
       0x62d, 0x3, 0x2, 0x2, 0x2, 0x62d, 0x62e, 0x3, 0x2, 0x2, 0x2, 0x62e, 
       0x62f, 0x5, 0x7c, 0x3f, 0x2, 0x62f, 0x631, 0x5, 0x80, 0x41, 0x2, 
       0x630, 0x632, 0x5, 0x6e, 0x38, 0x2, 0x631, 0x630, 0x3, 0x2, 0x2, 
       0x2, 0x631, 0x632, 0x3, 0x2, 0x2, 0x2, 0x632, 0x79, 0x3, 0x2, 0x2, 
       0x2, 0x633, 0x635, 0x7, 0xe9, 0x2, 0x2, 0x634, 0x636, 0x7, 0x3b, 
       0x2, 0x2, 0x635, 0x634, 0x3, 0x2, 0x2, 0x2, 0x635, 0x636, 0x3, 0x2, 
       0x2, 0x2, 0x636, 0x637, 0x3, 0x2, 0x2, 0x2, 0x637, 0x638, 0x7, 0x1c5, 
       0x2, 0x2, 0x638, 0x7b, 0x3, 0x2, 0x2, 0x2, 0x639, 0x63d, 0x5, 0x41a, 
       0x20e, 0x2, 0x63a, 0x63c, 0x5, 0x7e, 0x40, 0x2, 0x63b, 0x63a, 0x3, 
       0x2, 0x2, 0x2, 0x63c, 0x63f, 0x3, 0x2, 0x2, 0x2, 0x63d, 0x63b, 0x3, 
       0x2, 0x2, 0x2, 0x63d, 0x63e, 0x3, 0x2, 0x2, 0x2, 0x63e, 0x7d, 0x3, 
       0x2, 0x2, 0x2, 0x63f, 0x63d, 0x3, 0x2, 0x2, 0x2, 0x640, 0x641, 0x7, 
       0x272, 0x2, 0x2, 0x641, 0x642, 0x5, 0x41a, 0x20e, 0x2, 0x642, 0x7f, 
       0x3, 0x2, 0x2, 0x2, 0x643, 0x649, 0x5, 0x40, 0x21, 0x2, 0x644, 0x649, 
       0x5, 0x2c, 0x17, 0x2, 0x645, 0x649, 0x5, 0x82, 0x42, 0x2, 0x646, 
       0x649, 0x5, 0x8c, 0x47, 0x2, 0x647, 0x649, 0x5, 0x94, 0x4b, 0x2, 
       0x648, 0x643, 0x3, 0x2, 0x2, 0x2, 0x648, 0x644, 0x3, 0x2, 0x2, 0x2, 
       0x648, 0x645, 0x3, 0x2, 0x2, 0x2, 0x648, 0x646, 0x3, 0x2, 0x2, 0x2, 
       0x648, 0x647, 0x3, 0x2, 0x2, 0x2, 0x649, 0x81, 0x3, 0x2, 0x2, 0x2, 
       0x64a, 0x64f, 0x5, 0x84, 0x43, 0x2, 0x64b, 0x64c, 0x7, 0x26f, 0x2, 
       0x2, 0x64c, 0x64e, 0x5, 0x84, 0x43, 0x2, 0x64d, 0x64b, 0x3, 0x2, 
       0x2, 0x2, 0x64e, 0x651, 0x3, 0x2, 0x2, 0x2, 0x64f, 0x64d, 0x3, 0x2, 
       0x2, 0x2, 0x64f, 0x650, 0x3, 0x2, 0x2, 0x2, 0x650, 0x83, 0x3, 0x2, 
       0x2, 0x2, 0x651, 0x64f, 0x3, 0x2, 0x2, 0x2, 0x652, 0x654, 0x7, 0x7e, 
       0x2, 0x2, 0x653, 0x655, 0x7, 0x13, 0x2, 0x2, 0x654, 0x653, 0x3, 0x2, 
       0x2, 0x2, 0x654, 0x655, 0x3, 0x2, 0x2, 0x2, 0x655, 0x656, 0x3, 0x2, 
       0x2, 0x2, 0x656, 0x657, 0x5, 0x86, 0x44, 0x2, 0x657, 0x658, 0x5, 
       0x88, 0x45, 0x2, 0x658, 0x85, 0x3, 0x2, 0x2, 0x2, 0x659, 0x65d, 0x5, 
       0x41a, 0x20e, 0x2, 0x65a, 0x65c, 0x5, 0x7e, 0x40, 0x2, 0x65b, 0x65a, 
       0x3, 0x2, 0x2, 0x2, 0x65c, 0x65f, 0x3, 0x2, 0x2, 0x2, 0x65d, 0x65b, 
       0x3, 0x2, 0x2, 0x2, 0x65d, 0x65e, 0x3, 0x2, 0x2, 0x2, 0x65e, 0x87, 
       0x3, 0x2, 0x2, 0x2, 0x65f, 0x65d, 0x3, 0x2, 0x2, 0x2, 0x660, 0x661, 
       0x7, 0x176, 0x2, 0x2, 0x661, 0x663, 0x7, 0xaf, 0x2, 0x2, 0x662, 0x660, 
       0x3, 0x2, 0x2, 0x2, 0x662, 0x663, 0x3, 0x2, 0x2, 0x2, 0x663, 0x664, 
       0x3, 0x2, 0x2, 0x2, 0x664, 0x665, 0x7, 0x197, 0x2, 0x2, 0x665, 0x66c, 
       0x5, 0x3c2, 0x1e2, 0x2, 0x666, 0x667, 0x9, 0x9, 0x2, 0x2, 0x667, 
       0x668, 0x7, 0x3b, 0x2, 0x2, 0x668, 0x66c, 0x7, 0x3c, 0x2, 0x2, 0x669, 
       0x66c, 0x5, 0x8a, 0x46, 0x2, 0x66a, 0x66c, 0x5, 0x40, 0x21, 0x2, 
       0x66b, 0x662, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x666, 0x3, 0x2, 0x2, 0x2, 
       0x66b, 0x669, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x66a, 0x3, 0x2, 0x2, 0x2, 
       0x66c, 0x89, 0x3, 0x2, 0x2, 0x2, 0x66d, 0x66e, 0x7, 0x176, 0x2, 0x2, 
       0x66e, 0x670, 0x7, 0x180, 0x2, 0x2, 0x66f, 0x671, 0x7, 0x13d, 0x2, 
       0x2, 0x670, 0x66f, 0x3, 0x2, 0x2, 0x2, 0x670, 0x671, 0x3, 0x2, 0x2, 
       0x2, 0x671, 0x672, 0x3, 0x2, 0x2, 0x2, 0x672, 0x673, 0x5, 0x26, 0x14, 
       0x2, 0x673, 0x8b, 0x3, 0x2, 0x2, 0x2, 0x674, 0x677, 0x7, 0x79, 0x2, 
       0x2, 0x675, 0x676, 0x7, 0x14, 0x2, 0x2, 0x676, 0x678, 0x5, 0x90, 
       0x49, 0x2, 0x677, 0x675, 0x3, 0x2, 0x2, 0x2, 0x677, 0x678, 0x3, 0x2, 
       0x2, 0x2, 0x678, 0x679, 0x3, 0x2, 0x2, 0x2, 0x679, 0x67b, 0x5, 0x8e, 
       0x48, 0x2, 0x67a, 0x67c, 0x5, 0x92, 0x4a, 0x2, 0x67b, 0x67a, 0x3, 
       0x2, 0x2, 0x2, 0x67b, 0x67c, 0x3, 0x2, 0x2, 0x2, 0x67c, 0x8d, 0x3, 
       0x2, 0x2, 0x2, 0x67d, 0x67e, 0x7, 0x44, 0x2, 0x2, 0x67e, 0x681, 0x7, 
       0xfc, 0x2, 0x2, 0x67f, 0x681, 0x7, 0x56, 0x2, 0x2, 0x680, 0x67d, 
       0x3, 0x2, 0x2, 0x2, 0x680, 0x67f, 0x3, 0x2, 0x2, 0x2, 0x681, 0x683, 
       0x3, 0x2, 0x2, 0x2, 0x682, 0x684, 0x5, 0x138, 0x9d, 0x2, 0x683, 0x682, 
       0x3, 0x2, 0x2, 0x2, 0x683, 0x684, 0x3, 0x2, 0x2, 0x2, 0x684, 0x8f, 
       0x3, 0x2, 0x2, 0x2, 0x685, 0x686, 0x5, 0x41a, 0x20e, 0x2, 0x686, 
       0x91, 0x3, 0x2, 0x2, 0x2, 0x687, 0x690, 0x7, 0xca, 0x2, 0x2, 0x688, 
       0x689, 0x7, 0x3b, 0x2, 0x2, 0x689, 0x68d, 0x7, 0xca, 0x2, 0x2, 0x68a, 
       0x68b, 0x9, 0x3, 0x2, 0x2, 0x68b, 0x68c, 0x7, 0x14c, 0x2, 0x2, 0x68c, 
       0x68e, 0x7, 0x131, 0x2, 0x2, 0x68d, 0x68a, 0x3, 0x2, 0x2, 0x2, 0x68d, 
       0x68e, 0x3, 0x2, 0x2, 0x2, 0x68e, 0x690, 0x3, 0x2, 0x2, 0x2, 0x68f, 
       0x687, 0x3, 0x2, 0x2, 0x2, 0x68f, 0x688, 0x3, 0x2, 0x2, 0x2, 0x690, 
       0x93, 0x3, 0x2, 0x2, 0x2, 0x691, 0x692, 0x7, 0xc5, 0x2, 0x2, 0x692, 
       0x693, 0x7, 0x14, 0x2, 0x2, 0x693, 0x694, 0x5, 0x90, 0x49, 0x2, 0x694, 
       0x95, 0x3, 0x2, 0x2, 0x2, 0x695, 0x696, 0x7, 0x7e, 0x2, 0x2, 0x696, 
       0x697, 0x7, 0x29, 0x2, 0x2, 0x697, 0x698, 0x5, 0x98, 0x4d, 0x2, 0x698, 
       0x699, 0x5, 0xa4, 0x53, 0x2, 0x699, 0x97, 0x3, 0x2, 0x2, 0x2, 0x69a, 
       0x69b, 0x5, 0x410, 0x209, 0x2, 0x69b, 0x69c, 0x5, 0x9a, 0x4e, 0x2, 
       0x69c, 0x99, 0x3, 0x2, 0x2, 0x2, 0x69d, 0x69f, 0x7, 0x269, 0x2, 0x2, 
       0x69e, 0x6a0, 0x5, 0x9c, 0x4f, 0x2, 0x69f, 0x69e, 0x3, 0x2, 0x2, 
       0x2, 0x69f, 0x6a0, 0x3, 0x2, 0x2, 0x2, 0x6a0, 0x6a1, 0x3, 0x2, 0x2, 
       0x2, 0x6a1, 0x6a2, 0x7, 0x26a, 0x2, 0x2, 0x6a2, 0x9b, 0x3, 0x2, 0x2, 
       0x2, 0x6a3, 0x6a8, 0x5, 0x9e, 0x50, 0x2, 0x6a4, 0x6a5, 0x7, 0x26f, 
       0x2, 0x2, 0x6a5, 0x6a7, 0x5, 0x9e, 0x50, 0x2, 0x6a6, 0x6a4, 0x3, 
       0x2, 0x2, 0x2, 0x6a7, 0x6aa, 0x3, 0x2, 0x2, 0x2, 0x6a8, 0x6a6, 0x3, 
       0x2, 0x2, 0x2, 0x6a8, 0x6a9, 0x3, 0x2, 0x2, 0x2, 0x6a9, 0x9d, 0x3, 
       0x2, 0x2, 0x2, 0x6aa, 0x6a8, 0x3, 0x2, 0x2, 0x2, 0x6ab, 0x6ad, 0x5, 
       0xa0, 0x51, 0x2, 0x6ac, 0x6ab, 0x3, 0x2, 0x2, 0x2, 0x6ac, 0x6ad, 
       0x3, 0x2, 0x2, 0x2, 0x6ad, 0x6af, 0x3, 0x2, 0x2, 0x2, 0x6ae, 0x6b0, 
       0x5, 0xa2, 0x52, 0x2, 0x6af, 0x6ae, 0x3, 0x2, 0x2, 0x2, 0x6af, 0x6b0, 
       0x3, 0x2, 0x2, 0x2, 0x6b0, 0x6b1, 0x3, 0x2, 0x2, 0x2, 0x6b1, 0x6b2, 
       0x5, 0x3c2, 0x1e2, 0x2, 0x6b2, 0x9f, 0x3, 0x2, 0x2, 0x2, 0x6b3, 0x6b4, 
       0x9, 0xa, 0x2, 0x2, 0x6b4, 0xa1, 0x3, 0x2, 0x2, 0x2, 0x6b5, 0x6b8, 
       0x5, 0x41a, 0x20e, 0x2, 0x6b6, 0x6b8, 0x7, 0x289, 0x2, 0x2, 0x6b7, 
       0x6b5, 0x3, 0x2, 0x2, 0x2, 0x6b7, 0x6b6, 0x3, 0x2, 0x2, 0x2, 0x6b8, 
       0xa3, 0x3, 0x2, 0x2, 0x2, 0x6b9, 0x6bb, 0x5, 0xa6, 0x54, 0x2, 0x6ba, 
       0x6b9, 0x3, 0x2, 0x2, 0x2, 0x6bb, 0x6be, 0x3, 0x2, 0x2, 0x2, 0x6bc, 
       0x6ba, 0x3, 0x2, 0x2, 0x2, 0x6bc, 0x6bd, 0x3, 0x2, 0x2, 0x2, 0x6bd, 
       0x6c0, 0x3, 0x2, 0x2, 0x2, 0x6be, 0x6bc, 0x3, 0x2, 0x2, 0x2, 0x6bf, 
       0x6c1, 0x7, 0x163, 0x2, 0x2, 0x6c0, 0x6bf, 0x3, 0x2, 0x2, 0x2, 0x6c0, 
       0x6c1, 0x3, 0x2, 0x2, 0x2, 0x6c1, 0x6c5, 0x3, 0x2, 0x2, 0x2, 0x6c2, 
       0x6c5, 0x5, 0x28, 0x15, 0x2, 0x6c3, 0x6c5, 0x5, 0xa8, 0x55, 0x2, 
       0x6c4, 0x6bc, 0x3, 0x2, 0x2, 0x2, 0x6c4, 0x6c2, 0x3, 0x2, 0x2, 0x2, 
       0x6c4, 0x6c3, 0x3, 0x2, 0x2, 0x2, 0x6c5, 0xa5, 0x3, 0x2, 0x2, 0x2, 
       0x6c6, 0x6c7, 0x7, 0x8e, 0x2, 0x2, 0x6c7, 0x6c8, 0x7, 0x3f, 0x2, 
       0x2, 0x6c8, 0x6c9, 0x7, 0x3c, 0x2, 0x2, 0x6c9, 0x6e2, 0x7, 0xf6, 
       0x2, 0x2, 0x6ca, 0x6cb, 0x7, 0x164, 0x2, 0x2, 0x6cb, 0x6cc, 0x7, 
       0x3c, 0x2, 0x2, 0x6cc, 0x6cd, 0x7, 0x3f, 0x2, 0x2, 0x6cd, 0x6ce, 
       0x7, 0x3c, 0x2, 0x2, 0x6ce, 0x6e2, 0x7, 0xf6, 0x2, 0x2, 0x6cf, 0x6e2, 
       0x7, 0x185, 0x2, 0x2, 0x6d0, 0x6e2, 0x9, 0xb, 0x2, 0x2, 0x6d1, 0x6d3, 
       0x7, 0x3b, 0x2, 0x2, 0x6d2, 0x6d1, 0x3, 0x2, 0x2, 0x2, 0x6d2, 0x6d3, 
       0x3, 0x2, 0x2, 0x2, 0x6d3, 0x6d4, 0x3, 0x2, 0x2, 0x2, 0x6d4, 0x6e2, 
       0x9, 0xc, 0x2, 0x2, 0x6d5, 0x6d7, 0x7, 0xd7, 0x2, 0x2, 0x6d6, 0x6d5, 
       0x3, 0x2, 0x2, 0x2, 0x6d6, 0x6d7, 0x3, 0x2, 0x2, 0x2, 0x6d7, 0x6d8, 
       0x3, 0x2, 0x2, 0x2, 0x6d8, 0x6d9, 0x7, 0x170, 0x2, 0x2, 0x6d9, 0x6e2, 
       0x9, 0xd, 0x2, 0x2, 0x6da, 0x6db, 0x7, 0xc, 0x2, 0x2, 0x6db, 0x6e2, 
       0x9, 0xe, 0x2, 0x2, 0x6dc, 0x6dd, 0x9, 0xf, 0x2, 0x2, 0x6dd, 0x6e2, 
       0x5, 0x3c6, 0x1e4, 0x2, 0x6de, 0x6e2, 0x5, 0x30, 0x19, 0x2, 0x6df, 
       0x6e2, 0x5, 0x34, 0x1b, 0x2, 0x6e0, 0x6e2, 0x7, 0x266, 0x2, 0x2, 
       0x6e1, 0x6c6, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6ca, 0x3, 0x2, 0x2, 0x2, 
       0x6e1, 0x6cf, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6d0, 0x3, 0x2, 0x2, 0x2, 
       0x6e1, 0x6d2, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6d6, 0x3, 0x2, 0x2, 0x2, 
       0x6e1, 0x6da, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6dc, 0x3, 0x2, 0x2, 0x2, 
       0x6e1, 0x6de, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6df, 0x3, 0x2, 0x2, 0x2, 
       0x6e1, 0x6e0, 0x3, 0x2, 0x2, 0x2, 0x6e2, 0xa7, 0x3, 0x2, 0x2, 0x2, 
       0x6e3, 0x6e4, 0x7, 0x176, 0x2, 0x2, 0x6e4, 0x6e5, 0x7, 0x16c, 0x2, 
       0x2, 0x6e5, 0x6e6, 0x5, 0x4e, 0x28, 0x2, 0x6e6, 0xa9, 0x3, 0x2, 0x2, 
       0x2, 0x6e7, 0x6e8, 0x7, 0x7e, 0x2, 0x2, 0x6e8, 0x6e9, 0x7, 0x2b, 
       0x2, 0x2, 0x6e9, 0x6ea, 0x5, 0xac, 0x57, 0x2, 0x6ea, 0x6eb, 0x5, 
       0xae, 0x58, 0x2, 0x6eb, 0xab, 0x3, 0x2, 0x2, 0x2, 0x6ec, 0x6ed, 0x5, 
       0x41a, 0x20e, 0x2, 0x6ed, 0xad, 0x3, 0x2, 0x2, 0x2, 0x6ee, 0x6ef, 
       0x9, 0x10, 0x2, 0x2, 0x6ef, 0x6f0, 0x7, 0x57, 0x2, 0x2, 0x6f0, 0x6f3, 
       0x5, 0xb0, 0x59, 0x2, 0x6f1, 0x6f3, 0x5, 0x2a, 0x16, 0x2, 0x6f2, 
       0x6ee, 0x3, 0x2, 0x2, 0x2, 0x6f2, 0x6f1, 0x3, 0x2, 0x2, 0x2, 0x6f3, 
       0xaf, 0x3, 0x2, 0x2, 0x2, 0x6f4, 0x6f9, 0x5, 0xb2, 0x5a, 0x2, 0x6f5, 
       0x6f6, 0x7, 0x26f, 0x2, 0x2, 0x6f6, 0x6f8, 0x5, 0xb2, 0x5a, 0x2, 
       0x6f7, 0x6f5, 0x3, 0x2, 0x2, 0x2, 0x6f8, 0x6fb, 0x3, 0x2, 0x2, 0x2, 
       0x6f9, 0x6f7, 0x3, 0x2, 0x2, 0x2, 0x6f9, 0x6fa, 0x3, 0x2, 0x2, 0x2, 
       0x6fa, 0xb1, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6f9, 0x3, 0x2, 0x2, 0x2, 
       0x6fc, 0x6fd, 0x5, 0x41a, 0x20e, 0x2, 0x6fd, 0xb3, 0x3, 0x2, 0x2, 
       0x2, 0x6fe, 0x6ff, 0x7, 0x7e, 0x2, 0x2, 0x6ff, 0x701, 0x7, 0xf0, 
       0x2, 0x2, 0x700, 0x702, 0x5, 0x7a, 0x3e, 0x2, 0x701, 0x700, 0x3, 
       0x2, 0x2, 0x2, 0x701, 0x702, 0x3, 0x2, 0x2, 0x2, 0x702, 0x703, 0x3, 
       0x2, 0x2, 0x2, 0x703, 0x704, 0x5, 0xb6, 0x5c, 0x2, 0x704, 0x705, 
       0x5, 0xb8, 0x5d, 0x2, 0x705, 0xb5, 0x3, 0x2, 0x2, 0x2, 0x706, 0x70a, 
       0x5, 0x41a, 0x20e, 0x2, 0x707, 0x709, 0x5, 0x7e, 0x40, 0x2, 0x708, 
       0x707, 0x3, 0x2, 0x2, 0x2, 0x709, 0x70c, 0x3, 0x2, 0x2, 0x2, 0x70a, 
       0x708, 0x3, 0x2, 0x2, 0x2, 0x70a, 0x70b, 0x3, 0x2, 0x2, 0x2, 0x70b, 
       0xb7, 0x3, 0x2, 0x2, 0x2, 0x70c, 0x70a, 0x3, 0x2, 0x2, 0x2, 0x70d, 
       0x729, 0x5, 0x2a, 0x16, 0x2, 0x70e, 0x729, 0x5, 0xba, 0x5e, 0x2, 
       0x70f, 0x729, 0x5, 0xbe, 0x60, 0x2, 0x710, 0x729, 0x5, 0xc0, 0x61, 
       0x2, 0x711, 0x712, 0x7, 0x39, 0x2, 0x2, 0x712, 0x713, 0x7, 0x139, 
       0x2, 0x2, 0x713, 0x715, 0x5, 0xc8, 0x65, 0x2, 0x714, 0x711, 0x3, 
       0x2, 0x2, 0x2, 0x714, 0x715, 0x3, 0x2, 0x2, 0x2, 0x715, 0x716, 0x3, 
       0x2, 0x2, 0x2, 0x716, 0x729, 0x7, 0x1a1, 0x2, 0x2, 0x717, 0x71a, 
       0x7, 0x152, 0x2, 0x2, 0x718, 0x719, 0x7, 0x139, 0x2, 0x2, 0x719, 
       0x71b, 0x5, 0xc8, 0x65, 0x2, 0x71a, 0x718, 0x3, 0x2, 0x2, 0x2, 0x71a, 
       0x71b, 0x3, 0x2, 0x2, 0x2, 0x71b, 0x729, 0x3, 0x2, 0x2, 0x2, 0x71c, 
       0x71d, 0x7, 0x15b, 0x2, 0x2, 0x71d, 0x71e, 0x7, 0x139, 0x2, 0x2, 
       0x71e, 0x71f, 0x5, 0xc8, 0x65, 0x2, 0x71f, 0x720, 0x7, 0x52, 0x2, 
       0x2, 0x720, 0x721, 0x5, 0x2e, 0x18, 0x2, 0x721, 0x729, 0x3, 0x2, 
       0x2, 0x2, 0x722, 0x723, 0x7, 0x11b, 0x2, 0x2, 0x723, 0x724, 0x7, 
       0x139, 0x2, 0x2, 0x724, 0x725, 0x5, 0xc8, 0x65, 0x2, 0x725, 0x726, 
       0x7, 0x18b, 0x2, 0x2, 0x726, 0x727, 0x5, 0x2e, 0x18, 0x2, 0x727, 
       0x729, 0x3, 0x2, 0x2, 0x2, 0x728, 0x70d, 0x3, 0x2, 0x2, 0x2, 0x728, 
       0x70e, 0x3, 0x2, 0x2, 0x2, 0x728, 0x70f, 0x3, 0x2, 0x2, 0x2, 0x728, 
       0x710, 0x3, 0x2, 0x2, 0x2, 0x728, 0x714, 0x3, 0x2, 0x2, 0x2, 0x728, 
       0x717, 0x3, 0x2, 0x2, 0x2, 0x728, 0x71c, 0x3, 0x2, 0x2, 0x2, 0x728, 
       0x722, 0x3, 0x2, 0x2, 0x2, 0x729, 0xb9, 0x3, 0x2, 0x2, 0x2, 0x72a, 
       0x72b, 0x7, 0x176, 0x2, 0x2, 0x72b, 0x72c, 0x5, 0xbc, 0x5f, 0x2, 
       0x72c, 0xbb, 0x3, 0x2, 0x2, 0x2, 0x72d, 0x72e, 0x7, 0x18b, 0x2, 0x2, 
       0x72e, 0x72f, 0x5, 0xc2, 0x62, 0x2, 0x72f, 0xbd, 0x3, 0x2, 0x2, 0x2, 
       0x730, 0x731, 0x7, 0x176, 0x2, 0x2, 0x731, 0x732, 0x5, 0x16, 0xc, 
       0x2, 0x732, 0xbf, 0x3, 0x2, 0x2, 0x2, 0x733, 0x734, 0x7, 0x15f, 0x2, 
       0x2, 0x734, 0x735, 0x7, 0x269, 0x2, 0x2, 0x735, 0x736, 0x5, 0xc4, 
       0x63, 0x2, 0x736, 0x737, 0x7, 0x26a, 0x2, 0x2, 0x737, 0xc1, 0x3, 
       0x2, 0x2, 0x2, 0x738, 0x739, 0x5, 0x41a, 0x20e, 0x2, 0x739, 0xc3, 
       0x3, 0x2, 0x2, 0x2, 0x73a, 0x73f, 0x5, 0xc6, 0x64, 0x2, 0x73b, 0x73c, 
       0x7, 0x26f, 0x2, 0x2, 0x73c, 0x73e, 0x5, 0xc6, 0x64, 0x2, 0x73d, 
       0x73b, 0x3, 0x2, 0x2, 0x2, 0x73e, 0x741, 0x3, 0x2, 0x2, 0x2, 0x73f, 
       0x73d, 0x3, 0x2, 0x2, 0x2, 0x73f, 0x740, 0x3, 0x2, 0x2, 0x2, 0x740, 
       0xc5, 0x3, 0x2, 0x2, 0x2, 0x741, 0x73f, 0x3, 0x2, 0x2, 0x2, 0x742, 
       0x743, 0x5, 0x41a, 0x20e, 0x2, 0x743, 0xc7, 0x3, 0x2, 0x2, 0x2, 0x744, 
       0x745, 0x5, 0x41a, 0x20e, 0x2, 0x745, 0xc9, 0x3, 0x2, 0x2, 0x2, 0x746, 
       0x747, 0x7, 0x7e, 0x2, 0x2, 0x747, 0x748, 0x7, 0xff, 0x2, 0x2, 0x748, 
       0x749, 0x7, 0x12c, 0x2, 0x2, 0x749, 0x74a, 0x5, 0x41a, 0x20e, 0x2, 
       0x74a, 0x74b, 0x5, 0x2c, 0x17, 0x2, 0x74b, 0xcb, 0x3, 0x2, 0x2, 0x2, 
       0x74c, 0x74d, 0x7, 0x7e, 0x2, 0x2, 0x74d, 0x74e, 0x7, 0x121, 0x2, 
       0x2, 0x74e, 0x74f, 0x5, 0xce, 0x68, 0x2, 0x74f, 0x750, 0x7, 0x5d, 
       0x2, 0x2, 0x750, 0x751, 0x5, 0x16, 0xc, 0x2, 0x751, 0xcd, 0x3, 0x2, 
       0x2, 0x2, 0x752, 0x753, 0x5, 0x41a, 0x20e, 0x2, 0x753, 0xcf, 0x3, 
       0x2, 0x2, 0x2, 0x754, 0x755, 0x7, 0x269, 0x2, 0x2, 0x755, 0x756, 
       0x5, 0xd2, 0x6a, 0x2, 0x756, 0x757, 0x7, 0x26a, 0x2, 0x2, 0x757, 
       0xd1, 0x3, 0x2, 0x2, 0x2, 0x758, 0x75d, 0x5, 0xce, 0x68, 0x2, 0x759, 
       0x75a, 0x7, 0x26f, 0x2, 0x2, 0x75a, 0x75c, 0x5, 0xce, 0x68, 0x2, 
       0x75b, 0x759, 0x3, 0x2, 0x2, 0x2, 0x75c, 0x75f, 0x3, 0x2, 0x2, 0x2, 
       0x75d, 0x75b, 0x3, 0x2, 0x2, 0x2, 0x75d, 0x75e, 0x3, 0x2, 0x2, 0x2, 
       0x75e, 0xd3, 0x3, 0x2, 0x2, 0x2, 0x75f, 0x75d, 0x3, 0x2, 0x2, 0x2, 
       0x760, 0x761, 0x3, 0x2, 0x2, 0x2, 0x761, 0xd5, 0x3, 0x2, 0x2, 0x2, 
       0x762, 0x763, 0x7, 0x7e, 0x2, 0x2, 0x763, 0x764, 0x7, 0x121, 0x2, 
       0x2, 0x764, 0x765, 0x7, 0x2b, 0x2, 0x2, 0x765, 0x766, 0x5, 0xac, 
       0x57, 0x2, 0x766, 0x767, 0x5, 0xd8, 0x6d, 0x2, 0x767, 0xd7, 0x3, 
       0x2, 0x2, 0x2, 0x768, 0x769, 0x7, 0x176, 0x2, 0x2, 0x769, 0x785, 
       0x7, 0x1c, 0x2, 0x2, 0x76a, 0x76b, 0x7, 0x176, 0x2, 0x2, 0x76b, 0x76d, 
       0x7, 0x226, 0x2, 0x2, 0x76c, 0x76a, 0x3, 0x2, 0x2, 0x2, 0x76c, 0x76d, 
       0x3, 0x2, 0x2, 0x2, 0x76d, 0x76e, 0x3, 0x2, 0x2, 0x2, 0x76e, 0x785, 
       0x5, 0x2a, 0x16, 0x2, 0x76f, 0x770, 0x7, 0x176, 0x2, 0x2, 0x770, 
       0x771, 0x7, 0x3b, 0x2, 0x2, 0x771, 0x785, 0x7, 0x226, 0x2, 0x2, 0x772, 
       0x773, 0x7, 0x176, 0x2, 0x2, 0x773, 0x774, 0x7, 0x50, 0x2, 0x2, 0x774, 
       0x775, 0x7, 0x2b, 0x2, 0x2, 0x775, 0x785, 0x5, 0x2e, 0x18, 0x2, 0x776, 
       0x777, 0x7, 0xa7, 0x2, 0x2, 0x777, 0x778, 0x7, 0xe, 0x2, 0x2, 0x778, 
       0x779, 0x7, 0x28, 0x2, 0x2, 0x779, 0x785, 0x5, 0xac, 0x57, 0x2, 0x77a, 
       0x785, 0x5, 0xda, 0x6e, 0x2, 0x77b, 0x785, 0x5, 0xdc, 0x6f, 0x2, 
       0x77c, 0x77d, 0x7, 0x160, 0x2, 0x2, 0x77d, 0x77e, 0x7, 0x52, 0x2, 
       0x2, 0x77e, 0x785, 0x5, 0xac, 0x57, 0x2, 0x77f, 0x780, 0x7, 0x176, 
       0x2, 0x2, 0x780, 0x781, 0x7, 0x226, 0x2, 0x2, 0x781, 0x782, 0x7, 
       0x5d, 0x2, 0x2, 0x782, 0x783, 0x7, 0x2b, 0x2, 0x2, 0x783, 0x785, 
       0x5, 0xac, 0x57, 0x2, 0x784, 0x768, 0x3, 0x2, 0x2, 0x2, 0x784, 0x76c, 
       0x3, 0x2, 0x2, 0x2, 0x784, 0x76f, 0x3, 0x2, 0x2, 0x2, 0x784, 0x772, 
       0x3, 0x2, 0x2, 0x2, 0x784, 0x776, 0x3, 0x2, 0x2, 0x2, 0x784, 0x77a, 
       0x3, 0x2, 0x2, 0x2, 0x784, 0x77b, 0x3, 0x2, 0x2, 0x2, 0x784, 0x77c, 
       0x3, 0x2, 0x2, 0x2, 0x784, 0x77f, 0x3, 0x2, 0x2, 0x2, 0x785, 0xd9, 
       0x3, 0x2, 0x2, 0x2, 0x786, 0x787, 0x7, 0x79, 0x2, 0x2, 0x787, 0x788, 
       0x7, 0x121, 0x2, 0x2, 0x788, 0x789, 0x5, 0xd0, 0x69, 0x2, 0x789, 
       0xdb, 0x3, 0x2, 0x2, 0x2, 0x78a, 0x78b, 0x7, 0xb7, 0x2, 0x2, 0x78b, 
       0x78c, 0x7, 0x121, 0x2, 0x2, 0x78c, 0x78d, 0x5, 0xd0, 0x69, 0x2, 
       0x78d, 0xdd, 0x3, 0x2, 0x2, 0x2, 0x78e, 0x78f, 0x7, 0x7e, 0x2, 0x2, 
       0x78f, 0x790, 0x7, 0x161, 0x2, 0x2, 0x790, 0x791, 0x7, 0x140, 0x2, 
       0x2, 0x791, 0x792, 0x5, 0xe0, 0x71, 0x2, 0x792, 0x793, 0x7, 0x5d, 
       0x2, 0x2, 0x793, 0x794, 0x5, 0x16, 0xc, 0x2, 0x794, 0xdf, 0x3, 0x2, 
       0x2, 0x2, 0x795, 0x796, 0x5, 0x41a, 0x20e, 0x2, 0x796, 0xe1, 0x3, 
       0x2, 0x2, 0x2, 0x797, 0x798, 0x7, 0x7e, 0x2, 0x2, 0x798, 0x799, 0x7, 
       0x167, 0x2, 0x2, 0x799, 0x79a, 0x5, 0x5e, 0x30, 0x2, 0x79a, 0x79b, 
       0x5, 0xe4, 0x73, 0x2, 0x79b, 0xe3, 0x3, 0x2, 0x2, 0x2, 0x79c, 0x79e, 
       0x7, 0x5d, 0x2, 0x2, 0x79d, 0x79c, 0x3, 0x2, 0x2, 0x2, 0x79d, 0x79e, 
       0x3, 0x2, 0x2, 0x2, 0x79e, 0x7a2, 0x3, 0x2, 0x2, 0x2, 0x79f, 0x7a1, 
       0x5, 0xe8, 0x75, 0x2, 0x7a0, 0x79f, 0x3, 0x2, 0x2, 0x2, 0x7a1, 0x7a4, 
       0x3, 0x2, 0x2, 0x2, 0x7a2, 0x7a0, 0x3, 0x2, 0x2, 0x2, 0x7a2, 0x7a3, 
       0x3, 0x2, 0x2, 0x2, 0x7a3, 0x7b0, 0x3, 0x2, 0x2, 0x2, 0x7a4, 0x7a2, 
       0x3, 0x2, 0x2, 0x2, 0x7a5, 0x7b0, 0x5, 0x2a, 0x16, 0x2, 0x7a6, 0x7a7, 
       0x7, 0x30, 0x2, 0x2, 0x7a7, 0x7a8, 0x7, 0xad, 0x2, 0x2, 0x7a8, 0x7aa, 
       0x5, 0x20, 0x11, 0x2, 0x7a9, 0x7a6, 0x3, 0x2, 0x2, 0x2, 0x7a9, 0x7aa, 
       0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7ad, 0x3, 0x2, 0x2, 0x2, 0x7ab, 0x7ae, 
       0x5, 0x30, 0x19, 0x2, 0x7ac, 0x7ae, 0x5, 0x34, 0x1b, 0x2, 0x7ad, 
       0x7ab, 0x3, 0x2, 0x2, 0x2, 0x7ad, 0x7ac, 0x3, 0x2, 0x2, 0x2, 0x7ae, 
       0x7b0, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x79d, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7a5, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7a9, 0x3, 0x2, 0x2, 0x2, 0x7b0, 
       0xe5, 0x3, 0x2, 0x2, 0x2, 0x7b1, 0x7cd, 0x9, 0x11, 0x2, 0x2, 0x7b2, 
       0x7cd, 0x9, 0x12, 0x2, 0x2, 0x7b3, 0x7cd, 0x9, 0x13, 0x2, 0x2, 0x7b4, 
       0x7cd, 0x9, 0x14, 0x2, 0x2, 0x7b5, 0x7cd, 0x9, 0x15, 0x2, 0x2, 0x7b6, 
       0x7cd, 0x9, 0x16, 0x2, 0x2, 0x7b7, 0x7cd, 0x9, 0x17, 0x2, 0x2, 0x7b8, 
       0x7cd, 0x9, 0x18, 0x2, 0x2, 0x7b9, 0x7cd, 0x9, 0x19, 0x2, 0x2, 0x7ba, 
       0x7cd, 0x9, 0x1a, 0x2, 0x2, 0x7bb, 0x7cd, 0x5, 0x24, 0x13, 0x2, 0x7bc, 
       0x7bd, 0x7, 0x1a7, 0x2, 0x2, 0x7bd, 0x7be, 0x9, 0x1b, 0x2, 0x2, 0x7be, 
       0x7cd, 0x7, 0x286, 0x2, 0x2, 0x7bf, 0x7c0, 0x7, 0x161, 0x2, 0x2, 
       0x7c0, 0x7c1, 0x7, 0x140, 0x2, 0x2, 0x7c1, 0x7cd, 0x7, 0x286, 0x2, 
       0x2, 0x7c2, 0x7c3, 0x7, 0x57, 0x2, 0x2, 0x7c3, 0x7c4, 0x7, 0x2b, 
       0x2, 0x2, 0x7c4, 0x7cd, 0x7, 0x286, 0x2, 0x2, 0x7c5, 0x7c6, 0x7, 
       0x238, 0x2, 0x2, 0x7c6, 0x7c7, 0x7, 0x239, 0x2, 0x2, 0x7c7, 0x7cd, 
       0x7, 0x286, 0x2, 0x2, 0x7c8, 0x7c9, 0x7, 0x121, 0x2, 0x2, 0x7c9, 
       0x7ca, 0x7, 0x2b, 0x2, 0x2, 0x7ca, 0x7cd, 0x5, 0xec, 0x77, 0x2, 0x7cb, 
       0x7cd, 0x7, 0x23a, 0x2, 0x2, 0x7cc, 0x7b1, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7b2, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7b3, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7b4, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7b5, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7b6, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7b7, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7b8, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7b9, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7ba, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7bb, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7bc, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7bf, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7c2, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7c5, 0x3, 0x2, 0x2, 0x2, 0x7cc, 
       0x7c8, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7cb, 0x3, 0x2, 0x2, 0x2, 0x7cd, 
       0xe7, 0x3, 0x2, 0x2, 0x2, 0x7ce, 0x7d6, 0x5, 0xe6, 0x74, 0x2, 0x7cf, 
       0x7d1, 0x9, 0x1c, 0x2, 0x2, 0x7d0, 0x7cf, 0x3, 0x2, 0x2, 0x2, 0x7d0, 
       0x7d1, 0x3, 0x2, 0x2, 0x2, 0x7d1, 0x7d2, 0x3, 0x2, 0x2, 0x2, 0x7d2, 
       0x7d6, 0x5, 0xea, 0x76, 0x2, 0x7d3, 0x7d4, 0x7, 0x77, 0x2, 0x2, 0x7d4, 
       0x7d6, 0x9, 0x1d, 0x2, 0x2, 0x7d5, 0x7ce, 0x3, 0x2, 0x2, 0x2, 0x7d5, 
       0x7d0, 0x3, 0x2, 0x2, 0x2, 0x7d5, 0x7d3, 0x3, 0x2, 0x2, 0x2, 0x7d6, 
       0xe9, 0x3, 0x2, 0x2, 0x2, 0x7d7, 0x7d8, 0x7, 0x13b, 0x2, 0x2, 0x7d8, 
       0x7e4, 0x9, 0x1e, 0x2, 0x2, 0x7d9, 0x7da, 0x7, 0xe7, 0x2, 0x2, 0x7da, 
       0x7e1, 0x7, 0x8c, 0x2, 0x2, 0x7db, 0x7de, 0x7, 0x286, 0x2, 0x2, 0x7dc, 
       0x7dd, 0x7, 0x15d, 0x2, 0x2, 0x7dd, 0x7df, 0x7, 0x286, 0x2, 0x2, 
       0x7de, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7df, 0x3, 0x2, 0x2, 0x2, 
       0x7df, 0x7e2, 0x3, 0x2, 0x2, 0x2, 0x7e0, 0x7e2, 0x7, 0xbe, 0x2, 0x2, 
       0x7e1, 0x7db, 0x3, 0x2, 0x2, 0x2, 0x7e1, 0x7e0, 0x3, 0x2, 0x2, 0x2, 
       0x7e2, 0x7e4, 0x3, 0x2, 0x2, 0x2, 0x7e3, 0x7d7, 0x3, 0x2, 0x2, 0x2, 
       0x7e3, 0x7d9, 0x3, 0x2, 0x2, 0x2, 0x7e4, 0xeb, 0x3, 0x2, 0x2, 0x2, 
       0x7e5, 0x7e6, 0x5, 0x41a, 0x20e, 0x2, 0x7e6, 0xed, 0x3, 0x2, 0x2, 
       0x2, 0x7e7, 0x7e9, 0x7, 0x7e, 0x2, 0x2, 0x7e8, 0x7ea, 0x5, 0xf0, 
       0x79, 0x2, 0x7e9, 0x7e8, 0x3, 0x2, 0x2, 0x2, 0x7e9, 0x7ea, 0x3, 0x2, 
       0x2, 0x2, 0x7ea, 0x7eb, 0x3, 0x2, 0x2, 0x2, 0x7eb, 0x7ed, 0x7, 0x23b, 
       0x2, 0x2, 0x7ec, 0x7ee, 0x5, 0x7a, 0x3e, 0x2, 0x7ed, 0x7ec, 0x3, 
       0x2, 0x2, 0x2, 0x7ed, 0x7ee, 0x3, 0x2, 0x2, 0x2, 0x7ee, 0x7ef, 0x3, 
       0x2, 0x2, 0x2, 0x7ef, 0x7f0, 0x5, 0xf2, 0x7a, 0x2, 0x7f0, 0x7f1, 
       0x7, 0x3f, 0x2, 0x2, 0x7f1, 0x7f2, 0x5, 0x7c, 0x3f, 0x2, 0x7f2, 0x7f3, 
       0x5, 0xf4, 0x7b, 0x2, 0x7f3, 0xef, 0x3, 0x2, 0x2, 0x2, 0x7f4, 0x7f5, 
       0x7, 0x1db, 0x2, 0x2, 0x7f5, 0x7f6, 0x7, 0x104, 0x2, 0x2, 0x7f6, 
       0x7f7, 0x7, 0x170, 0x2, 0x2, 0x7f7, 0xf1, 0x3, 0x2, 0x2, 0x2, 0x7f8, 
       0x7f9, 0x5, 0x41a, 0x20e, 0x2, 0x7f9, 0xf3, 0x3, 0x2, 0x2, 0x2, 0x7fa, 
       0x804, 0x5, 0x2a, 0x16, 0x2, 0x7fb, 0x7fc, 0x7, 0x52, 0x2, 0x2, 0x7fc, 
       0x7ff, 0x5, 0x5a, 0x2e, 0x2, 0x7fd, 0x7ff, 0x5, 0xf6, 0x7c, 0x2, 
       0x7fe, 0x7fb, 0x3, 0x2, 0x2, 0x2, 0x7fe, 0x7fd, 0x3, 0x2, 0x2, 0x2, 
       0x7ff, 0x802, 0x3, 0x2, 0x2, 0x2, 0x800, 0x7fe, 0x3, 0x2, 0x2, 0x2, 
       0x800, 0x801, 0x3, 0x2, 0x2, 0x2, 0x801, 0x804, 0x3, 0x2, 0x2, 0x2, 
       0x802, 0x800, 0x3, 0x2, 0x2, 0x2, 0x803, 0x7fa, 0x3, 0x2, 0x2, 0x2, 
       0x803, 0x800, 0x3, 0x2, 0x2, 0x2, 0x804, 0xf5, 0x3, 0x2, 0x2, 0x2, 
       0x805, 0x806, 0x7, 0x58, 0x2, 0x2, 0x806, 0x80d, 0x5, 0x3a6, 0x1d4, 
       0x2, 0x807, 0x808, 0x7, 0x58, 0x2, 0x2, 0x808, 0x809, 0x7, 0x269, 
       0x2, 0x2, 0x809, 0x80a, 0x5, 0x3a6, 0x1d4, 0x2, 0x80a, 0x80b, 0x7, 
       0x26a, 0x2, 0x2, 0x80b, 0x80d, 0x3, 0x2, 0x2, 0x2, 0x80c, 0x805, 
       0x3, 0x2, 0x2, 0x2, 0x80c, 0x807, 0x3, 0x2, 0x2, 0x2, 0x80d, 0xf7, 
       0x3, 0x2, 0x2, 0x2, 0x80e, 0x80f, 0x7, 0x7e, 0x2, 0x2, 0x80f, 0x810, 
       0x7, 0x16c, 0x2, 0x2, 0x810, 0x811, 0x5, 0x4e, 0x28, 0x2, 0x811, 
       0x812, 0x5, 0x28, 0x15, 0x2, 0x812, 0xf9, 0x3, 0x2, 0x2, 0x2, 0x813, 
       0x814, 0x7, 0x7e, 0x2, 0x2, 0x814, 0x816, 0x7, 0x172, 0x2, 0x2, 0x815, 
       0x817, 0x5, 0x7a, 0x3e, 0x2, 0x816, 0x815, 0x3, 0x2, 0x2, 0x2, 0x816, 
       0x817, 0x3, 0x2, 0x2, 0x2, 0x817, 0x818, 0x3, 0x2, 0x2, 0x2, 0x818, 
       0x81a, 0x5, 0xfc, 0x7f, 0x2, 0x819, 0x81b, 0x5, 0xfe, 0x80, 0x2, 
       0x81a, 0x819, 0x3, 0x2, 0x2, 0x2, 0x81a, 0x81b, 0x3, 0x2, 0x2, 0x2, 
       0x81b, 0xfb, 0x3, 0x2, 0x2, 0x2, 0x81c, 0x81d, 0x5, 0x41a, 0x20e, 
       0x2, 0x81d, 0xfd, 0x3, 0x2, 0x2, 0x2, 0x81e, 0x826, 0x5, 0x2c, 0x17, 
       0x2, 0x81f, 0x820, 0x7, 0x134, 0x2, 0x2, 0x820, 0x823, 0x7, 0x8c, 
       0x2, 0x2, 0x821, 0x824, 0x5, 0x416, 0x20c, 0x2, 0x822, 0x824, 0x7, 
       0x1d0, 0x2, 0x2, 0x823, 0x821, 0x3, 0x2, 0x2, 0x2, 0x823, 0x822, 
       0x3, 0x2, 0x2, 0x2, 0x824, 0x826, 0x3, 0x2, 0x2, 0x2, 0x825, 0x81e, 
       0x3, 0x2, 0x2, 0x2, 0x825, 0x81f, 0x3, 0x2, 0x2, 0x2, 0x826, 0xff, 
       0x3, 0x2, 0x2, 0x2, 0x827, 0x828, 0x7, 0x7e, 0x2, 0x2, 0x828, 0x829, 
       0x7, 0x174, 0x2, 0x2, 0x829, 0x82b, 0x5, 0x102, 0x82, 0x2, 0x82a, 
       0x82c, 0x5, 0x104, 0x83, 0x2, 0x82b, 0x82a, 0x3, 0x2, 0x2, 0x2, 0x82b, 
       0x82c, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x101, 0x3, 0x2, 0x2, 0x2, 0x82d, 
       0x82e, 0x5, 0x41a, 0x20e, 0x2, 0x82e, 0x103, 0x3, 0x2, 0x2, 0x2, 
       0x82f, 0x836, 0x5, 0x28, 0x15, 0x2, 0x830, 0x831, 0x7, 0x1aa, 0x2, 
       0x2, 0x831, 0x833, 0x7, 0x286, 0x2, 0x2, 0x832, 0x830, 0x3, 0x2, 
       0x2, 0x2, 0x832, 0x833, 0x3, 0x2, 0x2, 0x2, 0x833, 0x834, 0x3, 0x2, 
       0x2, 0x2, 0x834, 0x836, 0x5, 0x40, 0x21, 0x2, 0x835, 0x82f, 0x3, 
       0x2, 0x2, 0x2, 0x835, 0x832, 0x3, 0x2, 0x2, 0x2, 0x836, 0x105, 0x3, 
       0x2, 0x2, 0x2, 0x837, 0x838, 0x7, 0x7e, 0x2, 0x2, 0x838, 0x839, 0x7, 
       0x175, 0x2, 0x2, 0x839, 0x83a, 0x7, 0x176, 0x2, 0x2, 0x83a, 0x83b, 
       0x5, 0x108, 0x85, 0x2, 0x83b, 0x107, 0x3, 0x2, 0x2, 0x2, 0x83c, 0x83d, 
       0x7, 0x175, 0x2, 0x2, 0x83d, 0x83e, 0x7, 0x94, 0x2, 0x2, 0x83e, 0x840, 
       0x7, 0xb, 0x2, 0x2, 0x83f, 0x83c, 0x3, 0x2, 0x2, 0x2, 0x83f, 0x840, 
       0x3, 0x2, 0x2, 0x2, 0x840, 0x841, 0x3, 0x2, 0x2, 0x2, 0x841, 0x842, 
       0x7, 0x192, 0x2, 0x2, 0x842, 0x845, 0x5, 0x10a, 0x86, 0x2, 0x843, 
       0x845, 0x5, 0x10e, 0x88, 0x2, 0x844, 0x83f, 0x3, 0x2, 0x2, 0x2, 0x844, 
       0x843, 0x3, 0x2, 0x2, 0x2, 0x845, 0x109, 0x3, 0x2, 0x2, 0x2, 0x846, 
       0x84b, 0x5, 0x10c, 0x87, 0x2, 0x847, 0x848, 0x7, 0x26f, 0x2, 0x2, 
       0x848, 0x84a, 0x5, 0x10c, 0x87, 0x2, 0x849, 0x847, 0x3, 0x2, 0x2, 
       0x2, 0x84a, 0x84d, 0x3, 0x2, 0x2, 0x2, 0x84b, 0x849, 0x3, 0x2, 0x2, 
       0x2, 0x84b, 0x84c, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x10b, 0x3, 0x2, 0x2, 
       0x2, 0x84d, 0x84b, 0x3, 0x2, 0x2, 0x2, 0x84e, 0x84f, 0x7, 0xfb, 0x2, 
       0x2, 0x84f, 0x850, 0x7, 0x104, 0x2, 0x2, 0x850, 0x851, 0x7, 0x150, 
       0x2, 0x2, 0x851, 0x855, 0x9, 0x1f, 0x2, 0x2, 0x852, 0x853, 0x7, 0x150, 
       0x2, 0x2, 0x853, 0x855, 0x9, 0x20, 0x2, 0x2, 0x854, 0x84e, 0x3, 0x2, 
       0x2, 0x2, 0x854, 0x852, 0x3, 0x2, 0x2, 0x2, 0x855, 0x10d, 0x3, 0x2, 
       0x2, 0x2, 0x856, 0x85b, 0x5, 0xa2, 0x52, 0x2, 0x857, 0x858, 0x9, 
       0x4, 0x2, 0x2, 0x858, 0x85c, 0x5, 0x110, 0x89, 0x2, 0x859, 0x85a, 
       0x7, 0x28, 0x2, 0x2, 0x85a, 0x85c, 0x7, 0xaa, 0x2, 0x2, 0x85b, 0x857, 
       0x3, 0x2, 0x2, 0x2, 0x85b, 0x859, 0x3, 0x2, 0x2, 0x2, 0x85c, 0x87f, 
       0x3, 0x2, 0x2, 0x2, 0x85d, 0x85f, 0x7, 0x63, 0x2, 0x2, 0x85e, 0x860, 
       0x9, 0x4, 0x2, 0x2, 0x85f, 0x85e, 0x3, 0x2, 0x2, 0x2, 0x85f, 0x860, 
       0x3, 0x2, 0x2, 0x2, 0x860, 0x863, 0x3, 0x2, 0x2, 0x2, 0x861, 0x864, 
       0x5, 0x4e, 0x28, 0x2, 0x862, 0x864, 0x7, 0x1c, 0x2, 0x2, 0x863, 0x861, 
       0x3, 0x2, 0x2, 0x2, 0x863, 0x862, 0x3, 0x2, 0x2, 0x2, 0x864, 0x87f, 
       0x3, 0x2, 0x2, 0x2, 0x865, 0x866, 0x7, 0x1e1, 0x2, 0x2, 0x866, 0x867, 
       0x7, 0x1b7, 0x2, 0x2, 0x867, 0x87f, 0x7, 0x286, 0x2, 0x2, 0x868, 
       0x869, 0x7, 0x16c, 0x2, 0x2, 0x869, 0x87f, 0x5, 0x4e, 0x28, 0x2, 
       0x86a, 0x86b, 0x7, 0x11c, 0x2, 0x2, 0x86b, 0x87f, 0x5, 0x112, 0x8a, 
       0x2, 0x86c, 0x86d, 0x7, 0x167, 0x2, 0x2, 0x86d, 0x86e, 0x5, 0x5e, 
       0x30, 0x2, 0x86e, 0x86f, 0x7, 0x13b, 0x2, 0x2, 0x86f, 0x870, 0x7, 
       0x286, 0x2, 0x2, 0x870, 0x87f, 0x3, 0x2, 0x2, 0x2, 0x871, 0x872, 
       0x7, 0x175, 0x2, 0x2, 0x872, 0x878, 0x7, 0x5e, 0x2, 0x2, 0x873, 0x874, 
       0x5, 0x5e, 0x30, 0x2, 0x874, 0x875, 0x7, 0x13b, 0x2, 0x2, 0x875, 
       0x876, 0x7, 0x286, 0x2, 0x2, 0x876, 0x879, 0x3, 0x2, 0x2, 0x2, 0x877, 
       0x879, 0x7, 0x1c, 0x2, 0x2, 0x878, 0x873, 0x3, 0x2, 0x2, 0x2, 0x878, 
       0x877, 0x3, 0x2, 0x2, 0x2, 0x879, 0x87f, 0x3, 0x2, 0x2, 0x2, 0x87a, 
       0x87b, 0x7, 0x1b4, 0x2, 0x2, 0x87b, 0x87c, 0x7, 0x133, 0x2, 0x2, 
       0x87c, 0x87f, 0x9, 0x21, 0x2, 0x2, 0x87d, 0x87f, 0x3, 0x2, 0x2, 0x2, 
       0x87e, 0x856, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x85d, 0x3, 0x2, 0x2, 0x2, 
       0x87e, 0x865, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x868, 0x3, 0x2, 0x2, 0x2, 
       0x87e, 0x86a, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x86c, 0x3, 0x2, 0x2, 0x2, 
       0x87e, 0x871, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x87a, 0x3, 0x2, 0x2, 0x2, 
       0x87e, 0x87d, 0x3, 0x2, 0x2, 0x2, 0x87f, 0x10f, 0x3, 0x2, 0x2, 0x2, 
       0x880, 0x883, 0x5, 0x3a6, 0x1d4, 0x2, 0x881, 0x883, 0x7, 0x1c, 0x2, 
       0x2, 0x882, 0x880, 0x3, 0x2, 0x2, 0x2, 0x882, 0x881, 0x3, 0x2, 0x2, 
       0x2, 0x883, 0x111, 0x3, 0x2, 0x2, 0x2, 0x884, 0x885, 0x5, 0x41a, 
       0x20e, 0x2, 0x885, 0x113, 0x3, 0x2, 0x2, 0x2, 0x886, 0x887, 0x7, 
       0x7e, 0x2, 0x2, 0x887, 0x888, 0x7, 0x18a, 0x2, 0x2, 0x888, 0x889, 
       0x7, 0x23c, 0x2, 0x2, 0x889, 0x88a, 0x7, 0x175, 0x2, 0x2, 0x88a, 
       0x88c, 0x7, 0x286, 0x2, 0x2, 0x88b, 0x88d, 0x7, 0xea, 0x2, 0x2, 0x88c, 
       0x88b, 0x3, 0x2, 0x2, 0x2, 0x88c, 0x88d, 0x3, 0x2, 0x2, 0x2, 0x88d, 
       0x115, 0x3, 0x2, 0x2, 0x2, 0x88e, 0x88f, 0x7, 0x7e, 0x2, 0x2, 0x88f, 
       0x891, 0x7, 0x50, 0x2, 0x2, 0x890, 0x892, 0x5, 0x7a, 0x3e, 0x2, 0x891, 
       0x890, 0x3, 0x2, 0x2, 0x2, 0x891, 0x892, 0x3, 0x2, 0x2, 0x2, 0x892, 
       0x893, 0x3, 0x2, 0x2, 0x2, 0x893, 0x894, 0x5, 0x118, 0x8d, 0x2, 0x894, 
       0x895, 0x5, 0x11a, 0x8e, 0x2, 0x895, 0x117, 0x3, 0x2, 0x2, 0x2, 0x896, 
       0x898, 0x5, 0x7c, 0x3f, 0x2, 0x897, 0x899, 0x7, 0x26c, 0x2, 0x2, 
       0x898, 0x897, 0x3, 0x2, 0x2, 0x2, 0x898, 0x899, 0x3, 0x2, 0x2, 0x2, 
       0x899, 0x8a2, 0x3, 0x2, 0x2, 0x2, 0x89a, 0x89b, 0x7, 0x3e, 0x2, 0x2, 
       0x89b, 0x8a2, 0x5, 0x7c, 0x3f, 0x2, 0x89c, 0x89d, 0x7, 0x3e, 0x2, 
       0x2, 0x89d, 0x89e, 0x7, 0x269, 0x2, 0x2, 0x89e, 0x89f, 0x5, 0x7c, 
       0x3f, 0x2, 0x89f, 0x8a0, 0x7, 0x26a, 0x2, 0x2, 0x8a0, 0x8a2, 0x3, 
       0x2, 0x2, 0x2, 0x8a1, 0x896, 0x3, 0x2, 0x2, 0x2, 0x8a1, 0x89a, 0x3, 
       0x2, 0x2, 0x2, 0x8a1, 0x89c, 0x3, 0x2, 0x2, 0x2, 0x8a2, 0x119, 0x3, 
       0x2, 0x2, 0x2, 0x8a3, 0x8a6, 0x5, 0x11c, 0x8f, 0x2, 0x8a4, 0x8a6, 
       0x5, 0x142, 0xa2, 0x2, 0x8a5, 0x8a3, 0x3, 0x2, 0x2, 0x2, 0x8a5, 0x8a4, 
       0x3, 0x2, 0x2, 0x2, 0x8a6, 0x11b, 0x3, 0x2, 0x2, 0x2, 0x8a7, 0x8d1, 
       0x5, 0x11e, 0x90, 0x2, 0x8a8, 0x8d1, 0x5, 0x2a, 0x16, 0x2, 0x8a9, 
       0x8ab, 0x7, 0x15b, 0x2, 0x2, 0x8aa, 0x8ac, 0x7, 0x13, 0x2, 0x2, 0x8ab, 
       0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8ab, 0x8ac, 0x3, 0x2, 0x2, 0x2, 0x8ac, 
       0x8ad, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ae, 0x5, 0x86, 0x44, 0x2, 0x8ae, 
       0x8af, 0x7, 0x52, 0x2, 0x2, 0x8af, 0x8b0, 0x5, 0x2e, 0x18, 0x2, 0x8b0, 
       0x8d1, 0x3, 0x2, 0x2, 0x2, 0x8b1, 0x8b2, 0x7, 0x15b, 0x2, 0x2, 0x8b2, 
       0x8b3, 0x7, 0x14, 0x2, 0x2, 0x8b3, 0x8b4, 0x5, 0x90, 0x49, 0x2, 0x8b4, 
       0x8b5, 0x7, 0x52, 0x2, 0x2, 0x8b5, 0x8b6, 0x5, 0x2e, 0x18, 0x2, 0x8b6, 
       0x8d1, 0x3, 0x2, 0x2, 0x2, 0x8b7, 0x8d1, 0x5, 0xa8, 0x55, 0x2, 0x8b8, 
       0x8b9, 0x7, 0x79, 0x2, 0x2, 0x8b9, 0x8ba, 0x7, 0x269, 0x2, 0x2, 0x8ba, 
       0x8bf, 0x5, 0x124, 0x93, 0x2, 0x8bb, 0x8bc, 0x7, 0x26f, 0x2, 0x2, 
       0x8bc, 0x8be, 0x5, 0x124, 0x93, 0x2, 0x8bd, 0x8bb, 0x3, 0x2, 0x2, 
       0x2, 0x8be, 0x8c1, 0x3, 0x2, 0x2, 0x2, 0x8bf, 0x8bd, 0x3, 0x2, 0x2, 
       0x2, 0x8bf, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8c0, 0x8c2, 0x3, 0x2, 0x2, 
       0x2, 0x8c1, 0x8bf, 0x3, 0x2, 0x2, 0x2, 0x8c2, 0x8c3, 0x7, 0x26a, 
       0x2, 0x2, 0x8c3, 0x8d1, 0x3, 0x2, 0x2, 0x2, 0x8c4, 0x8c5, 0x7, 0x39, 
       0x2, 0x2, 0x8c5, 0x8c6, 0x7, 0x269, 0x2, 0x2, 0x8c6, 0x8cb, 0x5, 
       0x126, 0x94, 0x2, 0x8c7, 0x8c8, 0x7, 0x26f, 0x2, 0x2, 0x8c8, 0x8ca, 
       0x5, 0x126, 0x94, 0x2, 0x8c9, 0x8c7, 0x3, 0x2, 0x2, 0x2, 0x8ca, 0x8cd, 
       0x3, 0x2, 0x2, 0x2, 0x8cb, 0x8c9, 0x3, 0x2, 0x2, 0x2, 0x8cb, 0x8cc, 
       0x3, 0x2, 0x2, 0x2, 0x8cc, 0x8ce, 0x3, 0x2, 0x2, 0x2, 0x8cd, 0x8cb, 
       0x3, 0x2, 0x2, 0x2, 0x8ce, 0x8cf, 0x7, 0x26a, 0x2, 0x2, 0x8cf, 0x8d1, 
       0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8a7, 0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8a8, 
       0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8a9, 0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8b1, 
       0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8b7, 0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8b8, 
       0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8c4, 0x3, 0x2, 0x2, 0x2, 0x8d1, 0x11d, 
       0x3, 0x2, 0x2, 0x2, 0x8d2, 0x8d7, 0x5, 0x120, 0x91, 0x2, 0x8d3, 0x8d4, 
       0x7, 0x26f, 0x2, 0x2, 0x8d4, 0x8d6, 0x5, 0x120, 0x91, 0x2, 0x8d5, 
       0x8d3, 0x3, 0x2, 0x2, 0x2, 0x8d6, 0x8d9, 0x3, 0x2, 0x2, 0x2, 0x8d7, 
       0x8d5, 0x3, 0x2, 0x2, 0x2, 0x8d7, 0x8d8, 0x3, 0x2, 0x2, 0x2, 0x8d8, 
       0x11f, 0x3, 0x2, 0x2, 0x2, 0x8d9, 0x8d7, 0x3, 0x2, 0x2, 0x2, 0x8da, 
       0x918, 0x5, 0x122, 0x92, 0x2, 0x8db, 0x8dc, 0x7, 0x79, 0x2, 0x2, 
       0x8dc, 0x8df, 0x5, 0x134, 0x9b, 0x2, 0x8dd, 0x8de, 0x7, 0x3b, 0x2, 
       0x2, 0x8de, 0x8e0, 0x7, 0x1a7, 0x2, 0x2, 0x8df, 0x8dd, 0x3, 0x2, 
       0x2, 0x2, 0x8df, 0x8e0, 0x3, 0x2, 0x2, 0x2, 0x8e0, 0x918, 0x3, 0x2, 
       0x2, 0x2, 0x8e1, 0x8e2, 0x7, 0x79, 0x2, 0x2, 0x8e2, 0x918, 0x5, 0x13e, 
       0xa0, 0x2, 0x8e3, 0x8e4, 0x7, 0x1a4, 0x2, 0x2, 0x8e4, 0x8e5, 0x7, 
       0x14, 0x2, 0x2, 0x8e5, 0x918, 0x5, 0x90, 0x49, 0x2, 0x8e6, 0x8e7, 
       0x7, 0xc5, 0x2, 0x2, 0x8e7, 0x8e9, 0x7, 0x14, 0x2, 0x2, 0x8e8, 0x8ea, 
       0x5, 0x7a, 0x3e, 0x2, 0x8e9, 0x8e8, 0x3, 0x2, 0x2, 0x2, 0x8e9, 0x8ea, 
       0x3, 0x2, 0x2, 0x2, 0x8ea, 0x8eb, 0x3, 0x2, 0x2, 0x2, 0x8eb, 0x8ed, 
       0x5, 0x90, 0x49, 0x2, 0x8ec, 0x8ee, 0x5, 0x6e, 0x38, 0x2, 0x8ed, 
       0x8ec, 0x3, 0x2, 0x2, 0x2, 0x8ed, 0x8ee, 0x3, 0x2, 0x2, 0x2, 0x8ee, 
       0x918, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8f0, 0x7, 0x9a, 0x2, 0x2, 0x8f0, 
       0x8f1, 0x7, 0x3f, 0x2, 0x2, 0x8f1, 0x918, 0x5, 0xb6, 0x5c, 0x2, 0x8f2, 
       0x8f3, 0x7, 0x176, 0x2, 0x2, 0x8f3, 0x8f4, 0x7, 0x1af, 0x2, 0x2, 
       0x8f4, 0x918, 0x7, 0x9a, 0x2, 0x2, 0x8f5, 0x918, 0x5, 0xbe, 0x60, 
       0x2, 0x8f6, 0x918, 0x5, 0xc0, 0x61, 0x2, 0x8f7, 0x918, 0x5, 0x2c, 
       0x17, 0x2, 0x8f8, 0x918, 0x5, 0xba, 0x5e, 0x2, 0x8f9, 0x8fa, 0x7, 
       0x176, 0x2, 0x2, 0x8fa, 0x918, 0x9, 0x22, 0x2, 0x2, 0x8fb, 0x900, 
       0x7, 0x52, 0x2, 0x2, 0x8fc, 0x8fd, 0x7, 0x2b, 0x2, 0x2, 0x8fd, 0x901, 
       0x5, 0xac, 0x57, 0x2, 0x8fe, 0x8ff, 0x7, 0x121, 0x2, 0x2, 0x8ff, 
       0x901, 0x5, 0xd0, 0x69, 0x2, 0x900, 0x8fc, 0x3, 0x2, 0x2, 0x2, 0x900, 
       0x8fe, 0x3, 0x2, 0x2, 0x2, 0x901, 0x918, 0x3, 0x2, 0x2, 0x2, 0x902, 
       0x918, 0x5, 0xda, 0x6e, 0x2, 0x903, 0x918, 0x5, 0xdc, 0x6f, 0x2, 
       0x904, 0x905, 0x9, 0x3, 0x2, 0x2, 0x905, 0x909, 0x7, 0x193, 0x2, 
       0x2, 0x906, 0x90a, 0x5, 0x140, 0xa1, 0x2, 0x907, 0x90a, 0x7, 0x3, 
       0x2, 0x2, 0x908, 0x90a, 0x7, 0x57, 0x2, 0x2, 0x909, 0x906, 0x3, 0x2, 
       0x2, 0x2, 0x909, 0x907, 0x3, 0x2, 0x2, 0x2, 0x909, 0x908, 0x3, 0x2, 
       0x2, 0x2, 0x90a, 0x918, 0x3, 0x2, 0x2, 0x2, 0x90b, 0x90c, 0x7, 0xc7, 
       0x2, 0x2, 0x90c, 0x90d, 0x9, 0x23, 0x2, 0x2, 0x90d, 0x90e, 0x7, 0x193, 
       0x2, 0x2, 0x90e, 0x918, 0x5, 0x140, 0xa1, 0x2, 0x90f, 0x915, 0x7, 
       0xbe, 0x2, 0x2, 0x910, 0x915, 0x7, 0xc7, 0x2, 0x2, 0x911, 0x915, 
       0x7, 0xdd, 0x2, 0x2, 0x912, 0x913, 0x7, 0x129, 0x2, 0x2, 0x913, 0x915, 
       0x7, 0xdd, 0x2, 0x2, 0x914, 0x90f, 0x3, 0x2, 0x2, 0x2, 0x914, 0x910, 
       0x3, 0x2, 0x2, 0x2, 0x914, 0x911, 0x3, 0x2, 0x2, 0x2, 0x914, 0x912, 
       0x3, 0x2, 0x2, 0x2, 0x915, 0x916, 0x3, 0x2, 0x2, 0x2, 0x916, 0x918, 
       0x5, 0xf0, 0x79, 0x2, 0x917, 0x8da, 0x3, 0x2, 0x2, 0x2, 0x917, 0x8db, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x8e1, 0x3, 0x2, 0x2, 0x2, 0x917, 0x8e3, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x8e6, 0x3, 0x2, 0x2, 0x2, 0x917, 0x8ef, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x8f2, 0x3, 0x2, 0x2, 0x2, 0x917, 0x8f5, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x8f6, 0x3, 0x2, 0x2, 0x2, 0x917, 0x8f7, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x8f8, 0x3, 0x2, 0x2, 0x2, 0x917, 0x8f9, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x8fb, 0x3, 0x2, 0x2, 0x2, 0x917, 0x902, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x903, 0x3, 0x2, 0x2, 0x2, 0x917, 0x904, 
       0x3, 0x2, 0x2, 0x2, 0x917, 0x90b, 0x3, 0x2, 0x2, 0x2, 0x917, 0x914, 
       0x3, 0x2, 0x2, 0x2, 0x918, 0x121, 0x3, 0x2, 0x2, 0x2, 0x919, 0x91b, 
       0x7, 0x79, 0x2, 0x2, 0x91a, 0x91c, 0x7, 0x13, 0x2, 0x2, 0x91b, 0x91a, 
       0x3, 0x2, 0x2, 0x2, 0x91b, 0x91c, 0x3, 0x2, 0x2, 0x2, 0x91c, 0x91d, 
       0x3, 0x2, 0x2, 0x2, 0x91d, 0x933, 0x5, 0x124, 0x93, 0x2, 0x91e, 0x91f, 
       0x7, 0x39, 0x2, 0x2, 0x91f, 0x933, 0x5, 0x126, 0x94, 0x2, 0x920, 
       0x922, 0x7, 0xc5, 0x2, 0x2, 0x921, 0x923, 0x7, 0x13, 0x2, 0x2, 0x922, 
       0x921, 0x3, 0x2, 0x2, 0x2, 0x922, 0x923, 0x3, 0x2, 0x2, 0x2, 0x923, 
       0x925, 0x3, 0x2, 0x2, 0x2, 0x924, 0x926, 0x5, 0x7a, 0x3e, 0x2, 0x925, 
       0x924, 0x3, 0x2, 0x2, 0x2, 0x925, 0x926, 0x3, 0x2, 0x2, 0x2, 0x926, 
       0x927, 0x3, 0x2, 0x2, 0x2, 0x927, 0x929, 0x5, 0x86, 0x44, 0x2, 0x928, 
       0x92a, 0x5, 0x6e, 0x38, 0x2, 0x929, 0x928, 0x3, 0x2, 0x2, 0x2, 0x929, 
       0x92a, 0x3, 0x2, 0x2, 0x2, 0x92a, 0x933, 0x3, 0x2, 0x2, 0x2, 0x92b, 
       0x92d, 0x7, 0x7e, 0x2, 0x2, 0x92c, 0x92e, 0x7, 0x13, 0x2, 0x2, 0x92d, 
       0x92c, 0x3, 0x2, 0x2, 0x2, 0x92d, 0x92e, 0x3, 0x2, 0x2, 0x2, 0x92e, 
       0x92f, 0x3, 0x2, 0x2, 0x2, 0x92f, 0x930, 0x5, 0x86, 0x44, 0x2, 0x930, 
       0x931, 0x5, 0x132, 0x9a, 0x2, 0x931, 0x933, 0x3, 0x2, 0x2, 0x2, 0x932, 
       0x919, 0x3, 0x2, 0x2, 0x2, 0x932, 0x91e, 0x3, 0x2, 0x2, 0x2, 0x932, 
       0x920, 0x3, 0x2, 0x2, 0x2, 0x932, 0x92b, 0x3, 0x2, 0x2, 0x2, 0x933, 
       0x123, 0x3, 0x2, 0x2, 0x2, 0x934, 0x936, 0x5, 0x126, 0x94, 0x2, 0x935, 
       0x937, 0x5, 0x128, 0x95, 0x2, 0x936, 0x935, 0x3, 0x2, 0x2, 0x2, 0x936, 
       0x937, 0x3, 0x2, 0x2, 0x2, 0x937, 0x939, 0x3, 0x2, 0x2, 0x2, 0x938, 
       0x93a, 0x5, 0x12a, 0x96, 0x2, 0x939, 0x938, 0x3, 0x2, 0x2, 0x2, 0x939, 
       0x93a, 0x3, 0x2, 0x2, 0x2, 0x93a, 0x93e, 0x3, 0x2, 0x2, 0x2, 0x93b, 
       0x93d, 0x5, 0x12e, 0x98, 0x2, 0x93c, 0x93b, 0x3, 0x2, 0x2, 0x2, 0x93d, 
       0x940, 0x3, 0x2, 0x2, 0x2, 0x93e, 0x93c, 0x3, 0x2, 0x2, 0x2, 0x93e, 
       0x93f, 0x3, 0x2, 0x2, 0x2, 0x93f, 0x125, 0x3, 0x2, 0x2, 0x2, 0x940, 
       0x93e, 0x3, 0x2, 0x2, 0x2, 0x941, 0x942, 0x5, 0x86, 0x44, 0x2, 0x942, 
       0x943, 0x5, 0x3c2, 0x1e2, 0x2, 0x943, 0x127, 0x3, 0x2, 0x2, 0x2, 
       0x944, 0x945, 0x9, 0x24, 0x2, 0x2, 0x945, 0x129, 0x3, 0x2, 0x2, 0x2, 
       0x946, 0x947, 0x7, 0x12, 0x2, 0x2, 0x947, 0x948, 0x5, 0x12c, 0x97, 
       0x2, 0x948, 0x12b, 0x3, 0x2, 0x2, 0x2, 0x949, 0x94a, 0x5, 0x41a, 
       0x20e, 0x2, 0x94a, 0x12d, 0x3, 0x2, 0x2, 0x2, 0x94b, 0x94c, 0x7, 
       0x14, 0x2, 0x2, 0x94c, 0x94e, 0x5, 0x90, 0x49, 0x2, 0x94d, 0x94b, 
       0x3, 0x2, 0x2, 0x2, 0x94d, 0x94e, 0x3, 0x2, 0x2, 0x2, 0x94e, 0x94f, 
       0x3, 0x2, 0x2, 0x2, 0x94f, 0x951, 0x5, 0x130, 0x99, 0x2, 0x950, 0x952, 
       0x5, 0x13c, 0x9f, 0x2, 0x951, 0x950, 0x3, 0x2, 0x2, 0x2, 0x951, 0x952, 
       0x3, 0x2, 0x2, 0x2, 0x952, 0x12f, 0x3, 0x2, 0x2, 0x2, 0x953, 0x955, 
       0x7, 0x3b, 0x2, 0x2, 0x954, 0x953, 0x3, 0x2, 0x2, 0x2, 0x954, 0x955, 
       0x3, 0x2, 0x2, 0x2, 0x955, 0x956, 0x3, 0x2, 0x2, 0x2, 0x956, 0x962, 
       0x7, 0x3c, 0x2, 0x2, 0x957, 0x958, 0x7, 0x11, 0x2, 0x2, 0x958, 0x959, 
       0x7, 0x269, 0x2, 0x2, 0x959, 0x95a, 0x5, 0x3a6, 0x1d4, 0x2, 0x95a, 
       0x95b, 0x7, 0x26a, 0x2, 0x2, 0x95b, 0x962, 0x3, 0x2, 0x2, 0x2, 0x95c, 
       0x95d, 0x7, 0x1c, 0x2, 0x2, 0x95d, 0x962, 0x5, 0x3a6, 0x1d4, 0x2, 
       0x95e, 0x95f, 0x5, 0x8e, 0x48, 0x2, 0x95f, 0x960, 0x5, 0x13a, 0x9e, 
       0x2, 0x960, 0x962, 0x3, 0x2, 0x2, 0x2, 0x961, 0x954, 0x3, 0x2, 0x2, 
       0x2, 0x961, 0x957, 0x3, 0x2, 0x2, 0x2, 0x961, 0x95c, 0x3, 0x2, 0x2, 
       0x2, 0x961, 0x95e, 0x3, 0x2, 0x2, 0x2, 0x962, 0x131, 0x3, 0x2, 0x2, 
       0x2, 0x963, 0x964, 0x7, 0x176, 0x2, 0x2, 0x964, 0x966, 0x7, 0xaf, 
       0x2, 0x2, 0x965, 0x963, 0x3, 0x2, 0x2, 0x2, 0x965, 0x966, 0x3, 0x2, 
       0x2, 0x2, 0x966, 0x967, 0x3, 0x2, 0x2, 0x2, 0x967, 0x968, 0x7, 0x197, 
       0x2, 0x2, 0x968, 0x96a, 0x5, 0x3c2, 0x1e2, 0x2, 0x969, 0x96b, 0x5, 
       0x12a, 0x96, 0x2, 0x96a, 0x969, 0x3, 0x2, 0x2, 0x2, 0x96a, 0x96b, 
       0x3, 0x2, 0x2, 0x2, 0x96b, 0x96d, 0x3, 0x2, 0x2, 0x2, 0x96c, 0x96e, 
       0x5, 0xf6, 0x7c, 0x2, 0x96d, 0x96c, 0x3, 0x2, 0x2, 0x2, 0x96d, 0x96e, 
       0x3, 0x2, 0x2, 0x2, 0x96e, 0x986, 0x3, 0x2, 0x2, 0x2, 0x96f, 0x970, 
       0x7, 0x176, 0x2, 0x2, 0x970, 0x971, 0x7, 0x1c, 0x2, 0x2, 0x971, 0x975, 
       0x5, 0x3a6, 0x1d4, 0x2, 0x972, 0x973, 0x7, 0xc5, 0x2, 0x2, 0x973, 
       0x975, 0x7, 0x1c, 0x2, 0x2, 0x974, 0x96f, 0x3, 0x2, 0x2, 0x2, 0x974, 
       0x972, 0x3, 0x2, 0x2, 0x2, 0x975, 0x986, 0x3, 0x2, 0x2, 0x2, 0x976, 
       0x977, 0x9, 0x9, 0x2, 0x2, 0x977, 0x978, 0x7, 0x3b, 0x2, 0x2, 0x978, 
       0x986, 0x7, 0x3c, 0x2, 0x2, 0x979, 0x986, 0x5, 0x8a, 0x46, 0x2, 0x97a, 
       0x97b, 0x9, 0x25, 0x2, 0x2, 0x97b, 0x97c, 0x7, 0x180, 0x2, 0x2, 0x97c, 
       0x97d, 0x7, 0x269, 0x2, 0x2, 0x97d, 0x97e, 0x5, 0x138, 0x9d, 0x2, 
       0x97e, 0x97f, 0x7, 0x26a, 0x2, 0x2, 0x97f, 0x986, 0x3, 0x2, 0x2, 
       0x2, 0x980, 0x986, 0x5, 0xbe, 0x60, 0x2, 0x981, 0x986, 0x5, 0xc0, 
       0x61, 0x2, 0x982, 0x983, 0x7, 0x176, 0x2, 0x2, 0x983, 0x984, 0x7, 
       0x183, 0x2, 0x2, 0x984, 0x986, 0x9, 0x26, 0x2, 0x2, 0x985, 0x965, 
       0x3, 0x2, 0x2, 0x2, 0x985, 0x974, 0x3, 0x2, 0x2, 0x2, 0x985, 0x976, 
       0x3, 0x2, 0x2, 0x2, 0x985, 0x979, 0x3, 0x2, 0x2, 0x2, 0x985, 0x97a, 
       0x3, 0x2, 0x2, 0x2, 0x985, 0x980, 0x3, 0x2, 0x2, 0x2, 0x985, 0x981, 
       0x3, 0x2, 0x2, 0x2, 0x985, 0x982, 0x3, 0x2, 0x2, 0x2, 0x986, 0x133, 
       0x3, 0x2, 0x2, 0x2, 0x987, 0x988, 0x7, 0x14, 0x2, 0x2, 0x988, 0x98a, 
       0x5, 0x90, 0x49, 0x2, 0x989, 0x987, 0x3, 0x2, 0x2, 0x2, 0x989, 0x98a, 
       0x3, 0x2, 0x2, 0x2, 0x98a, 0x98b, 0x3, 0x2, 0x2, 0x2, 0x98b, 0x98d, 
       0x5, 0x136, 0x9c, 0x2, 0x98c, 0x98e, 0x5, 0x13c, 0x9f, 0x2, 0x98d, 
       0x98c, 0x3, 0x2, 0x2, 0x2, 0x98d, 0x98e, 0x3, 0x2, 0x2, 0x2, 0x98e, 
       0x135, 0x3, 0x2, 0x2, 0x2, 0x98f, 0x990, 0x7, 0x11, 0x2, 0x2, 0x990, 
       0x991, 0x7, 0x269, 0x2, 0x2, 0x991, 0x992, 0x5, 0x3a6, 0x1d4, 0x2, 
       0x992, 0x993, 0x7, 0x26a, 0x2, 0x2, 0x993, 0x99c, 0x3, 0x2, 0x2, 
       0x2, 0x994, 0x995, 0x5, 0x8e, 0x48, 0x2, 0x995, 0x996, 0x5, 0x13a, 
       0x9e, 0x2, 0x996, 0x99c, 0x3, 0x2, 0x2, 0x2, 0x997, 0x998, 0x7, 0x137, 
       0x2, 0x2, 0x998, 0x999, 0x7, 0x9a, 0x2, 0x2, 0x999, 0x99a, 0x7, 0xfc, 
       0x2, 0x2, 0x99a, 0x99c, 0x5, 0x138, 0x9d, 0x2, 0x99b, 0x98f, 0x3, 
       0x2, 0x2, 0x2, 0x99b, 0x994, 0x3, 0x2, 0x2, 0x2, 0x99b, 0x997, 0x3, 
       0x2, 0x2, 0x2, 0x99c, 0x137, 0x3, 0x2, 0x2, 0x2, 0x99d, 0x99e, 0x7, 
       0x269, 0x2, 0x2, 0x99e, 0x9a3, 0x5, 0x86, 0x44, 0x2, 0x99f, 0x9a0, 
       0x7, 0x26f, 0x2, 0x2, 0x9a0, 0x9a2, 0x5, 0x86, 0x44, 0x2, 0x9a1, 
       0x99f, 0x3, 0x2, 0x2, 0x2, 0x9a2, 0x9a5, 0x3, 0x2, 0x2, 0x2, 0x9a3, 
       0x9a1, 0x3, 0x2, 0x2, 0x2, 0x9a3, 0x9a4, 0x3, 0x2, 0x2, 0x2, 0x9a4, 
       0x9a6, 0x3, 0x2, 0x2, 0x2, 0x9a5, 0x9a3, 0x3, 0x2, 0x2, 0x2, 0x9a6, 
       0x9a7, 0x7, 0x26a, 0x2, 0x2, 0x9a7, 0x139, 0x3, 0x2, 0x2, 0x2, 0x9a8, 
       0x9a9, 0x7, 0x5d, 0x2, 0x2, 0x9a9, 0x9ae, 0x5, 0x16, 0xc, 0x2, 0x9aa, 
       0x9ab, 0x7, 0x58, 0x2, 0x2, 0x9ab, 0x9ac, 0x7, 0xf0, 0x2, 0x2, 0x9ac, 
       0x9ae, 0x5, 0xbc, 0x5f, 0x2, 0x9ad, 0x9a8, 0x3, 0x2, 0x2, 0x2, 0x9ad, 
       0x9aa, 0x3, 0x2, 0x2, 0x2, 0x9ae, 0x9b1, 0x3, 0x2, 0x2, 0x2, 0x9af, 
       0x9ad, 0x3, 0x2, 0x2, 0x2, 0x9af, 0x9b0, 0x3, 0x2, 0x2, 0x2, 0x9b0, 
       0x13b, 0x3, 0x2, 0x2, 0x2, 0x9b1, 0x9af, 0x3, 0x2, 0x2, 0x2, 0x9b2, 
       0x9b3, 0x7, 0x3b, 0x2, 0x2, 0x9b3, 0x9ba, 0x7, 0x1d, 0x2, 0x2, 0x9b4, 
       0x9b6, 0x7, 0x1d, 0x2, 0x2, 0x9b5, 0x9b4, 0x3, 0x2, 0x2, 0x2, 0x9b5, 
       0x9b6, 0x3, 0x2, 0x2, 0x2, 0x9b6, 0x9b7, 0x3, 0x2, 0x2, 0x2, 0x9b7, 
       0x9b8, 0x7, 0x2d, 0x2, 0x2, 0x9b8, 0x9ba, 0x9, 0x27, 0x2, 0x2, 0x9b9, 
       0x9b2, 0x3, 0x2, 0x2, 0x2, 0x9b9, 0x9b5, 0x3, 0x2, 0x2, 0x2, 0x9ba, 
       0x13d, 0x3, 0x2, 0x2, 0x2, 0x9bb, 0x9bc, 0x7, 0xa2, 0x2, 0x2, 0x9bc, 
       0x9be, 0x5, 0x90, 0x49, 0x2, 0x9bd, 0x9bb, 0x3, 0x2, 0x2, 0x2, 0x9bd, 
       0x9be, 0x3, 0x2, 0x2, 0x2, 0x9be, 0x9bf, 0x3, 0x2, 0x2, 0x2, 0x9bf, 
       0x9c0, 0x5, 0x8e, 0x48, 0x2, 0x9c0, 0x9c1, 0x7, 0x58, 0x2, 0x2, 0x9c1, 
       0x9c2, 0x7, 0xf0, 0x2, 0x2, 0x9c2, 0x9c4, 0x5, 0xb6, 0x5c, 0x2, 0x9c3, 
       0x9c5, 0x5, 0x13c, 0x9f, 0x2, 0x9c4, 0x9c3, 0x3, 0x2, 0x2, 0x2, 0x9c4, 
       0x9c5, 0x3, 0x2, 0x2, 0x2, 0x9c5, 0x13f, 0x3, 0x2, 0x2, 0x2, 0x9c6, 
       0x9c7, 0x5, 0x41a, 0x20e, 0x2, 0x9c7, 0x141, 0x3, 0x2, 0x2, 0x2, 
       0x9c8, 0x9cd, 0x5, 0x144, 0xa3, 0x2, 0x9c9, 0x9ca, 0x7, 0x26f, 0x2, 
       0x2, 0x9ca, 0x9cc, 0x5, 0x144, 0xa3, 0x2, 0x9cb, 0x9c9, 0x3, 0x2, 
       0x2, 0x2, 0x9cc, 0x9cf, 0x3, 0x2, 0x2, 0x2, 0x9cd, 0x9cb, 0x3, 0x2, 
       0x2, 0x2, 0x9cd, 0x9ce, 0x3, 0x2, 0x2, 0x2, 0x9ce, 0x9e2, 0x3, 0x2, 
       0x2, 0x2, 0x9cf, 0x9cd, 0x3, 0x2, 0x2, 0x2, 0x9d0, 0x9d1, 0x7, 0x15b, 
       0x2, 0x2, 0x9d1, 0x9d5, 0x7, 0x139, 0x2, 0x2, 0x9d2, 0x9d6, 0x5, 
       0xc8, 0x65, 0x2, 0x9d3, 0x9d4, 0x7, 0x27, 0x2, 0x2, 0x9d4, 0x9d6, 
       0x5, 0x148, 0xa5, 0x2, 0x9d5, 0x9d2, 0x3, 0x2, 0x2, 0x2, 0x9d5, 0x9d3, 
       0x3, 0x2, 0x2, 0x2, 0x9d6, 0x9d7, 0x3, 0x2, 0x2, 0x2, 0x9d7, 0x9d8, 
       0x7, 0x52, 0x2, 0x2, 0x9d8, 0x9d9, 0x5, 0x2e, 0x18, 0x2, 0x9d9, 0x9e2, 
       0x3, 0x2, 0x2, 0x2, 0x9da, 0x9db, 0x7, 0x194, 0x2, 0x2, 0x9db, 0x9df, 
       0x7, 0x139, 0x2, 0x2, 0x9dc, 0x9e0, 0x5, 0xc8, 0x65, 0x2, 0x9dd, 
       0x9de, 0x7, 0x27, 0x2, 0x2, 0x9de, 0x9e0, 0x5, 0x148, 0xa5, 0x2, 
       0x9df, 0x9dc, 0x3, 0x2, 0x2, 0x2, 0x9df, 0x9dd, 0x3, 0x2, 0x2, 0x2, 
       0x9e0, 0x9e2, 0x3, 0x2, 0x2, 0x2, 0x9e1, 0x9c8, 0x3, 0x2, 0x2, 0x2, 
       0x9e1, 0x9d0, 0x3, 0x2, 0x2, 0x2, 0x9e1, 0x9da, 0x3, 0x2, 0x2, 0x2, 
       0x9e2, 0x143, 0x3, 0x2, 0x2, 0x2, 0x9e3, 0x9ec, 0x5, 0x146, 0xa4, 
       0x2, 0x9e4, 0x9ec, 0x5, 0x14e, 0xa8, 0x2, 0x9e5, 0x9ec, 0x5, 0x150, 
       0xa9, 0x2, 0x9e6, 0x9ec, 0x5, 0x152, 0xaa, 0x2, 0x9e7, 0x9ec, 0x5, 
       0x154, 0xab, 0x2, 0x9e8, 0x9ec, 0x5, 0x156, 0xac, 0x2, 0x9e9, 0x9ec, 
       0x5, 0x168, 0xb5, 0x2, 0x9ea, 0x9ec, 0x5, 0x16a, 0xb6, 0x2, 0x9eb, 
       0x9e3, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9e4, 0x3, 0x2, 0x2, 0x2, 0x9eb, 
       0x9e5, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9e6, 0x3, 0x2, 0x2, 0x2, 0x9eb, 
       0x9e7, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9e8, 0x3, 0x2, 0x2, 0x2, 0x9eb, 
       0x9e9, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9ea, 0x3, 0x2, 0x2, 0x2, 0x9ec, 
       0x145, 0x3, 0x2, 0x2, 0x2, 0x9ed, 0x9ee, 0x7, 0x11b, 0x2, 0x2, 0x9ee, 
       0x9f2, 0x7, 0x139, 0x2, 0x2, 0x9ef, 0x9f3, 0x5, 0xc8, 0x65, 0x2, 
       0x9f0, 0x9f1, 0x7, 0x27, 0x2, 0x2, 0x9f1, 0x9f3, 0x5, 0x148, 0xa5, 
       0x2, 0x9f2, 0x9ef, 0x3, 0x2, 0x2, 0x2, 0x9f2, 0x9f0, 0x3, 0x2, 0x2, 
       0x2, 0x9f3, 0x9f4, 0x3, 0x2, 0x2, 0x2, 0x9f4, 0x9f5, 0x5, 0xbc, 0x5f, 
       0x2, 0x9f5, 0x147, 0x3, 0x2, 0x2, 0x2, 0x9f6, 0x9f7, 0x7, 0x269, 
       0x2, 0x2, 0x9f7, 0x9fc, 0x5, 0x14c, 0xa7, 0x2, 0x9f8, 0x9f9, 0x7, 
       0x26f, 0x2, 0x2, 0x9f9, 0x9fb, 0x5, 0x14c, 0xa7, 0x2, 0x9fa, 0x9f8, 
       0x3, 0x2, 0x2, 0x2, 0x9fb, 0x9fe, 0x3, 0x2, 0x2, 0x2, 0x9fc, 0x9fa, 
       0x3, 0x2, 0x2, 0x2, 0x9fc, 0x9fd, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9ff, 
       0x3, 0x2, 0x2, 0x2, 0x9fe, 0x9fc, 0x3, 0x2, 0x2, 0x2, 0x9ff, 0xa00, 
       0x7, 0x26a, 0x2, 0x2, 0xa00, 0x149, 0x3, 0x2, 0x2, 0x2, 0xa01, 0xa02, 
       0x7, 0x269, 0x2, 0x2, 0xa02, 0xa03, 0x5, 0x14c, 0xa7, 0x2, 0xa03, 
       0xa04, 0x7, 0x26a, 0x2, 0x2, 0xa04, 0x14b, 0x3, 0x2, 0x2, 0x2, 0xa05, 
       0xa06, 0x5, 0x3a6, 0x1d4, 0x2, 0xa06, 0x14d, 0x3, 0x2, 0x2, 0x2, 
       0xa07, 0xa08, 0x7, 0xd0, 0x2, 0x2, 0xa08, 0xa0f, 0x7, 0x139, 0x2, 
       0x2, 0xa09, 0xa0a, 0x7, 0x269, 0x2, 0x2, 0xa0a, 0xa0b, 0x5, 0xc8, 
       0x65, 0x2, 0xa0b, 0xa0c, 0x7, 0x26a, 0x2, 0x2, 0xa0c, 0xa10, 0x3, 
       0x2, 0x2, 0x2, 0xa0d, 0xa0e, 0x7, 0x27, 0x2, 0x2, 0xa0e, 0xa10, 0x5, 
       0x148, 0xa5, 0x2, 0xa0f, 0xa09, 0x3, 0x2, 0x2, 0x2, 0xa0f, 0xa0d, 
       0x3, 0x2, 0x2, 0x2, 0xa10, 0xa11, 0x3, 0x2, 0x2, 0x2, 0xa11, 0xa12, 
       0x7, 0x5d, 0x2, 0x2, 0xa12, 0xa13, 0x7, 0x50, 0x2, 0x2, 0xa13, 0xa16, 
       0x5, 0x118, 0x8d, 0x2, 0xa14, 0xa15, 0x9, 0x28, 0x2, 0x2, 0xa15, 
       0xa17, 0x7, 0x1a5, 0x2, 0x2, 0xa16, 0xa14, 0x3, 0x2, 0x2, 0x2, 0xa16, 
       0xa17, 0x3, 0x2, 0x2, 0x2, 0xa17, 0xa19, 0x3, 0x2, 0x2, 0x2, 0xa18, 
       0xa1a, 0x7, 0x73, 0x2, 0x2, 0xa19, 0xa18, 0x3, 0x2, 0x2, 0x2, 0xa19, 
       0xa1a, 0x3, 0x2, 0x2, 0x2, 0xa1a, 0x14f, 0x3, 0x2, 0x2, 0x2, 0xa1b, 
       0xa1c, 0x9, 0x3, 0x2, 0x2, 0xa1c, 0xa1d, 0x7, 0x1db, 0x2, 0x2, 0xa1d, 
       0xa1e, 0x7, 0x11a, 0x2, 0x2, 0xa1e, 0x151, 0x3, 0x2, 0x2, 0x2, 0xa1f, 
       0xa20, 0x7, 0x114, 0x2, 0x2, 0xa20, 0xa21, 0x7, 0x138, 0x2, 0x2, 
       0xa21, 0xa26, 0x5, 0xc8, 0x65, 0x2, 0xa22, 0xa23, 0x7, 0x26f, 0x2, 
       0x2, 0xa23, 0xa25, 0x5, 0xc8, 0x65, 0x2, 0xa24, 0xa22, 0x3, 0x2, 
       0x2, 0x2, 0xa25, 0xa28, 0x3, 0x2, 0x2, 0x2, 0xa26, 0xa24, 0x3, 0x2, 
       0x2, 0x2, 0xa26, 0xa27, 0x3, 0x2, 0x2, 0x2, 0xa27, 0xa29, 0x3, 0x2, 
       0x2, 0x2, 0xa28, 0xa26, 0x3, 0x2, 0x2, 0x2, 0xa29, 0xa2a, 0x7, 0x2f, 
       0x2, 0x2, 0xa2a, 0xa2b, 0x7, 0x139, 0x2, 0x2, 0xa2b, 0xa2d, 0x5, 
       0xc8, 0x65, 0x2, 0xa2c, 0xa2e, 0x5, 0xbc, 0x5f, 0x2, 0xa2d, 0xa2c, 
       0x3, 0x2, 0x2, 0x2, 0xa2d, 0xa2e, 0x3, 0x2, 0x2, 0x2, 0xa2e, 0x153, 
       0x3, 0x2, 0x2, 0x2, 0xa2f, 0xa30, 0x7, 0x39, 0x2, 0x2, 0xa30, 0xa31, 
       0x7, 0x139, 0x2, 0x2, 0xa31, 0xa33, 0x5, 0xc8, 0x65, 0x2, 0xa32, 
       0xa34, 0x7, 0x152, 0x2, 0x2, 0xa33, 0xa32, 0x3, 0x2, 0x2, 0x2, 0xa33, 
       0xa34, 0x3, 0x2, 0x2, 0x2, 0xa34, 0xa35, 0x3, 0x2, 0x2, 0x2, 0xa35, 
       0xa36, 0x7, 0x1a1, 0x2, 0x2, 0xa36, 0xa37, 0x7, 0x107, 0x2, 0x2, 
       0xa37, 0xa38, 0x7, 0xef, 0x2, 0x2, 0xa38, 0x155, 0x3, 0x2, 0x2, 0x2, 
       0xa39, 0xa3a, 0x7, 0x4d, 0x2, 0x2, 0xa3a, 0xa3e, 0x7, 0x139, 0x2, 
       0x2, 0xa3b, 0xa3f, 0x5, 0xc8, 0x65, 0x2, 0xa3c, 0xa3d, 0x7, 0x27, 
       0x2, 0x2, 0xa3d, 0xa3f, 0x5, 0x148, 0xa5, 0x2, 0xa3e, 0xa3b, 0x3, 
       0x2, 0x2, 0x2, 0xa3e, 0xa3c, 0x3, 0x2, 0x2, 0x2, 0xa3f, 0xa42, 0x3, 
       0x2, 0x2, 0x2, 0xa40, 0xa43, 0x5, 0x158, 0xad, 0x2, 0xa41, 0xa43, 
       0x5, 0x15c, 0xaf, 0x2, 0xa42, 0xa40, 0x3, 0x2, 0x2, 0x2, 0xa42, 0xa41, 
       0x3, 0x2, 0x2, 0x2, 0xa43, 0x157, 0x3, 0x2, 0x2, 0x2, 0xa44, 0xa45, 
       0x7, 0x84, 0x2, 0x2, 0xa45, 0xa46, 0x5, 0x14a, 0xa6, 0x2, 0xa46, 
       0xa47, 0x7, 0x2f, 0x2, 0x2, 0xa47, 0xa48, 0x7, 0x269, 0x2, 0x2, 0xa48, 
       0xa49, 0x5, 0x15a, 0xae, 0x2, 0xa49, 0xa4a, 0x7, 0x26f, 0x2, 0x2, 
       0xa4a, 0xa4b, 0x5, 0x15a, 0xae, 0x2, 0xa4b, 0xa4c, 0x7, 0x26a, 0x2, 
       0x2, 0xa4c, 0x159, 0x3, 0x2, 0x2, 0x2, 0xa4d, 0xa4e, 0x7, 0x139, 
       0x2, 0x2, 0xa4e, 0xa50, 0x5, 0xc8, 0x65, 0x2, 0xa4f, 0xa51, 0x5, 
       0xbc, 0x5f, 0x2, 0xa50, 0xa4f, 0x3, 0x2, 0x2, 0x2, 0xa50, 0xa51, 
       0x3, 0x2, 0x2, 0x2, 0xa51, 0x15b, 0x3, 0x2, 0x2, 0x2, 0xa52, 0xa53, 
       0x7, 0x2f, 0x2, 0x2, 0xa53, 0xa54, 0x7, 0x269, 0x2, 0x2, 0xa54, 0xa55, 
       0x5, 0x15e, 0xb0, 0x2, 0xa55, 0xa56, 0x7, 0x26a, 0x2, 0x2, 0xa56, 
       0x15d, 0x3, 0x2, 0x2, 0x2, 0xa57, 0xa5c, 0x5, 0x160, 0xb1, 0x2, 0xa58, 
       0xa59, 0x7, 0x26f, 0x2, 0x2, 0xa59, 0xa5b, 0x5, 0x160, 0xb1, 0x2, 
       0xa5a, 0xa58, 0x3, 0x2, 0x2, 0x2, 0xa5b, 0xa5e, 0x3, 0x2, 0x2, 0x2, 
       0xa5c, 0xa5a, 0x3, 0x2, 0x2, 0x2, 0xa5c, 0xa5d, 0x3, 0x2, 0x2, 0x2, 
       0xa5d, 0x15f, 0x3, 0x2, 0x2, 0x2, 0xa5e, 0xa5c, 0x3, 0x2, 0x2, 0x2, 
       0xa5f, 0xa62, 0x5, 0x162, 0xb2, 0x2, 0xa60, 0xa62, 0x5, 0x164, 0xb3, 
       0x2, 0xa61, 0xa5f, 0x3, 0x2, 0x2, 0x2, 0xa61, 0xa60, 0x3, 0x2, 0x2, 
       0x2, 0xa62, 0x161, 0x3, 0x2, 0x2, 0x2, 0xa63, 0xa64, 0x7, 0x139, 
       0x2, 0x2, 0xa64, 0xa65, 0x5, 0xc8, 0x65, 0x2, 0xa65, 0xa66, 0x7, 
       0x1e5, 0x2, 0x2, 0xa66, 0xa67, 0x7, 0x33, 0x2, 0x2, 0xa67, 0xa68, 
       0x7, 0x191, 0x2, 0x2, 0xa68, 0xa6b, 0x7, 0x269, 0x2, 0x2, 0xa69, 
       0xa6c, 0x5, 0x14c, 0xa7, 0x2, 0xa6a, 0xa6c, 0x7, 0x37, 0x2, 0x2, 
       0xa6b, 0xa69, 0x3, 0x2, 0x2, 0x2, 0xa6b, 0xa6a, 0x3, 0x2, 0x2, 0x2, 
       0xa6c, 0xa74, 0x3, 0x2, 0x2, 0x2, 0xa6d, 0xa70, 0x7, 0x26f, 0x2, 
       0x2, 0xa6e, 0xa71, 0x5, 0x14c, 0xa7, 0x2, 0xa6f, 0xa71, 0x7, 0x37, 
       0x2, 0x2, 0xa70, 0xa6e, 0x3, 0x2, 0x2, 0x2, 0xa70, 0xa6f, 0x3, 0x2, 
       0x2, 0x2, 0xa71, 0xa73, 0x3, 0x2, 0x2, 0x2, 0xa72, 0xa6d, 0x3, 0x2, 
       0x2, 0x2, 0xa73, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa74, 0xa72, 0x3, 0x2, 
       0x2, 0x2, 0xa74, 0xa75, 0x3, 0x2, 0x2, 0x2, 0xa75, 0xa77, 0x3, 0x2, 
       0x2, 0x2, 0xa76, 0xa74, 0x3, 0x2, 0x2, 0x2, 0xa77, 0xa79, 0x7, 0x26a, 
       0x2, 0x2, 0xa78, 0xa7a, 0x5, 0xbc, 0x5f, 0x2, 0xa79, 0xa78, 0x3, 
       0x2, 0x2, 0x2, 0xa79, 0xa7a, 0x3, 0x2, 0x2, 0x2, 0xa7a, 0x163, 0x3, 
       0x2, 0x2, 0x2, 0xa7b, 0xa7c, 0x7, 0x139, 0x2, 0x2, 0xa7c, 0xa7d, 
       0x5, 0xc8, 0x65, 0x2, 0xa7d, 0xa7f, 0x5, 0x166, 0xb4, 0x2, 0xa7e, 
       0xa80, 0x5, 0xbc, 0x5f, 0x2, 0xa7f, 0xa7e, 0x3, 0x2, 0x2, 0x2, 0xa7f, 
       0xa80, 0x3, 0x2, 0x2, 0x2, 0xa80, 0x165, 0x3, 0x2, 0x2, 0x2, 0xa81, 
       0xa82, 0x7, 0x17e, 0x2, 0x2, 0xa82, 0xa83, 0x5, 0x14a, 0xa6, 0x2, 
       0xa83, 0xa84, 0x7, 0x22, 0x2, 0x2, 0xa84, 0xa85, 0x5, 0x14a, 0xa6, 
       0x2, 0xa85, 0xa86, 0x7, 0xcf, 0x2, 0x2, 0xa86, 0xa87, 0x5, 0x14a, 
       0xa6, 0x2, 0xa87, 0xa9c, 0x3, 0x2, 0x2, 0x2, 0xa88, 0xa89, 0x7, 0x17e, 
       0x2, 0x2, 0xa89, 0xa8a, 0x5, 0x14a, 0xa6, 0x2, 0xa8a, 0xa8b, 0x7, 
       0x22, 0x2, 0x2, 0xa8b, 0xa8e, 0x7, 0x269, 0x2, 0x2, 0xa8c, 0xa8f, 
       0x5, 0x14c, 0xa7, 0x2, 0xa8d, 0xa8f, 0x7, 0x37, 0x2, 0x2, 0xa8e, 
       0xa8c, 0x3, 0x2, 0x2, 0x2, 0xa8e, 0xa8d, 0x3, 0x2, 0x2, 0x2, 0xa8f, 
       0xa90, 0x3, 0x2, 0x2, 0x2, 0xa90, 0xa91, 0x7, 0x26a, 0x2, 0x2, 0xa91, 
       0xa9c, 0x3, 0x2, 0x2, 0x2, 0xa92, 0xa93, 0x7, 0x17e, 0x2, 0x2, 0xa93, 
       0xa9c, 0x5, 0x14a, 0xa6, 0x2, 0xa94, 0xa95, 0x7, 0x22, 0x2, 0x2, 
       0xa95, 0xa98, 0x7, 0x269, 0x2, 0x2, 0xa96, 0xa99, 0x5, 0x14c, 0xa7, 
       0x2, 0xa97, 0xa99, 0x7, 0x37, 0x2, 0x2, 0xa98, 0xa96, 0x3, 0x2, 0x2, 
       0x2, 0xa98, 0xa97, 0x3, 0x2, 0x2, 0x2, 0xa99, 0xa9a, 0x3, 0x2, 0x2, 
       0x2, 0xa9a, 0xa9c, 0x7, 0x26a, 0x2, 0x2, 0xa9b, 0xa81, 0x3, 0x2, 
       0x2, 0x2, 0xa9b, 0xa88, 0x3, 0x2, 0x2, 0x2, 0xa9b, 0xa92, 0x3, 0x2, 
       0x2, 0x2, 0xa9b, 0xa94, 0x3, 0x2, 0x2, 0x2, 0xa9c, 0x167, 0x3, 0x2, 
       0x2, 0x2, 0xa9d, 0xaa0, 0x7, 0x79, 0x2, 0x2, 0xa9e, 0xaa1, 0x5, 0x162, 
       0xb2, 0x2, 0xa9f, 0xaa1, 0x5, 0x164, 0xb3, 0x2, 0xaa0, 0xa9e, 0x3, 
       0x2, 0x2, 0x2, 0xaa0, 0xa9f, 0x3, 0x2, 0x2, 0x2, 0xaa1, 0x169, 0x3, 
       0x2, 0x2, 0x2, 0xaa2, 0xaa3, 0x7, 0xc5, 0x2, 0x2, 0xaa3, 0xaa7, 0x7, 
       0x139, 0x2, 0x2, 0xaa4, 0xaa8, 0x5, 0xc8, 0x65, 0x2, 0xaa5, 0xaa6, 
       0x7, 0x27, 0x2, 0x2, 0xaa6, 0xaa8, 0x5, 0x148, 0xa5, 0x2, 0xaa7, 
       0xaa4, 0x3, 0x2, 0x2, 0x2, 0xaa7, 0xaa5, 0x3, 0x2, 0x2, 0x2, 0xaa8, 
       0x16b, 0x3, 0x2, 0x2, 0x2, 0xaa9, 0xaaa, 0x7, 0x7e, 0x2, 0x2, 0xaaa, 
       0xaab, 0x5, 0xbc, 0x5f, 0x2, 0xaab, 0xaac, 0x5, 0x16e, 0xb8, 0x2, 
       0xaac, 0x16d, 0x3, 0x2, 0x2, 0x2, 0xaad, 0xab4, 0x5, 0x28, 0x15, 
       0x2, 0xaae, 0xab4, 0x5, 0xbe, 0x60, 0x2, 0xaaf, 0xab4, 0x5, 0xc0, 
       0x61, 0x2, 0xab0, 0xab1, 0x7, 0x160, 0x2, 0x2, 0xab1, 0xab2, 0x7, 
       0x112, 0x2, 0x2, 0xab2, 0xab4, 0x9, 0x29, 0x2, 0x2, 0xab3, 0xaad, 
       0x3, 0x2, 0x2, 0x2, 0xab3, 0xaae, 0x3, 0x2, 0x2, 0x2, 0xab3, 0xaaf, 
       0x3, 0x2, 0x2, 0x2, 0xab3, 0xab0, 0x3, 0x2, 0x2, 0x2, 0xab4, 0x16f, 
       0x3, 0x2, 0x2, 0x2, 0xab5, 0xab6, 0x7, 0x7e, 0x2, 0x2, 0xab6, 0xab7, 
       0x7, 0x190, 0x2, 0x2, 0xab7, 0xab8, 0x7, 0x16e, 0x2, 0x2, 0xab8, 
       0xab9, 0x7, 0xa0, 0x2, 0x2, 0xab9, 0xaba, 0x5, 0x172, 0xba, 0x2, 
       0xaba, 0xabb, 0x5, 0x174, 0xbb, 0x2, 0xabb, 0x171, 0x3, 0x2, 0x2, 
       0x2, 0xabc, 0xac0, 0x5, 0x41a, 0x20e, 0x2, 0xabd, 0xabf, 0x5, 0x7e, 
       0x40, 0x2, 0xabe, 0xabd, 0x3, 0x2, 0x2, 0x2, 0xabf, 0xac2, 0x3, 0x2, 
       0x2, 0x2, 0xac0, 0xabe, 0x3, 0x2, 0x2, 0x2, 0xac0, 0xac1, 0x3, 0x2, 
       0x2, 0x2, 0xac1, 0x173, 0x3, 0x2, 0x2, 0x2, 0xac2, 0xac0, 0x3, 0x2, 
       0x2, 0x2, 0xac3, 0xac4, 0x9, 0x2a, 0x2, 0x2, 0xac4, 0xac5, 0x7, 0x10e, 
       0x2, 0x2, 0xac5, 0xac6, 0x7, 0x27, 0x2, 0x2, 0xac6, 0xac7, 0x5, 0x176, 
       0xbc, 0x2, 0xac7, 0xac8, 0x7, 0x5d, 0x2, 0x2, 0xac8, 0xac9, 0x5, 
       0x17a, 0xbe, 0x2, 0xac9, 0xae1, 0x3, 0x2, 0x2, 0x2, 0xaca, 0xacb, 
       0x7, 0x7e, 0x2, 0x2, 0xacb, 0xace, 0x7, 0x10e, 0x2, 0x2, 0xacc, 0xacd, 
       0x7, 0x27, 0x2, 0x2, 0xacd, 0xacf, 0x5, 0x176, 0xbc, 0x2, 0xace, 
       0xacc, 0x3, 0x2, 0x2, 0x2, 0xace, 0xacf, 0x3, 0x2, 0x2, 0x2, 0xacf, 
       0xad0, 0x3, 0x2, 0x2, 0x2, 0xad0, 0xad1, 0x7, 0x15d, 0x2, 0x2, 0xad1, 
       0xad2, 0x5, 0x17c, 0xbf, 0x2, 0xad2, 0xad3, 0x7, 0x5d, 0x2, 0x2, 
       0xad3, 0xad4, 0x5, 0x2e, 0x18, 0x2, 0xad4, 0xae1, 0x3, 0x2, 0x2, 
       0x2, 0xad5, 0xad6, 0x7, 0xc5, 0x2, 0x2, 0xad6, 0xad8, 0x7, 0x10e, 
       0x2, 0x2, 0xad7, 0xad9, 0x5, 0x7a, 0x3e, 0x2, 0xad8, 0xad7, 0x3, 
       0x2, 0x2, 0x2, 0xad8, 0xad9, 0x3, 0x2, 0x2, 0x2, 0xad9, 0xada, 0x3, 
       0x2, 0x2, 0x2, 0xada, 0xadb, 0x7, 0x27, 0x2, 0x2, 0xadb, 0xae1, 0x5, 
       0x176, 0xbc, 0x2, 0xadc, 0xae1, 0x5, 0x28, 0x15, 0x2, 0xadd, 0xae1, 
       0x5, 0xa8, 0x55, 0x2, 0xade, 0xae1, 0x5, 0xbe, 0x60, 0x2, 0xadf, 
       0xae1, 0x5, 0xc0, 0x61, 0x2, 0xae0, 0xac3, 0x3, 0x2, 0x2, 0x2, 0xae0, 
       0xaca, 0x3, 0x2, 0x2, 0x2, 0xae0, 0xad5, 0x3, 0x2, 0x2, 0x2, 0xae0, 
       0xadc, 0x3, 0x2, 0x2, 0x2, 0xae0, 0xadd, 0x3, 0x2, 0x2, 0x2, 0xae0, 
       0xade, 0x3, 0x2, 0x2, 0x2, 0xae0, 0xadf, 0x3, 0x2, 0x2, 0x2, 0xae1, 
       0x175, 0x3, 0x2, 0x2, 0x2, 0xae2, 0xae7, 0x5, 0x178, 0xbd, 0x2, 0xae3, 
       0xae4, 0x7, 0x26f, 0x2, 0x2, 0xae4, 0xae6, 0x5, 0x178, 0xbd, 0x2, 
       0xae5, 0xae3, 0x3, 0x2, 0x2, 0x2, 0xae6, 0xae9, 0x3, 0x2, 0x2, 0x2, 
       0xae7, 0xae5, 0x3, 0x2, 0x2, 0x2, 0xae7, 0xae8, 0x3, 0x2, 0x2, 0x2, 
       0xae8, 0x177, 0x3, 0x2, 0x2, 0x2, 0xae9, 0xae7, 0x3, 0x2, 0x2, 0x2, 
       0xaea, 0xaeb, 0x5, 0x41a, 0x20e, 0x2, 0xaeb, 0x179, 0x3, 0x2, 0x2, 
       0x2, 0xaec, 0xaf1, 0x5, 0x17c, 0xbf, 0x2, 0xaed, 0xaee, 0x7, 0x26f, 
       0x2, 0x2, 0xaee, 0xaf0, 0x5, 0x17c, 0xbf, 0x2, 0xaef, 0xaed, 0x3, 
       0x2, 0x2, 0x2, 0xaf0, 0xaf3, 0x3, 0x2, 0x2, 0x2, 0xaf1, 0xaef, 0x3, 
       0x2, 0x2, 0x2, 0xaf1, 0xaf2, 0x3, 0x2, 0x2, 0x2, 0xaf2, 0x17b, 0x3, 
       0x2, 0x2, 0x2, 0xaf3, 0xaf1, 0x3, 0x2, 0x2, 0x2, 0xaf4, 0xaf5, 0x5, 
       0x41a, 0x20e, 0x2, 0xaf5, 0x17d, 0x3, 0x2, 0x2, 0x2, 0xaf6, 0xaf7, 
       0x7, 0x7e, 0x2, 0x2, 0xaf7, 0xaf8, 0x7, 0x190, 0x2, 0x2, 0xaf8, 0xaf9, 
       0x7, 0x16e, 0x2, 0x2, 0xaf9, 0xafa, 0x7, 0xbc, 0x2, 0x2, 0xafa, 0xafb, 
       0x5, 0x17c, 0xbf, 0x2, 0xafb, 0xafc, 0x5, 0x180, 0xc1, 0x2, 0xafc, 
       0x17f, 0x3, 0x2, 0x2, 0x2, 0xafd, 0xb01, 0x5, 0x16, 0xc, 0x2, 0xafe, 
       0xb01, 0x5, 0x28, 0x15, 0x2, 0xaff, 0xb01, 0x5, 0xa8, 0x55, 0x2, 
       0xb00, 0xafd, 0x3, 0x2, 0x2, 0x2, 0xb00, 0xafe, 0x3, 0x2, 0x2, 0x2, 
       0xb00, 0xaff, 0x3, 0x2, 0x2, 0x2, 0xb01, 0x181, 0x3, 0x2, 0x2, 0x2, 
       0xb02, 0xb03, 0x7, 0x7e, 0x2, 0x2, 0xb03, 0xb04, 0x7, 0x193, 0x2, 
       0x2, 0xb04, 0xb05, 0x5, 0x140, 0xa1, 0x2, 0xb05, 0xb06, 0x7, 0x3f, 
       0x2, 0x2, 0xb06, 0xb07, 0x5, 0x7c, 0x3f, 0x2, 0xb07, 0xb08, 0x5, 
       0x2a, 0x16, 0x2, 0xb08, 0x183, 0x3, 0x2, 0x2, 0x2, 0xb09, 0xb0a, 
       0x7, 0x7e, 0x2, 0x2, 0xb0a, 0xb0b, 0x7, 0x197, 0x2, 0x2, 0xb0b, 0xb0c, 
       0x5, 0x186, 0xc4, 0x2, 0xb0c, 0xb0d, 0x5, 0x188, 0xc5, 0x2, 0xb0d, 
       0x185, 0x3, 0x2, 0x2, 0x2, 0xb0e, 0xb12, 0x5, 0x41a, 0x20e, 0x2, 
       0xb0f, 0xb11, 0x5, 0x7e, 0x40, 0x2, 0xb10, 0xb0f, 0x3, 0x2, 0x2, 
       0x2, 0xb11, 0xb14, 0x3, 0x2, 0x2, 0x2, 0xb12, 0xb10, 0x3, 0x2, 0x2, 
       0x2, 0xb12, 0xb13, 0x3, 0x2, 0x2, 0x2, 0xb13, 0x187, 0x3, 0x2, 0x2, 
       0x2, 0xb14, 0xb12, 0x3, 0x2, 0x2, 0x2, 0xb15, 0xb3d, 0x5, 0x18a, 
       0xc6, 0x2, 0xb16, 0xb17, 0x7, 0x135, 0x2, 0x2, 0xb17, 0xb1b, 0x7, 
       0x52, 0x2, 0x2, 0xb18, 0xb1c, 0x5, 0x2e, 0x18, 0x2, 0xb19, 0xb1c, 
       0x7, 0x1b, 0x2, 0x2, 0xb1a, 0xb1c, 0x7, 0x4b, 0x2, 0x2, 0xb1b, 0xb18, 
       0x3, 0x2, 0x2, 0x2, 0xb1b, 0xb19, 0x3, 0x2, 0x2, 0x2, 0xb1b, 0xb1a, 
       0x3, 0x2, 0x2, 0x2, 0xb1c, 0xb3d, 0x3, 0x2, 0x2, 0x2, 0xb1d, 0xb1e, 
       0x7, 0x15b, 0x2, 0x2, 0xb1e, 0xb1f, 0x7, 0x83, 0x2, 0x2, 0xb1f, 0xb20, 
       0x5, 0x18e, 0xc8, 0x2, 0xb20, 0xb21, 0x7, 0x52, 0x2, 0x2, 0xb21, 
       0xb23, 0x5, 0x2e, 0x18, 0x2, 0xb22, 0xb24, 0x5, 0x6e, 0x38, 0x2, 
       0xb23, 0xb22, 0x3, 0x2, 0x2, 0x2, 0xb23, 0xb24, 0x3, 0x2, 0x2, 0x2, 
       0xb24, 0xb3d, 0x3, 0x2, 0x2, 0x2, 0xb25, 0xb3d, 0x5, 0x2a, 0x16, 
       0x2, 0xb26, 0xb3d, 0x5, 0xa8, 0x55, 0x2, 0xb27, 0xb28, 0x7, 0x79, 
       0x2, 0x2, 0xb28, 0xb2c, 0x7, 0x1a8, 0x2, 0x2, 0xb29, 0xb2a, 0x7, 
       0xe9, 0x2, 0x2, 0xb2a, 0xb2b, 0x7, 0x3b, 0x2, 0x2, 0xb2b, 0xb2d, 
       0x7, 0x1c5, 0x2, 0x2, 0xb2c, 0xb29, 0x3, 0x2, 0x2, 0x2, 0xb2c, 0xb2d, 
       0x3, 0x2, 0x2, 0x2, 0xb2d, 0xb2e, 0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb31, 
       0x5, 0x190, 0xc9, 0x2, 0xb2f, 0xb30, 0x9, 0x2b, 0x2, 0x2, 0xb30, 
       0xb32, 0x5, 0x190, 0xc9, 0x2, 0xb31, 0xb2f, 0x3, 0x2, 0x2, 0x2, 0xb31, 
       0xb32, 0x3, 0x2, 0x2, 0x2, 0xb32, 0xb3d, 0x3, 0x2, 0x2, 0x2, 0xb33, 
       0xb34, 0x7, 0x15b, 0x2, 0x2, 0xb34, 0xb35, 0x7, 0x1a8, 0x2, 0x2, 
       0xb35, 0xb36, 0x5, 0x190, 0xc9, 0x2, 0xb36, 0xb37, 0x7, 0x52, 0x2, 
       0x2, 0xb37, 0xb38, 0x5, 0x190, 0xc9, 0x2, 0xb38, 0xb3d, 0x3, 0x2, 
       0x2, 0x2, 0xb39, 0xb3d, 0x5, 0x192, 0xca, 0x2, 0xb3a, 0xb3d, 0x5, 
       0x194, 0xcb, 0x2, 0xb3b, 0xb3d, 0x5, 0x196, 0xcc, 0x2, 0xb3c, 0xb15, 
       0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb16, 0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb1d, 
       0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb25, 0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb26, 
       0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb27, 0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb33, 
       0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb39, 0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb3a, 
       0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb3b, 0x3, 0x2, 0x2, 0x2, 0xb3d, 0x189, 
       0x3, 0x2, 0x2, 0x2, 0xb3e, 0xb43, 0x5, 0x18c, 0xc7, 0x2, 0xb3f, 0xb40, 
       0x7, 0x26f, 0x2, 0x2, 0xb40, 0xb42, 0x5, 0x18c, 0xc7, 0x2, 0xb41, 
       0xb3f, 0x3, 0x2, 0x2, 0x2, 0xb42, 0xb45, 0x3, 0x2, 0x2, 0x2, 0xb43, 
       0xb41, 0x3, 0x2, 0x2, 0x2, 0xb43, 0xb44, 0x3, 0x2, 0x2, 0x2, 0xb44, 
       0x18b, 0x3, 0x2, 0x2, 0x2, 0xb45, 0xb43, 0x3, 0x2, 0x2, 0x2, 0xb46, 
       0xb4a, 0x5, 0x192, 0xca, 0x2, 0xb47, 0xb4a, 0x5, 0x194, 0xcb, 0x2, 
       0xb48, 0xb4a, 0x5, 0x196, 0xcc, 0x2, 0xb49, 0xb46, 0x3, 0x2, 0x2, 
       0x2, 0xb49, 0xb47, 0x3, 0x2, 0x2, 0x2, 0xb49, 0xb48, 0x3, 0x2, 0x2, 
       0x2, 0xb4a, 0x18d, 0x3, 0x2, 0x2, 0x2, 0xb4b, 0xb4c, 0x5, 0x41a, 
       0x20e, 0x2, 0xb4c, 0x18f, 0x3, 0x2, 0x2, 0x2, 0xb4d, 0xb4e, 0x9, 
       0x2c, 0x2, 0x2, 0xb4e, 0x191, 0x3, 0x2, 0x2, 0x2, 0xb4f, 0xb50, 0x7, 
       0x79, 0x2, 0x2, 0xb50, 0xb51, 0x7, 0x83, 0x2, 0x2, 0xb51, 0xb52, 
       0x5, 0x18e, 0xc8, 0x2, 0xb52, 0xb54, 0x5, 0x3c2, 0x1e2, 0x2, 0xb53, 
       0xb55, 0x5, 0x12a, 0x96, 0x2, 0xb54, 0xb53, 0x3, 0x2, 0x2, 0x2, 0xb54, 
       0xb55, 0x3, 0x2, 0x2, 0x2, 0xb55, 0xb57, 0x3, 0x2, 0x2, 0x2, 0xb56, 
       0xb58, 0x5, 0x6e, 0x38, 0x2, 0xb57, 0xb56, 0x3, 0x2, 0x2, 0x2, 0xb57, 
       0xb58, 0x3, 0x2, 0x2, 0x2, 0xb58, 0x193, 0x3, 0x2, 0x2, 0x2, 0xb59, 
       0xb5a, 0x7, 0xc5, 0x2, 0x2, 0xb5a, 0xb5c, 0x7, 0x83, 0x2, 0x2, 0xb5b, 
       0xb5d, 0x5, 0x7a, 0x3e, 0x2, 0xb5c, 0xb5b, 0x3, 0x2, 0x2, 0x2, 0xb5c, 
       0xb5d, 0x3, 0x2, 0x2, 0x2, 0xb5d, 0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb5e, 
       0xb60, 0x5, 0x18e, 0xc8, 0x2, 0xb5f, 0xb61, 0x5, 0x6e, 0x38, 0x2, 
       0xb60, 0xb5f, 0x3, 0x2, 0x2, 0x2, 0xb60, 0xb61, 0x3, 0x2, 0x2, 0x2, 
       0xb61, 0x195, 0x3, 0x2, 0x2, 0x2, 0xb62, 0xb63, 0x7, 0x7e, 0x2, 0x2, 
       0xb63, 0xb64, 0x7, 0x83, 0x2, 0x2, 0xb64, 0xb67, 0x5, 0x18e, 0xc8, 
       0x2, 0xb65, 0xb66, 0x7, 0x176, 0x2, 0x2, 0xb66, 0xb68, 0x7, 0xaf, 
       0x2, 0x2, 0xb67, 0xb65, 0x3, 0x2, 0x2, 0x2, 0xb67, 0xb68, 0x3, 0x2, 
       0x2, 0x2, 0xb68, 0xb69, 0x3, 0x2, 0x2, 0x2, 0xb69, 0xb6a, 0x7, 0x197, 
       0x2, 0x2, 0xb6a, 0xb6c, 0x5, 0x3c2, 0x1e2, 0x2, 0xb6b, 0xb6d, 0x5, 
       0x12a, 0x96, 0x2, 0xb6c, 0xb6b, 0x3, 0x2, 0x2, 0x2, 0xb6c, 0xb6d, 
       0x3, 0x2, 0x2, 0x2, 0xb6d, 0xb6f, 0x3, 0x2, 0x2, 0x2, 0xb6e, 0xb70, 
       0x5, 0x6e, 0x38, 0x2, 0xb6f, 0xb6e, 0x3, 0x2, 0x2, 0x2, 0xb6f, 0xb70, 
       0x3, 0x2, 0x2, 0x2, 0xb70, 0x197, 0x3, 0x2, 0x2, 0x2, 0xb71, 0xb72, 
       0x7, 0x7e, 0x2, 0x2, 0xb72, 0xb73, 0x7, 0x57, 0x2, 0x2, 0xb73, 0xb74, 
       0x5, 0xb2, 0x5a, 0x2, 0xb74, 0xb75, 0x5, 0x19a, 0xce, 0x2, 0xb75, 
       0x199, 0x3, 0x2, 0x2, 0x2, 0xb76, 0xb78, 0x7, 0x5d, 0x2, 0x2, 0xb77, 
       0xb76, 0x3, 0x2, 0x2, 0x2, 0xb77, 0xb78, 0x3, 0x2, 0x2, 0x2, 0xb78, 
       0xb7c, 0x3, 0x2, 0x2, 0x2, 0xb79, 0xb7b, 0x5, 0xe8, 0x75, 0x2, 0xb7a, 
       0xb79, 0x3, 0x2, 0x2, 0x2, 0xb7b, 0xb7e, 0x3, 0x2, 0x2, 0x2, 0xb7c, 
       0xb7a, 0x3, 0x2, 0x2, 0x2, 0xb7c, 0xb7d, 0x3, 0x2, 0x2, 0x2, 0xb7d, 
       0xb83, 0x3, 0x2, 0x2, 0x2, 0xb7e, 0xb7c, 0x3, 0x2, 0x2, 0x2, 0xb7f, 
       0xb83, 0x5, 0x2a, 0x16, 0x2, 0xb80, 0xb83, 0x5, 0x30, 0x19, 0x2, 
       0xb81, 0xb83, 0x5, 0x34, 0x1b, 0x2, 0xb82, 0xb77, 0x3, 0x2, 0x2, 
       0x2, 0xb82, 0xb7f, 0x3, 0x2, 0x2, 0x2, 0xb82, 0xb80, 0x3, 0x2, 0x2, 
       0x2, 0xb82, 0xb81, 0x3, 0x2, 0x2, 0x2, 0xb83, 0x19b, 0x3, 0x2, 0x2, 
       0x2, 0xb84, 0xb85, 0x7, 0x7e, 0x2, 0x2, 0xb85, 0xb87, 0x7, 0x1ab, 
       0x2, 0x2, 0xb86, 0xb88, 0x5, 0x7a, 0x3e, 0x2, 0xb87, 0xb86, 0x3, 
       0x2, 0x2, 0x2, 0xb87, 0xb88, 0x3, 0x2, 0x2, 0x2, 0xb88, 0xb89, 0x3, 
       0x2, 0x2, 0x2, 0xb89, 0xb8a, 0x5, 0x19e, 0xd0, 0x2, 0xb8a, 0xb8b, 
       0x5, 0x1a0, 0xd1, 0x2, 0xb8b, 0x19d, 0x3, 0x2, 0x2, 0x2, 0xb8c, 0xb90, 
       0x5, 0x41a, 0x20e, 0x2, 0xb8d, 0xb8f, 0x5, 0x7e, 0x40, 0x2, 0xb8e, 
       0xb8d, 0x3, 0x2, 0x2, 0x2, 0xb8f, 0xb92, 0x3, 0x2, 0x2, 0x2, 0xb90, 
       0xb8e, 0x3, 0x2, 0x2, 0x2, 0xb90, 0xb91, 0x3, 0x2, 0x2, 0x2, 0xb91, 
       0x19f, 0x3, 0x2, 0x2, 0x2, 0xb92, 0xb90, 0x3, 0x2, 0x2, 0x2, 0xb93, 
       0xb95, 0x7, 0x7e, 0x2, 0x2, 0xb94, 0xb96, 0x7, 0x13, 0x2, 0x2, 0xb95, 
       0xb94, 0x3, 0x2, 0x2, 0x2, 0xb95, 0xb96, 0x3, 0x2, 0x2, 0x2, 0xb96, 
       0xb97, 0x3, 0x2, 0x2, 0x2, 0xb97, 0xb9d, 0x5, 0x86, 0x44, 0x2, 0xb98, 
       0xb99, 0x7, 0x176, 0x2, 0x2, 0xb99, 0xb9a, 0x7, 0x1c, 0x2, 0x2, 0xb9a, 
       0xb9e, 0x5, 0x3a6, 0x1d4, 0x2, 0xb9b, 0xb9c, 0x7, 0xc5, 0x2, 0x2, 
       0xb9c, 0xb9e, 0x7, 0x1c, 0x2, 0x2, 0xb9d, 0xb98, 0x3, 0x2, 0x2, 0x2, 
       0xb9d, 0xb9b, 0x3, 0x2, 0x2, 0x2, 0xb9e, 0xba4, 0x3, 0x2, 0x2, 0x2, 
       0xb9f, 0xba4, 0x5, 0x28, 0x15, 0x2, 0xba0, 0xba4, 0x5, 0xa8, 0x55, 
       0x2, 0xba1, 0xba4, 0x5, 0xbe, 0x60, 0x2, 0xba2, 0xba4, 0x5, 0xc0, 
       0x61, 0x2, 0xba3, 0xb93, 0x3, 0x2, 0x2, 0x2, 0xba3, 0xb9f, 0x3, 0x2, 
       0x2, 0x2, 0xba3, 0xba0, 0x3, 0x2, 0x2, 0x2, 0xba3, 0xba1, 0x3, 0x2, 
       0x2, 0x2, 0xba3, 0xba2, 0x3, 0x2, 0x2, 0x2, 0xba4, 0x1a1, 0x3, 0x2, 
       0x2, 0x2, 0xba5, 0xba6, 0x9, 0x2d, 0x2, 0x2, 0xba6, 0xba7, 0x7, 0x1b0, 
       0x2, 0x2, 0xba7, 0xba8, 0x7, 0x2b, 0x2, 0x2, 0xba8, 0xbb4, 0x5, 0xac, 
       0x57, 0x2, 0xba9, 0xbaa, 0x7, 0x58, 0x2, 0x2, 0xbaa, 0xbab, 0x7, 
       0x161, 0x2, 0x2, 0xbab, 0xbac, 0x7, 0x140, 0x2, 0x2, 0xbac, 0xbb2, 
       0x5, 0xe0, 0x71, 0x2, 0xbad, 0xbae, 0x7, 0x5d, 0x2, 0x2, 0xbae, 0xbaf, 
       0x7, 0x269, 0x2, 0x2, 0xbaf, 0xbb0, 0x5, 0x1a, 0xe, 0x2, 0xbb0, 0xbb1, 
       0x7, 0x26a, 0x2, 0x2, 0xbb1, 0xbb3, 0x3, 0x2, 0x2, 0x2, 0xbb2, 0xbad, 
       0x3, 0x2, 0x2, 0x2, 0xbb2, 0xbb3, 0x3, 0x2, 0x2, 0x2, 0xbb3, 0xbb5, 
       0x3, 0x2, 0x2, 0x2, 0xbb4, 0xba9, 0x3, 0x2, 0x2, 0x2, 0xbb4, 0xbb5, 
       0x3, 0x2, 0x2, 0x2, 0xbb5, 0x1a3, 0x3, 0x2, 0x2, 0x2, 0xbb6, 0xbb7, 
       0x7, 0x15, 0x2, 0x2, 0xbb7, 0xbb8, 0x7, 0x80, 0x2, 0x2, 0xbb8, 0xbb9, 
       0x7, 0x1b0, 0x2, 0x2, 0xbb9, 0xbba, 0x7, 0x2b, 0x2, 0x2, 0xbba, 0xbbb, 
       0x7, 0x10e, 0x2, 0x2, 0xbbb, 0xbc1, 0x5, 0x14, 0xb, 0x2, 0xbbc, 0xbbd, 
       0x7, 0x5d, 0x2, 0x2, 0xbbd, 0xbbe, 0x7, 0x269, 0x2, 0x2, 0xbbe, 0xbbf, 
       0x5, 0x1a, 0xe, 0x2, 0xbbf, 0xbc0, 0x7, 0x26a, 0x2, 0x2, 0xbc0, 0xbc2, 
       0x3, 0x2, 0x2, 0x2, 0xbc1, 0xbbc, 0x3, 0x2, 0x2, 0x2, 0xbc1, 0xbc2, 
       0x3, 0x2, 0x2, 0x2, 0xbc2, 0x1a5, 0x3, 0x2, 0x2, 0x2, 0xbc3, 0xbc4, 
       0x7, 0x15, 0x2, 0x2, 0xbc4, 0xbc6, 0x7, 0x88, 0x2, 0x2, 0xbc5, 0xbc7, 
       0x5, 0x1a8, 0xd5, 0x2, 0xbc6, 0xbc5, 0x3, 0x2, 0x2, 0x2, 0xbc6, 0xbc7, 
       0x3, 0x2, 0x2, 0x2, 0xbc7, 0x1a7, 0x3, 0x2, 0x2, 0x2, 0xbc8, 0xbc9, 
       0x5, 0x41a, 0x20e, 0x2, 0xbc9, 0x1a9, 0x3, 0x2, 0x2, 0x2, 0xbca, 
       0xbcb, 0x7, 0x15, 0x2, 0x2, 0xbcb, 0xbcc, 0x7, 0xad, 0x2, 0x2, 0xbcc, 
       0xbd5, 0x5, 0x20, 0x11, 0x2, 0xbcd, 0xbcf, 0x7, 0x5d, 0x2, 0x2, 0xbce, 
       0xbcd, 0x3, 0x2, 0x2, 0x2, 0xbce, 0xbcf, 0x3, 0x2, 0x2, 0x2, 0xbcf, 
       0xbd1, 0x3, 0x2, 0x2, 0x2, 0xbd0, 0xbd2, 0x5, 0x1a, 0xe, 0x2, 0xbd1, 
       0xbd0, 0x3, 0x2, 0x2, 0x2, 0xbd2, 0xbd3, 0x3, 0x2, 0x2, 0x2, 0xbd3, 
       0xbd1, 0x3, 0x2, 0x2, 0x2, 0xbd3, 0xbd4, 0x3, 0x2, 0x2, 0x2, 0xbd4, 
       0xbd6, 0x3, 0x2, 0x2, 0x2, 0xbd5, 0xbce, 0x3, 0x2, 0x2, 0x2, 0xbd5, 
       0xbd6, 0x3, 0x2, 0x2, 0x2, 0xbd6, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0xbd7, 
       0xbd8, 0x7, 0x15, 0x2, 0x2, 0xbd8, 0xbd9, 0x7, 0xaf, 0x2, 0x2, 0xbd9, 
       0xbda, 0x7, 0x220, 0x2, 0x2, 0xbda, 0xbde, 0x5, 0x3a, 0x1e, 0x2, 
       0xbdb, 0xbdd, 0x5, 0x3e, 0x20, 0x2, 0xbdc, 0xbdb, 0x3, 0x2, 0x2, 
       0x2, 0xbdd, 0xbe0, 0x3, 0x2, 0x2, 0x2, 0xbde, 0xbdc, 0x3, 0x2, 0x2, 
       0x2, 0xbde, 0xbdf, 0x3, 0x2, 0x2, 0x2, 0xbdf, 0x1ad, 0x3, 0x2, 0x2, 
       0x2, 0xbe0, 0xbde, 0x3, 0x2, 0x2, 0x2, 0xbe1, 0xbe3, 0x7, 0x15, 0x2, 
       0x2, 0xbe2, 0xbe4, 0x5, 0x1b0, 0xd9, 0x2, 0xbe3, 0xbe2, 0x3, 0x2, 
       0x2, 0x2, 0xbe3, 0xbe4, 0x3, 0x2, 0x2, 0x2, 0xbe4, 0xbe5, 0x3, 0x2, 
       0x2, 0x2, 0xbe5, 0xbe6, 0x7, 0x223, 0x2, 0x2, 0xbe6, 0xbe7, 0x5, 
       0x76, 0x3c, 0x2, 0xbe7, 0xbe8, 0x7, 0xb, 0x2, 0x2, 0xbe8, 0xbe9, 
       0x7, 0x286, 0x2, 0x2, 0xbe9, 0x1af, 0x3, 0x2, 0x2, 0x2, 0xbea, 0xbeb, 
       0x7, 0x41, 0x2, 0x2, 0xbeb, 0xbec, 0x7, 0x15d, 0x2, 0x2, 0xbec, 0x1b1, 
       0x3, 0x2, 0x2, 0x2, 0xbed, 0xbee, 0x7, 0x15, 0x2, 0x2, 0xbee, 0xbef, 
       0x7, 0x26, 0x2, 0x2, 0xbef, 0xbf3, 0x7, 0x50, 0x2, 0x2, 0xbf0, 0xbf1, 
       0x7, 0xe9, 0x2, 0x2, 0xbf1, 0xbf2, 0x7, 0x3b, 0x2, 0x2, 0xbf2, 0xbf4, 
       0x7, 0x1c5, 0x2, 0x2, 0xbf3, 0xbf0, 0x3, 0x2, 0x2, 0x2, 0xbf3, 0xbf4, 
       0x3, 0x2, 0x2, 0x2, 0xbf4, 0xbf5, 0x3, 0x2, 0x2, 0x2, 0xbf5, 0xbf6, 
       0x5, 0x7c, 0x3f, 0x2, 0xbf6, 0xbf7, 0x5, 0x1b4, 0xdb, 0x2, 0xbf7, 
       0x1b3, 0x3, 0x2, 0x2, 0x2, 0xbf8, 0xbfb, 0x5, 0x1b6, 0xdc, 0x2, 0xbf9, 
       0xbfb, 0x5, 0x1be, 0xe0, 0x2, 0xbfa, 0xbf8, 0x3, 0x2, 0x2, 0x2, 0xbfa, 
       0xbf9, 0x3, 0x2, 0x2, 0x2, 0xbfb, 0x1b5, 0x3, 0x2, 0x2, 0x2, 0xbfc, 
       0xbfd, 0x7, 0x269, 0x2, 0x2, 0xbfd, 0xbfe, 0x5, 0x1b8, 0xdd, 0x2, 
       0xbfe, 0xbff, 0x7, 0x26a, 0x2, 0x2, 0xbff, 0xc00, 0x7, 0x174, 0x2, 
       0x2, 0xc00, 0xc01, 0x5, 0x102, 0x82, 0x2, 0xc01, 0xc04, 0x5, 0x40, 
       0x21, 0x2, 0xc02, 0xc03, 0x9, 0x2e, 0x2, 0x2, 0xc03, 0xc05, 0x7, 
       0x3e, 0x2, 0x2, 0xc04, 0xc02, 0x3, 0x2, 0x2, 0x2, 0xc04, 0xc05, 0x3, 
       0x2, 0x2, 0x2, 0xc05, 0xc0c, 0x3, 0x2, 0x2, 0x2, 0xc06, 0xc0a, 0x7, 
       0x5d, 0x2, 0x2, 0xc07, 0xc08, 0x7, 0x10c, 0x2, 0x2, 0xc08, 0xc0a, 
       0x7, 0x2f, 0x2, 0x2, 0xc09, 0xc06, 0x3, 0x2, 0x2, 0x2, 0xc09, 0xc07, 
       0x3, 0x2, 0x2, 0x2, 0xc0a, 0xc0b, 0x3, 0x2, 0x2, 0x2, 0xc0b, 0xc0d, 
       0x5, 0x7c, 0x3f, 0x2, 0xc0c, 0xc09, 0x3, 0x2, 0x2, 0x2, 0xc0c, 0xc0d, 
       0x3, 0x2, 0x2, 0x2, 0xc0d, 0xc11, 0x3, 0x2, 0x2, 0x2, 0xc0e, 0xc0f, 
       0x7, 0x15a, 0x2, 0x2, 0xc0f, 0xc10, 0x7, 0x10c, 0x2, 0x2, 0xc10, 
       0xc12, 0x7, 0x286, 0x2, 0x2, 0xc11, 0xc0e, 0x3, 0x2, 0x2, 0x2, 0xc11, 
       0xc12, 0x3, 0x2, 0x2, 0x2, 0xc12, 0xc18, 0x3, 0x2, 0x2, 0x2, 0xc13, 
       0xc14, 0x7, 0x13e, 0x2, 0x2, 0xc14, 0xc15, 0x7, 0x121, 0x2, 0x2, 
       0xc15, 0xc16, 0x7, 0x47, 0x2, 0x2, 0xc16, 0xc17, 0x7, 0x34, 0x2, 
       0x2, 0xc17, 0xc19, 0x7, 0x286, 0x2, 0x2, 0xc18, 0xc13, 0x3, 0x2, 
       0x2, 0x2, 0xc18, 0xc19, 0x3, 0x2, 0x2, 0x2, 0xc19, 0xc1b, 0x3, 0x2, 
       0x2, 0x2, 0xc1a, 0xc1c, 0x5, 0x1bc, 0xdf, 0x2, 0xc1b, 0xc1a, 0x3, 
       0x2, 0x2, 0x2, 0xc1b, 0xc1c, 0x3, 0x2, 0x2, 0x2, 0xc1c, 0x1b7, 0x3, 
       0x2, 0x2, 0x2, 0xc1d, 0xc22, 0x5, 0x1ba, 0xde, 0x2, 0xc1e, 0xc1f, 
       0x7, 0x26f, 0x2, 0x2, 0xc1f, 0xc21, 0x5, 0x1ba, 0xde, 0x2, 0xc20, 
       0xc1e, 0x3, 0x2, 0x2, 0x2, 0xc21, 0xc24, 0x3, 0x2, 0x2, 0x2, 0xc22, 
       0xc20, 0x3, 0x2, 0x2, 0x2, 0xc22, 0xc23, 0x3, 0x2, 0x2, 0x2, 0xc23, 
       0x1b9, 0x3, 0x2, 0x2, 0x2, 0xc24, 0xc22, 0x3, 0x2, 0x2, 0x2, 0xc25, 
       0xc2d, 0x5, 0x126, 0x94, 0x2, 0xc26, 0xc27, 0x7, 0x1d8, 0x2, 0x2, 
       0xc27, 0xc28, 0x7, 0x269, 0x2, 0x2, 0xc28, 0xc29, 0x5, 0x3c6, 0x1e4, 
       0x2, 0xc29, 0xc2a, 0x7, 0x26f, 0x2, 0x2, 0xc2a, 0xc2b, 0x5, 0x3c6, 
       0x1e4, 0x2, 0xc2b, 0xc2c, 0x7, 0x26a, 0x2, 0x2, 0xc2c, 0xc2e, 0x3, 
       0x2, 0x2, 0x2, 0xc2d, 0xc26, 0x3, 0x2, 0x2, 0x2, 0xc2d, 0xc2e, 0x3, 
       0x2, 0x2, 0x2, 0xc2e, 0xc32, 0x3, 0x2, 0x2, 0x2, 0xc2f, 0xc30, 0x7, 
       0x6b, 0x2, 0x2, 0xc30, 0xc32, 0x5, 0x7c, 0x3f, 0x2, 0xc31, 0xc25, 
       0x3, 0x2, 0x2, 0x2, 0xc31, 0xc2f, 0x3, 0x2, 0x2, 0x2, 0xc32, 0x1bb, 
       0x3, 0x2, 0x2, 0x2, 0xc33, 0xc38, 0x7, 0x52, 0x2, 0x2, 0xc34, 0xc35, 
       0x7, 0x2b, 0x2, 0x2, 0xc35, 0xc39, 0x5, 0xac, 0x57, 0x2, 0xc36, 0xc37, 
       0x7, 0x121, 0x2, 0x2, 0xc37, 0xc39, 0x5, 0xd0, 0x69, 0x2, 0xc38, 
       0xc34, 0x3, 0x2, 0x2, 0x2, 0xc38, 0xc36, 0x3, 0x2, 0x2, 0x2, 0xc39, 
       0x1bd, 0x3, 0x2, 0x2, 0x2, 0xc3a, 0xc3b, 0x7, 0x269, 0x2, 0x2, 0xc3b, 
       0xc3c, 0x5, 0x1c0, 0xe1, 0x2, 0xc3c, 0xc3d, 0x7, 0x26a, 0x2, 0x2, 
       0xc3d, 0xc3e, 0x7, 0x174, 0x2, 0x2, 0xc3e, 0xc3f, 0x5, 0x102, 0x82, 
       0x2, 0xc3f, 0xc40, 0x5, 0x40, 0x21, 0x2, 0xc40, 0xc41, 0x7, 0xc0, 
       0x2, 0x2, 0xc41, 0xc42, 0x7, 0x8c, 0x2, 0x2, 0xc42, 0xc44, 0x9, 0x2f, 
       0x2, 0x2, 0xc43, 0xc45, 0x5, 0x1bc, 0xdf, 0x2, 0xc44, 0xc43, 0x3, 
       0x2, 0x2, 0x2, 0xc44, 0xc45, 0x3, 0x2, 0x2, 0x2, 0xc45, 0xc4c, 0x3, 
       0x2, 0x2, 0x2, 0xc46, 0xc47, 0x7, 0x139, 0x2, 0x2, 0xc47, 0xc48, 
       0x7, 0x8c, 0x2, 0x2, 0xc48, 0xc4a, 0x5, 0x138, 0x9d, 0x2, 0xc49, 
       0xc4b, 0x7, 0x86, 0x2, 0x2, 0xc4a, 0xc49, 0x3, 0x2, 0x2, 0x2, 0xc4a, 
       0xc4b, 0x3, 0x2, 0x2, 0x2, 0xc4b, 0xc4d, 0x3, 0x2, 0x2, 0x2, 0xc4c, 
       0xc46, 0x3, 0x2, 0x2, 0x2, 0xc4c, 0xc4d, 0x3, 0x2, 0x2, 0x2, 0xc4d, 
       0x1bf, 0x3, 0x2, 0x2, 0x2, 0xc4e, 0xc53, 0x5, 0x1c2, 0xe2, 0x2, 0xc4f, 
       0xc50, 0x7, 0x26f, 0x2, 0x2, 0xc50, 0xc52, 0x5, 0x1c2, 0xe2, 0x2, 
       0xc51, 0xc4f, 0x3, 0x2, 0x2, 0x2, 0xc52, 0xc55, 0x3, 0x2, 0x2, 0x2, 
       0xc53, 0xc51, 0x3, 0x2, 0x2, 0x2, 0xc53, 0xc54, 0x3, 0x2, 0x2, 0x2, 
       0xc54, 0x1c1, 0x3, 0x2, 0x2, 0x2, 0xc55, 0xc53, 0x3, 0x2, 0x2, 0x2, 
       0xc56, 0xc64, 0x5, 0x126, 0x94, 0x2, 0xc57, 0xc58, 0x7, 0x14, 0x2, 
       0x2, 0xc58, 0xc5a, 0x5, 0x90, 0x49, 0x2, 0xc59, 0xc57, 0x3, 0x2, 
       0x2, 0x2, 0xc59, 0xc5a, 0x3, 0x2, 0x2, 0x2, 0xc5a, 0xc5c, 0x3, 0x2, 
       0x2, 0x2, 0xc5b, 0xc5d, 0x7, 0x3b, 0x2, 0x2, 0xc5c, 0xc5b, 0x3, 0x2, 
       0x2, 0x2, 0xc5c, 0xc5d, 0x3, 0x2, 0x2, 0x2, 0xc5d, 0xc5e, 0x3, 0x2, 
       0x2, 0x2, 0xc5e, 0xc65, 0x7, 0x3c, 0x2, 0x2, 0xc5f, 0xc61, 0x5, 0x1c4, 
       0xe3, 0x2, 0xc60, 0xc5f, 0x3, 0x2, 0x2, 0x2, 0xc61, 0xc62, 0x3, 0x2, 
       0x2, 0x2, 0xc62, 0xc60, 0x3, 0x2, 0x2, 0x2, 0xc62, 0xc63, 0x3, 0x2, 
       0x2, 0x2, 0xc63, 0xc65, 0x3, 0x2, 0x2, 0x2, 0xc64, 0xc59, 0x3, 0x2, 
       0x2, 0x2, 0xc64, 0xc60, 0x3, 0x2, 0x2, 0x2, 0xc64, 0xc65, 0x3, 0x2, 
       0x2, 0x2, 0xc65, 0xc6f, 0x3, 0x2, 0x2, 0x2, 0xc66, 0xc6b, 0x5, 0x1c4, 
       0xe3, 0x2, 0xc67, 0xc68, 0x7, 0x26f, 0x2, 0x2, 0xc68, 0xc6a, 0x5, 
       0x1c4, 0xe3, 0x2, 0xc69, 0xc67, 0x3, 0x2, 0x2, 0x2, 0xc6a, 0xc6d, 
       0x3, 0x2, 0x2, 0x2, 0xc6b, 0xc69, 0x3, 0x2, 0x2, 0x2, 0xc6b, 0xc6c, 
       0x3, 0x2, 0x2, 0x2, 0xc6c, 0xc6f, 0x3, 0x2, 0x2, 0x2, 0xc6d, 0xc6b, 
       0x3, 0x2, 0x2, 0x2, 0xc6e, 0xc56, 0x3, 0x2, 0x2, 0x2, 0xc6e, 0xc66, 
       0x3, 0x2, 0x2, 0x2, 0xc6f, 0x1c3, 0x3, 0x2, 0x2, 0x2, 0xc70, 0xc71, 
       0x7, 0x14, 0x2, 0x2, 0xc71, 0xc73, 0x5, 0x90, 0x49, 0x2, 0xc72, 0xc70, 
       0x3, 0x2, 0x2, 0x2, 0xc72, 0xc73, 0x3, 0x2, 0x2, 0x2, 0xc73, 0xc74, 
       0x3, 0x2, 0x2, 0x2, 0xc74, 0xc76, 0x5, 0x8e, 0x48, 0x2, 0xc75, 0xc77, 
       0x5, 0x92, 0x4a, 0x2, 0xc76, 0xc75, 0x3, 0x2, 0x2, 0x2, 0xc76, 0xc77, 
       0x3, 0x2, 0x2, 0x2, 0xc77, 0x1c5, 0x3, 0x2, 0x2, 0x2, 0xc78, 0xc7a, 
       0x7, 0x15, 0x2, 0x2, 0xc79, 0xc7b, 0x5, 0x1b0, 0xd9, 0x2, 0xc7a, 
       0xc79, 0x3, 0x2, 0x2, 0x2, 0xc7a, 0xc7b, 0x3, 0x2, 0x2, 0x2, 0xc7b, 
       0xc7c, 0x3, 0x2, 0x2, 0x2, 0xc7c, 0xc7d, 0x9, 0x30, 0x2, 0x2, 0xc7d, 
       0xc83, 0x5, 0x410, 0x209, 0x2, 0xc7e, 0xc80, 0x7, 0x269, 0x2, 0x2, 
       0xc7f, 0xc81, 0x5, 0x1ca, 0xe6, 0x2, 0xc80, 0xc7f, 0x3, 0x2, 0x2, 
       0x2, 0xc80, 0xc81, 0x3, 0x2, 0x2, 0x2, 0xc81, 0xc82, 0x3, 0x2, 0x2, 
       0x2, 0xc82, 0xc84, 0x7, 0x26a, 0x2, 0x2, 0xc83, 0xc7e, 0x3, 0x2, 
       0x2, 0x2, 0xc83, 0xc84, 0x3, 0x2, 0x2, 0x2, 0xc84, 0xc87, 0x3, 0x2, 
       0x2, 0x2, 0xc85, 0xc86, 0x9, 0x31, 0x2, 0x2, 0xc86, 0xc88, 0x5, 0x1ce, 
       0xe8, 0x2, 0xc87, 0xc85, 0x3, 0x2, 0x2, 0x2, 0xc87, 0xc88, 0x3, 0x2, 
       0x2, 0x2, 0xc88, 0xc8c, 0x3, 0x2, 0x2, 0x2, 0xc89, 0xc8b, 0x5, 0x1c8, 
       0xe5, 0x2, 0xc8a, 0xc89, 0x3, 0x2, 0x2, 0x2, 0xc8b, 0xc8e, 0x3, 0x2, 
       0x2, 0x2, 0xc8c, 0xc8a, 0x3, 0x2, 0x2, 0x2, 0xc8c, 0xc8d, 0x3, 0x2, 
       0x2, 0x2, 0xc8d, 0x1c7, 0x3, 0x2, 0x2, 0x2, 0xc8e, 0xc8c, 0x3, 0x2, 
       0x2, 0x2, 0xc8f, 0xc90, 0x7, 0xfe, 0x2, 0x2, 0xc90, 0xc9b, 0x5, 0x1d0, 
       0xe9, 0x2, 0xc91, 0xc93, 0x5, 0xa6, 0x54, 0x2, 0xc92, 0xc91, 0x3, 
       0x2, 0x2, 0x2, 0xc93, 0xc94, 0x3, 0x2, 0x2, 0x2, 0xc94, 0xc92, 0x3, 
       0x2, 0x2, 0x2, 0xc94, 0xc95, 0x3, 0x2, 0x2, 0x2, 0xc95, 0xc9b, 0x3, 
       0x2, 0x2, 0x2, 0xc96, 0xc98, 0x5, 0x1d2, 0xea, 0x2, 0xc97, 0xc99, 
       0x5, 0x1d4, 0xeb, 0x2, 0xc98, 0xc97, 0x3, 0x2, 0x2, 0x2, 0xc98, 0xc99, 
       0x3, 0x2, 0x2, 0x2, 0xc99, 0xc9b, 0x3, 0x2, 0x2, 0x2, 0xc9a, 0xc8f, 
       0x3, 0x2, 0x2, 0x2, 0xc9a, 0xc92, 0x3, 0x2, 0x2, 0x2, 0xc9a, 0xc96, 
       0x3, 0x2, 0x2, 0x2, 0xc9b, 0x1c9, 0x3, 0x2, 0x2, 0x2, 0xc9c, 0xca1, 
       0x5, 0x1cc, 0xe7, 0x2, 0xc9d, 0xc9e, 0x7, 0x26f, 0x2, 0x2, 0xc9e, 
       0xca0, 0x5, 0x1cc, 0xe7, 0x2, 0xc9f, 0xc9d, 0x3, 0x2, 0x2, 0x2, 0xca0, 
       0xca3, 0x3, 0x2, 0x2, 0x2, 0xca1, 0xc9f, 0x3, 0x2, 0x2, 0x2, 0xca1, 
       0xca2, 0x3, 0x2, 0x2, 0x2, 0xca2, 0x1cb, 0x3, 0x2, 0x2, 0x2, 0xca3, 
       0xca1, 0x3, 0x2, 0x2, 0x2, 0xca4, 0xca6, 0x5, 0xa2, 0x52, 0x2, 0xca5, 
       0xca4, 0x3, 0x2, 0x2, 0x2, 0xca5, 0xca6, 0x3, 0x2, 0x2, 0x2, 0xca6, 
       0xca8, 0x3, 0x2, 0x2, 0x2, 0xca7, 0xca9, 0x5, 0xa0, 0x51, 0x2, 0xca8, 
       0xca7, 0x3, 0x2, 0x2, 0x2, 0xca8, 0xca9, 0x3, 0x2, 0x2, 0x2, 0xca9, 
       0xcaa, 0x3, 0x2, 0x2, 0x2, 0xcaa, 0xcb3, 0x5, 0x3c2, 0x1e2, 0x2, 
       0xcab, 0xcb1, 0x7, 0x1c, 0x2, 0x2, 0xcac, 0xcae, 0x7, 0x27b, 0x2, 
       0x2, 0xcad, 0xcac, 0x3, 0x2, 0x2, 0x2, 0xcad, 0xcae, 0x3, 0x2, 0x2, 
       0x2, 0xcae, 0xcaf, 0x3, 0x2, 0x2, 0x2, 0xcaf, 0xcb1, 0x7, 0x280, 
       0x2, 0x2, 0xcb0, 0xcab, 0x3, 0x2, 0x2, 0x2, 0xcb0, 0xcad, 0x3, 0x2, 
       0x2, 0x2, 0xcb1, 0xcb2, 0x3, 0x2, 0x2, 0x2, 0xcb2, 0xcb4, 0x5, 0x3a6, 
       0x1d4, 0x2, 0xcb3, 0xcb0, 0x3, 0x2, 0x2, 0x2, 0xcb3, 0xcb4, 0x3, 
       0x2, 0x2, 0x2, 0xcb4, 0x1cd, 0x3, 0x2, 0x2, 0x2, 0xcb5, 0xcb7, 0x7, 
       0x1dc, 0x2, 0x2, 0xcb6, 0xcb5, 0x3, 0x2, 0x2, 0x2, 0xcb6, 0xcb7, 
       0x3, 0x2, 0x2, 0x2, 0xcb7, 0xcb8, 0x3, 0x2, 0x2, 0x2, 0xcb8, 0xcba, 
       0x5, 0x3c2, 0x1e2, 0x2, 0xcb9, 0xcbb, 0x7, 0xbb, 0x2, 0x2, 0xcba, 
       0xcb9, 0x3, 0x2, 0x2, 0x2, 0xcba, 0xcbb, 0x3, 0x2, 0x2, 0x2, 0xcbb, 
       0xcc9, 0x3, 0x2, 0x2, 0x2, 0xcbc, 0xcbd, 0x7, 0x50, 0x2, 0x2, 0xcbd, 
       0xcbe, 0x7, 0x269, 0x2, 0x2, 0xcbe, 0xcc3, 0x5, 0x126, 0x94, 0x2, 
       0xcbf, 0xcc0, 0x7, 0x26f, 0x2, 0x2, 0xcc0, 0xcc2, 0x5, 0x126, 0x94, 
       0x2, 0xcc1, 0xcbf, 0x3, 0x2, 0x2, 0x2, 0xcc2, 0xcc5, 0x3, 0x2, 0x2, 
       0x2, 0xcc3, 0xcc1, 0x3, 0x2, 0x2, 0x2, 0xcc3, 0xcc4, 0x3, 0x2, 0x2, 
       0x2, 0xcc4, 0xcc6, 0x3, 0x2, 0x2, 0x2, 0xcc5, 0xcc3, 0x3, 0x2, 0x2, 
       0x2, 0xcc6, 0xcc7, 0x7, 0x26a, 0x2, 0x2, 0xcc7, 0xcc9, 0x3, 0x2, 
       0x2, 0x2, 0xcc8, 0xcb6, 0x3, 0x2, 0x2, 0x2, 0xcc8, 0xcbc, 0x3, 0x2, 
       0x2, 0x2, 0xcc9, 0x1cf, 0x3, 0x2, 0x2, 0x2, 0xcca, 0xccb, 0x5, 0x41a, 
       0x20e, 0x2, 0xccb, 0x1d1, 0x3, 0x2, 0x2, 0x2, 0xccc, 0xcd3, 0x7, 
       0xb, 0x2, 0x2, 0xccd, 0xccf, 0x7, 0x26f, 0x2, 0x2, 0xcce, 0xccd, 
       0x3, 0x2, 0x2, 0x2, 0xcce, 0xccf, 0x3, 0x2, 0x2, 0x2, 0xccf, 0xcd0, 
       0x3, 0x2, 0x2, 0x2, 0xcd0, 0xcd2, 0x9, 0x2c, 0x2, 0x2, 0xcd1, 0xcce, 
       0x3, 0x2, 0x2, 0x2, 0xcd2, 0xcd5, 0x3, 0x2, 0x2, 0x2, 0xcd3, 0xcd1, 
       0x3, 0x2, 0x2, 0x2, 0xcd3, 0xcd4, 0x3, 0x2, 0x2, 0x2, 0xcd4, 0xcd8, 
       0x3, 0x2, 0x2, 0x2, 0xcd5, 0xcd3, 0x3, 0x2, 0x2, 0x2, 0xcd6, 0xcd8, 
       0x7, 0x31, 0x2, 0x2, 0xcd7, 0xccc, 0x3, 0x2, 0x2, 0x2, 0xcd7, 0xcd6, 
       0x3, 0x2, 0x2, 0x2, 0xcd8, 0x1d3, 0x3, 0x2, 0x2, 0x2, 0xcd9, 0xcdb, 
       0x7, 0xb3, 0x2, 0x2, 0xcda, 0xcdc, 0x5, 0x1d6, 0xec, 0x2, 0xcdb, 
       0xcda, 0x3, 0x2, 0x2, 0x2, 0xcdb, 0xcdc, 0x3, 0x2, 0x2, 0x2, 0xcdc, 
       0xcde, 0x3, 0x2, 0x2, 0x2, 0xcdd, 0xcdf, 0x5, 0x1dc, 0xef, 0x2, 0xcde, 
       0xcdd, 0x3, 0x2, 0x2, 0x2, 0xcde, 0xcdf, 0x3, 0x2, 0x2, 0x2, 0xcdf, 
       0xce1, 0x3, 0x2, 0x2, 0x2, 0xce0, 0xcd9, 0x3, 0x2, 0x2, 0x2, 0xce0, 
       0xce1, 0x3, 0x2, 0x2, 0x2, 0xce1, 0xce2, 0x3, 0x2, 0x2, 0x2, 0xce2, 
       0xce3, 0x7, 0x8a, 0x2, 0x2, 0xce3, 0xce4, 0x5, 0x1e0, 0xf1, 0x2, 
       0xce4, 0xce5, 0x7, 0x22, 0x2, 0x2, 0xce5, 0x1d5, 0x3, 0x2, 0x2, 0x2, 
       0xce6, 0xceb, 0x5, 0x1d8, 0xed, 0x2, 0xce7, 0xce8, 0x7, 0x27c, 0x2, 
       0x2, 0xce8, 0xcea, 0x5, 0x1d8, 0xed, 0x2, 0xce9, 0xce7, 0x3, 0x2, 
       0x2, 0x2, 0xcea, 0xced, 0x3, 0x2, 0x2, 0x2, 0xceb, 0xce9, 0x3, 0x2, 
       0x2, 0x2, 0xceb, 0xcec, 0x3, 0x2, 0x2, 0x2, 0xcec, 0xcee, 0x3, 0x2, 
       0x2, 0x2, 0xced, 0xceb, 0x3, 0x2, 0x2, 0x2, 0xcee, 0xcef, 0x7, 0x27c, 
       0x2, 0x2, 0xcef, 0x1d7, 0x3, 0x2, 0x2, 0x2, 0xcf0, 0xcf2, 0x5, 0x41a, 
       0x20e, 0x2, 0xcf1, 0xcf3, 0x7, 0x265, 0x2, 0x2, 0xcf2, 0xcf1, 0x3, 
       0x2, 0x2, 0x2, 0xcf2, 0xcf3, 0x3, 0x2, 0x2, 0x2, 0xcf3, 0xcf4, 0x3, 
       0x2, 0x2, 0x2, 0xcf4, 0xcf7, 0x5, 0x3c2, 0x1e2, 0x2, 0xcf5, 0xcf6, 
       0x7, 0x3b, 0x2, 0x2, 0xcf6, 0xcf8, 0x7, 0x3c, 0x2, 0x2, 0xcf7, 0xcf5, 
       0x3, 0x2, 0x2, 0x2, 0xcf7, 0xcf8, 0x3, 0x2, 0x2, 0x2, 0xcf8, 0xcfa, 
       0x3, 0x2, 0x2, 0x2, 0xcf9, 0xcfb, 0x5, 0x1da, 0xee, 0x2, 0xcfa, 0xcf9, 
       0x3, 0x2, 0x2, 0x2, 0xcfa, 0xcfb, 0x3, 0x2, 0x2, 0x2, 0xcfb, 0x1d9, 
       0x3, 0x2, 0x2, 0x2, 0xcfc, 0xcfd, 0x7, 0x27b, 0x2, 0x2, 0xcfd, 0xd00, 
       0x7, 0x280, 0x2, 0x2, 0xcfe, 0xd00, 0x7, 0x1c, 0x2, 0x2, 0xcff, 0xcfc, 
       0x3, 0x2, 0x2, 0x2, 0xcff, 0xcfe, 0x3, 0x2, 0x2, 0x2, 0xd00, 0xd01, 
       0x3, 0x2, 0x2, 0x2, 0xd01, 0xd02, 0x5, 0x3a6, 0x1d4, 0x2, 0xd02, 
       0x1db, 0x3, 0x2, 0x2, 0x2, 0xd03, 0xd04, 0x7, 0xab, 0x2, 0x2, 0xd04, 
       0xd10, 0x5, 0x2fa, 0x17e, 0x2, 0xd05, 0xd0a, 0x7, 0x269, 0x2, 0x2, 
       0xd06, 0xd08, 0x7, 0x26f, 0x2, 0x2, 0xd07, 0xd06, 0x3, 0x2, 0x2, 
       0x2, 0xd07, 0xd08, 0x3, 0x2, 0x2, 0x2, 0xd08, 0xd09, 0x3, 0x2, 0x2, 
       0x2, 0xd09, 0xd0b, 0x5, 0x1de, 0xf0, 0x2, 0xd0a, 0xd07, 0x3, 0x2, 
       0x2, 0x2, 0xd0b, 0xd0c, 0x3, 0x2, 0x2, 0x2, 0xd0c, 0xd0a, 0x3, 0x2, 
       0x2, 0x2, 0xd0c, 0xd0d, 0x3, 0x2, 0x2, 0x2, 0xd0d, 0xd0e, 0x3, 0x2, 
       0x2, 0x2, 0xd0e, 0xd0f, 0x7, 0x26a, 0x2, 0x2, 0xd0f, 0xd11, 0x3, 
       0x2, 0x2, 0x2, 0xd10, 0xd05, 0x3, 0x2, 0x2, 0x2, 0xd10, 0xd11, 0x3, 
       0x2, 0x2, 0x2, 0xd11, 0xd12, 0x3, 0x2, 0x2, 0x2, 0xd12, 0xd13, 0x7, 
       0x27, 0x2, 0x2, 0xd13, 0xd14, 0x5, 0x23e, 0x120, 0x2, 0xd14, 0xd15, 
       0x7, 0x27c, 0x2, 0x2, 0xd15, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0xd16, 0xd17, 
       0x5, 0xc6, 0x64, 0x2, 0xd17, 0xd18, 0x5, 0x3c2, 0x1e2, 0x2, 0xd18, 
       0x1df, 0x3, 0x2, 0x2, 0x2, 0xd19, 0xd1e, 0x5, 0x1e2, 0xf2, 0x2, 0xd1a, 
       0xd1b, 0x7, 0x27c, 0x2, 0x2, 0xd1b, 0xd1d, 0x5, 0x1e2, 0xf2, 0x2, 
       0xd1c, 0xd1a, 0x3, 0x2, 0x2, 0x2, 0xd1d, 0xd20, 0x3, 0x2, 0x2, 0x2, 
       0xd1e, 0xd1c, 0x3, 0x2, 0x2, 0x2, 0xd1e, 0xd1f, 0x3, 0x2, 0x2, 0x2, 
       0xd1f, 0xd22, 0x3, 0x2, 0x2, 0x2, 0xd20, 0xd1e, 0x3, 0x2, 0x2, 0x2, 
       0xd21, 0xd23, 0x7, 0x27c, 0x2, 0x2, 0xd22, 0xd21, 0x3, 0x2, 0x2, 
       0x2, 0xd22, 0xd23, 0x3, 0x2, 0x2, 0x2, 0xd23, 0x1e1, 0x3, 0x2, 0x2, 
       0x2, 0xd24, 0xd27, 0x5, 0x8, 0x5, 0x2, 0xd25, 0xd27, 0x5, 0x1a, 0xe, 
       0x2, 0xd26, 0xd24, 0x3, 0x2, 0x2, 0x2, 0xd26, 0xd25, 0x3, 0x2, 0x2, 
       0x2, 0xd27, 0x1e3, 0x3, 0x2, 0x2, 0x2, 0xd28, 0xd29, 0x7, 0x15, 0x2, 
       0x2, 0xd29, 0xd2a, 0x7, 0x2b, 0x2, 0x2, 0xd2a, 0xd33, 0x5, 0xac, 
       0x57, 0x2, 0xd2b, 0xd2d, 0x7, 0x5d, 0x2, 0x2, 0xd2c, 0xd2b, 0x3, 
       0x2, 0x2, 0x2, 0xd2c, 0xd2d, 0x3, 0x2, 0x2, 0x2, 0xd2d, 0xd2f, 0x3, 
       0x2, 0x2, 0x2, 0xd2e, 0xd30, 0x5, 0xe8, 0x75, 0x2, 0xd2f, 0xd2e, 
       0x3, 0x2, 0x2, 0x2, 0xd30, 0xd31, 0x3, 0x2, 0x2, 0x2, 0xd31, 0xd2f, 
       0x3, 0x2, 0x2, 0x2, 0xd31, 0xd32, 0x3, 0x2, 0x2, 0x2, 0xd32, 0xd34, 
       0x3, 0x2, 0x2, 0x2, 0xd33, 0xd2c, 0x3, 0x2, 0x2, 0x2, 0xd33, 0xd34, 
       0x3, 0x2, 0x2, 0x2, 0xd34, 0xd36, 0x3, 0x2, 0x2, 0x2, 0xd35, 0xd37, 
       0x9, 0x1c, 0x2, 0x2, 0xd36, 0xd35, 0x3, 0x2, 0x2, 0x2, 0xd36, 0xd37, 
       0x3, 0x2, 0x2, 0x2, 0xd37, 0xd38, 0x3, 0x2, 0x2, 0x2, 0xd38, 0xd39, 
       0x5, 0xea, 0x76, 0x2, 0xd39, 0x1e5, 0x3, 0x2, 0x2, 0x2, 0xd3a, 0xd3c, 
       0x7, 0x15, 0x2, 0x2, 0xd3b, 0xd3d, 0x7, 0x56, 0x2, 0x2, 0xd3c, 0xd3b, 
       0x3, 0x2, 0x2, 0x2, 0xd3c, 0xd3d, 0x3, 0x2, 0x2, 0x2, 0xd3d, 0xd3e, 
       0x3, 0x2, 0x2, 0x2, 0xd3e, 0xd40, 0x7, 0xf0, 0x2, 0x2, 0xd3f, 0xd41, 
       0x5, 0xb6, 0x5c, 0x2, 0xd40, 0xd3f, 0x3, 0x2, 0x2, 0x2, 0xd40, 0xd41, 
       0x3, 0x2, 0x2, 0x2, 0xd41, 0xd42, 0x3, 0x2, 0x2, 0x2, 0xd42, 0xd43, 
       0x7, 0x3f, 0x2, 0x2, 0xd43, 0xd45, 0x5, 0x7c, 0x3f, 0x2, 0xd44, 0xd46, 
       0x5, 0xf6, 0x7c, 0x2, 0xd45, 0xd44, 0x3, 0x2, 0x2, 0x2, 0xd45, 0xd46, 
       0x3, 0x2, 0x2, 0x2, 0xd46, 0xd47, 0x3, 0x2, 0x2, 0x2, 0xd47, 0xd4a, 
       0x5, 0x1e8, 0xf5, 0x2, 0xd48, 0xd49, 0x7, 0x5d, 0x2, 0x2, 0xd49, 
       0xd4b, 0x5, 0x16, 0xc, 0x2, 0xd4a, 0xd48, 0x3, 0x2, 0x2, 0x2, 0xd4a, 
       0xd4b, 0x3, 0x2, 0x2, 0x2, 0xd4b, 0xd4d, 0x3, 0x2, 0x2, 0x2, 0xd4c, 
       0xd4e, 0x5, 0xbc, 0x5f, 0x2, 0xd4d, 0xd4c, 0x3, 0x2, 0x2, 0x2, 0xd4d, 
       0xd4e, 0x3, 0x2, 0x2, 0x2, 0xd4e, 0xd51, 0x3, 0x2, 0x2, 0x2, 0xd4f, 
       0xd50, 0x7, 0x5b, 0x2, 0x2, 0xd50, 0xd52, 0x5, 0x3a6, 0x1d4, 0x2, 
       0xd51, 0xd4f, 0x3, 0x2, 0x2, 0x2, 0xd51, 0xd52, 0x3, 0x2, 0x2, 0x2, 
       0xd52, 0x1e7, 0x3, 0x2, 0x2, 0x2, 0xd53, 0xd58, 0x5, 0x1ea, 0xf6, 
       0x2, 0xd54, 0xd55, 0x7, 0x26f, 0x2, 0x2, 0xd55, 0xd57, 0x5, 0x1ea, 
       0xf6, 0x2, 0xd56, 0xd54, 0x3, 0x2, 0x2, 0x2, 0xd57, 0xd5a, 0x3, 0x2, 
       0x2, 0x2, 0xd58, 0xd56, 0x3, 0x2, 0x2, 0x2, 0xd58, 0xd59, 0x3, 0x2, 
       0x2, 0x2, 0xd59, 0x1e9, 0x3, 0x2, 0x2, 0x2, 0xd5a, 0xd58, 0x3, 0x2, 
       0x2, 0x2, 0xd5b, 0xd61, 0x5, 0x86, 0x44, 0x2, 0xd5c, 0xd5d, 0x7, 
       0x269, 0x2, 0x2, 0xd5d, 0xd5e, 0x5, 0x3a6, 0x1d4, 0x2, 0xd5e, 0xd5f, 
       0x7, 0x26a, 0x2, 0x2, 0xd5f, 0xd61, 0x3, 0x2, 0x2, 0x2, 0xd60, 0xd5b, 
       0x3, 0x2, 0x2, 0x2, 0xd60, 0xd5c, 0x3, 0x2, 0x2, 0x2, 0xd61, 0xd63, 
       0x3, 0x2, 0x2, 0x2, 0xd62, 0xd64, 0x5, 0x12a, 0x96, 0x2, 0xd63, 0xd62, 
       0x3, 0x2, 0x2, 0x2, 0xd63, 0xd64, 0x3, 0x2, 0x2, 0x2, 0xd64, 0xd66, 
       0x3, 0x2, 0x2, 0x2, 0xd65, 0xd67, 0x5, 0x1ec, 0xf7, 0x2, 0xd66, 0xd65, 
       0x3, 0x2, 0x2, 0x2, 0xd66, 0xd67, 0x3, 0x2, 0x2, 0x2, 0xd67, 0xd69, 
       0x3, 0x2, 0x2, 0x2, 0xd68, 0xd6a, 0x5, 0x1ee, 0xf8, 0x2, 0xd69, 0xd68, 
       0x3, 0x2, 0x2, 0x2, 0xd69, 0xd6a, 0x3, 0x2, 0x2, 0x2, 0xd6a, 0xd6c, 
       0x3, 0x2, 0x2, 0x2, 0xd6b, 0xd6d, 0x5, 0x1f0, 0xf9, 0x2, 0xd6c, 0xd6b, 
       0x3, 0x2, 0x2, 0x2, 0xd6c, 0xd6d, 0x3, 0x2, 0x2, 0x2, 0xd6d, 0x1eb, 
       0x3, 0x2, 0x2, 0x2, 0xd6e, 0xd6f, 0x5, 0x41a, 0x20e, 0x2, 0xd6f, 
       0x1ed, 0x3, 0x2, 0x2, 0x2, 0xd70, 0xd71, 0x9, 0x32, 0x2, 0x2, 0xd71, 
       0x1ef, 0x3, 0x2, 0x2, 0x2, 0xd72, 0xd73, 0x7, 0x12a, 0x2, 0x2, 0xd73, 
       0xd74, 0x9, 0x33, 0x2, 0x2, 0xd74, 0x1f1, 0x3, 0x2, 0x2, 0x2, 0xd75, 
       0xd76, 0x7, 0x15, 0x2, 0x2, 0xd76, 0xd77, 0x7, 0x121, 0x2, 0x2, 0xd77, 
       0xd78, 0x5, 0xce, 0x68, 0x2, 0xd78, 0xd79, 0x7, 0x5d, 0x2, 0x2, 0xd79, 
       0xd7a, 0x5, 0x16, 0xc, 0x2, 0xd7a, 0x1f3, 0x3, 0x2, 0x2, 0x2, 0xd7b, 
       0xd7c, 0x7, 0x15, 0x2, 0x2, 0xd7c, 0xd7d, 0x7, 0x121, 0x2, 0x2, 0xd7d, 
       0xd7e, 0x7, 0x2b, 0x2, 0x2, 0xd7e, 0xd7f, 0x5, 0xac, 0x57, 0x2, 0xd7f, 
       0xd80, 0x7, 0x5d, 0x2, 0x2, 0xd80, 0xd85, 0x5, 0xd0, 0x69, 0x2, 0xd81, 
       0xd83, 0x7, 0xe, 0x2, 0x2, 0xd82, 0xd84, 0x5, 0x3a2, 0x1d2, 0x2, 
       0xd83, 0xd82, 0x3, 0x2, 0x2, 0x2, 0xd83, 0xd84, 0x3, 0x2, 0x2, 0x2, 
       0xd84, 0xd86, 0x3, 0x2, 0x2, 0x2, 0xd85, 0xd81, 0x3, 0x2, 0x2, 0x2, 
       0xd85, 0xd86, 0x3, 0x2, 0x2, 0x2, 0xd86, 0xd88, 0x3, 0x2, 0x2, 0x2, 
       0xd87, 0xd89, 0x7, 0x226, 0x2, 0x2, 0xd88, 0xd87, 0x3, 0x2, 0x2, 
       0x2, 0xd88, 0xd89, 0x3, 0x2, 0x2, 0x2, 0xd89, 0xd8d, 0x3, 0x2, 0x2, 
       0x2, 0xd8a, 0xd8b, 0x7, 0xc0, 0x2, 0x2, 0xd8b, 0xd8c, 0x7, 0x28, 
       0x2, 0x2, 0xd8c, 0xd8e, 0x5, 0xac, 0x57, 0x2, 0xd8d, 0xd8a, 0x3, 
       0x2, 0x2, 0x2, 0xd8d, 0xd8e, 0x3, 0x2, 0x2, 0x2, 0xd8e, 0x1f5, 0x3, 
       0x2, 0x2, 0x2, 0xd8f, 0xd91, 0x7, 0x15, 0x2, 0x2, 0xd90, 0xd92, 0x5, 
       0xf0, 0x79, 0x2, 0xd91, 0xd90, 0x3, 0x2, 0x2, 0x2, 0xd91, 0xd92, 
       0x3, 0x2, 0x2, 0x2, 0xd92, 0xd93, 0x3, 0x2, 0x2, 0x2, 0xd93, 0xd94, 
       0x7, 0x23b, 0x2, 0x2, 0xd94, 0xd95, 0x5, 0xf2, 0x7a, 0x2, 0xd95, 
       0xd96, 0x7, 0x3f, 0x2, 0x2, 0xd96, 0xd99, 0x5, 0x7c, 0x3f, 0x2, 0xd97, 
       0xd98, 0x7, 0xb, 0x2, 0x2, 0xd98, 0xd9a, 0x9, 0x34, 0x2, 0x2, 0xd99, 
       0xd97, 0x3, 0x2, 0x2, 0x2, 0xd99, 0xd9a, 0x3, 0x2, 0x2, 0x2, 0xd9a, 
       0xda0, 0x3, 0x2, 0x2, 0x2, 0xd9b, 0xd9e, 0x7, 0x27, 0x2, 0x2, 0xd9c, 
       0xd9f, 0x7, 0x3, 0x2, 0x2, 0xd9d, 0xd9f, 0x5, 0x58, 0x2d, 0x2, 0xd9e, 
       0xd9c, 0x3, 0x2, 0x2, 0x2, 0xd9e, 0xd9d, 0x3, 0x2, 0x2, 0x2, 0xd9f, 
       0xda1, 0x3, 0x2, 0x2, 0x2, 0xda0, 0xd9b, 0x3, 0x2, 0x2, 0x2, 0xda0, 
       0xda1, 0x3, 0x2, 0x2, 0x2, 0xda1, 0xda4, 0x3, 0x2, 0x2, 0x2, 0xda2, 
       0xda3, 0x7, 0x52, 0x2, 0x2, 0xda3, 0xda5, 0x5, 0x1f8, 0xfd, 0x2, 
       0xda4, 0xda2, 0x3, 0x2, 0x2, 0x2, 0xda4, 0xda5, 0x3, 0x2, 0x2, 0x2, 
       0xda5, 0xda6, 0x3, 0x2, 0x2, 0x2, 0xda6, 0xda7, 0x5, 0xf6, 0x7c, 
       0x2, 0xda7, 0x1f7, 0x3, 0x2, 0x2, 0x2, 0xda8, 0xdad, 0x5, 0x1fa, 
       0xfe, 0x2, 0xda9, 0xdaa, 0x7, 0x26f, 0x2, 0x2, 0xdaa, 0xdac, 0x5, 
       0x1fa, 0xfe, 0x2, 0xdab, 0xda9, 0x3, 0x2, 0x2, 0x2, 0xdac, 0xdaf, 
       0x3, 0x2, 0x2, 0x2, 0xdad, 0xdab, 0x3, 0x2, 0x2, 0x2, 0xdad, 0xdae, 
       0x3, 0x2, 0x2, 0x2, 0xdae, 0x1f9, 0x3, 0x2, 0x2, 0x2, 0xdaf, 0xdad, 
       0x3, 0x2, 0x2, 0x2, 0xdb0, 0xdb5, 0x5, 0x5e, 0x30, 0x2, 0xdb1, 0xdb5, 
       0x7, 0x221, 0x2, 0x2, 0xdb2, 0xdb5, 0x7, 0x1b, 0x2, 0x2, 0xdb3, 0xdb5, 
       0x7, 0x4b, 0x2, 0x2, 0xdb4, 0xdb0, 0x3, 0x2, 0x2, 0x2, 0xdb4, 0xdb1, 
       0x3, 0x2, 0x2, 0x2, 0xdb4, 0xdb2, 0x3, 0x2, 0x2, 0x2, 0xdb4, 0xdb3, 
       0x3, 0x2, 0x2, 0x2, 0xdb5, 0x1fb, 0x3, 0x2, 0x2, 0x2, 0xdb6, 0xdb7, 
       0x7, 0x15, 0x2, 0x2, 0xdb7, 0xdb8, 0x7, 0x161, 0x2, 0x2, 0xdb8, 0xdb9, 
       0x7, 0x140, 0x2, 0x2, 0xdb9, 0xdbc, 0x5, 0xe0, 0x71, 0x2, 0xdba, 
       0xdbb, 0x7, 0x5d, 0x2, 0x2, 0xdbb, 0xdbd, 0x5, 0x16, 0xc, 0x2, 0xdbc, 
       0xdba, 0x3, 0x2, 0x2, 0x2, 0xdbc, 0xdbd, 0x3, 0x2, 0x2, 0x2, 0xdbd, 
       0x1fd, 0x3, 0x2, 0x2, 0x2, 0xdbe, 0xdbf, 0x7, 0x15, 0x2, 0x2, 0xdbf, 
       0xdc0, 0x7, 0x167, 0x2, 0x2, 0xdc0, 0xdc9, 0x5, 0x5e, 0x30, 0x2, 
       0xdc1, 0xdc3, 0x7, 0x5d, 0x2, 0x2, 0xdc2, 0xdc1, 0x3, 0x2, 0x2, 0x2, 
       0xdc2, 0xdc3, 0x3, 0x2, 0x2, 0x2, 0xdc3, 0xdc5, 0x3, 0x2, 0x2, 0x2, 
       0xdc4, 0xdc6, 0x5, 0x200, 0x101, 0x2, 0xdc5, 0xdc4, 0x3, 0x2, 0x2, 
       0x2, 0xdc6, 0xdc7, 0x3, 0x2, 0x2, 0x2, 0xdc7, 0xdc5, 0x3, 0x2, 0x2, 
       0x2, 0xdc7, 0xdc8, 0x3, 0x2, 0x2, 0x2, 0xdc8, 0xdca, 0x3, 0x2, 0x2, 
       0x2, 0xdc9, 0xdc2, 0x3, 0x2, 0x2, 0x2, 0xdc9, 0xdca, 0x3, 0x2, 0x2, 
       0x2, 0xdca, 0xdcc, 0x3, 0x2, 0x2, 0x2, 0xdcb, 0xdcd, 0x9, 0x1c, 0x2, 
       0x2, 0xdcc, 0xdcb, 0x3, 0x2, 0x2, 0x2, 0xdcc, 0xdcd, 0x3, 0x2, 0x2, 
       0x2, 0xdcd, 0xdce, 0x3, 0x2, 0x2, 0x2, 0xdce, 0xdcf, 0x5, 0xea, 0x76, 
       0x2, 0xdcf, 0x1ff, 0x3, 0x2, 0x2, 0x2, 0xdd0, 0xdee, 0x5, 0xe6, 0x74, 
       0x2, 0xdd1, 0xdd3, 0x7, 0x30, 0x2, 0x2, 0xdd2, 0xdd1, 0x3, 0x2, 0x2, 
       0x2, 0xdd2, 0xdd3, 0x3, 0x2, 0x2, 0x2, 0xdd3, 0xdd4, 0x3, 0x2, 0x2, 
       0x2, 0xdd4, 0xdda, 0x7, 0x167, 0x2, 0x2, 0xdd5, 0xdd6, 0x7, 0x30, 
       0x2, 0x2, 0xdd6, 0xdda, 0x7, 0x2b, 0x2, 0x2, 0xdd7, 0xdda, 0x7, 0x7a, 
       0x2, 0x2, 0xdd8, 0xdda, 0x7, 0x57, 0x2, 0x2, 0xdd9, 0xdd2, 0x3, 0x2, 
       0x2, 0x2, 0xdd9, 0xdd5, 0x3, 0x2, 0x2, 0x2, 0xdd9, 0xdd7, 0x3, 0x2, 
       0x2, 0x2, 0xdd9, 0xdd8, 0x3, 0x2, 0x2, 0x2, 0xdda, 0xddb, 0x3, 0x2, 
       0x2, 0x2, 0xddb, 0xde0, 0x5, 0x5e, 0x30, 0x2, 0xddc, 0xddd, 0x7, 
       0x26f, 0x2, 0x2, 0xddd, 0xddf, 0x5, 0x5e, 0x30, 0x2, 0xdde, 0xddc, 
       0x3, 0x2, 0x2, 0x2, 0xddf, 0xde2, 0x3, 0x2, 0x2, 0x2, 0xde0, 0xdde, 
       0x3, 0x2, 0x2, 0x2, 0xde0, 0xde1, 0x3, 0x2, 0x2, 0x2, 0xde1, 0xdee, 
       0x3, 0x2, 0x2, 0x2, 0xde2, 0xde0, 0x3, 0x2, 0x2, 0x2, 0xde3, 0xde4, 
       0x7, 0x188, 0x2, 0x2, 0xde4, 0xdee, 0x5, 0x41a, 0x20e, 0x2, 0xde5, 
       0xde6, 0x7, 0x1c, 0x2, 0x2, 0xde6, 0xde7, 0x7, 0x18b, 0x2, 0x2, 0xde7, 
       0xdee, 0x5, 0xc2, 0x62, 0x2, 0xde8, 0xdeb, 0x7, 0x14b, 0x2, 0x2, 
       0xde9, 0xdec, 0x7, 0x1c, 0x2, 0x2, 0xdea, 0xdec, 0x5, 0x202, 0x102, 
       0x2, 0xdeb, 0xde9, 0x3, 0x2, 0x2, 0x2, 0xdeb, 0xdea, 0x3, 0x2, 0x2, 
       0x2, 0xdec, 0xdee, 0x3, 0x2, 0x2, 0x2, 0xded, 0xdd0, 0x3, 0x2, 0x2, 
       0x2, 0xded, 0xdd9, 0x3, 0x2, 0x2, 0x2, 0xded, 0xde3, 0x3, 0x2, 0x2, 
       0x2, 0xded, 0xde5, 0x3, 0x2, 0x2, 0x2, 0xded, 0xde8, 0x3, 0x2, 0x2, 
       0x2, 0xdee, 0x201, 0x3, 0x2, 0x2, 0x2, 0xdef, 0xdf0, 0x5, 0x41a, 
       0x20e, 0x2, 0xdf0, 0x203, 0x3, 0x2, 0x2, 0x2, 0xdf1, 0xdf2, 0x7, 
       0x15, 0x2, 0x2, 0xdf2, 0xdf3, 0x7, 0x16c, 0x2, 0x2, 0xdf3, 0xdf4, 
       0x5, 0x206, 0x104, 0x2, 0xdf4, 0x205, 0x3, 0x2, 0x2, 0x2, 0xdf5, 
       0xdf7, 0x5, 0x4e, 0x28, 0x2, 0xdf6, 0xdf5, 0x3, 0x2, 0x2, 0x2, 0xdf6, 
       0xdf7, 0x3, 0x2, 0x2, 0x2, 0xdf7, 0xdfa, 0x3, 0x2, 0x2, 0x2, 0xdf8, 
       0xdf9, 0x7, 0x5e, 0x2, 0x2, 0xdf9, 0xdfb, 0x5, 0xb2, 0x5a, 0x2, 0xdfa, 
       0xdf8, 0x3, 0x2, 0x2, 0x2, 0xdfa, 0xdfb, 0x3, 0x2, 0x2, 0x2, 0xdfb, 
       0xdff, 0x3, 0x2, 0x2, 0x2, 0xdfc, 0xdfe, 0x5, 0x208, 0x105, 0x2, 
       0xdfd, 0xdfc, 0x3, 0x2, 0x2, 0x2, 0xdfe, 0xe01, 0x3, 0x2, 0x2, 0x2, 
       0xdff, 0xdfd, 0x3, 0x2, 0x2, 0x2, 0xdff, 0xe00, 0x3, 0x2, 0x2, 0x2, 
       0xe00, 0x207, 0x3, 0x2, 0x2, 0x2, 0xe01, 0xdff, 0x3, 0x2, 0x2, 0x2, 
       0xe02, 0xe07, 0x5, 0x212, 0x10a, 0x2, 0xe03, 0xe07, 0x5, 0x23a, 0x11e, 
       0x2, 0xe04, 0xe07, 0x5, 0x1e6, 0xf4, 0x2, 0xe05, 0xe07, 0x5, 0x33c, 
       0x19f, 0x2, 0xe06, 0xe02, 0x3, 0x2, 0x2, 0x2, 0xe06, 0xe03, 0x3, 
       0x2, 0x2, 0x2, 0xe06, 0xe04, 0x3, 0x2, 0x2, 0x2, 0xe06, 0xe05, 0x3, 
       0x2, 0x2, 0x2, 0xe07, 0x209, 0x3, 0x2, 0x2, 0x2, 0xe08, 0xe09, 0x7, 
       0x15, 0x2, 0x2, 0xe09, 0xe0a, 0x7, 0x172, 0x2, 0x2, 0xe0a, 0xe10, 
       0x5, 0xfc, 0x7f, 0x2, 0xe0b, 0xe0d, 0x7, 0xee, 0x2, 0x2, 0xe0c, 0xe0e, 
       0x7, 0x8c, 0x2, 0x2, 0xe0d, 0xe0c, 0x3, 0x2, 0x2, 0x2, 0xe0d, 0xe0e, 
       0x3, 0x2, 0x2, 0x2, 0xe0e, 0xe0f, 0x3, 0x2, 0x2, 0x2, 0xe0f, 0xe11, 
       0x5, 0x3be, 0x1e0, 0x2, 0xe10, 0xe0b, 0x3, 0x2, 0x2, 0x2, 0xe10, 
       0xe11, 0x3, 0x2, 0x2, 0x2, 0xe11, 0xe13, 0x3, 0x2, 0x2, 0x2, 0xe12, 
       0xe14, 0x5, 0x20c, 0x107, 0x2, 0xe13, 0xe12, 0x3, 0x2, 0x2, 0x2, 
       0xe13, 0xe14, 0x3, 0x2, 0x2, 0x2, 0xe14, 0xe16, 0x3, 0x2, 0x2, 0x2, 
       0xe15, 0xe17, 0x5, 0x20e, 0x108, 0x2, 0xe16, 0xe15, 0x3, 0x2, 0x2, 
       0x2, 0xe16, 0xe17, 0x3, 0x2, 0x2, 0x2, 0xe17, 0xe1d, 0x3, 0x2, 0x2, 
       0x2, 0xe18, 0xe1a, 0x7, 0x17e, 0x2, 0x2, 0xe19, 0xe1b, 0x7, 0x5d, 
       0x2, 0x2, 0xe1a, 0xe19, 0x3, 0x2, 0x2, 0x2, 0xe1a, 0xe1b, 0x3, 0x2, 
       0x2, 0x2, 0xe1b, 0xe1c, 0x3, 0x2, 0x2, 0x2, 0xe1c, 0xe1e, 0x5, 0x3be, 
       0x1e0, 0x2, 0xe1d, 0xe18, 0x3, 0x2, 0x2, 0x2, 0xe1d, 0xe1e, 0x3, 
       0x2, 0x2, 0x2, 0xe1e, 0xe21, 0x3, 0x2, 0x2, 0x2, 0xe1f, 0xe20, 0x7, 
       0x8d, 0x2, 0x2, 0xe20, 0xe22, 0x5, 0x3c6, 0x1e4, 0x2, 0xe21, 0xe1f, 
       0x3, 0x2, 0x2, 0x2, 0xe21, 0xe22, 0x3, 0x2, 0x2, 0x2, 0xe22, 0xe28, 
       0x3, 0x2, 0x2, 0x2, 0xe23, 0xe25, 0x7, 0x129, 0x2, 0x2, 0xe24, 0xe23, 
       0x3, 0x2, 0x2, 0x2, 0xe24, 0xe25, 0x3, 0x2, 0x2, 0x2, 0xe25, 0xe26, 
       0x3, 0x2, 0x2, 0x2, 0xe26, 0xe29, 0x7, 0xac, 0x2, 0x2, 0xe27, 0xe29, 
       0x7, 0x120, 0x2, 0x2, 0xe28, 0xe24, 0x3, 0x2, 0x2, 0x2, 0xe28, 0xe27, 
       0x3, 0x2, 0x2, 0x2, 0xe28, 0xe29, 0x3, 0x2, 0x2, 0x2, 0xe29, 0xe33, 
       0x3, 0x2, 0x2, 0x2, 0xe2a, 0xe2b, 0x7, 0x134, 0x2, 0x2, 0xe2b, 0xe31, 
       0x7, 0x8c, 0x2, 0x2, 0xe2c, 0xe2d, 0x5, 0x7c, 0x3f, 0x2, 0xe2d, 0xe2e, 
       0x7, 0x272, 0x2, 0x2, 0xe2e, 0xe2f, 0x5, 0x86, 0x44, 0x2, 0xe2f, 
       0xe32, 0x3, 0x2, 0x2, 0x2, 0xe30, 0xe32, 0x7, 0x1d0, 0x2, 0x2, 0xe31, 
       0xe2c, 0x3, 0x2, 0x2, 0x2, 0xe31, 0xe30, 0x3, 0x2, 0x2, 0x2, 0xe32, 
       0xe34, 0x3, 0x2, 0x2, 0x2, 0xe33, 0xe2a, 0x3, 0x2, 0x2, 0x2, 0xe33, 
       0xe34, 0x3, 0x2, 0x2, 0x2, 0xe34, 0x20b, 0x3, 0x2, 0x2, 0x2, 0xe35, 
       0xe36, 0x7, 0x117, 0x2, 0x2, 0xe36, 0xe3b, 0x5, 0x3be, 0x1e0, 0x2, 
       0xe37, 0xe38, 0x7, 0x129, 0x2, 0x2, 0xe38, 0xe3b, 0x7, 0x117, 0x2, 
       0x2, 0xe39, 0xe3b, 0x7, 0x125, 0x2, 0x2, 0xe3a, 0xe35, 0x3, 0x2, 
       0x2, 0x2, 0xe3a, 0xe37, 0x3, 0x2, 0x2, 0x2, 0xe3a, 0xe39, 0x3, 0x2, 
       0x2, 0x2, 0xe3b, 0x20d, 0x3, 0x2, 0x2, 0x2, 0xe3c, 0xe3d, 0x7, 0x37, 
       0x2, 0x2, 0xe3d, 0xe42, 0x5, 0x3be, 0x1e0, 0x2, 0xe3e, 0xe3f, 0x7, 
       0x129, 0x2, 0x2, 0xe3f, 0xe42, 0x7, 0x37, 0x2, 0x2, 0xe40, 0xe42, 
       0x7, 0x124, 0x2, 0x2, 0xe41, 0xe3c, 0x3, 0x2, 0x2, 0x2, 0xe41, 0xe3e, 
       0x3, 0x2, 0x2, 0x2, 0xe41, 0xe40, 0x3, 0x2, 0x2, 0x2, 0xe42, 0x20f, 
       0x3, 0x2, 0x2, 0x2, 0xe43, 0xe44, 0x7, 0x15, 0x2, 0x2, 0xe44, 0xe45, 
       0x7, 0x174, 0x2, 0x2, 0xe45, 0xe46, 0x5, 0x102, 0x82, 0x2, 0xe46, 
       0xe47, 0x7, 0x26, 0x2, 0x2, 0xe47, 0xe48, 0x7, 0xaf, 0x2, 0x2, 0xe48, 
       0xe49, 0x7, 0x1b2, 0x2, 0x2, 0xe49, 0xe4a, 0x5, 0x306, 0x184, 0x2, 
       0xe4a, 0xe4b, 0x5, 0x40, 0x21, 0x2, 0xe4b, 0x211, 0x3, 0x2, 0x2, 
       0x2, 0xe4c, 0xe52, 0x7, 0x15, 0x2, 0x2, 0xe4d, 0xe4f, 0x9, 0x35, 
       0x2, 0x2, 0xe4e, 0xe4d, 0x3, 0x2, 0x2, 0x2, 0xe4e, 0xe4f, 0x3, 0x2, 
       0x2, 0x2, 0xe4f, 0xe50, 0x3, 0x2, 0x2, 0x2, 0xe50, 0xe53, 0x5, 0x214, 
       0x10b, 0x2, 0xe51, 0xe53, 0x7, 0x19f, 0x2, 0x2, 0xe52, 0xe4e, 0x3, 
       0x2, 0x2, 0x2, 0xe52, 0xe51, 0x3, 0x2, 0x2, 0x2, 0xe52, 0xe53, 0x3, 
       0x2, 0x2, 0x2, 0xe53, 0xe54, 0x3, 0x2, 0x2, 0x2, 0xe54, 0xe58, 0x7, 
       0x50, 0x2, 0x2, 0xe55, 0xe56, 0x7, 0xe9, 0x2, 0x2, 0xe56, 0xe57, 
       0x7, 0x3b, 0x2, 0x2, 0xe57, 0xe59, 0x7, 0x1c5, 0x2, 0x2, 0xe58, 0xe55, 
       0x3, 0x2, 0x2, 0x2, 0xe58, 0xe59, 0x3, 0x2, 0x2, 0x2, 0xe59, 0xe5a, 
       0x3, 0x2, 0x2, 0x2, 0xe5a, 0xe60, 0x5, 0x7c, 0x3f, 0x2, 0xe5b, 0xe5d, 
       0x7, 0x269, 0x2, 0x2, 0xe5c, 0xe5e, 0x5, 0x216, 0x10c, 0x2, 0xe5d, 
       0xe5c, 0x3, 0x2, 0x2, 0x2, 0xe5d, 0xe5e, 0x3, 0x2, 0x2, 0x2, 0xe5e, 
       0xe5f, 0x3, 0x2, 0x2, 0x2, 0xe5f, 0xe61, 0x7, 0x26a, 0x2, 0x2, 0xe60, 
       0xe5b, 0x3, 0x2, 0x2, 0x2, 0xe60, 0xe61, 0x3, 0x2, 0x2, 0x2, 0xe61, 
       0xe65, 0x3, 0x2, 0x2, 0x2, 0xe62, 0xe64, 0x5, 0x21e, 0x110, 0x2, 
       0xe63, 0xe62, 0x3, 0x2, 0x2, 0x2, 0xe64, 0xe67, 0x3, 0x2, 0x2, 0x2, 
       0xe65, 0xe63, 0x3, 0x2, 0x2, 0x2, 0xe65, 0xe66, 0x3, 0x2, 0x2, 0x2, 
       0xe66, 0xe71, 0x3, 0x2, 0x2, 0x2, 0xe67, 0xe65, 0x3, 0x2, 0x2, 0x2, 
       0xe68, 0xe6a, 0x5, 0x220, 0x111, 0x2, 0xe69, 0xe68, 0x3, 0x2, 0x2, 
       0x2, 0xe69, 0xe6a, 0x3, 0x2, 0x2, 0x2, 0xe6a, 0xe72, 0x3, 0x2, 0x2, 
       0x2, 0xe6b, 0xe6c, 0x7, 0x139, 0x2, 0x2, 0xe6c, 0xe6d, 0x7, 0x8c, 
       0x2, 0x2, 0xe6d, 0xe6f, 0x5, 0x222, 0x112, 0x2, 0xe6e, 0xe70, 0x5, 
       0x150, 0xa9, 0x2, 0xe6f, 0xe6e, 0x3, 0x2, 0x2, 0x2, 0xe6f, 0xe70, 
       0x3, 0x2, 0x2, 0x2, 0xe70, 0xe72, 0x3, 0x2, 0x2, 0x2, 0xe71, 0xe69, 
       0x3, 0x2, 0x2, 0x2, 0xe71, 0xe6b, 0x3, 0x2, 0x2, 0x2, 0xe72, 0x213, 
       0x3, 0x2, 0x2, 0x2, 0xe73, 0xe74, 0x9, 0x36, 0x2, 0x2, 0xe74, 0x215, 
       0x3, 0x2, 0x2, 0x2, 0xe75, 0xe7a, 0x5, 0x218, 0x10d, 0x2, 0xe76, 
       0xe77, 0x7, 0x26f, 0x2, 0x2, 0xe77, 0xe79, 0x5, 0x218, 0x10d, 0x2, 
       0xe78, 0xe76, 0x3, 0x2, 0x2, 0x2, 0xe79, 0xe7c, 0x3, 0x2, 0x2, 0x2, 
       0xe7a, 0xe78, 0x3, 0x2, 0x2, 0x2, 0xe7a, 0xe7b, 0x3, 0x2, 0x2, 0x2, 
       0xe7b, 0x217, 0x3, 0x2, 0x2, 0x2, 0xe7c, 0xe7a, 0x3, 0x2, 0x2, 0x2, 
       0xe7d, 0xe88, 0x5, 0x124, 0x93, 0x2, 0xe7e, 0xe88, 0x5, 0x134, 0x9b, 
       0x2, 0xe7f, 0xe80, 0x7, 0x6b, 0x2, 0x2, 0xe80, 0xe84, 0x5, 0x7c, 
       0x3f, 0x2, 0xe81, 0xe83, 0x5, 0x21a, 0x10e, 0x2, 0xe82, 0xe81, 0x3, 
       0x2, 0x2, 0x2, 0xe83, 0xe86, 0x3, 0x2, 0x2, 0x2, 0xe84, 0xe82, 0x3, 
       0x2, 0x2, 0x2, 0xe84, 0xe85, 0x3, 0x2, 0x2, 0x2, 0xe85, 0xe88, 0x3, 
       0x2, 0x2, 0x2, 0xe86, 0xe84, 0x3, 0x2, 0x2, 0x2, 0xe87, 0xe7d, 0x3, 
       0x2, 0x2, 0x2, 0xe87, 0xe7e, 0x3, 0x2, 0x2, 0x2, 0xe87, 0xe7f, 0x3, 
       0x2, 0x2, 0x2, 0xe88, 0x219, 0x3, 0x2, 0x2, 0x2, 0xe89, 0xe8a, 0x9, 
       0x37, 0x2, 0x2, 0xe8a, 0xe8b, 0x5, 0x21c, 0x10f, 0x2, 0xe8b, 0x21b, 
       0x3, 0x2, 0x2, 0x2, 0xe8c, 0xe8d, 0x9, 0x38, 0x2, 0x2, 0xe8d, 0x21d, 
       0x3, 0x2, 0x2, 0x2, 0xe8e, 0xe8f, 0x7, 0x5d, 0x2, 0x2, 0xe8f, 0xea4, 
       0x5, 0x16, 0xc, 0x2, 0xe90, 0xe91, 0x7, 0x3f, 0x2, 0x2, 0xe91, 0xe97, 
       0x7, 0x9e, 0x2, 0x2, 0xe92, 0xe93, 0x7, 0x146, 0x2, 0x2, 0xe93, 0xe98, 
       0x7, 0x1db, 0x2, 0x2, 0xe94, 0xe95, 0x7, 0xb7, 0x2, 0x2, 0xe95, 0xe98, 
       0x7, 0x1db, 0x2, 0x2, 0xe96, 0xe98, 0x7, 0xc5, 0x2, 0x2, 0xe97, 0xe92, 
       0x3, 0x2, 0x2, 0x2, 0xe97, 0xe94, 0x3, 0x2, 0x2, 0x2, 0xe97, 0xe96, 
       0x3, 0x2, 0x2, 0x2, 0xe98, 0xea4, 0x3, 0x2, 0x2, 0x2, 0xe99, 0xea4, 
       0x9, 0x22, 0x2, 0x2, 0xe9a, 0xea4, 0x5, 0xbc, 0x5f, 0x2, 0xe9b, 0xe9c, 
       0x7, 0xc0, 0x2, 0x2, 0xe9c, 0xea0, 0x7, 0x8c, 0x2, 0x2, 0xe9d, 0xea1, 
       0x7, 0x232, 0x2, 0x2, 0xe9e, 0xe9f, 0x7, 0x250, 0x2, 0x2, 0xe9f, 
       0xea1, 0x5, 0x138, 0x9d, 0x2, 0xea0, 0xe9d, 0x3, 0x2, 0x2, 0x2, 0xea0, 
       0xe9e, 0x3, 0x2, 0x2, 0x2, 0xea1, 0xea4, 0x3, 0x2, 0x2, 0x2, 0xea2, 
       0xea4, 0x5, 0x1bc, 0xdf, 0x2, 0xea3, 0xe8e, 0x3, 0x2, 0x2, 0x2, 0xea3, 
       0xe90, 0x3, 0x2, 0x2, 0x2, 0xea3, 0xe99, 0x3, 0x2, 0x2, 0x2, 0xea3, 
       0xe9a, 0x3, 0x2, 0x2, 0x2, 0xea3, 0xe9b, 0x3, 0x2, 0x2, 0x2, 0xea3, 
       0xea2, 0x3, 0x2, 0x2, 0x2, 0xea4, 0x21f, 0x3, 0x2, 0x2, 0x2, 0xea5, 
       0xea9, 0x7, 0xb, 0x2, 0x2, 0xea6, 0xeaa, 0x5, 0x23e, 0x120, 0x2, 
       0xea7, 0xea8, 0x7, 0x50, 0x2, 0x2, 0xea8, 0xeaa, 0x5, 0x7c, 0x3f, 
       0x2, 0xea9, 0xea6, 0x3, 0x2, 0x2, 0x2, 0xea9, 0xea7, 0x3, 0x2, 0x2, 
       0x2, 0xeaa, 0xeb0, 0x3, 0x2, 0x2, 0x2, 0xeab, 0xead, 0x7, 0x5d, 0x2, 
       0x2, 0xeac, 0xeae, 0x7, 0x129, 0x2, 0x2, 0xead, 0xeac, 0x3, 0x2, 
       0x2, 0x2, 0xead, 0xeae, 0x3, 0x2, 0x2, 0x2, 0xeae, 0xeaf, 0x3, 0x2, 
       0x2, 0x2, 0xeaf, 0xeb1, 0x7, 0xaf, 0x2, 0x2, 0xeb0, 0xeab, 0x3, 0x2, 
       0x2, 0x2, 0xeb0, 0xeb1, 0x3, 0x2, 0x2, 0x2, 0xeb1, 0x221, 0x3, 0x2, 
       0x2, 0x2, 0xeb2, 0xeb3, 0x7, 0x1e5, 0x2, 0x2, 0xeb3, 0xebb, 0x5, 
       0x224, 0x113, 0x2, 0xeb4, 0xeb5, 0x7, 0x14e, 0x2, 0x2, 0xeb5, 0xeb6, 
       0x5, 0x224, 0x113, 0x2, 0xeb6, 0xeb7, 0x7, 0x269, 0x2, 0x2, 0xeb7, 
       0xeb8, 0x5, 0x15e, 0xb0, 0x2, 0xeb8, 0xeb9, 0x7, 0x26a, 0x2, 0x2, 
       0xeb9, 0xebb, 0x3, 0x2, 0x2, 0x2, 0xeba, 0xeb2, 0x3, 0x2, 0x2, 0x2, 
       0xeba, 0xeb4, 0x3, 0x2, 0x2, 0x2, 0xebb, 0x223, 0x3, 0x2, 0x2, 0x2, 
       0xebc, 0xebd, 0x7, 0x269, 0x2, 0x2, 0xebd, 0xebe, 0x5, 0x226, 0x114, 
       0x2, 0xebe, 0xebf, 0x7, 0x26a, 0x2, 0x2, 0xebf, 0x225, 0x3, 0x2, 
       0x2, 0x2, 0xec0, 0xec1, 0x5, 0x41a, 0x20e, 0x2, 0xec1, 0x227, 0x3, 
       0x2, 0x2, 0x2, 0xec2, 0xec3, 0x7, 0x15, 0x2, 0x2, 0xec3, 0xec4, 0x7, 
       0x18b, 0x2, 0x2, 0xec4, 0xec7, 0x5, 0xc2, 0x62, 0x2, 0xec5, 0xec6, 
       0x7, 0x135, 0x2, 0x2, 0xec6, 0xec8, 0x5, 0xb2, 0x5a, 0x2, 0xec7, 
       0xec5, 0x3, 0x2, 0x2, 0x2, 0xec7, 0xec8, 0x3, 0x2, 0x2, 0x2, 0xec8, 
       0xec9, 0x3, 0x2, 0x2, 0x2, 0xec9, 0xeca, 0x7, 0x157, 0x2, 0x2, 0xeca, 
       0xecb, 0x7, 0x108, 0x2, 0x2, 0xecb, 0xece, 0x7, 0x286, 0x2, 0x2, 
       0xecc, 0xecd, 0x7, 0x112, 0x2, 0x2, 0xecd, 0xecf, 0x7, 0x286, 0x2, 
       0x2, 0xece, 0xecc, 0x3, 0x2, 0x2, 0x2, 0xece, 0xecf, 0x3, 0x2, 0x2, 
       0x2, 0xecf, 0xed2, 0x3, 0x2, 0x2, 0x2, 0xed0, 0xed1, 0x7, 0x5d, 0x2, 
       0x2, 0xed1, 0xed3, 0x5, 0x16, 0xc, 0x2, 0xed2, 0xed0, 0x3, 0x2, 0x2, 
       0x2, 0xed2, 0xed3, 0x3, 0x2, 0x2, 0x2, 0xed3, 0x229, 0x3, 0x2, 0x2, 
       0x2, 0xed4, 0xed5, 0x7, 0x15, 0x2, 0x2, 0xed5, 0xed6, 0x7, 0x190, 
       0x2, 0x2, 0xed6, 0xed7, 0x7, 0x16e, 0x2, 0x2, 0xed7, 0xed8, 0x9, 
       0x39, 0x2, 0x2, 0xed8, 0xed9, 0x5, 0x41a, 0x20e, 0x2, 0xed9, 0xedc, 
       0x5, 0x16, 0xc, 0x2, 0xeda, 0xedb, 0x7, 0x5d, 0x2, 0x2, 0xedb, 0xedd, 
       0x5, 0x16, 0xc, 0x2, 0xedc, 0xeda, 0x3, 0x2, 0x2, 0x2, 0xedc, 0xedd, 
       0x3, 0x2, 0x2, 0x2, 0xedd, 0x22b, 0x3, 0x2, 0x2, 0x2, 0xede, 0xee0, 
       0x7, 0x15, 0x2, 0x2, 0xedf, 0xee1, 0x7, 0x14, 0x2, 0x2, 0xee0, 0xedf, 
       0x3, 0x2, 0x2, 0x2, 0xee0, 0xee1, 0x3, 0x2, 0x2, 0x2, 0xee1, 0xee2, 
       0x3, 0x2, 0x2, 0x2, 0xee2, 0xee3, 0x7, 0x193, 0x2, 0x2, 0xee3, 0xee4, 
       0x5, 0x140, 0xa1, 0x2, 0xee4, 0xee5, 0x5, 0x22e, 0x118, 0x2, 0xee5, 
       0xee6, 0x5, 0x230, 0x119, 0x2, 0xee6, 0xee7, 0x7, 0x3f, 0x2, 0x2, 
       0xee7, 0xeea, 0x5, 0x7c, 0x3f, 0x2, 0xee8, 0xee9, 0x7, 0x28, 0x2, 
       0x2, 0xee9, 0xeeb, 0x5, 0x7c, 0x3f, 0x2, 0xeea, 0xee8, 0x3, 0x2, 
       0x2, 0x2, 0xeea, 0xeeb, 0x3, 0x2, 0x2, 0x2, 0xeeb, 0xeed, 0x3, 0x2, 
       0x2, 0x2, 0xeec, 0xeee, 0x5, 0x13c, 0x9f, 0x2, 0xeed, 0xeec, 0x3, 
       0x2, 0x2, 0x2, 0xeed, 0xeee, 0x3, 0x2, 0x2, 0x2, 0xeee, 0xef4, 0x3, 
       0x2, 0x2, 0x2, 0xeef, 0xef1, 0x7, 0x27, 0x2, 0x2, 0xef0, 0xef2, 0x7, 
       0xc6, 0x2, 0x2, 0xef1, 0xef0, 0x3, 0x2, 0x2, 0x2, 0xef1, 0xef2, 0x3, 
       0x2, 0x2, 0x2, 0xef2, 0xef3, 0x3, 0x2, 0x2, 0x2, 0xef3, 0xef5, 0x9, 
       0x3a, 0x2, 0x2, 0xef4, 0xeef, 0x3, 0x2, 0x2, 0x2, 0xef4, 0xef5, 0x3, 
       0x2, 0x2, 0x2, 0xef5, 0xefb, 0x3, 0x2, 0x2, 0x2, 0xef6, 0xef7, 0x7, 
       0x5a, 0x2, 0x2, 0xef7, 0xef8, 0x7, 0x269, 0x2, 0x2, 0xef8, 0xef9, 
       0x5, 0x3a6, 0x1d4, 0x2, 0xef9, 0xefa, 0x7, 0x26a, 0x2, 0x2, 0xefa, 
       0xefc, 0x3, 0x2, 0x2, 0x2, 0xefb, 0xef6, 0x3, 0x2, 0x2, 0x2, 0xefb, 
       0xefc, 0x3, 0x2, 0x2, 0x2, 0xefc, 0xefd, 0x3, 0x2, 0x2, 0x2, 0xefd, 
       0xefe, 0x7, 0xd4, 0x2, 0x2, 0xefe, 0xeff, 0x7, 0x45, 0x2, 0x2, 0xeff, 
       0xf00, 0x5, 0x410, 0x209, 0x2, 0xf00, 0xf02, 0x7, 0x269, 0x2, 0x2, 
       0xf01, 0xf03, 0x5, 0x2ee, 0x178, 0x2, 0xf02, 0xf01, 0x3, 0x2, 0x2, 
       0x2, 0xf02, 0xf03, 0x3, 0x2, 0x2, 0x2, 0xf03, 0xf04, 0x3, 0x2, 0x2, 
       0x2, 0xf04, 0xf05, 0x7, 0x26a, 0x2, 0x2, 0xf05, 0x22d, 0x3, 0x2, 
       0x2, 0x2, 0xf06, 0xf0b, 0x7, 0x89, 0x2, 0x2, 0xf07, 0xf0b, 0x7, 0x7b, 
       0x2, 0x2, 0xf08, 0xf09, 0x7, 0xf9, 0x2, 0x2, 0xf09, 0xf0b, 0x7, 0x12e, 
       0x2, 0x2, 0xf0a, 0xf06, 0x3, 0x2, 0x2, 0x2, 0xf0a, 0xf07, 0x3, 0x2, 
       0x2, 0x2, 0xf0a, 0xf08, 0x3, 0x2, 0x2, 0x2, 0xf0b, 0x22f, 0x3, 0x2, 
       0x2, 0x2, 0xf0c, 0xf11, 0x5, 0x232, 0x11a, 0x2, 0xf0d, 0xf0e, 0x7, 
       0x41, 0x2, 0x2, 0xf0e, 0xf10, 0x5, 0x232, 0x11a, 0x2, 0xf0f, 0xf0d, 
       0x3, 0x2, 0x2, 0x2, 0xf10, 0xf13, 0x3, 0x2, 0x2, 0x2, 0xf11, 0xf0f, 
       0x3, 0x2, 0x2, 0x2, 0xf11, 0xf12, 0x3, 0x2, 0x2, 0x2, 0xf12, 0x231, 
       0x3, 0x2, 0x2, 0x2, 0xf13, 0xf11, 0x3, 0x2, 0x2, 0x2, 0xf14, 0xf24, 
       0x7, 0xf8, 0x2, 0x2, 0xf15, 0xf1f, 0x7, 0x1a2, 0x2, 0x2, 0xf16, 0xf17, 
       0x7, 0x12e, 0x2, 0x2, 0xf17, 0xf1c, 0x5, 0x86, 0x44, 0x2, 0xf18, 
       0xf19, 0x7, 0x26f, 0x2, 0x2, 0xf19, 0xf1b, 0x5, 0x86, 0x44, 0x2, 
       0xf1a, 0xf18, 0x3, 0x2, 0x2, 0x2, 0xf1b, 0xf1e, 0x3, 0x2, 0x2, 0x2, 
       0xf1c, 0xf1a, 0x3, 0x2, 0x2, 0x2, 0xf1c, 0xf1d, 0x3, 0x2, 0x2, 0x2, 
       0xf1d, 0xf20, 0x3, 0x2, 0x2, 0x2, 0xf1e, 0xf1c, 0x3, 0x2, 0x2, 0x2, 
       0xf1f, 0xf16, 0x3, 0x2, 0x2, 0x2, 0xf1f, 0xf20, 0x3, 0x2, 0x2, 0x2, 
       0xf20, 0xf24, 0x3, 0x2, 0x2, 0x2, 0xf21, 0xf24, 0x7, 0xb7, 0x2, 0x2, 
       0xf22, 0xf24, 0x7, 0x194, 0x2, 0x2, 0xf23, 0xf14, 0x3, 0x2, 0x2, 
       0x2, 0xf23, 0xf15, 0x3, 0x2, 0x2, 0x2, 0xf23, 0xf21, 0x3, 0x2, 0x2, 
       0x2, 0xf23, 0xf22, 0x3, 0x2, 0x2, 0x2, 0xf24, 0x233, 0x3, 0x2, 0x2, 
       0x2, 0xf25, 0xf26, 0x7, 0x15, 0x2, 0x2, 0xf26, 0xf27, 0x7, 0x197, 
       0x2, 0x2, 0xf27, 0xf29, 0x5, 0x186, 0xc4, 0x2, 0xf28, 0xf2a, 0x7, 
       0xb, 0x2, 0x2, 0xf29, 0xf28, 0x3, 0x2, 0x2, 0x2, 0xf29, 0xf2a, 0x3, 
       0x2, 0x2, 0x2, 0xf2a, 0xf2c, 0x3, 0x2, 0x2, 0x2, 0xf2b, 0xf2d, 0x7, 
       0xcb, 0x2, 0x2, 0xf2c, 0xf2b, 0x3, 0x2, 0x2, 0x2, 0xf2c, 0xf2d, 0x3, 
       0x2, 0x2, 0x2, 0xf2d, 0xf32, 0x3, 0x2, 0x2, 0x2, 0xf2e, 0xf2f, 0x7, 
       0x269, 0x2, 0x2, 0xf2f, 0xf30, 0x5, 0x236, 0x11c, 0x2, 0xf30, 0xf31, 
       0x7, 0x26a, 0x2, 0x2, 0xf31, 0xf33, 0x3, 0x2, 0x2, 0x2, 0xf32, 0xf2e, 
       0x3, 0x2, 0x2, 0x2, 0xf32, 0xf33, 0x3, 0x2, 0x2, 0x2, 0xf33, 0x235, 
       0x3, 0x2, 0x2, 0x2, 0xf34, 0xf39, 0x5, 0x124, 0x93, 0x2, 0xf35, 0xf36, 
       0x7, 0x26f, 0x2, 0x2, 0xf36, 0xf38, 0x5, 0x124, 0x93, 0x2, 0xf37, 
       0xf35, 0x3, 0x2, 0x2, 0x2, 0xf38, 0xf3b, 0x3, 0x2, 0x2, 0x2, 0xf39, 
       0xf37, 0x3, 0x2, 0x2, 0x2, 0xf39, 0xf3a, 0x3, 0x2, 0x2, 0x2, 0xf3a, 
       0xf3f, 0x3, 0x2, 0x2, 0x2, 0xf3b, 0xf39, 0x3, 0x2, 0x2, 0x2, 0xf3c, 
       0xf3f, 0x5, 0x18, 0xd, 0x2, 0xf3d, 0xf3f, 0x5, 0x3a4, 0x1d3, 0x2, 
       0xf3e, 0xf34, 0x3, 0x2, 0x2, 0x2, 0xf3e, 0xf3c, 0x3, 0x2, 0x2, 0x2, 
       0xf3e, 0xf3d, 0x3, 0x2, 0x2, 0x2, 0xf3f, 0x237, 0x3, 0x2, 0x2, 0x2, 
       0xf40, 0xf41, 0x7, 0x15, 0x2, 0x2, 0xf41, 0xf42, 0x7, 0x57, 0x2, 
       0x2, 0xf42, 0xf4b, 0x5, 0xb2, 0x5a, 0x2, 0xf43, 0xf45, 0x7, 0x5d, 
       0x2, 0x2, 0xf44, 0xf43, 0x3, 0x2, 0x2, 0x2, 0xf44, 0xf45, 0x3, 0x2, 
       0x2, 0x2, 0xf45, 0xf47, 0x3, 0x2, 0x2, 0x2, 0xf46, 0xf48, 0x5, 0xe8, 
       0x75, 0x2, 0xf47, 0xf46, 0x3, 0x2, 0x2, 0x2, 0xf48, 0xf49, 0x3, 0x2, 
       0x2, 0x2, 0xf49, 0xf47, 0x3, 0x2, 0x2, 0x2, 0xf49, 0xf4a, 0x3, 0x2, 
       0x2, 0x2, 0xf4a, 0xf4c, 0x3, 0x2, 0x2, 0x2, 0xf4b, 0xf44, 0x3, 0x2, 
       0x2, 0x2, 0xf4b, 0xf4c, 0x3, 0x2, 0x2, 0x2, 0xf4c, 0xf4e, 0x3, 0x2, 
       0x2, 0x2, 0xf4d, 0xf4f, 0x9, 0x1c, 0x2, 0x2, 0xf4e, 0xf4d, 0x3, 0x2, 
       0x2, 0x2, 0xf4e, 0xf4f, 0x3, 0x2, 0x2, 0x2, 0xf4f, 0xf50, 0x3, 0x2, 
       0x2, 0x2, 0xf50, 0xf51, 0x5, 0xea, 0x76, 0x2, 0xf51, 0x239, 0x3, 
       0x2, 0x2, 0x2, 0xf52, 0xf54, 0x7, 0x15, 0x2, 0x2, 0xf53, 0xf55, 0x5, 
       0x1b0, 0xd9, 0x2, 0xf54, 0xf53, 0x3, 0x2, 0x2, 0x2, 0xf54, 0xf55, 
       0x3, 0x2, 0x2, 0x2, 0xf55, 0xf57, 0x3, 0x2, 0x2, 0x2, 0xf56, 0xf58, 
       0x5, 0x214, 0x10b, 0x2, 0xf57, 0xf56, 0x3, 0x2, 0x2, 0x2, 0xf57, 
       0xf58, 0x3, 0x2, 0x2, 0x2, 0xf58, 0xf59, 0x3, 0x2, 0x2, 0x2, 0xf59, 
       0xf5a, 0x7, 0x1ab, 0x2, 0x2, 0xf5a, 0xf5c, 0x5, 0x19e, 0xd0, 0x2, 
       0xf5b, 0xf5d, 0x5, 0x138, 0x9d, 0x2, 0xf5c, 0xf5b, 0x3, 0x2, 0x2, 
       0x2, 0xf5c, 0xf5d, 0x3, 0x2, 0x2, 0x2, 0xf5d, 0xf60, 0x3, 0x2, 0x2, 
       0x2, 0xf5e, 0xf5f, 0x7, 0x5d, 0x2, 0x2, 0xf5f, 0xf61, 0x5, 0x18, 
       0xd, 0x2, 0xf60, 0xf5e, 0x3, 0x2, 0x2, 0x2, 0xf60, 0xf61, 0x3, 0x2, 
       0x2, 0x2, 0xf61, 0xf62, 0x3, 0x2, 0x2, 0x2, 0xf62, 0xf63, 0x7, 0xb, 
       0x2, 0x2, 0xf63, 0xf64, 0x5, 0x23e, 0x120, 0x2, 0xf64, 0x23b, 0x3, 
       0x2, 0x2, 0x2, 0xf65, 0xf6b, 0x5, 0x23e, 0x120, 0x2, 0xf66, 0xf6b, 
       0x5, 0x290, 0x149, 0x2, 0xf67, 0xf6b, 0x5, 0x296, 0x14c, 0x2, 0xf68, 
       0xf6b, 0x5, 0x29a, 0x14e, 0x2, 0xf69, 0xf6b, 0x5, 0x3a0, 0x1d1, 0x2, 
       0xf6a, 0xf65, 0x3, 0x2, 0x2, 0x2, 0xf6a, 0xf66, 0x3, 0x2, 0x2, 0x2, 
       0xf6a, 0xf67, 0x3, 0x2, 0x2, 0x2, 0xf6a, 0xf68, 0x3, 0x2, 0x2, 0x2, 
       0xf6a, 0xf69, 0x3, 0x2, 0x2, 0x2, 0xf6b, 0x23d, 0x3, 0x2, 0x2, 0x2, 
       0xf6c, 0xf70, 0x5, 0x240, 0x121, 0x2, 0xf6d, 0xf6f, 0x5, 0x244, 0x123, 
       0x2, 0xf6e, 0xf6d, 0x3, 0x2, 0x2, 0x2, 0xf6f, 0xf72, 0x3, 0x2, 0x2, 
       0x2, 0xf70, 0xf6e, 0x3, 0x2, 0x2, 0x2, 0xf70, 0xf71, 0x3, 0x2, 0x2, 
       0x2, 0xf71, 0x23f, 0x3, 0x2, 0x2, 0x2, 0xf72, 0xf70, 0x3, 0x2, 0x2, 
       0x2, 0xf73, 0xf76, 0x5, 0x246, 0x124, 0x2, 0xf74, 0xf76, 0x5, 0x242, 
       0x122, 0x2, 0xf75, 0xf73, 0x3, 0x2, 0x2, 0x2, 0xf75, 0xf74, 0x3, 
       0x2, 0x2, 0x2, 0xf76, 0x241, 0x3, 0x2, 0x2, 0x2, 0xf77, 0xf78, 0x7, 
       0x269, 0x2, 0x2, 0xf78, 0xf79, 0x5, 0x23e, 0x120, 0x2, 0xf79, 0xf7a, 
       0x7, 0x26a, 0x2, 0x2, 0xf7a, 0x243, 0x3, 0x2, 0x2, 0x2, 0xf7b, 0xf7d, 
       0x9, 0x3b, 0x2, 0x2, 0xf7c, 0xf7e, 0x5, 0x24a, 0x126, 0x2, 0xf7d, 
       0xf7c, 0x3, 0x2, 0x2, 0x2, 0xf7d, 0xf7e, 0x3, 0x2, 0x2, 0x2, 0xf7e, 
       0xf7f, 0x3, 0x2, 0x2, 0x2, 0xf7f, 0xf80, 0x5, 0x240, 0x121, 0x2, 
       0xf80, 0x245, 0x3, 0x2, 0x2, 0x2, 0xf81, 0xf83, 0x5, 0x29c, 0x14f, 
       0x2, 0xf82, 0xf81, 0x3, 0x2, 0x2, 0x2, 0xf82, 0xf83, 0x3, 0x2, 0x2, 
       0x2, 0xf83, 0xf84, 0x3, 0x2, 0x2, 0x2, 0xf84, 0xf86, 0x5, 0x248, 
       0x125, 0x2, 0xf85, 0xf87, 0x5, 0x270, 0x139, 0x2, 0xf86, 0xf85, 0x3, 
       0x2, 0x2, 0x2, 0xf86, 0xf87, 0x3, 0x2, 0x2, 0x2, 0xf87, 0xf89, 0x3, 
       0x2, 0x2, 0x2, 0xf88, 0xf8a, 0x5, 0x27e, 0x140, 0x2, 0xf89, 0xf88, 
       0x3, 0x2, 0x2, 0x2, 0xf89, 0xf8a, 0x3, 0x2, 0x2, 0x2, 0xf8a, 0xf8c, 
       0x3, 0x2, 0x2, 0x2, 0xf8b, 0xf8d, 0x5, 0x288, 0x145, 0x2, 0xf8c, 
       0xf8b, 0x3, 0x2, 0x2, 0x2, 0xf8c, 0xf8d, 0x3, 0x2, 0x2, 0x2, 0xf8d, 
       0xf8f, 0x3, 0x2, 0x2, 0x2, 0xf8e, 0xf90, 0x5, 0x28a, 0x146, 0x2, 
       0xf8f, 0xf8e, 0x3, 0x2, 0x2, 0x2, 0xf8f, 0xf90, 0x3, 0x2, 0x2, 0x2, 
       0xf90, 0xf92, 0x3, 0x2, 0x2, 0x2, 0xf91, 0xf93, 0x5, 0x28c, 0x147, 
       0x2, 0xf92, 0xf91, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf93, 0x3, 0x2, 0x2, 
       0x2, 0xf93, 0xf97, 0x3, 0x2, 0x2, 0x2, 0xf94, 0xf96, 0x5, 0x28e, 
       0x148, 0x2, 0xf95, 0xf94, 0x3, 0x2, 0x2, 0x2, 0xf96, 0xf99, 0x3, 
       0x2, 0x2, 0x2, 0xf97, 0xf95, 0x3, 0x2, 0x2, 0x2, 0xf97, 0xf98, 0x3, 
       0x2, 0x2, 0x2, 0xf98, 0x247, 0x3, 0x2, 0x2, 0x2, 0xf99, 0xf97, 0x3, 
       0x2, 0x2, 0x2, 0xf9a, 0xf9c, 0x7, 0x4a, 0x2, 0x2, 0xf9b, 0xf9d, 0x5, 
       0x24a, 0x126, 0x2, 0xf9c, 0xf9b, 0x3, 0x2, 0x2, 0x2, 0xf9c, 0xf9d, 
       0x3, 0x2, 0x2, 0x2, 0xf9d, 0xf9e, 0x3, 0x2, 0x2, 0x2, 0xf9e, 0xfa0, 
       0x5, 0x24c, 0x127, 0x2, 0xf9f, 0xfa1, 0x5, 0x250, 0x129, 0x2, 0xfa0, 
       0xf9f, 0x3, 0x2, 0x2, 0x2, 0xfa0, 0xfa1, 0x3, 0x2, 0x2, 0x2, 0xfa1, 
       0xfa3, 0x3, 0x2, 0x2, 0x2, 0xfa2, 0xfa4, 0x5, 0x252, 0x12a, 0x2, 
       0xfa3, 0xfa2, 0x3, 0x2, 0x2, 0x2, 0xfa3, 0xfa4, 0x3, 0x2, 0x2, 0x2, 
       0xfa4, 0xfa6, 0x3, 0x2, 0x2, 0x2, 0xfa5, 0xfa7, 0x5, 0x2a6, 0x154, 
       0x2, 0xfa6, 0xfa5, 0x3, 0x2, 0x2, 0x2, 0xfa6, 0xfa7, 0x3, 0x2, 0x2, 
       0x2, 0xfa7, 0xfa9, 0x3, 0x2, 0x2, 0x2, 0xfa8, 0xfaa, 0x5, 0x264, 
       0x133, 0x2, 0xfa9, 0xfa8, 0x3, 0x2, 0x2, 0x2, 0xfa9, 0xfaa, 0x3, 
       0x2, 0x2, 0x2, 0xfaa, 0xfac, 0x3, 0x2, 0x2, 0x2, 0xfab, 0xfad, 0x5, 
       0x26e, 0x138, 0x2, 0xfac, 0xfab, 0x3, 0x2, 0x2, 0x2, 0xfac, 0xfad, 
       0x3, 0x2, 0x2, 0x2, 0xfad, 0x249, 0x3, 0x2, 0x2, 0x2, 0xfae, 0xfb5, 
       0x7, 0x3, 0x2, 0x2, 0xfaf, 0xfb2, 0x7, 0x1f, 0x2, 0x2, 0xfb0, 0xfb1, 
       0x7, 0x3f, 0x2, 0x2, 0xfb1, 0xfb3, 0x5, 0x3a2, 0x1d2, 0x2, 0xfb2, 
       0xfb0, 0x3, 0x2, 0x2, 0x2, 0xfb2, 0xfb3, 0x3, 0x2, 0x2, 0x2, 0xfb3, 
       0xfb5, 0x3, 0x2, 0x2, 0x2, 0xfb4, 0xfae, 0x3, 0x2, 0x2, 0x2, 0xfb4, 
       0xfaf, 0x3, 0x2, 0x2, 0x2, 0xfb5, 0x24b, 0x3, 0x2, 0x2, 0x2, 0xfb6, 
       0xfbb, 0x5, 0x24e, 0x128, 0x2, 0xfb7, 0xfb8, 0x7, 0x26f, 0x2, 0x2, 
       0xfb8, 0xfba, 0x5, 0x24e, 0x128, 0x2, 0xfb9, 0xfb7, 0x3, 0x2, 0x2, 
       0x2, 0xfba, 0xfbd, 0x3, 0x2, 0x2, 0x2, 0xfbb, 0xfb9, 0x3, 0x2, 0x2, 
       0x2, 0xfbb, 0xfbc, 0x3, 0x2, 0x2, 0x2, 0xfbc, 0x24d, 0x3, 0x2, 0x2, 
       0x2, 0xfbd, 0xfbb, 0x3, 0x2, 0x2, 0x2, 0xfbe, 0xfc0, 0x5, 0x3a6, 
       0x1d4, 0x2, 0xfbf, 0xfc1, 0x5, 0x2a2, 0x152, 0x2, 0xfc0, 0xfbf, 0x3, 
       0x2, 0x2, 0x2, 0xfc0, 0xfc1, 0x3, 0x2, 0x2, 0x2, 0xfc1, 0xfc4, 0x3, 
       0x2, 0x2, 0x2, 0xfc2, 0xfc4, 0x7, 0x26c, 0x2, 0x2, 0xfc3, 0xfbe, 
       0x3, 0x2, 0x2, 0x2, 0xfc3, 0xfc2, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0x24f, 
       0x3, 0x2, 0x2, 0x2, 0xfc5, 0xfc7, 0x7, 0x2f, 0x2, 0x2, 0xfc6, 0xfc8, 
       0x7, 0x19f, 0x2, 0x2, 0xfc7, 0xfc6, 0x3, 0x2, 0x2, 0x2, 0xfc7, 0xfc8, 
       0x3, 0x2, 0x2, 0x2, 0xfc8, 0xfca, 0x3, 0x2, 0x2, 0x2, 0xfc9, 0xfcb, 
       0x7, 0x50, 0x2, 0x2, 0xfca, 0xfc9, 0x3, 0x2, 0x2, 0x2, 0xfca, 0xfcb, 
       0x3, 0x2, 0x2, 0x2, 0xfcb, 0xfcc, 0x3, 0x2, 0x2, 0x2, 0xfcc, 0xfcd, 
       0x5, 0x7c, 0x3f, 0x2, 0xfcd, 0x251, 0x3, 0x2, 0x2, 0x2, 0xfce, 0xfcf, 
       0x7, 0x28, 0x2, 0x2, 0xfcf, 0xfd0, 0x5, 0x254, 0x12b, 0x2, 0xfd0, 
       0x253, 0x3, 0x2, 0x2, 0x2, 0xfd1, 0xfd6, 0x5, 0x256, 0x12c, 0x2, 
       0xfd2, 0xfd3, 0x7, 0x26f, 0x2, 0x2, 0xfd3, 0xfd5, 0x5, 0x256, 0x12c, 
       0x2, 0xfd4, 0xfd2, 0x3, 0x2, 0x2, 0x2, 0xfd5, 0xfd8, 0x3, 0x2, 0x2, 
       0x2, 0xfd6, 0xfd4, 0x3, 0x2, 0x2, 0x2, 0xfd6, 0xfd7, 0x3, 0x2, 0x2, 
       0x2, 0xfd7, 0x255, 0x3, 0x2, 0x2, 0x2, 0xfd8, 0xfd6, 0x3, 0x2, 0x2, 
       0x2, 0xfd9, 0xfdb, 0x8, 0x12c, 0x1, 0x2, 0xfda, 0xfdc, 0x7, 0x3e, 
       0x2, 0x2, 0xfdb, 0xfda, 0x3, 0x2, 0x2, 0x2, 0xfdb, 0xfdc, 0x3, 0x2, 
       0x2, 0x2, 0xfdc, 0xfdd, 0x3, 0x2, 0x2, 0x2, 0xfdd, 0xfdf, 0x5, 0x7c, 
       0x3f, 0x2, 0xfde, 0xfe0, 0x7, 0x26c, 0x2, 0x2, 0xfdf, 0xfde, 0x3, 
       0x2, 0x2, 0x2, 0xfdf, 0xfe0, 0x3, 0x2, 0x2, 0x2, 0xfe0, 0xfe2, 0x3, 
       0x2, 0x2, 0x2, 0xfe1, 0xfe3, 0x5, 0x258, 0x12d, 0x2, 0xfe2, 0xfe1, 
       0x3, 0x2, 0x2, 0x2, 0xfe2, 0xfe3, 0x3, 0x2, 0x2, 0x2, 0xfe3, 0xfe5, 
       0x3, 0x2, 0x2, 0x2, 0xfe4, 0xfe6, 0x5, 0x25a, 0x12e, 0x2, 0xfe5, 
       0xfe4, 0x3, 0x2, 0x2, 0x2, 0xfe5, 0xfe6, 0x3, 0x2, 0x2, 0x2, 0xfe6, 
       0xfe8, 0x3, 0x2, 0x2, 0x2, 0xfe7, 0xfe9, 0x5, 0x25c, 0x12f, 0x2, 
       0xfe8, 0xfe7, 0x3, 0x2, 0x2, 0x2, 0xfe8, 0xfe9, 0x3, 0x2, 0x2, 0x2, 
       0xfe9, 0xffa, 0x3, 0x2, 0x2, 0x2, 0xfea, 0xfec, 0x5, 0x242, 0x122, 
       0x2, 0xfeb, 0xfed, 0x5, 0x25a, 0x12e, 0x2, 0xfec, 0xfeb, 0x3, 0x2, 
       0x2, 0x2, 0xfec, 0xfed, 0x3, 0x2, 0x2, 0x2, 0xfed, 0xffa, 0x3, 0x2, 
       0x2, 0x2, 0xfee, 0xfef, 0x5, 0x410, 0x209, 0x2, 0xfef, 0xff1, 0x5, 
       0x3a2, 0x1d2, 0x2, 0xff0, 0xff2, 0x7, 0xb, 0x2, 0x2, 0xff1, 0xff0, 
       0x3, 0x2, 0x2, 0x2, 0xff1, 0xff2, 0x3, 0x2, 0x2, 0x2, 0xff2, 0xff4, 
       0x3, 0x2, 0x2, 0x2, 0xff3, 0xff5, 0x5, 0x2a4, 0x153, 0x2, 0xff4, 
       0xff3, 0x3, 0x2, 0x2, 0x2, 0xff4, 0xff5, 0x3, 0x2, 0x2, 0x2, 0xff5, 
       0xff7, 0x3, 0x2, 0x2, 0x2, 0xff6, 0xff8, 0x5, 0x138, 0x9d, 0x2, 0xff7, 
       0xff6, 0x3, 0x2, 0x2, 0x2, 0xff7, 0xff8, 0x3, 0x2, 0x2, 0x2, 0xff8, 
       0xffa, 0x3, 0x2, 0x2, 0x2, 0xff9, 0xfd9, 0x3, 0x2, 0x2, 0x2, 0xff9, 
       0xfea, 0x3, 0x2, 0x2, 0x2, 0xff9, 0xfee, 0x3, 0x2, 0x2, 0x2, 0xffa, 
       0x100a, 0x3, 0x2, 0x2, 0x2, 0xffb, 0xffd, 0xc, 0x3, 0x2, 0x2, 0xffc, 
       0xffe, 0x7, 0x6c, 0x2, 0x2, 0xffd, 0xffc, 0x3, 0x2, 0x2, 0x2, 0xffd, 
       0xffe, 0x3, 0x2, 0x2, 0x2, 0xffe, 0x1000, 0x3, 0x2, 0x2, 0x2, 0xfff, 
       0x1001, 0x5, 0x260, 0x131, 0x2, 0x1000, 0xfff, 0x3, 0x2, 0x2, 0x2, 
       0x1000, 0x1001, 0x3, 0x2, 0x2, 0x2, 0x1001, 0x1002, 0x3, 0x2, 0x2, 
       0x2, 0x1002, 0x1003, 0x7, 0x69, 0x2, 0x2, 0x1003, 0x1006, 0x5, 0x256, 
       0x12c, 0x2, 0x1004, 0x1007, 0x5, 0x358, 0x1ad, 0x2, 0x1005, 0x1007, 
       0x5, 0x262, 0x132, 0x2, 0x1006, 0x1004, 0x3, 0x2, 0x2, 0x2, 0x1006, 
       0x1005, 0x3, 0x2, 0x2, 0x2, 0x1006, 0x1007, 0x3, 0x2, 0x2, 0x2, 0x1007, 
       0x1009, 0x3, 0x2, 0x2, 0x2, 0x1008, 0xffb, 0x3, 0x2, 0x2, 0x2, 0x1009, 
       0x100c, 0x3, 0x2, 0x2, 0x2, 0x100a, 0x1008, 0x3, 0x2, 0x2, 0x2, 0x100a, 
       0x100b, 0x3, 0x2, 0x2, 0x2, 0x100b, 0x257, 0x3, 0x2, 0x2, 0x2, 0x100c, 
       0x100a, 0x3, 0x2, 0x2, 0x2, 0x100d, 0x1014, 0x7, 0x139, 0x2, 0x2, 
       0x100e, 0x100f, 0x7, 0x269, 0x2, 0x2, 0x100f, 0x1010, 0x5, 0xc8, 
       0x65, 0x2, 0x1010, 0x1011, 0x7, 0x26a, 0x2, 0x2, 0x1011, 0x1015, 
       0x3, 0x2, 0x2, 0x2, 0x1012, 0x1013, 0x7, 0x27, 0x2, 0x2, 0x1013, 
       0x1015, 0x5, 0x148, 0xa5, 0x2, 0x1014, 0x100e, 0x3, 0x2, 0x2, 0x2, 
       0x1014, 0x1012, 0x3, 0x2, 0x2, 0x2, 0x1015, 0x259, 0x3, 0x2, 0x2, 
       0x2, 0x1016, 0x1018, 0x7, 0xb, 0x2, 0x2, 0x1017, 0x1016, 0x3, 0x2, 
       0x2, 0x2, 0x1017, 0x1018, 0x3, 0x2, 0x2, 0x2, 0x1018, 0x1019, 0x3, 
       0x2, 0x2, 0x2, 0x1019, 0x101b, 0x5, 0x2a4, 0x153, 0x2, 0x101a, 0x101c, 
       0x5, 0x138, 0x9d, 0x2, 0x101b, 0x101a, 0x3, 0x2, 0x2, 0x2, 0x101b, 
       0x101c, 0x3, 0x2, 0x2, 0x2, 0x101c, 0x25b, 0x3, 0x2, 0x2, 0x2, 0x101d, 
       0x101e, 0x7, 0x25d, 0x2, 0x2, 0x101e, 0x101f, 0x5, 0x25e, 0x130, 
       0x2, 0x101f, 0x1022, 0x5, 0x3a2, 0x1d2, 0x2, 0x1020, 0x1021, 0x7, 
       0x15c, 0x2, 0x2, 0x1021, 0x1023, 0x5, 0x3a2, 0x1d2, 0x2, 0x1022, 
       0x1020, 0x3, 0x2, 0x2, 0x2, 0x1022, 0x1023, 0x3, 0x2, 0x2, 0x2, 0x1023, 
       0x25d, 0x3, 0x2, 0x2, 0x2, 0x1024, 0x1025, 0x5, 0x41a, 0x20e, 0x2, 
       0x1025, 0x25f, 0x3, 0x2, 0x2, 0x2, 0x1026, 0x102d, 0x7, 0x67, 0x2, 
       0x2, 0x1027, 0x1029, 0x9, 0x3c, 0x2, 0x2, 0x1028, 0x102a, 0x7, 0x6e, 
       0x2, 0x2, 0x1029, 0x1028, 0x3, 0x2, 0x2, 0x2, 0x1029, 0x102a, 0x3, 
       0x2, 0x2, 0x2, 0x102a, 0x102d, 0x3, 0x2, 0x2, 0x2, 0x102b, 0x102d, 
       0x7, 0x62, 0x2, 0x2, 0x102c, 0x1026, 0x3, 0x2, 0x2, 0x2, 0x102c, 
       0x1027, 0x3, 0x2, 0x2, 0x2, 0x102c, 0x102b, 0x3, 0x2, 0x2, 0x2, 0x102d, 
       0x261, 0x3, 0x2, 0x2, 0x2, 0x102e, 0x102f, 0x7, 0x58, 0x2, 0x2, 0x102f, 
       0x1030, 0x5, 0x138, 0x9d, 0x2, 0x1030, 0x263, 0x3, 0x2, 0x2, 0x2, 
       0x1031, 0x1032, 0x7, 0x2b, 0x2, 0x2, 0x1032, 0x1033, 0x7, 0x8c, 0x2, 
       0x2, 0x1033, 0x1034, 0x5, 0x266, 0x134, 0x2, 0x1034, 0x265, 0x3, 
       0x2, 0x2, 0x2, 0x1035, 0x103a, 0x5, 0x268, 0x135, 0x2, 0x1036, 0x1037, 
       0x7, 0x26f, 0x2, 0x2, 0x1037, 0x1039, 0x5, 0x268, 0x135, 0x2, 0x1038, 
       0x1036, 0x3, 0x2, 0x2, 0x2, 0x1039, 0x103c, 0x3, 0x2, 0x2, 0x2, 0x103a, 
       0x1038, 0x3, 0x2, 0x2, 0x2, 0x103a, 0x103b, 0x3, 0x2, 0x2, 0x2, 0x103b, 
       0x267, 0x3, 0x2, 0x2, 0x2, 0x103c, 0x103a, 0x3, 0x2, 0x2, 0x2, 0x103d, 
       0x103f, 0x7, 0x269, 0x2, 0x2, 0x103e, 0x1040, 0x5, 0x3a4, 0x1d3, 
       0x2, 0x103f, 0x103e, 0x3, 0x2, 0x2, 0x2, 0x103f, 0x1040, 0x3, 0x2, 
       0x2, 0x2, 0x1040, 0x1041, 0x3, 0x2, 0x2, 0x2, 0x1041, 0x104c, 0x7, 
       0x26a, 0x2, 0x2, 0x1042, 0x104c, 0x5, 0x3a6, 0x1d4, 0x2, 0x1043, 
       0x1044, 0x9, 0x3d, 0x2, 0x2, 0x1044, 0x104c, 0x5, 0x26a, 0x136, 0x2, 
       0x1045, 0x1046, 0x7, 0x260, 0x2, 0x2, 0x1046, 0x1047, 0x7, 0x261, 
       0x2, 0x2, 0x1047, 0x1048, 0x7, 0x269, 0x2, 0x2, 0x1048, 0x1049, 0x5, 
       0x266, 0x134, 0x2, 0x1049, 0x104a, 0x7, 0x26a, 0x2, 0x2, 0x104a, 
       0x104c, 0x3, 0x2, 0x2, 0x2, 0x104b, 0x103d, 0x3, 0x2, 0x2, 0x2, 0x104b, 
       0x1042, 0x3, 0x2, 0x2, 0x2, 0x104b, 0x1043, 0x3, 0x2, 0x2, 0x2, 0x104b, 
       0x1045, 0x3, 0x2, 0x2, 0x2, 0x104c, 0x269, 0x3, 0x2, 0x2, 0x2, 0x104d, 
       0x104e, 0x7, 0x269, 0x2, 0x2, 0x104e, 0x1053, 0x5, 0x26c, 0x137, 
       0x2, 0x104f, 0x1050, 0x7, 0x26f, 0x2, 0x2, 0x1050, 0x1052, 0x5, 0x26c, 
       0x137, 0x2, 0x1051, 0x104f, 0x3, 0x2, 0x2, 0x2, 0x1052, 0x1055, 0x3, 
       0x2, 0x2, 0x2, 0x1053, 0x1051, 0x3, 0x2, 0x2, 0x2, 0x1053, 0x1054, 
       0x3, 0x2, 0x2, 0x2, 0x1054, 0x1056, 0x3, 0x2, 0x2, 0x2, 0x1055, 0x1053, 
       0x3, 0x2, 0x2, 0x2, 0x1056, 0x1057, 0x7, 0x26a, 0x2, 0x2, 0x1057, 
       0x26b, 0x3, 0x2, 0x2, 0x2, 0x1058, 0x105b, 0x5, 0x3a6, 0x1d4, 0x2, 
       0x1059, 0x105b, 0x5, 0x3a2, 0x1d2, 0x2, 0x105a, 0x1058, 0x3, 0x2, 
       0x2, 0x2, 0x105a, 0x1059, 0x3, 0x2, 0x2, 0x2, 0x105b, 0x26d, 0x3, 
       0x2, 0x2, 0x2, 0x105c, 0x105d, 0x7, 0x2c, 0x2, 0x2, 0x105d, 0x105e, 
       0x5, 0x3a4, 0x1d3, 0x2, 0x105e, 0x26f, 0x3, 0x2, 0x2, 0x2, 0x105f, 
       0x1060, 0x7, 0x5c, 0x2, 0x2, 0x1060, 0x1061, 0x5, 0x272, 0x13a, 0x2, 
       0x1061, 0x271, 0x3, 0x2, 0x2, 0x2, 0x1062, 0x1067, 0x5, 0x274, 0x13b, 
       0x2, 0x1063, 0x1064, 0x7, 0x26f, 0x2, 0x2, 0x1064, 0x1066, 0x5, 0x274, 
       0x13b, 0x2, 0x1065, 0x1063, 0x3, 0x2, 0x2, 0x2, 0x1066, 0x1069, 0x3, 
       0x2, 0x2, 0x2, 0x1067, 0x1065, 0x3, 0x2, 0x2, 0x2, 0x1067, 0x1068, 
       0x3, 0x2, 0x2, 0x2, 0x1068, 0x273, 0x3, 0x2, 0x2, 0x2, 0x1069, 0x1067, 
       0x3, 0x2, 0x2, 0x2, 0x106a, 0x106b, 0x5, 0x276, 0x13c, 0x2, 0x106b, 
       0x106c, 0x7, 0xb, 0x2, 0x2, 0x106c, 0x106d, 0x7, 0x269, 0x2, 0x2, 
       0x106d, 0x106e, 0x5, 0x278, 0x13d, 0x2, 0x106e, 0x106f, 0x7, 0x26a, 
       0x2, 0x2, 0x106f, 0x275, 0x3, 0x2, 0x2, 0x2, 0x1070, 0x1071, 0x5, 
       0x41a, 0x20e, 0x2, 0x1071, 0x277, 0x3, 0x2, 0x2, 0x2, 0x1072, 0x1079, 
       0x5, 0x276, 0x13c, 0x2, 0x1073, 0x1074, 0x7, 0x139, 0x2, 0x2, 0x1074, 
       0x1075, 0x7, 0x8c, 0x2, 0x2, 0x1075, 0x1079, 0x5, 0x3a4, 0x1d3, 0x2, 
       0x1076, 0x1079, 0x5, 0x27e, 0x140, 0x2, 0x1077, 0x1079, 0x5, 0x27a, 
       0x13e, 0x2, 0x1078, 0x1072, 0x3, 0x2, 0x2, 0x2, 0x1078, 0x1073, 0x3, 
       0x2, 0x2, 0x2, 0x1078, 0x1076, 0x3, 0x2, 0x2, 0x2, 0x1078, 0x1077, 
       0x3, 0x2, 0x2, 0x2, 0x1079, 0x279, 0x3, 0x2, 0x2, 0x2, 0x107a, 0x107c, 
       0x9, 0x3e, 0x2, 0x2, 0x107b, 0x107a, 0x3, 0x2, 0x2, 0x2, 0x107b, 
       0x107c, 0x3, 0x2, 0x2, 0x2, 0x107c, 0x107d, 0x3, 0x2, 0x2, 0x2, 0x107d, 
       0x1087, 0x5, 0x27c, 0x13f, 0x2, 0x107e, 0x1080, 0x9, 0x3e, 0x2, 0x2, 
       0x107f, 0x107e, 0x3, 0x2, 0x2, 0x2, 0x107f, 0x1080, 0x3, 0x2, 0x2, 
       0x2, 0x1080, 0x1081, 0x3, 0x2, 0x2, 0x2, 0x1081, 0x1082, 0x7, 0x1b8, 
       0x2, 0x2, 0x1082, 0x1083, 0x5, 0x27c, 0x13f, 0x2, 0x1083, 0x1084, 
       0x7, 0x6, 0x2, 0x2, 0x1084, 0x1085, 0x5, 0x27c, 0x13f, 0x2, 0x1085, 
       0x1087, 0x3, 0x2, 0x2, 0x2, 0x1086, 0x107b, 0x3, 0x2, 0x2, 0x2, 0x1086, 
       0x107f, 0x3, 0x2, 0x2, 0x2, 0x1087, 0x27b, 0x3, 0x2, 0x2, 0x2, 0x1088, 
       0x1089, 0x7, 0x198, 0x2, 0x2, 0x1089, 0x1095, 0x7, 0x141, 0x2, 0x2, 
       0x108a, 0x108b, 0x5, 0x3a6, 0x1d4, 0x2, 0x108b, 0x108c, 0x7, 0x141, 
       0x2, 0x2, 0x108c, 0x1095, 0x3, 0x2, 0x2, 0x2, 0x108d, 0x108e, 0x7, 
       0xaa, 0x2, 0x2, 0x108e, 0x1095, 0x7, 0x1db, 0x2, 0x2, 0x108f, 0x1090, 
       0x5, 0x3a6, 0x1d4, 0x2, 0x1090, 0x1091, 0x7, 0xdc, 0x2, 0x2, 0x1091, 
       0x1095, 0x3, 0x2, 0x2, 0x2, 0x1092, 0x1093, 0x7, 0x198, 0x2, 0x2, 
       0x1093, 0x1095, 0x7, 0xdc, 0x2, 0x2, 0x1094, 0x1088, 0x3, 0x2, 0x2, 
       0x2, 0x1094, 0x108a, 0x3, 0x2, 0x2, 0x2, 0x1094, 0x108d, 0x3, 0x2, 
       0x2, 0x2, 0x1094, 0x108f, 0x3, 0x2, 0x2, 0x2, 0x1094, 0x1092, 0x3, 
       0x2, 0x2, 0x2, 0x1095, 0x27d, 0x3, 0x2, 0x2, 0x2, 0x1096, 0x1097, 
       0x7, 0x40, 0x2, 0x2, 0x1097, 0x1098, 0x7, 0x8c, 0x2, 0x2, 0x1098, 
       0x1099, 0x5, 0x280, 0x141, 0x2, 0x1099, 0x27f, 0x3, 0x2, 0x2, 0x2, 
       0x109a, 0x109f, 0x5, 0x282, 0x142, 0x2, 0x109b, 0x109c, 0x7, 0x26f, 
       0x2, 0x2, 0x109c, 0x109e, 0x5, 0x282, 0x142, 0x2, 0x109d, 0x109b, 
       0x3, 0x2, 0x2, 0x2, 0x109e, 0x10a1, 0x3, 0x2, 0x2, 0x2, 0x109f, 0x109d, 
       0x3, 0x2, 0x2, 0x2, 0x109f, 0x10a0, 0x3, 0x2, 0x2, 0x2, 0x10a0, 0x281, 
       0x3, 0x2, 0x2, 0x2, 0x10a1, 0x109f, 0x3, 0x2, 0x2, 0x2, 0x10a2, 0x10a4, 
       0x5, 0x3a6, 0x1d4, 0x2, 0x10a3, 0x10a5, 0x5, 0x284, 0x143, 0x2, 0x10a4, 
       0x10a3, 0x3, 0x2, 0x2, 0x2, 0x10a4, 0x10a5, 0x3, 0x2, 0x2, 0x2, 0x10a5, 
       0x10a7, 0x3, 0x2, 0x2, 0x2, 0x10a6, 0x10a8, 0x5, 0x1f0, 0xf9, 0x2, 
       0x10a7, 0x10a6, 0x3, 0x2, 0x2, 0x2, 0x10a7, 0x10a8, 0x3, 0x2, 0x2, 
       0x2, 0x10a8, 0x283, 0x3, 0x2, 0x2, 0x2, 0x10a9, 0x10ae, 0x7, 0x9, 
       0x2, 0x2, 0x10aa, 0x10ae, 0x7, 0x1e, 0x2, 0x2, 0x10ab, 0x10ac, 0x7, 
       0x58, 0x2, 0x2, 0x10ac, 0x10ae, 0x5, 0x41a, 0x20e, 0x2, 0x10ad, 0x10a9, 
       0x3, 0x2, 0x2, 0x2, 0x10ad, 0x10aa, 0x3, 0x2, 0x2, 0x2, 0x10ad, 0x10ab, 
       0x3, 0x2, 0x2, 0x2, 0x10ae, 0x10b1, 0x3, 0x2, 0x2, 0x2, 0x10af, 0x10b1, 
       0x5, 0x286, 0x144, 0x2, 0x10b0, 0x10ad, 0x3, 0x2, 0x2, 0x2, 0x10b0, 
       0x10af, 0x3, 0x2, 0x2, 0x2, 0x10b1, 0x285, 0x3, 0x2, 0x2, 0x2, 0x10b2, 
       0x10b3, 0x7, 0x3a, 0x2, 0x2, 0x10b3, 0x10b4, 0x7, 0x269, 0x2, 0x2, 
       0x10b4, 0x10b5, 0x5, 0x86, 0x44, 0x2, 0x10b5, 0x10b6, 0x7, 0x26f, 
       0x2, 0x2, 0x10b6, 0x10b7, 0x7, 0x286, 0x2, 0x2, 0x10b7, 0x10b8, 0x7, 
       0x26a, 0x2, 0x2, 0x10b8, 0x287, 0x3, 0x2, 0x2, 0x2, 0x10b9, 0x10bc, 
       0x7, 0x34, 0x2, 0x2, 0x10ba, 0x10bd, 0x5, 0x3a6, 0x1d4, 0x2, 0x10bb, 
       0x10bd, 0x7, 0x3, 0x2, 0x2, 0x10bc, 0x10ba, 0x3, 0x2, 0x2, 0x2, 0x10bc, 
       0x10bb, 0x3, 0x2, 0x2, 0x2, 0x10bd, 0x289, 0x3, 0x2, 0x2, 0x2, 0x10be, 
       0x10bf, 0x7, 0x3d, 0x2, 0x2, 0x10bf, 0x10c1, 0x5, 0x3a6, 0x1d4, 0x2, 
       0x10c0, 0x10c2, 0x9, 0x3f, 0x2, 0x2, 0x10c1, 0x10c0, 0x3, 0x2, 0x2, 
       0x2, 0x10c1, 0x10c2, 0x3, 0x2, 0x2, 0x2, 0x10c2, 0x28b, 0x3, 0x2, 
       0x2, 0x2, 0x10c3, 0x10c4, 0x7, 0x25, 0x2, 0x2, 0x10c4, 0x10c6, 0x9, 
       0x40, 0x2, 0x2, 0x10c5, 0x10c7, 0x5, 0x3a6, 0x1d4, 0x2, 0x10c6, 0x10c5, 
       0x3, 0x2, 0x2, 0x2, 0x10c6, 0x10c7, 0x3, 0x2, 0x2, 0x2, 0x10c7, 0x10c8, 
       0x3, 0x2, 0x2, 0x2, 0x10c8, 0x10c9, 0x9, 0x3f, 0x2, 0x2, 0x10c9, 
       0x10ca, 0x7, 0x3e, 0x2, 0x2, 0x10ca, 0x28d, 0x3, 0x2, 0x2, 0x2, 0x10cb, 
       0x10cc, 0x7, 0x27, 0x2, 0x2, 0x10cc, 0x10d6, 0x9, 0x41, 0x2, 0x2, 
       0x10cd, 0x10ce, 0x7, 0x12e, 0x2, 0x2, 0x10ce, 0x10d3, 0x5, 0x7c, 
       0x3f, 0x2, 0x10cf, 0x10d0, 0x7, 0x26f, 0x2, 0x2, 0x10d0, 0x10d2, 
       0x5, 0x7c, 0x3f, 0x2, 0x10d1, 0x10cf, 0x3, 0x2, 0x2, 0x2, 0x10d2, 
       0x10d5, 0x3, 0x2, 0x2, 0x2, 0x10d3, 0x10d1, 0x3, 0x2, 0x2, 0x2, 0x10d3, 
       0x10d4, 0x3, 0x2, 0x2, 0x2, 0x10d4, 0x10d7, 0x3, 0x2, 0x2, 0x2, 0x10d5, 
       0x10d3, 0x3, 0x2, 0x2, 0x2, 0x10d6, 0x10cd, 0x3, 0x2, 0x2, 0x2, 0x10d6, 
       0x10d7, 0x3, 0x2, 0x2, 0x2, 0x10d7, 0x10d9, 0x3, 0x2, 0x2, 0x2, 0x10d8, 
       0x10da, 0x7, 0x128, 0x2, 0x2, 0x10d9, 0x10d8, 0x3, 0x2, 0x2, 0x2, 
       0x10d9, 0x10da, 0x3, 0x2, 0x2, 0x2, 0x10da, 0x28f, 0x3, 0x2, 0x2, 
       0x2, 0x10db, 0x10dd, 0x5, 0x29c, 0x14f, 0x2, 0x10dc, 0x10db, 0x3, 
       0x2, 0x2, 0x2, 0x10dc, 0x10dd, 0x3, 0x2, 0x2, 0x2, 0x10dd, 0x10de, 
       0x3, 0x2, 0x2, 0x2, 0x10de, 0x10df, 0x7, 0xf8, 0x2, 0x2, 0x10df, 
       0x10e0, 0x7, 0x2f, 0x2, 0x2, 0x10e0, 0x10e2, 0x5, 0x7c, 0x3f, 0x2, 
       0x10e1, 0x10e3, 0x5, 0x138, 0x9d, 0x2, 0x10e2, 0x10e1, 0x3, 0x2, 
       0x2, 0x2, 0x10e2, 0x10e3, 0x3, 0x2, 0x2, 0x2, 0x10e3, 0x10e4, 0x3, 
       0x2, 0x2, 0x2, 0x10e4, 0x10e6, 0x5, 0x292, 0x14a, 0x2, 0x10e5, 0x10e7, 
       0x5, 0x2a8, 0x155, 0x2, 0x10e6, 0x10e5, 0x3, 0x2, 0x2, 0x2, 0x10e6, 
       0x10e7, 0x3, 0x2, 0x2, 0x2, 0x10e7, 0x291, 0x3, 0x2, 0x2, 0x2, 0x10e8, 
       0x10e9, 0x7, 0x1c, 0x2, 0x2, 0x10e9, 0x10f5, 0x7, 0x1e5, 0x2, 0x2, 
       0x10ea, 0x10eb, 0x7, 0x1e5, 0x2, 0x2, 0x10eb, 0x10f0, 0x5, 0x294, 
       0x14b, 0x2, 0x10ec, 0x10ed, 0x7, 0x26f, 0x2, 0x2, 0x10ed, 0x10ef, 
       0x5, 0x294, 0x14b, 0x2, 0x10ee, 0x10ec, 0x3, 0x2, 0x2, 0x2, 0x10ef, 
       0x10f2, 0x3, 0x2, 0x2, 0x2, 0x10f0, 0x10ee, 0x3, 0x2, 0x2, 0x2, 0x10f0, 
       0x10f1, 0x3, 0x2, 0x2, 0x2, 0x10f1, 0x10f5, 0x3, 0x2, 0x2, 0x2, 0x10f2, 
       0x10f0, 0x3, 0x2, 0x2, 0x2, 0x10f3, 0x10f5, 0x5, 0x23e, 0x120, 0x2, 
       0x10f4, 0x10e8, 0x3, 0x2, 0x2, 0x2, 0x10f4, 0x10ea, 0x3, 0x2, 0x2, 
       0x2, 0x10f4, 0x10f3, 0x3, 0x2, 0x2, 0x2, 0x10f5, 0x293, 0x3, 0x2, 
       0x2, 0x2, 0x10f6, 0x10f7, 0x7, 0x269, 0x2, 0x2, 0x10f7, 0x10fc, 0x5, 
       0x110, 0x89, 0x2, 0x10f8, 0x10f9, 0x7, 0x26f, 0x2, 0x2, 0x10f9, 0x10fb, 
       0x5, 0x110, 0x89, 0x2, 0x10fa, 0x10f8, 0x3, 0x2, 0x2, 0x2, 0x10fb, 
       0x10fe, 0x3, 0x2, 0x2, 0x2, 0x10fc, 0x10fa, 0x3, 0x2, 0x2, 0x2, 0x10fc, 
       0x10fd, 0x3, 0x2, 0x2, 0x2, 0x10fd, 0x10ff, 0x3, 0x2, 0x2, 0x2, 0x10fe, 
       0x10fc, 0x3, 0x2, 0x2, 0x2, 0x10ff, 0x1100, 0x7, 0x26a, 0x2, 0x2, 
       0x1100, 0x295, 0x3, 0x2, 0x2, 0x2, 0x1101, 0x1103, 0x7, 0x1a2, 0x2, 
       0x2, 0x1102, 0x1104, 0x7, 0x3e, 0x2, 0x2, 0x1103, 0x1102, 0x3, 0x2, 
       0x2, 0x2, 0x1103, 0x1104, 0x3, 0x2, 0x2, 0x2, 0x1104, 0x1105, 0x3, 
       0x2, 0x2, 0x2, 0x1105, 0x1107, 0x5, 0x7c, 0x3f, 0x2, 0x1106, 0x1108, 
       0x7, 0x26c, 0x2, 0x2, 0x1107, 0x1106, 0x3, 0x2, 0x2, 0x2, 0x1107, 
       0x1108, 0x3, 0x2, 0x2, 0x2, 0x1108, 0x110a, 0x3, 0x2, 0x2, 0x2, 0x1109, 
       0x110b, 0x5, 0x2a2, 0x152, 0x2, 0x110a, 0x1109, 0x3, 0x2, 0x2, 0x2, 
       0x110a, 0x110b, 0x3, 0x2, 0x2, 0x2, 0x110b, 0x110c, 0x3, 0x2, 0x2, 
       0x2, 0x110c, 0x110d, 0x7, 0x176, 0x2, 0x2, 0x110d, 0x110f, 0x5, 0x298, 
       0x14d, 0x2, 0x110e, 0x1110, 0x5, 0x252, 0x12a, 0x2, 0x110f, 0x110e, 
       0x3, 0x2, 0x2, 0x2, 0x110f, 0x1110, 0x3, 0x2, 0x2, 0x2, 0x1110, 0x1112, 
       0x3, 0x2, 0x2, 0x2, 0x1111, 0x1113, 0x5, 0x2a6, 0x154, 0x2, 0x1112, 
       0x1111, 0x3, 0x2, 0x2, 0x2, 0x1112, 0x1113, 0x3, 0x2, 0x2, 0x2, 0x1113, 
       0x1115, 0x3, 0x2, 0x2, 0x2, 0x1114, 0x1116, 0x5, 0x2a8, 0x155, 0x2, 
       0x1115, 0x1114, 0x3, 0x2, 0x2, 0x2, 0x1115, 0x1116, 0x3, 0x2, 0x2, 
       0x2, 0x1116, 0x297, 0x3, 0x2, 0x2, 0x2, 0x1117, 0x111c, 0x5, 0x35c, 
       0x1af, 0x2, 0x1118, 0x1119, 0x7, 0x26f, 0x2, 0x2, 0x1119, 0x111b, 
       0x5, 0x35c, 0x1af, 0x2, 0x111a, 0x1118, 0x3, 0x2, 0x2, 0x2, 0x111b, 
       0x111e, 0x3, 0x2, 0x2, 0x2, 0x111c, 0x111a, 0x3, 0x2, 0x2, 0x2, 0x111c, 
       0x111d, 0x3, 0x2, 0x2, 0x2, 0x111d, 0x299, 0x3, 0x2, 0x2, 0x2, 0x111e, 
       0x111c, 0x3, 0x2, 0x2, 0x2, 0x111f, 0x1121, 0x5, 0x29c, 0x14f, 0x2, 
       0x1120, 0x111f, 0x3, 0x2, 0x2, 0x2, 0x1120, 0x1121, 0x3, 0x2, 0x2, 
       0x2, 0x1121, 0x1122, 0x3, 0x2, 0x2, 0x2, 0x1122, 0x1123, 0x7, 0xb7, 
       0x2, 0x2, 0x1123, 0x1125, 0x7, 0x28, 0x2, 0x2, 0x1124, 0x1126, 0x7, 
       0x3e, 0x2, 0x2, 0x1125, 0x1124, 0x3, 0x2, 0x2, 0x2, 0x1125, 0x1126, 
       0x3, 0x2, 0x2, 0x2, 0x1126, 0x1127, 0x3, 0x2, 0x2, 0x2, 0x1127, 0x1129, 
       0x5, 0x7c, 0x3f, 0x2, 0x1128, 0x112a, 0x7, 0x26c, 0x2, 0x2, 0x1129, 
       0x1128, 0x3, 0x2, 0x2, 0x2, 0x1129, 0x112a, 0x3, 0x2, 0x2, 0x2, 0x112a, 
       0x112c, 0x3, 
  };
  static uint16_t serializedATNSegment2[] = {
    0x2, 0x2, 0x2, 0x112b, 0x112d, 0x5, 0x2a2, 0x152, 0x2, 0x112c, 0x112b, 
       0x3, 0x2, 0x2, 0x2, 0x112c, 0x112d, 0x3, 0x2, 0x2, 0x2, 0x112d, 0x112f, 
       0x3, 0x2, 0x2, 0x2, 0x112e, 0x1130, 0x5, 0xf6, 0x7c, 0x2, 0x112f, 
       0x112e, 0x3, 0x2, 0x2, 0x2, 0x112f, 0x1130, 0x3, 0x2, 0x2, 0x2, 0x1130, 
       0x1132, 0x3, 0x2, 0x2, 0x2, 0x1131, 0x1133, 0x5, 0x2a6, 0x154, 0x2, 
       0x1132, 0x1131, 0x3, 0x2, 0x2, 0x2, 0x1132, 0x1133, 0x3, 0x2, 0x2, 
       0x2, 0x1133, 0x1135, 0x3, 0x2, 0x2, 0x2, 0x1134, 0x1136, 0x5, 0x2a8, 
       0x155, 0x2, 0x1135, 0x1134, 0x3, 0x2, 0x2, 0x2, 0x1135, 0x1136, 0x3, 
       0x2, 0x2, 0x2, 0x1136, 0x29b, 0x3, 0x2, 0x2, 0x2, 0x1137, 0x1139, 
       0x7, 0x5d, 0x2, 0x2, 0x1138, 0x113a, 0x7, 0x154, 0x2, 0x2, 0x1139, 
       0x1138, 0x3, 0x2, 0x2, 0x2, 0x1139, 0x113a, 0x3, 0x2, 0x2, 0x2, 0x113a, 
       0x113b, 0x3, 0x2, 0x2, 0x2, 0x113b, 0x1140, 0x5, 0x29e, 0x150, 0x2, 
       0x113c, 0x113d, 0x7, 0x26f, 0x2, 0x2, 0x113d, 0x113f, 0x5, 0x29e, 
       0x150, 0x2, 0x113e, 0x113c, 0x3, 0x2, 0x2, 0x2, 0x113f, 0x1142, 0x3, 
       0x2, 0x2, 0x2, 0x1140, 0x113e, 0x3, 0x2, 0x2, 0x2, 0x1140, 0x1141, 
       0x3, 0x2, 0x2, 0x2, 0x1141, 0x29d, 0x3, 0x2, 0x2, 0x2, 0x1142, 0x1140, 
       0x3, 0x2, 0x2, 0x2, 0x1143, 0x1145, 0x5, 0x2a0, 0x151, 0x2, 0x1144, 
       0x1146, 0x5, 0x138, 0x9d, 0x2, 0x1145, 0x1144, 0x3, 0x2, 0x2, 0x2, 
       0x1145, 0x1146, 0x3, 0x2, 0x2, 0x2, 0x1146, 0x1147, 0x3, 0x2, 0x2, 
       0x2, 0x1147, 0x1148, 0x7, 0xb, 0x2, 0x2, 0x1148, 0x1149, 0x7, 0x269, 
       0x2, 0x2, 0x1149, 0x114a, 0x5, 0x23c, 0x11f, 0x2, 0x114a, 0x114b, 
       0x7, 0x26a, 0x2, 0x2, 0x114b, 0x29f, 0x3, 0x2, 0x2, 0x2, 0x114c, 
       0x114d, 0x5, 0x41a, 0x20e, 0x2, 0x114d, 0x2a1, 0x3, 0x2, 0x2, 0x2, 
       0x114e, 0x1150, 0x7, 0xb, 0x2, 0x2, 0x114f, 0x114e, 0x3, 0x2, 0x2, 
       0x2, 0x114f, 0x1150, 0x3, 0x2, 0x2, 0x2, 0x1150, 0x1151, 0x3, 0x2, 
       0x2, 0x2, 0x1151, 0x1152, 0x5, 0x2a4, 0x153, 0x2, 0x1152, 0x2a3, 
       0x3, 0x2, 0x2, 0x2, 0x1153, 0x1156, 0x5, 0x41a, 0x20e, 0x2, 0x1154, 
       0x1156, 0x7, 0x289, 0x2, 0x2, 0x1155, 0x1153, 0x3, 0x2, 0x2, 0x2, 
       0x1155, 0x1154, 0x3, 0x2, 0x2, 0x2, 0x1156, 0x2a5, 0x3, 0x2, 0x2, 
       0x2, 0x1157, 0x1158, 0x7, 0x5b, 0x2, 0x2, 0x1158, 0x115e, 0x5, 0x3a6, 
       0x1d4, 0x2, 0x1159, 0x115a, 0x7, 0x5b, 0x2, 0x2, 0x115a, 0x115b, 
       0x7, 0xaa, 0x2, 0x2, 0x115b, 0x115c, 0x7, 0x12e, 0x2, 0x2, 0x115c, 
       0x115e, 0x5, 0x2fa, 0x17e, 0x2, 0x115d, 0x1157, 0x3, 0x2, 0x2, 0x2, 
       0x115d, 0x1159, 0x3, 0x2, 0x2, 0x2, 0x115e, 0x2a7, 0x3, 0x2, 0x2, 
       0x2, 0x115f, 0x1169, 0x7, 0x48, 0x2, 0x2, 0x1160, 0x116a, 0x7, 0x26c, 
       0x2, 0x2, 0x1161, 0x1166, 0x5, 0x2aa, 0x156, 0x2, 0x1162, 0x1163, 
       0x7, 0x26f, 0x2, 0x2, 0x1163, 0x1165, 0x5, 0x2aa, 0x156, 0x2, 0x1164, 
       0x1162, 0x3, 0x2, 0x2, 0x2, 0x1165, 0x1168, 0x3, 0x2, 0x2, 0x2, 0x1166, 
       0x1164, 0x3, 0x2, 0x2, 0x2, 0x1166, 0x1167, 0x3, 0x2, 0x2, 0x2, 0x1167, 
       0x116a, 0x3, 0x2, 0x2, 0x2, 0x1168, 0x1166, 0x3, 0x2, 0x2, 0x2, 0x1169, 
       0x1160, 0x3, 0x2, 0x2, 0x2, 0x1169, 0x1161, 0x3, 0x2, 0x2, 0x2, 0x116a, 
       0x2a9, 0x3, 0x2, 0x2, 0x2, 0x116b, 0x116d, 0x5, 0x3a6, 0x1d4, 0x2, 
       0x116c, 0x116e, 0x5, 0x2a2, 0x152, 0x2, 0x116d, 0x116c, 0x3, 0x2, 
       0x2, 0x2, 0x116d, 0x116e, 0x3, 0x2, 0x2, 0x2, 0x116e, 0x2ab, 0x3, 
       0x2, 0x2, 0x2, 0x116f, 0x1170, 0x7, 0xc5, 0x2, 0x2, 0x1170, 0x1172, 
       0x7, 0xad, 0x2, 0x2, 0x1171, 0x1173, 0x5, 0x7a, 0x3e, 0x2, 0x1172, 
       0x1171, 0x3, 0x2, 0x2, 0x2, 0x1172, 0x1173, 0x3, 0x2, 0x2, 0x2, 0x1173, 
       0x1174, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1175, 0x5, 0x20, 0x11, 0x2, 
       0x1175, 0x2ad, 0x3, 0x2, 0x2, 0x2, 0x1176, 0x1177, 0x7, 0xc5, 0x2, 
       0x2, 0x1177, 0x1178, 0x7, 0x80, 0x2, 0x2, 0x1178, 0x1179, 0x7, 0x1b0, 
       0x2, 0x2, 0x1179, 0x117a, 0x7, 0x2b, 0x2, 0x2, 0x117a, 0x117c, 0x7, 
       0x10e, 0x2, 0x2, 0x117b, 0x117d, 0x5, 0x7a, 0x3e, 0x2, 0x117c, 0x117b, 
       0x3, 0x2, 0x2, 0x2, 0x117c, 0x117d, 0x3, 0x2, 0x2, 0x2, 0x117d, 0x117e, 
       0x3, 0x2, 0x2, 0x2, 0x117e, 0x117f, 0x5, 0x14, 0xb, 0x2, 0x117f, 
       0x2af, 0x3, 0x2, 0x2, 0x2, 0x1180, 0x1181, 0x7, 0xc5, 0x2, 0x2, 0x1181, 
       0x1182, 0x7, 0xaf, 0x2, 0x2, 0x1182, 0x1184, 0x7, 0x220, 0x2, 0x2, 
       0x1183, 0x1185, 0x5, 0x7a, 0x3e, 0x2, 0x1184, 0x1183, 0x3, 0x2, 0x2, 
       0x2, 0x1184, 0x1185, 0x3, 0x2, 0x2, 0x2, 0x1185, 0x1186, 0x3, 0x2, 
       0x2, 0x2, 0x1186, 0x1188, 0x5, 0x3a, 0x1e, 0x2, 0x1187, 0x1189, 0x5, 
       0x6e, 0x38, 0x2, 0x1188, 0x1187, 0x3, 0x2, 0x2, 0x2, 0x1188, 0x1189, 
       0x3, 0x2, 0x2, 0x2, 0x1189, 0x2b1, 0x3, 0x2, 0x2, 0x2, 0x118a, 0x118b, 
       0x7, 0xc5, 0x2, 0x2, 0x118b, 0x118d, 0x7, 0x223, 0x2, 0x2, 0x118c, 
       0x118e, 0x5, 0x7a, 0x3e, 0x2, 0x118d, 0x118c, 0x3, 0x2, 0x2, 0x2, 
       0x118d, 0x118e, 0x3, 0x2, 0x2, 0x2, 0x118e, 0x118f, 0x3, 0x2, 0x2, 
       0x2, 0x118f, 0x1190, 0x5, 0x76, 0x3c, 0x2, 0x1190, 0x2b3, 0x3, 0x2, 
       0x2, 0x2, 0x1191, 0x1192, 0x7, 0xc5, 0x2, 0x2, 0x1192, 0x1193, 0x7, 
       0x26, 0x2, 0x2, 0x1193, 0x1195, 0x7, 0x50, 0x2, 0x2, 0x1194, 0x1196, 
       0x5, 0x7a, 0x3e, 0x2, 0x1195, 0x1194, 0x3, 0x2, 0x2, 0x2, 0x1195, 
       0x1196, 0x3, 0x2, 0x2, 0x2, 0x1196, 0x1197, 0x3, 0x2, 0x2, 0x2, 0x1197, 
       0x119c, 0x5, 0x7c, 0x3f, 0x2, 0x1198, 0x1199, 0x7, 0x26f, 0x2, 0x2, 
       0x1199, 0x119b, 0x5, 0x7c, 0x3f, 0x2, 0x119a, 0x1198, 0x3, 0x2, 0x2, 
       0x2, 0x119b, 0x119e, 0x3, 0x2, 0x2, 0x2, 0x119c, 0x119a, 0x3, 0x2, 
       0x2, 0x2, 0x119c, 0x119d, 0x3, 0x2, 0x2, 0x2, 0x119d, 0x11a0, 0x3, 
       0x2, 0x2, 0x2, 0x119e, 0x119c, 0x3, 0x2, 0x2, 0x2, 0x119f, 0x11a1, 
       0x5, 0x6e, 0x38, 0x2, 0x11a0, 0x119f, 0x3, 0x2, 0x2, 0x2, 0x11a0, 
       0x11a1, 0x3, 0x2, 0x2, 0x2, 0x11a1, 0x2b5, 0x3, 0x2, 0x2, 0x2, 0x11a2, 
       0x11a3, 0x7, 0xc5, 0x2, 0x2, 0x11a3, 0x11a5, 0x7, 0x29, 0x2, 0x2, 
       0x11a4, 0x11a6, 0x5, 0x7a, 0x3e, 0x2, 0x11a5, 0x11a4, 0x3, 0x2, 0x2, 
       0x2, 0x11a5, 0x11a6, 0x3, 0x2, 0x2, 0x2, 0x11a6, 0x11a7, 0x3, 0x2, 
       0x2, 0x2, 0x11a7, 0x11ac, 0x5, 0x410, 0x209, 0x2, 0x11a8, 0x11aa, 
       0x5, 0x9a, 0x4e, 0x2, 0x11a9, 0x11ab, 0x5, 0x6e, 0x38, 0x2, 0x11aa, 
       0x11a9, 0x3, 0x2, 0x2, 0x2, 0x11aa, 0x11ab, 0x3, 0x2, 0x2, 0x2, 0x11ab, 
       0x11ad, 0x3, 0x2, 0x2, 0x2, 0x11ac, 0x11a8, 0x3, 0x2, 0x2, 0x2, 0x11ac, 
       0x11ad, 0x3, 0x2, 0x2, 0x2, 0x11ad, 0x2b7, 0x3, 0x2, 0x2, 0x2, 0x11ae, 
       0x11af, 0x7, 0xc5, 0x2, 0x2, 0x11af, 0x11b1, 0x7, 0x2b, 0x2, 0x2, 
       0x11b0, 0x11b2, 0x5, 0x7a, 0x3e, 0x2, 0x11b1, 0x11b0, 0x3, 0x2, 0x2, 
       0x2, 0x11b1, 0x11b2, 0x3, 0x2, 0x2, 0x2, 0x11b2, 0x11b3, 0x3, 0x2, 
       0x2, 0x2, 0x11b3, 0x11b8, 0x5, 0xac, 0x57, 0x2, 0x11b4, 0x11b5, 0x7, 
       0x26f, 0x2, 0x2, 0x11b5, 0x11b7, 0x5, 0xac, 0x57, 0x2, 0x11b6, 0x11b4, 
       0x3, 0x2, 0x2, 0x2, 0x11b7, 0x11ba, 0x3, 0x2, 0x2, 0x2, 0x11b8, 0x11b6, 
       0x3, 0x2, 0x2, 0x2, 0x11b8, 0x11b9, 0x3, 0x2, 0x2, 0x2, 0x11b9, 0x2b9, 
       0x3, 0x2, 0x2, 0x2, 0x11ba, 0x11b8, 0x3, 0x2, 0x2, 0x2, 0x11bb, 0x11bc, 
       0x7, 0xc5, 0x2, 0x2, 0x11bc, 0x11be, 0x7, 0xf0, 0x2, 0x2, 0x11bd, 
       0x11bf, 0x7, 0x61, 0x2, 0x2, 0x11be, 0x11bd, 0x3, 0x2, 0x2, 0x2, 
       0x11be, 0x11bf, 0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11c1, 0x3, 0x2, 0x2, 
       0x2, 0x11c0, 0x11c2, 0x5, 0x7a, 0x3e, 0x2, 0x11c1, 0x11c0, 0x3, 0x2, 
       0x2, 0x2, 0x11c1, 0x11c2, 0x3, 0x2, 0x2, 0x2, 0x11c2, 0x11c3, 0x3, 
       0x2, 0x2, 0x2, 0x11c3, 0x11c8, 0x5, 0xb6, 0x5c, 0x2, 0x11c4, 0x11c5, 
       0x7, 0x26f, 0x2, 0x2, 0x11c5, 0x11c7, 0x5, 0xb6, 0x5c, 0x2, 0x11c6, 
       0x11c4, 0x3, 0x2, 0x2, 0x2, 0x11c7, 0x11ca, 0x3, 0x2, 0x2, 0x2, 0x11c8, 
       0x11c6, 0x3, 0x2, 0x2, 0x2, 0x11c8, 0x11c9, 0x3, 0x2, 0x2, 0x2, 0x11c9, 
       0x11cc, 0x3, 0x2, 0x2, 0x2, 0x11ca, 0x11c8, 0x3, 0x2, 0x2, 0x2, 0x11cb, 
       0x11cd, 0x5, 0x6e, 0x38, 0x2, 0x11cc, 0x11cb, 0x3, 0x2, 0x2, 0x2, 
       0x11cc, 0x11cd, 0x3, 0x2, 0x2, 0x2, 0x11cd, 0x2bb, 0x3, 0x2, 0x2, 
       0x2, 0x11ce, 0x11cf, 0x7, 0xc5, 0x2, 0x2, 0x11cf, 0x11d1, 0x7, 0x121, 
       0x2, 0x2, 0x11d0, 0x11d2, 0x5, 0x7a, 0x3e, 0x2, 0x11d1, 0x11d0, 0x3, 
       0x2, 0x2, 0x2, 0x11d1, 0x11d2, 0x3, 0x2, 0x2, 0x2, 0x11d2, 0x11d3, 
       0x3, 0x2, 0x2, 0x2, 0x11d3, 0x11d6, 0x5, 0xce, 0x68, 0x2, 0x11d4, 
       0x11d5, 0x7, 0x5d, 0x2, 0x2, 0x11d5, 0x11d7, 0x5, 0xd0, 0x69, 0x2, 
       0x11d6, 0x11d4, 0x3, 0x2, 0x2, 0x2, 0x11d6, 0x11d7, 0x3, 0x2, 0x2, 
       0x2, 0x11d7, 0x2bd, 0x3, 0x2, 0x2, 0x2, 0x11d8, 0x11d9, 0x7, 0xc5, 
       0x2, 0x2, 0x11d9, 0x11da, 0x7, 0x121, 0x2, 0x2, 0x11da, 0x11db, 0x7, 
       0x2b, 0x2, 0x2, 0x11db, 0x11df, 0x5, 0xac, 0x57, 0x2, 0x11dc, 0x11dd, 
       0x7, 0xc0, 0x2, 0x2, 0x11dd, 0x11de, 0x7, 0x28, 0x2, 0x2, 0x11de, 
       0x11e0, 0x5, 0xac, 0x57, 0x2, 0x11df, 0x11dc, 0x3, 0x2, 0x2, 0x2, 
       0x11df, 0x11e0, 0x3, 0x2, 0x2, 0x2, 0x11e0, 0x2bf, 0x3, 0x2, 0x2, 
       0x2, 0x11e1, 0x11e2, 0x7, 0xc5, 0x2, 0x2, 0x11e2, 0x11e3, 0x7, 0x134, 
       0x2, 0x2, 0x11e3, 0x11e4, 0x7, 0x8c, 0x2, 0x2, 0x11e4, 0x11e9, 0x5, 
       0x5e, 0x30, 0x2, 0x11e5, 0x11e6, 0x7, 0x26f, 0x2, 0x2, 0x11e6, 0x11e8, 
       0x5, 0x5e, 0x30, 0x2, 0x11e7, 0x11e5, 0x3, 0x2, 0x2, 0x2, 0x11e8, 
       0x11eb, 0x3, 0x2, 0x2, 0x2, 0x11e9, 0x11e7, 0x3, 0x2, 0x2, 0x2, 0x11e9, 
       0x11ea, 0x3, 0x2, 0x2, 0x2, 0x11ea, 0x11ed, 0x3, 0x2, 0x2, 0x2, 0x11eb, 
       0x11e9, 0x3, 0x2, 0x2, 0x2, 0x11ec, 0x11ee, 0x5, 0x6e, 0x38, 0x2, 
       0x11ed, 0x11ec, 0x3, 0x2, 0x2, 0x2, 0x11ed, 0x11ee, 0x3, 0x2, 0x2, 
       0x2, 0x11ee, 0x2c1, 0x3, 0x2, 0x2, 0x2, 0x11ef, 0x11f1, 0x7, 0xc5, 
       0x2, 0x2, 0x11f0, 0x11f2, 0x5, 0xf0, 0x79, 0x2, 0x11f1, 0x11f0, 0x3, 
       0x2, 0x2, 0x2, 0x11f1, 0x11f2, 0x3, 0x2, 0x2, 0x2, 0x11f2, 0x11f3, 
       0x3, 0x2, 0x2, 0x2, 0x11f3, 0x11f5, 0x7, 0x23b, 0x2, 0x2, 0x11f4, 
       0x11f6, 0x5, 0x7a, 0x3e, 0x2, 0x11f5, 0x11f4, 0x3, 0x2, 0x2, 0x2, 
       0x11f5, 0x11f6, 0x3, 0x2, 0x2, 0x2, 0x11f6, 0x11f7, 0x3, 0x2, 0x2, 
       0x2, 0x11f7, 0x11f8, 0x5, 0xf2, 0x7a, 0x2, 0x11f8, 0x11f9, 0x7, 0x3f, 
       0x2, 0x2, 0x11f9, 0x11fb, 0x5, 0x7c, 0x3f, 0x2, 0x11fa, 0x11fc, 0x5, 
       0x6e, 0x38, 0x2, 0x11fb, 0x11fa, 0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11fc, 
       0x3, 0x2, 0x2, 0x2, 0x11fc, 0x2c3, 0x3, 0x2, 0x2, 0x2, 0x11fd, 0x11fe, 
       0x7, 0xc5, 0x2, 0x2, 0x11fe, 0x1200, 0x7, 0x45, 0x2, 0x2, 0x11ff, 
       0x1201, 0x5, 0x7a, 0x3e, 0x2, 0x1200, 0x11ff, 0x3, 0x2, 0x2, 0x2, 
       0x1200, 0x1201, 0x3, 0x2, 0x2, 0x2, 0x1201, 0x1202, 0x3, 0x2, 0x2, 
       0x2, 0x1202, 0x1203, 0x5, 0x41a, 0x20e, 0x2, 0x1203, 0x2c5, 0x3, 
       0x2, 0x2, 0x2, 0x1204, 0x1205, 0x7, 0xc5, 0x2, 0x2, 0x1205, 0x1206, 
       0x7, 0x161, 0x2, 0x2, 0x1206, 0x1208, 0x7, 0x140, 0x2, 0x2, 0x1207, 
       0x1209, 0x5, 0x7a, 0x3e, 0x2, 0x1208, 0x1207, 0x3, 0x2, 0x2, 0x2, 
       0x1208, 0x1209, 0x3, 0x2, 0x2, 0x2, 0x1209, 0x120a, 0x3, 0x2, 0x2, 
       0x2, 0x120a, 0x120b, 0x5, 0xe0, 0x71, 0x2, 0x120b, 0x2c7, 0x3, 0x2, 
       0x2, 0x2, 0x120c, 0x120d, 0x7, 0xc5, 0x2, 0x2, 0x120d, 0x120f, 0x7, 
       0x167, 0x2, 0x2, 0x120e, 0x1210, 0x5, 0x7a, 0x3e, 0x2, 0x120f, 0x120e, 
       0x3, 0x2, 0x2, 0x2, 0x120f, 0x1210, 0x3, 0x2, 0x2, 0x2, 0x1210, 0x1211, 
       0x3, 0x2, 0x2, 0x2, 0x1211, 0x1216, 0x5, 0x5e, 0x30, 0x2, 0x1212, 
       0x1213, 0x7, 0x26f, 0x2, 0x2, 0x1213, 0x1215, 0x5, 0x5e, 0x30, 0x2, 
       0x1214, 0x1212, 0x3, 0x2, 0x2, 0x2, 0x1215, 0x1218, 0x3, 0x2, 0x2, 
       0x2, 0x1216, 0x1214, 0x3, 0x2, 0x2, 0x2, 0x1216, 0x1217, 0x3, 0x2, 
       0x2, 0x2, 0x1217, 0x2c9, 0x3, 0x2, 0x2, 0x2, 0x1218, 0x1216, 0x3, 
       0x2, 0x2, 0x2, 0x1219, 0x121a, 0x7, 0xc5, 0x2, 0x2, 0x121a, 0x121c, 
       0x7, 0x16c, 0x2, 0x2, 0x121b, 0x121d, 0x5, 0x7a, 0x3e, 0x2, 0x121c, 
       0x121b, 0x3, 0x2, 0x2, 0x2, 0x121c, 0x121d, 0x3, 0x2, 0x2, 0x2, 0x121d, 
       0x121e, 0x3, 0x2, 0x2, 0x2, 0x121e, 0x1223, 0x5, 0x4e, 0x28, 0x2, 
       0x121f, 0x1220, 0x7, 0x26f, 0x2, 0x2, 0x1220, 0x1222, 0x5, 0x4e, 
       0x28, 0x2, 0x1221, 0x121f, 0x3, 0x2, 0x2, 0x2, 0x1222, 0x1225, 0x3, 
       0x2, 0x2, 0x2, 0x1223, 0x1221, 0x3, 0x2, 0x2, 0x2, 0x1223, 0x1224, 
       0x3, 0x2, 0x2, 0x2, 0x1224, 0x1227, 0x3, 0x2, 0x2, 0x2, 0x1225, 0x1223, 
       0x3, 0x2, 0x2, 0x2, 0x1226, 0x1228, 0x5, 0x6e, 0x38, 0x2, 0x1227, 
       0x1226, 0x3, 0x2, 0x2, 0x2, 0x1227, 0x1228, 0x3, 0x2, 0x2, 0x2, 0x1228, 
       0x2cb, 0x3, 0x2, 0x2, 0x2, 0x1229, 0x122a, 0x7, 0xc5, 0x2, 0x2, 0x122a, 
       0x122c, 0x7, 0x172, 0x2, 0x2, 0x122b, 0x122d, 0x5, 0x7a, 0x3e, 0x2, 
       0x122c, 0x122b, 0x3, 0x2, 0x2, 0x2, 0x122c, 0x122d, 0x3, 0x2, 0x2, 
       0x2, 0x122d, 0x122e, 0x3, 0x2, 0x2, 0x2, 0x122e, 0x1230, 0x5, 0x2ce, 
       0x168, 0x2, 0x122f, 0x1231, 0x5, 0x6e, 0x38, 0x2, 0x1230, 0x122f, 
       0x3, 0x2, 0x2, 0x2, 0x1230, 0x1231, 0x3, 0x2, 0x2, 0x2, 0x1231, 0x2cd, 
       0x3, 0x2, 0x2, 0x2, 0x1232, 0x1237, 0x5, 0x2d0, 0x169, 0x2, 0x1233, 
       0x1234, 0x7, 0x26f, 0x2, 0x2, 0x1234, 0x1236, 0x5, 0x2d0, 0x169, 
       0x2, 0x1235, 0x1233, 0x3, 0x2, 0x2, 0x2, 0x1236, 0x1239, 0x3, 0x2, 
       0x2, 0x2, 0x1237, 0x1235, 0x3, 0x2, 0x2, 0x2, 0x1237, 0x1238, 0x3, 
       0x2, 0x2, 0x2, 0x1238, 0x2cf, 0x3, 0x2, 0x2, 0x2, 0x1239, 0x1237, 
       0x3, 0x2, 0x2, 0x2, 0x123a, 0x123b, 0x5, 0x4e, 0x28, 0x2, 0x123b, 
       0x123c, 0x7, 0x272, 0x2, 0x2, 0x123c, 0x123e, 0x3, 0x2, 0x2, 0x2, 
       0x123d, 0x123a, 0x3, 0x2, 0x2, 0x2, 0x123d, 0x123e, 0x3, 0x2, 0x2, 
       0x2, 0x123e, 0x123f, 0x3, 0x2, 0x2, 0x2, 0x123f, 0x1240, 0x5, 0x41a, 
       0x20e, 0x2, 0x1240, 0x2d1, 0x3, 0x2, 0x2, 0x2, 0x1241, 0x1242, 0x7, 
       0xc5, 0x2, 0x2, 0x1242, 0x1244, 0x7, 0x174, 0x2, 0x2, 0x1243, 0x1245, 
       0x5, 0x7a, 0x3e, 0x2, 0x1244, 0x1243, 0x3, 0x2, 0x2, 0x2, 0x1244, 
       0x1245, 0x3, 0x2, 0x2, 0x2, 0x1245, 0x1246, 0x3, 0x2, 0x2, 0x2, 0x1246, 
       0x1248, 0x5, 0x102, 0x82, 0x2, 0x1247, 0x1249, 0x5, 0x6e, 0x38, 0x2, 
       0x1248, 0x1247, 0x3, 0x2, 0x2, 0x2, 0x1248, 0x1249, 0x3, 0x2, 0x2, 
       0x2, 0x1249, 0x2d3, 0x3, 0x2, 0x2, 0x2, 0x124a, 0x124b, 0x7, 0xc5, 
       0x2, 0x2, 0x124b, 0x124d, 0x7, 0x50, 0x2, 0x2, 0x124c, 0x124e, 0x5, 
       0x7a, 0x3e, 0x2, 0x124d, 0x124c, 0x3, 0x2, 0x2, 0x2, 0x124d, 0x124e, 
       0x3, 0x2, 0x2, 0x2, 0x124e, 0x124f, 0x3, 0x2, 0x2, 0x2, 0x124f, 0x1251, 
       0x5, 0x2ce, 0x168, 0x2, 0x1250, 0x1252, 0x5, 0x6e, 0x38, 0x2, 0x1251, 
       0x1250, 0x3, 0x2, 0x2, 0x2, 0x1251, 0x1252, 0x3, 0x2, 0x2, 0x2, 0x1252, 
       0x2d5, 0x3, 0x2, 0x2, 0x2, 0x1253, 0x1254, 0x7, 0xc5, 0x2, 0x2, 0x1254, 
       0x1256, 0x7, 0x18b, 0x2, 0x2, 0x1255, 0x1257, 0x5, 0x7a, 0x3e, 0x2, 
       0x1256, 0x1255, 0x3, 0x2, 0x2, 0x2, 0x1256, 0x1257, 0x3, 0x2, 0x2, 
       0x2, 0x1257, 0x1258, 0x3, 0x2, 0x2, 0x2, 0x1258, 0x1259, 0x5, 0xc2, 
       0x62, 0x2, 0x1259, 0x2d7, 0x3, 0x2, 0x2, 0x2, 0x125a, 0x125b, 0x7, 
       0xc5, 0x2, 0x2, 0x125b, 0x125c, 0x7, 0x190, 0x2, 0x2, 0x125c, 0x125d, 
       0x7, 0x16e, 0x2, 0x2, 0x125d, 0x125f, 0x9, 0x39, 0x2, 0x2, 0x125e, 
       0x1260, 0x5, 0x7a, 0x3e, 0x2, 0x125f, 0x125e, 0x3, 0x2, 0x2, 0x2, 
       0x125f, 0x1260, 0x3, 0x2, 0x2, 0x2, 0x1260, 0x1261, 0x3, 0x2, 0x2, 
       0x2, 0x1261, 0x1263, 0x5, 0x172, 0xba, 0x2, 0x1262, 0x1264, 0x5, 
       0x6e, 0x38, 0x2, 0x1263, 0x1262, 0x3, 0x2, 0x2, 0x2, 0x1263, 0x1264, 
       0x3, 0x2, 0x2, 0x2, 0x1264, 0x2d9, 0x3, 0x2, 0x2, 0x2, 0x1265, 0x1266, 
       0x7, 0xc5, 0x2, 0x2, 0x1266, 0x1268, 0x7, 0x193, 0x2, 0x2, 0x1267, 
       0x1269, 0x5, 0x7a, 0x3e, 0x2, 0x1268, 0x1267, 0x3, 0x2, 0x2, 0x2, 
       0x1268, 0x1269, 0x3, 0x2, 0x2, 0x2, 0x1269, 0x126a, 0x3, 0x2, 0x2, 
       0x2, 0x126a, 0x126b, 0x5, 0x140, 0xa1, 0x2, 0x126b, 0x126c, 0x7, 
       0x3f, 0x2, 0x2, 0x126c, 0x126e, 0x5, 0x7c, 0x3f, 0x2, 0x126d, 0x126f, 
       0x5, 0x6e, 0x38, 0x2, 0x126e, 0x126d, 0x3, 0x2, 0x2, 0x2, 0x126e, 
       0x126f, 0x3, 0x2, 0x2, 0x2, 0x126f, 0x2db, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x1271, 0x7, 0xc5, 0x2, 0x2, 0x1271, 0x1273, 0x7, 0x197, 0x2, 0x2, 
       0x1272, 0x1274, 0x5, 0x7a, 0x3e, 0x2, 0x1273, 0x1272, 0x3, 0x2, 0x2, 
       0x2, 0x1273, 0x1274, 0x3, 0x2, 0x2, 0x2, 0x1274, 0x1275, 0x3, 0x2, 
       0x2, 0x2, 0x1275, 0x127a, 0x5, 0x186, 0xc4, 0x2, 0x1276, 0x1277, 
       0x7, 0x26f, 0x2, 0x2, 0x1277, 0x1279, 0x5, 0x186, 0xc4, 0x2, 0x1278, 
       0x1276, 0x3, 0x2, 0x2, 0x2, 0x1279, 0x127c, 0x3, 0x2, 0x2, 0x2, 0x127a, 
       0x1278, 0x3, 0x2, 0x2, 0x2, 0x127a, 0x127b, 0x3, 0x2, 0x2, 0x2, 0x127b, 
       0x127e, 0x3, 0x2, 0x2, 0x2, 0x127c, 0x127a, 0x3, 0x2, 0x2, 0x2, 0x127d, 
       0x127f, 0x5, 0x6e, 0x38, 0x2, 0x127e, 0x127d, 0x3, 0x2, 0x2, 0x2, 
       0x127e, 0x127f, 0x3, 0x2, 0x2, 0x2, 0x127f, 0x2dd, 0x3, 0x2, 0x2, 
       0x2, 0x1280, 0x1281, 0x7, 0xc5, 0x2, 0x2, 0x1281, 0x1283, 0x7, 0x57, 
       0x2, 0x2, 0x1282, 0x1284, 0x5, 0x7a, 0x3e, 0x2, 0x1283, 0x1282, 0x3, 
       0x2, 0x2, 0x2, 0x1283, 0x1284, 0x3, 0x2, 0x2, 0x2, 0x1284, 0x1285, 
       0x3, 0x2, 0x2, 0x2, 0x1285, 0x128a, 0x5, 0xb2, 0x5a, 0x2, 0x1286, 
       0x1287, 0x7, 0x26f, 0x2, 0x2, 0x1287, 0x1289, 0x5, 0xb2, 0x5a, 0x2, 
       0x1288, 0x1286, 0x3, 0x2, 0x2, 0x2, 0x1289, 0x128c, 0x3, 0x2, 0x2, 
       0x2, 0x128a, 0x1288, 0x3, 0x2, 0x2, 0x2, 0x128a, 0x128b, 0x3, 0x2, 
       0x2, 0x2, 0x128b, 0x128e, 0x3, 0x2, 0x2, 0x2, 0x128c, 0x128a, 0x3, 
       0x2, 0x2, 0x2, 0x128d, 0x128f, 0x5, 0x6e, 0x38, 0x2, 0x128e, 0x128d, 
       0x3, 0x2, 0x2, 0x2, 0x128e, 0x128f, 0x3, 0x2, 0x2, 0x2, 0x128f, 0x2df, 
       0x3, 0x2, 0x2, 0x2, 0x1290, 0x1291, 0x7, 0xc5, 0x2, 0x2, 0x1291, 
       0x1293, 0x7, 0x1ab, 0x2, 0x2, 0x1292, 0x1294, 0x5, 0x7a, 0x3e, 0x2, 
       0x1293, 0x1292, 0x3, 0x2, 0x2, 0x2, 0x1293, 0x1294, 0x3, 0x2, 0x2, 
       0x2, 0x1294, 0x1295, 0x3, 0x2, 0x2, 0x2, 0x1295, 0x129a, 0x5, 0x19e, 
       0xd0, 0x2, 0x1296, 0x1297, 0x7, 0x26f, 0x2, 0x2, 0x1297, 0x1299, 
       0x5, 0x19e, 0xd0, 0x2, 0x1298, 0x1296, 0x3, 0x2, 0x2, 0x2, 0x1299, 
       0x129c, 0x3, 0x2, 0x2, 0x2, 0x129a, 0x1298, 0x3, 0x2, 0x2, 0x2, 0x129a, 
       0x129b, 0x3, 0x2, 0x2, 0x2, 0x129b, 0x129e, 0x3, 0x2, 0x2, 0x2, 0x129c, 
       0x129a, 0x3, 0x2, 0x2, 0x2, 0x129d, 0x129f, 0x5, 0x6e, 0x38, 0x2, 
       0x129e, 0x129d, 0x3, 0x2, 0x2, 0x2, 0x129e, 0x129f, 0x3, 0x2, 0x2, 
       0x2, 0x129f, 0x2e1, 0x3, 0x2, 0x2, 0x2, 0x12a0, 0x12a1, 0x7, 0xc5, 
       0x2, 0x2, 0x12a1, 0x12a2, 0x7, 0x1b0, 0x2, 0x2, 0x12a2, 0x12a4, 0x7, 
       0x2b, 0x2, 0x2, 0x12a3, 0x12a5, 0x5, 0x7a, 0x3e, 0x2, 0x12a4, 0x12a3, 
       0x3, 0x2, 0x2, 0x2, 0x12a4, 0x12a5, 0x3, 0x2, 0x2, 0x2, 0x12a5, 0x12a6, 
       0x3, 0x2, 0x2, 0x2, 0x12a6, 0x12a7, 0x5, 0xac, 0x57, 0x2, 0x12a7, 
       0x2e3, 0x3, 0x2, 0x2, 0x2, 0x12a8, 0x12aa, 0x5, 0x2e6, 0x174, 0x2, 
       0x12a9, 0x12ab, 0x7, 0x73, 0x2, 0x2, 0x12aa, 0x12a9, 0x3, 0x2, 0x2, 
       0x2, 0x12aa, 0x12ab, 0x3, 0x2, 0x2, 0x2, 0x12ab, 0x12ac, 0x3, 0x2, 
       0x2, 0x2, 0x12ac, 0x12ad, 0x5, 0x2e8, 0x175, 0x2, 0x12ad, 0x2e5, 
       0x3, 0x2, 0x2, 0x2, 0x12ae, 0x12af, 0x9, 0x42, 0x2, 0x2, 0x12af, 
       0x2e7, 0x3, 0x2, 0x2, 0x2, 0x12b0, 0x12b2, 0x5, 0x7c, 0x3f, 0x2, 
       0x12b1, 0x12b3, 0x5, 0x138, 0x9d, 0x2, 0x12b2, 0x12b1, 0x3, 0x2, 
       0x2, 0x2, 0x12b2, 0x12b3, 0x3, 0x2, 0x2, 0x2, 0x12b3, 0x12b5, 0x3, 
       0x2, 0x2, 0x2, 0x12b4, 0x12b0, 0x3, 0x2, 0x2, 0x2, 0x12b4, 0x12b5, 
       0x3, 0x2, 0x2, 0x2, 0x12b5, 0x12b6, 0x3, 0x2, 0x2, 0x2, 0x12b6, 0x12c2, 
       0x5, 0x2ea, 0x176, 0x2, 0x12b7, 0x12bb, 0x5, 0x7c, 0x3f, 0x2, 0x12b8, 
       0x12b9, 0x7, 0x26, 0x2, 0x2, 0x12b9, 0x12bb, 0x7, 0x18c, 0x2, 0x2, 
       0x12ba, 0x12b7, 0x3, 0x2, 0x2, 0x2, 0x12ba, 0x12b8, 0x3, 0x2, 0x2, 
       0x2, 0x12bb, 0x12c2, 0x3, 0x2, 0x2, 0x2, 0x12bc, 0x12bd, 0x5, 0x7c, 
       0x3f, 0x2, 0x12bd, 0x12be, 0x7, 0x269, 0x2, 0x2, 0x12be, 0x12bf, 
       0x5, 0x138, 0x9d, 0x2, 0x12bf, 0x12c0, 0x7, 0x26a, 0x2, 0x2, 0x12c0, 
       0x12c2, 0x3, 0x2, 0x2, 0x2, 0x12c1, 0x12b4, 0x3, 0x2, 0x2, 0x2, 0x12c1, 
       0x12ba, 0x3, 0x2, 0x2, 0x2, 0x12c1, 0x12bc, 0x3, 0x2, 0x2, 0x2, 0x12c2, 
       0x2e9, 0x3, 0x2, 0x2, 0x2, 0x12c3, 0x12c4, 0x7, 0x139, 0x2, 0x2, 
       0x12c4, 0x12cb, 0x5, 0xc8, 0x65, 0x2, 0x12c5, 0x12c6, 0x7, 0x139, 
       0x2, 0x2, 0x12c6, 0x12c7, 0x7, 0x269, 0x2, 0x2, 0x12c7, 0x12c8, 0x5, 
       0xc8, 0x65, 0x2, 0x12c8, 0x12c9, 0x7, 0x26a, 0x2, 0x2, 0x12c9, 0x12cb, 
       0x3, 0x2, 0x2, 0x2, 0x12ca, 0x12c3, 0x3, 0x2, 0x2, 0x2, 0x12ca, 0x12c5, 
       0x3, 0x2, 0x2, 0x2, 0x12cb, 0x2eb, 0x3, 0x2, 0x2, 0x2, 0x12cc, 0x12d0, 
       0x7, 0x8f, 0x2, 0x2, 0x12cd, 0x12ce, 0x5, 0x41a, 0x20e, 0x2, 0x12ce, 
       0x12cf, 0x7, 0x272, 0x2, 0x2, 0x12cf, 0x12d1, 0x3, 0x2, 0x2, 0x2, 
       0x12d0, 0x12cd, 0x3, 0x2, 0x2, 0x2, 0x12d0, 0x12d1, 0x3, 0x2, 0x2, 
       0x2, 0x12d1, 0x12d2, 0x3, 0x2, 0x2, 0x2, 0x12d2, 0x12d3, 0x5, 0x410, 
       0x209, 0x2, 0x12d3, 0x12d4, 0x7, 0x269, 0x2, 0x2, 0x12d4, 0x12d5, 
       0x5, 0x2ee, 0x178, 0x2, 0x12d5, 0x12d6, 0x7, 0x26a, 0x2, 0x2, 0x12d6, 
       0x2ed, 0x3, 0x2, 0x2, 0x2, 0x12d7, 0x12dc, 0x5, 0x2f0, 0x179, 0x2, 
       0x12d8, 0x12d9, 0x7, 0x26f, 0x2, 0x2, 0x12d9, 0x12db, 0x5, 0x2f0, 
       0x179, 0x2, 0x12da, 0x12d8, 0x3, 0x2, 0x2, 0x2, 0x12db, 0x12de, 0x3, 
       0x2, 0x2, 0x2, 0x12dc, 0x12da, 0x3, 0x2, 0x2, 0x2, 0x12dc, 0x12dd, 
       0x3, 0x2, 0x2, 0x2, 0x12dd, 0x2ef, 0x3, 0x2, 0x2, 0x2, 0x12de, 0x12dc, 
       0x3, 0x2, 0x2, 0x2, 0x12df, 0x12e0, 0x5, 0xa2, 0x52, 0x2, 0x12e0, 
       0x12e1, 0x5, 0x2f2, 0x17a, 0x2, 0x12e1, 0x12e3, 0x3, 0x2, 0x2, 0x2, 
       0x12e2, 0x12df, 0x3, 0x2, 0x2, 0x2, 0x12e2, 0x12e3, 0x3, 0x2, 0x2, 
       0x2, 0x12e3, 0x12e4, 0x3, 0x2, 0x2, 0x2, 0x12e4, 0x12e5, 0x5, 0x3a6, 
       0x1d4, 0x2, 0x12e5, 0x2f1, 0x3, 0x2, 0x2, 0x2, 0x12e6, 0x12e7, 0x7, 
       0x27b, 0x2, 0x2, 0x12e7, 0x12eb, 0x7, 0x280, 0x2, 0x2, 0x12e8, 0x12e9, 
       0x7, 0x280, 0x2, 0x2, 0x12e9, 0x12eb, 0x7, 0x279, 0x2, 0x2, 0x12ea, 
       0x12e6, 0x3, 0x2, 0x2, 0x2, 0x12ea, 0x12e8, 0x3, 0x2, 0x2, 0x2, 0x12eb, 
       0x2f3, 0x3, 0x2, 0x2, 0x2, 0x12ec, 0x12ed, 0x7, 0x95, 0x2, 0x2, 0x12ed, 
       0x2f5, 0x3, 0x2, 0x2, 0x2, 0x12ee, 0x12ef, 0x7, 0x97, 0x2, 0x2, 0x12ef, 
       0x12f0, 0x7, 0xa1, 0x2, 0x2, 0x12f0, 0x12fa, 0x7, 0x52, 0x2, 0x2, 
       0x12f1, 0x12f2, 0x9, 0x43, 0x2, 0x2, 0x12f2, 0x12fb, 0x5, 0xd0, 0x69, 
       0x2, 0x12f3, 0x12f5, 0x7, 0x3, 0x2, 0x2, 0x12f4, 0x12f6, 0x7, 0x11, 
       0x2, 0x2, 0x12f5, 0x12f4, 0x3, 0x2, 0x2, 0x2, 0x12f5, 0x12f6, 0x3, 
       0x2, 0x2, 0x2, 0x12f6, 0x12f8, 0x3, 0x2, 0x2, 0x2, 0x12f7, 0x12f9, 
       0x7, 0xdd, 0x2, 0x2, 0x12f8, 0x12f7, 0x3, 0x2, 0x2, 0x2, 0x12f8, 
       0x12f9, 0x3, 0x2, 0x2, 0x2, 0x12f9, 0x12fb, 0x3, 0x2, 0x2, 0x2, 0x12fa, 
       0x12f1, 0x3, 0x2, 0x2, 0x2, 0x12fa, 0x12f3, 0x3, 0x2, 0x2, 0x2, 0x12fb, 
       0x12ff, 0x3, 0x2, 0x2, 0x2, 0x12fc, 0x12fd, 0x7, 0x27, 0x2, 0x2, 
       0x12fd, 0x12fe, 0x7, 0xad, 0x2, 0x2, 0x12fe, 0x1300, 0x5, 0x20, 0x11, 
       0x2, 0x12ff, 0x12fc, 0x3, 0x2, 0x2, 0x2, 0x12ff, 0x1300, 0x3, 0x2, 
       0x2, 0x2, 0x1300, 0x1304, 0x3, 0x2, 0x2, 0x2, 0x1301, 0x1302, 0x7, 
       0x52, 0x2, 0x2, 0x1302, 0x1303, 0x7, 0x57, 0x2, 0x2, 0x1303, 0x1305, 
       0x5, 0xb2, 0x5a, 0x2, 0x1304, 0x1301, 0x3, 0x2, 0x2, 0x2, 0x1304, 
       0x1305, 0x3, 0x2, 0x2, 0x2, 0x1305, 0x2f7, 0x3, 0x2, 0x2, 0x2, 0x1306, 
       0x1309, 0x7, 0x99, 0x2, 0x2, 0x1307, 0x130a, 0x5, 0x2fa, 0x17e, 0x2, 
       0x1308, 0x130a, 0x7, 0x3, 0x2, 0x2, 0x1309, 0x1307, 0x3, 0x2, 0x2, 
       0x2, 0x1309, 0x1308, 0x3, 0x2, 0x2, 0x2, 0x130a, 0x2f9, 0x3, 0x2, 
       0x2, 0x2, 0x130b, 0x130c, 0x5, 0x41a, 0x20e, 0x2, 0x130c, 0x2fb, 
       0x3, 0x2, 0x2, 0x2, 0x130d, 0x130f, 0x7, 0x9a, 0x2, 0x2, 0x130e, 
       0x1310, 0x7, 0x73, 0x2, 0x2, 0x130f, 0x130e, 0x3, 0x2, 0x2, 0x2, 
       0x130f, 0x1310, 0x3, 0x2, 0x2, 0x2, 0x1310, 0x1312, 0x3, 0x2, 0x2, 
       0x2, 0x1311, 0x1313, 0x5, 0x2fe, 0x180, 0x2, 0x1312, 0x1311, 0x3, 
       0x2, 0x2, 0x2, 0x1312, 0x1313, 0x3, 0x2, 0x2, 0x2, 0x1313, 0x2fd, 
       0x3, 0x2, 0x2, 0x2, 0x1314, 0x1317, 0x5, 0x7c, 0x3f, 0x2, 0x1315, 
       0x1316, 0x7, 0x58, 0x2, 0x2, 0x1316, 0x1318, 0x5, 0xb6, 0x5c, 0x2, 
       0x1317, 0x1315, 0x3, 0x2, 0x2, 0x2, 0x1317, 0x1318, 0x3, 0x2, 0x2, 
       0x2, 0x1318, 0x1320, 0x3, 0x2, 0x2, 0x2, 0x1319, 0x131a, 0x5, 0x7c, 
       0x3f, 0x2, 0x131a, 0x131d, 0x5, 0x2ea, 0x176, 0x2, 0x131b, 0x131c, 
       0x7, 0x58, 0x2, 0x2, 0x131c, 0x131e, 0x5, 0xb6, 0x5c, 0x2, 0x131d, 
       0x131b, 0x3, 0x2, 0x2, 0x2, 0x131d, 0x131e, 0x3, 0x2, 0x2, 0x2, 0x131e, 
       0x1320, 0x3, 0x2, 0x2, 0x2, 0x131f, 0x1314, 0x3, 0x2, 0x2, 0x2, 0x131f, 
       0x1319, 0x3, 0x2, 0x2, 0x2, 0x1320, 0x2ff, 0x3, 0x2, 0x2, 0x2, 0x1321, 
       0x1322, 0x7, 0x9c, 0x2, 0x2, 0x1322, 0x1323, 0x7, 0x3f, 0x2, 0x2, 
       0x1323, 0x1324, 0x5, 0x302, 0x182, 0x2, 0x1324, 0x1325, 0x7, 0x31, 
       0x2, 0x2, 0x1325, 0x1326, 0x7, 0x286, 0x2, 0x2, 0x1326, 0x301, 0x3, 
       0x2, 0x2, 0x2, 0x1327, 0x1328, 0x7, 0x7c, 0x2, 0x2, 0x1328, 0x1329, 
       0x5, 0x304, 0x183, 0x2, 0x1329, 0x132a, 0x5, 0x9a, 0x4e, 0x2, 0x132a, 
       0x136b, 0x3, 0x2, 0x2, 0x2, 0x132b, 0x132c, 0x7, 0x10, 0x2, 0x2, 
       0x132c, 0x132d, 0x7, 0x269, 0x2, 0x2, 0x132d, 0x132e, 0x5, 0x3c2, 
       0x1e2, 0x2, 0x132e, 0x132f, 0x7, 0xb, 0x2, 0x2, 0x132f, 0x1330, 0x5, 
       0x3c2, 0x1e2, 0x2, 0x1330, 0x1331, 0x7, 0x26a, 0x2, 0x2, 0x1331, 
       0x136b, 0x3, 0x2, 0x2, 0x2, 0x1332, 0x1333, 0x7, 0x13, 0x2, 0x2, 
       0x1333, 0x1334, 0x5, 0x7c, 0x3f, 0x2, 0x1334, 0x1335, 0x7, 0x272, 
       0x2, 0x2, 0x1335, 0x1336, 0x5, 0x86, 0x44, 0x2, 0x1336, 0x136b, 0x3, 
       0x2, 0x2, 0x2, 0x1337, 0x1338, 0x7, 0x14, 0x2, 0x2, 0x1338, 0x1339, 
       0x5, 0x90, 0x49, 0x2, 0x1339, 0x133a, 0x7, 0x3f, 0x2, 0x2, 0x133a, 
       0x133b, 0x5, 0x7c, 0x3f, 0x2, 0x133b, 0x136b, 0x3, 0x2, 0x2, 0x2, 
       0x133c, 0x133d, 0x7, 0x29, 0x2, 0x2, 0x133d, 0x136b, 0x5, 0x98, 0x4d, 
       0x2, 0x133e, 0x133f, 0x7, 0x130, 0x2, 0x2, 0x133f, 0x1340, 0x5, 0x41a, 
       0x20e, 0x2, 0x1340, 0x1341, 0x7, 0x269, 0x2, 0x2, 0x1341, 0x1342, 
       0x5, 0x3c2, 0x1e2, 0x2, 0x1342, 0x1343, 0x7, 0x26f, 0x2, 0x2, 0x1343, 
       0x1344, 0x5, 0x3c2, 0x1e2, 0x2, 0x1344, 0x1345, 0x7, 0x26a, 0x2, 
       0x2, 0x1345, 0x136b, 0x3, 0x2, 0x2, 0x2, 0x1346, 0x1347, 0x7, 0x130, 
       0x2, 0x2, 0x1347, 0x1348, 0x9, 0x44, 0x2, 0x2, 0x1348, 0x1349, 0x5, 
       0x306, 0x184, 0x2, 0x1349, 0x134a, 0x7, 0x58, 0x2, 0x2, 0x134a, 0x134b, 
       0x5, 0xb6, 0x5c, 0x2, 0x134b, 0x136b, 0x3, 0x2, 0x2, 0x2, 0x134c, 
       0x1368, 0x7, 0x12, 0x2, 0x2, 0x134d, 0x1368, 0x7, 0xa5, 0x2, 0x2, 
       0x134e, 0x1368, 0x7, 0xad, 0x2, 0x2, 0x134f, 0x1368, 0x7, 0xc3, 0x2, 
       0x2, 0x1350, 0x1368, 0x7, 0xd6, 0x2, 0x2, 0x1351, 0x1352, 0x7, 0x26, 
       0x2, 0x2, 0x1352, 0x1368, 0x7, 0x50, 0x2, 0x2, 0x1353, 0x1368, 0x7, 
       0xf0, 0x2, 0x2, 0x1354, 0x1355, 0x7, 0xff, 0x2, 0x2, 0x1355, 0x1368, 
       0x7, 0x12c, 0x2, 0x2, 0x1356, 0x1358, 0x7, 0x14a, 0x2, 0x2, 0x1357, 
       0x1356, 0x3, 0x2, 0x2, 0x2, 0x1357, 0x1358, 0x3, 0x2, 0x2, 0x2, 0x1358, 
       0x1359, 0x3, 0x2, 0x2, 0x2, 0x1359, 0x1368, 0x7, 0xfe, 0x2, 0x2, 
       0x135a, 0x1368, 0x7, 0x167, 0x2, 0x2, 0x135b, 0x1368, 0x7, 0x16c, 
       0x2, 0x2, 0x135c, 0x1368, 0x7, 0x174, 0x2, 0x2, 0x135d, 0x1368, 0x7, 
       0x50, 0x2, 0x2, 0x135e, 0x1368, 0x7, 0x18b, 0x2, 0x2, 0x135f, 0x1368, 
       0x7, 0x197, 0x2, 0x2, 0x1360, 0x1368, 0x7, 0x1ab, 0x2, 0x2, 0x1361, 
       0x1362, 0x7, 0x190, 0x2, 0x2, 0x1362, 0x1363, 0x7, 0x16e, 0x2, 0x2, 
       0x1363, 0x1368, 0x9, 0x45, 0x2, 0x2, 0x1364, 0x1365, 0x7, 0x26, 0x2, 
       0x2, 0x1365, 0x1366, 0x7, 0xaf, 0x2, 0x2, 0x1366, 0x1368, 0x7, 0x1b2, 
       0x2, 0x2, 0x1367, 0x134c, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x134d, 0x3, 
       0x2, 0x2, 0x2, 0x1367, 0x134e, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x134f, 
       0x3, 0x2, 0x2, 0x2, 0x1367, 0x1350, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x1351, 
       0x3, 0x2, 0x2, 0x2, 0x1367, 0x1353, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x1354, 
       0x3, 0x2, 0x2, 0x2, 0x1367, 0x1357, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x135a, 
       0x3, 0x2, 0x2, 0x2, 0x1367, 0x135b, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x135c, 
       0x3, 0x2, 0x2, 0x2, 0x1367, 0x135d, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x135e, 
       0x3, 0x2, 0x2, 0x2, 0x1367, 0x135f, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x1360, 
       0x3, 0x2, 0x2, 0x2, 0x1367, 0x1361, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x1364, 
       0x3, 0x2, 0x2, 0x2, 0x1368, 0x1369, 0x3, 0x2, 0x2, 0x2, 0x1369, 0x136b, 
       0x5, 0x306, 0x184, 0x2, 0x136a, 0x1327, 0x3, 0x2, 0x2, 0x2, 0x136a, 
       0x132b, 0x3, 0x2, 0x2, 0x2, 0x136a, 0x1332, 0x3, 0x2, 0x2, 0x2, 0x136a, 
       0x1337, 0x3, 0x2, 0x2, 0x2, 0x136a, 0x133c, 0x3, 0x2, 0x2, 0x2, 0x136a, 
       0x133e, 0x3, 0x2, 0x2, 0x2, 0x136a, 0x1346, 0x3, 0x2, 0x2, 0x2, 0x136a, 
       0x1367, 0x3, 0x2, 0x2, 0x2, 0x136b, 0x303, 0x3, 0x2, 0x2, 0x2, 0x136c, 
       0x136d, 0x5, 0x41a, 0x20e, 0x2, 0x136d, 0x305, 0x3, 0x2, 0x2, 0x2, 
       0x136e, 0x1372, 0x5, 0x41a, 0x20e, 0x2, 0x136f, 0x1371, 0x5, 0x7e, 
       0x40, 0x2, 0x1370, 0x136f, 0x3, 0x2, 0x2, 0x2, 0x1371, 0x1374, 0x3, 
       0x2, 0x2, 0x2, 0x1372, 0x1370, 0x3, 0x2, 0x2, 0x2, 0x1372, 0x1373, 
       0x3, 0x2, 0x2, 0x2, 0x1373, 0x307, 0x3, 0x2, 0x2, 0x2, 0x1374, 0x1372, 
       0x3, 0x2, 0x2, 0x2, 0x1375, 0x1377, 0x9, 0x46, 0x2, 0x2, 0x1376, 
       0x1378, 0x5, 0x10, 0x9, 0x2, 0x1377, 0x1376, 0x3, 0x2, 0x2, 0x2, 
       0x1377, 0x1378, 0x3, 0x2, 0x2, 0x2, 0x1378, 0x309, 0x3, 0x2, 0x2, 
       0x2, 0x1379, 0x137a, 0x7, 0x9e, 0x2, 0x2, 0x137a, 0x137b, 0x7, 0x144, 
       0x2, 0x2, 0x137b, 0x137e, 0x5, 0x41a, 0x20e, 0x2, 0x137c, 0x137d, 
       0x7, 0x5d, 0x2, 0x2, 0x137d, 0x137f, 0x7, 0x240, 0x2, 0x2, 0x137e, 
       0x137c, 0x3, 0x2, 0x2, 0x2, 0x137e, 0x137f, 0x3, 0x2, 0x2, 0x2, 0x137f, 
       0x30b, 0x3, 0x2, 0x2, 0x2, 0x1380, 0x1381, 0x7, 0xa7, 0x2, 0x2, 0x1381, 
       0x1383, 0x5, 0x30e, 0x188, 0x2, 0x1382, 0x1384, 0x5, 0x138, 0x9d, 
       0x2, 0x1383, 0x1382, 0x3, 0x2, 0x2, 0x2, 0x1383, 0x1384, 0x3, 0x2, 
       0x2, 0x2, 0x1384, 0x1385, 0x3, 0x2, 0x2, 0x2, 0x1385, 0x1386, 0x9, 
       0x47, 0x2, 0x2, 0x1386, 0x138a, 0x9, 0x48, 0x2, 0x2, 0x1387, 0x1389, 
       0x5, 0x310, 0x189, 0x2, 0x1388, 0x1387, 0x3, 0x2, 0x2, 0x2, 0x1389, 
       0x138c, 0x3, 0x2, 0x2, 0x2, 0x138a, 0x1388, 0x3, 0x2, 0x2, 0x2, 0x138a, 
       0x138b, 0x3, 0x2, 0x2, 0x2, 0x138b, 0x1390, 0x3, 0x2, 0x2, 0x2, 0x138c, 
       0x138a, 0x3, 0x2, 0x2, 0x2, 0x138d, 0x138f, 0x5, 0x312, 0x18a, 0x2, 
       0x138e, 0x138d, 0x3, 0x2, 0x2, 0x2, 0x138f, 0x1392, 0x3, 0x2, 0x2, 
       0x2, 0x1390, 0x138e, 0x3, 0x2, 0x2, 0x2, 0x1390, 0x1391, 0x3, 0x2, 
       0x2, 0x2, 0x1391, 0x30d, 0x3, 0x2, 0x2, 0x2, 0x1392, 0x1390, 0x3, 
       0x2, 0x2, 0x2, 0x1393, 0x139c, 0x5, 0x7c, 0x3f, 0x2, 0x1394, 0x1397, 
       0x7, 0x269, 0x2, 0x2, 0x1395, 0x1398, 0x5, 0x23e, 0x120, 0x2, 0x1396, 
       0x1398, 0x5, 0x3a0, 0x1d1, 0x2, 0x1397, 0x1395, 0x3, 0x2, 0x2, 0x2, 
       0x1397, 0x1396, 0x3, 0x2, 0x2, 0x2, 0x1398, 0x1399, 0x3, 0x2, 0x2, 
       0x2, 0x1399, 0x139a, 0x7, 0x26a, 0x2, 0x2, 0x139a, 0x139c, 0x3, 0x2, 
       0x2, 0x2, 0x139b, 0x1393, 0x3, 0x2, 0x2, 0x2, 0x139b, 0x1394, 0x3, 
       0x2, 0x2, 0x2, 0x139c, 0x30f, 0x3, 0x2, 0x2, 0x2, 0x139d, 0x139e, 
       0x7, 0x58, 0x2, 0x2, 0x139e, 0x139f, 0x7, 0xb8, 0x2, 0x2, 0x139f, 
       0x13a8, 0x7, 0x286, 0x2, 0x2, 0x13a0, 0x13a1, 0x7, 0x1af, 0x2, 0x2, 
       0x13a1, 0x13a8, 0x7, 0xcd, 0x2, 0x2, 0x13a2, 0x13a3, 0x7, 0x10c, 
       0x2, 0x2, 0x13a3, 0x13a8, 0x7, 0x241, 0x2, 0x2, 0x13a4, 0x13a5, 0x7, 
       0x47, 0x2, 0x2, 0x13a5, 0x13a6, 0x7, 0x34, 0x2, 0x2, 0x13a6, 0x13a8, 
       0x7, 0x286, 0x2, 0x2, 0x13a7, 0x139d, 0x3, 0x2, 0x2, 0x2, 0x13a7, 
       0x13a0, 0x3, 0x2, 0x2, 0x2, 0x13a7, 0x13a2, 0x3, 0x2, 0x2, 0x2, 0x13a7, 
       0x13a4, 0x3, 0x2, 0x2, 0x2, 0x13a8, 0x311, 0x3, 0x2, 0x2, 0x2, 0x13a9, 
       0x13ab, 0x7, 0x5d, 0x2, 0x2, 0x13aa, 0x13a9, 0x3, 0x2, 0x2, 0x2, 
       0x13aa, 0x13ab, 0x3, 0x2, 0x2, 0x2, 0x13ab, 0x13ac, 0x3, 0x2, 0x2, 
       0x2, 0x13ac, 0x13cc, 0x5, 0x314, 0x18b, 0x2, 0x13ad, 0x13cc, 0x5, 
       0x31c, 0x18f, 0x2, 0x13ae, 0x13af, 0x7, 0xdb, 0x2, 0x2, 0x13af, 0x13b0, 
       0x7, 0xde, 0x2, 0x2, 0x13b0, 0x13b1, 0x7, 0x269, 0x2, 0x2, 0x13b1, 
       0x13b2, 0x5, 0x318, 0x18d, 0x2, 0x13b2, 0x13ba, 0x7, 0x26a, 0x2, 
       0x2, 0x13b3, 0x13bb, 0x5, 0x314, 0x18b, 0x2, 0x13b4, 0x13b6, 0x5, 
       0x31c, 0x18f, 0x2, 0x13b5, 0x13b4, 0x3, 0x2, 0x2, 0x2, 0x13b6, 0x13b9, 
       0x3, 0x2, 0x2, 0x2, 0x13b7, 0x13b5, 0x3, 0x2, 0x2, 0x2, 0x13b7, 0x13b8, 
       0x3, 0x2, 0x2, 0x2, 0x13b8, 0x13bb, 0x3, 0x2, 0x2, 0x2, 0x13b9, 0x13b7, 
       0x3, 0x2, 0x2, 0x2, 0x13ba, 0x13b3, 0x3, 0x2, 0x2, 0x2, 0x13ba, 0x13b7, 
       0x3, 0x2, 0x2, 0x2, 0x13bb, 0x13cc, 0x3, 0x2, 0x2, 0x2, 0x13bc, 0x13c4, 
       0x5, 0x314, 0x18b, 0x2, 0x13bd, 0x13bf, 0x5, 0x31c, 0x18f, 0x2, 0x13be, 
       0x13bd, 0x3, 0x2, 0x2, 0x2, 0x13bf, 0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13c0, 
       0x13be, 0x3, 0x2, 0x2, 0x2, 0x13c0, 0x13c1, 0x3, 0x2, 0x2, 0x2, 0x13c1, 
       0x13c4, 0x3, 0x2, 0x2, 0x2, 0x13c2, 0x13c0, 0x3, 0x2, 0x2, 0x2, 0x13c3, 
       0x13bc, 0x3, 0x2, 0x2, 0x2, 0x13c3, 0x13c0, 0x3, 0x2, 0x2, 0x2, 0x13c4, 
       0x13c5, 0x3, 0x2, 0x2, 0x2, 0x13c5, 0x13c6, 0x7, 0xdb, 0x2, 0x2, 
       0x13c6, 0x13c7, 0x7, 0xde, 0x2, 0x2, 0x13c7, 0x13c8, 0x7, 0x269, 
       0x2, 0x2, 0x13c8, 0x13c9, 0x5, 0x318, 0x18d, 0x2, 0x13c9, 0x13ca, 
       0x7, 0x26a, 0x2, 0x2, 0x13ca, 0x13cc, 0x3, 0x2, 0x2, 0x2, 0x13cb, 
       0x13aa, 0x3, 0x2, 0x2, 0x2, 0x13cb, 0x13ad, 0x3, 0x2, 0x2, 0x2, 0x13cb, 
       0x13ae, 0x3, 0x2, 0x2, 0x2, 0x13cb, 0x13c3, 0x3, 0x2, 0x2, 0x2, 0x13cc, 
       0x313, 0x3, 0x2, 0x2, 0x2, 0x13cd, 0x13ce, 0x7, 0x269, 0x2, 0x2, 
       0x13ce, 0x13d3, 0x5, 0x316, 0x18c, 0x2, 0x13cf, 0x13d0, 0x7, 0x26f, 
       0x2, 0x2, 0x13d0, 0x13d2, 0x5, 0x316, 0x18c, 0x2, 0x13d1, 0x13cf, 
       0x3, 0x2, 0x2, 0x2, 0x13d2, 0x13d5, 0x3, 0x2, 0x2, 0x2, 0x13d3, 0x13d1, 
       0x3, 0x2, 0x2, 0x2, 0x13d3, 0x13d4, 0x3, 0x2, 0x2, 0x2, 0x13d4, 0x13d6, 
       0x3, 0x2, 0x2, 0x2, 0x13d5, 0x13d3, 0x3, 0x2, 0x2, 0x2, 0x13d6, 0x13d7, 
       0x7, 0x26a, 0x2, 0x2, 0x13d7, 0x315, 0x3, 0x2, 0x2, 0x2, 0x13d8, 
       0x13d9, 0x7, 0x242, 0x2, 0x2, 0x13d9, 0x13e9, 0x7, 0x286, 0x2, 0x2, 
       0x13da, 0x13db, 0x7, 0xb9, 0x2, 0x2, 0x13db, 0x13e9, 0x7, 0x286, 
       0x2, 0x2, 0x13dc, 0x13de, 0x7, 0x243, 0x2, 0x2, 0x13dd, 0x13df, 0x5, 
       0x320, 0x191, 0x2, 0x13de, 0x13dd, 0x3, 0x2, 0x2, 0x2, 0x13de, 0x13df, 
       0x3, 0x2, 0x2, 0x2, 0x13df, 0x13e9, 0x3, 0x2, 0x2, 0x2, 0x13e0, 0x13e3, 
       0x7, 0x244, 0x2, 0x2, 0x13e1, 0x13e4, 0x5, 0x138, 0x9d, 0x2, 0x13e2, 
       0x13e4, 0x7, 0x26c, 0x2, 0x2, 0x13e3, 0x13e1, 0x3, 0x2, 0x2, 0x2, 
       0x13e3, 0x13e2, 0x3, 0x2, 0x2, 0x2, 0x13e4, 0x13e9, 0x3, 0x2, 0x2, 
       0x2, 0x13e5, 0x13e6, 0x7, 0x245, 0x2, 0x2, 0x13e6, 0x13e9, 0x5, 0x138, 
       0x9d, 0x2, 0x13e7, 0x13e9, 0x5, 0x31e, 0x190, 0x2, 0x13e8, 0x13d8, 
       0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13da, 0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13dc, 
       0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e0, 0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e5, 
       0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e7, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x317, 
       0x3, 0x2, 0x2, 0x2, 0x13ea, 0x13ef, 0x5, 0x31a, 0x18e, 0x2, 0x13eb, 
       0x13ec, 0x7, 0x26f, 0x2, 0x2, 0x13ec, 0x13ee, 0x5, 0x31a, 0x18e, 
       0x2, 0x13ed, 0x13eb, 0x3, 0x2, 0x2, 0x2, 0x13ee, 0x13f1, 0x3, 0x2, 
       0x2, 0x2, 0x13ef, 0x13ed, 0x3, 0x2, 0x2, 0x2, 0x13ef, 0x13f0, 0x3, 
       0x2, 0x2, 0x2, 0x13f0, 0x319, 0x3, 0x2, 0x2, 0x2, 0x13f1, 0x13ef, 
       0x3, 0x2, 0x2, 0x2, 0x13f2, 0x13f3, 0x5, 0x86, 0x44, 0x2, 0x13f3, 
       0x13f4, 0x7, 0x269, 0x2, 0x2, 0x13f4, 0x13f5, 0x5, 0x3c6, 0x1e4, 
       0x2, 0x13f5, 0x13f6, 0x7, 0x26f, 0x2, 0x2, 0x13f6, 0x13f7, 0x5, 0x3c6, 
       0x1e4, 0x2, 0x13f7, 0x13f8, 0x7, 0x26a, 0x2, 0x2, 0x13f8, 0x31b, 
       0x3, 0x2, 0x2, 0x2, 0x13f9, 0x13fd, 0x7, 0x5f, 0x2, 0x2, 0x13fa, 
       0x13fd, 0x7, 0xa9, 0x2, 0x2, 0x13fb, 0x13fd, 0x5, 0x31e, 0x190, 0x2, 
       0x13fc, 0x13f9, 0x3, 0x2, 0x2, 0x2, 0x13fc, 0x13fa, 0x3, 0x2, 0x2, 
       0x2, 0x13fc, 0x13fb, 0x3, 0x2, 0x2, 0x2, 0x13fd, 0x31d, 0x3, 0x2, 
       0x2, 0x2, 0x13fe, 0x1400, 0x7, 0x12f, 0x2, 0x2, 0x13ff, 0x1401, 0x5, 
       0x320, 0x191, 0x2, 0x1400, 0x13ff, 0x3, 0x2, 0x2, 0x2, 0x1400, 0x1401, 
       0x3, 0x2, 0x2, 0x2, 0x1401, 0x1426, 0x3, 0x2, 0x2, 0x2, 0x1402, 0x1403, 
       0x7, 0x3c, 0x2, 0x2, 0x1403, 0x1426, 0x7, 0x286, 0x2, 0x2, 0x1404, 
       0x1406, 0x7, 0xe4, 0x2, 0x2, 0x1405, 0x1407, 0x5, 0x320, 0x191, 0x2, 
       0x1406, 0x1405, 0x3, 0x2, 0x2, 0x2, 0x1406, 0x1407, 0x3, 0x2, 0x2, 
       0x2, 0x1407, 0x1426, 0x3, 0x2, 0x2, 0x2, 0x1408, 0x1409, 0x7, 0xd9, 
       0x2, 0x2, 0x1409, 0x1426, 0x7, 0x286, 0x2, 0x2, 0x140a, 0x140c, 0x7, 
       0x64, 0x2, 0x2, 0x140b, 0x140d, 0x5, 0x320, 0x191, 0x2, 0x140c, 0x140b, 
       0x3, 0x2, 0x2, 0x2, 0x140c, 0x140d, 0x3, 0x2, 0x2, 0x2, 0x140d, 0x1426, 
       0x3, 0x2, 0x2, 0x2, 0x140e, 0x1410, 0x9, 0x49, 0x2, 0x2, 0x140f, 
       0x1411, 0x7, 0xb, 0x2, 0x2, 0x1410, 0x140f, 0x3, 0x2, 0x2, 0x2, 0x1410, 
       0x1411, 0x3, 0x2, 0x2, 0x2, 0x1411, 0x1412, 0x3, 0x2, 0x2, 0x2, 0x1412, 
       0x1426, 0x7, 0x286, 0x2, 0x2, 0x1413, 0x1414, 0x7, 0xcc, 0x2, 0x2, 
       0x1414, 0x1426, 0x7, 0x286, 0x2, 0x2, 0x1415, 0x1416, 0x7, 0xc8, 
       0x2, 0x2, 0x1416, 0x1426, 0x7, 0x286, 0x2, 0x2, 0x1417, 0x1419, 0x7, 
       0x246, 0x2, 0x2, 0x1418, 0x141a, 0x5, 0x320, 0x191, 0x2, 0x1419, 
       0x1418, 0x3, 0x2, 0x2, 0x2, 0x1419, 0x141a, 0x3, 0x2, 0x2, 0x2, 0x141a, 
       0x1426, 0x3, 0x2, 0x2, 0x2, 0x141b, 0x141d, 0x7, 0x247, 0x2, 0x2, 
       0x141c, 0x141e, 0x5, 0x320, 0x191, 0x2, 0x141d, 0x141c, 0x3, 0x2, 
       0x2, 0x2, 0x141d, 0x141e, 0x3, 0x2, 0x2, 0x2, 0x141e, 0x1426, 0x3, 
       0x2, 0x2, 0x2, 0x141f, 0x1421, 0x7, 0x248, 0x2, 0x2, 0x1420, 0x1422, 
       0x5, 0x320, 0x191, 0x2, 0x1421, 0x1420, 0x3, 0x2, 0x2, 0x2, 0x1421, 
       0x1422, 0x3, 0x2, 0x2, 0x2, 0x1422, 0x1426, 0x3, 0x2, 0x2, 0x2, 0x1423, 
       0x1424, 0x9, 0x4a, 0x2, 0x2, 0x1424, 0x1426, 0x7, 0x286, 0x2, 0x2, 
       0x1425, 0x13fe, 0x3, 0x2, 0x2, 0x2, 0x1425, 0x1402, 0x3, 0x2, 0x2, 
       0x2, 0x1425, 0x1404, 0x3, 0x2, 0x2, 0x2, 0x1425, 0x1408, 0x3, 0x2, 
       0x2, 0x2, 0x1425, 0x140a, 0x3, 0x2, 0x2, 0x2, 0x1425, 0x140e, 0x3, 
       0x2, 0x2, 0x2, 0x1425, 0x1413, 0x3, 0x2, 0x2, 0x2, 0x1425, 0x1415, 
       0x3, 0x2, 0x2, 0x2, 0x1425, 0x1417, 0x3, 0x2, 0x2, 0x2, 0x1425, 0x141b, 
       0x3, 0x2, 0x2, 0x2, 0x1425, 0x141f, 0x3, 0x2, 0x2, 0x2, 0x1425, 0x1423, 
       0x3, 0x2, 0x2, 0x2, 0x1426, 0x31f, 0x3, 0x2, 0x2, 0x2, 0x1427, 0x1428, 
       0x9, 0x4b, 0x2, 0x2, 0x1428, 0x321, 0x3, 0x2, 0x2, 0x2, 0x1429, 0x142a, 
       0x7, 0xab, 0x2, 0x2, 0x142a, 0x142c, 0x5, 0x2fa, 0x17e, 0x2, 0x142b, 
       0x142d, 0x7, 0x5f, 0x2, 0x2, 0x142c, 0x142b, 0x3, 0x2, 0x2, 0x2, 
       0x142c, 0x142d, 0x3, 0x2, 0x2, 0x2, 0x142d, 0x1430, 0x3, 0x2, 0x2, 
       0x2, 0x142e, 0x142f, 0x7, 0x129, 0x2, 0x2, 0x142f, 0x1431, 0x7, 0x16d, 
       0x2, 0x2, 0x1430, 0x142e, 0x3, 0x2, 0x2, 0x2, 0x1430, 0x1431, 0x3, 
       0x2, 0x2, 0x2, 0x1431, 0x1434, 0x3, 0x2, 0x2, 0x2, 0x1432, 0x1433, 
       0x9, 0x28, 0x2, 0x2, 0x1433, 0x1435, 0x7, 0xe5, 0x2, 0x2, 0x1434, 
       0x1432, 0x3, 0x2, 0x2, 0x2, 0x1434, 0x1435, 0x3, 0x2, 0x2, 0x2, 0x1435, 
       0x1436, 0x3, 0x2, 0x2, 0x2, 0x1436, 0x1439, 0x7, 0x27, 0x2, 0x2, 
       0x1437, 0x143a, 0x5, 0x23e, 0x120, 0x2, 0x1438, 0x143a, 0x5, 0x3a0, 
       0x1d1, 0x2, 0x1439, 0x1437, 0x3, 0x2, 0x2, 0x2, 0x1439, 0x1438, 0x3, 
       0x2, 0x2, 0x2, 0x143a, 0x323, 0x3, 0x2, 0x2, 0x2, 0x143b, 0x143d, 
       0x7, 0xb2, 0x2, 0x2, 0x143c, 0x143e, 0x7, 0x145, 0x2, 0x2, 0x143d, 
       0x143c, 0x3, 0x2, 0x2, 0x2, 0x143d, 0x143e, 0x3, 0x2, 0x2, 0x2, 0x143e, 
       0x1442, 0x3, 0x2, 0x2, 0x2, 0x143f, 0x1443, 0x5, 0x41a, 0x20e, 0x2, 
       0x1440, 0x1443, 0x3, 0x2, 0x2, 0x2, 0x1441, 0x1443, 0x7, 0x3, 0x2, 
       0x2, 0x1442, 0x143f, 0x3, 0x2, 0x2, 0x2, 0x1442, 0x1440, 0x3, 0x2, 
       0x2, 0x2, 0x1442, 0x1441, 0x3, 0x2, 0x2, 0x2, 0x1443, 0x325, 0x3, 
       0x2, 0x2, 0x2, 0x1444, 0x1447, 0x7, 0x20, 0x2, 0x2, 0x1445, 0x1446, 
       0x7, 0xfe, 0x2, 0x2, 0x1446, 0x1448, 0x5, 0x1d0, 0xe9, 0x2, 0x1447, 
       0x1445, 0x3, 0x2, 0x2, 0x2, 0x1447, 0x1448, 0x3, 0x2, 0x2, 0x2, 0x1448, 
       0x1449, 0x3, 0x2, 0x2, 0x2, 0x1449, 0x144a, 0x5, 0x328, 0x195, 0x2, 
       0x144a, 0x327, 0x3, 0x2, 0x2, 0x2, 0x144b, 0x144c, 0x7, 0x289, 0x2, 
       0x2, 0x144c, 0x329, 0x3, 0x2, 0x2, 0x2, 0x144d, 0x1452, 0x5, 0x32c, 
       0x197, 0x2, 0x144e, 0x144f, 0x7, 0x27c, 0x2, 0x2, 0x144f, 0x1451, 
       0x5, 0x32c, 0x197, 0x2, 0x1450, 0x144e, 0x3, 0x2, 0x2, 0x2, 0x1451, 
       0x1454, 0x3, 0x2, 0x2, 0x2, 0x1452, 0x1450, 0x3, 0x2, 0x2, 0x2, 0x1452, 
       0x1453, 0x3, 0x2, 0x2, 0x2, 0x1453, 0x1455, 0x3, 0x2, 0x2, 0x2, 0x1454, 
       0x1452, 0x3, 0x2, 0x2, 0x2, 0x1455, 0x1456, 0x7, 0x27c, 0x2, 0x2, 
       0x1456, 0x32b, 0x3, 0x2, 0x2, 0x2, 0x1457, 0x1458, 0x7, 0xd4, 0x2, 
       0x2, 0x1458, 0x145c, 0x5, 0x41a, 0x20e, 0x2, 0x1459, 0x145b, 0x5, 
       0x7e, 0x40, 0x2, 0x145a, 0x1459, 0x3, 0x2, 0x2, 0x2, 0x145b, 0x145e, 
       0x3, 0x2, 0x2, 0x2, 0x145c, 0x145a, 0x3, 0x2, 0x2, 0x2, 0x145c, 0x145d, 
       0x3, 0x2, 0x2, 0x2, 0x145d, 0x145f, 0x3, 0x2, 0x2, 0x2, 0x145e, 0x145c, 
       0x3, 0x2, 0x2, 0x2, 0x145f, 0x1460, 0x7, 0x269, 0x2, 0x2, 0x1460, 
       0x1461, 0x5, 0x2ee, 0x178, 0x2, 0x1461, 0x1462, 0x7, 0x26a, 0x2, 
       0x2, 0x1462, 0x32d, 0x3, 0x2, 0x2, 0x2, 0x1463, 0x1464, 0x7, 0xd4, 
       0x2, 0x2, 0x1464, 0x1465, 0x7, 0xbd, 0x2, 0x2, 0x1465, 0x1466, 0x7, 
       0x3f, 0x2, 0x2, 0x1466, 0x1469, 0x5, 0xd0, 0x69, 0x2, 0x1467, 0x146a, 
       0x5, 0x23e, 0x120, 0x2, 0x1468, 0x146a, 0x7, 0x286, 0x2, 0x2, 0x1469, 
       0x1467, 0x3, 0x2, 0x2, 0x2, 0x1469, 0x1468, 0x3, 0x2, 0x2, 0x2, 0x146a, 
       0x32f, 0x3, 0x2, 0x2, 0x2, 0x146b, 0x1474, 0x7, 0xd5, 0x2, 0x2, 0x146c, 
       0x146e, 0x5, 0x332, 0x19a, 0x2, 0x146d, 0x146c, 0x3, 0x2, 0x2, 0x2, 
       0x146d, 0x146e, 0x3, 0x2, 0x2, 0x2, 0x146e, 0x1475, 0x3, 0x2, 0x2, 
       0x2, 0x146f, 0x1471, 0x5, 0x2e6, 0x174, 0x2, 0x1470, 0x146f, 0x3, 
       0x2, 0x2, 0x2, 0x1470, 0x1471, 0x3, 0x2, 0x2, 0x2, 0x1471, 0x1472, 
       0x3, 0x2, 0x2, 0x2, 0x1472, 0x1475, 0x7, 0x73, 0x2, 0x2, 0x1473, 
       0x1475, 0x7, 0x42, 0x2, 0x2, 0x1474, 0x146d, 0x3, 0x2, 0x2, 0x2, 
       0x1474, 0x1470, 0x3, 0x2, 0x2, 0x2, 0x1474, 0x1473, 0x3, 0x2, 0x2, 
       0x2, 0x1475, 0x1476, 0x3, 0x2, 0x2, 0x2, 0x1476, 0x1477, 0x5, 0x8, 
       0x5, 0x2, 0x1477, 0x331, 0x3, 0x2, 0x2, 0x2, 0x1478, 0x1479, 0x7, 
       0x269, 0x2, 0x2, 0x1479, 0x147e, 0x5, 0x334, 0x19b, 0x2, 0x147a, 
       0x147b, 0x7, 0x26f, 0x2, 0x2, 0x147b, 0x147d, 0x5, 0x334, 0x19b, 
       0x2, 0x147c, 0x147a, 0x3, 0x2, 0x2, 0x2, 0x147d, 0x1480, 0x3, 0x2, 
       0x2, 0x2, 0x147e, 0x147c, 0x3, 0x2, 0x2, 0x2, 0x147e, 0x147f, 0x3, 
       0x2, 0x2, 0x2, 0x147f, 0x1481, 0x3, 0x2, 0x2, 0x2, 0x1480, 0x147e, 
       0x3, 0x2, 0x2, 0x2, 0x1481, 0x1482, 0x7, 0x26a, 0x2, 0x2, 0x1482, 
       0x333, 0x3, 0x2, 0x2, 0x2, 0x1483, 0x148e, 0x5, 0x2e6, 0x174, 0x2, 
       0x1484, 0x148e, 0x7, 0x73, 0x2, 0x2, 0x1485, 0x148e, 0x7, 0x251, 
       0x2, 0x2, 0x1486, 0x148e, 0x7, 0x252, 0x2, 0x2, 0x1487, 0x148e, 0x7, 
       0x253, 0x2, 0x2, 0x1488, 0x148e, 0x7, 0x254, 0x2, 0x2, 0x1489, 0x148e, 
       0x7, 0x255, 0x2, 0x2, 0x148a, 0x148e, 0x7, 0x256, 0x2, 0x2, 0x148b, 
       0x148e, 0x7, 0x257, 0x2, 0x2, 0x148c, 0x148e, 0x7, 0x258, 0x2, 0x2, 
       0x148d, 0x1483, 0x3, 0x2, 0x2, 0x2, 0x148d, 0x1484, 0x3, 0x2, 0x2, 
       0x2, 0x148d, 0x1485, 0x3, 0x2, 0x2, 0x2, 0x148d, 0x1486, 0x3, 0x2, 
       0x2, 0x2, 0x148d, 0x1487, 0x3, 0x2, 0x2, 0x2, 0x148d, 0x1488, 0x3, 
       0x2, 0x2, 0x2, 0x148d, 0x1489, 0x3, 0x2, 0x2, 0x2, 0x148d, 0x148a, 
       0x3, 0x2, 0x2, 0x2, 0x148d, 0x148b, 0x3, 0x2, 0x2, 0x2, 0x148d, 0x148c, 
       0x3, 0x2, 0x2, 0x2, 0x148e, 0x1490, 0x3, 0x2, 0x2, 0x2, 0x148f, 0x1491, 
       0x5, 0x320, 0x191, 0x2, 0x1490, 0x148f, 0x3, 0x2, 0x2, 0x2, 0x1490, 
       0x1491, 0x3, 0x2, 0x2, 0x2, 0x1491, 0x1495, 0x3, 0x2, 0x2, 0x2, 0x1492, 
       0x1493, 0x7, 0x242, 0x2, 0x2, 0x1493, 0x1495, 0x9, 0x4c, 0x2, 0x2, 
       0x1494, 0x148d, 0x3, 0x2, 0x2, 0x2, 0x1494, 0x1492, 0x3, 0x2, 0x2, 
       0x2, 0x1495, 0x335, 0x3, 0x2, 0x2, 0x2, 0x1496, 0x1497, 0x7, 0xd5, 
       0x2, 0x2, 0x1497, 0x149a, 0x7, 0x258, 0x2, 0x2, 0x1498, 0x1499, 0x7, 
       0x176, 0x2, 0x2, 0x1499, 0x149b, 0x5, 0x1a, 0xe, 0x2, 0x149a, 0x1498, 
       0x3, 0x2, 0x2, 0x2, 0x149a, 0x149b, 0x3, 0x2, 0x2, 0x2, 0x149b, 0x149c, 
       0x3, 0x2, 0x2, 0x2, 0x149c, 0x149d, 0x7, 0x27, 0x2, 0x2, 0x149d, 
       0x149e, 0x5, 0x8, 0x5, 0x2, 0x149e, 0x337, 0x3, 0x2, 0x2, 0x2, 0x149f, 
       0x14a3, 0x9, 0x4d, 0x2, 0x2, 0x14a0, 0x14a1, 0x5, 0x33a, 0x19e, 0x2, 
       0x14a1, 0x14a2, 0x9, 0x4e, 0x2, 0x2, 0x14a2, 0x14a4, 0x3, 0x2, 0x2, 
       0x2, 0x14a3, 0x14a0, 0x3, 0x2, 0x2, 0x2, 0x14a3, 0x14a4, 0x3, 0x2, 
       0x2, 0x2, 0x14a4, 0x14a5, 0x3, 0x2, 0x2, 0x2, 0x14a5, 0x14a6, 0x5, 
       0x2fa, 0x17e, 0x2, 0x14a6, 0x339, 0x3, 0x2, 0x2, 0x2, 0x14a7, 0x14b5, 
       0x7, 0x11e, 0x2, 0x2, 0x14a8, 0x14b5, 0x7, 0xda, 0x2, 0x2, 0x14a9, 
       0x14b5, 0x7, 0x100, 0x2, 0x2, 0x14aa, 0x14ac, 0x9, 0x4f, 0x2, 0x2, 
       0x14ab, 0x14aa, 0x3, 0x2, 0x2, 0x2, 0x14ab, 0x14ac, 0x3, 0x2, 0x2, 
       0x2, 0x14ac, 0x14ad, 0x3, 0x2, 0x2, 0x2, 0x14ad, 0x14b5, 0x7, 0x28a, 
       0x2, 0x2, 0x14ae, 0x14b0, 0x9, 0x50, 0x2, 0x2, 0x14af, 0x14ae, 0x3, 
       0x2, 0x2, 0x2, 0x14af, 0x14b0, 0x3, 0x2, 0x2, 0x2, 0x14b0, 0x14b1, 
       0x3, 0x2, 0x2, 0x2, 0x14b1, 0x14b5, 0x7, 0x3, 0x2, 0x2, 0x14b2, 0x14b5, 
       0x7, 0xdf, 0x2, 0x2, 0x14b3, 0x14b5, 0x7, 0x87, 0x2, 0x2, 0x14b4, 
       0x14a7, 0x3, 0x2, 0x2, 0x2, 0x14b4, 0x14a8, 0x3, 0x2, 0x2, 0x2, 0x14b4, 
       0x14a9, 0x3, 0x2, 0x2, 0x2, 0x14b4, 0x14ab, 0x3, 0x2, 0x2, 0x2, 0x14b4, 
       0x14af, 0x3, 0x2, 0x2, 0x2, 0x14b4, 0x14b2, 0x3, 0x2, 0x2, 0x2, 0x14b4, 
       0x14b3, 0x3, 0x2, 0x2, 0x2, 0x14b5, 0x33b, 0x3, 0x2, 0x2, 0x2, 0x14b6, 
       0x14b7, 0x7, 0x2a, 0x2, 0x2, 0x14b7, 0x14ba, 0x5, 0x33e, 0x1a0, 0x2, 
       0x14b8, 0x14b9, 0x7, 0x3f, 0x2, 0x2, 0x14b9, 0x14bb, 0x5, 0x346, 
       0x1a4, 0x2, 0x14ba, 0x14b8, 0x3, 0x2, 0x2, 0x2, 0x14ba, 0x14bb, 0x3, 
       0x2, 0x2, 0x2, 0x14bb, 0x14bc, 0x3, 0x2, 0x2, 0x2, 0x14bc, 0x14bd, 
       0x7, 0x52, 0x2, 0x2, 0x14bd, 0x14bf, 0x5, 0x5a, 0x2e, 0x2, 0x14be, 
       0x14c0, 0x5, 0x60, 0x31, 0x2, 0x14bf, 0x14be, 0x3, 0x2, 0x2, 0x2, 
       0x14bf, 0x14c0, 0x3, 0x2, 0x2, 0x2, 0x14c0, 0x14d0, 0x3, 0x2, 0x2, 
       0x2, 0x14c1, 0x14c2, 0x7, 0x2a, 0x2, 0x2, 0x14c2, 0x14c7, 0x5, 0x5e, 
       0x30, 0x2, 0x14c3, 0x14c4, 0x7, 0x26f, 0x2, 0x2, 0x14c4, 0x14c6, 
       0x5, 0x5e, 0x30, 0x2, 0x14c5, 0x14c3, 0x3, 0x2, 0x2, 0x2, 0x14c6, 
       0x14c9, 0x3, 0x2, 0x2, 0x2, 0x14c7, 0x14c5, 0x3, 0x2, 0x2, 0x2, 0x14c7, 
       0x14c8, 0x3, 0x2, 0x2, 0x2, 0x14c8, 0x14ca, 0x3, 0x2, 0x2, 0x2, 0x14c9, 
       0x14c7, 0x3, 0x2, 0x2, 0x2, 0x14ca, 0x14cb, 0x7, 0x52, 0x2, 0x2, 
       0x14cb, 0x14cd, 0x5, 0x5a, 0x2e, 0x2, 0x14cc, 0x14ce, 0x5, 0x60, 
       0x31, 0x2, 0x14cd, 0x14cc, 0x3, 0x2, 0x2, 0x2, 0x14cd, 0x14ce, 0x3, 
       0x2, 0x2, 0x2, 0x14ce, 0x14d0, 0x3, 0x2, 0x2, 0x2, 0x14cf, 0x14b6, 
       0x3, 0x2, 0x2, 0x2, 0x14cf, 0x14c1, 0x3, 0x2, 0x2, 0x2, 0x14d0, 0x33d, 
       0x3, 0x2, 0x2, 0x2, 0x14d1, 0x14d4, 0x5, 0x56, 0x2c, 0x2, 0x14d2, 
       0x14d4, 0x5, 0x54, 0x2b, 0x2, 0x14d3, 0x14d1, 0x3, 0x2, 0x2, 0x2, 
       0x14d3, 0x14d2, 0x3, 0x2, 0x2, 0x2, 0x14d4, 0x1501, 0x3, 0x2, 0x2, 
       0x2, 0x14d5, 0x14d6, 0x5, 0x58, 0x2d, 0x2, 0x14d6, 0x14dd, 0x5, 0x138, 
       0x9d, 0x2, 0x14d7, 0x14d8, 0x7, 0x26f, 0x2, 0x2, 0x14d8, 0x14d9, 
       0x5, 0x58, 0x2d, 0x2, 0x14d9, 0x14da, 0x5, 0x138, 0x9d, 0x2, 0x14da, 
       0x14dc, 0x3, 0x2, 0x2, 0x2, 0x14db, 0x14d7, 0x3, 0x2, 0x2, 0x2, 0x14dc, 
       0x14df, 0x3, 0x2, 0x2, 0x2, 0x14dd, 0x14db, 0x3, 0x2, 0x2, 0x2, 0x14dd, 
       0x14de, 0x3, 0x2, 0x2, 0x2, 0x14de, 0x14e4, 0x3, 0x2, 0x2, 0x2, 0x14df, 
       0x14dd, 0x3, 0x2, 0x2, 0x2, 0x14e0, 0x14e1, 0x5, 0x54, 0x2b, 0x2, 
       0x14e1, 0x14e2, 0x5, 0x138, 0x9d, 0x2, 0x14e2, 0x14e4, 0x3, 0x2, 
       0x2, 0x2, 0x14e3, 0x14d5, 0x3, 0x2, 0x2, 0x2, 0x14e3, 0x14e0, 0x3, 
       0x2, 0x2, 0x2, 0x14e4, 0x1501, 0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14e8, 
       0x5, 0x340, 0x1a1, 0x2, 0x14e6, 0x14e8, 0x5, 0x54, 0x2b, 0x2, 0x14e7, 
       0x14e5, 0x3, 0x2, 0x2, 0x2, 0x14e7, 0x14e6, 0x3, 0x2, 0x2, 0x2, 0x14e8, 
       0x1501, 0x3, 0x2, 0x2, 0x2, 0x14e9, 0x14ec, 0x7, 0x222, 0x2, 0x2, 
       0x14ea, 0x14ec, 0x5, 0x54, 0x2b, 0x2, 0x14eb, 0x14e9, 0x3, 0x2, 0x2, 
       0x2, 0x14eb, 0x14ea, 0x3, 0x2, 0x2, 0x2, 0x14ec, 0x1501, 0x3, 0x2, 
       0x2, 0x2, 0x14ed, 0x14f0, 0x5, 0x64, 0x33, 0x2, 0x14ee, 0x14f0, 0x5, 
       0x54, 0x2b, 0x2, 0x14ef, 0x14ed, 0x3, 0x2, 0x2, 0x2, 0x14ef, 0x14ee, 
       0x3, 0x2, 0x2, 0x2, 0x14f0, 0x1501, 0x3, 0x2, 0x2, 0x2, 0x14f1, 0x14f6, 
       0x5, 0x344, 0x1a3, 0x2, 0x14f2, 0x14f3, 0x7, 0x26f, 0x2, 0x2, 0x14f3, 
       0x14f5, 0x5, 0x344, 0x1a3, 0x2, 0x14f4, 0x14f2, 0x3, 0x2, 0x2, 0x2, 
       0x14f5, 0x14f8, 0x3, 0x2, 0x2, 0x2, 0x14f6, 0x14f4, 0x3, 0x2, 0x2, 
       0x2, 0x14f6, 0x14f7, 0x3, 0x2, 0x2, 0x2, 0x14f7, 0x1501, 0x3, 0x2, 
       0x2, 0x2, 0x14f8, 0x14f6, 0x3, 0x2, 0x2, 0x2, 0x14f9, 0x14fa, 0x7, 
       0x3, 0x2, 0x2, 0x14fa, 0x1501, 0x7, 0x149, 0x2, 0x2, 0x14fb, 0x14ff, 
       0x7, 0x150, 0x2, 0x2, 0x14fc, 0x14ff, 0x7, 0x1b3, 0x2, 0x2, 0x14fd, 
       0x14ff, 0x5, 0x54, 0x2b, 0x2, 0x14fe, 0x14fb, 0x3, 0x2, 0x2, 0x2, 
       0x14fe, 0x14fc, 0x3, 0x2, 0x2, 0x2, 0x14fe, 0x14fd, 0x3, 0x2, 0x2, 
       0x2, 0x14ff, 0x1501, 0x3, 0x2, 0x2, 0x2, 0x1500, 0x14d3, 0x3, 0x2, 
       0x2, 0x2, 0x1500, 0x14e3, 0x3, 0x2, 0x2, 0x2, 0x1500, 0x14e7, 0x3, 
       0x2, 0x2, 0x2, 0x1500, 0x14eb, 0x3, 0x2, 0x2, 0x2, 0x1500, 0x14ef, 
       0x3, 0x2, 0x2, 0x2, 0x1500, 0x14f1, 0x3, 0x2, 0x2, 0x2, 0x1500, 0x14f9, 
       0x3, 0x2, 0x2, 0x2, 0x1500, 0x14fe, 0x3, 0x2, 0x2, 0x2, 0x1501, 0x33f, 
       0x3, 0x2, 0x2, 0x2, 0x1502, 0x1507, 0x5, 0x342, 0x1a2, 0x2, 0x1503, 
       0x1504, 0x7, 0x26f, 0x2, 0x2, 0x1504, 0x1506, 0x5, 0x342, 0x1a2, 
       0x2, 0x1505, 0x1503, 0x3, 0x2, 0x2, 0x2, 0x1506, 0x1509, 0x3, 0x2, 
       0x2, 0x2, 0x1507, 0x1505, 0x3, 0x2, 0x2, 0x2, 0x1507, 0x1508, 0x3, 
       0x2, 0x2, 0x2, 0x1508, 0x341, 0x3, 0x2, 0x2, 0x2, 0x1509, 0x1507, 
       0x3, 0x2, 0x2, 0x2, 0x150a, 0x150b, 0x9, 0x51, 0x2, 0x2, 0x150b, 
       0x343, 0x3, 0x2, 0x2, 0x2, 0x150c, 0x150d, 0x9, 0x52, 0x2, 0x2, 0x150d, 
       0x345, 0x3, 0x2, 0x2, 0x2, 0x150e, 0x1510, 0x7, 0x50, 0x2, 0x2, 0x150f, 
       0x150e, 0x3, 0x2, 0x2, 0x2, 0x150f, 0x1510, 0x3, 0x2, 0x2, 0x2, 0x1510, 
       0x1511, 0x3, 0x2, 0x2, 0x2, 0x1511, 0x1516, 0x5, 0x7c, 0x3f, 0x2, 
       0x1512, 0x1513, 0x7, 0x26f, 0x2, 0x2, 0x1513, 0x1515, 0x5, 0x7c, 
       0x3f, 0x2, 0x1514, 0x1512, 0x3, 0x2, 0x2, 0x2, 0x1515, 0x1518, 0x3, 
       0x2, 0x2, 0x2, 0x1516, 0x1514, 0x3, 0x2, 0x2, 0x2, 0x1516, 0x1517, 
       0x3, 0x2, 0x2, 0x2, 0x1517, 0x151f, 0x3, 0x2, 0x2, 0x2, 0x1518, 0x1516, 
       0x3, 0x2, 0x2, 0x2, 0x1519, 0x151a, 0x7, 0x3, 0x2, 0x2, 0x151a, 0x151b, 
       0x7, 0x18c, 0x2, 0x2, 0x151b, 0x151c, 0x7, 0x30, 0x2, 0x2, 0x151c, 
       0x151d, 0x7, 0x16c, 0x2, 0x2, 0x151d, 0x151f, 0x5, 0x4c, 0x27, 0x2, 
       0x151e, 0x150f, 0x3, 0x2, 0x2, 0x2, 0x151e, 0x1519, 0x3, 0x2, 0x2, 
       0x2, 0x151f, 0x1581, 0x3, 0x2, 0x2, 0x2, 0x1520, 0x1521, 0x7, 0xad, 
       0x2, 0x2, 0x1521, 0x1526, 0x5, 0x20, 0x11, 0x2, 0x1522, 0x1523, 0x7, 
       0x26f, 0x2, 0x2, 0x1523, 0x1525, 0x5, 0x20, 0x11, 0x2, 0x1524, 0x1522, 
       0x3, 0x2, 0x2, 0x2, 0x1525, 0x1528, 0x3, 0x2, 0x2, 0x2, 0x1526, 0x1524, 
       0x3, 0x2, 0x2, 0x2, 0x1526, 0x1527, 0x3, 0x2, 0x2, 0x2, 0x1527, 0x1581, 
       0x3, 0x2, 0x2, 0x2, 0x1528, 0x1526, 0x3, 0x2, 0x2, 0x2, 0x1529, 0x152a, 
       0x7, 0x26, 0x2, 0x2, 0x152a, 0x152b, 0x7, 0xaf, 0x2, 0x2, 0x152b, 
       0x152c, 0x7, 0x1b2, 0x2, 0x2, 0x152c, 0x1531, 0x5, 0x306, 0x184, 
       0x2, 0x152d, 0x152e, 0x7, 0x26f, 0x2, 0x2, 0x152e, 0x1530, 0x5, 0x306, 
       0x184, 0x2, 0x152f, 0x152d, 0x3, 0x2, 0x2, 0x2, 0x1530, 0x1533, 0x3, 
       0x2, 0x2, 0x2, 0x1531, 0x152f, 0x3, 0x2, 0x2, 0x2, 0x1531, 0x1532, 
       0x3, 0x2, 0x2, 0x2, 0x1532, 0x1581, 0x3, 0x2, 0x2, 0x2, 0x1533, 0x1531, 
       0x3, 0x2, 0x2, 0x2, 0x1534, 0x1535, 0x7, 0x26, 0x2, 0x2, 0x1535, 
       0x1536, 0x7, 0x174, 0x2, 0x2, 0x1536, 0x153b, 0x5, 0x102, 0x82, 0x2, 
       0x1537, 0x1538, 0x7, 0x26f, 0x2, 0x2, 0x1538, 0x153a, 0x5, 0x102, 
       0x82, 0x2, 0x1539, 0x1537, 0x3, 0x2, 0x2, 0x2, 0x153a, 0x153d, 0x3, 
       0x2, 0x2, 0x2, 0x153b, 0x1539, 0x3, 0x2, 0x2, 0x2, 0x153b, 0x153c, 
       0x3, 0x2, 0x2, 0x2, 0x153c, 0x1581, 0x3, 0x2, 0x2, 0x2, 0x153d, 0x153b, 
       0x3, 0x2, 0x2, 0x2, 0x153e, 0x1545, 0x5, 0x348, 0x1a5, 0x2, 0x153f, 
       0x1540, 0x7, 0x3, 0x2, 0x2, 0x1540, 0x1541, 0x7, 0xe0, 0x2, 0x2, 
       0x1541, 0x1542, 0x7, 0x30, 0x2, 0x2, 0x1542, 0x1543, 0x7, 0x16c, 
       0x2, 0x2, 0x1543, 0x1545, 0x5, 0x4c, 0x27, 0x2, 0x1544, 0x153e, 0x3, 
       0x2, 0x2, 0x2, 0x1544, 0x153f, 0x3, 0x2, 0x2, 0x2, 0x1545, 0x1581, 
       0x3, 0x2, 0x2, 0x2, 0x1546, 0x1547, 0x7, 0xfe, 0x2, 0x2, 0x1547, 
       0x154c, 0x5, 0x1d0, 0xe9, 0x2, 0x1548, 0x1549, 0x7, 0x26f, 0x2, 0x2, 
       0x1549, 0x154b, 0x5, 0x1d0, 0xe9, 0x2, 0x154a, 0x1548, 0x3, 0x2, 
       0x2, 0x2, 0x154b, 0x154e, 0x3, 0x2, 0x2, 0x2, 0x154c, 0x154a, 0x3, 
       0x2, 0x2, 0x2, 0x154c, 0x154d, 0x3, 0x2, 0x2, 0x2, 0x154d, 0x1581, 
       0x3, 0x2, 0x2, 0x2, 0x154e, 0x154c, 0x3, 0x2, 0x2, 0x2, 0x154f, 0x1550, 
       0x7, 0x121, 0x2, 0x2, 0x1550, 0x1551, 0x7, 0x2b, 0x2, 0x2, 0x1551, 
       0x1556, 0x5, 0xac, 0x57, 0x2, 0x1552, 0x1553, 0x7, 0x26f, 0x2, 0x2, 
       0x1553, 0x1555, 0x5, 0xac, 0x57, 0x2, 0x1554, 0x1552, 0x3, 0x2, 0x2, 
       0x2, 0x1555, 0x1558, 0x3, 0x2, 0x2, 0x2, 0x1556, 0x1554, 0x3, 0x2, 
       0x2, 0x2, 0x1556, 0x1557, 0x3, 0x2, 0x2, 0x2, 0x1557, 0x1581, 0x3, 
       0x2, 0x2, 0x2, 0x1558, 0x1556, 0x3, 0x2, 0x2, 0x2, 0x1559, 0x155a, 
       0x7, 0x16c, 0x2, 0x2, 0x155a, 0x1581, 0x5, 0x4c, 0x27, 0x2, 0x155b, 
       0x155c, 0x7, 0x18b, 0x2, 0x2, 0x155c, 0x1561, 0x5, 0xc2, 0x62, 0x2, 
       0x155d, 0x155e, 0x7, 0x26f, 0x2, 0x2, 0x155e, 0x1560, 0x5, 0xc2, 
       0x62, 0x2, 0x155f, 0x155d, 0x3, 0x2, 0x2, 0x2, 0x1560, 0x1563, 0x3, 
       0x2, 0x2, 0x2, 0x1561, 0x155f, 0x3, 0x2, 0x2, 0x2, 0x1561, 0x1562, 
       0x3, 0x2, 0x2, 0x2, 0x1562, 0x1581, 0x3, 0x2, 0x2, 0x2, 0x1563, 0x1561, 
       0x3, 0x2, 0x2, 0x2, 0x1564, 0x1565, 0x7, 0x197, 0x2, 0x2, 0x1565, 
       0x156a, 0x5, 0x186, 0xc4, 0x2, 0x1566, 0x1567, 0x7, 0x26f, 0x2, 0x2, 
       0x1567, 0x1569, 0x5, 0x186, 0xc4, 0x2, 0x1568, 0x1566, 0x3, 0x2, 
       0x2, 0x2, 0x1569, 0x156c, 0x3, 0x2, 0x2, 0x2, 0x156a, 0x1568, 0x3, 
       0x2, 0x2, 0x2, 0x156a, 0x156b, 0x3, 0x2, 0x2, 0x2, 0x156b, 0x1581, 
       0x3, 0x2, 0x2, 0x2, 0x156c, 0x156a, 0x3, 0x2, 0x2, 0x2, 0x156d, 0x156e, 
       0x7, 0xaf, 0x2, 0x2, 0x156e, 0x156f, 0x7, 0x220, 0x2, 0x2, 0x156f, 
       0x1574, 0x5, 0x3a, 0x1e, 0x2, 0x1570, 0x1571, 0x7, 0x26f, 0x2, 0x2, 
       0x1571, 0x1573, 0x5, 0x3a, 0x1e, 0x2, 0x1572, 0x1570, 0x3, 0x2, 0x2, 
       0x2, 0x1573, 0x1576, 0x3, 0x2, 0x2, 0x2, 0x1574, 0x1572, 0x3, 0x2, 
       0x2, 0x2, 0x1574, 0x1575, 0x3, 0x2, 0x2, 0x2, 0x1575, 0x1581, 0x3, 
       0x2, 0x2, 0x2, 0x1576, 0x1574, 0x3, 0x2, 0x2, 0x2, 0x1577, 0x1578, 
       0x7, 0x223, 0x2, 0x2, 0x1578, 0x157d, 0x5, 0x76, 0x3c, 0x2, 0x1579, 
       0x157a, 0x7, 0x26f, 0x2, 0x2, 0x157a, 0x157c, 0x5, 0x76, 0x3c, 0x2, 
       0x157b, 0x1579, 0x3, 0x2, 0x2, 0x2, 0x157c, 0x157f, 0x3, 0x2, 0x2, 
       0x2, 0x157d, 0x157b, 0x3, 0x2, 0x2, 0x2, 0x157d, 0x157e, 0x3, 0x2, 
       0x2, 0x2, 0x157e, 0x1581, 0x3, 0x2, 0x2, 0x2, 0x157f, 0x157d, 0x3, 
       0x2, 0x2, 0x2, 0x1580, 0x151e, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1520, 
       0x3, 0x2, 0x2, 0x2, 0x1580, 0x1529, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1534, 
       0x3, 0x2, 0x2, 0x2, 0x1580, 0x1544, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1546, 
       0x3, 0x2, 0x2, 0x2, 0x1580, 0x154f, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1559, 
       0x3, 0x2, 0x2, 0x2, 0x1580, 0x155b, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1564, 
       0x3, 0x2, 0x2, 0x2, 0x1580, 0x156d, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1577, 
       0x3, 0x2, 0x2, 0x2, 0x1581, 0x347, 0x3, 0x2, 0x2, 0x2, 0x1582, 0x1587, 
       0x5, 0x34a, 0x1a6, 0x2, 0x1583, 0x1584, 0x7, 0x26f, 0x2, 0x2, 0x1584, 
       0x1586, 0x5, 0x34a, 0x1a6, 0x2, 0x1585, 0x1583, 0x3, 0x2, 0x2, 0x2, 
       0x1586, 0x1589, 0x3, 0x2, 0x2, 0x2, 0x1587, 0x1585, 0x3, 0x2, 0x2, 
       0x2, 0x1587, 0x1588, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x349, 0x3, 0x2, 
       0x2, 0x2, 0x1589, 0x1587, 0x3, 0x2, 0x2, 0x2, 0x158a, 0x158b, 0x7, 
       0x29, 0x2, 0x2, 0x158b, 0x158c, 0x5, 0x98, 0x4d, 0x2, 0x158c, 0x34b, 
       0x3, 0x2, 0x2, 0x2, 0x158d, 0x158f, 0x7, 0x109, 0x2, 0x2, 0x158e, 
       0x1590, 0x7, 0x50, 0x2, 0x2, 0x158f, 0x158e, 0x3, 0x2, 0x2, 0x2, 
       0x158f, 0x1590, 0x3, 0x2, 0x2, 0x2, 0x1590, 0x1591, 0x3, 0x2, 0x2, 
       0x2, 0x1591, 0x1595, 0x5, 0x118, 0x8d, 0x2, 0x1592, 0x1594, 0x5, 
       0x118, 0x8d, 0x2, 0x1593, 0x1592, 0x3, 0x2, 0x2, 0x2, 0x1594, 0x1597, 
       0x3, 0x2, 0x2, 0x2, 0x1595, 0x1593, 0x3, 0x2, 0x2, 0x2, 0x1595, 0x1596, 
       0x3, 0x2, 0x2, 0x2, 0x1596, 0x1599, 0x3, 0x2, 0x2, 0x2, 0x1597, 0x1595, 
       0x3, 0x2, 0x2, 0x2, 0x1598, 0x159a, 0x5, 0x34e, 0x1a8, 0x2, 0x1599, 
       0x1598, 0x3, 0x2, 0x2, 0x2, 0x1599, 0x159a, 0x3, 0x2, 0x2, 0x2, 0x159a, 
       0x159c, 0x3, 0x2, 0x2, 0x2, 0x159b, 0x159d, 0x7, 0x128, 0x2, 0x2, 
       0x159c, 0x159b, 0x3, 0x2, 0x2, 0x2, 0x159c, 0x159d, 0x3, 0x2, 0x2, 
       0x2, 0x159d, 0x34d, 0x3, 0x2, 0x2, 0x2, 0x159e, 0x159f, 0x7, 0x30, 
       0x2, 0x2, 0x159f, 0x15a0, 0x5, 0x350, 0x1a9, 0x2, 0x15a0, 0x15a1, 
       0x7, 0x118, 0x2, 0x2, 0x15a1, 0x34f, 0x3, 0x2, 0x2, 0x2, 0x15a2, 
       0x15a4, 0x9, 0x53, 0x2, 0x2, 0x15a3, 0x15a2, 0x3, 0x2, 0x2, 0x2, 
       0x15a3, 0x15a4, 0x3, 0x2, 0x2, 0x2, 0x15a4, 0x15a5, 0x3, 0x2, 0x2, 
       0x2, 0x15a5, 0x15aa, 0x9, 0x54, 0x2, 0x2, 0x15a6, 0x15a7, 0x7, 0x177, 
       0x2, 0x2, 0x15a7, 0x15a8, 0x9, 0x55, 0x2, 0x2, 0x15a8, 0x15aa, 0x7, 
       0xd3, 0x2, 0x2, 0x15a9, 0x15a3, 0x3, 0x2, 0x2, 0x2, 0x15a9, 0x15a6, 
       0x3, 0x2, 0x2, 0x2, 0x15aa, 0x351, 0x3, 0x2, 0x2, 0x2, 0x15ab, 0x15ac, 
       0x7, 0x145, 0x2, 0x2, 0x15ac, 0x15b8, 0x5, 0x41a, 0x20e, 0x2, 0x15ad, 
       0x15ae, 0x7, 0x269, 0x2, 0x2, 0x15ae, 0x15b3, 0x5, 0x3c2, 0x1e2, 
       0x2, 0x15af, 0x15b0, 0x7, 0x26f, 0x2, 0x2, 0x15b0, 0x15b2, 0x5, 0x3c2, 
       0x1e2, 0x2, 0x15b1, 0x15af, 0x3, 0x2, 0x2, 0x2, 0x15b2, 0x15b5, 0x3, 
       0x2, 0x2, 0x2, 0x15b3, 0x15b1, 0x3, 0x2, 0x2, 0x2, 0x15b3, 0x15b4, 
       0x3, 0x2, 0x2, 0x2, 0x15b4, 0x15b6, 0x3, 0x2, 0x2, 0x2, 0x15b5, 0x15b3, 
       0x3, 0x2, 0x2, 0x2, 0x15b6, 0x15b7, 0x7, 0x26a, 0x2, 0x2, 0x15b7, 
       0x15b9, 0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15ad, 0x3, 0x2, 0x2, 0x2, 0x15b8, 
       0x15b9, 0x3, 0x2, 0x2, 0x2, 0x15b9, 0x15ba, 0x3, 0x2, 0x2, 0x2, 0x15ba, 
       0x15bb, 0x7, 0xb, 0x2, 0x2, 0x15bb, 0x15bc, 0x5, 0x8, 0x5, 0x2, 0x15bc, 
       0x353, 0x3, 0x2, 0x2, 0x2, 0x15bd, 0x15be, 0x7, 0x145, 0x2, 0x2, 
       0x15be, 0x15bf, 0x7, 0x192, 0x2, 0x2, 0x15bf, 0x15c0, 0x5, 0x41a, 
       0x20e, 0x2, 0x15c0, 0x355, 0x3, 0x2, 0x2, 0x2, 0x15c1, 0x15c2, 0x7, 
       0x114, 0x2, 0x2, 0x15c2, 0x15c3, 0x7, 0x2f, 0x2, 0x2, 0x15c3, 0x15c5, 
       0x5, 0x7c, 0x3f, 0x2, 0x15c4, 0x15c6, 0x5, 0x2a2, 0x152, 0x2, 0x15c5, 
       0x15c4, 0x3, 0x2, 0x2, 0x2, 0x15c5, 0x15c6, 0x3, 0x2, 0x2, 0x2, 0x15c6, 
       0x15c7, 0x3, 0x2, 0x2, 0x2, 0x15c7, 0x15ca, 0x7, 0x58, 0x2, 0x2, 
       0x15c8, 0x15cb, 0x5, 0x7c, 0x3f, 0x2, 0x15c9, 0x15cb, 0x5, 0x23e, 
       0x120, 0x2, 0x15ca, 0x15c8, 0x3, 0x2, 0x2, 0x2, 0x15ca, 0x15c9, 0x3, 
       0x2, 0x2, 0x2, 0x15cb, 0x15cd, 0x3, 0x2, 0x2, 0x2, 0x15cc, 0x15ce, 
       0x5, 0x2a2, 0x152, 0x2, 0x15cd, 0x15cc, 0x3, 0x2, 0x2, 0x2, 0x15cd, 
       0x15ce, 0x3, 0x2, 0x2, 0x2, 0x15ce, 0x15cf, 0x3, 0x2, 0x2, 0x2, 0x15cf, 
       0x15d1, 0x5, 0x358, 0x1ad, 0x2, 0x15d0, 0x15d2, 0x5, 0x35a, 0x1ae, 
       0x2, 0x15d1, 0x15d0, 0x3, 0x2, 0x2, 0x2, 0x15d1, 0x15d2, 0x3, 0x2, 
       0x2, 0x2, 0x15d2, 0x15d4, 0x3, 0x2, 0x2, 0x2, 0x15d3, 0x15d5, 0x5, 
       0x35e, 0x1b0, 0x2, 0x15d4, 0x15d3, 0x3, 0x2, 0x2, 0x2, 0x15d4, 0x15d5, 
       0x3, 0x2, 0x2, 0x2, 0x15d5, 0x357, 0x3, 0x2, 0x2, 0x2, 0x15d6, 0x15d7, 
       0x7, 0x3f, 0x2, 0x2, 0x15d7, 0x15de, 0x5, 0x3a6, 0x1d4, 0x2, 0x15d8, 
       0x15d9, 0x7, 0x3f, 0x2, 0x2, 0x15d9, 0x15da, 0x7, 0x269, 0x2, 0x2, 
       0x15da, 0x15db, 0x5, 0x3a6, 0x1d4, 0x2, 0x15db, 0x15dc, 0x7, 0x26a, 
       0x2, 0x2, 0x15dc, 0x15de, 0x3, 0x2, 0x2, 0x2, 0x15dd, 0x15d6, 0x3, 
       0x2, 0x2, 0x2, 0x15dd, 0x15d8, 0x3, 0x2, 0x2, 0x2, 0x15de, 0x359, 
       0x3, 0x2, 0x2, 0x2, 0x15df, 0x15e0, 0x7, 0x5a, 0x2, 0x2, 0x15e0, 
       0x15e1, 0x7, 0x10f, 0x2, 0x2, 0x15e1, 0x15e2, 0x7, 0x51, 0x2, 0x2, 
       0x15e2, 0x15e3, 0x7, 0x1a2, 0x2, 0x2, 0x15e3, 0x15e4, 0x7, 0x176, 
       0x2, 0x2, 0x15e4, 0x15e6, 0x5, 0x35c, 0x1af, 0x2, 0x15e5, 0x15e7, 
       0x5, 0x2a6, 0x154, 0x2, 0x15e6, 0x15e5, 0x3, 0x2, 0x2, 0x2, 0x15e6, 
       0x15e7, 0x3, 0x2, 0x2, 0x2, 0x15e7, 0x35b, 0x3, 0x2, 0x2, 0x2, 0x15e8, 
       0x15fa, 0x5, 0x18, 0xd, 0x2, 0x15e9, 0x15ea, 0x5, 0x138, 0x9d, 0x2, 
       0x15ea, 0x15f7, 0x7, 0x280, 0x2, 0x2, 0x15eb, 0x15ec, 0x7, 0x269, 
       0x2, 0x2, 0x15ec, 0x15f1, 0x5, 0x110, 0x89, 0x2, 0x15ed, 0x15ee, 
       0x7, 0x26f, 0x2, 0x2, 0x15ee, 0x15f0, 0x5, 0x110, 0x89, 0x2, 0x15ef, 
       0x15ed, 0x3, 0x2, 0x2, 0x2, 0x15f0, 0x15f3, 0x3, 0x2, 0x2, 0x2, 0x15f1, 
       0x15ef, 0x3, 0x2, 0x2, 0x2, 0x15f1, 0x15f2, 0x3, 0x2, 0x2, 0x2, 0x15f2, 
       0x15f4, 0x3, 0x2, 0x2, 0x2, 0x15f3, 0x15f1, 0x3, 0x2, 0x2, 0x2, 0x15f4, 
       0x15f5, 0x7, 0x26a, 0x2, 0x2, 0x15f5, 0x15f8, 0x3, 0x2, 0x2, 0x2, 
       0x15f6, 0x15f8, 0x5, 0x248, 0x125, 0x2, 0x15f7, 0x15eb, 0x3, 0x2, 
       0x2, 0x2, 0x15f7, 0x15f6, 0x3, 0x2, 0x2, 0x2, 0x15f8, 0x15fa, 0x3, 
       0x2, 0x2, 0x2, 0x15f9, 0x15e8, 0x3, 0x2, 0x2, 0x2, 0x15f9, 0x15e9, 
       0x3, 0x2, 0x2, 0x2, 0x15fa, 0x35d, 0x3, 0x2, 0x2, 0x2, 0x15fb, 0x15fc, 
       0x7, 0x5a, 0x2, 0x2, 0x15fc, 0x15fd, 0x7, 0x3b, 0x2, 0x2, 0x15fd, 
       0x15fe, 0x7, 0x10f, 0x2, 0x2, 0x15fe, 0x15ff, 0x7, 0x51, 0x2, 0x2, 
       0x15ff, 0x1600, 0x7, 0xf8, 0x2, 0x2, 0x1600, 0x1601, 0x5, 0x360, 
       0x1b1, 0x2, 0x1601, 0x35f, 0x3, 0x2, 0x2, 0x2, 0x1602, 0x1603, 0x7, 
       0x1c, 0x2, 0x2, 0x1603, 0x1610, 0x7, 0x1e5, 0x2, 0x2, 0x1604, 0x1609, 
       0x5, 0x362, 0x1b2, 0x2, 0x1605, 0x1606, 0x7, 0x26f, 0x2, 0x2, 0x1606, 
       0x1608, 0x5, 0x362, 0x1b2, 0x2, 0x1607, 0x1605, 0x3, 0x2, 0x2, 0x2, 
       0x1608, 0x160b, 0x3, 0x2, 0x2, 0x2, 0x1609, 0x1607, 0x3, 0x2, 0x2, 
       0x2, 0x1609, 0x160a, 0x3, 0x2, 0x2, 0x2, 0x160a, 0x160d, 0x3, 0x2, 
       0x2, 0x2, 0x160b, 0x1609, 0x3, 0x2, 0x2, 0x2, 0x160c, 0x160e, 0x5, 
       0x2a6, 0x154, 0x2, 0x160d, 0x160c, 0x3, 0x2, 0x2, 0x2, 0x160d, 0x160e, 
       0x3, 0x2, 0x2, 0x2, 0x160e, 0x1610, 0x3, 0x2, 0x2, 0x2, 0x160f, 0x1602, 
       0x3, 0x2, 0x2, 0x2, 0x160f, 0x1604, 0x3, 0x2, 0x2, 0x2, 0x1610, 0x361, 
       0x3, 0x2, 0x2, 0x2, 0x1611, 0x1613, 0x5, 0x138, 0x9d, 0x2, 0x1612, 
       0x1611, 0x3, 0x2, 0x2, 0x2, 0x1612, 0x1613, 0x3, 0x2, 0x2, 0x2, 0x1613, 
       0x1614, 0x3, 0x2, 0x2, 0x2, 0x1614, 0x1615, 0x7, 0x1e5, 0x2, 0x2, 
       0x1615, 0x1616, 0x7, 0x269, 0x2, 0x2, 0x1616, 0x161b, 0x5, 0x110, 
       0x89, 0x2, 0x1617, 0x1618, 0x7, 0x26f, 0x2, 0x2, 0x1618, 0x161a, 
       0x5, 0x110, 0x89, 0x2, 0x1619, 0x1617, 0x3, 0x2, 0x2, 0x2, 0x161a, 
       0x161d, 0x3, 0x2, 0x2, 0x2, 0x161b, 0x1619, 0x3, 0x2, 0x2, 0x2, 0x161b, 
       0x161c, 0x3, 0x2, 0x2, 0x2, 0x161c, 0x161e, 0x3, 0x2, 0x2, 0x2, 0x161d, 
       0x161b, 0x3, 0x2, 0x2, 0x2, 0x161e, 0x161f, 0x7, 0x26a, 0x2, 0x2, 
       0x161f, 0x363, 0x3, 0x2, 0x2, 0x2, 0x1620, 0x1621, 0x7, 0x151, 0x2, 
       0x2, 0x1621, 0x1622, 0x7, 0x134, 0x2, 0x2, 0x1622, 0x1623, 0x7, 0x8c, 
       0x2, 0x2, 0x1623, 0x1628, 0x5, 0x5e, 0x30, 0x2, 0x1624, 0x1625, 0x7, 
       0x26f, 0x2, 0x2, 0x1625, 0x1627, 0x5, 0x5e, 0x30, 0x2, 0x1626, 0x1624, 
       0x3, 0x2, 0x2, 0x2, 0x1627, 0x162a, 0x3, 0x2, 0x2, 0x2, 0x1628, 0x1626, 
       0x3, 0x2, 0x2, 0x2, 0x1628, 0x1629, 0x3, 0x2, 0x2, 0x2, 0x1629, 0x162b, 
       0x3, 0x2, 0x2, 0x2, 0x162a, 0x1628, 0x3, 0x2, 0x2, 0x2, 0x162b, 0x162c, 
       0x7, 0x52, 0x2, 0x2, 0x162c, 0x162d, 0x5, 0x2e, 0x18, 0x2, 0x162d, 
       0x365, 0x3, 0x2, 0x2, 0x2, 0x162e, 0x162f, 0x7, 0x156, 0x2, 0x2, 
       0x162f, 0x1630, 0x5, 0x368, 0x1b5, 0x2, 0x1630, 0x1633, 0x5, 0xb6, 
       0x5c, 0x2, 0x1631, 0x1632, 0x7, 0x139, 0x2, 0x2, 0x1632, 0x1634, 
       0x5, 0xc8, 0x65, 0x2, 0x1633, 0x1631, 0x3, 0x2, 0x2, 0x2, 0x1633, 
       0x1634, 0x3, 0x2, 0x2, 0x2, 0x1634, 0x1636, 0x3, 0x2, 0x2, 0x2, 0x1635, 
       0x1637, 0x7, 0xdd, 0x2, 0x2, 0x1636, 0x1635, 0x3, 0x2, 0x2, 0x2, 
       0x1636, 0x1637, 0x3, 0x2, 0x2, 0x2, 0x1637, 0x367, 0x3, 0x2, 0x2, 
       0x2, 0x1638, 0x1640, 0x7, 0xf0, 0x2, 0x2, 0x1639, 0x163b, 0x7, 0x218, 
       0x2, 0x2, 0x163a, 0x1639, 0x3, 0x2, 0x2, 0x2, 0x163a, 0x163b, 0x3, 
       0x2, 0x2, 0x2, 0x163b, 0x163c, 0x3, 0x2, 0x2, 0x2, 0x163c, 0x1640, 
       0x7, 0x50, 0x2, 0x2, 0x163d, 0x1640, 0x7, 0xad, 0x2, 0x2, 0x163e, 
       0x1640, 0x7, 0x18a, 0x2, 0x2, 0x163f, 0x1638, 0x3, 0x2, 0x2, 0x2, 
       0x163f, 0x163a, 0x3, 0x2, 0x2, 0x2, 0x163f, 0x163d, 0x3, 0x2, 0x2, 
       0x2, 0x163f, 0x163e, 0x3, 0x2, 0x2, 0x2, 0x1640, 0x369, 0x3, 0x2, 
       0x2, 0x2, 0x1641, 0x1643, 0x7, 0x158, 0x2, 0x2, 0x1642, 0x1644, 0x7, 
       0x16b, 0x2, 0x2, 0x1643, 0x1642, 0x3, 0x2, 0x2, 0x2, 0x1643, 0x1644, 
       0x3, 0x2, 0x2, 0x2, 0x1644, 0x1645, 0x3, 0x2, 0x2, 0x2, 0x1645, 0x1646, 
       0x5, 0x36e, 0x1b8, 0x2, 0x1646, 0x36b, 0x3, 0x2, 0x2, 0x2, 0x1647, 
       0x1652, 0x7, 0x15f, 0x2, 0x2, 0x1648, 0x1653, 0x5, 0x36, 0x1c, 0x2, 
       0x1649, 0x1653, 0x7, 0x63, 0x2, 0x2, 0x164a, 0x164b, 0x7, 0x1e1, 
       0x2, 0x2, 0x164b, 0x1653, 0x7, 0x1b7, 0x2, 0x2, 0x164c, 0x164d, 0x7, 
       0x192, 0x2, 0x2, 0x164d, 0x164e, 0x7, 0xfb, 0x2, 0x2, 0x164e, 0x1653, 
       0x7, 0x104, 0x2, 0x2, 0x164f, 0x1650, 0x7, 0x175, 0x2, 0x2, 0x1650, 
       0x1653, 0x7, 0x5e, 0x2, 0x2, 0x1651, 0x1653, 0x7, 0x3, 0x2, 0x2, 
       0x1652, 0x1648, 0x3, 0x2, 0x2, 0x2, 0x1652, 0x1649, 0x3, 0x2, 0x2, 
       0x2, 0x1652, 0x164a, 0x3, 0x2, 0x2, 0x2, 0x1652, 0x164c, 0x3, 0x2, 
       0x2, 0x2, 0x1652, 0x164f, 0x3, 0x2, 0x2, 0x2, 0x1652, 0x1651, 0x3, 
       0x2, 0x2, 0x2, 0x1653, 0x36d, 0x3, 0x2, 0x2, 0x2, 0x1654, 0x1655, 
       0x5, 0x41a, 0x20e, 0x2, 0x1655, 0x36f, 0x3, 0x2, 0x2, 0x2, 0x1656, 
       0x1658, 0x7, 0x166, 0x2, 0x2, 0x1657, 0x1659, 0x5, 0x6c, 0x37, 0x2, 
       0x1658, 0x1657, 0x3, 0x2, 0x2, 0x2, 0x1658, 0x1659, 0x3, 0x2, 0x2, 
       0x2, 0x1659, 0x165a, 0x3, 0x2, 0x2, 0x2, 0x165a, 0x165d, 0x5, 0x33e, 
       0x1a0, 0x2, 0x165b, 0x165c, 0x7, 0x3f, 0x2, 0x2, 0x165c, 0x165e, 
       0x5, 0x346, 0x1a4, 0x2, 0x165d, 0x165b, 0x3, 0x2, 0x2, 0x2, 0x165d, 
       0x165e, 0x3, 0x2, 0x2, 0x2, 0x165e, 0x165f, 0x3, 0x2, 0x2, 0x2, 0x165f, 
       0x1660, 0x7, 0x28, 0x2, 0x2, 0x1660, 0x1662, 0x5, 0x5a, 0x2e, 0x2, 
       0x1661, 0x1663, 0x5, 0x6e, 0x38, 0x2, 0x1662, 0x1661, 0x3, 0x2, 0x2, 
       0x2, 0x1662, 0x1663, 0x3, 0x2, 0x2, 0x2, 0x1663, 0x167d, 0x3, 0x2, 
       0x2, 0x2, 0x1664, 0x1666, 0x7, 0x166, 0x2, 0x2, 0x1665, 0x1667, 0x5, 
       0x372, 0x1ba, 0x2, 0x1666, 0x1665, 0x3, 0x2, 0x2, 0x2, 0x1666, 0x1667, 
       0x3, 0x2, 0x2, 0x2, 0x1667, 0x1668, 0x3, 0x2, 0x2, 0x2, 0x1668, 0x166d, 
       0x5, 0x5e, 0x30, 0x2, 0x1669, 0x166a, 0x7, 0x26f, 0x2, 0x2, 0x166a, 
       0x166c, 0x5, 0x5e, 0x30, 0x2, 0x166b, 0x1669, 0x3, 0x2, 0x2, 0x2, 
       0x166c, 0x166f, 0x3, 0x2, 0x2, 0x2, 0x166d, 0x166b, 0x3, 0x2, 0x2, 
       0x2, 0x166d, 0x166e, 0x3, 0x2, 0x2, 0x2, 0x166e, 0x1670, 0x3, 0x2, 
       0x2, 0x2, 0x166f, 0x166d, 0x3, 0x2, 0x2, 0x2, 0x1670, 0x1671, 0x7, 
       0x28, 0x2, 0x2, 0x1671, 0x1676, 0x5, 0x5e, 0x30, 0x2, 0x1672, 0x1673, 
       0x7, 0x26f, 0x2, 0x2, 0x1673, 0x1675, 0x5, 0x5e, 0x30, 0x2, 0x1674, 
       0x1672, 0x3, 0x2, 0x2, 0x2, 0x1675, 0x1678, 0x3, 0x2, 0x2, 0x2, 0x1676, 
       0x1674, 0x3, 0x2, 0x2, 0x2, 0x1676, 0x1677, 0x3, 0x2, 0x2, 0x2, 0x1677, 
       0x167a, 0x3, 0x2, 0x2, 0x2, 0x1678, 0x1676, 0x3, 0x2, 0x2, 0x2, 0x1679, 
       0x167b, 0x5, 0x6e, 0x38, 0x2, 0x167a, 0x1679, 0x3, 0x2, 0x2, 0x2, 
       0x167a, 0x167b, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x167d, 0x3, 0x2, 0x2, 
       0x2, 0x167c, 0x1656, 0x3, 0x2, 0x2, 0x2, 0x167c, 0x1664, 0x3, 0x2, 
       0x2, 0x2, 0x167d, 0x371, 0x3, 0x2, 0x2, 0x2, 0x167e, 0x167f, 0x7, 
       0x7a, 0x2, 0x2, 0x167f, 0x1680, 0x7, 0x133, 0x2, 0x2, 0x1680, 0x1681, 
       0x7, 0x27, 0x2, 0x2, 0x1681, 0x373, 0x3, 0x2, 0x2, 0x2, 0x1682, 0x1684, 
       0x7, 0x168, 0x2, 0x2, 0x1683, 0x1685, 0x5, 0x10, 0x9, 0x2, 0x1684, 
       0x1683, 0x3, 0x2, 0x2, 0x2, 0x1684, 0x1685, 0x3, 0x2, 0x2, 0x2, 0x1685, 
       0x1693, 0x3, 0x2, 0x2, 0x2, 0x1686, 0x1687, 0x7, 0x168, 0x2, 0x2, 
       0x1687, 0x1688, 0x7, 0x144, 0x2, 0x2, 0x1688, 0x1693, 0x5, 0x41a, 
       0x20e, 0x2, 0x1689, 0x168b, 0x7, 0x168, 0x2, 0x2, 0x168a, 0x168c, 
       0x5, 0x10, 0x9, 0x2, 0x168b, 0x168a, 0x3, 0x2, 0x2, 0x2, 0x168b, 
       0x168c, 0x3, 0x2, 0x2, 0x2, 0x168c, 0x168d, 0x3, 0x2, 0x2, 0x2, 0x168d, 
       0x168f, 0x7, 0x52, 0x2, 0x2, 0x168e, 0x1690, 0x7, 0x16b, 0x2, 0x2, 
       0x168f, 0x168e, 0x3, 0x2, 0x2, 0x2, 0x168f, 0x1690, 0x3, 0x2, 0x2, 
       0x2, 0x1690, 0x1691, 0x3, 0x2, 0x2, 0x2, 0x1691, 0x1693, 0x5, 0x36e, 
       0x1b8, 0x2, 0x1692, 0x1682, 0x3, 0x2, 0x2, 0x2, 0x1692, 0x1686, 0x3, 
       0x2, 0x2, 0x2, 0x1692, 0x1689, 0x3, 0x2, 0x2, 0x2, 0x1693, 0x375, 
       0x3, 0x2, 0x2, 0x2, 0x1694, 0x1695, 0x7, 0x16b, 0x2, 0x2, 0x1695, 
       0x1696, 0x5, 0x36e, 0x1b8, 0x2, 0x1696, 0x377, 0x3, 0x2, 0x2, 0x2, 
       0x1697, 0x169e, 0x5, 0x37a, 0x1be, 0x2, 0x1698, 0x169e, 0x5, 0x382, 
       0x1c2, 0x2, 0x1699, 0x169e, 0x5, 0x384, 0x1c3, 0x2, 0x169a, 0x169e, 
       0x5, 0x388, 0x1c5, 0x2, 0x169b, 0x169e, 0x5, 0x38a, 0x1c6, 0x2, 0x169c, 
       0x169e, 0x5, 0x386, 0x1c4, 0x2, 0x169d, 0x1697, 0x3, 0x2, 0x2, 0x2, 
       0x169d, 0x1698, 0x3, 0x2, 0x2, 0x2, 0x169d, 0x1699, 0x3, 0x2, 0x2, 
       0x2, 0x169d, 0x169a, 0x3, 0x2, 0x2, 0x2, 0x169d, 0x169b, 0x3, 0x2, 
       0x2, 0x2, 0x169d, 0x169c, 0x3, 0x2, 0x2, 0x2, 0x169e, 0x379, 0x3, 
       0x2, 0x2, 0x2, 0x169f, 0x16a6, 0x5, 0x30, 0x19, 0x2, 0x16a0, 0x16a2, 
       0x7, 0x176, 0x2, 0x2, 0x16a1, 0x16a3, 0x5, 0x37c, 0x1bf, 0x2, 0x16a2, 
       0x16a1, 0x3, 0x2, 0x2, 0x2, 0x16a2, 0x16a3, 0x3, 0x2, 0x2, 0x2, 0x16a3, 
       0x16a4, 0x3, 0x2, 0x2, 0x2, 0x16a4, 0x16a6, 0x5, 0x37e, 0x1c0, 0x2, 
       0x16a5, 0x169f, 0x3, 0x2, 0x2, 0x2, 0x16a5, 0x16a0, 0x3, 0x2, 0x2, 
       0x2, 0x16a6, 0x37b, 0x3, 0x2, 0x2, 0x2, 0x16a7, 0x16a8, 0x9, 0x56, 
       0x2, 0x2, 0x16a8, 0x37d, 0x3, 0x2, 0x2, 0x2, 0x16a9, 0x16aa, 0x7, 
       0x1e1, 0x2, 0x2, 0x16aa, 0x16ae, 0x7, 0x1b7, 0x2, 0x2, 0x16ab, 0x16af, 
       0x5, 0x380, 0x1c1, 0x2, 0x16ac, 0x16af, 0x7, 0x107, 0x2, 0x2, 0x16ad, 
       0x16af, 0x7, 0x1c, 0x2, 0x2, 0x16ae, 0x16ab, 0x3, 0x2, 0x2, 0x2, 
       0x16ae, 0x16ac, 0x3, 0x2, 0x2, 0x2, 0x16ae, 0x16ad, 0x3, 0x2, 0x2, 
       0x2, 0x16af, 0x16c0, 0x3, 0x2, 0x2, 0x2, 0x16b0, 0x16b1, 0x7, 0x63, 
       0x2, 0x2, 0x16b1, 0x16b4, 0x9, 0x4, 0x2, 0x2, 0x16b2, 0x16b5, 0x5, 
       0x4e, 0x28, 0x2, 0x16b3, 0x16b5, 0x7, 0x1c, 0x2, 0x2, 0x16b4, 0x16b2, 
       0x3, 0x2, 0x2, 0x2, 0x16b4, 0x16b3, 0x3, 0x2, 0x2, 0x2, 0x16b5, 0x16b9, 
       0x3, 0x2, 0x2, 0x2, 0x16b6, 0x16b7, 0x7, 0x16c, 0x2, 0x2, 0x16b7, 
       0x16b9, 0x7, 0x286, 0x2, 0x2, 0x16b8, 0x16b0, 0x3, 0x2, 0x2, 0x2, 
       0x16b8, 0x16b6, 0x3, 0x2, 0x2, 0x2, 0x16b9, 0x16c0, 0x3, 0x2, 0x2, 
       0x2, 0x16ba, 0x16bb, 0x7, 0x11c, 0x2, 0x2, 0x16bb, 0x16c0, 0x5, 0x112, 
       0x8a, 0x2, 0x16bc, 0x16bd, 0x7, 0x1b4, 0x2, 0x2, 0x16bd, 0x16be, 
       0x7, 0x133, 0x2, 0x2, 0x16be, 0x16c0, 0x9, 0x21, 0x2, 0x2, 0x16bf, 
       0x16a9, 0x3, 0x2, 0x2, 0x2, 0x16bf, 0x16b8, 0x3, 0x2, 0x2, 0x2, 0x16bf, 
       0x16ba, 0x3, 0x2, 0x2, 0x2, 0x16bf, 0x16bc, 0x3, 0x2, 0x2, 0x2, 0x16c0, 
       0x37f, 0x3, 0x2, 0x2, 0x2, 0x16c1, 0x16c2, 0x7, 0x286, 0x2, 0x2, 
       0x16c2, 0x381, 0x3, 0x2, 0x2, 0x2, 0x16c3, 0x16c4, 0x7, 0x176, 0x2, 
       0x2, 0x16c4, 0x16ce, 0x7, 0xa2, 0x2, 0x2, 0x16c5, 0x16cf, 0x7, 0x3, 
       0x2, 0x2, 0x16c6, 0x16cb, 0x5, 0x90, 0x49, 0x2, 0x16c7, 0x16c8, 0x7, 
       0x26f, 0x2, 0x2, 0x16c8, 0x16ca, 0x5, 0x90, 0x49, 0x2, 0x16c9, 0x16c7, 
       0x3, 0x2, 0x2, 0x2, 0x16ca, 0x16cd, 0x3, 0x2, 0x2, 0x2, 0x16cb, 0x16c9, 
       0x3, 0x2, 0x2, 0x2, 0x16cb, 0x16cc, 0x3, 0x2, 0x2, 0x2, 0x16cc, 0x16cf, 
       0x3, 0x2, 0x2, 0x2, 0x16cd, 0x16cb, 0x3, 0x2, 0x2, 0x2, 0x16ce, 0x16c5, 
       0x3, 0x2, 0x2, 0x2, 0x16ce, 0x16c6, 0x3, 0x2, 0x2, 0x2, 0x16cf, 0x16d0, 
       0x3, 0x2, 0x2, 0x2, 0x16d0, 0x16d1, 0x9, 0x27, 0x2, 0x2, 0x16d1, 
       0x383, 0x3, 0x2, 0x2, 0x2, 0x16d2, 0x16d4, 0x7, 0x176, 0x2, 0x2, 
       0x16d3, 0x16d5, 0x5, 0x37c, 0x1bf, 0x2, 0x16d4, 0x16d3, 0x3, 0x2, 
       0x2, 0x2, 0x16d4, 0x16d5, 0x3, 0x2, 0x2, 0x2, 0x16d5, 0x16d6, 0x3, 
       0x2, 0x2, 0x2, 0x16d6, 0x16d7, 0x7, 0x167, 0x2, 0x2, 0x16d7, 0x16d8, 
       0x5, 0x5e, 0x30, 0x2, 0x16d8, 0x16d9, 0x7, 0x13b, 0x2, 0x2, 0x16d9, 
       0x16da, 0x7, 0x286, 0x2, 0x2, 0x16da, 0x385, 0x3, 0x2, 0x2, 0x2, 
       0x16db, 0x16dc, 0x7, 0x15f, 0x2, 0x2, 0x16dc, 0x16e1, 0x7, 0x167, 
       0x2, 0x2, 0x16dd, 0x16de, 0x7, 0x15f, 0x2, 0x2, 0x16de, 0x16df, 0x7, 
       0x175, 0x2, 0x2, 0x16df, 0x16e1, 0x7, 0x5e, 0x2, 0x2, 0x16e0, 0x16db, 
       0x3, 0x2, 0x2, 0x2, 0x16e0, 0x16dd, 0x3, 0x2, 0x2, 0x2, 0x16e1, 0x387, 
       0x3, 0x2, 0x2, 0x2, 0x16e2, 0x16e4, 0x7, 0x176, 0x2, 0x2, 0x16e3, 
       0x16e5, 0x5, 0x37c, 0x1bf, 0x2, 0x16e4, 0x16e3, 0x3, 0x2, 0x2, 0x2, 
       0x16e4, 0x16e5, 0x3, 0x2, 0x2, 0x2, 0x16e5, 0x16e6, 0x3, 0x2, 0x2, 
       0x2, 0x16e6, 0x16e7, 0x7, 0x175, 0x2, 0x2, 0x16e7, 0x16ed, 0x7, 0x5e, 
       0x2, 0x2, 0x16e8, 0x16ee, 0x7, 0x1c, 0x2, 0x2, 0x16e9, 0x16ea, 0x5, 
       0x5e, 0x30, 0x2, 0x16ea, 0x16eb, 0x7, 0x13b, 0x2, 0x2, 0x16eb, 0x16ec, 
       0x7, 0x286, 0x2, 0x2, 0x16ec, 0x16ee, 0x3, 0x2, 0x2, 0x2, 0x16ed, 
       0x16e8, 0x3, 0x2, 0x2, 0x2, 0x16ed, 0x16e9, 0x3, 0x2, 0x2, 0x2, 0x16ee, 
       0x389, 0x3, 0x2, 0x2, 0x2, 0x16ef, 0x16f4, 0x7, 0x176, 0x2, 0x2, 
       0x16f0, 0x16f5, 0x7, 0x107, 0x2, 0x2, 0x16f1, 0x16f2, 0x7, 0x175, 
       0x2, 0x2, 0x16f2, 0x16f3, 0x7, 0x94, 0x2, 0x2, 0x16f3, 0x16f5, 0x7, 
       0xb, 0x2, 0x2, 0x16f4, 0x16f0, 0x3, 0x2, 0x2, 0x2, 0x16f4, 0x16f1, 
       0x3, 0x2, 0x2, 0x2, 0x16f4, 0x16f5, 0x3, 0x2, 0x2, 0x2, 0x16f5, 0x16f6, 
       0x3, 0x2, 0x2, 0x2, 0x16f6, 0x16f7, 0x7, 0x192, 0x2, 0x2, 0x16f7, 
       0x16f8, 0x5, 0x38c, 0x1c7, 0x2, 0x16f8, 0x38b, 0x3, 0x2, 0x2, 0x2, 
       0x16f9, 0x16fe, 0x5, 0x38e, 0x1c8, 0x2, 0x16fa, 0x16fb, 0x7, 0x26f, 
       0x2, 0x2, 0x16fb, 0x16fd, 0x5, 0x38e, 0x1c8, 0x2, 0x16fc, 0x16fa, 
       0x3, 0x2, 0x2, 0x2, 0x16fd, 0x1700, 0x3, 0x2, 0x2, 0x2, 0x16fe, 0x16fc, 
       0x3, 0x2, 0x2, 0x2, 0x16fe, 0x16ff, 0x3, 0x2, 0x2, 0x2, 0x16ff, 0x38d, 
       0x3, 0x2, 0x2, 0x2, 0x1700, 0x16fe, 0x3, 0x2, 0x2, 0x2, 0x1701, 0x1702, 
       0x7, 0xfb, 0x2, 0x2, 0x1702, 0x170a, 0x7, 0x104, 0x2, 0x2, 0x1703, 
       0x1704, 0x7, 0x150, 0x2, 0x2, 0x1704, 0x170b, 0x7, 0x9d, 0x2, 0x2, 
       0x1705, 0x1706, 0x7, 0x150, 0x2, 0x2, 0x1706, 0x170b, 0x7, 0x199, 
       0x2, 0x2, 0x1707, 0x170b, 0x7, 0x173, 0x2, 0x2, 0x1708, 0x1709, 0x7, 
       0x15c, 0x2, 0x2, 0x1709, 0x170b, 0x7, 0x150, 0x2, 0x2, 0x170a, 0x1703, 
       0x3, 0x2, 0x2, 0x2, 0x170a, 0x1705, 0x3, 0x2, 0x2, 0x2, 0x170a, 0x1707, 
       0x3, 0x2, 0x2, 0x2, 0x170a, 0x1708, 0x3, 0x2, 0x2, 0x2, 0x170b, 0x170f, 
       0x3, 0x2, 0x2, 0x2, 0x170c, 0x170d, 0x7, 0x150, 0x2, 0x2, 0x170d, 
       0x170f, 0x9, 0x20, 0x2, 0x2, 0x170e, 0x1701, 0x3, 0x2, 0x2, 0x2, 
       0x170e, 0x170c, 0x3, 0x2, 0x2, 0x2, 0x170f, 0x38f, 0x3, 0x2, 0x2, 
       0x2, 0x1710, 0x171b, 0x7, 0x178, 0x2, 0x2, 0x1711, 0x171c, 0x5, 0x172, 
       0xba, 0x2, 0x1712, 0x171c, 0x7, 0x63, 0x2, 0x2, 0x1713, 0x1714, 0x7, 
       0x1e1, 0x2, 0x2, 0x1714, 0x171c, 0x7, 0x1b7, 0x2, 0x2, 0x1715, 0x1716, 
       0x7, 0x192, 0x2, 0x2, 0x1716, 0x1717, 0x7, 0xfb, 0x2, 0x2, 0x1717, 
       0x171c, 0x7, 0x104, 0x2, 0x2, 0x1718, 0x1719, 0x7, 0x175, 0x2, 0x2, 
       0x1719, 0x171c, 0x7, 0x5e, 0x2, 0x2, 0x171a, 0x171c, 0x7, 0x3, 0x2, 
       0x2, 0x171b, 0x1711, 0x3, 0x2, 0x2, 0x2, 0x171b, 0x1712, 0x3, 0x2, 
       0x2, 0x2, 0x171b, 0x1713, 0x3, 0x2, 0x2, 0x2, 0x171b, 0x1715, 0x3, 
       0x2, 0x2, 0x2, 0x171b, 0x1718, 0x3, 0x2, 0x2, 0x2, 0x171b, 0x171a, 
       0x3, 0x2, 0x2, 0x2, 0x171c, 0x391, 0x3, 0x2, 0x2, 0x2, 0x171d, 0x171f, 
       0x5, 0x394, 0x1cb, 0x2, 0x171e, 0x1720, 0x5, 0x38c, 0x1c7, 0x2, 0x171f, 
       0x171e, 0x3, 0x2, 0x2, 0x2, 0x171f, 0x1720, 0x3, 0x2, 0x2, 0x2, 0x1720, 
       0x393, 0x3, 0x2, 0x2, 0x2, 0x1721, 0x1722, 0x7, 0x17e, 0x2, 0x2, 
       0x1722, 0x1728, 0x7, 0x192, 0x2, 0x2, 0x1723, 0x1725, 0x7, 0x8a, 
       0x2, 0x2, 0x1724, 0x1726, 0x5, 0x10, 0x9, 0x2, 0x1725, 0x1724, 0x3, 
       0x2, 0x2, 0x2, 0x1725, 0x1726, 0x3, 0x2, 0x2, 0x2, 0x1726, 0x1728, 
       0x3, 0x2, 0x2, 0x2, 0x1727, 0x1721, 0x3, 0x2, 0x2, 0x2, 0x1727, 0x1723, 
       0x3, 0x2, 0x2, 0x2, 0x1728, 0x395, 0x3, 0x2, 0x2, 0x2, 0x1729, 0x172b, 
       0x7, 0x194, 0x2, 0x2, 0x172a, 0x172c, 0x7, 0x50, 0x2, 0x2, 0x172b, 
       0x172a, 0x3, 0x2, 0x2, 0x2, 0x172b, 0x172c, 0x3, 0x2, 0x2, 0x2, 0x172c, 
       0x172e, 0x3, 0x2, 0x2, 0x2, 0x172d, 0x172f, 0x7, 0x3e, 0x2, 0x2, 
       0x172e, 0x172d, 0x3, 0x2, 0x2, 0x2, 0x172e, 0x172f, 0x3, 0x2, 0x2, 
       0x2, 0x172f, 0x1730, 0x3, 0x2, 0x2, 0x2, 0x1730, 0x1735, 0x5, 0x118, 
       0x8d, 0x2, 0x1731, 0x1732, 0x7, 0x26f, 0x2, 0x2, 0x1732, 0x1734, 
       0x5, 0x118, 0x8d, 0x2, 0x1733, 0x1731, 0x3, 0x2, 0x2, 0x2, 0x1734, 
       0x1737, 0x3, 0x2, 0x2, 0x2, 0x1735, 0x1733, 0x3, 0x2, 0x2, 0x2, 0x1735, 
       0x1736, 0x3, 0x2, 0x2, 0x2, 0x1736, 0x173a, 0x3, 0x2, 0x2, 0x2, 0x1737, 
       0x1735, 0x3, 0x2, 0x2, 0x2, 0x1738, 0x1739, 0x7, 0xa4, 0x2, 0x2, 
       0x1739, 0x173b, 0x7, 0xe8, 0x2, 0x2, 0x173a, 0x1738, 0x3, 0x2, 0x2, 
       0x2, 0x173a, 0x173b, 0x3, 0x2, 0x2, 0x2, 0x173b, 0x173d, 0x3, 0x2, 
       0x2, 0x2, 0x173c, 0x173e, 0x5, 0x6e, 0x38, 0x2, 0x173d, 0x173c, 0x3, 
       0x2, 0x2, 0x2, 0x173d, 0x173e, 0x3, 0x2, 0x2, 0x2, 0x173e, 0x397, 
       0x3, 0x2, 0x2, 0x2, 0x173f, 0x1741, 0x7, 0x1a3, 0x2, 0x2, 0x1740, 
       0x1742, 0x7, 0x269, 0x2, 0x2, 0x1741, 0x1740, 0x3, 0x2, 0x2, 0x2, 
       0x1741, 0x1742, 0x3, 0x2, 0x2, 0x2, 0x1742, 0x1744, 0x3, 0x2, 0x2, 
       0x2, 0x1743, 0x1745, 0x5, 0x39a, 0x1ce, 0x2, 0x1744, 0x1743, 0x3, 
       0x2, 0x2, 0x2, 0x1744, 0x1745, 0x3, 0x2, 0x2, 0x2, 0x1745, 0x1747, 
       0x3, 0x2, 0x2, 0x2, 0x1746, 0x1748, 0x7, 0x26a, 0x2, 0x2, 0x1747, 
       0x1746, 0x3, 0x2, 0x2, 0x2, 0x1747, 0x1748, 0x3, 0x2, 0x2, 0x2, 0x1748, 
       0x174c, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x174b, 0x5, 0x39e, 0x1d0, 0x2, 
       0x174a, 0x1749, 0x3, 0x2, 0x2, 0x2, 0x174b, 0x174e, 0x3, 0x2, 0x2, 
       0x2, 0x174c, 0x174a, 0x3, 0x2, 0x2, 0x2, 0x174c, 0x174d, 0x3, 0x2, 
       0x2, 0x2, 0x174d, 0x399, 0x3, 0x2, 0x2, 0x2, 0x174e, 0x174c, 0x3, 
       0x2, 0x2, 0x2, 0x174f, 0x1756, 0x5, 0x39c, 0x1cf, 0x2, 0x1750, 0x1752, 
       0x7, 0x26f, 0x2, 0x2, 0x1751, 0x1750, 0x3, 0x2, 0x2, 0x2, 0x1751, 
       0x1752, 0x3, 0x2, 0x2, 0x2, 0x1752, 0x1753, 0x3, 0x2, 0x2, 0x2, 0x1753, 
       0x1755, 0x5, 0x39c, 0x1cf, 0x2, 0x1754, 0x1751, 0x3, 0x2, 0x2, 0x2, 
       0x1755, 0x1758, 0x3, 0x2, 0x2, 0x2, 0x1756, 0x1754, 0x3, 0x2, 0x2, 
       0x2, 0x1756, 0x1757, 0x3, 0x2, 0x2, 0x2, 0x1757, 0x39b, 0x3, 0x2, 
       0x2, 0x2, 0x1758, 0x1756, 0x3, 0x2, 0x2, 0x2, 0x1759, 0x175b, 0x7, 
       0x65, 0x2, 0x2, 0x175a, 0x175c, 0x7, 0x262, 0x2, 0x2, 0x175b, 0x175a, 
       0x3, 0x2, 0x2, 0x2, 0x175b, 0x175c, 0x3, 0x2, 0x2, 0x2, 0x175c, 0x1763, 
       0x3, 0x2, 0x2, 0x2, 0x175d, 0x1763, 0x7, 0x64, 0x2, 0x2, 0x175e, 
       0x1763, 0x7, 0x73, 0x2, 0x2, 0x175f, 0x1763, 0x5, 0x2e6, 0x174, 0x2, 
       0x1760, 0x1763, 0x7, 0x263, 0x2, 0x2, 0x1761, 0x1763, 0x7, 0x264, 
       0x2, 0x2, 0x1762, 0x1759, 0x3, 0x2, 0x2, 0x2, 0x1762, 0x175d, 0x3, 
       0x2, 0x2, 0x2, 0x1762, 0x175e, 0x3, 0x2, 0x2, 0x2, 0x1762, 0x175f, 
       0x3, 0x2, 0x2, 0x2, 0x1762, 0x1760, 0x3, 0x2, 0x2, 0x2, 0x1762, 0x1761, 
       0x3, 0x2, 0x2, 0x2, 0x1763, 0x39d, 0x3, 0x2, 0x2, 0x2, 0x1764, 0x1766, 
       0x5, 0x7c, 0x3f, 0x2, 0x1765, 0x1767, 0x5, 0x138, 0x9d, 0x2, 0x1766, 
       0x1765, 0x3, 0x2, 0x2, 0x2, 0x1766, 0x1767, 0x3, 0x2, 0x2, 0x2, 0x1767, 
       0x176a, 0x3, 0x2, 0x2, 0x2, 0x1768, 0x176a, 0x5, 0x2ea, 0x176, 0x2, 
       0x1769, 0x1764, 0x3, 0x2, 0x2, 0x2, 0x1769, 0x1768, 0x3, 0x2, 0x2, 
       0x2, 0x176a, 0x39f, 0x3, 0x2, 0x2, 0x2, 0x176b, 0x176c, 0x7, 0x1e5, 
       0x2, 0x2, 0x176c, 0x1771, 0x5, 0x3a2, 0x1d2, 0x2, 0x176d, 0x176e, 
       0x7, 0x26f, 0x2, 0x2, 0x176e, 0x1770, 0x5, 0x3a2, 0x1d2, 0x2, 0x176f, 
       0x176d, 0x3, 0x2, 0x2, 0x2, 0x1770, 0x1773, 0x3, 0x2, 0x2, 0x2, 0x1771, 
       0x176f, 0x3, 0x2, 0x2, 0x2, 0x1771, 0x1772, 0x3, 0x2, 0x2, 0x2, 0x1772, 
       0x1775, 0x3, 0x2, 0x2, 0x2, 0x1773, 0x1771, 0x3, 0x2, 0x2, 0x2, 0x1774, 
       0x1776, 0x5, 0x27e, 0x140, 0x2, 0x1775, 0x1774, 0x3, 0x2, 0x2, 0x2, 
       0x1775, 0x1776, 0x3, 0x2, 0x2, 0x2, 0x1776, 0x1778, 0x3, 0x2, 0x2, 
       0x2, 0x1777, 0x1779, 0x5, 0x288, 0x145, 0x2, 0x1778, 0x1777, 0x3, 
       0x2, 0x2, 0x2, 0x1778, 0x1779, 0x3, 0x2, 0x2, 0x2, 0x1779, 0x177b, 
       0x3, 0x2, 0x2, 0x2, 0x177a, 0x177c, 0x5, 0x28a, 0x146, 0x2, 0x177b, 
       0x177a, 0x3, 0x2, 0x2, 0x2, 0x177b, 0x177c, 0x3, 0x2, 0x2, 0x2, 0x177c, 
       0x177e, 0x3, 0x2, 0x2, 0x2, 0x177d, 0x177f, 0x5, 0x28c, 0x147, 0x2, 
       0x177e, 0x177d, 0x3, 0x2, 0x2, 0x2, 0x177e, 0x177f, 0x3, 0x2, 0x2, 
       0x2, 0x177f, 0x3a1, 0x3, 0x2, 0x2, 0x2, 0x1780, 0x1781, 0x7, 0x269, 
       0x2, 0x2, 0x1781, 0x1782, 0x5, 0x3a4, 0x1d3, 0x2, 0x1782, 0x1783, 
       0x7, 0x26a, 0x2, 0x2, 0x1783, 0x3a3, 0x3, 0x2, 0x2, 0x2, 0x1784, 
       0x1789, 0x5, 0x3a6, 0x1d4, 0x2, 0x1785, 0x1786, 0x7, 0x26f, 0x2, 
       0x2, 0x1786, 0x1788, 0x5, 0x3a6, 0x1d4, 0x2, 0x1787, 0x1785, 0x3, 
       0x2, 0x2, 0x2, 0x1788, 0x178b, 0x3, 0x2, 0x2, 0x2, 0x1789, 0x1787, 
       0x3, 0x2, 0x2, 0x2, 0x1789, 0x178a, 0x3, 0x2, 0x2, 0x2, 0x178a, 0x3a5, 
       0x3, 0x2, 0x2, 0x2, 0x178b, 0x1789, 0x3, 0x2, 0x2, 0x2, 0x178c, 0x178d, 
       0x5, 0x3a8, 0x1d5, 0x2, 0x178d, 0x3a7, 0x3, 0x2, 0x2, 0x2, 0x178e, 
       0x178f, 0x8, 0x1d5, 0x1, 0x2, 0x178f, 0x179a, 0x5, 0x3aa, 0x1d6, 
       0x2, 0x1790, 0x1792, 0x7, 0x31, 0x2, 0x2, 0x1791, 0x1793, 0x7, 0x3b, 
       0x2, 0x2, 0x1792, 0x1791, 0x3, 0x2, 0x2, 0x2, 0x1792, 0x1793, 0x3, 
       0x2, 0x2, 0x2, 0x1793, 0x1798, 0x3, 0x2, 0x2, 0x2, 0x1794, 0x1799, 
       0x7, 0x3c, 0x2, 0x2, 0x1795, 0x1796, 0x7, 0x1f, 0x2, 0x2, 0x1796, 
       0x1797, 0x7, 0x28, 0x2, 0x2, 0x1797, 0x1799, 0x5, 0x3a8, 0x1d5, 0x2, 
       0x1798, 0x1794, 0x3, 0x2, 0x2, 0x2, 0x1798, 0x1795, 0x3, 0x2, 0x2, 
       0x2, 0x1799, 0x179b, 0x3, 0x2, 0x2, 0x2, 0x179a, 0x1790, 0x3, 0x2, 
       0x2, 0x2, 0x179a, 0x179b, 0x3, 0x2, 0x2, 0x2, 0x179b, 0x17a2, 0x3, 
       0x2, 0x2, 0x2, 0x179c, 0x179d, 0x5, 0x3aa, 0x1d6, 0x2, 0x179d, 0x179e, 
       0x9, 0x57, 0x2, 0x2, 0x179e, 0x17a2, 0x3, 0x2, 0x2, 0x2, 0x179f, 
       0x17a0, 0x7, 0x3b, 0x2, 0x2, 0x17a0, 0x17a2, 0x5, 0x3a8, 0x1d5, 0x5, 
       0x17a1, 0x178e, 0x3, 0x2, 0x2, 0x2, 0x17a1, 0x179c, 0x3, 0x2, 0x2, 
       0x2, 0x17a1, 0x179f, 0x3, 0x2, 0x2, 0x2, 0x17a2, 0x17ab, 0x3, 0x2, 
       0x2, 0x2, 0x17a3, 0x17a4, 0xc, 0x4, 0x2, 0x2, 0x17a4, 0x17a5, 0x7, 
       0x6, 0x2, 0x2, 0x17a5, 0x17aa, 0x5, 0x3a8, 0x1d5, 0x5, 0x17a6, 0x17a7, 
       0xc, 0x3, 0x2, 0x2, 0x17a7, 0x17a8, 0x7, 0x41, 0x2, 0x2, 0x17a8, 
       0x17aa, 0x5, 0x3a8, 0x1d5, 0x4, 0x17a9, 0x17a3, 0x3, 0x2, 0x2, 0x2, 
       0x17a9, 0x17a6, 0x3, 0x2, 0x2, 0x2, 0x17aa, 0x17ad, 0x3, 0x2, 0x2, 
       0x2, 0x17ab, 0x17a9, 0x3, 0x2, 0x2, 0x2, 0x17ab, 0x17ac, 0x3, 0x2, 
       0x2, 0x2, 0x17ac, 0x3a9, 0x3, 0x2, 0x2, 0x2, 0x17ad, 0x17ab, 0x3, 
       0x2, 0x2, 0x2, 0x17ae, 0x17af, 0x5, 0x3ac, 0x1d7, 0x2, 0x17af, 0x3ab, 
       0x3, 0x2, 0x2, 0x2, 0x17b0, 0x17b1, 0x8, 0x1d7, 0x1, 0x2, 0x17b1, 
       0x17b2, 0x5, 0x3b0, 0x1d9, 0x2, 0x17b2, 0x17b9, 0x3, 0x2, 0x2, 0x2, 
       0x17b3, 0x17b4, 0xc, 0x4, 0x2, 0x2, 0x17b4, 0x17b5, 0x5, 0x3ae, 0x1d8, 
       0x2, 0x17b5, 0x17b6, 0x5, 0x3ac, 0x1d7, 0x5, 0x17b6, 0x17b8, 0x3, 
       0x2, 0x2, 0x2, 0x17b7, 0x17b3, 0x3, 0x2, 0x2, 0x2, 0x17b8, 0x17bb, 
       0x3, 0x2, 0x2, 0x2, 0x17b9, 0x17b7, 0x3, 0x2, 0x2, 0x2, 0x17b9, 0x17ba, 
       0x3, 0x2, 0x2, 0x2, 0x17ba, 0x3ad, 0x3, 0x2, 0x2, 0x2, 0x17bb, 0x17b9, 
       0x3, 0x2, 0x2, 0x2, 0x17bc, 0x17be, 0x9, 0x58, 0x2, 0x2, 0x17bd, 
       0x17bf, 0x7, 0x280, 0x2, 0x2, 0x17be, 0x17bd, 0x3, 0x2, 0x2, 0x2, 
       0x17be, 0x17bf, 0x3, 0x2, 0x2, 0x2, 0x17bf, 0x17c3, 0x3, 0x2, 0x2, 
       0x2, 0x17c0, 0x17c3, 0x7, 0x280, 0x2, 0x2, 0x17c1, 0x17c3, 0x7, 0x275, 
       0x2, 0x2, 0x17c2, 0x17bc, 0x3, 0x2, 0x2, 0x2, 0x17c2, 0x17c0, 0x3, 
       0x2, 0x2, 0x2, 0x17c2, 0x17c1, 0x3, 0x2, 0x2, 0x2, 0x17c3, 0x3af, 
       0x3, 0x2, 0x2, 0x2, 0x17c4, 0x17df, 0x5, 0x3b8, 0x1dd, 0x2, 0x17c5, 
       0x17c7, 0x7, 0x3b, 0x2, 0x2, 0x17c6, 0x17c5, 0x3, 0x2, 0x2, 0x2, 
       0x17c6, 0x17c7, 0x3, 0x2, 0x2, 0x2, 0x17c7, 0x17dd, 0x3, 0x2, 0x2, 
       0x2, 0x17c8, 0x17c9, 0x7, 0x30, 0x2, 0x2, 0x17c9, 0x17de, 0x5, 0x3b2, 
       0x1da, 0x2, 0x17ca, 0x17cf, 0x7, 0x1b8, 0x2, 0x2, 0x17cb, 0x17cd, 
       0x7, 0xa, 0x2, 0x2, 0x17cc, 0x17cb, 0x3, 0x2, 0x2, 0x2, 0x17cc, 0x17cd, 
       0x3, 0x2, 0x2, 0x2, 0x17cd, 0x17d0, 0x3, 0x2, 0x2, 0x2, 0x17ce, 0x17d0, 
       0x7, 0x4e, 0x2, 0x2, 0x17cf, 0x17cc, 0x3, 0x2, 0x2, 0x2, 0x17cf, 
       0x17ce, 0x3, 0x2, 0x2, 0x2, 0x17d0, 0x17d1, 0x3, 0x2, 0x2, 0x2, 0x17d1, 
       0x17de, 0x5, 0x3b4, 0x1db, 0x2, 0x17d2, 0x17d7, 0x7, 0x6b, 0x2, 0x2, 
       0x17d3, 0x17d7, 0x7, 0x66, 0x2, 0x2, 0x17d4, 0x17d5, 0x7, 0x72, 0x2, 
       0x2, 0x17d5, 0x17d7, 0x7, 0x52, 0x2, 0x2, 0x17d6, 0x17d2, 0x3, 0x2, 
       0x2, 0x2, 0x17d6, 0x17d3, 0x3, 0x2, 0x2, 0x2, 0x17d6, 0x17d4, 0x3, 
       0x2, 0x2, 0x2, 0x17d7, 0x17d8, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x17db, 
       0x5, 0x3b8, 0x1dd, 0x2, 0x17d9, 0x17da, 0x7, 0xcd, 0x2, 0x2, 0x17da, 
       0x17dc, 0x5, 0x3a6, 0x1d4, 0x2, 0x17db, 0x17d9, 0x3, 0x2, 0x2, 0x2, 
       0x17db, 0x17dc, 0x3, 0x2, 0x2, 0x2, 0x17dc, 0x17de, 0x3, 0x2, 0x2, 
       0x2, 0x17dd, 0x17c8, 0x3, 0x2, 0x2, 0x2, 0x17dd, 0x17ca, 0x3, 0x2, 
       0x2, 0x2, 0x17dd, 0x17d6, 0x3, 0x2, 0x2, 0x2, 0x17de, 0x17e0, 0x3, 
       0x2, 0x2, 0x2, 0x17df, 0x17c6, 0x3, 0x2, 0x2, 0x2, 0x17df, 0x17e0, 
       0x3, 0x2, 0x2, 0x2, 0x17e0, 0x17e6, 0x3, 0x2, 0x2, 0x2, 0x17e1, 0x17e2, 
       0x5, 0x3b6, 0x1dc, 0x2, 0x17e2, 0x17e3, 0x7, 0x6f, 0x2, 0x2, 0x17e3, 
       0x17e4, 0x5, 0x3b6, 0x1dc, 0x2, 0x17e4, 0x17e6, 0x3, 0x2, 0x2, 0x2, 
       0x17e5, 0x17c4, 0x3, 0x2, 0x2, 0x2, 0x17e5, 0x17e1, 0x3, 0x2, 0x2, 
       0x2, 0x17e6, 0x3b1, 0x3, 0x2, 0x2, 0x2, 0x17e7, 0x17e8, 0x7, 0x269, 
       0x2, 0x2, 0x17e8, 0x17e9, 0x5, 0x23e, 0x120, 0x2, 0x17e9, 0x17ea, 
       0x7, 0x26a, 0x2, 0x2, 0x17ea, 0x17ed, 0x3, 0x2, 0x2, 0x2, 0x17eb, 
       0x17ed, 0x5, 0x3a2, 0x1d2, 0x2, 0x17ec, 0x17e7, 0x3, 0x2, 0x2, 0x2, 
       0x17ec, 0x17eb, 0x3, 0x2, 0x2, 0x2, 0x17ed, 0x3b3, 0x3, 0x2, 0x2, 
       0x2, 0x17ee, 0x17ef, 0x5, 0x3b8, 0x1dd, 0x2, 0x17ef, 0x17f0, 0x7, 
       0x6, 0x2, 0x2, 0x17f0, 0x17f1, 0x5, 0x3b8, 0x1dd, 0x2, 0x17f1, 0x3b5, 
       0x3, 0x2, 0x2, 0x2, 0x17f2, 0x17f3, 0x7, 0x269, 0x2, 0x2, 0x17f3, 
       0x17f8, 0x5, 0x3b8, 0x1dd, 0x2, 0x17f4, 0x17f5, 0x7, 0x26f, 0x2, 
       0x2, 0x17f5, 0x17f7, 0x5, 0x3b8, 0x1dd, 0x2, 0x17f6, 0x17f4, 0x3, 
       0x2, 0x2, 0x2, 0x17f7, 0x17fa, 0x3, 0x2, 0x2, 0x2, 0x17f8, 0x17f6, 
       0x3, 0x2, 0x2, 0x2, 0x17f8, 0x17f9, 0x3, 0x2, 0x2, 0x2, 0x17f9, 0x17fb, 
       0x3, 0x2, 0x2, 0x2, 0x17fa, 0x17f8, 0x3, 0x2, 0x2, 0x2, 0x17fb, 0x17fc, 
       0x7, 0x26a, 0x2, 0x2, 0x17fc, 0x3b7, 0x3, 0x2, 0x2, 0x2, 0x17fd, 
       0x17fe, 0x8, 0x1dd, 0x1, 0x2, 0x17fe, 0x1803, 0x5, 0x3bc, 0x1df, 
       0x2, 0x17ff, 0x1800, 0x7, 0x84, 0x2, 0x2, 0x1800, 0x1801, 0x7, 0x1e1, 
       0x2, 0x2, 0x1801, 0x1802, 0x7, 0x1b7, 0x2, 0x2, 0x1802, 0x1804, 0x5, 
       0x3b8, 0x1dd, 0x2, 0x1803, 0x17ff, 0x3, 0x2, 0x2, 0x2, 0x1803, 0x1804, 
       0x3, 0x2, 0x2, 0x2, 0x1804, 0x1823, 0x3, 0x2, 0x2, 0x2, 0x1805, 0x1806, 
       0xc, 0x9, 0x2, 0x2, 0x1806, 0x1807, 0x7, 0x276, 0x2, 0x2, 0x1807, 
       0x1822, 0x5, 0x3b8, 0x1dd, 0xa, 0x1808, 0x1809, 0xc, 0x8, 0x2, 0x2, 
       0x1809, 0x180a, 0x9, 0x59, 0x2, 0x2, 0x180a, 0x1822, 0x5, 0x3b8, 
       0x1dd, 0x9, 0x180b, 0x180c, 0xc, 0x7, 0x2, 0x2, 0x180c, 0x180d, 0x9, 
       0x5a, 0x2, 0x2, 0x180d, 0x1822, 0x5, 0x3b8, 0x1dd, 0x8, 0x180e, 0x180f, 
       0xc, 0x6, 0x2, 0x2, 0x180f, 0x1810, 0x9, 0x5b, 0x2, 0x2, 0x1810, 
       0x1822, 0x5, 0x3b8, 0x1dd, 0x7, 0x1811, 0x1816, 0xc, 0x5, 0x2, 0x2, 
       0x1812, 0x1813, 0x7, 0x279, 0x2, 0x2, 0x1813, 0x1817, 0x7, 0x279, 
       0x2, 0x2, 0x1814, 0x1815, 0x7, 0x27a, 0x2, 0x2, 0x1815, 0x1817, 0x7, 
       0x27a, 0x2, 0x2, 0x1816, 0x1812, 0x3, 0x2, 0x2, 0x2, 0x1816, 0x1814, 
       0x3, 0x2, 0x2, 0x2, 0x1817, 0x1818, 0x3, 0x2, 0x2, 0x2, 0x1818, 0x1822, 
       0x5, 0x3b8, 0x1dd, 0x6, 0x1819, 0x181a, 0xc, 0x4, 0x2, 0x2, 0x181a, 
       0x181b, 0x5, 0x3ba, 0x1de, 0x2, 0x181b, 0x181c, 0x5, 0x3b8, 0x1dd, 
       0x5, 0x181c, 0x1822, 0x3, 0x2, 0x2, 0x2, 0x181d, 0x181e, 0xc, 0x3, 
       0x2, 0x2, 0x181e, 0x181f, 0x7, 0x27f, 0x2, 0x2, 0x181f, 0x1820, 0x7, 
       0x27f, 0x2, 0x2, 0x1820, 0x1822, 0x5, 0x3b8, 0x1dd, 0x4, 0x1821, 
       0x1805, 0x3, 0x2, 0x2, 0x2, 0x1821, 0x1808, 0x3, 0x2, 0x2, 0x2, 0x1821, 
       0x180b, 0x3, 0x2, 0x2, 0x2, 0x1821, 0x180e, 0x3, 0x2, 0x2, 0x2, 0x1821, 
       0x1811, 0x3, 0x2, 0x2, 0x2, 0x1821, 0x1819, 0x3, 0x2, 0x2, 0x2, 0x1821, 
       0x181d, 0x3, 0x2, 0x2, 0x2, 0x1822, 0x1825, 0x3, 0x2, 0x2, 0x2, 0x1823, 
       0x1821, 0x3, 0x2, 0x2, 0x2, 0x1823, 0x1824, 0x3, 0x2, 0x2, 0x2, 0x1824, 
       0x3b9, 0x3, 0x2, 0x2, 0x2, 0x1825, 0x1823, 0x3, 0x2, 0x2, 0x2, 0x1826, 
       0x1827, 0x7, 0x27d, 0x2, 0x2, 0x1827, 0x184c, 0x7, 0x27d, 0x2, 0x2, 
       0x1828, 0x1829, 0x7, 0x268, 0x2, 0x2, 0x1829, 0x184c, 0x7, 0x268, 
       0x2, 0x2, 0x182a, 0x182b, 0x7, 0x268, 0x2, 0x2, 0x182b, 0x184c, 0x9, 
       0x58, 0x2, 0x2, 0x182c, 0x182d, 0x7, 0x27a, 0x2, 0x2, 0x182d, 0x182e, 
       0x7, 0x26e, 0x2, 0x2, 0x182e, 0x184c, 0x7, 0x279, 0x2, 0x2, 0x182f, 
       0x1830, 0x7, 0x27f, 0x2, 0x2, 0x1830, 0x1831, 0x7, 0x279, 0x2, 0x2, 
       0x1831, 0x184c, 0x7, 0x279, 0x2, 0x2, 0x1832, 0x1833, 0x7, 0x27a, 
       0x2, 0x2, 0x1833, 0x1834, 0x7, 0x27a, 0x2, 0x2, 0x1834, 0x184c, 0x7, 
       0x27f, 0x2, 0x2, 0x1835, 0x1836, 0x7, 0x268, 0x2, 0x2, 0x1836, 0x1837, 
       0x7, 0x27a, 0x2, 0x2, 0x1837, 0x184c, 0x7, 0x27f, 0x2, 0x2, 0x1838, 
       0x1839, 0x7, 0x27f, 0x2, 0x2, 0x1839, 0x183a, 0x7, 0x268, 0x2, 0x2, 
       0x183a, 0x184c, 0x7, 0x279, 0x2, 0x2, 0x183b, 0x183c, 0x9, 0x58, 
       0x2, 0x2, 0x183c, 0x184c, 0x7, 0x276, 0x2, 0x2, 0x183d, 0x183e, 0x7, 
       0x274, 0x2, 0x2, 0x183e, 0x184c, 0x9, 0x5c, 0x2, 0x2, 0x183f, 0x1840, 
       0x7, 0x274, 0x2, 0x2, 0x1840, 0x1841, 0x7, 0x26e, 0x2, 0x2, 0x1841, 
       0x184c, 0x7, 0x27f, 0x2, 0x2, 0x1842, 0x1843, 0x7, 0x274, 0x2, 0x2, 
       0x1843, 0x1844, 0x7, 0x27f, 0x2, 0x2, 0x1844, 0x184c, 0x7, 0x27f, 
       0x2, 0x2, 0x1845, 0x1846, 0x7, 0x271, 0x2, 0x2, 0x1846, 0x184c, 0x7, 
       0x279, 0x2, 0x2, 0x1847, 0x1848, 0x7, 0x27a, 0x2, 0x2, 0x1848, 0x184c, 
       0x7, 0x271, 0x2, 0x2, 0x1849, 0x184a, 0x7, 0x277, 0x2, 0x2, 0x184a, 
       0x184c, 0x7, 0x280, 0x2, 0x2, 0x184b, 0x1826, 0x3, 0x2, 0x2, 0x2, 
       0x184b, 0x1828, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x182a, 0x3, 0x2, 0x2, 
       0x2, 0x184b, 0x182c, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x182f, 0x3, 0x2, 
       0x2, 0x2, 0x184b, 0x1832, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x1835, 0x3, 
       0x2, 0x2, 0x2, 0x184b, 0x1838, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x183b, 
       0x3, 0x2, 0x2, 0x2, 0x184b, 0x183d, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x183f, 
       0x3, 0x2, 0x2, 0x2, 0x184b, 0x1842, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x1845, 
       0x3, 0x2, 0x2, 0x2, 0x184b, 0x1847, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x1849, 
       0x3, 0x2, 0x2, 0x2, 0x184c, 0x3bb, 0x3, 0x2, 0x2, 0x2, 0x184d, 0x184e, 
       0x5, 0x3be, 0x1e0, 0x2, 0x184e, 0x3bd, 0x3, 0x2, 0x2, 0x2, 0x184f, 
       0x1850, 0x8, 0x1e0, 0x1, 0x2, 0x1850, 0x1851, 0x9, 0x5a, 0x2, 0x2, 
       0x1851, 0x186b, 0x5, 0x3be, 0x1e0, 0x12, 0x1852, 0x1853, 0x7, 0x271, 
       0x2, 0x2, 0x1853, 0x186b, 0x5, 0x3be, 0x1e0, 0x11, 0x1854, 0x1855, 
       0x7, 0x27f, 0x2, 0x2, 0x1855, 0x1856, 0x7, 0x270, 0x2, 0x2, 0x1856, 
       0x186b, 0x5, 0x3be, 0x1e0, 0x10, 0x1857, 0x1858, 0x7, 0x27f, 0x2, 
       0x2, 0x1858, 0x1859, 0x7, 0x27f, 0x2, 0x2, 0x1859, 0x185a, 0x7, 0x270, 
       0x2, 0x2, 0x185a, 0x186b, 0x5, 0x3be, 0x1e0, 0xf, 0x185b, 0x185c, 
       0x7, 0x278, 0x2, 0x2, 0x185c, 0x185d, 0x7, 0x278, 0x2, 0x2, 0x185d, 
       0x186b, 0x5, 0x3be, 0x1e0, 0xe, 0x185e, 0x185f, 0x7, 0x277, 0x2, 
       0x2, 0x185f, 0x186b, 0x5, 0x3be, 0x1e0, 0xc, 0x1860, 0x1861, 0x5, 
       0x3c0, 0x1e1, 0x2, 0x1861, 0x1862, 0x5, 0x3be, 0x1e0, 0xb, 0x1862, 
       0x186b, 0x3, 0x2, 0x2, 0x2, 0x1863, 0x186b, 0x5, 0x422, 0x212, 0x2, 
       0x1864, 0x186b, 0x5, 0x3e6, 0x1f4, 0x2, 0x1865, 0x186b, 0x5, 0x428, 
       0x215, 0x2, 0x1866, 0x186b, 0x5, 0x414, 0x20b, 0x2, 0x1867, 0x1868, 
       0x7, 0x8, 0x2, 0x2, 0x1868, 0x186b, 0x5, 0x42a, 0x216, 0x2, 0x1869, 
       0x186b, 0x7, 0x28e, 0x2, 0x2, 0x186a, 0x184f, 0x3, 0x2, 0x2, 0x2, 
       0x186a, 0x1852, 0x3, 0x2, 0x2, 0x2, 0x186a, 0x1854, 0x3, 0x2, 0x2, 
       0x2, 0x186a, 0x1857, 0x3, 0x2, 0x2, 0x2, 0x186a, 0x185b, 0x3, 0x2, 
       0x2, 0x2, 0x186a, 0x185e, 0x3, 0x2, 0x2, 0x2, 0x186a, 0x1860, 0x3, 
       0x2, 0x2, 0x2, 0x186a, 0x1863, 0x3, 0x2, 0x2, 0x2, 0x186a, 0x1864, 
       0x3, 0x2, 0x2, 0x2, 0x186a, 0x1865, 0x3, 0x2, 0x2, 0x2, 0x186a, 0x1866, 
       0x3, 0x2, 0x2, 0x2, 0x186a, 0x1867, 0x3, 0x2, 0x2, 0x2, 0x186a, 0x1869, 
       0x3, 0x2, 0x2, 0x2, 0x186b, 0x1881, 0x3, 0x2, 0x2, 0x2, 0x186c, 0x186d, 
       0xc, 0xd, 0x2, 0x2, 0x186d, 0x1880, 0x7, 0x278, 0x2, 0x2, 0x186e, 
       0x1874, 0xc, 0xa, 0x2, 0x2, 0x186f, 0x1870, 0x7, 0x27e, 0x2, 0x2, 
       0x1870, 0x1872, 0x5, 0x3c2, 0x1e2, 0x2, 0x1871, 0x1873, 0x5, 0x3e4, 
       0x1f3, 0x2, 0x1872, 0x1871, 0x3, 0x2, 0x2, 0x2, 0x1872, 0x1873, 0x3, 
       0x2, 0x2, 0x2, 0x1873, 0x1875, 0x3, 0x2, 0x2, 0x2, 0x1874, 0x186f, 
       0x3, 0x2, 0x2, 0x2, 0x1875, 0x1876, 0x3, 0x2, 0x2, 0x2, 0x1876, 0x1874, 
       0x3, 0x2, 0x2, 0x2, 0x1876, 0x1877, 0x3, 0x2, 0x2, 0x2, 0x1877, 0x1880, 
       0x3, 0x2, 0x2, 0x2, 0x1878, 0x187b, 0xc, 0x3, 0x2, 0x2, 0x1879, 0x187a, 
       0x7, 0x272, 0x2, 0x2, 0x187a, 0x187c, 0x5, 0x3be, 0x1e0, 0x2, 0x187b, 
       0x1879, 0x3, 0x2, 0x2, 0x2, 0x187c, 0x187d, 0x3, 0x2, 0x2, 0x2, 0x187d, 
       0x187b, 0x3, 0x2, 0x2, 0x2, 0x187d, 0x187e, 0x3, 0x2, 0x2, 0x2, 0x187e, 
       0x1880, 0x3, 0x2, 0x2, 0x2, 0x187f, 0x186c, 0x3, 0x2, 0x2, 0x2, 0x187f, 
       0x186e, 0x3, 0x2, 0x2, 0x2, 0x187f, 0x1878, 0x3, 0x2, 0x2, 0x2, 0x1880, 
       0x1883, 0x3, 0x2, 0x2, 0x2, 0x1881, 0x187f, 0x3, 0x2, 0x2, 0x2, 0x1881, 
       0x1882, 0x3, 0x2, 0x2, 0x2, 0x1882, 0x3bf, 0x3, 0x2, 0x2, 0x2, 0x1883, 
       0x1881, 0x3, 0x2, 0x2, 0x2, 0x1884, 0x188d, 0x7, 0x27d, 0x2, 0x2, 
       0x1885, 0x1887, 0x7, 0x271, 0x2, 0x2, 0x1886, 0x1888, 0x7, 0x26e, 
       0x2, 0x2, 0x1887, 0x1886, 0x3, 0x2, 0x2, 0x2, 0x1887, 0x1888, 0x3, 
       0x2, 0x2, 0x2, 0x1888, 0x1889, 0x3, 0x2, 0x2, 0x2, 0x1889, 0x188d, 
       0x7, 0x271, 0x2, 0x2, 0x188a, 0x188b, 0x7, 0x274, 0x2, 0x2, 0x188b, 
       0x188d, 0x9, 0x5d, 0x2, 0x2, 0x188c, 0x1884, 0x3, 0x2, 0x2, 0x2, 
       0x188c, 0x1885, 0x3, 0x2, 0x2, 0x2, 0x188c, 0x188a, 0x3, 0x2, 0x2, 
       0x2, 0x188d, 0x3c1, 0x3, 0x2, 0x2, 0x2, 0x188e, 0x1890, 0x5, 0x3c8, 
       0x1e5, 0x2, 0x188f, 0x1891, 0x5, 0x3c4, 0x1e3, 0x2, 0x1890, 0x188f, 
       0x3, 0x2, 0x2, 0x2, 0x1890, 0x1891, 0x3, 0x2, 0x2, 0x2, 0x1891, 0x18a7, 
       0x3, 0x2, 0x2, 0x2, 0x1892, 0x18a7, 0x5, 0x3ca, 0x1e6, 0x2, 0x1893, 
       0x18a7, 0x5, 0x3cc, 0x1e7, 0x2, 0x1894, 0x1896, 0x5, 0x3ce, 0x1e8, 
       0x2, 0x1895, 0x1897, 0x5, 0x3c4, 0x1e3, 0x2, 0x1896, 0x1895, 0x3, 
       0x2, 0x2, 0x2, 0x1896, 0x1897, 0x3, 0x2, 0x2, 0x2, 0x1897, 0x18a7, 
       0x3, 0x2, 0x2, 0x2, 0x1898, 0x18a7, 0x5, 0x3d0, 0x1e9, 0x2, 0x1899, 
       0x18a7, 0x5, 0x3d2, 0x1ea, 0x2, 0x189a, 0x18a7, 0x5, 0x3d6, 0x1ec, 
       0x2, 0x189b, 0x18a7, 0x5, 0x3d8, 0x1ed, 0x2, 0x189c, 0x189e, 0x5, 
       0x3da, 0x1ee, 0x2, 0x189d, 0x189f, 0x5, 0x3c4, 0x1e3, 0x2, 0x189e, 
       0x189d, 0x3, 0x2, 0x2, 0x2, 0x189e, 0x189f, 0x3, 0x2, 0x2, 0x2, 0x189f, 
       0x18a7, 0x3, 0x2, 0x2, 0x2, 0x18a0, 0x18a7, 0x5, 0x3dc, 0x1ef, 0x2, 
       0x18a1, 0x18a7, 0x5, 0x3de, 0x1f0, 0x2, 0x18a2, 0x18a7, 0x5, 0x3e0, 
       0x1f1, 0x2, 0x18a3, 0x18a7, 0x5, 0x3e2, 0x1f2, 0x2, 0x18a4, 0x18a7, 
       0x5, 0x41a, 0x20e, 0x2, 0x18a5, 0x18a7, 0x5, 0x430, 0x219, 0x2, 0x18a6, 
       0x188e, 0x3, 0x2, 0x2, 0x2, 0x18a6, 0x1892, 0x3, 0x2, 0x2, 0x2, 0x18a6, 
       0x1893, 0x3, 0x2, 0x2, 0x2, 0x18a6, 0x1894, 0x3, 0x2, 0x2, 0x2, 0x18a6, 
       0x1898, 0x3, 0x2, 0x2, 0x2, 0x18a6, 0x1899, 0x3, 0x2, 0x2, 0x2, 0x18a6, 
       0x189a, 0x3, 0x2, 0x2, 0x2, 0x18a6, 0x189b, 0x3, 0x2, 0x2, 0x2, 0x18a6, 
       0x189c, 0x3, 0x2, 0x2, 0x2, 0x18a6, 0x18a0, 0x3, 0x2, 0x2, 0x2, 0x18a6, 
       0x18a1, 0x3, 0x2, 0x2, 0x2, 0x18a6, 0x18a2, 0x3, 0x2, 0x2, 0x2, 0x18a6, 
       0x18a3, 0x3, 0x2, 0x2, 0x2, 0x18a6, 0x18a4, 0x3, 0x2, 0x2, 0x2, 0x18a6, 
       0x18a5, 0x3, 0x2, 0x2, 0x2, 0x18a7, 0x3c3, 0x3, 0x2, 0x2, 0x2, 0x18a8, 
       0x18ab, 0x7, 0x269, 0x2, 0x2, 0x18a9, 0x18ac, 0x5, 0x3c6, 0x1e4, 
       0x2, 0x18aa, 0x18ac, 0x7, 0x26c, 0x2, 0x2, 0x18ab, 0x18a9, 0x3, 0x2, 
       0x2, 0x2, 0x18ab, 0x18aa, 0x3, 0x2, 0x2, 0x2, 0x18ac, 0x18af, 0x3, 
       0x2, 0x2, 0x2, 0x18ad, 0x18ae, 0x7, 0x26f, 0x2, 0x2, 0x18ae, 0x18b0, 
       0x5, 0x3c6, 0x1e4, 0x2, 0x18af, 0x18ad, 0x3, 0x2, 0x2, 0x2, 0x18af, 
       0x18b0, 0x3, 0x2, 0x2, 0x2, 0x18b0, 0x18b1, 0x3, 0x2, 0x2, 0x2, 0x18b1, 
       0x18b8, 0x7, 0x26a, 0x2, 0x2, 0x18b2, 0x18b4, 0x7, 0x281, 0x2, 0x2, 
       0x18b3, 0x18b5, 0x7, 0x28a, 0x2, 0x2, 0x18b4, 0x18b3, 0x3, 0x2, 0x2, 
       0x2, 0x18b4, 0x18b5, 0x3, 0x2, 0x2, 0x2, 0x18b5, 0x18b6, 0x3, 0x2, 
       0x2, 0x2, 0x18b6, 0x18b8, 0x7, 0x282, 0x2, 0x2, 0x18b7, 0x18a8, 0x3, 
       0x2, 0x2, 0x2, 0x18b7, 0x18b2, 0x3, 0x2, 0x2, 0x2, 0x18b8, 0x3c5, 
       0x3, 0x2, 0x2, 0x2, 0x18b9, 0x18ba, 0x9, 0x5e, 0x2, 0x2, 0x18ba, 
       0x3c7, 0x3, 0x2, 0x2, 0x2, 0x18bb, 0x18d0, 0x7, 0x1e2, 0x2, 0x2, 
       0x18bc, 0x18d0, 0x7, 0x1de, 0x2, 0x2, 0x18bd, 0x18d0, 0x7, 0x1ca, 
       0x2, 0x2, 0x18be, 0x18d0, 0x7, 0x1bb, 0x2, 0x2, 0x18bf, 0x18d0, 0x7, 
       0x1b9, 0x2, 0x2, 0x18c0, 0x18d0, 0x7, 0x1c2, 0x2, 0x2, 0x18c1, 0x18d0, 
       0x7, 0x1d3, 0x2, 0x2, 0x18c2, 0x18d0, 0x7, 0x1d2, 0x2, 0x2, 0x18c3, 
       0x18d0, 0x7, 0x1f1, 0x2, 0x2, 0x18c4, 0x18d0, 0x7, 0x1f2, 0x2, 0x2, 
       0x18c5, 0x18d0, 0x7, 0x1f3, 0x2, 0x2, 0x18c6, 0x18d0, 0x7, 0x1da, 
       0x2, 0x2, 0x18c7, 0x18d0, 0x7, 0x1f4, 0x2, 0x2, 0x18c8, 0x18d0, 0x7, 
       0x1c7, 0x2, 0x2, 0x18c9, 0x18d0, 0x7, 0x1f5, 0x2, 0x2, 0x18ca, 0x18cb, 
       0x7, 0xc4, 0x2, 0x2, 0x18cb, 0x18d0, 0x7, 0x1d9, 0x2, 0x2, 0x18cc, 
       0x18d0, 0x7, 0x1ba, 0x2, 0x2, 0x18cd, 0x18d0, 0x7, 0x1c4, 0x2, 0x2, 
       0x18ce, 0x18d0, 0x7, 0x1cc, 0x2, 0x2, 0x18cf, 0x18bb, 0x3, 0x2, 0x2, 
       0x2, 0x18cf, 0x18bc, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18bd, 0x3, 0x2, 
       0x2, 0x2, 0x18cf, 0x18be, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18bf, 0x3, 
       0x2, 0x2, 0x2, 0x18cf, 0x18c0, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c1, 
       0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c2, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c3, 
       0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c4, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c5, 
       0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c6, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c7, 
       0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c8, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18c9, 
       0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18ca, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18cc, 
       0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18cd, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18ce, 
       0x3, 0x2, 0x2, 0x2, 0x18d0, 0x3c9, 0x3, 0x2, 0x2, 0x2, 0x18d1, 0x18d2, 
       0x7, 0x1f6, 0x2, 0x2, 0x18d2, 0x3cb, 0x3, 0x2, 0x2, 0x2, 0x18d3, 
       0x18d4, 0x7, 0x1bd, 0x2, 0x2, 0x18d4, 0x3cd, 0x3, 0x2, 0x2, 0x2, 
       0x18d5, 0x18e0, 0x7, 0x1bf, 0x2, 0x2, 0x18d6, 0x18e0, 0x7, 0x1be, 
       0x2, 0x2, 0x18d7, 0x18e0, 0x7, 0x1cf, 0x2, 0x2, 0x18d8, 0x18e0, 0x7, 
       0x1e7, 0x2, 0x2, 0x18d9, 0x18da, 0x7, 0x1be, 0x2, 0x2, 0x18da, 0x18e0, 
       0x7, 0x1a9, 0x2, 0x2, 0x18db, 0x18e0, 0x7, 0x1e6, 0x2, 0x2, 0x18dc, 
       0x18e0, 0x7, 0x1d4, 0x2, 0x2, 0x18dd, 0x18e0, 0x7, 0x98, 0x2, 0x2, 
       0x18de, 0x18e0, 0x7, 0x190, 0x2, 0x2, 0x18df, 0x18d5, 0x3, 0x2, 0x2, 
       0x2, 0x18df, 0x18d6, 0x3, 0x2, 0x2, 0x2, 0x18df, 0x18d7, 0x3, 0x2, 
       0x2, 0x2, 0x18df, 0x18d8, 0x3, 0x2, 0x2, 0x2, 0x18df, 0x18d9, 0x3, 
       0x2, 0x2, 0x2, 0x18df, 0x18db, 0x3, 0x2, 0x2, 0x2, 0x18df, 0x18dc, 
       0x3, 0x2, 0x2, 0x2, 0x18df, 0x18dd, 0x3, 0x2, 0x2, 0x2, 0x18df, 0x18de, 
       0x3, 0x2, 0x2, 0x2, 0x18e0, 0x3cf, 0x3, 0x2, 0x2, 0x2, 0x18e1, 0x18e2, 
       0x9, 0x5f, 0x2, 0x2, 0x18e2, 0x3d1, 0x3, 0x2, 0x2, 0x2, 0x18e3, 0x18fd, 
       0x7, 0x1c1, 0x2, 0x2, 0x18e4, 0x18e6, 0x9, 0x60, 0x2, 0x2, 0x18e5, 
       0x18e7, 0x5, 0x3c4, 0x1e3, 0x2, 0x18e6, 0x18e5, 0x3, 0x2, 0x2, 0x2, 
       0x18e6, 0x18e7, 0x3, 0x2, 0x2, 0x2, 0x18e7, 0x18ea, 0x3, 0x2, 0x2, 
       0x2, 0x18e8, 0x18e9, 0x9, 0x28, 0x2, 0x2, 0x18e9, 0x18eb, 0x5, 0x3d4, 
       0x1eb, 0x2, 0x18ea, 0x18e8, 0x3, 0x2, 0x2, 0x2, 0x18ea, 0x18eb, 0x3, 
       0x2, 0x2, 0x2, 0x18eb, 0x18fd, 0x3, 0x2, 0x2, 0x2, 0x18ec, 0x18fd, 
       0x7, 0x1dd, 0x2, 0x2, 0x18ed, 0x18ee, 0x7, 0x1cb, 0x2, 0x2, 0x18ee, 
       0x18ef, 0x7, 0xb0, 0x2, 0x2, 0x18ef, 0x18f0, 0x5, 0x3c4, 0x1e3, 0x2, 
       0x18f0, 0x18f1, 0x7, 0x52, 0x2, 0x2, 0x18f1, 0x18f2, 0x7, 0x16f, 
       0x2, 0x2, 0x18f2, 0x18f3, 0x5, 0x3c4, 0x1e3, 0x2, 0x18f3, 0x18fd, 
       0x3, 0x2, 0x2, 0x2, 0x18f4, 0x18f6, 0x7, 0x1cb, 0x2, 0x2, 0x18f5, 
       0x18f7, 0x7, 0x1f8, 0x2, 0x2, 0x18f6, 0x18f5, 0x3, 0x2, 0x2, 0x2, 
       0x18f6, 0x18f7, 0x3, 0x2, 0x2, 0x2, 0x18f7, 0x18f9, 0x3, 0x2, 0x2, 
       0x2, 0x18f8, 0x18fa, 0x5, 0x3c4, 0x1e3, 0x2, 0x18f9, 0x18f8, 0x3, 
       0x2, 0x2, 0x2, 0x18f9, 0x18fa, 0x3, 0x2, 0x2, 0x2, 0x18fa, 0x18fd, 
       0x3, 0x2, 0x2, 0x2, 0x18fb, 0x18fd, 0x7, 0x1f9, 0x2, 0x2, 0x18fc, 
       0x18e3, 0x3, 0x2, 0x2, 0x2, 0x18fc, 0x18e4, 0x3, 0x2, 0x2, 0x2, 0x18fc, 
       0x18ec, 0x3, 0x2, 0x2, 0x2, 0x18fc, 0x18ed, 0x3, 0x2, 0x2, 0x2, 0x18fc, 
       0x18f4, 0x3, 0x2, 0x2, 0x2, 0x18fc, 0x18fb, 0x3, 0x2, 0x2, 0x2, 0x18fd, 
       0x3d3, 0x3, 0x2, 0x2, 0x2, 0x18fe, 0x18ff, 0x7, 0x1e1, 0x2, 0x2, 
       0x18ff, 0x1900, 0x7, 0x1b7, 0x2, 0x2, 0x1900, 0x3d5, 0x3, 0x2, 0x2, 
       0x2, 0x1901, 0x1902, 0x9, 0x61, 0x2, 0x2, 0x1902, 0x3d7, 0x3, 0x2, 
       0x2, 0x2, 0x1903, 0x1904, 0x9, 0x62, 0x2, 0x2, 0x1904, 0x3d9, 0x3, 
       0x2, 0x2, 0x2, 0x1905, 0x1909, 0x7, 0x1bc, 0x2, 0x2, 0x1906, 0x1907, 
       0x7, 0x1bc, 0x2, 0x2, 0x1907, 0x1909, 0x7, 0x1a9, 0x2, 0x2, 0x1908, 
       0x1905, 0x3, 0x2, 0x2, 0x2, 0x1908, 0x1906, 0x3, 0x2, 0x2, 0x2, 0x1909, 
       0x3db, 0x3, 0x2, 0x2, 0x2, 0x190a, 0x190b, 0x9, 0x63, 0x2, 0x2, 0x190b, 
       0x3dd, 0x3, 0x2, 0x2, 0x2, 0x190c, 0x190d, 0x7, 0x205, 0x2, 0x2, 
       0x190d, 0x3df, 0x3, 0x2, 0x2, 0x2, 0x190e, 0x190f, 0x9, 0x64, 0x2, 
       0x2, 0x190f, 0x3e1, 0x3, 0x2, 0x2, 0x2, 0x1910, 0x1911, 0x9, 0x65, 
       0x2, 0x2, 0x1911, 0x3e3, 0x3, 0x2, 0x2, 0x2, 0x1912, 0x1914, 0x7, 
       0x281, 0x2, 0x2, 0x1913, 0x1915, 0x5, 0x3a4, 0x1d3, 0x2, 0x1914, 
       0x1913, 0x3, 0x2, 0x2, 0x2, 0x1914, 0x1915, 0x3, 0x2, 0x2, 0x2, 0x1915, 
       0x1916, 0x3, 0x2, 0x2, 0x2, 0x1916, 0x191d, 0x7, 0x282, 0x2, 0x2, 
       0x1917, 0x1919, 0x7, 0x269, 0x2, 0x2, 0x1918, 0x191a, 0x5, 0x3a4, 
       0x1d3, 0x2, 0x1919, 0x1918, 0x3, 0x2, 0x2, 0x2, 0x1919, 0x191a, 0x3, 
       0x2, 0x2, 0x2, 0x191a, 0x191b, 0x3, 0x2, 0x2, 0x2, 0x191b, 0x191d, 
       0x7, 0x26a, 0x2, 0x2, 0x191c, 0x1912, 0x3, 0x2, 0x2, 0x2, 0x191c, 
       0x1917, 0x3, 0x2, 0x2, 0x2, 0x191d, 0x3e5, 0x3, 0x2, 0x2, 0x2, 0x191e, 
       0x191f, 0x5, 0x40e, 0x208, 0x2, 0x191f, 0x1920, 0x7, 0x21e, 0x2, 
       0x2, 0x1920, 0x1921, 0x7, 0x269, 0x2, 0x2, 0x1921, 0x1922, 0x7, 0x5b, 
       0x2, 0x2, 0x1922, 0x1923, 0x5, 0x3a6, 0x1d4, 0x2, 0x1923, 0x1924, 
       0x7, 0x26a, 0x2, 0x2, 0x1924, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x1925, 
       0x19b4, 0x5, 0x40e, 0x208, 0x2, 0x1926, 0x19b4, 0x7, 0x17, 0x2, 0x2, 
       0x1927, 0x192b, 0x9, 0x66, 0x2, 0x2, 0x1928, 0x1929, 0x7, 0x269, 
       0x2, 0x2, 0x1929, 0x192a, 0x7, 0x28a, 0x2, 0x2, 0x192a, 0x192c, 0x7, 
       0x26a, 0x2, 0x2, 0x192b, 0x1928, 0x3, 0x2, 0x2, 0x2, 0x192b, 0x192c, 
       0x3, 0x2, 0x2, 0x2, 0x192c, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x192d, 0x19b4, 
       0x7, 0x18, 0x2, 0x2, 0x192e, 0x19b4, 0x7, 0x1b, 0x2, 0x2, 0x192f, 
       0x19b4, 0x7, 0x4b, 0x2, 0x2, 0x1930, 0x19b4, 0x7, 0x57, 0x2, 0x2, 
       0x1931, 0x19b4, 0x7, 0x16, 0x2, 0x2, 0x1932, 0x19b4, 0x7, 0x63, 0x2, 
       0x2, 0x1933, 0x1934, 0x7, 0x10, 0x2, 0x2, 0x1934, 0x1935, 0x7, 0x269, 
       0x2, 0x2, 0x1935, 0x1936, 0x5, 0x3a6, 0x1d4, 0x2, 0x1936, 0x1937, 
       0x7, 0xb, 0x2, 0x2, 0x1937, 0x1938, 0x5, 0x3c2, 0x1e2, 0x2, 0x1938, 
       0x1939, 0x7, 0x26a, 0x2, 0x2, 0x1939, 0x19b4, 0x3, 0x2, 0x2, 0x2, 
       0x193a, 0x193b, 0x7, 0x1c6, 0x2, 0x2, 0x193b, 0x193d, 0x7, 0x269, 
       0x2, 0x2, 0x193c, 0x193e, 0x5, 0x3fc, 0x1ff, 0x2, 0x193d, 0x193c, 
       0x3, 0x2, 0x2, 0x2, 0x193d, 0x193e, 0x3, 0x2, 0x2, 0x2, 0x193e, 0x193f, 
       0x3, 0x2, 0x2, 0x2, 0x193f, 0x19b4, 0x7, 0x26a, 0x2, 0x2, 0x1940, 
       0x1941, 0x7, 0x1d7, 0x2, 0x2, 0x1941, 0x1942, 0x7, 0x269, 0x2, 0x2, 
       0x1942, 0x1943, 0x5, 0x400, 0x201, 0x2, 0x1943, 0x1944, 0x7, 0x26a, 
       0x2, 0x2, 0x1944, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x1945, 0x1946, 0x7, 
       0x1d8, 0x2, 0x2, 0x1946, 0x1948, 0x7, 0x269, 0x2, 0x2, 0x1947, 0x1949, 
       0x5, 0x404, 0x203, 0x2, 0x1948, 0x1947, 0x3, 0x2, 0x2, 0x2, 0x1948, 
       0x1949, 0x3, 0x2, 0x2, 0x2, 0x1949, 0x194a, 0x3, 0x2, 0x2, 0x2, 0x194a, 
       0x19b4, 0x7, 0x26a, 0x2, 0x2, 0x194b, 0x194c, 0x7, 0x1df, 0x2, 0x2, 
       0x194c, 0x194e, 0x7, 0x269, 0x2, 0x2, 0x194d, 0x194f, 0x5, 0x406, 
       0x204, 0x2, 0x194e, 0x194d, 0x3, 0x2, 0x2, 0x2, 0x194e, 0x194f, 0x3, 
       0x2, 0x2, 0x2, 0x194f, 0x1950, 0x3, 0x2, 0x2, 0x2, 0x1950, 0x19b4, 
       0x7, 0x26a, 0x2, 0x2, 0x1951, 0x1952, 0x7, 0x1e3, 0x2, 0x2, 0x1952, 
       0x1953, 0x7, 0x269, 0x2, 0x2, 0x1953, 0x1954, 0x5, 0x3a6, 0x1d4, 
       0x2, 0x1954, 0x1955, 0x7, 0xb, 0x2, 0x2, 0x1955, 0x1956, 0x5, 0x3c2, 
       0x1e2, 0x2, 0x1956, 0x1957, 0x7, 0x26a, 0x2, 0x2, 0x1957, 0x19b4, 
       0x3, 0x2, 0x2, 0x2, 0x1958, 0x1959, 0x7, 0x1e4, 0x2, 0x2, 0x1959, 
       0x195b, 0x7, 0x269, 0x2, 0x2, 0x195a, 0x195c, 0x9, 0x67, 0x2, 0x2, 
       0x195b, 0x195a, 0x3, 0x2, 0x2, 0x2, 0x195b, 0x195c, 0x3, 0x2, 0x2, 
       0x2, 0x195c, 0x195d, 0x3, 0x2, 0x2, 0x2, 0x195d, 0x195e, 0x5, 0x40c, 
       0x207, 0x2, 0x195e, 0x195f, 0x7, 0x26a, 0x2, 0x2, 0x195f, 0x19b4, 
       0x3, 0x2, 0x2, 0x2, 0x1960, 0x1961, 0x7, 0x1d1, 0x2, 0x2, 0x1961, 
       0x1962, 0x7, 0x269, 0x2, 0x2, 0x1962, 0x1963, 0x5, 0x3a6, 0x1d4, 
       0x2, 0x1963, 0x1964, 0x7, 0x26f, 0x2, 0x2, 0x1964, 0x1965, 0x5, 0x3a6, 
       0x1d4, 0x2, 0x1965, 0x1966, 0x7, 0x26a, 0x2, 0x2, 0x1966, 0x19b4, 
       0x3, 0x2, 0x2, 0x2, 0x1967, 0x1968, 0x7, 0x1c0, 0x2, 0x2, 0x1968, 
       0x19b4, 0x5, 0x3a2, 0x1d2, 0x2, 0x1969, 0x196a, 0x7, 0x1c8, 0x2, 
       0x2, 0x196a, 0x19b4, 0x5, 0x3a2, 0x1d2, 0x2, 0x196b, 0x196c, 0x7, 
       0x1cd, 0x2, 0x2, 0x196c, 0x19b4, 0x5, 0x3a2, 0x1d2, 0x2, 0x196d, 
       0x196e, 0x7, 0x1c3, 0x2, 0x2, 0x196e, 0x196f, 0x7, 0x269, 0x2, 0x2, 
       0x196f, 0x1970, 0x5, 0x3a6, 0x1d4, 0x2, 0x1970, 0x1971, 0x7, 0x26f, 
       0x2, 0x2, 0x1971, 0x1972, 0x5, 0x3a6, 0x1d4, 0x2, 0x1972, 0x1973, 
       0x7, 0x26a, 0x2, 0x2, 0x1973, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x1974, 
       0x1975, 0x7, 0x1e9, 0x2, 0x2, 0x1975, 0x19b4, 0x5, 0x3a2, 0x1d2, 
       0x2, 0x1976, 0x1977, 0x7, 0x1ea, 0x2, 0x2, 0x1977, 0x1978, 0x7, 0x269, 
       0x2, 0x2, 0x1978, 0x1979, 0x7, 0x11d, 0x2, 0x2, 0x1979, 0x197b, 0x5, 
       0x3e8, 0x1f5, 0x2, 0x197a, 0x197c, 0x5, 0x3ea, 0x1f6, 0x2, 0x197b, 
       0x197a, 0x3, 0x2, 0x2, 0x2, 0x197b, 0x197c, 0x3, 0x2, 0x2, 0x2, 0x197c, 
       0x197d, 0x3, 0x2, 0x2, 0x2, 0x197d, 0x197e, 0x7, 0x26a, 0x2, 0x2, 
       0x197e, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x197f, 0x1980, 0x7, 0x1eb, 0x2, 
       0x2, 0x1980, 0x1981, 0x7, 0x269, 0x2, 0x2, 0x1981, 0x1985, 0x5, 0x3a6, 
       0x1d4, 0x2, 0x1982, 0x1986, 0x5, 0x3fa, 0x1fe, 0x2, 0x1983, 0x1984, 
       0x7, 0x26f, 0x2, 0x2, 0x1984, 0x1986, 0x5, 0x3a6, 0x1d4, 0x2, 0x1985, 
       0x1982, 0x3, 0x2, 0x2, 0x2, 0x1985, 0x1983, 0x3, 0x2, 0x2, 0x2, 0x1986, 
       0x1987, 0x3, 0x2, 0x2, 0x2, 0x1987, 0x1988, 0x7, 0x26a, 0x2, 0x2, 
       0x1988, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x1989, 0x198a, 0x7, 0x1ec, 0x2, 
       0x2, 0x198a, 0x198b, 0x7, 0x269, 0x2, 0x2, 0x198b, 0x198c, 0x5, 0x3f2, 
       0x1fa, 0x2, 0x198c, 0x198d, 0x7, 0x26a, 0x2, 0x2, 0x198d, 0x19b4, 
       0x3, 0x2, 0x2, 0x2, 0x198e, 0x198f, 0x7, 0x1ed, 0x2, 0x2, 0x198f, 
       0x1990, 0x7, 0x269, 0x2, 0x2, 0x1990, 0x1991, 0x5, 0x3f6, 0x1fc, 
       0x2, 0x1991, 0x1993, 0x5, 0x3a6, 0x1d4, 0x2, 0x1992, 0x1994, 0x5, 
       0x3f8, 0x1fd, 0x2, 0x1993, 0x1992, 0x3, 0x2, 0x2, 0x2, 0x1993, 0x1994, 
       0x3, 0x2, 0x2, 0x2, 0x1994, 0x1995, 0x3, 0x2, 0x2, 0x2, 0x1995, 0x1996, 
       0x7, 0x26a, 0x2, 0x2, 0x1996, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x1997, 
       0x1998, 0x7, 0x1ee, 0x2, 0x2, 0x1998, 0x1999, 0x7, 0x269, 0x2, 0x2, 
       0x1999, 0x199a, 0x7, 0x11d, 0x2, 0x2, 0x199a, 0x199d, 0x5, 0x3e8, 
       0x1f5, 0x2, 0x199b, 0x199c, 0x7, 0x26f, 0x2, 0x2, 0x199c, 0x199e, 
       0x5, 0x3a6, 0x1d4, 0x2, 0x199d, 0x199b, 0x3, 0x2, 0x2, 0x2, 0x199d, 
       0x199e, 0x3, 0x2, 0x2, 0x2, 0x199e, 0x199f, 0x3, 0x2, 0x2, 0x2, 0x199f, 
       0x19a0, 0x7, 0x26a, 0x2, 0x2, 0x19a0, 0x19b4, 0x3, 0x2, 0x2, 0x2, 
       0x19a1, 0x19a2, 0x7, 0x1ef, 0x2, 0x2, 0x19a2, 0x19a3, 0x7, 0x269, 
       0x2, 0x2, 0x19a3, 0x19a4, 0x5, 0x3a6, 0x1d4, 0x2, 0x19a4, 0x19a5, 
       0x7, 0x26f, 0x2, 0x2, 0x19a5, 0x19a7, 0x5, 0x3ec, 0x1f7, 0x2, 0x19a6, 
       0x19a8, 0x5, 0x3ee, 0x1f8, 0x2, 0x19a7, 0x19a6, 0x3, 0x2, 0x2, 0x2, 
       0x19a7, 0x19a8, 0x3, 0x2, 0x2, 0x2, 0x19a8, 0x19a9, 0x3, 0x2, 0x2, 
       0x2, 0x19a9, 0x19aa, 0x7, 0x26a, 0x2, 0x2, 0x19aa, 0x19b4, 0x3, 0x2, 
       0x2, 0x2, 0x19ab, 0x19ac, 0x7, 0x1f0, 0x2, 0x2, 0x19ac, 0x19ad, 0x7, 
       0x269, 0x2, 0x2, 0x19ad, 0x19ae, 0x5, 0x3f6, 0x1fc, 0x2, 0x19ae, 
       0x19af, 0x5, 0x3a6, 0x1d4, 0x2, 0x19af, 0x19b0, 0x7, 0xb, 0x2, 0x2, 
       0x19b0, 0x19b1, 0x5, 0x3c2, 0x1e2, 0x2, 0x19b1, 0x19b2, 0x7, 0x26a, 
       0x2, 0x2, 0x19b2, 0x19b4, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x191e, 0x3, 
       0x2, 0x2, 0x2, 0x19b3, 0x1925, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1926, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1927, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x192d, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x192e, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x192f, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1930, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1931, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1932, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1933, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x193a, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1940, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1945, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x194b, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1951, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1958, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1960, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1967, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1969, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x196b, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x196d, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1974, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1976, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x197f, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1989, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x198e, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x1997, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x19a1, 
       0x3, 0x2, 0x2, 0x2, 0x19b3, 0x19ab, 0x3, 0x2, 0x2, 0x2, 0x19b4, 0x3e7, 
       0x3, 0x2, 0x2, 0x2, 0x19b5, 0x19b8, 0x5, 0x41a, 0x20e, 0x2, 0x19b6, 
       0x19b8, 0x7, 0x289, 0x2, 0x2, 0x19b7, 0x19b5, 0x3, 0x2, 0x2, 0x2, 
       0x19b7, 0x19b6, 0x3, 0x2, 0x2, 0x2, 0x19b8, 0x3e9, 0x3, 0x2, 0x2, 
       0x2, 0x19b9, 0x19c0, 0x7, 0x26f, 0x2, 0x2, 0x19ba, 0x19bd, 0x5, 0x3f0, 
       0x1f9, 0x2, 0x19bb, 0x19bc, 0x7, 0x26f, 0x2, 0x2, 0x19bc, 0x19be, 
       0x5, 0x3a4, 0x1d3, 0x2, 0x19bd, 0x19bb, 0x3, 0x2, 0x2, 0x2, 0x19bd, 
       0x19be, 0x3, 0x2, 0x2, 0x2, 0x19be, 0x19c1, 0x3, 0x2, 0x2, 0x2, 0x19bf, 
       0x19c1, 0x5, 0x3a4, 0x1d3, 0x2, 0x19c0, 0x19ba, 0x3, 0x2, 0x2, 0x2, 
       0x19c0, 0x19bf, 0x3, 0x2, 0x2, 0x2, 0x19c1, 0x3eb, 0x3, 0x2, 0x2, 
       0x2, 0x19c2, 0x19c3, 0x7, 0x1aa, 0x2, 0x2, 0x19c3, 0x19c8, 0x5, 0x3a6, 
       0x1d4, 0x2, 0x19c4, 0x19c5, 0x7, 0x1aa, 0x2, 0x2, 0x19c5, 0x19c6, 
       0x7, 0x129, 0x2, 0x2, 0x19c6, 0x19c8, 0x7, 0x1a8, 0x2, 0x2, 0x19c7, 
       0x19c2, 0x3, 0x2, 0x2, 0x2, 0x19c7, 0x19c4, 0x3, 0x2, 0x2, 0x2, 0x19c8, 
       0x3ed, 0x3, 0x2, 0x2, 0x2, 0x19c9, 0x19ca, 0x7, 0x26f, 0x2, 0x2, 
       0x19ca, 0x19d0, 0x7, 0x17d, 0x2, 0x2, 0x19cb, 0x19d1, 0x7, 0x1b6, 
       0x2, 0x2, 0x19cc, 0x19ce, 0x7, 0x129, 0x2, 0x2, 0x19cd, 0x19cf, 0x7, 
       0x1a8, 0x2, 0x2, 0x19ce, 0x19cd, 0x3, 0x2, 0x2, 0x2, 0x19ce, 0x19cf, 
       0x3, 0x2, 0x2, 0x2, 0x19cf, 0x19d1, 0x3, 0x2, 0x2, 0x2, 0x19d0, 0x19cb, 
       0x3, 0x2, 0x2, 0x2, 0x19d0, 0x19cc, 0x3, 0x2, 0x2, 0x2, 0x19d1, 0x3ef, 
       0x3, 0x2, 0x2, 0x2, 0x19d2, 0x19d3, 0x7, 0x1e8, 0x2, 0x2, 0x19d3, 
       0x19d4, 0x7, 0x269, 0x2, 0x2, 0x19d4, 0x19d5, 0x5, 0x3f2, 0x1fa, 
       0x2, 0x19d5, 0x19d6, 0x7, 0x26a, 0x2, 0x2, 0x19d6, 0x3f1, 0x3, 0x2, 
       0x2, 0x2, 0x19d7, 0x19dc, 0x5, 0x3f4, 0x1fb, 0x2, 0x19d8, 0x19d9, 
       0x7, 0x26f, 0x2, 0x2, 0x19d9, 0x19db, 0x5, 0x3f4, 0x1fb, 0x2, 0x19da, 
       0x19d8, 0x3, 0x2, 0x2, 0x2, 0x19db, 0x19de, 0x3, 0x2, 0x2, 0x2, 0x19dc, 
       0x19da, 0x3, 0x2, 0x2, 0x2, 0x19dc, 0x19dd, 0x3, 0x2, 0x2, 0x2, 0x19dd, 
       0x3f3, 0x3, 0x2, 0x2, 0x2, 0x19de, 0x19dc, 0x3, 0x2, 0x2, 0x2, 0x19df, 
       0x19e2, 0x5, 0x3a6, 0x1d4, 0x2, 0x19e0, 0x19e1, 0x7, 0xb, 0x2, 0x2, 
       0x19e1, 0x19e3, 0x5, 0x3e8, 0x1f5, 0x2, 0x19e2, 0x19e0, 0x3, 0x2, 
       0x2, 0x2, 0x19e2, 0x19e3, 0x3, 0x2, 0x2, 0x2, 0x19e3, 0x3f5, 0x3, 
       0x2, 0x2, 0x2, 0x19e4, 0x19e5, 0x9, 0x21, 0x2, 0x2, 0x19e5, 0x3f7, 
       0x3, 0x2, 0x2, 0x2, 0x19e6, 0x19e7, 0x9, 0x68, 0x2, 0x2, 0x19e7, 
       0x19e8, 0x7, 0x1ad, 0x2, 0x2, 0x19e8, 0x3f9, 0x3, 0x2, 0x2, 0x2, 
       0x19e9, 0x19ec, 0x7, 0x13a, 0x2, 0x2, 0x19ea, 0x19eb, 0x7, 0x8c, 
       0x2, 0x2, 0x19eb, 0x19ed, 0x7, 0x155, 0x2, 0x2, 0x19ec, 0x19ea, 0x3, 
       0x2, 0x2, 0x2, 0x19ec, 0x19ed, 0x3, 0x2, 0x2, 0x2, 0x19ed, 0x19ee, 
       0x3, 0x2, 0x2, 0x2, 0x19ee, 0x19f1, 0x5, 0x3a6, 0x1d4, 0x2, 0x19ef, 
       0x19f0, 0x7, 0x8c, 0x2, 0x2, 0x19f0, 0x19f2, 0x7, 0x155, 0x2, 0x2, 
       0x19f1, 0x19ef, 0x3, 0x2, 0x2, 0x2, 0x19f1, 0x19f2, 0x3, 0x2, 0x2, 
       0x2, 0x19f2, 0x3fb, 0x3, 0x2, 0x2, 0x2, 0x19f3, 0x19f4, 0x5, 0x3fe, 
       0x200, 0x2, 0x19f4, 0x19f5, 0x7, 0x28, 0x2, 0x2, 0x19f5, 0x19f6, 
       0x5, 0x3a6, 0x1d4, 0x2, 0x19f6, 0x3fd, 0x3, 0x2, 0x2, 0x2, 0x19f7, 
       0x1a00, 0x5, 0x41a, 0x20e, 0x2, 0x19f8, 0x1a00, 0x7, 0x1b5, 0x2, 
       0x2, 0x19f9, 0x1a00, 0x7, 0x119, 0x2, 0x2, 0x19fa, 0x1a00, 0x7, 0xb0, 
       0x2, 0x2, 0x19fb, 0x1a00, 0x7, 0xe6, 0x2, 0x2, 0x19fc, 0x1a00, 0x7, 
       0x116, 0x2, 0x2, 0x19fd, 0x1a00, 0x7, 0x16f, 0x2, 0x2, 0x19fe, 0x1a00, 
       0x7, 0x288, 0x2, 0x2, 0x19ff, 0x19f7, 0x3, 0x2, 0x2, 0x2, 0x19ff, 
       0x19f8, 0x3, 0x2, 0x2, 0x2, 0x19ff, 0x19f9, 0x3, 0x2, 0x2, 0x2, 0x19ff, 
       0x19fa, 0x3, 0x2, 0x2, 0x2, 0x19ff, 0x19fb, 0x3, 0x2, 0x2, 0x2, 0x19ff, 
       0x19fc, 0x3, 0x2, 0x2, 0x2, 0x19ff, 0x19fd, 0x3, 0x2, 0x2, 0x2, 0x19ff, 
       0x19fe, 0x3, 0x2, 0x2, 0x2, 0x1a00, 0x3ff, 0x3, 0x2, 0x2, 0x2, 0x1a01, 
       0x1a02, 0x5, 0x3a6, 0x1d4, 0x2, 0x1a02, 0x1a03, 0x5, 0x402, 0x202, 
       0x2, 0x1a03, 0x1a05, 0x5, 0x408, 0x205, 0x2, 0x1a04, 0x1a06, 0x5, 
       0x40a, 0x206, 0x2, 0x1a05, 0x1a04, 0x3, 0x2, 0x2, 0x2, 0x1a05, 0x1a06, 
       0x3, 0x2, 0x2, 0x2, 0x1a06, 0x401, 0x3, 0x2, 0x2, 0x2, 0x1a07, 0x1a08, 
       0x7, 0x43, 0x2, 0x2, 0x1a08, 0x1a09, 0x5, 0x3a6, 0x1d4, 0x2, 0x1a09, 
       0x403, 0x3, 0x2, 0x2, 0x2, 0x1a0a, 0x1a0b, 0x5, 0x3a6, 0x1d4, 0x2, 
       0x1a0b, 0x1a0c, 0x7, 0x30, 0x2, 0x2, 0x1a0c, 0x1a0d, 0x5, 0x3a6, 
       0x1d4, 0x2, 0x1a0d, 0x405, 0x3, 0x2, 0x2, 0x2, 0x1a0e, 0x1a0f, 0x5, 
       0x3a6, 0x1d4, 0x2, 0x1a0f, 0x1a10, 0x5, 0x408, 0x205, 0x2, 0x1a10, 
       0x1a11, 0x5, 0x40a, 0x206, 0x2, 0x1a11, 0x1a1e, 0x3, 0x2, 0x2, 0x2, 
       0x1a12, 0x1a13, 0x5, 0x3a6, 0x1d4, 0x2, 0x1a13, 0x1a14, 0x5, 0x40a, 
       0x206, 0x2, 0x1a14, 0x1a15, 0x5, 0x408, 0x205, 0x2, 0x1a15, 0x1a1e, 
       0x3, 0x2, 0x2, 0x2, 0x1a16, 0x1a17, 0x5, 0x3a6, 0x1d4, 0x2, 0x1a17, 
       0x1a18, 0x5, 0x408, 0x205, 0x2, 0x1a18, 0x1a1e, 0x3, 0x2, 0x2, 0x2, 
       0x1a19, 0x1a1a, 0x5, 0x3a6, 0x1d4, 0x2, 0x1a1a, 0x1a1b, 0x5, 0x40a, 
       0x206, 0x2, 0x1a1b, 0x1a1e, 0x3, 0x2, 0x2, 0x2, 0x1a1c, 0x1a1e, 0x5, 
       0x3a4, 0x1d3, 0x2, 0x1a1d, 0x1a0e, 0x3, 0x2, 0x2, 0x2, 0x1a1d, 0x1a12, 
       0x3, 0x2, 0x2, 0x2, 0x1a1d, 0x1a16, 0x3, 0x2, 0x2, 0x2, 0x1a1d, 0x1a19, 
       0x3, 0x2, 0x2, 0x2, 0x1a1d, 0x1a1c, 0x3, 0x2, 0x2, 0x2, 0x1a1e, 0x407, 
       0x3, 0x2, 0x2, 0x2, 0x1a1f, 0x1a20, 0x7, 0x28, 0x2, 0x2, 0x1a20, 
       0x1a21, 0x5, 0x3a6, 0x1d4, 0x2, 0x1a21, 0x409, 0x3, 0x2, 0x2, 0x2, 
       0x1a22, 0x1a23, 0x7, 0x27, 0x2, 0x2, 0x1a23, 0x1a24, 0x5, 0x3a6, 
       0x1d4, 0x2, 0x1a24, 0x40b, 0x3, 0x2, 0x2, 0x2, 0x1a25, 0x1a27, 0x5, 
       0x3a6, 0x1d4, 0x2, 0x1a26, 0x1a25, 0x3, 0x2, 0x2, 0x2, 0x1a26, 0x1a27, 
       0x3, 0x2, 0x2, 0x2, 0x1a27, 0x1a28, 0x3, 0x2, 0x2, 0x2, 0x1a28, 0x1a2a, 
       0x7, 0x28, 0x2, 0x2, 0x1a29, 0x1a26, 0x3, 0x2, 0x2, 0x2, 0x1a29, 
       0x1a2a, 0x3, 0x2, 0x2, 0x2, 0x1a2a, 0x1a2b, 0x3, 0x2, 0x2, 0x2, 0x1a2b, 
       0x1a2c, 0x5, 0x3a4, 0x1d3, 0x2, 0x1a2c, 0x40d, 0x3, 0x2, 0x2, 0x2, 
       0x1a2d, 0x1a2e, 0x5, 0x410, 0x209, 0x2, 0x1a2e, 0x1a2f, 0x5, 0x412, 
       0x20a, 0x2, 0x1a2f, 0x40f, 0x3, 0x2, 0x2, 0x2, 0x1a30, 0x1a35, 0x5, 
       0x41c, 0x20f, 0x2, 0x1a31, 0x1a35, 0x5, 0x430, 0x219, 0x2, 0x1a32, 
       0x1a35, 0x7, 0x286, 0x2, 0x2, 0x1a33, 0x1a35, 0x7, 0x289, 0x2, 0x2, 
       0x1a34, 0x1a30, 0x3, 0x2, 0x2, 0x2, 0x1a34, 0x1a31, 0x3, 0x2, 0x2, 
       0x2, 0x1a34, 0x1a32, 0x3, 0x2, 0x2, 0x2, 0x1a34, 0x1a33, 0x3, 0x2, 
       0x2, 0x2, 0x1a35, 0x411, 0x3, 0x2, 0x2, 0x2, 0x1a36, 0x1a39, 0x7, 
       0x269, 0x2, 0x2, 0x1a37, 0x1a3a, 0x7, 0x26c, 0x2, 0x2, 0x1a38, 0x1a3a, 
       0x5, 0x2ee, 0x178, 0x2, 0x1a39, 0x1a37, 0x3, 0x2, 0x2, 0x2, 0x1a39, 
       0x1a38, 0x3, 0x2, 0x2, 0x2, 0x1a39, 0x1a3a, 0x3, 0x2, 0x2, 0x2, 0x1a3a, 
       0x1a3b, 0x3, 0x2, 0x2, 0x2, 0x1a3b, 0x1a49, 0x7, 0x26a, 0x2, 0x2, 
       0x1a3c, 0x1a3d, 0x7, 0x269, 0x2, 0x2, 0x1a3d, 0x1a3e, 0x7, 0x59, 
       0x2, 0x2, 0x1a3e, 0x1a3f, 0x5, 0x2ee, 0x178, 0x2, 0x1a3f, 0x1a40, 
       0x7, 0x26a, 0x2, 0x2, 0x1a40, 0x1a49, 0x3, 0x2, 0x2, 0x2, 0x1a41, 
       0x1a42, 0x7, 0x269, 0x2, 0x2, 0x1a42, 0x1a43, 0x5, 0x2ee, 0x178, 
       0x2, 0x1a43, 0x1a44, 0x7, 0x26f, 0x2, 0x2, 0x1a44, 0x1a45, 0x7, 0x59, 
       0x2, 0x2, 0x1a45, 0x1a46, 0x5, 0x2f0, 0x179, 0x2, 0x1a46, 0x1a47, 
       0x7, 0x26a, 0x2, 0x2, 0x1a47, 0x1a49, 0x3, 0x2, 0x2, 0x2, 0x1a48, 
       0x1a36, 0x3, 0x2, 0x2, 0x2, 0x1a48, 0x1a3c, 0x3, 0x2, 0x2, 0x2, 0x1a48, 
       0x1a41, 0x3, 0x2, 0x2, 0x2, 0x1a49, 0x413, 0x3, 0x2, 0x2, 0x2, 0x1a4a, 
       0x1a55, 0x5, 0x416, 0x20c, 0x2, 0x1a4b, 0x1a55, 0x5, 0x420, 0x211, 
       0x2, 0x1a4c, 0x1a4d, 0x7, 0x269, 0x2, 0x2, 0x1a4d, 0x1a4e, 0x5, 0x23e, 
       0x120, 0x2, 0x1a4e, 0x1a4f, 0x7, 0x26a, 0x2, 0x2, 0x1a4f, 0x1a55, 
       0x3, 0x2, 0x2, 0x2, 0x1a50, 0x1a51, 0x7, 0x269, 0x2, 0x2, 0x1a51, 
       0x1a52, 0x5, 0x3a4, 0x1d3, 0x2, 0x1a52, 0x1a53, 0x7, 0x26a, 0x2, 
       0x2, 0x1a53, 0x1a55, 0x3, 0x2, 0x2, 0x2, 0x1a54, 0x1a4a, 0x3, 0x2, 
       0x2, 0x2, 0x1a54, 0x1a4b, 0x3, 0x2, 0x2, 0x2, 0x1a54, 0x1a4c, 0x3, 
       0x2, 0x2, 0x2, 0x1a54, 0x1a50, 0x3, 0x2, 0x2, 0x2, 0x1a55, 0x415, 
       0x3, 0x2, 0x2, 0x2, 0x1a56, 0x1a5b, 0x5, 0x418, 0x20d, 0x2, 0x1a57, 
       0x1a58, 0x7, 0x272, 0x2, 0x2, 0x1a58, 0x1a5a, 0x5, 0x418, 0x20d, 
       0x2, 0x1a59, 0x1a57, 0x3, 0x2, 0x2, 0x2, 0x1a5a, 0x1a5d, 0x3, 0x2, 
       0x2, 0x2, 0x1a5b, 0x1a59, 0x3, 0x2, 0x2, 0x2, 0x1a5b, 0x1a5c, 0x3, 
       0x2, 0x2, 0x2, 0x1a5c, 0x417, 0x3, 0x2, 0x2, 0x2, 0x1a5d, 0x1a5b, 
       0x3, 0x2, 0x2, 0x2, 0x1a5e, 0x1a63, 0x5, 0x41a, 0x20e, 0x2, 0x1a5f, 
       0x1a60, 0x7, 0x272, 0x2, 0x2, 0x1a60, 0x1a62, 0x5, 0x41a, 0x20e, 
       0x2, 0x1a61, 0x1a5f, 0x3, 0x2, 0x2, 0x2, 0x1a62, 0x1a65, 0x3, 0x2, 
       0x2, 0x2, 0x1a63, 0x1a61, 0x3, 0x2, 0x2, 0x2, 0x1a63, 0x1a64, 0x3, 
       0x2, 0x2, 0x2, 0x1a64, 0x419, 0x3, 0x2, 0x2, 0x2, 0x1a65, 0x1a63, 
       0x3, 0x2, 0x2, 0x2, 0x1a66, 0x1a6b, 0x5, 0x41c, 0x20f, 0x2, 0x1a67, 
       0x1a6b, 0x5, 0x436, 0x21c, 0x2, 0x1a68, 0x1a6b, 0x7, 0x286, 0x2, 
       0x2, 0x1a69, 0x1a6b, 0x7, 0x289, 0x2, 0x2, 0x1a6a, 0x1a66, 0x3, 0x2, 
       0x2, 0x2, 0x1a6a, 0x1a67, 0x3, 0x2, 0x2, 0x2, 0x1a6a, 0x1a68, 0x3, 
       0x2, 0x2, 0x2, 0x1a6a, 0x1a69, 0x3, 0x2, 0x2, 0x2, 0x1a6b, 0x41b, 
       0x3, 0x2, 0x2, 0x2, 0x1a6c, 0x1a71, 0x7, 0x287, 0x2, 0x2, 0x1a6d, 
       0x1a71, 0x5, 0x42e, 0x218, 0x2, 0x1a6e, 0x1a71, 0x5, 0x432, 0x21a, 
       0x2, 0x1a6f, 0x1a71, 0x5, 0x434, 0x21b, 0x2, 0x1a70, 0x1a6c, 0x3, 
       0x2, 0x2, 0x2, 0x1a70, 0x1a6d, 0x3, 0x2, 0x2, 0x2, 0x1a70, 0x1a6e, 
       0x3, 0x2, 0x2, 0x2, 0x1a70, 0x1a6f, 0x3, 0x2, 0x2, 0x2, 0x1a71, 0x41d, 
       0x3, 0x2, 0x2, 0x2, 0x1a72, 0x1a73, 0x5, 0x41c, 0x20f, 0x2, 0x1a73, 
       0x41f, 0x3, 0x2, 0x2, 0x2, 0x1a74, 0x1a85, 0x5, 0x3c6, 0x1e4, 0x2, 
       0x1a75, 0x1a85, 0x7, 0x286, 0x2, 0x2, 0x1a76, 0x1a85, 0x7, 0x289, 
       0x2, 0x2, 0x1a77, 0x1a78, 0x5, 0x3d2, 0x1ea, 0x2, 0x1a78, 0x1a79, 
       0x7, 0x286, 0x2, 0x2, 0x1a79, 0x1a85, 0x3, 0x2, 0x2, 0x2, 0x1a7a, 
       0x1a7b, 0x5, 0x3d6, 0x1ec, 0x2, 0x1a7b, 0x1a7c, 0x7, 0x286, 0x2, 
       0x2, 0x1a7c, 0x1a85, 0x3, 0x2, 0x2, 0x2, 0x1a7d, 0x1a85, 0x7, 0x28c, 
       0x2, 0x2, 0x1a7e, 0x1a7f, 0x5, 0x3d8, 0x1ed, 0x2, 0x1a7f, 0x1a80, 
       0x7, 0x286, 0x2, 0x2, 0x1a80, 0x1a85, 0x3, 0x2, 0x2, 0x2, 0x1a81, 
       0x1a85, 0x7, 0x3c, 0x2, 0x2, 0x1a82, 0x1a85, 0x7, 0x24, 0x2, 0x2, 
       0x1a83, 0x1a85, 0x7, 0x54, 0x2, 0x2, 0x1a84, 0x1a74, 0x3, 0x2, 0x2, 
       0x2, 0x1a84, 0x1a75, 0x3, 0x2, 0x2, 0x2, 0x1a84, 0x1a76, 0x3, 0x2, 
       0x2, 0x2, 0x1a84, 0x1a77, 0x3, 0x2, 0x2, 0x2, 0x1a84, 0x1a7a, 0x3, 
       0x2, 0x2, 0x2, 0x1a84, 0x1a7d, 0x3, 0x2, 0x2, 0x2, 0x1a84, 0x1a7e, 
       0x3, 0x2, 0x2, 0x2, 0x1a84, 0x1a81, 0x3, 0x2, 0x2, 0x2, 0x1a84, 0x1a82, 
       0x3, 0x2, 0x2, 0x2, 0x1a84, 0x1a83, 0x3, 0x2, 0x2, 0x2, 0x1a85, 0x421, 
       0x3, 0x2, 0x2, 0x2, 0x1a86, 0x1a88, 0x7, 0xf, 0x2, 0x2, 0x1a87, 0x1a89, 
       0x5, 0x424, 0x213, 0x2, 0x1a88, 0x1a87, 0x3, 0x2, 0x2, 0x2, 0x1a89, 
       0x1a8a, 0x3, 0x2, 0x2, 0x2, 0x1a8a, 0x1a88, 0x3, 0x2, 0x2, 0x2, 0x1a8a, 
       0x1a8b, 0x3, 0x2, 0x2, 0x2, 0x1a8b, 0x1a8d, 0x3, 0x2, 0x2, 0x2, 0x1a8c, 
       0x1a8e, 0x5, 0x426, 0x214, 0x2, 0x1a8d, 0x1a8c, 0x3, 0x2, 0x2, 0x2, 
       0x1a8d, 0x1a8e, 0x3, 0x2, 0x2, 0x2, 0x1a8e, 0x1a8f, 0x3, 0x2, 0x2, 
       0x2, 0x1a8f, 0x1a90, 0x7, 0x22, 0x2, 0x2, 0x1a90, 0x423, 0x3, 0x2, 
       0x2, 0x2, 0x1a91, 0x1a92, 0x7, 0x5a, 0x2, 0x2, 0x1a92, 0x1a93, 0x5, 
       0x3a6, 0x1d4, 0x2, 0x1a93, 0x1a94, 0x7, 0x51, 0x2, 0x2, 0x1a94, 0x1a95, 
       0x5, 0x3a6, 0x1d4, 0x2, 0x1a95, 0x425, 0x3, 0x2, 0x2, 0x2, 0x1a96, 
       0x1a97, 0x7, 0x21, 0x2, 0x2, 0x1a97, 0x1a98, 0x5, 0x3a6, 0x1d4, 0x2, 
       0x1a98, 0x427, 0x3, 0x2, 0x2, 0x2, 0x1a99, 0x1aa2, 0x9, 0x69, 0x2, 
       0x2, 0x1a9a, 0x1a9b, 0x7, 0x269, 0x2, 0x2, 0x1a9b, 0x1a9c, 0x5, 0x23e, 
       0x120, 0x2, 0x1a9c, 0x1a9d, 0x7, 0x26a, 0x2, 0x2, 0x1a9d, 0x1aa3, 
       0x3, 0x2, 0x2, 0x2, 0x1a9e, 0x1a9f, 0x7, 0x269, 0x2, 0x2, 0x1a9f, 
       0x1aa0, 0x5, 0x3a6, 0x1d4, 0x2, 0x1aa0, 0x1aa1, 0x7, 0x26a, 0x2, 
       0x2, 0x1aa1, 0x1aa3, 0x3, 0x2, 0x2, 0x2, 0x1aa2, 0x1a9a, 0x3, 0x2, 
       0x2, 0x2, 0x1aa2, 0x1a9e, 0x3, 0x2, 0x2, 0x2, 0x1aa3, 0x429, 0x3, 
       0x2, 0x2, 0x2, 0x1aa4, 0x1aa6, 0x7, 0x281, 0x2, 0x2, 0x1aa5, 0x1aa7, 
       0x5, 0x3a4, 0x1d3, 0x2, 0x1aa6, 0x1aa5, 0x3, 0x2, 0x2, 0x2, 0x1aa6, 
       0x1aa7, 0x3, 0x2, 0x2, 0x2, 0x1aa7, 0x1aa8, 0x3, 0x2, 0x2, 0x2, 0x1aa8, 
       0x1aae, 0x7, 0x282, 0x2, 0x2, 0x1aa9, 0x1aaa, 0x7, 0x281, 0x2, 0x2, 
       0x1aaa, 0x1aab, 0x5, 0x42c, 0x217, 0x2, 0x1aab, 0x1aac, 0x7, 0x282, 
       0x2, 0x2, 0x1aac, 0x1aae, 0x3, 0x2, 0x2, 0x2, 0x1aad, 0x1aa4, 0x3, 
       0x2, 0x2, 0x2, 0x1aad, 0x1aa9, 0x3, 0x2, 0x2, 0x2, 0x1aae, 0x42b, 
       0x3, 0x2, 0x2, 0x2, 0x1aaf, 0x1ab4, 0x5, 0x42a, 0x216, 0x2, 0x1ab0, 
       0x1ab1, 0x7, 0x26f, 0x2, 0x2, 0x1ab1, 0x1ab3, 0x5, 0x42a, 0x216, 
       0x2, 0x1ab2, 0x1ab0, 0x3, 0x2, 0x2, 0x2, 0x1ab3, 0x1ab6, 0x3, 0x2, 
       0x2, 0x2, 0x1ab4, 0x1ab2, 0x3, 0x2, 0x2, 0x2, 0x1ab4, 0x1ab5, 0x3, 
       0x2, 0x2, 0x2, 0x1ab5, 0x42d, 0x3, 0x2, 0x2, 0x2, 0x1ab6, 0x1ab4, 
       0x3, 0x2, 0x2, 0x2, 0x1ab7, 0x1ab8, 0x9, 0x6a, 0x2, 0x2, 0x1ab8, 
       0x42f, 0x3, 0x2, 0x2, 0x2, 0x1ab9, 0x1aba, 0x9, 0x6b, 0x2, 0x2, 0x1aba, 
       0x431, 0x3, 0x2, 0x2, 0x2, 0x1abb, 0x1abc, 0x9, 0x6c, 0x2, 0x2, 0x1abc, 
       0x433, 0x3, 0x2, 0x2, 0x2, 0x1abd, 0x1abe, 0x9, 0x6d, 0x2, 0x2, 0x1abe, 
       0x435, 0x3, 0x2, 0x2, 0x2, 0x1abf, 0x1ac0, 0x9, 0x6e, 0x2, 0x2, 0x1ac0, 
       0x437, 0x3, 0x2, 0x2, 0x2, 0x345, 0x43a, 0x443, 0x448, 0x4ba, 0x4c4, 
       0x4c8, 0x4ca, 0x4d2, 0x4ec, 0x4f1, 0x4f4, 0x4f7, 0x4fc, 0x502, 0x507, 
       0x50e, 0x513, 0x51d, 0x52b, 0x533, 0x537, 0x53d, 0x542, 0x551, 0x555, 
       0x55c, 0x565, 0x56b, 0x56f, 0x579, 0x57e, 0x587, 0x591, 0x59c, 0x5a1, 
       0x5a8, 0x5ac, 0x5b3, 0x5bd, 0x5c1, 0x5c5, 0x5d0, 0x5d7, 0x5de, 0x5e5, 
       0x5eb, 0x5ef, 0x5f6, 0x5fe, 0x601, 0x605, 0x609, 0x610, 0x614, 0x618, 
       0x61f, 0x62c, 0x631, 0x635, 0x63d, 0x648, 0x64f, 0x654, 0x65d, 0x662, 
       0x66b, 0x670, 0x677, 0x67b, 0x680, 0x683, 0x68d, 0x68f, 0x69f, 0x6a8, 
       0x6ac, 0x6af, 0x6b7, 0x6bc, 0x6c0, 0x6c4, 0x6d2, 0x6d6, 0x6e1, 0x6f2, 
       0x6f9, 0x701, 0x70a, 0x714, 0x71a, 0x728, 0x73f, 0x75d, 0x76c, 0x784, 
       0x79d, 0x7a2, 0x7a9, 0x7ad, 0x7af, 0x7cc, 0x7d0, 0x7d5, 0x7de, 0x7e1, 
       0x7e3, 0x7e9, 0x7ed, 0x7fe, 0x800, 0x803, 0x80c, 0x816, 0x81a, 0x823, 
       0x825, 0x82b, 0x832, 0x835, 0x83f, 0x844, 0x84b, 0x854, 0x85b, 0x85f, 
       0x863, 0x878, 0x87e, 0x882, 0x88c, 0x891, 0x898, 0x8a1, 0x8a5, 0x8ab, 
       0x8bf, 0x8cb, 0x8d0, 0x8d7, 0x8df, 0x8e9, 0x8ed, 0x900, 0x909, 0x914, 
       0x917, 0x91b, 0x922, 0x925, 0x929, 0x92d, 0x932, 0x936, 0x939, 0x93e, 
       0x94d, 0x951, 0x954, 0x961, 0x965, 0x96a, 0x96d, 0x974, 0x985, 0x989, 
       0x98d, 0x99b, 0x9a3, 0x9ad, 0x9af, 0x9b5, 0x9b9, 0x9bd, 0x9c4, 0x9cd, 
       0x9d5, 0x9df, 0x9e1, 0x9eb, 0x9f2, 0x9fc, 0xa0f, 0xa16, 0xa19, 0xa26, 
       0xa2d, 0xa33, 0xa3e, 0xa42, 0xa50, 0xa5c, 0xa61, 0xa6b, 0xa70, 0xa74, 
       0xa79, 0xa7f, 0xa8e, 0xa98, 0xa9b, 0xaa0, 0xaa7, 0xab3, 0xac0, 0xace, 
       0xad8, 0xae0, 0xae7, 0xaf1, 0xb00, 0xb12, 0xb1b, 0xb23, 0xb2c, 0xb31, 
       0xb3c, 0xb43, 0xb49, 0xb54, 0xb57, 0xb5c, 0xb60, 0xb67, 0xb6c, 0xb6f, 
       0xb77, 0xb7c, 0xb82, 0xb87, 0xb90, 0xb95, 0xb9d, 0xba3, 0xbb2, 0xbb4, 
       0xbc1, 0xbc6, 0xbce, 0xbd3, 0xbd5, 0xbde, 0xbe3, 0xbf3, 0xbfa, 0xc04, 
       0xc09, 0xc0c, 0xc11, 0xc18, 0xc1b, 0xc22, 0xc2d, 0xc31, 0xc38, 0xc44, 
       0xc4a, 0xc4c, 0xc53, 0xc59, 0xc5c, 0xc62, 0xc64, 0xc6b, 0xc6e, 0xc72, 
       0xc76, 0xc7a, 0xc80, 0xc83, 0xc87, 0xc8c, 0xc94, 0xc98, 0xc9a, 0xca1, 
       0xca5, 0xca8, 0xcad, 0xcb0, 0xcb3, 0xcb6, 0xcba, 0xcc3, 0xcc8, 0xcce, 
       0xcd3, 0xcd7, 0xcdb, 0xcde, 0xce0, 0xceb, 0xcf2, 0xcf7, 0xcfa, 0xcff, 
       0xd07, 0xd0c, 0xd10, 0xd1e, 0xd22, 0xd26, 0xd2c, 0xd31, 0xd33, 0xd36, 
       0xd3c, 0xd40, 0xd45, 0xd4a, 0xd4d, 0xd51, 0xd58, 0xd60, 0xd63, 0xd66, 
       0xd69, 0xd6c, 0xd83, 0xd85, 0xd88, 0xd8d, 0xd91, 0xd99, 0xd9e, 0xda0, 
       0xda4, 0xdad, 0xdb4, 0xdbc, 0xdc2, 0xdc7, 0xdc9, 0xdcc, 0xdd2, 0xdd9, 
       0xde0, 0xdeb, 0xded, 0xdf6, 0xdfa, 0xdff, 0xe06, 0xe0d, 0xe10, 0xe13, 
       0xe16, 0xe1a, 0xe1d, 0xe21, 0xe24, 0xe28, 0xe31, 0xe33, 0xe3a, 0xe41, 
       0xe4e, 0xe52, 0xe58, 0xe5d, 0xe60, 0xe65, 0xe69, 0xe6f, 0xe71, 0xe7a, 
       0xe84, 0xe87, 0xe97, 0xea0, 0xea3, 0xea9, 0xead, 0xeb0, 0xeba, 0xec7, 
       0xece, 0xed2, 0xedc, 0xee0, 0xeea, 0xeed, 0xef1, 0xef4, 0xefb, 0xf02, 
       0xf0a, 0xf11, 0xf1c, 0xf1f, 0xf23, 0xf29, 0xf2c, 0xf32, 0xf39, 0xf3e, 
       0xf44, 0xf49, 0xf4b, 0xf4e, 0xf54, 0xf57, 0xf5c, 0xf60, 0xf6a, 0xf70, 
       0xf75, 0xf7d, 0xf82, 0xf86, 0xf89, 0xf8c, 0xf8f, 0xf92, 0xf97, 0xf9c, 
       0xfa0, 0xfa3, 0xfa6, 0xfa9, 0xfac, 0xfb2, 0xfb4, 0xfbb, 0xfc0, 0xfc3, 
       0xfc7, 0xfca, 0xfd6, 0xfdb, 0xfdf, 0xfe2, 0xfe5, 0xfe8, 0xfec, 0xff1, 
       0xff4, 0xff7, 0xff9, 0xffd, 0x1000, 0x1006, 0x100a, 0x1014, 0x1017, 
       0x101b, 0x1022, 0x1029, 0x102c, 0x103a, 0x103f, 0x104b, 0x1053, 0x105a, 
       0x1067, 0x1078, 0x107b, 0x107f, 0x1086, 0x1094, 0x109f, 0x10a4, 0x10a7, 
       0x10ad, 0x10b0, 0x10bc, 0x10c1, 0x10c6, 0x10d3, 0x10d6, 0x10d9, 0x10dc, 
       0x10e2, 0x10e6, 0x10f0, 0x10f4, 0x10fc, 0x1103, 0x1107, 0x110a, 0x110f, 
       0x1112, 0x1115, 0x111c, 0x1120, 0x1125, 0x1129, 0x112c, 0x112f, 0x1132, 
       0x1135, 0x1139, 0x1140, 0x1145, 0x114f, 0x1155, 0x115d, 0x1166, 0x1169, 
       0x116d, 0x1172, 0x117c, 0x1184, 0x1188, 0x118d, 0x1195, 0x119c, 0x11a0, 
       0x11a5, 0x11aa, 0x11ac, 0x11b1, 0x11b8, 0x11be, 0x11c1, 0x11c8, 0x11cc, 
       0x11d1, 0x11d6, 0x11df, 0x11e9, 0x11ed, 0x11f1, 0x11f5, 0x11fb, 0x1200, 
       0x1208, 0x120f, 0x1216, 0x121c, 0x1223, 0x1227, 0x122c, 0x1230, 0x1237, 
       0x123d, 0x1244, 0x1248, 0x124d, 0x1251, 0x1256, 0x125f, 0x1263, 0x1268, 
       0x126e, 0x1273, 0x127a, 0x127e, 0x1283, 0x128a, 0x128e, 0x1293, 0x129a, 
       0x129e, 0x12a4, 0x12aa, 0x12b2, 0x12b4, 0x12ba, 0x12c1, 0x12ca, 0x12d0, 
       0x12dc, 0x12e2, 0x12ea, 0x12f5, 0x12f8, 0x12fa, 0x12ff, 0x1304, 0x1309, 
       0x130f, 0x1312, 0x1317, 0x131d, 0x131f, 0x1357, 0x1367, 0x136a, 0x1372, 
       0x1377, 0x137e, 0x1383, 0x138a, 0x1390, 0x1397, 0x139b, 0x13a7, 0x13aa, 
       0x13b7, 0x13ba, 0x13c0, 0x13c3, 0x13cb, 0x13d3, 0x13de, 0x13e3, 0x13e8, 
       0x13ef, 0x13fc, 0x1400, 0x1406, 0x140c, 0x1410, 0x1419, 0x141d, 0x1421, 
       0x1425, 0x142c, 0x1430, 0x1434, 0x1439, 0x143d, 0x1442, 0x1447, 0x1452, 
       0x145c, 0x1469, 0x146d, 0x1470, 0x1474, 0x147e, 0x148d, 0x1490, 0x1494, 
       0x149a, 0x14a3, 0x14ab, 0x14af, 0x14b4, 0x14ba, 0x14bf, 0x14c7, 0x14cd, 
       0x14cf, 0x14d3, 0x14dd, 0x14e3, 0x14e7, 0x14eb, 0x14ef, 0x14f6, 0x14fe, 
       0x1500, 0x1507, 0x150f, 0x1516, 0x151e, 0x1526, 0x1531, 0x153b, 0x1544, 
       0x154c, 0x1556, 0x1561, 0x156a, 0x1574, 0x157d, 0x1580, 0x1587, 0x158f, 
       0x1595, 0x1599, 0x159c, 0x15a3, 0x15a9, 0x15b3, 0x15b8, 0x15c5, 0x15ca, 
       0x15cd, 0x15d1, 0x15d4, 0x15dd, 0x15e6, 0x15f1, 0x15f7, 0x15f9, 0x1609, 
       0x160d, 0x160f, 0x1612, 0x161b, 0x1628, 0x1633, 0x1636, 0x163a, 0x163f, 
       0x1643, 0x1652, 0x1658, 0x165d, 0x1662, 0x1666, 0x166d, 0x1676, 0x167a, 
       0x167c, 0x1684, 0x168b, 0x168f, 0x1692, 0x169d, 0x16a2, 0x16a5, 0x16ae, 
       0x16b4, 0x16b8, 0x16bf, 0x16cb, 0x16ce, 0x16d4, 0x16e0, 0x16e4, 0x16ed, 
       0x16f4, 0x16fe, 0x170a, 0x170e, 0x171b, 0x171f, 0x1725, 0x1727, 0x172b, 
       0x172e, 0x1735, 0x173a, 0x173d, 0x1741, 0x1744, 0x1747, 0x174c, 0x1751, 
       0x1756, 0x175b, 0x1762, 0x1766, 0x1769, 0x1771, 0x1775, 0x1778, 0x177b, 
       0x177e, 0x1789, 0x1792, 0x1798, 0x179a, 0x17a1, 0x17a9, 0x17ab, 0x17b9, 
       0x17be, 0x17c2, 0x17c6, 0x17cc, 0x17cf, 0x17d6, 0x17db, 0x17dd, 0x17df, 
       0x17e5, 0x17ec, 0x17f8, 0x1803, 0x1816, 0x1821, 0x1823, 0x184b, 0x186a, 
       0x1872, 0x1876, 0x187d, 0x187f, 0x1881, 0x1887, 0x188c, 0x1890, 0x1896, 
       0x189e, 0x18a6, 0x18ab, 0x18af, 0x18b4, 0x18b7, 0x18cf, 0x18df, 0x18e6, 
       0x18ea, 0x18f6, 0x18f9, 0x18fc, 0x1908, 0x1914, 0x1919, 0x191c, 0x192b, 
       0x193d, 0x1948, 0x194e, 0x195b, 0x197b, 0x1985, 0x1993, 0x199d, 0x19a7, 
       0x19b3, 0x19b7, 0x19bd, 0x19c0, 0x19c7, 0x19ce, 0x19d0, 0x19dc, 0x19e2, 
       0x19ec, 0x19f1, 0x19ff, 0x1a05, 0x1a1d, 0x1a26, 0x1a29, 0x1a34, 0x1a39, 
       0x1a48, 0x1a54, 0x1a5b, 0x1a63, 0x1a6a, 0x1a70, 0x1a84, 0x1a8a, 0x1a8d, 
       0x1aa2, 0x1aa6, 0x1aad, 0x1ab4, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment2,
    serializedATNSegment2 + sizeof(serializedATNSegment2) / sizeof(serializedATNSegment2[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

Gauss200Parser::Initializer Gauss200Parser::_init;
