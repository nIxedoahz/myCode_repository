
// Generated from MySQLParser.g4 by ANTLR 4.7.1


#include "MySQLParserListener.h"
#include "MySQLParserVisitor.h"

#include "MySQLParser.h"


using namespace antlrcpp;
using namespace antlr4;

MySQLParser::MySQLParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

MySQLParser::~MySQLParser() {
  delete _interpreter;
}

std::string MySQLParser::getGrammarFileName() const {
  return "MySQLParser.g4";
}

const std::vector<std::string>& MySQLParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& MySQLParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- RootContext ------------------------------------------------------------------

MySQLParser::RootContext::RootContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RootContext::EOF() {
  return getToken(MySQLParser::EOF, 0);
}

MySQLParser::SqlStatementsContext* MySQLParser::RootContext::sqlStatements() {
  return getRuleContext<MySQLParser::SqlStatementsContext>(0);
}

tree::TerminalNode* MySQLParser::RootContext::MINUSMINUS() {
  return getToken(MySQLParser::MINUSMINUS, 0);
}


size_t MySQLParser::RootContext::getRuleIndex() const {
  return MySQLParser::RuleRoot;
}

void MySQLParser::RootContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoot(this);
}

void MySQLParser::RootContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoot(this);
}


antlrcpp::Any MySQLParser::RootContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRoot(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RootContext* MySQLParser::root() {
  RootContext *_localctx = _tracker.createInstance<RootContext>(_ctx, getState());
  enterRule(_localctx, 0, MySQLParser::RuleRoot);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(631);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySQLParser::ALTER)
      | (1ULL << MySQLParser::ANALYZE)
      | (1ULL << MySQLParser::CALL)
      | (1ULL << MySQLParser::CHANGE)
      | (1ULL << MySQLParser::CHECK)
      | (1ULL << MySQLParser::CREATE)
      | (1ULL << MySQLParser::DELETE)
      | (1ULL << MySQLParser::DESC)
      | (1ULL << MySQLParser::DESCRIBE)
      | (1ULL << MySQLParser::DROP)
      | (1ULL << MySQLParser::EXPLAIN)
      | (1ULL << MySQLParser::GRANT))) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & ((1ULL << (MySQLParser::INSERT - 73))
      | (1ULL << (MySQLParser::KILL - 73))
      | (1ULL << (MySQLParser::LOAD - 73))
      | (1ULL << (MySQLParser::LOCK - 73))
      | (1ULL << (MySQLParser::OPTIMIZE - 73))
      | (1ULL << (MySQLParser::PURGE - 73))
      | (1ULL << (MySQLParser::RELEASE - 73))
      | (1ULL << (MySQLParser::RENAME - 73))
      | (1ULL << (MySQLParser::REPLACE - 73))
      | (1ULL << (MySQLParser::REVOKE - 73))
      | (1ULL << (MySQLParser::SELECT - 73))
      | (1ULL << (MySQLParser::SET - 73))
      | (1ULL << (MySQLParser::SHOW - 73)))) != 0) || ((((_la - 157) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 157)) & ((1ULL << (MySQLParser::UNLOCK - 157))
      | (1ULL << (MySQLParser::UPDATE - 157))
      | (1ULL << (MySQLParser::USE - 157)))) != 0) || ((((_la - 264) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 264)) & ((1ULL << (MySQLParser::BEGIN - 264))
      | (1ULL << (MySQLParser::BINLOG - 264))
      | (1ULL << (MySQLParser::CACHE - 264))
      | (1ULL << (MySQLParser::CHECKSUM - 264))
      | (1ULL << (MySQLParser::COMMIT - 264))
      | (1ULL << (MySQLParser::DEALLOCATE - 264))
      | (1ULL << (MySQLParser::DO - 264)))) != 0) || ((((_la - 340) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 340)) & ((1ULL << (MySQLParser::FLUSH - 340))
      | (1ULL << (MySQLParser::HANDLER - 340))
      | (1ULL << (MySQLParser::HELP - 340))
      | (1ULL << (MySQLParser::INSTALL - 340)))) != 0) || ((((_la - 449) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 449)) & ((1ULL << (MySQLParser::PREPARE - 449))
      | (1ULL << (MySQLParser::REPAIR - 449))
      | (1ULL << (MySQLParser::RESET - 449))
      | (1ULL << (MySQLParser::ROLLBACK - 449))
      | (1ULL << (MySQLParser::SAVEPOINT - 449))
      | (1ULL << (MySQLParser::START - 449)))) != 0) || ((((_la - 516) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 516)) & ((1ULL << (MySQLParser::STOP - 516))
      | (1ULL << (MySQLParser::TRUNCATE - 516))
      | (1ULL << (MySQLParser::UNINSTALL - 516))
      | (1ULL << (MySQLParser::XA - 516))
      | (1ULL << (MySQLParser::EXECUTE - 516))
      | (1ULL << (MySQLParser::SHUTDOWN - 516)))) != 0) || _la == MySQLParser::LR_BRACKET

    || _la == MySQLParser::SEMI) {
      setState(630);
      sqlStatements();
    }
    setState(634);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::MINUSMINUS) {
      setState(633);
      match(MySQLParser::MINUSMINUS);
    }
    setState(636);
    match(MySQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SqlStatementsContext ------------------------------------------------------------------

MySQLParser::SqlStatementsContext::SqlStatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::SqlStatementContext *> MySQLParser::SqlStatementsContext::sqlStatement() {
  return getRuleContexts<MySQLParser::SqlStatementContext>();
}

MySQLParser::SqlStatementContext* MySQLParser::SqlStatementsContext::sqlStatement(size_t i) {
  return getRuleContext<MySQLParser::SqlStatementContext>(i);
}

std::vector<MySQLParser::EmptyStatementContext *> MySQLParser::SqlStatementsContext::emptyStatement() {
  return getRuleContexts<MySQLParser::EmptyStatementContext>();
}

MySQLParser::EmptyStatementContext* MySQLParser::SqlStatementsContext::emptyStatement(size_t i) {
  return getRuleContext<MySQLParser::EmptyStatementContext>(i);
}

std::vector<tree::TerminalNode *> MySQLParser::SqlStatementsContext::SEMI() {
  return getTokens(MySQLParser::SEMI);
}

tree::TerminalNode* MySQLParser::SqlStatementsContext::SEMI(size_t i) {
  return getToken(MySQLParser::SEMI, i);
}

std::vector<tree::TerminalNode *> MySQLParser::SqlStatementsContext::MINUSMINUS() {
  return getTokens(MySQLParser::MINUSMINUS);
}

tree::TerminalNode* MySQLParser::SqlStatementsContext::MINUSMINUS(size_t i) {
  return getToken(MySQLParser::MINUSMINUS, i);
}


size_t MySQLParser::SqlStatementsContext::getRuleIndex() const {
  return MySQLParser::RuleSqlStatements;
}

void MySQLParser::SqlStatementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSqlStatements(this);
}

void MySQLParser::SqlStatementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSqlStatements(this);
}


antlrcpp::Any MySQLParser::SqlStatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSqlStatements(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SqlStatementsContext* MySQLParser::sqlStatements() {
  SqlStatementsContext *_localctx = _tracker.createInstance<SqlStatementsContext>(_ctx, getState());
  enterRule(_localctx, 2, MySQLParser::RuleSqlStatements);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(648);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(646);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::ALTER:
          case MySQLParser::ANALYZE:
          case MySQLParser::CALL:
          case MySQLParser::CHANGE:
          case MySQLParser::CHECK:
          case MySQLParser::CREATE:
          case MySQLParser::DELETE:
          case MySQLParser::DESC:
          case MySQLParser::DESCRIBE:
          case MySQLParser::DROP:
          case MySQLParser::EXPLAIN:
          case MySQLParser::GRANT:
          case MySQLParser::INSERT:
          case MySQLParser::KILL:
          case MySQLParser::LOAD:
          case MySQLParser::LOCK:
          case MySQLParser::OPTIMIZE:
          case MySQLParser::PURGE:
          case MySQLParser::RELEASE:
          case MySQLParser::RENAME:
          case MySQLParser::REPLACE:
          case MySQLParser::REVOKE:
          case MySQLParser::SELECT:
          case MySQLParser::SET:
          case MySQLParser::SHOW:
          case MySQLParser::UNLOCK:
          case MySQLParser::UPDATE:
          case MySQLParser::USE:
          case MySQLParser::BEGIN:
          case MySQLParser::BINLOG:
          case MySQLParser::CACHE:
          case MySQLParser::CHECKSUM:
          case MySQLParser::COMMIT:
          case MySQLParser::DEALLOCATE:
          case MySQLParser::DO:
          case MySQLParser::FLUSH:
          case MySQLParser::HANDLER:
          case MySQLParser::HELP:
          case MySQLParser::INSTALL:
          case MySQLParser::PREPARE:
          case MySQLParser::REPAIR:
          case MySQLParser::RESET:
          case MySQLParser::ROLLBACK:
          case MySQLParser::SAVEPOINT:
          case MySQLParser::START:
          case MySQLParser::STOP:
          case MySQLParser::TRUNCATE:
          case MySQLParser::UNINSTALL:
          case MySQLParser::XA:
          case MySQLParser::EXECUTE:
          case MySQLParser::SHUTDOWN:
          case MySQLParser::LR_BRACKET: {
            setState(638);
            sqlStatement();
            setState(640);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySQLParser::MINUSMINUS) {
              setState(639);
              match(MySQLParser::MINUSMINUS);
            }
            setState(643);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
            case 1: {
              setState(642);
              match(MySQLParser::SEMI);
              break;
            }

            }
            break;
          }

          case MySQLParser::SEMI: {
            setState(645);
            emptyStatement();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(650);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    }
    setState(659);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ALTER:
      case MySQLParser::ANALYZE:
      case MySQLParser::CALL:
      case MySQLParser::CHANGE:
      case MySQLParser::CHECK:
      case MySQLParser::CREATE:
      case MySQLParser::DELETE:
      case MySQLParser::DESC:
      case MySQLParser::DESCRIBE:
      case MySQLParser::DROP:
      case MySQLParser::EXPLAIN:
      case MySQLParser::GRANT:
      case MySQLParser::INSERT:
      case MySQLParser::KILL:
      case MySQLParser::LOAD:
      case MySQLParser::LOCK:
      case MySQLParser::OPTIMIZE:
      case MySQLParser::PURGE:
      case MySQLParser::RELEASE:
      case MySQLParser::RENAME:
      case MySQLParser::REPLACE:
      case MySQLParser::REVOKE:
      case MySQLParser::SELECT:
      case MySQLParser::SET:
      case MySQLParser::SHOW:
      case MySQLParser::UNLOCK:
      case MySQLParser::UPDATE:
      case MySQLParser::USE:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::CACHE:
      case MySQLParser::CHECKSUM:
      case MySQLParser::COMMIT:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DO:
      case MySQLParser::FLUSH:
      case MySQLParser::HANDLER:
      case MySQLParser::HELP:
      case MySQLParser::INSTALL:
      case MySQLParser::PREPARE:
      case MySQLParser::REPAIR:
      case MySQLParser::RESET:
      case MySQLParser::ROLLBACK:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::START:
      case MySQLParser::STOP:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::XA:
      case MySQLParser::EXECUTE:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::LR_BRACKET: {
        setState(651);
        sqlStatement();
        setState(656);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          setState(653);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::MINUSMINUS) {
            setState(652);
            match(MySQLParser::MINUSMINUS);
          }
          setState(655);
          match(MySQLParser::SEMI);
          break;
        }

        }
        break;
      }

      case MySQLParser::SEMI: {
        setState(658);
        emptyStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SqlStatementContext ------------------------------------------------------------------

MySQLParser::SqlStatementContext::SqlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::DdlStatementContext* MySQLParser::SqlStatementContext::ddlStatement() {
  return getRuleContext<MySQLParser::DdlStatementContext>(0);
}

MySQLParser::DmlStatementContext* MySQLParser::SqlStatementContext::dmlStatement() {
  return getRuleContext<MySQLParser::DmlStatementContext>(0);
}

MySQLParser::TransactionStatementContext* MySQLParser::SqlStatementContext::transactionStatement() {
  return getRuleContext<MySQLParser::TransactionStatementContext>(0);
}

MySQLParser::ReplicationStatementContext* MySQLParser::SqlStatementContext::replicationStatement() {
  return getRuleContext<MySQLParser::ReplicationStatementContext>(0);
}

MySQLParser::PreparedStatementContext* MySQLParser::SqlStatementContext::preparedStatement() {
  return getRuleContext<MySQLParser::PreparedStatementContext>(0);
}

MySQLParser::AdministrationStatementContext* MySQLParser::SqlStatementContext::administrationStatement() {
  return getRuleContext<MySQLParser::AdministrationStatementContext>(0);
}

MySQLParser::UtilityStatementContext* MySQLParser::SqlStatementContext::utilityStatement() {
  return getRuleContext<MySQLParser::UtilityStatementContext>(0);
}


size_t MySQLParser::SqlStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSqlStatement;
}

void MySQLParser::SqlStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSqlStatement(this);
}

void MySQLParser::SqlStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSqlStatement(this);
}


antlrcpp::Any MySQLParser::SqlStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSqlStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SqlStatementContext* MySQLParser::sqlStatement() {
  SqlStatementContext *_localctx = _tracker.createInstance<SqlStatementContext>(_ctx, getState());
  enterRule(_localctx, 4, MySQLParser::RuleSqlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(668);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(661);
      ddlStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(662);
      dmlStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(663);
      transactionStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(664);
      replicationStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(665);
      preparedStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(666);
      administrationStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(667);
      utilityStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatementContext ------------------------------------------------------------------

MySQLParser::EmptyStatementContext::EmptyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::EmptyStatementContext::SEMI() {
  return getToken(MySQLParser::SEMI, 0);
}


size_t MySQLParser::EmptyStatementContext::getRuleIndex() const {
  return MySQLParser::RuleEmptyStatement;
}

void MySQLParser::EmptyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyStatement(this);
}

void MySQLParser::EmptyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyStatement(this);
}


antlrcpp::Any MySQLParser::EmptyStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitEmptyStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::EmptyStatementContext* MySQLParser::emptyStatement() {
  EmptyStatementContext *_localctx = _tracker.createInstance<EmptyStatementContext>(_ctx, getState());
  enterRule(_localctx, 6, MySQLParser::RuleEmptyStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(670);
    match(MySQLParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DdlStatementContext ------------------------------------------------------------------

MySQLParser::DdlStatementContext::DdlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::CreateDatabaseContext* MySQLParser::DdlStatementContext::createDatabase() {
  return getRuleContext<MySQLParser::CreateDatabaseContext>(0);
}

MySQLParser::CreateEventContext* MySQLParser::DdlStatementContext::createEvent() {
  return getRuleContext<MySQLParser::CreateEventContext>(0);
}

MySQLParser::CreateIndexContext* MySQLParser::DdlStatementContext::createIndex() {
  return getRuleContext<MySQLParser::CreateIndexContext>(0);
}

MySQLParser::CreateLogfileGroupContext* MySQLParser::DdlStatementContext::createLogfileGroup() {
  return getRuleContext<MySQLParser::CreateLogfileGroupContext>(0);
}

MySQLParser::CreateProcedureContext* MySQLParser::DdlStatementContext::createProcedure() {
  return getRuleContext<MySQLParser::CreateProcedureContext>(0);
}

MySQLParser::CreateFunctionContext* MySQLParser::DdlStatementContext::createFunction() {
  return getRuleContext<MySQLParser::CreateFunctionContext>(0);
}

MySQLParser::CreateServerContext* MySQLParser::DdlStatementContext::createServer() {
  return getRuleContext<MySQLParser::CreateServerContext>(0);
}

MySQLParser::CreateTableContext* MySQLParser::DdlStatementContext::createTable() {
  return getRuleContext<MySQLParser::CreateTableContext>(0);
}

MySQLParser::CreateTablespaceInnodbContext* MySQLParser::DdlStatementContext::createTablespaceInnodb() {
  return getRuleContext<MySQLParser::CreateTablespaceInnodbContext>(0);
}

MySQLParser::CreateTablespaceNdbContext* MySQLParser::DdlStatementContext::createTablespaceNdb() {
  return getRuleContext<MySQLParser::CreateTablespaceNdbContext>(0);
}

MySQLParser::CreateTriggerContext* MySQLParser::DdlStatementContext::createTrigger() {
  return getRuleContext<MySQLParser::CreateTriggerContext>(0);
}

MySQLParser::CreateViewContext* MySQLParser::DdlStatementContext::createView() {
  return getRuleContext<MySQLParser::CreateViewContext>(0);
}

MySQLParser::AlterDatabaseContext* MySQLParser::DdlStatementContext::alterDatabase() {
  return getRuleContext<MySQLParser::AlterDatabaseContext>(0);
}

MySQLParser::AlterEventContext* MySQLParser::DdlStatementContext::alterEvent() {
  return getRuleContext<MySQLParser::AlterEventContext>(0);
}

MySQLParser::AlterFunctionContext* MySQLParser::DdlStatementContext::alterFunction() {
  return getRuleContext<MySQLParser::AlterFunctionContext>(0);
}

MySQLParser::AlterInstanceContext* MySQLParser::DdlStatementContext::alterInstance() {
  return getRuleContext<MySQLParser::AlterInstanceContext>(0);
}

MySQLParser::AlterLogfileGroupContext* MySQLParser::DdlStatementContext::alterLogfileGroup() {
  return getRuleContext<MySQLParser::AlterLogfileGroupContext>(0);
}

MySQLParser::AlterProcedureContext* MySQLParser::DdlStatementContext::alterProcedure() {
  return getRuleContext<MySQLParser::AlterProcedureContext>(0);
}

MySQLParser::AlterServerContext* MySQLParser::DdlStatementContext::alterServer() {
  return getRuleContext<MySQLParser::AlterServerContext>(0);
}

MySQLParser::AlterTableContext* MySQLParser::DdlStatementContext::alterTable() {
  return getRuleContext<MySQLParser::AlterTableContext>(0);
}

MySQLParser::AlterTablespaceContext* MySQLParser::DdlStatementContext::alterTablespace() {
  return getRuleContext<MySQLParser::AlterTablespaceContext>(0);
}

MySQLParser::AlterViewContext* MySQLParser::DdlStatementContext::alterView() {
  return getRuleContext<MySQLParser::AlterViewContext>(0);
}

MySQLParser::DropDatabaseContext* MySQLParser::DdlStatementContext::dropDatabase() {
  return getRuleContext<MySQLParser::DropDatabaseContext>(0);
}

MySQLParser::DropEventContext* MySQLParser::DdlStatementContext::dropEvent() {
  return getRuleContext<MySQLParser::DropEventContext>(0);
}

MySQLParser::DropIndexContext* MySQLParser::DdlStatementContext::dropIndex() {
  return getRuleContext<MySQLParser::DropIndexContext>(0);
}

MySQLParser::DropLogfileGroupContext* MySQLParser::DdlStatementContext::dropLogfileGroup() {
  return getRuleContext<MySQLParser::DropLogfileGroupContext>(0);
}

MySQLParser::DropProcedureContext* MySQLParser::DdlStatementContext::dropProcedure() {
  return getRuleContext<MySQLParser::DropProcedureContext>(0);
}

MySQLParser::DropFunctionContext* MySQLParser::DdlStatementContext::dropFunction() {
  return getRuleContext<MySQLParser::DropFunctionContext>(0);
}

MySQLParser::DropServerContext* MySQLParser::DdlStatementContext::dropServer() {
  return getRuleContext<MySQLParser::DropServerContext>(0);
}

MySQLParser::DropTableContext* MySQLParser::DdlStatementContext::dropTable() {
  return getRuleContext<MySQLParser::DropTableContext>(0);
}

MySQLParser::DropTablespaceContext* MySQLParser::DdlStatementContext::dropTablespace() {
  return getRuleContext<MySQLParser::DropTablespaceContext>(0);
}

MySQLParser::DropTriggerContext* MySQLParser::DdlStatementContext::dropTrigger() {
  return getRuleContext<MySQLParser::DropTriggerContext>(0);
}

MySQLParser::DropViewContext* MySQLParser::DdlStatementContext::dropView() {
  return getRuleContext<MySQLParser::DropViewContext>(0);
}

MySQLParser::RenameTableContext* MySQLParser::DdlStatementContext::renameTable() {
  return getRuleContext<MySQLParser::RenameTableContext>(0);
}

MySQLParser::TruncateTableContext* MySQLParser::DdlStatementContext::truncateTable() {
  return getRuleContext<MySQLParser::TruncateTableContext>(0);
}


size_t MySQLParser::DdlStatementContext::getRuleIndex() const {
  return MySQLParser::RuleDdlStatement;
}

void MySQLParser::DdlStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDdlStatement(this);
}

void MySQLParser::DdlStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDdlStatement(this);
}


antlrcpp::Any MySQLParser::DdlStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDdlStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DdlStatementContext* MySQLParser::ddlStatement() {
  DdlStatementContext *_localctx = _tracker.createInstance<DdlStatementContext>(_ctx, getState());
  enterRule(_localctx, 8, MySQLParser::RuleDdlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(707);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(672);
      createDatabase();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(673);
      createEvent();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(674);
      createIndex();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(675);
      createLogfileGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(676);
      createProcedure();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(677);
      createFunction();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(678);
      createServer();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(679);
      createTable();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(680);
      createTablespaceInnodb();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(681);
      createTablespaceNdb();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(682);
      createTrigger();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(683);
      createView();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(684);
      alterDatabase();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(685);
      alterEvent();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(686);
      alterFunction();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(687);
      alterInstance();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(688);
      alterLogfileGroup();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(689);
      alterProcedure();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(690);
      alterServer();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(691);
      alterTable();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(692);
      alterTablespace();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(693);
      alterView();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(694);
      dropDatabase();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(695);
      dropEvent();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(696);
      dropIndex();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(697);
      dropLogfileGroup();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(698);
      dropProcedure();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(699);
      dropFunction();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(700);
      dropServer();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(701);
      dropTable();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(702);
      dropTablespace();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(703);
      dropTrigger();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(704);
      dropView();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(705);
      renameTable();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(706);
      truncateTable();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DmlStatementContext ------------------------------------------------------------------

MySQLParser::DmlStatementContext::DmlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::SelectStatementContext* MySQLParser::DmlStatementContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

MySQLParser::InsertStatementContext* MySQLParser::DmlStatementContext::insertStatement() {
  return getRuleContext<MySQLParser::InsertStatementContext>(0);
}

MySQLParser::UpdateStatementContext* MySQLParser::DmlStatementContext::updateStatement() {
  return getRuleContext<MySQLParser::UpdateStatementContext>(0);
}

MySQLParser::DeleteStatementContext* MySQLParser::DmlStatementContext::deleteStatement() {
  return getRuleContext<MySQLParser::DeleteStatementContext>(0);
}

MySQLParser::ReplaceStatementContext* MySQLParser::DmlStatementContext::replaceStatement() {
  return getRuleContext<MySQLParser::ReplaceStatementContext>(0);
}

MySQLParser::CallStatementContext* MySQLParser::DmlStatementContext::callStatement() {
  return getRuleContext<MySQLParser::CallStatementContext>(0);
}

MySQLParser::LoadDataStatementContext* MySQLParser::DmlStatementContext::loadDataStatement() {
  return getRuleContext<MySQLParser::LoadDataStatementContext>(0);
}

MySQLParser::LoadXmlStatementContext* MySQLParser::DmlStatementContext::loadXmlStatement() {
  return getRuleContext<MySQLParser::LoadXmlStatementContext>(0);
}

MySQLParser::DoStatementContext* MySQLParser::DmlStatementContext::doStatement() {
  return getRuleContext<MySQLParser::DoStatementContext>(0);
}

MySQLParser::HandlerStatementContext* MySQLParser::DmlStatementContext::handlerStatement() {
  return getRuleContext<MySQLParser::HandlerStatementContext>(0);
}


size_t MySQLParser::DmlStatementContext::getRuleIndex() const {
  return MySQLParser::RuleDmlStatement;
}

void MySQLParser::DmlStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDmlStatement(this);
}

void MySQLParser::DmlStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDmlStatement(this);
}


antlrcpp::Any MySQLParser::DmlStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDmlStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DmlStatementContext* MySQLParser::dmlStatement() {
  DmlStatementContext *_localctx = _tracker.createInstance<DmlStatementContext>(_ctx, getState());
  enterRule(_localctx, 10, MySQLParser::RuleDmlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(719);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(709);
      selectStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(710);
      insertStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(711);
      updateStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(712);
      deleteStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(713);
      replaceStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(714);
      callStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(715);
      loadDataStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(716);
      loadXmlStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(717);
      doStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(718);
      handlerStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionStatementContext ------------------------------------------------------------------

MySQLParser::TransactionStatementContext::TransactionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::StartTransactionContext* MySQLParser::TransactionStatementContext::startTransaction() {
  return getRuleContext<MySQLParser::StartTransactionContext>(0);
}

MySQLParser::BeginWorkContext* MySQLParser::TransactionStatementContext::beginWork() {
  return getRuleContext<MySQLParser::BeginWorkContext>(0);
}

MySQLParser::CommitWorkContext* MySQLParser::TransactionStatementContext::commitWork() {
  return getRuleContext<MySQLParser::CommitWorkContext>(0);
}

MySQLParser::RollbackWorkContext* MySQLParser::TransactionStatementContext::rollbackWork() {
  return getRuleContext<MySQLParser::RollbackWorkContext>(0);
}

MySQLParser::SavepointStatementContext* MySQLParser::TransactionStatementContext::savepointStatement() {
  return getRuleContext<MySQLParser::SavepointStatementContext>(0);
}

MySQLParser::RollbackStatementContext* MySQLParser::TransactionStatementContext::rollbackStatement() {
  return getRuleContext<MySQLParser::RollbackStatementContext>(0);
}

MySQLParser::ReleaseStatementContext* MySQLParser::TransactionStatementContext::releaseStatement() {
  return getRuleContext<MySQLParser::ReleaseStatementContext>(0);
}

MySQLParser::LockTablesContext* MySQLParser::TransactionStatementContext::lockTables() {
  return getRuleContext<MySQLParser::LockTablesContext>(0);
}

MySQLParser::UnlockTablesContext* MySQLParser::TransactionStatementContext::unlockTables() {
  return getRuleContext<MySQLParser::UnlockTablesContext>(0);
}


size_t MySQLParser::TransactionStatementContext::getRuleIndex() const {
  return MySQLParser::RuleTransactionStatement;
}

void MySQLParser::TransactionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransactionStatement(this);
}

void MySQLParser::TransactionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransactionStatement(this);
}


antlrcpp::Any MySQLParser::TransactionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TransactionStatementContext* MySQLParser::transactionStatement() {
  TransactionStatementContext *_localctx = _tracker.createInstance<TransactionStatementContext>(_ctx, getState());
  enterRule(_localctx, 12, MySQLParser::RuleTransactionStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(730);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(721);
      startTransaction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(722);
      beginWork();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(723);
      commitWork();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(724);
      rollbackWork();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(725);
      savepointStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(726);
      rollbackStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(727);
      releaseStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(728);
      lockTables();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(729);
      unlockTables();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReplicationStatementContext ------------------------------------------------------------------

MySQLParser::ReplicationStatementContext::ReplicationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ChangeMasterContext* MySQLParser::ReplicationStatementContext::changeMaster() {
  return getRuleContext<MySQLParser::ChangeMasterContext>(0);
}

MySQLParser::ChangeReplicationFilterContext* MySQLParser::ReplicationStatementContext::changeReplicationFilter() {
  return getRuleContext<MySQLParser::ChangeReplicationFilterContext>(0);
}

MySQLParser::PurgeBinaryLogsContext* MySQLParser::ReplicationStatementContext::purgeBinaryLogs() {
  return getRuleContext<MySQLParser::PurgeBinaryLogsContext>(0);
}

MySQLParser::ResetMasterContext* MySQLParser::ReplicationStatementContext::resetMaster() {
  return getRuleContext<MySQLParser::ResetMasterContext>(0);
}

MySQLParser::ResetSlaveContext* MySQLParser::ReplicationStatementContext::resetSlave() {
  return getRuleContext<MySQLParser::ResetSlaveContext>(0);
}

MySQLParser::StartSlaveContext* MySQLParser::ReplicationStatementContext::startSlave() {
  return getRuleContext<MySQLParser::StartSlaveContext>(0);
}

MySQLParser::StopSlaveContext* MySQLParser::ReplicationStatementContext::stopSlave() {
  return getRuleContext<MySQLParser::StopSlaveContext>(0);
}

MySQLParser::StartGroupReplicationContext* MySQLParser::ReplicationStatementContext::startGroupReplication() {
  return getRuleContext<MySQLParser::StartGroupReplicationContext>(0);
}

MySQLParser::StopGroupReplicationContext* MySQLParser::ReplicationStatementContext::stopGroupReplication() {
  return getRuleContext<MySQLParser::StopGroupReplicationContext>(0);
}

MySQLParser::XaStartTransactionContext* MySQLParser::ReplicationStatementContext::xaStartTransaction() {
  return getRuleContext<MySQLParser::XaStartTransactionContext>(0);
}

MySQLParser::XaEndTransactionContext* MySQLParser::ReplicationStatementContext::xaEndTransaction() {
  return getRuleContext<MySQLParser::XaEndTransactionContext>(0);
}

MySQLParser::XaPrepareStatementContext* MySQLParser::ReplicationStatementContext::xaPrepareStatement() {
  return getRuleContext<MySQLParser::XaPrepareStatementContext>(0);
}

MySQLParser::XaCommitWorkContext* MySQLParser::ReplicationStatementContext::xaCommitWork() {
  return getRuleContext<MySQLParser::XaCommitWorkContext>(0);
}

MySQLParser::XaRollbackWorkContext* MySQLParser::ReplicationStatementContext::xaRollbackWork() {
  return getRuleContext<MySQLParser::XaRollbackWorkContext>(0);
}

MySQLParser::XaRecoverWorkContext* MySQLParser::ReplicationStatementContext::xaRecoverWork() {
  return getRuleContext<MySQLParser::XaRecoverWorkContext>(0);
}


size_t MySQLParser::ReplicationStatementContext::getRuleIndex() const {
  return MySQLParser::RuleReplicationStatement;
}

void MySQLParser::ReplicationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplicationStatement(this);
}

void MySQLParser::ReplicationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplicationStatement(this);
}


antlrcpp::Any MySQLParser::ReplicationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReplicationStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ReplicationStatementContext* MySQLParser::replicationStatement() {
  ReplicationStatementContext *_localctx = _tracker.createInstance<ReplicationStatementContext>(_ctx, getState());
  enterRule(_localctx, 14, MySQLParser::RuleReplicationStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(747);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(732);
      changeMaster();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(733);
      changeReplicationFilter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(734);
      purgeBinaryLogs();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(735);
      resetMaster();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(736);
      resetSlave();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(737);
      startSlave();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(738);
      stopSlave();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(739);
      startGroupReplication();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(740);
      stopGroupReplication();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(741);
      xaStartTransaction();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(742);
      xaEndTransaction();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(743);
      xaPrepareStatement();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(744);
      xaCommitWork();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(745);
      xaRollbackWork();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(746);
      xaRecoverWork();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreparedStatementContext ------------------------------------------------------------------

MySQLParser::PreparedStatementContext::PreparedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::PrepareStatementContext* MySQLParser::PreparedStatementContext::prepareStatement() {
  return getRuleContext<MySQLParser::PrepareStatementContext>(0);
}

MySQLParser::ExecuteStatementContext* MySQLParser::PreparedStatementContext::executeStatement() {
  return getRuleContext<MySQLParser::ExecuteStatementContext>(0);
}

MySQLParser::DeallocatePrepareContext* MySQLParser::PreparedStatementContext::deallocatePrepare() {
  return getRuleContext<MySQLParser::DeallocatePrepareContext>(0);
}


size_t MySQLParser::PreparedStatementContext::getRuleIndex() const {
  return MySQLParser::RulePreparedStatement;
}

void MySQLParser::PreparedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreparedStatement(this);
}

void MySQLParser::PreparedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreparedStatement(this);
}


antlrcpp::Any MySQLParser::PreparedStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPreparedStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PreparedStatementContext* MySQLParser::preparedStatement() {
  PreparedStatementContext *_localctx = _tracker.createInstance<PreparedStatementContext>(_ctx, getState());
  enterRule(_localctx, 16, MySQLParser::RulePreparedStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(752);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::PREPARE: {
        enterOuterAlt(_localctx, 1);
        setState(749);
        prepareStatement();
        break;
      }

      case MySQLParser::EXECUTE: {
        enterOuterAlt(_localctx, 2);
        setState(750);
        executeStatement();
        break;
      }

      case MySQLParser::DROP:
      case MySQLParser::DEALLOCATE: {
        enterOuterAlt(_localctx, 3);
        setState(751);
        deallocatePrepare();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStatementContext ------------------------------------------------------------------

MySQLParser::CompoundStatementContext::CompoundStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::BlockStatementContext* MySQLParser::CompoundStatementContext::blockStatement() {
  return getRuleContext<MySQLParser::BlockStatementContext>(0);
}

MySQLParser::CaseStatementContext* MySQLParser::CompoundStatementContext::caseStatement() {
  return getRuleContext<MySQLParser::CaseStatementContext>(0);
}

MySQLParser::IfStatementContext* MySQLParser::CompoundStatementContext::ifStatement() {
  return getRuleContext<MySQLParser::IfStatementContext>(0);
}

MySQLParser::LeaveStatementContext* MySQLParser::CompoundStatementContext::leaveStatement() {
  return getRuleContext<MySQLParser::LeaveStatementContext>(0);
}

MySQLParser::LoopStatementContext* MySQLParser::CompoundStatementContext::loopStatement() {
  return getRuleContext<MySQLParser::LoopStatementContext>(0);
}

MySQLParser::RepeatStatementContext* MySQLParser::CompoundStatementContext::repeatStatement() {
  return getRuleContext<MySQLParser::RepeatStatementContext>(0);
}

MySQLParser::WhileStatementContext* MySQLParser::CompoundStatementContext::whileStatement() {
  return getRuleContext<MySQLParser::WhileStatementContext>(0);
}

MySQLParser::IterateStatementContext* MySQLParser::CompoundStatementContext::iterateStatement() {
  return getRuleContext<MySQLParser::IterateStatementContext>(0);
}

MySQLParser::ReturnStatementContext* MySQLParser::CompoundStatementContext::returnStatement() {
  return getRuleContext<MySQLParser::ReturnStatementContext>(0);
}

MySQLParser::CursorStatementContext* MySQLParser::CompoundStatementContext::cursorStatement() {
  return getRuleContext<MySQLParser::CursorStatementContext>(0);
}


size_t MySQLParser::CompoundStatementContext::getRuleIndex() const {
  return MySQLParser::RuleCompoundStatement;
}

void MySQLParser::CompoundStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompoundStatement(this);
}

void MySQLParser::CompoundStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompoundStatement(this);
}


antlrcpp::Any MySQLParser::CompoundStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCompoundStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CompoundStatementContext* MySQLParser::compoundStatement() {
  CompoundStatementContext *_localctx = _tracker.createInstance<CompoundStatementContext>(_ctx, getState());
  enterRule(_localctx, 18, MySQLParser::RuleCompoundStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(764);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(754);
      blockStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(755);
      caseStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(756);
      ifStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(757);
      leaveStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(758);
      loopStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(759);
      repeatStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(760);
      whileStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(761);
      iterateStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(762);
      returnStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(763);
      cursorStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdministrationStatementContext ------------------------------------------------------------------

MySQLParser::AdministrationStatementContext::AdministrationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::AlterUserContext* MySQLParser::AdministrationStatementContext::alterUser() {
  return getRuleContext<MySQLParser::AlterUserContext>(0);
}

MySQLParser::CreateUserContext* MySQLParser::AdministrationStatementContext::createUser() {
  return getRuleContext<MySQLParser::CreateUserContext>(0);
}

MySQLParser::DropUserContext* MySQLParser::AdministrationStatementContext::dropUser() {
  return getRuleContext<MySQLParser::DropUserContext>(0);
}

MySQLParser::GrantStatementContext* MySQLParser::AdministrationStatementContext::grantStatement() {
  return getRuleContext<MySQLParser::GrantStatementContext>(0);
}

MySQLParser::GrantProxyContext* MySQLParser::AdministrationStatementContext::grantProxy() {
  return getRuleContext<MySQLParser::GrantProxyContext>(0);
}

MySQLParser::RenameUserContext* MySQLParser::AdministrationStatementContext::renameUser() {
  return getRuleContext<MySQLParser::RenameUserContext>(0);
}

MySQLParser::RevokeStatementContext* MySQLParser::AdministrationStatementContext::revokeStatement() {
  return getRuleContext<MySQLParser::RevokeStatementContext>(0);
}

MySQLParser::RevokeProxyContext* MySQLParser::AdministrationStatementContext::revokeProxy() {
  return getRuleContext<MySQLParser::RevokeProxyContext>(0);
}

MySQLParser::AnalyzeTableContext* MySQLParser::AdministrationStatementContext::analyzeTable() {
  return getRuleContext<MySQLParser::AnalyzeTableContext>(0);
}

MySQLParser::CheckTableContext* MySQLParser::AdministrationStatementContext::checkTable() {
  return getRuleContext<MySQLParser::CheckTableContext>(0);
}

MySQLParser::ChecksumTableContext* MySQLParser::AdministrationStatementContext::checksumTable() {
  return getRuleContext<MySQLParser::ChecksumTableContext>(0);
}

MySQLParser::OptimizeTableContext* MySQLParser::AdministrationStatementContext::optimizeTable() {
  return getRuleContext<MySQLParser::OptimizeTableContext>(0);
}

MySQLParser::RepairTableContext* MySQLParser::AdministrationStatementContext::repairTable() {
  return getRuleContext<MySQLParser::RepairTableContext>(0);
}

MySQLParser::CreateUdfunctionContext* MySQLParser::AdministrationStatementContext::createUdfunction() {
  return getRuleContext<MySQLParser::CreateUdfunctionContext>(0);
}

MySQLParser::InstallPluginContext* MySQLParser::AdministrationStatementContext::installPlugin() {
  return getRuleContext<MySQLParser::InstallPluginContext>(0);
}

MySQLParser::UninstallPluginContext* MySQLParser::AdministrationStatementContext::uninstallPlugin() {
  return getRuleContext<MySQLParser::UninstallPluginContext>(0);
}

MySQLParser::SetStatementContext* MySQLParser::AdministrationStatementContext::setStatement() {
  return getRuleContext<MySQLParser::SetStatementContext>(0);
}

MySQLParser::ShowStatementContext* MySQLParser::AdministrationStatementContext::showStatement() {
  return getRuleContext<MySQLParser::ShowStatementContext>(0);
}

MySQLParser::BinlogStatementContext* MySQLParser::AdministrationStatementContext::binlogStatement() {
  return getRuleContext<MySQLParser::BinlogStatementContext>(0);
}

MySQLParser::CacheIndexStatementContext* MySQLParser::AdministrationStatementContext::cacheIndexStatement() {
  return getRuleContext<MySQLParser::CacheIndexStatementContext>(0);
}

MySQLParser::FlushStatementContext* MySQLParser::AdministrationStatementContext::flushStatement() {
  return getRuleContext<MySQLParser::FlushStatementContext>(0);
}

MySQLParser::KillStatementContext* MySQLParser::AdministrationStatementContext::killStatement() {
  return getRuleContext<MySQLParser::KillStatementContext>(0);
}

MySQLParser::LoadIndexIntoCacheContext* MySQLParser::AdministrationStatementContext::loadIndexIntoCache() {
  return getRuleContext<MySQLParser::LoadIndexIntoCacheContext>(0);
}

MySQLParser::ResetStatementContext* MySQLParser::AdministrationStatementContext::resetStatement() {
  return getRuleContext<MySQLParser::ResetStatementContext>(0);
}

MySQLParser::ShutdownStatementContext* MySQLParser::AdministrationStatementContext::shutdownStatement() {
  return getRuleContext<MySQLParser::ShutdownStatementContext>(0);
}


size_t MySQLParser::AdministrationStatementContext::getRuleIndex() const {
  return MySQLParser::RuleAdministrationStatement;
}

void MySQLParser::AdministrationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdministrationStatement(this);
}

void MySQLParser::AdministrationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdministrationStatement(this);
}


antlrcpp::Any MySQLParser::AdministrationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAdministrationStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AdministrationStatementContext* MySQLParser::administrationStatement() {
  AdministrationStatementContext *_localctx = _tracker.createInstance<AdministrationStatementContext>(_ctx, getState());
  enterRule(_localctx, 20, MySQLParser::RuleAdministrationStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(791);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(766);
      alterUser();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(767);
      createUser();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(768);
      dropUser();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(769);
      grantStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(770);
      grantProxy();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(771);
      renameUser();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(772);
      revokeStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(773);
      revokeProxy();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(774);
      analyzeTable();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(775);
      checkTable();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(776);
      checksumTable();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(777);
      optimizeTable();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(778);
      repairTable();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(779);
      createUdfunction();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(780);
      installPlugin();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(781);
      uninstallPlugin();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(782);
      setStatement();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(783);
      showStatement();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(784);
      binlogStatement();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(785);
      cacheIndexStatement();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(786);
      flushStatement();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(787);
      killStatement();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(788);
      loadIndexIntoCache();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(789);
      resetStatement();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(790);
      shutdownStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UtilityStatementContext ------------------------------------------------------------------

MySQLParser::UtilityStatementContext::UtilityStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::SimpleDescribeStatementContext* MySQLParser::UtilityStatementContext::simpleDescribeStatement() {
  return getRuleContext<MySQLParser::SimpleDescribeStatementContext>(0);
}

MySQLParser::FullDescribeStatementContext* MySQLParser::UtilityStatementContext::fullDescribeStatement() {
  return getRuleContext<MySQLParser::FullDescribeStatementContext>(0);
}

MySQLParser::HelpStatementContext* MySQLParser::UtilityStatementContext::helpStatement() {
  return getRuleContext<MySQLParser::HelpStatementContext>(0);
}

MySQLParser::UseStatementContext* MySQLParser::UtilityStatementContext::useStatement() {
  return getRuleContext<MySQLParser::UseStatementContext>(0);
}


size_t MySQLParser::UtilityStatementContext::getRuleIndex() const {
  return MySQLParser::RuleUtilityStatement;
}

void MySQLParser::UtilityStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUtilityStatement(this);
}

void MySQLParser::UtilityStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUtilityStatement(this);
}


antlrcpp::Any MySQLParser::UtilityStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUtilityStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UtilityStatementContext* MySQLParser::utilityStatement() {
  UtilityStatementContext *_localctx = _tracker.createInstance<UtilityStatementContext>(_ctx, getState());
  enterRule(_localctx, 22, MySQLParser::RuleUtilityStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(797);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(793);
      simpleDescribeStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(794);
      fullDescribeStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(795);
      helpStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(796);
      useStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDatabaseContext ------------------------------------------------------------------

MySQLParser::CreateDatabaseContext::CreateDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateDatabaseContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

MySQLParser::UidContext* MySQLParser::CreateDatabaseContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::CreateDatabaseContext::DATABASE() {
  return getToken(MySQLParser::DATABASE, 0);
}

tree::TerminalNode* MySQLParser::CreateDatabaseContext::SCHEMA() {
  return getToken(MySQLParser::SCHEMA, 0);
}

MySQLParser::IfNotExistsContext* MySQLParser::CreateDatabaseContext::ifNotExists() {
  return getRuleContext<MySQLParser::IfNotExistsContext>(0);
}

std::vector<MySQLParser::CreateDatabaseOptionContext *> MySQLParser::CreateDatabaseContext::createDatabaseOption() {
  return getRuleContexts<MySQLParser::CreateDatabaseOptionContext>();
}

MySQLParser::CreateDatabaseOptionContext* MySQLParser::CreateDatabaseContext::createDatabaseOption(size_t i) {
  return getRuleContext<MySQLParser::CreateDatabaseOptionContext>(i);
}


size_t MySQLParser::CreateDatabaseContext::getRuleIndex() const {
  return MySQLParser::RuleCreateDatabase;
}

void MySQLParser::CreateDatabaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateDatabase(this);
}

void MySQLParser::CreateDatabaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateDatabase(this);
}


antlrcpp::Any MySQLParser::CreateDatabaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateDatabase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateDatabaseContext* MySQLParser::createDatabase() {
  CreateDatabaseContext *_localctx = _tracker.createInstance<CreateDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 24, MySQLParser::RuleCreateDatabase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(799);
    match(MySQLParser::CREATE);
    setState(800);
    dynamic_cast<CreateDatabaseContext *>(_localctx)->dbFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::DATABASE || _la == MySQLParser::SCHEMA)) {
      dynamic_cast<CreateDatabaseContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(802);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(801);
      ifNotExists();
    }
    setState(804);
    uid();
    setState(808);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySQLParser::CHARACTER)
      | (1ULL << MySQLParser::COLLATE)
      | (1ULL << MySQLParser::DEFAULT))) != 0) || _la == MySQLParser::CHARSET) {
      setState(805);
      createDatabaseOption();
      setState(810);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateEventContext ------------------------------------------------------------------

MySQLParser::CreateEventContext::CreateEventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateEventContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateEventContext::EVENT() {
  return getToken(MySQLParser::EVENT, 0);
}

MySQLParser::FullIdContext* MySQLParser::CreateEventContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateEventContext::ON() {
  return getTokens(MySQLParser::ON);
}

tree::TerminalNode* MySQLParser::CreateEventContext::ON(size_t i) {
  return getToken(MySQLParser::ON, i);
}

tree::TerminalNode* MySQLParser::CreateEventContext::SCHEDULE() {
  return getToken(MySQLParser::SCHEDULE, 0);
}

MySQLParser::ScheduleExpressionContext* MySQLParser::CreateEventContext::scheduleExpression() {
  return getRuleContext<MySQLParser::ScheduleExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::CreateEventContext::DO() {
  return getToken(MySQLParser::DO, 0);
}

MySQLParser::RoutineBodyContext* MySQLParser::CreateEventContext::routineBody() {
  return getRuleContext<MySQLParser::RoutineBodyContext>(0);
}

MySQLParser::OwnerStatementContext* MySQLParser::CreateEventContext::ownerStatement() {
  return getRuleContext<MySQLParser::OwnerStatementContext>(0);
}

MySQLParser::IfNotExistsContext* MySQLParser::CreateEventContext::ifNotExists() {
  return getRuleContext<MySQLParser::IfNotExistsContext>(0);
}

tree::TerminalNode* MySQLParser::CreateEventContext::COMPLETION() {
  return getToken(MySQLParser::COMPLETION, 0);
}

tree::TerminalNode* MySQLParser::CreateEventContext::PRESERVE() {
  return getToken(MySQLParser::PRESERVE, 0);
}

MySQLParser::EnableTypeContext* MySQLParser::CreateEventContext::enableType() {
  return getRuleContext<MySQLParser::EnableTypeContext>(0);
}

tree::TerminalNode* MySQLParser::CreateEventContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::CreateEventContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::CreateEventContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}


size_t MySQLParser::CreateEventContext::getRuleIndex() const {
  return MySQLParser::RuleCreateEvent;
}

void MySQLParser::CreateEventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateEvent(this);
}

void MySQLParser::CreateEventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateEvent(this);
}


antlrcpp::Any MySQLParser::CreateEventContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateEvent(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateEventContext* MySQLParser::createEvent() {
  CreateEventContext *_localctx = _tracker.createInstance<CreateEventContext>(_ctx, getState());
  enterRule(_localctx, 26, MySQLParser::RuleCreateEvent);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(811);
    match(MySQLParser::CREATE);
    setState(813);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFINER) {
      setState(812);
      ownerStatement();
    }
    setState(815);
    match(MySQLParser::EVENT);
    setState(817);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(816);
      ifNotExists();
    }
    setState(819);
    fullId();
    setState(820);
    match(MySQLParser::ON);
    setState(821);
    match(MySQLParser::SCHEDULE);
    setState(822);
    scheduleExpression();
    setState(829);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ON) {
      setState(823);
      match(MySQLParser::ON);
      setState(824);
      match(MySQLParser::COMPLETION);
      setState(826);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NOT) {
        setState(825);
        match(MySQLParser::NOT);
      }
      setState(828);
      match(MySQLParser::PRESERVE);
    }
    setState(832);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DISABLE

    || _la == MySQLParser::ENABLE) {
      setState(831);
      enableType();
    }
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::COMMENT) {
      setState(834);
      match(MySQLParser::COMMENT);
      setState(835);
      match(MySQLParser::STRING_LITERAL);
    }
    setState(838);
    match(MySQLParser::DO);
    setState(839);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateIndexContext ------------------------------------------------------------------

MySQLParser::CreateIndexContext::CreateIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateIndexContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

MySQLParser::UidContext* MySQLParser::CreateIndexContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

MySQLParser::TableNameContext* MySQLParser::CreateIndexContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::CreateIndexContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

MySQLParser::IndexTypeContext* MySQLParser::CreateIndexContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::CreateIndexContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::CreateIndexContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::ALGORITHM() {
  return getTokens(MySQLParser::ALGORITHM);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::ALGORITHM(size_t i) {
  return getToken(MySQLParser::ALGORITHM, i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::LOCK() {
  return getTokens(MySQLParser::LOCK);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::LOCK(size_t i) {
  return getToken(MySQLParser::LOCK, i);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::ONLINE() {
  return getToken(MySQLParser::ONLINE, 0);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::OFFLINE() {
  return getToken(MySQLParser::OFFLINE, 0);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::UNIQUE() {
  return getToken(MySQLParser::UNIQUE, 0);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::FULLTEXT() {
  return getToken(MySQLParser::FULLTEXT, 0);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::SPATIAL() {
  return getToken(MySQLParser::SPATIAL, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::DEFAULT() {
  return getTokens(MySQLParser::DEFAULT);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::DEFAULT(size_t i) {
  return getToken(MySQLParser::DEFAULT, i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::INPLACE() {
  return getTokens(MySQLParser::INPLACE);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::INPLACE(size_t i) {
  return getToken(MySQLParser::INPLACE, i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::COPY() {
  return getTokens(MySQLParser::COPY);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::COPY(size_t i) {
  return getToken(MySQLParser::COPY, i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::NONE() {
  return getTokens(MySQLParser::NONE);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::NONE(size_t i) {
  return getToken(MySQLParser::NONE, i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::SHARED() {
  return getTokens(MySQLParser::SHARED);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::SHARED(size_t i) {
  return getToken(MySQLParser::SHARED, i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateIndexContext::EXCLUSIVE() {
  return getTokens(MySQLParser::EXCLUSIVE);
}

tree::TerminalNode* MySQLParser::CreateIndexContext::EXCLUSIVE(size_t i) {
  return getToken(MySQLParser::EXCLUSIVE, i);
}


size_t MySQLParser::CreateIndexContext::getRuleIndex() const {
  return MySQLParser::RuleCreateIndex;
}

void MySQLParser::CreateIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateIndex(this);
}

void MySQLParser::CreateIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateIndex(this);
}


antlrcpp::Any MySQLParser::CreateIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateIndex(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateIndexContext* MySQLParser::createIndex() {
  CreateIndexContext *_localctx = _tracker.createInstance<CreateIndexContext>(_ctx, getState());
  enterRule(_localctx, 28, MySQLParser::RuleCreateIndex);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(841);
    match(MySQLParser::CREATE);
    setState(843);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::OFFLINE

    || _la == MySQLParser::ONLINE) {
      setState(842);
      dynamic_cast<CreateIndexContext *>(_localctx)->intimeAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::OFFLINE

      || _la == MySQLParser::ONLINE)) {
        dynamic_cast<CreateIndexContext *>(_localctx)->intimeAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(846);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FULLTEXT || _la == MySQLParser::SPATIAL

    || _la == MySQLParser::UNIQUE) {
      setState(845);
      dynamic_cast<CreateIndexContext *>(_localctx)->indexCategory = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FULLTEXT || _la == MySQLParser::SPATIAL

      || _la == MySQLParser::UNIQUE)) {
        dynamic_cast<CreateIndexContext *>(_localctx)->indexCategory = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(848);
    match(MySQLParser::INDEX);
    setState(849);
    uid();
    setState(851);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::USING) {
      setState(850);
      indexType();
    }
    setState(853);
    match(MySQLParser::ON);
    setState(854);
    tableName();
    setState(855);
    indexColumnNames();
    setState(859);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::USING

    || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

    || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
      setState(856);
      indexOption();
      setState(861);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(874);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(872);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::ALGORITHM: {
            setState(862);
            match(MySQLParser::ALGORITHM);
            setState(864);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySQLParser::EQUAL_SYMBOL) {
              setState(863);
              match(MySQLParser::EQUAL_SYMBOL);
            }
            setState(866);
            dynamic_cast<CreateIndexContext *>(_localctx)->algType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::COPY

            || _la == MySQLParser::INPLACE)) {
              dynamic_cast<CreateIndexContext *>(_localctx)->algType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case MySQLParser::LOCK: {
            setState(867);
            match(MySQLParser::LOCK);
            setState(869);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySQLParser::EQUAL_SYMBOL) {
              setState(868);
              match(MySQLParser::EQUAL_SYMBOL);
            }
            setState(871);
            dynamic_cast<CreateIndexContext *>(_localctx)->lockType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::EXCLUSIVE || _la == MySQLParser::NONE || _la == MySQLParser::SHARED)) {
              dynamic_cast<CreateIndexContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(876);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateLogfileGroupContext ------------------------------------------------------------------

MySQLParser::CreateLogfileGroupContext::CreateLogfileGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::LOGFILE() {
  return getToken(MySQLParser::LOGFILE, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::GROUP() {
  return getToken(MySQLParser::GROUP, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::CreateLogfileGroupContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::CreateLogfileGroupContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::UNDOFILE() {
  return getToken(MySQLParser::UNDOFILE, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::CreateLogfileGroupContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateLogfileGroupContext::STRING_LITERAL() {
  return getTokens(MySQLParser::STRING_LITERAL);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::STRING_LITERAL(size_t i) {
  return getToken(MySQLParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::INITIAL_SIZE() {
  return getToken(MySQLParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::UNDO_BUFFER_SIZE() {
  return getToken(MySQLParser::UNDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::REDO_BUFFER_SIZE() {
  return getToken(MySQLParser::REDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::NODEGROUP() {
  return getToken(MySQLParser::NODEGROUP, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::WAIT() {
  return getToken(MySQLParser::WAIT, 0);
}

tree::TerminalNode* MySQLParser::CreateLogfileGroupContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

std::vector<MySQLParser::FileSizeLiteralContext *> MySQLParser::CreateLogfileGroupContext::fileSizeLiteral() {
  return getRuleContexts<MySQLParser::FileSizeLiteralContext>();
}

MySQLParser::FileSizeLiteralContext* MySQLParser::CreateLogfileGroupContext::fileSizeLiteral(size_t i) {
  return getRuleContext<MySQLParser::FileSizeLiteralContext>(i);
}


size_t MySQLParser::CreateLogfileGroupContext::getRuleIndex() const {
  return MySQLParser::RuleCreateLogfileGroup;
}

void MySQLParser::CreateLogfileGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateLogfileGroup(this);
}

void MySQLParser::CreateLogfileGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateLogfileGroup(this);
}


antlrcpp::Any MySQLParser::CreateLogfileGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateLogfileGroup(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateLogfileGroupContext* MySQLParser::createLogfileGroup() {
  CreateLogfileGroupContext *_localctx = _tracker.createInstance<CreateLogfileGroupContext>(_ctx, getState());
  enterRule(_localctx, 30, MySQLParser::RuleCreateLogfileGroup);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(877);
    match(MySQLParser::CREATE);
    setState(878);
    match(MySQLParser::LOGFILE);
    setState(879);
    match(MySQLParser::GROUP);
    setState(880);
    uid();
    setState(881);
    match(MySQLParser::ADD);
    setState(882);
    match(MySQLParser::UNDOFILE);
    setState(883);
    dynamic_cast<CreateLogfileGroupContext *>(_localctx)->undoFile = match(MySQLParser::STRING_LITERAL);
    setState(889);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::INITIAL_SIZE) {
      setState(884);
      match(MySQLParser::INITIAL_SIZE);
      setState(886);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(885);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(888);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->initSize = fileSizeLiteral();
    }
    setState(896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::UNDO_BUFFER_SIZE) {
      setState(891);
      match(MySQLParser::UNDO_BUFFER_SIZE);
      setState(893);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(892);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(895);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->undoSize = fileSizeLiteral();
    }
    setState(903);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::REDO_BUFFER_SIZE) {
      setState(898);
      match(MySQLParser::REDO_BUFFER_SIZE);
      setState(900);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(899);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(902);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->redoSize = fileSizeLiteral();
    }
    setState(910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::NODEGROUP) {
      setState(905);
      match(MySQLParser::NODEGROUP);
      setState(907);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(906);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(909);
      uid();
    }
    setState(913);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WAIT) {
      setState(912);
      match(MySQLParser::WAIT);
    }
    setState(920);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::COMMENT) {
      setState(915);
      match(MySQLParser::COMMENT);
      setState(917);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(916);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(919);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->comment = match(MySQLParser::STRING_LITERAL);
    }
    setState(922);
    match(MySQLParser::ENGINE);
    setState(924);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EQUAL_SYMBOL) {
      setState(923);
      match(MySQLParser::EQUAL_SYMBOL);
    }
    setState(926);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateProcedureContext ------------------------------------------------------------------

MySQLParser::CreateProcedureContext::CreateProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateProcedureContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateProcedureContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

MySQLParser::FullIdContext* MySQLParser::CreateProcedureContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::RoutineBodyContext* MySQLParser::CreateProcedureContext::routineBody() {
  return getRuleContext<MySQLParser::RoutineBodyContext>(0);
}

MySQLParser::OwnerStatementContext* MySQLParser::CreateProcedureContext::ownerStatement() {
  return getRuleContext<MySQLParser::OwnerStatementContext>(0);
}

std::vector<MySQLParser::ProcedureParameterContext *> MySQLParser::CreateProcedureContext::procedureParameter() {
  return getRuleContexts<MySQLParser::ProcedureParameterContext>();
}

MySQLParser::ProcedureParameterContext* MySQLParser::CreateProcedureContext::procedureParameter(size_t i) {
  return getRuleContext<MySQLParser::ProcedureParameterContext>(i);
}

std::vector<MySQLParser::RoutineOptionContext *> MySQLParser::CreateProcedureContext::routineOption() {
  return getRuleContexts<MySQLParser::RoutineOptionContext>();
}

MySQLParser::RoutineOptionContext* MySQLParser::CreateProcedureContext::routineOption(size_t i) {
  return getRuleContext<MySQLParser::RoutineOptionContext>(i);
}


size_t MySQLParser::CreateProcedureContext::getRuleIndex() const {
  return MySQLParser::RuleCreateProcedure;
}

void MySQLParser::CreateProcedureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateProcedure(this);
}

void MySQLParser::CreateProcedureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateProcedure(this);
}


antlrcpp::Any MySQLParser::CreateProcedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateProcedure(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateProcedureContext* MySQLParser::createProcedure() {
  CreateProcedureContext *_localctx = _tracker.createInstance<CreateProcedureContext>(_ctx, getState());
  enterRule(_localctx, 32, MySQLParser::RuleCreateProcedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(928);
    match(MySQLParser::CREATE);
    setState(930);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFINER) {
      setState(929);
      ownerStatement();
    }
    setState(932);
    match(MySQLParser::PROCEDURE);
    setState(933);
    fullId();
    setState(934);
    match(MySQLParser::LR_BRACKET);
    setState(936);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & ((1ULL << (MySQLParser::IN - 68))
      | (1ULL << (MySQLParser::INOUT - 68))
      | (1ULL << (MySQLParser::OUT - 68)))) != 0) || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(935);
      procedureParameter();
    }
    setState(942);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(938);
      match(MySQLParser::COMMA);
      setState(939);
      procedureParameter();
      setState(944);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(945);
    match(MySQLParser::RR_BRACKET);
    setState(949);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(946);
        routineOption(); 
      }
      setState(951);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    }
    setState(952);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateFunctionContext ------------------------------------------------------------------

MySQLParser::CreateFunctionContext::CreateFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateFunctionContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateFunctionContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

MySQLParser::FullIdContext* MySQLParser::CreateFunctionContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

tree::TerminalNode* MySQLParser::CreateFunctionContext::RETURNS() {
  return getToken(MySQLParser::RETURNS, 0);
}

MySQLParser::DataTypeContext* MySQLParser::CreateFunctionContext::dataType() {
  return getRuleContext<MySQLParser::DataTypeContext>(0);
}

MySQLParser::RoutineBodyContext* MySQLParser::CreateFunctionContext::routineBody() {
  return getRuleContext<MySQLParser::RoutineBodyContext>(0);
}

MySQLParser::OwnerStatementContext* MySQLParser::CreateFunctionContext::ownerStatement() {
  return getRuleContext<MySQLParser::OwnerStatementContext>(0);
}

std::vector<MySQLParser::FunctionParameterContext *> MySQLParser::CreateFunctionContext::functionParameter() {
  return getRuleContexts<MySQLParser::FunctionParameterContext>();
}

MySQLParser::FunctionParameterContext* MySQLParser::CreateFunctionContext::functionParameter(size_t i) {
  return getRuleContext<MySQLParser::FunctionParameterContext>(i);
}

std::vector<MySQLParser::RoutineOptionContext *> MySQLParser::CreateFunctionContext::routineOption() {
  return getRuleContexts<MySQLParser::RoutineOptionContext>();
}

MySQLParser::RoutineOptionContext* MySQLParser::CreateFunctionContext::routineOption(size_t i) {
  return getRuleContext<MySQLParser::RoutineOptionContext>(i);
}


size_t MySQLParser::CreateFunctionContext::getRuleIndex() const {
  return MySQLParser::RuleCreateFunction;
}

void MySQLParser::CreateFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateFunction(this);
}

void MySQLParser::CreateFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateFunction(this);
}


antlrcpp::Any MySQLParser::CreateFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateFunction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateFunctionContext* MySQLParser::createFunction() {
  CreateFunctionContext *_localctx = _tracker.createInstance<CreateFunctionContext>(_ctx, getState());
  enterRule(_localctx, 34, MySQLParser::RuleCreateFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(954);
    match(MySQLParser::CREATE);
    setState(956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFINER) {
      setState(955);
      ownerStatement();
    }
    setState(958);
    match(MySQLParser::FUNCTION);
    setState(959);
    fullId();
    setState(960);
    match(MySQLParser::LR_BRACKET);
    setState(962);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(961);
      functionParameter();
    }
    setState(968);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(964);
      match(MySQLParser::COMMA);
      setState(965);
      functionParameter();
      setState(970);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(971);
    match(MySQLParser::RR_BRACKET);
    setState(972);
    match(MySQLParser::RETURNS);
    setState(973);
    dataType();
    setState(977);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(974);
        routineOption(); 
      }
      setState(979);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(980);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateServerContext ------------------------------------------------------------------

MySQLParser::CreateServerContext::CreateServerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateServerContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateServerContext::SERVER() {
  return getToken(MySQLParser::SERVER, 0);
}

MySQLParser::UidContext* MySQLParser::CreateServerContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::CreateServerContext::FOREIGN() {
  return getToken(MySQLParser::FOREIGN, 0);
}

tree::TerminalNode* MySQLParser::CreateServerContext::DATA() {
  return getToken(MySQLParser::DATA, 0);
}

tree::TerminalNode* MySQLParser::CreateServerContext::WRAPPER() {
  return getToken(MySQLParser::WRAPPER, 0);
}

tree::TerminalNode* MySQLParser::CreateServerContext::OPTIONS() {
  return getToken(MySQLParser::OPTIONS, 0);
}

std::vector<MySQLParser::ServerOptionContext *> MySQLParser::CreateServerContext::serverOption() {
  return getRuleContexts<MySQLParser::ServerOptionContext>();
}

MySQLParser::ServerOptionContext* MySQLParser::CreateServerContext::serverOption(size_t i) {
  return getRuleContext<MySQLParser::ServerOptionContext>(i);
}

tree::TerminalNode* MySQLParser::CreateServerContext::MYSQL() {
  return getToken(MySQLParser::MYSQL, 0);
}

tree::TerminalNode* MySQLParser::CreateServerContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::CreateServerContext::getRuleIndex() const {
  return MySQLParser::RuleCreateServer;
}

void MySQLParser::CreateServerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateServer(this);
}

void MySQLParser::CreateServerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateServer(this);
}


antlrcpp::Any MySQLParser::CreateServerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateServer(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateServerContext* MySQLParser::createServer() {
  CreateServerContext *_localctx = _tracker.createInstance<CreateServerContext>(_ctx, getState());
  enterRule(_localctx, 36, MySQLParser::RuleCreateServer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    match(MySQLParser::CREATE);
    setState(983);
    match(MySQLParser::SERVER);
    setState(984);
    uid();
    setState(985);
    match(MySQLParser::FOREIGN);
    setState(986);
    match(MySQLParser::DATA);
    setState(987);
    match(MySQLParser::WRAPPER);
    setState(988);
    dynamic_cast<CreateServerContext *>(_localctx)->wrapperName = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::MYSQL || _la == MySQLParser::STRING_LITERAL)) {
      dynamic_cast<CreateServerContext *>(_localctx)->wrapperName = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(989);
    match(MySQLParser::OPTIONS);
    setState(990);
    match(MySQLParser::LR_BRACKET);
    setState(991);
    serverOption();
    setState(996);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(992);
      match(MySQLParser::COMMA);
      setState(993);
      serverOption();
      setState(998);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(999);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTableContext ------------------------------------------------------------------

MySQLParser::CreateTableContext::CreateTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::CreateTableContext::getRuleIndex() const {
  return MySQLParser::RuleCreateTable;
}

void MySQLParser::CreateTableContext::copyFrom(CreateTableContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CopyCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CopyCreateTableContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CopyCreateTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

std::vector<MySQLParser::TableNameContext *> MySQLParser::CopyCreateTableContext::tableName() {
  return getRuleContexts<MySQLParser::TableNameContext>();
}

MySQLParser::TableNameContext* MySQLParser::CopyCreateTableContext::tableName(size_t i) {
  return getRuleContext<MySQLParser::TableNameContext>(i);
}

tree::TerminalNode* MySQLParser::CopyCreateTableContext::LIKE() {
  return getToken(MySQLParser::LIKE, 0);
}

tree::TerminalNode* MySQLParser::CopyCreateTableContext::TEMPORARY() {
  return getToken(MySQLParser::TEMPORARY, 0);
}

MySQLParser::IfNotExistsContext* MySQLParser::CopyCreateTableContext::ifNotExists() {
  return getRuleContext<MySQLParser::IfNotExistsContext>(0);
}

MySQLParser::CopyCreateTableContext::CopyCreateTableContext(CreateTableContext *ctx) { copyFrom(ctx); }

void MySQLParser::CopyCreateTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopyCreateTable(this);
}
void MySQLParser::CopyCreateTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopyCreateTable(this);
}

antlrcpp::Any MySQLParser::CopyCreateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCopyCreateTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ColumnCreateTableContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::ColumnCreateTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TableNameContext* MySQLParser::ColumnCreateTableContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::CreateDefinitionsContext* MySQLParser::ColumnCreateTableContext::createDefinitions() {
  return getRuleContext<MySQLParser::CreateDefinitionsContext>(0);
}

tree::TerminalNode* MySQLParser::ColumnCreateTableContext::TEMPORARY() {
  return getToken(MySQLParser::TEMPORARY, 0);
}

MySQLParser::IfNotExistsContext* MySQLParser::ColumnCreateTableContext::ifNotExists() {
  return getRuleContext<MySQLParser::IfNotExistsContext>(0);
}

std::vector<MySQLParser::TableOptionContext *> MySQLParser::ColumnCreateTableContext::tableOption() {
  return getRuleContexts<MySQLParser::TableOptionContext>();
}

MySQLParser::TableOptionContext* MySQLParser::ColumnCreateTableContext::tableOption(size_t i) {
  return getRuleContext<MySQLParser::TableOptionContext>(i);
}

MySQLParser::PartitionDefinitionsContext* MySQLParser::ColumnCreateTableContext::partitionDefinitions() {
  return getRuleContext<MySQLParser::PartitionDefinitionsContext>(0);
}

MySQLParser::ColumnCreateTableContext::ColumnCreateTableContext(CreateTableContext *ctx) { copyFrom(ctx); }

void MySQLParser::ColumnCreateTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnCreateTable(this);
}
void MySQLParser::ColumnCreateTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnCreateTable(this);
}

antlrcpp::Any MySQLParser::ColumnCreateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnCreateTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QueryCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::QueryCreateTableContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::QueryCreateTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TableNameContext* MySQLParser::QueryCreateTableContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::SelectStatementContext* MySQLParser::QueryCreateTableContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySQLParser::QueryCreateTableContext::TEMPORARY() {
  return getToken(MySQLParser::TEMPORARY, 0);
}

MySQLParser::IfNotExistsContext* MySQLParser::QueryCreateTableContext::ifNotExists() {
  return getRuleContext<MySQLParser::IfNotExistsContext>(0);
}

MySQLParser::CreateDefinitionsContext* MySQLParser::QueryCreateTableContext::createDefinitions() {
  return getRuleContext<MySQLParser::CreateDefinitionsContext>(0);
}

std::vector<MySQLParser::TableOptionContext *> MySQLParser::QueryCreateTableContext::tableOption() {
  return getRuleContexts<MySQLParser::TableOptionContext>();
}

MySQLParser::TableOptionContext* MySQLParser::QueryCreateTableContext::tableOption(size_t i) {
  return getRuleContext<MySQLParser::TableOptionContext>(i);
}

MySQLParser::PartitionDefinitionsContext* MySQLParser::QueryCreateTableContext::partitionDefinitions() {
  return getRuleContext<MySQLParser::PartitionDefinitionsContext>(0);
}

tree::TerminalNode* MySQLParser::QueryCreateTableContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

tree::TerminalNode* MySQLParser::QueryCreateTableContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

tree::TerminalNode* MySQLParser::QueryCreateTableContext::REPLACE() {
  return getToken(MySQLParser::REPLACE, 0);
}

MySQLParser::QueryCreateTableContext::QueryCreateTableContext(CreateTableContext *ctx) { copyFrom(ctx); }

void MySQLParser::QueryCreateTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryCreateTable(this);
}
void MySQLParser::QueryCreateTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryCreateTable(this);
}

antlrcpp::Any MySQLParser::QueryCreateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitQueryCreateTable(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::CreateTableContext* MySQLParser::createTable() {
  CreateTableContext *_localctx = _tracker.createInstance<CreateTableContext>(_ctx, getState());
  enterRule(_localctx, 38, MySQLParser::RuleCreateTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1079);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<CreateTableContext *>(_tracker.createInstance<MySQLParser::CopyCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1001);
      match(MySQLParser::CREATE);
      setState(1003);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::TEMPORARY) {
        setState(1002);
        match(MySQLParser::TEMPORARY);
      }
      setState(1005);
      match(MySQLParser::TABLE);
      setState(1007);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IF) {
        setState(1006);
        ifNotExists();
      }
      setState(1009);
      tableName();
      setState(1017);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::LIKE: {
          setState(1010);
          match(MySQLParser::LIKE);
          setState(1011);
          tableName();
          break;
        }

        case MySQLParser::LR_BRACKET: {
          setState(1012);
          match(MySQLParser::LR_BRACKET);
          setState(1013);
          match(MySQLParser::LIKE);
          setState(1014);
          dynamic_cast<CopyCreateTableContext *>(_localctx)->parenthesisTable = tableName();
          setState(1015);
          match(MySQLParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<CreateTableContext *>(_tracker.createInstance<MySQLParser::QueryCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1019);
      match(MySQLParser::CREATE);
      setState(1021);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::TEMPORARY) {
        setState(1020);
        match(MySQLParser::TEMPORARY);
      }
      setState(1023);
      match(MySQLParser::TABLE);
      setState(1025);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IF) {
        setState(1024);
        ifNotExists();
      }
      setState(1027);
      tableName();
      setState(1029);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
      case 1: {
        setState(1028);
        createDefinitions();
        break;
      }

      }
      setState(1041);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 22) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 22)) & ((1ULL << (MySQLParser::CHARACTER - 22))
        | (1ULL << (MySQLParser::COLLATE - 22))
        | (1ULL << (MySQLParser::DEFAULT - 22))
        | (1ULL << (MySQLParser::INDEX - 22)))) != 0) || _la == MySQLParser::UNION || ((((_la - 262) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 262)) & ((1ULL << (MySQLParser::AUTO_INCREMENT - 262))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 262))
        | (1ULL << (MySQLParser::CHECKSUM - 262))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 262))
        | (1ULL << (MySQLParser::COMMENT - 262))
        | (1ULL << (MySQLParser::COMPRESSION - 262))
        | (1ULL << (MySQLParser::CONNECTION - 262))
        | (1ULL << (MySQLParser::DATA - 262))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 262))
        | (1ULL << (MySQLParser::ENCRYPTION - 262))
        | (1ULL << (MySQLParser::ENGINE - 262)))) != 0) || ((((_la - 360) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 360)) & ((1ULL << (MySQLParser::INSERT_METHOD - 360))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 360))
        | (1ULL << (MySQLParser::MAX_ROWS - 360))
        | (1ULL << (MySQLParser::MIN_ROWS - 360)))) != 0) || ((((_la - 436) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 436)) & ((1ULL << (MySQLParser::PACK_KEYS - 436))
        | (1ULL << (MySQLParser::PASSWORD - 436))
        | (1ULL << (MySQLParser::ROW_FORMAT - 436)))) != 0) || ((((_la - 512) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 512)) & ((1ULL << (MySQLParser::STATS_AUTO_RECALC - 512))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 512))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 512))
        | (1ULL << (MySQLParser::STORAGE - 512))
        | (1ULL << (MySQLParser::TABLESPACE - 512)))) != 0) || _la == MySQLParser::CHARSET) {
        setState(1031);
        tableOption();
        setState(1038);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 22) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 22)) & ((1ULL << (MySQLParser::CHARACTER - 22))
          | (1ULL << (MySQLParser::COLLATE - 22))
          | (1ULL << (MySQLParser::DEFAULT - 22))
          | (1ULL << (MySQLParser::INDEX - 22)))) != 0) || _la == MySQLParser::UNION || ((((_la - 262) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 262)) & ((1ULL << (MySQLParser::AUTO_INCREMENT - 262))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 262))
          | (1ULL << (MySQLParser::CHECKSUM - 262))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 262))
          | (1ULL << (MySQLParser::COMMENT - 262))
          | (1ULL << (MySQLParser::COMPRESSION - 262))
          | (1ULL << (MySQLParser::CONNECTION - 262))
          | (1ULL << (MySQLParser::DATA - 262))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 262))
          | (1ULL << (MySQLParser::ENCRYPTION - 262))
          | (1ULL << (MySQLParser::ENGINE - 262)))) != 0) || ((((_la - 360) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 360)) & ((1ULL << (MySQLParser::INSERT_METHOD - 360))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 360))
          | (1ULL << (MySQLParser::MAX_ROWS - 360))
          | (1ULL << (MySQLParser::MIN_ROWS - 360)))) != 0) || ((((_la - 436) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 436)) & ((1ULL << (MySQLParser::PACK_KEYS - 436))
          | (1ULL << (MySQLParser::PASSWORD - 436))
          | (1ULL << (MySQLParser::ROW_FORMAT - 436)))) != 0) || ((((_la - 512) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 512)) & ((1ULL << (MySQLParser::STATS_AUTO_RECALC - 512))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 512))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 512))
          | (1ULL << (MySQLParser::STORAGE - 512))
          | (1ULL << (MySQLParser::TABLESPACE - 512)))) != 0) || _la == MySQLParser::CHARSET || _la == MySQLParser::COMMA) {
          setState(1033);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::COMMA) {
            setState(1032);
            match(MySQLParser::COMMA);
          }
          setState(1035);
          tableOption();
          setState(1040);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(1044);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::PARTITION) {
        setState(1043);
        partitionDefinitions();
      }
      setState(1047);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IGNORE

      || _la == MySQLParser::REPLACE) {
        setState(1046);
        dynamic_cast<QueryCreateTableContext *>(_localctx)->keyViolate = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::IGNORE

        || _la == MySQLParser::REPLACE)) {
          dynamic_cast<QueryCreateTableContext *>(_localctx)->keyViolate = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1050);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(1049);
        match(MySQLParser::AS);
      }
      setState(1052);
      selectStatement();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<CreateTableContext *>(_tracker.createInstance<MySQLParser::ColumnCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1054);
      match(MySQLParser::CREATE);
      setState(1056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::TEMPORARY) {
        setState(1055);
        match(MySQLParser::TEMPORARY);
      }
      setState(1058);
      match(MySQLParser::TABLE);
      setState(1060);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IF) {
        setState(1059);
        ifNotExists();
      }
      setState(1062);
      tableName();
      setState(1063);
      createDefinitions();
      setState(1074);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
      case 1: {
        setState(1064);
        tableOption();
        setState(1071);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1066);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySQLParser::COMMA) {
              setState(1065);
              match(MySQLParser::COMMA);
            }
            setState(1068);
            tableOption(); 
          }
          setState(1073);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
        }
        break;
      }

      }
      setState(1077);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::PARTITION) {
        setState(1076);
        partitionDefinitions();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTablespaceInnodbContext ------------------------------------------------------------------

MySQLParser::CreateTablespaceInnodbContext::CreateTablespaceInnodbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateTablespaceInnodbContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceInnodbContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::UidContext* MySQLParser::CreateTablespaceInnodbContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceInnodbContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceInnodbContext::DATAFILE() {
  return getToken(MySQLParser::DATAFILE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceInnodbContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceInnodbContext::FILE_BLOCK_SIZE() {
  return getToken(MySQLParser::FILE_BLOCK_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceInnodbContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::CreateTablespaceInnodbContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

MySQLParser::FileSizeLiteralContext* MySQLParser::CreateTablespaceInnodbContext::fileSizeLiteral() {
  return getRuleContext<MySQLParser::FileSizeLiteralContext>(0);
}


size_t MySQLParser::CreateTablespaceInnodbContext::getRuleIndex() const {
  return MySQLParser::RuleCreateTablespaceInnodb;
}

void MySQLParser::CreateTablespaceInnodbContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateTablespaceInnodb(this);
}

void MySQLParser::CreateTablespaceInnodbContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateTablespaceInnodb(this);
}


antlrcpp::Any MySQLParser::CreateTablespaceInnodbContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateTablespaceInnodb(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateTablespaceInnodbContext* MySQLParser::createTablespaceInnodb() {
  CreateTablespaceInnodbContext *_localctx = _tracker.createInstance<CreateTablespaceInnodbContext>(_ctx, getState());
  enterRule(_localctx, 40, MySQLParser::RuleCreateTablespaceInnodb);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1081);
    match(MySQLParser::CREATE);
    setState(1082);
    match(MySQLParser::TABLESPACE);
    setState(1083);
    uid();
    setState(1084);
    match(MySQLParser::ADD);
    setState(1085);
    match(MySQLParser::DATAFILE);
    setState(1086);
    dynamic_cast<CreateTablespaceInnodbContext *>(_localctx)->datafile = match(MySQLParser::STRING_LITERAL);
    setState(1090);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FILE_BLOCK_SIZE) {
      setState(1087);
      match(MySQLParser::FILE_BLOCK_SIZE);
      setState(1088);
      match(MySQLParser::EQUAL_SYMBOL);
      setState(1089);
      dynamic_cast<CreateTablespaceInnodbContext *>(_localctx)->fileBlockSize = fileSizeLiteral();
    }
    setState(1097);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ENGINE) {
      setState(1092);
      match(MySQLParser::ENGINE);
      setState(1094);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1093);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1096);
      engineName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTablespaceNdbContext ------------------------------------------------------------------

MySQLParser::CreateTablespaceNdbContext::CreateTablespaceNdbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::CreateTablespaceNdbContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::CreateTablespaceNdbContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::DATAFILE() {
  return getToken(MySQLParser::DATAFILE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::USE() {
  return getToken(MySQLParser::USE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::LOGFILE() {
  return getToken(MySQLParser::LOGFILE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::GROUP() {
  return getToken(MySQLParser::GROUP, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::CreateTablespaceNdbContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateTablespaceNdbContext::STRING_LITERAL() {
  return getTokens(MySQLParser::STRING_LITERAL);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::STRING_LITERAL(size_t i) {
  return getToken(MySQLParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::EXTENT_SIZE() {
  return getToken(MySQLParser::EXTENT_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::INITIAL_SIZE() {
  return getToken(MySQLParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::AUTOEXTEND_SIZE() {
  return getToken(MySQLParser::AUTOEXTEND_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::MAX_SIZE() {
  return getToken(MySQLParser::MAX_SIZE, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::NODEGROUP() {
  return getToken(MySQLParser::NODEGROUP, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::WAIT() {
  return getToken(MySQLParser::WAIT, 0);
}

tree::TerminalNode* MySQLParser::CreateTablespaceNdbContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

std::vector<MySQLParser::FileSizeLiteralContext *> MySQLParser::CreateTablespaceNdbContext::fileSizeLiteral() {
  return getRuleContexts<MySQLParser::FileSizeLiteralContext>();
}

MySQLParser::FileSizeLiteralContext* MySQLParser::CreateTablespaceNdbContext::fileSizeLiteral(size_t i) {
  return getRuleContext<MySQLParser::FileSizeLiteralContext>(i);
}


size_t MySQLParser::CreateTablespaceNdbContext::getRuleIndex() const {
  return MySQLParser::RuleCreateTablespaceNdb;
}

void MySQLParser::CreateTablespaceNdbContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateTablespaceNdb(this);
}

void MySQLParser::CreateTablespaceNdbContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateTablespaceNdb(this);
}


antlrcpp::Any MySQLParser::CreateTablespaceNdbContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateTablespaceNdb(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateTablespaceNdbContext* MySQLParser::createTablespaceNdb() {
  CreateTablespaceNdbContext *_localctx = _tracker.createInstance<CreateTablespaceNdbContext>(_ctx, getState());
  enterRule(_localctx, 42, MySQLParser::RuleCreateTablespaceNdb);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1099);
    match(MySQLParser::CREATE);
    setState(1100);
    match(MySQLParser::TABLESPACE);
    setState(1101);
    uid();
    setState(1102);
    match(MySQLParser::ADD);
    setState(1103);
    match(MySQLParser::DATAFILE);
    setState(1104);
    dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->datafile = match(MySQLParser::STRING_LITERAL);
    setState(1105);
    match(MySQLParser::USE);
    setState(1106);
    match(MySQLParser::LOGFILE);
    setState(1107);
    match(MySQLParser::GROUP);
    setState(1108);
    uid();
    setState(1114);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EXTENT_SIZE) {
      setState(1109);
      match(MySQLParser::EXTENT_SIZE);
      setState(1111);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1110);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1113);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->extentSize = fileSizeLiteral();
    }
    setState(1121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::INITIAL_SIZE) {
      setState(1116);
      match(MySQLParser::INITIAL_SIZE);
      setState(1118);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1117);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1120);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->initialSize = fileSizeLiteral();
    }
    setState(1128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::AUTOEXTEND_SIZE) {
      setState(1123);
      match(MySQLParser::AUTOEXTEND_SIZE);
      setState(1125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1124);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1127);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->autoextendSize = fileSizeLiteral();
    }
    setState(1135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::MAX_SIZE) {
      setState(1130);
      match(MySQLParser::MAX_SIZE);
      setState(1132);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1131);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1134);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->maxSize = fileSizeLiteral();
    }
    setState(1142);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::NODEGROUP) {
      setState(1137);
      match(MySQLParser::NODEGROUP);
      setState(1139);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1138);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1141);
      uid();
    }
    setState(1145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WAIT) {
      setState(1144);
      match(MySQLParser::WAIT);
    }
    setState(1152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::COMMENT) {
      setState(1147);
      match(MySQLParser::COMMENT);
      setState(1149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1148);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1151);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->comment = match(MySQLParser::STRING_LITERAL);
    }
    setState(1154);
    match(MySQLParser::ENGINE);
    setState(1156);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EQUAL_SYMBOL) {
      setState(1155);
      match(MySQLParser::EQUAL_SYMBOL);
    }
    setState(1158);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTriggerContext ------------------------------------------------------------------

MySQLParser::CreateTriggerContext::CreateTriggerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::TRIGGER() {
  return getToken(MySQLParser::TRIGGER, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

MySQLParser::TableNameContext* MySQLParser::CreateTriggerContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::EACH() {
  return getToken(MySQLParser::EACH, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::ROW() {
  return getToken(MySQLParser::ROW, 0);
}

MySQLParser::RoutineBodyContext* MySQLParser::CreateTriggerContext::routineBody() {
  return getRuleContext<MySQLParser::RoutineBodyContext>(0);
}

std::vector<MySQLParser::FullIdContext *> MySQLParser::CreateTriggerContext::fullId() {
  return getRuleContexts<MySQLParser::FullIdContext>();
}

MySQLParser::FullIdContext* MySQLParser::CreateTriggerContext::fullId(size_t i) {
  return getRuleContext<MySQLParser::FullIdContext>(i);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::BEFORE() {
  return getToken(MySQLParser::BEFORE, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::AFTER() {
  return getToken(MySQLParser::AFTER, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::INSERT() {
  return getToken(MySQLParser::INSERT, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::DELETE() {
  return getToken(MySQLParser::DELETE, 0);
}

MySQLParser::OwnerStatementContext* MySQLParser::CreateTriggerContext::ownerStatement() {
  return getRuleContext<MySQLParser::OwnerStatementContext>(0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::FOLLOWS() {
  return getToken(MySQLParser::FOLLOWS, 0);
}

tree::TerminalNode* MySQLParser::CreateTriggerContext::PRECEDES() {
  return getToken(MySQLParser::PRECEDES, 0);
}


size_t MySQLParser::CreateTriggerContext::getRuleIndex() const {
  return MySQLParser::RuleCreateTrigger;
}

void MySQLParser::CreateTriggerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateTrigger(this);
}

void MySQLParser::CreateTriggerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateTrigger(this);
}


antlrcpp::Any MySQLParser::CreateTriggerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateTrigger(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateTriggerContext* MySQLParser::createTrigger() {
  CreateTriggerContext *_localctx = _tracker.createInstance<CreateTriggerContext>(_ctx, getState());
  enterRule(_localctx, 44, MySQLParser::RuleCreateTrigger);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1160);
    match(MySQLParser::CREATE);
    setState(1162);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFINER) {
      setState(1161);
      ownerStatement();
    }
    setState(1164);
    match(MySQLParser::TRIGGER);
    setState(1165);
    dynamic_cast<CreateTriggerContext *>(_localctx)->thisTrigger = fullId();
    setState(1166);
    dynamic_cast<CreateTriggerContext *>(_localctx)->triggerTime = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::BEFORE || _la == MySQLParser::AFTER)) {
      dynamic_cast<CreateTriggerContext *>(_localctx)->triggerTime = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1167);
    dynamic_cast<CreateTriggerContext *>(_localctx)->triggerEvent = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::DELETE

    || _la == MySQLParser::INSERT || _la == MySQLParser::UPDATE)) {
      dynamic_cast<CreateTriggerContext *>(_localctx)->triggerEvent = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1168);
    match(MySQLParser::ON);
    setState(1169);
    tableName();
    setState(1170);
    match(MySQLParser::FOR);
    setState(1171);
    match(MySQLParser::EACH);
    setState(1172);
    match(MySQLParser::ROW);
    setState(1175);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(1173);
      dynamic_cast<CreateTriggerContext *>(_localctx)->triggerPlace = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FOLLOWS || _la == MySQLParser::PRECEDES)) {
        dynamic_cast<CreateTriggerContext *>(_localctx)->triggerPlace = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1174);
      dynamic_cast<CreateTriggerContext *>(_localctx)->otherTrigger = fullId();
      break;
    }

    }
    setState(1177);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateViewContext ------------------------------------------------------------------

MySQLParser::CreateViewContext::CreateViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateViewContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::VIEW() {
  return getToken(MySQLParser::VIEW, 0);
}

MySQLParser::FullIdContext* MySQLParser::CreateViewContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::SelectStatementContext* MySQLParser::CreateViewContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::OR() {
  return getToken(MySQLParser::OR, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::REPLACE() {
  return getToken(MySQLParser::REPLACE, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::ALGORITHM() {
  return getToken(MySQLParser::ALGORITHM, 0);
}

MySQLParser::OwnerStatementContext* MySQLParser::CreateViewContext::ownerStatement() {
  return getRuleContext<MySQLParser::OwnerStatementContext>(0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::SQL() {
  return getToken(MySQLParser::SQL, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::SECURITY() {
  return getToken(MySQLParser::SECURITY, 0);
}

MySQLParser::UidListContext* MySQLParser::CreateViewContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::CHECK() {
  return getToken(MySQLParser::CHECK, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::OPTION() {
  return getToken(MySQLParser::OPTION, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::UNDEFINED() {
  return getToken(MySQLParser::UNDEFINED, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::MERGE() {
  return getToken(MySQLParser::MERGE, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::TEMPTABLE() {
  return getToken(MySQLParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::DEFINER() {
  return getToken(MySQLParser::DEFINER, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::INVOKER() {
  return getToken(MySQLParser::INVOKER, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::CASCADED() {
  return getToken(MySQLParser::CASCADED, 0);
}

tree::TerminalNode* MySQLParser::CreateViewContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}


size_t MySQLParser::CreateViewContext::getRuleIndex() const {
  return MySQLParser::RuleCreateView;
}

void MySQLParser::CreateViewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateView(this);
}

void MySQLParser::CreateViewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateView(this);
}


antlrcpp::Any MySQLParser::CreateViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateView(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateViewContext* MySQLParser::createView() {
  CreateViewContext *_localctx = _tracker.createInstance<CreateViewContext>(_ctx, getState());
  enterRule(_localctx, 46, MySQLParser::RuleCreateView);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1179);
    match(MySQLParser::CREATE);
    setState(1182);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::OR) {
      setState(1180);
      match(MySQLParser::OR);
      setState(1181);
      match(MySQLParser::REPLACE);
    }
    setState(1187);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ALGORITHM) {
      setState(1184);
      match(MySQLParser::ALGORITHM);
      setState(1185);
      match(MySQLParser::EQUAL_SYMBOL);
      setState(1186);
      dynamic_cast<CreateViewContext *>(_localctx)->algType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::MERGE || _la == MySQLParser::TEMPTABLE

      || _la == MySQLParser::UNDEFINED)) {
        dynamic_cast<CreateViewContext *>(_localctx)->algType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1190);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFINER) {
      setState(1189);
      ownerStatement();
    }
    setState(1195);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::SQL) {
      setState(1192);
      match(MySQLParser::SQL);
      setState(1193);
      match(MySQLParser::SECURITY);
      setState(1194);
      dynamic_cast<CreateViewContext *>(_localctx)->secContext = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFINER

      || _la == MySQLParser::INVOKER)) {
        dynamic_cast<CreateViewContext *>(_localctx)->secContext = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1197);
    match(MySQLParser::VIEW);
    setState(1198);
    fullId();
    setState(1203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LR_BRACKET) {
      setState(1199);
      match(MySQLParser::LR_BRACKET);
      setState(1200);
      uidList();
      setState(1201);
      match(MySQLParser::RR_BRACKET);
    }
    setState(1205);
    match(MySQLParser::AS);
    setState(1206);
    selectStatement();
    setState(1213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WITH) {
      setState(1207);
      match(MySQLParser::WITH);
      setState(1209);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CASCADED || _la == MySQLParser::LOCAL) {
        setState(1208);
        dynamic_cast<CreateViewContext *>(_localctx)->checkOption = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::CASCADED || _la == MySQLParser::LOCAL)) {
          dynamic_cast<CreateViewContext *>(_localctx)->checkOption = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1211);
      match(MySQLParser::CHECK);
      setState(1212);
      match(MySQLParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDatabaseOptionContext ------------------------------------------------------------------

MySQLParser::CreateDatabaseOptionContext::CreateDatabaseOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateDatabaseOptionContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::CreateDatabaseOptionContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::CreateDatabaseOptionContext::CHARSET() {
  return getToken(MySQLParser::CHARSET, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::CreateDatabaseOptionContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateDatabaseOptionContext::DEFAULT() {
  return getTokens(MySQLParser::DEFAULT);
}

tree::TerminalNode* MySQLParser::CreateDatabaseOptionContext::DEFAULT(size_t i) {
  return getToken(MySQLParser::DEFAULT, i);
}

tree::TerminalNode* MySQLParser::CreateDatabaseOptionContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::CreateDatabaseOptionContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}


size_t MySQLParser::CreateDatabaseOptionContext::getRuleIndex() const {
  return MySQLParser::RuleCreateDatabaseOption;
}

void MySQLParser::CreateDatabaseOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateDatabaseOption(this);
}

void MySQLParser::CreateDatabaseOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateDatabaseOption(this);
}


antlrcpp::Any MySQLParser::CreateDatabaseOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateDatabaseOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateDatabaseOptionContext* MySQLParser::createDatabaseOption() {
  CreateDatabaseOptionContext *_localctx = _tracker.createInstance<CreateDatabaseOptionContext>(_ctx, getState());
  enterRule(_localctx, 48, MySQLParser::RuleCreateDatabaseOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1238);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1216);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DEFAULT) {
        setState(1215);
        match(MySQLParser::DEFAULT);
      }
      setState(1221);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::CHARACTER: {
          setState(1218);
          match(MySQLParser::CHARACTER);
          setState(1219);
          match(MySQLParser::SET);
          break;
        }

        case MySQLParser::CHARSET: {
          setState(1220);
          match(MySQLParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1224);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1223);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1228);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::BINARY:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL: {
          setState(1226);
          charsetName();
          break;
        }

        case MySQLParser::DEFAULT: {
          setState(1227);
          match(MySQLParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1231);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DEFAULT) {
        setState(1230);
        match(MySQLParser::DEFAULT);
      }
      setState(1233);
      match(MySQLParser::COLLATE);
      setState(1235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1234);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1237);
      collationName();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OwnerStatementContext ------------------------------------------------------------------

MySQLParser::OwnerStatementContext::OwnerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::OwnerStatementContext::DEFINER() {
  return getToken(MySQLParser::DEFINER, 0);
}

MySQLParser::UserNameContext* MySQLParser::OwnerStatementContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

tree::TerminalNode* MySQLParser::OwnerStatementContext::CURRENT_USER() {
  return getToken(MySQLParser::CURRENT_USER, 0);
}


size_t MySQLParser::OwnerStatementContext::getRuleIndex() const {
  return MySQLParser::RuleOwnerStatement;
}

void MySQLParser::OwnerStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwnerStatement(this);
}

void MySQLParser::OwnerStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwnerStatement(this);
}


antlrcpp::Any MySQLParser::OwnerStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitOwnerStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::OwnerStatementContext* MySQLParser::ownerStatement() {
  OwnerStatementContext *_localctx = _tracker.createInstance<OwnerStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, MySQLParser::RuleOwnerStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1240);
    match(MySQLParser::DEFINER);
    setState(1241);
    match(MySQLParser::EQUAL_SYMBOL);
    setState(1248);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::ID:
      case MySQLParser::STRING_USER_NAME: {
        setState(1242);
        userName();
        break;
      }

      case MySQLParser::CURRENT_USER: {
        setState(1243);
        match(MySQLParser::CURRENT_USER);
        setState(1246);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::LR_BRACKET) {
          setState(1244);
          match(MySQLParser::LR_BRACKET);
          setState(1245);
          match(MySQLParser::RR_BRACKET);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScheduleExpressionContext ------------------------------------------------------------------

MySQLParser::ScheduleExpressionContext::ScheduleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::ScheduleExpressionContext::getRuleIndex() const {
  return MySQLParser::RuleScheduleExpression;
}

void MySQLParser::ScheduleExpressionContext::copyFrom(ScheduleExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PreciseScheduleContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PreciseScheduleContext::AT() {
  return getToken(MySQLParser::AT, 0);
}

MySQLParser::TimestampValueContext* MySQLParser::PreciseScheduleContext::timestampValue() {
  return getRuleContext<MySQLParser::TimestampValueContext>(0);
}

std::vector<MySQLParser::IntervalExprContext *> MySQLParser::PreciseScheduleContext::intervalExpr() {
  return getRuleContexts<MySQLParser::IntervalExprContext>();
}

MySQLParser::IntervalExprContext* MySQLParser::PreciseScheduleContext::intervalExpr(size_t i) {
  return getRuleContext<MySQLParser::IntervalExprContext>(i);
}

MySQLParser::PreciseScheduleContext::PreciseScheduleContext(ScheduleExpressionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PreciseScheduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreciseSchedule(this);
}
void MySQLParser::PreciseScheduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreciseSchedule(this);
}

antlrcpp::Any MySQLParser::PreciseScheduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPreciseSchedule(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntervalScheduleContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::IntervalScheduleContext::EVERY() {
  return getToken(MySQLParser::EVERY, 0);
}

MySQLParser::IntervalTypeContext* MySQLParser::IntervalScheduleContext::intervalType() {
  return getRuleContext<MySQLParser::IntervalTypeContext>(0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::IntervalScheduleContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::IntervalScheduleContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::IntervalScheduleContext::STARTS() {
  return getToken(MySQLParser::STARTS, 0);
}

tree::TerminalNode* MySQLParser::IntervalScheduleContext::ENDS() {
  return getToken(MySQLParser::ENDS, 0);
}

std::vector<MySQLParser::TimestampValueContext *> MySQLParser::IntervalScheduleContext::timestampValue() {
  return getRuleContexts<MySQLParser::TimestampValueContext>();
}

MySQLParser::TimestampValueContext* MySQLParser::IntervalScheduleContext::timestampValue(size_t i) {
  return getRuleContext<MySQLParser::TimestampValueContext>(i);
}

std::vector<MySQLParser::IntervalExprContext *> MySQLParser::IntervalScheduleContext::intervalExpr() {
  return getRuleContexts<MySQLParser::IntervalExprContext>();
}

MySQLParser::IntervalExprContext* MySQLParser::IntervalScheduleContext::intervalExpr(size_t i) {
  return getRuleContext<MySQLParser::IntervalExprContext>(i);
}

MySQLParser::IntervalScheduleContext::IntervalScheduleContext(ScheduleExpressionContext *ctx) { copyFrom(ctx); }

void MySQLParser::IntervalScheduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalSchedule(this);
}
void MySQLParser::IntervalScheduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalSchedule(this);
}

antlrcpp::Any MySQLParser::IntervalScheduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIntervalSchedule(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::ScheduleExpressionContext* MySQLParser::scheduleExpression() {
  ScheduleExpressionContext *_localctx = _tracker.createInstance<ScheduleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 52, MySQLParser::RuleScheduleExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1284);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::AT: {
        _localctx = dynamic_cast<ScheduleExpressionContext *>(_tracker.createInstance<MySQLParser::PreciseScheduleContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1250);
        match(MySQLParser::AT);
        setState(1251);
        timestampValue();
        setState(1255);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::PLUS) {
          setState(1252);
          intervalExpr();
          setState(1257);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySQLParser::EVERY: {
        _localctx = dynamic_cast<ScheduleExpressionContext *>(_tracker.createInstance<MySQLParser::IntervalScheduleContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1258);
        match(MySQLParser::EVERY);
        setState(1261);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
        case 1: {
          setState(1259);
          decimalLiteral();
          break;
        }

        case 2: {
          setState(1260);
          expression(0);
          break;
        }

        }
        setState(1263);
        intervalType();
        setState(1272);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::STARTS) {
          setState(1264);
          match(MySQLParser::STARTS);
          setState(1265);
          dynamic_cast<IntervalScheduleContext *>(_localctx)->startTimestamp = timestampValue();
          setState(1269);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySQLParser::PLUS) {
            setState(1266);
            dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext = intervalExpr();
            dynamic_cast<IntervalScheduleContext *>(_localctx)->startIntervals.push_back(dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext);
            setState(1271);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1282);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::ENDS) {
          setState(1274);
          match(MySQLParser::ENDS);
          setState(1275);
          dynamic_cast<IntervalScheduleContext *>(_localctx)->endTimestamp = timestampValue();
          setState(1279);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySQLParser::PLUS) {
            setState(1276);
            dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext = intervalExpr();
            dynamic_cast<IntervalScheduleContext *>(_localctx)->endIntervals.push_back(dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext);
            setState(1281);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimestampValueContext ------------------------------------------------------------------

MySQLParser::TimestampValueContext::TimestampValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TimestampValueContext::CURRENT_TIMESTAMP() {
  return getToken(MySQLParser::CURRENT_TIMESTAMP, 0);
}

MySQLParser::StringLiteralContext* MySQLParser::TimestampValueContext::stringLiteral() {
  return getRuleContext<MySQLParser::StringLiteralContext>(0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::TimestampValueContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::TimestampValueContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}


size_t MySQLParser::TimestampValueContext::getRuleIndex() const {
  return MySQLParser::RuleTimestampValue;
}

void MySQLParser::TimestampValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimestampValue(this);
}

void MySQLParser::TimestampValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimestampValue(this);
}


antlrcpp::Any MySQLParser::TimestampValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTimestampValue(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TimestampValueContext* MySQLParser::timestampValue() {
  TimestampValueContext *_localctx = _tracker.createInstance<TimestampValueContext>(_ctx, getState());
  enterRule(_localctx, 54, MySQLParser::RuleTimestampValue);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1290);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1286);
      match(MySQLParser::CURRENT_TIMESTAMP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1287);
      stringLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1288);
      decimalLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1289);
      expression(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalExprContext ------------------------------------------------------------------

MySQLParser::IntervalExprContext::IntervalExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IntervalExprContext::INTERVAL() {
  return getToken(MySQLParser::INTERVAL, 0);
}

MySQLParser::IntervalTypeContext* MySQLParser::IntervalExprContext::intervalType() {
  return getRuleContext<MySQLParser::IntervalTypeContext>(0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::IntervalExprContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::IntervalExprContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}


size_t MySQLParser::IntervalExprContext::getRuleIndex() const {
  return MySQLParser::RuleIntervalExpr;
}

void MySQLParser::IntervalExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalExpr(this);
}

void MySQLParser::IntervalExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalExpr(this);
}


antlrcpp::Any MySQLParser::IntervalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIntervalExpr(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IntervalExprContext* MySQLParser::intervalExpr() {
  IntervalExprContext *_localctx = _tracker.createInstance<IntervalExprContext>(_ctx, getState());
  enterRule(_localctx, 56, MySQLParser::RuleIntervalExpr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292);
    match(MySQLParser::PLUS);
    setState(1293);
    match(MySQLParser::INTERVAL);
    setState(1296);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      setState(1294);
      decimalLiteral();
      break;
    }

    case 2: {
      setState(1295);
      expression(0);
      break;
    }

    }
    setState(1298);
    intervalType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalTypeContext ------------------------------------------------------------------

MySQLParser::IntervalTypeContext::IntervalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::IntervalTypeBaseContext* MySQLParser::IntervalTypeContext::intervalTypeBase() {
  return getRuleContext<MySQLParser::IntervalTypeBaseContext>(0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::YEAR() {
  return getToken(MySQLParser::YEAR, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::YEAR_MONTH() {
  return getToken(MySQLParser::YEAR_MONTH, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::DAY_HOUR() {
  return getToken(MySQLParser::DAY_HOUR, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::DAY_MINUTE() {
  return getToken(MySQLParser::DAY_MINUTE, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::DAY_SECOND() {
  return getToken(MySQLParser::DAY_SECOND, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::HOUR_MINUTE() {
  return getToken(MySQLParser::HOUR_MINUTE, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::HOUR_SECOND() {
  return getToken(MySQLParser::HOUR_SECOND, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::MINUTE_SECOND() {
  return getToken(MySQLParser::MINUTE_SECOND, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::SECOND_MICROSECOND() {
  return getToken(MySQLParser::SECOND_MICROSECOND, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::MINUTE_MICROSECOND() {
  return getToken(MySQLParser::MINUTE_MICROSECOND, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::HOUR_MICROSECOND() {
  return getToken(MySQLParser::HOUR_MICROSECOND, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeContext::DAY_MICROSECOND() {
  return getToken(MySQLParser::DAY_MICROSECOND, 0);
}


size_t MySQLParser::IntervalTypeContext::getRuleIndex() const {
  return MySQLParser::RuleIntervalType;
}

void MySQLParser::IntervalTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalType(this);
}

void MySQLParser::IntervalTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalType(this);
}


antlrcpp::Any MySQLParser::IntervalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIntervalType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IntervalTypeContext* MySQLParser::intervalType() {
  IntervalTypeContext *_localctx = _tracker.createInstance<IntervalTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, MySQLParser::RuleIntervalType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1313);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND: {
        enterOuterAlt(_localctx, 1);
        setState(1300);
        intervalTypeBase();
        break;
      }

      case MySQLParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(1301);
        match(MySQLParser::YEAR);
        break;
      }

      case MySQLParser::YEAR_MONTH: {
        enterOuterAlt(_localctx, 3);
        setState(1302);
        match(MySQLParser::YEAR_MONTH);
        break;
      }

      case MySQLParser::DAY_HOUR: {
        enterOuterAlt(_localctx, 4);
        setState(1303);
        match(MySQLParser::DAY_HOUR);
        break;
      }

      case MySQLParser::DAY_MINUTE: {
        enterOuterAlt(_localctx, 5);
        setState(1304);
        match(MySQLParser::DAY_MINUTE);
        break;
      }

      case MySQLParser::DAY_SECOND: {
        enterOuterAlt(_localctx, 6);
        setState(1305);
        match(MySQLParser::DAY_SECOND);
        break;
      }

      case MySQLParser::HOUR_MINUTE: {
        enterOuterAlt(_localctx, 7);
        setState(1306);
        match(MySQLParser::HOUR_MINUTE);
        break;
      }

      case MySQLParser::HOUR_SECOND: {
        enterOuterAlt(_localctx, 8);
        setState(1307);
        match(MySQLParser::HOUR_SECOND);
        break;
      }

      case MySQLParser::MINUTE_SECOND: {
        enterOuterAlt(_localctx, 9);
        setState(1308);
        match(MySQLParser::MINUTE_SECOND);
        break;
      }

      case MySQLParser::SECOND_MICROSECOND: {
        enterOuterAlt(_localctx, 10);
        setState(1309);
        match(MySQLParser::SECOND_MICROSECOND);
        break;
      }

      case MySQLParser::MINUTE_MICROSECOND: {
        enterOuterAlt(_localctx, 11);
        setState(1310);
        match(MySQLParser::MINUTE_MICROSECOND);
        break;
      }

      case MySQLParser::HOUR_MICROSECOND: {
        enterOuterAlt(_localctx, 12);
        setState(1311);
        match(MySQLParser::HOUR_MICROSECOND);
        break;
      }

      case MySQLParser::DAY_MICROSECOND: {
        enterOuterAlt(_localctx, 13);
        setState(1312);
        match(MySQLParser::DAY_MICROSECOND);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnableTypeContext ------------------------------------------------------------------

MySQLParser::EnableTypeContext::EnableTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::EnableTypeContext::ENABLE() {
  return getToken(MySQLParser::ENABLE, 0);
}

tree::TerminalNode* MySQLParser::EnableTypeContext::DISABLE() {
  return getToken(MySQLParser::DISABLE, 0);
}

tree::TerminalNode* MySQLParser::EnableTypeContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

tree::TerminalNode* MySQLParser::EnableTypeContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}


size_t MySQLParser::EnableTypeContext::getRuleIndex() const {
  return MySQLParser::RuleEnableType;
}

void MySQLParser::EnableTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnableType(this);
}

void MySQLParser::EnableTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnableType(this);
}


antlrcpp::Any MySQLParser::EnableTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitEnableType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::EnableTypeContext* MySQLParser::enableType() {
  EnableTypeContext *_localctx = _tracker.createInstance<EnableTypeContext>(_ctx, getState());
  enterRule(_localctx, 60, MySQLParser::RuleEnableType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1320);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1315);
      match(MySQLParser::ENABLE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1316);
      match(MySQLParser::DISABLE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1317);
      match(MySQLParser::DISABLE);
      setState(1318);
      match(MySQLParser::ON);
      setState(1319);
      match(MySQLParser::SLAVE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexTypeContext ------------------------------------------------------------------

MySQLParser::IndexTypeContext::IndexTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IndexTypeContext::USING() {
  return getToken(MySQLParser::USING, 0);
}

tree::TerminalNode* MySQLParser::IndexTypeContext::BTREE() {
  return getToken(MySQLParser::BTREE, 0);
}

tree::TerminalNode* MySQLParser::IndexTypeContext::HASH() {
  return getToken(MySQLParser::HASH, 0);
}


size_t MySQLParser::IndexTypeContext::getRuleIndex() const {
  return MySQLParser::RuleIndexType;
}

void MySQLParser::IndexTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexType(this);
}

void MySQLParser::IndexTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexType(this);
}


antlrcpp::Any MySQLParser::IndexTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIndexType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IndexTypeContext* MySQLParser::indexType() {
  IndexTypeContext *_localctx = _tracker.createInstance<IndexTypeContext>(_ctx, getState());
  enterRule(_localctx, 62, MySQLParser::RuleIndexType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1322);
    match(MySQLParser::USING);
    setState(1323);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::BTREE || _la == MySQLParser::HASH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexOptionContext ------------------------------------------------------------------

MySQLParser::IndexOptionContext::IndexOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IndexOptionContext::KEY_BLOCK_SIZE() {
  return getToken(MySQLParser::KEY_BLOCK_SIZE, 0);
}

MySQLParser::FileSizeLiteralContext* MySQLParser::IndexOptionContext::fileSizeLiteral() {
  return getRuleContext<MySQLParser::FileSizeLiteralContext>(0);
}

MySQLParser::IndexTypeContext* MySQLParser::IndexOptionContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

tree::TerminalNode* MySQLParser::IndexOptionContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::IndexOptionContext::PARSER() {
  return getToken(MySQLParser::PARSER, 0);
}

MySQLParser::UidContext* MySQLParser::IndexOptionContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::IndexOptionContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::IndexOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::IndexOptionContext::INVISIBLE() {
  return getToken(MySQLParser::INVISIBLE, 0);
}

tree::TerminalNode* MySQLParser::IndexOptionContext::VISIBLE() {
  return getToken(MySQLParser::VISIBLE, 0);
}


size_t MySQLParser::IndexOptionContext::getRuleIndex() const {
  return MySQLParser::RuleIndexOption;
}

void MySQLParser::IndexOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexOption(this);
}

void MySQLParser::IndexOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexOption(this);
}


antlrcpp::Any MySQLParser::IndexOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIndexOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IndexOptionContext* MySQLParser::indexOption() {
  IndexOptionContext *_localctx = _tracker.createInstance<IndexOptionContext>(_ctx, getState());
  enterRule(_localctx, 64, MySQLParser::RuleIndexOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1338);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::KEY_BLOCK_SIZE: {
        enterOuterAlt(_localctx, 1);
        setState(1325);
        match(MySQLParser::KEY_BLOCK_SIZE);
        setState(1327);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(1326);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(1329);
        fileSizeLiteral();
        break;
      }

      case MySQLParser::USING: {
        enterOuterAlt(_localctx, 2);
        setState(1330);
        indexType();
        break;
      }

      case MySQLParser::WITH: {
        enterOuterAlt(_localctx, 3);
        setState(1331);
        match(MySQLParser::WITH);
        setState(1332);
        match(MySQLParser::PARSER);
        setState(1333);
        uid();
        break;
      }

      case MySQLParser::COMMENT: {
        enterOuterAlt(_localctx, 4);
        setState(1334);
        match(MySQLParser::COMMENT);
        setState(1335);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::INVISIBLE: {
        enterOuterAlt(_localctx, 5);
        setState(1336);
        match(MySQLParser::INVISIBLE);
        break;
      }

      case MySQLParser::VISIBLE: {
        enterOuterAlt(_localctx, 6);
        setState(1337);
        match(MySQLParser::VISIBLE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureParameterContext ------------------------------------------------------------------

MySQLParser::ProcedureParameterContext::ProcedureParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UidContext* MySQLParser::ProcedureParameterContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::DataTypeContext* MySQLParser::ProcedureParameterContext::dataType() {
  return getRuleContext<MySQLParser::DataTypeContext>(0);
}

tree::TerminalNode* MySQLParser::ProcedureParameterContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

tree::TerminalNode* MySQLParser::ProcedureParameterContext::OUT() {
  return getToken(MySQLParser::OUT, 0);
}

tree::TerminalNode* MySQLParser::ProcedureParameterContext::INOUT() {
  return getToken(MySQLParser::INOUT, 0);
}


size_t MySQLParser::ProcedureParameterContext::getRuleIndex() const {
  return MySQLParser::RuleProcedureParameter;
}

void MySQLParser::ProcedureParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureParameter(this);
}

void MySQLParser::ProcedureParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureParameter(this);
}


antlrcpp::Any MySQLParser::ProcedureParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureParameter(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ProcedureParameterContext* MySQLParser::procedureParameter() {
  ProcedureParameterContext *_localctx = _tracker.createInstance<ProcedureParameterContext>(_ctx, getState());
  enterRule(_localctx, 66, MySQLParser::RuleProcedureParameter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & ((1ULL << (MySQLParser::IN - 68))
      | (1ULL << (MySQLParser::INOUT - 68))
      | (1ULL << (MySQLParser::OUT - 68)))) != 0)) {
      setState(1340);
      dynamic_cast<ProcedureParameterContext *>(_localctx)->direction = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & ((1ULL << (MySQLParser::IN - 68))
        | (1ULL << (MySQLParser::INOUT - 68))
        | (1ULL << (MySQLParser::OUT - 68)))) != 0))) {
        dynamic_cast<ProcedureParameterContext *>(_localctx)->direction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1343);
    uid();
    setState(1344);
    dataType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionParameterContext ------------------------------------------------------------------

MySQLParser::FunctionParameterContext::FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UidContext* MySQLParser::FunctionParameterContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::DataTypeContext* MySQLParser::FunctionParameterContext::dataType() {
  return getRuleContext<MySQLParser::DataTypeContext>(0);
}


size_t MySQLParser::FunctionParameterContext::getRuleIndex() const {
  return MySQLParser::RuleFunctionParameter;
}

void MySQLParser::FunctionParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionParameter(this);
}

void MySQLParser::FunctionParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionParameter(this);
}


antlrcpp::Any MySQLParser::FunctionParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionParameter(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FunctionParameterContext* MySQLParser::functionParameter() {
  FunctionParameterContext *_localctx = _tracker.createInstance<FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 68, MySQLParser::RuleFunctionParameter);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1346);
    uid();
    setState(1347);
    dataType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RoutineOptionContext ------------------------------------------------------------------

MySQLParser::RoutineOptionContext::RoutineOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::RoutineOptionContext::getRuleIndex() const {
  return MySQLParser::RuleRoutineOption;
}

void MySQLParser::RoutineOptionContext::copyFrom(RoutineOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RoutineBehaviorContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::RoutineBehaviorContext::DETERMINISTIC() {
  return getToken(MySQLParser::DETERMINISTIC, 0);
}

tree::TerminalNode* MySQLParser::RoutineBehaviorContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}

MySQLParser::RoutineBehaviorContext::RoutineBehaviorContext(RoutineOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::RoutineBehaviorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutineBehavior(this);
}
void MySQLParser::RoutineBehaviorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutineBehavior(this);
}

antlrcpp::Any MySQLParser::RoutineBehaviorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRoutineBehavior(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RoutineLanguageContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::RoutineLanguageContext::LANGUAGE() {
  return getToken(MySQLParser::LANGUAGE, 0);
}

tree::TerminalNode* MySQLParser::RoutineLanguageContext::SQL() {
  return getToken(MySQLParser::SQL, 0);
}

MySQLParser::RoutineLanguageContext::RoutineLanguageContext(RoutineOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::RoutineLanguageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutineLanguage(this);
}
void MySQLParser::RoutineLanguageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutineLanguage(this);
}

antlrcpp::Any MySQLParser::RoutineLanguageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRoutineLanguage(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RoutineCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::RoutineCommentContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::RoutineCommentContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::RoutineCommentContext::RoutineCommentContext(RoutineOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::RoutineCommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutineComment(this);
}
void MySQLParser::RoutineCommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutineComment(this);
}

antlrcpp::Any MySQLParser::RoutineCommentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRoutineComment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RoutineSecurityContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::RoutineSecurityContext::SQL() {
  return getToken(MySQLParser::SQL, 0);
}

tree::TerminalNode* MySQLParser::RoutineSecurityContext::SECURITY() {
  return getToken(MySQLParser::SECURITY, 0);
}

tree::TerminalNode* MySQLParser::RoutineSecurityContext::DEFINER() {
  return getToken(MySQLParser::DEFINER, 0);
}

tree::TerminalNode* MySQLParser::RoutineSecurityContext::INVOKER() {
  return getToken(MySQLParser::INVOKER, 0);
}

MySQLParser::RoutineSecurityContext::RoutineSecurityContext(RoutineOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::RoutineSecurityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutineSecurity(this);
}
void MySQLParser::RoutineSecurityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutineSecurity(this);
}

antlrcpp::Any MySQLParser::RoutineSecurityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRoutineSecurity(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RoutineDataContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::RoutineDataContext::CONTAINS() {
  return getToken(MySQLParser::CONTAINS, 0);
}

tree::TerminalNode* MySQLParser::RoutineDataContext::SQL() {
  return getToken(MySQLParser::SQL, 0);
}

tree::TerminalNode* MySQLParser::RoutineDataContext::NO() {
  return getToken(MySQLParser::NO, 0);
}

tree::TerminalNode* MySQLParser::RoutineDataContext::READS() {
  return getToken(MySQLParser::READS, 0);
}

tree::TerminalNode* MySQLParser::RoutineDataContext::DATA() {
  return getToken(MySQLParser::DATA, 0);
}

tree::TerminalNode* MySQLParser::RoutineDataContext::MODIFIES() {
  return getToken(MySQLParser::MODIFIES, 0);
}

MySQLParser::RoutineDataContext::RoutineDataContext(RoutineOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::RoutineDataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutineData(this);
}
void MySQLParser::RoutineDataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutineData(this);
}

antlrcpp::Any MySQLParser::RoutineDataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRoutineData(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::RoutineOptionContext* MySQLParser::routineOption() {
  RoutineOptionContext *_localctx = _tracker.createInstance<RoutineOptionContext>(_ctx, getState());
  enterRule(_localctx, 70, MySQLParser::RuleRoutineOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1372);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::COMMENT: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySQLParser::RoutineCommentContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1349);
        match(MySQLParser::COMMENT);
        setState(1350);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::LANGUAGE: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySQLParser::RoutineLanguageContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1351);
        match(MySQLParser::LANGUAGE);
        setState(1352);
        match(MySQLParser::SQL);
        break;
      }

      case MySQLParser::DETERMINISTIC:
      case MySQLParser::NOT: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySQLParser::RoutineBehaviorContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1354);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::NOT) {
          setState(1353);
          match(MySQLParser::NOT);
        }
        setState(1356);
        match(MySQLParser::DETERMINISTIC);
        break;
      }

      case MySQLParser::MODIFIES:
      case MySQLParser::READS:
      case MySQLParser::CONTAINS:
      case MySQLParser::NO: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySQLParser::RoutineDataContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(1367);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::CONTAINS: {
            setState(1357);
            match(MySQLParser::CONTAINS);
            setState(1358);
            match(MySQLParser::SQL);
            break;
          }

          case MySQLParser::NO: {
            setState(1359);
            match(MySQLParser::NO);
            setState(1360);
            match(MySQLParser::SQL);
            break;
          }

          case MySQLParser::READS: {
            setState(1361);
            match(MySQLParser::READS);
            setState(1362);
            match(MySQLParser::SQL);
            setState(1363);
            match(MySQLParser::DATA);
            break;
          }

          case MySQLParser::MODIFIES: {
            setState(1364);
            match(MySQLParser::MODIFIES);
            setState(1365);
            match(MySQLParser::SQL);
            setState(1366);
            match(MySQLParser::DATA);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySQLParser::SQL: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySQLParser::RoutineSecurityContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(1369);
        match(MySQLParser::SQL);
        setState(1370);
        match(MySQLParser::SECURITY);
        setState(1371);
        dynamic_cast<RoutineSecurityContext *>(_localctx)->context = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::DEFINER

        || _la == MySQLParser::INVOKER)) {
          dynamic_cast<RoutineSecurityContext *>(_localctx)->context = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ServerOptionContext ------------------------------------------------------------------

MySQLParser::ServerOptionContext::ServerOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ServerOptionContext::HOST() {
  return getToken(MySQLParser::HOST, 0);
}

tree::TerminalNode* MySQLParser::ServerOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::ServerOptionContext::DATABASE() {
  return getToken(MySQLParser::DATABASE, 0);
}

tree::TerminalNode* MySQLParser::ServerOptionContext::USER() {
  return getToken(MySQLParser::USER, 0);
}

tree::TerminalNode* MySQLParser::ServerOptionContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::ServerOptionContext::SOCKET() {
  return getToken(MySQLParser::SOCKET, 0);
}

tree::TerminalNode* MySQLParser::ServerOptionContext::OWNER() {
  return getToken(MySQLParser::OWNER, 0);
}

tree::TerminalNode* MySQLParser::ServerOptionContext::PORT() {
  return getToken(MySQLParser::PORT, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::ServerOptionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}


size_t MySQLParser::ServerOptionContext::getRuleIndex() const {
  return MySQLParser::RuleServerOption;
}

void MySQLParser::ServerOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterServerOption(this);
}

void MySQLParser::ServerOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitServerOption(this);
}


antlrcpp::Any MySQLParser::ServerOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitServerOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ServerOptionContext* MySQLParser::serverOption() {
  ServerOptionContext *_localctx = _tracker.createInstance<ServerOptionContext>(_ctx, getState());
  enterRule(_localctx, 72, MySQLParser::RuleServerOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1388);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::HOST: {
        enterOuterAlt(_localctx, 1);
        setState(1374);
        match(MySQLParser::HOST);
        setState(1375);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::DATABASE: {
        enterOuterAlt(_localctx, 2);
        setState(1376);
        match(MySQLParser::DATABASE);
        setState(1377);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::USER: {
        enterOuterAlt(_localctx, 3);
        setState(1378);
        match(MySQLParser::USER);
        setState(1379);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::PASSWORD: {
        enterOuterAlt(_localctx, 4);
        setState(1380);
        match(MySQLParser::PASSWORD);
        setState(1381);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::SOCKET: {
        enterOuterAlt(_localctx, 5);
        setState(1382);
        match(MySQLParser::SOCKET);
        setState(1383);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::OWNER: {
        enterOuterAlt(_localctx, 6);
        setState(1384);
        match(MySQLParser::OWNER);
        setState(1385);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::PORT: {
        enterOuterAlt(_localctx, 7);
        setState(1386);
        match(MySQLParser::PORT);
        setState(1387);
        decimalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDefinitionsContext ------------------------------------------------------------------

MySQLParser::CreateDefinitionsContext::CreateDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::CreateDefinitionContext *> MySQLParser::CreateDefinitionsContext::createDefinition() {
  return getRuleContexts<MySQLParser::CreateDefinitionContext>();
}

MySQLParser::CreateDefinitionContext* MySQLParser::CreateDefinitionsContext::createDefinition(size_t i) {
  return getRuleContext<MySQLParser::CreateDefinitionContext>(i);
}


size_t MySQLParser::CreateDefinitionsContext::getRuleIndex() const {
  return MySQLParser::RuleCreateDefinitions;
}

void MySQLParser::CreateDefinitionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateDefinitions(this);
}

void MySQLParser::CreateDefinitionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateDefinitions(this);
}


antlrcpp::Any MySQLParser::CreateDefinitionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateDefinitions(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateDefinitionsContext* MySQLParser::createDefinitions() {
  CreateDefinitionsContext *_localctx = _tracker.createInstance<CreateDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 74, MySQLParser::RuleCreateDefinitions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1390);
    match(MySQLParser::LR_BRACKET);
    setState(1391);
    createDefinition();
    setState(1396);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(1392);
      match(MySQLParser::COMMA);
      setState(1393);
      createDefinition();
      setState(1398);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1399);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDefinitionContext ------------------------------------------------------------------

MySQLParser::CreateDefinitionContext::CreateDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::CreateDefinitionContext::getRuleIndex() const {
  return MySQLParser::RuleCreateDefinition;
}

void MySQLParser::CreateDefinitionContext::copyFrom(CreateDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnDeclarationContext ------------------------------------------------------------------

MySQLParser::UidContext* MySQLParser::ColumnDeclarationContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::ColumnDefinitionContext* MySQLParser::ColumnDeclarationContext::columnDefinition() {
  return getRuleContext<MySQLParser::ColumnDefinitionContext>(0);
}

MySQLParser::ColumnDeclarationContext::ColumnDeclarationContext(CreateDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::ColumnDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnDeclaration(this);
}
void MySQLParser::ColumnDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnDeclaration(this);
}

antlrcpp::Any MySQLParser::ColumnDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnDeclaration(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConstraintDeclarationContext ------------------------------------------------------------------

MySQLParser::TableConstraintContext* MySQLParser::ConstraintDeclarationContext::tableConstraint() {
  return getRuleContext<MySQLParser::TableConstraintContext>(0);
}

MySQLParser::ConstraintDeclarationContext::ConstraintDeclarationContext(CreateDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::ConstraintDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraintDeclaration(this);
}
void MySQLParser::ConstraintDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraintDeclaration(this);
}

antlrcpp::Any MySQLParser::ConstraintDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitConstraintDeclaration(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IndexDeclarationContext ------------------------------------------------------------------

MySQLParser::IndexColumnDefinitionContext* MySQLParser::IndexDeclarationContext::indexColumnDefinition() {
  return getRuleContext<MySQLParser::IndexColumnDefinitionContext>(0);
}

MySQLParser::IndexDeclarationContext::IndexDeclarationContext(CreateDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::IndexDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexDeclaration(this);
}
void MySQLParser::IndexDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexDeclaration(this);
}

antlrcpp::Any MySQLParser::IndexDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIndexDeclaration(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::CreateDefinitionContext* MySQLParser::createDefinition() {
  CreateDefinitionContext *_localctx = _tracker.createInstance<CreateDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 76, MySQLParser::RuleCreateDefinition);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1406);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::DATABASE:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::DATETIME:
      case MySQLParser::YEAR:
      case MySQLParser::TEXT:
      case MySQLParser::ENUM:
      case MySQLParser::SERIAL:
      case MySQLParser::COUNT:
      case MySQLParser::POSITION:
      case MySQLParser::ACCOUNT:
      case MySQLParser::ACTION:
      case MySQLParser::AFTER:
      case MySQLParser::AGGREGATE:
      case MySQLParser::ALGORITHM:
      case MySQLParser::ANY:
      case MySQLParser::AT:
      case MySQLParser::AUTHORS:
      case MySQLParser::AUTOCOMMIT:
      case MySQLParser::AUTOEXTEND_SIZE:
      case MySQLParser::AUTO_INCREMENT:
      case MySQLParser::AVG_ROW_LENGTH:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::BIT:
      case MySQLParser::BLOCK:
      case MySQLParser::BOOL:
      case MySQLParser::BOOLEAN:
      case MySQLParser::BTREE:
      case MySQLParser::CACHE:
      case MySQLParser::CASCADED:
      case MySQLParser::CHAIN:
      case MySQLParser::CHANGED:
      case MySQLParser::CHANNEL:
      case MySQLParser::CHECKSUM:
      case MySQLParser::PAGE_CHECKSUM:
      case MySQLParser::CIPHER:
      case MySQLParser::CLIENT:
      case MySQLParser::CLOSE:
      case MySQLParser::COALESCE:
      case MySQLParser::CODE:
      case MySQLParser::COLUMNS:
      case MySQLParser::COLUMN_FORMAT:
      case MySQLParser::COMMENT:
      case MySQLParser::COMMIT:
      case MySQLParser::COMPACT:
      case MySQLParser::COMPLETION:
      case MySQLParser::COMPRESSED:
      case MySQLParser::COMPRESSION:
      case MySQLParser::CONCURRENT:
      case MySQLParser::CONNECTION:
      case MySQLParser::CONSISTENT:
      case MySQLParser::CONTAINS:
      case MySQLParser::CONTEXT:
      case MySQLParser::CONTRIBUTORS:
      case MySQLParser::COPY:
      case MySQLParser::CPU:
      case MySQLParser::DATA:
      case MySQLParser::DATAFILE:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DEFAULT_AUTH:
      case MySQLParser::DEFINER:
      case MySQLParser::DELAY_KEY_WRITE:
      case MySQLParser::DES_KEY_FILE:
      case MySQLParser::DIRECTORY:
      case MySQLParser::DISABLE:
      case MySQLParser::DISCARD:
      case MySQLParser::DISK:
      case MySQLParser::DO:
      case MySQLParser::DUMPFILE:
      case MySQLParser::DUPLICATE:
      case MySQLParser::DYNAMIC:
      case MySQLParser::ENABLE:
      case MySQLParser::ENCRYPTION:
      case MySQLParser::END:
      case MySQLParser::ENDS:
      case MySQLParser::ENGINE:
      case MySQLParser::ENGINES:
      case MySQLParser::ERROR:
      case MySQLParser::ERRORS:
      case MySQLParser::ESCAPE:
      case MySQLParser::EVEN:
      case MySQLParser::EVENT:
      case MySQLParser::EVENTS:
      case MySQLParser::EVERY:
      case MySQLParser::EXCHANGE:
      case MySQLParser::EXCLUSIVE:
      case MySQLParser::EXPIRE:
      case MySQLParser::EXPORT:
      case MySQLParser::EXTENDED:
      case MySQLParser::EXTENT_SIZE:
      case MySQLParser::FAST:
      case MySQLParser::FAULTS:
      case MySQLParser::FIELDS:
      case MySQLParser::FILE_BLOCK_SIZE:
      case MySQLParser::FILTER:
      case MySQLParser::FIRST:
      case MySQLParser::FIXED:
      case MySQLParser::FLUSH:
      case MySQLParser::FOLLOWS:
      case MySQLParser::FOUND:
      case MySQLParser::FULL:
      case MySQLParser::FUNCTION:
      case MySQLParser::GENERAL:
      case MySQLParser::GLOBAL:
      case MySQLParser::GRANTS:
      case MySQLParser::GROUP_REPLICATION:
      case MySQLParser::HANDLER:
      case MySQLParser::HASH:
      case MySQLParser::HELP:
      case MySQLParser::HOST:
      case MySQLParser::HOSTS:
      case MySQLParser::IDENTIFIED:
      case MySQLParser::IGNORE_SERVER_IDS:
      case MySQLParser::IMPORT:
      case MySQLParser::INDEXES:
      case MySQLParser::INITIAL_SIZE:
      case MySQLParser::INPLACE:
      case MySQLParser::INSERT_METHOD:
      case MySQLParser::INSTALL:
      case MySQLParser::INSTANCE:
      case MySQLParser::INVISIBLE:
      case MySQLParser::INVOKER:
      case MySQLParser::IO:
      case MySQLParser::IO_THREAD:
      case MySQLParser::IPC:
      case MySQLParser::ISOLATION:
      case MySQLParser::ISSUER:
      case MySQLParser::JSON:
      case MySQLParser::KEY_BLOCK_SIZE:
      case MySQLParser::LANGUAGE:
      case MySQLParser::LAST:
      case MySQLParser::LEAVES:
      case MySQLParser::LESS:
      case MySQLParser::LEVEL:
      case MySQLParser::LIST:
      case MySQLParser::LOCAL:
      case MySQLParser::LOGFILE:
      case MySQLParser::LOGS:
      case MySQLParser::MASTER:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_HEARTBEAT_PERIOD:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::MASTER_SSL:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
      case MySQLParser::MAX_QUERIES_PER_HOUR:
      case MySQLParser::MAX_ROWS:
      case MySQLParser::MAX_SIZE:
      case MySQLParser::MAX_UPDATES_PER_HOUR:
      case MySQLParser::MAX_USER_CONNECTIONS:
      case MySQLParser::MEDIUM:
      case MySQLParser::MERGE:
      case MySQLParser::MID:
      case MySQLParser::MIGRATE:
      case MySQLParser::MIN_ROWS:
      case MySQLParser::MODE:
      case MySQLParser::MODIFY:
      case MySQLParser::MUTEX:
      case MySQLParser::MYSQL:
      case MySQLParser::NAME:
      case MySQLParser::NAMES:
      case MySQLParser::NCHAR:
      case MySQLParser::NEVER:
      case MySQLParser::NEXT:
      case MySQLParser::NO:
      case MySQLParser::NODEGROUP:
      case MySQLParser::NONE:
      case MySQLParser::OFFLINE:
      case MySQLParser::OFFSET:
      case MySQLParser::OJ:
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::ONE:
      case MySQLParser::ONLINE:
      case MySQLParser::ONLY:
      case MySQLParser::OPEN:
      case MySQLParser::OPTIMIZER_COSTS:
      case MySQLParser::OPTIONS:
      case MySQLParser::OWNER:
      case MySQLParser::PACK_KEYS:
      case MySQLParser::PAGE:
      case MySQLParser::PARSER:
      case MySQLParser::PARTIAL:
      case MySQLParser::PARTITIONING:
      case MySQLParser::PARTITIONS:
      case MySQLParser::PASSWORD:
      case MySQLParser::PHASE:
      case MySQLParser::PLUGIN:
      case MySQLParser::PLUGIN_DIR:
      case MySQLParser::PLUGINS:
      case MySQLParser::PORT:
      case MySQLParser::PRECEDES:
      case MySQLParser::PREPARE:
      case MySQLParser::PRESERVE:
      case MySQLParser::PREV:
      case MySQLParser::PROCESSLIST:
      case MySQLParser::PROFILE:
      case MySQLParser::PROFILES:
      case MySQLParser::PROXY:
      case MySQLParser::QUERY:
      case MySQLParser::QUICK:
      case MySQLParser::REBUILD:
      case MySQLParser::RECOVER:
      case MySQLParser::REDO_BUFFER_SIZE:
      case MySQLParser::REDUNDANT:
      case MySQLParser::RELAY:
      case MySQLParser::RELAY_LOG_FILE:
      case MySQLParser::RELAY_LOG_POS:
      case MySQLParser::RELAYLOG:
      case MySQLParser::REMOVE:
      case MySQLParser::REORGANIZE:
      case MySQLParser::REPAIR:
      case MySQLParser::REPLICATE_DO_DB:
      case MySQLParser::REPLICATE_DO_TABLE:
      case MySQLParser::REPLICATE_IGNORE_DB:
      case MySQLParser::REPLICATE_IGNORE_TABLE:
      case MySQLParser::REPLICATE_REWRITE_DB:
      case MySQLParser::REPLICATE_WILD_DO_TABLE:
      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySQLParser::REPLICATION:
      case MySQLParser::RESET:
      case MySQLParser::RESUME:
      case MySQLParser::RETURNS:
      case MySQLParser::ROLLBACK:
      case MySQLParser::ROLLUP:
      case MySQLParser::ROTATE:
      case MySQLParser::ROW:
      case MySQLParser::ROWS:
      case MySQLParser::ROW_FORMAT:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::SCHEDULE:
      case MySQLParser::SECURITY:
      case MySQLParser::SERVER:
      case MySQLParser::SESSION:
      case MySQLParser::SHARE:
      case MySQLParser::SHARED:
      case MySQLParser::SIGNED:
      case MySQLParser::SIMPLE:
      case MySQLParser::SLAVE:
      case MySQLParser::SLOW:
      case MySQLParser::SNAPSHOT:
      case MySQLParser::SOCKET:
      case MySQLParser::SOME:
      case MySQLParser::SONAME:
      case MySQLParser::SOUNDS:
      case MySQLParser::SOURCE:
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_AFTER_MTS_GAPS:
      case MySQLParser::SQL_BEFORE_GTIDS:
      case MySQLParser::SQL_BUFFER_RESULT:
      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE:
      case MySQLParser::SQL_THREAD:
      case MySQLParser::START:
      case MySQLParser::STARTS:
      case MySQLParser::STATS_AUTO_RECALC:
      case MySQLParser::STATS_PERSISTENT:
      case MySQLParser::STATS_SAMPLE_PAGES:
      case MySQLParser::STATUS:
      case MySQLParser::STOP:
      case MySQLParser::STORAGE:
      case MySQLParser::STRING:
      case MySQLParser::SUBJECT:
      case MySQLParser::SUBPARTITION:
      case MySQLParser::SUBPARTITIONS:
      case MySQLParser::SUSPEND:
      case MySQLParser::SWAPS:
      case MySQLParser::SWITCHES:
      case MySQLParser::TABLESPACE:
      case MySQLParser::TEMPORARY:
      case MySQLParser::TEMPTABLE:
      case MySQLParser::THAN:
      case MySQLParser::TRADITIONAL:
      case MySQLParser::TRANSACTION:
      case MySQLParser::TRIGGERS:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNDEFINED:
      case MySQLParser::UNDOFILE:
      case MySQLParser::UNDO_BUFFER_SIZE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::UNKNOWN:
      case MySQLParser::UNTIL:
      case MySQLParser::UPGRADE:
      case MySQLParser::USER:
      case MySQLParser::USE_FRM:
      case MySQLParser::USER_RESOURCES:
      case MySQLParser::VALIDATION:
      case MySQLParser::VALUE:
      case MySQLParser::VARIABLES:
      case MySQLParser::VIEW:
      case MySQLParser::VISIBLE:
      case MySQLParser::WAIT:
      case MySQLParser::WARNINGS:
      case MySQLParser::WITHOUT:
      case MySQLParser::WORK:
      case MySQLParser::WRAPPER:
      case MySQLParser::X509:
      case MySQLParser::XA:
      case MySQLParser::XML:
      case MySQLParser::INTERNAL:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::TABLES:
      case MySQLParser::ROUTINE:
      case MySQLParser::EXECUTE:
      case MySQLParser::FILE:
      case MySQLParser::PROCESS:
      case MySQLParser::RELOAD:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::SUPER:
      case MySQLParser::PRIVILEGES:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4:
      case MySQLParser::ARCHIVE:
      case MySQLParser::BLACKHOLE:
      case MySQLParser::CSV:
      case MySQLParser::FEDERATED:
      case MySQLParser::INNODB:
      case MySQLParser::MEMORY:
      case MySQLParser::MRG_MYISAM:
      case MySQLParser::MYISAM:
      case MySQLParser::NDB:
      case MySQLParser::NDBCLUSTER:
      case MySQLParser::PERFORMANCE_SCHEMA:
      case MySQLParser::TOKUDB:
      case MySQLParser::REPEATABLE:
      case MySQLParser::COMMITTED:
      case MySQLParser::UNCOMMITTED:
      case MySQLParser::SERIALIZABLE:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION:
      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::ID:
      case MySQLParser::REVERSE_QUOTE_ID: {
        _localctx = dynamic_cast<CreateDefinitionContext *>(_tracker.createInstance<MySQLParser::ColumnDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1401);
        uid();
        setState(1402);
        columnDefinition();
        break;
      }

      case MySQLParser::CHECK:
      case MySQLParser::CONSTRAINT:
      case MySQLParser::FOREIGN:
      case MySQLParser::PRIMARY:
      case MySQLParser::UNIQUE: {
        _localctx = dynamic_cast<CreateDefinitionContext *>(_tracker.createInstance<MySQLParser::ConstraintDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1404);
        tableConstraint();
        break;
      }

      case MySQLParser::FULLTEXT:
      case MySQLParser::INDEX:
      case MySQLParser::KEY:
      case MySQLParser::SPATIAL: {
        _localctx = dynamic_cast<CreateDefinitionContext *>(_tracker.createInstance<MySQLParser::IndexDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1405);
        indexColumnDefinition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnDefinitionContext ------------------------------------------------------------------

MySQLParser::ColumnDefinitionContext::ColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::DataTypeContext* MySQLParser::ColumnDefinitionContext::dataType() {
  return getRuleContext<MySQLParser::DataTypeContext>(0);
}

std::vector<MySQLParser::ColumnConstraintContext *> MySQLParser::ColumnDefinitionContext::columnConstraint() {
  return getRuleContexts<MySQLParser::ColumnConstraintContext>();
}

MySQLParser::ColumnConstraintContext* MySQLParser::ColumnDefinitionContext::columnConstraint(size_t i) {
  return getRuleContext<MySQLParser::ColumnConstraintContext>(i);
}


size_t MySQLParser::ColumnDefinitionContext::getRuleIndex() const {
  return MySQLParser::RuleColumnDefinition;
}

void MySQLParser::ColumnDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnDefinition(this);
}

void MySQLParser::ColumnDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnDefinition(this);
}


antlrcpp::Any MySQLParser::ColumnDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnDefinition(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ColumnDefinitionContext* MySQLParser::columnDefinition() {
  ColumnDefinitionContext *_localctx = _tracker.createInstance<ColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 78, MySQLParser::RuleColumnDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1408);
    dataType();
    setState(1412);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySQLParser::AS)
      | (1ULL << MySQLParser::COLLATE)
      | (1ULL << MySQLParser::DEFAULT)
      | (1ULL << MySQLParser::GENERATED))) != 0) || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & ((1ULL << (MySQLParser::KEY - 79))
      | (1ULL << (MySQLParser::NOT - 79))
      | (1ULL << (MySQLParser::NULL_LITERAL - 79))
      | (1ULL << (MySQLParser::ON - 79))
      | (1ULL << (MySQLParser::PRIMARY - 79))
      | (1ULL << (MySQLParser::REFERENCES - 79)))) != 0) || _la == MySQLParser::UNIQUE

    || _la == MySQLParser::SERIAL || ((((_la - 262) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 262)) & ((1ULL << (MySQLParser::AUTO_INCREMENT - 262))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 262))
      | (1ULL << (MySQLParser::COMMENT - 262)))) != 0) || _la == MySQLParser::STORAGE || _la == MySQLParser::NULL_SPEC_LITERAL) {
      setState(1409);
      columnConstraint();
      setState(1414);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnConstraintContext ------------------------------------------------------------------

MySQLParser::ColumnConstraintContext::ColumnConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::ColumnConstraintContext::getRuleIndex() const {
  return MySQLParser::RuleColumnConstraint;
}

void MySQLParser::ColumnConstraintContext::copyFrom(ColumnConstraintContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StorageColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::StorageColumnConstraintContext::STORAGE() {
  return getToken(MySQLParser::STORAGE, 0);
}

tree::TerminalNode* MySQLParser::StorageColumnConstraintContext::DISK() {
  return getToken(MySQLParser::DISK, 0);
}

tree::TerminalNode* MySQLParser::StorageColumnConstraintContext::MEMORY() {
  return getToken(MySQLParser::MEMORY, 0);
}

tree::TerminalNode* MySQLParser::StorageColumnConstraintContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::StorageColumnConstraintContext::StorageColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::StorageColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorageColumnConstraint(this);
}
void MySQLParser::StorageColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorageColumnConstraint(this);
}

antlrcpp::Any MySQLParser::StorageColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStorageColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FormatColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::FormatColumnConstraintContext::COLUMN_FORMAT() {
  return getToken(MySQLParser::COLUMN_FORMAT, 0);
}

tree::TerminalNode* MySQLParser::FormatColumnConstraintContext::FIXED() {
  return getToken(MySQLParser::FIXED, 0);
}

tree::TerminalNode* MySQLParser::FormatColumnConstraintContext::DYNAMIC() {
  return getToken(MySQLParser::DYNAMIC, 0);
}

tree::TerminalNode* MySQLParser::FormatColumnConstraintContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::FormatColumnConstraintContext::FormatColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::FormatColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormatColumnConstraint(this);
}
void MySQLParser::FormatColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormatColumnConstraint(this);
}

antlrcpp::Any MySQLParser::FormatColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFormatColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CollateColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CollateColumnConstraintContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::CollateColumnConstraintContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}

MySQLParser::CollateColumnConstraintContext::CollateColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::CollateColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollateColumnConstraint(this);
}
void MySQLParser::CollateColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollateColumnConstraint(this);
}

antlrcpp::Any MySQLParser::CollateColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCollateColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AutoIncrementColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AutoIncrementColumnConstraintContext::AUTO_INCREMENT() {
  return getToken(MySQLParser::AUTO_INCREMENT, 0);
}

tree::TerminalNode* MySQLParser::AutoIncrementColumnConstraintContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

tree::TerminalNode* MySQLParser::AutoIncrementColumnConstraintContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}

MySQLParser::CurrentTimestampContext* MySQLParser::AutoIncrementColumnConstraintContext::currentTimestamp() {
  return getRuleContext<MySQLParser::CurrentTimestampContext>(0);
}

MySQLParser::AutoIncrementColumnConstraintContext::AutoIncrementColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::AutoIncrementColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAutoIncrementColumnConstraint(this);
}
void MySQLParser::AutoIncrementColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAutoIncrementColumnConstraint(this);
}

antlrcpp::Any MySQLParser::AutoIncrementColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAutoIncrementColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CommentColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CommentColumnConstraintContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::CommentColumnConstraintContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::CommentColumnConstraintContext::CommentColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::CommentColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommentColumnConstraint(this);
}
void MySQLParser::CommentColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommentColumnConstraint(this);
}

antlrcpp::Any MySQLParser::CommentColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCommentColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryKeyColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PrimaryKeyColumnConstraintContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

tree::TerminalNode* MySQLParser::PrimaryKeyColumnConstraintContext::PRIMARY() {
  return getToken(MySQLParser::PRIMARY, 0);
}

MySQLParser::PrimaryKeyColumnConstraintContext::PrimaryKeyColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::PrimaryKeyColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryKeyColumnConstraint(this);
}
void MySQLParser::PrimaryKeyColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryKeyColumnConstraint(this);
}

antlrcpp::Any MySQLParser::PrimaryKeyColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryKeyColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UniqueKeyColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::UniqueKeyColumnConstraintContext::UNIQUE() {
  return getToken(MySQLParser::UNIQUE, 0);
}

tree::TerminalNode* MySQLParser::UniqueKeyColumnConstraintContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::UniqueKeyColumnConstraintContext::UniqueKeyColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::UniqueKeyColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUniqueKeyColumnConstraint(this);
}
void MySQLParser::UniqueKeyColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUniqueKeyColumnConstraint(this);
}

antlrcpp::Any MySQLParser::UniqueKeyColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUniqueKeyColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SerialDefaultColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SerialDefaultColumnConstraintContext::SERIAL() {
  return getToken(MySQLParser::SERIAL, 0);
}

tree::TerminalNode* MySQLParser::SerialDefaultColumnConstraintContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

tree::TerminalNode* MySQLParser::SerialDefaultColumnConstraintContext::VALUE() {
  return getToken(MySQLParser::VALUE, 0);
}

MySQLParser::SerialDefaultColumnConstraintContext::SerialDefaultColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::SerialDefaultColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSerialDefaultColumnConstraint(this);
}
void MySQLParser::SerialDefaultColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSerialDefaultColumnConstraint(this);
}

antlrcpp::Any MySQLParser::SerialDefaultColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSerialDefaultColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NullColumnConstraintContext ------------------------------------------------------------------

MySQLParser::NullNotnullContext* MySQLParser::NullColumnConstraintContext::nullNotnull() {
  return getRuleContext<MySQLParser::NullNotnullContext>(0);
}

MySQLParser::NullColumnConstraintContext::NullColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::NullColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullColumnConstraint(this);
}
void MySQLParser::NullColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullColumnConstraint(this);
}

antlrcpp::Any MySQLParser::NullColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitNullColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DefaultColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DefaultColumnConstraintContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::DefaultValueContext* MySQLParser::DefaultColumnConstraintContext::defaultValue() {
  return getRuleContext<MySQLParser::DefaultValueContext>(0);
}

MySQLParser::DefaultColumnConstraintContext::DefaultColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::DefaultColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultColumnConstraint(this);
}
void MySQLParser::DefaultColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultColumnConstraint(this);
}

antlrcpp::Any MySQLParser::DefaultColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDefaultColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ReferenceColumnConstraintContext ------------------------------------------------------------------

MySQLParser::ReferenceDefinitionContext* MySQLParser::ReferenceColumnConstraintContext::referenceDefinition() {
  return getRuleContext<MySQLParser::ReferenceDefinitionContext>(0);
}

MySQLParser::ReferenceColumnConstraintContext::ReferenceColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::ReferenceColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceColumnConstraint(this);
}
void MySQLParser::ReferenceColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceColumnConstraint(this);
}

antlrcpp::Any MySQLParser::ReferenceColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReferenceColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GeneratedColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::GeneratedColumnConstraintContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::ExpressionContext* MySQLParser::GeneratedColumnConstraintContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::GeneratedColumnConstraintContext::GENERATED() {
  return getToken(MySQLParser::GENERATED, 0);
}

tree::TerminalNode* MySQLParser::GeneratedColumnConstraintContext::ALWAYS() {
  return getToken(MySQLParser::ALWAYS, 0);
}

tree::TerminalNode* MySQLParser::GeneratedColumnConstraintContext::VIRTUAL() {
  return getToken(MySQLParser::VIRTUAL, 0);
}

tree::TerminalNode* MySQLParser::GeneratedColumnConstraintContext::STORED() {
  return getToken(MySQLParser::STORED, 0);
}

MySQLParser::GeneratedColumnConstraintContext::GeneratedColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::GeneratedColumnConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneratedColumnConstraint(this);
}
void MySQLParser::GeneratedColumnConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneratedColumnConstraint(this);
}

antlrcpp::Any MySQLParser::GeneratedColumnConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGeneratedColumnConstraint(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::ColumnConstraintContext* MySQLParser::columnConstraint() {
  ColumnConstraintContext *_localctx = _tracker.createInstance<ColumnConstraintContext>(_ctx, getState());
  enterRule(_localctx, 80, MySQLParser::RuleColumnConstraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1455);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::NOT:
      case MySQLParser::NULL_LITERAL:
      case MySQLParser::NULL_SPEC_LITERAL: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::NullColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1415);
        nullNotnull();
        break;
      }

      case MySQLParser::DEFAULT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::DefaultColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1416);
        match(MySQLParser::DEFAULT);
        setState(1417);
        defaultValue();
        break;
      }

      case MySQLParser::ON:
      case MySQLParser::AUTO_INCREMENT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::AutoIncrementColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1422);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::AUTO_INCREMENT: {
            setState(1418);
            match(MySQLParser::AUTO_INCREMENT);
            break;
          }

          case MySQLParser::ON: {
            setState(1419);
            match(MySQLParser::ON);
            setState(1420);
            match(MySQLParser::UPDATE);
            setState(1421);
            currentTimestamp();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySQLParser::KEY:
      case MySQLParser::PRIMARY: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::PrimaryKeyColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(1425);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::PRIMARY) {
          setState(1424);
          match(MySQLParser::PRIMARY);
        }
        setState(1427);
        match(MySQLParser::KEY);
        break;
      }

      case MySQLParser::UNIQUE: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::UniqueKeyColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(1428);
        match(MySQLParser::UNIQUE);
        setState(1430);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
        case 1: {
          setState(1429);
          match(MySQLParser::KEY);
          break;
        }

        }
        break;
      }

      case MySQLParser::COMMENT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::CommentColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(1432);
        match(MySQLParser::COMMENT);
        setState(1433);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::COLUMN_FORMAT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::FormatColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(1434);
        match(MySQLParser::COLUMN_FORMAT);
        setState(1435);
        dynamic_cast<FormatColumnConstraintContext *>(_localctx)->colformat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::DYNAMIC

        || _la == MySQLParser::FIXED)) {
          dynamic_cast<FormatColumnConstraintContext *>(_localctx)->colformat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::STORAGE: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::StorageColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 8);
        setState(1436);
        match(MySQLParser::STORAGE);
        setState(1437);
        dynamic_cast<StorageColumnConstraintContext *>(_localctx)->storageval = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::DISK || _la == MySQLParser::MEMORY)) {
          dynamic_cast<StorageColumnConstraintContext *>(_localctx)->storageval = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::REFERENCES: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::ReferenceColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 9);
        setState(1438);
        referenceDefinition();
        break;
      }

      case MySQLParser::COLLATE: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::CollateColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 10);
        setState(1439);
        match(MySQLParser::COLLATE);
        setState(1440);
        collationName();
        break;
      }

      case MySQLParser::AS:
      case MySQLParser::GENERATED: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::GeneratedColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 11);
        setState(1443);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::GENERATED) {
          setState(1441);
          match(MySQLParser::GENERATED);
          setState(1442);
          match(MySQLParser::ALWAYS);
        }
        setState(1445);
        match(MySQLParser::AS);
        setState(1446);
        match(MySQLParser::LR_BRACKET);
        setState(1447);
        expression(0);
        setState(1448);
        match(MySQLParser::RR_BRACKET);
        setState(1450);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::STORED

        || _la == MySQLParser::VIRTUAL) {
          setState(1449);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::STORED

          || _la == MySQLParser::VIRTUAL)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      case MySQLParser::SERIAL: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySQLParser::SerialDefaultColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 12);
        setState(1452);
        match(MySQLParser::SERIAL);
        setState(1453);
        match(MySQLParser::DEFAULT);
        setState(1454);
        match(MySQLParser::VALUE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableConstraintContext ------------------------------------------------------------------

MySQLParser::TableConstraintContext::TableConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::TableConstraintContext::getRuleIndex() const {
  return MySQLParser::RuleTableConstraint;
}

void MySQLParser::TableConstraintContext::copyFrom(TableConstraintContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UniqueKeyTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::UniqueKeyTableConstraintContext::UNIQUE() {
  return getToken(MySQLParser::UNIQUE, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::UniqueKeyTableConstraintContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::UniqueKeyTableConstraintContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

MySQLParser::IndexTypeContext* MySQLParser::UniqueKeyTableConstraintContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::UniqueKeyTableConstraintContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::UniqueKeyTableConstraintContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

std::vector<MySQLParser::UidContext *> MySQLParser::UniqueKeyTableConstraintContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::UniqueKeyTableConstraintContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

tree::TerminalNode* MySQLParser::UniqueKeyTableConstraintContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::UniqueKeyTableConstraintContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::UniqueKeyTableConstraintContext::UniqueKeyTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::UniqueKeyTableConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUniqueKeyTableConstraint(this);
}
void MySQLParser::UniqueKeyTableConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUniqueKeyTableConstraint(this);
}

antlrcpp::Any MySQLParser::UniqueKeyTableConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUniqueKeyTableConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CheckTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CheckTableConstraintContext::CHECK() {
  return getToken(MySQLParser::CHECK, 0);
}

MySQLParser::ExpressionContext* MySQLParser::CheckTableConstraintContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::CheckTableConstraintContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

MySQLParser::UidContext* MySQLParser::CheckTableConstraintContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::CheckTableConstraintContext::CheckTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::CheckTableConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckTableConstraint(this);
}
void MySQLParser::CheckTableConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckTableConstraint(this);
}

antlrcpp::Any MySQLParser::CheckTableConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCheckTableConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryKeyTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PrimaryKeyTableConstraintContext::PRIMARY() {
  return getToken(MySQLParser::PRIMARY, 0);
}

tree::TerminalNode* MySQLParser::PrimaryKeyTableConstraintContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::PrimaryKeyTableConstraintContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::PrimaryKeyTableConstraintContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

MySQLParser::IndexTypeContext* MySQLParser::PrimaryKeyTableConstraintContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::PrimaryKeyTableConstraintContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::PrimaryKeyTableConstraintContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

std::vector<MySQLParser::UidContext *> MySQLParser::PrimaryKeyTableConstraintContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::PrimaryKeyTableConstraintContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::PrimaryKeyTableConstraintContext::PrimaryKeyTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::PrimaryKeyTableConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryKeyTableConstraint(this);
}
void MySQLParser::PrimaryKeyTableConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryKeyTableConstraint(this);
}

antlrcpp::Any MySQLParser::PrimaryKeyTableConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryKeyTableConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ForeignKeyTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ForeignKeyTableConstraintContext::FOREIGN() {
  return getToken(MySQLParser::FOREIGN, 0);
}

tree::TerminalNode* MySQLParser::ForeignKeyTableConstraintContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::ForeignKeyTableConstraintContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

MySQLParser::ReferenceDefinitionContext* MySQLParser::ForeignKeyTableConstraintContext::referenceDefinition() {
  return getRuleContext<MySQLParser::ReferenceDefinitionContext>(0);
}

tree::TerminalNode* MySQLParser::ForeignKeyTableConstraintContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::ForeignKeyTableConstraintContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::ForeignKeyTableConstraintContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::ForeignKeyTableConstraintContext::ForeignKeyTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }

void MySQLParser::ForeignKeyTableConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForeignKeyTableConstraint(this);
}
void MySQLParser::ForeignKeyTableConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForeignKeyTableConstraint(this);
}

antlrcpp::Any MySQLParser::ForeignKeyTableConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitForeignKeyTableConstraint(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::TableConstraintContext* MySQLParser::tableConstraint() {
  TableConstraintContext *_localctx = _tracker.createInstance<TableConstraintContext>(_ctx, getState());
  enterRule(_localctx, 82, MySQLParser::RuleTableConstraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1526);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySQLParser::PrimaryKeyTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1461);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(1457);
        match(MySQLParser::CONSTRAINT);
        setState(1459);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(1458);
          dynamic_cast<PrimaryKeyTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1463);
      match(MySQLParser::PRIMARY);
      setState(1464);
      match(MySQLParser::KEY);
      setState(1466);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::TIMESTAMP - 184))
        | (1ULL << (MySQLParser::DATETIME - 184))
        | (1ULL << (MySQLParser::YEAR - 184))
        | (1ULL << (MySQLParser::TEXT - 184))
        | (1ULL << (MySQLParser::ENUM - 184))
        | (1ULL << (MySQLParser::SERIAL - 184))
        | (1ULL << (MySQLParser::COUNT - 184))
        | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
        | (1ULL << (MySQLParser::ACTION - 252))
        | (1ULL << (MySQLParser::AFTER - 252))
        | (1ULL << (MySQLParser::AGGREGATE - 252))
        | (1ULL << (MySQLParser::ALGORITHM - 252))
        | (1ULL << (MySQLParser::ANY - 252))
        | (1ULL << (MySQLParser::AT - 252))
        | (1ULL << (MySQLParser::AUTHORS - 252))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
        | (1ULL << (MySQLParser::BEGIN - 252))
        | (1ULL << (MySQLParser::BINLOG - 252))
        | (1ULL << (MySQLParser::BIT - 252))
        | (1ULL << (MySQLParser::BLOCK - 252))
        | (1ULL << (MySQLParser::BOOL - 252))
        | (1ULL << (MySQLParser::BOOLEAN - 252))
        | (1ULL << (MySQLParser::BTREE - 252))
        | (1ULL << (MySQLParser::CACHE - 252))
        | (1ULL << (MySQLParser::CASCADED - 252))
        | (1ULL << (MySQLParser::CHAIN - 252))
        | (1ULL << (MySQLParser::CHANGED - 252))
        | (1ULL << (MySQLParser::CHANNEL - 252))
        | (1ULL << (MySQLParser::CHECKSUM - 252))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
        | (1ULL << (MySQLParser::CIPHER - 252))
        | (1ULL << (MySQLParser::CLIENT - 252))
        | (1ULL << (MySQLParser::CLOSE - 252))
        | (1ULL << (MySQLParser::COALESCE - 252))
        | (1ULL << (MySQLParser::CODE - 252))
        | (1ULL << (MySQLParser::COLUMNS - 252))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
        | (1ULL << (MySQLParser::COMMENT - 252))
        | (1ULL << (MySQLParser::COMMIT - 252))
        | (1ULL << (MySQLParser::COMPACT - 252))
        | (1ULL << (MySQLParser::COMPLETION - 252))
        | (1ULL << (MySQLParser::COMPRESSED - 252))
        | (1ULL << (MySQLParser::COMPRESSION - 252))
        | (1ULL << (MySQLParser::CONCURRENT - 252))
        | (1ULL << (MySQLParser::CONNECTION - 252))
        | (1ULL << (MySQLParser::CONSISTENT - 252))
        | (1ULL << (MySQLParser::CONTAINS - 252))
        | (1ULL << (MySQLParser::CONTEXT - 252))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
        | (1ULL << (MySQLParser::COPY - 252))
        | (1ULL << (MySQLParser::CPU - 252))
        | (1ULL << (MySQLParser::DATA - 252))
        | (1ULL << (MySQLParser::DATAFILE - 252))
        | (1ULL << (MySQLParser::DEALLOCATE - 252))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
        | (1ULL << (MySQLParser::DEFINER - 252))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
        | (1ULL << (MySQLParser::DIRECTORY - 252))
        | (1ULL << (MySQLParser::DISABLE - 252))
        | (1ULL << (MySQLParser::DISCARD - 252))
        | (1ULL << (MySQLParser::DISK - 252))
        | (1ULL << (MySQLParser::DO - 252))
        | (1ULL << (MySQLParser::DUMPFILE - 252))
        | (1ULL << (MySQLParser::DUPLICATE - 252))
        | (1ULL << (MySQLParser::DYNAMIC - 252))
        | (1ULL << (MySQLParser::ENABLE - 252))
        | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
        | (1ULL << (MySQLParser::ENDS - 316))
        | (1ULL << (MySQLParser::ENGINE - 316))
        | (1ULL << (MySQLParser::ENGINES - 316))
        | (1ULL << (MySQLParser::ERROR - 316))
        | (1ULL << (MySQLParser::ERRORS - 316))
        | (1ULL << (MySQLParser::ESCAPE - 316))
        | (1ULL << (MySQLParser::EVEN - 316))
        | (1ULL << (MySQLParser::EVENT - 316))
        | (1ULL << (MySQLParser::EVENTS - 316))
        | (1ULL << (MySQLParser::EVERY - 316))
        | (1ULL << (MySQLParser::EXCHANGE - 316))
        | (1ULL << (MySQLParser::EXCLUSIVE - 316))
        | (1ULL << (MySQLParser::EXPIRE - 316))
        | (1ULL << (MySQLParser::EXPORT - 316))
        | (1ULL << (MySQLParser::EXTENDED - 316))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
        | (1ULL << (MySQLParser::FAST - 316))
        | (1ULL << (MySQLParser::FAULTS - 316))
        | (1ULL << (MySQLParser::FIELDS - 316))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::FILTER - 316))
        | (1ULL << (MySQLParser::FIRST - 316))
        | (1ULL << (MySQLParser::FIXED - 316))
        | (1ULL << (MySQLParser::FLUSH - 316))
        | (1ULL << (MySQLParser::FOLLOWS - 316))
        | (1ULL << (MySQLParser::FOUND - 316))
        | (1ULL << (MySQLParser::FULL - 316))
        | (1ULL << (MySQLParser::FUNCTION - 316))
        | (1ULL << (MySQLParser::GENERAL - 316))
        | (1ULL << (MySQLParser::GLOBAL - 316))
        | (1ULL << (MySQLParser::GRANTS - 316))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
        | (1ULL << (MySQLParser::HANDLER - 316))
        | (1ULL << (MySQLParser::HASH - 316))
        | (1ULL << (MySQLParser::HELP - 316))
        | (1ULL << (MySQLParser::HOST - 316))
        | (1ULL << (MySQLParser::HOSTS - 316))
        | (1ULL << (MySQLParser::IDENTIFIED - 316))
        | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
        | (1ULL << (MySQLParser::IMPORT - 316))
        | (1ULL << (MySQLParser::INDEXES - 316))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
        | (1ULL << (MySQLParser::INPLACE - 316))
        | (1ULL << (MySQLParser::INSERT_METHOD - 316))
        | (1ULL << (MySQLParser::INSTALL - 316))
        | (1ULL << (MySQLParser::INSTANCE - 316))
        | (1ULL << (MySQLParser::INVISIBLE - 316))
        | (1ULL << (MySQLParser::INVOKER - 316))
        | (1ULL << (MySQLParser::IO - 316))
        | (1ULL << (MySQLParser::IO_THREAD - 316))
        | (1ULL << (MySQLParser::IPC - 316))
        | (1ULL << (MySQLParser::ISOLATION - 316))
        | (1ULL << (MySQLParser::ISSUER - 316))
        | (1ULL << (MySQLParser::JSON - 316))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::LANGUAGE - 316))
        | (1ULL << (MySQLParser::LAST - 316))
        | (1ULL << (MySQLParser::LEAVES - 316))
        | (1ULL << (MySQLParser::LESS - 316))
        | (1ULL << (MySQLParser::LEVEL - 316))
        | (1ULL << (MySQLParser::LIST - 316))
        | (1ULL << (MySQLParser::LOCAL - 316))
        | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
        | (1ULL << (MySQLParser::MASTER - 380))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
        | (1ULL << (MySQLParser::MASTER_DELAY - 380))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
        | (1ULL << (MySQLParser::MASTER_HOST - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
        | (1ULL << (MySQLParser::MASTER_PORT - 380))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
        | (1ULL << (MySQLParser::MASTER_USER - 380))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_ROWS - 380))
        | (1ULL << (MySQLParser::MAX_SIZE - 380))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
        | (1ULL << (MySQLParser::MEDIUM - 380))
        | (1ULL << (MySQLParser::MERGE - 380))
        | (1ULL << (MySQLParser::MID - 380))
        | (1ULL << (MySQLParser::MIGRATE - 380))
        | (1ULL << (MySQLParser::MIN_ROWS - 380))
        | (1ULL << (MySQLParser::MODE - 380))
        | (1ULL << (MySQLParser::MODIFY - 380))
        | (1ULL << (MySQLParser::MUTEX - 380))
        | (1ULL << (MySQLParser::MYSQL - 380))
        | (1ULL << (MySQLParser::NAME - 380))
        | (1ULL << (MySQLParser::NAMES - 380))
        | (1ULL << (MySQLParser::NCHAR - 380))
        | (1ULL << (MySQLParser::NEVER - 380))
        | (1ULL << (MySQLParser::NEXT - 380))
        | (1ULL << (MySQLParser::NO - 380))
        | (1ULL << (MySQLParser::NODEGROUP - 380))
        | (1ULL << (MySQLParser::NONE - 380))
        | (1ULL << (MySQLParser::OFFLINE - 380))
        | (1ULL << (MySQLParser::OFFSET - 380))
        | (1ULL << (MySQLParser::OJ - 380))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
        | (1ULL << (MySQLParser::ONE - 380))
        | (1ULL << (MySQLParser::ONLINE - 380))
        | (1ULL << (MySQLParser::ONLY - 380))
        | (1ULL << (MySQLParser::OPEN - 380))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
        | (1ULL << (MySQLParser::OPTIONS - 380))
        | (1ULL << (MySQLParser::OWNER - 380))
        | (1ULL << (MySQLParser::PACK_KEYS - 380))
        | (1ULL << (MySQLParser::PAGE - 380))
        | (1ULL << (MySQLParser::PARSER - 380))
        | (1ULL << (MySQLParser::PARTIAL - 380))
        | (1ULL << (MySQLParser::PARTITIONING - 380))
        | (1ULL << (MySQLParser::PARTITIONS - 380))
        | (1ULL << (MySQLParser::PASSWORD - 380))
        | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
        | (1ULL << (MySQLParser::PLUGINS - 444))
        | (1ULL << (MySQLParser::PORT - 444))
        | (1ULL << (MySQLParser::PRECEDES - 444))
        | (1ULL << (MySQLParser::PREPARE - 444))
        | (1ULL << (MySQLParser::PRESERVE - 444))
        | (1ULL << (MySQLParser::PREV - 444))
        | (1ULL << (MySQLParser::PROCESSLIST - 444))
        | (1ULL << (MySQLParser::PROFILE - 444))
        | (1ULL << (MySQLParser::PROFILES - 444))
        | (1ULL << (MySQLParser::PROXY - 444))
        | (1ULL << (MySQLParser::QUERY - 444))
        | (1ULL << (MySQLParser::QUICK - 444))
        | (1ULL << (MySQLParser::REBUILD - 444))
        | (1ULL << (MySQLParser::RECOVER - 444))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
        | (1ULL << (MySQLParser::REDUNDANT - 444))
        | (1ULL << (MySQLParser::RELAY - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
        | (1ULL << (MySQLParser::RELAYLOG - 444))
        | (1ULL << (MySQLParser::REMOVE - 444))
        | (1ULL << (MySQLParser::REORGANIZE - 444))
        | (1ULL << (MySQLParser::REPAIR - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATION - 444))
        | (1ULL << (MySQLParser::RESET - 444))
        | (1ULL << (MySQLParser::RESUME - 444))
        | (1ULL << (MySQLParser::RETURNS - 444))
        | (1ULL << (MySQLParser::ROLLBACK - 444))
        | (1ULL << (MySQLParser::ROLLUP - 444))
        | (1ULL << (MySQLParser::ROTATE - 444))
        | (1ULL << (MySQLParser::ROW - 444))
        | (1ULL << (MySQLParser::ROWS - 444))
        | (1ULL << (MySQLParser::ROW_FORMAT - 444))
        | (1ULL << (MySQLParser::SAVEPOINT - 444))
        | (1ULL << (MySQLParser::SCHEDULE - 444))
        | (1ULL << (MySQLParser::SECURITY - 444))
        | (1ULL << (MySQLParser::SERVER - 444))
        | (1ULL << (MySQLParser::SESSION - 444))
        | (1ULL << (MySQLParser::SHARE - 444))
        | (1ULL << (MySQLParser::SHARED - 444))
        | (1ULL << (MySQLParser::SIGNED - 444))
        | (1ULL << (MySQLParser::SIMPLE - 444))
        | (1ULL << (MySQLParser::SLAVE - 444))
        | (1ULL << (MySQLParser::SLOW - 444))
        | (1ULL << (MySQLParser::SNAPSHOT - 444))
        | (1ULL << (MySQLParser::SOCKET - 444))
        | (1ULL << (MySQLParser::SOME - 444))
        | (1ULL << (MySQLParser::SONAME - 444))
        | (1ULL << (MySQLParser::SOUNDS - 444))
        | (1ULL << (MySQLParser::SOURCE - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
        | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
        | (1ULL << (MySQLParser::SQL_THREAD - 508))
        | (1ULL << (MySQLParser::START - 508))
        | (1ULL << (MySQLParser::STARTS - 508))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
        | (1ULL << (MySQLParser::STATUS - 508))
        | (1ULL << (MySQLParser::STOP - 508))
        | (1ULL << (MySQLParser::STORAGE - 508))
        | (1ULL << (MySQLParser::STRING - 508))
        | (1ULL << (MySQLParser::SUBJECT - 508))
        | (1ULL << (MySQLParser::SUBPARTITION - 508))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
        | (1ULL << (MySQLParser::SUSPEND - 508))
        | (1ULL << (MySQLParser::SWAPS - 508))
        | (1ULL << (MySQLParser::SWITCHES - 508))
        | (1ULL << (MySQLParser::TABLESPACE - 508))
        | (1ULL << (MySQLParser::TEMPORARY - 508))
        | (1ULL << (MySQLParser::TEMPTABLE - 508))
        | (1ULL << (MySQLParser::THAN - 508))
        | (1ULL << (MySQLParser::TRADITIONAL - 508))
        | (1ULL << (MySQLParser::TRANSACTION - 508))
        | (1ULL << (MySQLParser::TRIGGERS - 508))
        | (1ULL << (MySQLParser::TRUNCATE - 508))
        | (1ULL << (MySQLParser::UNDEFINED - 508))
        | (1ULL << (MySQLParser::UNDOFILE - 508))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
        | (1ULL << (MySQLParser::UNINSTALL - 508))
        | (1ULL << (MySQLParser::UNKNOWN - 508))
        | (1ULL << (MySQLParser::UNTIL - 508))
        | (1ULL << (MySQLParser::UPGRADE - 508))
        | (1ULL << (MySQLParser::USER - 508))
        | (1ULL << (MySQLParser::USE_FRM - 508))
        | (1ULL << (MySQLParser::USER_RESOURCES - 508))
        | (1ULL << (MySQLParser::VALIDATION - 508))
        | (1ULL << (MySQLParser::VALUE - 508))
        | (1ULL << (MySQLParser::VARIABLES - 508))
        | (1ULL << (MySQLParser::VIEW - 508))
        | (1ULL << (MySQLParser::VISIBLE - 508))
        | (1ULL << (MySQLParser::WAIT - 508))
        | (1ULL << (MySQLParser::WARNINGS - 508))
        | (1ULL << (MySQLParser::WITHOUT - 508))
        | (1ULL << (MySQLParser::WORK - 508))
        | (1ULL << (MySQLParser::WRAPPER - 508))
        | (1ULL << (MySQLParser::X509 - 508))
        | (1ULL << (MySQLParser::XA - 508))
        | (1ULL << (MySQLParser::XML - 508))
        | (1ULL << (MySQLParser::INTERNAL - 508))
        | (1ULL << (MySQLParser::QUARTER - 508))
        | (1ULL << (MySQLParser::MONTH - 508))
        | (1ULL << (MySQLParser::DAY - 508))
        | (1ULL << (MySQLParser::HOUR - 508))
        | (1ULL << (MySQLParser::MINUTE - 508))
        | (1ULL << (MySQLParser::WEEK - 508))
        | (1ULL << (MySQLParser::SECOND - 508))
        | (1ULL << (MySQLParser::MICROSECOND - 508))
        | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
        | (1ULL << (MySQLParser::EXECUTE - 572))
        | (1ULL << (MySQLParser::FILE - 572))
        | (1ULL << (MySQLParser::PROCESS - 572))
        | (1ULL << (MySQLParser::RELOAD - 572))
        | (1ULL << (MySQLParser::SHUTDOWN - 572))
        | (1ULL << (MySQLParser::SUPER - 572))
        | (1ULL << (MySQLParser::PRIVILEGES - 572))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
        | (1ULL << (MySQLParser::ARMSCII8 - 572))
        | (1ULL << (MySQLParser::ASCII - 572))
        | (1ULL << (MySQLParser::BIG5 - 572))
        | (1ULL << (MySQLParser::CP1250 - 572))
        | (1ULL << (MySQLParser::CP1251 - 572))
        | (1ULL << (MySQLParser::CP1256 - 572))
        | (1ULL << (MySQLParser::CP1257 - 572))
        | (1ULL << (MySQLParser::CP850 - 572))
        | (1ULL << (MySQLParser::CP852 - 572))
        | (1ULL << (MySQLParser::CP866 - 572))
        | (1ULL << (MySQLParser::CP932 - 572))
        | (1ULL << (MySQLParser::DEC8 - 572))
        | (1ULL << (MySQLParser::EUCJPMS - 572))
        | (1ULL << (MySQLParser::EUCKR - 572))
        | (1ULL << (MySQLParser::GB2312 - 572))
        | (1ULL << (MySQLParser::GBK - 572))
        | (1ULL << (MySQLParser::GEOSTD8 - 572))
        | (1ULL << (MySQLParser::GREEK - 572))
        | (1ULL << (MySQLParser::HEBREW - 572))
        | (1ULL << (MySQLParser::HP8 - 572))
        | (1ULL << (MySQLParser::KEYBCS2 - 572))
        | (1ULL << (MySQLParser::KOI8R - 572))
        | (1ULL << (MySQLParser::KOI8U - 572))
        | (1ULL << (MySQLParser::LATIN1 - 572))
        | (1ULL << (MySQLParser::LATIN2 - 572))
        | (1ULL << (MySQLParser::LATIN5 - 572))
        | (1ULL << (MySQLParser::LATIN7 - 572))
        | (1ULL << (MySQLParser::MACCE - 572))
        | (1ULL << (MySQLParser::MACROMAN - 572))
        | (1ULL << (MySQLParser::SJIS - 572))
        | (1ULL << (MySQLParser::SWE7 - 572))
        | (1ULL << (MySQLParser::TIS620 - 572))
        | (1ULL << (MySQLParser::UCS2 - 572))
        | (1ULL << (MySQLParser::UJIS - 572))
        | (1ULL << (MySQLParser::UTF16 - 572))
        | (1ULL << (MySQLParser::UTF16LE - 572))
        | (1ULL << (MySQLParser::UTF32 - 572))
        | (1ULL << (MySQLParser::UTF8 - 572))
        | (1ULL << (MySQLParser::UTF8MB3 - 572))
        | (1ULL << (MySQLParser::UTF8MB4 - 572))
        | (1ULL << (MySQLParser::ARCHIVE - 572))
        | (1ULL << (MySQLParser::BLACKHOLE - 572))
        | (1ULL << (MySQLParser::CSV - 572))
        | (1ULL << (MySQLParser::FEDERATED - 572))
        | (1ULL << (MySQLParser::INNODB - 572))
        | (1ULL << (MySQLParser::MEMORY - 572))
        | (1ULL << (MySQLParser::MRG_MYISAM - 572))
        | (1ULL << (MySQLParser::MYISAM - 572))
        | (1ULL << (MySQLParser::NDB - 572))
        | (1ULL << (MySQLParser::NDBCLUSTER - 572))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
        | (1ULL << (MySQLParser::TOKUDB - 572))
        | (1ULL << (MySQLParser::REPEATABLE - 572))
        | (1ULL << (MySQLParser::COMMITTED - 572))
        | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
        | (1ULL << (MySQLParser::LINESTRING - 636))
        | (1ULL << (MySQLParser::MULTILINESTRING - 636))
        | (1ULL << (MySQLParser::MULTIPOINT - 636))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
        | (1ULL << (MySQLParser::POINT - 636))
        | (1ULL << (MySQLParser::POLYGON - 636))
        | (1ULL << (MySQLParser::ABS - 636))
        | (1ULL << (MySQLParser::ACOS - 636))
        | (1ULL << (MySQLParser::ADDDATE - 636))
        | (1ULL << (MySQLParser::ADDTIME - 636))
        | (1ULL << (MySQLParser::AES_DECRYPT - 636))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
        | (1ULL << (MySQLParser::AREA - 636))
        | (1ULL << (MySQLParser::ASBINARY - 636))
        | (1ULL << (MySQLParser::ASIN - 636))
        | (1ULL << (MySQLParser::ASTEXT - 636))
        | (1ULL << (MySQLParser::ASWKB - 636))
        | (1ULL << (MySQLParser::ASWKT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
        | (1ULL << (MySQLParser::ATAN - 636))
        | (1ULL << (MySQLParser::ATAN2 - 636))
        | (1ULL << (MySQLParser::BENCHMARK - 636))
        | (1ULL << (MySQLParser::BIN - 636))
        | (1ULL << (MySQLParser::BIT_COUNT - 636))
        | (1ULL << (MySQLParser::BIT_LENGTH - 636))
        | (1ULL << (MySQLParser::BUFFER - 636))
        | (1ULL << (MySQLParser::CEIL - 636))
        | (1ULL << (MySQLParser::CEILING - 636))
        | (1ULL << (MySQLParser::CENTROID - 636))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
        | (1ULL << (MySQLParser::CHARSET - 636))
        | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
        | (1ULL << (MySQLParser::COERCIBILITY - 636))
        | (1ULL << (MySQLParser::COLLATION - 636))
        | (1ULL << (MySQLParser::COMPRESS - 636))
        | (1ULL << (MySQLParser::CONCAT - 636))
        | (1ULL << (MySQLParser::CONCAT_WS - 636))
        | (1ULL << (MySQLParser::CONNECTION_ID - 636))
        | (1ULL << (MySQLParser::CONV - 636))
        | (1ULL << (MySQLParser::CONVERT_TZ - 636))
        | (1ULL << (MySQLParser::COS - 636))
        | (1ULL << (MySQLParser::COT - 636))
        | (1ULL << (MySQLParser::CRC32 - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
        | (1ULL << (MySQLParser::CROSSES - 636))
        | (1ULL << (MySQLParser::DATEDIFF - 636))
        | (1ULL << (MySQLParser::DATE_FORMAT - 636))
        | (1ULL << (MySQLParser::DAYNAME - 636))
        | (1ULL << (MySQLParser::DAYOFMONTH - 636))
        | (1ULL << (MySQLParser::DAYOFWEEK - 636))
        | (1ULL << (MySQLParser::DAYOFYEAR - 636))
        | (1ULL << (MySQLParser::DECODE - 636))
        | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
        | (1ULL << (MySQLParser::DIMENSION - 700))
        | (1ULL << (MySQLParser::DISJOINT - 700))
        | (1ULL << (MySQLParser::ELT - 700))
        | (1ULL << (MySQLParser::ENCODE - 700))
        | (1ULL << (MySQLParser::ENCRYPT - 700))
        | (1ULL << (MySQLParser::ENDPOINT - 700))
        | (1ULL << (MySQLParser::ENVELOPE - 700))
        | (1ULL << (MySQLParser::EQUALS - 700))
        | (1ULL << (MySQLParser::EXP - 700))
        | (1ULL << (MySQLParser::EXPORT_SET - 700))
        | (1ULL << (MySQLParser::EXTERIORRING - 700))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
        | (1ULL << (MySQLParser::FIELD - 700))
        | (1ULL << (MySQLParser::FIND_IN_SET - 700))
        | (1ULL << (MySQLParser::FLOOR - 700))
        | (1ULL << (MySQLParser::FORMAT - 700))
        | (1ULL << (MySQLParser::FOUND_ROWS - 700))
        | (1ULL << (MySQLParser::FROM_BASE64 - 700))
        | (1ULL << (MySQLParser::FROM_DAYS - 700))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYN - 700))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
        | (1ULL << (MySQLParser::GET_FORMAT - 700))
        | (1ULL << (MySQLParser::GET_LOCK - 700))
        | (1ULL << (MySQLParser::GLENGTH - 700))
        | (1ULL << (MySQLParser::GREATEST - 700))
        | (1ULL << (MySQLParser::GTID_SUBSET - 700))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
        | (1ULL << (MySQLParser::HEX - 700))
        | (1ULL << (MySQLParser::IFNULL - 700))
        | (1ULL << (MySQLParser::INET6_ATON - 700))
        | (1ULL << (MySQLParser::INET6_NTOA - 700))
        | (1ULL << (MySQLParser::INET_ATON - 700))
        | (1ULL << (MySQLParser::INET_NTOA - 700))
        | (1ULL << (MySQLParser::INSTR - 700))
        | (1ULL << (MySQLParser::INTERIORRINGN - 700))
        | (1ULL << (MySQLParser::INTERSECTS - 700))
        | (1ULL << (MySQLParser::ISCLOSED - 700))
        | (1ULL << (MySQLParser::ISEMPTY - 700))
        | (1ULL << (MySQLParser::ISNULL - 700))
        | (1ULL << (MySQLParser::ISSIMPLE - 700))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
        | (1ULL << (MySQLParser::IS_IPV4 - 700))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
        | (1ULL << (MySQLParser::IS_IPV6 - 700))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
        | (1ULL << (MySQLParser::LCASE - 700))
        | (1ULL << (MySQLParser::LEAST - 700))
        | (1ULL << (MySQLParser::LENGTH - 700))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
        | (1ULL << (MySQLParser::LINEFROMWKB - 700))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::LN - 764))
        | (1ULL << (MySQLParser::LOAD_FILE - 764))
        | (1ULL << (MySQLParser::LOCATE - 764))
        | (1ULL << (MySQLParser::LOG - 764))
        | (1ULL << (MySQLParser::LOG10 - 764))
        | (1ULL << (MySQLParser::LOG2 - 764))
        | (1ULL << (MySQLParser::LOWER - 764))
        | (1ULL << (MySQLParser::LPAD - 764))
        | (1ULL << (MySQLParser::LTRIM - 764))
        | (1ULL << (MySQLParser::MAKEDATE - 764))
        | (1ULL << (MySQLParser::MAKETIME - 764))
        | (1ULL << (MySQLParser::MAKE_SET - 764))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
        | (1ULL << (MySQLParser::MBRCONTAINS - 764))
        | (1ULL << (MySQLParser::MBRDISJOINT - 764))
        | (1ULL << (MySQLParser::MBREQUAL - 764))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
        | (1ULL << (MySQLParser::MBROVERLAPS - 764))
        | (1ULL << (MySQLParser::MBRTOUCHES - 764))
        | (1ULL << (MySQLParser::MBRWITHIN - 764))
        | (1ULL << (MySQLParser::MD5 - 764))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
        | (1ULL << (MySQLParser::MONTHNAME - 764))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::NAME_CONST - 764))
        | (1ULL << (MySQLParser::NULLIF - 764))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
        | (1ULL << (MySQLParser::NUMPOINTS - 764))
        | (1ULL << (MySQLParser::OCT - 764))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
        | (1ULL << (MySQLParser::ORD - 764))
        | (1ULL << (MySQLParser::OVERLAPS - 764))
        | (1ULL << (MySQLParser::PERIOD_ADD - 764))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
        | (1ULL << (MySQLParser::PI - 764))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::POINTFROMWKB - 764))
        | (1ULL << (MySQLParser::POINTN - 764))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYFROMWKB - 764))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::POW - 764))
        | (1ULL << (MySQLParser::POWER - 764))
        | (1ULL << (MySQLParser::QUOTE - 764))
        | (1ULL << (MySQLParser::RADIANS - 764))
        | (1ULL << (MySQLParser::RAND - 764))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
        | (1ULL << (MySQLParser::REVERSE - 764))
        | (1ULL << (MySQLParser::ROUND - 764))
        | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
        | (1ULL << (MySQLParser::RTRIM - 828))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
        | (1ULL << (MySQLParser::SESSION_USER - 828))
        | (1ULL << (MySQLParser::SHA - 828))
        | (1ULL << (MySQLParser::SHA1 - 828))
        | (1ULL << (MySQLParser::SHA2 - 828))
        | (1ULL << (MySQLParser::SIGN - 828))
        | (1ULL << (MySQLParser::SIN - 828))
        | (1ULL << (MySQLParser::SLEEP - 828))
        | (1ULL << (MySQLParser::SOUNDEX - 828))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
        | (1ULL << (MySQLParser::SQRT - 828))
        | (1ULL << (MySQLParser::SRID - 828))
        | (1ULL << (MySQLParser::STARTPOINT - 828))
        | (1ULL << (MySQLParser::STRCMP - 828))
        | (1ULL << (MySQLParser::STR_TO_DATE - 828))
        | (1ULL << (MySQLParser::ST_AREA - 828))
        | (1ULL << (MySQLParser::ST_ASBINARY - 828))
        | (1ULL << (MySQLParser::ST_ASTEXT - 828))
        | (1ULL << (MySQLParser::ST_ASWKB - 828))
        | (1ULL << (MySQLParser::ST_ASWKT - 828))
        | (1ULL << (MySQLParser::ST_BUFFER - 828))
        | (1ULL << (MySQLParser::ST_CENTROID - 828))
        | (1ULL << (MySQLParser::ST_CONTAINS - 828))
        | (1ULL << (MySQLParser::ST_CROSSES - 828))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
        | (1ULL << (MySQLParser::ST_DIMENSION - 828))
        | (1ULL << (MySQLParser::ST_DISJOINT - 828))
        | (1ULL << (MySQLParser::ST_DISTANCE - 828))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
        | (1ULL << (MySQLParser::ST_EQUALS - 828))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_POINTN - 828))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_SRID - 892))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
        | (1ULL << (MySQLParser::ST_TOUCHES - 892))
        | (1ULL << (MySQLParser::ST_UNION - 892))
        | (1ULL << (MySQLParser::ST_WITHIN - 892))
        | (1ULL << (MySQLParser::ST_X - 892))
        | (1ULL << (MySQLParser::ST_Y - 892))
        | (1ULL << (MySQLParser::SUBDATE - 892))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
        | (1ULL << (MySQLParser::SUBTIME - 892))
        | (1ULL << (MySQLParser::SYSTEM_USER - 892))
        | (1ULL << (MySQLParser::TAN - 892))
        | (1ULL << (MySQLParser::TIMEDIFF - 892))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
        | (1ULL << (MySQLParser::TIME_FORMAT - 892))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
        | (1ULL << (MySQLParser::TOUCHES - 892))
        | (1ULL << (MySQLParser::TO_BASE64 - 892))
        | (1ULL << (MySQLParser::TO_DAYS - 892))
        | (1ULL << (MySQLParser::TO_SECONDS - 892))
        | (1ULL << (MySQLParser::UCASE - 892))
        | (1ULL << (MySQLParser::UNCOMPRESS - 892))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
        | (1ULL << (MySQLParser::UNHEX - 892))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
        | (1ULL << (MySQLParser::UPDATEXML - 892))
        | (1ULL << (MySQLParser::UPPER - 892))
        | (1ULL << (MySQLParser::UUID - 892))
        | (1ULL << (MySQLParser::UUID_SHORT - 892))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
        | (1ULL << (MySQLParser::VERSION - 892))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
        | (1ULL << (MySQLParser::WEEKDAY - 892))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
        | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
        | (1ULL << (MySQLParser::WITHIN - 892))
        | (1ULL << (MySQLParser::YEARWEEK - 892))
        | (1ULL << (MySQLParser::Y_FUNCTION - 892))
        | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
        | (1ULL << (MySQLParser::STRING_LITERAL - 974))
        | (1ULL << (MySQLParser::ID - 974))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
        setState(1465);
        dynamic_cast<PrimaryKeyTableConstraintContext *>(_localctx)->index = uid();
      }
      setState(1469);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::USING) {
        setState(1468);
        indexType();
      }
      setState(1471);
      indexColumnNames();
      setState(1475);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::USING

      || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

      || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
        setState(1472);
        indexOption();
        setState(1477);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySQLParser::UniqueKeyTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(1478);
        match(MySQLParser::CONSTRAINT);
        setState(1480);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(1479);
          dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1484);
      match(MySQLParser::UNIQUE);
      setState(1486);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY) {
        setState(1485);
        dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::INDEX

        || _la == MySQLParser::KEY)) {
          dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1489);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::TIMESTAMP - 184))
        | (1ULL << (MySQLParser::DATETIME - 184))
        | (1ULL << (MySQLParser::YEAR - 184))
        | (1ULL << (MySQLParser::TEXT - 184))
        | (1ULL << (MySQLParser::ENUM - 184))
        | (1ULL << (MySQLParser::SERIAL - 184))
        | (1ULL << (MySQLParser::COUNT - 184))
        | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
        | (1ULL << (MySQLParser::ACTION - 252))
        | (1ULL << (MySQLParser::AFTER - 252))
        | (1ULL << (MySQLParser::AGGREGATE - 252))
        | (1ULL << (MySQLParser::ALGORITHM - 252))
        | (1ULL << (MySQLParser::ANY - 252))
        | (1ULL << (MySQLParser::AT - 252))
        | (1ULL << (MySQLParser::AUTHORS - 252))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
        | (1ULL << (MySQLParser::BEGIN - 252))
        | (1ULL << (MySQLParser::BINLOG - 252))
        | (1ULL << (MySQLParser::BIT - 252))
        | (1ULL << (MySQLParser::BLOCK - 252))
        | (1ULL << (MySQLParser::BOOL - 252))
        | (1ULL << (MySQLParser::BOOLEAN - 252))
        | (1ULL << (MySQLParser::BTREE - 252))
        | (1ULL << (MySQLParser::CACHE - 252))
        | (1ULL << (MySQLParser::CASCADED - 252))
        | (1ULL << (MySQLParser::CHAIN - 252))
        | (1ULL << (MySQLParser::CHANGED - 252))
        | (1ULL << (MySQLParser::CHANNEL - 252))
        | (1ULL << (MySQLParser::CHECKSUM - 252))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
        | (1ULL << (MySQLParser::CIPHER - 252))
        | (1ULL << (MySQLParser::CLIENT - 252))
        | (1ULL << (MySQLParser::CLOSE - 252))
        | (1ULL << (MySQLParser::COALESCE - 252))
        | (1ULL << (MySQLParser::CODE - 252))
        | (1ULL << (MySQLParser::COLUMNS - 252))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
        | (1ULL << (MySQLParser::COMMENT - 252))
        | (1ULL << (MySQLParser::COMMIT - 252))
        | (1ULL << (MySQLParser::COMPACT - 252))
        | (1ULL << (MySQLParser::COMPLETION - 252))
        | (1ULL << (MySQLParser::COMPRESSED - 252))
        | (1ULL << (MySQLParser::COMPRESSION - 252))
        | (1ULL << (MySQLParser::CONCURRENT - 252))
        | (1ULL << (MySQLParser::CONNECTION - 252))
        | (1ULL << (MySQLParser::CONSISTENT - 252))
        | (1ULL << (MySQLParser::CONTAINS - 252))
        | (1ULL << (MySQLParser::CONTEXT - 252))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
        | (1ULL << (MySQLParser::COPY - 252))
        | (1ULL << (MySQLParser::CPU - 252))
        | (1ULL << (MySQLParser::DATA - 252))
        | (1ULL << (MySQLParser::DATAFILE - 252))
        | (1ULL << (MySQLParser::DEALLOCATE - 252))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
        | (1ULL << (MySQLParser::DEFINER - 252))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
        | (1ULL << (MySQLParser::DIRECTORY - 252))
        | (1ULL << (MySQLParser::DISABLE - 252))
        | (1ULL << (MySQLParser::DISCARD - 252))
        | (1ULL << (MySQLParser::DISK - 252))
        | (1ULL << (MySQLParser::DO - 252))
        | (1ULL << (MySQLParser::DUMPFILE - 252))
        | (1ULL << (MySQLParser::DUPLICATE - 252))
        | (1ULL << (MySQLParser::DYNAMIC - 252))
        | (1ULL << (MySQLParser::ENABLE - 252))
        | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
        | (1ULL << (MySQLParser::ENDS - 316))
        | (1ULL << (MySQLParser::ENGINE - 316))
        | (1ULL << (MySQLParser::ENGINES - 316))
        | (1ULL << (MySQLParser::ERROR - 316))
        | (1ULL << (MySQLParser::ERRORS - 316))
        | (1ULL << (MySQLParser::ESCAPE - 316))
        | (1ULL << (MySQLParser::EVEN - 316))
        | (1ULL << (MySQLParser::EVENT - 316))
        | (1ULL << (MySQLParser::EVENTS - 316))
        | (1ULL << (MySQLParser::EVERY - 316))
        | (1ULL << (MySQLParser::EXCHANGE - 316))
        | (1ULL << (MySQLParser::EXCLUSIVE - 316))
        | (1ULL << (MySQLParser::EXPIRE - 316))
        | (1ULL << (MySQLParser::EXPORT - 316))
        | (1ULL << (MySQLParser::EXTENDED - 316))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
        | (1ULL << (MySQLParser::FAST - 316))
        | (1ULL << (MySQLParser::FAULTS - 316))
        | (1ULL << (MySQLParser::FIELDS - 316))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::FILTER - 316))
        | (1ULL << (MySQLParser::FIRST - 316))
        | (1ULL << (MySQLParser::FIXED - 316))
        | (1ULL << (MySQLParser::FLUSH - 316))
        | (1ULL << (MySQLParser::FOLLOWS - 316))
        | (1ULL << (MySQLParser::FOUND - 316))
        | (1ULL << (MySQLParser::FULL - 316))
        | (1ULL << (MySQLParser::FUNCTION - 316))
        | (1ULL << (MySQLParser::GENERAL - 316))
        | (1ULL << (MySQLParser::GLOBAL - 316))
        | (1ULL << (MySQLParser::GRANTS - 316))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
        | (1ULL << (MySQLParser::HANDLER - 316))
        | (1ULL << (MySQLParser::HASH - 316))
        | (1ULL << (MySQLParser::HELP - 316))
        | (1ULL << (MySQLParser::HOST - 316))
        | (1ULL << (MySQLParser::HOSTS - 316))
        | (1ULL << (MySQLParser::IDENTIFIED - 316))
        | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
        | (1ULL << (MySQLParser::IMPORT - 316))
        | (1ULL << (MySQLParser::INDEXES - 316))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
        | (1ULL << (MySQLParser::INPLACE - 316))
        | (1ULL << (MySQLParser::INSERT_METHOD - 316))
        | (1ULL << (MySQLParser::INSTALL - 316))
        | (1ULL << (MySQLParser::INSTANCE - 316))
        | (1ULL << (MySQLParser::INVISIBLE - 316))
        | (1ULL << (MySQLParser::INVOKER - 316))
        | (1ULL << (MySQLParser::IO - 316))
        | (1ULL << (MySQLParser::IO_THREAD - 316))
        | (1ULL << (MySQLParser::IPC - 316))
        | (1ULL << (MySQLParser::ISOLATION - 316))
        | (1ULL << (MySQLParser::ISSUER - 316))
        | (1ULL << (MySQLParser::JSON - 316))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::LANGUAGE - 316))
        | (1ULL << (MySQLParser::LAST - 316))
        | (1ULL << (MySQLParser::LEAVES - 316))
        | (1ULL << (MySQLParser::LESS - 316))
        | (1ULL << (MySQLParser::LEVEL - 316))
        | (1ULL << (MySQLParser::LIST - 316))
        | (1ULL << (MySQLParser::LOCAL - 316))
        | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
        | (1ULL << (MySQLParser::MASTER - 380))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
        | (1ULL << (MySQLParser::MASTER_DELAY - 380))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
        | (1ULL << (MySQLParser::MASTER_HOST - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
        | (1ULL << (MySQLParser::MASTER_PORT - 380))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
        | (1ULL << (MySQLParser::MASTER_USER - 380))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_ROWS - 380))
        | (1ULL << (MySQLParser::MAX_SIZE - 380))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
        | (1ULL << (MySQLParser::MEDIUM - 380))
        | (1ULL << (MySQLParser::MERGE - 380))
        | (1ULL << (MySQLParser::MID - 380))
        | (1ULL << (MySQLParser::MIGRATE - 380))
        | (1ULL << (MySQLParser::MIN_ROWS - 380))
        | (1ULL << (MySQLParser::MODE - 380))
        | (1ULL << (MySQLParser::MODIFY - 380))
        | (1ULL << (MySQLParser::MUTEX - 380))
        | (1ULL << (MySQLParser::MYSQL - 380))
        | (1ULL << (MySQLParser::NAME - 380))
        | (1ULL << (MySQLParser::NAMES - 380))
        | (1ULL << (MySQLParser::NCHAR - 380))
        | (1ULL << (MySQLParser::NEVER - 380))
        | (1ULL << (MySQLParser::NEXT - 380))
        | (1ULL << (MySQLParser::NO - 380))
        | (1ULL << (MySQLParser::NODEGROUP - 380))
        | (1ULL << (MySQLParser::NONE - 380))
        | (1ULL << (MySQLParser::OFFLINE - 380))
        | (1ULL << (MySQLParser::OFFSET - 380))
        | (1ULL << (MySQLParser::OJ - 380))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
        | (1ULL << (MySQLParser::ONE - 380))
        | (1ULL << (MySQLParser::ONLINE - 380))
        | (1ULL << (MySQLParser::ONLY - 380))
        | (1ULL << (MySQLParser::OPEN - 380))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
        | (1ULL << (MySQLParser::OPTIONS - 380))
        | (1ULL << (MySQLParser::OWNER - 380))
        | (1ULL << (MySQLParser::PACK_KEYS - 380))
        | (1ULL << (MySQLParser::PAGE - 380))
        | (1ULL << (MySQLParser::PARSER - 380))
        | (1ULL << (MySQLParser::PARTIAL - 380))
        | (1ULL << (MySQLParser::PARTITIONING - 380))
        | (1ULL << (MySQLParser::PARTITIONS - 380))
        | (1ULL << (MySQLParser::PASSWORD - 380))
        | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
        | (1ULL << (MySQLParser::PLUGINS - 444))
        | (1ULL << (MySQLParser::PORT - 444))
        | (1ULL << (MySQLParser::PRECEDES - 444))
        | (1ULL << (MySQLParser::PREPARE - 444))
        | (1ULL << (MySQLParser::PRESERVE - 444))
        | (1ULL << (MySQLParser::PREV - 444))
        | (1ULL << (MySQLParser::PROCESSLIST - 444))
        | (1ULL << (MySQLParser::PROFILE - 444))
        | (1ULL << (MySQLParser::PROFILES - 444))
        | (1ULL << (MySQLParser::PROXY - 444))
        | (1ULL << (MySQLParser::QUERY - 444))
        | (1ULL << (MySQLParser::QUICK - 444))
        | (1ULL << (MySQLParser::REBUILD - 444))
        | (1ULL << (MySQLParser::RECOVER - 444))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
        | (1ULL << (MySQLParser::REDUNDANT - 444))
        | (1ULL << (MySQLParser::RELAY - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
        | (1ULL << (MySQLParser::RELAYLOG - 444))
        | (1ULL << (MySQLParser::REMOVE - 444))
        | (1ULL << (MySQLParser::REORGANIZE - 444))
        | (1ULL << (MySQLParser::REPAIR - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATION - 444))
        | (1ULL << (MySQLParser::RESET - 444))
        | (1ULL << (MySQLParser::RESUME - 444))
        | (1ULL << (MySQLParser::RETURNS - 444))
        | (1ULL << (MySQLParser::ROLLBACK - 444))
        | (1ULL << (MySQLParser::ROLLUP - 444))
        | (1ULL << (MySQLParser::ROTATE - 444))
        | (1ULL << (MySQLParser::ROW - 444))
        | (1ULL << (MySQLParser::ROWS - 444))
        | (1ULL << (MySQLParser::ROW_FORMAT - 444))
        | (1ULL << (MySQLParser::SAVEPOINT - 444))
        | (1ULL << (MySQLParser::SCHEDULE - 444))
        | (1ULL << (MySQLParser::SECURITY - 444))
        | (1ULL << (MySQLParser::SERVER - 444))
        | (1ULL << (MySQLParser::SESSION - 444))
        | (1ULL << (MySQLParser::SHARE - 444))
        | (1ULL << (MySQLParser::SHARED - 444))
        | (1ULL << (MySQLParser::SIGNED - 444))
        | (1ULL << (MySQLParser::SIMPLE - 444))
        | (1ULL << (MySQLParser::SLAVE - 444))
        | (1ULL << (MySQLParser::SLOW - 444))
        | (1ULL << (MySQLParser::SNAPSHOT - 444))
        | (1ULL << (MySQLParser::SOCKET - 444))
        | (1ULL << (MySQLParser::SOME - 444))
        | (1ULL << (MySQLParser::SONAME - 444))
        | (1ULL << (MySQLParser::SOUNDS - 444))
        | (1ULL << (MySQLParser::SOURCE - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
        | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
        | (1ULL << (MySQLParser::SQL_THREAD - 508))
        | (1ULL << (MySQLParser::START - 508))
        | (1ULL << (MySQLParser::STARTS - 508))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
        | (1ULL << (MySQLParser::STATUS - 508))
        | (1ULL << (MySQLParser::STOP - 508))
        | (1ULL << (MySQLParser::STORAGE - 508))
        | (1ULL << (MySQLParser::STRING - 508))
        | (1ULL << (MySQLParser::SUBJECT - 508))
        | (1ULL << (MySQLParser::SUBPARTITION - 508))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
        | (1ULL << (MySQLParser::SUSPEND - 508))
        | (1ULL << (MySQLParser::SWAPS - 508))
        | (1ULL << (MySQLParser::SWITCHES - 508))
        | (1ULL << (MySQLParser::TABLESPACE - 508))
        | (1ULL << (MySQLParser::TEMPORARY - 508))
        | (1ULL << (MySQLParser::TEMPTABLE - 508))
        | (1ULL << (MySQLParser::THAN - 508))
        | (1ULL << (MySQLParser::TRADITIONAL - 508))
        | (1ULL << (MySQLParser::TRANSACTION - 508))
        | (1ULL << (MySQLParser::TRIGGERS - 508))
        | (1ULL << (MySQLParser::TRUNCATE - 508))
        | (1ULL << (MySQLParser::UNDEFINED - 508))
        | (1ULL << (MySQLParser::UNDOFILE - 508))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
        | (1ULL << (MySQLParser::UNINSTALL - 508))
        | (1ULL << (MySQLParser::UNKNOWN - 508))
        | (1ULL << (MySQLParser::UNTIL - 508))
        | (1ULL << (MySQLParser::UPGRADE - 508))
        | (1ULL << (MySQLParser::USER - 508))
        | (1ULL << (MySQLParser::USE_FRM - 508))
        | (1ULL << (MySQLParser::USER_RESOURCES - 508))
        | (1ULL << (MySQLParser::VALIDATION - 508))
        | (1ULL << (MySQLParser::VALUE - 508))
        | (1ULL << (MySQLParser::VARIABLES - 508))
        | (1ULL << (MySQLParser::VIEW - 508))
        | (1ULL << (MySQLParser::VISIBLE - 508))
        | (1ULL << (MySQLParser::WAIT - 508))
        | (1ULL << (MySQLParser::WARNINGS - 508))
        | (1ULL << (MySQLParser::WITHOUT - 508))
        | (1ULL << (MySQLParser::WORK - 508))
        | (1ULL << (MySQLParser::WRAPPER - 508))
        | (1ULL << (MySQLParser::X509 - 508))
        | (1ULL << (MySQLParser::XA - 508))
        | (1ULL << (MySQLParser::XML - 508))
        | (1ULL << (MySQLParser::INTERNAL - 508))
        | (1ULL << (MySQLParser::QUARTER - 508))
        | (1ULL << (MySQLParser::MONTH - 508))
        | (1ULL << (MySQLParser::DAY - 508))
        | (1ULL << (MySQLParser::HOUR - 508))
        | (1ULL << (MySQLParser::MINUTE - 508))
        | (1ULL << (MySQLParser::WEEK - 508))
        | (1ULL << (MySQLParser::SECOND - 508))
        | (1ULL << (MySQLParser::MICROSECOND - 508))
        | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
        | (1ULL << (MySQLParser::EXECUTE - 572))
        | (1ULL << (MySQLParser::FILE - 572))
        | (1ULL << (MySQLParser::PROCESS - 572))
        | (1ULL << (MySQLParser::RELOAD - 572))
        | (1ULL << (MySQLParser::SHUTDOWN - 572))
        | (1ULL << (MySQLParser::SUPER - 572))
        | (1ULL << (MySQLParser::PRIVILEGES - 572))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
        | (1ULL << (MySQLParser::ARMSCII8 - 572))
        | (1ULL << (MySQLParser::ASCII - 572))
        | (1ULL << (MySQLParser::BIG5 - 572))
        | (1ULL << (MySQLParser::CP1250 - 572))
        | (1ULL << (MySQLParser::CP1251 - 572))
        | (1ULL << (MySQLParser::CP1256 - 572))
        | (1ULL << (MySQLParser::CP1257 - 572))
        | (1ULL << (MySQLParser::CP850 - 572))
        | (1ULL << (MySQLParser::CP852 - 572))
        | (1ULL << (MySQLParser::CP866 - 572))
        | (1ULL << (MySQLParser::CP932 - 572))
        | (1ULL << (MySQLParser::DEC8 - 572))
        | (1ULL << (MySQLParser::EUCJPMS - 572))
        | (1ULL << (MySQLParser::EUCKR - 572))
        | (1ULL << (MySQLParser::GB2312 - 572))
        | (1ULL << (MySQLParser::GBK - 572))
        | (1ULL << (MySQLParser::GEOSTD8 - 572))
        | (1ULL << (MySQLParser::GREEK - 572))
        | (1ULL << (MySQLParser::HEBREW - 572))
        | (1ULL << (MySQLParser::HP8 - 572))
        | (1ULL << (MySQLParser::KEYBCS2 - 572))
        | (1ULL << (MySQLParser::KOI8R - 572))
        | (1ULL << (MySQLParser::KOI8U - 572))
        | (1ULL << (MySQLParser::LATIN1 - 572))
        | (1ULL << (MySQLParser::LATIN2 - 572))
        | (1ULL << (MySQLParser::LATIN5 - 572))
        | (1ULL << (MySQLParser::LATIN7 - 572))
        | (1ULL << (MySQLParser::MACCE - 572))
        | (1ULL << (MySQLParser::MACROMAN - 572))
        | (1ULL << (MySQLParser::SJIS - 572))
        | (1ULL << (MySQLParser::SWE7 - 572))
        | (1ULL << (MySQLParser::TIS620 - 572))
        | (1ULL << (MySQLParser::UCS2 - 572))
        | (1ULL << (MySQLParser::UJIS - 572))
        | (1ULL << (MySQLParser::UTF16 - 572))
        | (1ULL << (MySQLParser::UTF16LE - 572))
        | (1ULL << (MySQLParser::UTF32 - 572))
        | (1ULL << (MySQLParser::UTF8 - 572))
        | (1ULL << (MySQLParser::UTF8MB3 - 572))
        | (1ULL << (MySQLParser::UTF8MB4 - 572))
        | (1ULL << (MySQLParser::ARCHIVE - 572))
        | (1ULL << (MySQLParser::BLACKHOLE - 572))
        | (1ULL << (MySQLParser::CSV - 572))
        | (1ULL << (MySQLParser::FEDERATED - 572))
        | (1ULL << (MySQLParser::INNODB - 572))
        | (1ULL << (MySQLParser::MEMORY - 572))
        | (1ULL << (MySQLParser::MRG_MYISAM - 572))
        | (1ULL << (MySQLParser::MYISAM - 572))
        | (1ULL << (MySQLParser::NDB - 572))
        | (1ULL << (MySQLParser::NDBCLUSTER - 572))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
        | (1ULL << (MySQLParser::TOKUDB - 572))
        | (1ULL << (MySQLParser::REPEATABLE - 572))
        | (1ULL << (MySQLParser::COMMITTED - 572))
        | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
        | (1ULL << (MySQLParser::LINESTRING - 636))
        | (1ULL << (MySQLParser::MULTILINESTRING - 636))
        | (1ULL << (MySQLParser::MULTIPOINT - 636))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
        | (1ULL << (MySQLParser::POINT - 636))
        | (1ULL << (MySQLParser::POLYGON - 636))
        | (1ULL << (MySQLParser::ABS - 636))
        | (1ULL << (MySQLParser::ACOS - 636))
        | (1ULL << (MySQLParser::ADDDATE - 636))
        | (1ULL << (MySQLParser::ADDTIME - 636))
        | (1ULL << (MySQLParser::AES_DECRYPT - 636))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
        | (1ULL << (MySQLParser::AREA - 636))
        | (1ULL << (MySQLParser::ASBINARY - 636))
        | (1ULL << (MySQLParser::ASIN - 636))
        | (1ULL << (MySQLParser::ASTEXT - 636))
        | (1ULL << (MySQLParser::ASWKB - 636))
        | (1ULL << (MySQLParser::ASWKT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
        | (1ULL << (MySQLParser::ATAN - 636))
        | (1ULL << (MySQLParser::ATAN2 - 636))
        | (1ULL << (MySQLParser::BENCHMARK - 636))
        | (1ULL << (MySQLParser::BIN - 636))
        | (1ULL << (MySQLParser::BIT_COUNT - 636))
        | (1ULL << (MySQLParser::BIT_LENGTH - 636))
        | (1ULL << (MySQLParser::BUFFER - 636))
        | (1ULL << (MySQLParser::CEIL - 636))
        | (1ULL << (MySQLParser::CEILING - 636))
        | (1ULL << (MySQLParser::CENTROID - 636))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
        | (1ULL << (MySQLParser::CHARSET - 636))
        | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
        | (1ULL << (MySQLParser::COERCIBILITY - 636))
        | (1ULL << (MySQLParser::COLLATION - 636))
        | (1ULL << (MySQLParser::COMPRESS - 636))
        | (1ULL << (MySQLParser::CONCAT - 636))
        | (1ULL << (MySQLParser::CONCAT_WS - 636))
        | (1ULL << (MySQLParser::CONNECTION_ID - 636))
        | (1ULL << (MySQLParser::CONV - 636))
        | (1ULL << (MySQLParser::CONVERT_TZ - 636))
        | (1ULL << (MySQLParser::COS - 636))
        | (1ULL << (MySQLParser::COT - 636))
        | (1ULL << (MySQLParser::CRC32 - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
        | (1ULL << (MySQLParser::CROSSES - 636))
        | (1ULL << (MySQLParser::DATEDIFF - 636))
        | (1ULL << (MySQLParser::DATE_FORMAT - 636))
        | (1ULL << (MySQLParser::DAYNAME - 636))
        | (1ULL << (MySQLParser::DAYOFMONTH - 636))
        | (1ULL << (MySQLParser::DAYOFWEEK - 636))
        | (1ULL << (MySQLParser::DAYOFYEAR - 636))
        | (1ULL << (MySQLParser::DECODE - 636))
        | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
        | (1ULL << (MySQLParser::DIMENSION - 700))
        | (1ULL << (MySQLParser::DISJOINT - 700))
        | (1ULL << (MySQLParser::ELT - 700))
        | (1ULL << (MySQLParser::ENCODE - 700))
        | (1ULL << (MySQLParser::ENCRYPT - 700))
        | (1ULL << (MySQLParser::ENDPOINT - 700))
        | (1ULL << (MySQLParser::ENVELOPE - 700))
        | (1ULL << (MySQLParser::EQUALS - 700))
        | (1ULL << (MySQLParser::EXP - 700))
        | (1ULL << (MySQLParser::EXPORT_SET - 700))
        | (1ULL << (MySQLParser::EXTERIORRING - 700))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
        | (1ULL << (MySQLParser::FIELD - 700))
        | (1ULL << (MySQLParser::FIND_IN_SET - 700))
        | (1ULL << (MySQLParser::FLOOR - 700))
        | (1ULL << (MySQLParser::FORMAT - 700))
        | (1ULL << (MySQLParser::FOUND_ROWS - 700))
        | (1ULL << (MySQLParser::FROM_BASE64 - 700))
        | (1ULL << (MySQLParser::FROM_DAYS - 700))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYN - 700))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
        | (1ULL << (MySQLParser::GET_FORMAT - 700))
        | (1ULL << (MySQLParser::GET_LOCK - 700))
        | (1ULL << (MySQLParser::GLENGTH - 700))
        | (1ULL << (MySQLParser::GREATEST - 700))
        | (1ULL << (MySQLParser::GTID_SUBSET - 700))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
        | (1ULL << (MySQLParser::HEX - 700))
        | (1ULL << (MySQLParser::IFNULL - 700))
        | (1ULL << (MySQLParser::INET6_ATON - 700))
        | (1ULL << (MySQLParser::INET6_NTOA - 700))
        | (1ULL << (MySQLParser::INET_ATON - 700))
        | (1ULL << (MySQLParser::INET_NTOA - 700))
        | (1ULL << (MySQLParser::INSTR - 700))
        | (1ULL << (MySQLParser::INTERIORRINGN - 700))
        | (1ULL << (MySQLParser::INTERSECTS - 700))
        | (1ULL << (MySQLParser::ISCLOSED - 700))
        | (1ULL << (MySQLParser::ISEMPTY - 700))
        | (1ULL << (MySQLParser::ISNULL - 700))
        | (1ULL << (MySQLParser::ISSIMPLE - 700))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
        | (1ULL << (MySQLParser::IS_IPV4 - 700))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
        | (1ULL << (MySQLParser::IS_IPV6 - 700))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
        | (1ULL << (MySQLParser::LCASE - 700))
        | (1ULL << (MySQLParser::LEAST - 700))
        | (1ULL << (MySQLParser::LENGTH - 700))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
        | (1ULL << (MySQLParser::LINEFROMWKB - 700))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::LN - 764))
        | (1ULL << (MySQLParser::LOAD_FILE - 764))
        | (1ULL << (MySQLParser::LOCATE - 764))
        | (1ULL << (MySQLParser::LOG - 764))
        | (1ULL << (MySQLParser::LOG10 - 764))
        | (1ULL << (MySQLParser::LOG2 - 764))
        | (1ULL << (MySQLParser::LOWER - 764))
        | (1ULL << (MySQLParser::LPAD - 764))
        | (1ULL << (MySQLParser::LTRIM - 764))
        | (1ULL << (MySQLParser::MAKEDATE - 764))
        | (1ULL << (MySQLParser::MAKETIME - 764))
        | (1ULL << (MySQLParser::MAKE_SET - 764))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
        | (1ULL << (MySQLParser::MBRCONTAINS - 764))
        | (1ULL << (MySQLParser::MBRDISJOINT - 764))
        | (1ULL << (MySQLParser::MBREQUAL - 764))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
        | (1ULL << (MySQLParser::MBROVERLAPS - 764))
        | (1ULL << (MySQLParser::MBRTOUCHES - 764))
        | (1ULL << (MySQLParser::MBRWITHIN - 764))
        | (1ULL << (MySQLParser::MD5 - 764))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
        | (1ULL << (MySQLParser::MONTHNAME - 764))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::NAME_CONST - 764))
        | (1ULL << (MySQLParser::NULLIF - 764))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
        | (1ULL << (MySQLParser::NUMPOINTS - 764))
        | (1ULL << (MySQLParser::OCT - 764))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
        | (1ULL << (MySQLParser::ORD - 764))
        | (1ULL << (MySQLParser::OVERLAPS - 764))
        | (1ULL << (MySQLParser::PERIOD_ADD - 764))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
        | (1ULL << (MySQLParser::PI - 764))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::POINTFROMWKB - 764))
        | (1ULL << (MySQLParser::POINTN - 764))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYFROMWKB - 764))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::POW - 764))
        | (1ULL << (MySQLParser::POWER - 764))
        | (1ULL << (MySQLParser::QUOTE - 764))
        | (1ULL << (MySQLParser::RADIANS - 764))
        | (1ULL << (MySQLParser::RAND - 764))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
        | (1ULL << (MySQLParser::REVERSE - 764))
        | (1ULL << (MySQLParser::ROUND - 764))
        | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
        | (1ULL << (MySQLParser::RTRIM - 828))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
        | (1ULL << (MySQLParser::SESSION_USER - 828))
        | (1ULL << (MySQLParser::SHA - 828))
        | (1ULL << (MySQLParser::SHA1 - 828))
        | (1ULL << (MySQLParser::SHA2 - 828))
        | (1ULL << (MySQLParser::SIGN - 828))
        | (1ULL << (MySQLParser::SIN - 828))
        | (1ULL << (MySQLParser::SLEEP - 828))
        | (1ULL << (MySQLParser::SOUNDEX - 828))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
        | (1ULL << (MySQLParser::SQRT - 828))
        | (1ULL << (MySQLParser::SRID - 828))
        | (1ULL << (MySQLParser::STARTPOINT - 828))
        | (1ULL << (MySQLParser::STRCMP - 828))
        | (1ULL << (MySQLParser::STR_TO_DATE - 828))
        | (1ULL << (MySQLParser::ST_AREA - 828))
        | (1ULL << (MySQLParser::ST_ASBINARY - 828))
        | (1ULL << (MySQLParser::ST_ASTEXT - 828))
        | (1ULL << (MySQLParser::ST_ASWKB - 828))
        | (1ULL << (MySQLParser::ST_ASWKT - 828))
        | (1ULL << (MySQLParser::ST_BUFFER - 828))
        | (1ULL << (MySQLParser::ST_CENTROID - 828))
        | (1ULL << (MySQLParser::ST_CONTAINS - 828))
        | (1ULL << (MySQLParser::ST_CROSSES - 828))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
        | (1ULL << (MySQLParser::ST_DIMENSION - 828))
        | (1ULL << (MySQLParser::ST_DISJOINT - 828))
        | (1ULL << (MySQLParser::ST_DISTANCE - 828))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
        | (1ULL << (MySQLParser::ST_EQUALS - 828))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_POINTN - 828))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_SRID - 892))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
        | (1ULL << (MySQLParser::ST_TOUCHES - 892))
        | (1ULL << (MySQLParser::ST_UNION - 892))
        | (1ULL << (MySQLParser::ST_WITHIN - 892))
        | (1ULL << (MySQLParser::ST_X - 892))
        | (1ULL << (MySQLParser::ST_Y - 892))
        | (1ULL << (MySQLParser::SUBDATE - 892))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
        | (1ULL << (MySQLParser::SUBTIME - 892))
        | (1ULL << (MySQLParser::SYSTEM_USER - 892))
        | (1ULL << (MySQLParser::TAN - 892))
        | (1ULL << (MySQLParser::TIMEDIFF - 892))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
        | (1ULL << (MySQLParser::TIME_FORMAT - 892))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
        | (1ULL << (MySQLParser::TOUCHES - 892))
        | (1ULL << (MySQLParser::TO_BASE64 - 892))
        | (1ULL << (MySQLParser::TO_DAYS - 892))
        | (1ULL << (MySQLParser::TO_SECONDS - 892))
        | (1ULL << (MySQLParser::UCASE - 892))
        | (1ULL << (MySQLParser::UNCOMPRESS - 892))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
        | (1ULL << (MySQLParser::UNHEX - 892))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
        | (1ULL << (MySQLParser::UPDATEXML - 892))
        | (1ULL << (MySQLParser::UPPER - 892))
        | (1ULL << (MySQLParser::UUID - 892))
        | (1ULL << (MySQLParser::UUID_SHORT - 892))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
        | (1ULL << (MySQLParser::VERSION - 892))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
        | (1ULL << (MySQLParser::WEEKDAY - 892))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
        | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
        | (1ULL << (MySQLParser::WITHIN - 892))
        | (1ULL << (MySQLParser::YEARWEEK - 892))
        | (1ULL << (MySQLParser::Y_FUNCTION - 892))
        | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
        | (1ULL << (MySQLParser::STRING_LITERAL - 974))
        | (1ULL << (MySQLParser::ID - 974))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
        setState(1488);
        dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->index = uid();
      }
      setState(1492);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::USING) {
        setState(1491);
        indexType();
      }
      setState(1494);
      indexColumnNames();
      setState(1498);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::USING

      || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

      || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
        setState(1495);
        indexOption();
        setState(1500);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySQLParser::ForeignKeyTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1505);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(1501);
        match(MySQLParser::CONSTRAINT);
        setState(1503);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(1502);
          dynamic_cast<ForeignKeyTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1507);
      match(MySQLParser::FOREIGN);
      setState(1508);
      match(MySQLParser::KEY);
      setState(1510);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::TIMESTAMP - 184))
        | (1ULL << (MySQLParser::DATETIME - 184))
        | (1ULL << (MySQLParser::YEAR - 184))
        | (1ULL << (MySQLParser::TEXT - 184))
        | (1ULL << (MySQLParser::ENUM - 184))
        | (1ULL << (MySQLParser::SERIAL - 184))
        | (1ULL << (MySQLParser::COUNT - 184))
        | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
        | (1ULL << (MySQLParser::ACTION - 252))
        | (1ULL << (MySQLParser::AFTER - 252))
        | (1ULL << (MySQLParser::AGGREGATE - 252))
        | (1ULL << (MySQLParser::ALGORITHM - 252))
        | (1ULL << (MySQLParser::ANY - 252))
        | (1ULL << (MySQLParser::AT - 252))
        | (1ULL << (MySQLParser::AUTHORS - 252))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
        | (1ULL << (MySQLParser::BEGIN - 252))
        | (1ULL << (MySQLParser::BINLOG - 252))
        | (1ULL << (MySQLParser::BIT - 252))
        | (1ULL << (MySQLParser::BLOCK - 252))
        | (1ULL << (MySQLParser::BOOL - 252))
        | (1ULL << (MySQLParser::BOOLEAN - 252))
        | (1ULL << (MySQLParser::BTREE - 252))
        | (1ULL << (MySQLParser::CACHE - 252))
        | (1ULL << (MySQLParser::CASCADED - 252))
        | (1ULL << (MySQLParser::CHAIN - 252))
        | (1ULL << (MySQLParser::CHANGED - 252))
        | (1ULL << (MySQLParser::CHANNEL - 252))
        | (1ULL << (MySQLParser::CHECKSUM - 252))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
        | (1ULL << (MySQLParser::CIPHER - 252))
        | (1ULL << (MySQLParser::CLIENT - 252))
        | (1ULL << (MySQLParser::CLOSE - 252))
        | (1ULL << (MySQLParser::COALESCE - 252))
        | (1ULL << (MySQLParser::CODE - 252))
        | (1ULL << (MySQLParser::COLUMNS - 252))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
        | (1ULL << (MySQLParser::COMMENT - 252))
        | (1ULL << (MySQLParser::COMMIT - 252))
        | (1ULL << (MySQLParser::COMPACT - 252))
        | (1ULL << (MySQLParser::COMPLETION - 252))
        | (1ULL << (MySQLParser::COMPRESSED - 252))
        | (1ULL << (MySQLParser::COMPRESSION - 252))
        | (1ULL << (MySQLParser::CONCURRENT - 252))
        | (1ULL << (MySQLParser::CONNECTION - 252))
        | (1ULL << (MySQLParser::CONSISTENT - 252))
        | (1ULL << (MySQLParser::CONTAINS - 252))
        | (1ULL << (MySQLParser::CONTEXT - 252))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
        | (1ULL << (MySQLParser::COPY - 252))
        | (1ULL << (MySQLParser::CPU - 252))
        | (1ULL << (MySQLParser::DATA - 252))
        | (1ULL << (MySQLParser::DATAFILE - 252))
        | (1ULL << (MySQLParser::DEALLOCATE - 252))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
        | (1ULL << (MySQLParser::DEFINER - 252))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
        | (1ULL << (MySQLParser::DIRECTORY - 252))
        | (1ULL << (MySQLParser::DISABLE - 252))
        | (1ULL << (MySQLParser::DISCARD - 252))
        | (1ULL << (MySQLParser::DISK - 252))
        | (1ULL << (MySQLParser::DO - 252))
        | (1ULL << (MySQLParser::DUMPFILE - 252))
        | (1ULL << (MySQLParser::DUPLICATE - 252))
        | (1ULL << (MySQLParser::DYNAMIC - 252))
        | (1ULL << (MySQLParser::ENABLE - 252))
        | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
        | (1ULL << (MySQLParser::ENDS - 316))
        | (1ULL << (MySQLParser::ENGINE - 316))
        | (1ULL << (MySQLParser::ENGINES - 316))
        | (1ULL << (MySQLParser::ERROR - 316))
        | (1ULL << (MySQLParser::ERRORS - 316))
        | (1ULL << (MySQLParser::ESCAPE - 316))
        | (1ULL << (MySQLParser::EVEN - 316))
        | (1ULL << (MySQLParser::EVENT - 316))
        | (1ULL << (MySQLParser::EVENTS - 316))
        | (1ULL << (MySQLParser::EVERY - 316))
        | (1ULL << (MySQLParser::EXCHANGE - 316))
        | (1ULL << (MySQLParser::EXCLUSIVE - 316))
        | (1ULL << (MySQLParser::EXPIRE - 316))
        | (1ULL << (MySQLParser::EXPORT - 316))
        | (1ULL << (MySQLParser::EXTENDED - 316))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
        | (1ULL << (MySQLParser::FAST - 316))
        | (1ULL << (MySQLParser::FAULTS - 316))
        | (1ULL << (MySQLParser::FIELDS - 316))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::FILTER - 316))
        | (1ULL << (MySQLParser::FIRST - 316))
        | (1ULL << (MySQLParser::FIXED - 316))
        | (1ULL << (MySQLParser::FLUSH - 316))
        | (1ULL << (MySQLParser::FOLLOWS - 316))
        | (1ULL << (MySQLParser::FOUND - 316))
        | (1ULL << (MySQLParser::FULL - 316))
        | (1ULL << (MySQLParser::FUNCTION - 316))
        | (1ULL << (MySQLParser::GENERAL - 316))
        | (1ULL << (MySQLParser::GLOBAL - 316))
        | (1ULL << (MySQLParser::GRANTS - 316))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
        | (1ULL << (MySQLParser::HANDLER - 316))
        | (1ULL << (MySQLParser::HASH - 316))
        | (1ULL << (MySQLParser::HELP - 316))
        | (1ULL << (MySQLParser::HOST - 316))
        | (1ULL << (MySQLParser::HOSTS - 316))
        | (1ULL << (MySQLParser::IDENTIFIED - 316))
        | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
        | (1ULL << (MySQLParser::IMPORT - 316))
        | (1ULL << (MySQLParser::INDEXES - 316))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
        | (1ULL << (MySQLParser::INPLACE - 316))
        | (1ULL << (MySQLParser::INSERT_METHOD - 316))
        | (1ULL << (MySQLParser::INSTALL - 316))
        | (1ULL << (MySQLParser::INSTANCE - 316))
        | (1ULL << (MySQLParser::INVISIBLE - 316))
        | (1ULL << (MySQLParser::INVOKER - 316))
        | (1ULL << (MySQLParser::IO - 316))
        | (1ULL << (MySQLParser::IO_THREAD - 316))
        | (1ULL << (MySQLParser::IPC - 316))
        | (1ULL << (MySQLParser::ISOLATION - 316))
        | (1ULL << (MySQLParser::ISSUER - 316))
        | (1ULL << (MySQLParser::JSON - 316))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::LANGUAGE - 316))
        | (1ULL << (MySQLParser::LAST - 316))
        | (1ULL << (MySQLParser::LEAVES - 316))
        | (1ULL << (MySQLParser::LESS - 316))
        | (1ULL << (MySQLParser::LEVEL - 316))
        | (1ULL << (MySQLParser::LIST - 316))
        | (1ULL << (MySQLParser::LOCAL - 316))
        | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
        | (1ULL << (MySQLParser::MASTER - 380))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
        | (1ULL << (MySQLParser::MASTER_DELAY - 380))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
        | (1ULL << (MySQLParser::MASTER_HOST - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
        | (1ULL << (MySQLParser::MASTER_PORT - 380))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
        | (1ULL << (MySQLParser::MASTER_USER - 380))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_ROWS - 380))
        | (1ULL << (MySQLParser::MAX_SIZE - 380))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
        | (1ULL << (MySQLParser::MEDIUM - 380))
        | (1ULL << (MySQLParser::MERGE - 380))
        | (1ULL << (MySQLParser::MID - 380))
        | (1ULL << (MySQLParser::MIGRATE - 380))
        | (1ULL << (MySQLParser::MIN_ROWS - 380))
        | (1ULL << (MySQLParser::MODE - 380))
        | (1ULL << (MySQLParser::MODIFY - 380))
        | (1ULL << (MySQLParser::MUTEX - 380))
        | (1ULL << (MySQLParser::MYSQL - 380))
        | (1ULL << (MySQLParser::NAME - 380))
        | (1ULL << (MySQLParser::NAMES - 380))
        | (1ULL << (MySQLParser::NCHAR - 380))
        | (1ULL << (MySQLParser::NEVER - 380))
        | (1ULL << (MySQLParser::NEXT - 380))
        | (1ULL << (MySQLParser::NO - 380))
        | (1ULL << (MySQLParser::NODEGROUP - 380))
        | (1ULL << (MySQLParser::NONE - 380))
        | (1ULL << (MySQLParser::OFFLINE - 380))
        | (1ULL << (MySQLParser::OFFSET - 380))
        | (1ULL << (MySQLParser::OJ - 380))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
        | (1ULL << (MySQLParser::ONE - 380))
        | (1ULL << (MySQLParser::ONLINE - 380))
        | (1ULL << (MySQLParser::ONLY - 380))
        | (1ULL << (MySQLParser::OPEN - 380))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
        | (1ULL << (MySQLParser::OPTIONS - 380))
        | (1ULL << (MySQLParser::OWNER - 380))
        | (1ULL << (MySQLParser::PACK_KEYS - 380))
        | (1ULL << (MySQLParser::PAGE - 380))
        | (1ULL << (MySQLParser::PARSER - 380))
        | (1ULL << (MySQLParser::PARTIAL - 380))
        | (1ULL << (MySQLParser::PARTITIONING - 380))
        | (1ULL << (MySQLParser::PARTITIONS - 380))
        | (1ULL << (MySQLParser::PASSWORD - 380))
        | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
        | (1ULL << (MySQLParser::PLUGINS - 444))
        | (1ULL << (MySQLParser::PORT - 444))
        | (1ULL << (MySQLParser::PRECEDES - 444))
        | (1ULL << (MySQLParser::PREPARE - 444))
        | (1ULL << (MySQLParser::PRESERVE - 444))
        | (1ULL << (MySQLParser::PREV - 444))
        | (1ULL << (MySQLParser::PROCESSLIST - 444))
        | (1ULL << (MySQLParser::PROFILE - 444))
        | (1ULL << (MySQLParser::PROFILES - 444))
        | (1ULL << (MySQLParser::PROXY - 444))
        | (1ULL << (MySQLParser::QUERY - 444))
        | (1ULL << (MySQLParser::QUICK - 444))
        | (1ULL << (MySQLParser::REBUILD - 444))
        | (1ULL << (MySQLParser::RECOVER - 444))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
        | (1ULL << (MySQLParser::REDUNDANT - 444))
        | (1ULL << (MySQLParser::RELAY - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
        | (1ULL << (MySQLParser::RELAYLOG - 444))
        | (1ULL << (MySQLParser::REMOVE - 444))
        | (1ULL << (MySQLParser::REORGANIZE - 444))
        | (1ULL << (MySQLParser::REPAIR - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATION - 444))
        | (1ULL << (MySQLParser::RESET - 444))
        | (1ULL << (MySQLParser::RESUME - 444))
        | (1ULL << (MySQLParser::RETURNS - 444))
        | (1ULL << (MySQLParser::ROLLBACK - 444))
        | (1ULL << (MySQLParser::ROLLUP - 444))
        | (1ULL << (MySQLParser::ROTATE - 444))
        | (1ULL << (MySQLParser::ROW - 444))
        | (1ULL << (MySQLParser::ROWS - 444))
        | (1ULL << (MySQLParser::ROW_FORMAT - 444))
        | (1ULL << (MySQLParser::SAVEPOINT - 444))
        | (1ULL << (MySQLParser::SCHEDULE - 444))
        | (1ULL << (MySQLParser::SECURITY - 444))
        | (1ULL << (MySQLParser::SERVER - 444))
        | (1ULL << (MySQLParser::SESSION - 444))
        | (1ULL << (MySQLParser::SHARE - 444))
        | (1ULL << (MySQLParser::SHARED - 444))
        | (1ULL << (MySQLParser::SIGNED - 444))
        | (1ULL << (MySQLParser::SIMPLE - 444))
        | (1ULL << (MySQLParser::SLAVE - 444))
        | (1ULL << (MySQLParser::SLOW - 444))
        | (1ULL << (MySQLParser::SNAPSHOT - 444))
        | (1ULL << (MySQLParser::SOCKET - 444))
        | (1ULL << (MySQLParser::SOME - 444))
        | (1ULL << (MySQLParser::SONAME - 444))
        | (1ULL << (MySQLParser::SOUNDS - 444))
        | (1ULL << (MySQLParser::SOURCE - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
        | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
        | (1ULL << (MySQLParser::SQL_THREAD - 508))
        | (1ULL << (MySQLParser::START - 508))
        | (1ULL << (MySQLParser::STARTS - 508))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
        | (1ULL << (MySQLParser::STATUS - 508))
        | (1ULL << (MySQLParser::STOP - 508))
        | (1ULL << (MySQLParser::STORAGE - 508))
        | (1ULL << (MySQLParser::STRING - 508))
        | (1ULL << (MySQLParser::SUBJECT - 508))
        | (1ULL << (MySQLParser::SUBPARTITION - 508))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
        | (1ULL << (MySQLParser::SUSPEND - 508))
        | (1ULL << (MySQLParser::SWAPS - 508))
        | (1ULL << (MySQLParser::SWITCHES - 508))
        | (1ULL << (MySQLParser::TABLESPACE - 508))
        | (1ULL << (MySQLParser::TEMPORARY - 508))
        | (1ULL << (MySQLParser::TEMPTABLE - 508))
        | (1ULL << (MySQLParser::THAN - 508))
        | (1ULL << (MySQLParser::TRADITIONAL - 508))
        | (1ULL << (MySQLParser::TRANSACTION - 508))
        | (1ULL << (MySQLParser::TRIGGERS - 508))
        | (1ULL << (MySQLParser::TRUNCATE - 508))
        | (1ULL << (MySQLParser::UNDEFINED - 508))
        | (1ULL << (MySQLParser::UNDOFILE - 508))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
        | (1ULL << (MySQLParser::UNINSTALL - 508))
        | (1ULL << (MySQLParser::UNKNOWN - 508))
        | (1ULL << (MySQLParser::UNTIL - 508))
        | (1ULL << (MySQLParser::UPGRADE - 508))
        | (1ULL << (MySQLParser::USER - 508))
        | (1ULL << (MySQLParser::USE_FRM - 508))
        | (1ULL << (MySQLParser::USER_RESOURCES - 508))
        | (1ULL << (MySQLParser::VALIDATION - 508))
        | (1ULL << (MySQLParser::VALUE - 508))
        | (1ULL << (MySQLParser::VARIABLES - 508))
        | (1ULL << (MySQLParser::VIEW - 508))
        | (1ULL << (MySQLParser::VISIBLE - 508))
        | (1ULL << (MySQLParser::WAIT - 508))
        | (1ULL << (MySQLParser::WARNINGS - 508))
        | (1ULL << (MySQLParser::WITHOUT - 508))
        | (1ULL << (MySQLParser::WORK - 508))
        | (1ULL << (MySQLParser::WRAPPER - 508))
        | (1ULL << (MySQLParser::X509 - 508))
        | (1ULL << (MySQLParser::XA - 508))
        | (1ULL << (MySQLParser::XML - 508))
        | (1ULL << (MySQLParser::INTERNAL - 508))
        | (1ULL << (MySQLParser::QUARTER - 508))
        | (1ULL << (MySQLParser::MONTH - 508))
        | (1ULL << (MySQLParser::DAY - 508))
        | (1ULL << (MySQLParser::HOUR - 508))
        | (1ULL << (MySQLParser::MINUTE - 508))
        | (1ULL << (MySQLParser::WEEK - 508))
        | (1ULL << (MySQLParser::SECOND - 508))
        | (1ULL << (MySQLParser::MICROSECOND - 508))
        | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
        | (1ULL << (MySQLParser::EXECUTE - 572))
        | (1ULL << (MySQLParser::FILE - 572))
        | (1ULL << (MySQLParser::PROCESS - 572))
        | (1ULL << (MySQLParser::RELOAD - 572))
        | (1ULL << (MySQLParser::SHUTDOWN - 572))
        | (1ULL << (MySQLParser::SUPER - 572))
        | (1ULL << (MySQLParser::PRIVILEGES - 572))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
        | (1ULL << (MySQLParser::ARMSCII8 - 572))
        | (1ULL << (MySQLParser::ASCII - 572))
        | (1ULL << (MySQLParser::BIG5 - 572))
        | (1ULL << (MySQLParser::CP1250 - 572))
        | (1ULL << (MySQLParser::CP1251 - 572))
        | (1ULL << (MySQLParser::CP1256 - 572))
        | (1ULL << (MySQLParser::CP1257 - 572))
        | (1ULL << (MySQLParser::CP850 - 572))
        | (1ULL << (MySQLParser::CP852 - 572))
        | (1ULL << (MySQLParser::CP866 - 572))
        | (1ULL << (MySQLParser::CP932 - 572))
        | (1ULL << (MySQLParser::DEC8 - 572))
        | (1ULL << (MySQLParser::EUCJPMS - 572))
        | (1ULL << (MySQLParser::EUCKR - 572))
        | (1ULL << (MySQLParser::GB2312 - 572))
        | (1ULL << (MySQLParser::GBK - 572))
        | (1ULL << (MySQLParser::GEOSTD8 - 572))
        | (1ULL << (MySQLParser::GREEK - 572))
        | (1ULL << (MySQLParser::HEBREW - 572))
        | (1ULL << (MySQLParser::HP8 - 572))
        | (1ULL << (MySQLParser::KEYBCS2 - 572))
        | (1ULL << (MySQLParser::KOI8R - 572))
        | (1ULL << (MySQLParser::KOI8U - 572))
        | (1ULL << (MySQLParser::LATIN1 - 572))
        | (1ULL << (MySQLParser::LATIN2 - 572))
        | (1ULL << (MySQLParser::LATIN5 - 572))
        | (1ULL << (MySQLParser::LATIN7 - 572))
        | (1ULL << (MySQLParser::MACCE - 572))
        | (1ULL << (MySQLParser::MACROMAN - 572))
        | (1ULL << (MySQLParser::SJIS - 572))
        | (1ULL << (MySQLParser::SWE7 - 572))
        | (1ULL << (MySQLParser::TIS620 - 572))
        | (1ULL << (MySQLParser::UCS2 - 572))
        | (1ULL << (MySQLParser::UJIS - 572))
        | (1ULL << (MySQLParser::UTF16 - 572))
        | (1ULL << (MySQLParser::UTF16LE - 572))
        | (1ULL << (MySQLParser::UTF32 - 572))
        | (1ULL << (MySQLParser::UTF8 - 572))
        | (1ULL << (MySQLParser::UTF8MB3 - 572))
        | (1ULL << (MySQLParser::UTF8MB4 - 572))
        | (1ULL << (MySQLParser::ARCHIVE - 572))
        | (1ULL << (MySQLParser::BLACKHOLE - 572))
        | (1ULL << (MySQLParser::CSV - 572))
        | (1ULL << (MySQLParser::FEDERATED - 572))
        | (1ULL << (MySQLParser::INNODB - 572))
        | (1ULL << (MySQLParser::MEMORY - 572))
        | (1ULL << (MySQLParser::MRG_MYISAM - 572))
        | (1ULL << (MySQLParser::MYISAM - 572))
        | (1ULL << (MySQLParser::NDB - 572))
        | (1ULL << (MySQLParser::NDBCLUSTER - 572))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
        | (1ULL << (MySQLParser::TOKUDB - 572))
        | (1ULL << (MySQLParser::REPEATABLE - 572))
        | (1ULL << (MySQLParser::COMMITTED - 572))
        | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
        | (1ULL << (MySQLParser::LINESTRING - 636))
        | (1ULL << (MySQLParser::MULTILINESTRING - 636))
        | (1ULL << (MySQLParser::MULTIPOINT - 636))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
        | (1ULL << (MySQLParser::POINT - 636))
        | (1ULL << (MySQLParser::POLYGON - 636))
        | (1ULL << (MySQLParser::ABS - 636))
        | (1ULL << (MySQLParser::ACOS - 636))
        | (1ULL << (MySQLParser::ADDDATE - 636))
        | (1ULL << (MySQLParser::ADDTIME - 636))
        | (1ULL << (MySQLParser::AES_DECRYPT - 636))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
        | (1ULL << (MySQLParser::AREA - 636))
        | (1ULL << (MySQLParser::ASBINARY - 636))
        | (1ULL << (MySQLParser::ASIN - 636))
        | (1ULL << (MySQLParser::ASTEXT - 636))
        | (1ULL << (MySQLParser::ASWKB - 636))
        | (1ULL << (MySQLParser::ASWKT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
        | (1ULL << (MySQLParser::ATAN - 636))
        | (1ULL << (MySQLParser::ATAN2 - 636))
        | (1ULL << (MySQLParser::BENCHMARK - 636))
        | (1ULL << (MySQLParser::BIN - 636))
        | (1ULL << (MySQLParser::BIT_COUNT - 636))
        | (1ULL << (MySQLParser::BIT_LENGTH - 636))
        | (1ULL << (MySQLParser::BUFFER - 636))
        | (1ULL << (MySQLParser::CEIL - 636))
        | (1ULL << (MySQLParser::CEILING - 636))
        | (1ULL << (MySQLParser::CENTROID - 636))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
        | (1ULL << (MySQLParser::CHARSET - 636))
        | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
        | (1ULL << (MySQLParser::COERCIBILITY - 636))
        | (1ULL << (MySQLParser::COLLATION - 636))
        | (1ULL << (MySQLParser::COMPRESS - 636))
        | (1ULL << (MySQLParser::CONCAT - 636))
        | (1ULL << (MySQLParser::CONCAT_WS - 636))
        | (1ULL << (MySQLParser::CONNECTION_ID - 636))
        | (1ULL << (MySQLParser::CONV - 636))
        | (1ULL << (MySQLParser::CONVERT_TZ - 636))
        | (1ULL << (MySQLParser::COS - 636))
        | (1ULL << (MySQLParser::COT - 636))
        | (1ULL << (MySQLParser::CRC32 - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
        | (1ULL << (MySQLParser::CROSSES - 636))
        | (1ULL << (MySQLParser::DATEDIFF - 636))
        | (1ULL << (MySQLParser::DATE_FORMAT - 636))
        | (1ULL << (MySQLParser::DAYNAME - 636))
        | (1ULL << (MySQLParser::DAYOFMONTH - 636))
        | (1ULL << (MySQLParser::DAYOFWEEK - 636))
        | (1ULL << (MySQLParser::DAYOFYEAR - 636))
        | (1ULL << (MySQLParser::DECODE - 636))
        | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
        | (1ULL << (MySQLParser::DIMENSION - 700))
        | (1ULL << (MySQLParser::DISJOINT - 700))
        | (1ULL << (MySQLParser::ELT - 700))
        | (1ULL << (MySQLParser::ENCODE - 700))
        | (1ULL << (MySQLParser::ENCRYPT - 700))
        | (1ULL << (MySQLParser::ENDPOINT - 700))
        | (1ULL << (MySQLParser::ENVELOPE - 700))
        | (1ULL << (MySQLParser::EQUALS - 700))
        | (1ULL << (MySQLParser::EXP - 700))
        | (1ULL << (MySQLParser::EXPORT_SET - 700))
        | (1ULL << (MySQLParser::EXTERIORRING - 700))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
        | (1ULL << (MySQLParser::FIELD - 700))
        | (1ULL << (MySQLParser::FIND_IN_SET - 700))
        | (1ULL << (MySQLParser::FLOOR - 700))
        | (1ULL << (MySQLParser::FORMAT - 700))
        | (1ULL << (MySQLParser::FOUND_ROWS - 700))
        | (1ULL << (MySQLParser::FROM_BASE64 - 700))
        | (1ULL << (MySQLParser::FROM_DAYS - 700))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYN - 700))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
        | (1ULL << (MySQLParser::GET_FORMAT - 700))
        | (1ULL << (MySQLParser::GET_LOCK - 700))
        | (1ULL << (MySQLParser::GLENGTH - 700))
        | (1ULL << (MySQLParser::GREATEST - 700))
        | (1ULL << (MySQLParser::GTID_SUBSET - 700))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
        | (1ULL << (MySQLParser::HEX - 700))
        | (1ULL << (MySQLParser::IFNULL - 700))
        | (1ULL << (MySQLParser::INET6_ATON - 700))
        | (1ULL << (MySQLParser::INET6_NTOA - 700))
        | (1ULL << (MySQLParser::INET_ATON - 700))
        | (1ULL << (MySQLParser::INET_NTOA - 700))
        | (1ULL << (MySQLParser::INSTR - 700))
        | (1ULL << (MySQLParser::INTERIORRINGN - 700))
        | (1ULL << (MySQLParser::INTERSECTS - 700))
        | (1ULL << (MySQLParser::ISCLOSED - 700))
        | (1ULL << (MySQLParser::ISEMPTY - 700))
        | (1ULL << (MySQLParser::ISNULL - 700))
        | (1ULL << (MySQLParser::ISSIMPLE - 700))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
        | (1ULL << (MySQLParser::IS_IPV4 - 700))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
        | (1ULL << (MySQLParser::IS_IPV6 - 700))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
        | (1ULL << (MySQLParser::LCASE - 700))
        | (1ULL << (MySQLParser::LEAST - 700))
        | (1ULL << (MySQLParser::LENGTH - 700))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
        | (1ULL << (MySQLParser::LINEFROMWKB - 700))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::LN - 764))
        | (1ULL << (MySQLParser::LOAD_FILE - 764))
        | (1ULL << (MySQLParser::LOCATE - 764))
        | (1ULL << (MySQLParser::LOG - 764))
        | (1ULL << (MySQLParser::LOG10 - 764))
        | (1ULL << (MySQLParser::LOG2 - 764))
        | (1ULL << (MySQLParser::LOWER - 764))
        | (1ULL << (MySQLParser::LPAD - 764))
        | (1ULL << (MySQLParser::LTRIM - 764))
        | (1ULL << (MySQLParser::MAKEDATE - 764))
        | (1ULL << (MySQLParser::MAKETIME - 764))
        | (1ULL << (MySQLParser::MAKE_SET - 764))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
        | (1ULL << (MySQLParser::MBRCONTAINS - 764))
        | (1ULL << (MySQLParser::MBRDISJOINT - 764))
        | (1ULL << (MySQLParser::MBREQUAL - 764))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
        | (1ULL << (MySQLParser::MBROVERLAPS - 764))
        | (1ULL << (MySQLParser::MBRTOUCHES - 764))
        | (1ULL << (MySQLParser::MBRWITHIN - 764))
        | (1ULL << (MySQLParser::MD5 - 764))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
        | (1ULL << (MySQLParser::MONTHNAME - 764))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::NAME_CONST - 764))
        | (1ULL << (MySQLParser::NULLIF - 764))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
        | (1ULL << (MySQLParser::NUMPOINTS - 764))
        | (1ULL << (MySQLParser::OCT - 764))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
        | (1ULL << (MySQLParser::ORD - 764))
        | (1ULL << (MySQLParser::OVERLAPS - 764))
        | (1ULL << (MySQLParser::PERIOD_ADD - 764))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
        | (1ULL << (MySQLParser::PI - 764))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::POINTFROMWKB - 764))
        | (1ULL << (MySQLParser::POINTN - 764))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYFROMWKB - 764))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::POW - 764))
        | (1ULL << (MySQLParser::POWER - 764))
        | (1ULL << (MySQLParser::QUOTE - 764))
        | (1ULL << (MySQLParser::RADIANS - 764))
        | (1ULL << (MySQLParser::RAND - 764))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
        | (1ULL << (MySQLParser::REVERSE - 764))
        | (1ULL << (MySQLParser::ROUND - 764))
        | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
        | (1ULL << (MySQLParser::RTRIM - 828))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
        | (1ULL << (MySQLParser::SESSION_USER - 828))
        | (1ULL << (MySQLParser::SHA - 828))
        | (1ULL << (MySQLParser::SHA1 - 828))
        | (1ULL << (MySQLParser::SHA2 - 828))
        | (1ULL << (MySQLParser::SIGN - 828))
        | (1ULL << (MySQLParser::SIN - 828))
        | (1ULL << (MySQLParser::SLEEP - 828))
        | (1ULL << (MySQLParser::SOUNDEX - 828))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
        | (1ULL << (MySQLParser::SQRT - 828))
        | (1ULL << (MySQLParser::SRID - 828))
        | (1ULL << (MySQLParser::STARTPOINT - 828))
        | (1ULL << (MySQLParser::STRCMP - 828))
        | (1ULL << (MySQLParser::STR_TO_DATE - 828))
        | (1ULL << (MySQLParser::ST_AREA - 828))
        | (1ULL << (MySQLParser::ST_ASBINARY - 828))
        | (1ULL << (MySQLParser::ST_ASTEXT - 828))
        | (1ULL << (MySQLParser::ST_ASWKB - 828))
        | (1ULL << (MySQLParser::ST_ASWKT - 828))
        | (1ULL << (MySQLParser::ST_BUFFER - 828))
        | (1ULL << (MySQLParser::ST_CENTROID - 828))
        | (1ULL << (MySQLParser::ST_CONTAINS - 828))
        | (1ULL << (MySQLParser::ST_CROSSES - 828))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
        | (1ULL << (MySQLParser::ST_DIMENSION - 828))
        | (1ULL << (MySQLParser::ST_DISJOINT - 828))
        | (1ULL << (MySQLParser::ST_DISTANCE - 828))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
        | (1ULL << (MySQLParser::ST_EQUALS - 828))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_POINTN - 828))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_SRID - 892))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
        | (1ULL << (MySQLParser::ST_TOUCHES - 892))
        | (1ULL << (MySQLParser::ST_UNION - 892))
        | (1ULL << (MySQLParser::ST_WITHIN - 892))
        | (1ULL << (MySQLParser::ST_X - 892))
        | (1ULL << (MySQLParser::ST_Y - 892))
        | (1ULL << (MySQLParser::SUBDATE - 892))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
        | (1ULL << (MySQLParser::SUBTIME - 892))
        | (1ULL << (MySQLParser::SYSTEM_USER - 892))
        | (1ULL << (MySQLParser::TAN - 892))
        | (1ULL << (MySQLParser::TIMEDIFF - 892))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
        | (1ULL << (MySQLParser::TIME_FORMAT - 892))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
        | (1ULL << (MySQLParser::TOUCHES - 892))
        | (1ULL << (MySQLParser::TO_BASE64 - 892))
        | (1ULL << (MySQLParser::TO_DAYS - 892))
        | (1ULL << (MySQLParser::TO_SECONDS - 892))
        | (1ULL << (MySQLParser::UCASE - 892))
        | (1ULL << (MySQLParser::UNCOMPRESS - 892))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
        | (1ULL << (MySQLParser::UNHEX - 892))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
        | (1ULL << (MySQLParser::UPDATEXML - 892))
        | (1ULL << (MySQLParser::UPPER - 892))
        | (1ULL << (MySQLParser::UUID - 892))
        | (1ULL << (MySQLParser::UUID_SHORT - 892))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
        | (1ULL << (MySQLParser::VERSION - 892))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
        | (1ULL << (MySQLParser::WEEKDAY - 892))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
        | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
        | (1ULL << (MySQLParser::WITHIN - 892))
        | (1ULL << (MySQLParser::YEARWEEK - 892))
        | (1ULL << (MySQLParser::Y_FUNCTION - 892))
        | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
        | (1ULL << (MySQLParser::STRING_LITERAL - 974))
        | (1ULL << (MySQLParser::ID - 974))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
        setState(1509);
        dynamic_cast<ForeignKeyTableConstraintContext *>(_localctx)->index = uid();
      }
      setState(1512);
      indexColumnNames();
      setState(1513);
      referenceDefinition();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySQLParser::CheckTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1519);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(1515);
        match(MySQLParser::CONSTRAINT);
        setState(1517);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(1516);
          dynamic_cast<CheckTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1521);
      match(MySQLParser::CHECK);
      setState(1522);
      match(MySQLParser::LR_BRACKET);
      setState(1523);
      expression(0);
      setState(1524);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceDefinitionContext ------------------------------------------------------------------

MySQLParser::ReferenceDefinitionContext::ReferenceDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ReferenceDefinitionContext::REFERENCES() {
  return getToken(MySQLParser::REFERENCES, 0);
}

MySQLParser::TableNameContext* MySQLParser::ReferenceDefinitionContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::ReferenceDefinitionContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::ReferenceDefinitionContext::MATCH() {
  return getToken(MySQLParser::MATCH, 0);
}

MySQLParser::ReferenceActionContext* MySQLParser::ReferenceDefinitionContext::referenceAction() {
  return getRuleContext<MySQLParser::ReferenceActionContext>(0);
}

tree::TerminalNode* MySQLParser::ReferenceDefinitionContext::FULL() {
  return getToken(MySQLParser::FULL, 0);
}

tree::TerminalNode* MySQLParser::ReferenceDefinitionContext::PARTIAL() {
  return getToken(MySQLParser::PARTIAL, 0);
}

tree::TerminalNode* MySQLParser::ReferenceDefinitionContext::SIMPLE() {
  return getToken(MySQLParser::SIMPLE, 0);
}


size_t MySQLParser::ReferenceDefinitionContext::getRuleIndex() const {
  return MySQLParser::RuleReferenceDefinition;
}

void MySQLParser::ReferenceDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceDefinition(this);
}

void MySQLParser::ReferenceDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceDefinition(this);
}


antlrcpp::Any MySQLParser::ReferenceDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReferenceDefinition(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ReferenceDefinitionContext* MySQLParser::referenceDefinition() {
  ReferenceDefinitionContext *_localctx = _tracker.createInstance<ReferenceDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 84, MySQLParser::RuleReferenceDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1528);
    match(MySQLParser::REFERENCES);
    setState(1529);
    tableName();
    setState(1531);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      setState(1530);
      indexColumnNames();
      break;
    }

    }
    setState(1535);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::MATCH) {
      setState(1533);
      match(MySQLParser::MATCH);
      setState(1534);
      dynamic_cast<ReferenceDefinitionContext *>(_localctx)->matchType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FULL || _la == MySQLParser::PARTIAL

      || _la == MySQLParser::SIMPLE)) {
        dynamic_cast<ReferenceDefinitionContext *>(_localctx)->matchType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1538);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      setState(1537);
      referenceAction();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceActionContext ------------------------------------------------------------------

MySQLParser::ReferenceActionContext::ReferenceActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::ReferenceActionContext::ON() {
  return getTokens(MySQLParser::ON);
}

tree::TerminalNode* MySQLParser::ReferenceActionContext::ON(size_t i) {
  return getToken(MySQLParser::ON, i);
}

tree::TerminalNode* MySQLParser::ReferenceActionContext::DELETE() {
  return getToken(MySQLParser::DELETE, 0);
}

std::vector<MySQLParser::ReferenceControlTypeContext *> MySQLParser::ReferenceActionContext::referenceControlType() {
  return getRuleContexts<MySQLParser::ReferenceControlTypeContext>();
}

MySQLParser::ReferenceControlTypeContext* MySQLParser::ReferenceActionContext::referenceControlType(size_t i) {
  return getRuleContext<MySQLParser::ReferenceControlTypeContext>(i);
}

tree::TerminalNode* MySQLParser::ReferenceActionContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}


size_t MySQLParser::ReferenceActionContext::getRuleIndex() const {
  return MySQLParser::RuleReferenceAction;
}

void MySQLParser::ReferenceActionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceAction(this);
}

void MySQLParser::ReferenceActionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceAction(this);
}


antlrcpp::Any MySQLParser::ReferenceActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReferenceAction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ReferenceActionContext* MySQLParser::referenceAction() {
  ReferenceActionContext *_localctx = _tracker.createInstance<ReferenceActionContext>(_ctx, getState());
  enterRule(_localctx, 86, MySQLParser::RuleReferenceAction);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1556);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1540);
      match(MySQLParser::ON);
      setState(1541);
      match(MySQLParser::DELETE);
      setState(1542);
      dynamic_cast<ReferenceActionContext *>(_localctx)->onDelete = referenceControlType();
      setState(1546);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
      case 1: {
        setState(1543);
        match(MySQLParser::ON);
        setState(1544);
        match(MySQLParser::UPDATE);
        setState(1545);
        dynamic_cast<ReferenceActionContext *>(_localctx)->onUpdate = referenceControlType();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1548);
      match(MySQLParser::ON);
      setState(1549);
      match(MySQLParser::UPDATE);
      setState(1550);
      dynamic_cast<ReferenceActionContext *>(_localctx)->onUpdate = referenceControlType();
      setState(1554);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
      case 1: {
        setState(1551);
        match(MySQLParser::ON);
        setState(1552);
        match(MySQLParser::DELETE);
        setState(1553);
        dynamic_cast<ReferenceActionContext *>(_localctx)->onDelete = referenceControlType();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceControlTypeContext ------------------------------------------------------------------

MySQLParser::ReferenceControlTypeContext::ReferenceControlTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ReferenceControlTypeContext::RESTRICT() {
  return getToken(MySQLParser::RESTRICT, 0);
}

tree::TerminalNode* MySQLParser::ReferenceControlTypeContext::CASCADE() {
  return getToken(MySQLParser::CASCADE, 0);
}

tree::TerminalNode* MySQLParser::ReferenceControlTypeContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::ReferenceControlTypeContext::NULL_LITERAL() {
  return getToken(MySQLParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::ReferenceControlTypeContext::NO() {
  return getToken(MySQLParser::NO, 0);
}

tree::TerminalNode* MySQLParser::ReferenceControlTypeContext::ACTION() {
  return getToken(MySQLParser::ACTION, 0);
}


size_t MySQLParser::ReferenceControlTypeContext::getRuleIndex() const {
  return MySQLParser::RuleReferenceControlType;
}

void MySQLParser::ReferenceControlTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceControlType(this);
}

void MySQLParser::ReferenceControlTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceControlType(this);
}


antlrcpp::Any MySQLParser::ReferenceControlTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReferenceControlType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ReferenceControlTypeContext* MySQLParser::referenceControlType() {
  ReferenceControlTypeContext *_localctx = _tracker.createInstance<ReferenceControlTypeContext>(_ctx, getState());
  enterRule(_localctx, 88, MySQLParser::RuleReferenceControlType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1564);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::RESTRICT: {
        enterOuterAlt(_localctx, 1);
        setState(1558);
        match(MySQLParser::RESTRICT);
        break;
      }

      case MySQLParser::CASCADE: {
        enterOuterAlt(_localctx, 2);
        setState(1559);
        match(MySQLParser::CASCADE);
        break;
      }

      case MySQLParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1560);
        match(MySQLParser::SET);
        setState(1561);
        match(MySQLParser::NULL_LITERAL);
        break;
      }

      case MySQLParser::NO: {
        enterOuterAlt(_localctx, 4);
        setState(1562);
        match(MySQLParser::NO);
        setState(1563);
        match(MySQLParser::ACTION);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexColumnDefinitionContext ------------------------------------------------------------------

MySQLParser::IndexColumnDefinitionContext::IndexColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::IndexColumnDefinitionContext::getRuleIndex() const {
  return MySQLParser::RuleIndexColumnDefinition;
}

void MySQLParser::IndexColumnDefinitionContext::copyFrom(IndexColumnDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpecialIndexDeclarationContext ------------------------------------------------------------------

MySQLParser::IndexColumnNamesContext* MySQLParser::SpecialIndexDeclarationContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::SpecialIndexDeclarationContext::FULLTEXT() {
  return getToken(MySQLParser::FULLTEXT, 0);
}

tree::TerminalNode* MySQLParser::SpecialIndexDeclarationContext::SPATIAL() {
  return getToken(MySQLParser::SPATIAL, 0);
}

MySQLParser::UidContext* MySQLParser::SpecialIndexDeclarationContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::SpecialIndexDeclarationContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::SpecialIndexDeclarationContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

tree::TerminalNode* MySQLParser::SpecialIndexDeclarationContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::SpecialIndexDeclarationContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::SpecialIndexDeclarationContext::SpecialIndexDeclarationContext(IndexColumnDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SpecialIndexDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialIndexDeclaration(this);
}
void MySQLParser::SpecialIndexDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialIndexDeclaration(this);
}

antlrcpp::Any MySQLParser::SpecialIndexDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSpecialIndexDeclaration(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleIndexDeclarationContext ------------------------------------------------------------------

MySQLParser::IndexColumnNamesContext* MySQLParser::SimpleIndexDeclarationContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::SimpleIndexDeclarationContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::SimpleIndexDeclarationContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::UidContext* MySQLParser::SimpleIndexDeclarationContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::IndexTypeContext* MySQLParser::SimpleIndexDeclarationContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::SimpleIndexDeclarationContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::SimpleIndexDeclarationContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

MySQLParser::SimpleIndexDeclarationContext::SimpleIndexDeclarationContext(IndexColumnDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SimpleIndexDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleIndexDeclaration(this);
}
void MySQLParser::SimpleIndexDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleIndexDeclaration(this);
}

antlrcpp::Any MySQLParser::SimpleIndexDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleIndexDeclaration(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::IndexColumnDefinitionContext* MySQLParser::indexColumnDefinition() {
  IndexColumnDefinitionContext *_localctx = _tracker.createInstance<IndexColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 90, MySQLParser::RuleIndexColumnDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1594);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::INDEX:
      case MySQLParser::KEY: {
        _localctx = dynamic_cast<IndexColumnDefinitionContext *>(_tracker.createInstance<MySQLParser::SimpleIndexDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1566);
        dynamic_cast<SimpleIndexDeclarationContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::INDEX

        || _la == MySQLParser::KEY)) {
          dynamic_cast<SimpleIndexDeclarationContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1568);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(1567);
          uid();
        }
        setState(1571);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::USING) {
          setState(1570);
          indexType();
        }
        setState(1573);
        indexColumnNames();
        setState(1577);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::USING

        || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

        || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
          setState(1574);
          indexOption();
          setState(1579);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySQLParser::FULLTEXT:
      case MySQLParser::SPATIAL: {
        _localctx = dynamic_cast<IndexColumnDefinitionContext *>(_tracker.createInstance<MySQLParser::SpecialIndexDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1580);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::FULLTEXT || _la == MySQLParser::SPATIAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1582);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::INDEX

        || _la == MySQLParser::KEY) {
          setState(1581);
          dynamic_cast<SpecialIndexDeclarationContext *>(_localctx)->indexFormat = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::INDEX

          || _la == MySQLParser::KEY)) {
            dynamic_cast<SpecialIndexDeclarationContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(1585);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(1584);
          uid();
        }
        setState(1587);
        indexColumnNames();
        setState(1591);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::USING

        || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

        || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
          setState(1588);
          indexOption();
          setState(1593);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableOptionContext ------------------------------------------------------------------

MySQLParser::TableOptionContext::TableOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::TableOptionContext::getRuleIndex() const {
  return MySQLParser::RuleTableOption;
}

void MySQLParser::TableOptionContext::copyFrom(TableOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableOptionEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionEngineContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::TableOptionEngineContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

MySQLParser::TableOptionEngineContext::TableOptionEngineContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionEngineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionEngine(this);
}
void MySQLParser::TableOptionEngineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionEngine(this);
}

antlrcpp::Any MySQLParser::TableOptionEngineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionEngine(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionMaxRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionMaxRowsContext::MAX_ROWS() {
  return getToken(MySQLParser::MAX_ROWS, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::TableOptionMaxRowsContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::TableOptionMaxRowsContext::TableOptionMaxRowsContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionMaxRowsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionMaxRows(this);
}
void MySQLParser::TableOptionMaxRowsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionMaxRows(this);
}

antlrcpp::Any MySQLParser::TableOptionMaxRowsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionMaxRows(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionCollateContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionCollateContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::TableOptionCollateContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}

tree::TerminalNode* MySQLParser::TableOptionCollateContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::TableOptionCollateContext::TableOptionCollateContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionCollateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionCollate(this);
}
void MySQLParser::TableOptionCollateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionCollate(this);
}

antlrcpp::Any MySQLParser::TableOptionCollateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionCollate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionPersistentContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionPersistentContext::STATS_PERSISTENT() {
  return getToken(MySQLParser::STATS_PERSISTENT, 0);
}

tree::TerminalNode* MySQLParser::TableOptionPersistentContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::TableOptionPersistentContext::TableOptionPersistentContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionPersistentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionPersistent(this);
}
void MySQLParser::TableOptionPersistentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionPersistent(this);
}

antlrcpp::Any MySQLParser::TableOptionPersistentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionPersistent(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionTablespaceContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::UidContext* MySQLParser::TableOptionTablespaceContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::TablespaceStorageContext* MySQLParser::TableOptionTablespaceContext::tablespaceStorage() {
  return getRuleContext<MySQLParser::TablespaceStorageContext>(0);
}

MySQLParser::TableOptionTablespaceContext::TableOptionTablespaceContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionTablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionTablespace(this);
}
void MySQLParser::TableOptionTablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionTablespace(this);
}

antlrcpp::Any MySQLParser::TableOptionTablespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionTablespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionPackKeysContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionPackKeysContext::PACK_KEYS() {
  return getToken(MySQLParser::PACK_KEYS, 0);
}

tree::TerminalNode* MySQLParser::TableOptionPackKeysContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::TableOptionPackKeysContext::TableOptionPackKeysContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionPackKeysContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionPackKeys(this);
}
void MySQLParser::TableOptionPackKeysContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionPackKeys(this);
}

antlrcpp::Any MySQLParser::TableOptionPackKeysContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionPackKeys(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionPasswordContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionPasswordContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::TableOptionPasswordContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::TableOptionPasswordContext::TableOptionPasswordContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionPasswordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionPassword(this);
}
void MySQLParser::TableOptionPasswordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionPassword(this);
}

antlrcpp::Any MySQLParser::TableOptionPasswordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionPassword(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionUnionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionUnionContext::UNION() {
  return getToken(MySQLParser::UNION, 0);
}

MySQLParser::TablesContext* MySQLParser::TableOptionUnionContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

MySQLParser::TableOptionUnionContext::TableOptionUnionContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionUnionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionUnion(this);
}
void MySQLParser::TableOptionUnionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionUnion(this);
}

antlrcpp::Any MySQLParser::TableOptionUnionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionUnion(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionSamplePageContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionSamplePageContext::STATS_SAMPLE_PAGES() {
  return getToken(MySQLParser::STATS_SAMPLE_PAGES, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::TableOptionSamplePageContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::TableOptionSamplePageContext::TableOptionSamplePageContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionSamplePageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionSamplePage(this);
}
void MySQLParser::TableOptionSamplePageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionSamplePage(this);
}

antlrcpp::Any MySQLParser::TableOptionSamplePageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionSamplePage(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionCharsetContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionCharsetContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::TableOptionCharsetContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::TableOptionCharsetContext::CHARSET() {
  return getToken(MySQLParser::CHARSET, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::TableOptionCharsetContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::TableOptionCharsetContext::DEFAULT() {
  return getTokens(MySQLParser::DEFAULT);
}

tree::TerminalNode* MySQLParser::TableOptionCharsetContext::DEFAULT(size_t i) {
  return getToken(MySQLParser::DEFAULT, i);
}

MySQLParser::TableOptionCharsetContext::TableOptionCharsetContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionCharset(this);
}
void MySQLParser::TableOptionCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionCharset(this);
}

antlrcpp::Any MySQLParser::TableOptionCharsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionCharset(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionIndexDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionIndexDirectoryContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::TableOptionIndexDirectoryContext::DIRECTORY() {
  return getToken(MySQLParser::DIRECTORY, 0);
}

tree::TerminalNode* MySQLParser::TableOptionIndexDirectoryContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::TableOptionIndexDirectoryContext::TableOptionIndexDirectoryContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionIndexDirectoryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionIndexDirectory(this);
}
void MySQLParser::TableOptionIndexDirectoryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionIndexDirectory(this);
}

antlrcpp::Any MySQLParser::TableOptionIndexDirectoryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionIndexDirectory(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionKeyBlockSizeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionKeyBlockSizeContext::KEY_BLOCK_SIZE() {
  return getToken(MySQLParser::KEY_BLOCK_SIZE, 0);
}

MySQLParser::FileSizeLiteralContext* MySQLParser::TableOptionKeyBlockSizeContext::fileSizeLiteral() {
  return getRuleContext<MySQLParser::FileSizeLiteralContext>(0);
}

MySQLParser::TableOptionKeyBlockSizeContext::TableOptionKeyBlockSizeContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionKeyBlockSizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionKeyBlockSize(this);
}
void MySQLParser::TableOptionKeyBlockSizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionKeyBlockSize(this);
}

antlrcpp::Any MySQLParser::TableOptionKeyBlockSizeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionKeyBlockSize(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionEncryptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionEncryptionContext::ENCRYPTION() {
  return getToken(MySQLParser::ENCRYPTION, 0);
}

tree::TerminalNode* MySQLParser::TableOptionEncryptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::TableOptionEncryptionContext::TableOptionEncryptionContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionEncryptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionEncryption(this);
}
void MySQLParser::TableOptionEncryptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionEncryption(this);
}

antlrcpp::Any MySQLParser::TableOptionEncryptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionEncryption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionDataDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionDataDirectoryContext::DATA() {
  return getToken(MySQLParser::DATA, 0);
}

tree::TerminalNode* MySQLParser::TableOptionDataDirectoryContext::DIRECTORY() {
  return getToken(MySQLParser::DIRECTORY, 0);
}

tree::TerminalNode* MySQLParser::TableOptionDataDirectoryContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::TableOptionDataDirectoryContext::TableOptionDataDirectoryContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionDataDirectoryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionDataDirectory(this);
}
void MySQLParser::TableOptionDataDirectoryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionDataDirectory(this);
}

antlrcpp::Any MySQLParser::TableOptionDataDirectoryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionDataDirectory(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionRecalculationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionRecalculationContext::STATS_AUTO_RECALC() {
  return getToken(MySQLParser::STATS_AUTO_RECALC, 0);
}

tree::TerminalNode* MySQLParser::TableOptionRecalculationContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::TableOptionRecalculationContext::TableOptionRecalculationContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionRecalculationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionRecalculation(this);
}
void MySQLParser::TableOptionRecalculationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionRecalculation(this);
}

antlrcpp::Any MySQLParser::TableOptionRecalculationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionRecalculation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionAutoIncrementContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionAutoIncrementContext::AUTO_INCREMENT() {
  return getToken(MySQLParser::AUTO_INCREMENT, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::TableOptionAutoIncrementContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::TableOptionAutoIncrementContext::TableOptionAutoIncrementContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionAutoIncrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionAutoIncrement(this);
}
void MySQLParser::TableOptionAutoIncrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionAutoIncrement(this);
}

antlrcpp::Any MySQLParser::TableOptionAutoIncrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionAutoIncrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionChecksumContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionChecksumContext::CHECKSUM() {
  return getToken(MySQLParser::CHECKSUM, 0);
}

tree::TerminalNode* MySQLParser::TableOptionChecksumContext::PAGE_CHECKSUM() {
  return getToken(MySQLParser::PAGE_CHECKSUM, 0);
}

MySQLParser::TableOptionChecksumContext::TableOptionChecksumContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionChecksumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionChecksum(this);
}
void MySQLParser::TableOptionChecksumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionChecksum(this);
}

antlrcpp::Any MySQLParser::TableOptionChecksumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionChecksum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionDelayContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionDelayContext::DELAY_KEY_WRITE() {
  return getToken(MySQLParser::DELAY_KEY_WRITE, 0);
}

MySQLParser::TableOptionDelayContext::TableOptionDelayContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionDelayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionDelay(this);
}
void MySQLParser::TableOptionDelayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionDelay(this);
}

antlrcpp::Any MySQLParser::TableOptionDelayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionDelay(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionConnectionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionConnectionContext::CONNECTION() {
  return getToken(MySQLParser::CONNECTION, 0);
}

tree::TerminalNode* MySQLParser::TableOptionConnectionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::TableOptionConnectionContext::TableOptionConnectionContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionConnectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionConnection(this);
}
void MySQLParser::TableOptionConnectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionConnection(this);
}

antlrcpp::Any MySQLParser::TableOptionConnectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionConnection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionCommentContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::TableOptionCommentContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::TableOptionCommentContext::TableOptionCommentContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionCommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionComment(this);
}
void MySQLParser::TableOptionCommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionComment(this);
}

antlrcpp::Any MySQLParser::TableOptionCommentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionComment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionAverageContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionAverageContext::AVG_ROW_LENGTH() {
  return getToken(MySQLParser::AVG_ROW_LENGTH, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::TableOptionAverageContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::TableOptionAverageContext::TableOptionAverageContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionAverageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionAverage(this);
}
void MySQLParser::TableOptionAverageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionAverage(this);
}

antlrcpp::Any MySQLParser::TableOptionAverageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionAverage(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionRowFormatContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionRowFormatContext::ROW_FORMAT() {
  return getToken(MySQLParser::ROW_FORMAT, 0);
}

tree::TerminalNode* MySQLParser::TableOptionRowFormatContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

tree::TerminalNode* MySQLParser::TableOptionRowFormatContext::DYNAMIC() {
  return getToken(MySQLParser::DYNAMIC, 0);
}

tree::TerminalNode* MySQLParser::TableOptionRowFormatContext::FIXED() {
  return getToken(MySQLParser::FIXED, 0);
}

tree::TerminalNode* MySQLParser::TableOptionRowFormatContext::COMPRESSED() {
  return getToken(MySQLParser::COMPRESSED, 0);
}

tree::TerminalNode* MySQLParser::TableOptionRowFormatContext::REDUNDANT() {
  return getToken(MySQLParser::REDUNDANT, 0);
}

tree::TerminalNode* MySQLParser::TableOptionRowFormatContext::COMPACT() {
  return getToken(MySQLParser::COMPACT, 0);
}

MySQLParser::TableOptionRowFormatContext::TableOptionRowFormatContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionRowFormatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionRowFormat(this);
}
void MySQLParser::TableOptionRowFormatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionRowFormat(this);
}

antlrcpp::Any MySQLParser::TableOptionRowFormatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionRowFormat(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionCompressionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionCompressionContext::COMPRESSION() {
  return getToken(MySQLParser::COMPRESSION, 0);
}

tree::TerminalNode* MySQLParser::TableOptionCompressionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::TableOptionCompressionContext::ID() {
  return getToken(MySQLParser::ID, 0);
}

MySQLParser::TableOptionCompressionContext::TableOptionCompressionContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionCompressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionCompression(this);
}
void MySQLParser::TableOptionCompressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionCompression(this);
}

antlrcpp::Any MySQLParser::TableOptionCompressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionCompression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionInsertMethodContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionInsertMethodContext::INSERT_METHOD() {
  return getToken(MySQLParser::INSERT_METHOD, 0);
}

tree::TerminalNode* MySQLParser::TableOptionInsertMethodContext::NO() {
  return getToken(MySQLParser::NO, 0);
}

tree::TerminalNode* MySQLParser::TableOptionInsertMethodContext::FIRST() {
  return getToken(MySQLParser::FIRST, 0);
}

tree::TerminalNode* MySQLParser::TableOptionInsertMethodContext::LAST() {
  return getToken(MySQLParser::LAST, 0);
}

MySQLParser::TableOptionInsertMethodContext::TableOptionInsertMethodContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionInsertMethodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionInsertMethod(this);
}
void MySQLParser::TableOptionInsertMethodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionInsertMethod(this);
}

antlrcpp::Any MySQLParser::TableOptionInsertMethodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionInsertMethod(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableOptionMinRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableOptionMinRowsContext::MIN_ROWS() {
  return getToken(MySQLParser::MIN_ROWS, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::TableOptionMinRowsContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::TableOptionMinRowsContext::TableOptionMinRowsContext(TableOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableOptionMinRowsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableOptionMinRows(this);
}
void MySQLParser::TableOptionMinRowsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableOptionMinRows(this);
}

antlrcpp::Any MySQLParser::TableOptionMinRowsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableOptionMinRows(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::TableOptionContext* MySQLParser::tableOption() {
  TableOptionContext *_localctx = _tracker.createInstance<TableOptionContext>(_ctx, getState());
  enterRule(_localctx, 92, MySQLParser::RuleTableOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1740);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionEngineContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1596);
      match(MySQLParser::ENGINE);
      setState(1598);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1597);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1600);
      engineName();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionAutoIncrementContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1601);
      match(MySQLParser::AUTO_INCREMENT);
      setState(1603);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1602);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1605);
      decimalLiteral();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionAverageContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1606);
      match(MySQLParser::AVG_ROW_LENGTH);
      setState(1608);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1607);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1610);
      decimalLiteral();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1612);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DEFAULT) {
        setState(1611);
        match(MySQLParser::DEFAULT);
      }
      setState(1617);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::CHARACTER: {
          setState(1614);
          match(MySQLParser::CHARACTER);
          setState(1615);
          match(MySQLParser::SET);
          break;
        }

        case MySQLParser::CHARSET: {
          setState(1616);
          match(MySQLParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1620);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1619);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1624);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::BINARY:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL: {
          setState(1622);
          charsetName();
          break;
        }

        case MySQLParser::DEFAULT: {
          setState(1623);
          match(MySQLParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionChecksumContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1626);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::CHECKSUM

      || _la == MySQLParser::PAGE_CHECKSUM)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1628);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1627);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1630);
      dynamic_cast<TableOptionChecksumContext *>(_localctx)->boolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ZERO_DECIMAL

      || _la == MySQLParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionChecksumContext *>(_localctx)->boolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionCollateContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(1632);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DEFAULT) {
        setState(1631);
        match(MySQLParser::DEFAULT);
      }
      setState(1634);
      match(MySQLParser::COLLATE);
      setState(1636);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1635);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1638);
      collationName();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionCommentContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(1639);
      match(MySQLParser::COMMENT);
      setState(1641);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1640);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1643);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionCompressionContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(1644);
      match(MySQLParser::COMPRESSION);
      setState(1646);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1645);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1648);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::STRING_LITERAL

      || _la == MySQLParser::ID)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionConnectionContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(1649);
      match(MySQLParser::CONNECTION);
      setState(1651);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1650);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1653);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionDataDirectoryContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(1654);
      match(MySQLParser::DATA);
      setState(1655);
      match(MySQLParser::DIRECTORY);
      setState(1657);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1656);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1659);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionDelayContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(1660);
      match(MySQLParser::DELAY_KEY_WRITE);
      setState(1662);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1661);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1664);
      dynamic_cast<TableOptionDelayContext *>(_localctx)->boolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ZERO_DECIMAL

      || _la == MySQLParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionDelayContext *>(_localctx)->boolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionEncryptionContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(1665);
      match(MySQLParser::ENCRYPTION);
      setState(1667);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1666);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1669);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionIndexDirectoryContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(1670);
      match(MySQLParser::INDEX);
      setState(1671);
      match(MySQLParser::DIRECTORY);
      setState(1673);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1672);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1675);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionInsertMethodContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(1676);
      match(MySQLParser::INSERT_METHOD);
      setState(1678);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1677);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1680);
      dynamic_cast<TableOptionInsertMethodContext *>(_localctx)->insertMethod = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FIRST

      || _la == MySQLParser::LAST || _la == MySQLParser::NO)) {
        dynamic_cast<TableOptionInsertMethodContext *>(_localctx)->insertMethod = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionKeyBlockSizeContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(1681);
      match(MySQLParser::KEY_BLOCK_SIZE);
      setState(1683);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1682);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1685);
      fileSizeLiteral();
      break;
    }

    case 16: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionMaxRowsContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(1686);
      match(MySQLParser::MAX_ROWS);
      setState(1688);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1687);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1690);
      decimalLiteral();
      break;
    }

    case 17: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionMinRowsContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(1691);
      match(MySQLParser::MIN_ROWS);
      setState(1693);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1692);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1695);
      decimalLiteral();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionPackKeysContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(1696);
      match(MySQLParser::PACK_KEYS);
      setState(1698);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1697);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1700);
      dynamic_cast<TableOptionPackKeysContext *>(_localctx)->extBoolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::ZERO_DECIMAL

      || _la == MySQLParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionPackKeysContext *>(_localctx)->extBoolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 19: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionPasswordContext>(_localctx));
      enterOuterAlt(_localctx, 19);
      setState(1701);
      match(MySQLParser::PASSWORD);
      setState(1703);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1702);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1705);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 20: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionRowFormatContext>(_localctx));
      enterOuterAlt(_localctx, 20);
      setState(1706);
      match(MySQLParser::ROW_FORMAT);
      setState(1708);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1707);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1710);
      dynamic_cast<TableOptionRowFormatContext *>(_localctx)->rowFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFAULT || ((((_la - 287) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 287)) & ((1ULL << (MySQLParser::COMPACT - 287))
        | (1ULL << (MySQLParser::COMPRESSED - 287))
        | (1ULL << (MySQLParser::DYNAMIC - 287))
        | (1ULL << (MySQLParser::FIXED - 287)))) != 0) || _la == MySQLParser::REDUNDANT)) {
        dynamic_cast<TableOptionRowFormatContext *>(_localctx)->rowFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 21: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionRecalculationContext>(_localctx));
      enterOuterAlt(_localctx, 21);
      setState(1711);
      match(MySQLParser::STATS_AUTO_RECALC);
      setState(1713);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1712);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1715);
      dynamic_cast<TableOptionRecalculationContext *>(_localctx)->extBoolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::ZERO_DECIMAL

      || _la == MySQLParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionRecalculationContext *>(_localctx)->extBoolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 22: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionPersistentContext>(_localctx));
      enterOuterAlt(_localctx, 22);
      setState(1716);
      match(MySQLParser::STATS_PERSISTENT);
      setState(1718);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1717);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1720);
      dynamic_cast<TableOptionPersistentContext *>(_localctx)->extBoolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::ZERO_DECIMAL

      || _la == MySQLParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionPersistentContext *>(_localctx)->extBoolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 23: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionSamplePageContext>(_localctx));
      enterOuterAlt(_localctx, 23);
      setState(1721);
      match(MySQLParser::STATS_SAMPLE_PAGES);
      setState(1723);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1722);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1725);
      decimalLiteral();
      break;
    }

    case 24: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 24);
      setState(1726);
      match(MySQLParser::TABLESPACE);
      setState(1727);
      uid();
      setState(1729);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
      case 1: {
        setState(1728);
        tablespaceStorage();
        break;
      }

      }
      break;
    }

    case 25: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 25);
      setState(1731);
      tablespaceStorage();
      break;
    }

    case 26: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySQLParser::TableOptionUnionContext>(_localctx));
      enterOuterAlt(_localctx, 26);
      setState(1732);
      match(MySQLParser::UNION);
      setState(1734);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(1733);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(1736);
      match(MySQLParser::LR_BRACKET);
      setState(1737);
      tables();
      setState(1738);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablespaceStorageContext ------------------------------------------------------------------

MySQLParser::TablespaceStorageContext::TablespaceStorageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TablespaceStorageContext::STORAGE() {
  return getToken(MySQLParser::STORAGE, 0);
}

tree::TerminalNode* MySQLParser::TablespaceStorageContext::DISK() {
  return getToken(MySQLParser::DISK, 0);
}

tree::TerminalNode* MySQLParser::TablespaceStorageContext::MEMORY() {
  return getToken(MySQLParser::MEMORY, 0);
}

tree::TerminalNode* MySQLParser::TablespaceStorageContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}


size_t MySQLParser::TablespaceStorageContext::getRuleIndex() const {
  return MySQLParser::RuleTablespaceStorage;
}

void MySQLParser::TablespaceStorageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTablespaceStorage(this);
}

void MySQLParser::TablespaceStorageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTablespaceStorage(this);
}


antlrcpp::Any MySQLParser::TablespaceStorageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTablespaceStorage(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TablespaceStorageContext* MySQLParser::tablespaceStorage() {
  TablespaceStorageContext *_localctx = _tracker.createInstance<TablespaceStorageContext>(_ctx, getState());
  enterRule(_localctx, 94, MySQLParser::RuleTablespaceStorage);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1742);
    match(MySQLParser::STORAGE);
    setState(1743);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::DISK || _la == MySQLParser::MEMORY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinitionsContext ------------------------------------------------------------------

MySQLParser::PartitionDefinitionsContext::PartitionDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::PartitionDefinitionsContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::PartitionDefinitionsContext::BY() {
  return getTokens(MySQLParser::BY);
}

tree::TerminalNode* MySQLParser::PartitionDefinitionsContext::BY(size_t i) {
  return getToken(MySQLParser::BY, i);
}

MySQLParser::PartitionFunctionDefinitionContext* MySQLParser::PartitionDefinitionsContext::partitionFunctionDefinition() {
  return getRuleContext<MySQLParser::PartitionFunctionDefinitionContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionDefinitionsContext::PARTITIONS() {
  return getToken(MySQLParser::PARTITIONS, 0);
}

tree::TerminalNode* MySQLParser::PartitionDefinitionsContext::SUBPARTITION() {
  return getToken(MySQLParser::SUBPARTITION, 0);
}

MySQLParser::SubpartitionFunctionDefinitionContext* MySQLParser::PartitionDefinitionsContext::subpartitionFunctionDefinition() {
  return getRuleContext<MySQLParser::SubpartitionFunctionDefinitionContext>(0);
}

std::vector<MySQLParser::PartitionDefinitionContext *> MySQLParser::PartitionDefinitionsContext::partitionDefinition() {
  return getRuleContexts<MySQLParser::PartitionDefinitionContext>();
}

MySQLParser::PartitionDefinitionContext* MySQLParser::PartitionDefinitionsContext::partitionDefinition(size_t i) {
  return getRuleContext<MySQLParser::PartitionDefinitionContext>(i);
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::PartitionDefinitionsContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::PartitionDefinitionsContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySQLParser::PartitionDefinitionsContext::SUBPARTITIONS() {
  return getToken(MySQLParser::SUBPARTITIONS, 0);
}


size_t MySQLParser::PartitionDefinitionsContext::getRuleIndex() const {
  return MySQLParser::RulePartitionDefinitions;
}

void MySQLParser::PartitionDefinitionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionDefinitions(this);
}

void MySQLParser::PartitionDefinitionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionDefinitions(this);
}


antlrcpp::Any MySQLParser::PartitionDefinitionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionDefinitions(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PartitionDefinitionsContext* MySQLParser::partitionDefinitions() {
  PartitionDefinitionsContext *_localctx = _tracker.createInstance<PartitionDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 96, MySQLParser::RulePartitionDefinitions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1745);
    match(MySQLParser::PARTITION);
    setState(1746);
    match(MySQLParser::BY);
    setState(1747);
    partitionFunctionDefinition();
    setState(1750);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITIONS) {
      setState(1748);
      match(MySQLParser::PARTITIONS);
      setState(1749);
      dynamic_cast<PartitionDefinitionsContext *>(_localctx)->count = decimalLiteral();
    }
    setState(1759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::SUBPARTITION) {
      setState(1752);
      match(MySQLParser::SUBPARTITION);
      setState(1753);
      match(MySQLParser::BY);
      setState(1754);
      subpartitionFunctionDefinition();
      setState(1757);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::SUBPARTITIONS) {
        setState(1755);
        match(MySQLParser::SUBPARTITIONS);
        setState(1756);
        dynamic_cast<PartitionDefinitionsContext *>(_localctx)->subCount = decimalLiteral();
      }
    }
    setState(1772);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1761);
      match(MySQLParser::LR_BRACKET);
      setState(1762);
      partitionDefinition();
      setState(1767);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(1763);
        match(MySQLParser::COMMA);
        setState(1764);
        partitionDefinition();
        setState(1769);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1770);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionFunctionDefinitionContext ------------------------------------------------------------------

MySQLParser::PartitionFunctionDefinitionContext::PartitionFunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::PartitionFunctionDefinitionContext::getRuleIndex() const {
  return MySQLParser::RulePartitionFunctionDefinition;
}

void MySQLParser::PartitionFunctionDefinitionContext::copyFrom(PartitionFunctionDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PartitionFunctionKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionFunctionKeyContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::UidListContext* MySQLParser::PartitionFunctionKeyContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionFunctionKeyContext::LINEAR() {
  return getToken(MySQLParser::LINEAR, 0);
}

tree::TerminalNode* MySQLParser::PartitionFunctionKeyContext::ALGORITHM() {
  return getToken(MySQLParser::ALGORITHM, 0);
}

MySQLParser::PartitionFunctionKeyContext::PartitionFunctionKeyContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionFunctionKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionFunctionKey(this);
}
void MySQLParser::PartitionFunctionKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionFunctionKey(this);
}

antlrcpp::Any MySQLParser::PartitionFunctionKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionFunctionKey(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionFunctionHashContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionFunctionHashContext::HASH() {
  return getToken(MySQLParser::HASH, 0);
}

MySQLParser::ExpressionContext* MySQLParser::PartitionFunctionHashContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionFunctionHashContext::LINEAR() {
  return getToken(MySQLParser::LINEAR, 0);
}

MySQLParser::PartitionFunctionHashContext::PartitionFunctionHashContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionFunctionHashContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionFunctionHash(this);
}
void MySQLParser::PartitionFunctionHashContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionFunctionHash(this);
}

antlrcpp::Any MySQLParser::PartitionFunctionHashContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionFunctionHash(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionFunctionListContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionFunctionListContext::LIST() {
  return getToken(MySQLParser::LIST, 0);
}

MySQLParser::ExpressionContext* MySQLParser::PartitionFunctionListContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionFunctionListContext::COLUMNS() {
  return getToken(MySQLParser::COLUMNS, 0);
}

MySQLParser::UidListContext* MySQLParser::PartitionFunctionListContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::PartitionFunctionListContext::PartitionFunctionListContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionFunctionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionFunctionList(this);
}
void MySQLParser::PartitionFunctionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionFunctionList(this);
}

antlrcpp::Any MySQLParser::PartitionFunctionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionFunctionList(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionFunctionRangeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionFunctionRangeContext::RANGE() {
  return getToken(MySQLParser::RANGE, 0);
}

MySQLParser::ExpressionContext* MySQLParser::PartitionFunctionRangeContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionFunctionRangeContext::COLUMNS() {
  return getToken(MySQLParser::COLUMNS, 0);
}

MySQLParser::UidListContext* MySQLParser::PartitionFunctionRangeContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::PartitionFunctionRangeContext::PartitionFunctionRangeContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionFunctionRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionFunctionRange(this);
}
void MySQLParser::PartitionFunctionRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionFunctionRange(this);
}

antlrcpp::Any MySQLParser::PartitionFunctionRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionFunctionRange(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::PartitionFunctionDefinitionContext* MySQLParser::partitionFunctionDefinition() {
  PartitionFunctionDefinitionContext *_localctx = _tracker.createInstance<PartitionFunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 98, MySQLParser::RulePartitionFunctionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1819);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionFunctionHashContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1775);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LINEAR) {
        setState(1774);
        match(MySQLParser::LINEAR);
      }
      setState(1777);
      match(MySQLParser::HASH);
      setState(1778);
      match(MySQLParser::LR_BRACKET);
      setState(1779);
      expression(0);
      setState(1780);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionFunctionKeyContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1783);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LINEAR) {
        setState(1782);
        match(MySQLParser::LINEAR);
      }
      setState(1785);
      match(MySQLParser::KEY);
      setState(1789);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ALGORITHM) {
        setState(1786);
        match(MySQLParser::ALGORITHM);
        setState(1787);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(1788);
        dynamic_cast<PartitionFunctionKeyContext *>(_localctx)->algType = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::ONE_DECIMAL

        || _la == MySQLParser::TWO_DECIMAL)) {
          dynamic_cast<PartitionFunctionKeyContext *>(_localctx)->algType = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1791);
      match(MySQLParser::LR_BRACKET);
      setState(1792);
      uidList();
      setState(1793);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionFunctionRangeContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1795);
      match(MySQLParser::RANGE);
      setState(1805);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::LR_BRACKET: {
          setState(1796);
          match(MySQLParser::LR_BRACKET);
          setState(1797);
          expression(0);
          setState(1798);
          match(MySQLParser::RR_BRACKET);
          break;
        }

        case MySQLParser::COLUMNS: {
          setState(1800);
          match(MySQLParser::COLUMNS);
          setState(1801);
          match(MySQLParser::LR_BRACKET);
          setState(1802);
          uidList();
          setState(1803);
          match(MySQLParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionFunctionListContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1807);
      match(MySQLParser::LIST);
      setState(1817);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::LR_BRACKET: {
          setState(1808);
          match(MySQLParser::LR_BRACKET);
          setState(1809);
          expression(0);
          setState(1810);
          match(MySQLParser::RR_BRACKET);
          break;
        }

        case MySQLParser::COLUMNS: {
          setState(1812);
          match(MySQLParser::COLUMNS);
          setState(1813);
          match(MySQLParser::LR_BRACKET);
          setState(1814);
          uidList();
          setState(1815);
          match(MySQLParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpartitionFunctionDefinitionContext ------------------------------------------------------------------

MySQLParser::SubpartitionFunctionDefinitionContext::SubpartitionFunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::SubpartitionFunctionDefinitionContext::getRuleIndex() const {
  return MySQLParser::RuleSubpartitionFunctionDefinition;
}

void MySQLParser::SubpartitionFunctionDefinitionContext::copyFrom(SubpartitionFunctionDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubPartitionFunctionHashContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SubPartitionFunctionHashContext::HASH() {
  return getToken(MySQLParser::HASH, 0);
}

MySQLParser::ExpressionContext* MySQLParser::SubPartitionFunctionHashContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::SubPartitionFunctionHashContext::LINEAR() {
  return getToken(MySQLParser::LINEAR, 0);
}

MySQLParser::SubPartitionFunctionHashContext::SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SubPartitionFunctionHashContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubPartitionFunctionHash(this);
}
void MySQLParser::SubPartitionFunctionHashContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubPartitionFunctionHash(this);
}

antlrcpp::Any MySQLParser::SubPartitionFunctionHashContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSubPartitionFunctionHash(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubPartitionFunctionKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SubPartitionFunctionKeyContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::UidListContext* MySQLParser::SubPartitionFunctionKeyContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::SubPartitionFunctionKeyContext::LINEAR() {
  return getToken(MySQLParser::LINEAR, 0);
}

tree::TerminalNode* MySQLParser::SubPartitionFunctionKeyContext::ALGORITHM() {
  return getToken(MySQLParser::ALGORITHM, 0);
}

MySQLParser::SubPartitionFunctionKeyContext::SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SubPartitionFunctionKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubPartitionFunctionKey(this);
}
void MySQLParser::SubPartitionFunctionKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubPartitionFunctionKey(this);
}

antlrcpp::Any MySQLParser::SubPartitionFunctionKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSubPartitionFunctionKey(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::SubpartitionFunctionDefinitionContext* MySQLParser::subpartitionFunctionDefinition() {
  SubpartitionFunctionDefinitionContext *_localctx = _tracker.createInstance<SubpartitionFunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 100, MySQLParser::RuleSubpartitionFunctionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1842);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SubpartitionFunctionDefinitionContext *>(_tracker.createInstance<MySQLParser::SubPartitionFunctionHashContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LINEAR) {
        setState(1821);
        match(MySQLParser::LINEAR);
      }
      setState(1824);
      match(MySQLParser::HASH);
      setState(1825);
      match(MySQLParser::LR_BRACKET);
      setState(1826);
      expression(0);
      setState(1827);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SubpartitionFunctionDefinitionContext *>(_tracker.createInstance<MySQLParser::SubPartitionFunctionKeyContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LINEAR) {
        setState(1829);
        match(MySQLParser::LINEAR);
      }
      setState(1832);
      match(MySQLParser::KEY);
      setState(1836);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ALGORITHM) {
        setState(1833);
        match(MySQLParser::ALGORITHM);
        setState(1834);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(1835);
        dynamic_cast<SubPartitionFunctionKeyContext *>(_localctx)->algType = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::ONE_DECIMAL

        || _la == MySQLParser::TWO_DECIMAL)) {
          dynamic_cast<SubPartitionFunctionKeyContext *>(_localctx)->algType = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1838);
      match(MySQLParser::LR_BRACKET);
      setState(1839);
      uidList();
      setState(1840);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinitionContext ------------------------------------------------------------------

MySQLParser::PartitionDefinitionContext::PartitionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::PartitionDefinitionContext::getRuleIndex() const {
  return MySQLParser::RulePartitionDefinition;
}

void MySQLParser::PartitionDefinitionContext::copyFrom(PartitionDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PartitionComparisionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionComparisionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidContext* MySQLParser::PartitionComparisionContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionComparisionContext::VALUES() {
  return getToken(MySQLParser::VALUES, 0);
}

tree::TerminalNode* MySQLParser::PartitionComparisionContext::LESS() {
  return getToken(MySQLParser::LESS, 0);
}

tree::TerminalNode* MySQLParser::PartitionComparisionContext::THAN() {
  return getToken(MySQLParser::THAN, 0);
}

std::vector<MySQLParser::PartitionDefinerAtomContext *> MySQLParser::PartitionComparisionContext::partitionDefinerAtom() {
  return getRuleContexts<MySQLParser::PartitionDefinerAtomContext>();
}

MySQLParser::PartitionDefinerAtomContext* MySQLParser::PartitionComparisionContext::partitionDefinerAtom(size_t i) {
  return getRuleContext<MySQLParser::PartitionDefinerAtomContext>(i);
}

std::vector<MySQLParser::PartitionOptionContext *> MySQLParser::PartitionComparisionContext::partitionOption() {
  return getRuleContexts<MySQLParser::PartitionOptionContext>();
}

MySQLParser::PartitionOptionContext* MySQLParser::PartitionComparisionContext::partitionOption(size_t i) {
  return getRuleContext<MySQLParser::PartitionOptionContext>(i);
}

std::vector<MySQLParser::SubpartitionDefinitionContext *> MySQLParser::PartitionComparisionContext::subpartitionDefinition() {
  return getRuleContexts<MySQLParser::SubpartitionDefinitionContext>();
}

MySQLParser::SubpartitionDefinitionContext* MySQLParser::PartitionComparisionContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySQLParser::SubpartitionDefinitionContext>(i);
}

MySQLParser::PartitionComparisionContext::PartitionComparisionContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionComparisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionComparision(this);
}
void MySQLParser::PartitionComparisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionComparision(this);
}

antlrcpp::Any MySQLParser::PartitionComparisionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionComparision(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionListAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionListAtomContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidContext* MySQLParser::PartitionListAtomContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionListAtomContext::VALUES() {
  return getToken(MySQLParser::VALUES, 0);
}

tree::TerminalNode* MySQLParser::PartitionListAtomContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

std::vector<MySQLParser::PartitionDefinerAtomContext *> MySQLParser::PartitionListAtomContext::partitionDefinerAtom() {
  return getRuleContexts<MySQLParser::PartitionDefinerAtomContext>();
}

MySQLParser::PartitionDefinerAtomContext* MySQLParser::PartitionListAtomContext::partitionDefinerAtom(size_t i) {
  return getRuleContext<MySQLParser::PartitionDefinerAtomContext>(i);
}

std::vector<MySQLParser::PartitionOptionContext *> MySQLParser::PartitionListAtomContext::partitionOption() {
  return getRuleContexts<MySQLParser::PartitionOptionContext>();
}

MySQLParser::PartitionOptionContext* MySQLParser::PartitionListAtomContext::partitionOption(size_t i) {
  return getRuleContext<MySQLParser::PartitionOptionContext>(i);
}

std::vector<MySQLParser::SubpartitionDefinitionContext *> MySQLParser::PartitionListAtomContext::subpartitionDefinition() {
  return getRuleContexts<MySQLParser::SubpartitionDefinitionContext>();
}

MySQLParser::SubpartitionDefinitionContext* MySQLParser::PartitionListAtomContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySQLParser::SubpartitionDefinitionContext>(i);
}

MySQLParser::PartitionListAtomContext::PartitionListAtomContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionListAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionListAtom(this);
}
void MySQLParser::PartitionListAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionListAtom(this);
}

antlrcpp::Any MySQLParser::PartitionListAtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionListAtom(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionListVectorContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionListVectorContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidContext* MySQLParser::PartitionListVectorContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionListVectorContext::VALUES() {
  return getToken(MySQLParser::VALUES, 0);
}

tree::TerminalNode* MySQLParser::PartitionListVectorContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

std::vector<MySQLParser::PartitionDefinerVectorContext *> MySQLParser::PartitionListVectorContext::partitionDefinerVector() {
  return getRuleContexts<MySQLParser::PartitionDefinerVectorContext>();
}

MySQLParser::PartitionDefinerVectorContext* MySQLParser::PartitionListVectorContext::partitionDefinerVector(size_t i) {
  return getRuleContext<MySQLParser::PartitionDefinerVectorContext>(i);
}

std::vector<MySQLParser::PartitionOptionContext *> MySQLParser::PartitionListVectorContext::partitionOption() {
  return getRuleContexts<MySQLParser::PartitionOptionContext>();
}

MySQLParser::PartitionOptionContext* MySQLParser::PartitionListVectorContext::partitionOption(size_t i) {
  return getRuleContext<MySQLParser::PartitionOptionContext>(i);
}

std::vector<MySQLParser::SubpartitionDefinitionContext *> MySQLParser::PartitionListVectorContext::subpartitionDefinition() {
  return getRuleContexts<MySQLParser::SubpartitionDefinitionContext>();
}

MySQLParser::SubpartitionDefinitionContext* MySQLParser::PartitionListVectorContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySQLParser::SubpartitionDefinitionContext>(i);
}

MySQLParser::PartitionListVectorContext::PartitionListVectorContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionListVectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionListVector(this);
}
void MySQLParser::PartitionListVectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionListVector(this);
}

antlrcpp::Any MySQLParser::PartitionListVectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionListVector(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionSimpleContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionSimpleContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidContext* MySQLParser::PartitionSimpleContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

std::vector<MySQLParser::PartitionOptionContext *> MySQLParser::PartitionSimpleContext::partitionOption() {
  return getRuleContexts<MySQLParser::PartitionOptionContext>();
}

MySQLParser::PartitionOptionContext* MySQLParser::PartitionSimpleContext::partitionOption(size_t i) {
  return getRuleContext<MySQLParser::PartitionOptionContext>(i);
}

std::vector<MySQLParser::SubpartitionDefinitionContext *> MySQLParser::PartitionSimpleContext::subpartitionDefinition() {
  return getRuleContexts<MySQLParser::SubpartitionDefinitionContext>();
}

MySQLParser::SubpartitionDefinitionContext* MySQLParser::PartitionSimpleContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySQLParser::SubpartitionDefinitionContext>(i);
}

MySQLParser::PartitionSimpleContext::PartitionSimpleContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionSimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionSimple(this);
}
void MySQLParser::PartitionSimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionSimple(this);
}

antlrcpp::Any MySQLParser::PartitionSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionSimple(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::PartitionDefinitionContext* MySQLParser::partitionDefinition() {
  PartitionDefinitionContext *_localctx = _tracker.createInstance<PartitionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 102, MySQLParser::RulePartitionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1975);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionComparisionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1844);
      match(MySQLParser::PARTITION);
      setState(1845);
      uid();
      setState(1846);
      match(MySQLParser::VALUES);
      setState(1847);
      match(MySQLParser::LESS);
      setState(1848);
      match(MySQLParser::THAN);
      setState(1849);
      match(MySQLParser::LR_BRACKET);
      setState(1850);
      partitionDefinerAtom();
      setState(1855);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(1851);
        match(MySQLParser::COMMA);
        setState(1852);
        partitionDefinerAtom();
        setState(1857);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1858);
      match(MySQLParser::RR_BRACKET);
      setState(1862);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::INDEX || ((((_la - 285) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 285)) & ((1ULL << (MySQLParser::COMMENT - 285))
        | (1ULL << (MySQLParser::DATA - 285))
        | (1ULL << (MySQLParser::ENGINE - 285)))) != 0) || ((((_la - 404) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 404)) & ((1ULL << (MySQLParser::MAX_ROWS - 404))
        | (1ULL << (MySQLParser::MIN_ROWS - 404))
        | (1ULL << (MySQLParser::NODEGROUP - 404)))) != 0) || _la == MySQLParser::STORAGE

      || _la == MySQLParser::TABLESPACE) {
        setState(1859);
        partitionOption();
        setState(1864);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1873);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::SUBPARTITION) {
        setState(1865);
        subpartitionDefinition();
        setState(1870);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1866);
            match(MySQLParser::COMMA);
            setState(1867);
            subpartitionDefinition(); 
          }
          setState(1872);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx);
        }
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionComparisionContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1875);
      match(MySQLParser::PARTITION);
      setState(1876);
      uid();
      setState(1877);
      match(MySQLParser::VALUES);
      setState(1878);
      match(MySQLParser::LESS);
      setState(1879);
      match(MySQLParser::THAN);
      setState(1880);
      partitionDefinerAtom();
      setState(1884);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::INDEX || ((((_la - 285) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 285)) & ((1ULL << (MySQLParser::COMMENT - 285))
        | (1ULL << (MySQLParser::DATA - 285))
        | (1ULL << (MySQLParser::ENGINE - 285)))) != 0) || ((((_la - 404) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 404)) & ((1ULL << (MySQLParser::MAX_ROWS - 404))
        | (1ULL << (MySQLParser::MIN_ROWS - 404))
        | (1ULL << (MySQLParser::NODEGROUP - 404)))) != 0) || _la == MySQLParser::STORAGE

      || _la == MySQLParser::TABLESPACE) {
        setState(1881);
        partitionOption();
        setState(1886);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::SUBPARTITION) {
        setState(1887);
        subpartitionDefinition();
        setState(1892);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1888);
            match(MySQLParser::COMMA);
            setState(1889);
            subpartitionDefinition(); 
          }
          setState(1894);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
        }
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionListAtomContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1897);
      match(MySQLParser::PARTITION);
      setState(1898);
      uid();
      setState(1899);
      match(MySQLParser::VALUES);
      setState(1900);
      match(MySQLParser::IN);
      setState(1901);
      match(MySQLParser::LR_BRACKET);
      setState(1902);
      partitionDefinerAtom();
      setState(1907);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(1903);
        match(MySQLParser::COMMA);
        setState(1904);
        partitionDefinerAtom();
        setState(1909);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1910);
      match(MySQLParser::RR_BRACKET);
      setState(1914);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::INDEX || ((((_la - 285) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 285)) & ((1ULL << (MySQLParser::COMMENT - 285))
        | (1ULL << (MySQLParser::DATA - 285))
        | (1ULL << (MySQLParser::ENGINE - 285)))) != 0) || ((((_la - 404) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 404)) & ((1ULL << (MySQLParser::MAX_ROWS - 404))
        | (1ULL << (MySQLParser::MIN_ROWS - 404))
        | (1ULL << (MySQLParser::NODEGROUP - 404)))) != 0) || _la == MySQLParser::STORAGE

      || _la == MySQLParser::TABLESPACE) {
        setState(1911);
        partitionOption();
        setState(1916);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1925);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::SUBPARTITION) {
        setState(1917);
        subpartitionDefinition();
        setState(1922);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1918);
            match(MySQLParser::COMMA);
            setState(1919);
            subpartitionDefinition(); 
          }
          setState(1924);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
        }
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionListVectorContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1927);
      match(MySQLParser::PARTITION);
      setState(1928);
      uid();
      setState(1929);
      match(MySQLParser::VALUES);
      setState(1930);
      match(MySQLParser::IN);
      setState(1931);
      match(MySQLParser::LR_BRACKET);
      setState(1932);
      partitionDefinerVector();
      setState(1937);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(1933);
        match(MySQLParser::COMMA);
        setState(1934);
        partitionDefinerVector();
        setState(1939);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1940);
      match(MySQLParser::RR_BRACKET);
      setState(1944);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::INDEX || ((((_la - 285) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 285)) & ((1ULL << (MySQLParser::COMMENT - 285))
        | (1ULL << (MySQLParser::DATA - 285))
        | (1ULL << (MySQLParser::ENGINE - 285)))) != 0) || ((((_la - 404) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 404)) & ((1ULL << (MySQLParser::MAX_ROWS - 404))
        | (1ULL << (MySQLParser::MIN_ROWS - 404))
        | (1ULL << (MySQLParser::NODEGROUP - 404)))) != 0) || _la == MySQLParser::STORAGE

      || _la == MySQLParser::TABLESPACE) {
        setState(1941);
        partitionOption();
        setState(1946);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1955);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::SUBPARTITION) {
        setState(1947);
        subpartitionDefinition();
        setState(1952);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1948);
            match(MySQLParser::COMMA);
            setState(1949);
            subpartitionDefinition(); 
          }
          setState(1954);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx);
        }
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySQLParser::PartitionSimpleContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1957);
      match(MySQLParser::PARTITION);
      setState(1958);
      uid();
      setState(1962);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::INDEX || ((((_la - 285) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 285)) & ((1ULL << (MySQLParser::COMMENT - 285))
        | (1ULL << (MySQLParser::DATA - 285))
        | (1ULL << (MySQLParser::ENGINE - 285)))) != 0) || ((((_la - 404) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 404)) & ((1ULL << (MySQLParser::MAX_ROWS - 404))
        | (1ULL << (MySQLParser::MIN_ROWS - 404))
        | (1ULL << (MySQLParser::NODEGROUP - 404)))) != 0) || _la == MySQLParser::STORAGE

      || _la == MySQLParser::TABLESPACE) {
        setState(1959);
        partitionOption();
        setState(1964);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1973);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::SUBPARTITION) {
        setState(1965);
        subpartitionDefinition();
        setState(1970);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1966);
            match(MySQLParser::COMMA);
            setState(1967);
            subpartitionDefinition(); 
          }
          setState(1972);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
        }
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinerAtomContext ------------------------------------------------------------------

MySQLParser::PartitionDefinerAtomContext::PartitionDefinerAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ConstantContext* MySQLParser::PartitionDefinerAtomContext::constant() {
  return getRuleContext<MySQLParser::ConstantContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::PartitionDefinerAtomContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionDefinerAtomContext::MAXVALUE() {
  return getToken(MySQLParser::MAXVALUE, 0);
}


size_t MySQLParser::PartitionDefinerAtomContext::getRuleIndex() const {
  return MySQLParser::RulePartitionDefinerAtom;
}

void MySQLParser::PartitionDefinerAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionDefinerAtom(this);
}

void MySQLParser::PartitionDefinerAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionDefinerAtom(this);
}


antlrcpp::Any MySQLParser::PartitionDefinerAtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionDefinerAtom(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PartitionDefinerAtomContext* MySQLParser::partitionDefinerAtom() {
  PartitionDefinerAtomContext *_localctx = _tracker.createInstance<PartitionDefinerAtomContext>(_ctx, getState());
  enterRule(_localctx, 104, MySQLParser::RulePartitionDefinerAtom);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1980);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1977);
      constant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1978);
      expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1979);
      match(MySQLParser::MAXVALUE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinerVectorContext ------------------------------------------------------------------

MySQLParser::PartitionDefinerVectorContext::PartitionDefinerVectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::PartitionDefinerAtomContext *> MySQLParser::PartitionDefinerVectorContext::partitionDefinerAtom() {
  return getRuleContexts<MySQLParser::PartitionDefinerAtomContext>();
}

MySQLParser::PartitionDefinerAtomContext* MySQLParser::PartitionDefinerVectorContext::partitionDefinerAtom(size_t i) {
  return getRuleContext<MySQLParser::PartitionDefinerAtomContext>(i);
}


size_t MySQLParser::PartitionDefinerVectorContext::getRuleIndex() const {
  return MySQLParser::RulePartitionDefinerVector;
}

void MySQLParser::PartitionDefinerVectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionDefinerVector(this);
}

void MySQLParser::PartitionDefinerVectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionDefinerVector(this);
}


antlrcpp::Any MySQLParser::PartitionDefinerVectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionDefinerVector(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PartitionDefinerVectorContext* MySQLParser::partitionDefinerVector() {
  PartitionDefinerVectorContext *_localctx = _tracker.createInstance<PartitionDefinerVectorContext>(_ctx, getState());
  enterRule(_localctx, 106, MySQLParser::RulePartitionDefinerVector);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1982);
    match(MySQLParser::LR_BRACKET);
    setState(1983);
    partitionDefinerAtom();
    setState(1986); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1984);
      match(MySQLParser::COMMA);
      setState(1985);
      partitionDefinerAtom();
      setState(1988); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySQLParser::COMMA);
    setState(1990);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpartitionDefinitionContext ------------------------------------------------------------------

MySQLParser::SubpartitionDefinitionContext::SubpartitionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SubpartitionDefinitionContext::SUBPARTITION() {
  return getToken(MySQLParser::SUBPARTITION, 0);
}

MySQLParser::UidContext* MySQLParser::SubpartitionDefinitionContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

std::vector<MySQLParser::PartitionOptionContext *> MySQLParser::SubpartitionDefinitionContext::partitionOption() {
  return getRuleContexts<MySQLParser::PartitionOptionContext>();
}

MySQLParser::PartitionOptionContext* MySQLParser::SubpartitionDefinitionContext::partitionOption(size_t i) {
  return getRuleContext<MySQLParser::PartitionOptionContext>(i);
}


size_t MySQLParser::SubpartitionDefinitionContext::getRuleIndex() const {
  return MySQLParser::RuleSubpartitionDefinition;
}

void MySQLParser::SubpartitionDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubpartitionDefinition(this);
}

void MySQLParser::SubpartitionDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubpartitionDefinition(this);
}


antlrcpp::Any MySQLParser::SubpartitionDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSubpartitionDefinition(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SubpartitionDefinitionContext* MySQLParser::subpartitionDefinition() {
  SubpartitionDefinitionContext *_localctx = _tracker.createInstance<SubpartitionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 108, MySQLParser::RuleSubpartitionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1992);
    match(MySQLParser::SUBPARTITION);
    setState(1993);
    uid();
    setState(1997);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::INDEX || ((((_la - 285) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 285)) & ((1ULL << (MySQLParser::COMMENT - 285))
      | (1ULL << (MySQLParser::DATA - 285))
      | (1ULL << (MySQLParser::ENGINE - 285)))) != 0) || ((((_la - 404) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 404)) & ((1ULL << (MySQLParser::MAX_ROWS - 404))
      | (1ULL << (MySQLParser::MIN_ROWS - 404))
      | (1ULL << (MySQLParser::NODEGROUP - 404)))) != 0) || _la == MySQLParser::STORAGE

    || _la == MySQLParser::TABLESPACE) {
      setState(1994);
      partitionOption();
      setState(1999);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionOptionContext ------------------------------------------------------------------

MySQLParser::PartitionOptionContext::PartitionOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::PartitionOptionContext::getRuleIndex() const {
  return MySQLParser::RulePartitionOption;
}

void MySQLParser::PartitionOptionContext::copyFrom(PartitionOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PartitionOptionCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionCommentContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::PartitionOptionCommentContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::PartitionOptionCommentContext::PartitionOptionCommentContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionCommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionComment(this);
}
void MySQLParser::PartitionOptionCommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionComment(this);
}

antlrcpp::Any MySQLParser::PartitionOptionCommentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionComment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionOptionNodeGroupContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionNodeGroupContext::NODEGROUP() {
  return getToken(MySQLParser::NODEGROUP, 0);
}

MySQLParser::UidContext* MySQLParser::PartitionOptionNodeGroupContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::PartitionOptionNodeGroupContext::PartitionOptionNodeGroupContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionNodeGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionNodeGroup(this);
}
void MySQLParser::PartitionOptionNodeGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionNodeGroup(this);
}

antlrcpp::Any MySQLParser::PartitionOptionNodeGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionNodeGroup(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionOptionIndexDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionIndexDirectoryContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::PartitionOptionIndexDirectoryContext::DIRECTORY() {
  return getToken(MySQLParser::DIRECTORY, 0);
}

tree::TerminalNode* MySQLParser::PartitionOptionIndexDirectoryContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::PartitionOptionIndexDirectoryContext::PartitionOptionIndexDirectoryContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionIndexDirectoryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionIndexDirectory(this);
}
void MySQLParser::PartitionOptionIndexDirectoryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionIndexDirectory(this);
}

antlrcpp::Any MySQLParser::PartitionOptionIndexDirectoryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionIndexDirectory(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionOptionMaxRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionMaxRowsContext::MAX_ROWS() {
  return getToken(MySQLParser::MAX_ROWS, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::PartitionOptionMaxRowsContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::PartitionOptionMaxRowsContext::PartitionOptionMaxRowsContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionMaxRowsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionMaxRows(this);
}
void MySQLParser::PartitionOptionMaxRowsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionMaxRows(this);
}

antlrcpp::Any MySQLParser::PartitionOptionMaxRowsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionMaxRows(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionOptionTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionTablespaceContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::UidContext* MySQLParser::PartitionOptionTablespaceContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::PartitionOptionTablespaceContext::PartitionOptionTablespaceContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionTablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionTablespace(this);
}
void MySQLParser::PartitionOptionTablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionTablespace(this);
}

antlrcpp::Any MySQLParser::PartitionOptionTablespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionTablespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionOptionEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionEngineContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::PartitionOptionEngineContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

tree::TerminalNode* MySQLParser::PartitionOptionEngineContext::STORAGE() {
  return getToken(MySQLParser::STORAGE, 0);
}

MySQLParser::PartitionOptionEngineContext::PartitionOptionEngineContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionEngineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionEngine(this);
}
void MySQLParser::PartitionOptionEngineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionEngine(this);
}

antlrcpp::Any MySQLParser::PartitionOptionEngineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionEngine(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionOptionMinRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionMinRowsContext::MIN_ROWS() {
  return getToken(MySQLParser::MIN_ROWS, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::PartitionOptionMinRowsContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::PartitionOptionMinRowsContext::PartitionOptionMinRowsContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionMinRowsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionMinRows(this);
}
void MySQLParser::PartitionOptionMinRowsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionMinRows(this);
}

antlrcpp::Any MySQLParser::PartitionOptionMinRowsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionMinRows(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PartitionOptionDataDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PartitionOptionDataDirectoryContext::DATA() {
  return getToken(MySQLParser::DATA, 0);
}

tree::TerminalNode* MySQLParser::PartitionOptionDataDirectoryContext::DIRECTORY() {
  return getToken(MySQLParser::DIRECTORY, 0);
}

tree::TerminalNode* MySQLParser::PartitionOptionDataDirectoryContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::PartitionOptionDataDirectoryContext::PartitionOptionDataDirectoryContext(PartitionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PartitionOptionDataDirectoryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartitionOptionDataDirectory(this);
}
void MySQLParser::PartitionOptionDataDirectoryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartitionOptionDataDirectory(this);
}

antlrcpp::Any MySQLParser::PartitionOptionDataDirectoryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPartitionOptionDataDirectory(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::PartitionOptionContext* MySQLParser::partitionOption() {
  PartitionOptionContext *_localctx = _tracker.createInstance<PartitionOptionContext>(_ctx, getState());
  enterRule(_localctx, 110, MySQLParser::RulePartitionOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2045);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ENGINE:
      case MySQLParser::STORAGE: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionEngineContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(2001);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::STORAGE) {
          setState(2000);
          match(MySQLParser::STORAGE);
        }
        setState(2003);
        match(MySQLParser::ENGINE);
        setState(2005);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2004);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2007);
        engineName();
        break;
      }

      case MySQLParser::COMMENT: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionCommentContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(2008);
        match(MySQLParser::COMMENT);
        setState(2010);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2009);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2012);
        dynamic_cast<PartitionOptionCommentContext *>(_localctx)->comment = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::DATA: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionDataDirectoryContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(2013);
        match(MySQLParser::DATA);
        setState(2014);
        match(MySQLParser::DIRECTORY);
        setState(2016);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2015);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2018);
        dynamic_cast<PartitionOptionDataDirectoryContext *>(_localctx)->dataDirectory = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::INDEX: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionIndexDirectoryContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(2019);
        match(MySQLParser::INDEX);
        setState(2020);
        match(MySQLParser::DIRECTORY);
        setState(2022);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2021);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2024);
        dynamic_cast<PartitionOptionIndexDirectoryContext *>(_localctx)->indexDirectory = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::MAX_ROWS: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionMaxRowsContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(2025);
        match(MySQLParser::MAX_ROWS);
        setState(2027);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2026);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2029);
        dynamic_cast<PartitionOptionMaxRowsContext *>(_localctx)->maxRows = decimalLiteral();
        break;
      }

      case MySQLParser::MIN_ROWS: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionMinRowsContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(2030);
        match(MySQLParser::MIN_ROWS);
        setState(2032);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2031);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2034);
        dynamic_cast<PartitionOptionMinRowsContext *>(_localctx)->minRows = decimalLiteral();
        break;
      }

      case MySQLParser::TABLESPACE: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionTablespaceContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(2035);
        match(MySQLParser::TABLESPACE);
        setState(2037);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2036);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2039);
        dynamic_cast<PartitionOptionTablespaceContext *>(_localctx)->tablespace = uid();
        break;
      }

      case MySQLParser::NODEGROUP: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySQLParser::PartitionOptionNodeGroupContext>(_localctx));
        enterOuterAlt(_localctx, 8);
        setState(2040);
        match(MySQLParser::NODEGROUP);
        setState(2042);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::EQUAL_SYMBOL) {
          setState(2041);
          match(MySQLParser::EQUAL_SYMBOL);
        }
        setState(2044);
        dynamic_cast<PartitionOptionNodeGroupContext *>(_localctx)->nodegroup = uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterDatabaseContext ------------------------------------------------------------------

MySQLParser::AlterDatabaseContext::AlterDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::AlterDatabaseContext::getRuleIndex() const {
  return MySQLParser::RuleAlterDatabase;
}

void MySQLParser::AlterDatabaseContext::copyFrom(AlterDatabaseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterUpgradeNameContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterUpgradeNameContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

MySQLParser::UidContext* MySQLParser::AlterUpgradeNameContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AlterUpgradeNameContext::UPGRADE() {
  return getToken(MySQLParser::UPGRADE, 0);
}

tree::TerminalNode* MySQLParser::AlterUpgradeNameContext::DATA() {
  return getToken(MySQLParser::DATA, 0);
}

tree::TerminalNode* MySQLParser::AlterUpgradeNameContext::DIRECTORY() {
  return getToken(MySQLParser::DIRECTORY, 0);
}

tree::TerminalNode* MySQLParser::AlterUpgradeNameContext::NAME() {
  return getToken(MySQLParser::NAME, 0);
}

tree::TerminalNode* MySQLParser::AlterUpgradeNameContext::DATABASE() {
  return getToken(MySQLParser::DATABASE, 0);
}

tree::TerminalNode* MySQLParser::AlterUpgradeNameContext::SCHEMA() {
  return getToken(MySQLParser::SCHEMA, 0);
}

MySQLParser::AlterUpgradeNameContext::AlterUpgradeNameContext(AlterDatabaseContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterUpgradeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterUpgradeName(this);
}
void MySQLParser::AlterUpgradeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterUpgradeName(this);
}

antlrcpp::Any MySQLParser::AlterUpgradeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterUpgradeName(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterSimpleDatabaseContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterSimpleDatabaseContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterSimpleDatabaseContext::DATABASE() {
  return getToken(MySQLParser::DATABASE, 0);
}

tree::TerminalNode* MySQLParser::AlterSimpleDatabaseContext::SCHEMA() {
  return getToken(MySQLParser::SCHEMA, 0);
}

MySQLParser::UidContext* MySQLParser::AlterSimpleDatabaseContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

std::vector<MySQLParser::CreateDatabaseOptionContext *> MySQLParser::AlterSimpleDatabaseContext::createDatabaseOption() {
  return getRuleContexts<MySQLParser::CreateDatabaseOptionContext>();
}

MySQLParser::CreateDatabaseOptionContext* MySQLParser::AlterSimpleDatabaseContext::createDatabaseOption(size_t i) {
  return getRuleContext<MySQLParser::CreateDatabaseOptionContext>(i);
}

MySQLParser::AlterSimpleDatabaseContext::AlterSimpleDatabaseContext(AlterDatabaseContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterSimpleDatabaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterSimpleDatabase(this);
}
void MySQLParser::AlterSimpleDatabaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterSimpleDatabase(this);
}

antlrcpp::Any MySQLParser::AlterSimpleDatabaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterSimpleDatabase(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::AlterDatabaseContext* MySQLParser::alterDatabase() {
  AlterDatabaseContext *_localctx = _tracker.createInstance<AlterDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 112, MySQLParser::RuleAlterDatabase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2065);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AlterDatabaseContext *>(_tracker.createInstance<MySQLParser::AlterSimpleDatabaseContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2047);
      match(MySQLParser::ALTER);
      setState(2048);
      dynamic_cast<AlterSimpleDatabaseContext *>(_localctx)->dbFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DATABASE || _la == MySQLParser::SCHEMA)) {
        dynamic_cast<AlterSimpleDatabaseContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2050);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
      case 1: {
        setState(2049);
        uid();
        break;
      }

      }
      setState(2053); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2052);
        createDatabaseOption();
        setState(2055); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << MySQLParser::CHARACTER)
        | (1ULL << MySQLParser::COLLATE)
        | (1ULL << MySQLParser::DEFAULT))) != 0) || _la == MySQLParser::CHARSET);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AlterDatabaseContext *>(_tracker.createInstance<MySQLParser::AlterUpgradeNameContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2057);
      match(MySQLParser::ALTER);
      setState(2058);
      dynamic_cast<AlterUpgradeNameContext *>(_localctx)->dbFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DATABASE || _la == MySQLParser::SCHEMA)) {
        dynamic_cast<AlterUpgradeNameContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2059);
      uid();
      setState(2060);
      match(MySQLParser::UPGRADE);
      setState(2061);
      match(MySQLParser::DATA);
      setState(2062);
      match(MySQLParser::DIRECTORY);
      setState(2063);
      match(MySQLParser::NAME);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterEventContext ------------------------------------------------------------------

MySQLParser::AlterEventContext::AlterEventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterEventContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::EVENT() {
  return getToken(MySQLParser::EVENT, 0);
}

std::vector<MySQLParser::FullIdContext *> MySQLParser::AlterEventContext::fullId() {
  return getRuleContexts<MySQLParser::FullIdContext>();
}

MySQLParser::FullIdContext* MySQLParser::AlterEventContext::fullId(size_t i) {
  return getRuleContext<MySQLParser::FullIdContext>(i);
}

MySQLParser::OwnerStatementContext* MySQLParser::AlterEventContext::ownerStatement() {
  return getRuleContext<MySQLParser::OwnerStatementContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::AlterEventContext::ON() {
  return getTokens(MySQLParser::ON);
}

tree::TerminalNode* MySQLParser::AlterEventContext::ON(size_t i) {
  return getToken(MySQLParser::ON, i);
}

tree::TerminalNode* MySQLParser::AlterEventContext::SCHEDULE() {
  return getToken(MySQLParser::SCHEDULE, 0);
}

MySQLParser::ScheduleExpressionContext* MySQLParser::AlterEventContext::scheduleExpression() {
  return getRuleContext<MySQLParser::ScheduleExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::COMPLETION() {
  return getToken(MySQLParser::COMPLETION, 0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::PRESERVE() {
  return getToken(MySQLParser::PRESERVE, 0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::RENAME() {
  return getToken(MySQLParser::RENAME, 0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

MySQLParser::EnableTypeContext* MySQLParser::AlterEventContext::enableType() {
  return getRuleContext<MySQLParser::EnableTypeContext>(0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::DO() {
  return getToken(MySQLParser::DO, 0);
}

MySQLParser::RoutineBodyContext* MySQLParser::AlterEventContext::routineBody() {
  return getRuleContext<MySQLParser::RoutineBodyContext>(0);
}

tree::TerminalNode* MySQLParser::AlterEventContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}


size_t MySQLParser::AlterEventContext::getRuleIndex() const {
  return MySQLParser::RuleAlterEvent;
}

void MySQLParser::AlterEventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterEvent(this);
}

void MySQLParser::AlterEventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterEvent(this);
}


antlrcpp::Any MySQLParser::AlterEventContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterEvent(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterEventContext* MySQLParser::alterEvent() {
  AlterEventContext *_localctx = _tracker.createInstance<AlterEventContext>(_ctx, getState());
  enterRule(_localctx, 114, MySQLParser::RuleAlterEvent);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2067);
    match(MySQLParser::ALTER);
    setState(2069);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFINER) {
      setState(2068);
      ownerStatement();
    }
    setState(2071);
    match(MySQLParser::EVENT);
    setState(2072);
    fullId();
    setState(2076);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      setState(2073);
      match(MySQLParser::ON);
      setState(2074);
      match(MySQLParser::SCHEDULE);
      setState(2075);
      scheduleExpression();
      break;
    }

    }
    setState(2084);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ON) {
      setState(2078);
      match(MySQLParser::ON);
      setState(2079);
      match(MySQLParser::COMPLETION);
      setState(2081);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NOT) {
        setState(2080);
        match(MySQLParser::NOT);
      }
      setState(2083);
      match(MySQLParser::PRESERVE);
    }
    setState(2089);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      setState(2086);
      match(MySQLParser::RENAME);
      setState(2087);
      match(MySQLParser::TO);
      setState(2088);
      fullId();
      break;
    }

    }
    setState(2092);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DISABLE

    || _la == MySQLParser::ENABLE) {
      setState(2091);
      enableType();
    }
    setState(2096);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::COMMENT) {
      setState(2094);
      match(MySQLParser::COMMENT);
      setState(2095);
      match(MySQLParser::STRING_LITERAL);
    }
    setState(2100);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(2098);
      match(MySQLParser::DO);
      setState(2099);
      routineBody();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterFunctionContext ------------------------------------------------------------------

MySQLParser::AlterFunctionContext::AlterFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterFunctionContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterFunctionContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

MySQLParser::FullIdContext* MySQLParser::AlterFunctionContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

std::vector<MySQLParser::RoutineOptionContext *> MySQLParser::AlterFunctionContext::routineOption() {
  return getRuleContexts<MySQLParser::RoutineOptionContext>();
}

MySQLParser::RoutineOptionContext* MySQLParser::AlterFunctionContext::routineOption(size_t i) {
  return getRuleContext<MySQLParser::RoutineOptionContext>(i);
}


size_t MySQLParser::AlterFunctionContext::getRuleIndex() const {
  return MySQLParser::RuleAlterFunction;
}

void MySQLParser::AlterFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterFunction(this);
}

void MySQLParser::AlterFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterFunction(this);
}


antlrcpp::Any MySQLParser::AlterFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterFunction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterFunctionContext* MySQLParser::alterFunction() {
  AlterFunctionContext *_localctx = _tracker.createInstance<AlterFunctionContext>(_ctx, getState());
  enterRule(_localctx, 116, MySQLParser::RuleAlterFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2102);
    match(MySQLParser::ALTER);
    setState(2103);
    match(MySQLParser::FUNCTION);
    setState(2104);
    fullId();
    setState(2108);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::DETERMINISTIC || ((((_la - 97) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 97)) & ((1ULL << (MySQLParser::MODIFIES - 97))
      | (1ULL << (MySQLParser::NOT - 97))
      | (1ULL << (MySQLParser::READS - 97))
      | (1ULL << (MySQLParser::SQL - 97)))) != 0) || _la == MySQLParser::COMMENT

    || _la == MySQLParser::CONTAINS || _la == MySQLParser::LANGUAGE

    || _la == MySQLParser::NO) {
      setState(2105);
      routineOption();
      setState(2110);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterInstanceContext ------------------------------------------------------------------

MySQLParser::AlterInstanceContext::AlterInstanceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterInstanceContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterInstanceContext::INSTANCE() {
  return getToken(MySQLParser::INSTANCE, 0);
}

tree::TerminalNode* MySQLParser::AlterInstanceContext::ROTATE() {
  return getToken(MySQLParser::ROTATE, 0);
}

tree::TerminalNode* MySQLParser::AlterInstanceContext::INNODB() {
  return getToken(MySQLParser::INNODB, 0);
}

tree::TerminalNode* MySQLParser::AlterInstanceContext::MASTER() {
  return getToken(MySQLParser::MASTER, 0);
}

tree::TerminalNode* MySQLParser::AlterInstanceContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}


size_t MySQLParser::AlterInstanceContext::getRuleIndex() const {
  return MySQLParser::RuleAlterInstance;
}

void MySQLParser::AlterInstanceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterInstance(this);
}

void MySQLParser::AlterInstanceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterInstance(this);
}


antlrcpp::Any MySQLParser::AlterInstanceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterInstance(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterInstanceContext* MySQLParser::alterInstance() {
  AlterInstanceContext *_localctx = _tracker.createInstance<AlterInstanceContext>(_ctx, getState());
  enterRule(_localctx, 118, MySQLParser::RuleAlterInstance);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2111);
    match(MySQLParser::ALTER);
    setState(2112);
    match(MySQLParser::INSTANCE);
    setState(2113);
    match(MySQLParser::ROTATE);
    setState(2114);
    match(MySQLParser::INNODB);
    setState(2115);
    match(MySQLParser::MASTER);
    setState(2116);
    match(MySQLParser::KEY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterLogfileGroupContext ------------------------------------------------------------------

MySQLParser::AlterLogfileGroupContext::AlterLogfileGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::LOGFILE() {
  return getToken(MySQLParser::LOGFILE, 0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::GROUP() {
  return getToken(MySQLParser::GROUP, 0);
}

MySQLParser::UidContext* MySQLParser::AlterLogfileGroupContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::UNDOFILE() {
  return getToken(MySQLParser::UNDOFILE, 0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::AlterLogfileGroupContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::INITIAL_SIZE() {
  return getToken(MySQLParser::INITIAL_SIZE, 0);
}

MySQLParser::FileSizeLiteralContext* MySQLParser::AlterLogfileGroupContext::fileSizeLiteral() {
  return getRuleContext<MySQLParser::FileSizeLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::AlterLogfileGroupContext::WAIT() {
  return getToken(MySQLParser::WAIT, 0);
}


size_t MySQLParser::AlterLogfileGroupContext::getRuleIndex() const {
  return MySQLParser::RuleAlterLogfileGroup;
}

void MySQLParser::AlterLogfileGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterLogfileGroup(this);
}

void MySQLParser::AlterLogfileGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterLogfileGroup(this);
}


antlrcpp::Any MySQLParser::AlterLogfileGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterLogfileGroup(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterLogfileGroupContext* MySQLParser::alterLogfileGroup() {
  AlterLogfileGroupContext *_localctx = _tracker.createInstance<AlterLogfileGroupContext>(_ctx, getState());
  enterRule(_localctx, 120, MySQLParser::RuleAlterLogfileGroup);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2118);
    match(MySQLParser::ALTER);
    setState(2119);
    match(MySQLParser::LOGFILE);
    setState(2120);
    match(MySQLParser::GROUP);
    setState(2121);
    uid();
    setState(2122);
    match(MySQLParser::ADD);
    setState(2123);
    match(MySQLParser::UNDOFILE);
    setState(2124);
    match(MySQLParser::STRING_LITERAL);
    setState(2130);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::INITIAL_SIZE) {
      setState(2125);
      match(MySQLParser::INITIAL_SIZE);
      setState(2127);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(2126);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(2129);
      fileSizeLiteral();
    }
    setState(2133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WAIT) {
      setState(2132);
      match(MySQLParser::WAIT);
    }
    setState(2135);
    match(MySQLParser::ENGINE);
    setState(2137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EQUAL_SYMBOL) {
      setState(2136);
      match(MySQLParser::EQUAL_SYMBOL);
    }
    setState(2139);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterProcedureContext ------------------------------------------------------------------

MySQLParser::AlterProcedureContext::AlterProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterProcedureContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterProcedureContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

MySQLParser::FullIdContext* MySQLParser::AlterProcedureContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

std::vector<MySQLParser::RoutineOptionContext *> MySQLParser::AlterProcedureContext::routineOption() {
  return getRuleContexts<MySQLParser::RoutineOptionContext>();
}

MySQLParser::RoutineOptionContext* MySQLParser::AlterProcedureContext::routineOption(size_t i) {
  return getRuleContext<MySQLParser::RoutineOptionContext>(i);
}


size_t MySQLParser::AlterProcedureContext::getRuleIndex() const {
  return MySQLParser::RuleAlterProcedure;
}

void MySQLParser::AlterProcedureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterProcedure(this);
}

void MySQLParser::AlterProcedureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterProcedure(this);
}


antlrcpp::Any MySQLParser::AlterProcedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterProcedure(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterProcedureContext* MySQLParser::alterProcedure() {
  AlterProcedureContext *_localctx = _tracker.createInstance<AlterProcedureContext>(_ctx, getState());
  enterRule(_localctx, 122, MySQLParser::RuleAlterProcedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2141);
    match(MySQLParser::ALTER);
    setState(2142);
    match(MySQLParser::PROCEDURE);
    setState(2143);
    fullId();
    setState(2147);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::DETERMINISTIC || ((((_la - 97) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 97)) & ((1ULL << (MySQLParser::MODIFIES - 97))
      | (1ULL << (MySQLParser::NOT - 97))
      | (1ULL << (MySQLParser::READS - 97))
      | (1ULL << (MySQLParser::SQL - 97)))) != 0) || _la == MySQLParser::COMMENT

    || _la == MySQLParser::CONTAINS || _la == MySQLParser::LANGUAGE

    || _la == MySQLParser::NO) {
      setState(2144);
      routineOption();
      setState(2149);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterServerContext ------------------------------------------------------------------

MySQLParser::AlterServerContext::AlterServerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterServerContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterServerContext::SERVER() {
  return getToken(MySQLParser::SERVER, 0);
}

MySQLParser::UidContext* MySQLParser::AlterServerContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AlterServerContext::OPTIONS() {
  return getToken(MySQLParser::OPTIONS, 0);
}

std::vector<MySQLParser::ServerOptionContext *> MySQLParser::AlterServerContext::serverOption() {
  return getRuleContexts<MySQLParser::ServerOptionContext>();
}

MySQLParser::ServerOptionContext* MySQLParser::AlterServerContext::serverOption(size_t i) {
  return getRuleContext<MySQLParser::ServerOptionContext>(i);
}


size_t MySQLParser::AlterServerContext::getRuleIndex() const {
  return MySQLParser::RuleAlterServer;
}

void MySQLParser::AlterServerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterServer(this);
}

void MySQLParser::AlterServerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterServer(this);
}


antlrcpp::Any MySQLParser::AlterServerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterServer(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterServerContext* MySQLParser::alterServer() {
  AlterServerContext *_localctx = _tracker.createInstance<AlterServerContext>(_ctx, getState());
  enterRule(_localctx, 124, MySQLParser::RuleAlterServer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2150);
    match(MySQLParser::ALTER);
    setState(2151);
    match(MySQLParser::SERVER);
    setState(2152);
    uid();
    setState(2153);
    match(MySQLParser::OPTIONS);
    setState(2154);
    match(MySQLParser::LR_BRACKET);
    setState(2155);
    serverOption();
    setState(2160);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(2156);
      match(MySQLParser::COMMA);
      setState(2157);
      serverOption();
      setState(2162);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2163);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterTableContext ------------------------------------------------------------------

MySQLParser::AlterTableContext::AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterTableContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TableNameContext* MySQLParser::AlterTableContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::AlterTableContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

std::vector<MySQLParser::AlterSpecificationContext *> MySQLParser::AlterTableContext::alterSpecification() {
  return getRuleContexts<MySQLParser::AlterSpecificationContext>();
}

MySQLParser::AlterSpecificationContext* MySQLParser::AlterTableContext::alterSpecification(size_t i) {
  return getRuleContext<MySQLParser::AlterSpecificationContext>(i);
}

MySQLParser::PartitionDefinitionsContext* MySQLParser::AlterTableContext::partitionDefinitions() {
  return getRuleContext<MySQLParser::PartitionDefinitionsContext>(0);
}

tree::TerminalNode* MySQLParser::AlterTableContext::ONLINE() {
  return getToken(MySQLParser::ONLINE, 0);
}

tree::TerminalNode* MySQLParser::AlterTableContext::OFFLINE() {
  return getToken(MySQLParser::OFFLINE, 0);
}


size_t MySQLParser::AlterTableContext::getRuleIndex() const {
  return MySQLParser::RuleAlterTable;
}

void MySQLParser::AlterTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterTable(this);
}

void MySQLParser::AlterTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterTable(this);
}


antlrcpp::Any MySQLParser::AlterTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterTableContext* MySQLParser::alterTable() {
  AlterTableContext *_localctx = _tracker.createInstance<AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 126, MySQLParser::RuleAlterTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2165);
    match(MySQLParser::ALTER);
    setState(2167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::OFFLINE

    || _la == MySQLParser::ONLINE) {
      setState(2166);
      dynamic_cast<AlterTableContext *>(_localctx)->intimeAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::OFFLINE

      || _la == MySQLParser::ONLINE)) {
        dynamic_cast<AlterTableContext *>(_localctx)->intimeAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(2169);
      match(MySQLParser::IGNORE);
    }
    setState(2172);
    match(MySQLParser::TABLE);
    setState(2173);
    tableName();
    setState(2182);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      setState(2174);
      alterSpecification();
      setState(2179);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2175);
        match(MySQLParser::COMMA);
        setState(2176);
        alterSpecification();
        setState(2181);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
    setState(2185);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITION) {
      setState(2184);
      partitionDefinitions();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterTablespaceContext ------------------------------------------------------------------

MySQLParser::AlterTablespaceContext::AlterTablespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::UidContext* MySQLParser::AlterTablespaceContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::DATAFILE() {
  return getToken(MySQLParser::DATAFILE, 0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::AlterTablespaceContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::INITIAL_SIZE() {
  return getToken(MySQLParser::INITIAL_SIZE, 0);
}

MySQLParser::FileSizeLiteralContext* MySQLParser::AlterTablespaceContext::fileSizeLiteral() {
  return getRuleContext<MySQLParser::FileSizeLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::AlterTablespaceContext::WAIT() {
  return getToken(MySQLParser::WAIT, 0);
}


size_t MySQLParser::AlterTablespaceContext::getRuleIndex() const {
  return MySQLParser::RuleAlterTablespace;
}

void MySQLParser::AlterTablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterTablespace(this);
}

void MySQLParser::AlterTablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterTablespace(this);
}


antlrcpp::Any MySQLParser::AlterTablespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterTablespace(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterTablespaceContext* MySQLParser::alterTablespace() {
  AlterTablespaceContext *_localctx = _tracker.createInstance<AlterTablespaceContext>(_ctx, getState());
  enterRule(_localctx, 128, MySQLParser::RuleAlterTablespace);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2187);
    match(MySQLParser::ALTER);
    setState(2188);
    match(MySQLParser::TABLESPACE);
    setState(2189);
    uid();
    setState(2190);
    dynamic_cast<AlterTablespaceContext *>(_localctx)->objectAction = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::ADD

    || _la == MySQLParser::DROP)) {
      dynamic_cast<AlterTablespaceContext *>(_localctx)->objectAction = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2191);
    match(MySQLParser::DATAFILE);
    setState(2192);
    match(MySQLParser::STRING_LITERAL);
    setState(2196);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::INITIAL_SIZE) {
      setState(2193);
      match(MySQLParser::INITIAL_SIZE);
      setState(2194);
      match(MySQLParser::EQUAL_SYMBOL);
      setState(2195);
      fileSizeLiteral();
    }
    setState(2199);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WAIT) {
      setState(2198);
      match(MySQLParser::WAIT);
    }
    setState(2201);
    match(MySQLParser::ENGINE);
    setState(2203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EQUAL_SYMBOL) {
      setState(2202);
      match(MySQLParser::EQUAL_SYMBOL);
    }
    setState(2205);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterViewContext ------------------------------------------------------------------

MySQLParser::AlterViewContext::AlterViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AlterViewContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::VIEW() {
  return getToken(MySQLParser::VIEW, 0);
}

MySQLParser::FullIdContext* MySQLParser::AlterViewContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::SelectStatementContext* MySQLParser::AlterViewContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::ALGORITHM() {
  return getToken(MySQLParser::ALGORITHM, 0);
}

MySQLParser::OwnerStatementContext* MySQLParser::AlterViewContext::ownerStatement() {
  return getRuleContext<MySQLParser::OwnerStatementContext>(0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::SQL() {
  return getToken(MySQLParser::SQL, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::SECURITY() {
  return getToken(MySQLParser::SECURITY, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterViewContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::CHECK() {
  return getToken(MySQLParser::CHECK, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::OPTION() {
  return getToken(MySQLParser::OPTION, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::UNDEFINED() {
  return getToken(MySQLParser::UNDEFINED, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::MERGE() {
  return getToken(MySQLParser::MERGE, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::TEMPTABLE() {
  return getToken(MySQLParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::DEFINER() {
  return getToken(MySQLParser::DEFINER, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::INVOKER() {
  return getToken(MySQLParser::INVOKER, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::CASCADED() {
  return getToken(MySQLParser::CASCADED, 0);
}

tree::TerminalNode* MySQLParser::AlterViewContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}


size_t MySQLParser::AlterViewContext::getRuleIndex() const {
  return MySQLParser::RuleAlterView;
}

void MySQLParser::AlterViewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterView(this);
}

void MySQLParser::AlterViewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterView(this);
}


antlrcpp::Any MySQLParser::AlterViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterView(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AlterViewContext* MySQLParser::alterView() {
  AlterViewContext *_localctx = _tracker.createInstance<AlterViewContext>(_ctx, getState());
  enterRule(_localctx, 130, MySQLParser::RuleAlterView);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2207);
    match(MySQLParser::ALTER);
    setState(2211);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ALGORITHM) {
      setState(2208);
      match(MySQLParser::ALGORITHM);
      setState(2209);
      match(MySQLParser::EQUAL_SYMBOL);
      setState(2210);
      dynamic_cast<AlterViewContext *>(_localctx)->algType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::MERGE || _la == MySQLParser::TEMPTABLE

      || _la == MySQLParser::UNDEFINED)) {
        dynamic_cast<AlterViewContext *>(_localctx)->algType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFINER) {
      setState(2213);
      ownerStatement();
    }
    setState(2219);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::SQL) {
      setState(2216);
      match(MySQLParser::SQL);
      setState(2217);
      match(MySQLParser::SECURITY);
      setState(2218);
      dynamic_cast<AlterViewContext *>(_localctx)->secContext = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFINER

      || _la == MySQLParser::INVOKER)) {
        dynamic_cast<AlterViewContext *>(_localctx)->secContext = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2221);
    match(MySQLParser::VIEW);
    setState(2222);
    fullId();
    setState(2227);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LR_BRACKET) {
      setState(2223);
      match(MySQLParser::LR_BRACKET);
      setState(2224);
      uidList();
      setState(2225);
      match(MySQLParser::RR_BRACKET);
    }
    setState(2229);
    match(MySQLParser::AS);
    setState(2230);
    selectStatement();
    setState(2237);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WITH) {
      setState(2231);
      match(MySQLParser::WITH);
      setState(2233);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CASCADED || _la == MySQLParser::LOCAL) {
        setState(2232);
        dynamic_cast<AlterViewContext *>(_localctx)->checkOpt = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::CASCADED || _la == MySQLParser::LOCAL)) {
          dynamic_cast<AlterViewContext *>(_localctx)->checkOpt = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2235);
      match(MySQLParser::CHECK);
      setState(2236);
      match(MySQLParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterSpecificationContext ------------------------------------------------------------------

MySQLParser::AlterSpecificationContext::AlterSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::AlterSpecificationContext::getRuleIndex() const {
  return MySQLParser::RuleAlterSpecification;
}

void MySQLParser::AlterSpecificationContext::copyFrom(AlterSpecificationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterByDisableKeysContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDisableKeysContext::DISABLE() {
  return getToken(MySQLParser::DISABLE, 0);
}

tree::TerminalNode* MySQLParser::AlterByDisableKeysContext::KEYS() {
  return getToken(MySQLParser::KEYS, 0);
}

MySQLParser::AlterByDisableKeysContext::AlterByDisableKeysContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDisableKeysContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDisableKeys(this);
}
void MySQLParser::AlterByDisableKeysContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDisableKeys(this);
}

antlrcpp::Any MySQLParser::AlterByDisableKeysContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDisableKeys(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDefaultCharsetContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDefaultCharsetContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::AlterByDefaultCharsetContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::AlterByDefaultCharsetContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByDefaultCharsetContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

tree::TerminalNode* MySQLParser::AlterByDefaultCharsetContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::AlterByDefaultCharsetContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}

MySQLParser::AlterByDefaultCharsetContext::AlterByDefaultCharsetContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDefaultCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDefaultCharset(this);
}
void MySQLParser::AlterByDefaultCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDefaultCharset(this);
}

antlrcpp::Any MySQLParser::AlterByDefaultCharsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDefaultCharset(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByRenameColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByRenameColumnContext::RENAME() {
  return getToken(MySQLParser::RENAME, 0);
}

tree::TerminalNode* MySQLParser::AlterByRenameColumnContext::COLUMN() {
  return getToken(MySQLParser::COLUMN, 0);
}

tree::TerminalNode* MySQLParser::AlterByRenameColumnContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByRenameColumnContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByRenameColumnContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::AlterByRenameColumnContext::AlterByRenameColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByRenameColumnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByRenameColumn(this);
}
void MySQLParser::AlterByRenameColumnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByRenameColumn(this);
}

antlrcpp::Any MySQLParser::AlterByRenameColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByRenameColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByConvertCharsetContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByConvertCharsetContext::CONVERT() {
  return getToken(MySQLParser::CONVERT, 0);
}

tree::TerminalNode* MySQLParser::AlterByConvertCharsetContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

tree::TerminalNode* MySQLParser::AlterByConvertCharsetContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::AlterByConvertCharsetContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::AlterByConvertCharsetContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByConvertCharsetContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::AlterByConvertCharsetContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}

MySQLParser::AlterByConvertCharsetContext::AlterByConvertCharsetContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByConvertCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByConvertCharset(this);
}
void MySQLParser::AlterByConvertCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByConvertCharset(this);
}

antlrcpp::Any MySQLParser::AlterByConvertCharsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByConvertCharset(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddPartitionContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddPartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

std::vector<MySQLParser::PartitionDefinitionContext *> MySQLParser::AlterByAddPartitionContext::partitionDefinition() {
  return getRuleContexts<MySQLParser::PartitionDefinitionContext>();
}

MySQLParser::PartitionDefinitionContext* MySQLParser::AlterByAddPartitionContext::partitionDefinition(size_t i) {
  return getRuleContext<MySQLParser::PartitionDefinitionContext>(i);
}

MySQLParser::AlterByAddPartitionContext::AlterByAddPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddPartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddPartition(this);
}
void MySQLParser::AlterByAddPartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddPartition(this);
}

antlrcpp::Any MySQLParser::AlterByAddPartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddPartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddForeignKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddForeignKeyContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddForeignKeyContext::FOREIGN() {
  return getToken(MySQLParser::FOREIGN, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddForeignKeyContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::AlterByAddForeignKeyContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

MySQLParser::ReferenceDefinitionContext* MySQLParser::AlterByAddForeignKeyContext::referenceDefinition() {
  return getRuleContext<MySQLParser::ReferenceDefinitionContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAddForeignKeyContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByAddForeignKeyContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByAddForeignKeyContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::AlterByAddForeignKeyContext::AlterByAddForeignKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddForeignKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddForeignKey(this);
}
void MySQLParser::AlterByAddForeignKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddForeignKey(this);
}

antlrcpp::Any MySQLParser::AlterByAddForeignKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddForeignKey(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByRenameIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByRenameIndexContext::RENAME() {
  return getToken(MySQLParser::RENAME, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByRenameIndexContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByRenameIndexContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

tree::TerminalNode* MySQLParser::AlterByRenameIndexContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

tree::TerminalNode* MySQLParser::AlterByRenameIndexContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::AlterByRenameIndexContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::AlterByRenameIndexContext::AlterByRenameIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByRenameIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByRenameIndex(this);
}
void MySQLParser::AlterByRenameIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByRenameIndex(this);
}

antlrcpp::Any MySQLParser::AlterByRenameIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByRenameIndex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByRemovePartitioningContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByRemovePartitioningContext::REMOVE() {
  return getToken(MySQLParser::REMOVE, 0);
}

tree::TerminalNode* MySQLParser::AlterByRemovePartitioningContext::PARTITIONING() {
  return getToken(MySQLParser::PARTITIONING, 0);
}

MySQLParser::AlterByRemovePartitioningContext::AlterByRemovePartitioningContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByRemovePartitioningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByRemovePartitioning(this);
}
void MySQLParser::AlterByRemovePartitioningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByRemovePartitioning(this);
}

antlrcpp::Any MySQLParser::AlterByRemovePartitioningContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByRemovePartitioning(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByRenameContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByRenameContext::RENAME() {
  return getToken(MySQLParser::RENAME, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByRenameContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::FullIdContext* MySQLParser::AlterByRenameContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByRenameContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

tree::TerminalNode* MySQLParser::AlterByRenameContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::AlterByRenameContext::AlterByRenameContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByRenameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByRename(this);
}
void MySQLParser::AlterByRenameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByRename(this);
}

antlrcpp::Any MySQLParser::AlterByRenameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByRename(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByOptimizePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByOptimizePartitionContext::OPTIMIZE() {
  return getToken(MySQLParser::OPTIMIZE, 0);
}

tree::TerminalNode* MySQLParser::AlterByOptimizePartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByOptimizePartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByOptimizePartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByOptimizePartitionContext::AlterByOptimizePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByOptimizePartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByOptimizePartition(this);
}
void MySQLParser::AlterByOptimizePartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByOptimizePartition(this);
}

antlrcpp::Any MySQLParser::AlterByOptimizePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByOptimizePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByImportTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByImportTablespaceContext::IMPORT() {
  return getToken(MySQLParser::IMPORT, 0);
}

tree::TerminalNode* MySQLParser::AlterByImportTablespaceContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::AlterByImportTablespaceContext::AlterByImportTablespaceContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByImportTablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByImportTablespace(this);
}
void MySQLParser::AlterByImportTablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByImportTablespace(this);
}

antlrcpp::Any MySQLParser::AlterByImportTablespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByImportTablespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByCoalescePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByCoalescePartitionContext::COALESCE() {
  return getToken(MySQLParser::COALESCE, 0);
}

tree::TerminalNode* MySQLParser::AlterByCoalescePartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::AlterByCoalescePartitionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::AlterByCoalescePartitionContext::AlterByCoalescePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByCoalescePartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByCoalescePartition(this);
}
void MySQLParser::AlterByCoalescePartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByCoalescePartition(this);
}

antlrcpp::Any MySQLParser::AlterByCoalescePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByCoalescePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddColumnsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddColumnsContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByAddColumnsContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByAddColumnsContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

std::vector<MySQLParser::ColumnDefinitionContext *> MySQLParser::AlterByAddColumnsContext::columnDefinition() {
  return getRuleContexts<MySQLParser::ColumnDefinitionContext>();
}

MySQLParser::ColumnDefinitionContext* MySQLParser::AlterByAddColumnsContext::columnDefinition(size_t i) {
  return getRuleContext<MySQLParser::ColumnDefinitionContext>(i);
}

tree::TerminalNode* MySQLParser::AlterByAddColumnsContext::COLUMN() {
  return getToken(MySQLParser::COLUMN, 0);
}

MySQLParser::AlterByAddColumnsContext::AlterByAddColumnsContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddColumnsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddColumns(this);
}
void MySQLParser::AlterByAddColumnsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddColumns(this);
}

antlrcpp::Any MySQLParser::AlterByAddColumnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddColumns(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDropForeignKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDropForeignKeyContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::AlterByDropForeignKeyContext::FOREIGN() {
  return getToken(MySQLParser::FOREIGN, 0);
}

tree::TerminalNode* MySQLParser::AlterByDropForeignKeyContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByDropForeignKeyContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::AlterByDropForeignKeyContext::AlterByDropForeignKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDropForeignKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDropForeignKey(this);
}
void MySQLParser::AlterByDropForeignKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDropForeignKey(this);
}

antlrcpp::Any MySQLParser::AlterByDropForeignKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDropForeignKey(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddCheckTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddCheckTableConstraintContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddCheckTableConstraintContext::CHECK() {
  return getToken(MySQLParser::CHECK, 0);
}

MySQLParser::ExpressionContext* MySQLParser::AlterByAddCheckTableConstraintContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAddCheckTableConstraintContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByAddCheckTableConstraintContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::AlterByAddCheckTableConstraintContext::AlterByAddCheckTableConstraintContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddCheckTableConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddCheckTableConstraint(this);
}
void MySQLParser::AlterByAddCheckTableConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddCheckTableConstraint(this);
}

antlrcpp::Any MySQLParser::AlterByAddCheckTableConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddCheckTableConstraint(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByRebuildPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByRebuildPartitionContext::REBUILD() {
  return getToken(MySQLParser::REBUILD, 0);
}

tree::TerminalNode* MySQLParser::AlterByRebuildPartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByRebuildPartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByRebuildPartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByRebuildPartitionContext::AlterByRebuildPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByRebuildPartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByRebuildPartition(this);
}
void MySQLParser::AlterByRebuildPartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByRebuildPartition(this);
}

antlrcpp::Any MySQLParser::AlterByRebuildPartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByRebuildPartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByUpgradePartitioningContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByUpgradePartitioningContext::UPGRADE() {
  return getToken(MySQLParser::UPGRADE, 0);
}

tree::TerminalNode* MySQLParser::AlterByUpgradePartitioningContext::PARTITIONING() {
  return getToken(MySQLParser::PARTITIONING, 0);
}

MySQLParser::AlterByUpgradePartitioningContext::AlterByUpgradePartitioningContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByUpgradePartitioningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByUpgradePartitioning(this);
}
void MySQLParser::AlterByUpgradePartitioningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByUpgradePartitioning(this);
}

antlrcpp::Any MySQLParser::AlterByUpgradePartitioningContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByUpgradePartitioning(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByRepairPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByRepairPartitionContext::REPAIR() {
  return getToken(MySQLParser::REPAIR, 0);
}

tree::TerminalNode* MySQLParser::AlterByRepairPartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByRepairPartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByRepairPartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByRepairPartitionContext::AlterByRepairPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByRepairPartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByRepairPartition(this);
}
void MySQLParser::AlterByRepairPartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByRepairPartition(this);
}

antlrcpp::Any MySQLParser::AlterByRepairPartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByRepairPartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByExchangePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByExchangePartitionContext::EXCHANGE() {
  return getToken(MySQLParser::EXCHANGE, 0);
}

tree::TerminalNode* MySQLParser::AlterByExchangePartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByExchangePartitionContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::AlterByExchangePartitionContext::WITH() {
  return getTokens(MySQLParser::WITH);
}

tree::TerminalNode* MySQLParser::AlterByExchangePartitionContext::WITH(size_t i) {
  return getToken(MySQLParser::WITH, i);
}

tree::TerminalNode* MySQLParser::AlterByExchangePartitionContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TableNameContext* MySQLParser::AlterByExchangePartitionContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByExchangePartitionContext::VALIDATION() {
  return getToken(MySQLParser::VALIDATION, 0);
}

tree::TerminalNode* MySQLParser::AlterByExchangePartitionContext::WITHOUT() {
  return getToken(MySQLParser::WITHOUT, 0);
}

MySQLParser::AlterByExchangePartitionContext::AlterByExchangePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByExchangePartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByExchangePartition(this);
}
void MySQLParser::AlterByExchangePartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByExchangePartition(this);
}

antlrcpp::Any MySQLParser::AlterByExchangePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByExchangePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddIndexContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::AlterByAddIndexContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAddIndexContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddIndexContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByAddIndexContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::IndexTypeContext* MySQLParser::AlterByAddIndexContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::AlterByAddIndexContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::AlterByAddIndexContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

MySQLParser::AlterByAddIndexContext::AlterByAddIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddIndex(this);
}
void MySQLParser::AlterByAddIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddIndex(this);
}

antlrcpp::Any MySQLParser::AlterByAddIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddIndex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDropColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDropColumnContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByDropColumnContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByDropColumnContext::COLUMN() {
  return getToken(MySQLParser::COLUMN, 0);
}

tree::TerminalNode* MySQLParser::AlterByDropColumnContext::RESTRICT() {
  return getToken(MySQLParser::RESTRICT, 0);
}

MySQLParser::AlterByDropColumnContext::AlterByDropColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDropColumnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDropColumn(this);
}
void MySQLParser::AlterByDropColumnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDropColumn(this);
}

antlrcpp::Any MySQLParser::AlterByDropColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDropColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByImportPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByImportPartitionContext::IMPORT() {
  return getToken(MySQLParser::IMPORT, 0);
}

tree::TerminalNode* MySQLParser::AlterByImportPartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

tree::TerminalNode* MySQLParser::AlterByImportPartitionContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByImportPartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByImportPartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByImportPartitionContext::AlterByImportPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByImportPartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByImportPartition(this);
}
void MySQLParser::AlterByImportPartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByImportPartition(this);
}

antlrcpp::Any MySQLParser::AlterByImportPartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByImportPartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByChangeDefaultContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByChangeDefaultContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByChangeDefaultContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByChangeDefaultContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::AlterByChangeDefaultContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::DefaultValueContext* MySQLParser::AlterByChangeDefaultContext::defaultValue() {
  return getRuleContext<MySQLParser::DefaultValueContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByChangeDefaultContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::AlterByChangeDefaultContext::COLUMN() {
  return getToken(MySQLParser::COLUMN, 0);
}

MySQLParser::AlterByChangeDefaultContext::AlterByChangeDefaultContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByChangeDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByChangeDefault(this);
}
void MySQLParser::AlterByChangeDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByChangeDefault(this);
}

antlrcpp::Any MySQLParser::AlterByChangeDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByChangeDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByForceContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByForceContext::FORCE() {
  return getToken(MySQLParser::FORCE, 0);
}

MySQLParser::AlterByForceContext::AlterByForceContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByForceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByForce(this);
}
void MySQLParser::AlterByForceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByForce(this);
}

antlrcpp::Any MySQLParser::AlterByForceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByForce(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDropPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDropPartitionContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::AlterByDropPartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByDropPartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::AlterByDropPartitionContext::AlterByDropPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDropPartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDropPartition(this);
}
void MySQLParser::AlterByDropPartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDropPartition(this);
}

antlrcpp::Any MySQLParser::AlterByDropPartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDropPartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddSpecialIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddSpecialIndexContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::AlterByAddSpecialIndexContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAddSpecialIndexContext::FULLTEXT() {
  return getToken(MySQLParser::FULLTEXT, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddSpecialIndexContext::SPATIAL() {
  return getToken(MySQLParser::SPATIAL, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByAddSpecialIndexContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::AlterByAddSpecialIndexContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::AlterByAddSpecialIndexContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

tree::TerminalNode* MySQLParser::AlterByAddSpecialIndexContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddSpecialIndexContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::AlterByAddSpecialIndexContext::AlterByAddSpecialIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddSpecialIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddSpecialIndex(this);
}
void MySQLParser::AlterByAddSpecialIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddSpecialIndex(this);
}

antlrcpp::Any MySQLParser::AlterByAddSpecialIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddSpecialIndex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByModifyColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByModifyColumnContext::MODIFY() {
  return getToken(MySQLParser::MODIFY, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByModifyColumnContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByModifyColumnContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::ColumnDefinitionContext* MySQLParser::AlterByModifyColumnContext::columnDefinition() {
  return getRuleContext<MySQLParser::ColumnDefinitionContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByModifyColumnContext::COLUMN() {
  return getToken(MySQLParser::COLUMN, 0);
}

tree::TerminalNode* MySQLParser::AlterByModifyColumnContext::FIRST() {
  return getToken(MySQLParser::FIRST, 0);
}

tree::TerminalNode* MySQLParser::AlterByModifyColumnContext::AFTER() {
  return getToken(MySQLParser::AFTER, 0);
}

MySQLParser::AlterByModifyColumnContext::AlterByModifyColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByModifyColumnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByModifyColumn(this);
}
void MySQLParser::AlterByModifyColumnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByModifyColumn(this);
}

antlrcpp::Any MySQLParser::AlterByModifyColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByModifyColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByTableOptionContext ------------------------------------------------------------------

std::vector<MySQLParser::TableOptionContext *> MySQLParser::AlterByTableOptionContext::tableOption() {
  return getRuleContexts<MySQLParser::TableOptionContext>();
}

MySQLParser::TableOptionContext* MySQLParser::AlterByTableOptionContext::tableOption(size_t i) {
  return getRuleContext<MySQLParser::TableOptionContext>(i);
}

MySQLParser::AlterByTableOptionContext::AlterByTableOptionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByTableOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByTableOption(this);
}
void MySQLParser::AlterByTableOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByTableOption(this);
}

antlrcpp::Any MySQLParser::AlterByTableOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByTableOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDropPrimaryKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDropPrimaryKeyContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::AlterByDropPrimaryKeyContext::PRIMARY() {
  return getToken(MySQLParser::PRIMARY, 0);
}

tree::TerminalNode* MySQLParser::AlterByDropPrimaryKeyContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::AlterByDropPrimaryKeyContext::AlterByDropPrimaryKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDropPrimaryKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDropPrimaryKey(this);
}
void MySQLParser::AlterByDropPrimaryKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDropPrimaryKey(this);
}

antlrcpp::Any MySQLParser::AlterByDropPrimaryKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDropPrimaryKey(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByLockContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByLockContext::LOCK() {
  return getToken(MySQLParser::LOCK, 0);
}

tree::TerminalNode* MySQLParser::AlterByLockContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

tree::TerminalNode* MySQLParser::AlterByLockContext::NONE() {
  return getToken(MySQLParser::NONE, 0);
}

tree::TerminalNode* MySQLParser::AlterByLockContext::SHARED() {
  return getToken(MySQLParser::SHARED, 0);
}

tree::TerminalNode* MySQLParser::AlterByLockContext::EXCLUSIVE() {
  return getToken(MySQLParser::EXCLUSIVE, 0);
}

MySQLParser::AlterByLockContext::AlterByLockContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByLockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByLock(this);
}
void MySQLParser::AlterByLockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByLock(this);
}

antlrcpp::Any MySQLParser::AlterByLockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByLock(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDiscardPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDiscardPartitionContext::DISCARD() {
  return getToken(MySQLParser::DISCARD, 0);
}

tree::TerminalNode* MySQLParser::AlterByDiscardPartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

tree::TerminalNode* MySQLParser::AlterByDiscardPartitionContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByDiscardPartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByDiscardPartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByDiscardPartitionContext::AlterByDiscardPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDiscardPartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDiscardPartition(this);
}
void MySQLParser::AlterByDiscardPartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDiscardPartition(this);
}

antlrcpp::Any MySQLParser::AlterByDiscardPartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDiscardPartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDiscardTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDiscardTablespaceContext::DISCARD() {
  return getToken(MySQLParser::DISCARD, 0);
}

tree::TerminalNode* MySQLParser::AlterByDiscardTablespaceContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::AlterByDiscardTablespaceContext::AlterByDiscardTablespaceContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDiscardTablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDiscardTablespace(this);
}
void MySQLParser::AlterByDiscardTablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDiscardTablespace(this);
}

antlrcpp::Any MySQLParser::AlterByDiscardTablespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDiscardTablespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByValidateContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByValidateContext::VALIDATION() {
  return getToken(MySQLParser::VALIDATION, 0);
}

tree::TerminalNode* MySQLParser::AlterByValidateContext::WITHOUT() {
  return getToken(MySQLParser::WITHOUT, 0);
}

tree::TerminalNode* MySQLParser::AlterByValidateContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

MySQLParser::AlterByValidateContext::AlterByValidateContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByValidateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByValidate(this);
}
void MySQLParser::AlterByValidateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByValidate(this);
}

antlrcpp::Any MySQLParser::AlterByValidateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByValidate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddPrimaryKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddPrimaryKeyContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddPrimaryKeyContext::PRIMARY() {
  return getToken(MySQLParser::PRIMARY, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddPrimaryKeyContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::AlterByAddPrimaryKeyContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAddPrimaryKeyContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

MySQLParser::IndexTypeContext* MySQLParser::AlterByAddPrimaryKeyContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::AlterByAddPrimaryKeyContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::AlterByAddPrimaryKeyContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

MySQLParser::UidContext* MySQLParser::AlterByAddPrimaryKeyContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::AlterByAddPrimaryKeyContext::AlterByAddPrimaryKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddPrimaryKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddPrimaryKey(this);
}
void MySQLParser::AlterByAddPrimaryKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddPrimaryKey(this);
}

antlrcpp::Any MySQLParser::AlterByAddPrimaryKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddPrimaryKey(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByCheckPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByCheckPartitionContext::CHECK() {
  return getToken(MySQLParser::CHECK, 0);
}

tree::TerminalNode* MySQLParser::AlterByCheckPartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByCheckPartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByCheckPartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByCheckPartitionContext::AlterByCheckPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByCheckPartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByCheckPartition(this);
}
void MySQLParser::AlterByCheckPartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByCheckPartition(this);
}

antlrcpp::Any MySQLParser::AlterByCheckPartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByCheckPartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByEnableKeysContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByEnableKeysContext::ENABLE() {
  return getToken(MySQLParser::ENABLE, 0);
}

tree::TerminalNode* MySQLParser::AlterByEnableKeysContext::KEYS() {
  return getToken(MySQLParser::KEYS, 0);
}

MySQLParser::AlterByEnableKeysContext::AlterByEnableKeysContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByEnableKeysContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByEnableKeys(this);
}
void MySQLParser::AlterByEnableKeysContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByEnableKeys(this);
}

antlrcpp::Any MySQLParser::AlterByEnableKeysContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByEnableKeys(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByReorganizePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByReorganizePartitionContext::REORGANIZE() {
  return getToken(MySQLParser::REORGANIZE, 0);
}

tree::TerminalNode* MySQLParser::AlterByReorganizePartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByReorganizePartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByReorganizePartitionContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

std::vector<MySQLParser::PartitionDefinitionContext *> MySQLParser::AlterByReorganizePartitionContext::partitionDefinition() {
  return getRuleContexts<MySQLParser::PartitionDefinitionContext>();
}

MySQLParser::PartitionDefinitionContext* MySQLParser::AlterByReorganizePartitionContext::partitionDefinition(size_t i) {
  return getRuleContext<MySQLParser::PartitionDefinitionContext>(i);
}

MySQLParser::AlterByReorganizePartitionContext::AlterByReorganizePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByReorganizePartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByReorganizePartition(this);
}
void MySQLParser::AlterByReorganizePartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByReorganizePartition(this);
}

antlrcpp::Any MySQLParser::AlterByReorganizePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByReorganizePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterBySetAlgorithmContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterBySetAlgorithmContext::ALGORITHM() {
  return getToken(MySQLParser::ALGORITHM, 0);
}

tree::TerminalNode* MySQLParser::AlterBySetAlgorithmContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

tree::TerminalNode* MySQLParser::AlterBySetAlgorithmContext::INPLACE() {
  return getToken(MySQLParser::INPLACE, 0);
}

tree::TerminalNode* MySQLParser::AlterBySetAlgorithmContext::COPY() {
  return getToken(MySQLParser::COPY, 0);
}

MySQLParser::AlterBySetAlgorithmContext::AlterBySetAlgorithmContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterBySetAlgorithmContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterBySetAlgorithm(this);
}
void MySQLParser::AlterBySetAlgorithmContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterBySetAlgorithm(this);
}

antlrcpp::Any MySQLParser::AlterBySetAlgorithmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterBySetAlgorithm(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAnalyzePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAnalyzePartitionContext::ANALYZE() {
  return getToken(MySQLParser::ANALYZE, 0);
}

tree::TerminalNode* MySQLParser::AlterByAnalyzePartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByAnalyzePartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAnalyzePartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByAnalyzePartitionContext::AlterByAnalyzePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAnalyzePartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAnalyzePartition(this);
}
void MySQLParser::AlterByAnalyzePartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAnalyzePartition(this);
}

antlrcpp::Any MySQLParser::AlterByAnalyzePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAnalyzePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByChangeColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByChangeColumnContext::CHANGE() {
  return getToken(MySQLParser::CHANGE, 0);
}

MySQLParser::ColumnDefinitionContext* MySQLParser::AlterByChangeColumnContext::columnDefinition() {
  return getRuleContext<MySQLParser::ColumnDefinitionContext>(0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByChangeColumnContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByChangeColumnContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

tree::TerminalNode* MySQLParser::AlterByChangeColumnContext::COLUMN() {
  return getToken(MySQLParser::COLUMN, 0);
}

tree::TerminalNode* MySQLParser::AlterByChangeColumnContext::FIRST() {
  return getToken(MySQLParser::FIRST, 0);
}

tree::TerminalNode* MySQLParser::AlterByChangeColumnContext::AFTER() {
  return getToken(MySQLParser::AFTER, 0);
}

MySQLParser::AlterByChangeColumnContext::AlterByChangeColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByChangeColumnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByChangeColumn(this);
}
void MySQLParser::AlterByChangeColumnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByChangeColumn(this);
}

antlrcpp::Any MySQLParser::AlterByChangeColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByChangeColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddUniqueKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddUniqueKeyContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddUniqueKeyContext::UNIQUE() {
  return getToken(MySQLParser::UNIQUE, 0);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::AlterByAddUniqueKeyContext::indexColumnNames() {
  return getRuleContext<MySQLParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAddUniqueKeyContext::CONSTRAINT() {
  return getToken(MySQLParser::CONSTRAINT, 0);
}

MySQLParser::IndexTypeContext* MySQLParser::AlterByAddUniqueKeyContext::indexType() {
  return getRuleContext<MySQLParser::IndexTypeContext>(0);
}

std::vector<MySQLParser::IndexOptionContext *> MySQLParser::AlterByAddUniqueKeyContext::indexOption() {
  return getRuleContexts<MySQLParser::IndexOptionContext>();
}

MySQLParser::IndexOptionContext* MySQLParser::AlterByAddUniqueKeyContext::indexOption(size_t i) {
  return getRuleContext<MySQLParser::IndexOptionContext>(i);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByAddUniqueKeyContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByAddUniqueKeyContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

tree::TerminalNode* MySQLParser::AlterByAddUniqueKeyContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddUniqueKeyContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::AlterByAddUniqueKeyContext::AlterByAddUniqueKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddUniqueKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddUniqueKey(this);
}
void MySQLParser::AlterByAddUniqueKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddUniqueKey(this);
}

antlrcpp::Any MySQLParser::AlterByAddUniqueKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddUniqueKey(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByTruncatePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByTruncatePartitionContext::TRUNCATE() {
  return getToken(MySQLParser::TRUNCATE, 0);
}

tree::TerminalNode* MySQLParser::AlterByTruncatePartitionContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByTruncatePartitionContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByTruncatePartitionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::AlterByTruncatePartitionContext::AlterByTruncatePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByTruncatePartitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByTruncatePartition(this);
}
void MySQLParser::AlterByTruncatePartitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByTruncatePartition(this);
}

antlrcpp::Any MySQLParser::AlterByTruncatePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByTruncatePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByDropIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByDropIndexContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

MySQLParser::UidContext* MySQLParser::AlterByDropIndexContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByDropIndexContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::AlterByDropIndexContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

MySQLParser::AlterByDropIndexContext::AlterByDropIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByDropIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByDropIndex(this);
}
void MySQLParser::AlterByDropIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByDropIndex(this);
}

antlrcpp::Any MySQLParser::AlterByDropIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByDropIndex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByAddColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByAddColumnContext::ADD() {
  return getToken(MySQLParser::ADD, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::AlterByAddColumnContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::AlterByAddColumnContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::ColumnDefinitionContext* MySQLParser::AlterByAddColumnContext::columnDefinition() {
  return getRuleContext<MySQLParser::ColumnDefinitionContext>(0);
}

tree::TerminalNode* MySQLParser::AlterByAddColumnContext::COLUMN() {
  return getToken(MySQLParser::COLUMN, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddColumnContext::FIRST() {
  return getToken(MySQLParser::FIRST, 0);
}

tree::TerminalNode* MySQLParser::AlterByAddColumnContext::AFTER() {
  return getToken(MySQLParser::AFTER, 0);
}

MySQLParser::AlterByAddColumnContext::AlterByAddColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByAddColumnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByAddColumn(this);
}
void MySQLParser::AlterByAddColumnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByAddColumn(this);
}

antlrcpp::Any MySQLParser::AlterByAddColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByAddColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterByOrderContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterByOrderContext::ORDER() {
  return getToken(MySQLParser::ORDER, 0);
}

tree::TerminalNode* MySQLParser::AlterByOrderContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

MySQLParser::UidListContext* MySQLParser::AlterByOrderContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::AlterByOrderContext::AlterByOrderContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterByOrderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterByOrder(this);
}
void MySQLParser::AlterByOrderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterByOrder(this);
}

antlrcpp::Any MySQLParser::AlterByOrderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterByOrder(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::AlterSpecificationContext* MySQLParser::alterSpecification() {
  AlterSpecificationContext *_localctx = _tracker.createInstance<AlterSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 132, MySQLParser::RuleAlterSpecification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(2594);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByTableOptionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2239);
      tableOption();
      setState(2246);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2241);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::COMMA) {
            setState(2240);
            match(MySQLParser::COMMA);
          }
          setState(2243);
          tableOption(); 
        }
        setState(2248);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddColumnContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2249);
      match(MySQLParser::ADD);
      setState(2251);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLUMN) {
        setState(2250);
        match(MySQLParser::COLUMN);
      }
      setState(2253);
      uid();
      setState(2254);
      columnDefinition();
      setState(2258);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::FIRST: {
          setState(2255);
          match(MySQLParser::FIRST);
          break;
        }

        case MySQLParser::AFTER: {
          setState(2256);
          match(MySQLParser::AFTER);
          setState(2257);
          uid();
          break;
        }

        case MySQLParser::EOF:
        case MySQLParser::ALTER:
        case MySQLParser::ANALYZE:
        case MySQLParser::CALL:
        case MySQLParser::CHANGE:
        case MySQLParser::CHECK:
        case MySQLParser::CREATE:
        case MySQLParser::DELETE:
        case MySQLParser::DESC:
        case MySQLParser::DESCRIBE:
        case MySQLParser::DROP:
        case MySQLParser::EXPLAIN:
        case MySQLParser::GRANT:
        case MySQLParser::INSERT:
        case MySQLParser::KILL:
        case MySQLParser::LOAD:
        case MySQLParser::LOCK:
        case MySQLParser::OPTIMIZE:
        case MySQLParser::PARTITION:
        case MySQLParser::PURGE:
        case MySQLParser::RELEASE:
        case MySQLParser::RENAME:
        case MySQLParser::REPLACE:
        case MySQLParser::REVOKE:
        case MySQLParser::SELECT:
        case MySQLParser::SET:
        case MySQLParser::SHOW:
        case MySQLParser::UNLOCK:
        case MySQLParser::UPDATE:
        case MySQLParser::USE:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::CACHE:
        case MySQLParser::CHECKSUM:
        case MySQLParser::COMMIT:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DO:
        case MySQLParser::FLUSH:
        case MySQLParser::HANDLER:
        case MySQLParser::HELP:
        case MySQLParser::INSTALL:
        case MySQLParser::PREPARE:
        case MySQLParser::REPAIR:
        case MySQLParser::RESET:
        case MySQLParser::ROLLBACK:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::START:
        case MySQLParser::STOP:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::XA:
        case MySQLParser::EXECUTE:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::MINUSMINUS:
        case MySQLParser::LR_BRACKET:
        case MySQLParser::COMMA:
        case MySQLParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddColumnsContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2260);
      match(MySQLParser::ADD);
      setState(2262);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLUMN) {
        setState(2261);
        match(MySQLParser::COLUMN);
      }
      setState(2264);
      match(MySQLParser::LR_BRACKET);
      setState(2265);
      uid();
      setState(2266);
      columnDefinition();
      setState(2273);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2267);
        match(MySQLParser::COMMA);
        setState(2268);
        uid();
        setState(2269);
        columnDefinition();
        setState(2275);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2276);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddIndexContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2278);
      match(MySQLParser::ADD);
      setState(2279);
      dynamic_cast<AlterByAddIndexContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY)) {
        dynamic_cast<AlterByAddIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2281);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::TIMESTAMP - 184))
        | (1ULL << (MySQLParser::DATETIME - 184))
        | (1ULL << (MySQLParser::YEAR - 184))
        | (1ULL << (MySQLParser::TEXT - 184))
        | (1ULL << (MySQLParser::ENUM - 184))
        | (1ULL << (MySQLParser::SERIAL - 184))
        | (1ULL << (MySQLParser::COUNT - 184))
        | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
        | (1ULL << (MySQLParser::ACTION - 252))
        | (1ULL << (MySQLParser::AFTER - 252))
        | (1ULL << (MySQLParser::AGGREGATE - 252))
        | (1ULL << (MySQLParser::ALGORITHM - 252))
        | (1ULL << (MySQLParser::ANY - 252))
        | (1ULL << (MySQLParser::AT - 252))
        | (1ULL << (MySQLParser::AUTHORS - 252))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
        | (1ULL << (MySQLParser::BEGIN - 252))
        | (1ULL << (MySQLParser::BINLOG - 252))
        | (1ULL << (MySQLParser::BIT - 252))
        | (1ULL << (MySQLParser::BLOCK - 252))
        | (1ULL << (MySQLParser::BOOL - 252))
        | (1ULL << (MySQLParser::BOOLEAN - 252))
        | (1ULL << (MySQLParser::BTREE - 252))
        | (1ULL << (MySQLParser::CACHE - 252))
        | (1ULL << (MySQLParser::CASCADED - 252))
        | (1ULL << (MySQLParser::CHAIN - 252))
        | (1ULL << (MySQLParser::CHANGED - 252))
        | (1ULL << (MySQLParser::CHANNEL - 252))
        | (1ULL << (MySQLParser::CHECKSUM - 252))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
        | (1ULL << (MySQLParser::CIPHER - 252))
        | (1ULL << (MySQLParser::CLIENT - 252))
        | (1ULL << (MySQLParser::CLOSE - 252))
        | (1ULL << (MySQLParser::COALESCE - 252))
        | (1ULL << (MySQLParser::CODE - 252))
        | (1ULL << (MySQLParser::COLUMNS - 252))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
        | (1ULL << (MySQLParser::COMMENT - 252))
        | (1ULL << (MySQLParser::COMMIT - 252))
        | (1ULL << (MySQLParser::COMPACT - 252))
        | (1ULL << (MySQLParser::COMPLETION - 252))
        | (1ULL << (MySQLParser::COMPRESSED - 252))
        | (1ULL << (MySQLParser::COMPRESSION - 252))
        | (1ULL << (MySQLParser::CONCURRENT - 252))
        | (1ULL << (MySQLParser::CONNECTION - 252))
        | (1ULL << (MySQLParser::CONSISTENT - 252))
        | (1ULL << (MySQLParser::CONTAINS - 252))
        | (1ULL << (MySQLParser::CONTEXT - 252))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
        | (1ULL << (MySQLParser::COPY - 252))
        | (1ULL << (MySQLParser::CPU - 252))
        | (1ULL << (MySQLParser::DATA - 252))
        | (1ULL << (MySQLParser::DATAFILE - 252))
        | (1ULL << (MySQLParser::DEALLOCATE - 252))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
        | (1ULL << (MySQLParser::DEFINER - 252))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
        | (1ULL << (MySQLParser::DIRECTORY - 252))
        | (1ULL << (MySQLParser::DISABLE - 252))
        | (1ULL << (MySQLParser::DISCARD - 252))
        | (1ULL << (MySQLParser::DISK - 252))
        | (1ULL << (MySQLParser::DO - 252))
        | (1ULL << (MySQLParser::DUMPFILE - 252))
        | (1ULL << (MySQLParser::DUPLICATE - 252))
        | (1ULL << (MySQLParser::DYNAMIC - 252))
        | (1ULL << (MySQLParser::ENABLE - 252))
        | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
        | (1ULL << (MySQLParser::ENDS - 316))
        | (1ULL << (MySQLParser::ENGINE - 316))
        | (1ULL << (MySQLParser::ENGINES - 316))
        | (1ULL << (MySQLParser::ERROR - 316))
        | (1ULL << (MySQLParser::ERRORS - 316))
        | (1ULL << (MySQLParser::ESCAPE - 316))
        | (1ULL << (MySQLParser::EVEN - 316))
        | (1ULL << (MySQLParser::EVENT - 316))
        | (1ULL << (MySQLParser::EVENTS - 316))
        | (1ULL << (MySQLParser::EVERY - 316))
        | (1ULL << (MySQLParser::EXCHANGE - 316))
        | (1ULL << (MySQLParser::EXCLUSIVE - 316))
        | (1ULL << (MySQLParser::EXPIRE - 316))
        | (1ULL << (MySQLParser::EXPORT - 316))
        | (1ULL << (MySQLParser::EXTENDED - 316))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
        | (1ULL << (MySQLParser::FAST - 316))
        | (1ULL << (MySQLParser::FAULTS - 316))
        | (1ULL << (MySQLParser::FIELDS - 316))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::FILTER - 316))
        | (1ULL << (MySQLParser::FIRST - 316))
        | (1ULL << (MySQLParser::FIXED - 316))
        | (1ULL << (MySQLParser::FLUSH - 316))
        | (1ULL << (MySQLParser::FOLLOWS - 316))
        | (1ULL << (MySQLParser::FOUND - 316))
        | (1ULL << (MySQLParser::FULL - 316))
        | (1ULL << (MySQLParser::FUNCTION - 316))
        | (1ULL << (MySQLParser::GENERAL - 316))
        | (1ULL << (MySQLParser::GLOBAL - 316))
        | (1ULL << (MySQLParser::GRANTS - 316))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
        | (1ULL << (MySQLParser::HANDLER - 316))
        | (1ULL << (MySQLParser::HASH - 316))
        | (1ULL << (MySQLParser::HELP - 316))
        | (1ULL << (MySQLParser::HOST - 316))
        | (1ULL << (MySQLParser::HOSTS - 316))
        | (1ULL << (MySQLParser::IDENTIFIED - 316))
        | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
        | (1ULL << (MySQLParser::IMPORT - 316))
        | (1ULL << (MySQLParser::INDEXES - 316))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
        | (1ULL << (MySQLParser::INPLACE - 316))
        | (1ULL << (MySQLParser::INSERT_METHOD - 316))
        | (1ULL << (MySQLParser::INSTALL - 316))
        | (1ULL << (MySQLParser::INSTANCE - 316))
        | (1ULL << (MySQLParser::INVISIBLE - 316))
        | (1ULL << (MySQLParser::INVOKER - 316))
        | (1ULL << (MySQLParser::IO - 316))
        | (1ULL << (MySQLParser::IO_THREAD - 316))
        | (1ULL << (MySQLParser::IPC - 316))
        | (1ULL << (MySQLParser::ISOLATION - 316))
        | (1ULL << (MySQLParser::ISSUER - 316))
        | (1ULL << (MySQLParser::JSON - 316))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::LANGUAGE - 316))
        | (1ULL << (MySQLParser::LAST - 316))
        | (1ULL << (MySQLParser::LEAVES - 316))
        | (1ULL << (MySQLParser::LESS - 316))
        | (1ULL << (MySQLParser::LEVEL - 316))
        | (1ULL << (MySQLParser::LIST - 316))
        | (1ULL << (MySQLParser::LOCAL - 316))
        | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
        | (1ULL << (MySQLParser::MASTER - 380))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
        | (1ULL << (MySQLParser::MASTER_DELAY - 380))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
        | (1ULL << (MySQLParser::MASTER_HOST - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
        | (1ULL << (MySQLParser::MASTER_PORT - 380))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
        | (1ULL << (MySQLParser::MASTER_USER - 380))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_ROWS - 380))
        | (1ULL << (MySQLParser::MAX_SIZE - 380))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
        | (1ULL << (MySQLParser::MEDIUM - 380))
        | (1ULL << (MySQLParser::MERGE - 380))
        | (1ULL << (MySQLParser::MID - 380))
        | (1ULL << (MySQLParser::MIGRATE - 380))
        | (1ULL << (MySQLParser::MIN_ROWS - 380))
        | (1ULL << (MySQLParser::MODE - 380))
        | (1ULL << (MySQLParser::MODIFY - 380))
        | (1ULL << (MySQLParser::MUTEX - 380))
        | (1ULL << (MySQLParser::MYSQL - 380))
        | (1ULL << (MySQLParser::NAME - 380))
        | (1ULL << (MySQLParser::NAMES - 380))
        | (1ULL << (MySQLParser::NCHAR - 380))
        | (1ULL << (MySQLParser::NEVER - 380))
        | (1ULL << (MySQLParser::NEXT - 380))
        | (1ULL << (MySQLParser::NO - 380))
        | (1ULL << (MySQLParser::NODEGROUP - 380))
        | (1ULL << (MySQLParser::NONE - 380))
        | (1ULL << (MySQLParser::OFFLINE - 380))
        | (1ULL << (MySQLParser::OFFSET - 380))
        | (1ULL << (MySQLParser::OJ - 380))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
        | (1ULL << (MySQLParser::ONE - 380))
        | (1ULL << (MySQLParser::ONLINE - 380))
        | (1ULL << (MySQLParser::ONLY - 380))
        | (1ULL << (MySQLParser::OPEN - 380))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
        | (1ULL << (MySQLParser::OPTIONS - 380))
        | (1ULL << (MySQLParser::OWNER - 380))
        | (1ULL << (MySQLParser::PACK_KEYS - 380))
        | (1ULL << (MySQLParser::PAGE - 380))
        | (1ULL << (MySQLParser::PARSER - 380))
        | (1ULL << (MySQLParser::PARTIAL - 380))
        | (1ULL << (MySQLParser::PARTITIONING - 380))
        | (1ULL << (MySQLParser::PARTITIONS - 380))
        | (1ULL << (MySQLParser::PASSWORD - 380))
        | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
        | (1ULL << (MySQLParser::PLUGINS - 444))
        | (1ULL << (MySQLParser::PORT - 444))
        | (1ULL << (MySQLParser::PRECEDES - 444))
        | (1ULL << (MySQLParser::PREPARE - 444))
        | (1ULL << (MySQLParser::PRESERVE - 444))
        | (1ULL << (MySQLParser::PREV - 444))
        | (1ULL << (MySQLParser::PROCESSLIST - 444))
        | (1ULL << (MySQLParser::PROFILE - 444))
        | (1ULL << (MySQLParser::PROFILES - 444))
        | (1ULL << (MySQLParser::PROXY - 444))
        | (1ULL << (MySQLParser::QUERY - 444))
        | (1ULL << (MySQLParser::QUICK - 444))
        | (1ULL << (MySQLParser::REBUILD - 444))
        | (1ULL << (MySQLParser::RECOVER - 444))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
        | (1ULL << (MySQLParser::REDUNDANT - 444))
        | (1ULL << (MySQLParser::RELAY - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
        | (1ULL << (MySQLParser::RELAYLOG - 444))
        | (1ULL << (MySQLParser::REMOVE - 444))
        | (1ULL << (MySQLParser::REORGANIZE - 444))
        | (1ULL << (MySQLParser::REPAIR - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATION - 444))
        | (1ULL << (MySQLParser::RESET - 444))
        | (1ULL << (MySQLParser::RESUME - 444))
        | (1ULL << (MySQLParser::RETURNS - 444))
        | (1ULL << (MySQLParser::ROLLBACK - 444))
        | (1ULL << (MySQLParser::ROLLUP - 444))
        | (1ULL << (MySQLParser::ROTATE - 444))
        | (1ULL << (MySQLParser::ROW - 444))
        | (1ULL << (MySQLParser::ROWS - 444))
        | (1ULL << (MySQLParser::ROW_FORMAT - 444))
        | (1ULL << (MySQLParser::SAVEPOINT - 444))
        | (1ULL << (MySQLParser::SCHEDULE - 444))
        | (1ULL << (MySQLParser::SECURITY - 444))
        | (1ULL << (MySQLParser::SERVER - 444))
        | (1ULL << (MySQLParser::SESSION - 444))
        | (1ULL << (MySQLParser::SHARE - 444))
        | (1ULL << (MySQLParser::SHARED - 444))
        | (1ULL << (MySQLParser::SIGNED - 444))
        | (1ULL << (MySQLParser::SIMPLE - 444))
        | (1ULL << (MySQLParser::SLAVE - 444))
        | (1ULL << (MySQLParser::SLOW - 444))
        | (1ULL << (MySQLParser::SNAPSHOT - 444))
        | (1ULL << (MySQLParser::SOCKET - 444))
        | (1ULL << (MySQLParser::SOME - 444))
        | (1ULL << (MySQLParser::SONAME - 444))
        | (1ULL << (MySQLParser::SOUNDS - 444))
        | (1ULL << (MySQLParser::SOURCE - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
        | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
        | (1ULL << (MySQLParser::SQL_THREAD - 508))
        | (1ULL << (MySQLParser::START - 508))
        | (1ULL << (MySQLParser::STARTS - 508))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
        | (1ULL << (MySQLParser::STATUS - 508))
        | (1ULL << (MySQLParser::STOP - 508))
        | (1ULL << (MySQLParser::STORAGE - 508))
        | (1ULL << (MySQLParser::STRING - 508))
        | (1ULL << (MySQLParser::SUBJECT - 508))
        | (1ULL << (MySQLParser::SUBPARTITION - 508))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
        | (1ULL << (MySQLParser::SUSPEND - 508))
        | (1ULL << (MySQLParser::SWAPS - 508))
        | (1ULL << (MySQLParser::SWITCHES - 508))
        | (1ULL << (MySQLParser::TABLESPACE - 508))
        | (1ULL << (MySQLParser::TEMPORARY - 508))
        | (1ULL << (MySQLParser::TEMPTABLE - 508))
        | (1ULL << (MySQLParser::THAN - 508))
        | (1ULL << (MySQLParser::TRADITIONAL - 508))
        | (1ULL << (MySQLParser::TRANSACTION - 508))
        | (1ULL << (MySQLParser::TRIGGERS - 508))
        | (1ULL << (MySQLParser::TRUNCATE - 508))
        | (1ULL << (MySQLParser::UNDEFINED - 508))
        | (1ULL << (MySQLParser::UNDOFILE - 508))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
        | (1ULL << (MySQLParser::UNINSTALL - 508))
        | (1ULL << (MySQLParser::UNKNOWN - 508))
        | (1ULL << (MySQLParser::UNTIL - 508))
        | (1ULL << (MySQLParser::UPGRADE - 508))
        | (1ULL << (MySQLParser::USER - 508))
        | (1ULL << (MySQLParser::USE_FRM - 508))
        | (1ULL << (MySQLParser::USER_RESOURCES - 508))
        | (1ULL << (MySQLParser::VALIDATION - 508))
        | (1ULL << (MySQLParser::VALUE - 508))
        | (1ULL << (MySQLParser::VARIABLES - 508))
        | (1ULL << (MySQLParser::VIEW - 508))
        | (1ULL << (MySQLParser::VISIBLE - 508))
        | (1ULL << (MySQLParser::WAIT - 508))
        | (1ULL << (MySQLParser::WARNINGS - 508))
        | (1ULL << (MySQLParser::WITHOUT - 508))
        | (1ULL << (MySQLParser::WORK - 508))
        | (1ULL << (MySQLParser::WRAPPER - 508))
        | (1ULL << (MySQLParser::X509 - 508))
        | (1ULL << (MySQLParser::XA - 508))
        | (1ULL << (MySQLParser::XML - 508))
        | (1ULL << (MySQLParser::INTERNAL - 508))
        | (1ULL << (MySQLParser::QUARTER - 508))
        | (1ULL << (MySQLParser::MONTH - 508))
        | (1ULL << (MySQLParser::DAY - 508))
        | (1ULL << (MySQLParser::HOUR - 508))
        | (1ULL << (MySQLParser::MINUTE - 508))
        | (1ULL << (MySQLParser::WEEK - 508))
        | (1ULL << (MySQLParser::SECOND - 508))
        | (1ULL << (MySQLParser::MICROSECOND - 508))
        | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
        | (1ULL << (MySQLParser::EXECUTE - 572))
        | (1ULL << (MySQLParser::FILE - 572))
        | (1ULL << (MySQLParser::PROCESS - 572))
        | (1ULL << (MySQLParser::RELOAD - 572))
        | (1ULL << (MySQLParser::SHUTDOWN - 572))
        | (1ULL << (MySQLParser::SUPER - 572))
        | (1ULL << (MySQLParser::PRIVILEGES - 572))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
        | (1ULL << (MySQLParser::ARMSCII8 - 572))
        | (1ULL << (MySQLParser::ASCII - 572))
        | (1ULL << (MySQLParser::BIG5 - 572))
        | (1ULL << (MySQLParser::CP1250 - 572))
        | (1ULL << (MySQLParser::CP1251 - 572))
        | (1ULL << (MySQLParser::CP1256 - 572))
        | (1ULL << (MySQLParser::CP1257 - 572))
        | (1ULL << (MySQLParser::CP850 - 572))
        | (1ULL << (MySQLParser::CP852 - 572))
        | (1ULL << (MySQLParser::CP866 - 572))
        | (1ULL << (MySQLParser::CP932 - 572))
        | (1ULL << (MySQLParser::DEC8 - 572))
        | (1ULL << (MySQLParser::EUCJPMS - 572))
        | (1ULL << (MySQLParser::EUCKR - 572))
        | (1ULL << (MySQLParser::GB2312 - 572))
        | (1ULL << (MySQLParser::GBK - 572))
        | (1ULL << (MySQLParser::GEOSTD8 - 572))
        | (1ULL << (MySQLParser::GREEK - 572))
        | (1ULL << (MySQLParser::HEBREW - 572))
        | (1ULL << (MySQLParser::HP8 - 572))
        | (1ULL << (MySQLParser::KEYBCS2 - 572))
        | (1ULL << (MySQLParser::KOI8R - 572))
        | (1ULL << (MySQLParser::KOI8U - 572))
        | (1ULL << (MySQLParser::LATIN1 - 572))
        | (1ULL << (MySQLParser::LATIN2 - 572))
        | (1ULL << (MySQLParser::LATIN5 - 572))
        | (1ULL << (MySQLParser::LATIN7 - 572))
        | (1ULL << (MySQLParser::MACCE - 572))
        | (1ULL << (MySQLParser::MACROMAN - 572))
        | (1ULL << (MySQLParser::SJIS - 572))
        | (1ULL << (MySQLParser::SWE7 - 572))
        | (1ULL << (MySQLParser::TIS620 - 572))
        | (1ULL << (MySQLParser::UCS2 - 572))
        | (1ULL << (MySQLParser::UJIS - 572))
        | (1ULL << (MySQLParser::UTF16 - 572))
        | (1ULL << (MySQLParser::UTF16LE - 572))
        | (1ULL << (MySQLParser::UTF32 - 572))
        | (1ULL << (MySQLParser::UTF8 - 572))
        | (1ULL << (MySQLParser::UTF8MB3 - 572))
        | (1ULL << (MySQLParser::UTF8MB4 - 572))
        | (1ULL << (MySQLParser::ARCHIVE - 572))
        | (1ULL << (MySQLParser::BLACKHOLE - 572))
        | (1ULL << (MySQLParser::CSV - 572))
        | (1ULL << (MySQLParser::FEDERATED - 572))
        | (1ULL << (MySQLParser::INNODB - 572))
        | (1ULL << (MySQLParser::MEMORY - 572))
        | (1ULL << (MySQLParser::MRG_MYISAM - 572))
        | (1ULL << (MySQLParser::MYISAM - 572))
        | (1ULL << (MySQLParser::NDB - 572))
        | (1ULL << (MySQLParser::NDBCLUSTER - 572))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
        | (1ULL << (MySQLParser::TOKUDB - 572))
        | (1ULL << (MySQLParser::REPEATABLE - 572))
        | (1ULL << (MySQLParser::COMMITTED - 572))
        | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
        | (1ULL << (MySQLParser::LINESTRING - 636))
        | (1ULL << (MySQLParser::MULTILINESTRING - 636))
        | (1ULL << (MySQLParser::MULTIPOINT - 636))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
        | (1ULL << (MySQLParser::POINT - 636))
        | (1ULL << (MySQLParser::POLYGON - 636))
        | (1ULL << (MySQLParser::ABS - 636))
        | (1ULL << (MySQLParser::ACOS - 636))
        | (1ULL << (MySQLParser::ADDDATE - 636))
        | (1ULL << (MySQLParser::ADDTIME - 636))
        | (1ULL << (MySQLParser::AES_DECRYPT - 636))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
        | (1ULL << (MySQLParser::AREA - 636))
        | (1ULL << (MySQLParser::ASBINARY - 636))
        | (1ULL << (MySQLParser::ASIN - 636))
        | (1ULL << (MySQLParser::ASTEXT - 636))
        | (1ULL << (MySQLParser::ASWKB - 636))
        | (1ULL << (MySQLParser::ASWKT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
        | (1ULL << (MySQLParser::ATAN - 636))
        | (1ULL << (MySQLParser::ATAN2 - 636))
        | (1ULL << (MySQLParser::BENCHMARK - 636))
        | (1ULL << (MySQLParser::BIN - 636))
        | (1ULL << (MySQLParser::BIT_COUNT - 636))
        | (1ULL << (MySQLParser::BIT_LENGTH - 636))
        | (1ULL << (MySQLParser::BUFFER - 636))
        | (1ULL << (MySQLParser::CEIL - 636))
        | (1ULL << (MySQLParser::CEILING - 636))
        | (1ULL << (MySQLParser::CENTROID - 636))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
        | (1ULL << (MySQLParser::CHARSET - 636))
        | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
        | (1ULL << (MySQLParser::COERCIBILITY - 636))
        | (1ULL << (MySQLParser::COLLATION - 636))
        | (1ULL << (MySQLParser::COMPRESS - 636))
        | (1ULL << (MySQLParser::CONCAT - 636))
        | (1ULL << (MySQLParser::CONCAT_WS - 636))
        | (1ULL << (MySQLParser::CONNECTION_ID - 636))
        | (1ULL << (MySQLParser::CONV - 636))
        | (1ULL << (MySQLParser::CONVERT_TZ - 636))
        | (1ULL << (MySQLParser::COS - 636))
        | (1ULL << (MySQLParser::COT - 636))
        | (1ULL << (MySQLParser::CRC32 - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
        | (1ULL << (MySQLParser::CROSSES - 636))
        | (1ULL << (MySQLParser::DATEDIFF - 636))
        | (1ULL << (MySQLParser::DATE_FORMAT - 636))
        | (1ULL << (MySQLParser::DAYNAME - 636))
        | (1ULL << (MySQLParser::DAYOFMONTH - 636))
        | (1ULL << (MySQLParser::DAYOFWEEK - 636))
        | (1ULL << (MySQLParser::DAYOFYEAR - 636))
        | (1ULL << (MySQLParser::DECODE - 636))
        | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
        | (1ULL << (MySQLParser::DIMENSION - 700))
        | (1ULL << (MySQLParser::DISJOINT - 700))
        | (1ULL << (MySQLParser::ELT - 700))
        | (1ULL << (MySQLParser::ENCODE - 700))
        | (1ULL << (MySQLParser::ENCRYPT - 700))
        | (1ULL << (MySQLParser::ENDPOINT - 700))
        | (1ULL << (MySQLParser::ENVELOPE - 700))
        | (1ULL << (MySQLParser::EQUALS - 700))
        | (1ULL << (MySQLParser::EXP - 700))
        | (1ULL << (MySQLParser::EXPORT_SET - 700))
        | (1ULL << (MySQLParser::EXTERIORRING - 700))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
        | (1ULL << (MySQLParser::FIELD - 700))
        | (1ULL << (MySQLParser::FIND_IN_SET - 700))
        | (1ULL << (MySQLParser::FLOOR - 700))
        | (1ULL << (MySQLParser::FORMAT - 700))
        | (1ULL << (MySQLParser::FOUND_ROWS - 700))
        | (1ULL << (MySQLParser::FROM_BASE64 - 700))
        | (1ULL << (MySQLParser::FROM_DAYS - 700))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYN - 700))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
        | (1ULL << (MySQLParser::GET_FORMAT - 700))
        | (1ULL << (MySQLParser::GET_LOCK - 700))
        | (1ULL << (MySQLParser::GLENGTH - 700))
        | (1ULL << (MySQLParser::GREATEST - 700))
        | (1ULL << (MySQLParser::GTID_SUBSET - 700))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
        | (1ULL << (MySQLParser::HEX - 700))
        | (1ULL << (MySQLParser::IFNULL - 700))
        | (1ULL << (MySQLParser::INET6_ATON - 700))
        | (1ULL << (MySQLParser::INET6_NTOA - 700))
        | (1ULL << (MySQLParser::INET_ATON - 700))
        | (1ULL << (MySQLParser::INET_NTOA - 700))
        | (1ULL << (MySQLParser::INSTR - 700))
        | (1ULL << (MySQLParser::INTERIORRINGN - 700))
        | (1ULL << (MySQLParser::INTERSECTS - 700))
        | (1ULL << (MySQLParser::ISCLOSED - 700))
        | (1ULL << (MySQLParser::ISEMPTY - 700))
        | (1ULL << (MySQLParser::ISNULL - 700))
        | (1ULL << (MySQLParser::ISSIMPLE - 700))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
        | (1ULL << (MySQLParser::IS_IPV4 - 700))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
        | (1ULL << (MySQLParser::IS_IPV6 - 700))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
        | (1ULL << (MySQLParser::LCASE - 700))
        | (1ULL << (MySQLParser::LEAST - 700))
        | (1ULL << (MySQLParser::LENGTH - 700))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
        | (1ULL << (MySQLParser::LINEFROMWKB - 700))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::LN - 764))
        | (1ULL << (MySQLParser::LOAD_FILE - 764))
        | (1ULL << (MySQLParser::LOCATE - 764))
        | (1ULL << (MySQLParser::LOG - 764))
        | (1ULL << (MySQLParser::LOG10 - 764))
        | (1ULL << (MySQLParser::LOG2 - 764))
        | (1ULL << (MySQLParser::LOWER - 764))
        | (1ULL << (MySQLParser::LPAD - 764))
        | (1ULL << (MySQLParser::LTRIM - 764))
        | (1ULL << (MySQLParser::MAKEDATE - 764))
        | (1ULL << (MySQLParser::MAKETIME - 764))
        | (1ULL << (MySQLParser::MAKE_SET - 764))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
        | (1ULL << (MySQLParser::MBRCONTAINS - 764))
        | (1ULL << (MySQLParser::MBRDISJOINT - 764))
        | (1ULL << (MySQLParser::MBREQUAL - 764))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
        | (1ULL << (MySQLParser::MBROVERLAPS - 764))
        | (1ULL << (MySQLParser::MBRTOUCHES - 764))
        | (1ULL << (MySQLParser::MBRWITHIN - 764))
        | (1ULL << (MySQLParser::MD5 - 764))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
        | (1ULL << (MySQLParser::MONTHNAME - 764))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::NAME_CONST - 764))
        | (1ULL << (MySQLParser::NULLIF - 764))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
        | (1ULL << (MySQLParser::NUMPOINTS - 764))
        | (1ULL << (MySQLParser::OCT - 764))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
        | (1ULL << (MySQLParser::ORD - 764))
        | (1ULL << (MySQLParser::OVERLAPS - 764))
        | (1ULL << (MySQLParser::PERIOD_ADD - 764))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
        | (1ULL << (MySQLParser::PI - 764))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::POINTFROMWKB - 764))
        | (1ULL << (MySQLParser::POINTN - 764))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYFROMWKB - 764))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::POW - 764))
        | (1ULL << (MySQLParser::POWER - 764))
        | (1ULL << (MySQLParser::QUOTE - 764))
        | (1ULL << (MySQLParser::RADIANS - 764))
        | (1ULL << (MySQLParser::RAND - 764))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
        | (1ULL << (MySQLParser::REVERSE - 764))
        | (1ULL << (MySQLParser::ROUND - 764))
        | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
        | (1ULL << (MySQLParser::RTRIM - 828))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
        | (1ULL << (MySQLParser::SESSION_USER - 828))
        | (1ULL << (MySQLParser::SHA - 828))
        | (1ULL << (MySQLParser::SHA1 - 828))
        | (1ULL << (MySQLParser::SHA2 - 828))
        | (1ULL << (MySQLParser::SIGN - 828))
        | (1ULL << (MySQLParser::SIN - 828))
        | (1ULL << (MySQLParser::SLEEP - 828))
        | (1ULL << (MySQLParser::SOUNDEX - 828))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
        | (1ULL << (MySQLParser::SQRT - 828))
        | (1ULL << (MySQLParser::SRID - 828))
        | (1ULL << (MySQLParser::STARTPOINT - 828))
        | (1ULL << (MySQLParser::STRCMP - 828))
        | (1ULL << (MySQLParser::STR_TO_DATE - 828))
        | (1ULL << (MySQLParser::ST_AREA - 828))
        | (1ULL << (MySQLParser::ST_ASBINARY - 828))
        | (1ULL << (MySQLParser::ST_ASTEXT - 828))
        | (1ULL << (MySQLParser::ST_ASWKB - 828))
        | (1ULL << (MySQLParser::ST_ASWKT - 828))
        | (1ULL << (MySQLParser::ST_BUFFER - 828))
        | (1ULL << (MySQLParser::ST_CENTROID - 828))
        | (1ULL << (MySQLParser::ST_CONTAINS - 828))
        | (1ULL << (MySQLParser::ST_CROSSES - 828))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
        | (1ULL << (MySQLParser::ST_DIMENSION - 828))
        | (1ULL << (MySQLParser::ST_DISJOINT - 828))
        | (1ULL << (MySQLParser::ST_DISTANCE - 828))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
        | (1ULL << (MySQLParser::ST_EQUALS - 828))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_POINTN - 828))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_SRID - 892))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
        | (1ULL << (MySQLParser::ST_TOUCHES - 892))
        | (1ULL << (MySQLParser::ST_UNION - 892))
        | (1ULL << (MySQLParser::ST_WITHIN - 892))
        | (1ULL << (MySQLParser::ST_X - 892))
        | (1ULL << (MySQLParser::ST_Y - 892))
        | (1ULL << (MySQLParser::SUBDATE - 892))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
        | (1ULL << (MySQLParser::SUBTIME - 892))
        | (1ULL << (MySQLParser::SYSTEM_USER - 892))
        | (1ULL << (MySQLParser::TAN - 892))
        | (1ULL << (MySQLParser::TIMEDIFF - 892))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
        | (1ULL << (MySQLParser::TIME_FORMAT - 892))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
        | (1ULL << (MySQLParser::TOUCHES - 892))
        | (1ULL << (MySQLParser::TO_BASE64 - 892))
        | (1ULL << (MySQLParser::TO_DAYS - 892))
        | (1ULL << (MySQLParser::TO_SECONDS - 892))
        | (1ULL << (MySQLParser::UCASE - 892))
        | (1ULL << (MySQLParser::UNCOMPRESS - 892))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
        | (1ULL << (MySQLParser::UNHEX - 892))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
        | (1ULL << (MySQLParser::UPDATEXML - 892))
        | (1ULL << (MySQLParser::UPPER - 892))
        | (1ULL << (MySQLParser::UUID - 892))
        | (1ULL << (MySQLParser::UUID_SHORT - 892))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
        | (1ULL << (MySQLParser::VERSION - 892))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
        | (1ULL << (MySQLParser::WEEKDAY - 892))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
        | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
        | (1ULL << (MySQLParser::WITHIN - 892))
        | (1ULL << (MySQLParser::YEARWEEK - 892))
        | (1ULL << (MySQLParser::Y_FUNCTION - 892))
        | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
        | (1ULL << (MySQLParser::STRING_LITERAL - 974))
        | (1ULL << (MySQLParser::ID - 974))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
        setState(2280);
        uid();
      }
      setState(2284);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::USING) {
        setState(2283);
        indexType();
      }
      setState(2286);
      indexColumnNames();
      setState(2290);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::USING

      || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

      || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
        setState(2287);
        indexOption();
        setState(2292);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddPrimaryKeyContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2293);
      match(MySQLParser::ADD);
      setState(2298);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(2294);
        match(MySQLParser::CONSTRAINT);
        setState(2296);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(2295);
          dynamic_cast<AlterByAddPrimaryKeyContext *>(_localctx)->name = uid();
        }
      }
      setState(2300);
      match(MySQLParser::PRIMARY);
      setState(2301);
      match(MySQLParser::KEY);
      setState(2303);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::USING) {
        setState(2302);
        indexType();
      }
      setState(2305);
      indexColumnNames();
      setState(2309);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::USING

      || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

      || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
        setState(2306);
        indexOption();
        setState(2311);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddUniqueKeyContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2312);
      match(MySQLParser::ADD);
      setState(2317);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(2313);
        match(MySQLParser::CONSTRAINT);
        setState(2315);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(2314);
          dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->name = uid();
        }
      }
      setState(2319);
      match(MySQLParser::UNIQUE);
      setState(2321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY) {
        setState(2320);
        dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::INDEX

        || _la == MySQLParser::KEY)) {
          dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2324);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::TIMESTAMP - 184))
        | (1ULL << (MySQLParser::DATETIME - 184))
        | (1ULL << (MySQLParser::YEAR - 184))
        | (1ULL << (MySQLParser::TEXT - 184))
        | (1ULL << (MySQLParser::ENUM - 184))
        | (1ULL << (MySQLParser::SERIAL - 184))
        | (1ULL << (MySQLParser::COUNT - 184))
        | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
        | (1ULL << (MySQLParser::ACTION - 252))
        | (1ULL << (MySQLParser::AFTER - 252))
        | (1ULL << (MySQLParser::AGGREGATE - 252))
        | (1ULL << (MySQLParser::ALGORITHM - 252))
        | (1ULL << (MySQLParser::ANY - 252))
        | (1ULL << (MySQLParser::AT - 252))
        | (1ULL << (MySQLParser::AUTHORS - 252))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
        | (1ULL << (MySQLParser::BEGIN - 252))
        | (1ULL << (MySQLParser::BINLOG - 252))
        | (1ULL << (MySQLParser::BIT - 252))
        | (1ULL << (MySQLParser::BLOCK - 252))
        | (1ULL << (MySQLParser::BOOL - 252))
        | (1ULL << (MySQLParser::BOOLEAN - 252))
        | (1ULL << (MySQLParser::BTREE - 252))
        | (1ULL << (MySQLParser::CACHE - 252))
        | (1ULL << (MySQLParser::CASCADED - 252))
        | (1ULL << (MySQLParser::CHAIN - 252))
        | (1ULL << (MySQLParser::CHANGED - 252))
        | (1ULL << (MySQLParser::CHANNEL - 252))
        | (1ULL << (MySQLParser::CHECKSUM - 252))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
        | (1ULL << (MySQLParser::CIPHER - 252))
        | (1ULL << (MySQLParser::CLIENT - 252))
        | (1ULL << (MySQLParser::CLOSE - 252))
        | (1ULL << (MySQLParser::COALESCE - 252))
        | (1ULL << (MySQLParser::CODE - 252))
        | (1ULL << (MySQLParser::COLUMNS - 252))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
        | (1ULL << (MySQLParser::COMMENT - 252))
        | (1ULL << (MySQLParser::COMMIT - 252))
        | (1ULL << (MySQLParser::COMPACT - 252))
        | (1ULL << (MySQLParser::COMPLETION - 252))
        | (1ULL << (MySQLParser::COMPRESSED - 252))
        | (1ULL << (MySQLParser::COMPRESSION - 252))
        | (1ULL << (MySQLParser::CONCURRENT - 252))
        | (1ULL << (MySQLParser::CONNECTION - 252))
        | (1ULL << (MySQLParser::CONSISTENT - 252))
        | (1ULL << (MySQLParser::CONTAINS - 252))
        | (1ULL << (MySQLParser::CONTEXT - 252))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
        | (1ULL << (MySQLParser::COPY - 252))
        | (1ULL << (MySQLParser::CPU - 252))
        | (1ULL << (MySQLParser::DATA - 252))
        | (1ULL << (MySQLParser::DATAFILE - 252))
        | (1ULL << (MySQLParser::DEALLOCATE - 252))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
        | (1ULL << (MySQLParser::DEFINER - 252))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
        | (1ULL << (MySQLParser::DIRECTORY - 252))
        | (1ULL << (MySQLParser::DISABLE - 252))
        | (1ULL << (MySQLParser::DISCARD - 252))
        | (1ULL << (MySQLParser::DISK - 252))
        | (1ULL << (MySQLParser::DO - 252))
        | (1ULL << (MySQLParser::DUMPFILE - 252))
        | (1ULL << (MySQLParser::DUPLICATE - 252))
        | (1ULL << (MySQLParser::DYNAMIC - 252))
        | (1ULL << (MySQLParser::ENABLE - 252))
        | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
        | (1ULL << (MySQLParser::ENDS - 316))
        | (1ULL << (MySQLParser::ENGINE - 316))
        | (1ULL << (MySQLParser::ENGINES - 316))
        | (1ULL << (MySQLParser::ERROR - 316))
        | (1ULL << (MySQLParser::ERRORS - 316))
        | (1ULL << (MySQLParser::ESCAPE - 316))
        | (1ULL << (MySQLParser::EVEN - 316))
        | (1ULL << (MySQLParser::EVENT - 316))
        | (1ULL << (MySQLParser::EVENTS - 316))
        | (1ULL << (MySQLParser::EVERY - 316))
        | (1ULL << (MySQLParser::EXCHANGE - 316))
        | (1ULL << (MySQLParser::EXCLUSIVE - 316))
        | (1ULL << (MySQLParser::EXPIRE - 316))
        | (1ULL << (MySQLParser::EXPORT - 316))
        | (1ULL << (MySQLParser::EXTENDED - 316))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
        | (1ULL << (MySQLParser::FAST - 316))
        | (1ULL << (MySQLParser::FAULTS - 316))
        | (1ULL << (MySQLParser::FIELDS - 316))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::FILTER - 316))
        | (1ULL << (MySQLParser::FIRST - 316))
        | (1ULL << (MySQLParser::FIXED - 316))
        | (1ULL << (MySQLParser::FLUSH - 316))
        | (1ULL << (MySQLParser::FOLLOWS - 316))
        | (1ULL << (MySQLParser::FOUND - 316))
        | (1ULL << (MySQLParser::FULL - 316))
        | (1ULL << (MySQLParser::FUNCTION - 316))
        | (1ULL << (MySQLParser::GENERAL - 316))
        | (1ULL << (MySQLParser::GLOBAL - 316))
        | (1ULL << (MySQLParser::GRANTS - 316))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
        | (1ULL << (MySQLParser::HANDLER - 316))
        | (1ULL << (MySQLParser::HASH - 316))
        | (1ULL << (MySQLParser::HELP - 316))
        | (1ULL << (MySQLParser::HOST - 316))
        | (1ULL << (MySQLParser::HOSTS - 316))
        | (1ULL << (MySQLParser::IDENTIFIED - 316))
        | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
        | (1ULL << (MySQLParser::IMPORT - 316))
        | (1ULL << (MySQLParser::INDEXES - 316))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
        | (1ULL << (MySQLParser::INPLACE - 316))
        | (1ULL << (MySQLParser::INSERT_METHOD - 316))
        | (1ULL << (MySQLParser::INSTALL - 316))
        | (1ULL << (MySQLParser::INSTANCE - 316))
        | (1ULL << (MySQLParser::INVISIBLE - 316))
        | (1ULL << (MySQLParser::INVOKER - 316))
        | (1ULL << (MySQLParser::IO - 316))
        | (1ULL << (MySQLParser::IO_THREAD - 316))
        | (1ULL << (MySQLParser::IPC - 316))
        | (1ULL << (MySQLParser::ISOLATION - 316))
        | (1ULL << (MySQLParser::ISSUER - 316))
        | (1ULL << (MySQLParser::JSON - 316))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::LANGUAGE - 316))
        | (1ULL << (MySQLParser::LAST - 316))
        | (1ULL << (MySQLParser::LEAVES - 316))
        | (1ULL << (MySQLParser::LESS - 316))
        | (1ULL << (MySQLParser::LEVEL - 316))
        | (1ULL << (MySQLParser::LIST - 316))
        | (1ULL << (MySQLParser::LOCAL - 316))
        | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
        | (1ULL << (MySQLParser::MASTER - 380))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
        | (1ULL << (MySQLParser::MASTER_DELAY - 380))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
        | (1ULL << (MySQLParser::MASTER_HOST - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
        | (1ULL << (MySQLParser::MASTER_PORT - 380))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
        | (1ULL << (MySQLParser::MASTER_USER - 380))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_ROWS - 380))
        | (1ULL << (MySQLParser::MAX_SIZE - 380))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
        | (1ULL << (MySQLParser::MEDIUM - 380))
        | (1ULL << (MySQLParser::MERGE - 380))
        | (1ULL << (MySQLParser::MID - 380))
        | (1ULL << (MySQLParser::MIGRATE - 380))
        | (1ULL << (MySQLParser::MIN_ROWS - 380))
        | (1ULL << (MySQLParser::MODE - 380))
        | (1ULL << (MySQLParser::MODIFY - 380))
        | (1ULL << (MySQLParser::MUTEX - 380))
        | (1ULL << (MySQLParser::MYSQL - 380))
        | (1ULL << (MySQLParser::NAME - 380))
        | (1ULL << (MySQLParser::NAMES - 380))
        | (1ULL << (MySQLParser::NCHAR - 380))
        | (1ULL << (MySQLParser::NEVER - 380))
        | (1ULL << (MySQLParser::NEXT - 380))
        | (1ULL << (MySQLParser::NO - 380))
        | (1ULL << (MySQLParser::NODEGROUP - 380))
        | (1ULL << (MySQLParser::NONE - 380))
        | (1ULL << (MySQLParser::OFFLINE - 380))
        | (1ULL << (MySQLParser::OFFSET - 380))
        | (1ULL << (MySQLParser::OJ - 380))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
        | (1ULL << (MySQLParser::ONE - 380))
        | (1ULL << (MySQLParser::ONLINE - 380))
        | (1ULL << (MySQLParser::ONLY - 380))
        | (1ULL << (MySQLParser::OPEN - 380))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
        | (1ULL << (MySQLParser::OPTIONS - 380))
        | (1ULL << (MySQLParser::OWNER - 380))
        | (1ULL << (MySQLParser::PACK_KEYS - 380))
        | (1ULL << (MySQLParser::PAGE - 380))
        | (1ULL << (MySQLParser::PARSER - 380))
        | (1ULL << (MySQLParser::PARTIAL - 380))
        | (1ULL << (MySQLParser::PARTITIONING - 380))
        | (1ULL << (MySQLParser::PARTITIONS - 380))
        | (1ULL << (MySQLParser::PASSWORD - 380))
        | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
        | (1ULL << (MySQLParser::PLUGINS - 444))
        | (1ULL << (MySQLParser::PORT - 444))
        | (1ULL << (MySQLParser::PRECEDES - 444))
        | (1ULL << (MySQLParser::PREPARE - 444))
        | (1ULL << (MySQLParser::PRESERVE - 444))
        | (1ULL << (MySQLParser::PREV - 444))
        | (1ULL << (MySQLParser::PROCESSLIST - 444))
        | (1ULL << (MySQLParser::PROFILE - 444))
        | (1ULL << (MySQLParser::PROFILES - 444))
        | (1ULL << (MySQLParser::PROXY - 444))
        | (1ULL << (MySQLParser::QUERY - 444))
        | (1ULL << (MySQLParser::QUICK - 444))
        | (1ULL << (MySQLParser::REBUILD - 444))
        | (1ULL << (MySQLParser::RECOVER - 444))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
        | (1ULL << (MySQLParser::REDUNDANT - 444))
        | (1ULL << (MySQLParser::RELAY - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
        | (1ULL << (MySQLParser::RELAYLOG - 444))
        | (1ULL << (MySQLParser::REMOVE - 444))
        | (1ULL << (MySQLParser::REORGANIZE - 444))
        | (1ULL << (MySQLParser::REPAIR - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATION - 444))
        | (1ULL << (MySQLParser::RESET - 444))
        | (1ULL << (MySQLParser::RESUME - 444))
        | (1ULL << (MySQLParser::RETURNS - 444))
        | (1ULL << (MySQLParser::ROLLBACK - 444))
        | (1ULL << (MySQLParser::ROLLUP - 444))
        | (1ULL << (MySQLParser::ROTATE - 444))
        | (1ULL << (MySQLParser::ROW - 444))
        | (1ULL << (MySQLParser::ROWS - 444))
        | (1ULL << (MySQLParser::ROW_FORMAT - 444))
        | (1ULL << (MySQLParser::SAVEPOINT - 444))
        | (1ULL << (MySQLParser::SCHEDULE - 444))
        | (1ULL << (MySQLParser::SECURITY - 444))
        | (1ULL << (MySQLParser::SERVER - 444))
        | (1ULL << (MySQLParser::SESSION - 444))
        | (1ULL << (MySQLParser::SHARE - 444))
        | (1ULL << (MySQLParser::SHARED - 444))
        | (1ULL << (MySQLParser::SIGNED - 444))
        | (1ULL << (MySQLParser::SIMPLE - 444))
        | (1ULL << (MySQLParser::SLAVE - 444))
        | (1ULL << (MySQLParser::SLOW - 444))
        | (1ULL << (MySQLParser::SNAPSHOT - 444))
        | (1ULL << (MySQLParser::SOCKET - 444))
        | (1ULL << (MySQLParser::SOME - 444))
        | (1ULL << (MySQLParser::SONAME - 444))
        | (1ULL << (MySQLParser::SOUNDS - 444))
        | (1ULL << (MySQLParser::SOURCE - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
        | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
        | (1ULL << (MySQLParser::SQL_THREAD - 508))
        | (1ULL << (MySQLParser::START - 508))
        | (1ULL << (MySQLParser::STARTS - 508))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
        | (1ULL << (MySQLParser::STATUS - 508))
        | (1ULL << (MySQLParser::STOP - 508))
        | (1ULL << (MySQLParser::STORAGE - 508))
        | (1ULL << (MySQLParser::STRING - 508))
        | (1ULL << (MySQLParser::SUBJECT - 508))
        | (1ULL << (MySQLParser::SUBPARTITION - 508))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
        | (1ULL << (MySQLParser::SUSPEND - 508))
        | (1ULL << (MySQLParser::SWAPS - 508))
        | (1ULL << (MySQLParser::SWITCHES - 508))
        | (1ULL << (MySQLParser::TABLESPACE - 508))
        | (1ULL << (MySQLParser::TEMPORARY - 508))
        | (1ULL << (MySQLParser::TEMPTABLE - 508))
        | (1ULL << (MySQLParser::THAN - 508))
        | (1ULL << (MySQLParser::TRADITIONAL - 508))
        | (1ULL << (MySQLParser::TRANSACTION - 508))
        | (1ULL << (MySQLParser::TRIGGERS - 508))
        | (1ULL << (MySQLParser::TRUNCATE - 508))
        | (1ULL << (MySQLParser::UNDEFINED - 508))
        | (1ULL << (MySQLParser::UNDOFILE - 508))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
        | (1ULL << (MySQLParser::UNINSTALL - 508))
        | (1ULL << (MySQLParser::UNKNOWN - 508))
        | (1ULL << (MySQLParser::UNTIL - 508))
        | (1ULL << (MySQLParser::UPGRADE - 508))
        | (1ULL << (MySQLParser::USER - 508))
        | (1ULL << (MySQLParser::USE_FRM - 508))
        | (1ULL << (MySQLParser::USER_RESOURCES - 508))
        | (1ULL << (MySQLParser::VALIDATION - 508))
        | (1ULL << (MySQLParser::VALUE - 508))
        | (1ULL << (MySQLParser::VARIABLES - 508))
        | (1ULL << (MySQLParser::VIEW - 508))
        | (1ULL << (MySQLParser::VISIBLE - 508))
        | (1ULL << (MySQLParser::WAIT - 508))
        | (1ULL << (MySQLParser::WARNINGS - 508))
        | (1ULL << (MySQLParser::WITHOUT - 508))
        | (1ULL << (MySQLParser::WORK - 508))
        | (1ULL << (MySQLParser::WRAPPER - 508))
        | (1ULL << (MySQLParser::X509 - 508))
        | (1ULL << (MySQLParser::XA - 508))
        | (1ULL << (MySQLParser::XML - 508))
        | (1ULL << (MySQLParser::INTERNAL - 508))
        | (1ULL << (MySQLParser::QUARTER - 508))
        | (1ULL << (MySQLParser::MONTH - 508))
        | (1ULL << (MySQLParser::DAY - 508))
        | (1ULL << (MySQLParser::HOUR - 508))
        | (1ULL << (MySQLParser::MINUTE - 508))
        | (1ULL << (MySQLParser::WEEK - 508))
        | (1ULL << (MySQLParser::SECOND - 508))
        | (1ULL << (MySQLParser::MICROSECOND - 508))
        | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
        | (1ULL << (MySQLParser::EXECUTE - 572))
        | (1ULL << (MySQLParser::FILE - 572))
        | (1ULL << (MySQLParser::PROCESS - 572))
        | (1ULL << (MySQLParser::RELOAD - 572))
        | (1ULL << (MySQLParser::SHUTDOWN - 572))
        | (1ULL << (MySQLParser::SUPER - 572))
        | (1ULL << (MySQLParser::PRIVILEGES - 572))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
        | (1ULL << (MySQLParser::ARMSCII8 - 572))
        | (1ULL << (MySQLParser::ASCII - 572))
        | (1ULL << (MySQLParser::BIG5 - 572))
        | (1ULL << (MySQLParser::CP1250 - 572))
        | (1ULL << (MySQLParser::CP1251 - 572))
        | (1ULL << (MySQLParser::CP1256 - 572))
        | (1ULL << (MySQLParser::CP1257 - 572))
        | (1ULL << (MySQLParser::CP850 - 572))
        | (1ULL << (MySQLParser::CP852 - 572))
        | (1ULL << (MySQLParser::CP866 - 572))
        | (1ULL << (MySQLParser::CP932 - 572))
        | (1ULL << (MySQLParser::DEC8 - 572))
        | (1ULL << (MySQLParser::EUCJPMS - 572))
        | (1ULL << (MySQLParser::EUCKR - 572))
        | (1ULL << (MySQLParser::GB2312 - 572))
        | (1ULL << (MySQLParser::GBK - 572))
        | (1ULL << (MySQLParser::GEOSTD8 - 572))
        | (1ULL << (MySQLParser::GREEK - 572))
        | (1ULL << (MySQLParser::HEBREW - 572))
        | (1ULL << (MySQLParser::HP8 - 572))
        | (1ULL << (MySQLParser::KEYBCS2 - 572))
        | (1ULL << (MySQLParser::KOI8R - 572))
        | (1ULL << (MySQLParser::KOI8U - 572))
        | (1ULL << (MySQLParser::LATIN1 - 572))
        | (1ULL << (MySQLParser::LATIN2 - 572))
        | (1ULL << (MySQLParser::LATIN5 - 572))
        | (1ULL << (MySQLParser::LATIN7 - 572))
        | (1ULL << (MySQLParser::MACCE - 572))
        | (1ULL << (MySQLParser::MACROMAN - 572))
        | (1ULL << (MySQLParser::SJIS - 572))
        | (1ULL << (MySQLParser::SWE7 - 572))
        | (1ULL << (MySQLParser::TIS620 - 572))
        | (1ULL << (MySQLParser::UCS2 - 572))
        | (1ULL << (MySQLParser::UJIS - 572))
        | (1ULL << (MySQLParser::UTF16 - 572))
        | (1ULL << (MySQLParser::UTF16LE - 572))
        | (1ULL << (MySQLParser::UTF32 - 572))
        | (1ULL << (MySQLParser::UTF8 - 572))
        | (1ULL << (MySQLParser::UTF8MB3 - 572))
        | (1ULL << (MySQLParser::UTF8MB4 - 572))
        | (1ULL << (MySQLParser::ARCHIVE - 572))
        | (1ULL << (MySQLParser::BLACKHOLE - 572))
        | (1ULL << (MySQLParser::CSV - 572))
        | (1ULL << (MySQLParser::FEDERATED - 572))
        | (1ULL << (MySQLParser::INNODB - 572))
        | (1ULL << (MySQLParser::MEMORY - 572))
        | (1ULL << (MySQLParser::MRG_MYISAM - 572))
        | (1ULL << (MySQLParser::MYISAM - 572))
        | (1ULL << (MySQLParser::NDB - 572))
        | (1ULL << (MySQLParser::NDBCLUSTER - 572))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
        | (1ULL << (MySQLParser::TOKUDB - 572))
        | (1ULL << (MySQLParser::REPEATABLE - 572))
        | (1ULL << (MySQLParser::COMMITTED - 572))
        | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
        | (1ULL << (MySQLParser::LINESTRING - 636))
        | (1ULL << (MySQLParser::MULTILINESTRING - 636))
        | (1ULL << (MySQLParser::MULTIPOINT - 636))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
        | (1ULL << (MySQLParser::POINT - 636))
        | (1ULL << (MySQLParser::POLYGON - 636))
        | (1ULL << (MySQLParser::ABS - 636))
        | (1ULL << (MySQLParser::ACOS - 636))
        | (1ULL << (MySQLParser::ADDDATE - 636))
        | (1ULL << (MySQLParser::ADDTIME - 636))
        | (1ULL << (MySQLParser::AES_DECRYPT - 636))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
        | (1ULL << (MySQLParser::AREA - 636))
        | (1ULL << (MySQLParser::ASBINARY - 636))
        | (1ULL << (MySQLParser::ASIN - 636))
        | (1ULL << (MySQLParser::ASTEXT - 636))
        | (1ULL << (MySQLParser::ASWKB - 636))
        | (1ULL << (MySQLParser::ASWKT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
        | (1ULL << (MySQLParser::ATAN - 636))
        | (1ULL << (MySQLParser::ATAN2 - 636))
        | (1ULL << (MySQLParser::BENCHMARK - 636))
        | (1ULL << (MySQLParser::BIN - 636))
        | (1ULL << (MySQLParser::BIT_COUNT - 636))
        | (1ULL << (MySQLParser::BIT_LENGTH - 636))
        | (1ULL << (MySQLParser::BUFFER - 636))
        | (1ULL << (MySQLParser::CEIL - 636))
        | (1ULL << (MySQLParser::CEILING - 636))
        | (1ULL << (MySQLParser::CENTROID - 636))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
        | (1ULL << (MySQLParser::CHARSET - 636))
        | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
        | (1ULL << (MySQLParser::COERCIBILITY - 636))
        | (1ULL << (MySQLParser::COLLATION - 636))
        | (1ULL << (MySQLParser::COMPRESS - 636))
        | (1ULL << (MySQLParser::CONCAT - 636))
        | (1ULL << (MySQLParser::CONCAT_WS - 636))
        | (1ULL << (MySQLParser::CONNECTION_ID - 636))
        | (1ULL << (MySQLParser::CONV - 636))
        | (1ULL << (MySQLParser::CONVERT_TZ - 636))
        | (1ULL << (MySQLParser::COS - 636))
        | (1ULL << (MySQLParser::COT - 636))
        | (1ULL << (MySQLParser::CRC32 - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
        | (1ULL << (MySQLParser::CROSSES - 636))
        | (1ULL << (MySQLParser::DATEDIFF - 636))
        | (1ULL << (MySQLParser::DATE_FORMAT - 636))
        | (1ULL << (MySQLParser::DAYNAME - 636))
        | (1ULL << (MySQLParser::DAYOFMONTH - 636))
        | (1ULL << (MySQLParser::DAYOFWEEK - 636))
        | (1ULL << (MySQLParser::DAYOFYEAR - 636))
        | (1ULL << (MySQLParser::DECODE - 636))
        | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
        | (1ULL << (MySQLParser::DIMENSION - 700))
        | (1ULL << (MySQLParser::DISJOINT - 700))
        | (1ULL << (MySQLParser::ELT - 700))
        | (1ULL << (MySQLParser::ENCODE - 700))
        | (1ULL << (MySQLParser::ENCRYPT - 700))
        | (1ULL << (MySQLParser::ENDPOINT - 700))
        | (1ULL << (MySQLParser::ENVELOPE - 700))
        | (1ULL << (MySQLParser::EQUALS - 700))
        | (1ULL << (MySQLParser::EXP - 700))
        | (1ULL << (MySQLParser::EXPORT_SET - 700))
        | (1ULL << (MySQLParser::EXTERIORRING - 700))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
        | (1ULL << (MySQLParser::FIELD - 700))
        | (1ULL << (MySQLParser::FIND_IN_SET - 700))
        | (1ULL << (MySQLParser::FLOOR - 700))
        | (1ULL << (MySQLParser::FORMAT - 700))
        | (1ULL << (MySQLParser::FOUND_ROWS - 700))
        | (1ULL << (MySQLParser::FROM_BASE64 - 700))
        | (1ULL << (MySQLParser::FROM_DAYS - 700))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYN - 700))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
        | (1ULL << (MySQLParser::GET_FORMAT - 700))
        | (1ULL << (MySQLParser::GET_LOCK - 700))
        | (1ULL << (MySQLParser::GLENGTH - 700))
        | (1ULL << (MySQLParser::GREATEST - 700))
        | (1ULL << (MySQLParser::GTID_SUBSET - 700))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
        | (1ULL << (MySQLParser::HEX - 700))
        | (1ULL << (MySQLParser::IFNULL - 700))
        | (1ULL << (MySQLParser::INET6_ATON - 700))
        | (1ULL << (MySQLParser::INET6_NTOA - 700))
        | (1ULL << (MySQLParser::INET_ATON - 700))
        | (1ULL << (MySQLParser::INET_NTOA - 700))
        | (1ULL << (MySQLParser::INSTR - 700))
        | (1ULL << (MySQLParser::INTERIORRINGN - 700))
        | (1ULL << (MySQLParser::INTERSECTS - 700))
        | (1ULL << (MySQLParser::ISCLOSED - 700))
        | (1ULL << (MySQLParser::ISEMPTY - 700))
        | (1ULL << (MySQLParser::ISNULL - 700))
        | (1ULL << (MySQLParser::ISSIMPLE - 700))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
        | (1ULL << (MySQLParser::IS_IPV4 - 700))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
        | (1ULL << (MySQLParser::IS_IPV6 - 700))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
        | (1ULL << (MySQLParser::LCASE - 700))
        | (1ULL << (MySQLParser::LEAST - 700))
        | (1ULL << (MySQLParser::LENGTH - 700))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
        | (1ULL << (MySQLParser::LINEFROMWKB - 700))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::LN - 764))
        | (1ULL << (MySQLParser::LOAD_FILE - 764))
        | (1ULL << (MySQLParser::LOCATE - 764))
        | (1ULL << (MySQLParser::LOG - 764))
        | (1ULL << (MySQLParser::LOG10 - 764))
        | (1ULL << (MySQLParser::LOG2 - 764))
        | (1ULL << (MySQLParser::LOWER - 764))
        | (1ULL << (MySQLParser::LPAD - 764))
        | (1ULL << (MySQLParser::LTRIM - 764))
        | (1ULL << (MySQLParser::MAKEDATE - 764))
        | (1ULL << (MySQLParser::MAKETIME - 764))
        | (1ULL << (MySQLParser::MAKE_SET - 764))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
        | (1ULL << (MySQLParser::MBRCONTAINS - 764))
        | (1ULL << (MySQLParser::MBRDISJOINT - 764))
        | (1ULL << (MySQLParser::MBREQUAL - 764))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
        | (1ULL << (MySQLParser::MBROVERLAPS - 764))
        | (1ULL << (MySQLParser::MBRTOUCHES - 764))
        | (1ULL << (MySQLParser::MBRWITHIN - 764))
        | (1ULL << (MySQLParser::MD5 - 764))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
        | (1ULL << (MySQLParser::MONTHNAME - 764))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::NAME_CONST - 764))
        | (1ULL << (MySQLParser::NULLIF - 764))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
        | (1ULL << (MySQLParser::NUMPOINTS - 764))
        | (1ULL << (MySQLParser::OCT - 764))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
        | (1ULL << (MySQLParser::ORD - 764))
        | (1ULL << (MySQLParser::OVERLAPS - 764))
        | (1ULL << (MySQLParser::PERIOD_ADD - 764))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
        | (1ULL << (MySQLParser::PI - 764))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::POINTFROMWKB - 764))
        | (1ULL << (MySQLParser::POINTN - 764))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYFROMWKB - 764))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::POW - 764))
        | (1ULL << (MySQLParser::POWER - 764))
        | (1ULL << (MySQLParser::QUOTE - 764))
        | (1ULL << (MySQLParser::RADIANS - 764))
        | (1ULL << (MySQLParser::RAND - 764))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
        | (1ULL << (MySQLParser::REVERSE - 764))
        | (1ULL << (MySQLParser::ROUND - 764))
        | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
        | (1ULL << (MySQLParser::RTRIM - 828))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
        | (1ULL << (MySQLParser::SESSION_USER - 828))
        | (1ULL << (MySQLParser::SHA - 828))
        | (1ULL << (MySQLParser::SHA1 - 828))
        | (1ULL << (MySQLParser::SHA2 - 828))
        | (1ULL << (MySQLParser::SIGN - 828))
        | (1ULL << (MySQLParser::SIN - 828))
        | (1ULL << (MySQLParser::SLEEP - 828))
        | (1ULL << (MySQLParser::SOUNDEX - 828))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
        | (1ULL << (MySQLParser::SQRT - 828))
        | (1ULL << (MySQLParser::SRID - 828))
        | (1ULL << (MySQLParser::STARTPOINT - 828))
        | (1ULL << (MySQLParser::STRCMP - 828))
        | (1ULL << (MySQLParser::STR_TO_DATE - 828))
        | (1ULL << (MySQLParser::ST_AREA - 828))
        | (1ULL << (MySQLParser::ST_ASBINARY - 828))
        | (1ULL << (MySQLParser::ST_ASTEXT - 828))
        | (1ULL << (MySQLParser::ST_ASWKB - 828))
        | (1ULL << (MySQLParser::ST_ASWKT - 828))
        | (1ULL << (MySQLParser::ST_BUFFER - 828))
        | (1ULL << (MySQLParser::ST_CENTROID - 828))
        | (1ULL << (MySQLParser::ST_CONTAINS - 828))
        | (1ULL << (MySQLParser::ST_CROSSES - 828))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
        | (1ULL << (MySQLParser::ST_DIMENSION - 828))
        | (1ULL << (MySQLParser::ST_DISJOINT - 828))
        | (1ULL << (MySQLParser::ST_DISTANCE - 828))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
        | (1ULL << (MySQLParser::ST_EQUALS - 828))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_POINTN - 828))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_SRID - 892))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
        | (1ULL << (MySQLParser::ST_TOUCHES - 892))
        | (1ULL << (MySQLParser::ST_UNION - 892))
        | (1ULL << (MySQLParser::ST_WITHIN - 892))
        | (1ULL << (MySQLParser::ST_X - 892))
        | (1ULL << (MySQLParser::ST_Y - 892))
        | (1ULL << (MySQLParser::SUBDATE - 892))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
        | (1ULL << (MySQLParser::SUBTIME - 892))
        | (1ULL << (MySQLParser::SYSTEM_USER - 892))
        | (1ULL << (MySQLParser::TAN - 892))
        | (1ULL << (MySQLParser::TIMEDIFF - 892))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
        | (1ULL << (MySQLParser::TIME_FORMAT - 892))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
        | (1ULL << (MySQLParser::TOUCHES - 892))
        | (1ULL << (MySQLParser::TO_BASE64 - 892))
        | (1ULL << (MySQLParser::TO_DAYS - 892))
        | (1ULL << (MySQLParser::TO_SECONDS - 892))
        | (1ULL << (MySQLParser::UCASE - 892))
        | (1ULL << (MySQLParser::UNCOMPRESS - 892))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
        | (1ULL << (MySQLParser::UNHEX - 892))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
        | (1ULL << (MySQLParser::UPDATEXML - 892))
        | (1ULL << (MySQLParser::UPPER - 892))
        | (1ULL << (MySQLParser::UUID - 892))
        | (1ULL << (MySQLParser::UUID_SHORT - 892))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
        | (1ULL << (MySQLParser::VERSION - 892))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
        | (1ULL << (MySQLParser::WEEKDAY - 892))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
        | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
        | (1ULL << (MySQLParser::WITHIN - 892))
        | (1ULL << (MySQLParser::YEARWEEK - 892))
        | (1ULL << (MySQLParser::Y_FUNCTION - 892))
        | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
        | (1ULL << (MySQLParser::STRING_LITERAL - 974))
        | (1ULL << (MySQLParser::ID - 974))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
        setState(2323);
        dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->indexName = uid();
      }
      setState(2327);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::USING) {
        setState(2326);
        indexType();
      }
      setState(2329);
      indexColumnNames();
      setState(2333);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::USING

      || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

      || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
        setState(2330);
        indexOption();
        setState(2335);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 7: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddSpecialIndexContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(2336);
      match(MySQLParser::ADD);
      setState(2337);
      dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->keyType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FULLTEXT || _la == MySQLParser::SPATIAL)) {
        dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->keyType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2339);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY) {
        setState(2338);
        dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::INDEX

        || _la == MySQLParser::KEY)) {
          dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2342);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::TIMESTAMP - 184))
        | (1ULL << (MySQLParser::DATETIME - 184))
        | (1ULL << (MySQLParser::YEAR - 184))
        | (1ULL << (MySQLParser::TEXT - 184))
        | (1ULL << (MySQLParser::ENUM - 184))
        | (1ULL << (MySQLParser::SERIAL - 184))
        | (1ULL << (MySQLParser::COUNT - 184))
        | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
        | (1ULL << (MySQLParser::ACTION - 252))
        | (1ULL << (MySQLParser::AFTER - 252))
        | (1ULL << (MySQLParser::AGGREGATE - 252))
        | (1ULL << (MySQLParser::ALGORITHM - 252))
        | (1ULL << (MySQLParser::ANY - 252))
        | (1ULL << (MySQLParser::AT - 252))
        | (1ULL << (MySQLParser::AUTHORS - 252))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
        | (1ULL << (MySQLParser::BEGIN - 252))
        | (1ULL << (MySQLParser::BINLOG - 252))
        | (1ULL << (MySQLParser::BIT - 252))
        | (1ULL << (MySQLParser::BLOCK - 252))
        | (1ULL << (MySQLParser::BOOL - 252))
        | (1ULL << (MySQLParser::BOOLEAN - 252))
        | (1ULL << (MySQLParser::BTREE - 252))
        | (1ULL << (MySQLParser::CACHE - 252))
        | (1ULL << (MySQLParser::CASCADED - 252))
        | (1ULL << (MySQLParser::CHAIN - 252))
        | (1ULL << (MySQLParser::CHANGED - 252))
        | (1ULL << (MySQLParser::CHANNEL - 252))
        | (1ULL << (MySQLParser::CHECKSUM - 252))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
        | (1ULL << (MySQLParser::CIPHER - 252))
        | (1ULL << (MySQLParser::CLIENT - 252))
        | (1ULL << (MySQLParser::CLOSE - 252))
        | (1ULL << (MySQLParser::COALESCE - 252))
        | (1ULL << (MySQLParser::CODE - 252))
        | (1ULL << (MySQLParser::COLUMNS - 252))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
        | (1ULL << (MySQLParser::COMMENT - 252))
        | (1ULL << (MySQLParser::COMMIT - 252))
        | (1ULL << (MySQLParser::COMPACT - 252))
        | (1ULL << (MySQLParser::COMPLETION - 252))
        | (1ULL << (MySQLParser::COMPRESSED - 252))
        | (1ULL << (MySQLParser::COMPRESSION - 252))
        | (1ULL << (MySQLParser::CONCURRENT - 252))
        | (1ULL << (MySQLParser::CONNECTION - 252))
        | (1ULL << (MySQLParser::CONSISTENT - 252))
        | (1ULL << (MySQLParser::CONTAINS - 252))
        | (1ULL << (MySQLParser::CONTEXT - 252))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
        | (1ULL << (MySQLParser::COPY - 252))
        | (1ULL << (MySQLParser::CPU - 252))
        | (1ULL << (MySQLParser::DATA - 252))
        | (1ULL << (MySQLParser::DATAFILE - 252))
        | (1ULL << (MySQLParser::DEALLOCATE - 252))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
        | (1ULL << (MySQLParser::DEFINER - 252))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
        | (1ULL << (MySQLParser::DIRECTORY - 252))
        | (1ULL << (MySQLParser::DISABLE - 252))
        | (1ULL << (MySQLParser::DISCARD - 252))
        | (1ULL << (MySQLParser::DISK - 252))
        | (1ULL << (MySQLParser::DO - 252))
        | (1ULL << (MySQLParser::DUMPFILE - 252))
        | (1ULL << (MySQLParser::DUPLICATE - 252))
        | (1ULL << (MySQLParser::DYNAMIC - 252))
        | (1ULL << (MySQLParser::ENABLE - 252))
        | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
        | (1ULL << (MySQLParser::ENDS - 316))
        | (1ULL << (MySQLParser::ENGINE - 316))
        | (1ULL << (MySQLParser::ENGINES - 316))
        | (1ULL << (MySQLParser::ERROR - 316))
        | (1ULL << (MySQLParser::ERRORS - 316))
        | (1ULL << (MySQLParser::ESCAPE - 316))
        | (1ULL << (MySQLParser::EVEN - 316))
        | (1ULL << (MySQLParser::EVENT - 316))
        | (1ULL << (MySQLParser::EVENTS - 316))
        | (1ULL << (MySQLParser::EVERY - 316))
        | (1ULL << (MySQLParser::EXCHANGE - 316))
        | (1ULL << (MySQLParser::EXCLUSIVE - 316))
        | (1ULL << (MySQLParser::EXPIRE - 316))
        | (1ULL << (MySQLParser::EXPORT - 316))
        | (1ULL << (MySQLParser::EXTENDED - 316))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
        | (1ULL << (MySQLParser::FAST - 316))
        | (1ULL << (MySQLParser::FAULTS - 316))
        | (1ULL << (MySQLParser::FIELDS - 316))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::FILTER - 316))
        | (1ULL << (MySQLParser::FIRST - 316))
        | (1ULL << (MySQLParser::FIXED - 316))
        | (1ULL << (MySQLParser::FLUSH - 316))
        | (1ULL << (MySQLParser::FOLLOWS - 316))
        | (1ULL << (MySQLParser::FOUND - 316))
        | (1ULL << (MySQLParser::FULL - 316))
        | (1ULL << (MySQLParser::FUNCTION - 316))
        | (1ULL << (MySQLParser::GENERAL - 316))
        | (1ULL << (MySQLParser::GLOBAL - 316))
        | (1ULL << (MySQLParser::GRANTS - 316))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
        | (1ULL << (MySQLParser::HANDLER - 316))
        | (1ULL << (MySQLParser::HASH - 316))
        | (1ULL << (MySQLParser::HELP - 316))
        | (1ULL << (MySQLParser::HOST - 316))
        | (1ULL << (MySQLParser::HOSTS - 316))
        | (1ULL << (MySQLParser::IDENTIFIED - 316))
        | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
        | (1ULL << (MySQLParser::IMPORT - 316))
        | (1ULL << (MySQLParser::INDEXES - 316))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
        | (1ULL << (MySQLParser::INPLACE - 316))
        | (1ULL << (MySQLParser::INSERT_METHOD - 316))
        | (1ULL << (MySQLParser::INSTALL - 316))
        | (1ULL << (MySQLParser::INSTANCE - 316))
        | (1ULL << (MySQLParser::INVISIBLE - 316))
        | (1ULL << (MySQLParser::INVOKER - 316))
        | (1ULL << (MySQLParser::IO - 316))
        | (1ULL << (MySQLParser::IO_THREAD - 316))
        | (1ULL << (MySQLParser::IPC - 316))
        | (1ULL << (MySQLParser::ISOLATION - 316))
        | (1ULL << (MySQLParser::ISSUER - 316))
        | (1ULL << (MySQLParser::JSON - 316))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::LANGUAGE - 316))
        | (1ULL << (MySQLParser::LAST - 316))
        | (1ULL << (MySQLParser::LEAVES - 316))
        | (1ULL << (MySQLParser::LESS - 316))
        | (1ULL << (MySQLParser::LEVEL - 316))
        | (1ULL << (MySQLParser::LIST - 316))
        | (1ULL << (MySQLParser::LOCAL - 316))
        | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
        | (1ULL << (MySQLParser::MASTER - 380))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
        | (1ULL << (MySQLParser::MASTER_DELAY - 380))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
        | (1ULL << (MySQLParser::MASTER_HOST - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
        | (1ULL << (MySQLParser::MASTER_PORT - 380))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
        | (1ULL << (MySQLParser::MASTER_USER - 380))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_ROWS - 380))
        | (1ULL << (MySQLParser::MAX_SIZE - 380))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
        | (1ULL << (MySQLParser::MEDIUM - 380))
        | (1ULL << (MySQLParser::MERGE - 380))
        | (1ULL << (MySQLParser::MID - 380))
        | (1ULL << (MySQLParser::MIGRATE - 380))
        | (1ULL << (MySQLParser::MIN_ROWS - 380))
        | (1ULL << (MySQLParser::MODE - 380))
        | (1ULL << (MySQLParser::MODIFY - 380))
        | (1ULL << (MySQLParser::MUTEX - 380))
        | (1ULL << (MySQLParser::MYSQL - 380))
        | (1ULL << (MySQLParser::NAME - 380))
        | (1ULL << (MySQLParser::NAMES - 380))
        | (1ULL << (MySQLParser::NCHAR - 380))
        | (1ULL << (MySQLParser::NEVER - 380))
        | (1ULL << (MySQLParser::NEXT - 380))
        | (1ULL << (MySQLParser::NO - 380))
        | (1ULL << (MySQLParser::NODEGROUP - 380))
        | (1ULL << (MySQLParser::NONE - 380))
        | (1ULL << (MySQLParser::OFFLINE - 380))
        | (1ULL << (MySQLParser::OFFSET - 380))
        | (1ULL << (MySQLParser::OJ - 380))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
        | (1ULL << (MySQLParser::ONE - 380))
        | (1ULL << (MySQLParser::ONLINE - 380))
        | (1ULL << (MySQLParser::ONLY - 380))
        | (1ULL << (MySQLParser::OPEN - 380))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
        | (1ULL << (MySQLParser::OPTIONS - 380))
        | (1ULL << (MySQLParser::OWNER - 380))
        | (1ULL << (MySQLParser::PACK_KEYS - 380))
        | (1ULL << (MySQLParser::PAGE - 380))
        | (1ULL << (MySQLParser::PARSER - 380))
        | (1ULL << (MySQLParser::PARTIAL - 380))
        | (1ULL << (MySQLParser::PARTITIONING - 380))
        | (1ULL << (MySQLParser::PARTITIONS - 380))
        | (1ULL << (MySQLParser::PASSWORD - 380))
        | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
        | (1ULL << (MySQLParser::PLUGINS - 444))
        | (1ULL << (MySQLParser::PORT - 444))
        | (1ULL << (MySQLParser::PRECEDES - 444))
        | (1ULL << (MySQLParser::PREPARE - 444))
        | (1ULL << (MySQLParser::PRESERVE - 444))
        | (1ULL << (MySQLParser::PREV - 444))
        | (1ULL << (MySQLParser::PROCESSLIST - 444))
        | (1ULL << (MySQLParser::PROFILE - 444))
        | (1ULL << (MySQLParser::PROFILES - 444))
        | (1ULL << (MySQLParser::PROXY - 444))
        | (1ULL << (MySQLParser::QUERY - 444))
        | (1ULL << (MySQLParser::QUICK - 444))
        | (1ULL << (MySQLParser::REBUILD - 444))
        | (1ULL << (MySQLParser::RECOVER - 444))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
        | (1ULL << (MySQLParser::REDUNDANT - 444))
        | (1ULL << (MySQLParser::RELAY - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
        | (1ULL << (MySQLParser::RELAYLOG - 444))
        | (1ULL << (MySQLParser::REMOVE - 444))
        | (1ULL << (MySQLParser::REORGANIZE - 444))
        | (1ULL << (MySQLParser::REPAIR - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATION - 444))
        | (1ULL << (MySQLParser::RESET - 444))
        | (1ULL << (MySQLParser::RESUME - 444))
        | (1ULL << (MySQLParser::RETURNS - 444))
        | (1ULL << (MySQLParser::ROLLBACK - 444))
        | (1ULL << (MySQLParser::ROLLUP - 444))
        | (1ULL << (MySQLParser::ROTATE - 444))
        | (1ULL << (MySQLParser::ROW - 444))
        | (1ULL << (MySQLParser::ROWS - 444))
        | (1ULL << (MySQLParser::ROW_FORMAT - 444))
        | (1ULL << (MySQLParser::SAVEPOINT - 444))
        | (1ULL << (MySQLParser::SCHEDULE - 444))
        | (1ULL << (MySQLParser::SECURITY - 444))
        | (1ULL << (MySQLParser::SERVER - 444))
        | (1ULL << (MySQLParser::SESSION - 444))
        | (1ULL << (MySQLParser::SHARE - 444))
        | (1ULL << (MySQLParser::SHARED - 444))
        | (1ULL << (MySQLParser::SIGNED - 444))
        | (1ULL << (MySQLParser::SIMPLE - 444))
        | (1ULL << (MySQLParser::SLAVE - 444))
        | (1ULL << (MySQLParser::SLOW - 444))
        | (1ULL << (MySQLParser::SNAPSHOT - 444))
        | (1ULL << (MySQLParser::SOCKET - 444))
        | (1ULL << (MySQLParser::SOME - 444))
        | (1ULL << (MySQLParser::SONAME - 444))
        | (1ULL << (MySQLParser::SOUNDS - 444))
        | (1ULL << (MySQLParser::SOURCE - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
        | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
        | (1ULL << (MySQLParser::SQL_THREAD - 508))
        | (1ULL << (MySQLParser::START - 508))
        | (1ULL << (MySQLParser::STARTS - 508))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
        | (1ULL << (MySQLParser::STATUS - 508))
        | (1ULL << (MySQLParser::STOP - 508))
        | (1ULL << (MySQLParser::STORAGE - 508))
        | (1ULL << (MySQLParser::STRING - 508))
        | (1ULL << (MySQLParser::SUBJECT - 508))
        | (1ULL << (MySQLParser::SUBPARTITION - 508))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
        | (1ULL << (MySQLParser::SUSPEND - 508))
        | (1ULL << (MySQLParser::SWAPS - 508))
        | (1ULL << (MySQLParser::SWITCHES - 508))
        | (1ULL << (MySQLParser::TABLESPACE - 508))
        | (1ULL << (MySQLParser::TEMPORARY - 508))
        | (1ULL << (MySQLParser::TEMPTABLE - 508))
        | (1ULL << (MySQLParser::THAN - 508))
        | (1ULL << (MySQLParser::TRADITIONAL - 508))
        | (1ULL << (MySQLParser::TRANSACTION - 508))
        | (1ULL << (MySQLParser::TRIGGERS - 508))
        | (1ULL << (MySQLParser::TRUNCATE - 508))
        | (1ULL << (MySQLParser::UNDEFINED - 508))
        | (1ULL << (MySQLParser::UNDOFILE - 508))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
        | (1ULL << (MySQLParser::UNINSTALL - 508))
        | (1ULL << (MySQLParser::UNKNOWN - 508))
        | (1ULL << (MySQLParser::UNTIL - 508))
        | (1ULL << (MySQLParser::UPGRADE - 508))
        | (1ULL << (MySQLParser::USER - 508))
        | (1ULL << (MySQLParser::USE_FRM - 508))
        | (1ULL << (MySQLParser::USER_RESOURCES - 508))
        | (1ULL << (MySQLParser::VALIDATION - 508))
        | (1ULL << (MySQLParser::VALUE - 508))
        | (1ULL << (MySQLParser::VARIABLES - 508))
        | (1ULL << (MySQLParser::VIEW - 508))
        | (1ULL << (MySQLParser::VISIBLE - 508))
        | (1ULL << (MySQLParser::WAIT - 508))
        | (1ULL << (MySQLParser::WARNINGS - 508))
        | (1ULL << (MySQLParser::WITHOUT - 508))
        | (1ULL << (MySQLParser::WORK - 508))
        | (1ULL << (MySQLParser::WRAPPER - 508))
        | (1ULL << (MySQLParser::X509 - 508))
        | (1ULL << (MySQLParser::XA - 508))
        | (1ULL << (MySQLParser::XML - 508))
        | (1ULL << (MySQLParser::INTERNAL - 508))
        | (1ULL << (MySQLParser::QUARTER - 508))
        | (1ULL << (MySQLParser::MONTH - 508))
        | (1ULL << (MySQLParser::DAY - 508))
        | (1ULL << (MySQLParser::HOUR - 508))
        | (1ULL << (MySQLParser::MINUTE - 508))
        | (1ULL << (MySQLParser::WEEK - 508))
        | (1ULL << (MySQLParser::SECOND - 508))
        | (1ULL << (MySQLParser::MICROSECOND - 508))
        | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
        | (1ULL << (MySQLParser::EXECUTE - 572))
        | (1ULL << (MySQLParser::FILE - 572))
        | (1ULL << (MySQLParser::PROCESS - 572))
        | (1ULL << (MySQLParser::RELOAD - 572))
        | (1ULL << (MySQLParser::SHUTDOWN - 572))
        | (1ULL << (MySQLParser::SUPER - 572))
        | (1ULL << (MySQLParser::PRIVILEGES - 572))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
        | (1ULL << (MySQLParser::ARMSCII8 - 572))
        | (1ULL << (MySQLParser::ASCII - 572))
        | (1ULL << (MySQLParser::BIG5 - 572))
        | (1ULL << (MySQLParser::CP1250 - 572))
        | (1ULL << (MySQLParser::CP1251 - 572))
        | (1ULL << (MySQLParser::CP1256 - 572))
        | (1ULL << (MySQLParser::CP1257 - 572))
        | (1ULL << (MySQLParser::CP850 - 572))
        | (1ULL << (MySQLParser::CP852 - 572))
        | (1ULL << (MySQLParser::CP866 - 572))
        | (1ULL << (MySQLParser::CP932 - 572))
        | (1ULL << (MySQLParser::DEC8 - 572))
        | (1ULL << (MySQLParser::EUCJPMS - 572))
        | (1ULL << (MySQLParser::EUCKR - 572))
        | (1ULL << (MySQLParser::GB2312 - 572))
        | (1ULL << (MySQLParser::GBK - 572))
        | (1ULL << (MySQLParser::GEOSTD8 - 572))
        | (1ULL << (MySQLParser::GREEK - 572))
        | (1ULL << (MySQLParser::HEBREW - 572))
        | (1ULL << (MySQLParser::HP8 - 572))
        | (1ULL << (MySQLParser::KEYBCS2 - 572))
        | (1ULL << (MySQLParser::KOI8R - 572))
        | (1ULL << (MySQLParser::KOI8U - 572))
        | (1ULL << (MySQLParser::LATIN1 - 572))
        | (1ULL << (MySQLParser::LATIN2 - 572))
        | (1ULL << (MySQLParser::LATIN5 - 572))
        | (1ULL << (MySQLParser::LATIN7 - 572))
        | (1ULL << (MySQLParser::MACCE - 572))
        | (1ULL << (MySQLParser::MACROMAN - 572))
        | (1ULL << (MySQLParser::SJIS - 572))
        | (1ULL << (MySQLParser::SWE7 - 572))
        | (1ULL << (MySQLParser::TIS620 - 572))
        | (1ULL << (MySQLParser::UCS2 - 572))
        | (1ULL << (MySQLParser::UJIS - 572))
        | (1ULL << (MySQLParser::UTF16 - 572))
        | (1ULL << (MySQLParser::UTF16LE - 572))
        | (1ULL << (MySQLParser::UTF32 - 572))
        | (1ULL << (MySQLParser::UTF8 - 572))
        | (1ULL << (MySQLParser::UTF8MB3 - 572))
        | (1ULL << (MySQLParser::UTF8MB4 - 572))
        | (1ULL << (MySQLParser::ARCHIVE - 572))
        | (1ULL << (MySQLParser::BLACKHOLE - 572))
        | (1ULL << (MySQLParser::CSV - 572))
        | (1ULL << (MySQLParser::FEDERATED - 572))
        | (1ULL << (MySQLParser::INNODB - 572))
        | (1ULL << (MySQLParser::MEMORY - 572))
        | (1ULL << (MySQLParser::MRG_MYISAM - 572))
        | (1ULL << (MySQLParser::MYISAM - 572))
        | (1ULL << (MySQLParser::NDB - 572))
        | (1ULL << (MySQLParser::NDBCLUSTER - 572))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
        | (1ULL << (MySQLParser::TOKUDB - 572))
        | (1ULL << (MySQLParser::REPEATABLE - 572))
        | (1ULL << (MySQLParser::COMMITTED - 572))
        | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
        | (1ULL << (MySQLParser::LINESTRING - 636))
        | (1ULL << (MySQLParser::MULTILINESTRING - 636))
        | (1ULL << (MySQLParser::MULTIPOINT - 636))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
        | (1ULL << (MySQLParser::POINT - 636))
        | (1ULL << (MySQLParser::POLYGON - 636))
        | (1ULL << (MySQLParser::ABS - 636))
        | (1ULL << (MySQLParser::ACOS - 636))
        | (1ULL << (MySQLParser::ADDDATE - 636))
        | (1ULL << (MySQLParser::ADDTIME - 636))
        | (1ULL << (MySQLParser::AES_DECRYPT - 636))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
        | (1ULL << (MySQLParser::AREA - 636))
        | (1ULL << (MySQLParser::ASBINARY - 636))
        | (1ULL << (MySQLParser::ASIN - 636))
        | (1ULL << (MySQLParser::ASTEXT - 636))
        | (1ULL << (MySQLParser::ASWKB - 636))
        | (1ULL << (MySQLParser::ASWKT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
        | (1ULL << (MySQLParser::ATAN - 636))
        | (1ULL << (MySQLParser::ATAN2 - 636))
        | (1ULL << (MySQLParser::BENCHMARK - 636))
        | (1ULL << (MySQLParser::BIN - 636))
        | (1ULL << (MySQLParser::BIT_COUNT - 636))
        | (1ULL << (MySQLParser::BIT_LENGTH - 636))
        | (1ULL << (MySQLParser::BUFFER - 636))
        | (1ULL << (MySQLParser::CEIL - 636))
        | (1ULL << (MySQLParser::CEILING - 636))
        | (1ULL << (MySQLParser::CENTROID - 636))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
        | (1ULL << (MySQLParser::CHARSET - 636))
        | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
        | (1ULL << (MySQLParser::COERCIBILITY - 636))
        | (1ULL << (MySQLParser::COLLATION - 636))
        | (1ULL << (MySQLParser::COMPRESS - 636))
        | (1ULL << (MySQLParser::CONCAT - 636))
        | (1ULL << (MySQLParser::CONCAT_WS - 636))
        | (1ULL << (MySQLParser::CONNECTION_ID - 636))
        | (1ULL << (MySQLParser::CONV - 636))
        | (1ULL << (MySQLParser::CONVERT_TZ - 636))
        | (1ULL << (MySQLParser::COS - 636))
        | (1ULL << (MySQLParser::COT - 636))
        | (1ULL << (MySQLParser::CRC32 - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
        | (1ULL << (MySQLParser::CROSSES - 636))
        | (1ULL << (MySQLParser::DATEDIFF - 636))
        | (1ULL << (MySQLParser::DATE_FORMAT - 636))
        | (1ULL << (MySQLParser::DAYNAME - 636))
        | (1ULL << (MySQLParser::DAYOFMONTH - 636))
        | (1ULL << (MySQLParser::DAYOFWEEK - 636))
        | (1ULL << (MySQLParser::DAYOFYEAR - 636))
        | (1ULL << (MySQLParser::DECODE - 636))
        | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
        | (1ULL << (MySQLParser::DIMENSION - 700))
        | (1ULL << (MySQLParser::DISJOINT - 700))
        | (1ULL << (MySQLParser::ELT - 700))
        | (1ULL << (MySQLParser::ENCODE - 700))
        | (1ULL << (MySQLParser::ENCRYPT - 700))
        | (1ULL << (MySQLParser::ENDPOINT - 700))
        | (1ULL << (MySQLParser::ENVELOPE - 700))
        | (1ULL << (MySQLParser::EQUALS - 700))
        | (1ULL << (MySQLParser::EXP - 700))
        | (1ULL << (MySQLParser::EXPORT_SET - 700))
        | (1ULL << (MySQLParser::EXTERIORRING - 700))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
        | (1ULL << (MySQLParser::FIELD - 700))
        | (1ULL << (MySQLParser::FIND_IN_SET - 700))
        | (1ULL << (MySQLParser::FLOOR - 700))
        | (1ULL << (MySQLParser::FORMAT - 700))
        | (1ULL << (MySQLParser::FOUND_ROWS - 700))
        | (1ULL << (MySQLParser::FROM_BASE64 - 700))
        | (1ULL << (MySQLParser::FROM_DAYS - 700))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYN - 700))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
        | (1ULL << (MySQLParser::GET_FORMAT - 700))
        | (1ULL << (MySQLParser::GET_LOCK - 700))
        | (1ULL << (MySQLParser::GLENGTH - 700))
        | (1ULL << (MySQLParser::GREATEST - 700))
        | (1ULL << (MySQLParser::GTID_SUBSET - 700))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
        | (1ULL << (MySQLParser::HEX - 700))
        | (1ULL << (MySQLParser::IFNULL - 700))
        | (1ULL << (MySQLParser::INET6_ATON - 700))
        | (1ULL << (MySQLParser::INET6_NTOA - 700))
        | (1ULL << (MySQLParser::INET_ATON - 700))
        | (1ULL << (MySQLParser::INET_NTOA - 700))
        | (1ULL << (MySQLParser::INSTR - 700))
        | (1ULL << (MySQLParser::INTERIORRINGN - 700))
        | (1ULL << (MySQLParser::INTERSECTS - 700))
        | (1ULL << (MySQLParser::ISCLOSED - 700))
        | (1ULL << (MySQLParser::ISEMPTY - 700))
        | (1ULL << (MySQLParser::ISNULL - 700))
        | (1ULL << (MySQLParser::ISSIMPLE - 700))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
        | (1ULL << (MySQLParser::IS_IPV4 - 700))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
        | (1ULL << (MySQLParser::IS_IPV6 - 700))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
        | (1ULL << (MySQLParser::LCASE - 700))
        | (1ULL << (MySQLParser::LEAST - 700))
        | (1ULL << (MySQLParser::LENGTH - 700))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
        | (1ULL << (MySQLParser::LINEFROMWKB - 700))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::LN - 764))
        | (1ULL << (MySQLParser::LOAD_FILE - 764))
        | (1ULL << (MySQLParser::LOCATE - 764))
        | (1ULL << (MySQLParser::LOG - 764))
        | (1ULL << (MySQLParser::LOG10 - 764))
        | (1ULL << (MySQLParser::LOG2 - 764))
        | (1ULL << (MySQLParser::LOWER - 764))
        | (1ULL << (MySQLParser::LPAD - 764))
        | (1ULL << (MySQLParser::LTRIM - 764))
        | (1ULL << (MySQLParser::MAKEDATE - 764))
        | (1ULL << (MySQLParser::MAKETIME - 764))
        | (1ULL << (MySQLParser::MAKE_SET - 764))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
        | (1ULL << (MySQLParser::MBRCONTAINS - 764))
        | (1ULL << (MySQLParser::MBRDISJOINT - 764))
        | (1ULL << (MySQLParser::MBREQUAL - 764))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
        | (1ULL << (MySQLParser::MBROVERLAPS - 764))
        | (1ULL << (MySQLParser::MBRTOUCHES - 764))
        | (1ULL << (MySQLParser::MBRWITHIN - 764))
        | (1ULL << (MySQLParser::MD5 - 764))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
        | (1ULL << (MySQLParser::MONTHNAME - 764))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::NAME_CONST - 764))
        | (1ULL << (MySQLParser::NULLIF - 764))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
        | (1ULL << (MySQLParser::NUMPOINTS - 764))
        | (1ULL << (MySQLParser::OCT - 764))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
        | (1ULL << (MySQLParser::ORD - 764))
        | (1ULL << (MySQLParser::OVERLAPS - 764))
        | (1ULL << (MySQLParser::PERIOD_ADD - 764))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
        | (1ULL << (MySQLParser::PI - 764))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::POINTFROMWKB - 764))
        | (1ULL << (MySQLParser::POINTN - 764))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYFROMWKB - 764))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::POW - 764))
        | (1ULL << (MySQLParser::POWER - 764))
        | (1ULL << (MySQLParser::QUOTE - 764))
        | (1ULL << (MySQLParser::RADIANS - 764))
        | (1ULL << (MySQLParser::RAND - 764))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
        | (1ULL << (MySQLParser::REVERSE - 764))
        | (1ULL << (MySQLParser::ROUND - 764))
        | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
        | (1ULL << (MySQLParser::RTRIM - 828))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
        | (1ULL << (MySQLParser::SESSION_USER - 828))
        | (1ULL << (MySQLParser::SHA - 828))
        | (1ULL << (MySQLParser::SHA1 - 828))
        | (1ULL << (MySQLParser::SHA2 - 828))
        | (1ULL << (MySQLParser::SIGN - 828))
        | (1ULL << (MySQLParser::SIN - 828))
        | (1ULL << (MySQLParser::SLEEP - 828))
        | (1ULL << (MySQLParser::SOUNDEX - 828))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
        | (1ULL << (MySQLParser::SQRT - 828))
        | (1ULL << (MySQLParser::SRID - 828))
        | (1ULL << (MySQLParser::STARTPOINT - 828))
        | (1ULL << (MySQLParser::STRCMP - 828))
        | (1ULL << (MySQLParser::STR_TO_DATE - 828))
        | (1ULL << (MySQLParser::ST_AREA - 828))
        | (1ULL << (MySQLParser::ST_ASBINARY - 828))
        | (1ULL << (MySQLParser::ST_ASTEXT - 828))
        | (1ULL << (MySQLParser::ST_ASWKB - 828))
        | (1ULL << (MySQLParser::ST_ASWKT - 828))
        | (1ULL << (MySQLParser::ST_BUFFER - 828))
        | (1ULL << (MySQLParser::ST_CENTROID - 828))
        | (1ULL << (MySQLParser::ST_CONTAINS - 828))
        | (1ULL << (MySQLParser::ST_CROSSES - 828))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
        | (1ULL << (MySQLParser::ST_DIMENSION - 828))
        | (1ULL << (MySQLParser::ST_DISJOINT - 828))
        | (1ULL << (MySQLParser::ST_DISTANCE - 828))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
        | (1ULL << (MySQLParser::ST_EQUALS - 828))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_POINTN - 828))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_SRID - 892))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
        | (1ULL << (MySQLParser::ST_TOUCHES - 892))
        | (1ULL << (MySQLParser::ST_UNION - 892))
        | (1ULL << (MySQLParser::ST_WITHIN - 892))
        | (1ULL << (MySQLParser::ST_X - 892))
        | (1ULL << (MySQLParser::ST_Y - 892))
        | (1ULL << (MySQLParser::SUBDATE - 892))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
        | (1ULL << (MySQLParser::SUBTIME - 892))
        | (1ULL << (MySQLParser::SYSTEM_USER - 892))
        | (1ULL << (MySQLParser::TAN - 892))
        | (1ULL << (MySQLParser::TIMEDIFF - 892))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
        | (1ULL << (MySQLParser::TIME_FORMAT - 892))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
        | (1ULL << (MySQLParser::TOUCHES - 892))
        | (1ULL << (MySQLParser::TO_BASE64 - 892))
        | (1ULL << (MySQLParser::TO_DAYS - 892))
        | (1ULL << (MySQLParser::TO_SECONDS - 892))
        | (1ULL << (MySQLParser::UCASE - 892))
        | (1ULL << (MySQLParser::UNCOMPRESS - 892))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
        | (1ULL << (MySQLParser::UNHEX - 892))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
        | (1ULL << (MySQLParser::UPDATEXML - 892))
        | (1ULL << (MySQLParser::UPPER - 892))
        | (1ULL << (MySQLParser::UUID - 892))
        | (1ULL << (MySQLParser::UUID_SHORT - 892))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
        | (1ULL << (MySQLParser::VERSION - 892))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
        | (1ULL << (MySQLParser::WEEKDAY - 892))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
        | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
        | (1ULL << (MySQLParser::WITHIN - 892))
        | (1ULL << (MySQLParser::YEARWEEK - 892))
        | (1ULL << (MySQLParser::Y_FUNCTION - 892))
        | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
        | (1ULL << (MySQLParser::STRING_LITERAL - 974))
        | (1ULL << (MySQLParser::ID - 974))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
        setState(2341);
        uid();
      }
      setState(2344);
      indexColumnNames();
      setState(2348);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::USING

      || _la == MySQLParser::WITH || _la == MySQLParser::COMMENT || _la == MySQLParser::INVISIBLE

      || _la == MySQLParser::KEY_BLOCK_SIZE || _la == MySQLParser::VISIBLE) {
        setState(2345);
        indexOption();
        setState(2350);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 8: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddForeignKeyContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(2351);
      match(MySQLParser::ADD);
      setState(2356);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(2352);
        match(MySQLParser::CONSTRAINT);
        setState(2354);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(2353);
          dynamic_cast<AlterByAddForeignKeyContext *>(_localctx)->name = uid();
        }
      }
      setState(2358);
      match(MySQLParser::FOREIGN);
      setState(2359);
      match(MySQLParser::KEY);
      setState(2361);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::TIMESTAMP - 184))
        | (1ULL << (MySQLParser::DATETIME - 184))
        | (1ULL << (MySQLParser::YEAR - 184))
        | (1ULL << (MySQLParser::TEXT - 184))
        | (1ULL << (MySQLParser::ENUM - 184))
        | (1ULL << (MySQLParser::SERIAL - 184))
        | (1ULL << (MySQLParser::COUNT - 184))
        | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
        | (1ULL << (MySQLParser::ACTION - 252))
        | (1ULL << (MySQLParser::AFTER - 252))
        | (1ULL << (MySQLParser::AGGREGATE - 252))
        | (1ULL << (MySQLParser::ALGORITHM - 252))
        | (1ULL << (MySQLParser::ANY - 252))
        | (1ULL << (MySQLParser::AT - 252))
        | (1ULL << (MySQLParser::AUTHORS - 252))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
        | (1ULL << (MySQLParser::BEGIN - 252))
        | (1ULL << (MySQLParser::BINLOG - 252))
        | (1ULL << (MySQLParser::BIT - 252))
        | (1ULL << (MySQLParser::BLOCK - 252))
        | (1ULL << (MySQLParser::BOOL - 252))
        | (1ULL << (MySQLParser::BOOLEAN - 252))
        | (1ULL << (MySQLParser::BTREE - 252))
        | (1ULL << (MySQLParser::CACHE - 252))
        | (1ULL << (MySQLParser::CASCADED - 252))
        | (1ULL << (MySQLParser::CHAIN - 252))
        | (1ULL << (MySQLParser::CHANGED - 252))
        | (1ULL << (MySQLParser::CHANNEL - 252))
        | (1ULL << (MySQLParser::CHECKSUM - 252))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
        | (1ULL << (MySQLParser::CIPHER - 252))
        | (1ULL << (MySQLParser::CLIENT - 252))
        | (1ULL << (MySQLParser::CLOSE - 252))
        | (1ULL << (MySQLParser::COALESCE - 252))
        | (1ULL << (MySQLParser::CODE - 252))
        | (1ULL << (MySQLParser::COLUMNS - 252))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
        | (1ULL << (MySQLParser::COMMENT - 252))
        | (1ULL << (MySQLParser::COMMIT - 252))
        | (1ULL << (MySQLParser::COMPACT - 252))
        | (1ULL << (MySQLParser::COMPLETION - 252))
        | (1ULL << (MySQLParser::COMPRESSED - 252))
        | (1ULL << (MySQLParser::COMPRESSION - 252))
        | (1ULL << (MySQLParser::CONCURRENT - 252))
        | (1ULL << (MySQLParser::CONNECTION - 252))
        | (1ULL << (MySQLParser::CONSISTENT - 252))
        | (1ULL << (MySQLParser::CONTAINS - 252))
        | (1ULL << (MySQLParser::CONTEXT - 252))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
        | (1ULL << (MySQLParser::COPY - 252))
        | (1ULL << (MySQLParser::CPU - 252))
        | (1ULL << (MySQLParser::DATA - 252))
        | (1ULL << (MySQLParser::DATAFILE - 252))
        | (1ULL << (MySQLParser::DEALLOCATE - 252))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
        | (1ULL << (MySQLParser::DEFINER - 252))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
        | (1ULL << (MySQLParser::DIRECTORY - 252))
        | (1ULL << (MySQLParser::DISABLE - 252))
        | (1ULL << (MySQLParser::DISCARD - 252))
        | (1ULL << (MySQLParser::DISK - 252))
        | (1ULL << (MySQLParser::DO - 252))
        | (1ULL << (MySQLParser::DUMPFILE - 252))
        | (1ULL << (MySQLParser::DUPLICATE - 252))
        | (1ULL << (MySQLParser::DYNAMIC - 252))
        | (1ULL << (MySQLParser::ENABLE - 252))
        | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
        | (1ULL << (MySQLParser::ENDS - 316))
        | (1ULL << (MySQLParser::ENGINE - 316))
        | (1ULL << (MySQLParser::ENGINES - 316))
        | (1ULL << (MySQLParser::ERROR - 316))
        | (1ULL << (MySQLParser::ERRORS - 316))
        | (1ULL << (MySQLParser::ESCAPE - 316))
        | (1ULL << (MySQLParser::EVEN - 316))
        | (1ULL << (MySQLParser::EVENT - 316))
        | (1ULL << (MySQLParser::EVENTS - 316))
        | (1ULL << (MySQLParser::EVERY - 316))
        | (1ULL << (MySQLParser::EXCHANGE - 316))
        | (1ULL << (MySQLParser::EXCLUSIVE - 316))
        | (1ULL << (MySQLParser::EXPIRE - 316))
        | (1ULL << (MySQLParser::EXPORT - 316))
        | (1ULL << (MySQLParser::EXTENDED - 316))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
        | (1ULL << (MySQLParser::FAST - 316))
        | (1ULL << (MySQLParser::FAULTS - 316))
        | (1ULL << (MySQLParser::FIELDS - 316))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::FILTER - 316))
        | (1ULL << (MySQLParser::FIRST - 316))
        | (1ULL << (MySQLParser::FIXED - 316))
        | (1ULL << (MySQLParser::FLUSH - 316))
        | (1ULL << (MySQLParser::FOLLOWS - 316))
        | (1ULL << (MySQLParser::FOUND - 316))
        | (1ULL << (MySQLParser::FULL - 316))
        | (1ULL << (MySQLParser::FUNCTION - 316))
        | (1ULL << (MySQLParser::GENERAL - 316))
        | (1ULL << (MySQLParser::GLOBAL - 316))
        | (1ULL << (MySQLParser::GRANTS - 316))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
        | (1ULL << (MySQLParser::HANDLER - 316))
        | (1ULL << (MySQLParser::HASH - 316))
        | (1ULL << (MySQLParser::HELP - 316))
        | (1ULL << (MySQLParser::HOST - 316))
        | (1ULL << (MySQLParser::HOSTS - 316))
        | (1ULL << (MySQLParser::IDENTIFIED - 316))
        | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
        | (1ULL << (MySQLParser::IMPORT - 316))
        | (1ULL << (MySQLParser::INDEXES - 316))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
        | (1ULL << (MySQLParser::INPLACE - 316))
        | (1ULL << (MySQLParser::INSERT_METHOD - 316))
        | (1ULL << (MySQLParser::INSTALL - 316))
        | (1ULL << (MySQLParser::INSTANCE - 316))
        | (1ULL << (MySQLParser::INVISIBLE - 316))
        | (1ULL << (MySQLParser::INVOKER - 316))
        | (1ULL << (MySQLParser::IO - 316))
        | (1ULL << (MySQLParser::IO_THREAD - 316))
        | (1ULL << (MySQLParser::IPC - 316))
        | (1ULL << (MySQLParser::ISOLATION - 316))
        | (1ULL << (MySQLParser::ISSUER - 316))
        | (1ULL << (MySQLParser::JSON - 316))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
        | (1ULL << (MySQLParser::LANGUAGE - 316))
        | (1ULL << (MySQLParser::LAST - 316))
        | (1ULL << (MySQLParser::LEAVES - 316))
        | (1ULL << (MySQLParser::LESS - 316))
        | (1ULL << (MySQLParser::LEVEL - 316))
        | (1ULL << (MySQLParser::LIST - 316))
        | (1ULL << (MySQLParser::LOCAL - 316))
        | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
        | (1ULL << (MySQLParser::MASTER - 380))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
        | (1ULL << (MySQLParser::MASTER_DELAY - 380))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
        | (1ULL << (MySQLParser::MASTER_HOST - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
        | (1ULL << (MySQLParser::MASTER_PORT - 380))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
        | (1ULL << (MySQLParser::MASTER_USER - 380))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_ROWS - 380))
        | (1ULL << (MySQLParser::MAX_SIZE - 380))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
        | (1ULL << (MySQLParser::MEDIUM - 380))
        | (1ULL << (MySQLParser::MERGE - 380))
        | (1ULL << (MySQLParser::MID - 380))
        | (1ULL << (MySQLParser::MIGRATE - 380))
        | (1ULL << (MySQLParser::MIN_ROWS - 380))
        | (1ULL << (MySQLParser::MODE - 380))
        | (1ULL << (MySQLParser::MODIFY - 380))
        | (1ULL << (MySQLParser::MUTEX - 380))
        | (1ULL << (MySQLParser::MYSQL - 380))
        | (1ULL << (MySQLParser::NAME - 380))
        | (1ULL << (MySQLParser::NAMES - 380))
        | (1ULL << (MySQLParser::NCHAR - 380))
        | (1ULL << (MySQLParser::NEVER - 380))
        | (1ULL << (MySQLParser::NEXT - 380))
        | (1ULL << (MySQLParser::NO - 380))
        | (1ULL << (MySQLParser::NODEGROUP - 380))
        | (1ULL << (MySQLParser::NONE - 380))
        | (1ULL << (MySQLParser::OFFLINE - 380))
        | (1ULL << (MySQLParser::OFFSET - 380))
        | (1ULL << (MySQLParser::OJ - 380))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
        | (1ULL << (MySQLParser::ONE - 380))
        | (1ULL << (MySQLParser::ONLINE - 380))
        | (1ULL << (MySQLParser::ONLY - 380))
        | (1ULL << (MySQLParser::OPEN - 380))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
        | (1ULL << (MySQLParser::OPTIONS - 380))
        | (1ULL << (MySQLParser::OWNER - 380))
        | (1ULL << (MySQLParser::PACK_KEYS - 380))
        | (1ULL << (MySQLParser::PAGE - 380))
        | (1ULL << (MySQLParser::PARSER - 380))
        | (1ULL << (MySQLParser::PARTIAL - 380))
        | (1ULL << (MySQLParser::PARTITIONING - 380))
        | (1ULL << (MySQLParser::PARTITIONS - 380))
        | (1ULL << (MySQLParser::PASSWORD - 380))
        | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
        | (1ULL << (MySQLParser::PLUGINS - 444))
        | (1ULL << (MySQLParser::PORT - 444))
        | (1ULL << (MySQLParser::PRECEDES - 444))
        | (1ULL << (MySQLParser::PREPARE - 444))
        | (1ULL << (MySQLParser::PRESERVE - 444))
        | (1ULL << (MySQLParser::PREV - 444))
        | (1ULL << (MySQLParser::PROCESSLIST - 444))
        | (1ULL << (MySQLParser::PROFILE - 444))
        | (1ULL << (MySQLParser::PROFILES - 444))
        | (1ULL << (MySQLParser::PROXY - 444))
        | (1ULL << (MySQLParser::QUERY - 444))
        | (1ULL << (MySQLParser::QUICK - 444))
        | (1ULL << (MySQLParser::REBUILD - 444))
        | (1ULL << (MySQLParser::RECOVER - 444))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
        | (1ULL << (MySQLParser::REDUNDANT - 444))
        | (1ULL << (MySQLParser::RELAY - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
        | (1ULL << (MySQLParser::RELAYLOG - 444))
        | (1ULL << (MySQLParser::REMOVE - 444))
        | (1ULL << (MySQLParser::REORGANIZE - 444))
        | (1ULL << (MySQLParser::REPAIR - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
        | (1ULL << (MySQLParser::REPLICATION - 444))
        | (1ULL << (MySQLParser::RESET - 444))
        | (1ULL << (MySQLParser::RESUME - 444))
        | (1ULL << (MySQLParser::RETURNS - 444))
        | (1ULL << (MySQLParser::ROLLBACK - 444))
        | (1ULL << (MySQLParser::ROLLUP - 444))
        | (1ULL << (MySQLParser::ROTATE - 444))
        | (1ULL << (MySQLParser::ROW - 444))
        | (1ULL << (MySQLParser::ROWS - 444))
        | (1ULL << (MySQLParser::ROW_FORMAT - 444))
        | (1ULL << (MySQLParser::SAVEPOINT - 444))
        | (1ULL << (MySQLParser::SCHEDULE - 444))
        | (1ULL << (MySQLParser::SECURITY - 444))
        | (1ULL << (MySQLParser::SERVER - 444))
        | (1ULL << (MySQLParser::SESSION - 444))
        | (1ULL << (MySQLParser::SHARE - 444))
        | (1ULL << (MySQLParser::SHARED - 444))
        | (1ULL << (MySQLParser::SIGNED - 444))
        | (1ULL << (MySQLParser::SIMPLE - 444))
        | (1ULL << (MySQLParser::SLAVE - 444))
        | (1ULL << (MySQLParser::SLOW - 444))
        | (1ULL << (MySQLParser::SNAPSHOT - 444))
        | (1ULL << (MySQLParser::SOCKET - 444))
        | (1ULL << (MySQLParser::SOME - 444))
        | (1ULL << (MySQLParser::SONAME - 444))
        | (1ULL << (MySQLParser::SOUNDS - 444))
        | (1ULL << (MySQLParser::SOURCE - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
        | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
        | (1ULL << (MySQLParser::SQL_THREAD - 508))
        | (1ULL << (MySQLParser::START - 508))
        | (1ULL << (MySQLParser::STARTS - 508))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
        | (1ULL << (MySQLParser::STATUS - 508))
        | (1ULL << (MySQLParser::STOP - 508))
        | (1ULL << (MySQLParser::STORAGE - 508))
        | (1ULL << (MySQLParser::STRING - 508))
        | (1ULL << (MySQLParser::SUBJECT - 508))
        | (1ULL << (MySQLParser::SUBPARTITION - 508))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
        | (1ULL << (MySQLParser::SUSPEND - 508))
        | (1ULL << (MySQLParser::SWAPS - 508))
        | (1ULL << (MySQLParser::SWITCHES - 508))
        | (1ULL << (MySQLParser::TABLESPACE - 508))
        | (1ULL << (MySQLParser::TEMPORARY - 508))
        | (1ULL << (MySQLParser::TEMPTABLE - 508))
        | (1ULL << (MySQLParser::THAN - 508))
        | (1ULL << (MySQLParser::TRADITIONAL - 508))
        | (1ULL << (MySQLParser::TRANSACTION - 508))
        | (1ULL << (MySQLParser::TRIGGERS - 508))
        | (1ULL << (MySQLParser::TRUNCATE - 508))
        | (1ULL << (MySQLParser::UNDEFINED - 508))
        | (1ULL << (MySQLParser::UNDOFILE - 508))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
        | (1ULL << (MySQLParser::UNINSTALL - 508))
        | (1ULL << (MySQLParser::UNKNOWN - 508))
        | (1ULL << (MySQLParser::UNTIL - 508))
        | (1ULL << (MySQLParser::UPGRADE - 508))
        | (1ULL << (MySQLParser::USER - 508))
        | (1ULL << (MySQLParser::USE_FRM - 508))
        | (1ULL << (MySQLParser::USER_RESOURCES - 508))
        | (1ULL << (MySQLParser::VALIDATION - 508))
        | (1ULL << (MySQLParser::VALUE - 508))
        | (1ULL << (MySQLParser::VARIABLES - 508))
        | (1ULL << (MySQLParser::VIEW - 508))
        | (1ULL << (MySQLParser::VISIBLE - 508))
        | (1ULL << (MySQLParser::WAIT - 508))
        | (1ULL << (MySQLParser::WARNINGS - 508))
        | (1ULL << (MySQLParser::WITHOUT - 508))
        | (1ULL << (MySQLParser::WORK - 508))
        | (1ULL << (MySQLParser::WRAPPER - 508))
        | (1ULL << (MySQLParser::X509 - 508))
        | (1ULL << (MySQLParser::XA - 508))
        | (1ULL << (MySQLParser::XML - 508))
        | (1ULL << (MySQLParser::INTERNAL - 508))
        | (1ULL << (MySQLParser::QUARTER - 508))
        | (1ULL << (MySQLParser::MONTH - 508))
        | (1ULL << (MySQLParser::DAY - 508))
        | (1ULL << (MySQLParser::HOUR - 508))
        | (1ULL << (MySQLParser::MINUTE - 508))
        | (1ULL << (MySQLParser::WEEK - 508))
        | (1ULL << (MySQLParser::SECOND - 508))
        | (1ULL << (MySQLParser::MICROSECOND - 508))
        | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
        | (1ULL << (MySQLParser::EXECUTE - 572))
        | (1ULL << (MySQLParser::FILE - 572))
        | (1ULL << (MySQLParser::PROCESS - 572))
        | (1ULL << (MySQLParser::RELOAD - 572))
        | (1ULL << (MySQLParser::SHUTDOWN - 572))
        | (1ULL << (MySQLParser::SUPER - 572))
        | (1ULL << (MySQLParser::PRIVILEGES - 572))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
        | (1ULL << (MySQLParser::ARMSCII8 - 572))
        | (1ULL << (MySQLParser::ASCII - 572))
        | (1ULL << (MySQLParser::BIG5 - 572))
        | (1ULL << (MySQLParser::CP1250 - 572))
        | (1ULL << (MySQLParser::CP1251 - 572))
        | (1ULL << (MySQLParser::CP1256 - 572))
        | (1ULL << (MySQLParser::CP1257 - 572))
        | (1ULL << (MySQLParser::CP850 - 572))
        | (1ULL << (MySQLParser::CP852 - 572))
        | (1ULL << (MySQLParser::CP866 - 572))
        | (1ULL << (MySQLParser::CP932 - 572))
        | (1ULL << (MySQLParser::DEC8 - 572))
        | (1ULL << (MySQLParser::EUCJPMS - 572))
        | (1ULL << (MySQLParser::EUCKR - 572))
        | (1ULL << (MySQLParser::GB2312 - 572))
        | (1ULL << (MySQLParser::GBK - 572))
        | (1ULL << (MySQLParser::GEOSTD8 - 572))
        | (1ULL << (MySQLParser::GREEK - 572))
        | (1ULL << (MySQLParser::HEBREW - 572))
        | (1ULL << (MySQLParser::HP8 - 572))
        | (1ULL << (MySQLParser::KEYBCS2 - 572))
        | (1ULL << (MySQLParser::KOI8R - 572))
        | (1ULL << (MySQLParser::KOI8U - 572))
        | (1ULL << (MySQLParser::LATIN1 - 572))
        | (1ULL << (MySQLParser::LATIN2 - 572))
        | (1ULL << (MySQLParser::LATIN5 - 572))
        | (1ULL << (MySQLParser::LATIN7 - 572))
        | (1ULL << (MySQLParser::MACCE - 572))
        | (1ULL << (MySQLParser::MACROMAN - 572))
        | (1ULL << (MySQLParser::SJIS - 572))
        | (1ULL << (MySQLParser::SWE7 - 572))
        | (1ULL << (MySQLParser::TIS620 - 572))
        | (1ULL << (MySQLParser::UCS2 - 572))
        | (1ULL << (MySQLParser::UJIS - 572))
        | (1ULL << (MySQLParser::UTF16 - 572))
        | (1ULL << (MySQLParser::UTF16LE - 572))
        | (1ULL << (MySQLParser::UTF32 - 572))
        | (1ULL << (MySQLParser::UTF8 - 572))
        | (1ULL << (MySQLParser::UTF8MB3 - 572))
        | (1ULL << (MySQLParser::UTF8MB4 - 572))
        | (1ULL << (MySQLParser::ARCHIVE - 572))
        | (1ULL << (MySQLParser::BLACKHOLE - 572))
        | (1ULL << (MySQLParser::CSV - 572))
        | (1ULL << (MySQLParser::FEDERATED - 572))
        | (1ULL << (MySQLParser::INNODB - 572))
        | (1ULL << (MySQLParser::MEMORY - 572))
        | (1ULL << (MySQLParser::MRG_MYISAM - 572))
        | (1ULL << (MySQLParser::MYISAM - 572))
        | (1ULL << (MySQLParser::NDB - 572))
        | (1ULL << (MySQLParser::NDBCLUSTER - 572))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
        | (1ULL << (MySQLParser::TOKUDB - 572))
        | (1ULL << (MySQLParser::REPEATABLE - 572))
        | (1ULL << (MySQLParser::COMMITTED - 572))
        | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
        | (1ULL << (MySQLParser::LINESTRING - 636))
        | (1ULL << (MySQLParser::MULTILINESTRING - 636))
        | (1ULL << (MySQLParser::MULTIPOINT - 636))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
        | (1ULL << (MySQLParser::POINT - 636))
        | (1ULL << (MySQLParser::POLYGON - 636))
        | (1ULL << (MySQLParser::ABS - 636))
        | (1ULL << (MySQLParser::ACOS - 636))
        | (1ULL << (MySQLParser::ADDDATE - 636))
        | (1ULL << (MySQLParser::ADDTIME - 636))
        | (1ULL << (MySQLParser::AES_DECRYPT - 636))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
        | (1ULL << (MySQLParser::AREA - 636))
        | (1ULL << (MySQLParser::ASBINARY - 636))
        | (1ULL << (MySQLParser::ASIN - 636))
        | (1ULL << (MySQLParser::ASTEXT - 636))
        | (1ULL << (MySQLParser::ASWKB - 636))
        | (1ULL << (MySQLParser::ASWKT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
        | (1ULL << (MySQLParser::ATAN - 636))
        | (1ULL << (MySQLParser::ATAN2 - 636))
        | (1ULL << (MySQLParser::BENCHMARK - 636))
        | (1ULL << (MySQLParser::BIN - 636))
        | (1ULL << (MySQLParser::BIT_COUNT - 636))
        | (1ULL << (MySQLParser::BIT_LENGTH - 636))
        | (1ULL << (MySQLParser::BUFFER - 636))
        | (1ULL << (MySQLParser::CEIL - 636))
        | (1ULL << (MySQLParser::CEILING - 636))
        | (1ULL << (MySQLParser::CENTROID - 636))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
        | (1ULL << (MySQLParser::CHARSET - 636))
        | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
        | (1ULL << (MySQLParser::COERCIBILITY - 636))
        | (1ULL << (MySQLParser::COLLATION - 636))
        | (1ULL << (MySQLParser::COMPRESS - 636))
        | (1ULL << (MySQLParser::CONCAT - 636))
        | (1ULL << (MySQLParser::CONCAT_WS - 636))
        | (1ULL << (MySQLParser::CONNECTION_ID - 636))
        | (1ULL << (MySQLParser::CONV - 636))
        | (1ULL << (MySQLParser::CONVERT_TZ - 636))
        | (1ULL << (MySQLParser::COS - 636))
        | (1ULL << (MySQLParser::COT - 636))
        | (1ULL << (MySQLParser::CRC32 - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
        | (1ULL << (MySQLParser::CROSSES - 636))
        | (1ULL << (MySQLParser::DATEDIFF - 636))
        | (1ULL << (MySQLParser::DATE_FORMAT - 636))
        | (1ULL << (MySQLParser::DAYNAME - 636))
        | (1ULL << (MySQLParser::DAYOFMONTH - 636))
        | (1ULL << (MySQLParser::DAYOFWEEK - 636))
        | (1ULL << (MySQLParser::DAYOFYEAR - 636))
        | (1ULL << (MySQLParser::DECODE - 636))
        | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
        | (1ULL << (MySQLParser::DIMENSION - 700))
        | (1ULL << (MySQLParser::DISJOINT - 700))
        | (1ULL << (MySQLParser::ELT - 700))
        | (1ULL << (MySQLParser::ENCODE - 700))
        | (1ULL << (MySQLParser::ENCRYPT - 700))
        | (1ULL << (MySQLParser::ENDPOINT - 700))
        | (1ULL << (MySQLParser::ENVELOPE - 700))
        | (1ULL << (MySQLParser::EQUALS - 700))
        | (1ULL << (MySQLParser::EXP - 700))
        | (1ULL << (MySQLParser::EXPORT_SET - 700))
        | (1ULL << (MySQLParser::EXTERIORRING - 700))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
        | (1ULL << (MySQLParser::FIELD - 700))
        | (1ULL << (MySQLParser::FIND_IN_SET - 700))
        | (1ULL << (MySQLParser::FLOOR - 700))
        | (1ULL << (MySQLParser::FORMAT - 700))
        | (1ULL << (MySQLParser::FOUND_ROWS - 700))
        | (1ULL << (MySQLParser::FROM_BASE64 - 700))
        | (1ULL << (MySQLParser::FROM_DAYS - 700))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
        | (1ULL << (MySQLParser::GEOMETRYN - 700))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
        | (1ULL << (MySQLParser::GET_FORMAT - 700))
        | (1ULL << (MySQLParser::GET_LOCK - 700))
        | (1ULL << (MySQLParser::GLENGTH - 700))
        | (1ULL << (MySQLParser::GREATEST - 700))
        | (1ULL << (MySQLParser::GTID_SUBSET - 700))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
        | (1ULL << (MySQLParser::HEX - 700))
        | (1ULL << (MySQLParser::IFNULL - 700))
        | (1ULL << (MySQLParser::INET6_ATON - 700))
        | (1ULL << (MySQLParser::INET6_NTOA - 700))
        | (1ULL << (MySQLParser::INET_ATON - 700))
        | (1ULL << (MySQLParser::INET_NTOA - 700))
        | (1ULL << (MySQLParser::INSTR - 700))
        | (1ULL << (MySQLParser::INTERIORRINGN - 700))
        | (1ULL << (MySQLParser::INTERSECTS - 700))
        | (1ULL << (MySQLParser::ISCLOSED - 700))
        | (1ULL << (MySQLParser::ISEMPTY - 700))
        | (1ULL << (MySQLParser::ISNULL - 700))
        | (1ULL << (MySQLParser::ISSIMPLE - 700))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
        | (1ULL << (MySQLParser::IS_IPV4 - 700))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
        | (1ULL << (MySQLParser::IS_IPV6 - 700))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
        | (1ULL << (MySQLParser::LCASE - 700))
        | (1ULL << (MySQLParser::LEAST - 700))
        | (1ULL << (MySQLParser::LENGTH - 700))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
        | (1ULL << (MySQLParser::LINEFROMWKB - 700))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::LN - 764))
        | (1ULL << (MySQLParser::LOAD_FILE - 764))
        | (1ULL << (MySQLParser::LOCATE - 764))
        | (1ULL << (MySQLParser::LOG - 764))
        | (1ULL << (MySQLParser::LOG10 - 764))
        | (1ULL << (MySQLParser::LOG2 - 764))
        | (1ULL << (MySQLParser::LOWER - 764))
        | (1ULL << (MySQLParser::LPAD - 764))
        | (1ULL << (MySQLParser::LTRIM - 764))
        | (1ULL << (MySQLParser::MAKEDATE - 764))
        | (1ULL << (MySQLParser::MAKETIME - 764))
        | (1ULL << (MySQLParser::MAKE_SET - 764))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
        | (1ULL << (MySQLParser::MBRCONTAINS - 764))
        | (1ULL << (MySQLParser::MBRDISJOINT - 764))
        | (1ULL << (MySQLParser::MBREQUAL - 764))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
        | (1ULL << (MySQLParser::MBROVERLAPS - 764))
        | (1ULL << (MySQLParser::MBRTOUCHES - 764))
        | (1ULL << (MySQLParser::MBRWITHIN - 764))
        | (1ULL << (MySQLParser::MD5 - 764))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
        | (1ULL << (MySQLParser::MONTHNAME - 764))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::NAME_CONST - 764))
        | (1ULL << (MySQLParser::NULLIF - 764))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
        | (1ULL << (MySQLParser::NUMPOINTS - 764))
        | (1ULL << (MySQLParser::OCT - 764))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
        | (1ULL << (MySQLParser::ORD - 764))
        | (1ULL << (MySQLParser::OVERLAPS - 764))
        | (1ULL << (MySQLParser::PERIOD_ADD - 764))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
        | (1ULL << (MySQLParser::PI - 764))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
        | (1ULL << (MySQLParser::POINTFROMWKB - 764))
        | (1ULL << (MySQLParser::POINTN - 764))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYFROMWKB - 764))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
        | (1ULL << (MySQLParser::POW - 764))
        | (1ULL << (MySQLParser::POWER - 764))
        | (1ULL << (MySQLParser::QUOTE - 764))
        | (1ULL << (MySQLParser::RADIANS - 764))
        | (1ULL << (MySQLParser::RAND - 764))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
        | (1ULL << (MySQLParser::REVERSE - 764))
        | (1ULL << (MySQLParser::ROUND - 764))
        | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
        | (1ULL << (MySQLParser::RTRIM - 828))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
        | (1ULL << (MySQLParser::SESSION_USER - 828))
        | (1ULL << (MySQLParser::SHA - 828))
        | (1ULL << (MySQLParser::SHA1 - 828))
        | (1ULL << (MySQLParser::SHA2 - 828))
        | (1ULL << (MySQLParser::SIGN - 828))
        | (1ULL << (MySQLParser::SIN - 828))
        | (1ULL << (MySQLParser::SLEEP - 828))
        | (1ULL << (MySQLParser::SOUNDEX - 828))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
        | (1ULL << (MySQLParser::SQRT - 828))
        | (1ULL << (MySQLParser::SRID - 828))
        | (1ULL << (MySQLParser::STARTPOINT - 828))
        | (1ULL << (MySQLParser::STRCMP - 828))
        | (1ULL << (MySQLParser::STR_TO_DATE - 828))
        | (1ULL << (MySQLParser::ST_AREA - 828))
        | (1ULL << (MySQLParser::ST_ASBINARY - 828))
        | (1ULL << (MySQLParser::ST_ASTEXT - 828))
        | (1ULL << (MySQLParser::ST_ASWKB - 828))
        | (1ULL << (MySQLParser::ST_ASWKT - 828))
        | (1ULL << (MySQLParser::ST_BUFFER - 828))
        | (1ULL << (MySQLParser::ST_CENTROID - 828))
        | (1ULL << (MySQLParser::ST_CONTAINS - 828))
        | (1ULL << (MySQLParser::ST_CROSSES - 828))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
        | (1ULL << (MySQLParser::ST_DIMENSION - 828))
        | (1ULL << (MySQLParser::ST_DISJOINT - 828))
        | (1ULL << (MySQLParser::ST_DISTANCE - 828))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
        | (1ULL << (MySQLParser::ST_EQUALS - 828))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
        | (1ULL << (MySQLParser::ST_POINTN - 828))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
        | (1ULL << (MySQLParser::ST_SRID - 892))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
        | (1ULL << (MySQLParser::ST_TOUCHES - 892))
        | (1ULL << (MySQLParser::ST_UNION - 892))
        | (1ULL << (MySQLParser::ST_WITHIN - 892))
        | (1ULL << (MySQLParser::ST_X - 892))
        | (1ULL << (MySQLParser::ST_Y - 892))
        | (1ULL << (MySQLParser::SUBDATE - 892))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
        | (1ULL << (MySQLParser::SUBTIME - 892))
        | (1ULL << (MySQLParser::SYSTEM_USER - 892))
        | (1ULL << (MySQLParser::TAN - 892))
        | (1ULL << (MySQLParser::TIMEDIFF - 892))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
        | (1ULL << (MySQLParser::TIME_FORMAT - 892))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
        | (1ULL << (MySQLParser::TOUCHES - 892))
        | (1ULL << (MySQLParser::TO_BASE64 - 892))
        | (1ULL << (MySQLParser::TO_DAYS - 892))
        | (1ULL << (MySQLParser::TO_SECONDS - 892))
        | (1ULL << (MySQLParser::UCASE - 892))
        | (1ULL << (MySQLParser::UNCOMPRESS - 892))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
        | (1ULL << (MySQLParser::UNHEX - 892))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
        | (1ULL << (MySQLParser::UPDATEXML - 892))
        | (1ULL << (MySQLParser::UPPER - 892))
        | (1ULL << (MySQLParser::UUID - 892))
        | (1ULL << (MySQLParser::UUID_SHORT - 892))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
        | (1ULL << (MySQLParser::VERSION - 892))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
        | (1ULL << (MySQLParser::WEEKDAY - 892))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
        | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
        | (1ULL << (MySQLParser::WITHIN - 892))
        | (1ULL << (MySQLParser::YEARWEEK - 892))
        | (1ULL << (MySQLParser::Y_FUNCTION - 892))
        | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
        | (1ULL << (MySQLParser::STRING_LITERAL - 974))
        | (1ULL << (MySQLParser::ID - 974))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
        setState(2360);
        dynamic_cast<AlterByAddForeignKeyContext *>(_localctx)->indexName = uid();
      }
      setState(2363);
      indexColumnNames();
      setState(2364);
      referenceDefinition();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddCheckTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(2366);
      match(MySQLParser::ADD);
      setState(2371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CONSTRAINT) {
        setState(2367);
        match(MySQLParser::CONSTRAINT);
        setState(2369);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(2368);
          dynamic_cast<AlterByAddCheckTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(2373);
      match(MySQLParser::CHECK);
      setState(2374);
      match(MySQLParser::LR_BRACKET);
      setState(2375);
      expression(0);
      setState(2376);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterBySetAlgorithmContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(2378);
      match(MySQLParser::ALGORITHM);
      setState(2380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(2379);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(2382);
      dynamic_cast<AlterBySetAlgorithmContext *>(_localctx)->algType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::COPY

      || _la == MySQLParser::INPLACE)) {
        dynamic_cast<AlterBySetAlgorithmContext *>(_localctx)->algType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 11: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByChangeDefaultContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(2383);
      match(MySQLParser::ALTER);
      setState(2385);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLUMN) {
        setState(2384);
        match(MySQLParser::COLUMN);
      }
      setState(2387);
      uid();
      setState(2393);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::SET: {
          setState(2388);
          match(MySQLParser::SET);
          setState(2389);
          match(MySQLParser::DEFAULT);
          setState(2390);
          defaultValue();
          break;
        }

        case MySQLParser::DROP: {
          setState(2391);
          match(MySQLParser::DROP);
          setState(2392);
          match(MySQLParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByChangeColumnContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(2395);
      match(MySQLParser::CHANGE);
      setState(2397);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLUMN) {
        setState(2396);
        match(MySQLParser::COLUMN);
      }
      setState(2399);
      dynamic_cast<AlterByChangeColumnContext *>(_localctx)->oldColumn = uid();
      setState(2400);
      dynamic_cast<AlterByChangeColumnContext *>(_localctx)->newColumn = uid();
      setState(2401);
      columnDefinition();
      setState(2405);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::FIRST: {
          setState(2402);
          match(MySQLParser::FIRST);
          break;
        }

        case MySQLParser::AFTER: {
          setState(2403);
          match(MySQLParser::AFTER);
          setState(2404);
          dynamic_cast<AlterByChangeColumnContext *>(_localctx)->afterColumn = uid();
          break;
        }

        case MySQLParser::EOF:
        case MySQLParser::ALTER:
        case MySQLParser::ANALYZE:
        case MySQLParser::CALL:
        case MySQLParser::CHANGE:
        case MySQLParser::CHECK:
        case MySQLParser::CREATE:
        case MySQLParser::DELETE:
        case MySQLParser::DESC:
        case MySQLParser::DESCRIBE:
        case MySQLParser::DROP:
        case MySQLParser::EXPLAIN:
        case MySQLParser::GRANT:
        case MySQLParser::INSERT:
        case MySQLParser::KILL:
        case MySQLParser::LOAD:
        case MySQLParser::LOCK:
        case MySQLParser::OPTIMIZE:
        case MySQLParser::PARTITION:
        case MySQLParser::PURGE:
        case MySQLParser::RELEASE:
        case MySQLParser::RENAME:
        case MySQLParser::REPLACE:
        case MySQLParser::REVOKE:
        case MySQLParser::SELECT:
        case MySQLParser::SET:
        case MySQLParser::SHOW:
        case MySQLParser::UNLOCK:
        case MySQLParser::UPDATE:
        case MySQLParser::USE:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::CACHE:
        case MySQLParser::CHECKSUM:
        case MySQLParser::COMMIT:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DO:
        case MySQLParser::FLUSH:
        case MySQLParser::HANDLER:
        case MySQLParser::HELP:
        case MySQLParser::INSTALL:
        case MySQLParser::PREPARE:
        case MySQLParser::REPAIR:
        case MySQLParser::RESET:
        case MySQLParser::ROLLBACK:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::START:
        case MySQLParser::STOP:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::XA:
        case MySQLParser::EXECUTE:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::MINUSMINUS:
        case MySQLParser::LR_BRACKET:
        case MySQLParser::COMMA:
        case MySQLParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 13: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByRenameColumnContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(2407);
      match(MySQLParser::RENAME);
      setState(2408);
      match(MySQLParser::COLUMN);
      setState(2409);
      dynamic_cast<AlterByRenameColumnContext *>(_localctx)->oldColumn = uid();
      setState(2410);
      match(MySQLParser::TO);
      setState(2411);
      dynamic_cast<AlterByRenameColumnContext *>(_localctx)->newColumn = uid();
      break;
    }

    case 14: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByLockContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(2413);
      match(MySQLParser::LOCK);
      setState(2415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(2414);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(2417);
      dynamic_cast<AlterByLockContext *>(_localctx)->lockType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::EXCLUSIVE || _la == MySQLParser::NONE || _la == MySQLParser::SHARED)) {
        dynamic_cast<AlterByLockContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByModifyColumnContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(2418);
      match(MySQLParser::MODIFY);
      setState(2420);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLUMN) {
        setState(2419);
        match(MySQLParser::COLUMN);
      }
      setState(2422);
      uid();
      setState(2423);
      columnDefinition();
      setState(2427);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::FIRST: {
          setState(2424);
          match(MySQLParser::FIRST);
          break;
        }

        case MySQLParser::AFTER: {
          setState(2425);
          match(MySQLParser::AFTER);
          setState(2426);
          uid();
          break;
        }

        case MySQLParser::EOF:
        case MySQLParser::ALTER:
        case MySQLParser::ANALYZE:
        case MySQLParser::CALL:
        case MySQLParser::CHANGE:
        case MySQLParser::CHECK:
        case MySQLParser::CREATE:
        case MySQLParser::DELETE:
        case MySQLParser::DESC:
        case MySQLParser::DESCRIBE:
        case MySQLParser::DROP:
        case MySQLParser::EXPLAIN:
        case MySQLParser::GRANT:
        case MySQLParser::INSERT:
        case MySQLParser::KILL:
        case MySQLParser::LOAD:
        case MySQLParser::LOCK:
        case MySQLParser::OPTIMIZE:
        case MySQLParser::PARTITION:
        case MySQLParser::PURGE:
        case MySQLParser::RELEASE:
        case MySQLParser::RENAME:
        case MySQLParser::REPLACE:
        case MySQLParser::REVOKE:
        case MySQLParser::SELECT:
        case MySQLParser::SET:
        case MySQLParser::SHOW:
        case MySQLParser::UNLOCK:
        case MySQLParser::UPDATE:
        case MySQLParser::USE:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::CACHE:
        case MySQLParser::CHECKSUM:
        case MySQLParser::COMMIT:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DO:
        case MySQLParser::FLUSH:
        case MySQLParser::HANDLER:
        case MySQLParser::HELP:
        case MySQLParser::INSTALL:
        case MySQLParser::PREPARE:
        case MySQLParser::REPAIR:
        case MySQLParser::RESET:
        case MySQLParser::ROLLBACK:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::START:
        case MySQLParser::STOP:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::XA:
        case MySQLParser::EXECUTE:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::MINUSMINUS:
        case MySQLParser::LR_BRACKET:
        case MySQLParser::COMMA:
        case MySQLParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 16: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDropColumnContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(2429);
      match(MySQLParser::DROP);
      setState(2431);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLUMN) {
        setState(2430);
        match(MySQLParser::COLUMN);
      }
      setState(2433);
      uid();
      setState(2435);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::RESTRICT) {
        setState(2434);
        match(MySQLParser::RESTRICT);
      }
      break;
    }

    case 17: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDropPrimaryKeyContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(2437);
      match(MySQLParser::DROP);
      setState(2438);
      match(MySQLParser::PRIMARY);
      setState(2439);
      match(MySQLParser::KEY);
      break;
    }

    case 18: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByRenameIndexContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(2440);
      match(MySQLParser::RENAME);
      setState(2441);
      dynamic_cast<AlterByRenameIndexContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY)) {
        dynamic_cast<AlterByRenameIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2442);
      uid();
      setState(2443);
      match(MySQLParser::TO);
      setState(2444);
      uid();
      break;
    }

    case 19: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDropIndexContext>(_localctx));
      enterOuterAlt(_localctx, 19);
      setState(2446);
      match(MySQLParser::DROP);
      setState(2447);
      dynamic_cast<AlterByDropIndexContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY)) {
        dynamic_cast<AlterByDropIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2448);
      uid();
      break;
    }

    case 20: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDropForeignKeyContext>(_localctx));
      enterOuterAlt(_localctx, 20);
      setState(2449);
      match(MySQLParser::DROP);
      setState(2450);
      match(MySQLParser::FOREIGN);
      setState(2451);
      match(MySQLParser::KEY);
      setState(2452);
      uid();
      break;
    }

    case 21: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDisableKeysContext>(_localctx));
      enterOuterAlt(_localctx, 21);
      setState(2453);
      match(MySQLParser::DISABLE);
      setState(2454);
      match(MySQLParser::KEYS);
      break;
    }

    case 22: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByEnableKeysContext>(_localctx));
      enterOuterAlt(_localctx, 22);
      setState(2455);
      match(MySQLParser::ENABLE);
      setState(2456);
      match(MySQLParser::KEYS);
      break;
    }

    case 23: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByRenameContext>(_localctx));
      enterOuterAlt(_localctx, 23);
      setState(2457);
      match(MySQLParser::RENAME);
      setState(2459);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS || _la == MySQLParser::TO) {
        setState(2458);
        dynamic_cast<AlterByRenameContext *>(_localctx)->renameFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::AS || _la == MySQLParser::TO)) {
          dynamic_cast<AlterByRenameContext *>(_localctx)->renameFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2463);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
      case 1: {
        setState(2461);
        uid();
        break;
      }

      case 2: {
        setState(2462);
        fullId();
        break;
      }

      }
      break;
    }

    case 24: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByOrderContext>(_localctx));
      enterOuterAlt(_localctx, 24);
      setState(2465);
      match(MySQLParser::ORDER);
      setState(2466);
      match(MySQLParser::BY);
      setState(2467);
      uidList();
      break;
    }

    case 25: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByConvertCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 25);
      setState(2468);
      match(MySQLParser::CONVERT);
      setState(2469);
      match(MySQLParser::TO);
      setState(2470);
      match(MySQLParser::CHARACTER);
      setState(2471);
      match(MySQLParser::SET);
      setState(2472);
      charsetName();
      setState(2475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLLATE) {
        setState(2473);
        match(MySQLParser::COLLATE);
        setState(2474);
        collationName();
      }
      break;
    }

    case 26: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDefaultCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 26);
      setState(2478);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DEFAULT) {
        setState(2477);
        match(MySQLParser::DEFAULT);
      }
      setState(2480);
      match(MySQLParser::CHARACTER);
      setState(2481);
      match(MySQLParser::SET);
      setState(2482);
      match(MySQLParser::EQUAL_SYMBOL);
      setState(2483);
      charsetName();
      setState(2487);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COLLATE) {
        setState(2484);
        match(MySQLParser::COLLATE);
        setState(2485);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(2486);
        collationName();
      }
      break;
    }

    case 27: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDiscardTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 27);
      setState(2489);
      match(MySQLParser::DISCARD);
      setState(2490);
      match(MySQLParser::TABLESPACE);
      break;
    }

    case 28: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByImportTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 28);
      setState(2491);
      match(MySQLParser::IMPORT);
      setState(2492);
      match(MySQLParser::TABLESPACE);
      break;
    }

    case 29: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByForceContext>(_localctx));
      enterOuterAlt(_localctx, 29);
      setState(2493);
      match(MySQLParser::FORCE);
      break;
    }

    case 30: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByValidateContext>(_localctx));
      enterOuterAlt(_localctx, 30);
      setState(2494);
      dynamic_cast<AlterByValidateContext *>(_localctx)->validationFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::WITH || _la == MySQLParser::WITHOUT)) {
        dynamic_cast<AlterByValidateContext *>(_localctx)->validationFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2495);
      match(MySQLParser::VALIDATION);
      break;
    }

    case 31: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAddPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 31);
      setState(2496);
      match(MySQLParser::ADD);
      setState(2497);
      match(MySQLParser::PARTITION);
      setState(2498);
      match(MySQLParser::LR_BRACKET);
      setState(2499);
      partitionDefinition();
      setState(2504);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2500);
        match(MySQLParser::COMMA);
        setState(2501);
        partitionDefinition();
        setState(2506);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2507);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 32: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDropPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 32);
      setState(2509);
      match(MySQLParser::DROP);
      setState(2510);
      match(MySQLParser::PARTITION);
      setState(2511);
      uidList();
      break;
    }

    case 33: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByDiscardPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 33);
      setState(2512);
      match(MySQLParser::DISCARD);
      setState(2513);
      match(MySQLParser::PARTITION);
      setState(2516);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2514);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2515);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2518);
      match(MySQLParser::TABLESPACE);
      break;
    }

    case 34: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByImportPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 34);
      setState(2519);
      match(MySQLParser::IMPORT);
      setState(2520);
      match(MySQLParser::PARTITION);
      setState(2523);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2521);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2522);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2525);
      match(MySQLParser::TABLESPACE);
      break;
    }

    case 35: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByTruncatePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 35);
      setState(2526);
      match(MySQLParser::TRUNCATE);
      setState(2527);
      match(MySQLParser::PARTITION);
      setState(2530);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2528);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2529);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 36: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByCoalescePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 36);
      setState(2532);
      match(MySQLParser::COALESCE);
      setState(2533);
      match(MySQLParser::PARTITION);
      setState(2534);
      decimalLiteral();
      break;
    }

    case 37: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByReorganizePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 37);
      setState(2535);
      match(MySQLParser::REORGANIZE);
      setState(2536);
      match(MySQLParser::PARTITION);
      setState(2537);
      uidList();
      setState(2538);
      match(MySQLParser::INTO);
      setState(2539);
      match(MySQLParser::LR_BRACKET);
      setState(2540);
      partitionDefinition();
      setState(2545);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2541);
        match(MySQLParser::COMMA);
        setState(2542);
        partitionDefinition();
        setState(2547);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2548);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 38: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByExchangePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 38);
      setState(2550);
      match(MySQLParser::EXCHANGE);
      setState(2551);
      match(MySQLParser::PARTITION);
      setState(2552);
      uid();
      setState(2553);
      match(MySQLParser::WITH);
      setState(2554);
      match(MySQLParser::TABLE);
      setState(2555);
      tableName();
      setState(2558);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::WITH || _la == MySQLParser::WITHOUT) {
        setState(2556);
        dynamic_cast<AlterByExchangePartitionContext *>(_localctx)->validationFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::WITH || _la == MySQLParser::WITHOUT)) {
          dynamic_cast<AlterByExchangePartitionContext *>(_localctx)->validationFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2557);
        match(MySQLParser::VALIDATION);
      }
      break;
    }

    case 39: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByAnalyzePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 39);
      setState(2560);
      match(MySQLParser::ANALYZE);
      setState(2561);
      match(MySQLParser::PARTITION);
      setState(2564);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2562);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2563);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 40: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByCheckPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 40);
      setState(2566);
      match(MySQLParser::CHECK);
      setState(2567);
      match(MySQLParser::PARTITION);
      setState(2570);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2568);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2569);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 41: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByOptimizePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 41);
      setState(2572);
      match(MySQLParser::OPTIMIZE);
      setState(2573);
      match(MySQLParser::PARTITION);
      setState(2576);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2574);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2575);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 42: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByRebuildPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 42);
      setState(2578);
      match(MySQLParser::REBUILD);
      setState(2579);
      match(MySQLParser::PARTITION);
      setState(2582);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2580);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2581);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 43: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByRepairPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 43);
      setState(2584);
      match(MySQLParser::REPAIR);
      setState(2585);
      match(MySQLParser::PARTITION);
      setState(2588);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(2586);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(2587);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 44: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByRemovePartitioningContext>(_localctx));
      enterOuterAlt(_localctx, 44);
      setState(2590);
      match(MySQLParser::REMOVE);
      setState(2591);
      match(MySQLParser::PARTITIONING);
      break;
    }

    case 45: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySQLParser::AlterByUpgradePartitioningContext>(_localctx));
      enterOuterAlt(_localctx, 45);
      setState(2592);
      match(MySQLParser::UPGRADE);
      setState(2593);
      match(MySQLParser::PARTITIONING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropDatabaseContext ------------------------------------------------------------------

MySQLParser::DropDatabaseContext::DropDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropDatabaseContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

MySQLParser::UidContext* MySQLParser::DropDatabaseContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::DropDatabaseContext::DATABASE() {
  return getToken(MySQLParser::DATABASE, 0);
}

tree::TerminalNode* MySQLParser::DropDatabaseContext::SCHEMA() {
  return getToken(MySQLParser::SCHEMA, 0);
}

MySQLParser::IfExistsContext* MySQLParser::DropDatabaseContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}


size_t MySQLParser::DropDatabaseContext::getRuleIndex() const {
  return MySQLParser::RuleDropDatabase;
}

void MySQLParser::DropDatabaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropDatabase(this);
}

void MySQLParser::DropDatabaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropDatabase(this);
}


antlrcpp::Any MySQLParser::DropDatabaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropDatabase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropDatabaseContext* MySQLParser::dropDatabase() {
  DropDatabaseContext *_localctx = _tracker.createInstance<DropDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 134, MySQLParser::RuleDropDatabase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2596);
    match(MySQLParser::DROP);
    setState(2597);
    dynamic_cast<DropDatabaseContext *>(_localctx)->dbFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::DATABASE || _la == MySQLParser::SCHEMA)) {
      dynamic_cast<DropDatabaseContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2599);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2598);
      ifExists();
    }
    setState(2601);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropEventContext ------------------------------------------------------------------

MySQLParser::DropEventContext::DropEventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropEventContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropEventContext::EVENT() {
  return getToken(MySQLParser::EVENT, 0);
}

MySQLParser::FullIdContext* MySQLParser::DropEventContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::IfExistsContext* MySQLParser::DropEventContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}


size_t MySQLParser::DropEventContext::getRuleIndex() const {
  return MySQLParser::RuleDropEvent;
}

void MySQLParser::DropEventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropEvent(this);
}

void MySQLParser::DropEventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropEvent(this);
}


antlrcpp::Any MySQLParser::DropEventContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropEvent(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropEventContext* MySQLParser::dropEvent() {
  DropEventContext *_localctx = _tracker.createInstance<DropEventContext>(_ctx, getState());
  enterRule(_localctx, 136, MySQLParser::RuleDropEvent);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2603);
    match(MySQLParser::DROP);
    setState(2604);
    match(MySQLParser::EVENT);
    setState(2606);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2605);
      ifExists();
    }
    setState(2608);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropIndexContext ------------------------------------------------------------------

MySQLParser::DropIndexContext::DropIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropIndexContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropIndexContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

MySQLParser::UidContext* MySQLParser::DropIndexContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::DropIndexContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

MySQLParser::TableNameContext* MySQLParser::DropIndexContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::ALGORITHM() {
  return getTokens(MySQLParser::ALGORITHM);
}

tree::TerminalNode* MySQLParser::DropIndexContext::ALGORITHM(size_t i) {
  return getToken(MySQLParser::ALGORITHM, i);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::LOCK() {
  return getTokens(MySQLParser::LOCK);
}

tree::TerminalNode* MySQLParser::DropIndexContext::LOCK(size_t i) {
  return getToken(MySQLParser::LOCK, i);
}

tree::TerminalNode* MySQLParser::DropIndexContext::ONLINE() {
  return getToken(MySQLParser::ONLINE, 0);
}

tree::TerminalNode* MySQLParser::DropIndexContext::OFFLINE() {
  return getToken(MySQLParser::OFFLINE, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::DEFAULT() {
  return getTokens(MySQLParser::DEFAULT);
}

tree::TerminalNode* MySQLParser::DropIndexContext::DEFAULT(size_t i) {
  return getToken(MySQLParser::DEFAULT, i);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::INPLACE() {
  return getTokens(MySQLParser::INPLACE);
}

tree::TerminalNode* MySQLParser::DropIndexContext::INPLACE(size_t i) {
  return getToken(MySQLParser::INPLACE, i);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::COPY() {
  return getTokens(MySQLParser::COPY);
}

tree::TerminalNode* MySQLParser::DropIndexContext::COPY(size_t i) {
  return getToken(MySQLParser::COPY, i);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::NONE() {
  return getTokens(MySQLParser::NONE);
}

tree::TerminalNode* MySQLParser::DropIndexContext::NONE(size_t i) {
  return getToken(MySQLParser::NONE, i);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::SHARED() {
  return getTokens(MySQLParser::SHARED);
}

tree::TerminalNode* MySQLParser::DropIndexContext::SHARED(size_t i) {
  return getToken(MySQLParser::SHARED, i);
}

std::vector<tree::TerminalNode *> MySQLParser::DropIndexContext::EXCLUSIVE() {
  return getTokens(MySQLParser::EXCLUSIVE);
}

tree::TerminalNode* MySQLParser::DropIndexContext::EXCLUSIVE(size_t i) {
  return getToken(MySQLParser::EXCLUSIVE, i);
}


size_t MySQLParser::DropIndexContext::getRuleIndex() const {
  return MySQLParser::RuleDropIndex;
}

void MySQLParser::DropIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropIndex(this);
}

void MySQLParser::DropIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropIndex(this);
}


antlrcpp::Any MySQLParser::DropIndexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropIndex(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropIndexContext* MySQLParser::dropIndex() {
  DropIndexContext *_localctx = _tracker.createInstance<DropIndexContext>(_ctx, getState());
  enterRule(_localctx, 138, MySQLParser::RuleDropIndex);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2610);
    match(MySQLParser::DROP);
    setState(2611);
    match(MySQLParser::INDEX);
    setState(2613);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
    case 1: {
      setState(2612);
      dynamic_cast<DropIndexContext *>(_localctx)->intimeAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::OFFLINE

      || _la == MySQLParser::ONLINE)) {
        dynamic_cast<DropIndexContext *>(_localctx)->intimeAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(2615);
    uid();
    setState(2616);
    match(MySQLParser::ON);
    setState(2617);
    tableName();
    setState(2630);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2628);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::ALGORITHM: {
            setState(2618);
            match(MySQLParser::ALGORITHM);
            setState(2620);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySQLParser::EQUAL_SYMBOL) {
              setState(2619);
              match(MySQLParser::EQUAL_SYMBOL);
            }
            setState(2622);
            dynamic_cast<DropIndexContext *>(_localctx)->algType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::COPY

            || _la == MySQLParser::INPLACE)) {
              dynamic_cast<DropIndexContext *>(_localctx)->algType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case MySQLParser::LOCK: {
            setState(2623);
            match(MySQLParser::LOCK);
            setState(2625);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySQLParser::EQUAL_SYMBOL) {
              setState(2624);
              match(MySQLParser::EQUAL_SYMBOL);
            }
            setState(2627);
            dynamic_cast<DropIndexContext *>(_localctx)->lockType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySQLParser::DEFAULT || _la == MySQLParser::EXCLUSIVE || _la == MySQLParser::NONE || _la == MySQLParser::SHARED)) {
              dynamic_cast<DropIndexContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2632);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropLogfileGroupContext ------------------------------------------------------------------

MySQLParser::DropLogfileGroupContext::DropLogfileGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropLogfileGroupContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropLogfileGroupContext::LOGFILE() {
  return getToken(MySQLParser::LOGFILE, 0);
}

tree::TerminalNode* MySQLParser::DropLogfileGroupContext::GROUP() {
  return getToken(MySQLParser::GROUP, 0);
}

MySQLParser::UidContext* MySQLParser::DropLogfileGroupContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::DropLogfileGroupContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::DropLogfileGroupContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}


size_t MySQLParser::DropLogfileGroupContext::getRuleIndex() const {
  return MySQLParser::RuleDropLogfileGroup;
}

void MySQLParser::DropLogfileGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropLogfileGroup(this);
}

void MySQLParser::DropLogfileGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropLogfileGroup(this);
}


antlrcpp::Any MySQLParser::DropLogfileGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropLogfileGroup(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropLogfileGroupContext* MySQLParser::dropLogfileGroup() {
  DropLogfileGroupContext *_localctx = _tracker.createInstance<DropLogfileGroupContext>(_ctx, getState());
  enterRule(_localctx, 140, MySQLParser::RuleDropLogfileGroup);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2633);
    match(MySQLParser::DROP);
    setState(2634);
    match(MySQLParser::LOGFILE);
    setState(2635);
    match(MySQLParser::GROUP);
    setState(2636);
    uid();
    setState(2637);
    match(MySQLParser::ENGINE);
    setState(2638);
    match(MySQLParser::EQUAL_SYMBOL);
    setState(2639);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropProcedureContext ------------------------------------------------------------------

MySQLParser::DropProcedureContext::DropProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropProcedureContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropProcedureContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

MySQLParser::FullIdContext* MySQLParser::DropProcedureContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::IfExistsContext* MySQLParser::DropProcedureContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}


size_t MySQLParser::DropProcedureContext::getRuleIndex() const {
  return MySQLParser::RuleDropProcedure;
}

void MySQLParser::DropProcedureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropProcedure(this);
}

void MySQLParser::DropProcedureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropProcedure(this);
}


antlrcpp::Any MySQLParser::DropProcedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropProcedure(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropProcedureContext* MySQLParser::dropProcedure() {
  DropProcedureContext *_localctx = _tracker.createInstance<DropProcedureContext>(_ctx, getState());
  enterRule(_localctx, 142, MySQLParser::RuleDropProcedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2641);
    match(MySQLParser::DROP);
    setState(2642);
    match(MySQLParser::PROCEDURE);
    setState(2644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2643);
      ifExists();
    }
    setState(2646);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropFunctionContext ------------------------------------------------------------------

MySQLParser::DropFunctionContext::DropFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropFunctionContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropFunctionContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

MySQLParser::FullIdContext* MySQLParser::DropFunctionContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::IfExistsContext* MySQLParser::DropFunctionContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}


size_t MySQLParser::DropFunctionContext::getRuleIndex() const {
  return MySQLParser::RuleDropFunction;
}

void MySQLParser::DropFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropFunction(this);
}

void MySQLParser::DropFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropFunction(this);
}


antlrcpp::Any MySQLParser::DropFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropFunction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropFunctionContext* MySQLParser::dropFunction() {
  DropFunctionContext *_localctx = _tracker.createInstance<DropFunctionContext>(_ctx, getState());
  enterRule(_localctx, 144, MySQLParser::RuleDropFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2648);
    match(MySQLParser::DROP);
    setState(2649);
    match(MySQLParser::FUNCTION);
    setState(2651);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2650);
      ifExists();
    }
    setState(2653);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropServerContext ------------------------------------------------------------------

MySQLParser::DropServerContext::DropServerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropServerContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropServerContext::SERVER() {
  return getToken(MySQLParser::SERVER, 0);
}

MySQLParser::UidContext* MySQLParser::DropServerContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::IfExistsContext* MySQLParser::DropServerContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}


size_t MySQLParser::DropServerContext::getRuleIndex() const {
  return MySQLParser::RuleDropServer;
}

void MySQLParser::DropServerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropServer(this);
}

void MySQLParser::DropServerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropServer(this);
}


antlrcpp::Any MySQLParser::DropServerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropServer(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropServerContext* MySQLParser::dropServer() {
  DropServerContext *_localctx = _tracker.createInstance<DropServerContext>(_ctx, getState());
  enterRule(_localctx, 146, MySQLParser::RuleDropServer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2655);
    match(MySQLParser::DROP);
    setState(2656);
    match(MySQLParser::SERVER);
    setState(2658);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2657);
      ifExists();
    }
    setState(2660);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropTableContext ------------------------------------------------------------------

MySQLParser::DropTableContext::DropTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropTableContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::DropTableContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

tree::TerminalNode* MySQLParser::DropTableContext::TEMPORARY() {
  return getToken(MySQLParser::TEMPORARY, 0);
}

MySQLParser::IfExistsContext* MySQLParser::DropTableContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}

tree::TerminalNode* MySQLParser::DropTableContext::RESTRICT() {
  return getToken(MySQLParser::RESTRICT, 0);
}

tree::TerminalNode* MySQLParser::DropTableContext::CASCADE() {
  return getToken(MySQLParser::CASCADE, 0);
}


size_t MySQLParser::DropTableContext::getRuleIndex() const {
  return MySQLParser::RuleDropTable;
}

void MySQLParser::DropTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropTable(this);
}

void MySQLParser::DropTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropTable(this);
}


antlrcpp::Any MySQLParser::DropTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropTableContext* MySQLParser::dropTable() {
  DropTableContext *_localctx = _tracker.createInstance<DropTableContext>(_ctx, getState());
  enterRule(_localctx, 148, MySQLParser::RuleDropTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2662);
    match(MySQLParser::DROP);
    setState(2664);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::TEMPORARY) {
      setState(2663);
      match(MySQLParser::TEMPORARY);
    }
    setState(2666);
    match(MySQLParser::TABLE);
    setState(2668);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2667);
      ifExists();
    }
    setState(2670);
    tables();
    setState(2672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::CASCADE || _la == MySQLParser::RESTRICT) {
      setState(2671);
      dynamic_cast<DropTableContext *>(_localctx)->dropType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::CASCADE || _la == MySQLParser::RESTRICT)) {
        dynamic_cast<DropTableContext *>(_localctx)->dropType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropTablespaceContext ------------------------------------------------------------------

MySQLParser::DropTablespaceContext::DropTablespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropTablespaceContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropTablespaceContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

MySQLParser::UidContext* MySQLParser::DropTablespaceContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::DropTablespaceContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::DropTablespaceContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}


size_t MySQLParser::DropTablespaceContext::getRuleIndex() const {
  return MySQLParser::RuleDropTablespace;
}

void MySQLParser::DropTablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropTablespace(this);
}

void MySQLParser::DropTablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropTablespace(this);
}


antlrcpp::Any MySQLParser::DropTablespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropTablespace(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropTablespaceContext* MySQLParser::dropTablespace() {
  DropTablespaceContext *_localctx = _tracker.createInstance<DropTablespaceContext>(_ctx, getState());
  enterRule(_localctx, 150, MySQLParser::RuleDropTablespace);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2674);
    match(MySQLParser::DROP);
    setState(2675);
    match(MySQLParser::TABLESPACE);
    setState(2676);
    uid();
    setState(2682);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ENGINE) {
      setState(2677);
      match(MySQLParser::ENGINE);
      setState(2679);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::EQUAL_SYMBOL) {
        setState(2678);
        match(MySQLParser::EQUAL_SYMBOL);
      }
      setState(2681);
      engineName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropTriggerContext ------------------------------------------------------------------

MySQLParser::DropTriggerContext::DropTriggerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropTriggerContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropTriggerContext::TRIGGER() {
  return getToken(MySQLParser::TRIGGER, 0);
}

MySQLParser::FullIdContext* MySQLParser::DropTriggerContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::IfExistsContext* MySQLParser::DropTriggerContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}


size_t MySQLParser::DropTriggerContext::getRuleIndex() const {
  return MySQLParser::RuleDropTrigger;
}

void MySQLParser::DropTriggerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropTrigger(this);
}

void MySQLParser::DropTriggerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropTrigger(this);
}


antlrcpp::Any MySQLParser::DropTriggerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropTrigger(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropTriggerContext* MySQLParser::dropTrigger() {
  DropTriggerContext *_localctx = _tracker.createInstance<DropTriggerContext>(_ctx, getState());
  enterRule(_localctx, 152, MySQLParser::RuleDropTrigger);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2684);
    match(MySQLParser::DROP);
    setState(2685);
    match(MySQLParser::TRIGGER);
    setState(2687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2686);
      ifExists();
    }
    setState(2689);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropViewContext ------------------------------------------------------------------

MySQLParser::DropViewContext::DropViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropViewContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropViewContext::VIEW() {
  return getToken(MySQLParser::VIEW, 0);
}

std::vector<MySQLParser::FullIdContext *> MySQLParser::DropViewContext::fullId() {
  return getRuleContexts<MySQLParser::FullIdContext>();
}

MySQLParser::FullIdContext* MySQLParser::DropViewContext::fullId(size_t i) {
  return getRuleContext<MySQLParser::FullIdContext>(i);
}

MySQLParser::IfExistsContext* MySQLParser::DropViewContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}

tree::TerminalNode* MySQLParser::DropViewContext::RESTRICT() {
  return getToken(MySQLParser::RESTRICT, 0);
}

tree::TerminalNode* MySQLParser::DropViewContext::CASCADE() {
  return getToken(MySQLParser::CASCADE, 0);
}


size_t MySQLParser::DropViewContext::getRuleIndex() const {
  return MySQLParser::RuleDropView;
}

void MySQLParser::DropViewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropView(this);
}

void MySQLParser::DropViewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropView(this);
}


antlrcpp::Any MySQLParser::DropViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropView(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropViewContext* MySQLParser::dropView() {
  DropViewContext *_localctx = _tracker.createInstance<DropViewContext>(_ctx, getState());
  enterRule(_localctx, 154, MySQLParser::RuleDropView);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2691);
    match(MySQLParser::DROP);
    setState(2692);
    match(MySQLParser::VIEW);
    setState(2694);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(2693);
      ifExists();
    }
    setState(2696);
    fullId();
    setState(2701);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(2697);
      match(MySQLParser::COMMA);
      setState(2698);
      fullId();
      setState(2703);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2705);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::CASCADE || _la == MySQLParser::RESTRICT) {
      setState(2704);
      dynamic_cast<DropViewContext *>(_localctx)->dropType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::CASCADE || _la == MySQLParser::RESTRICT)) {
        dynamic_cast<DropViewContext *>(_localctx)->dropType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameTableContext ------------------------------------------------------------------

MySQLParser::RenameTableContext::RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RenameTableContext::RENAME() {
  return getToken(MySQLParser::RENAME, 0);
}

tree::TerminalNode* MySQLParser::RenameTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

std::vector<MySQLParser::RenameTableClauseContext *> MySQLParser::RenameTableContext::renameTableClause() {
  return getRuleContexts<MySQLParser::RenameTableClauseContext>();
}

MySQLParser::RenameTableClauseContext* MySQLParser::RenameTableContext::renameTableClause(size_t i) {
  return getRuleContext<MySQLParser::RenameTableClauseContext>(i);
}


size_t MySQLParser::RenameTableContext::getRuleIndex() const {
  return MySQLParser::RuleRenameTable;
}

void MySQLParser::RenameTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRenameTable(this);
}

void MySQLParser::RenameTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRenameTable(this);
}


antlrcpp::Any MySQLParser::RenameTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRenameTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RenameTableContext* MySQLParser::renameTable() {
  RenameTableContext *_localctx = _tracker.createInstance<RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 156, MySQLParser::RuleRenameTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2707);
    match(MySQLParser::RENAME);
    setState(2708);
    match(MySQLParser::TABLE);
    setState(2709);
    renameTableClause();
    setState(2714);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(2710);
      match(MySQLParser::COMMA);
      setState(2711);
      renameTableClause();
      setState(2716);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameTableClauseContext ------------------------------------------------------------------

MySQLParser::RenameTableClauseContext::RenameTableClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::TableNameContext *> MySQLParser::RenameTableClauseContext::tableName() {
  return getRuleContexts<MySQLParser::TableNameContext>();
}

MySQLParser::TableNameContext* MySQLParser::RenameTableClauseContext::tableName(size_t i) {
  return getRuleContext<MySQLParser::TableNameContext>(i);
}

tree::TerminalNode* MySQLParser::RenameTableClauseContext::TO() {
  return getToken(MySQLParser::TO, 0);
}


size_t MySQLParser::RenameTableClauseContext::getRuleIndex() const {
  return MySQLParser::RuleRenameTableClause;
}

void MySQLParser::RenameTableClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRenameTableClause(this);
}

void MySQLParser::RenameTableClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRenameTableClause(this);
}


antlrcpp::Any MySQLParser::RenameTableClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRenameTableClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RenameTableClauseContext* MySQLParser::renameTableClause() {
  RenameTableClauseContext *_localctx = _tracker.createInstance<RenameTableClauseContext>(_ctx, getState());
  enterRule(_localctx, 158, MySQLParser::RuleRenameTableClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2717);
    tableName();
    setState(2718);
    match(MySQLParser::TO);
    setState(2719);
    tableName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TruncateTableContext ------------------------------------------------------------------

MySQLParser::TruncateTableContext::TruncateTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TruncateTableContext::TRUNCATE() {
  return getToken(MySQLParser::TRUNCATE, 0);
}

MySQLParser::TableNameContext* MySQLParser::TruncateTableContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::TruncateTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}


size_t MySQLParser::TruncateTableContext::getRuleIndex() const {
  return MySQLParser::RuleTruncateTable;
}

void MySQLParser::TruncateTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTruncateTable(this);
}

void MySQLParser::TruncateTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTruncateTable(this);
}


antlrcpp::Any MySQLParser::TruncateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTruncateTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TruncateTableContext* MySQLParser::truncateTable() {
  TruncateTableContext *_localctx = _tracker.createInstance<TruncateTableContext>(_ctx, getState());
  enterRule(_localctx, 160, MySQLParser::RuleTruncateTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2721);
    match(MySQLParser::TRUNCATE);
    setState(2723);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::TABLE) {
      setState(2722);
      match(MySQLParser::TABLE);
    }
    setState(2725);
    tableName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallStatementContext ------------------------------------------------------------------

MySQLParser::CallStatementContext::CallStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CallStatementContext::CALL() {
  return getToken(MySQLParser::CALL, 0);
}

MySQLParser::FullIdContext* MySQLParser::CallStatementContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::ConstantsContext* MySQLParser::CallStatementContext::constants() {
  return getRuleContext<MySQLParser::ConstantsContext>(0);
}

MySQLParser::ExpressionsContext* MySQLParser::CallStatementContext::expressions() {
  return getRuleContext<MySQLParser::ExpressionsContext>(0);
}


size_t MySQLParser::CallStatementContext::getRuleIndex() const {
  return MySQLParser::RuleCallStatement;
}

void MySQLParser::CallStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallStatement(this);
}

void MySQLParser::CallStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallStatement(this);
}


antlrcpp::Any MySQLParser::CallStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCallStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CallStatementContext* MySQLParser::callStatement() {
  CallStatementContext *_localctx = _tracker.createInstance<CallStatementContext>(_ctx, getState());
  enterRule(_localctx, 162, MySQLParser::RuleCallStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2727);
    match(MySQLParser::CALL);
    setState(2728);
    fullId();
    setState(2735);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx)) {
    case 1: {
      setState(2729);
      match(MySQLParser::LR_BRACKET);
      setState(2732);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
      case 1: {
        setState(2730);
        constants();
        break;
      }

      case 2: {
        setState(2731);
        expressions();
        break;
      }

      }
      setState(2734);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteStatementContext ------------------------------------------------------------------

MySQLParser::DeleteStatementContext::DeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::SingleDeleteStatementContext* MySQLParser::DeleteStatementContext::singleDeleteStatement() {
  return getRuleContext<MySQLParser::SingleDeleteStatementContext>(0);
}

MySQLParser::MultipleDeleteStatementContext* MySQLParser::DeleteStatementContext::multipleDeleteStatement() {
  return getRuleContext<MySQLParser::MultipleDeleteStatementContext>(0);
}


size_t MySQLParser::DeleteStatementContext::getRuleIndex() const {
  return MySQLParser::RuleDeleteStatement;
}

void MySQLParser::DeleteStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeleteStatement(this);
}

void MySQLParser::DeleteStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeleteStatement(this);
}


antlrcpp::Any MySQLParser::DeleteStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDeleteStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DeleteStatementContext* MySQLParser::deleteStatement() {
  DeleteStatementContext *_localctx = _tracker.createInstance<DeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 164, MySQLParser::RuleDeleteStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2737);
      singleDeleteStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2738);
      multipleDeleteStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatementContext ------------------------------------------------------------------

MySQLParser::DoStatementContext::DoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DoStatementContext::DO() {
  return getToken(MySQLParser::DO, 0);
}

MySQLParser::ExpressionsContext* MySQLParser::DoStatementContext::expressions() {
  return getRuleContext<MySQLParser::ExpressionsContext>(0);
}


size_t MySQLParser::DoStatementContext::getRuleIndex() const {
  return MySQLParser::RuleDoStatement;
}

void MySQLParser::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}

void MySQLParser::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}


antlrcpp::Any MySQLParser::DoStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDoStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DoStatementContext* MySQLParser::doStatement() {
  DoStatementContext *_localctx = _tracker.createInstance<DoStatementContext>(_ctx, getState());
  enterRule(_localctx, 166, MySQLParser::RuleDoStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2741);
    match(MySQLParser::DO);
    setState(2742);
    expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerStatementContext ------------------------------------------------------------------

MySQLParser::HandlerStatementContext::HandlerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::HandlerOpenStatementContext* MySQLParser::HandlerStatementContext::handlerOpenStatement() {
  return getRuleContext<MySQLParser::HandlerOpenStatementContext>(0);
}

MySQLParser::HandlerReadIndexStatementContext* MySQLParser::HandlerStatementContext::handlerReadIndexStatement() {
  return getRuleContext<MySQLParser::HandlerReadIndexStatementContext>(0);
}

MySQLParser::HandlerReadStatementContext* MySQLParser::HandlerStatementContext::handlerReadStatement() {
  return getRuleContext<MySQLParser::HandlerReadStatementContext>(0);
}

MySQLParser::HandlerCloseStatementContext* MySQLParser::HandlerStatementContext::handlerCloseStatement() {
  return getRuleContext<MySQLParser::HandlerCloseStatementContext>(0);
}


size_t MySQLParser::HandlerStatementContext::getRuleIndex() const {
  return MySQLParser::RuleHandlerStatement;
}

void MySQLParser::HandlerStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerStatement(this);
}

void MySQLParser::HandlerStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerStatement(this);
}


antlrcpp::Any MySQLParser::HandlerStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HandlerStatementContext* MySQLParser::handlerStatement() {
  HandlerStatementContext *_localctx = _tracker.createInstance<HandlerStatementContext>(_ctx, getState());
  enterRule(_localctx, 168, MySQLParser::RuleHandlerStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2748);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2744);
      handlerOpenStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2745);
      handlerReadIndexStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2746);
      handlerReadStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2747);
      handlerCloseStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertStatementContext ------------------------------------------------------------------

MySQLParser::InsertStatementContext::InsertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::InsertStatementContext::INSERT() {
  return getToken(MySQLParser::INSERT, 0);
}

MySQLParser::TableNameContext* MySQLParser::InsertStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::InsertStatementValueContext* MySQLParser::InsertStatementContext::insertStatementValue() {
  return getRuleContext<MySQLParser::InsertStatementValueContext>(0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

std::vector<MySQLParser::UpdatedElementContext *> MySQLParser::InsertStatementContext::updatedElement() {
  return getRuleContexts<MySQLParser::UpdatedElementContext>();
}

MySQLParser::UpdatedElementContext* MySQLParser::InsertStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySQLParser::UpdatedElementContext>(i);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::DUPLICATE() {
  return getToken(MySQLParser::DUPLICATE, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}

std::vector<MySQLParser::UidListContext *> MySQLParser::InsertStatementContext::uidList() {
  return getRuleContexts<MySQLParser::UidListContext>();
}

MySQLParser::UidListContext* MySQLParser::InsertStatementContext::uidList(size_t i) {
  return getRuleContext<MySQLParser::UidListContext>(i);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::DELAYED() {
  return getToken(MySQLParser::DELAYED, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementContext::HIGH_PRIORITY() {
  return getToken(MySQLParser::HIGH_PRIORITY, 0);
}


size_t MySQLParser::InsertStatementContext::getRuleIndex() const {
  return MySQLParser::RuleInsertStatement;
}

void MySQLParser::InsertStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsertStatement(this);
}

void MySQLParser::InsertStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsertStatement(this);
}


antlrcpp::Any MySQLParser::InsertStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::InsertStatementContext* MySQLParser::insertStatement() {
  InsertStatementContext *_localctx = _tracker.createInstance<InsertStatementContext>(_ctx, getState());
  enterRule(_localctx, 170, MySQLParser::RuleInsertStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2750);
    match(MySQLParser::INSERT);
    setState(2752);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 38) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 38)) & ((1ULL << (MySQLParser::DELAYED - 38))
      | (1ULL << (MySQLParser::HIGH_PRIORITY - 38))
      | (1ULL << (MySQLParser::LOW_PRIORITY - 38)))) != 0)) {
      setState(2751);
      dynamic_cast<InsertStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 38) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 38)) & ((1ULL << (MySQLParser::DELAYED - 38))
        | (1ULL << (MySQLParser::HIGH_PRIORITY - 38))
        | (1ULL << (MySQLParser::LOW_PRIORITY - 38)))) != 0))) {
        dynamic_cast<InsertStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2755);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(2754);
      match(MySQLParser::IGNORE);
    }
    setState(2758);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::INTO) {
      setState(2757);
      match(MySQLParser::INTO);
    }
    setState(2760);
    tableName();
    setState(2766);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITION) {
      setState(2761);
      match(MySQLParser::PARTITION);
      setState(2762);
      match(MySQLParser::LR_BRACKET);
      setState(2763);
      dynamic_cast<InsertStatementContext *>(_localctx)->partitions = uidList();
      setState(2764);
      match(MySQLParser::RR_BRACKET);
    }
    setState(2784);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::SELECT:
      case MySQLParser::VALUES:
      case MySQLParser::VALUE:
      case MySQLParser::LR_BRACKET: {
        setState(2772);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
        case 1: {
          setState(2768);
          match(MySQLParser::LR_BRACKET);
          setState(2769);
          dynamic_cast<InsertStatementContext *>(_localctx)->columns = uidList();
          setState(2770);
          match(MySQLParser::RR_BRACKET);
          break;
        }

        }
        setState(2774);
        insertStatementValue();
        break;
      }

      case MySQLParser::SET: {
        setState(2775);
        match(MySQLParser::SET);
        setState(2776);
        dynamic_cast<InsertStatementContext *>(_localctx)->setFirst = updatedElement();
        setState(2781);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(2777);
          match(MySQLParser::COMMA);
          setState(2778);
          dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext = updatedElement();
          dynamic_cast<InsertStatementContext *>(_localctx)->setElements.push_back(dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext);
          setState(2783);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2798);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ON) {
      setState(2786);
      match(MySQLParser::ON);
      setState(2787);
      match(MySQLParser::DUPLICATE);
      setState(2788);
      match(MySQLParser::KEY);
      setState(2789);
      match(MySQLParser::UPDATE);
      setState(2790);
      dynamic_cast<InsertStatementContext *>(_localctx)->duplicatedFirst = updatedElement();
      setState(2795);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2791);
        match(MySQLParser::COMMA);
        setState(2792);
        dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext = updatedElement();
        dynamic_cast<InsertStatementContext *>(_localctx)->duplicatedElements.push_back(dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext);
        setState(2797);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadDataStatementContext ------------------------------------------------------------------

MySQLParser::LoadDataStatementContext::LoadDataStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::LOAD() {
  return getToken(MySQLParser::LOAD, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::DATA() {
  return getToken(MySQLParser::DATA, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::INFILE() {
  return getToken(MySQLParser::INFILE, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TableNameContext* MySQLParser::LoadDataStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::LoadDataStatementContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::LoadDataStatementContext::SET() {
  return getTokens(MySQLParser::SET);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::SET(size_t i) {
  return getToken(MySQLParser::SET, i);
}

std::vector<tree::TerminalNode *> MySQLParser::LoadDataStatementContext::LINES() {
  return getTokens(MySQLParser::LINES);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::LINES(size_t i) {
  return getToken(MySQLParser::LINES, i);
}

std::vector<tree::TerminalNode *> MySQLParser::LoadDataStatementContext::IGNORE() {
  return getTokens(MySQLParser::IGNORE);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::IGNORE(size_t i) {
  return getToken(MySQLParser::IGNORE, i);
}

MySQLParser::DecimalLiteralContext* MySQLParser::LoadDataStatementContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

std::vector<MySQLParser::AssignmentFieldContext *> MySQLParser::LoadDataStatementContext::assignmentField() {
  return getRuleContexts<MySQLParser::AssignmentFieldContext>();
}

MySQLParser::AssignmentFieldContext* MySQLParser::LoadDataStatementContext::assignmentField(size_t i) {
  return getRuleContext<MySQLParser::AssignmentFieldContext>(i);
}

std::vector<MySQLParser::UpdatedElementContext *> MySQLParser::LoadDataStatementContext::updatedElement() {
  return getRuleContexts<MySQLParser::UpdatedElementContext>();
}

MySQLParser::UpdatedElementContext* MySQLParser::LoadDataStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySQLParser::UpdatedElementContext>(i);
}

MySQLParser::CharsetNameContext* MySQLParser::LoadDataStatementContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::CONCURRENT() {
  return getToken(MySQLParser::CONCURRENT, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::REPLACE() {
  return getToken(MySQLParser::REPLACE, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::FIELDS() {
  return getToken(MySQLParser::FIELDS, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::COLUMNS() {
  return getToken(MySQLParser::COLUMNS, 0);
}

tree::TerminalNode* MySQLParser::LoadDataStatementContext::ROWS() {
  return getToken(MySQLParser::ROWS, 0);
}

std::vector<MySQLParser::SelectFieldsIntoContext *> MySQLParser::LoadDataStatementContext::selectFieldsInto() {
  return getRuleContexts<MySQLParser::SelectFieldsIntoContext>();
}

MySQLParser::SelectFieldsIntoContext* MySQLParser::LoadDataStatementContext::selectFieldsInto(size_t i) {
  return getRuleContext<MySQLParser::SelectFieldsIntoContext>(i);
}

std::vector<MySQLParser::SelectLinesIntoContext *> MySQLParser::LoadDataStatementContext::selectLinesInto() {
  return getRuleContexts<MySQLParser::SelectLinesIntoContext>();
}

MySQLParser::SelectLinesIntoContext* MySQLParser::LoadDataStatementContext::selectLinesInto(size_t i) {
  return getRuleContext<MySQLParser::SelectLinesIntoContext>(i);
}


size_t MySQLParser::LoadDataStatementContext::getRuleIndex() const {
  return MySQLParser::RuleLoadDataStatement;
}

void MySQLParser::LoadDataStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoadDataStatement(this);
}

void MySQLParser::LoadDataStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoadDataStatement(this);
}


antlrcpp::Any MySQLParser::LoadDataStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLoadDataStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LoadDataStatementContext* MySQLParser::loadDataStatement() {
  LoadDataStatementContext *_localctx = _tracker.createInstance<LoadDataStatementContext>(_ctx, getState());
  enterRule(_localctx, 172, MySQLParser::RuleLoadDataStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2800);
    match(MySQLParser::LOAD);
    setState(2801);
    match(MySQLParser::DATA);
    setState(2803);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOW_PRIORITY || _la == MySQLParser::CONCURRENT) {
      setState(2802);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::LOW_PRIORITY || _la == MySQLParser::CONCURRENT)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOCAL) {
      setState(2805);
      match(MySQLParser::LOCAL);
    }
    setState(2808);
    match(MySQLParser::INFILE);
    setState(2809);
    dynamic_cast<LoadDataStatementContext *>(_localctx)->filename = match(MySQLParser::STRING_LITERAL);
    setState(2811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE

    || _la == MySQLParser::REPLACE) {
      setState(2810);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->violation = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::IGNORE

      || _la == MySQLParser::REPLACE)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->violation = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2813);
    match(MySQLParser::INTO);
    setState(2814);
    match(MySQLParser::TABLE);
    setState(2815);
    tableName();
    setState(2821);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITION) {
      setState(2816);
      match(MySQLParser::PARTITION);
      setState(2817);
      match(MySQLParser::LR_BRACKET);
      setState(2818);
      uidList();
      setState(2819);
      match(MySQLParser::RR_BRACKET);
    }
    setState(2826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::CHARACTER) {
      setState(2823);
      match(MySQLParser::CHARACTER);
      setState(2824);
      match(MySQLParser::SET);
      setState(2825);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->charset = charsetName();
    }
    setState(2834);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::COLUMNS

    || _la == MySQLParser::FIELDS) {
      setState(2828);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->fieldsFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::COLUMNS

      || _la == MySQLParser::FIELDS)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->fieldsFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2830); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2829);
        selectFieldsInto();
        setState(2832); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySQLParser::ENCLOSED

      || _la == MySQLParser::ESCAPED || _la == MySQLParser::OPTIONALLY

      || _la == MySQLParser::TERMINATED);
    }
    setState(2842);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LINES) {
      setState(2836);
      match(MySQLParser::LINES);
      setState(2838); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2837);
        selectLinesInto();
        setState(2840); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySQLParser::STARTING

      || _la == MySQLParser::TERMINATED);
    }
    setState(2848);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(2844);
      match(MySQLParser::IGNORE);
      setState(2845);
      decimalLiteral();
      setState(2846);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->linesFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::LINES || _la == MySQLParser::ROWS)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->linesFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2861);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      setState(2850);
      match(MySQLParser::LR_BRACKET);
      setState(2851);
      assignmentField();
      setState(2856);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2852);
        match(MySQLParser::COMMA);
        setState(2853);
        assignmentField();
        setState(2858);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2859);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
    setState(2872);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
    case 1: {
      setState(2863);
      match(MySQLParser::SET);
      setState(2864);
      updatedElement();
      setState(2869);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2865);
        match(MySQLParser::COMMA);
        setState(2866);
        updatedElement();
        setState(2871);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadXmlStatementContext ------------------------------------------------------------------

MySQLParser::LoadXmlStatementContext::LoadXmlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::LOAD() {
  return getToken(MySQLParser::LOAD, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::XML() {
  return getToken(MySQLParser::XML, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::INFILE() {
  return getToken(MySQLParser::INFILE, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TableNameContext* MySQLParser::LoadXmlStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

std::vector<tree::TerminalNode *> MySQLParser::LoadXmlStatementContext::STRING_LITERAL() {
  return getTokens(MySQLParser::STRING_LITERAL);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::STRING_LITERAL(size_t i) {
  return getToken(MySQLParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::LoadXmlStatementContext::SET() {
  return getTokens(MySQLParser::SET);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::SET(size_t i) {
  return getToken(MySQLParser::SET, i);
}

std::vector<tree::TerminalNode *> MySQLParser::LoadXmlStatementContext::ROWS() {
  return getTokens(MySQLParser::ROWS);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::ROWS(size_t i) {
  return getToken(MySQLParser::ROWS, i);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::IDENTIFIED() {
  return getToken(MySQLParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::LoadXmlStatementContext::IGNORE() {
  return getTokens(MySQLParser::IGNORE);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::IGNORE(size_t i) {
  return getToken(MySQLParser::IGNORE, i);
}

MySQLParser::DecimalLiteralContext* MySQLParser::LoadXmlStatementContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

std::vector<MySQLParser::AssignmentFieldContext *> MySQLParser::LoadXmlStatementContext::assignmentField() {
  return getRuleContexts<MySQLParser::AssignmentFieldContext>();
}

MySQLParser::AssignmentFieldContext* MySQLParser::LoadXmlStatementContext::assignmentField(size_t i) {
  return getRuleContext<MySQLParser::AssignmentFieldContext>(i);
}

std::vector<MySQLParser::UpdatedElementContext *> MySQLParser::LoadXmlStatementContext::updatedElement() {
  return getRuleContexts<MySQLParser::UpdatedElementContext>();
}

MySQLParser::UpdatedElementContext* MySQLParser::LoadXmlStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySQLParser::UpdatedElementContext>(i);
}

MySQLParser::CharsetNameContext* MySQLParser::LoadXmlStatementContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::CONCURRENT() {
  return getToken(MySQLParser::CONCURRENT, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::REPLACE() {
  return getToken(MySQLParser::REPLACE, 0);
}

tree::TerminalNode* MySQLParser::LoadXmlStatementContext::LINES() {
  return getToken(MySQLParser::LINES, 0);
}


size_t MySQLParser::LoadXmlStatementContext::getRuleIndex() const {
  return MySQLParser::RuleLoadXmlStatement;
}

void MySQLParser::LoadXmlStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoadXmlStatement(this);
}

void MySQLParser::LoadXmlStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoadXmlStatement(this);
}


antlrcpp::Any MySQLParser::LoadXmlStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLoadXmlStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LoadXmlStatementContext* MySQLParser::loadXmlStatement() {
  LoadXmlStatementContext *_localctx = _tracker.createInstance<LoadXmlStatementContext>(_ctx, getState());
  enterRule(_localctx, 174, MySQLParser::RuleLoadXmlStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2874);
    match(MySQLParser::LOAD);
    setState(2875);
    match(MySQLParser::XML);
    setState(2877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOW_PRIORITY || _la == MySQLParser::CONCURRENT) {
      setState(2876);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::LOW_PRIORITY || _la == MySQLParser::CONCURRENT)) {
        dynamic_cast<LoadXmlStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2880);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOCAL) {
      setState(2879);
      match(MySQLParser::LOCAL);
    }
    setState(2882);
    match(MySQLParser::INFILE);
    setState(2883);
    dynamic_cast<LoadXmlStatementContext *>(_localctx)->filename = match(MySQLParser::STRING_LITERAL);
    setState(2885);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE

    || _la == MySQLParser::REPLACE) {
      setState(2884);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->violation = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::IGNORE

      || _la == MySQLParser::REPLACE)) {
        dynamic_cast<LoadXmlStatementContext *>(_localctx)->violation = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2887);
    match(MySQLParser::INTO);
    setState(2888);
    match(MySQLParser::TABLE);
    setState(2889);
    tableName();
    setState(2893);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::CHARACTER) {
      setState(2890);
      match(MySQLParser::CHARACTER);
      setState(2891);
      match(MySQLParser::SET);
      setState(2892);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->charset = charsetName();
    }
    setState(2901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ROWS) {
      setState(2895);
      match(MySQLParser::ROWS);
      setState(2896);
      match(MySQLParser::IDENTIFIED);
      setState(2897);
      match(MySQLParser::BY);
      setState(2898);
      match(MySQLParser::LESS_SYMBOL);
      setState(2899);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->tag = match(MySQLParser::STRING_LITERAL);
      setState(2900);
      match(MySQLParser::GREATER_SYMBOL);
    }
    setState(2907);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(2903);
      match(MySQLParser::IGNORE);
      setState(2904);
      decimalLiteral();
      setState(2905);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->linesFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::LINES || _la == MySQLParser::ROWS)) {
        dynamic_cast<LoadXmlStatementContext *>(_localctx)->linesFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2920);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
      setState(2909);
      match(MySQLParser::LR_BRACKET);
      setState(2910);
      assignmentField();
      setState(2915);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2911);
        match(MySQLParser::COMMA);
        setState(2912);
        assignmentField();
        setState(2917);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2918);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
    setState(2931);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      setState(2922);
      match(MySQLParser::SET);
      setState(2923);
      updatedElement();
      setState(2928);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(2924);
        match(MySQLParser::COMMA);
        setState(2925);
        updatedElement();
        setState(2930);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReplaceStatementContext ------------------------------------------------------------------

MySQLParser::ReplaceStatementContext::ReplaceStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ReplaceStatementContext::REPLACE() {
  return getToken(MySQLParser::REPLACE, 0);
}

MySQLParser::TableNameContext* MySQLParser::ReplaceStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::InsertStatementValueContext* MySQLParser::ReplaceStatementContext::insertStatementValue() {
  return getRuleContext<MySQLParser::InsertStatementValueContext>(0);
}

tree::TerminalNode* MySQLParser::ReplaceStatementContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::ReplaceStatementContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

tree::TerminalNode* MySQLParser::ReplaceStatementContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

std::vector<MySQLParser::UpdatedElementContext *> MySQLParser::ReplaceStatementContext::updatedElement() {
  return getRuleContexts<MySQLParser::UpdatedElementContext>();
}

MySQLParser::UpdatedElementContext* MySQLParser::ReplaceStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySQLParser::UpdatedElementContext>(i);
}

std::vector<MySQLParser::UidListContext *> MySQLParser::ReplaceStatementContext::uidList() {
  return getRuleContexts<MySQLParser::UidListContext>();
}

MySQLParser::UidListContext* MySQLParser::ReplaceStatementContext::uidList(size_t i) {
  return getRuleContext<MySQLParser::UidListContext>(i);
}

tree::TerminalNode* MySQLParser::ReplaceStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySQLParser::ReplaceStatementContext::DELAYED() {
  return getToken(MySQLParser::DELAYED, 0);
}


size_t MySQLParser::ReplaceStatementContext::getRuleIndex() const {
  return MySQLParser::RuleReplaceStatement;
}

void MySQLParser::ReplaceStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplaceStatement(this);
}

void MySQLParser::ReplaceStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplaceStatement(this);
}


antlrcpp::Any MySQLParser::ReplaceStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReplaceStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ReplaceStatementContext* MySQLParser::replaceStatement() {
  ReplaceStatementContext *_localctx = _tracker.createInstance<ReplaceStatementContext>(_ctx, getState());
  enterRule(_localctx, 176, MySQLParser::RuleReplaceStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2933);
    match(MySQLParser::REPLACE);
    setState(2935);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DELAYED

    || _la == MySQLParser::LOW_PRIORITY) {
      setState(2934);
      dynamic_cast<ReplaceStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DELAYED

      || _la == MySQLParser::LOW_PRIORITY)) {
        dynamic_cast<ReplaceStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2938);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::INTO) {
      setState(2937);
      match(MySQLParser::INTO);
    }
    setState(2940);
    tableName();
    setState(2946);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITION) {
      setState(2941);
      match(MySQLParser::PARTITION);
      setState(2942);
      match(MySQLParser::LR_BRACKET);
      setState(2943);
      dynamic_cast<ReplaceStatementContext *>(_localctx)->partitions = uidList();
      setState(2944);
      match(MySQLParser::RR_BRACKET);
    }
    setState(2964);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::SELECT:
      case MySQLParser::VALUES:
      case MySQLParser::VALUE:
      case MySQLParser::LR_BRACKET: {
        setState(2952);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
        case 1: {
          setState(2948);
          match(MySQLParser::LR_BRACKET);
          setState(2949);
          dynamic_cast<ReplaceStatementContext *>(_localctx)->columns = uidList();
          setState(2950);
          match(MySQLParser::RR_BRACKET);
          break;
        }

        }
        setState(2954);
        insertStatementValue();
        break;
      }

      case MySQLParser::SET: {
        setState(2955);
        match(MySQLParser::SET);
        setState(2956);
        dynamic_cast<ReplaceStatementContext *>(_localctx)->setFirst = updatedElement();
        setState(2961);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(2957);
          match(MySQLParser::COMMA);
          setState(2958);
          dynamic_cast<ReplaceStatementContext *>(_localctx)->updatedElementContext = updatedElement();
          dynamic_cast<ReplaceStatementContext *>(_localctx)->setElements.push_back(dynamic_cast<ReplaceStatementContext *>(_localctx)->updatedElementContext);
          setState(2963);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStatementContext ------------------------------------------------------------------

MySQLParser::SelectStatementContext::SelectStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::SelectStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSelectStatement;
}

void MySQLParser::SelectStatementContext::copyFrom(SelectStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnionSelectContext ------------------------------------------------------------------

MySQLParser::QuerySpecificationNointoContext* MySQLParser::UnionSelectContext::querySpecificationNointo() {
  return getRuleContext<MySQLParser::QuerySpecificationNointoContext>(0);
}

std::vector<MySQLParser::UnionStatementContext *> MySQLParser::UnionSelectContext::unionStatement() {
  return getRuleContexts<MySQLParser::UnionStatementContext>();
}

MySQLParser::UnionStatementContext* MySQLParser::UnionSelectContext::unionStatement(size_t i) {
  return getRuleContext<MySQLParser::UnionStatementContext>(i);
}

tree::TerminalNode* MySQLParser::UnionSelectContext::UNION() {
  return getToken(MySQLParser::UNION, 0);
}

MySQLParser::OrderByClauseContext* MySQLParser::UnionSelectContext::orderByClause() {
  return getRuleContext<MySQLParser::OrderByClauseContext>(0);
}

MySQLParser::LimitClauseContext* MySQLParser::UnionSelectContext::limitClause() {
  return getRuleContext<MySQLParser::LimitClauseContext>(0);
}

MySQLParser::LockClauseContext* MySQLParser::UnionSelectContext::lockClause() {
  return getRuleContext<MySQLParser::LockClauseContext>(0);
}

MySQLParser::QuerySpecificationContext* MySQLParser::UnionSelectContext::querySpecification() {
  return getRuleContext<MySQLParser::QuerySpecificationContext>(0);
}

MySQLParser::QueryExpressionContext* MySQLParser::UnionSelectContext::queryExpression() {
  return getRuleContext<MySQLParser::QueryExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::UnionSelectContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::UnionSelectContext::DISTINCT() {
  return getToken(MySQLParser::DISTINCT, 0);
}

MySQLParser::UnionSelectContext::UnionSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::UnionSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnionSelect(this);
}
void MySQLParser::UnionSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnionSelect(this);
}

antlrcpp::Any MySQLParser::UnionSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUnionSelect(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnionParenthesisSelectContext ------------------------------------------------------------------

MySQLParser::QueryExpressionNointoContext* MySQLParser::UnionParenthesisSelectContext::queryExpressionNointo() {
  return getRuleContext<MySQLParser::QueryExpressionNointoContext>(0);
}

std::vector<MySQLParser::UnionParenthesisContext *> MySQLParser::UnionParenthesisSelectContext::unionParenthesis() {
  return getRuleContexts<MySQLParser::UnionParenthesisContext>();
}

MySQLParser::UnionParenthesisContext* MySQLParser::UnionParenthesisSelectContext::unionParenthesis(size_t i) {
  return getRuleContext<MySQLParser::UnionParenthesisContext>(i);
}

tree::TerminalNode* MySQLParser::UnionParenthesisSelectContext::UNION() {
  return getToken(MySQLParser::UNION, 0);
}

MySQLParser::QueryExpressionContext* MySQLParser::UnionParenthesisSelectContext::queryExpression() {
  return getRuleContext<MySQLParser::QueryExpressionContext>(0);
}

MySQLParser::OrderByClauseContext* MySQLParser::UnionParenthesisSelectContext::orderByClause() {
  return getRuleContext<MySQLParser::OrderByClauseContext>(0);
}

MySQLParser::LimitClauseContext* MySQLParser::UnionParenthesisSelectContext::limitClause() {
  return getRuleContext<MySQLParser::LimitClauseContext>(0);
}

MySQLParser::LockClauseContext* MySQLParser::UnionParenthesisSelectContext::lockClause() {
  return getRuleContext<MySQLParser::LockClauseContext>(0);
}

tree::TerminalNode* MySQLParser::UnionParenthesisSelectContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::UnionParenthesisSelectContext::DISTINCT() {
  return getToken(MySQLParser::DISTINCT, 0);
}

MySQLParser::UnionParenthesisSelectContext::UnionParenthesisSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::UnionParenthesisSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnionParenthesisSelect(this);
}
void MySQLParser::UnionParenthesisSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnionParenthesisSelect(this);
}

antlrcpp::Any MySQLParser::UnionParenthesisSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUnionParenthesisSelect(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleSelectContext ------------------------------------------------------------------

MySQLParser::QuerySpecificationContext* MySQLParser::SimpleSelectContext::querySpecification() {
  return getRuleContext<MySQLParser::QuerySpecificationContext>(0);
}

MySQLParser::LockClauseContext* MySQLParser::SimpleSelectContext::lockClause() {
  return getRuleContext<MySQLParser::LockClauseContext>(0);
}

MySQLParser::SimpleSelectContext::SimpleSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SimpleSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleSelect(this);
}
void MySQLParser::SimpleSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleSelect(this);
}

antlrcpp::Any MySQLParser::SimpleSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleSelect(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesisSelectContext ------------------------------------------------------------------

MySQLParser::QueryExpressionContext* MySQLParser::ParenthesisSelectContext::queryExpression() {
  return getRuleContext<MySQLParser::QueryExpressionContext>(0);
}

MySQLParser::LockClauseContext* MySQLParser::ParenthesisSelectContext::lockClause() {
  return getRuleContext<MySQLParser::LockClauseContext>(0);
}

MySQLParser::ParenthesisSelectContext::ParenthesisSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ParenthesisSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesisSelect(this);
}
void MySQLParser::ParenthesisSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesisSelect(this);
}

antlrcpp::Any MySQLParser::ParenthesisSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitParenthesisSelect(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::SelectStatementContext* MySQLParser::selectStatement() {
  SelectStatementContext *_localctx = _tracker.createInstance<SelectStatementContext>(_ctx, getState());
  enterRule(_localctx, 178, MySQLParser::RuleSelectStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3021);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 409, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySQLParser::SimpleSelectContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2966);
      querySpecification();
      setState(2968);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx)) {
      case 1: {
        setState(2967);
        lockClause();
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySQLParser::ParenthesisSelectContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2970);
      queryExpression();
      setState(2972);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx)) {
      case 1: {
        setState(2971);
        lockClause();
        break;
      }

      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySQLParser::UnionSelectContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2974);
      querySpecificationNointo();
      setState(2976); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2975);
                unionStatement();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2978); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2988);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::UNION) {
        setState(2980);
        match(MySQLParser::UNION);
        setState(2982);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::ALL

        || _la == MySQLParser::DISTINCT) {
          setState(2981);
          dynamic_cast<UnionSelectContext *>(_localctx)->unionType = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::ALL

          || _la == MySQLParser::DISTINCT)) {
            dynamic_cast<UnionSelectContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(2986);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::SELECT: {
            setState(2984);
            querySpecification();
            break;
          }

          case MySQLParser::LR_BRACKET: {
            setState(2985);
            queryExpression();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(2991);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ORDER) {
        setState(2990);
        orderByClause();
      }
      setState(2994);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LIMIT) {
        setState(2993);
        limitClause();
      }
      setState(2997);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
      case 1: {
        setState(2996);
        lockClause();
        break;
      }

      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySQLParser::UnionParenthesisSelectContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2999);
      queryExpressionNointo();
      setState(3001); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3000);
                unionParenthesis();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3003); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(3010);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::UNION) {
        setState(3005);
        match(MySQLParser::UNION);
        setState(3007);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::ALL

        || _la == MySQLParser::DISTINCT) {
          setState(3006);
          dynamic_cast<UnionParenthesisSelectContext *>(_localctx)->unionType = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::ALL

          || _la == MySQLParser::DISTINCT)) {
            dynamic_cast<UnionParenthesisSelectContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3009);
        queryExpression();
      }
      setState(3013);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ORDER) {
        setState(3012);
        orderByClause();
      }
      setState(3016);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LIMIT) {
        setState(3015);
        limitClause();
      }
      setState(3019);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
      case 1: {
        setState(3018);
        lockClause();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpdateStatementContext ------------------------------------------------------------------

MySQLParser::UpdateStatementContext::UpdateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::SingleUpdateStatementContext* MySQLParser::UpdateStatementContext::singleUpdateStatement() {
  return getRuleContext<MySQLParser::SingleUpdateStatementContext>(0);
}

MySQLParser::MultipleUpdateStatementContext* MySQLParser::UpdateStatementContext::multipleUpdateStatement() {
  return getRuleContext<MySQLParser::MultipleUpdateStatementContext>(0);
}


size_t MySQLParser::UpdateStatementContext::getRuleIndex() const {
  return MySQLParser::RuleUpdateStatement;
}

void MySQLParser::UpdateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdateStatement(this);
}

void MySQLParser::UpdateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdateStatement(this);
}


antlrcpp::Any MySQLParser::UpdateStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUpdateStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UpdateStatementContext* MySQLParser::updateStatement() {
  UpdateStatementContext *_localctx = _tracker.createInstance<UpdateStatementContext>(_ctx, getState());
  enterRule(_localctx, 180, MySQLParser::RuleUpdateStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3025);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 410, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3023);
      singleUpdateStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3024);
      multipleUpdateStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertStatementValueContext ------------------------------------------------------------------

MySQLParser::InsertStatementValueContext::InsertStatementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::SelectStatementContext* MySQLParser::InsertStatementValueContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

std::vector<MySQLParser::ExpressionsWithDefaultsContext *> MySQLParser::InsertStatementValueContext::expressionsWithDefaults() {
  return getRuleContexts<MySQLParser::ExpressionsWithDefaultsContext>();
}

MySQLParser::ExpressionsWithDefaultsContext* MySQLParser::InsertStatementValueContext::expressionsWithDefaults(size_t i) {
  return getRuleContext<MySQLParser::ExpressionsWithDefaultsContext>(i);
}

tree::TerminalNode* MySQLParser::InsertStatementValueContext::VALUES() {
  return getToken(MySQLParser::VALUES, 0);
}

tree::TerminalNode* MySQLParser::InsertStatementValueContext::VALUE() {
  return getToken(MySQLParser::VALUE, 0);
}


size_t MySQLParser::InsertStatementValueContext::getRuleIndex() const {
  return MySQLParser::RuleInsertStatementValue;
}

void MySQLParser::InsertStatementValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsertStatementValue(this);
}

void MySQLParser::InsertStatementValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsertStatementValue(this);
}


antlrcpp::Any MySQLParser::InsertStatementValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertStatementValue(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::InsertStatementValueContext* MySQLParser::insertStatementValue() {
  InsertStatementValueContext *_localctx = _tracker.createInstance<InsertStatementValueContext>(_ctx, getState());
  enterRule(_localctx, 182, MySQLParser::RuleInsertStatementValue);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3042);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::SELECT:
      case MySQLParser::LR_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(3027);
        selectStatement();
        break;
      }

      case MySQLParser::VALUES:
      case MySQLParser::VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(3028);
        dynamic_cast<InsertStatementValueContext *>(_localctx)->insertFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::VALUES || _la == MySQLParser::VALUE)) {
          dynamic_cast<InsertStatementValueContext *>(_localctx)->insertFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3029);
        match(MySQLParser::LR_BRACKET);
        setState(3030);
        expressionsWithDefaults();
        setState(3031);
        match(MySQLParser::RR_BRACKET);
        setState(3039);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(3032);
          match(MySQLParser::COMMA);
          setState(3033);
          match(MySQLParser::LR_BRACKET);
          setState(3034);
          expressionsWithDefaults();
          setState(3035);
          match(MySQLParser::RR_BRACKET);
          setState(3041);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpdatedElementContext ------------------------------------------------------------------

MySQLParser::UpdatedElementContext::UpdatedElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::FullColumnNameContext* MySQLParser::UpdatedElementContext::fullColumnName() {
  return getRuleContext<MySQLParser::FullColumnNameContext>(0);
}

MySQLParser::ExpressionOrDefaultContext* MySQLParser::UpdatedElementContext::expressionOrDefault() {
  return getRuleContext<MySQLParser::ExpressionOrDefaultContext>(0);
}


size_t MySQLParser::UpdatedElementContext::getRuleIndex() const {
  return MySQLParser::RuleUpdatedElement;
}

void MySQLParser::UpdatedElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdatedElement(this);
}

void MySQLParser::UpdatedElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdatedElement(this);
}


antlrcpp::Any MySQLParser::UpdatedElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUpdatedElement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UpdatedElementContext* MySQLParser::updatedElement() {
  UpdatedElementContext *_localctx = _tracker.createInstance<UpdatedElementContext>(_ctx, getState());
  enterRule(_localctx, 184, MySQLParser::RuleUpdatedElement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3044);
    fullColumnName();
    setState(3045);
    match(MySQLParser::EQUAL_SYMBOL);
    setState(3046);
    expressionOrDefault();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentFieldContext ------------------------------------------------------------------

MySQLParser::AssignmentFieldContext::AssignmentFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UidContext* MySQLParser::AssignmentFieldContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AssignmentFieldContext::LOCAL_ID() {
  return getToken(MySQLParser::LOCAL_ID, 0);
}


size_t MySQLParser::AssignmentFieldContext::getRuleIndex() const {
  return MySQLParser::RuleAssignmentField;
}

void MySQLParser::AssignmentFieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentField(this);
}

void MySQLParser::AssignmentFieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentField(this);
}


antlrcpp::Any MySQLParser::AssignmentFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentField(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AssignmentFieldContext* MySQLParser::assignmentField() {
  AssignmentFieldContext *_localctx = _tracker.createInstance<AssignmentFieldContext>(_ctx, getState());
  enterRule(_localctx, 186, MySQLParser::RuleAssignmentField);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3050);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::DATABASE:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::DATETIME:
      case MySQLParser::YEAR:
      case MySQLParser::TEXT:
      case MySQLParser::ENUM:
      case MySQLParser::SERIAL:
      case MySQLParser::COUNT:
      case MySQLParser::POSITION:
      case MySQLParser::ACCOUNT:
      case MySQLParser::ACTION:
      case MySQLParser::AFTER:
      case MySQLParser::AGGREGATE:
      case MySQLParser::ALGORITHM:
      case MySQLParser::ANY:
      case MySQLParser::AT:
      case MySQLParser::AUTHORS:
      case MySQLParser::AUTOCOMMIT:
      case MySQLParser::AUTOEXTEND_SIZE:
      case MySQLParser::AUTO_INCREMENT:
      case MySQLParser::AVG_ROW_LENGTH:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::BIT:
      case MySQLParser::BLOCK:
      case MySQLParser::BOOL:
      case MySQLParser::BOOLEAN:
      case MySQLParser::BTREE:
      case MySQLParser::CACHE:
      case MySQLParser::CASCADED:
      case MySQLParser::CHAIN:
      case MySQLParser::CHANGED:
      case MySQLParser::CHANNEL:
      case MySQLParser::CHECKSUM:
      case MySQLParser::PAGE_CHECKSUM:
      case MySQLParser::CIPHER:
      case MySQLParser::CLIENT:
      case MySQLParser::CLOSE:
      case MySQLParser::COALESCE:
      case MySQLParser::CODE:
      case MySQLParser::COLUMNS:
      case MySQLParser::COLUMN_FORMAT:
      case MySQLParser::COMMENT:
      case MySQLParser::COMMIT:
      case MySQLParser::COMPACT:
      case MySQLParser::COMPLETION:
      case MySQLParser::COMPRESSED:
      case MySQLParser::COMPRESSION:
      case MySQLParser::CONCURRENT:
      case MySQLParser::CONNECTION:
      case MySQLParser::CONSISTENT:
      case MySQLParser::CONTAINS:
      case MySQLParser::CONTEXT:
      case MySQLParser::CONTRIBUTORS:
      case MySQLParser::COPY:
      case MySQLParser::CPU:
      case MySQLParser::DATA:
      case MySQLParser::DATAFILE:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DEFAULT_AUTH:
      case MySQLParser::DEFINER:
      case MySQLParser::DELAY_KEY_WRITE:
      case MySQLParser::DES_KEY_FILE:
      case MySQLParser::DIRECTORY:
      case MySQLParser::DISABLE:
      case MySQLParser::DISCARD:
      case MySQLParser::DISK:
      case MySQLParser::DO:
      case MySQLParser::DUMPFILE:
      case MySQLParser::DUPLICATE:
      case MySQLParser::DYNAMIC:
      case MySQLParser::ENABLE:
      case MySQLParser::ENCRYPTION:
      case MySQLParser::END:
      case MySQLParser::ENDS:
      case MySQLParser::ENGINE:
      case MySQLParser::ENGINES:
      case MySQLParser::ERROR:
      case MySQLParser::ERRORS:
      case MySQLParser::ESCAPE:
      case MySQLParser::EVEN:
      case MySQLParser::EVENT:
      case MySQLParser::EVENTS:
      case MySQLParser::EVERY:
      case MySQLParser::EXCHANGE:
      case MySQLParser::EXCLUSIVE:
      case MySQLParser::EXPIRE:
      case MySQLParser::EXPORT:
      case MySQLParser::EXTENDED:
      case MySQLParser::EXTENT_SIZE:
      case MySQLParser::FAST:
      case MySQLParser::FAULTS:
      case MySQLParser::FIELDS:
      case MySQLParser::FILE_BLOCK_SIZE:
      case MySQLParser::FILTER:
      case MySQLParser::FIRST:
      case MySQLParser::FIXED:
      case MySQLParser::FLUSH:
      case MySQLParser::FOLLOWS:
      case MySQLParser::FOUND:
      case MySQLParser::FULL:
      case MySQLParser::FUNCTION:
      case MySQLParser::GENERAL:
      case MySQLParser::GLOBAL:
      case MySQLParser::GRANTS:
      case MySQLParser::GROUP_REPLICATION:
      case MySQLParser::HANDLER:
      case MySQLParser::HASH:
      case MySQLParser::HELP:
      case MySQLParser::HOST:
      case MySQLParser::HOSTS:
      case MySQLParser::IDENTIFIED:
      case MySQLParser::IGNORE_SERVER_IDS:
      case MySQLParser::IMPORT:
      case MySQLParser::INDEXES:
      case MySQLParser::INITIAL_SIZE:
      case MySQLParser::INPLACE:
      case MySQLParser::INSERT_METHOD:
      case MySQLParser::INSTALL:
      case MySQLParser::INSTANCE:
      case MySQLParser::INVISIBLE:
      case MySQLParser::INVOKER:
      case MySQLParser::IO:
      case MySQLParser::IO_THREAD:
      case MySQLParser::IPC:
      case MySQLParser::ISOLATION:
      case MySQLParser::ISSUER:
      case MySQLParser::JSON:
      case MySQLParser::KEY_BLOCK_SIZE:
      case MySQLParser::LANGUAGE:
      case MySQLParser::LAST:
      case MySQLParser::LEAVES:
      case MySQLParser::LESS:
      case MySQLParser::LEVEL:
      case MySQLParser::LIST:
      case MySQLParser::LOCAL:
      case MySQLParser::LOGFILE:
      case MySQLParser::LOGS:
      case MySQLParser::MASTER:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_HEARTBEAT_PERIOD:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::MASTER_SSL:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
      case MySQLParser::MAX_QUERIES_PER_HOUR:
      case MySQLParser::MAX_ROWS:
      case MySQLParser::MAX_SIZE:
      case MySQLParser::MAX_UPDATES_PER_HOUR:
      case MySQLParser::MAX_USER_CONNECTIONS:
      case MySQLParser::MEDIUM:
      case MySQLParser::MERGE:
      case MySQLParser::MID:
      case MySQLParser::MIGRATE:
      case MySQLParser::MIN_ROWS:
      case MySQLParser::MODE:
      case MySQLParser::MODIFY:
      case MySQLParser::MUTEX:
      case MySQLParser::MYSQL:
      case MySQLParser::NAME:
      case MySQLParser::NAMES:
      case MySQLParser::NCHAR:
      case MySQLParser::NEVER:
      case MySQLParser::NEXT:
      case MySQLParser::NO:
      case MySQLParser::NODEGROUP:
      case MySQLParser::NONE:
      case MySQLParser::OFFLINE:
      case MySQLParser::OFFSET:
      case MySQLParser::OJ:
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::ONE:
      case MySQLParser::ONLINE:
      case MySQLParser::ONLY:
      case MySQLParser::OPEN:
      case MySQLParser::OPTIMIZER_COSTS:
      case MySQLParser::OPTIONS:
      case MySQLParser::OWNER:
      case MySQLParser::PACK_KEYS:
      case MySQLParser::PAGE:
      case MySQLParser::PARSER:
      case MySQLParser::PARTIAL:
      case MySQLParser::PARTITIONING:
      case MySQLParser::PARTITIONS:
      case MySQLParser::PASSWORD:
      case MySQLParser::PHASE:
      case MySQLParser::PLUGIN:
      case MySQLParser::PLUGIN_DIR:
      case MySQLParser::PLUGINS:
      case MySQLParser::PORT:
      case MySQLParser::PRECEDES:
      case MySQLParser::PREPARE:
      case MySQLParser::PRESERVE:
      case MySQLParser::PREV:
      case MySQLParser::PROCESSLIST:
      case MySQLParser::PROFILE:
      case MySQLParser::PROFILES:
      case MySQLParser::PROXY:
      case MySQLParser::QUERY:
      case MySQLParser::QUICK:
      case MySQLParser::REBUILD:
      case MySQLParser::RECOVER:
      case MySQLParser::REDO_BUFFER_SIZE:
      case MySQLParser::REDUNDANT:
      case MySQLParser::RELAY:
      case MySQLParser::RELAY_LOG_FILE:
      case MySQLParser::RELAY_LOG_POS:
      case MySQLParser::RELAYLOG:
      case MySQLParser::REMOVE:
      case MySQLParser::REORGANIZE:
      case MySQLParser::REPAIR:
      case MySQLParser::REPLICATE_DO_DB:
      case MySQLParser::REPLICATE_DO_TABLE:
      case MySQLParser::REPLICATE_IGNORE_DB:
      case MySQLParser::REPLICATE_IGNORE_TABLE:
      case MySQLParser::REPLICATE_REWRITE_DB:
      case MySQLParser::REPLICATE_WILD_DO_TABLE:
      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySQLParser::REPLICATION:
      case MySQLParser::RESET:
      case MySQLParser::RESUME:
      case MySQLParser::RETURNS:
      case MySQLParser::ROLLBACK:
      case MySQLParser::ROLLUP:
      case MySQLParser::ROTATE:
      case MySQLParser::ROW:
      case MySQLParser::ROWS:
      case MySQLParser::ROW_FORMAT:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::SCHEDULE:
      case MySQLParser::SECURITY:
      case MySQLParser::SERVER:
      case MySQLParser::SESSION:
      case MySQLParser::SHARE:
      case MySQLParser::SHARED:
      case MySQLParser::SIGNED:
      case MySQLParser::SIMPLE:
      case MySQLParser::SLAVE:
      case MySQLParser::SLOW:
      case MySQLParser::SNAPSHOT:
      case MySQLParser::SOCKET:
      case MySQLParser::SOME:
      case MySQLParser::SONAME:
      case MySQLParser::SOUNDS:
      case MySQLParser::SOURCE:
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_AFTER_MTS_GAPS:
      case MySQLParser::SQL_BEFORE_GTIDS:
      case MySQLParser::SQL_BUFFER_RESULT:
      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE:
      case MySQLParser::SQL_THREAD:
      case MySQLParser::START:
      case MySQLParser::STARTS:
      case MySQLParser::STATS_AUTO_RECALC:
      case MySQLParser::STATS_PERSISTENT:
      case MySQLParser::STATS_SAMPLE_PAGES:
      case MySQLParser::STATUS:
      case MySQLParser::STOP:
      case MySQLParser::STORAGE:
      case MySQLParser::STRING:
      case MySQLParser::SUBJECT:
      case MySQLParser::SUBPARTITION:
      case MySQLParser::SUBPARTITIONS:
      case MySQLParser::SUSPEND:
      case MySQLParser::SWAPS:
      case MySQLParser::SWITCHES:
      case MySQLParser::TABLESPACE:
      case MySQLParser::TEMPORARY:
      case MySQLParser::TEMPTABLE:
      case MySQLParser::THAN:
      case MySQLParser::TRADITIONAL:
      case MySQLParser::TRANSACTION:
      case MySQLParser::TRIGGERS:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNDEFINED:
      case MySQLParser::UNDOFILE:
      case MySQLParser::UNDO_BUFFER_SIZE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::UNKNOWN:
      case MySQLParser::UNTIL:
      case MySQLParser::UPGRADE:
      case MySQLParser::USER:
      case MySQLParser::USE_FRM:
      case MySQLParser::USER_RESOURCES:
      case MySQLParser::VALIDATION:
      case MySQLParser::VALUE:
      case MySQLParser::VARIABLES:
      case MySQLParser::VIEW:
      case MySQLParser::VISIBLE:
      case MySQLParser::WAIT:
      case MySQLParser::WARNINGS:
      case MySQLParser::WITHOUT:
      case MySQLParser::WORK:
      case MySQLParser::WRAPPER:
      case MySQLParser::X509:
      case MySQLParser::XA:
      case MySQLParser::XML:
      case MySQLParser::INTERNAL:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::TABLES:
      case MySQLParser::ROUTINE:
      case MySQLParser::EXECUTE:
      case MySQLParser::FILE:
      case MySQLParser::PROCESS:
      case MySQLParser::RELOAD:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::SUPER:
      case MySQLParser::PRIVILEGES:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4:
      case MySQLParser::ARCHIVE:
      case MySQLParser::BLACKHOLE:
      case MySQLParser::CSV:
      case MySQLParser::FEDERATED:
      case MySQLParser::INNODB:
      case MySQLParser::MEMORY:
      case MySQLParser::MRG_MYISAM:
      case MySQLParser::MYISAM:
      case MySQLParser::NDB:
      case MySQLParser::NDBCLUSTER:
      case MySQLParser::PERFORMANCE_SCHEMA:
      case MySQLParser::TOKUDB:
      case MySQLParser::REPEATABLE:
      case MySQLParser::COMMITTED:
      case MySQLParser::UNCOMMITTED:
      case MySQLParser::SERIALIZABLE:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION:
      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::ID:
      case MySQLParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 1);
        setState(3048);
        uid();
        break;
      }

      case MySQLParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(3049);
        match(MySQLParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockClauseContext ------------------------------------------------------------------

MySQLParser::LockClauseContext::LockClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LockClauseContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::LockClauseContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}

tree::TerminalNode* MySQLParser::LockClauseContext::LOCK() {
  return getToken(MySQLParser::LOCK, 0);
}

tree::TerminalNode* MySQLParser::LockClauseContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

tree::TerminalNode* MySQLParser::LockClauseContext::SHARE() {
  return getToken(MySQLParser::SHARE, 0);
}

tree::TerminalNode* MySQLParser::LockClauseContext::MODE() {
  return getToken(MySQLParser::MODE, 0);
}


size_t MySQLParser::LockClauseContext::getRuleIndex() const {
  return MySQLParser::RuleLockClause;
}

void MySQLParser::LockClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLockClause(this);
}

void MySQLParser::LockClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLockClause(this);
}


antlrcpp::Any MySQLParser::LockClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLockClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LockClauseContext* MySQLParser::lockClause() {
  LockClauseContext *_localctx = _tracker.createInstance<LockClauseContext>(_ctx, getState());
  enterRule(_localctx, 188, MySQLParser::RuleLockClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3058);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(3052);
        match(MySQLParser::FOR);
        setState(3053);
        match(MySQLParser::UPDATE);
        break;
      }

      case MySQLParser::LOCK: {
        enterOuterAlt(_localctx, 2);
        setState(3054);
        match(MySQLParser::LOCK);
        setState(3055);
        match(MySQLParser::IN);
        setState(3056);
        match(MySQLParser::SHARE);
        setState(3057);
        match(MySQLParser::MODE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleDeleteStatementContext ------------------------------------------------------------------

MySQLParser::SingleDeleteStatementContext::SingleDeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::DELETE() {
  return getToken(MySQLParser::DELETE, 0);
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

MySQLParser::TableNameContext* MySQLParser::SingleDeleteStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::QUICK() {
  return getToken(MySQLParser::QUICK, 0);
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::SingleDeleteStatementContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::WhereClauseContext* MySQLParser::SingleDeleteStatementContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

MySQLParser::OrderByClauseContext* MySQLParser::SingleDeleteStatementContext::orderByClause() {
  return getRuleContext<MySQLParser::OrderByClauseContext>(0);
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::LIMIT() {
  return getToken(MySQLParser::LIMIT, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::SingleDeleteStatementContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}

MySQLParser::UidContext* MySQLParser::SingleDeleteStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::SingleDeleteStatementContext::AS() {
  return getToken(MySQLParser::AS, 0);
}


size_t MySQLParser::SingleDeleteStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSingleDeleteStatement;
}

void MySQLParser::SingleDeleteStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleDeleteStatement(this);
}

void MySQLParser::SingleDeleteStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleDeleteStatement(this);
}


antlrcpp::Any MySQLParser::SingleDeleteStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSingleDeleteStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SingleDeleteStatementContext* MySQLParser::singleDeleteStatement() {
  SingleDeleteStatementContext *_localctx = _tracker.createInstance<SingleDeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 190, MySQLParser::RuleSingleDeleteStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3060);
    match(MySQLParser::DELETE);
    setState(3062);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOW_PRIORITY) {
      setState(3061);
      dynamic_cast<SingleDeleteStatementContext *>(_localctx)->priority = match(MySQLParser::LOW_PRIORITY);
    }
    setState(3065);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::QUICK) {
      setState(3064);
      match(MySQLParser::QUICK);
    }
    setState(3068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(3067);
      match(MySQLParser::IGNORE);
    }
    setState(3070);
    match(MySQLParser::FROM);
    setState(3071);
    tableName();
    setState(3076);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      setState(3073);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(3072);
        match(MySQLParser::AS);
      }
      setState(3075);
      dynamic_cast<SingleDeleteStatementContext *>(_localctx)->alias = uid();
      break;
    }

    }
    setState(3083);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITION) {
      setState(3078);
      match(MySQLParser::PARTITION);
      setState(3079);
      match(MySQLParser::LR_BRACKET);
      setState(3080);
      uidList();
      setState(3081);
      match(MySQLParser::RR_BRACKET);
    }
    setState(3086);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WHERE) {
      setState(3085);
      whereClause();
    }
    setState(3089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ORDER) {
      setState(3088);
      orderByClause();
    }
    setState(3093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LIMIT) {
      setState(3091);
      match(MySQLParser::LIMIT);
      setState(3092);
      decimalLiteral();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipleDeleteStatementContext ------------------------------------------------------------------

MySQLParser::MultipleDeleteStatementContext::MultipleDeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::MultipleDeleteStatementContext::DELETE() {
  return getToken(MySQLParser::DELETE, 0);
}

std::vector<MySQLParser::Delete_stmt_tableContext *> MySQLParser::MultipleDeleteStatementContext::delete_stmt_table() {
  return getRuleContexts<MySQLParser::Delete_stmt_tableContext>();
}

MySQLParser::Delete_stmt_tableContext* MySQLParser::MultipleDeleteStatementContext::delete_stmt_table(size_t i) {
  return getRuleContext<MySQLParser::Delete_stmt_tableContext>(i);
}

tree::TerminalNode* MySQLParser::MultipleDeleteStatementContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

MySQLParser::TableSourcesContext* MySQLParser::MultipleDeleteStatementContext::tableSources() {
  return getRuleContext<MySQLParser::TableSourcesContext>(0);
}

tree::TerminalNode* MySQLParser::MultipleDeleteStatementContext::USING() {
  return getToken(MySQLParser::USING, 0);
}

tree::TerminalNode* MySQLParser::MultipleDeleteStatementContext::QUICK() {
  return getToken(MySQLParser::QUICK, 0);
}

tree::TerminalNode* MySQLParser::MultipleDeleteStatementContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

MySQLParser::WhereClauseContext* MySQLParser::MultipleDeleteStatementContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* MySQLParser::MultipleDeleteStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}


size_t MySQLParser::MultipleDeleteStatementContext::getRuleIndex() const {
  return MySQLParser::RuleMultipleDeleteStatement;
}

void MySQLParser::MultipleDeleteStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultipleDeleteStatement(this);
}

void MySQLParser::MultipleDeleteStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultipleDeleteStatement(this);
}


antlrcpp::Any MySQLParser::MultipleDeleteStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMultipleDeleteStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::MultipleDeleteStatementContext* MySQLParser::multipleDeleteStatement() {
  MultipleDeleteStatementContext *_localctx = _tracker.createInstance<MultipleDeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 192, MySQLParser::RuleMultipleDeleteStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3095);
    match(MySQLParser::DELETE);
    setState(3097);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOW_PRIORITY) {
      setState(3096);
      dynamic_cast<MultipleDeleteStatementContext *>(_localctx)->priority = match(MySQLParser::LOW_PRIORITY);
    }
    setState(3100);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 425, _ctx)) {
    case 1: {
      setState(3099);
      match(MySQLParser::QUICK);
      break;
    }

    }
    setState(3103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(3102);
      match(MySQLParser::IGNORE);
    }
    setState(3128);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::DATABASE:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::DATETIME:
      case MySQLParser::YEAR:
      case MySQLParser::TEXT:
      case MySQLParser::ENUM:
      case MySQLParser::SERIAL:
      case MySQLParser::COUNT:
      case MySQLParser::POSITION:
      case MySQLParser::ACCOUNT:
      case MySQLParser::ACTION:
      case MySQLParser::AFTER:
      case MySQLParser::AGGREGATE:
      case MySQLParser::ALGORITHM:
      case MySQLParser::ANY:
      case MySQLParser::AT:
      case MySQLParser::AUTHORS:
      case MySQLParser::AUTOCOMMIT:
      case MySQLParser::AUTOEXTEND_SIZE:
      case MySQLParser::AUTO_INCREMENT:
      case MySQLParser::AVG_ROW_LENGTH:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::BIT:
      case MySQLParser::BLOCK:
      case MySQLParser::BOOL:
      case MySQLParser::BOOLEAN:
      case MySQLParser::BTREE:
      case MySQLParser::CACHE:
      case MySQLParser::CASCADED:
      case MySQLParser::CHAIN:
      case MySQLParser::CHANGED:
      case MySQLParser::CHANNEL:
      case MySQLParser::CHECKSUM:
      case MySQLParser::PAGE_CHECKSUM:
      case MySQLParser::CIPHER:
      case MySQLParser::CLIENT:
      case MySQLParser::CLOSE:
      case MySQLParser::COALESCE:
      case MySQLParser::CODE:
      case MySQLParser::COLUMNS:
      case MySQLParser::COLUMN_FORMAT:
      case MySQLParser::COMMENT:
      case MySQLParser::COMMIT:
      case MySQLParser::COMPACT:
      case MySQLParser::COMPLETION:
      case MySQLParser::COMPRESSED:
      case MySQLParser::COMPRESSION:
      case MySQLParser::CONCURRENT:
      case MySQLParser::CONNECTION:
      case MySQLParser::CONSISTENT:
      case MySQLParser::CONTAINS:
      case MySQLParser::CONTEXT:
      case MySQLParser::CONTRIBUTORS:
      case MySQLParser::COPY:
      case MySQLParser::CPU:
      case MySQLParser::DATA:
      case MySQLParser::DATAFILE:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DEFAULT_AUTH:
      case MySQLParser::DEFINER:
      case MySQLParser::DELAY_KEY_WRITE:
      case MySQLParser::DES_KEY_FILE:
      case MySQLParser::DIRECTORY:
      case MySQLParser::DISABLE:
      case MySQLParser::DISCARD:
      case MySQLParser::DISK:
      case MySQLParser::DO:
      case MySQLParser::DUMPFILE:
      case MySQLParser::DUPLICATE:
      case MySQLParser::DYNAMIC:
      case MySQLParser::ENABLE:
      case MySQLParser::ENCRYPTION:
      case MySQLParser::END:
      case MySQLParser::ENDS:
      case MySQLParser::ENGINE:
      case MySQLParser::ENGINES:
      case MySQLParser::ERROR:
      case MySQLParser::ERRORS:
      case MySQLParser::ESCAPE:
      case MySQLParser::EVEN:
      case MySQLParser::EVENT:
      case MySQLParser::EVENTS:
      case MySQLParser::EVERY:
      case MySQLParser::EXCHANGE:
      case MySQLParser::EXCLUSIVE:
      case MySQLParser::EXPIRE:
      case MySQLParser::EXPORT:
      case MySQLParser::EXTENDED:
      case MySQLParser::EXTENT_SIZE:
      case MySQLParser::FAST:
      case MySQLParser::FAULTS:
      case MySQLParser::FIELDS:
      case MySQLParser::FILE_BLOCK_SIZE:
      case MySQLParser::FILTER:
      case MySQLParser::FIRST:
      case MySQLParser::FIXED:
      case MySQLParser::FLUSH:
      case MySQLParser::FOLLOWS:
      case MySQLParser::FOUND:
      case MySQLParser::FULL:
      case MySQLParser::FUNCTION:
      case MySQLParser::GENERAL:
      case MySQLParser::GLOBAL:
      case MySQLParser::GRANTS:
      case MySQLParser::GROUP_REPLICATION:
      case MySQLParser::HANDLER:
      case MySQLParser::HASH:
      case MySQLParser::HELP:
      case MySQLParser::HOST:
      case MySQLParser::HOSTS:
      case MySQLParser::IDENTIFIED:
      case MySQLParser::IGNORE_SERVER_IDS:
      case MySQLParser::IMPORT:
      case MySQLParser::INDEXES:
      case MySQLParser::INITIAL_SIZE:
      case MySQLParser::INPLACE:
      case MySQLParser::INSERT_METHOD:
      case MySQLParser::INSTALL:
      case MySQLParser::INSTANCE:
      case MySQLParser::INVISIBLE:
      case MySQLParser::INVOKER:
      case MySQLParser::IO:
      case MySQLParser::IO_THREAD:
      case MySQLParser::IPC:
      case MySQLParser::ISOLATION:
      case MySQLParser::ISSUER:
      case MySQLParser::JSON:
      case MySQLParser::KEY_BLOCK_SIZE:
      case MySQLParser::LANGUAGE:
      case MySQLParser::LAST:
      case MySQLParser::LEAVES:
      case MySQLParser::LESS:
      case MySQLParser::LEVEL:
      case MySQLParser::LIST:
      case MySQLParser::LOCAL:
      case MySQLParser::LOGFILE:
      case MySQLParser::LOGS:
      case MySQLParser::MASTER:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_HEARTBEAT_PERIOD:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::MASTER_SSL:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
      case MySQLParser::MAX_QUERIES_PER_HOUR:
      case MySQLParser::MAX_ROWS:
      case MySQLParser::MAX_SIZE:
      case MySQLParser::MAX_UPDATES_PER_HOUR:
      case MySQLParser::MAX_USER_CONNECTIONS:
      case MySQLParser::MEDIUM:
      case MySQLParser::MERGE:
      case MySQLParser::MID:
      case MySQLParser::MIGRATE:
      case MySQLParser::MIN_ROWS:
      case MySQLParser::MODE:
      case MySQLParser::MODIFY:
      case MySQLParser::MUTEX:
      case MySQLParser::MYSQL:
      case MySQLParser::NAME:
      case MySQLParser::NAMES:
      case MySQLParser::NCHAR:
      case MySQLParser::NEVER:
      case MySQLParser::NEXT:
      case MySQLParser::NO:
      case MySQLParser::NODEGROUP:
      case MySQLParser::NONE:
      case MySQLParser::OFFLINE:
      case MySQLParser::OFFSET:
      case MySQLParser::OJ:
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::ONE:
      case MySQLParser::ONLINE:
      case MySQLParser::ONLY:
      case MySQLParser::OPEN:
      case MySQLParser::OPTIMIZER_COSTS:
      case MySQLParser::OPTIONS:
      case MySQLParser::OWNER:
      case MySQLParser::PACK_KEYS:
      case MySQLParser::PAGE:
      case MySQLParser::PARSER:
      case MySQLParser::PARTIAL:
      case MySQLParser::PARTITIONING:
      case MySQLParser::PARTITIONS:
      case MySQLParser::PASSWORD:
      case MySQLParser::PHASE:
      case MySQLParser::PLUGIN:
      case MySQLParser::PLUGIN_DIR:
      case MySQLParser::PLUGINS:
      case MySQLParser::PORT:
      case MySQLParser::PRECEDES:
      case MySQLParser::PREPARE:
      case MySQLParser::PRESERVE:
      case MySQLParser::PREV:
      case MySQLParser::PROCESSLIST:
      case MySQLParser::PROFILE:
      case MySQLParser::PROFILES:
      case MySQLParser::PROXY:
      case MySQLParser::QUERY:
      case MySQLParser::QUICK:
      case MySQLParser::REBUILD:
      case MySQLParser::RECOVER:
      case MySQLParser::REDO_BUFFER_SIZE:
      case MySQLParser::REDUNDANT:
      case MySQLParser::RELAY:
      case MySQLParser::RELAY_LOG_FILE:
      case MySQLParser::RELAY_LOG_POS:
      case MySQLParser::RELAYLOG:
      case MySQLParser::REMOVE:
      case MySQLParser::REORGANIZE:
      case MySQLParser::REPAIR:
      case MySQLParser::REPLICATE_DO_DB:
      case MySQLParser::REPLICATE_DO_TABLE:
      case MySQLParser::REPLICATE_IGNORE_DB:
      case MySQLParser::REPLICATE_IGNORE_TABLE:
      case MySQLParser::REPLICATE_REWRITE_DB:
      case MySQLParser::REPLICATE_WILD_DO_TABLE:
      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySQLParser::REPLICATION:
      case MySQLParser::RESET:
      case MySQLParser::RESUME:
      case MySQLParser::RETURNS:
      case MySQLParser::ROLLBACK:
      case MySQLParser::ROLLUP:
      case MySQLParser::ROTATE:
      case MySQLParser::ROW:
      case MySQLParser::ROWS:
      case MySQLParser::ROW_FORMAT:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::SCHEDULE:
      case MySQLParser::SECURITY:
      case MySQLParser::SERVER:
      case MySQLParser::SESSION:
      case MySQLParser::SHARE:
      case MySQLParser::SHARED:
      case MySQLParser::SIGNED:
      case MySQLParser::SIMPLE:
      case MySQLParser::SLAVE:
      case MySQLParser::SLOW:
      case MySQLParser::SNAPSHOT:
      case MySQLParser::SOCKET:
      case MySQLParser::SOME:
      case MySQLParser::SONAME:
      case MySQLParser::SOUNDS:
      case MySQLParser::SOURCE:
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_AFTER_MTS_GAPS:
      case MySQLParser::SQL_BEFORE_GTIDS:
      case MySQLParser::SQL_BUFFER_RESULT:
      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE:
      case MySQLParser::SQL_THREAD:
      case MySQLParser::START:
      case MySQLParser::STARTS:
      case MySQLParser::STATS_AUTO_RECALC:
      case MySQLParser::STATS_PERSISTENT:
      case MySQLParser::STATS_SAMPLE_PAGES:
      case MySQLParser::STATUS:
      case MySQLParser::STOP:
      case MySQLParser::STORAGE:
      case MySQLParser::STRING:
      case MySQLParser::SUBJECT:
      case MySQLParser::SUBPARTITION:
      case MySQLParser::SUBPARTITIONS:
      case MySQLParser::SUSPEND:
      case MySQLParser::SWAPS:
      case MySQLParser::SWITCHES:
      case MySQLParser::TABLESPACE:
      case MySQLParser::TEMPORARY:
      case MySQLParser::TEMPTABLE:
      case MySQLParser::THAN:
      case MySQLParser::TRADITIONAL:
      case MySQLParser::TRANSACTION:
      case MySQLParser::TRIGGERS:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNDEFINED:
      case MySQLParser::UNDOFILE:
      case MySQLParser::UNDO_BUFFER_SIZE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::UNKNOWN:
      case MySQLParser::UNTIL:
      case MySQLParser::UPGRADE:
      case MySQLParser::USER:
      case MySQLParser::USE_FRM:
      case MySQLParser::USER_RESOURCES:
      case MySQLParser::VALIDATION:
      case MySQLParser::VALUE:
      case MySQLParser::VARIABLES:
      case MySQLParser::VIEW:
      case MySQLParser::VISIBLE:
      case MySQLParser::WAIT:
      case MySQLParser::WARNINGS:
      case MySQLParser::WITHOUT:
      case MySQLParser::WORK:
      case MySQLParser::WRAPPER:
      case MySQLParser::X509:
      case MySQLParser::XA:
      case MySQLParser::XML:
      case MySQLParser::INTERNAL:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::TABLES:
      case MySQLParser::ROUTINE:
      case MySQLParser::EXECUTE:
      case MySQLParser::FILE:
      case MySQLParser::PROCESS:
      case MySQLParser::RELOAD:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::SUPER:
      case MySQLParser::PRIVILEGES:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4:
      case MySQLParser::ARCHIVE:
      case MySQLParser::BLACKHOLE:
      case MySQLParser::CSV:
      case MySQLParser::FEDERATED:
      case MySQLParser::INNODB:
      case MySQLParser::MEMORY:
      case MySQLParser::MRG_MYISAM:
      case MySQLParser::MYISAM:
      case MySQLParser::NDB:
      case MySQLParser::NDBCLUSTER:
      case MySQLParser::PERFORMANCE_SCHEMA:
      case MySQLParser::TOKUDB:
      case MySQLParser::REPEATABLE:
      case MySQLParser::COMMITTED:
      case MySQLParser::UNCOMMITTED:
      case MySQLParser::SERIALIZABLE:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION:
      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::ID:
      case MySQLParser::REVERSE_QUOTE_ID: {
        setState(3105);
        delete_stmt_table();
        setState(3110);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(3106);
          match(MySQLParser::COMMA);
          setState(3107);
          delete_stmt_table();
          setState(3112);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3113);
        match(MySQLParser::FROM);
        setState(3114);
        tableSources();
        break;
      }

      case MySQLParser::FROM: {
        setState(3116);
        match(MySQLParser::FROM);
        setState(3117);
        delete_stmt_table();
        setState(3122);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(3118);
          match(MySQLParser::COMMA);
          setState(3119);
          delete_stmt_table();
          setState(3124);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3125);
        match(MySQLParser::USING);
        setState(3126);
        tableSources();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3131);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WHERE) {
      setState(3130);
      whereClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_stmt_tableContext ------------------------------------------------------------------

MySQLParser::Delete_stmt_tableContext::Delete_stmt_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::TableNameContext* MySQLParser::Delete_stmt_tableContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}


size_t MySQLParser::Delete_stmt_tableContext::getRuleIndex() const {
  return MySQLParser::RuleDelete_stmt_table;
}

void MySQLParser::Delete_stmt_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelete_stmt_table(this);
}

void MySQLParser::Delete_stmt_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelete_stmt_table(this);
}


antlrcpp::Any MySQLParser::Delete_stmt_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDelete_stmt_table(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::Delete_stmt_tableContext* MySQLParser::delete_stmt_table() {
  Delete_stmt_tableContext *_localctx = _tracker.createInstance<Delete_stmt_tableContext>(_ctx, getState());
  enterRule(_localctx, 194, MySQLParser::RuleDelete_stmt_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3133);
    tableName();
    setState(3136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DOT) {
      setState(3134);
      match(MySQLParser::DOT);
      setState(3135);
      match(MySQLParser::STAR);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerOpenStatementContext ------------------------------------------------------------------

MySQLParser::HandlerOpenStatementContext::HandlerOpenStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::HandlerOpenStatementContext::HANDLER() {
  return getToken(MySQLParser::HANDLER, 0);
}

MySQLParser::TableNameContext* MySQLParser::HandlerOpenStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerOpenStatementContext::OPEN() {
  return getToken(MySQLParser::OPEN, 0);
}

MySQLParser::UidContext* MySQLParser::HandlerOpenStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerOpenStatementContext::AS() {
  return getToken(MySQLParser::AS, 0);
}


size_t MySQLParser::HandlerOpenStatementContext::getRuleIndex() const {
  return MySQLParser::RuleHandlerOpenStatement;
}

void MySQLParser::HandlerOpenStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerOpenStatement(this);
}

void MySQLParser::HandlerOpenStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerOpenStatement(this);
}


antlrcpp::Any MySQLParser::HandlerOpenStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerOpenStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HandlerOpenStatementContext* MySQLParser::handlerOpenStatement() {
  HandlerOpenStatementContext *_localctx = _tracker.createInstance<HandlerOpenStatementContext>(_ctx, getState());
  enterRule(_localctx, 196, MySQLParser::RuleHandlerOpenStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3138);
    match(MySQLParser::HANDLER);
    setState(3139);
    tableName();
    setState(3140);
    match(MySQLParser::OPEN);
    setState(3145);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
    case 1: {
      setState(3142);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(3141);
        match(MySQLParser::AS);
      }
      setState(3144);
      uid();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerReadIndexStatementContext ------------------------------------------------------------------

MySQLParser::HandlerReadIndexStatementContext::HandlerReadIndexStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::HandlerReadIndexStatementContext::HANDLER() {
  return getToken(MySQLParser::HANDLER, 0);
}

MySQLParser::TableNameContext* MySQLParser::HandlerReadIndexStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerReadIndexStatementContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

MySQLParser::UidContext* MySQLParser::HandlerReadIndexStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::ComparisonOperatorContext* MySQLParser::HandlerReadIndexStatementContext::comparisonOperator() {
  return getRuleContext<MySQLParser::ComparisonOperatorContext>(0);
}

MySQLParser::ConstantsContext* MySQLParser::HandlerReadIndexStatementContext::constants() {
  return getRuleContext<MySQLParser::ConstantsContext>(0);
}

MySQLParser::WhereClauseContext* MySQLParser::HandlerReadIndexStatementContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerReadIndexStatementContext::LIMIT() {
  return getToken(MySQLParser::LIMIT, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::HandlerReadIndexStatementContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerReadIndexStatementContext::FIRST() {
  return getToken(MySQLParser::FIRST, 0);
}

tree::TerminalNode* MySQLParser::HandlerReadIndexStatementContext::NEXT() {
  return getToken(MySQLParser::NEXT, 0);
}

tree::TerminalNode* MySQLParser::HandlerReadIndexStatementContext::PREV() {
  return getToken(MySQLParser::PREV, 0);
}

tree::TerminalNode* MySQLParser::HandlerReadIndexStatementContext::LAST() {
  return getToken(MySQLParser::LAST, 0);
}


size_t MySQLParser::HandlerReadIndexStatementContext::getRuleIndex() const {
  return MySQLParser::RuleHandlerReadIndexStatement;
}

void MySQLParser::HandlerReadIndexStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerReadIndexStatement(this);
}

void MySQLParser::HandlerReadIndexStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerReadIndexStatement(this);
}


antlrcpp::Any MySQLParser::HandlerReadIndexStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerReadIndexStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HandlerReadIndexStatementContext* MySQLParser::handlerReadIndexStatement() {
  HandlerReadIndexStatementContext *_localctx = _tracker.createInstance<HandlerReadIndexStatementContext>(_ctx, getState());
  enterRule(_localctx, 198, MySQLParser::RuleHandlerReadIndexStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3147);
    match(MySQLParser::HANDLER);
    setState(3148);
    tableName();
    setState(3149);
    match(MySQLParser::READ);
    setState(3150);
    dynamic_cast<HandlerReadIndexStatementContext *>(_localctx)->index = uid();
    setState(3157);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::EQUAL_SYMBOL:
      case MySQLParser::GREATER_SYMBOL:
      case MySQLParser::LESS_SYMBOL:
      case MySQLParser::EXCLAMATION_SYMBOL: {
        setState(3151);
        comparisonOperator();
        setState(3152);
        match(MySQLParser::LR_BRACKET);
        setState(3153);
        constants();
        setState(3154);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      case MySQLParser::FIRST:
      case MySQLParser::LAST:
      case MySQLParser::NEXT:
      case MySQLParser::PREV: {
        setState(3156);
        dynamic_cast<HandlerReadIndexStatementContext *>(_localctx)->moveOrder = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::FIRST

        || _la == MySQLParser::LAST || _la == MySQLParser::NEXT

        || _la == MySQLParser::PREV)) {
          dynamic_cast<HandlerReadIndexStatementContext *>(_localctx)->moveOrder = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WHERE) {
      setState(3159);
      whereClause();
    }
    setState(3164);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LIMIT) {
      setState(3162);
      match(MySQLParser::LIMIT);
      setState(3163);
      decimalLiteral();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerReadStatementContext ------------------------------------------------------------------

MySQLParser::HandlerReadStatementContext::HandlerReadStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::HandlerReadStatementContext::HANDLER() {
  return getToken(MySQLParser::HANDLER, 0);
}

MySQLParser::TableNameContext* MySQLParser::HandlerReadStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerReadStatementContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

tree::TerminalNode* MySQLParser::HandlerReadStatementContext::FIRST() {
  return getToken(MySQLParser::FIRST, 0);
}

tree::TerminalNode* MySQLParser::HandlerReadStatementContext::NEXT() {
  return getToken(MySQLParser::NEXT, 0);
}

MySQLParser::WhereClauseContext* MySQLParser::HandlerReadStatementContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerReadStatementContext::LIMIT() {
  return getToken(MySQLParser::LIMIT, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::HandlerReadStatementContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}


size_t MySQLParser::HandlerReadStatementContext::getRuleIndex() const {
  return MySQLParser::RuleHandlerReadStatement;
}

void MySQLParser::HandlerReadStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerReadStatement(this);
}

void MySQLParser::HandlerReadStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerReadStatement(this);
}


antlrcpp::Any MySQLParser::HandlerReadStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerReadStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HandlerReadStatementContext* MySQLParser::handlerReadStatement() {
  HandlerReadStatementContext *_localctx = _tracker.createInstance<HandlerReadStatementContext>(_ctx, getState());
  enterRule(_localctx, 200, MySQLParser::RuleHandlerReadStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3166);
    match(MySQLParser::HANDLER);
    setState(3167);
    tableName();
    setState(3168);
    match(MySQLParser::READ);
    setState(3169);
    dynamic_cast<HandlerReadStatementContext *>(_localctx)->moveOrder = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::FIRST || _la == MySQLParser::NEXT)) {
      dynamic_cast<HandlerReadStatementContext *>(_localctx)->moveOrder = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WHERE) {
      setState(3170);
      whereClause();
    }
    setState(3175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LIMIT) {
      setState(3173);
      match(MySQLParser::LIMIT);
      setState(3174);
      decimalLiteral();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerCloseStatementContext ------------------------------------------------------------------

MySQLParser::HandlerCloseStatementContext::HandlerCloseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::HandlerCloseStatementContext::HANDLER() {
  return getToken(MySQLParser::HANDLER, 0);
}

MySQLParser::TableNameContext* MySQLParser::HandlerCloseStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::HandlerCloseStatementContext::CLOSE() {
  return getToken(MySQLParser::CLOSE, 0);
}


size_t MySQLParser::HandlerCloseStatementContext::getRuleIndex() const {
  return MySQLParser::RuleHandlerCloseStatement;
}

void MySQLParser::HandlerCloseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerCloseStatement(this);
}

void MySQLParser::HandlerCloseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerCloseStatement(this);
}


antlrcpp::Any MySQLParser::HandlerCloseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerCloseStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HandlerCloseStatementContext* MySQLParser::handlerCloseStatement() {
  HandlerCloseStatementContext *_localctx = _tracker.createInstance<HandlerCloseStatementContext>(_ctx, getState());
  enterRule(_localctx, 202, MySQLParser::RuleHandlerCloseStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3177);
    match(MySQLParser::HANDLER);
    setState(3178);
    tableName();
    setState(3179);
    match(MySQLParser::CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleUpdateStatementContext ------------------------------------------------------------------

MySQLParser::SingleUpdateStatementContext::SingleUpdateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SingleUpdateStatementContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}

MySQLParser::TableNameContext* MySQLParser::SingleUpdateStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::SingleUpdateStatementContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

std::vector<MySQLParser::UpdatedElementContext *> MySQLParser::SingleUpdateStatementContext::updatedElement() {
  return getRuleContexts<MySQLParser::UpdatedElementContext>();
}

MySQLParser::UpdatedElementContext* MySQLParser::SingleUpdateStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySQLParser::UpdatedElementContext>(i);
}

tree::TerminalNode* MySQLParser::SingleUpdateStatementContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

MySQLParser::UidContext* MySQLParser::SingleUpdateStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::WhereClauseContext* MySQLParser::SingleUpdateStatementContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

MySQLParser::OrderByClauseContext* MySQLParser::SingleUpdateStatementContext::orderByClause() {
  return getRuleContext<MySQLParser::OrderByClauseContext>(0);
}

MySQLParser::LimitClauseContext* MySQLParser::SingleUpdateStatementContext::limitClause() {
  return getRuleContext<MySQLParser::LimitClauseContext>(0);
}

tree::TerminalNode* MySQLParser::SingleUpdateStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySQLParser::SingleUpdateStatementContext::AS() {
  return getToken(MySQLParser::AS, 0);
}


size_t MySQLParser::SingleUpdateStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSingleUpdateStatement;
}

void MySQLParser::SingleUpdateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleUpdateStatement(this);
}

void MySQLParser::SingleUpdateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleUpdateStatement(this);
}


antlrcpp::Any MySQLParser::SingleUpdateStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSingleUpdateStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SingleUpdateStatementContext* MySQLParser::singleUpdateStatement() {
  SingleUpdateStatementContext *_localctx = _tracker.createInstance<SingleUpdateStatementContext>(_ctx, getState());
  enterRule(_localctx, 204, MySQLParser::RuleSingleUpdateStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3181);
    match(MySQLParser::UPDATE);
    setState(3183);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOW_PRIORITY) {
      setState(3182);
      dynamic_cast<SingleUpdateStatementContext *>(_localctx)->priority = match(MySQLParser::LOW_PRIORITY);
    }
    setState(3186);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(3185);
      match(MySQLParser::IGNORE);
    }
    setState(3188);
    tableName();
    setState(3193);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::AS

    || _la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(3190);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(3189);
        match(MySQLParser::AS);
      }
      setState(3192);
      uid();
    }
    setState(3195);
    match(MySQLParser::SET);
    setState(3196);
    updatedElement();
    setState(3201);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3197);
      match(MySQLParser::COMMA);
      setState(3198);
      updatedElement();
      setState(3203);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WHERE) {
      setState(3204);
      whereClause();
    }
    setState(3208);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ORDER) {
      setState(3207);
      orderByClause();
    }
    setState(3211);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LIMIT) {
      setState(3210);
      limitClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipleUpdateStatementContext ------------------------------------------------------------------

MySQLParser::MultipleUpdateStatementContext::MultipleUpdateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::MultipleUpdateStatementContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}

MySQLParser::TableSourcesContext* MySQLParser::MultipleUpdateStatementContext::tableSources() {
  return getRuleContext<MySQLParser::TableSourcesContext>(0);
}

tree::TerminalNode* MySQLParser::MultipleUpdateStatementContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

std::vector<MySQLParser::UpdatedElementContext *> MySQLParser::MultipleUpdateStatementContext::updatedElement() {
  return getRuleContexts<MySQLParser::UpdatedElementContext>();
}

MySQLParser::UpdatedElementContext* MySQLParser::MultipleUpdateStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySQLParser::UpdatedElementContext>(i);
}

tree::TerminalNode* MySQLParser::MultipleUpdateStatementContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

MySQLParser::WhereClauseContext* MySQLParser::MultipleUpdateStatementContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* MySQLParser::MultipleUpdateStatementContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}


size_t MySQLParser::MultipleUpdateStatementContext::getRuleIndex() const {
  return MySQLParser::RuleMultipleUpdateStatement;
}

void MySQLParser::MultipleUpdateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultipleUpdateStatement(this);
}

void MySQLParser::MultipleUpdateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultipleUpdateStatement(this);
}


antlrcpp::Any MySQLParser::MultipleUpdateStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMultipleUpdateStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::MultipleUpdateStatementContext* MySQLParser::multipleUpdateStatement() {
  MultipleUpdateStatementContext *_localctx = _tracker.createInstance<MultipleUpdateStatementContext>(_ctx, getState());
  enterRule(_localctx, 206, MySQLParser::RuleMultipleUpdateStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3213);
    match(MySQLParser::UPDATE);
    setState(3215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LOW_PRIORITY) {
      setState(3214);
      dynamic_cast<MultipleUpdateStatementContext *>(_localctx)->priority = match(MySQLParser::LOW_PRIORITY);
    }
    setState(3218);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(3217);
      match(MySQLParser::IGNORE);
    }
    setState(3220);
    tableSources();
    setState(3221);
    match(MySQLParser::SET);
    setState(3222);
    updatedElement();
    setState(3227);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3223);
      match(MySQLParser::COMMA);
      setState(3224);
      updatedElement();
      setState(3229);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3231);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WHERE) {
      setState(3230);
      whereClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

MySQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::OrderByClauseContext::ORDER() {
  return getToken(MySQLParser::ORDER, 0);
}

tree::TerminalNode* MySQLParser::OrderByClauseContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

std::vector<MySQLParser::OrderByExpressionContext *> MySQLParser::OrderByClauseContext::orderByExpression() {
  return getRuleContexts<MySQLParser::OrderByExpressionContext>();
}

MySQLParser::OrderByExpressionContext* MySQLParser::OrderByClauseContext::orderByExpression(size_t i) {
  return getRuleContext<MySQLParser::OrderByExpressionContext>(i);
}


size_t MySQLParser::OrderByClauseContext::getRuleIndex() const {
  return MySQLParser::RuleOrderByClause;
}

void MySQLParser::OrderByClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrderByClause(this);
}

void MySQLParser::OrderByClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrderByClause(this);
}


antlrcpp::Any MySQLParser::OrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::OrderByClauseContext* MySQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 208, MySQLParser::RuleOrderByClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3233);
    match(MySQLParser::ORDER);
    setState(3234);
    match(MySQLParser::BY);
    setState(3235);
    orderByExpression();
    setState(3240);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3236);
      match(MySQLParser::COMMA);
      setState(3237);
      orderByExpression();
      setState(3242);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByExpressionContext ------------------------------------------------------------------

MySQLParser::OrderByExpressionContext::OrderByExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ExpressionContext* MySQLParser::OrderByExpressionContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::OrderByExpressionContext::ASC() {
  return getToken(MySQLParser::ASC, 0);
}

tree::TerminalNode* MySQLParser::OrderByExpressionContext::DESC() {
  return getToken(MySQLParser::DESC, 0);
}


size_t MySQLParser::OrderByExpressionContext::getRuleIndex() const {
  return MySQLParser::RuleOrderByExpression;
}

void MySQLParser::OrderByExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrderByExpression(this);
}

void MySQLParser::OrderByExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrderByExpression(this);
}


antlrcpp::Any MySQLParser::OrderByExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByExpression(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::OrderByExpressionContext* MySQLParser::orderByExpression() {
  OrderByExpressionContext *_localctx = _tracker.createInstance<OrderByExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, MySQLParser::RuleOrderByExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3243);
    expression(0);
    setState(3245);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 452, _ctx)) {
    case 1: {
      setState(3244);
      dynamic_cast<OrderByExpressionContext *>(_localctx)->order = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ASC

      || _la == MySQLParser::DESC)) {
        dynamic_cast<OrderByExpressionContext *>(_localctx)->order = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableSourcesContext ------------------------------------------------------------------

MySQLParser::TableSourcesContext::TableSourcesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::TableSourceContext *> MySQLParser::TableSourcesContext::tableSource() {
  return getRuleContexts<MySQLParser::TableSourceContext>();
}

MySQLParser::TableSourceContext* MySQLParser::TableSourcesContext::tableSource(size_t i) {
  return getRuleContext<MySQLParser::TableSourceContext>(i);
}


size_t MySQLParser::TableSourcesContext::getRuleIndex() const {
  return MySQLParser::RuleTableSources;
}

void MySQLParser::TableSourcesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableSources(this);
}

void MySQLParser::TableSourcesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableSources(this);
}


antlrcpp::Any MySQLParser::TableSourcesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableSources(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TableSourcesContext* MySQLParser::tableSources() {
  TableSourcesContext *_localctx = _tracker.createInstance<TableSourcesContext>(_ctx, getState());
  enterRule(_localctx, 212, MySQLParser::RuleTableSources);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3247);
    tableSource();
    setState(3252);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3248);
      match(MySQLParser::COMMA);
      setState(3249);
      tableSource();
      setState(3254);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableSourceContext ------------------------------------------------------------------

MySQLParser::TableSourceContext::TableSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::TableSourceContext::getRuleIndex() const {
  return MySQLParser::RuleTableSource;
}

void MySQLParser::TableSourceContext::copyFrom(TableSourceContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableSourceNestedContext ------------------------------------------------------------------

MySQLParser::TableSourceItemContext* MySQLParser::TableSourceNestedContext::tableSourceItem() {
  return getRuleContext<MySQLParser::TableSourceItemContext>(0);
}

std::vector<MySQLParser::JoinPartContext *> MySQLParser::TableSourceNestedContext::joinPart() {
  return getRuleContexts<MySQLParser::JoinPartContext>();
}

MySQLParser::JoinPartContext* MySQLParser::TableSourceNestedContext::joinPart(size_t i) {
  return getRuleContext<MySQLParser::JoinPartContext>(i);
}

MySQLParser::TableSourceNestedContext::TableSourceNestedContext(TableSourceContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableSourceNestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableSourceNested(this);
}
void MySQLParser::TableSourceNestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableSourceNested(this);
}

antlrcpp::Any MySQLParser::TableSourceNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableSourceNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableSourceBaseContext ------------------------------------------------------------------

MySQLParser::TableSourceItemContext* MySQLParser::TableSourceBaseContext::tableSourceItem() {
  return getRuleContext<MySQLParser::TableSourceItemContext>(0);
}

std::vector<MySQLParser::JoinPartContext *> MySQLParser::TableSourceBaseContext::joinPart() {
  return getRuleContexts<MySQLParser::JoinPartContext>();
}

MySQLParser::JoinPartContext* MySQLParser::TableSourceBaseContext::joinPart(size_t i) {
  return getRuleContext<MySQLParser::JoinPartContext>(i);
}

MySQLParser::TableSourceBaseContext::TableSourceBaseContext(TableSourceContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableSourceBaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableSourceBase(this);
}
void MySQLParser::TableSourceBaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableSourceBase(this);
}

antlrcpp::Any MySQLParser::TableSourceBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableSourceBase(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::TableSourceContext* MySQLParser::tableSource() {
  TableSourceContext *_localctx = _tracker.createInstance<TableSourceContext>(_ctx, getState());
  enterRule(_localctx, 214, MySQLParser::RuleTableSource);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3272);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 456, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableSourceContext *>(_tracker.createInstance<MySQLParser::TableSourceBaseContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3255);
      tableSourceItem();
      setState(3259);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 31) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 31)) & ((1ULL << (MySQLParser::CROSS - 31))
        | (1ULL << (MySQLParser::INNER - 31))
        | (1ULL << (MySQLParser::JOIN - 31))
        | (1ULL << (MySQLParser::LEFT - 31)))) != 0) || ((((_la - 98) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 98)) & ((1ULL << (MySQLParser::NATURAL - 98))
        | (1ULL << (MySQLParser::RIGHT - 98))
        | (1ULL << (MySQLParser::STRAIGHT_JOIN - 98)))) != 0)) {
        setState(3256);
        joinPart();
        setState(3261);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableSourceContext *>(_tracker.createInstance<MySQLParser::TableSourceNestedContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3262);
      match(MySQLParser::LR_BRACKET);
      setState(3263);
      tableSourceItem();
      setState(3267);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 31) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 31)) & ((1ULL << (MySQLParser::CROSS - 31))
        | (1ULL << (MySQLParser::INNER - 31))
        | (1ULL << (MySQLParser::JOIN - 31))
        | (1ULL << (MySQLParser::LEFT - 31)))) != 0) || ((((_la - 98) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 98)) & ((1ULL << (MySQLParser::NATURAL - 98))
        | (1ULL << (MySQLParser::RIGHT - 98))
        | (1ULL << (MySQLParser::STRAIGHT_JOIN - 98)))) != 0)) {
        setState(3264);
        joinPart();
        setState(3269);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3270);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableSourceItemContext ------------------------------------------------------------------

MySQLParser::TableSourceItemContext::TableSourceItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::TableSourceItemContext::getRuleIndex() const {
  return MySQLParser::RuleTableSourceItem;
}

void MySQLParser::TableSourceItemContext::copyFrom(TableSourceItemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryTableItemContext ------------------------------------------------------------------

MySQLParser::UidContext* MySQLParser::SubqueryTableItemContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::SelectStatementContext* MySQLParser::SubqueryTableItemContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySQLParser::SubqueryTableItemContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::SubqueryTableItemContext::SubqueryTableItemContext(TableSourceItemContext *ctx) { copyFrom(ctx); }

void MySQLParser::SubqueryTableItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubqueryTableItem(this);
}
void MySQLParser::SubqueryTableItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubqueryTableItem(this);
}

antlrcpp::Any MySQLParser::SubqueryTableItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSubqueryTableItem(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AtomTableItemContext ------------------------------------------------------------------

MySQLParser::TableNameContext* MySQLParser::AtomTableItemContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::AtomTableItemContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::AtomTableItemContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

std::vector<MySQLParser::IndexHintContext *> MySQLParser::AtomTableItemContext::indexHint() {
  return getRuleContexts<MySQLParser::IndexHintContext>();
}

MySQLParser::IndexHintContext* MySQLParser::AtomTableItemContext::indexHint(size_t i) {
  return getRuleContext<MySQLParser::IndexHintContext>(i);
}

MySQLParser::UidContext* MySQLParser::AtomTableItemContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AtomTableItemContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::AtomTableItemContext::AtomTableItemContext(TableSourceItemContext *ctx) { copyFrom(ctx); }

void MySQLParser::AtomTableItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtomTableItem(this);
}
void MySQLParser::AtomTableItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtomTableItem(this);
}

antlrcpp::Any MySQLParser::AtomTableItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAtomTableItem(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableSourcesItemContext ------------------------------------------------------------------

MySQLParser::TableSourcesContext* MySQLParser::TableSourcesItemContext::tableSources() {
  return getRuleContext<MySQLParser::TableSourcesContext>(0);
}

MySQLParser::TableSourcesItemContext::TableSourcesItemContext(TableSourceItemContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableSourcesItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableSourcesItem(this);
}
void MySQLParser::TableSourcesItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableSourcesItem(this);
}

antlrcpp::Any MySQLParser::TableSourcesItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableSourcesItem(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::TableSourceItemContext* MySQLParser::tableSourceItem() {
  TableSourceItemContext *_localctx = _tracker.createInstance<TableSourceItemContext>(_ctx, getState());
  enterRule(_localctx, 216, MySQLParser::RuleTableSourceItem);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3314);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableSourceItemContext *>(_tracker.createInstance<MySQLParser::AtomTableItemContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3274);
      tableName();
      setState(3280);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::PARTITION) {
        setState(3275);
        match(MySQLParser::PARTITION);
        setState(3276);
        match(MySQLParser::LR_BRACKET);
        setState(3277);
        uidList();
        setState(3278);
        match(MySQLParser::RR_BRACKET);
      }
      setState(3286);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 459, _ctx)) {
      case 1: {
        setState(3283);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::AS) {
          setState(3282);
          match(MySQLParser::AS);
        }
        setState(3285);
        dynamic_cast<AtomTableItemContext *>(_localctx)->alias = uid();
        break;
      }

      }
      setState(3296);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
      case 1: {
        setState(3288);
        indexHint();
        setState(3293);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3289);
            match(MySQLParser::COMMA);
            setState(3290);
            indexHint(); 
          }
          setState(3295);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx);
        }
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableSourceItemContext *>(_tracker.createInstance<MySQLParser::SubqueryTableItemContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3303);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
      case 1: {
        setState(3298);
        selectStatement();
        break;
      }

      case 2: {
        setState(3299);
        match(MySQLParser::LR_BRACKET);
        setState(3300);
        dynamic_cast<SubqueryTableItemContext *>(_localctx)->parenthesisSubquery = selectStatement();
        setState(3301);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      }
      setState(3306);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(3305);
        match(MySQLParser::AS);
      }
      setState(3308);
      dynamic_cast<SubqueryTableItemContext *>(_localctx)->alias = uid();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TableSourceItemContext *>(_tracker.createInstance<MySQLParser::TableSourcesItemContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3310);
      match(MySQLParser::LR_BRACKET);
      setState(3311);
      tableSources();
      setState(3312);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexHintContext ------------------------------------------------------------------

MySQLParser::IndexHintContext::IndexHintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UidListContext* MySQLParser::IndexHintContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::IndexHintContext::USE() {
  return getToken(MySQLParser::USE, 0);
}

tree::TerminalNode* MySQLParser::IndexHintContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

tree::TerminalNode* MySQLParser::IndexHintContext::FORCE() {
  return getToken(MySQLParser::FORCE, 0);
}

tree::TerminalNode* MySQLParser::IndexHintContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::IndexHintContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}

tree::TerminalNode* MySQLParser::IndexHintContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

MySQLParser::IndexHintTypeContext* MySQLParser::IndexHintContext::indexHintType() {
  return getRuleContext<MySQLParser::IndexHintTypeContext>(0);
}


size_t MySQLParser::IndexHintContext::getRuleIndex() const {
  return MySQLParser::RuleIndexHint;
}

void MySQLParser::IndexHintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexHint(this);
}

void MySQLParser::IndexHintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexHint(this);
}


antlrcpp::Any MySQLParser::IndexHintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIndexHint(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IndexHintContext* MySQLParser::indexHint() {
  IndexHintContext *_localctx = _tracker.createInstance<IndexHintContext>(_ctx, getState());
  enterRule(_localctx, 218, MySQLParser::RuleIndexHint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3316);
    dynamic_cast<IndexHintContext *>(_localctx)->indexHintAction = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::FORCE

    || _la == MySQLParser::IGNORE || _la == MySQLParser::USE)) {
      dynamic_cast<IndexHintContext *>(_localctx)->indexHintAction = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3317);
    dynamic_cast<IndexHintContext *>(_localctx)->keyFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::INDEX

    || _la == MySQLParser::KEY)) {
      dynamic_cast<IndexHintContext *>(_localctx)->keyFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3320);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FOR) {
      setState(3318);
      match(MySQLParser::FOR);
      setState(3319);
      indexHintType();
    }
    setState(3322);
    match(MySQLParser::LR_BRACKET);
    setState(3323);
    uidList();
    setState(3324);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexHintTypeContext ------------------------------------------------------------------

MySQLParser::IndexHintTypeContext::IndexHintTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IndexHintTypeContext::JOIN() {
  return getToken(MySQLParser::JOIN, 0);
}

tree::TerminalNode* MySQLParser::IndexHintTypeContext::ORDER() {
  return getToken(MySQLParser::ORDER, 0);
}

tree::TerminalNode* MySQLParser::IndexHintTypeContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

tree::TerminalNode* MySQLParser::IndexHintTypeContext::GROUP() {
  return getToken(MySQLParser::GROUP, 0);
}


size_t MySQLParser::IndexHintTypeContext::getRuleIndex() const {
  return MySQLParser::RuleIndexHintType;
}

void MySQLParser::IndexHintTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexHintType(this);
}

void MySQLParser::IndexHintTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexHintType(this);
}


antlrcpp::Any MySQLParser::IndexHintTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIndexHintType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IndexHintTypeContext* MySQLParser::indexHintType() {
  IndexHintTypeContext *_localctx = _tracker.createInstance<IndexHintTypeContext>(_ctx, getState());
  enterRule(_localctx, 220, MySQLParser::RuleIndexHintType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3331);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::JOIN: {
        enterOuterAlt(_localctx, 1);
        setState(3326);
        match(MySQLParser::JOIN);
        break;
      }

      case MySQLParser::ORDER: {
        enterOuterAlt(_localctx, 2);
        setState(3327);
        match(MySQLParser::ORDER);
        setState(3328);
        match(MySQLParser::BY);
        break;
      }

      case MySQLParser::GROUP: {
        enterOuterAlt(_localctx, 3);
        setState(3329);
        match(MySQLParser::GROUP);
        setState(3330);
        match(MySQLParser::BY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinPartContext ------------------------------------------------------------------

MySQLParser::JoinPartContext::JoinPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::JoinPartContext::getRuleIndex() const {
  return MySQLParser::RuleJoinPart;
}

void MySQLParser::JoinPartContext::copyFrom(JoinPartContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- InnerJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::InnerJoinContext::JOIN() {
  return getToken(MySQLParser::JOIN, 0);
}

MySQLParser::TableSourceItemContext* MySQLParser::InnerJoinContext::tableSourceItem() {
  return getRuleContext<MySQLParser::TableSourceItemContext>(0);
}

MySQLParser::JoinPartOnClauseContext* MySQLParser::InnerJoinContext::joinPartOnClause() {
  return getRuleContext<MySQLParser::JoinPartOnClauseContext>(0);
}

MySQLParser::JoinPartUsingClauseContext* MySQLParser::InnerJoinContext::joinPartUsingClause() {
  return getRuleContext<MySQLParser::JoinPartUsingClauseContext>(0);
}

tree::TerminalNode* MySQLParser::InnerJoinContext::INNER() {
  return getToken(MySQLParser::INNER, 0);
}

tree::TerminalNode* MySQLParser::InnerJoinContext::CROSS() {
  return getToken(MySQLParser::CROSS, 0);
}

MySQLParser::InnerJoinContext::InnerJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }

void MySQLParser::InnerJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInnerJoin(this);
}
void MySQLParser::InnerJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInnerJoin(this);
}

antlrcpp::Any MySQLParser::InnerJoinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitInnerJoin(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NaturalJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::NaturalJoinContext::NATURAL() {
  return getToken(MySQLParser::NATURAL, 0);
}

tree::TerminalNode* MySQLParser::NaturalJoinContext::JOIN() {
  return getToken(MySQLParser::JOIN, 0);
}

MySQLParser::TableSourceItemContext* MySQLParser::NaturalJoinContext::tableSourceItem() {
  return getRuleContext<MySQLParser::TableSourceItemContext>(0);
}

tree::TerminalNode* MySQLParser::NaturalJoinContext::LEFT() {
  return getToken(MySQLParser::LEFT, 0);
}

tree::TerminalNode* MySQLParser::NaturalJoinContext::RIGHT() {
  return getToken(MySQLParser::RIGHT, 0);
}

tree::TerminalNode* MySQLParser::NaturalJoinContext::OUTER() {
  return getToken(MySQLParser::OUTER, 0);
}

MySQLParser::NaturalJoinContext::NaturalJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }

void MySQLParser::NaturalJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaturalJoin(this);
}
void MySQLParser::NaturalJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaturalJoin(this);
}

antlrcpp::Any MySQLParser::NaturalJoinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitNaturalJoin(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OuterJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::OuterJoinContext::JOIN() {
  return getToken(MySQLParser::JOIN, 0);
}

MySQLParser::TableSourceItemContext* MySQLParser::OuterJoinContext::tableSourceItem() {
  return getRuleContext<MySQLParser::TableSourceItemContext>(0);
}

tree::TerminalNode* MySQLParser::OuterJoinContext::LEFT() {
  return getToken(MySQLParser::LEFT, 0);
}

tree::TerminalNode* MySQLParser::OuterJoinContext::RIGHT() {
  return getToken(MySQLParser::RIGHT, 0);
}

MySQLParser::JoinPartOnClauseContext* MySQLParser::OuterJoinContext::joinPartOnClause() {
  return getRuleContext<MySQLParser::JoinPartOnClauseContext>(0);
}

MySQLParser::JoinPartUsingClauseContext* MySQLParser::OuterJoinContext::joinPartUsingClause() {
  return getRuleContext<MySQLParser::JoinPartUsingClauseContext>(0);
}

tree::TerminalNode* MySQLParser::OuterJoinContext::OUTER() {
  return getToken(MySQLParser::OUTER, 0);
}

MySQLParser::OuterJoinContext::OuterJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }

void MySQLParser::OuterJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOuterJoin(this);
}
void MySQLParser::OuterJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOuterJoin(this);
}

antlrcpp::Any MySQLParser::OuterJoinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitOuterJoin(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StraightJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::StraightJoinContext::STRAIGHT_JOIN() {
  return getToken(MySQLParser::STRAIGHT_JOIN, 0);
}

MySQLParser::TableSourceItemContext* MySQLParser::StraightJoinContext::tableSourceItem() {
  return getRuleContext<MySQLParser::TableSourceItemContext>(0);
}

MySQLParser::JoinPartOnClauseContext* MySQLParser::StraightJoinContext::joinPartOnClause() {
  return getRuleContext<MySQLParser::JoinPartOnClauseContext>(0);
}

MySQLParser::StraightJoinContext::StraightJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }

void MySQLParser::StraightJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStraightJoin(this);
}
void MySQLParser::StraightJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStraightJoin(this);
}

antlrcpp::Any MySQLParser::StraightJoinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStraightJoin(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::JoinPartContext* MySQLParser::joinPart() {
  JoinPartContext *_localctx = _tracker.createInstance<JoinPartContext>(_ctx, getState());
  enterRule(_localctx, 222, MySQLParser::RuleJoinPart);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3366);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::CROSS:
      case MySQLParser::INNER:
      case MySQLParser::JOIN: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySQLParser::InnerJoinContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3334);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::CROSS

        || _la == MySQLParser::INNER) {
          setState(3333);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::CROSS

          || _la == MySQLParser::INNER)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3336);
        match(MySQLParser::JOIN);
        setState(3337);
        tableSourceItem();
        setState(3340);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx)) {
        case 1: {
          setState(3338);
          joinPartOnClause();
          break;
        }

        case 2: {
          setState(3339);
          joinPartUsingClause();
          break;
        }

        }
        break;
      }

      case MySQLParser::STRAIGHT_JOIN: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySQLParser::StraightJoinContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3342);
        match(MySQLParser::STRAIGHT_JOIN);
        setState(3343);
        tableSourceItem();
        setState(3345);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 469, _ctx)) {
        case 1: {
          setState(3344);
          joinPartOnClause();
          break;
        }

        }
        break;
      }

      case MySQLParser::LEFT:
      case MySQLParser::RIGHT: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySQLParser::OuterJoinContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3347);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::LEFT

        || _la == MySQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3349);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::OUTER) {
          setState(3348);
          match(MySQLParser::OUTER);
        }
        setState(3351);
        match(MySQLParser::JOIN);
        setState(3352);
        tableSourceItem();
        setState(3355);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::ON: {
            setState(3353);
            joinPartOnClause();
            break;
          }

          case MySQLParser::USING: {
            setState(3354);
            joinPartUsingClause();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySQLParser::NATURAL: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySQLParser::NaturalJoinContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3357);
        match(MySQLParser::NATURAL);
        setState(3362);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::LEFT

        || _la == MySQLParser::RIGHT) {
          setState(3358);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::LEFT

          || _la == MySQLParser::RIGHT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3360);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::OUTER) {
            setState(3359);
            match(MySQLParser::OUTER);
          }
        }
        setState(3364);
        match(MySQLParser::JOIN);
        setState(3365);
        tableSourceItem();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinPartOnClauseContext ------------------------------------------------------------------

MySQLParser::JoinPartOnClauseContext::JoinPartOnClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::JoinPartOnClauseContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

MySQLParser::ExpressionContext* MySQLParser::JoinPartOnClauseContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}


size_t MySQLParser::JoinPartOnClauseContext::getRuleIndex() const {
  return MySQLParser::RuleJoinPartOnClause;
}

void MySQLParser::JoinPartOnClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinPartOnClause(this);
}

void MySQLParser::JoinPartOnClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinPartOnClause(this);
}


antlrcpp::Any MySQLParser::JoinPartOnClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinPartOnClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::JoinPartOnClauseContext* MySQLParser::joinPartOnClause() {
  JoinPartOnClauseContext *_localctx = _tracker.createInstance<JoinPartOnClauseContext>(_ctx, getState());
  enterRule(_localctx, 224, MySQLParser::RuleJoinPartOnClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3368);
    match(MySQLParser::ON);
    setState(3369);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinPartUsingClauseContext ------------------------------------------------------------------

MySQLParser::JoinPartUsingClauseContext::JoinPartUsingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::JoinPartUsingClauseContext::USING() {
  return getToken(MySQLParser::USING, 0);
}

MySQLParser::UidListContext* MySQLParser::JoinPartUsingClauseContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}


size_t MySQLParser::JoinPartUsingClauseContext::getRuleIndex() const {
  return MySQLParser::RuleJoinPartUsingClause;
}

void MySQLParser::JoinPartUsingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinPartUsingClause(this);
}

void MySQLParser::JoinPartUsingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinPartUsingClause(this);
}


antlrcpp::Any MySQLParser::JoinPartUsingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinPartUsingClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::JoinPartUsingClauseContext* MySQLParser::joinPartUsingClause() {
  JoinPartUsingClauseContext *_localctx = _tracker.createInstance<JoinPartUsingClauseContext>(_ctx, getState());
  enterRule(_localctx, 226, MySQLParser::RuleJoinPartUsingClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3371);
    match(MySQLParser::USING);
    setState(3372);
    match(MySQLParser::LR_BRACKET);
    setState(3373);
    uidList();
    setState(3374);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryExpressionContext ------------------------------------------------------------------

MySQLParser::QueryExpressionContext::QueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::QuerySpecificationContext* MySQLParser::QueryExpressionContext::querySpecification() {
  return getRuleContext<MySQLParser::QuerySpecificationContext>(0);
}

MySQLParser::QueryExpressionContext* MySQLParser::QueryExpressionContext::queryExpression() {
  return getRuleContext<MySQLParser::QueryExpressionContext>(0);
}


size_t MySQLParser::QueryExpressionContext::getRuleIndex() const {
  return MySQLParser::RuleQueryExpression;
}

void MySQLParser::QueryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryExpression(this);
}

void MySQLParser::QueryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryExpression(this);
}


antlrcpp::Any MySQLParser::QueryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitQueryExpression(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::QueryExpressionContext* MySQLParser::queryExpression() {
  QueryExpressionContext *_localctx = _tracker.createInstance<QueryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, MySQLParser::RuleQueryExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3384);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 475, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3376);
      match(MySQLParser::LR_BRACKET);
      setState(3377);
      querySpecification();
      setState(3378);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3380);
      match(MySQLParser::LR_BRACKET);
      setState(3381);
      queryExpression();
      setState(3382);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryExpressionNointoContext ------------------------------------------------------------------

MySQLParser::QueryExpressionNointoContext::QueryExpressionNointoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::QuerySpecificationNointoContext* MySQLParser::QueryExpressionNointoContext::querySpecificationNointo() {
  return getRuleContext<MySQLParser::QuerySpecificationNointoContext>(0);
}

MySQLParser::QueryExpressionNointoContext* MySQLParser::QueryExpressionNointoContext::queryExpressionNointo() {
  return getRuleContext<MySQLParser::QueryExpressionNointoContext>(0);
}


size_t MySQLParser::QueryExpressionNointoContext::getRuleIndex() const {
  return MySQLParser::RuleQueryExpressionNointo;
}

void MySQLParser::QueryExpressionNointoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryExpressionNointo(this);
}

void MySQLParser::QueryExpressionNointoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryExpressionNointo(this);
}


antlrcpp::Any MySQLParser::QueryExpressionNointoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitQueryExpressionNointo(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::QueryExpressionNointoContext* MySQLParser::queryExpressionNointo() {
  QueryExpressionNointoContext *_localctx = _tracker.createInstance<QueryExpressionNointoContext>(_ctx, getState());
  enterRule(_localctx, 230, MySQLParser::RuleQueryExpressionNointo);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3394);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 476, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3386);
      match(MySQLParser::LR_BRACKET);
      setState(3387);
      querySpecificationNointo();
      setState(3388);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3390);
      match(MySQLParser::LR_BRACKET);
      setState(3391);
      queryExpressionNointo();
      setState(3392);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationContext ------------------------------------------------------------------

MySQLParser::QuerySpecificationContext::QuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::QuerySpecificationContext::SELECT() {
  return getToken(MySQLParser::SELECT, 0);
}

MySQLParser::SelectElementsContext* MySQLParser::QuerySpecificationContext::selectElements() {
  return getRuleContext<MySQLParser::SelectElementsContext>(0);
}

std::vector<MySQLParser::SelectSpecContext *> MySQLParser::QuerySpecificationContext::selectSpec() {
  return getRuleContexts<MySQLParser::SelectSpecContext>();
}

MySQLParser::SelectSpecContext* MySQLParser::QuerySpecificationContext::selectSpec(size_t i) {
  return getRuleContext<MySQLParser::SelectSpecContext>(i);
}

MySQLParser::SelectIntoExpressionContext* MySQLParser::QuerySpecificationContext::selectIntoExpression() {
  return getRuleContext<MySQLParser::SelectIntoExpressionContext>(0);
}

MySQLParser::FromClauseContext* MySQLParser::QuerySpecificationContext::fromClause() {
  return getRuleContext<MySQLParser::FromClauseContext>(0);
}

MySQLParser::WhereClauseContext* MySQLParser::QuerySpecificationContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

MySQLParser::GroupClauseContext* MySQLParser::QuerySpecificationContext::groupClause() {
  return getRuleContext<MySQLParser::GroupClauseContext>(0);
}

MySQLParser::HavingClauseContext* MySQLParser::QuerySpecificationContext::havingClause() {
  return getRuleContext<MySQLParser::HavingClauseContext>(0);
}

MySQLParser::OrderByClauseContext* MySQLParser::QuerySpecificationContext::orderByClause() {
  return getRuleContext<MySQLParser::OrderByClauseContext>(0);
}

MySQLParser::LimitClauseContext* MySQLParser::QuerySpecificationContext::limitClause() {
  return getRuleContext<MySQLParser::LimitClauseContext>(0);
}


size_t MySQLParser::QuerySpecificationContext::getRuleIndex() const {
  return MySQLParser::RuleQuerySpecification;
}

void MySQLParser::QuerySpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuerySpecification(this);
}

void MySQLParser::QuerySpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuerySpecification(this);
}


antlrcpp::Any MySQLParser::QuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::QuerySpecificationContext* MySQLParser::querySpecification() {
  QuerySpecificationContext *_localctx = _tracker.createInstance<QuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 232, MySQLParser::RuleQuerySpecification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3454);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 493, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3396);
      match(MySQLParser::SELECT);
      setState(3400);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3397);
          selectSpec(); 
        }
        setState(3402);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx);
      }
      setState(3403);
      selectElements();
      setState(3405);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::INTO) {
        setState(3404);
        selectIntoExpression();
      }
      setState(3408);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FROM) {
        setState(3407);
        fromClause();
      }
      setState(3411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::WHERE) {
        setState(3410);
        whereClause();
      }
      setState(3414);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::GROUP) {
        setState(3413);
        groupClause();
      }
      setState(3417);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::HAVING) {
        setState(3416);
        havingClause();
      }
      setState(3420);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 483, _ctx)) {
      case 1: {
        setState(3419);
        orderByClause();
        break;
      }

      }
      setState(3423);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx)) {
      case 1: {
        setState(3422);
        limitClause();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3425);
      match(MySQLParser::SELECT);
      setState(3429);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 485, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3426);
          selectSpec(); 
        }
        setState(3431);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 485, _ctx);
      }
      setState(3432);
      selectElements();
      setState(3434);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FROM) {
        setState(3433);
        fromClause();
      }
      setState(3437);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::WHERE) {
        setState(3436);
        whereClause();
      }
      setState(3440);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::GROUP) {
        setState(3439);
        groupClause();
      }
      setState(3443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::HAVING) {
        setState(3442);
        havingClause();
      }
      setState(3446);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 490, _ctx)) {
      case 1: {
        setState(3445);
        orderByClause();
        break;
      }

      }
      setState(3449);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx)) {
      case 1: {
        setState(3448);
        limitClause();
        break;
      }

      }
      setState(3452);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::INTO) {
        setState(3451);
        selectIntoExpression();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationNointoContext ------------------------------------------------------------------

MySQLParser::QuerySpecificationNointoContext::QuerySpecificationNointoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::QuerySpecificationNointoContext::SELECT() {
  return getToken(MySQLParser::SELECT, 0);
}

MySQLParser::SelectElementsContext* MySQLParser::QuerySpecificationNointoContext::selectElements() {
  return getRuleContext<MySQLParser::SelectElementsContext>(0);
}

std::vector<MySQLParser::SelectSpecContext *> MySQLParser::QuerySpecificationNointoContext::selectSpec() {
  return getRuleContexts<MySQLParser::SelectSpecContext>();
}

MySQLParser::SelectSpecContext* MySQLParser::QuerySpecificationNointoContext::selectSpec(size_t i) {
  return getRuleContext<MySQLParser::SelectSpecContext>(i);
}

MySQLParser::FromClauseContext* MySQLParser::QuerySpecificationNointoContext::fromClause() {
  return getRuleContext<MySQLParser::FromClauseContext>(0);
}

MySQLParser::WhereClauseContext* MySQLParser::QuerySpecificationNointoContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

MySQLParser::GroupClauseContext* MySQLParser::QuerySpecificationNointoContext::groupClause() {
  return getRuleContext<MySQLParser::GroupClauseContext>(0);
}

MySQLParser::HavingClauseContext* MySQLParser::QuerySpecificationNointoContext::havingClause() {
  return getRuleContext<MySQLParser::HavingClauseContext>(0);
}

MySQLParser::OrderByClauseContext* MySQLParser::QuerySpecificationNointoContext::orderByClause() {
  return getRuleContext<MySQLParser::OrderByClauseContext>(0);
}

MySQLParser::LimitClauseContext* MySQLParser::QuerySpecificationNointoContext::limitClause() {
  return getRuleContext<MySQLParser::LimitClauseContext>(0);
}


size_t MySQLParser::QuerySpecificationNointoContext::getRuleIndex() const {
  return MySQLParser::RuleQuerySpecificationNointo;
}

void MySQLParser::QuerySpecificationNointoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuerySpecificationNointo(this);
}

void MySQLParser::QuerySpecificationNointoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuerySpecificationNointo(this);
}


antlrcpp::Any MySQLParser::QuerySpecificationNointoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitQuerySpecificationNointo(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::QuerySpecificationNointoContext* MySQLParser::querySpecificationNointo() {
  QuerySpecificationNointoContext *_localctx = _tracker.createInstance<QuerySpecificationNointoContext>(_ctx, getState());
  enterRule(_localctx, 234, MySQLParser::RuleQuerySpecificationNointo);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3456);
    match(MySQLParser::SELECT);
    setState(3460);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 494, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3457);
        selectSpec(); 
      }
      setState(3462);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 494, _ctx);
    }
    setState(3463);
    selectElements();
    setState(3465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FROM) {
      setState(3464);
      fromClause();
    }
    setState(3468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WHERE) {
      setState(3467);
      whereClause();
    }
    setState(3471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::GROUP) {
      setState(3470);
      groupClause();
    }
    setState(3474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::HAVING) {
      setState(3473);
      havingClause();
    }
    setState(3477);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 499, _ctx)) {
    case 1: {
      setState(3476);
      orderByClause();
      break;
    }

    }
    setState(3480);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 500, _ctx)) {
    case 1: {
      setState(3479);
      limitClause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnionParenthesisContext ------------------------------------------------------------------

MySQLParser::UnionParenthesisContext::UnionParenthesisContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UnionParenthesisContext::UNION() {
  return getToken(MySQLParser::UNION, 0);
}

MySQLParser::QueryExpressionNointoContext* MySQLParser::UnionParenthesisContext::queryExpressionNointo() {
  return getRuleContext<MySQLParser::QueryExpressionNointoContext>(0);
}

tree::TerminalNode* MySQLParser::UnionParenthesisContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::UnionParenthesisContext::DISTINCT() {
  return getToken(MySQLParser::DISTINCT, 0);
}


size_t MySQLParser::UnionParenthesisContext::getRuleIndex() const {
  return MySQLParser::RuleUnionParenthesis;
}

void MySQLParser::UnionParenthesisContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnionParenthesis(this);
}

void MySQLParser::UnionParenthesisContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnionParenthesis(this);
}


antlrcpp::Any MySQLParser::UnionParenthesisContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUnionParenthesis(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UnionParenthesisContext* MySQLParser::unionParenthesis() {
  UnionParenthesisContext *_localctx = _tracker.createInstance<UnionParenthesisContext>(_ctx, getState());
  enterRule(_localctx, 236, MySQLParser::RuleUnionParenthesis);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3482);
    match(MySQLParser::UNION);
    setState(3484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ALL

    || _la == MySQLParser::DISTINCT) {
      setState(3483);
      dynamic_cast<UnionParenthesisContext *>(_localctx)->unionType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ALL

      || _la == MySQLParser::DISTINCT)) {
        dynamic_cast<UnionParenthesisContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3486);
    queryExpressionNointo();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnionStatementContext ------------------------------------------------------------------

MySQLParser::UnionStatementContext::UnionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UnionStatementContext::UNION() {
  return getToken(MySQLParser::UNION, 0);
}

MySQLParser::QuerySpecificationNointoContext* MySQLParser::UnionStatementContext::querySpecificationNointo() {
  return getRuleContext<MySQLParser::QuerySpecificationNointoContext>(0);
}

MySQLParser::QueryExpressionNointoContext* MySQLParser::UnionStatementContext::queryExpressionNointo() {
  return getRuleContext<MySQLParser::QueryExpressionNointoContext>(0);
}

tree::TerminalNode* MySQLParser::UnionStatementContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::UnionStatementContext::DISTINCT() {
  return getToken(MySQLParser::DISTINCT, 0);
}


size_t MySQLParser::UnionStatementContext::getRuleIndex() const {
  return MySQLParser::RuleUnionStatement;
}

void MySQLParser::UnionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnionStatement(this);
}

void MySQLParser::UnionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnionStatement(this);
}


antlrcpp::Any MySQLParser::UnionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUnionStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UnionStatementContext* MySQLParser::unionStatement() {
  UnionStatementContext *_localctx = _tracker.createInstance<UnionStatementContext>(_ctx, getState());
  enterRule(_localctx, 238, MySQLParser::RuleUnionStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3488);
    match(MySQLParser::UNION);
    setState(3490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ALL

    || _la == MySQLParser::DISTINCT) {
      setState(3489);
      dynamic_cast<UnionStatementContext *>(_localctx)->unionType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ALL

      || _la == MySQLParser::DISTINCT)) {
        dynamic_cast<UnionStatementContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3494);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::SELECT: {
        setState(3492);
        querySpecificationNointo();
        break;
      }

      case MySQLParser::LR_BRACKET: {
        setState(3493);
        queryExpressionNointo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectSpecContext ------------------------------------------------------------------

MySQLParser::SelectSpecContext::SelectSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SelectSpecContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::DISTINCT() {
  return getToken(MySQLParser::DISTINCT, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::DISTINCTROW() {
  return getToken(MySQLParser::DISTINCTROW, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::HIGH_PRIORITY() {
  return getToken(MySQLParser::HIGH_PRIORITY, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::STRAIGHT_JOIN() {
  return getToken(MySQLParser::STRAIGHT_JOIN, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::SQL_SMALL_RESULT() {
  return getToken(MySQLParser::SQL_SMALL_RESULT, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::SQL_BIG_RESULT() {
  return getToken(MySQLParser::SQL_BIG_RESULT, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::SQL_BUFFER_RESULT() {
  return getToken(MySQLParser::SQL_BUFFER_RESULT, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::SQL_CACHE() {
  return getToken(MySQLParser::SQL_CACHE, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::SQL_NO_CACHE() {
  return getToken(MySQLParser::SQL_NO_CACHE, 0);
}

tree::TerminalNode* MySQLParser::SelectSpecContext::SQL_CALC_FOUND_ROWS() {
  return getToken(MySQLParser::SQL_CALC_FOUND_ROWS, 0);
}


size_t MySQLParser::SelectSpecContext::getRuleIndex() const {
  return MySQLParser::RuleSelectSpec;
}

void MySQLParser::SelectSpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectSpec(this);
}

void MySQLParser::SelectSpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectSpec(this);
}


antlrcpp::Any MySQLParser::SelectSpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectSpec(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SelectSpecContext* MySQLParser::selectSpec() {
  SelectSpecContext *_localctx = _tracker.createInstance<SelectSpecContext>(_ctx, getState());
  enterRule(_localctx, 240, MySQLParser::RuleSelectSpec);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3504);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ALL:
      case MySQLParser::DISTINCT:
      case MySQLParser::DISTINCTROW: {
        enterOuterAlt(_localctx, 1);
        setState(3496);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << MySQLParser::ALL)
          | (1ULL << MySQLParser::DISTINCT)
          | (1ULL << MySQLParser::DISTINCTROW))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::HIGH_PRIORITY: {
        enterOuterAlt(_localctx, 2);
        setState(3497);
        match(MySQLParser::HIGH_PRIORITY);
        break;
      }

      case MySQLParser::STRAIGHT_JOIN: {
        enterOuterAlt(_localctx, 3);
        setState(3498);
        match(MySQLParser::STRAIGHT_JOIN);
        break;
      }

      case MySQLParser::SQL_SMALL_RESULT: {
        enterOuterAlt(_localctx, 4);
        setState(3499);
        match(MySQLParser::SQL_SMALL_RESULT);
        break;
      }

      case MySQLParser::SQL_BIG_RESULT: {
        enterOuterAlt(_localctx, 5);
        setState(3500);
        match(MySQLParser::SQL_BIG_RESULT);
        break;
      }

      case MySQLParser::SQL_BUFFER_RESULT: {
        enterOuterAlt(_localctx, 6);
        setState(3501);
        match(MySQLParser::SQL_BUFFER_RESULT);
        break;
      }

      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE: {
        enterOuterAlt(_localctx, 7);
        setState(3502);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::SQL_CACHE

        || _la == MySQLParser::SQL_NO_CACHE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::SQL_CALC_FOUND_ROWS: {
        enterOuterAlt(_localctx, 8);
        setState(3503);
        match(MySQLParser::SQL_CALC_FOUND_ROWS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectElementsContext ------------------------------------------------------------------

MySQLParser::SelectElementsContext::SelectElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::SelectElementContext *> MySQLParser::SelectElementsContext::selectElement() {
  return getRuleContexts<MySQLParser::SelectElementContext>();
}

MySQLParser::SelectElementContext* MySQLParser::SelectElementsContext::selectElement(size_t i) {
  return getRuleContext<MySQLParser::SelectElementContext>(i);
}


size_t MySQLParser::SelectElementsContext::getRuleIndex() const {
  return MySQLParser::RuleSelectElements;
}

void MySQLParser::SelectElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectElements(this);
}

void MySQLParser::SelectElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectElements(this);
}


antlrcpp::Any MySQLParser::SelectElementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectElements(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SelectElementsContext* MySQLParser::selectElements() {
  SelectElementsContext *_localctx = _tracker.createInstance<SelectElementsContext>(_ctx, getState());
  enterRule(_localctx, 242, MySQLParser::RuleSelectElements);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3508);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::STAR: {
        setState(3506);
        dynamic_cast<SelectElementsContext *>(_localctx)->star = match(MySQLParser::STAR);
        break;
      }

      case MySQLParser::CASE:
      case MySQLParser::CAST:
      case MySQLParser::CONVERT:
      case MySQLParser::CURRENT_USER:
      case MySQLParser::DATABASE:
      case MySQLParser::EXISTS:
      case MySQLParser::FALSE:
      case MySQLParser::IF:
      case MySQLParser::INSERT:
      case MySQLParser::INTERVAL:
      case MySQLParser::NOT:
      case MySQLParser::NULL_LITERAL:
      case MySQLParser::REPLACE:
      case MySQLParser::TRUE:
      case MySQLParser::VALUES:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::DATETIME:
      case MySQLParser::YEAR:
      case MySQLParser::CHAR:
      case MySQLParser::BINARY:
      case MySQLParser::TEXT:
      case MySQLParser::ENUM:
      case MySQLParser::SERIAL:
      case MySQLParser::AVG:
      case MySQLParser::BIT_AND:
      case MySQLParser::BIT_OR:
      case MySQLParser::BIT_XOR:
      case MySQLParser::COUNT:
      case MySQLParser::GROUP_CONCAT:
      case MySQLParser::MAX:
      case MySQLParser::MIN:
      case MySQLParser::STD:
      case MySQLParser::STDDEV:
      case MySQLParser::STDDEV_POP:
      case MySQLParser::STDDEV_SAMP:
      case MySQLParser::SUM:
      case MySQLParser::VAR_POP:
      case MySQLParser::VAR_SAMP:
      case MySQLParser::VARIANCE:
      case MySQLParser::CURRENT_DATE:
      case MySQLParser::CURRENT_TIME:
      case MySQLParser::CURRENT_TIMESTAMP:
      case MySQLParser::LOCALTIME:
      case MySQLParser::CURDATE:
      case MySQLParser::CURTIME:
      case MySQLParser::DATE_ADD:
      case MySQLParser::DATE_SUB:
      case MySQLParser::EXTRACT:
      case MySQLParser::LOCALTIMESTAMP:
      case MySQLParser::NOW:
      case MySQLParser::POSITION:
      case MySQLParser::SUBSTR:
      case MySQLParser::SUBSTRING:
      case MySQLParser::SYSDATE:
      case MySQLParser::TRIM:
      case MySQLParser::UTC_DATE:
      case MySQLParser::UTC_TIME:
      case MySQLParser::UTC_TIMESTAMP:
      case MySQLParser::ACCOUNT:
      case MySQLParser::ACTION:
      case MySQLParser::AFTER:
      case MySQLParser::AGGREGATE:
      case MySQLParser::ALGORITHM:
      case MySQLParser::ANY:
      case MySQLParser::AT:
      case MySQLParser::AUTHORS:
      case MySQLParser::AUTOCOMMIT:
      case MySQLParser::AUTOEXTEND_SIZE:
      case MySQLParser::AUTO_INCREMENT:
      case MySQLParser::AVG_ROW_LENGTH:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::BIT:
      case MySQLParser::BLOCK:
      case MySQLParser::BOOL:
      case MySQLParser::BOOLEAN:
      case MySQLParser::BTREE:
      case MySQLParser::CACHE:
      case MySQLParser::CASCADED:
      case MySQLParser::CHAIN:
      case MySQLParser::CHANGED:
      case MySQLParser::CHANNEL:
      case MySQLParser::CHECKSUM:
      case MySQLParser::PAGE_CHECKSUM:
      case MySQLParser::CIPHER:
      case MySQLParser::CLIENT:
      case MySQLParser::CLOSE:
      case MySQLParser::COALESCE:
      case MySQLParser::CODE:
      case MySQLParser::COLUMNS:
      case MySQLParser::COLUMN_FORMAT:
      case MySQLParser::COMMENT:
      case MySQLParser::COMMIT:
      case MySQLParser::COMPACT:
      case MySQLParser::COMPLETION:
      case MySQLParser::COMPRESSED:
      case MySQLParser::COMPRESSION:
      case MySQLParser::CONCURRENT:
      case MySQLParser::CONNECTION:
      case MySQLParser::CONSISTENT:
      case MySQLParser::CONTAINS:
      case MySQLParser::CONTEXT:
      case MySQLParser::CONTRIBUTORS:
      case MySQLParser::COPY:
      case MySQLParser::CPU:
      case MySQLParser::DATA:
      case MySQLParser::DATAFILE:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DEFAULT_AUTH:
      case MySQLParser::DEFINER:
      case MySQLParser::DELAY_KEY_WRITE:
      case MySQLParser::DES_KEY_FILE:
      case MySQLParser::DIRECTORY:
      case MySQLParser::DISABLE:
      case MySQLParser::DISCARD:
      case MySQLParser::DISK:
      case MySQLParser::DO:
      case MySQLParser::DUMPFILE:
      case MySQLParser::DUPLICATE:
      case MySQLParser::DYNAMIC:
      case MySQLParser::ENABLE:
      case MySQLParser::ENCRYPTION:
      case MySQLParser::END:
      case MySQLParser::ENDS:
      case MySQLParser::ENGINE:
      case MySQLParser::ENGINES:
      case MySQLParser::ERROR:
      case MySQLParser::ERRORS:
      case MySQLParser::ESCAPE:
      case MySQLParser::EVEN:
      case MySQLParser::EVENT:
      case MySQLParser::EVENTS:
      case MySQLParser::EVERY:
      case MySQLParser::EXCHANGE:
      case MySQLParser::EXCLUSIVE:
      case MySQLParser::EXPIRE:
      case MySQLParser::EXPORT:
      case MySQLParser::EXTENDED:
      case MySQLParser::EXTENT_SIZE:
      case MySQLParser::FAST:
      case MySQLParser::FAULTS:
      case MySQLParser::FIELDS:
      case MySQLParser::FILE_BLOCK_SIZE:
      case MySQLParser::FILTER:
      case MySQLParser::FIRST:
      case MySQLParser::FIXED:
      case MySQLParser::FLUSH:
      case MySQLParser::FOLLOWS:
      case MySQLParser::FOUND:
      case MySQLParser::FULL:
      case MySQLParser::FUNCTION:
      case MySQLParser::GENERAL:
      case MySQLParser::GLOBAL:
      case MySQLParser::GRANTS:
      case MySQLParser::GROUP_REPLICATION:
      case MySQLParser::HANDLER:
      case MySQLParser::HASH:
      case MySQLParser::HELP:
      case MySQLParser::HOST:
      case MySQLParser::HOSTS:
      case MySQLParser::IDENTIFIED:
      case MySQLParser::IGNORE_SERVER_IDS:
      case MySQLParser::IMPORT:
      case MySQLParser::INDEXES:
      case MySQLParser::INITIAL_SIZE:
      case MySQLParser::INPLACE:
      case MySQLParser::INSERT_METHOD:
      case MySQLParser::INSTALL:
      case MySQLParser::INSTANCE:
      case MySQLParser::INVISIBLE:
      case MySQLParser::INVOKER:
      case MySQLParser::IO:
      case MySQLParser::IO_THREAD:
      case MySQLParser::IPC:
      case MySQLParser::ISOLATION:
      case MySQLParser::ISSUER:
      case MySQLParser::JSON:
      case MySQLParser::KEY_BLOCK_SIZE:
      case MySQLParser::LANGUAGE:
      case MySQLParser::LAST:
      case MySQLParser::LEAVES:
      case MySQLParser::LESS:
      case MySQLParser::LEVEL:
      case MySQLParser::LIST:
      case MySQLParser::LOCAL:
      case MySQLParser::LOGFILE:
      case MySQLParser::LOGS:
      case MySQLParser::MASTER:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_HEARTBEAT_PERIOD:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::MASTER_SSL:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
      case MySQLParser::MAX_QUERIES_PER_HOUR:
      case MySQLParser::MAX_ROWS:
      case MySQLParser::MAX_SIZE:
      case MySQLParser::MAX_UPDATES_PER_HOUR:
      case MySQLParser::MAX_USER_CONNECTIONS:
      case MySQLParser::MEDIUM:
      case MySQLParser::MERGE:
      case MySQLParser::MID:
      case MySQLParser::MIGRATE:
      case MySQLParser::MIN_ROWS:
      case MySQLParser::MODE:
      case MySQLParser::MODIFY:
      case MySQLParser::MUTEX:
      case MySQLParser::MYSQL:
      case MySQLParser::NAME:
      case MySQLParser::NAMES:
      case MySQLParser::NCHAR:
      case MySQLParser::NEVER:
      case MySQLParser::NEXT:
      case MySQLParser::NO:
      case MySQLParser::NODEGROUP:
      case MySQLParser::NONE:
      case MySQLParser::OFFLINE:
      case MySQLParser::OFFSET:
      case MySQLParser::OJ:
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::ONE:
      case MySQLParser::ONLINE:
      case MySQLParser::ONLY:
      case MySQLParser::OPEN:
      case MySQLParser::OPTIMIZER_COSTS:
      case MySQLParser::OPTIONS:
      case MySQLParser::OWNER:
      case MySQLParser::PACK_KEYS:
      case MySQLParser::PAGE:
      case MySQLParser::PARSER:
      case MySQLParser::PARTIAL:
      case MySQLParser::PARTITIONING:
      case MySQLParser::PARTITIONS:
      case MySQLParser::PASSWORD:
      case MySQLParser::PHASE:
      case MySQLParser::PLUGIN:
      case MySQLParser::PLUGIN_DIR:
      case MySQLParser::PLUGINS:
      case MySQLParser::PORT:
      case MySQLParser::PRECEDES:
      case MySQLParser::PREPARE:
      case MySQLParser::PRESERVE:
      case MySQLParser::PREV:
      case MySQLParser::PROCESSLIST:
      case MySQLParser::PROFILE:
      case MySQLParser::PROFILES:
      case MySQLParser::PROXY:
      case MySQLParser::QUERY:
      case MySQLParser::QUICK:
      case MySQLParser::REBUILD:
      case MySQLParser::RECOVER:
      case MySQLParser::REDO_BUFFER_SIZE:
      case MySQLParser::REDUNDANT:
      case MySQLParser::RELAY:
      case MySQLParser::RELAY_LOG_FILE:
      case MySQLParser::RELAY_LOG_POS:
      case MySQLParser::RELAYLOG:
      case MySQLParser::REMOVE:
      case MySQLParser::REORGANIZE:
      case MySQLParser::REPAIR:
      case MySQLParser::REPLICATE_DO_DB:
      case MySQLParser::REPLICATE_DO_TABLE:
      case MySQLParser::REPLICATE_IGNORE_DB:
      case MySQLParser::REPLICATE_IGNORE_TABLE:
      case MySQLParser::REPLICATE_REWRITE_DB:
      case MySQLParser::REPLICATE_WILD_DO_TABLE:
      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySQLParser::REPLICATION:
      case MySQLParser::RESET:
      case MySQLParser::RESUME:
      case MySQLParser::RETURNS:
      case MySQLParser::ROLLBACK:
      case MySQLParser::ROLLUP:
      case MySQLParser::ROTATE:
      case MySQLParser::ROW:
      case MySQLParser::ROWS:
      case MySQLParser::ROW_FORMAT:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::SCHEDULE:
      case MySQLParser::SECURITY:
      case MySQLParser::SERVER:
      case MySQLParser::SESSION:
      case MySQLParser::SHARE:
      case MySQLParser::SHARED:
      case MySQLParser::SIGNED:
      case MySQLParser::SIMPLE:
      case MySQLParser::SLAVE:
      case MySQLParser::SLOW:
      case MySQLParser::SNAPSHOT:
      case MySQLParser::SOCKET:
      case MySQLParser::SOME:
      case MySQLParser::SONAME:
      case MySQLParser::SOUNDS:
      case MySQLParser::SOURCE:
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_AFTER_MTS_GAPS:
      case MySQLParser::SQL_BEFORE_GTIDS:
      case MySQLParser::SQL_BUFFER_RESULT:
      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE:
      case MySQLParser::SQL_THREAD:
      case MySQLParser::START:
      case MySQLParser::STARTS:
      case MySQLParser::STATS_AUTO_RECALC:
      case MySQLParser::STATS_PERSISTENT:
      case MySQLParser::STATS_SAMPLE_PAGES:
      case MySQLParser::STATUS:
      case MySQLParser::STOP:
      case MySQLParser::STORAGE:
      case MySQLParser::STRING:
      case MySQLParser::SUBJECT:
      case MySQLParser::SUBPARTITION:
      case MySQLParser::SUBPARTITIONS:
      case MySQLParser::SUSPEND:
      case MySQLParser::SWAPS:
      case MySQLParser::SWITCHES:
      case MySQLParser::TABLESPACE:
      case MySQLParser::TEMPORARY:
      case MySQLParser::TEMPTABLE:
      case MySQLParser::THAN:
      case MySQLParser::TRADITIONAL:
      case MySQLParser::TRANSACTION:
      case MySQLParser::TRIGGERS:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNDEFINED:
      case MySQLParser::UNDOFILE:
      case MySQLParser::UNDO_BUFFER_SIZE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::UNKNOWN:
      case MySQLParser::UNTIL:
      case MySQLParser::UPGRADE:
      case MySQLParser::USER:
      case MySQLParser::USE_FRM:
      case MySQLParser::USER_RESOURCES:
      case MySQLParser::VALIDATION:
      case MySQLParser::VALUE:
      case MySQLParser::VARIABLES:
      case MySQLParser::VIEW:
      case MySQLParser::VISIBLE:
      case MySQLParser::WAIT:
      case MySQLParser::WARNINGS:
      case MySQLParser::WITHOUT:
      case MySQLParser::WORK:
      case MySQLParser::WRAPPER:
      case MySQLParser::X509:
      case MySQLParser::XA:
      case MySQLParser::XML:
      case MySQLParser::INTERNAL:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::TABLES:
      case MySQLParser::ROUTINE:
      case MySQLParser::EXECUTE:
      case MySQLParser::FILE:
      case MySQLParser::PROCESS:
      case MySQLParser::RELOAD:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::SUPER:
      case MySQLParser::PRIVILEGES:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4:
      case MySQLParser::ARCHIVE:
      case MySQLParser::BLACKHOLE:
      case MySQLParser::CSV:
      case MySQLParser::FEDERATED:
      case MySQLParser::INNODB:
      case MySQLParser::MEMORY:
      case MySQLParser::MRG_MYISAM:
      case MySQLParser::MYISAM:
      case MySQLParser::NDB:
      case MySQLParser::NDBCLUSTER:
      case MySQLParser::PERFORMANCE_SCHEMA:
      case MySQLParser::TOKUDB:
      case MySQLParser::REPEATABLE:
      case MySQLParser::COMMITTED:
      case MySQLParser::UNCOMMITTED:
      case MySQLParser::SERIALIZABLE:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION:
      case MySQLParser::PLUS:
      case MySQLParser::MINUS:
      case MySQLParser::EXCLAMATION_SYMBOL:
      case MySQLParser::BIT_NOT_OP:
      case MySQLParser::LR_BRACKET:
      case MySQLParser::ZERO_DECIMAL:
      case MySQLParser::ONE_DECIMAL:
      case MySQLParser::TWO_DECIMAL:
      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySQLParser::START_NATIONAL_STRING_LITERAL:
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::DECIMAL_LITERAL:
      case MySQLParser::HEXADECIMAL_LITERAL:
      case MySQLParser::REAL_LITERAL:
      case MySQLParser::NULL_SPEC_LITERAL:
      case MySQLParser::BIT_STRING:
      case MySQLParser::STRING_CHARSET_NAME:
      case MySQLParser::PLACEHOLDER_VALUE:
      case MySQLParser::ID:
      case MySQLParser::REVERSE_QUOTE_ID:
      case MySQLParser::LOCAL_ID:
      case MySQLParser::GLOBAL_ID: {
        setState(3507);
        selectElement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3514);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3510);
      match(MySQLParser::COMMA);
      setState(3511);
      selectElement();
      setState(3516);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectElementContext ------------------------------------------------------------------

MySQLParser::SelectElementContext::SelectElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::SelectElementContext::getRuleIndex() const {
  return MySQLParser::RuleSelectElement;
}

void MySQLParser::SelectElementContext::copyFrom(SelectElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectExpressionElementContext ------------------------------------------------------------------

MySQLParser::ExpressionContext* MySQLParser::SelectExpressionElementContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::SelectExpressionElementContext::LOCAL_ID() {
  return getToken(MySQLParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySQLParser::SelectExpressionElementContext::VAR_ASSIGN() {
  return getToken(MySQLParser::VAR_ASSIGN, 0);
}

MySQLParser::UidContext* MySQLParser::SelectExpressionElementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::SelectExpressionElementContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::SelectExpressionElementContext::SelectExpressionElementContext(SelectElementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SelectExpressionElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectExpressionElement(this);
}
void MySQLParser::SelectExpressionElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectExpressionElement(this);
}

antlrcpp::Any MySQLParser::SelectExpressionElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectExpressionElement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectFunctionElementContext ------------------------------------------------------------------

MySQLParser::FunctionCallContext* MySQLParser::SelectFunctionElementContext::functionCall() {
  return getRuleContext<MySQLParser::FunctionCallContext>(0);
}

MySQLParser::UidContext* MySQLParser::SelectFunctionElementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::SelectFunctionElementContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::SelectFunctionElementContext::SelectFunctionElementContext(SelectElementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SelectFunctionElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectFunctionElement(this);
}
void MySQLParser::SelectFunctionElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectFunctionElement(this);
}

antlrcpp::Any MySQLParser::SelectFunctionElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectFunctionElement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectStarElementContext ------------------------------------------------------------------

MySQLParser::FullIdContext* MySQLParser::SelectStarElementContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::SelectStarElementContext::SelectStarElementContext(SelectElementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SelectStarElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectStarElement(this);
}
void MySQLParser::SelectStarElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectStarElement(this);
}

antlrcpp::Any MySQLParser::SelectStarElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStarElement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectColumnElementContext ------------------------------------------------------------------

MySQLParser::FullColumnNameContext* MySQLParser::SelectColumnElementContext::fullColumnName() {
  return getRuleContext<MySQLParser::FullColumnNameContext>(0);
}

MySQLParser::UidContext* MySQLParser::SelectColumnElementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::SelectColumnElementContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::SelectColumnElementContext::SelectColumnElementContext(SelectElementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SelectColumnElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectColumnElement(this);
}
void MySQLParser::SelectColumnElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectColumnElement(this);
}

antlrcpp::Any MySQLParser::SelectColumnElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectColumnElement(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::SelectElementContext* MySQLParser::selectElement() {
  SelectElementContext *_localctx = _tracker.createInstance<SelectElementContext>(_ctx, getState());
  enterRule(_localctx, 244, MySQLParser::RuleSelectElement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3546);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 514, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySQLParser::SelectStarElementContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3517);
      fullId();
      setState(3518);
      match(MySQLParser::DOT);
      setState(3519);
      match(MySQLParser::STAR);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySQLParser::SelectColumnElementContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3521);
      fullColumnName();
      setState(3526);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 508, _ctx)) {
      case 1: {
        setState(3523);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::AS) {
          setState(3522);
          match(MySQLParser::AS);
        }
        setState(3525);
        uid();
        break;
      }

      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySQLParser::SelectFunctionElementContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3528);
      functionCall();
      setState(3533);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 510, _ctx)) {
      case 1: {
        setState(3530);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::AS) {
          setState(3529);
          match(MySQLParser::AS);
        }
        setState(3532);
        uid();
        break;
      }

      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySQLParser::SelectExpressionElementContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(3537);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 511, _ctx)) {
      case 1: {
        setState(3535);
        match(MySQLParser::LOCAL_ID);
        setState(3536);
        match(MySQLParser::VAR_ASSIGN);
        break;
      }

      }
      setState(3539);
      expression(0);
      setState(3544);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 513, _ctx)) {
      case 1: {
        setState(3541);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::AS) {
          setState(3540);
          match(MySQLParser::AS);
        }
        setState(3543);
        uid();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectIntoExpressionContext ------------------------------------------------------------------

MySQLParser::SelectIntoExpressionContext::SelectIntoExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::SelectIntoExpressionContext::getRuleIndex() const {
  return MySQLParser::RuleSelectIntoExpression;
}

void MySQLParser::SelectIntoExpressionContext::copyFrom(SelectIntoExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectIntoVariablesContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SelectIntoVariablesContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

std::vector<MySQLParser::AssignmentFieldContext *> MySQLParser::SelectIntoVariablesContext::assignmentField() {
  return getRuleContexts<MySQLParser::AssignmentFieldContext>();
}

MySQLParser::AssignmentFieldContext* MySQLParser::SelectIntoVariablesContext::assignmentField(size_t i) {
  return getRuleContext<MySQLParser::AssignmentFieldContext>(i);
}

MySQLParser::SelectIntoVariablesContext::SelectIntoVariablesContext(SelectIntoExpressionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SelectIntoVariablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectIntoVariables(this);
}
void MySQLParser::SelectIntoVariablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectIntoVariables(this);
}

antlrcpp::Any MySQLParser::SelectIntoVariablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectIntoVariables(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectIntoTextFileContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::OUTFILE() {
  return getToken(MySQLParser::OUTFILE, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::LINES() {
  return getToken(MySQLParser::LINES, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::SelectIntoTextFileContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::FIELDS() {
  return getToken(MySQLParser::FIELDS, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoTextFileContext::COLUMNS() {
  return getToken(MySQLParser::COLUMNS, 0);
}

std::vector<MySQLParser::SelectFieldsIntoContext *> MySQLParser::SelectIntoTextFileContext::selectFieldsInto() {
  return getRuleContexts<MySQLParser::SelectFieldsIntoContext>();
}

MySQLParser::SelectFieldsIntoContext* MySQLParser::SelectIntoTextFileContext::selectFieldsInto(size_t i) {
  return getRuleContext<MySQLParser::SelectFieldsIntoContext>(i);
}

std::vector<MySQLParser::SelectLinesIntoContext *> MySQLParser::SelectIntoTextFileContext::selectLinesInto() {
  return getRuleContexts<MySQLParser::SelectLinesIntoContext>();
}

MySQLParser::SelectLinesIntoContext* MySQLParser::SelectIntoTextFileContext::selectLinesInto(size_t i) {
  return getRuleContext<MySQLParser::SelectLinesIntoContext>(i);
}

MySQLParser::SelectIntoTextFileContext::SelectIntoTextFileContext(SelectIntoExpressionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SelectIntoTextFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectIntoTextFile(this);
}
void MySQLParser::SelectIntoTextFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectIntoTextFile(this);
}

antlrcpp::Any MySQLParser::SelectIntoTextFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectIntoTextFile(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectIntoDumpFileContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SelectIntoDumpFileContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoDumpFileContext::DUMPFILE() {
  return getToken(MySQLParser::DUMPFILE, 0);
}

tree::TerminalNode* MySQLParser::SelectIntoDumpFileContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::SelectIntoDumpFileContext::SelectIntoDumpFileContext(SelectIntoExpressionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SelectIntoDumpFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectIntoDumpFile(this);
}
void MySQLParser::SelectIntoDumpFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectIntoDumpFile(this);
}

antlrcpp::Any MySQLParser::SelectIntoDumpFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectIntoDumpFile(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::SelectIntoExpressionContext* MySQLParser::selectIntoExpression() {
  SelectIntoExpressionContext *_localctx = _tracker.createInstance<SelectIntoExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, MySQLParser::RuleSelectIntoExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3584);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 521, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SelectIntoExpressionContext *>(_tracker.createInstance<MySQLParser::SelectIntoVariablesContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3548);
      match(MySQLParser::INTO);
      setState(3549);
      assignmentField();
      setState(3554);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(3550);
        match(MySQLParser::COMMA);
        setState(3551);
        assignmentField();
        setState(3556);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SelectIntoExpressionContext *>(_tracker.createInstance<MySQLParser::SelectIntoDumpFileContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3557);
      match(MySQLParser::INTO);
      setState(3558);
      match(MySQLParser::DUMPFILE);
      setState(3559);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SelectIntoExpressionContext *>(_tracker.createInstance<MySQLParser::SelectIntoTextFileContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3560);
      match(MySQLParser::INTO);
      setState(3561);
      match(MySQLParser::OUTFILE);
      setState(3562);
      dynamic_cast<SelectIntoTextFileContext *>(_localctx)->filename = match(MySQLParser::STRING_LITERAL);
      setState(3566);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::CHARACTER) {
        setState(3563);
        match(MySQLParser::CHARACTER);
        setState(3564);
        match(MySQLParser::SET);
        setState(3565);
        dynamic_cast<SelectIntoTextFileContext *>(_localctx)->charset = charsetName();
      }
      setState(3574);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 518, _ctx)) {
      case 1: {
        setState(3568);
        dynamic_cast<SelectIntoTextFileContext *>(_localctx)->fieldsFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::COLUMNS

        || _la == MySQLParser::FIELDS)) {
          dynamic_cast<SelectIntoTextFileContext *>(_localctx)->fieldsFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3570); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3569);
          selectFieldsInto();
          setState(3572); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == MySQLParser::ENCLOSED

        || _la == MySQLParser::ESCAPED || _la == MySQLParser::OPTIONALLY

        || _la == MySQLParser::TERMINATED);
        break;
      }

      }
      setState(3582);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LINES) {
        setState(3576);
        match(MySQLParser::LINES);
        setState(3578); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3577);
          selectLinesInto();
          setState(3580); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == MySQLParser::STARTING

        || _la == MySQLParser::TERMINATED);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectFieldsIntoContext ------------------------------------------------------------------

MySQLParser::SelectFieldsIntoContext::SelectFieldsIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SelectFieldsIntoContext::TERMINATED() {
  return getToken(MySQLParser::TERMINATED, 0);
}

tree::TerminalNode* MySQLParser::SelectFieldsIntoContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

tree::TerminalNode* MySQLParser::SelectFieldsIntoContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::SelectFieldsIntoContext::ENCLOSED() {
  return getToken(MySQLParser::ENCLOSED, 0);
}

tree::TerminalNode* MySQLParser::SelectFieldsIntoContext::OPTIONALLY() {
  return getToken(MySQLParser::OPTIONALLY, 0);
}

tree::TerminalNode* MySQLParser::SelectFieldsIntoContext::ESCAPED() {
  return getToken(MySQLParser::ESCAPED, 0);
}


size_t MySQLParser::SelectFieldsIntoContext::getRuleIndex() const {
  return MySQLParser::RuleSelectFieldsInto;
}

void MySQLParser::SelectFieldsIntoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectFieldsInto(this);
}

void MySQLParser::SelectFieldsIntoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectFieldsInto(this);
}


antlrcpp::Any MySQLParser::SelectFieldsIntoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectFieldsInto(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SelectFieldsIntoContext* MySQLParser::selectFieldsInto() {
  SelectFieldsIntoContext *_localctx = _tracker.createInstance<SelectFieldsIntoContext>(_ctx, getState());
  enterRule(_localctx, 248, MySQLParser::RuleSelectFieldsInto);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3598);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::TERMINATED: {
        enterOuterAlt(_localctx, 1);
        setState(3586);
        match(MySQLParser::TERMINATED);
        setState(3587);
        match(MySQLParser::BY);
        setState(3588);
        dynamic_cast<SelectFieldsIntoContext *>(_localctx)->terminationField = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::ENCLOSED:
      case MySQLParser::OPTIONALLY: {
        enterOuterAlt(_localctx, 2);
        setState(3590);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::OPTIONALLY) {
          setState(3589);
          match(MySQLParser::OPTIONALLY);
        }
        setState(3592);
        match(MySQLParser::ENCLOSED);
        setState(3593);
        match(MySQLParser::BY);
        setState(3594);
        dynamic_cast<SelectFieldsIntoContext *>(_localctx)->enclosion = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::ESCAPED: {
        enterOuterAlt(_localctx, 3);
        setState(3595);
        match(MySQLParser::ESCAPED);
        setState(3596);
        match(MySQLParser::BY);
        setState(3597);
        dynamic_cast<SelectFieldsIntoContext *>(_localctx)->escaping = match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectLinesIntoContext ------------------------------------------------------------------

MySQLParser::SelectLinesIntoContext::SelectLinesIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SelectLinesIntoContext::STARTING() {
  return getToken(MySQLParser::STARTING, 0);
}

tree::TerminalNode* MySQLParser::SelectLinesIntoContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

tree::TerminalNode* MySQLParser::SelectLinesIntoContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::SelectLinesIntoContext::TERMINATED() {
  return getToken(MySQLParser::TERMINATED, 0);
}


size_t MySQLParser::SelectLinesIntoContext::getRuleIndex() const {
  return MySQLParser::RuleSelectLinesInto;
}

void MySQLParser::SelectLinesIntoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectLinesInto(this);
}

void MySQLParser::SelectLinesIntoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectLinesInto(this);
}


antlrcpp::Any MySQLParser::SelectLinesIntoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectLinesInto(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SelectLinesIntoContext* MySQLParser::selectLinesInto() {
  SelectLinesIntoContext *_localctx = _tracker.createInstance<SelectLinesIntoContext>(_ctx, getState());
  enterRule(_localctx, 250, MySQLParser::RuleSelectLinesInto);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3606);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::STARTING: {
        enterOuterAlt(_localctx, 1);
        setState(3600);
        match(MySQLParser::STARTING);
        setState(3601);
        match(MySQLParser::BY);
        setState(3602);
        dynamic_cast<SelectLinesIntoContext *>(_localctx)->starting = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::TERMINATED: {
        enterOuterAlt(_localctx, 2);
        setState(3603);
        match(MySQLParser::TERMINATED);
        setState(3604);
        match(MySQLParser::BY);
        setState(3605);
        dynamic_cast<SelectLinesIntoContext *>(_localctx)->terminationLine = match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

MySQLParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::FromClauseContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

MySQLParser::TableSourcesContext* MySQLParser::FromClauseContext::tableSources() {
  return getRuleContext<MySQLParser::TableSourcesContext>(0);
}


size_t MySQLParser::FromClauseContext::getRuleIndex() const {
  return MySQLParser::RuleFromClause;
}

void MySQLParser::FromClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromClause(this);
}

void MySQLParser::FromClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromClause(this);
}


antlrcpp::Any MySQLParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FromClauseContext* MySQLParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 252, MySQLParser::RuleFromClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3608);
    match(MySQLParser::FROM);
    setState(3609);
    tableSources();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

MySQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::WhereClauseContext::WHERE() {
  return getToken(MySQLParser::WHERE, 0);
}

MySQLParser::ExpressionContext* MySQLParser::WhereClauseContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}


size_t MySQLParser::WhereClauseContext::getRuleIndex() const {
  return MySQLParser::RuleWhereClause;
}

void MySQLParser::WhereClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhereClause(this);
}

void MySQLParser::WhereClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhereClause(this);
}


antlrcpp::Any MySQLParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::WhereClauseContext* MySQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 254, MySQLParser::RuleWhereClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3611);
    match(MySQLParser::WHERE);
    setState(3612);
    dynamic_cast<WhereClauseContext *>(_localctx)->whereExpr = expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupClauseContext ------------------------------------------------------------------

MySQLParser::GroupClauseContext::GroupClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::GroupClauseContext::GROUP() {
  return getToken(MySQLParser::GROUP, 0);
}

tree::TerminalNode* MySQLParser::GroupClauseContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

std::vector<MySQLParser::GroupByItemContext *> MySQLParser::GroupClauseContext::groupByItem() {
  return getRuleContexts<MySQLParser::GroupByItemContext>();
}

MySQLParser::GroupByItemContext* MySQLParser::GroupClauseContext::groupByItem(size_t i) {
  return getRuleContext<MySQLParser::GroupByItemContext>(i);
}

tree::TerminalNode* MySQLParser::GroupClauseContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::GroupClauseContext::ROLLUP() {
  return getToken(MySQLParser::ROLLUP, 0);
}


size_t MySQLParser::GroupClauseContext::getRuleIndex() const {
  return MySQLParser::RuleGroupClause;
}

void MySQLParser::GroupClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupClause(this);
}

void MySQLParser::GroupClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupClause(this);
}


antlrcpp::Any MySQLParser::GroupClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::GroupClauseContext* MySQLParser::groupClause() {
  GroupClauseContext *_localctx = _tracker.createInstance<GroupClauseContext>(_ctx, getState());
  enterRule(_localctx, 256, MySQLParser::RuleGroupClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3614);
    match(MySQLParser::GROUP);
    setState(3615);
    match(MySQLParser::BY);
    setState(3616);
    groupByItem();
    setState(3621);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3617);
      match(MySQLParser::COMMA);
      setState(3618);
      groupByItem();
      setState(3623);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3626);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 526, _ctx)) {
    case 1: {
      setState(3624);
      match(MySQLParser::WITH);
      setState(3625);
      match(MySQLParser::ROLLUP);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

MySQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::HavingClauseContext::HAVING() {
  return getToken(MySQLParser::HAVING, 0);
}

MySQLParser::ExpressionContext* MySQLParser::HavingClauseContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}


size_t MySQLParser::HavingClauseContext::getRuleIndex() const {
  return MySQLParser::RuleHavingClause;
}

void MySQLParser::HavingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHavingClause(this);
}

void MySQLParser::HavingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHavingClause(this);
}


antlrcpp::Any MySQLParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HavingClauseContext* MySQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 258, MySQLParser::RuleHavingClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3628);
    match(MySQLParser::HAVING);
    setState(3629);
    dynamic_cast<HavingClauseContext *>(_localctx)->havingExpr = expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByItemContext ------------------------------------------------------------------

MySQLParser::GroupByItemContext::GroupByItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ExpressionContext* MySQLParser::GroupByItemContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::GroupByItemContext::ASC() {
  return getToken(MySQLParser::ASC, 0);
}

tree::TerminalNode* MySQLParser::GroupByItemContext::DESC() {
  return getToken(MySQLParser::DESC, 0);
}


size_t MySQLParser::GroupByItemContext::getRuleIndex() const {
  return MySQLParser::RuleGroupByItem;
}

void MySQLParser::GroupByItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupByItem(this);
}

void MySQLParser::GroupByItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupByItem(this);
}


antlrcpp::Any MySQLParser::GroupByItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupByItem(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::GroupByItemContext* MySQLParser::groupByItem() {
  GroupByItemContext *_localctx = _tracker.createInstance<GroupByItemContext>(_ctx, getState());
  enterRule(_localctx, 260, MySQLParser::RuleGroupByItem);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3631);
    expression(0);
    setState(3633);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 527, _ctx)) {
    case 1: {
      setState(3632);
      dynamic_cast<GroupByItemContext *>(_localctx)->order = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ASC

      || _la == MySQLParser::DESC)) {
        dynamic_cast<GroupByItemContext *>(_localctx)->order = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseContext ------------------------------------------------------------------

MySQLParser::LimitClauseContext::LimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LimitClauseContext::LIMIT() {
  return getToken(MySQLParser::LIMIT, 0);
}

tree::TerminalNode* MySQLParser::LimitClauseContext::OFFSET() {
  return getToken(MySQLParser::OFFSET, 0);
}

std::vector<MySQLParser::LimitClauseAtomContext *> MySQLParser::LimitClauseContext::limitClauseAtom() {
  return getRuleContexts<MySQLParser::LimitClauseAtomContext>();
}

MySQLParser::LimitClauseAtomContext* MySQLParser::LimitClauseContext::limitClauseAtom(size_t i) {
  return getRuleContext<MySQLParser::LimitClauseAtomContext>(i);
}


size_t MySQLParser::LimitClauseContext::getRuleIndex() const {
  return MySQLParser::RuleLimitClause;
}

void MySQLParser::LimitClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLimitClause(this);
}

void MySQLParser::LimitClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLimitClause(this);
}


antlrcpp::Any MySQLParser::LimitClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LimitClauseContext* MySQLParser::limitClause() {
  LimitClauseContext *_localctx = _tracker.createInstance<LimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 262, MySQLParser::RuleLimitClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3635);
    match(MySQLParser::LIMIT);
    setState(3646);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 529, _ctx)) {
    case 1: {
      setState(3639);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 528, _ctx)) {
      case 1: {
        setState(3636);
        dynamic_cast<LimitClauseContext *>(_localctx)->offset = limitClauseAtom();
        setState(3637);
        match(MySQLParser::COMMA);
        break;
      }

      }
      setState(3641);
      dynamic_cast<LimitClauseContext *>(_localctx)->limit = limitClauseAtom();
      break;
    }

    case 2: {
      setState(3642);
      dynamic_cast<LimitClauseContext *>(_localctx)->limit = limitClauseAtom();
      setState(3643);
      match(MySQLParser::OFFSET);
      setState(3644);
      dynamic_cast<LimitClauseContext *>(_localctx)->offset = limitClauseAtom();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseAtomContext ------------------------------------------------------------------

MySQLParser::LimitClauseAtomContext::LimitClauseAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::DecimalLiteralContext* MySQLParser::LimitClauseAtomContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::MysqlVariableContext* MySQLParser::LimitClauseAtomContext::mysqlVariable() {
  return getRuleContext<MySQLParser::MysqlVariableContext>(0);
}

tree::TerminalNode* MySQLParser::LimitClauseAtomContext::PLACEHOLDER_VALUE() {
  return getToken(MySQLParser::PLACEHOLDER_VALUE, 0);
}


size_t MySQLParser::LimitClauseAtomContext::getRuleIndex() const {
  return MySQLParser::RuleLimitClauseAtom;
}

void MySQLParser::LimitClauseAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLimitClauseAtom(this);
}

void MySQLParser::LimitClauseAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLimitClauseAtom(this);
}


antlrcpp::Any MySQLParser::LimitClauseAtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitClauseAtom(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LimitClauseAtomContext* MySQLParser::limitClauseAtom() {
  LimitClauseAtomContext *_localctx = _tracker.createInstance<LimitClauseAtomContext>(_ctx, getState());
  enterRule(_localctx, 264, MySQLParser::RuleLimitClauseAtom);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3651);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ZERO_DECIMAL:
      case MySQLParser::ONE_DECIMAL:
      case MySQLParser::TWO_DECIMAL:
      case MySQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(3648);
        decimalLiteral();
        break;
      }

      case MySQLParser::LOCAL_ID:
      case MySQLParser::GLOBAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(3649);
        mysqlVariable();
        break;
      }

      case MySQLParser::PLACEHOLDER_VALUE: {
        enterOuterAlt(_localctx, 3);
        setState(3650);
        match(MySQLParser::PLACEHOLDER_VALUE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartTransactionContext ------------------------------------------------------------------

MySQLParser::StartTransactionContext::StartTransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::StartTransactionContext::START() {
  return getToken(MySQLParser::START, 0);
}

tree::TerminalNode* MySQLParser::StartTransactionContext::TRANSACTION() {
  return getToken(MySQLParser::TRANSACTION, 0);
}

std::vector<MySQLParser::TransactionModeContext *> MySQLParser::StartTransactionContext::transactionMode() {
  return getRuleContexts<MySQLParser::TransactionModeContext>();
}

MySQLParser::TransactionModeContext* MySQLParser::StartTransactionContext::transactionMode(size_t i) {
  return getRuleContext<MySQLParser::TransactionModeContext>(i);
}


size_t MySQLParser::StartTransactionContext::getRuleIndex() const {
  return MySQLParser::RuleStartTransaction;
}

void MySQLParser::StartTransactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartTransaction(this);
}

void MySQLParser::StartTransactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartTransaction(this);
}


antlrcpp::Any MySQLParser::StartTransactionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStartTransaction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::StartTransactionContext* MySQLParser::startTransaction() {
  StartTransactionContext *_localctx = _tracker.createInstance<StartTransactionContext>(_ctx, getState());
  enterRule(_localctx, 266, MySQLParser::RuleStartTransaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3653);
    match(MySQLParser::START);
    setState(3654);
    match(MySQLParser::TRANSACTION);
    setState(3663);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::READ

    || _la == MySQLParser::WITH) {
      setState(3655);
      transactionMode();
      setState(3660);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(3656);
        match(MySQLParser::COMMA);
        setState(3657);
        transactionMode();
        setState(3662);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BeginWorkContext ------------------------------------------------------------------

MySQLParser::BeginWorkContext::BeginWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::BeginWorkContext::BEGIN() {
  return getToken(MySQLParser::BEGIN, 0);
}

tree::TerminalNode* MySQLParser::BeginWorkContext::WORK() {
  return getToken(MySQLParser::WORK, 0);
}


size_t MySQLParser::BeginWorkContext::getRuleIndex() const {
  return MySQLParser::RuleBeginWork;
}

void MySQLParser::BeginWorkContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBeginWork(this);
}

void MySQLParser::BeginWorkContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBeginWork(this);
}


antlrcpp::Any MySQLParser::BeginWorkContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitBeginWork(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::BeginWorkContext* MySQLParser::beginWork() {
  BeginWorkContext *_localctx = _tracker.createInstance<BeginWorkContext>(_ctx, getState());
  enterRule(_localctx, 268, MySQLParser::RuleBeginWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3665);
    match(MySQLParser::BEGIN);
    setState(3667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WORK) {
      setState(3666);
      match(MySQLParser::WORK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommitWorkContext ------------------------------------------------------------------

MySQLParser::CommitWorkContext::CommitWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CommitWorkContext::COMMIT() {
  return getToken(MySQLParser::COMMIT, 0);
}

tree::TerminalNode* MySQLParser::CommitWorkContext::WORK() {
  return getToken(MySQLParser::WORK, 0);
}

tree::TerminalNode* MySQLParser::CommitWorkContext::AND() {
  return getToken(MySQLParser::AND, 0);
}

tree::TerminalNode* MySQLParser::CommitWorkContext::CHAIN() {
  return getToken(MySQLParser::CHAIN, 0);
}

tree::TerminalNode* MySQLParser::CommitWorkContext::RELEASE() {
  return getToken(MySQLParser::RELEASE, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::CommitWorkContext::NO() {
  return getTokens(MySQLParser::NO);
}

tree::TerminalNode* MySQLParser::CommitWorkContext::NO(size_t i) {
  return getToken(MySQLParser::NO, i);
}


size_t MySQLParser::CommitWorkContext::getRuleIndex() const {
  return MySQLParser::RuleCommitWork;
}

void MySQLParser::CommitWorkContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommitWork(this);
}

void MySQLParser::CommitWorkContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommitWork(this);
}


antlrcpp::Any MySQLParser::CommitWorkContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCommitWork(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CommitWorkContext* MySQLParser::commitWork() {
  CommitWorkContext *_localctx = _tracker.createInstance<CommitWorkContext>(_ctx, getState());
  enterRule(_localctx, 270, MySQLParser::RuleCommitWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3669);
    match(MySQLParser::COMMIT);
    setState(3671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WORK) {
      setState(3670);
      match(MySQLParser::WORK);
    }
    setState(3678);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::AND) {
      setState(3673);
      match(MySQLParser::AND);
      setState(3675);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NO) {
        setState(3674);
        dynamic_cast<CommitWorkContext *>(_localctx)->nochain = match(MySQLParser::NO);
      }
      setState(3677);
      match(MySQLParser::CHAIN);
    }
    setState(3684);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 538, _ctx)) {
    case 1: {
      setState(3681);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NO) {
        setState(3680);
        dynamic_cast<CommitWorkContext *>(_localctx)->norelease = match(MySQLParser::NO);
      }
      setState(3683);
      match(MySQLParser::RELEASE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RollbackWorkContext ------------------------------------------------------------------

MySQLParser::RollbackWorkContext::RollbackWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RollbackWorkContext::ROLLBACK() {
  return getToken(MySQLParser::ROLLBACK, 0);
}

tree::TerminalNode* MySQLParser::RollbackWorkContext::WORK() {
  return getToken(MySQLParser::WORK, 0);
}

tree::TerminalNode* MySQLParser::RollbackWorkContext::AND() {
  return getToken(MySQLParser::AND, 0);
}

tree::TerminalNode* MySQLParser::RollbackWorkContext::CHAIN() {
  return getToken(MySQLParser::CHAIN, 0);
}

tree::TerminalNode* MySQLParser::RollbackWorkContext::RELEASE() {
  return getToken(MySQLParser::RELEASE, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::RollbackWorkContext::NO() {
  return getTokens(MySQLParser::NO);
}

tree::TerminalNode* MySQLParser::RollbackWorkContext::NO(size_t i) {
  return getToken(MySQLParser::NO, i);
}


size_t MySQLParser::RollbackWorkContext::getRuleIndex() const {
  return MySQLParser::RuleRollbackWork;
}

void MySQLParser::RollbackWorkContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollbackWork(this);
}

void MySQLParser::RollbackWorkContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollbackWork(this);
}


antlrcpp::Any MySQLParser::RollbackWorkContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRollbackWork(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RollbackWorkContext* MySQLParser::rollbackWork() {
  RollbackWorkContext *_localctx = _tracker.createInstance<RollbackWorkContext>(_ctx, getState());
  enterRule(_localctx, 272, MySQLParser::RuleRollbackWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3686);
    match(MySQLParser::ROLLBACK);
    setState(3688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WORK) {
      setState(3687);
      match(MySQLParser::WORK);
    }
    setState(3695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::AND) {
      setState(3690);
      match(MySQLParser::AND);
      setState(3692);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NO) {
        setState(3691);
        dynamic_cast<RollbackWorkContext *>(_localctx)->nochain = match(MySQLParser::NO);
      }
      setState(3694);
      match(MySQLParser::CHAIN);
    }
    setState(3701);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 543, _ctx)) {
    case 1: {
      setState(3698);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NO) {
        setState(3697);
        dynamic_cast<RollbackWorkContext *>(_localctx)->norelease = match(MySQLParser::NO);
      }
      setState(3700);
      match(MySQLParser::RELEASE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SavepointStatementContext ------------------------------------------------------------------

MySQLParser::SavepointStatementContext::SavepointStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SavepointStatementContext::SAVEPOINT() {
  return getToken(MySQLParser::SAVEPOINT, 0);
}

MySQLParser::UidContext* MySQLParser::SavepointStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}


size_t MySQLParser::SavepointStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSavepointStatement;
}

void MySQLParser::SavepointStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavepointStatement(this);
}

void MySQLParser::SavepointStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavepointStatement(this);
}


antlrcpp::Any MySQLParser::SavepointStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSavepointStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SavepointStatementContext* MySQLParser::savepointStatement() {
  SavepointStatementContext *_localctx = _tracker.createInstance<SavepointStatementContext>(_ctx, getState());
  enterRule(_localctx, 274, MySQLParser::RuleSavepointStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3703);
    match(MySQLParser::SAVEPOINT);
    setState(3704);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RollbackStatementContext ------------------------------------------------------------------

MySQLParser::RollbackStatementContext::RollbackStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RollbackStatementContext::ROLLBACK() {
  return getToken(MySQLParser::ROLLBACK, 0);
}

tree::TerminalNode* MySQLParser::RollbackStatementContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

MySQLParser::UidContext* MySQLParser::RollbackStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::RollbackStatementContext::WORK() {
  return getToken(MySQLParser::WORK, 0);
}

tree::TerminalNode* MySQLParser::RollbackStatementContext::SAVEPOINT() {
  return getToken(MySQLParser::SAVEPOINT, 0);
}


size_t MySQLParser::RollbackStatementContext::getRuleIndex() const {
  return MySQLParser::RuleRollbackStatement;
}

void MySQLParser::RollbackStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollbackStatement(this);
}

void MySQLParser::RollbackStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollbackStatement(this);
}


antlrcpp::Any MySQLParser::RollbackStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRollbackStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RollbackStatementContext* MySQLParser::rollbackStatement() {
  RollbackStatementContext *_localctx = _tracker.createInstance<RollbackStatementContext>(_ctx, getState());
  enterRule(_localctx, 276, MySQLParser::RuleRollbackStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3706);
    match(MySQLParser::ROLLBACK);
    setState(3708);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WORK) {
      setState(3707);
      match(MySQLParser::WORK);
    }
    setState(3710);
    match(MySQLParser::TO);
    setState(3712);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 545, _ctx)) {
    case 1: {
      setState(3711);
      match(MySQLParser::SAVEPOINT);
      break;
    }

    }
    setState(3714);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReleaseStatementContext ------------------------------------------------------------------

MySQLParser::ReleaseStatementContext::ReleaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ReleaseStatementContext::RELEASE() {
  return getToken(MySQLParser::RELEASE, 0);
}

tree::TerminalNode* MySQLParser::ReleaseStatementContext::SAVEPOINT() {
  return getToken(MySQLParser::SAVEPOINT, 0);
}

MySQLParser::UidContext* MySQLParser::ReleaseStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}


size_t MySQLParser::ReleaseStatementContext::getRuleIndex() const {
  return MySQLParser::RuleReleaseStatement;
}

void MySQLParser::ReleaseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReleaseStatement(this);
}

void MySQLParser::ReleaseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReleaseStatement(this);
}


antlrcpp::Any MySQLParser::ReleaseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReleaseStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ReleaseStatementContext* MySQLParser::releaseStatement() {
  ReleaseStatementContext *_localctx = _tracker.createInstance<ReleaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 278, MySQLParser::RuleReleaseStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3716);
    match(MySQLParser::RELEASE);
    setState(3717);
    match(MySQLParser::SAVEPOINT);
    setState(3718);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockTablesContext ------------------------------------------------------------------

MySQLParser::LockTablesContext::LockTablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LockTablesContext::LOCK() {
  return getToken(MySQLParser::LOCK, 0);
}

tree::TerminalNode* MySQLParser::LockTablesContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}

std::vector<MySQLParser::LockTableElementContext *> MySQLParser::LockTablesContext::lockTableElement() {
  return getRuleContexts<MySQLParser::LockTableElementContext>();
}

MySQLParser::LockTableElementContext* MySQLParser::LockTablesContext::lockTableElement(size_t i) {
  return getRuleContext<MySQLParser::LockTableElementContext>(i);
}


size_t MySQLParser::LockTablesContext::getRuleIndex() const {
  return MySQLParser::RuleLockTables;
}

void MySQLParser::LockTablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLockTables(this);
}

void MySQLParser::LockTablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLockTables(this);
}


antlrcpp::Any MySQLParser::LockTablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLockTables(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LockTablesContext* MySQLParser::lockTables() {
  LockTablesContext *_localctx = _tracker.createInstance<LockTablesContext>(_ctx, getState());
  enterRule(_localctx, 280, MySQLParser::RuleLockTables);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3720);
    match(MySQLParser::LOCK);
    setState(3721);
    match(MySQLParser::TABLES);
    setState(3722);
    lockTableElement();
    setState(3727);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3723);
      match(MySQLParser::COMMA);
      setState(3724);
      lockTableElement();
      setState(3729);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnlockTablesContext ------------------------------------------------------------------

MySQLParser::UnlockTablesContext::UnlockTablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UnlockTablesContext::UNLOCK() {
  return getToken(MySQLParser::UNLOCK, 0);
}

tree::TerminalNode* MySQLParser::UnlockTablesContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}


size_t MySQLParser::UnlockTablesContext::getRuleIndex() const {
  return MySQLParser::RuleUnlockTables;
}

void MySQLParser::UnlockTablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnlockTables(this);
}

void MySQLParser::UnlockTablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnlockTables(this);
}


antlrcpp::Any MySQLParser::UnlockTablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUnlockTables(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UnlockTablesContext* MySQLParser::unlockTables() {
  UnlockTablesContext *_localctx = _tracker.createInstance<UnlockTablesContext>(_ctx, getState());
  enterRule(_localctx, 282, MySQLParser::RuleUnlockTables);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3730);
    match(MySQLParser::UNLOCK);
    setState(3731);
    match(MySQLParser::TABLES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetAutocommitStatementContext ------------------------------------------------------------------

MySQLParser::SetAutocommitStatementContext::SetAutocommitStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SetAutocommitStatementContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::SetAutocommitStatementContext::AUTOCOMMIT() {
  return getToken(MySQLParser::AUTOCOMMIT, 0);
}


size_t MySQLParser::SetAutocommitStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSetAutocommitStatement;
}

void MySQLParser::SetAutocommitStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetAutocommitStatement(this);
}

void MySQLParser::SetAutocommitStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetAutocommitStatement(this);
}


antlrcpp::Any MySQLParser::SetAutocommitStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetAutocommitStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SetAutocommitStatementContext* MySQLParser::setAutocommitStatement() {
  SetAutocommitStatementContext *_localctx = _tracker.createInstance<SetAutocommitStatementContext>(_ctx, getState());
  enterRule(_localctx, 284, MySQLParser::RuleSetAutocommitStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3733);
    match(MySQLParser::SET);
    setState(3734);
    match(MySQLParser::AUTOCOMMIT);
    setState(3735);
    match(MySQLParser::EQUAL_SYMBOL);
    setState(3736);
    dynamic_cast<SetAutocommitStatementContext *>(_localctx)->autocommitValue = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::ZERO_DECIMAL

    || _la == MySQLParser::ONE_DECIMAL)) {
      dynamic_cast<SetAutocommitStatementContext *>(_localctx)->autocommitValue = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTransactionStatementContext ------------------------------------------------------------------

MySQLParser::SetTransactionStatementContext::SetTransactionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SetTransactionStatementContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::SetTransactionStatementContext::TRANSACTION() {
  return getToken(MySQLParser::TRANSACTION, 0);
}

std::vector<MySQLParser::TransactionOptionContext *> MySQLParser::SetTransactionStatementContext::transactionOption() {
  return getRuleContexts<MySQLParser::TransactionOptionContext>();
}

MySQLParser::TransactionOptionContext* MySQLParser::SetTransactionStatementContext::transactionOption(size_t i) {
  return getRuleContext<MySQLParser::TransactionOptionContext>(i);
}

tree::TerminalNode* MySQLParser::SetTransactionStatementContext::GLOBAL() {
  return getToken(MySQLParser::GLOBAL, 0);
}

tree::TerminalNode* MySQLParser::SetTransactionStatementContext::SESSION() {
  return getToken(MySQLParser::SESSION, 0);
}


size_t MySQLParser::SetTransactionStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSetTransactionStatement;
}

void MySQLParser::SetTransactionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetTransactionStatement(this);
}

void MySQLParser::SetTransactionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetTransactionStatement(this);
}


antlrcpp::Any MySQLParser::SetTransactionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetTransactionStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SetTransactionStatementContext* MySQLParser::setTransactionStatement() {
  SetTransactionStatementContext *_localctx = _tracker.createInstance<SetTransactionStatementContext>(_ctx, getState());
  enterRule(_localctx, 286, MySQLParser::RuleSetTransactionStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3738);
    match(MySQLParser::SET);
    setState(3740);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::GLOBAL || _la == MySQLParser::SESSION) {
      setState(3739);
      dynamic_cast<SetTransactionStatementContext *>(_localctx)->transactionContext = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::GLOBAL || _la == MySQLParser::SESSION)) {
        dynamic_cast<SetTransactionStatementContext *>(_localctx)->transactionContext = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3742);
    match(MySQLParser::TRANSACTION);
    setState(3743);
    transactionOption();
    setState(3748);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3744);
      match(MySQLParser::COMMA);
      setState(3745);
      transactionOption();
      setState(3750);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionModeContext ------------------------------------------------------------------

MySQLParser::TransactionModeContext::TransactionModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TransactionModeContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::TransactionModeContext::CONSISTENT() {
  return getToken(MySQLParser::CONSISTENT, 0);
}

tree::TerminalNode* MySQLParser::TransactionModeContext::SNAPSHOT() {
  return getToken(MySQLParser::SNAPSHOT, 0);
}

tree::TerminalNode* MySQLParser::TransactionModeContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

tree::TerminalNode* MySQLParser::TransactionModeContext::WRITE() {
  return getToken(MySQLParser::WRITE, 0);
}

tree::TerminalNode* MySQLParser::TransactionModeContext::ONLY() {
  return getToken(MySQLParser::ONLY, 0);
}


size_t MySQLParser::TransactionModeContext::getRuleIndex() const {
  return MySQLParser::RuleTransactionMode;
}

void MySQLParser::TransactionModeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransactionMode(this);
}

void MySQLParser::TransactionModeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransactionMode(this);
}


antlrcpp::Any MySQLParser::TransactionModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionMode(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TransactionModeContext* MySQLParser::transactionMode() {
  TransactionModeContext *_localctx = _tracker.createInstance<TransactionModeContext>(_ctx, getState());
  enterRule(_localctx, 288, MySQLParser::RuleTransactionMode);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3758);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 549, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3751);
      match(MySQLParser::WITH);
      setState(3752);
      match(MySQLParser::CONSISTENT);
      setState(3753);
      match(MySQLParser::SNAPSHOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3754);
      match(MySQLParser::READ);
      setState(3755);
      match(MySQLParser::WRITE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3756);
      match(MySQLParser::READ);
      setState(3757);
      match(MySQLParser::ONLY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockTableElementContext ------------------------------------------------------------------

MySQLParser::LockTableElementContext::LockTableElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::TableNameContext* MySQLParser::LockTableElementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::LockActionContext* MySQLParser::LockTableElementContext::lockAction() {
  return getRuleContext<MySQLParser::LockActionContext>(0);
}

MySQLParser::UidContext* MySQLParser::LockTableElementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::LockTableElementContext::AS() {
  return getToken(MySQLParser::AS, 0);
}


size_t MySQLParser::LockTableElementContext::getRuleIndex() const {
  return MySQLParser::RuleLockTableElement;
}

void MySQLParser::LockTableElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLockTableElement(this);
}

void MySQLParser::LockTableElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLockTableElement(this);
}


antlrcpp::Any MySQLParser::LockTableElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLockTableElement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LockTableElementContext* MySQLParser::lockTableElement() {
  LockTableElementContext *_localctx = _tracker.createInstance<LockTableElementContext>(_ctx, getState());
  enterRule(_localctx, 290, MySQLParser::RuleLockTableElement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3760);
    tableName();
    setState(3765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::AS

    || _la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(3762);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(3761);
        match(MySQLParser::AS);
      }
      setState(3764);
      uid();
    }
    setState(3767);
    lockAction();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockActionContext ------------------------------------------------------------------

MySQLParser::LockActionContext::LockActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LockActionContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

tree::TerminalNode* MySQLParser::LockActionContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}

tree::TerminalNode* MySQLParser::LockActionContext::WRITE() {
  return getToken(MySQLParser::WRITE, 0);
}

tree::TerminalNode* MySQLParser::LockActionContext::LOW_PRIORITY() {
  return getToken(MySQLParser::LOW_PRIORITY, 0);
}


size_t MySQLParser::LockActionContext::getRuleIndex() const {
  return MySQLParser::RuleLockAction;
}

void MySQLParser::LockActionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLockAction(this);
}

void MySQLParser::LockActionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLockAction(this);
}


antlrcpp::Any MySQLParser::LockActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLockAction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LockActionContext* MySQLParser::lockAction() {
  LockActionContext *_localctx = _tracker.createInstance<LockActionContext>(_ctx, getState());
  enterRule(_localctx, 292, MySQLParser::RuleLockAction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3777);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::READ: {
        enterOuterAlt(_localctx, 1);
        setState(3769);
        match(MySQLParser::READ);
        setState(3771);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::LOCAL) {
          setState(3770);
          match(MySQLParser::LOCAL);
        }
        break;
      }

      case MySQLParser::LOW_PRIORITY:
      case MySQLParser::WRITE: {
        enterOuterAlt(_localctx, 2);
        setState(3774);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::LOW_PRIORITY) {
          setState(3773);
          match(MySQLParser::LOW_PRIORITY);
        }
        setState(3776);
        match(MySQLParser::WRITE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionOptionContext ------------------------------------------------------------------

MySQLParser::TransactionOptionContext::TransactionOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TransactionOptionContext::ISOLATION() {
  return getToken(MySQLParser::ISOLATION, 0);
}

tree::TerminalNode* MySQLParser::TransactionOptionContext::LEVEL() {
  return getToken(MySQLParser::LEVEL, 0);
}

MySQLParser::TransactionLevelContext* MySQLParser::TransactionOptionContext::transactionLevel() {
  return getRuleContext<MySQLParser::TransactionLevelContext>(0);
}

tree::TerminalNode* MySQLParser::TransactionOptionContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

tree::TerminalNode* MySQLParser::TransactionOptionContext::WRITE() {
  return getToken(MySQLParser::WRITE, 0);
}

tree::TerminalNode* MySQLParser::TransactionOptionContext::ONLY() {
  return getToken(MySQLParser::ONLY, 0);
}


size_t MySQLParser::TransactionOptionContext::getRuleIndex() const {
  return MySQLParser::RuleTransactionOption;
}

void MySQLParser::TransactionOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransactionOption(this);
}

void MySQLParser::TransactionOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransactionOption(this);
}


antlrcpp::Any MySQLParser::TransactionOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TransactionOptionContext* MySQLParser::transactionOption() {
  TransactionOptionContext *_localctx = _tracker.createInstance<TransactionOptionContext>(_ctx, getState());
  enterRule(_localctx, 294, MySQLParser::RuleTransactionOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3786);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 555, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3779);
      match(MySQLParser::ISOLATION);
      setState(3780);
      match(MySQLParser::LEVEL);
      setState(3781);
      transactionLevel();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3782);
      match(MySQLParser::READ);
      setState(3783);
      match(MySQLParser::WRITE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3784);
      match(MySQLParser::READ);
      setState(3785);
      match(MySQLParser::ONLY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionLevelContext ------------------------------------------------------------------

MySQLParser::TransactionLevelContext::TransactionLevelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TransactionLevelContext::REPEATABLE() {
  return getToken(MySQLParser::REPEATABLE, 0);
}

tree::TerminalNode* MySQLParser::TransactionLevelContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

tree::TerminalNode* MySQLParser::TransactionLevelContext::COMMITTED() {
  return getToken(MySQLParser::COMMITTED, 0);
}

tree::TerminalNode* MySQLParser::TransactionLevelContext::UNCOMMITTED() {
  return getToken(MySQLParser::UNCOMMITTED, 0);
}

tree::TerminalNode* MySQLParser::TransactionLevelContext::SERIALIZABLE() {
  return getToken(MySQLParser::SERIALIZABLE, 0);
}


size_t MySQLParser::TransactionLevelContext::getRuleIndex() const {
  return MySQLParser::RuleTransactionLevel;
}

void MySQLParser::TransactionLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransactionLevel(this);
}

void MySQLParser::TransactionLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransactionLevel(this);
}


antlrcpp::Any MySQLParser::TransactionLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionLevel(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TransactionLevelContext* MySQLParser::transactionLevel() {
  TransactionLevelContext *_localctx = _tracker.createInstance<TransactionLevelContext>(_ctx, getState());
  enterRule(_localctx, 296, MySQLParser::RuleTransactionLevel);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3795);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 556, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3788);
      match(MySQLParser::REPEATABLE);
      setState(3789);
      match(MySQLParser::READ);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3790);
      match(MySQLParser::READ);
      setState(3791);
      match(MySQLParser::COMMITTED);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3792);
      match(MySQLParser::READ);
      setState(3793);
      match(MySQLParser::UNCOMMITTED);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3794);
      match(MySQLParser::SERIALIZABLE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChangeMasterContext ------------------------------------------------------------------

MySQLParser::ChangeMasterContext::ChangeMasterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ChangeMasterContext::CHANGE() {
  return getToken(MySQLParser::CHANGE, 0);
}

tree::TerminalNode* MySQLParser::ChangeMasterContext::MASTER() {
  return getToken(MySQLParser::MASTER, 0);
}

tree::TerminalNode* MySQLParser::ChangeMasterContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

std::vector<MySQLParser::MasterOptionContext *> MySQLParser::ChangeMasterContext::masterOption() {
  return getRuleContexts<MySQLParser::MasterOptionContext>();
}

MySQLParser::MasterOptionContext* MySQLParser::ChangeMasterContext::masterOption(size_t i) {
  return getRuleContext<MySQLParser::MasterOptionContext>(i);
}

MySQLParser::ChannelOptionContext* MySQLParser::ChangeMasterContext::channelOption() {
  return getRuleContext<MySQLParser::ChannelOptionContext>(0);
}


size_t MySQLParser::ChangeMasterContext::getRuleIndex() const {
  return MySQLParser::RuleChangeMaster;
}

void MySQLParser::ChangeMasterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChangeMaster(this);
}

void MySQLParser::ChangeMasterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChangeMaster(this);
}


antlrcpp::Any MySQLParser::ChangeMasterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitChangeMaster(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ChangeMasterContext* MySQLParser::changeMaster() {
  ChangeMasterContext *_localctx = _tracker.createInstance<ChangeMasterContext>(_ctx, getState());
  enterRule(_localctx, 298, MySQLParser::RuleChangeMaster);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3797);
    match(MySQLParser::CHANGE);
    setState(3798);
    match(MySQLParser::MASTER);
    setState(3799);
    match(MySQLParser::TO);
    setState(3800);
    masterOption();
    setState(3805);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3801);
      match(MySQLParser::COMMA);
      setState(3802);
      masterOption();
      setState(3807);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3809);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FOR) {
      setState(3808);
      channelOption();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChangeReplicationFilterContext ------------------------------------------------------------------

MySQLParser::ChangeReplicationFilterContext::ChangeReplicationFilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ChangeReplicationFilterContext::CHANGE() {
  return getToken(MySQLParser::CHANGE, 0);
}

tree::TerminalNode* MySQLParser::ChangeReplicationFilterContext::REPLICATION() {
  return getToken(MySQLParser::REPLICATION, 0);
}

tree::TerminalNode* MySQLParser::ChangeReplicationFilterContext::FILTER() {
  return getToken(MySQLParser::FILTER, 0);
}

std::vector<MySQLParser::ReplicationFilterContext *> MySQLParser::ChangeReplicationFilterContext::replicationFilter() {
  return getRuleContexts<MySQLParser::ReplicationFilterContext>();
}

MySQLParser::ReplicationFilterContext* MySQLParser::ChangeReplicationFilterContext::replicationFilter(size_t i) {
  return getRuleContext<MySQLParser::ReplicationFilterContext>(i);
}


size_t MySQLParser::ChangeReplicationFilterContext::getRuleIndex() const {
  return MySQLParser::RuleChangeReplicationFilter;
}

void MySQLParser::ChangeReplicationFilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChangeReplicationFilter(this);
}

void MySQLParser::ChangeReplicationFilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChangeReplicationFilter(this);
}


antlrcpp::Any MySQLParser::ChangeReplicationFilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitChangeReplicationFilter(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ChangeReplicationFilterContext* MySQLParser::changeReplicationFilter() {
  ChangeReplicationFilterContext *_localctx = _tracker.createInstance<ChangeReplicationFilterContext>(_ctx, getState());
  enterRule(_localctx, 300, MySQLParser::RuleChangeReplicationFilter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3811);
    match(MySQLParser::CHANGE);
    setState(3812);
    match(MySQLParser::REPLICATION);
    setState(3813);
    match(MySQLParser::FILTER);
    setState(3814);
    replicationFilter();
    setState(3819);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(3815);
      match(MySQLParser::COMMA);
      setState(3816);
      replicationFilter();
      setState(3821);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PurgeBinaryLogsContext ------------------------------------------------------------------

MySQLParser::PurgeBinaryLogsContext::PurgeBinaryLogsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::PurgeBinaryLogsContext::PURGE() {
  return getToken(MySQLParser::PURGE, 0);
}

tree::TerminalNode* MySQLParser::PurgeBinaryLogsContext::LOGS() {
  return getToken(MySQLParser::LOGS, 0);
}

tree::TerminalNode* MySQLParser::PurgeBinaryLogsContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

tree::TerminalNode* MySQLParser::PurgeBinaryLogsContext::MASTER() {
  return getToken(MySQLParser::MASTER, 0);
}

tree::TerminalNode* MySQLParser::PurgeBinaryLogsContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

tree::TerminalNode* MySQLParser::PurgeBinaryLogsContext::BEFORE() {
  return getToken(MySQLParser::BEFORE, 0);
}

tree::TerminalNode* MySQLParser::PurgeBinaryLogsContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::PurgeBinaryLogsContext::getRuleIndex() const {
  return MySQLParser::RulePurgeBinaryLogs;
}

void MySQLParser::PurgeBinaryLogsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPurgeBinaryLogs(this);
}

void MySQLParser::PurgeBinaryLogsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPurgeBinaryLogs(this);
}


antlrcpp::Any MySQLParser::PurgeBinaryLogsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPurgeBinaryLogs(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PurgeBinaryLogsContext* MySQLParser::purgeBinaryLogs() {
  PurgeBinaryLogsContext *_localctx = _tracker.createInstance<PurgeBinaryLogsContext>(_ctx, getState());
  enterRule(_localctx, 302, MySQLParser::RulePurgeBinaryLogs);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3822);
    match(MySQLParser::PURGE);
    setState(3823);
    dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->purgeFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::BINARY || _la == MySQLParser::MASTER)) {
      dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->purgeFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3824);
    match(MySQLParser::LOGS);
    setState(3829);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::TO: {
        setState(3825);
        match(MySQLParser::TO);
        setState(3826);
        dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->fileName = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::BEFORE: {
        setState(3827);
        match(MySQLParser::BEFORE);
        setState(3828);
        dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->timeValue = match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResetMasterContext ------------------------------------------------------------------

MySQLParser::ResetMasterContext::ResetMasterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ResetMasterContext::RESET() {
  return getToken(MySQLParser::RESET, 0);
}

tree::TerminalNode* MySQLParser::ResetMasterContext::MASTER() {
  return getToken(MySQLParser::MASTER, 0);
}


size_t MySQLParser::ResetMasterContext::getRuleIndex() const {
  return MySQLParser::RuleResetMaster;
}

void MySQLParser::ResetMasterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResetMaster(this);
}

void MySQLParser::ResetMasterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResetMaster(this);
}


antlrcpp::Any MySQLParser::ResetMasterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitResetMaster(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ResetMasterContext* MySQLParser::resetMaster() {
  ResetMasterContext *_localctx = _tracker.createInstance<ResetMasterContext>(_ctx, getState());
  enterRule(_localctx, 304, MySQLParser::RuleResetMaster);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3831);
    match(MySQLParser::RESET);
    setState(3832);
    match(MySQLParser::MASTER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResetSlaveContext ------------------------------------------------------------------

MySQLParser::ResetSlaveContext::ResetSlaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ResetSlaveContext::RESET() {
  return getToken(MySQLParser::RESET, 0);
}

tree::TerminalNode* MySQLParser::ResetSlaveContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}

tree::TerminalNode* MySQLParser::ResetSlaveContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

MySQLParser::ChannelOptionContext* MySQLParser::ResetSlaveContext::channelOption() {
  return getRuleContext<MySQLParser::ChannelOptionContext>(0);
}


size_t MySQLParser::ResetSlaveContext::getRuleIndex() const {
  return MySQLParser::RuleResetSlave;
}

void MySQLParser::ResetSlaveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResetSlave(this);
}

void MySQLParser::ResetSlaveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResetSlave(this);
}


antlrcpp::Any MySQLParser::ResetSlaveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitResetSlave(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ResetSlaveContext* MySQLParser::resetSlave() {
  ResetSlaveContext *_localctx = _tracker.createInstance<ResetSlaveContext>(_ctx, getState());
  enterRule(_localctx, 306, MySQLParser::RuleResetSlave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3834);
    match(MySQLParser::RESET);
    setState(3835);
    match(MySQLParser::SLAVE);
    setState(3837);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ALL) {
      setState(3836);
      match(MySQLParser::ALL);
    }
    setState(3840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FOR) {
      setState(3839);
      channelOption();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartSlaveContext ------------------------------------------------------------------

MySQLParser::StartSlaveContext::StartSlaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::StartSlaveContext::START() {
  return getToken(MySQLParser::START, 0);
}

tree::TerminalNode* MySQLParser::StartSlaveContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}

std::vector<MySQLParser::ThreadTypeContext *> MySQLParser::StartSlaveContext::threadType() {
  return getRuleContexts<MySQLParser::ThreadTypeContext>();
}

MySQLParser::ThreadTypeContext* MySQLParser::StartSlaveContext::threadType(size_t i) {
  return getRuleContext<MySQLParser::ThreadTypeContext>(i);
}

tree::TerminalNode* MySQLParser::StartSlaveContext::UNTIL() {
  return getToken(MySQLParser::UNTIL, 0);
}

MySQLParser::UntilOptionContext* MySQLParser::StartSlaveContext::untilOption() {
  return getRuleContext<MySQLParser::UntilOptionContext>(0);
}

std::vector<MySQLParser::ConnectionOptionContext *> MySQLParser::StartSlaveContext::connectionOption() {
  return getRuleContexts<MySQLParser::ConnectionOptionContext>();
}

MySQLParser::ConnectionOptionContext* MySQLParser::StartSlaveContext::connectionOption(size_t i) {
  return getRuleContext<MySQLParser::ConnectionOptionContext>(i);
}

MySQLParser::ChannelOptionContext* MySQLParser::StartSlaveContext::channelOption() {
  return getRuleContext<MySQLParser::ChannelOptionContext>(0);
}


size_t MySQLParser::StartSlaveContext::getRuleIndex() const {
  return MySQLParser::RuleStartSlave;
}

void MySQLParser::StartSlaveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartSlave(this);
}

void MySQLParser::StartSlaveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartSlave(this);
}


antlrcpp::Any MySQLParser::StartSlaveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStartSlave(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::StartSlaveContext* MySQLParser::startSlave() {
  StartSlaveContext *_localctx = _tracker.createInstance<StartSlaveContext>(_ctx, getState());
  enterRule(_localctx, 308, MySQLParser::RuleStartSlave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3842);
    match(MySQLParser::START);
    setState(3843);
    match(MySQLParser::SLAVE);
    setState(3852);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IO_THREAD || _la == MySQLParser::SQL_THREAD) {
      setState(3844);
      threadType();
      setState(3849);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(3845);
        match(MySQLParser::COMMA);
        setState(3846);
        threadType();
        setState(3851);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3856);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::UNTIL) {
      setState(3854);
      match(MySQLParser::UNTIL);
      setState(3855);
      untilOption();
    }
    setState(3861);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::DEFAULT_AUTH || _la == MySQLParser::PASSWORD

    || _la == MySQLParser::PLUGIN_DIR || _la == MySQLParser::USER) {
      setState(3858);
      connectionOption();
      setState(3863);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3865);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FOR) {
      setState(3864);
      channelOption();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StopSlaveContext ------------------------------------------------------------------

MySQLParser::StopSlaveContext::StopSlaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::StopSlaveContext::STOP() {
  return getToken(MySQLParser::STOP, 0);
}

tree::TerminalNode* MySQLParser::StopSlaveContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}

std::vector<MySQLParser::ThreadTypeContext *> MySQLParser::StopSlaveContext::threadType() {
  return getRuleContexts<MySQLParser::ThreadTypeContext>();
}

MySQLParser::ThreadTypeContext* MySQLParser::StopSlaveContext::threadType(size_t i) {
  return getRuleContext<MySQLParser::ThreadTypeContext>(i);
}


size_t MySQLParser::StopSlaveContext::getRuleIndex() const {
  return MySQLParser::RuleStopSlave;
}

void MySQLParser::StopSlaveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStopSlave(this);
}

void MySQLParser::StopSlaveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStopSlave(this);
}


antlrcpp::Any MySQLParser::StopSlaveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStopSlave(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::StopSlaveContext* MySQLParser::stopSlave() {
  StopSlaveContext *_localctx = _tracker.createInstance<StopSlaveContext>(_ctx, getState());
  enterRule(_localctx, 310, MySQLParser::RuleStopSlave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3867);
    match(MySQLParser::STOP);
    setState(3868);
    match(MySQLParser::SLAVE);
    setState(3877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IO_THREAD || _la == MySQLParser::SQL_THREAD) {
      setState(3869);
      threadType();
      setState(3874);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(3870);
        match(MySQLParser::COMMA);
        setState(3871);
        threadType();
        setState(3876);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartGroupReplicationContext ------------------------------------------------------------------

MySQLParser::StartGroupReplicationContext::StartGroupReplicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::StartGroupReplicationContext::START() {
  return getToken(MySQLParser::START, 0);
}

tree::TerminalNode* MySQLParser::StartGroupReplicationContext::GROUP_REPLICATION() {
  return getToken(MySQLParser::GROUP_REPLICATION, 0);
}


size_t MySQLParser::StartGroupReplicationContext::getRuleIndex() const {
  return MySQLParser::RuleStartGroupReplication;
}

void MySQLParser::StartGroupReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartGroupReplication(this);
}

void MySQLParser::StartGroupReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartGroupReplication(this);
}


antlrcpp::Any MySQLParser::StartGroupReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStartGroupReplication(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::StartGroupReplicationContext* MySQLParser::startGroupReplication() {
  StartGroupReplicationContext *_localctx = _tracker.createInstance<StartGroupReplicationContext>(_ctx, getState());
  enterRule(_localctx, 312, MySQLParser::RuleStartGroupReplication);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3879);
    match(MySQLParser::START);
    setState(3880);
    match(MySQLParser::GROUP_REPLICATION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StopGroupReplicationContext ------------------------------------------------------------------

MySQLParser::StopGroupReplicationContext::StopGroupReplicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::StopGroupReplicationContext::STOP() {
  return getToken(MySQLParser::STOP, 0);
}

tree::TerminalNode* MySQLParser::StopGroupReplicationContext::GROUP_REPLICATION() {
  return getToken(MySQLParser::GROUP_REPLICATION, 0);
}


size_t MySQLParser::StopGroupReplicationContext::getRuleIndex() const {
  return MySQLParser::RuleStopGroupReplication;
}

void MySQLParser::StopGroupReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStopGroupReplication(this);
}

void MySQLParser::StopGroupReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStopGroupReplication(this);
}


antlrcpp::Any MySQLParser::StopGroupReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStopGroupReplication(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::StopGroupReplicationContext* MySQLParser::stopGroupReplication() {
  StopGroupReplicationContext *_localctx = _tracker.createInstance<StopGroupReplicationContext>(_ctx, getState());
  enterRule(_localctx, 314, MySQLParser::RuleStopGroupReplication);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3882);
    match(MySQLParser::STOP);
    setState(3883);
    match(MySQLParser::GROUP_REPLICATION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MasterOptionContext ------------------------------------------------------------------

MySQLParser::MasterOptionContext::MasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::MasterOptionContext::getRuleIndex() const {
  return MySQLParser::RuleMasterOption;
}

void MySQLParser::MasterOptionContext::copyFrom(MasterOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MasterStringOptionContext ------------------------------------------------------------------

MySQLParser::StringMasterOptionContext* MySQLParser::MasterStringOptionContext::stringMasterOption() {
  return getRuleContext<MySQLParser::StringMasterOptionContext>(0);
}

tree::TerminalNode* MySQLParser::MasterStringOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::MasterStringOptionContext::MasterStringOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::MasterStringOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterStringOption(this);
}
void MySQLParser::MasterStringOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterStringOption(this);
}

antlrcpp::Any MySQLParser::MasterStringOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMasterStringOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MasterRealOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::MasterRealOptionContext::MASTER_HEARTBEAT_PERIOD() {
  return getToken(MySQLParser::MASTER_HEARTBEAT_PERIOD, 0);
}

tree::TerminalNode* MySQLParser::MasterRealOptionContext::REAL_LITERAL() {
  return getToken(MySQLParser::REAL_LITERAL, 0);
}

MySQLParser::MasterRealOptionContext::MasterRealOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::MasterRealOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterRealOption(this);
}
void MySQLParser::MasterRealOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterRealOption(this);
}

antlrcpp::Any MySQLParser::MasterRealOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMasterRealOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MasterBoolOptionContext ------------------------------------------------------------------

MySQLParser::BoolMasterOptionContext* MySQLParser::MasterBoolOptionContext::boolMasterOption() {
  return getRuleContext<MySQLParser::BoolMasterOptionContext>(0);
}

MySQLParser::MasterBoolOptionContext::MasterBoolOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::MasterBoolOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterBoolOption(this);
}
void MySQLParser::MasterBoolOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterBoolOption(this);
}

antlrcpp::Any MySQLParser::MasterBoolOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMasterBoolOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MasterUidListOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::MasterUidListOptionContext::IGNORE_SERVER_IDS() {
  return getToken(MySQLParser::IGNORE_SERVER_IDS, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::MasterUidListOptionContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::MasterUidListOptionContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::MasterUidListOptionContext::MasterUidListOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::MasterUidListOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterUidListOption(this);
}
void MySQLParser::MasterUidListOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterUidListOption(this);
}

antlrcpp::Any MySQLParser::MasterUidListOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMasterUidListOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MasterDecimalOptionContext ------------------------------------------------------------------

MySQLParser::DecimalMasterOptionContext* MySQLParser::MasterDecimalOptionContext::decimalMasterOption() {
  return getRuleContext<MySQLParser::DecimalMasterOptionContext>(0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::MasterDecimalOptionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::MasterDecimalOptionContext::MasterDecimalOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::MasterDecimalOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterDecimalOption(this);
}
void MySQLParser::MasterDecimalOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterDecimalOption(this);
}

antlrcpp::Any MySQLParser::MasterDecimalOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMasterDecimalOption(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::MasterOptionContext* MySQLParser::masterOption() {
  MasterOptionContext *_localctx = _tracker.createInstance<MasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 316, MySQLParser::RuleMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3914);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::MASTER_BIND:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::RELAY_LOG_FILE: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySQLParser::MasterStringOptionContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3885);
        stringMasterOption();
        setState(3886);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3887);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::RELAY_LOG_POS: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySQLParser::MasterDecimalOptionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3889);
        decimalMasterOption();
        setState(3890);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3891);
        decimalLiteral();
        break;
      }

      case MySQLParser::MASTER_SSL_VERIFY_SERVER_CERT:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_SSL: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySQLParser::MasterBoolOptionContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3893);
        boolMasterOption();
        setState(3894);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3895);
        dynamic_cast<MasterBoolOptionContext *>(_localctx)->boolVal = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::ZERO_DECIMAL

        || _la == MySQLParser::ONE_DECIMAL)) {
          dynamic_cast<MasterBoolOptionContext *>(_localctx)->boolVal = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::MASTER_HEARTBEAT_PERIOD: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySQLParser::MasterRealOptionContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3897);
        match(MySQLParser::MASTER_HEARTBEAT_PERIOD);
        setState(3898);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3899);
        match(MySQLParser::REAL_LITERAL);
        break;
      }

      case MySQLParser::IGNORE_SERVER_IDS: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySQLParser::MasterUidListOptionContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(3900);
        match(MySQLParser::IGNORE_SERVER_IDS);
        setState(3901);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3902);
        match(MySQLParser::LR_BRACKET);
        setState(3911);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::TIMESTAMP - 184))
          | (1ULL << (MySQLParser::DATETIME - 184))
          | (1ULL << (MySQLParser::YEAR - 184))
          | (1ULL << (MySQLParser::TEXT - 184))
          | (1ULL << (MySQLParser::ENUM - 184))
          | (1ULL << (MySQLParser::SERIAL - 184))
          | (1ULL << (MySQLParser::COUNT - 184))
          | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
          | (1ULL << (MySQLParser::ACTION - 252))
          | (1ULL << (MySQLParser::AFTER - 252))
          | (1ULL << (MySQLParser::AGGREGATE - 252))
          | (1ULL << (MySQLParser::ALGORITHM - 252))
          | (1ULL << (MySQLParser::ANY - 252))
          | (1ULL << (MySQLParser::AT - 252))
          | (1ULL << (MySQLParser::AUTHORS - 252))
          | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
          | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
          | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
          | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
          | (1ULL << (MySQLParser::BEGIN - 252))
          | (1ULL << (MySQLParser::BINLOG - 252))
          | (1ULL << (MySQLParser::BIT - 252))
          | (1ULL << (MySQLParser::BLOCK - 252))
          | (1ULL << (MySQLParser::BOOL - 252))
          | (1ULL << (MySQLParser::BOOLEAN - 252))
          | (1ULL << (MySQLParser::BTREE - 252))
          | (1ULL << (MySQLParser::CACHE - 252))
          | (1ULL << (MySQLParser::CASCADED - 252))
          | (1ULL << (MySQLParser::CHAIN - 252))
          | (1ULL << (MySQLParser::CHANGED - 252))
          | (1ULL << (MySQLParser::CHANNEL - 252))
          | (1ULL << (MySQLParser::CHECKSUM - 252))
          | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
          | (1ULL << (MySQLParser::CIPHER - 252))
          | (1ULL << (MySQLParser::CLIENT - 252))
          | (1ULL << (MySQLParser::CLOSE - 252))
          | (1ULL << (MySQLParser::COALESCE - 252))
          | (1ULL << (MySQLParser::CODE - 252))
          | (1ULL << (MySQLParser::COLUMNS - 252))
          | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
          | (1ULL << (MySQLParser::COMMENT - 252))
          | (1ULL << (MySQLParser::COMMIT - 252))
          | (1ULL << (MySQLParser::COMPACT - 252))
          | (1ULL << (MySQLParser::COMPLETION - 252))
          | (1ULL << (MySQLParser::COMPRESSED - 252))
          | (1ULL << (MySQLParser::COMPRESSION - 252))
          | (1ULL << (MySQLParser::CONCURRENT - 252))
          | (1ULL << (MySQLParser::CONNECTION - 252))
          | (1ULL << (MySQLParser::CONSISTENT - 252))
          | (1ULL << (MySQLParser::CONTAINS - 252))
          | (1ULL << (MySQLParser::CONTEXT - 252))
          | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
          | (1ULL << (MySQLParser::COPY - 252))
          | (1ULL << (MySQLParser::CPU - 252))
          | (1ULL << (MySQLParser::DATA - 252))
          | (1ULL << (MySQLParser::DATAFILE - 252))
          | (1ULL << (MySQLParser::DEALLOCATE - 252))
          | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
          | (1ULL << (MySQLParser::DEFINER - 252))
          | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
          | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
          | (1ULL << (MySQLParser::DIRECTORY - 252))
          | (1ULL << (MySQLParser::DISABLE - 252))
          | (1ULL << (MySQLParser::DISCARD - 252))
          | (1ULL << (MySQLParser::DISK - 252))
          | (1ULL << (MySQLParser::DO - 252))
          | (1ULL << (MySQLParser::DUMPFILE - 252))
          | (1ULL << (MySQLParser::DUPLICATE - 252))
          | (1ULL << (MySQLParser::DYNAMIC - 252))
          | (1ULL << (MySQLParser::ENABLE - 252))
          | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
          | (1ULL << (MySQLParser::ENDS - 316))
          | (1ULL << (MySQLParser::ENGINE - 316))
          | (1ULL << (MySQLParser::ENGINES - 316))
          | (1ULL << (MySQLParser::ERROR - 316))
          | (1ULL << (MySQLParser::ERRORS - 316))
          | (1ULL << (MySQLParser::ESCAPE - 316))
          | (1ULL << (MySQLParser::EVEN - 316))
          | (1ULL << (MySQLParser::EVENT - 316))
          | (1ULL << (MySQLParser::EVENTS - 316))
          | (1ULL << (MySQLParser::EVERY - 316))
          | (1ULL << (MySQLParser::EXCHANGE - 316))
          | (1ULL << (MySQLParser::EXCLUSIVE - 316))
          | (1ULL << (MySQLParser::EXPIRE - 316))
          | (1ULL << (MySQLParser::EXPORT - 316))
          | (1ULL << (MySQLParser::EXTENDED - 316))
          | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
          | (1ULL << (MySQLParser::FAST - 316))
          | (1ULL << (MySQLParser::FAULTS - 316))
          | (1ULL << (MySQLParser::FIELDS - 316))
          | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::FILTER - 316))
          | (1ULL << (MySQLParser::FIRST - 316))
          | (1ULL << (MySQLParser::FIXED - 316))
          | (1ULL << (MySQLParser::FLUSH - 316))
          | (1ULL << (MySQLParser::FOLLOWS - 316))
          | (1ULL << (MySQLParser::FOUND - 316))
          | (1ULL << (MySQLParser::FULL - 316))
          | (1ULL << (MySQLParser::FUNCTION - 316))
          | (1ULL << (MySQLParser::GENERAL - 316))
          | (1ULL << (MySQLParser::GLOBAL - 316))
          | (1ULL << (MySQLParser::GRANTS - 316))
          | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
          | (1ULL << (MySQLParser::HANDLER - 316))
          | (1ULL << (MySQLParser::HASH - 316))
          | (1ULL << (MySQLParser::HELP - 316))
          | (1ULL << (MySQLParser::HOST - 316))
          | (1ULL << (MySQLParser::HOSTS - 316))
          | (1ULL << (MySQLParser::IDENTIFIED - 316))
          | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
          | (1ULL << (MySQLParser::IMPORT - 316))
          | (1ULL << (MySQLParser::INDEXES - 316))
          | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
          | (1ULL << (MySQLParser::INPLACE - 316))
          | (1ULL << (MySQLParser::INSERT_METHOD - 316))
          | (1ULL << (MySQLParser::INSTALL - 316))
          | (1ULL << (MySQLParser::INSTANCE - 316))
          | (1ULL << (MySQLParser::INVISIBLE - 316))
          | (1ULL << (MySQLParser::INVOKER - 316))
          | (1ULL << (MySQLParser::IO - 316))
          | (1ULL << (MySQLParser::IO_THREAD - 316))
          | (1ULL << (MySQLParser::IPC - 316))
          | (1ULL << (MySQLParser::ISOLATION - 316))
          | (1ULL << (MySQLParser::ISSUER - 316))
          | (1ULL << (MySQLParser::JSON - 316))
          | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
          | (1ULL << (MySQLParser::LANGUAGE - 316))
          | (1ULL << (MySQLParser::LAST - 316))
          | (1ULL << (MySQLParser::LEAVES - 316))
          | (1ULL << (MySQLParser::LESS - 316))
          | (1ULL << (MySQLParser::LEVEL - 316))
          | (1ULL << (MySQLParser::LIST - 316))
          | (1ULL << (MySQLParser::LOCAL - 316))
          | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
          | (1ULL << (MySQLParser::MASTER - 380))
          | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
          | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
          | (1ULL << (MySQLParser::MASTER_DELAY - 380))
          | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
          | (1ULL << (MySQLParser::MASTER_HOST - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
          | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
          | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
          | (1ULL << (MySQLParser::MASTER_PORT - 380))
          | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
          | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
          | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
          | (1ULL << (MySQLParser::MASTER_USER - 380))
          | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_ROWS - 380))
          | (1ULL << (MySQLParser::MAX_SIZE - 380))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
          | (1ULL << (MySQLParser::MEDIUM - 380))
          | (1ULL << (MySQLParser::MERGE - 380))
          | (1ULL << (MySQLParser::MID - 380))
          | (1ULL << (MySQLParser::MIGRATE - 380))
          | (1ULL << (MySQLParser::MIN_ROWS - 380))
          | (1ULL << (MySQLParser::MODE - 380))
          | (1ULL << (MySQLParser::MODIFY - 380))
          | (1ULL << (MySQLParser::MUTEX - 380))
          | (1ULL << (MySQLParser::MYSQL - 380))
          | (1ULL << (MySQLParser::NAME - 380))
          | (1ULL << (MySQLParser::NAMES - 380))
          | (1ULL << (MySQLParser::NCHAR - 380))
          | (1ULL << (MySQLParser::NEVER - 380))
          | (1ULL << (MySQLParser::NEXT - 380))
          | (1ULL << (MySQLParser::NO - 380))
          | (1ULL << (MySQLParser::NODEGROUP - 380))
          | (1ULL << (MySQLParser::NONE - 380))
          | (1ULL << (MySQLParser::OFFLINE - 380))
          | (1ULL << (MySQLParser::OFFSET - 380))
          | (1ULL << (MySQLParser::OJ - 380))
          | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
          | (1ULL << (MySQLParser::ONE - 380))
          | (1ULL << (MySQLParser::ONLINE - 380))
          | (1ULL << (MySQLParser::ONLY - 380))
          | (1ULL << (MySQLParser::OPEN - 380))
          | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
          | (1ULL << (MySQLParser::OPTIONS - 380))
          | (1ULL << (MySQLParser::OWNER - 380))
          | (1ULL << (MySQLParser::PACK_KEYS - 380))
          | (1ULL << (MySQLParser::PAGE - 380))
          | (1ULL << (MySQLParser::PARSER - 380))
          | (1ULL << (MySQLParser::PARTIAL - 380))
          | (1ULL << (MySQLParser::PARTITIONING - 380))
          | (1ULL << (MySQLParser::PARTITIONS - 380))
          | (1ULL << (MySQLParser::PASSWORD - 380))
          | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
          | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
          | (1ULL << (MySQLParser::PLUGINS - 444))
          | (1ULL << (MySQLParser::PORT - 444))
          | (1ULL << (MySQLParser::PRECEDES - 444))
          | (1ULL << (MySQLParser::PREPARE - 444))
          | (1ULL << (MySQLParser::PRESERVE - 444))
          | (1ULL << (MySQLParser::PREV - 444))
          | (1ULL << (MySQLParser::PROCESSLIST - 444))
          | (1ULL << (MySQLParser::PROFILE - 444))
          | (1ULL << (MySQLParser::PROFILES - 444))
          | (1ULL << (MySQLParser::PROXY - 444))
          | (1ULL << (MySQLParser::QUERY - 444))
          | (1ULL << (MySQLParser::QUICK - 444))
          | (1ULL << (MySQLParser::REBUILD - 444))
          | (1ULL << (MySQLParser::RECOVER - 444))
          | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
          | (1ULL << (MySQLParser::REDUNDANT - 444))
          | (1ULL << (MySQLParser::RELAY - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
          | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
          | (1ULL << (MySQLParser::RELAYLOG - 444))
          | (1ULL << (MySQLParser::REMOVE - 444))
          | (1ULL << (MySQLParser::REORGANIZE - 444))
          | (1ULL << (MySQLParser::REPAIR - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
          | (1ULL << (MySQLParser::REPLICATION - 444))
          | (1ULL << (MySQLParser::RESET - 444))
          | (1ULL << (MySQLParser::RESUME - 444))
          | (1ULL << (MySQLParser::RETURNS - 444))
          | (1ULL << (MySQLParser::ROLLBACK - 444))
          | (1ULL << (MySQLParser::ROLLUP - 444))
          | (1ULL << (MySQLParser::ROTATE - 444))
          | (1ULL << (MySQLParser::ROW - 444))
          | (1ULL << (MySQLParser::ROWS - 444))
          | (1ULL << (MySQLParser::ROW_FORMAT - 444))
          | (1ULL << (MySQLParser::SAVEPOINT - 444))
          | (1ULL << (MySQLParser::SCHEDULE - 444))
          | (1ULL << (MySQLParser::SECURITY - 444))
          | (1ULL << (MySQLParser::SERVER - 444))
          | (1ULL << (MySQLParser::SESSION - 444))
          | (1ULL << (MySQLParser::SHARE - 444))
          | (1ULL << (MySQLParser::SHARED - 444))
          | (1ULL << (MySQLParser::SIGNED - 444))
          | (1ULL << (MySQLParser::SIMPLE - 444))
          | (1ULL << (MySQLParser::SLAVE - 444))
          | (1ULL << (MySQLParser::SLOW - 444))
          | (1ULL << (MySQLParser::SNAPSHOT - 444))
          | (1ULL << (MySQLParser::SOCKET - 444))
          | (1ULL << (MySQLParser::SOME - 444))
          | (1ULL << (MySQLParser::SONAME - 444))
          | (1ULL << (MySQLParser::SOUNDS - 444))
          | (1ULL << (MySQLParser::SOURCE - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
          | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
          | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
          | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
          | (1ULL << (MySQLParser::SQL_THREAD - 508))
          | (1ULL << (MySQLParser::START - 508))
          | (1ULL << (MySQLParser::STARTS - 508))
          | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
          | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
          | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
          | (1ULL << (MySQLParser::STATUS - 508))
          | (1ULL << (MySQLParser::STOP - 508))
          | (1ULL << (MySQLParser::STORAGE - 508))
          | (1ULL << (MySQLParser::STRING - 508))
          | (1ULL << (MySQLParser::SUBJECT - 508))
          | (1ULL << (MySQLParser::SUBPARTITION - 508))
          | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
          | (1ULL << (MySQLParser::SUSPEND - 508))
          | (1ULL << (MySQLParser::SWAPS - 508))
          | (1ULL << (MySQLParser::SWITCHES - 508))
          | (1ULL << (MySQLParser::TABLESPACE - 508))
          | (1ULL << (MySQLParser::TEMPORARY - 508))
          | (1ULL << (MySQLParser::TEMPTABLE - 508))
          | (1ULL << (MySQLParser::THAN - 508))
          | (1ULL << (MySQLParser::TRADITIONAL - 508))
          | (1ULL << (MySQLParser::TRANSACTION - 508))
          | (1ULL << (MySQLParser::TRIGGERS - 508))
          | (1ULL << (MySQLParser::TRUNCATE - 508))
          | (1ULL << (MySQLParser::UNDEFINED - 508))
          | (1ULL << (MySQLParser::UNDOFILE - 508))
          | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
          | (1ULL << (MySQLParser::UNINSTALL - 508))
          | (1ULL << (MySQLParser::UNKNOWN - 508))
          | (1ULL << (MySQLParser::UNTIL - 508))
          | (1ULL << (MySQLParser::UPGRADE - 508))
          | (1ULL << (MySQLParser::USER - 508))
          | (1ULL << (MySQLParser::USE_FRM - 508))
          | (1ULL << (MySQLParser::USER_RESOURCES - 508))
          | (1ULL << (MySQLParser::VALIDATION - 508))
          | (1ULL << (MySQLParser::VALUE - 508))
          | (1ULL << (MySQLParser::VARIABLES - 508))
          | (1ULL << (MySQLParser::VIEW - 508))
          | (1ULL << (MySQLParser::VISIBLE - 508))
          | (1ULL << (MySQLParser::WAIT - 508))
          | (1ULL << (MySQLParser::WARNINGS - 508))
          | (1ULL << (MySQLParser::WITHOUT - 508))
          | (1ULL << (MySQLParser::WORK - 508))
          | (1ULL << (MySQLParser::WRAPPER - 508))
          | (1ULL << (MySQLParser::X509 - 508))
          | (1ULL << (MySQLParser::XA - 508))
          | (1ULL << (MySQLParser::XML - 508))
          | (1ULL << (MySQLParser::INTERNAL - 508))
          | (1ULL << (MySQLParser::QUARTER - 508))
          | (1ULL << (MySQLParser::MONTH - 508))
          | (1ULL << (MySQLParser::DAY - 508))
          | (1ULL << (MySQLParser::HOUR - 508))
          | (1ULL << (MySQLParser::MINUTE - 508))
          | (1ULL << (MySQLParser::WEEK - 508))
          | (1ULL << (MySQLParser::SECOND - 508))
          | (1ULL << (MySQLParser::MICROSECOND - 508))
          | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
          | (1ULL << (MySQLParser::EXECUTE - 572))
          | (1ULL << (MySQLParser::FILE - 572))
          | (1ULL << (MySQLParser::PROCESS - 572))
          | (1ULL << (MySQLParser::RELOAD - 572))
          | (1ULL << (MySQLParser::SHUTDOWN - 572))
          | (1ULL << (MySQLParser::SUPER - 572))
          | (1ULL << (MySQLParser::PRIVILEGES - 572))
          | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
          | (1ULL << (MySQLParser::ARMSCII8 - 572))
          | (1ULL << (MySQLParser::ASCII - 572))
          | (1ULL << (MySQLParser::BIG5 - 572))
          | (1ULL << (MySQLParser::CP1250 - 572))
          | (1ULL << (MySQLParser::CP1251 - 572))
          | (1ULL << (MySQLParser::CP1256 - 572))
          | (1ULL << (MySQLParser::CP1257 - 572))
          | (1ULL << (MySQLParser::CP850 - 572))
          | (1ULL << (MySQLParser::CP852 - 572))
          | (1ULL << (MySQLParser::CP866 - 572))
          | (1ULL << (MySQLParser::CP932 - 572))
          | (1ULL << (MySQLParser::DEC8 - 572))
          | (1ULL << (MySQLParser::EUCJPMS - 572))
          | (1ULL << (MySQLParser::EUCKR - 572))
          | (1ULL << (MySQLParser::GB2312 - 572))
          | (1ULL << (MySQLParser::GBK - 572))
          | (1ULL << (MySQLParser::GEOSTD8 - 572))
          | (1ULL << (MySQLParser::GREEK - 572))
          | (1ULL << (MySQLParser::HEBREW - 572))
          | (1ULL << (MySQLParser::HP8 - 572))
          | (1ULL << (MySQLParser::KEYBCS2 - 572))
          | (1ULL << (MySQLParser::KOI8R - 572))
          | (1ULL << (MySQLParser::KOI8U - 572))
          | (1ULL << (MySQLParser::LATIN1 - 572))
          | (1ULL << (MySQLParser::LATIN2 - 572))
          | (1ULL << (MySQLParser::LATIN5 - 572))
          | (1ULL << (MySQLParser::LATIN7 - 572))
          | (1ULL << (MySQLParser::MACCE - 572))
          | (1ULL << (MySQLParser::MACROMAN - 572))
          | (1ULL << (MySQLParser::SJIS - 572))
          | (1ULL << (MySQLParser::SWE7 - 572))
          | (1ULL << (MySQLParser::TIS620 - 572))
          | (1ULL << (MySQLParser::UCS2 - 572))
          | (1ULL << (MySQLParser::UJIS - 572))
          | (1ULL << (MySQLParser::UTF16 - 572))
          | (1ULL << (MySQLParser::UTF16LE - 572))
          | (1ULL << (MySQLParser::UTF32 - 572))
          | (1ULL << (MySQLParser::UTF8 - 572))
          | (1ULL << (MySQLParser::UTF8MB3 - 572))
          | (1ULL << (MySQLParser::UTF8MB4 - 572))
          | (1ULL << (MySQLParser::ARCHIVE - 572))
          | (1ULL << (MySQLParser::BLACKHOLE - 572))
          | (1ULL << (MySQLParser::CSV - 572))
          | (1ULL << (MySQLParser::FEDERATED - 572))
          | (1ULL << (MySQLParser::INNODB - 572))
          | (1ULL << (MySQLParser::MEMORY - 572))
          | (1ULL << (MySQLParser::MRG_MYISAM - 572))
          | (1ULL << (MySQLParser::MYISAM - 572))
          | (1ULL << (MySQLParser::NDB - 572))
          | (1ULL << (MySQLParser::NDBCLUSTER - 572))
          | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
          | (1ULL << (MySQLParser::TOKUDB - 572))
          | (1ULL << (MySQLParser::REPEATABLE - 572))
          | (1ULL << (MySQLParser::COMMITTED - 572))
          | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
          | (1ULL << (MySQLParser::LINESTRING - 636))
          | (1ULL << (MySQLParser::MULTILINESTRING - 636))
          | (1ULL << (MySQLParser::MULTIPOINT - 636))
          | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
          | (1ULL << (MySQLParser::POINT - 636))
          | (1ULL << (MySQLParser::POLYGON - 636))
          | (1ULL << (MySQLParser::ABS - 636))
          | (1ULL << (MySQLParser::ACOS - 636))
          | (1ULL << (MySQLParser::ADDDATE - 636))
          | (1ULL << (MySQLParser::ADDTIME - 636))
          | (1ULL << (MySQLParser::AES_DECRYPT - 636))
          | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
          | (1ULL << (MySQLParser::AREA - 636))
          | (1ULL << (MySQLParser::ASBINARY - 636))
          | (1ULL << (MySQLParser::ASIN - 636))
          | (1ULL << (MySQLParser::ASTEXT - 636))
          | (1ULL << (MySQLParser::ASWKB - 636))
          | (1ULL << (MySQLParser::ASWKT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
          | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
          | (1ULL << (MySQLParser::ATAN - 636))
          | (1ULL << (MySQLParser::ATAN2 - 636))
          | (1ULL << (MySQLParser::BENCHMARK - 636))
          | (1ULL << (MySQLParser::BIN - 636))
          | (1ULL << (MySQLParser::BIT_COUNT - 636))
          | (1ULL << (MySQLParser::BIT_LENGTH - 636))
          | (1ULL << (MySQLParser::BUFFER - 636))
          | (1ULL << (MySQLParser::CEIL - 636))
          | (1ULL << (MySQLParser::CEILING - 636))
          | (1ULL << (MySQLParser::CENTROID - 636))
          | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
          | (1ULL << (MySQLParser::CHARSET - 636))
          | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
          | (1ULL << (MySQLParser::COERCIBILITY - 636))
          | (1ULL << (MySQLParser::COLLATION - 636))
          | (1ULL << (MySQLParser::COMPRESS - 636))
          | (1ULL << (MySQLParser::CONCAT - 636))
          | (1ULL << (MySQLParser::CONCAT_WS - 636))
          | (1ULL << (MySQLParser::CONNECTION_ID - 636))
          | (1ULL << (MySQLParser::CONV - 636))
          | (1ULL << (MySQLParser::CONVERT_TZ - 636))
          | (1ULL << (MySQLParser::COS - 636))
          | (1ULL << (MySQLParser::COT - 636))
          | (1ULL << (MySQLParser::CRC32 - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
          | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
          | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
          | (1ULL << (MySQLParser::CROSSES - 636))
          | (1ULL << (MySQLParser::DATEDIFF - 636))
          | (1ULL << (MySQLParser::DATE_FORMAT - 636))
          | (1ULL << (MySQLParser::DAYNAME - 636))
          | (1ULL << (MySQLParser::DAYOFMONTH - 636))
          | (1ULL << (MySQLParser::DAYOFWEEK - 636))
          | (1ULL << (MySQLParser::DAYOFYEAR - 636))
          | (1ULL << (MySQLParser::DECODE - 636))
          | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
          | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
          | (1ULL << (MySQLParser::DIMENSION - 700))
          | (1ULL << (MySQLParser::DISJOINT - 700))
          | (1ULL << (MySQLParser::ELT - 700))
          | (1ULL << (MySQLParser::ENCODE - 700))
          | (1ULL << (MySQLParser::ENCRYPT - 700))
          | (1ULL << (MySQLParser::ENDPOINT - 700))
          | (1ULL << (MySQLParser::ENVELOPE - 700))
          | (1ULL << (MySQLParser::EQUALS - 700))
          | (1ULL << (MySQLParser::EXP - 700))
          | (1ULL << (MySQLParser::EXPORT_SET - 700))
          | (1ULL << (MySQLParser::EXTERIORRING - 700))
          | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
          | (1ULL << (MySQLParser::FIELD - 700))
          | (1ULL << (MySQLParser::FIND_IN_SET - 700))
          | (1ULL << (MySQLParser::FLOOR - 700))
          | (1ULL << (MySQLParser::FORMAT - 700))
          | (1ULL << (MySQLParser::FOUND_ROWS - 700))
          | (1ULL << (MySQLParser::FROM_BASE64 - 700))
          | (1ULL << (MySQLParser::FROM_DAYS - 700))
          | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
          | (1ULL << (MySQLParser::GEOMETRYN - 700))
          | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
          | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
          | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
          | (1ULL << (MySQLParser::GET_FORMAT - 700))
          | (1ULL << (MySQLParser::GET_LOCK - 700))
          | (1ULL << (MySQLParser::GLENGTH - 700))
          | (1ULL << (MySQLParser::GREATEST - 700))
          | (1ULL << (MySQLParser::GTID_SUBSET - 700))
          | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
          | (1ULL << (MySQLParser::HEX - 700))
          | (1ULL << (MySQLParser::IFNULL - 700))
          | (1ULL << (MySQLParser::INET6_ATON - 700))
          | (1ULL << (MySQLParser::INET6_NTOA - 700))
          | (1ULL << (MySQLParser::INET_ATON - 700))
          | (1ULL << (MySQLParser::INET_NTOA - 700))
          | (1ULL << (MySQLParser::INSTR - 700))
          | (1ULL << (MySQLParser::INTERIORRINGN - 700))
          | (1ULL << (MySQLParser::INTERSECTS - 700))
          | (1ULL << (MySQLParser::ISCLOSED - 700))
          | (1ULL << (MySQLParser::ISEMPTY - 700))
          | (1ULL << (MySQLParser::ISNULL - 700))
          | (1ULL << (MySQLParser::ISSIMPLE - 700))
          | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
          | (1ULL << (MySQLParser::IS_IPV4 - 700))
          | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
          | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
          | (1ULL << (MySQLParser::IS_IPV6 - 700))
          | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
          | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
          | (1ULL << (MySQLParser::LCASE - 700))
          | (1ULL << (MySQLParser::LEAST - 700))
          | (1ULL << (MySQLParser::LENGTH - 700))
          | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
          | (1ULL << (MySQLParser::LINEFROMWKB - 700))
          | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::LN - 764))
          | (1ULL << (MySQLParser::LOAD_FILE - 764))
          | (1ULL << (MySQLParser::LOCATE - 764))
          | (1ULL << (MySQLParser::LOG - 764))
          | (1ULL << (MySQLParser::LOG10 - 764))
          | (1ULL << (MySQLParser::LOG2 - 764))
          | (1ULL << (MySQLParser::LOWER - 764))
          | (1ULL << (MySQLParser::LPAD - 764))
          | (1ULL << (MySQLParser::LTRIM - 764))
          | (1ULL << (MySQLParser::MAKEDATE - 764))
          | (1ULL << (MySQLParser::MAKETIME - 764))
          | (1ULL << (MySQLParser::MAKE_SET - 764))
          | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
          | (1ULL << (MySQLParser::MBRCONTAINS - 764))
          | (1ULL << (MySQLParser::MBRDISJOINT - 764))
          | (1ULL << (MySQLParser::MBREQUAL - 764))
          | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
          | (1ULL << (MySQLParser::MBROVERLAPS - 764))
          | (1ULL << (MySQLParser::MBRTOUCHES - 764))
          | (1ULL << (MySQLParser::MBRWITHIN - 764))
          | (1ULL << (MySQLParser::MD5 - 764))
          | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
          | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
          | (1ULL << (MySQLParser::MONTHNAME - 764))
          | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::NAME_CONST - 764))
          | (1ULL << (MySQLParser::NULLIF - 764))
          | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
          | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
          | (1ULL << (MySQLParser::NUMPOINTS - 764))
          | (1ULL << (MySQLParser::OCT - 764))
          | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
          | (1ULL << (MySQLParser::ORD - 764))
          | (1ULL << (MySQLParser::OVERLAPS - 764))
          | (1ULL << (MySQLParser::PERIOD_ADD - 764))
          | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
          | (1ULL << (MySQLParser::PI - 764))
          | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
          | (1ULL << (MySQLParser::POINTFROMWKB - 764))
          | (1ULL << (MySQLParser::POINTN - 764))
          | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYFROMWKB - 764))
          | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
          | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
          | (1ULL << (MySQLParser::POW - 764))
          | (1ULL << (MySQLParser::POWER - 764))
          | (1ULL << (MySQLParser::QUOTE - 764))
          | (1ULL << (MySQLParser::RADIANS - 764))
          | (1ULL << (MySQLParser::RAND - 764))
          | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
          | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
          | (1ULL << (MySQLParser::REVERSE - 764))
          | (1ULL << (MySQLParser::ROUND - 764))
          | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
          | (1ULL << (MySQLParser::RTRIM - 828))
          | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
          | (1ULL << (MySQLParser::SESSION_USER - 828))
          | (1ULL << (MySQLParser::SHA - 828))
          | (1ULL << (MySQLParser::SHA1 - 828))
          | (1ULL << (MySQLParser::SHA2 - 828))
          | (1ULL << (MySQLParser::SIGN - 828))
          | (1ULL << (MySQLParser::SIN - 828))
          | (1ULL << (MySQLParser::SLEEP - 828))
          | (1ULL << (MySQLParser::SOUNDEX - 828))
          | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
          | (1ULL << (MySQLParser::SQRT - 828))
          | (1ULL << (MySQLParser::SRID - 828))
          | (1ULL << (MySQLParser::STARTPOINT - 828))
          | (1ULL << (MySQLParser::STRCMP - 828))
          | (1ULL << (MySQLParser::STR_TO_DATE - 828))
          | (1ULL << (MySQLParser::ST_AREA - 828))
          | (1ULL << (MySQLParser::ST_ASBINARY - 828))
          | (1ULL << (MySQLParser::ST_ASTEXT - 828))
          | (1ULL << (MySQLParser::ST_ASWKB - 828))
          | (1ULL << (MySQLParser::ST_ASWKT - 828))
          | (1ULL << (MySQLParser::ST_BUFFER - 828))
          | (1ULL << (MySQLParser::ST_CENTROID - 828))
          | (1ULL << (MySQLParser::ST_CONTAINS - 828))
          | (1ULL << (MySQLParser::ST_CROSSES - 828))
          | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
          | (1ULL << (MySQLParser::ST_DIMENSION - 828))
          | (1ULL << (MySQLParser::ST_DISJOINT - 828))
          | (1ULL << (MySQLParser::ST_DISTANCE - 828))
          | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
          | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
          | (1ULL << (MySQLParser::ST_EQUALS - 828))
          | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
          | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
          | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
          | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
          | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
          | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
          | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
          | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
          | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
          | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
          | (1ULL << (MySQLParser::ST_POINTN - 828))
          | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
          | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
          | (1ULL << (MySQLParser::ST_SRID - 892))
          | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
          | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
          | (1ULL << (MySQLParser::ST_TOUCHES - 892))
          | (1ULL << (MySQLParser::ST_UNION - 892))
          | (1ULL << (MySQLParser::ST_WITHIN - 892))
          | (1ULL << (MySQLParser::ST_X - 892))
          | (1ULL << (MySQLParser::ST_Y - 892))
          | (1ULL << (MySQLParser::SUBDATE - 892))
          | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
          | (1ULL << (MySQLParser::SUBTIME - 892))
          | (1ULL << (MySQLParser::SYSTEM_USER - 892))
          | (1ULL << (MySQLParser::TAN - 892))
          | (1ULL << (MySQLParser::TIMEDIFF - 892))
          | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
          | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
          | (1ULL << (MySQLParser::TIME_FORMAT - 892))
          | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
          | (1ULL << (MySQLParser::TOUCHES - 892))
          | (1ULL << (MySQLParser::TO_BASE64 - 892))
          | (1ULL << (MySQLParser::TO_DAYS - 892))
          | (1ULL << (MySQLParser::TO_SECONDS - 892))
          | (1ULL << (MySQLParser::UCASE - 892))
          | (1ULL << (MySQLParser::UNCOMPRESS - 892))
          | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
          | (1ULL << (MySQLParser::UNHEX - 892))
          | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
          | (1ULL << (MySQLParser::UPDATEXML - 892))
          | (1ULL << (MySQLParser::UPPER - 892))
          | (1ULL << (MySQLParser::UUID - 892))
          | (1ULL << (MySQLParser::UUID_SHORT - 892))
          | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
          | (1ULL << (MySQLParser::VERSION - 892))
          | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
          | (1ULL << (MySQLParser::WEEKDAY - 892))
          | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
          | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
          | (1ULL << (MySQLParser::WITHIN - 892))
          | (1ULL << (MySQLParser::YEARWEEK - 892))
          | (1ULL << (MySQLParser::Y_FUNCTION - 892))
          | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
          | (1ULL << (MySQLParser::STRING_LITERAL - 974))
          | (1ULL << (MySQLParser::ID - 974))
          | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
          setState(3903);
          uid();
          setState(3908);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySQLParser::COMMA) {
            setState(3904);
            match(MySQLParser::COMMA);
            setState(3905);
            uid();
            setState(3910);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(3913);
        match(MySQLParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringMasterOptionContext ------------------------------------------------------------------

MySQLParser::StringMasterOptionContext::StringMasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_BIND() {
  return getToken(MySQLParser::MASTER_BIND, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_HOST() {
  return getToken(MySQLParser::MASTER_HOST, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_USER() {
  return getToken(MySQLParser::MASTER_USER, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_PASSWORD() {
  return getToken(MySQLParser::MASTER_PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_LOG_FILE() {
  return getToken(MySQLParser::MASTER_LOG_FILE, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::RELAY_LOG_FILE() {
  return getToken(MySQLParser::RELAY_LOG_FILE, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_SSL_CA() {
  return getToken(MySQLParser::MASTER_SSL_CA, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_SSL_CAPATH() {
  return getToken(MySQLParser::MASTER_SSL_CAPATH, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_SSL_CERT() {
  return getToken(MySQLParser::MASTER_SSL_CERT, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_SSL_CRL() {
  return getToken(MySQLParser::MASTER_SSL_CRL, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_SSL_CRLPATH() {
  return getToken(MySQLParser::MASTER_SSL_CRLPATH, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_SSL_KEY() {
  return getToken(MySQLParser::MASTER_SSL_KEY, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_SSL_CIPHER() {
  return getToken(MySQLParser::MASTER_SSL_CIPHER, 0);
}

tree::TerminalNode* MySQLParser::StringMasterOptionContext::MASTER_TLS_VERSION() {
  return getToken(MySQLParser::MASTER_TLS_VERSION, 0);
}


size_t MySQLParser::StringMasterOptionContext::getRuleIndex() const {
  return MySQLParser::RuleStringMasterOption;
}

void MySQLParser::StringMasterOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringMasterOption(this);
}

void MySQLParser::StringMasterOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringMasterOption(this);
}


antlrcpp::Any MySQLParser::StringMasterOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStringMasterOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::StringMasterOptionContext* MySQLParser::stringMasterOption() {
  StringMasterOptionContext *_localctx = _tracker.createInstance<StringMasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 318, MySQLParser::RuleStringMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3916);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::MASTER_BIND || ((((_la - 386) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 386)) & ((1ULL << (MySQLParser::MASTER_HOST - 386))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 386))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 386))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 386))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 386))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 386))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 386))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 386))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 386))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 386))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 386))
      | (1ULL << (MySQLParser::MASTER_USER - 386)))) != 0) || _la == MySQLParser::RELAY_LOG_FILE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecimalMasterOptionContext ------------------------------------------------------------------

MySQLParser::DecimalMasterOptionContext::DecimalMasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DecimalMasterOptionContext::MASTER_PORT() {
  return getToken(MySQLParser::MASTER_PORT, 0);
}

tree::TerminalNode* MySQLParser::DecimalMasterOptionContext::MASTER_CONNECT_RETRY() {
  return getToken(MySQLParser::MASTER_CONNECT_RETRY, 0);
}

tree::TerminalNode* MySQLParser::DecimalMasterOptionContext::MASTER_RETRY_COUNT() {
  return getToken(MySQLParser::MASTER_RETRY_COUNT, 0);
}

tree::TerminalNode* MySQLParser::DecimalMasterOptionContext::MASTER_DELAY() {
  return getToken(MySQLParser::MASTER_DELAY, 0);
}

tree::TerminalNode* MySQLParser::DecimalMasterOptionContext::MASTER_LOG_POS() {
  return getToken(MySQLParser::MASTER_LOG_POS, 0);
}

tree::TerminalNode* MySQLParser::DecimalMasterOptionContext::RELAY_LOG_POS() {
  return getToken(MySQLParser::RELAY_LOG_POS, 0);
}


size_t MySQLParser::DecimalMasterOptionContext::getRuleIndex() const {
  return MySQLParser::RuleDecimalMasterOption;
}

void MySQLParser::DecimalMasterOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimalMasterOption(this);
}

void MySQLParser::DecimalMasterOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimalMasterOption(this);
}


antlrcpp::Any MySQLParser::DecimalMasterOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDecimalMasterOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DecimalMasterOptionContext* MySQLParser::decimalMasterOption() {
  DecimalMasterOptionContext *_localctx = _tracker.createInstance<DecimalMasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 320, MySQLParser::RuleDecimalMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3918);
    _la = _input->LA(1);
    if (!(((((_la - 383) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 383)) & ((1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 383))
      | (1ULL << (MySQLParser::MASTER_DELAY - 383))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 383))
      | (1ULL << (MySQLParser::MASTER_PORT - 383))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 383)))) != 0) || _la == MySQLParser::RELAY_LOG_POS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BoolMasterOptionContext ------------------------------------------------------------------

MySQLParser::BoolMasterOptionContext::BoolMasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::BoolMasterOptionContext::MASTER_AUTO_POSITION() {
  return getToken(MySQLParser::MASTER_AUTO_POSITION, 0);
}

tree::TerminalNode* MySQLParser::BoolMasterOptionContext::MASTER_SSL() {
  return getToken(MySQLParser::MASTER_SSL, 0);
}

tree::TerminalNode* MySQLParser::BoolMasterOptionContext::MASTER_SSL_VERIFY_SERVER_CERT() {
  return getToken(MySQLParser::MASTER_SSL_VERIFY_SERVER_CERT, 0);
}


size_t MySQLParser::BoolMasterOptionContext::getRuleIndex() const {
  return MySQLParser::RuleBoolMasterOption;
}

void MySQLParser::BoolMasterOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolMasterOption(this);
}

void MySQLParser::BoolMasterOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolMasterOption(this);
}


antlrcpp::Any MySQLParser::BoolMasterOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitBoolMasterOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::BoolMasterOptionContext* MySQLParser::boolMasterOption() {
  BoolMasterOptionContext *_localctx = _tracker.createInstance<BoolMasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 322, MySQLParser::RuleBoolMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3920);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::MASTER_SSL_VERIFY_SERVER_CERT || _la == MySQLParser::MASTER_AUTO_POSITION

    || _la == MySQLParser::MASTER_SSL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChannelOptionContext ------------------------------------------------------------------

MySQLParser::ChannelOptionContext::ChannelOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ChannelOptionContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::ChannelOptionContext::CHANNEL() {
  return getToken(MySQLParser::CHANNEL, 0);
}

tree::TerminalNode* MySQLParser::ChannelOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::ChannelOptionContext::getRuleIndex() const {
  return MySQLParser::RuleChannelOption;
}

void MySQLParser::ChannelOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChannelOption(this);
}

void MySQLParser::ChannelOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChannelOption(this);
}


antlrcpp::Any MySQLParser::ChannelOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitChannelOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ChannelOptionContext* MySQLParser::channelOption() {
  ChannelOptionContext *_localctx = _tracker.createInstance<ChannelOptionContext>(_ctx, getState());
  enterRule(_localctx, 324, MySQLParser::RuleChannelOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3922);
    match(MySQLParser::FOR);
    setState(3923);
    match(MySQLParser::CHANNEL);
    setState(3924);
    match(MySQLParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReplicationFilterContext ------------------------------------------------------------------

MySQLParser::ReplicationFilterContext::ReplicationFilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::ReplicationFilterContext::getRuleIndex() const {
  return MySQLParser::RuleReplicationFilter;
}

void MySQLParser::ReplicationFilterContext::copyFrom(ReplicationFilterContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WildIgnoreTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::WildIgnoreTableReplicationContext::REPLICATE_WILD_IGNORE_TABLE() {
  return getToken(MySQLParser::REPLICATE_WILD_IGNORE_TABLE, 0);
}

MySQLParser::SimpleStringsContext* MySQLParser::WildIgnoreTableReplicationContext::simpleStrings() {
  return getRuleContext<MySQLParser::SimpleStringsContext>(0);
}

MySQLParser::WildIgnoreTableReplicationContext::WildIgnoreTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }

void MySQLParser::WildIgnoreTableReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildIgnoreTableReplication(this);
}
void MySQLParser::WildIgnoreTableReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildIgnoreTableReplication(this);
}

antlrcpp::Any MySQLParser::WildIgnoreTableReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitWildIgnoreTableReplication(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DoTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DoTableReplicationContext::REPLICATE_DO_TABLE() {
  return getToken(MySQLParser::REPLICATE_DO_TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::DoTableReplicationContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

MySQLParser::DoTableReplicationContext::DoTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }

void MySQLParser::DoTableReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoTableReplication(this);
}
void MySQLParser::DoTableReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoTableReplication(this);
}

antlrcpp::Any MySQLParser::DoTableReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDoTableReplication(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IgnoreTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::IgnoreTableReplicationContext::REPLICATE_IGNORE_TABLE() {
  return getToken(MySQLParser::REPLICATE_IGNORE_TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::IgnoreTableReplicationContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

MySQLParser::IgnoreTableReplicationContext::IgnoreTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }

void MySQLParser::IgnoreTableReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIgnoreTableReplication(this);
}
void MySQLParser::IgnoreTableReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIgnoreTableReplication(this);
}

antlrcpp::Any MySQLParser::IgnoreTableReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIgnoreTableReplication(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RewriteDbReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::RewriteDbReplicationContext::REPLICATE_REWRITE_DB() {
  return getToken(MySQLParser::REPLICATE_REWRITE_DB, 0);
}

std::vector<MySQLParser::TablePairContext *> MySQLParser::RewriteDbReplicationContext::tablePair() {
  return getRuleContexts<MySQLParser::TablePairContext>();
}

MySQLParser::TablePairContext* MySQLParser::RewriteDbReplicationContext::tablePair(size_t i) {
  return getRuleContext<MySQLParser::TablePairContext>(i);
}

MySQLParser::RewriteDbReplicationContext::RewriteDbReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }

void MySQLParser::RewriteDbReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRewriteDbReplication(this);
}
void MySQLParser::RewriteDbReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRewriteDbReplication(this);
}

antlrcpp::Any MySQLParser::RewriteDbReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRewriteDbReplication(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DoDbReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DoDbReplicationContext::REPLICATE_DO_DB() {
  return getToken(MySQLParser::REPLICATE_DO_DB, 0);
}

MySQLParser::UidListContext* MySQLParser::DoDbReplicationContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::DoDbReplicationContext::DoDbReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }

void MySQLParser::DoDbReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoDbReplication(this);
}
void MySQLParser::DoDbReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoDbReplication(this);
}

antlrcpp::Any MySQLParser::DoDbReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDoDbReplication(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IgnoreDbReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::IgnoreDbReplicationContext::REPLICATE_IGNORE_DB() {
  return getToken(MySQLParser::REPLICATE_IGNORE_DB, 0);
}

MySQLParser::UidListContext* MySQLParser::IgnoreDbReplicationContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::IgnoreDbReplicationContext::IgnoreDbReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }

void MySQLParser::IgnoreDbReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIgnoreDbReplication(this);
}
void MySQLParser::IgnoreDbReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIgnoreDbReplication(this);
}

antlrcpp::Any MySQLParser::IgnoreDbReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIgnoreDbReplication(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WildDoTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::WildDoTableReplicationContext::REPLICATE_WILD_DO_TABLE() {
  return getToken(MySQLParser::REPLICATE_WILD_DO_TABLE, 0);
}

MySQLParser::SimpleStringsContext* MySQLParser::WildDoTableReplicationContext::simpleStrings() {
  return getRuleContext<MySQLParser::SimpleStringsContext>(0);
}

MySQLParser::WildDoTableReplicationContext::WildDoTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }

void MySQLParser::WildDoTableReplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildDoTableReplication(this);
}
void MySQLParser::WildDoTableReplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildDoTableReplication(this);
}

antlrcpp::Any MySQLParser::WildDoTableReplicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitWildDoTableReplication(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::ReplicationFilterContext* MySQLParser::replicationFilter() {
  ReplicationFilterContext *_localctx = _tracker.createInstance<ReplicationFilterContext>(_ctx, getState());
  enterRule(_localctx, 326, MySQLParser::RuleReplicationFilter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3975);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::REPLICATE_DO_DB: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySQLParser::DoDbReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3926);
        match(MySQLParser::REPLICATE_DO_DB);
        setState(3927);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3928);
        match(MySQLParser::LR_BRACKET);
        setState(3929);
        uidList();
        setState(3930);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      case MySQLParser::REPLICATE_IGNORE_DB: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySQLParser::IgnoreDbReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3932);
        match(MySQLParser::REPLICATE_IGNORE_DB);
        setState(3933);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3934);
        match(MySQLParser::LR_BRACKET);
        setState(3935);
        uidList();
        setState(3936);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      case MySQLParser::REPLICATE_DO_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySQLParser::DoTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3938);
        match(MySQLParser::REPLICATE_DO_TABLE);
        setState(3939);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3940);
        match(MySQLParser::LR_BRACKET);
        setState(3941);
        tables();
        setState(3942);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      case MySQLParser::REPLICATE_IGNORE_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySQLParser::IgnoreTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3944);
        match(MySQLParser::REPLICATE_IGNORE_TABLE);
        setState(3945);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3946);
        match(MySQLParser::LR_BRACKET);
        setState(3947);
        tables();
        setState(3948);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      case MySQLParser::REPLICATE_WILD_DO_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySQLParser::WildDoTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(3950);
        match(MySQLParser::REPLICATE_WILD_DO_TABLE);
        setState(3951);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3952);
        match(MySQLParser::LR_BRACKET);
        setState(3953);
        simpleStrings();
        setState(3954);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySQLParser::WildIgnoreTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(3956);
        match(MySQLParser::REPLICATE_WILD_IGNORE_TABLE);
        setState(3957);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3958);
        match(MySQLParser::LR_BRACKET);
        setState(3959);
        simpleStrings();
        setState(3960);
        match(MySQLParser::RR_BRACKET);
        break;
      }

      case MySQLParser::REPLICATE_REWRITE_DB: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySQLParser::RewriteDbReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(3962);
        match(MySQLParser::REPLICATE_REWRITE_DB);
        setState(3963);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3964);
        match(MySQLParser::LR_BRACKET);
        setState(3965);
        tablePair();
        setState(3970);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(3966);
          match(MySQLParser::COMMA);
          setState(3967);
          tablePair();
          setState(3972);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3973);
        match(MySQLParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePairContext ------------------------------------------------------------------

MySQLParser::TablePairContext::TablePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::TableNameContext *> MySQLParser::TablePairContext::tableName() {
  return getRuleContexts<MySQLParser::TableNameContext>();
}

MySQLParser::TableNameContext* MySQLParser::TablePairContext::tableName(size_t i) {
  return getRuleContext<MySQLParser::TableNameContext>(i);
}


size_t MySQLParser::TablePairContext::getRuleIndex() const {
  return MySQLParser::RuleTablePair;
}

void MySQLParser::TablePairContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTablePair(this);
}

void MySQLParser::TablePairContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTablePair(this);
}


antlrcpp::Any MySQLParser::TablePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTablePair(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TablePairContext* MySQLParser::tablePair() {
  TablePairContext *_localctx = _tracker.createInstance<TablePairContext>(_ctx, getState());
  enterRule(_localctx, 328, MySQLParser::RuleTablePair);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3977);
    match(MySQLParser::LR_BRACKET);
    setState(3978);
    dynamic_cast<TablePairContext *>(_localctx)->firstTable = tableName();
    setState(3979);
    match(MySQLParser::COMMA);
    setState(3980);
    dynamic_cast<TablePairContext *>(_localctx)->secondTable = tableName();
    setState(3981);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThreadTypeContext ------------------------------------------------------------------

MySQLParser::ThreadTypeContext::ThreadTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ThreadTypeContext::IO_THREAD() {
  return getToken(MySQLParser::IO_THREAD, 0);
}

tree::TerminalNode* MySQLParser::ThreadTypeContext::SQL_THREAD() {
  return getToken(MySQLParser::SQL_THREAD, 0);
}


size_t MySQLParser::ThreadTypeContext::getRuleIndex() const {
  return MySQLParser::RuleThreadType;
}

void MySQLParser::ThreadTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThreadType(this);
}

void MySQLParser::ThreadTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThreadType(this);
}


antlrcpp::Any MySQLParser::ThreadTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitThreadType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ThreadTypeContext* MySQLParser::threadType() {
  ThreadTypeContext *_localctx = _tracker.createInstance<ThreadTypeContext>(_ctx, getState());
  enterRule(_localctx, 330, MySQLParser::RuleThreadType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3983);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::IO_THREAD || _la == MySQLParser::SQL_THREAD)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UntilOptionContext ------------------------------------------------------------------

MySQLParser::UntilOptionContext::UntilOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::UntilOptionContext::getRuleIndex() const {
  return MySQLParser::RuleUntilOption;
}

void MySQLParser::UntilOptionContext::copyFrom(UntilOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GtidsUntilOptionContext ------------------------------------------------------------------

MySQLParser::GtuidSetContext* MySQLParser::GtidsUntilOptionContext::gtuidSet() {
  return getRuleContext<MySQLParser::GtuidSetContext>(0);
}

tree::TerminalNode* MySQLParser::GtidsUntilOptionContext::SQL_BEFORE_GTIDS() {
  return getToken(MySQLParser::SQL_BEFORE_GTIDS, 0);
}

tree::TerminalNode* MySQLParser::GtidsUntilOptionContext::SQL_AFTER_GTIDS() {
  return getToken(MySQLParser::SQL_AFTER_GTIDS, 0);
}

MySQLParser::GtidsUntilOptionContext::GtidsUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::GtidsUntilOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGtidsUntilOption(this);
}
void MySQLParser::GtidsUntilOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGtidsUntilOption(this);
}

antlrcpp::Any MySQLParser::GtidsUntilOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGtidsUntilOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SqlGapsUntilOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SqlGapsUntilOptionContext::SQL_AFTER_MTS_GAPS() {
  return getToken(MySQLParser::SQL_AFTER_MTS_GAPS, 0);
}

MySQLParser::SqlGapsUntilOptionContext::SqlGapsUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SqlGapsUntilOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSqlGapsUntilOption(this);
}
void MySQLParser::SqlGapsUntilOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSqlGapsUntilOption(this);
}

antlrcpp::Any MySQLParser::SqlGapsUntilOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSqlGapsUntilOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MasterLogUntilOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::MasterLogUntilOptionContext::MASTER_LOG_FILE() {
  return getToken(MySQLParser::MASTER_LOG_FILE, 0);
}

tree::TerminalNode* MySQLParser::MasterLogUntilOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::MasterLogUntilOptionContext::MASTER_LOG_POS() {
  return getToken(MySQLParser::MASTER_LOG_POS, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::MasterLogUntilOptionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::MasterLogUntilOptionContext::MasterLogUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::MasterLogUntilOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterLogUntilOption(this);
}
void MySQLParser::MasterLogUntilOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterLogUntilOption(this);
}

antlrcpp::Any MySQLParser::MasterLogUntilOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMasterLogUntilOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelayLogUntilOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::RelayLogUntilOptionContext::RELAY_LOG_FILE() {
  return getToken(MySQLParser::RELAY_LOG_FILE, 0);
}

tree::TerminalNode* MySQLParser::RelayLogUntilOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::RelayLogUntilOptionContext::RELAY_LOG_POS() {
  return getToken(MySQLParser::RELAY_LOG_POS, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::RelayLogUntilOptionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::RelayLogUntilOptionContext::RelayLogUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::RelayLogUntilOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelayLogUntilOption(this);
}
void MySQLParser::RelayLogUntilOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelayLogUntilOption(this);
}

antlrcpp::Any MySQLParser::RelayLogUntilOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRelayLogUntilOption(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::UntilOptionContext* MySQLParser::untilOption() {
  UntilOptionContext *_localctx = _tracker.createInstance<UntilOptionContext>(_ctx, getState());
  enterRule(_localctx, 332, MySQLParser::RuleUntilOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4003);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_BEFORE_GTIDS: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySQLParser::GtidsUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3985);
        dynamic_cast<GtidsUntilOptionContext *>(_localctx)->gtids = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::SQL_AFTER_GTIDS

        || _la == MySQLParser::SQL_BEFORE_GTIDS)) {
          dynamic_cast<GtidsUntilOptionContext *>(_localctx)->gtids = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3986);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3987);
        gtuidSet();
        break;
      }

      case MySQLParser::MASTER_LOG_FILE: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySQLParser::MasterLogUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3988);
        match(MySQLParser::MASTER_LOG_FILE);
        setState(3989);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3990);
        match(MySQLParser::STRING_LITERAL);
        setState(3991);
        match(MySQLParser::COMMA);
        setState(3992);
        match(MySQLParser::MASTER_LOG_POS);
        setState(3993);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3994);
        decimalLiteral();
        break;
      }

      case MySQLParser::RELAY_LOG_FILE: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySQLParser::RelayLogUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3995);
        match(MySQLParser::RELAY_LOG_FILE);
        setState(3996);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(3997);
        match(MySQLParser::STRING_LITERAL);
        setState(3998);
        match(MySQLParser::COMMA);
        setState(3999);
        match(MySQLParser::RELAY_LOG_POS);
        setState(4000);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(4001);
        decimalLiteral();
        break;
      }

      case MySQLParser::SQL_AFTER_MTS_GAPS: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySQLParser::SqlGapsUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(4002);
        match(MySQLParser::SQL_AFTER_MTS_GAPS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectionOptionContext ------------------------------------------------------------------

MySQLParser::ConnectionOptionContext::ConnectionOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::ConnectionOptionContext::getRuleIndex() const {
  return MySQLParser::RuleConnectionOption;
}

void MySQLParser::ConnectionOptionContext::copyFrom(ConnectionOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PluginDirConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PluginDirConnectionOptionContext::PLUGIN_DIR() {
  return getToken(MySQLParser::PLUGIN_DIR, 0);
}

tree::TerminalNode* MySQLParser::PluginDirConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::PluginDirConnectionOptionContext::PluginDirConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PluginDirConnectionOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPluginDirConnectionOption(this);
}
void MySQLParser::PluginDirConnectionOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPluginDirConnectionOption(this);
}

antlrcpp::Any MySQLParser::PluginDirConnectionOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPluginDirConnectionOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UserConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::UserConnectionOptionContext::USER() {
  return getToken(MySQLParser::USER, 0);
}

tree::TerminalNode* MySQLParser::UserConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::UserConnectionOptionContext::UserConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::UserConnectionOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUserConnectionOption(this);
}
void MySQLParser::UserConnectionOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUserConnectionOption(this);
}

antlrcpp::Any MySQLParser::UserConnectionOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUserConnectionOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DefaultAuthConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DefaultAuthConnectionOptionContext::DEFAULT_AUTH() {
  return getToken(MySQLParser::DEFAULT_AUTH, 0);
}

tree::TerminalNode* MySQLParser::DefaultAuthConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::DefaultAuthConnectionOptionContext::DefaultAuthConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::DefaultAuthConnectionOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultAuthConnectionOption(this);
}
void MySQLParser::DefaultAuthConnectionOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultAuthConnectionOption(this);
}

antlrcpp::Any MySQLParser::DefaultAuthConnectionOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDefaultAuthConnectionOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PasswordConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PasswordConnectionOptionContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::PasswordConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::PasswordConnectionOptionContext::PasswordConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PasswordConnectionOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPasswordConnectionOption(this);
}
void MySQLParser::PasswordConnectionOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPasswordConnectionOption(this);
}

antlrcpp::Any MySQLParser::PasswordConnectionOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPasswordConnectionOption(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::ConnectionOptionContext* MySQLParser::connectionOption() {
  ConnectionOptionContext *_localctx = _tracker.createInstance<ConnectionOptionContext>(_ctx, getState());
  enterRule(_localctx, 334, MySQLParser::RuleConnectionOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4017);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::USER: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySQLParser::UserConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4005);
        match(MySQLParser::USER);
        setState(4006);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(4007);
        dynamic_cast<UserConnectionOptionContext *>(_localctx)->conOptUser = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::PASSWORD: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySQLParser::PasswordConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4008);
        match(MySQLParser::PASSWORD);
        setState(4009);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(4010);
        dynamic_cast<PasswordConnectionOptionContext *>(_localctx)->conOptPassword = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::DEFAULT_AUTH: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySQLParser::DefaultAuthConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(4011);
        match(MySQLParser::DEFAULT_AUTH);
        setState(4012);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(4013);
        dynamic_cast<DefaultAuthConnectionOptionContext *>(_localctx)->conOptDefAuth = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::PLUGIN_DIR: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySQLParser::PluginDirConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(4014);
        match(MySQLParser::PLUGIN_DIR);
        setState(4015);
        match(MySQLParser::EQUAL_SYMBOL);
        setState(4016);
        dynamic_cast<PluginDirConnectionOptionContext *>(_localctx)->conOptPluginDir = match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GtuidSetContext ------------------------------------------------------------------

MySQLParser::GtuidSetContext::GtuidSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::UuidSetContext *> MySQLParser::GtuidSetContext::uuidSet() {
  return getRuleContexts<MySQLParser::UuidSetContext>();
}

MySQLParser::UuidSetContext* MySQLParser::GtuidSetContext::uuidSet(size_t i) {
  return getRuleContext<MySQLParser::UuidSetContext>(i);
}

tree::TerminalNode* MySQLParser::GtuidSetContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::GtuidSetContext::getRuleIndex() const {
  return MySQLParser::RuleGtuidSet;
}

void MySQLParser::GtuidSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGtuidSet(this);
}

void MySQLParser::GtuidSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGtuidSet(this);
}


antlrcpp::Any MySQLParser::GtuidSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGtuidSet(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::GtuidSetContext* MySQLParser::gtuidSet() {
  GtuidSetContext *_localctx = _tracker.createInstance<GtuidSetContext>(_ctx, getState());
  enterRule(_localctx, 336, MySQLParser::RuleGtuidSet);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4028);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ZERO_DECIMAL:
      case MySQLParser::ONE_DECIMAL:
      case MySQLParser::TWO_DECIMAL:
      case MySQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4019);
        uuidSet();
        setState(4024);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(4020);
          match(MySQLParser::COMMA);
          setState(4021);
          uuidSet();
          setState(4026);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(4027);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaStartTransactionContext ------------------------------------------------------------------

MySQLParser::XaStartTransactionContext::XaStartTransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::XaStartTransactionContext::XA() {
  return getToken(MySQLParser::XA, 0);
}

MySQLParser::XidContext* MySQLParser::XaStartTransactionContext::xid() {
  return getRuleContext<MySQLParser::XidContext>(0);
}

tree::TerminalNode* MySQLParser::XaStartTransactionContext::START() {
  return getToken(MySQLParser::START, 0);
}

tree::TerminalNode* MySQLParser::XaStartTransactionContext::BEGIN() {
  return getToken(MySQLParser::BEGIN, 0);
}

tree::TerminalNode* MySQLParser::XaStartTransactionContext::JOIN() {
  return getToken(MySQLParser::JOIN, 0);
}

tree::TerminalNode* MySQLParser::XaStartTransactionContext::RESUME() {
  return getToken(MySQLParser::RESUME, 0);
}


size_t MySQLParser::XaStartTransactionContext::getRuleIndex() const {
  return MySQLParser::RuleXaStartTransaction;
}

void MySQLParser::XaStartTransactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXaStartTransaction(this);
}

void MySQLParser::XaStartTransactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXaStartTransaction(this);
}


antlrcpp::Any MySQLParser::XaStartTransactionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXaStartTransaction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XaStartTransactionContext* MySQLParser::xaStartTransaction() {
  XaStartTransactionContext *_localctx = _tracker.createInstance<XaStartTransactionContext>(_ctx, getState());
  enterRule(_localctx, 338, MySQLParser::RuleXaStartTransaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4030);
    match(MySQLParser::XA);
    setState(4031);
    dynamic_cast<XaStartTransactionContext *>(_localctx)->xaStart = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::BEGIN || _la == MySQLParser::START)) {
      dynamic_cast<XaStartTransactionContext *>(_localctx)->xaStart = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4032);
    xid();
    setState(4034);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::JOIN || _la == MySQLParser::RESUME) {
      setState(4033);
      dynamic_cast<XaStartTransactionContext *>(_localctx)->xaAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::JOIN || _la == MySQLParser::RESUME)) {
        dynamic_cast<XaStartTransactionContext *>(_localctx)->xaAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaEndTransactionContext ------------------------------------------------------------------

MySQLParser::XaEndTransactionContext::XaEndTransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::XaEndTransactionContext::XA() {
  return getToken(MySQLParser::XA, 0);
}

tree::TerminalNode* MySQLParser::XaEndTransactionContext::END() {
  return getToken(MySQLParser::END, 0);
}

MySQLParser::XidContext* MySQLParser::XaEndTransactionContext::xid() {
  return getRuleContext<MySQLParser::XidContext>(0);
}

tree::TerminalNode* MySQLParser::XaEndTransactionContext::SUSPEND() {
  return getToken(MySQLParser::SUSPEND, 0);
}

tree::TerminalNode* MySQLParser::XaEndTransactionContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::XaEndTransactionContext::MIGRATE() {
  return getToken(MySQLParser::MIGRATE, 0);
}


size_t MySQLParser::XaEndTransactionContext::getRuleIndex() const {
  return MySQLParser::RuleXaEndTransaction;
}

void MySQLParser::XaEndTransactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXaEndTransaction(this);
}

void MySQLParser::XaEndTransactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXaEndTransaction(this);
}


antlrcpp::Any MySQLParser::XaEndTransactionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXaEndTransaction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XaEndTransactionContext* MySQLParser::xaEndTransaction() {
  XaEndTransactionContext *_localctx = _tracker.createInstance<XaEndTransactionContext>(_ctx, getState());
  enterRule(_localctx, 340, MySQLParser::RuleXaEndTransaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4036);
    match(MySQLParser::XA);
    setState(4037);
    match(MySQLParser::END);
    setState(4038);
    xid();
    setState(4044);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::SUSPEND) {
      setState(4039);
      match(MySQLParser::SUSPEND);
      setState(4042);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FOR) {
        setState(4040);
        match(MySQLParser::FOR);
        setState(4041);
        match(MySQLParser::MIGRATE);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaPrepareStatementContext ------------------------------------------------------------------

MySQLParser::XaPrepareStatementContext::XaPrepareStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::XaPrepareStatementContext::XA() {
  return getToken(MySQLParser::XA, 0);
}

tree::TerminalNode* MySQLParser::XaPrepareStatementContext::PREPARE() {
  return getToken(MySQLParser::PREPARE, 0);
}

MySQLParser::XidContext* MySQLParser::XaPrepareStatementContext::xid() {
  return getRuleContext<MySQLParser::XidContext>(0);
}


size_t MySQLParser::XaPrepareStatementContext::getRuleIndex() const {
  return MySQLParser::RuleXaPrepareStatement;
}

void MySQLParser::XaPrepareStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXaPrepareStatement(this);
}

void MySQLParser::XaPrepareStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXaPrepareStatement(this);
}


antlrcpp::Any MySQLParser::XaPrepareStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXaPrepareStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XaPrepareStatementContext* MySQLParser::xaPrepareStatement() {
  XaPrepareStatementContext *_localctx = _tracker.createInstance<XaPrepareStatementContext>(_ctx, getState());
  enterRule(_localctx, 342, MySQLParser::RuleXaPrepareStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4046);
    match(MySQLParser::XA);
    setState(4047);
    match(MySQLParser::PREPARE);
    setState(4048);
    xid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaCommitWorkContext ------------------------------------------------------------------

MySQLParser::XaCommitWorkContext::XaCommitWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::XaCommitWorkContext::XA() {
  return getToken(MySQLParser::XA, 0);
}

tree::TerminalNode* MySQLParser::XaCommitWorkContext::COMMIT() {
  return getToken(MySQLParser::COMMIT, 0);
}

MySQLParser::XidContext* MySQLParser::XaCommitWorkContext::xid() {
  return getRuleContext<MySQLParser::XidContext>(0);
}

tree::TerminalNode* MySQLParser::XaCommitWorkContext::ONE() {
  return getToken(MySQLParser::ONE, 0);
}

tree::TerminalNode* MySQLParser::XaCommitWorkContext::PHASE() {
  return getToken(MySQLParser::PHASE, 0);
}


size_t MySQLParser::XaCommitWorkContext::getRuleIndex() const {
  return MySQLParser::RuleXaCommitWork;
}

void MySQLParser::XaCommitWorkContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXaCommitWork(this);
}

void MySQLParser::XaCommitWorkContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXaCommitWork(this);
}


antlrcpp::Any MySQLParser::XaCommitWorkContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXaCommitWork(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XaCommitWorkContext* MySQLParser::xaCommitWork() {
  XaCommitWorkContext *_localctx = _tracker.createInstance<XaCommitWorkContext>(_ctx, getState());
  enterRule(_localctx, 344, MySQLParser::RuleXaCommitWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4050);
    match(MySQLParser::XA);
    setState(4051);
    match(MySQLParser::COMMIT);
    setState(4052);
    xid();
    setState(4055);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ONE) {
      setState(4053);
      match(MySQLParser::ONE);
      setState(4054);
      match(MySQLParser::PHASE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaRollbackWorkContext ------------------------------------------------------------------

MySQLParser::XaRollbackWorkContext::XaRollbackWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::XaRollbackWorkContext::XA() {
  return getToken(MySQLParser::XA, 0);
}

tree::TerminalNode* MySQLParser::XaRollbackWorkContext::ROLLBACK() {
  return getToken(MySQLParser::ROLLBACK, 0);
}

MySQLParser::XidContext* MySQLParser::XaRollbackWorkContext::xid() {
  return getRuleContext<MySQLParser::XidContext>(0);
}


size_t MySQLParser::XaRollbackWorkContext::getRuleIndex() const {
  return MySQLParser::RuleXaRollbackWork;
}

void MySQLParser::XaRollbackWorkContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXaRollbackWork(this);
}

void MySQLParser::XaRollbackWorkContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXaRollbackWork(this);
}


antlrcpp::Any MySQLParser::XaRollbackWorkContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXaRollbackWork(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XaRollbackWorkContext* MySQLParser::xaRollbackWork() {
  XaRollbackWorkContext *_localctx = _tracker.createInstance<XaRollbackWorkContext>(_ctx, getState());
  enterRule(_localctx, 346, MySQLParser::RuleXaRollbackWork);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4057);
    match(MySQLParser::XA);
    setState(4058);
    match(MySQLParser::ROLLBACK);
    setState(4059);
    xid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaRecoverWorkContext ------------------------------------------------------------------

MySQLParser::XaRecoverWorkContext::XaRecoverWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::XaRecoverWorkContext::XA() {
  return getToken(MySQLParser::XA, 0);
}

tree::TerminalNode* MySQLParser::XaRecoverWorkContext::RECOVER() {
  return getToken(MySQLParser::RECOVER, 0);
}

tree::TerminalNode* MySQLParser::XaRecoverWorkContext::CONVERT() {
  return getToken(MySQLParser::CONVERT, 0);
}

MySQLParser::XidContext* MySQLParser::XaRecoverWorkContext::xid() {
  return getRuleContext<MySQLParser::XidContext>(0);
}


size_t MySQLParser::XaRecoverWorkContext::getRuleIndex() const {
  return MySQLParser::RuleXaRecoverWork;
}

void MySQLParser::XaRecoverWorkContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXaRecoverWork(this);
}

void MySQLParser::XaRecoverWorkContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXaRecoverWork(this);
}


antlrcpp::Any MySQLParser::XaRecoverWorkContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXaRecoverWork(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XaRecoverWorkContext* MySQLParser::xaRecoverWork() {
  XaRecoverWorkContext *_localctx = _tracker.createInstance<XaRecoverWorkContext>(_ctx, getState());
  enterRule(_localctx, 348, MySQLParser::RuleXaRecoverWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4061);
    match(MySQLParser::XA);
    setState(4062);
    match(MySQLParser::RECOVER);
    setState(4065);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::CONVERT) {
      setState(4063);
      match(MySQLParser::CONVERT);
      setState(4064);
      xid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrepareStatementContext ------------------------------------------------------------------

MySQLParser::PrepareStatementContext::PrepareStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::PrepareStatementContext::PREPARE() {
  return getToken(MySQLParser::PREPARE, 0);
}

MySQLParser::UidContext* MySQLParser::PrepareStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::PrepareStatementContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

tree::TerminalNode* MySQLParser::PrepareStatementContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::PrepareStatementContext::LOCAL_ID() {
  return getToken(MySQLParser::LOCAL_ID, 0);
}


size_t MySQLParser::PrepareStatementContext::getRuleIndex() const {
  return MySQLParser::RulePrepareStatement;
}

void MySQLParser::PrepareStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrepareStatement(this);
}

void MySQLParser::PrepareStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrepareStatement(this);
}


antlrcpp::Any MySQLParser::PrepareStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPrepareStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PrepareStatementContext* MySQLParser::prepareStatement() {
  PrepareStatementContext *_localctx = _tracker.createInstance<PrepareStatementContext>(_ctx, getState());
  enterRule(_localctx, 350, MySQLParser::RulePrepareStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4067);
    match(MySQLParser::PREPARE);
    setState(4068);
    uid();
    setState(4069);
    match(MySQLParser::FROM);
    setState(4072);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::STRING_LITERAL: {
        setState(4070);
        dynamic_cast<PrepareStatementContext *>(_localctx)->query = match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::LOCAL_ID: {
        setState(4071);
        dynamic_cast<PrepareStatementContext *>(_localctx)->variable = match(MySQLParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecuteStatementContext ------------------------------------------------------------------

MySQLParser::ExecuteStatementContext::ExecuteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ExecuteStatementContext::EXECUTE() {
  return getToken(MySQLParser::EXECUTE, 0);
}

MySQLParser::UidContext* MySQLParser::ExecuteStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::ExecuteStatementContext::USING() {
  return getToken(MySQLParser::USING, 0);
}

MySQLParser::UserVariablesContext* MySQLParser::ExecuteStatementContext::userVariables() {
  return getRuleContext<MySQLParser::UserVariablesContext>(0);
}


size_t MySQLParser::ExecuteStatementContext::getRuleIndex() const {
  return MySQLParser::RuleExecuteStatement;
}

void MySQLParser::ExecuteStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecuteStatement(this);
}

void MySQLParser::ExecuteStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecuteStatement(this);
}


antlrcpp::Any MySQLParser::ExecuteStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitExecuteStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ExecuteStatementContext* MySQLParser::executeStatement() {
  ExecuteStatementContext *_localctx = _tracker.createInstance<ExecuteStatementContext>(_ctx, getState());
  enterRule(_localctx, 352, MySQLParser::RuleExecuteStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4074);
    match(MySQLParser::EXECUTE);
    setState(4075);
    uid();
    setState(4078);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::USING) {
      setState(4076);
      match(MySQLParser::USING);
      setState(4077);
      userVariables();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeallocatePrepareContext ------------------------------------------------------------------

MySQLParser::DeallocatePrepareContext::DeallocatePrepareContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DeallocatePrepareContext::PREPARE() {
  return getToken(MySQLParser::PREPARE, 0);
}

MySQLParser::UidContext* MySQLParser::DeallocatePrepareContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::DeallocatePrepareContext::DEALLOCATE() {
  return getToken(MySQLParser::DEALLOCATE, 0);
}

tree::TerminalNode* MySQLParser::DeallocatePrepareContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}


size_t MySQLParser::DeallocatePrepareContext::getRuleIndex() const {
  return MySQLParser::RuleDeallocatePrepare;
}

void MySQLParser::DeallocatePrepareContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeallocatePrepare(this);
}

void MySQLParser::DeallocatePrepareContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeallocatePrepare(this);
}


antlrcpp::Any MySQLParser::DeallocatePrepareContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDeallocatePrepare(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DeallocatePrepareContext* MySQLParser::deallocatePrepare() {
  DeallocatePrepareContext *_localctx = _tracker.createInstance<DeallocatePrepareContext>(_ctx, getState());
  enterRule(_localctx, 354, MySQLParser::RuleDeallocatePrepare);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4080);
    dynamic_cast<DeallocatePrepareContext *>(_localctx)->dropFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::DROP || _la == MySQLParser::DEALLOCATE)) {
      dynamic_cast<DeallocatePrepareContext *>(_localctx)->dropFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4081);
    match(MySQLParser::PREPARE);
    setState(4082);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RoutineBodyContext ------------------------------------------------------------------

MySQLParser::RoutineBodyContext::RoutineBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::BlockStatementContext* MySQLParser::RoutineBodyContext::blockStatement() {
  return getRuleContext<MySQLParser::BlockStatementContext>(0);
}

MySQLParser::SqlStatementContext* MySQLParser::RoutineBodyContext::sqlStatement() {
  return getRuleContext<MySQLParser::SqlStatementContext>(0);
}


size_t MySQLParser::RoutineBodyContext::getRuleIndex() const {
  return MySQLParser::RuleRoutineBody;
}

void MySQLParser::RoutineBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutineBody(this);
}

void MySQLParser::RoutineBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutineBody(this);
}


antlrcpp::Any MySQLParser::RoutineBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRoutineBody(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RoutineBodyContext* MySQLParser::routineBody() {
  RoutineBodyContext *_localctx = _tracker.createInstance<RoutineBodyContext>(_ctx, getState());
  enterRule(_localctx, 356, MySQLParser::RuleRoutineBody);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4086);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 586, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4084);
      blockStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4085);
      sqlStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

MySQLParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::BlockStatementContext::BEGIN() {
  return getToken(MySQLParser::BEGIN, 0);
}

tree::TerminalNode* MySQLParser::BlockStatementContext::END() {
  return getToken(MySQLParser::END, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::BlockStatementContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::BlockStatementContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

std::vector<MySQLParser::DeclareVariableContext *> MySQLParser::BlockStatementContext::declareVariable() {
  return getRuleContexts<MySQLParser::DeclareVariableContext>();
}

MySQLParser::DeclareVariableContext* MySQLParser::BlockStatementContext::declareVariable(size_t i) {
  return getRuleContext<MySQLParser::DeclareVariableContext>(i);
}

std::vector<tree::TerminalNode *> MySQLParser::BlockStatementContext::SEMI() {
  return getTokens(MySQLParser::SEMI);
}

tree::TerminalNode* MySQLParser::BlockStatementContext::SEMI(size_t i) {
  return getToken(MySQLParser::SEMI, i);
}

std::vector<MySQLParser::DeclareConditionContext *> MySQLParser::BlockStatementContext::declareCondition() {
  return getRuleContexts<MySQLParser::DeclareConditionContext>();
}

MySQLParser::DeclareConditionContext* MySQLParser::BlockStatementContext::declareCondition(size_t i) {
  return getRuleContext<MySQLParser::DeclareConditionContext>(i);
}

std::vector<MySQLParser::DeclareCursorContext *> MySQLParser::BlockStatementContext::declareCursor() {
  return getRuleContexts<MySQLParser::DeclareCursorContext>();
}

MySQLParser::DeclareCursorContext* MySQLParser::BlockStatementContext::declareCursor(size_t i) {
  return getRuleContext<MySQLParser::DeclareCursorContext>(i);
}

std::vector<MySQLParser::DeclareHandlerContext *> MySQLParser::BlockStatementContext::declareHandler() {
  return getRuleContexts<MySQLParser::DeclareHandlerContext>();
}

MySQLParser::DeclareHandlerContext* MySQLParser::BlockStatementContext::declareHandler(size_t i) {
  return getRuleContext<MySQLParser::DeclareHandlerContext>(i);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::BlockStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::BlockStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::BlockStatementContext::getRuleIndex() const {
  return MySQLParser::RuleBlockStatement;
}

void MySQLParser::BlockStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement(this);
}

void MySQLParser::BlockStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement(this);
}


antlrcpp::Any MySQLParser::BlockStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitBlockStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::BlockStatementContext* MySQLParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 358, MySQLParser::RuleBlockStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4091);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 587, _ctx)) {
    case 1: {
      setState(4088);
      uid();
      setState(4089);
      match(MySQLParser::COLON_SYMB);
      break;
    }

    }
    setState(4093);
    match(MySQLParser::BEGIN);
    setState(4099);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4094);
        declareVariable();
        setState(4095);
        match(MySQLParser::SEMI); 
      }
      setState(4101);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
    }
    setState(4107);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 589, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4102);
        declareCondition();
        setState(4103);
        match(MySQLParser::SEMI); 
      }
      setState(4109);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 589, _ctx);
    }
    setState(4115);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 590, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4110);
        declareCursor();
        setState(4111);
        match(MySQLParser::SEMI); 
      }
      setState(4117);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 590, _ctx);
    }
    setState(4123);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::DECLARE) {
      setState(4118);
      declareHandler();
      setState(4119);
      match(MySQLParser::SEMI);
      setState(4125);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4129);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 592, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4126);
        procedureSqlStatement(); 
      }
      setState(4131);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 592, _ctx);
    }
    setState(4132);
    match(MySQLParser::END);
    setState(4134);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 593, _ctx)) {
    case 1: {
      setState(4133);
      uid();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseStatementContext ------------------------------------------------------------------

MySQLParser::CaseStatementContext::CaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::CaseStatementContext::CASE() {
  return getTokens(MySQLParser::CASE);
}

tree::TerminalNode* MySQLParser::CaseStatementContext::CASE(size_t i) {
  return getToken(MySQLParser::CASE, i);
}

tree::TerminalNode* MySQLParser::CaseStatementContext::END() {
  return getToken(MySQLParser::END, 0);
}

MySQLParser::UidContext* MySQLParser::CaseStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::CaseStatementContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

std::vector<MySQLParser::CaseAlternativeContext *> MySQLParser::CaseStatementContext::caseAlternative() {
  return getRuleContexts<MySQLParser::CaseAlternativeContext>();
}

MySQLParser::CaseAlternativeContext* MySQLParser::CaseStatementContext::caseAlternative(size_t i) {
  return getRuleContext<MySQLParser::CaseAlternativeContext>(i);
}

tree::TerminalNode* MySQLParser::CaseStatementContext::ELSE() {
  return getToken(MySQLParser::ELSE, 0);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::CaseStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::CaseStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::CaseStatementContext::getRuleIndex() const {
  return MySQLParser::RuleCaseStatement;
}

void MySQLParser::CaseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseStatement(this);
}

void MySQLParser::CaseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseStatement(this);
}


antlrcpp::Any MySQLParser::CaseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCaseStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CaseStatementContext* MySQLParser::caseStatement() {
  CaseStatementContext *_localctx = _tracker.createInstance<CaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 360, MySQLParser::RuleCaseStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4136);
    match(MySQLParser::CASE);
    setState(4139);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 594, _ctx)) {
    case 1: {
      setState(4137);
      uid();
      break;
    }

    case 2: {
      setState(4138);
      expression(0);
      break;
    }

    }
    setState(4142); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4141);
      caseAlternative();
      setState(4144); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySQLParser::WHEN);
    setState(4152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ELSE) {
      setState(4146);
      match(MySQLParser::ELSE);
      setState(4148); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(4147);
                procedureSqlStatement();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(4150); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 596, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    }
    setState(4154);
    match(MySQLParser::END);
    setState(4155);
    match(MySQLParser::CASE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

MySQLParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::IfStatementContext::IF() {
  return getTokens(MySQLParser::IF);
}

tree::TerminalNode* MySQLParser::IfStatementContext::IF(size_t i) {
  return getToken(MySQLParser::IF, i);
}

MySQLParser::ExpressionContext* MySQLParser::IfStatementContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::IfStatementContext::THEN() {
  return getToken(MySQLParser::THEN, 0);
}

tree::TerminalNode* MySQLParser::IfStatementContext::END() {
  return getToken(MySQLParser::END, 0);
}

std::vector<MySQLParser::ElifAlternativeContext *> MySQLParser::IfStatementContext::elifAlternative() {
  return getRuleContexts<MySQLParser::ElifAlternativeContext>();
}

MySQLParser::ElifAlternativeContext* MySQLParser::IfStatementContext::elifAlternative(size_t i) {
  return getRuleContext<MySQLParser::ElifAlternativeContext>(i);
}

tree::TerminalNode* MySQLParser::IfStatementContext::ELSE() {
  return getToken(MySQLParser::ELSE, 0);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::IfStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::IfStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::IfStatementContext::getRuleIndex() const {
  return MySQLParser::RuleIfStatement;
}

void MySQLParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void MySQLParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}


antlrcpp::Any MySQLParser::IfStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIfStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IfStatementContext* MySQLParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 362, MySQLParser::RuleIfStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4157);
    match(MySQLParser::IF);
    setState(4158);
    expression(0);
    setState(4159);
    match(MySQLParser::THEN);
    setState(4161); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4160);
              dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext = procedureSqlStatement();
              dynamic_cast<IfStatementContext *>(_localctx)->thenStatements.push_back(dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4163); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 598, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4168);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::ELSEIF) {
      setState(4165);
      elifAlternative();
      setState(4170);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4177);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ELSE) {
      setState(4171);
      match(MySQLParser::ELSE);
      setState(4173); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(4172);
                dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext = procedureSqlStatement();
                dynamic_cast<IfStatementContext *>(_localctx)->elseStatements.push_back(dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(4175); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 600, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    }
    setState(4179);
    match(MySQLParser::END);
    setState(4180);
    match(MySQLParser::IF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterateStatementContext ------------------------------------------------------------------

MySQLParser::IterateStatementContext::IterateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IterateStatementContext::ITERATE() {
  return getToken(MySQLParser::ITERATE, 0);
}

MySQLParser::UidContext* MySQLParser::IterateStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}


size_t MySQLParser::IterateStatementContext::getRuleIndex() const {
  return MySQLParser::RuleIterateStatement;
}

void MySQLParser::IterateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterateStatement(this);
}

void MySQLParser::IterateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterateStatement(this);
}


antlrcpp::Any MySQLParser::IterateStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIterateStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IterateStatementContext* MySQLParser::iterateStatement() {
  IterateStatementContext *_localctx = _tracker.createInstance<IterateStatementContext>(_ctx, getState());
  enterRule(_localctx, 364, MySQLParser::RuleIterateStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4182);
    match(MySQLParser::ITERATE);
    setState(4183);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeaveStatementContext ------------------------------------------------------------------

MySQLParser::LeaveStatementContext::LeaveStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LeaveStatementContext::LEAVE() {
  return getToken(MySQLParser::LEAVE, 0);
}

MySQLParser::UidContext* MySQLParser::LeaveStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}


size_t MySQLParser::LeaveStatementContext::getRuleIndex() const {
  return MySQLParser::RuleLeaveStatement;
}

void MySQLParser::LeaveStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeaveStatement(this);
}

void MySQLParser::LeaveStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeaveStatement(this);
}


antlrcpp::Any MySQLParser::LeaveStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLeaveStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LeaveStatementContext* MySQLParser::leaveStatement() {
  LeaveStatementContext *_localctx = _tracker.createInstance<LeaveStatementContext>(_ctx, getState());
  enterRule(_localctx, 366, MySQLParser::RuleLeaveStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4185);
    match(MySQLParser::LEAVE);
    setState(4186);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopStatementContext ------------------------------------------------------------------

MySQLParser::LoopStatementContext::LoopStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::LoopStatementContext::LOOP() {
  return getTokens(MySQLParser::LOOP);
}

tree::TerminalNode* MySQLParser::LoopStatementContext::LOOP(size_t i) {
  return getToken(MySQLParser::LOOP, i);
}

tree::TerminalNode* MySQLParser::LoopStatementContext::END() {
  return getToken(MySQLParser::END, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::LoopStatementContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::LoopStatementContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::LoopStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::LoopStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::LoopStatementContext::getRuleIndex() const {
  return MySQLParser::RuleLoopStatement;
}

void MySQLParser::LoopStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoopStatement(this);
}

void MySQLParser::LoopStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoopStatement(this);
}


antlrcpp::Any MySQLParser::LoopStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLoopStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LoopStatementContext* MySQLParser::loopStatement() {
  LoopStatementContext *_localctx = _tracker.createInstance<LoopStatementContext>(_ctx, getState());
  enterRule(_localctx, 368, MySQLParser::RuleLoopStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4191);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(4188);
      uid();
      setState(4189);
      match(MySQLParser::COLON_SYMB);
    }
    setState(4193);
    match(MySQLParser::LOOP);
    setState(4195); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4194);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4197); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 603, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4199);
    match(MySQLParser::END);
    setState(4200);
    match(MySQLParser::LOOP);
    setState(4202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(4201);
      uid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatStatementContext ------------------------------------------------------------------

MySQLParser::RepeatStatementContext::RepeatStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::RepeatStatementContext::REPEAT() {
  return getTokens(MySQLParser::REPEAT);
}

tree::TerminalNode* MySQLParser::RepeatStatementContext::REPEAT(size_t i) {
  return getToken(MySQLParser::REPEAT, i);
}

tree::TerminalNode* MySQLParser::RepeatStatementContext::UNTIL() {
  return getToken(MySQLParser::UNTIL, 0);
}

MySQLParser::ExpressionContext* MySQLParser::RepeatStatementContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::RepeatStatementContext::END() {
  return getToken(MySQLParser::END, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::RepeatStatementContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::RepeatStatementContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::RepeatStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::RepeatStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::RepeatStatementContext::getRuleIndex() const {
  return MySQLParser::RuleRepeatStatement;
}

void MySQLParser::RepeatStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepeatStatement(this);
}

void MySQLParser::RepeatStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepeatStatement(this);
}


antlrcpp::Any MySQLParser::RepeatStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRepeatStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RepeatStatementContext* MySQLParser::repeatStatement() {
  RepeatStatementContext *_localctx = _tracker.createInstance<RepeatStatementContext>(_ctx, getState());
  enterRule(_localctx, 370, MySQLParser::RuleRepeatStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(4204);
      uid();
      setState(4205);
      match(MySQLParser::COLON_SYMB);
    }
    setState(4209);
    match(MySQLParser::REPEAT);
    setState(4211); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4210);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4213); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 606, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4215);
    match(MySQLParser::UNTIL);
    setState(4216);
    expression(0);
    setState(4217);
    match(MySQLParser::END);
    setState(4218);
    match(MySQLParser::REPEAT);
    setState(4220);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(4219);
      uid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

MySQLParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ReturnStatementContext::RETURN() {
  return getToken(MySQLParser::RETURN, 0);
}

MySQLParser::ExpressionContext* MySQLParser::ReturnStatementContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}


size_t MySQLParser::ReturnStatementContext::getRuleIndex() const {
  return MySQLParser::RuleReturnStatement;
}

void MySQLParser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void MySQLParser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}


antlrcpp::Any MySQLParser::ReturnStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ReturnStatementContext* MySQLParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 372, MySQLParser::RuleReturnStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4222);
    match(MySQLParser::RETURN);
    setState(4223);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

MySQLParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::WhileStatementContext::WHILE() {
  return getTokens(MySQLParser::WHILE);
}

tree::TerminalNode* MySQLParser::WhileStatementContext::WHILE(size_t i) {
  return getToken(MySQLParser::WHILE, i);
}

MySQLParser::ExpressionContext* MySQLParser::WhileStatementContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::WhileStatementContext::DO() {
  return getToken(MySQLParser::DO, 0);
}

tree::TerminalNode* MySQLParser::WhileStatementContext::END() {
  return getToken(MySQLParser::END, 0);
}

std::vector<MySQLParser::UidContext *> MySQLParser::WhileStatementContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::WhileStatementContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::WhileStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::WhileStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::WhileStatementContext::getRuleIndex() const {
  return MySQLParser::RuleWhileStatement;
}

void MySQLParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void MySQLParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}


antlrcpp::Any MySQLParser::WhileStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitWhileStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::WhileStatementContext* MySQLParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 374, MySQLParser::RuleWhileStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(4225);
      uid();
      setState(4226);
      match(MySQLParser::COLON_SYMB);
    }
    setState(4230);
    match(MySQLParser::WHILE);
    setState(4231);
    expression(0);
    setState(4232);
    match(MySQLParser::DO);
    setState(4234); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4233);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4236); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 609, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4238);
    match(MySQLParser::END);
    setState(4239);
    match(MySQLParser::WHILE);
    setState(4241);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184))
      | (1ULL << (MySQLParser::SERIAL - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || ((((_la - 252) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 252)) & ((1ULL << (MySQLParser::ACCOUNT - 252))
      | (1ULL << (MySQLParser::ACTION - 252))
      | (1ULL << (MySQLParser::AFTER - 252))
      | (1ULL << (MySQLParser::AGGREGATE - 252))
      | (1ULL << (MySQLParser::ALGORITHM - 252))
      | (1ULL << (MySQLParser::ANY - 252))
      | (1ULL << (MySQLParser::AT - 252))
      | (1ULL << (MySQLParser::AUTHORS - 252))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 252))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 252))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 252))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 252))
      | (1ULL << (MySQLParser::BEGIN - 252))
      | (1ULL << (MySQLParser::BINLOG - 252))
      | (1ULL << (MySQLParser::BIT - 252))
      | (1ULL << (MySQLParser::BLOCK - 252))
      | (1ULL << (MySQLParser::BOOL - 252))
      | (1ULL << (MySQLParser::BOOLEAN - 252))
      | (1ULL << (MySQLParser::BTREE - 252))
      | (1ULL << (MySQLParser::CACHE - 252))
      | (1ULL << (MySQLParser::CASCADED - 252))
      | (1ULL << (MySQLParser::CHAIN - 252))
      | (1ULL << (MySQLParser::CHANGED - 252))
      | (1ULL << (MySQLParser::CHANNEL - 252))
      | (1ULL << (MySQLParser::CHECKSUM - 252))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 252))
      | (1ULL << (MySQLParser::CIPHER - 252))
      | (1ULL << (MySQLParser::CLIENT - 252))
      | (1ULL << (MySQLParser::CLOSE - 252))
      | (1ULL << (MySQLParser::COALESCE - 252))
      | (1ULL << (MySQLParser::CODE - 252))
      | (1ULL << (MySQLParser::COLUMNS - 252))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 252))
      | (1ULL << (MySQLParser::COMMENT - 252))
      | (1ULL << (MySQLParser::COMMIT - 252))
      | (1ULL << (MySQLParser::COMPACT - 252))
      | (1ULL << (MySQLParser::COMPLETION - 252))
      | (1ULL << (MySQLParser::COMPRESSED - 252))
      | (1ULL << (MySQLParser::COMPRESSION - 252))
      | (1ULL << (MySQLParser::CONCURRENT - 252))
      | (1ULL << (MySQLParser::CONNECTION - 252))
      | (1ULL << (MySQLParser::CONSISTENT - 252))
      | (1ULL << (MySQLParser::CONTAINS - 252))
      | (1ULL << (MySQLParser::CONTEXT - 252))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 252))
      | (1ULL << (MySQLParser::COPY - 252))
      | (1ULL << (MySQLParser::CPU - 252))
      | (1ULL << (MySQLParser::DATA - 252))
      | (1ULL << (MySQLParser::DATAFILE - 252))
      | (1ULL << (MySQLParser::DEALLOCATE - 252))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 252))
      | (1ULL << (MySQLParser::DEFINER - 252))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 252))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 252))
      | (1ULL << (MySQLParser::DIRECTORY - 252))
      | (1ULL << (MySQLParser::DISABLE - 252))
      | (1ULL << (MySQLParser::DISCARD - 252))
      | (1ULL << (MySQLParser::DISK - 252))
      | (1ULL << (MySQLParser::DO - 252))
      | (1ULL << (MySQLParser::DUMPFILE - 252))
      | (1ULL << (MySQLParser::DUPLICATE - 252))
      | (1ULL << (MySQLParser::DYNAMIC - 252))
      | (1ULL << (MySQLParser::ENABLE - 252))
      | (1ULL << (MySQLParser::ENCRYPTION - 252)))) != 0) || ((((_la - 316) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 316)) & ((1ULL << (MySQLParser::END - 316))
      | (1ULL << (MySQLParser::ENDS - 316))
      | (1ULL << (MySQLParser::ENGINE - 316))
      | (1ULL << (MySQLParser::ENGINES - 316))
      | (1ULL << (MySQLParser::ERROR - 316))
      | (1ULL << (MySQLParser::ERRORS - 316))
      | (1ULL << (MySQLParser::ESCAPE - 316))
      | (1ULL << (MySQLParser::EVEN - 316))
      | (1ULL << (MySQLParser::EVENT - 316))
      | (1ULL << (MySQLParser::EVENTS - 316))
      | (1ULL << (MySQLParser::EVERY - 316))
      | (1ULL << (MySQLParser::EXCHANGE - 316))
      | (1ULL << (MySQLParser::EXCLUSIVE - 316))
      | (1ULL << (MySQLParser::EXPIRE - 316))
      | (1ULL << (MySQLParser::EXPORT - 316))
      | (1ULL << (MySQLParser::EXTENDED - 316))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 316))
      | (1ULL << (MySQLParser::FAST - 316))
      | (1ULL << (MySQLParser::FAULTS - 316))
      | (1ULL << (MySQLParser::FIELDS - 316))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::FILTER - 316))
      | (1ULL << (MySQLParser::FIRST - 316))
      | (1ULL << (MySQLParser::FIXED - 316))
      | (1ULL << (MySQLParser::FLUSH - 316))
      | (1ULL << (MySQLParser::FOLLOWS - 316))
      | (1ULL << (MySQLParser::FOUND - 316))
      | (1ULL << (MySQLParser::FULL - 316))
      | (1ULL << (MySQLParser::FUNCTION - 316))
      | (1ULL << (MySQLParser::GENERAL - 316))
      | (1ULL << (MySQLParser::GLOBAL - 316))
      | (1ULL << (MySQLParser::GRANTS - 316))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 316))
      | (1ULL << (MySQLParser::HANDLER - 316))
      | (1ULL << (MySQLParser::HASH - 316))
      | (1ULL << (MySQLParser::HELP - 316))
      | (1ULL << (MySQLParser::HOST - 316))
      | (1ULL << (MySQLParser::HOSTS - 316))
      | (1ULL << (MySQLParser::IDENTIFIED - 316))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 316))
      | (1ULL << (MySQLParser::IMPORT - 316))
      | (1ULL << (MySQLParser::INDEXES - 316))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 316))
      | (1ULL << (MySQLParser::INPLACE - 316))
      | (1ULL << (MySQLParser::INSERT_METHOD - 316))
      | (1ULL << (MySQLParser::INSTALL - 316))
      | (1ULL << (MySQLParser::INSTANCE - 316))
      | (1ULL << (MySQLParser::INVISIBLE - 316))
      | (1ULL << (MySQLParser::INVOKER - 316))
      | (1ULL << (MySQLParser::IO - 316))
      | (1ULL << (MySQLParser::IO_THREAD - 316))
      | (1ULL << (MySQLParser::IPC - 316))
      | (1ULL << (MySQLParser::ISOLATION - 316))
      | (1ULL << (MySQLParser::ISSUER - 316))
      | (1ULL << (MySQLParser::JSON - 316))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 316))
      | (1ULL << (MySQLParser::LANGUAGE - 316))
      | (1ULL << (MySQLParser::LAST - 316))
      | (1ULL << (MySQLParser::LEAVES - 316))
      | (1ULL << (MySQLParser::LESS - 316))
      | (1ULL << (MySQLParser::LEVEL - 316))
      | (1ULL << (MySQLParser::LIST - 316))
      | (1ULL << (MySQLParser::LOCAL - 316))
      | (1ULL << (MySQLParser::LOGFILE - 316)))) != 0) || ((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (MySQLParser::LOGS - 380))
      | (1ULL << (MySQLParser::MASTER - 380))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 380))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 380))
      | (1ULL << (MySQLParser::MASTER_DELAY - 380))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 380))
      | (1ULL << (MySQLParser::MASTER_HOST - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 380))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 380))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 380))
      | (1ULL << (MySQLParser::MASTER_PORT - 380))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRL - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 380))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 380))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 380))
      | (1ULL << (MySQLParser::MASTER_USER - 380))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_ROWS - 380))
      | (1ULL << (MySQLParser::MAX_SIZE - 380))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 380))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 380))
      | (1ULL << (MySQLParser::MEDIUM - 380))
      | (1ULL << (MySQLParser::MERGE - 380))
      | (1ULL << (MySQLParser::MID - 380))
      | (1ULL << (MySQLParser::MIGRATE - 380))
      | (1ULL << (MySQLParser::MIN_ROWS - 380))
      | (1ULL << (MySQLParser::MODE - 380))
      | (1ULL << (MySQLParser::MODIFY - 380))
      | (1ULL << (MySQLParser::MUTEX - 380))
      | (1ULL << (MySQLParser::MYSQL - 380))
      | (1ULL << (MySQLParser::NAME - 380))
      | (1ULL << (MySQLParser::NAMES - 380))
      | (1ULL << (MySQLParser::NCHAR - 380))
      | (1ULL << (MySQLParser::NEVER - 380))
      | (1ULL << (MySQLParser::NEXT - 380))
      | (1ULL << (MySQLParser::NO - 380))
      | (1ULL << (MySQLParser::NODEGROUP - 380))
      | (1ULL << (MySQLParser::NONE - 380))
      | (1ULL << (MySQLParser::OFFLINE - 380))
      | (1ULL << (MySQLParser::OFFSET - 380))
      | (1ULL << (MySQLParser::OJ - 380))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 380))
      | (1ULL << (MySQLParser::ONE - 380))
      | (1ULL << (MySQLParser::ONLINE - 380))
      | (1ULL << (MySQLParser::ONLY - 380))
      | (1ULL << (MySQLParser::OPEN - 380))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 380))
      | (1ULL << (MySQLParser::OPTIONS - 380))
      | (1ULL << (MySQLParser::OWNER - 380))
      | (1ULL << (MySQLParser::PACK_KEYS - 380))
      | (1ULL << (MySQLParser::PAGE - 380))
      | (1ULL << (MySQLParser::PARSER - 380))
      | (1ULL << (MySQLParser::PARTIAL - 380))
      | (1ULL << (MySQLParser::PARTITIONING - 380))
      | (1ULL << (MySQLParser::PARTITIONS - 380))
      | (1ULL << (MySQLParser::PASSWORD - 380))
      | (1ULL << (MySQLParser::PHASE - 380)))) != 0) || ((((_la - 444) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 444)) & ((1ULL << (MySQLParser::PLUGIN - 444))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 444))
      | (1ULL << (MySQLParser::PLUGINS - 444))
      | (1ULL << (MySQLParser::PORT - 444))
      | (1ULL << (MySQLParser::PRECEDES - 444))
      | (1ULL << (MySQLParser::PREPARE - 444))
      | (1ULL << (MySQLParser::PRESERVE - 444))
      | (1ULL << (MySQLParser::PREV - 444))
      | (1ULL << (MySQLParser::PROCESSLIST - 444))
      | (1ULL << (MySQLParser::PROFILE - 444))
      | (1ULL << (MySQLParser::PROFILES - 444))
      | (1ULL << (MySQLParser::PROXY - 444))
      | (1ULL << (MySQLParser::QUERY - 444))
      | (1ULL << (MySQLParser::QUICK - 444))
      | (1ULL << (MySQLParser::REBUILD - 444))
      | (1ULL << (MySQLParser::RECOVER - 444))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 444))
      | (1ULL << (MySQLParser::REDUNDANT - 444))
      | (1ULL << (MySQLParser::RELAY - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 444))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 444))
      | (1ULL << (MySQLParser::RELAYLOG - 444))
      | (1ULL << (MySQLParser::REMOVE - 444))
      | (1ULL << (MySQLParser::REORGANIZE - 444))
      | (1ULL << (MySQLParser::REPAIR - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 444))
      | (1ULL << (MySQLParser::REPLICATION - 444))
      | (1ULL << (MySQLParser::RESET - 444))
      | (1ULL << (MySQLParser::RESUME - 444))
      | (1ULL << (MySQLParser::RETURNS - 444))
      | (1ULL << (MySQLParser::ROLLBACK - 444))
      | (1ULL << (MySQLParser::ROLLUP - 444))
      | (1ULL << (MySQLParser::ROTATE - 444))
      | (1ULL << (MySQLParser::ROW - 444))
      | (1ULL << (MySQLParser::ROWS - 444))
      | (1ULL << (MySQLParser::ROW_FORMAT - 444))
      | (1ULL << (MySQLParser::SAVEPOINT - 444))
      | (1ULL << (MySQLParser::SCHEDULE - 444))
      | (1ULL << (MySQLParser::SECURITY - 444))
      | (1ULL << (MySQLParser::SERVER - 444))
      | (1ULL << (MySQLParser::SESSION - 444))
      | (1ULL << (MySQLParser::SHARE - 444))
      | (1ULL << (MySQLParser::SHARED - 444))
      | (1ULL << (MySQLParser::SIGNED - 444))
      | (1ULL << (MySQLParser::SIMPLE - 444))
      | (1ULL << (MySQLParser::SLAVE - 444))
      | (1ULL << (MySQLParser::SLOW - 444))
      | (1ULL << (MySQLParser::SNAPSHOT - 444))
      | (1ULL << (MySQLParser::SOCKET - 444))
      | (1ULL << (MySQLParser::SOME - 444))
      | (1ULL << (MySQLParser::SONAME - 444))
      | (1ULL << (MySQLParser::SOUNDS - 444))
      | (1ULL << (MySQLParser::SOURCE - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 444))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 444))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 444))
      | (1ULL << (MySQLParser::SQL_CACHE - 444)))) != 0) || ((((_la - 508) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 508)) & ((1ULL << (MySQLParser::SQL_NO_CACHE - 508))
      | (1ULL << (MySQLParser::SQL_THREAD - 508))
      | (1ULL << (MySQLParser::START - 508))
      | (1ULL << (MySQLParser::STARTS - 508))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 508))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 508))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 508))
      | (1ULL << (MySQLParser::STATUS - 508))
      | (1ULL << (MySQLParser::STOP - 508))
      | (1ULL << (MySQLParser::STORAGE - 508))
      | (1ULL << (MySQLParser::STRING - 508))
      | (1ULL << (MySQLParser::SUBJECT - 508))
      | (1ULL << (MySQLParser::SUBPARTITION - 508))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 508))
      | (1ULL << (MySQLParser::SUSPEND - 508))
      | (1ULL << (MySQLParser::SWAPS - 508))
      | (1ULL << (MySQLParser::SWITCHES - 508))
      | (1ULL << (MySQLParser::TABLESPACE - 508))
      | (1ULL << (MySQLParser::TEMPORARY - 508))
      | (1ULL << (MySQLParser::TEMPTABLE - 508))
      | (1ULL << (MySQLParser::THAN - 508))
      | (1ULL << (MySQLParser::TRADITIONAL - 508))
      | (1ULL << (MySQLParser::TRANSACTION - 508))
      | (1ULL << (MySQLParser::TRIGGERS - 508))
      | (1ULL << (MySQLParser::TRUNCATE - 508))
      | (1ULL << (MySQLParser::UNDEFINED - 508))
      | (1ULL << (MySQLParser::UNDOFILE - 508))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 508))
      | (1ULL << (MySQLParser::UNINSTALL - 508))
      | (1ULL << (MySQLParser::UNKNOWN - 508))
      | (1ULL << (MySQLParser::UNTIL - 508))
      | (1ULL << (MySQLParser::UPGRADE - 508))
      | (1ULL << (MySQLParser::USER - 508))
      | (1ULL << (MySQLParser::USE_FRM - 508))
      | (1ULL << (MySQLParser::USER_RESOURCES - 508))
      | (1ULL << (MySQLParser::VALIDATION - 508))
      | (1ULL << (MySQLParser::VALUE - 508))
      | (1ULL << (MySQLParser::VARIABLES - 508))
      | (1ULL << (MySQLParser::VIEW - 508))
      | (1ULL << (MySQLParser::VISIBLE - 508))
      | (1ULL << (MySQLParser::WAIT - 508))
      | (1ULL << (MySQLParser::WARNINGS - 508))
      | (1ULL << (MySQLParser::WITHOUT - 508))
      | (1ULL << (MySQLParser::WORK - 508))
      | (1ULL << (MySQLParser::WRAPPER - 508))
      | (1ULL << (MySQLParser::X509 - 508))
      | (1ULL << (MySQLParser::XA - 508))
      | (1ULL << (MySQLParser::XML - 508))
      | (1ULL << (MySQLParser::INTERNAL - 508))
      | (1ULL << (MySQLParser::QUARTER - 508))
      | (1ULL << (MySQLParser::MONTH - 508))
      | (1ULL << (MySQLParser::DAY - 508))
      | (1ULL << (MySQLParser::HOUR - 508))
      | (1ULL << (MySQLParser::MINUTE - 508))
      | (1ULL << (MySQLParser::WEEK - 508))
      | (1ULL << (MySQLParser::SECOND - 508))
      | (1ULL << (MySQLParser::MICROSECOND - 508))
      | (1ULL << (MySQLParser::TABLES - 508)))) != 0) || ((((_la - 572) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 572)) & ((1ULL << (MySQLParser::ROUTINE - 572))
      | (1ULL << (MySQLParser::EXECUTE - 572))
      | (1ULL << (MySQLParser::FILE - 572))
      | (1ULL << (MySQLParser::PROCESS - 572))
      | (1ULL << (MySQLParser::RELOAD - 572))
      | (1ULL << (MySQLParser::SHUTDOWN - 572))
      | (1ULL << (MySQLParser::SUPER - 572))
      | (1ULL << (MySQLParser::PRIVILEGES - 572))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 572))
      | (1ULL << (MySQLParser::ARMSCII8 - 572))
      | (1ULL << (MySQLParser::ASCII - 572))
      | (1ULL << (MySQLParser::BIG5 - 572))
      | (1ULL << (MySQLParser::CP1250 - 572))
      | (1ULL << (MySQLParser::CP1251 - 572))
      | (1ULL << (MySQLParser::CP1256 - 572))
      | (1ULL << (MySQLParser::CP1257 - 572))
      | (1ULL << (MySQLParser::CP850 - 572))
      | (1ULL << (MySQLParser::CP852 - 572))
      | (1ULL << (MySQLParser::CP866 - 572))
      | (1ULL << (MySQLParser::CP932 - 572))
      | (1ULL << (MySQLParser::DEC8 - 572))
      | (1ULL << (MySQLParser::EUCJPMS - 572))
      | (1ULL << (MySQLParser::EUCKR - 572))
      | (1ULL << (MySQLParser::GB2312 - 572))
      | (1ULL << (MySQLParser::GBK - 572))
      | (1ULL << (MySQLParser::GEOSTD8 - 572))
      | (1ULL << (MySQLParser::GREEK - 572))
      | (1ULL << (MySQLParser::HEBREW - 572))
      | (1ULL << (MySQLParser::HP8 - 572))
      | (1ULL << (MySQLParser::KEYBCS2 - 572))
      | (1ULL << (MySQLParser::KOI8R - 572))
      | (1ULL << (MySQLParser::KOI8U - 572))
      | (1ULL << (MySQLParser::LATIN1 - 572))
      | (1ULL << (MySQLParser::LATIN2 - 572))
      | (1ULL << (MySQLParser::LATIN5 - 572))
      | (1ULL << (MySQLParser::LATIN7 - 572))
      | (1ULL << (MySQLParser::MACCE - 572))
      | (1ULL << (MySQLParser::MACROMAN - 572))
      | (1ULL << (MySQLParser::SJIS - 572))
      | (1ULL << (MySQLParser::SWE7 - 572))
      | (1ULL << (MySQLParser::TIS620 - 572))
      | (1ULL << (MySQLParser::UCS2 - 572))
      | (1ULL << (MySQLParser::UJIS - 572))
      | (1ULL << (MySQLParser::UTF16 - 572))
      | (1ULL << (MySQLParser::UTF16LE - 572))
      | (1ULL << (MySQLParser::UTF32 - 572))
      | (1ULL << (MySQLParser::UTF8 - 572))
      | (1ULL << (MySQLParser::UTF8MB3 - 572))
      | (1ULL << (MySQLParser::UTF8MB4 - 572))
      | (1ULL << (MySQLParser::ARCHIVE - 572))
      | (1ULL << (MySQLParser::BLACKHOLE - 572))
      | (1ULL << (MySQLParser::CSV - 572))
      | (1ULL << (MySQLParser::FEDERATED - 572))
      | (1ULL << (MySQLParser::INNODB - 572))
      | (1ULL << (MySQLParser::MEMORY - 572))
      | (1ULL << (MySQLParser::MRG_MYISAM - 572))
      | (1ULL << (MySQLParser::MYISAM - 572))
      | (1ULL << (MySQLParser::NDB - 572))
      | (1ULL << (MySQLParser::NDBCLUSTER - 572))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 572))
      | (1ULL << (MySQLParser::TOKUDB - 572))
      | (1ULL << (MySQLParser::REPEATABLE - 572))
      | (1ULL << (MySQLParser::COMMITTED - 572))
      | (1ULL << (MySQLParser::UNCOMMITTED - 572)))) != 0) || ((((_la - 636) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 636)) & ((1ULL << (MySQLParser::SERIALIZABLE - 636))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 636))
      | (1ULL << (MySQLParser::LINESTRING - 636))
      | (1ULL << (MySQLParser::MULTILINESTRING - 636))
      | (1ULL << (MySQLParser::MULTIPOINT - 636))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 636))
      | (1ULL << (MySQLParser::POINT - 636))
      | (1ULL << (MySQLParser::POLYGON - 636))
      | (1ULL << (MySQLParser::ABS - 636))
      | (1ULL << (MySQLParser::ACOS - 636))
      | (1ULL << (MySQLParser::ADDDATE - 636))
      | (1ULL << (MySQLParser::ADDTIME - 636))
      | (1ULL << (MySQLParser::AES_DECRYPT - 636))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 636))
      | (1ULL << (MySQLParser::AREA - 636))
      | (1ULL << (MySQLParser::ASBINARY - 636))
      | (1ULL << (MySQLParser::ASIN - 636))
      | (1ULL << (MySQLParser::ASTEXT - 636))
      | (1ULL << (MySQLParser::ASWKB - 636))
      | (1ULL << (MySQLParser::ASWKT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 636))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 636))
      | (1ULL << (MySQLParser::ATAN - 636))
      | (1ULL << (MySQLParser::ATAN2 - 636))
      | (1ULL << (MySQLParser::BENCHMARK - 636))
      | (1ULL << (MySQLParser::BIN - 636))
      | (1ULL << (MySQLParser::BIT_COUNT - 636))
      | (1ULL << (MySQLParser::BIT_LENGTH - 636))
      | (1ULL << (MySQLParser::BUFFER - 636))
      | (1ULL << (MySQLParser::CEIL - 636))
      | (1ULL << (MySQLParser::CEILING - 636))
      | (1ULL << (MySQLParser::CENTROID - 636))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 636))
      | (1ULL << (MySQLParser::CHARSET - 636))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 636))
      | (1ULL << (MySQLParser::COERCIBILITY - 636))
      | (1ULL << (MySQLParser::COLLATION - 636))
      | (1ULL << (MySQLParser::COMPRESS - 636))
      | (1ULL << (MySQLParser::CONCAT - 636))
      | (1ULL << (MySQLParser::CONCAT_WS - 636))
      | (1ULL << (MySQLParser::CONNECTION_ID - 636))
      | (1ULL << (MySQLParser::CONV - 636))
      | (1ULL << (MySQLParser::CONVERT_TZ - 636))
      | (1ULL << (MySQLParser::COS - 636))
      | (1ULL << (MySQLParser::COT - 636))
      | (1ULL << (MySQLParser::CRC32 - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 636))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 636))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 636))
      | (1ULL << (MySQLParser::CROSSES - 636))
      | (1ULL << (MySQLParser::DATEDIFF - 636))
      | (1ULL << (MySQLParser::DATE_FORMAT - 636))
      | (1ULL << (MySQLParser::DAYNAME - 636))
      | (1ULL << (MySQLParser::DAYOFMONTH - 636))
      | (1ULL << (MySQLParser::DAYOFWEEK - 636))
      | (1ULL << (MySQLParser::DAYOFYEAR - 636))
      | (1ULL << (MySQLParser::DECODE - 636))
      | (1ULL << (MySQLParser::DEGREES - 636)))) != 0) || ((((_la - 700) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 700)) & ((1ULL << (MySQLParser::DES_DECRYPT - 700))
      | (1ULL << (MySQLParser::DES_ENCRYPT - 700))
      | (1ULL << (MySQLParser::DIMENSION - 700))
      | (1ULL << (MySQLParser::DISJOINT - 700))
      | (1ULL << (MySQLParser::ELT - 700))
      | (1ULL << (MySQLParser::ENCODE - 700))
      | (1ULL << (MySQLParser::ENCRYPT - 700))
      | (1ULL << (MySQLParser::ENDPOINT - 700))
      | (1ULL << (MySQLParser::ENVELOPE - 700))
      | (1ULL << (MySQLParser::EQUALS - 700))
      | (1ULL << (MySQLParser::EXP - 700))
      | (1ULL << (MySQLParser::EXPORT_SET - 700))
      | (1ULL << (MySQLParser::EXTERIORRING - 700))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 700))
      | (1ULL << (MySQLParser::FIELD - 700))
      | (1ULL << (MySQLParser::FIND_IN_SET - 700))
      | (1ULL << (MySQLParser::FLOOR - 700))
      | (1ULL << (MySQLParser::FORMAT - 700))
      | (1ULL << (MySQLParser::FOUND_ROWS - 700))
      | (1ULL << (MySQLParser::FROM_BASE64 - 700))
      | (1ULL << (MySQLParser::FROM_DAYS - 700))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 700))
      | (1ULL << (MySQLParser::GEOMETRYN - 700))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 700))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 700))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 700))
      | (1ULL << (MySQLParser::GET_FORMAT - 700))
      | (1ULL << (MySQLParser::GET_LOCK - 700))
      | (1ULL << (MySQLParser::GLENGTH - 700))
      | (1ULL << (MySQLParser::GREATEST - 700))
      | (1ULL << (MySQLParser::GTID_SUBSET - 700))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 700))
      | (1ULL << (MySQLParser::HEX - 700))
      | (1ULL << (MySQLParser::IFNULL - 700))
      | (1ULL << (MySQLParser::INET6_ATON - 700))
      | (1ULL << (MySQLParser::INET6_NTOA - 700))
      | (1ULL << (MySQLParser::INET_ATON - 700))
      | (1ULL << (MySQLParser::INET_NTOA - 700))
      | (1ULL << (MySQLParser::INSTR - 700))
      | (1ULL << (MySQLParser::INTERIORRINGN - 700))
      | (1ULL << (MySQLParser::INTERSECTS - 700))
      | (1ULL << (MySQLParser::ISCLOSED - 700))
      | (1ULL << (MySQLParser::ISEMPTY - 700))
      | (1ULL << (MySQLParser::ISNULL - 700))
      | (1ULL << (MySQLParser::ISSIMPLE - 700))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 700))
      | (1ULL << (MySQLParser::IS_IPV4 - 700))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 700))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 700))
      | (1ULL << (MySQLParser::IS_IPV6 - 700))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 700))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 700))
      | (1ULL << (MySQLParser::LCASE - 700))
      | (1ULL << (MySQLParser::LEAST - 700))
      | (1ULL << (MySQLParser::LENGTH - 700))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 700))
      | (1ULL << (MySQLParser::LINEFROMWKB - 700))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 700)))) != 0) || ((((_la - 764) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 764)) & ((1ULL << (MySQLParser::LINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::LN - 764))
      | (1ULL << (MySQLParser::LOAD_FILE - 764))
      | (1ULL << (MySQLParser::LOCATE - 764))
      | (1ULL << (MySQLParser::LOG - 764))
      | (1ULL << (MySQLParser::LOG10 - 764))
      | (1ULL << (MySQLParser::LOG2 - 764))
      | (1ULL << (MySQLParser::LOWER - 764))
      | (1ULL << (MySQLParser::LPAD - 764))
      | (1ULL << (MySQLParser::LTRIM - 764))
      | (1ULL << (MySQLParser::MAKEDATE - 764))
      | (1ULL << (MySQLParser::MAKETIME - 764))
      | (1ULL << (MySQLParser::MAKE_SET - 764))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 764))
      | (1ULL << (MySQLParser::MBRCONTAINS - 764))
      | (1ULL << (MySQLParser::MBRDISJOINT - 764))
      | (1ULL << (MySQLParser::MBREQUAL - 764))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 764))
      | (1ULL << (MySQLParser::MBROVERLAPS - 764))
      | (1ULL << (MySQLParser::MBRTOUCHES - 764))
      | (1ULL << (MySQLParser::MBRWITHIN - 764))
      | (1ULL << (MySQLParser::MD5 - 764))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 764))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 764))
      | (1ULL << (MySQLParser::MONTHNAME - 764))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::NAME_CONST - 764))
      | (1ULL << (MySQLParser::NULLIF - 764))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 764))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 764))
      | (1ULL << (MySQLParser::NUMPOINTS - 764))
      | (1ULL << (MySQLParser::OCT - 764))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 764))
      | (1ULL << (MySQLParser::ORD - 764))
      | (1ULL << (MySQLParser::OVERLAPS - 764))
      | (1ULL << (MySQLParser::PERIOD_ADD - 764))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 764))
      | (1ULL << (MySQLParser::PI - 764))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 764))
      | (1ULL << (MySQLParser::POINTFROMWKB - 764))
      | (1ULL << (MySQLParser::POINTN - 764))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYFROMWKB - 764))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 764))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 764))
      | (1ULL << (MySQLParser::POW - 764))
      | (1ULL << (MySQLParser::POWER - 764))
      | (1ULL << (MySQLParser::QUOTE - 764))
      | (1ULL << (MySQLParser::RADIANS - 764))
      | (1ULL << (MySQLParser::RAND - 764))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 764))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 764))
      | (1ULL << (MySQLParser::REVERSE - 764))
      | (1ULL << (MySQLParser::ROUND - 764))
      | (1ULL << (MySQLParser::ROW_COUNT - 764)))) != 0) || ((((_la - 828) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 828)) & ((1ULL << (MySQLParser::RPAD - 828))
      | (1ULL << (MySQLParser::RTRIM - 828))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 828))
      | (1ULL << (MySQLParser::SESSION_USER - 828))
      | (1ULL << (MySQLParser::SHA - 828))
      | (1ULL << (MySQLParser::SHA1 - 828))
      | (1ULL << (MySQLParser::SHA2 - 828))
      | (1ULL << (MySQLParser::SIGN - 828))
      | (1ULL << (MySQLParser::SIN - 828))
      | (1ULL << (MySQLParser::SLEEP - 828))
      | (1ULL << (MySQLParser::SOUNDEX - 828))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 828))
      | (1ULL << (MySQLParser::SQRT - 828))
      | (1ULL << (MySQLParser::SRID - 828))
      | (1ULL << (MySQLParser::STARTPOINT - 828))
      | (1ULL << (MySQLParser::STRCMP - 828))
      | (1ULL << (MySQLParser::STR_TO_DATE - 828))
      | (1ULL << (MySQLParser::ST_AREA - 828))
      | (1ULL << (MySQLParser::ST_ASBINARY - 828))
      | (1ULL << (MySQLParser::ST_ASTEXT - 828))
      | (1ULL << (MySQLParser::ST_ASWKB - 828))
      | (1ULL << (MySQLParser::ST_ASWKT - 828))
      | (1ULL << (MySQLParser::ST_BUFFER - 828))
      | (1ULL << (MySQLParser::ST_CENTROID - 828))
      | (1ULL << (MySQLParser::ST_CONTAINS - 828))
      | (1ULL << (MySQLParser::ST_CROSSES - 828))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 828))
      | (1ULL << (MySQLParser::ST_DIMENSION - 828))
      | (1ULL << (MySQLParser::ST_DISJOINT - 828))
      | (1ULL << (MySQLParser::ST_DISTANCE - 828))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 828))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 828))
      | (1ULL << (MySQLParser::ST_EQUALS - 828))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 828))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 828))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 828))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 828))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 828))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 828))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 828))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 828))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 828))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 828))
      | (1ULL << (MySQLParser::ST_POINTN - 828))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 828)))) != 0) || ((((_la - 892) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 892)) & ((1ULL << (MySQLParser::ST_POLYFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 892))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 892))
      | (1ULL << (MySQLParser::ST_SRID - 892))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 892))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 892))
      | (1ULL << (MySQLParser::ST_TOUCHES - 892))
      | (1ULL << (MySQLParser::ST_UNION - 892))
      | (1ULL << (MySQLParser::ST_WITHIN - 892))
      | (1ULL << (MySQLParser::ST_X - 892))
      | (1ULL << (MySQLParser::ST_Y - 892))
      | (1ULL << (MySQLParser::SUBDATE - 892))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 892))
      | (1ULL << (MySQLParser::SUBTIME - 892))
      | (1ULL << (MySQLParser::SYSTEM_USER - 892))
      | (1ULL << (MySQLParser::TAN - 892))
      | (1ULL << (MySQLParser::TIMEDIFF - 892))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 892))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 892))
      | (1ULL << (MySQLParser::TIME_FORMAT - 892))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 892))
      | (1ULL << (MySQLParser::TOUCHES - 892))
      | (1ULL << (MySQLParser::TO_BASE64 - 892))
      | (1ULL << (MySQLParser::TO_DAYS - 892))
      | (1ULL << (MySQLParser::TO_SECONDS - 892))
      | (1ULL << (MySQLParser::UCASE - 892))
      | (1ULL << (MySQLParser::UNCOMPRESS - 892))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 892))
      | (1ULL << (MySQLParser::UNHEX - 892))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 892))
      | (1ULL << (MySQLParser::UPDATEXML - 892))
      | (1ULL << (MySQLParser::UPPER - 892))
      | (1ULL << (MySQLParser::UUID - 892))
      | (1ULL << (MySQLParser::UUID_SHORT - 892))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 892))
      | (1ULL << (MySQLParser::VERSION - 892))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 892))
      | (1ULL << (MySQLParser::WEEKDAY - 892))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 892))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 892))
      | (1ULL << (MySQLParser::WITHIN - 892))
      | (1ULL << (MySQLParser::YEARWEEK - 892))
      | (1ULL << (MySQLParser::Y_FUNCTION - 892))
      | (1ULL << (MySQLParser::X_FUNCTION - 892)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 974))
      | (1ULL << (MySQLParser::STRING_LITERAL - 974))
      | (1ULL << (MySQLParser::ID - 974))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 974)))) != 0)) {
      setState(4240);
      uid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CursorStatementContext ------------------------------------------------------------------

MySQLParser::CursorStatementContext::CursorStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::CursorStatementContext::getRuleIndex() const {
  return MySQLParser::RuleCursorStatement;
}

void MySQLParser::CursorStatementContext::copyFrom(CursorStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CloseCursorContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CloseCursorContext::CLOSE() {
  return getToken(MySQLParser::CLOSE, 0);
}

MySQLParser::UidContext* MySQLParser::CloseCursorContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::CloseCursorContext::CloseCursorContext(CursorStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::CloseCursorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseCursor(this);
}
void MySQLParser::CloseCursorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseCursor(this);
}

antlrcpp::Any MySQLParser::CloseCursorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCloseCursor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OpenCursorContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::OpenCursorContext::OPEN() {
  return getToken(MySQLParser::OPEN, 0);
}

MySQLParser::UidContext* MySQLParser::OpenCursorContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::OpenCursorContext::OpenCursorContext(CursorStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::OpenCursorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenCursor(this);
}
void MySQLParser::OpenCursorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenCursor(this);
}

antlrcpp::Any MySQLParser::OpenCursorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitOpenCursor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FetchCursorContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::FetchCursorContext::FETCH() {
  return getToken(MySQLParser::FETCH, 0);
}

MySQLParser::UidContext* MySQLParser::FetchCursorContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::FetchCursorContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

MySQLParser::UidListContext* MySQLParser::FetchCursorContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::FetchCursorContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

tree::TerminalNode* MySQLParser::FetchCursorContext::NEXT() {
  return getToken(MySQLParser::NEXT, 0);
}

MySQLParser::FetchCursorContext::FetchCursorContext(CursorStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::FetchCursorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFetchCursor(this);
}
void MySQLParser::FetchCursorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFetchCursor(this);
}

antlrcpp::Any MySQLParser::FetchCursorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFetchCursor(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::CursorStatementContext* MySQLParser::cursorStatement() {
  CursorStatementContext *_localctx = _tracker.createInstance<CursorStatementContext>(_ctx, getState());
  enterRule(_localctx, 376, MySQLParser::RuleCursorStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4258);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::CLOSE: {
        _localctx = dynamic_cast<CursorStatementContext *>(_tracker.createInstance<MySQLParser::CloseCursorContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4243);
        match(MySQLParser::CLOSE);
        setState(4244);
        uid();
        break;
      }

      case MySQLParser::FETCH: {
        _localctx = dynamic_cast<CursorStatementContext *>(_tracker.createInstance<MySQLParser::FetchCursorContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4245);
        match(MySQLParser::FETCH);
        setState(4250);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 612, _ctx)) {
        case 1: {
          setState(4247);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::NEXT) {
            setState(4246);
            match(MySQLParser::NEXT);
          }
          setState(4249);
          match(MySQLParser::FROM);
          break;
        }

        }
        setState(4252);
        uid();
        setState(4253);
        match(MySQLParser::INTO);
        setState(4254);
        uidList();
        break;
      }

      case MySQLParser::OPEN: {
        _localctx = dynamic_cast<CursorStatementContext *>(_tracker.createInstance<MySQLParser::OpenCursorContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(4256);
        match(MySQLParser::OPEN);
        setState(4257);
        uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareVariableContext ------------------------------------------------------------------

MySQLParser::DeclareVariableContext::DeclareVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DeclareVariableContext::DECLARE() {
  return getToken(MySQLParser::DECLARE, 0);
}

MySQLParser::UidListContext* MySQLParser::DeclareVariableContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

MySQLParser::DataTypeContext* MySQLParser::DeclareVariableContext::dataType() {
  return getRuleContext<MySQLParser::DataTypeContext>(0);
}

tree::TerminalNode* MySQLParser::DeclareVariableContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::DefaultValueContext* MySQLParser::DeclareVariableContext::defaultValue() {
  return getRuleContext<MySQLParser::DefaultValueContext>(0);
}


size_t MySQLParser::DeclareVariableContext::getRuleIndex() const {
  return MySQLParser::RuleDeclareVariable;
}

void MySQLParser::DeclareVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclareVariable(this);
}

void MySQLParser::DeclareVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclareVariable(this);
}


antlrcpp::Any MySQLParser::DeclareVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclareVariable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DeclareVariableContext* MySQLParser::declareVariable() {
  DeclareVariableContext *_localctx = _tracker.createInstance<DeclareVariableContext>(_ctx, getState());
  enterRule(_localctx, 378, MySQLParser::RuleDeclareVariable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4260);
    match(MySQLParser::DECLARE);
    setState(4261);
    uidList();
    setState(4262);
    dataType();
    setState(4265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::DEFAULT) {
      setState(4263);
      match(MySQLParser::DEFAULT);
      setState(4264);
      defaultValue();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareConditionContext ------------------------------------------------------------------

MySQLParser::DeclareConditionContext::DeclareConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DeclareConditionContext::DECLARE() {
  return getToken(MySQLParser::DECLARE, 0);
}

MySQLParser::UidContext* MySQLParser::DeclareConditionContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::DeclareConditionContext::CONDITION() {
  return getToken(MySQLParser::CONDITION, 0);
}

tree::TerminalNode* MySQLParser::DeclareConditionContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::DeclareConditionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::DeclareConditionContext::SQLSTATE() {
  return getToken(MySQLParser::SQLSTATE, 0);
}

tree::TerminalNode* MySQLParser::DeclareConditionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::DeclareConditionContext::VALUE() {
  return getToken(MySQLParser::VALUE, 0);
}


size_t MySQLParser::DeclareConditionContext::getRuleIndex() const {
  return MySQLParser::RuleDeclareCondition;
}

void MySQLParser::DeclareConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclareCondition(this);
}

void MySQLParser::DeclareConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclareCondition(this);
}


antlrcpp::Any MySQLParser::DeclareConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclareCondition(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DeclareConditionContext* MySQLParser::declareCondition() {
  DeclareConditionContext *_localctx = _tracker.createInstance<DeclareConditionContext>(_ctx, getState());
  enterRule(_localctx, 380, MySQLParser::RuleDeclareCondition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4267);
    match(MySQLParser::DECLARE);
    setState(4268);
    uid();
    setState(4269);
    match(MySQLParser::CONDITION);
    setState(4270);
    match(MySQLParser::FOR);
    setState(4277);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ZERO_DECIMAL:
      case MySQLParser::ONE_DECIMAL:
      case MySQLParser::TWO_DECIMAL:
      case MySQLParser::DECIMAL_LITERAL: {
        setState(4271);
        decimalLiteral();
        break;
      }

      case MySQLParser::SQLSTATE: {
        setState(4272);
        match(MySQLParser::SQLSTATE);
        setState(4274);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::VALUE) {
          setState(4273);
          match(MySQLParser::VALUE);
        }
        setState(4276);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareCursorContext ------------------------------------------------------------------

MySQLParser::DeclareCursorContext::DeclareCursorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DeclareCursorContext::DECLARE() {
  return getToken(MySQLParser::DECLARE, 0);
}

MySQLParser::UidContext* MySQLParser::DeclareCursorContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::DeclareCursorContext::CURSOR() {
  return getToken(MySQLParser::CURSOR, 0);
}

tree::TerminalNode* MySQLParser::DeclareCursorContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

MySQLParser::SelectStatementContext* MySQLParser::DeclareCursorContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}


size_t MySQLParser::DeclareCursorContext::getRuleIndex() const {
  return MySQLParser::RuleDeclareCursor;
}

void MySQLParser::DeclareCursorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclareCursor(this);
}

void MySQLParser::DeclareCursorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclareCursor(this);
}


antlrcpp::Any MySQLParser::DeclareCursorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclareCursor(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DeclareCursorContext* MySQLParser::declareCursor() {
  DeclareCursorContext *_localctx = _tracker.createInstance<DeclareCursorContext>(_ctx, getState());
  enterRule(_localctx, 382, MySQLParser::RuleDeclareCursor);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4279);
    match(MySQLParser::DECLARE);
    setState(4280);
    uid();
    setState(4281);
    match(MySQLParser::CURSOR);
    setState(4282);
    match(MySQLParser::FOR);
    setState(4283);
    selectStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareHandlerContext ------------------------------------------------------------------

MySQLParser::DeclareHandlerContext::DeclareHandlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DeclareHandlerContext::DECLARE() {
  return getToken(MySQLParser::DECLARE, 0);
}

tree::TerminalNode* MySQLParser::DeclareHandlerContext::HANDLER() {
  return getToken(MySQLParser::HANDLER, 0);
}

tree::TerminalNode* MySQLParser::DeclareHandlerContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

std::vector<MySQLParser::HandlerConditionValueContext *> MySQLParser::DeclareHandlerContext::handlerConditionValue() {
  return getRuleContexts<MySQLParser::HandlerConditionValueContext>();
}

MySQLParser::HandlerConditionValueContext* MySQLParser::DeclareHandlerContext::handlerConditionValue(size_t i) {
  return getRuleContext<MySQLParser::HandlerConditionValueContext>(i);
}

MySQLParser::RoutineBodyContext* MySQLParser::DeclareHandlerContext::routineBody() {
  return getRuleContext<MySQLParser::RoutineBodyContext>(0);
}

tree::TerminalNode* MySQLParser::DeclareHandlerContext::CONTINUE() {
  return getToken(MySQLParser::CONTINUE, 0);
}

tree::TerminalNode* MySQLParser::DeclareHandlerContext::EXIT() {
  return getToken(MySQLParser::EXIT, 0);
}

tree::TerminalNode* MySQLParser::DeclareHandlerContext::UNDO() {
  return getToken(MySQLParser::UNDO, 0);
}


size_t MySQLParser::DeclareHandlerContext::getRuleIndex() const {
  return MySQLParser::RuleDeclareHandler;
}

void MySQLParser::DeclareHandlerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclareHandler(this);
}

void MySQLParser::DeclareHandlerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclareHandler(this);
}


antlrcpp::Any MySQLParser::DeclareHandlerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclareHandler(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DeclareHandlerContext* MySQLParser::declareHandler() {
  DeclareHandlerContext *_localctx = _tracker.createInstance<DeclareHandlerContext>(_ctx, getState());
  enterRule(_localctx, 384, MySQLParser::RuleDeclareHandler);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4285);
    match(MySQLParser::DECLARE);
    setState(4286);
    dynamic_cast<DeclareHandlerContext *>(_localctx)->handlerAction = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::CONTINUE

    || _la == MySQLParser::EXIT || _la == MySQLParser::UNDO)) {
      dynamic_cast<DeclareHandlerContext *>(_localctx)->handlerAction = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4287);
    match(MySQLParser::HANDLER);
    setState(4288);
    match(MySQLParser::FOR);
    setState(4289);
    handlerConditionValue();
    setState(4294);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(4290);
      match(MySQLParser::COMMA);
      setState(4291);
      handlerConditionValue();
      setState(4296);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4297);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerConditionValueContext ------------------------------------------------------------------

MySQLParser::HandlerConditionValueContext::HandlerConditionValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::HandlerConditionValueContext::getRuleIndex() const {
  return MySQLParser::RuleHandlerConditionValue;
}

void MySQLParser::HandlerConditionValueContext::copyFrom(HandlerConditionValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- HandlerConditionWarningContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::HandlerConditionWarningContext::SQLWARNING() {
  return getToken(MySQLParser::SQLWARNING, 0);
}

MySQLParser::HandlerConditionWarningContext::HandlerConditionWarningContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }

void MySQLParser::HandlerConditionWarningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerConditionWarning(this);
}
void MySQLParser::HandlerConditionWarningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerConditionWarning(this);
}

antlrcpp::Any MySQLParser::HandlerConditionWarningContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerConditionWarning(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HandlerConditionCodeContext ------------------------------------------------------------------

MySQLParser::DecimalLiteralContext* MySQLParser::HandlerConditionCodeContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::HandlerConditionCodeContext::HandlerConditionCodeContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }

void MySQLParser::HandlerConditionCodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerConditionCode(this);
}
void MySQLParser::HandlerConditionCodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerConditionCode(this);
}

antlrcpp::Any MySQLParser::HandlerConditionCodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerConditionCode(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HandlerConditionNotfoundContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::HandlerConditionNotfoundContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}

tree::TerminalNode* MySQLParser::HandlerConditionNotfoundContext::FOUND() {
  return getToken(MySQLParser::FOUND, 0);
}

MySQLParser::HandlerConditionNotfoundContext::HandlerConditionNotfoundContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }

void MySQLParser::HandlerConditionNotfoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerConditionNotfound(this);
}
void MySQLParser::HandlerConditionNotfoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerConditionNotfound(this);
}

antlrcpp::Any MySQLParser::HandlerConditionNotfoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerConditionNotfound(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HandlerConditionStateContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::HandlerConditionStateContext::SQLSTATE() {
  return getToken(MySQLParser::SQLSTATE, 0);
}

tree::TerminalNode* MySQLParser::HandlerConditionStateContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::HandlerConditionStateContext::VALUE() {
  return getToken(MySQLParser::VALUE, 0);
}

MySQLParser::HandlerConditionStateContext::HandlerConditionStateContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }

void MySQLParser::HandlerConditionStateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerConditionState(this);
}
void MySQLParser::HandlerConditionStateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerConditionState(this);
}

antlrcpp::Any MySQLParser::HandlerConditionStateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerConditionState(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HandlerConditionExceptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::HandlerConditionExceptionContext::SQLEXCEPTION() {
  return getToken(MySQLParser::SQLEXCEPTION, 0);
}

MySQLParser::HandlerConditionExceptionContext::HandlerConditionExceptionContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }

void MySQLParser::HandlerConditionExceptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerConditionException(this);
}
void MySQLParser::HandlerConditionExceptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerConditionException(this);
}

antlrcpp::Any MySQLParser::HandlerConditionExceptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerConditionException(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HandlerConditionNameContext ------------------------------------------------------------------

MySQLParser::UidContext* MySQLParser::HandlerConditionNameContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::HandlerConditionNameContext::HandlerConditionNameContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }

void MySQLParser::HandlerConditionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerConditionName(this);
}
void MySQLParser::HandlerConditionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerConditionName(this);
}

antlrcpp::Any MySQLParser::HandlerConditionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHandlerConditionName(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::HandlerConditionValueContext* MySQLParser::handlerConditionValue() {
  HandlerConditionValueContext *_localctx = _tracker.createInstance<HandlerConditionValueContext>(_ctx, getState());
  enterRule(_localctx, 386, MySQLParser::RuleHandlerConditionValue);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4310);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ZERO_DECIMAL:
      case MySQLParser::ONE_DECIMAL:
      case MySQLParser::TWO_DECIMAL:
      case MySQLParser::DECIMAL_LITERAL: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySQLParser::HandlerConditionCodeContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4299);
        decimalLiteral();
        break;
      }

      case MySQLParser::SQLSTATE: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySQLParser::HandlerConditionStateContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4300);
        match(MySQLParser::SQLSTATE);
        setState(4302);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::VALUE) {
          setState(4301);
          match(MySQLParser::VALUE);
        }
        setState(4304);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::DATABASE:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::DATETIME:
      case MySQLParser::YEAR:
      case MySQLParser::TEXT:
      case MySQLParser::ENUM:
      case MySQLParser::SERIAL:
      case MySQLParser::COUNT:
      case MySQLParser::POSITION:
      case MySQLParser::ACCOUNT:
      case MySQLParser::ACTION:
      case MySQLParser::AFTER:
      case MySQLParser::AGGREGATE:
      case MySQLParser::ALGORITHM:
      case MySQLParser::ANY:
      case MySQLParser::AT:
      case MySQLParser::AUTHORS:
      case MySQLParser::AUTOCOMMIT:
      case MySQLParser::AUTOEXTEND_SIZE:
      case MySQLParser::AUTO_INCREMENT:
      case MySQLParser::AVG_ROW_LENGTH:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::BIT:
      case MySQLParser::BLOCK:
      case MySQLParser::BOOL:
      case MySQLParser::BOOLEAN:
      case MySQLParser::BTREE:
      case MySQLParser::CACHE:
      case MySQLParser::CASCADED:
      case MySQLParser::CHAIN:
      case MySQLParser::CHANGED:
      case MySQLParser::CHANNEL:
      case MySQLParser::CHECKSUM:
      case MySQLParser::PAGE_CHECKSUM:
      case MySQLParser::CIPHER:
      case MySQLParser::CLIENT:
      case MySQLParser::CLOSE:
      case MySQLParser::COALESCE:
      case MySQLParser::CODE:
      case MySQLParser::COLUMNS:
      case MySQLParser::COLUMN_FORMAT:
      case MySQLParser::COMMENT:
      case MySQLParser::COMMIT:
      case MySQLParser::COMPACT:
      case MySQLParser::COMPLETION:
      case MySQLParser::COMPRESSED:
      case MySQLParser::COMPRESSION:
      case MySQLParser::CONCURRENT:
      case MySQLParser::CONNECTION:
      case MySQLParser::CONSISTENT:
      case MySQLParser::CONTAINS:
      case MySQLParser::CONTEXT:
      case MySQLParser::CONTRIBUTORS:
      case MySQLParser::COPY:
      case MySQLParser::CPU:
      case MySQLParser::DATA:
      case MySQLParser::DATAFILE:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DEFAULT_AUTH:
      case MySQLParser::DEFINER:
      case MySQLParser::DELAY_KEY_WRITE:
      case MySQLParser::DES_KEY_FILE:
      case MySQLParser::DIRECTORY:
      case MySQLParser::DISABLE:
      case MySQLParser::DISCARD:
      case MySQLParser::DISK:
      case MySQLParser::DO:
      case MySQLParser::DUMPFILE:
      case MySQLParser::DUPLICATE:
      case MySQLParser::DYNAMIC:
      case MySQLParser::ENABLE:
      case MySQLParser::ENCRYPTION:
      case MySQLParser::END:
      case MySQLParser::ENDS:
      case MySQLParser::ENGINE:
      case MySQLParser::ENGINES:
      case MySQLParser::ERROR:
      case MySQLParser::ERRORS:
      case MySQLParser::ESCAPE:
      case MySQLParser::EVEN:
      case MySQLParser::EVENT:
      case MySQLParser::EVENTS:
      case MySQLParser::EVERY:
      case MySQLParser::EXCHANGE:
      case MySQLParser::EXCLUSIVE:
      case MySQLParser::EXPIRE:
      case MySQLParser::EXPORT:
      case MySQLParser::EXTENDED:
      case MySQLParser::EXTENT_SIZE:
      case MySQLParser::FAST:
      case MySQLParser::FAULTS:
      case MySQLParser::FIELDS:
      case MySQLParser::FILE_BLOCK_SIZE:
      case MySQLParser::FILTER:
      case MySQLParser::FIRST:
      case MySQLParser::FIXED:
      case MySQLParser::FLUSH:
      case MySQLParser::FOLLOWS:
      case MySQLParser::FOUND:
      case MySQLParser::FULL:
      case MySQLParser::FUNCTION:
      case MySQLParser::GENERAL:
      case MySQLParser::GLOBAL:
      case MySQLParser::GRANTS:
      case MySQLParser::GROUP_REPLICATION:
      case MySQLParser::HANDLER:
      case MySQLParser::HASH:
      case MySQLParser::HELP:
      case MySQLParser::HOST:
      case MySQLParser::HOSTS:
      case MySQLParser::IDENTIFIED:
      case MySQLParser::IGNORE_SERVER_IDS:
      case MySQLParser::IMPORT:
      case MySQLParser::INDEXES:
      case MySQLParser::INITIAL_SIZE:
      case MySQLParser::INPLACE:
      case MySQLParser::INSERT_METHOD:
      case MySQLParser::INSTALL:
      case MySQLParser::INSTANCE:
      case MySQLParser::INVISIBLE:
      case MySQLParser::INVOKER:
      case MySQLParser::IO:
      case MySQLParser::IO_THREAD:
      case MySQLParser::IPC:
      case MySQLParser::ISOLATION:
      case MySQLParser::ISSUER:
      case MySQLParser::JSON:
      case MySQLParser::KEY_BLOCK_SIZE:
      case MySQLParser::LANGUAGE:
      case MySQLParser::LAST:
      case MySQLParser::LEAVES:
      case MySQLParser::LESS:
      case MySQLParser::LEVEL:
      case MySQLParser::LIST:
      case MySQLParser::LOCAL:
      case MySQLParser::LOGFILE:
      case MySQLParser::LOGS:
      case MySQLParser::MASTER:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_HEARTBEAT_PERIOD:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::MASTER_SSL:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
      case MySQLParser::MAX_QUERIES_PER_HOUR:
      case MySQLParser::MAX_ROWS:
      case MySQLParser::MAX_SIZE:
      case MySQLParser::MAX_UPDATES_PER_HOUR:
      case MySQLParser::MAX_USER_CONNECTIONS:
      case MySQLParser::MEDIUM:
      case MySQLParser::MERGE:
      case MySQLParser::MID:
      case MySQLParser::MIGRATE:
      case MySQLParser::MIN_ROWS:
      case MySQLParser::MODE:
      case MySQLParser::MODIFY:
      case MySQLParser::MUTEX:
      case MySQLParser::MYSQL:
      case MySQLParser::NAME:
      case MySQLParser::NAMES:
      case MySQLParser::NCHAR:
      case MySQLParser::NEVER:
      case MySQLParser::NEXT:
      case MySQLParser::NO:
      case MySQLParser::NODEGROUP:
      case MySQLParser::NONE:
      case MySQLParser::OFFLINE:
      case MySQLParser::OFFSET:
      case MySQLParser::OJ:
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::ONE:
      case MySQLParser::ONLINE:
      case MySQLParser::ONLY:
      case MySQLParser::OPEN:
      case MySQLParser::OPTIMIZER_COSTS:
      case MySQLParser::OPTIONS:
      case MySQLParser::OWNER:
      case MySQLParser::PACK_KEYS:
      case MySQLParser::PAGE:
      case MySQLParser::PARSER:
      case MySQLParser::PARTIAL:
      case MySQLParser::PARTITIONING:
      case MySQLParser::PARTITIONS:
      case MySQLParser::PASSWORD:
      case MySQLParser::PHASE:
      case MySQLParser::PLUGIN:
      case MySQLParser::PLUGIN_DIR:
      case MySQLParser::PLUGINS:
      case MySQLParser::PORT:
      case MySQLParser::PRECEDES:
      case MySQLParser::PREPARE:
      case MySQLParser::PRESERVE:
      case MySQLParser::PREV:
      case MySQLParser::PROCESSLIST:
      case MySQLParser::PROFILE:
      case MySQLParser::PROFILES:
      case MySQLParser::PROXY:
      case MySQLParser::QUERY:
      case MySQLParser::QUICK:
      case MySQLParser::REBUILD:
      case MySQLParser::RECOVER:
      case MySQLParser::REDO_BUFFER_SIZE:
      case MySQLParser::REDUNDANT:
      case MySQLParser::RELAY:
      case MySQLParser::RELAY_LOG_FILE:
      case MySQLParser::RELAY_LOG_POS:
      case MySQLParser::RELAYLOG:
      case MySQLParser::REMOVE:
      case MySQLParser::REORGANIZE:
      case MySQLParser::REPAIR:
      case MySQLParser::REPLICATE_DO_DB:
      case MySQLParser::REPLICATE_DO_TABLE:
      case MySQLParser::REPLICATE_IGNORE_DB:
      case MySQLParser::REPLICATE_IGNORE_TABLE:
      case MySQLParser::REPLICATE_REWRITE_DB:
      case MySQLParser::REPLICATE_WILD_DO_TABLE:
      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySQLParser::REPLICATION:
      case MySQLParser::RESET:
      case MySQLParser::RESUME:
      case MySQLParser::RETURNS:
      case MySQLParser::ROLLBACK:
      case MySQLParser::ROLLUP:
      case MySQLParser::ROTATE:
      case MySQLParser::ROW:
      case MySQLParser::ROWS:
      case MySQLParser::ROW_FORMAT:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::SCHEDULE:
      case MySQLParser::SECURITY:
      case MySQLParser::SERVER:
      case MySQLParser::SESSION:
      case MySQLParser::SHARE:
      case MySQLParser::SHARED:
      case MySQLParser::SIGNED:
      case MySQLParser::SIMPLE:
      case MySQLParser::SLAVE:
      case MySQLParser::SLOW:
      case MySQLParser::SNAPSHOT:
      case MySQLParser::SOCKET:
      case MySQLParser::SOME:
      case MySQLParser::SONAME:
      case MySQLParser::SOUNDS:
      case MySQLParser::SOURCE:
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_AFTER_MTS_GAPS:
      case MySQLParser::SQL_BEFORE_GTIDS:
      case MySQLParser::SQL_BUFFER_RESULT:
      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE:
      case MySQLParser::SQL_THREAD:
      case MySQLParser::START:
      case MySQLParser::STARTS:
      case MySQLParser::STATS_AUTO_RECALC:
      case MySQLParser::STATS_PERSISTENT:
      case MySQLParser::STATS_SAMPLE_PAGES:
      case MySQLParser::STATUS:
      case MySQLParser::STOP:
      case MySQLParser::STORAGE:
      case MySQLParser::STRING:
      case MySQLParser::SUBJECT:
      case MySQLParser::SUBPARTITION:
      case MySQLParser::SUBPARTITIONS:
      case MySQLParser::SUSPEND:
      case MySQLParser::SWAPS:
      case MySQLParser::SWITCHES:
      case MySQLParser::TABLESPACE:
      case MySQLParser::TEMPORARY:
      case MySQLParser::TEMPTABLE:
      case MySQLParser::THAN:
      case MySQLParser::TRADITIONAL:
      case MySQLParser::TRANSACTION:
      case MySQLParser::TRIGGERS:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNDEFINED:
      case MySQLParser::UNDOFILE:
      case MySQLParser::UNDO_BUFFER_SIZE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::UNKNOWN:
      case MySQLParser::UNTIL:
      case MySQLParser::UPGRADE:
      case MySQLParser::USER:
      case MySQLParser::USE_FRM:
      case MySQLParser::USER_RESOURCES:
      case MySQLParser::VALIDATION:
      case MySQLParser::VALUE:
      case MySQLParser::VARIABLES:
      case MySQLParser::VIEW:
      case MySQLParser::VISIBLE:
      case MySQLParser::WAIT:
      case MySQLParser::WARNINGS:
      case MySQLParser::WITHOUT:
      case MySQLParser::WORK:
      case MySQLParser::WRAPPER:
      case MySQLParser::X509:
      case MySQLParser::XA:
      case MySQLParser::XML:
      case MySQLParser::INTERNAL:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::TABLES:
      case MySQLParser::ROUTINE:
      case MySQLParser::EXECUTE:
      case MySQLParser::FILE:
      case MySQLParser::PROCESS:
      case MySQLParser::RELOAD:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::SUPER:
      case MySQLParser::PRIVILEGES:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4:
      case MySQLParser::ARCHIVE:
      case MySQLParser::BLACKHOLE:
      case MySQLParser::CSV:
      case MySQLParser::FEDERATED:
      case MySQLParser::INNODB:
      case MySQLParser::MEMORY:
      case MySQLParser::MRG_MYISAM:
      case MySQLParser::MYISAM:
      case MySQLParser::NDB:
      case MySQLParser::NDBCLUSTER:
      case MySQLParser::PERFORMANCE_SCHEMA:
      case MySQLParser::TOKUDB:
      case MySQLParser::REPEATABLE:
      case MySQLParser::COMMITTED:
      case MySQLParser::UNCOMMITTED:
      case MySQLParser::SERIALIZABLE:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION:
      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::ID:
      case MySQLParser::REVERSE_QUOTE_ID: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySQLParser::HandlerConditionNameContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(4305);
        uid();
        break;
      }

      case MySQLParser::SQLWARNING: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySQLParser::HandlerConditionWarningContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(4306);
        match(MySQLParser::SQLWARNING);
        break;
      }

      case MySQLParser::NOT: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySQLParser::HandlerConditionNotfoundContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(4307);
        match(MySQLParser::NOT);
        setState(4308);
        match(MySQLParser::FOUND);
        break;
      }

      case MySQLParser::SQLEXCEPTION: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySQLParser::HandlerConditionExceptionContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(4309);
        match(MySQLParser::SQLEXCEPTION);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureSqlStatementContext ------------------------------------------------------------------

MySQLParser::ProcedureSqlStatementContext::ProcedureSqlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ProcedureSqlStatementContext::SEMI() {
  return getToken(MySQLParser::SEMI, 0);
}

MySQLParser::CompoundStatementContext* MySQLParser::ProcedureSqlStatementContext::compoundStatement() {
  return getRuleContext<MySQLParser::CompoundStatementContext>(0);
}

MySQLParser::SqlStatementContext* MySQLParser::ProcedureSqlStatementContext::sqlStatement() {
  return getRuleContext<MySQLParser::SqlStatementContext>(0);
}


size_t MySQLParser::ProcedureSqlStatementContext::getRuleIndex() const {
  return MySQLParser::RuleProcedureSqlStatement;
}

void MySQLParser::ProcedureSqlStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureSqlStatement(this);
}

void MySQLParser::ProcedureSqlStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureSqlStatement(this);
}


antlrcpp::Any MySQLParser::ProcedureSqlStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureSqlStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::procedureSqlStatement() {
  ProcedureSqlStatementContext *_localctx = _tracker.createInstance<ProcedureSqlStatementContext>(_ctx, getState());
  enterRule(_localctx, 388, MySQLParser::RuleProcedureSqlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4314);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 620, _ctx)) {
    case 1: {
      setState(4312);
      compoundStatement();
      break;
    }

    case 2: {
      setState(4313);
      sqlStatement();
      break;
    }

    }
    setState(4316);
    match(MySQLParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseAlternativeContext ------------------------------------------------------------------

MySQLParser::CaseAlternativeContext::CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CaseAlternativeContext::WHEN() {
  return getToken(MySQLParser::WHEN, 0);
}

tree::TerminalNode* MySQLParser::CaseAlternativeContext::THEN() {
  return getToken(MySQLParser::THEN, 0);
}

MySQLParser::ConstantContext* MySQLParser::CaseAlternativeContext::constant() {
  return getRuleContext<MySQLParser::ConstantContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::CaseAlternativeContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::CaseAlternativeContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::CaseAlternativeContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::CaseAlternativeContext::getRuleIndex() const {
  return MySQLParser::RuleCaseAlternative;
}

void MySQLParser::CaseAlternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseAlternative(this);
}

void MySQLParser::CaseAlternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseAlternative(this);
}


antlrcpp::Any MySQLParser::CaseAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCaseAlternative(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CaseAlternativeContext* MySQLParser::caseAlternative() {
  CaseAlternativeContext *_localctx = _tracker.createInstance<CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 390, MySQLParser::RuleCaseAlternative);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4318);
    match(MySQLParser::WHEN);
    setState(4321);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 621, _ctx)) {
    case 1: {
      setState(4319);
      constant();
      break;
    }

    case 2: {
      setState(4320);
      expression(0);
      break;
    }

    }
    setState(4323);
    match(MySQLParser::THEN);
    setState(4325); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4324);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4327); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 622, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElifAlternativeContext ------------------------------------------------------------------

MySQLParser::ElifAlternativeContext::ElifAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ElifAlternativeContext::ELSEIF() {
  return getToken(MySQLParser::ELSEIF, 0);
}

MySQLParser::ExpressionContext* MySQLParser::ElifAlternativeContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::ElifAlternativeContext::THEN() {
  return getToken(MySQLParser::THEN, 0);
}

std::vector<MySQLParser::ProcedureSqlStatementContext *> MySQLParser::ElifAlternativeContext::procedureSqlStatement() {
  return getRuleContexts<MySQLParser::ProcedureSqlStatementContext>();
}

MySQLParser::ProcedureSqlStatementContext* MySQLParser::ElifAlternativeContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySQLParser::ProcedureSqlStatementContext>(i);
}


size_t MySQLParser::ElifAlternativeContext::getRuleIndex() const {
  return MySQLParser::RuleElifAlternative;
}

void MySQLParser::ElifAlternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElifAlternative(this);
}

void MySQLParser::ElifAlternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElifAlternative(this);
}


antlrcpp::Any MySQLParser::ElifAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitElifAlternative(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ElifAlternativeContext* MySQLParser::elifAlternative() {
  ElifAlternativeContext *_localctx = _tracker.createInstance<ElifAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 392, MySQLParser::RuleElifAlternative);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4329);
    match(MySQLParser::ELSEIF);
    setState(4330);
    expression(0);
    setState(4331);
    match(MySQLParser::THEN);
    setState(4333); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4332);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4335); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 623, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterUserContext ------------------------------------------------------------------

MySQLParser::AlterUserContext::AlterUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::AlterUserContext::getRuleIndex() const {
  return MySQLParser::RuleAlterUser;
}

void MySQLParser::AlterUserContext::copyFrom(AlterUserContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterUserMysqlV56Context ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterUserMysqlV56Context::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterUserMysqlV56Context::USER() {
  return getToken(MySQLParser::USER, 0);
}

std::vector<MySQLParser::UserSpecificationContext *> MySQLParser::AlterUserMysqlV56Context::userSpecification() {
  return getRuleContexts<MySQLParser::UserSpecificationContext>();
}

MySQLParser::UserSpecificationContext* MySQLParser::AlterUserMysqlV56Context::userSpecification(size_t i) {
  return getRuleContext<MySQLParser::UserSpecificationContext>(i);
}

MySQLParser::AlterUserMysqlV56Context::AlterUserMysqlV56Context(AlterUserContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterUserMysqlV56Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterUserMysqlV56(this);
}
void MySQLParser::AlterUserMysqlV56Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterUserMysqlV56(this);
}

antlrcpp::Any MySQLParser::AlterUserMysqlV56Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterUserMysqlV56(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterUserMysqlV57Context ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::AlterUserMysqlV57Context::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::AlterUserMysqlV57Context::USER() {
  return getToken(MySQLParser::USER, 0);
}

std::vector<MySQLParser::UserAuthOptionContext *> MySQLParser::AlterUserMysqlV57Context::userAuthOption() {
  return getRuleContexts<MySQLParser::UserAuthOptionContext>();
}

MySQLParser::UserAuthOptionContext* MySQLParser::AlterUserMysqlV57Context::userAuthOption(size_t i) {
  return getRuleContext<MySQLParser::UserAuthOptionContext>(i);
}

MySQLParser::IfExistsContext* MySQLParser::AlterUserMysqlV57Context::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}

tree::TerminalNode* MySQLParser::AlterUserMysqlV57Context::REQUIRE() {
  return getToken(MySQLParser::REQUIRE, 0);
}

tree::TerminalNode* MySQLParser::AlterUserMysqlV57Context::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

std::vector<MySQLParser::UserPasswordOptionContext *> MySQLParser::AlterUserMysqlV57Context::userPasswordOption() {
  return getRuleContexts<MySQLParser::UserPasswordOptionContext>();
}

MySQLParser::UserPasswordOptionContext* MySQLParser::AlterUserMysqlV57Context::userPasswordOption(size_t i) {
  return getRuleContext<MySQLParser::UserPasswordOptionContext>(i);
}

std::vector<MySQLParser::UserLockOptionContext *> MySQLParser::AlterUserMysqlV57Context::userLockOption() {
  return getRuleContexts<MySQLParser::UserLockOptionContext>();
}

MySQLParser::UserLockOptionContext* MySQLParser::AlterUserMysqlV57Context::userLockOption(size_t i) {
  return getRuleContext<MySQLParser::UserLockOptionContext>(i);
}

std::vector<MySQLParser::TlsOptionContext *> MySQLParser::AlterUserMysqlV57Context::tlsOption() {
  return getRuleContexts<MySQLParser::TlsOptionContext>();
}

MySQLParser::TlsOptionContext* MySQLParser::AlterUserMysqlV57Context::tlsOption(size_t i) {
  return getRuleContext<MySQLParser::TlsOptionContext>(i);
}

tree::TerminalNode* MySQLParser::AlterUserMysqlV57Context::NONE() {
  return getToken(MySQLParser::NONE, 0);
}

std::vector<MySQLParser::UserResourceOptionContext *> MySQLParser::AlterUserMysqlV57Context::userResourceOption() {
  return getRuleContexts<MySQLParser::UserResourceOptionContext>();
}

MySQLParser::UserResourceOptionContext* MySQLParser::AlterUserMysqlV57Context::userResourceOption(size_t i) {
  return getRuleContext<MySQLParser::UserResourceOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySQLParser::AlterUserMysqlV57Context::AND() {
  return getTokens(MySQLParser::AND);
}

tree::TerminalNode* MySQLParser::AlterUserMysqlV57Context::AND(size_t i) {
  return getToken(MySQLParser::AND, i);
}

MySQLParser::AlterUserMysqlV57Context::AlterUserMysqlV57Context(AlterUserContext *ctx) { copyFrom(ctx); }

void MySQLParser::AlterUserMysqlV57Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterUserMysqlV57(this);
}
void MySQLParser::AlterUserMysqlV57Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterUserMysqlV57(this);
}

antlrcpp::Any MySQLParser::AlterUserMysqlV57Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAlterUserMysqlV57(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::AlterUserContext* MySQLParser::alterUser() {
  AlterUserContext *_localctx = _tracker.createInstance<AlterUserContext>(_ctx, getState());
  enterRule(_localctx, 394, MySQLParser::RuleAlterUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4391);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 635, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AlterUserContext *>(_tracker.createInstance<MySQLParser::AlterUserMysqlV56Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4337);
      match(MySQLParser::ALTER);
      setState(4338);
      match(MySQLParser::USER);
      setState(4339);
      userSpecification();
      setState(4344);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4340);
        match(MySQLParser::COMMA);
        setState(4341);
        userSpecification();
        setState(4346);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AlterUserContext *>(_tracker.createInstance<MySQLParser::AlterUserMysqlV57Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4347);
      match(MySQLParser::ALTER);
      setState(4348);
      match(MySQLParser::USER);
      setState(4350);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IF) {
        setState(4349);
        ifExists();
      }
      setState(4352);
      userAuthOption();
      setState(4357);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4353);
        match(MySQLParser::COMMA);
        setState(4354);
        userAuthOption();
        setState(4359);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4374);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::REQUIRE) {
        setState(4360);
        match(MySQLParser::REQUIRE);
        setState(4372);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::NONE: {
            setState(4361);
            dynamic_cast<AlterUserMysqlV57Context *>(_localctx)->tlsNone = match(MySQLParser::NONE);
            break;
          }

          case MySQLParser::SSL:
          case MySQLParser::CIPHER:
          case MySQLParser::ISSUER:
          case MySQLParser::SUBJECT:
          case MySQLParser::X509: {
            setState(4362);
            tlsOption();
            setState(4369);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == MySQLParser::AND || _la == MySQLParser::SSL || _la == MySQLParser::CIPHER || _la == MySQLParser::ISSUER || _la == MySQLParser::SUBJECT

            || _la == MySQLParser::X509) {
              setState(4364);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == MySQLParser::AND) {
                setState(4363);
                match(MySQLParser::AND);
              }
              setState(4366);
              tlsOption();
              setState(4371);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(4382);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::WITH) {
        setState(4376);
        match(MySQLParser::WITH);
        setState(4378); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(4377);
          userResourceOption();
          setState(4380); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 402) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 402)) & ((1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 402))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 402))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 402))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 402)))) != 0));
      }
      setState(4388);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::ACCOUNT || _la == MySQLParser::PASSWORD) {
        setState(4386);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::PASSWORD: {
            setState(4384);
            userPasswordOption();
            break;
          }

          case MySQLParser::ACCOUNT: {
            setState(4385);
            userLockOption();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4390);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateUserContext ------------------------------------------------------------------

MySQLParser::CreateUserContext::CreateUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::CreateUserContext::getRuleIndex() const {
  return MySQLParser::RuleCreateUser;
}

void MySQLParser::CreateUserContext::copyFrom(CreateUserContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CreateUserMysqlV57Context ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CreateUserMysqlV57Context::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateUserMysqlV57Context::USER() {
  return getToken(MySQLParser::USER, 0);
}

std::vector<MySQLParser::UserAuthOptionContext *> MySQLParser::CreateUserMysqlV57Context::userAuthOption() {
  return getRuleContexts<MySQLParser::UserAuthOptionContext>();
}

MySQLParser::UserAuthOptionContext* MySQLParser::CreateUserMysqlV57Context::userAuthOption(size_t i) {
  return getRuleContext<MySQLParser::UserAuthOptionContext>(i);
}

MySQLParser::IfNotExistsContext* MySQLParser::CreateUserMysqlV57Context::ifNotExists() {
  return getRuleContext<MySQLParser::IfNotExistsContext>(0);
}

tree::TerminalNode* MySQLParser::CreateUserMysqlV57Context::REQUIRE() {
  return getToken(MySQLParser::REQUIRE, 0);
}

tree::TerminalNode* MySQLParser::CreateUserMysqlV57Context::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

std::vector<MySQLParser::UserPasswordOptionContext *> MySQLParser::CreateUserMysqlV57Context::userPasswordOption() {
  return getRuleContexts<MySQLParser::UserPasswordOptionContext>();
}

MySQLParser::UserPasswordOptionContext* MySQLParser::CreateUserMysqlV57Context::userPasswordOption(size_t i) {
  return getRuleContext<MySQLParser::UserPasswordOptionContext>(i);
}

std::vector<MySQLParser::UserLockOptionContext *> MySQLParser::CreateUserMysqlV57Context::userLockOption() {
  return getRuleContexts<MySQLParser::UserLockOptionContext>();
}

MySQLParser::UserLockOptionContext* MySQLParser::CreateUserMysqlV57Context::userLockOption(size_t i) {
  return getRuleContext<MySQLParser::UserLockOptionContext>(i);
}

std::vector<MySQLParser::TlsOptionContext *> MySQLParser::CreateUserMysqlV57Context::tlsOption() {
  return getRuleContexts<MySQLParser::TlsOptionContext>();
}

MySQLParser::TlsOptionContext* MySQLParser::CreateUserMysqlV57Context::tlsOption(size_t i) {
  return getRuleContext<MySQLParser::TlsOptionContext>(i);
}

tree::TerminalNode* MySQLParser::CreateUserMysqlV57Context::NONE() {
  return getToken(MySQLParser::NONE, 0);
}

std::vector<MySQLParser::UserResourceOptionContext *> MySQLParser::CreateUserMysqlV57Context::userResourceOption() {
  return getRuleContexts<MySQLParser::UserResourceOptionContext>();
}

MySQLParser::UserResourceOptionContext* MySQLParser::CreateUserMysqlV57Context::userResourceOption(size_t i) {
  return getRuleContext<MySQLParser::UserResourceOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySQLParser::CreateUserMysqlV57Context::AND() {
  return getTokens(MySQLParser::AND);
}

tree::TerminalNode* MySQLParser::CreateUserMysqlV57Context::AND(size_t i) {
  return getToken(MySQLParser::AND, i);
}

MySQLParser::CreateUserMysqlV57Context::CreateUserMysqlV57Context(CreateUserContext *ctx) { copyFrom(ctx); }

void MySQLParser::CreateUserMysqlV57Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateUserMysqlV57(this);
}
void MySQLParser::CreateUserMysqlV57Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateUserMysqlV57(this);
}

antlrcpp::Any MySQLParser::CreateUserMysqlV57Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateUserMysqlV57(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateUserMysqlV56Context ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CreateUserMysqlV56Context::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateUserMysqlV56Context::USER() {
  return getToken(MySQLParser::USER, 0);
}

std::vector<MySQLParser::UserAuthOptionContext *> MySQLParser::CreateUserMysqlV56Context::userAuthOption() {
  return getRuleContexts<MySQLParser::UserAuthOptionContext>();
}

MySQLParser::UserAuthOptionContext* MySQLParser::CreateUserMysqlV56Context::userAuthOption(size_t i) {
  return getRuleContext<MySQLParser::UserAuthOptionContext>(i);
}

MySQLParser::CreateUserMysqlV56Context::CreateUserMysqlV56Context(CreateUserContext *ctx) { copyFrom(ctx); }

void MySQLParser::CreateUserMysqlV56Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateUserMysqlV56(this);
}
void MySQLParser::CreateUserMysqlV56Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateUserMysqlV56(this);
}

antlrcpp::Any MySQLParser::CreateUserMysqlV56Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateUserMysqlV56(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::CreateUserContext* MySQLParser::createUser() {
  CreateUserContext *_localctx = _tracker.createInstance<CreateUserContext>(_ctx, getState());
  enterRule(_localctx, 396, MySQLParser::RuleCreateUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4447);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 647, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<CreateUserContext *>(_tracker.createInstance<MySQLParser::CreateUserMysqlV56Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4393);
      match(MySQLParser::CREATE);
      setState(4394);
      match(MySQLParser::USER);
      setState(4395);
      userAuthOption();
      setState(4400);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4396);
        match(MySQLParser::COMMA);
        setState(4397);
        userAuthOption();
        setState(4402);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<CreateUserContext *>(_tracker.createInstance<MySQLParser::CreateUserMysqlV57Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4403);
      match(MySQLParser::CREATE);
      setState(4404);
      match(MySQLParser::USER);
      setState(4406);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IF) {
        setState(4405);
        ifNotExists();
      }
      setState(4408);
      userAuthOption();
      setState(4413);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4409);
        match(MySQLParser::COMMA);
        setState(4410);
        userAuthOption();
        setState(4415);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4430);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::REQUIRE) {
        setState(4416);
        match(MySQLParser::REQUIRE);
        setState(4428);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::NONE: {
            setState(4417);
            dynamic_cast<CreateUserMysqlV57Context *>(_localctx)->tlsNone = match(MySQLParser::NONE);
            break;
          }

          case MySQLParser::SSL:
          case MySQLParser::CIPHER:
          case MySQLParser::ISSUER:
          case MySQLParser::SUBJECT:
          case MySQLParser::X509: {
            setState(4418);
            tlsOption();
            setState(4425);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == MySQLParser::AND || _la == MySQLParser::SSL || _la == MySQLParser::CIPHER || _la == MySQLParser::ISSUER || _la == MySQLParser::SUBJECT

            || _la == MySQLParser::X509) {
              setState(4420);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == MySQLParser::AND) {
                setState(4419);
                match(MySQLParser::AND);
              }
              setState(4422);
              tlsOption();
              setState(4427);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(4438);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::WITH) {
        setState(4432);
        match(MySQLParser::WITH);
        setState(4434); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(4433);
          userResourceOption();
          setState(4436); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 402) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 402)) & ((1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 402))
          | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 402))
          | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 402))
          | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 402)))) != 0));
      }
      setState(4444);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::ACCOUNT || _la == MySQLParser::PASSWORD) {
        setState(4442);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::PASSWORD: {
            setState(4440);
            userPasswordOption();
            break;
          }

          case MySQLParser::ACCOUNT: {
            setState(4441);
            userLockOption();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4446);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropUserContext ------------------------------------------------------------------

MySQLParser::DropUserContext::DropUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DropUserContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::DropUserContext::USER() {
  return getToken(MySQLParser::USER, 0);
}

std::vector<MySQLParser::UserNameContext *> MySQLParser::DropUserContext::userName() {
  return getRuleContexts<MySQLParser::UserNameContext>();
}

MySQLParser::UserNameContext* MySQLParser::DropUserContext::userName(size_t i) {
  return getRuleContext<MySQLParser::UserNameContext>(i);
}

MySQLParser::IfExistsContext* MySQLParser::DropUserContext::ifExists() {
  return getRuleContext<MySQLParser::IfExistsContext>(0);
}


size_t MySQLParser::DropUserContext::getRuleIndex() const {
  return MySQLParser::RuleDropUser;
}

void MySQLParser::DropUserContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDropUser(this);
}

void MySQLParser::DropUserContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDropUser(this);
}


antlrcpp::Any MySQLParser::DropUserContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDropUser(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DropUserContext* MySQLParser::dropUser() {
  DropUserContext *_localctx = _tracker.createInstance<DropUserContext>(_ctx, getState());
  enterRule(_localctx, 398, MySQLParser::RuleDropUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4449);
    match(MySQLParser::DROP);
    setState(4450);
    match(MySQLParser::USER);
    setState(4452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IF) {
      setState(4451);
      ifExists();
    }
    setState(4454);
    userName();
    setState(4459);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(4455);
      match(MySQLParser::COMMA);
      setState(4456);
      userName();
      setState(4461);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GrantStatementContext ------------------------------------------------------------------

MySQLParser::GrantStatementContext::GrantStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::GrantStatementContext::GRANT() {
  return getTokens(MySQLParser::GRANT);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::GRANT(size_t i) {
  return getToken(MySQLParser::GRANT, i);
}

std::vector<MySQLParser::PrivelegeClauseContext *> MySQLParser::GrantStatementContext::privelegeClause() {
  return getRuleContexts<MySQLParser::PrivelegeClauseContext>();
}

MySQLParser::PrivelegeClauseContext* MySQLParser::GrantStatementContext::privelegeClause(size_t i) {
  return getRuleContext<MySQLParser::PrivelegeClauseContext>(i);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

MySQLParser::PrivilegeLevelContext* MySQLParser::GrantStatementContext::privilegeLevel() {
  return getRuleContext<MySQLParser::PrivilegeLevelContext>(0);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

std::vector<MySQLParser::UserAuthOptionContext *> MySQLParser::GrantStatementContext::userAuthOption() {
  return getRuleContexts<MySQLParser::UserAuthOptionContext>();
}

MySQLParser::UserAuthOptionContext* MySQLParser::GrantStatementContext::userAuthOption(size_t i) {
  return getRuleContext<MySQLParser::UserAuthOptionContext>(i);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::REQUIRE() {
  return getToken(MySQLParser::REQUIRE, 0);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

std::vector<MySQLParser::TlsOptionContext *> MySQLParser::GrantStatementContext::tlsOption() {
  return getRuleContexts<MySQLParser::TlsOptionContext>();
}

MySQLParser::TlsOptionContext* MySQLParser::GrantStatementContext::tlsOption(size_t i) {
  return getRuleContext<MySQLParser::TlsOptionContext>(i);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::NONE() {
  return getToken(MySQLParser::NONE, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::GrantStatementContext::OPTION() {
  return getTokens(MySQLParser::OPTION);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::OPTION(size_t i) {
  return getToken(MySQLParser::OPTION, i);
}

std::vector<MySQLParser::UserResourceOptionContext *> MySQLParser::GrantStatementContext::userResourceOption() {
  return getRuleContexts<MySQLParser::UserResourceOptionContext>();
}

MySQLParser::UserResourceOptionContext* MySQLParser::GrantStatementContext::userResourceOption(size_t i) {
  return getRuleContext<MySQLParser::UserResourceOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySQLParser::GrantStatementContext::AND() {
  return getTokens(MySQLParser::AND);
}

tree::TerminalNode* MySQLParser::GrantStatementContext::AND(size_t i) {
  return getToken(MySQLParser::AND, i);
}


size_t MySQLParser::GrantStatementContext::getRuleIndex() const {
  return MySQLParser::RuleGrantStatement;
}

void MySQLParser::GrantStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrantStatement(this);
}

void MySQLParser::GrantStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrantStatement(this);
}


antlrcpp::Any MySQLParser::GrantStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGrantStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::GrantStatementContext* MySQLParser::grantStatement() {
  GrantStatementContext *_localctx = _tracker.createInstance<GrantStatementContext>(_ctx, getState());
  enterRule(_localctx, 400, MySQLParser::RuleGrantStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4462);
    match(MySQLParser::GRANT);
    setState(4463);
    privelegeClause();
    setState(4468);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(4464);
      match(MySQLParser::COMMA);
      setState(4465);
      privelegeClause();
      setState(4470);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4471);
    match(MySQLParser::ON);
    setState(4473);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 651, _ctx)) {
    case 1: {
      setState(4472);
      dynamic_cast<GrantStatementContext *>(_localctx)->privilegeObject = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::PROCEDURE

      || _la == MySQLParser::TABLE || _la == MySQLParser::FUNCTION)) {
        dynamic_cast<GrantStatementContext *>(_localctx)->privilegeObject = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(4475);
    privilegeLevel();
    setState(4476);
    match(MySQLParser::TO);
    setState(4477);
    userAuthOption();
    setState(4482);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(4478);
      match(MySQLParser::COMMA);
      setState(4479);
      userAuthOption();
      setState(4484);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::REQUIRE) {
      setState(4485);
      match(MySQLParser::REQUIRE);
      setState(4497);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::NONE: {
          setState(4486);
          dynamic_cast<GrantStatementContext *>(_localctx)->tlsNone = match(MySQLParser::NONE);
          break;
        }

        case MySQLParser::SSL:
        case MySQLParser::CIPHER:
        case MySQLParser::ISSUER:
        case MySQLParser::SUBJECT:
        case MySQLParser::X509: {
          setState(4487);
          tlsOption();
          setState(4494);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySQLParser::AND || _la == MySQLParser::SSL || _la == MySQLParser::CIPHER || _la == MySQLParser::ISSUER || _la == MySQLParser::SUBJECT

          || _la == MySQLParser::X509) {
            setState(4489);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySQLParser::AND) {
              setState(4488);
              match(MySQLParser::AND);
            }
            setState(4491);
            tlsOption();
            setState(4496);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(4510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WITH) {
      setState(4501);
      match(MySQLParser::WITH);
      setState(4507);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 658, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(4505);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case MySQLParser::GRANT: {
              setState(4502);
              match(MySQLParser::GRANT);
              setState(4503);
              match(MySQLParser::OPTION);
              break;
            }

            case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser::MAX_QUERIES_PER_HOUR:
            case MySQLParser::MAX_UPDATES_PER_HOUR:
            case MySQLParser::MAX_USER_CONNECTIONS: {
              setState(4504);
              userResourceOption();
              break;
            }

          default:
            throw NoViableAltException(this);
          } 
        }
        setState(4509);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 658, _ctx);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GrantProxyContext ------------------------------------------------------------------

MySQLParser::GrantProxyContext::GrantProxyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::GrantProxyContext::GRANT() {
  return getTokens(MySQLParser::GRANT);
}

tree::TerminalNode* MySQLParser::GrantProxyContext::GRANT(size_t i) {
  return getToken(MySQLParser::GRANT, i);
}

tree::TerminalNode* MySQLParser::GrantProxyContext::PROXY() {
  return getToken(MySQLParser::PROXY, 0);
}

tree::TerminalNode* MySQLParser::GrantProxyContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

tree::TerminalNode* MySQLParser::GrantProxyContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

std::vector<MySQLParser::UserNameContext *> MySQLParser::GrantProxyContext::userName() {
  return getRuleContexts<MySQLParser::UserNameContext>();
}

MySQLParser::UserNameContext* MySQLParser::GrantProxyContext::userName(size_t i) {
  return getRuleContext<MySQLParser::UserNameContext>(i);
}

tree::TerminalNode* MySQLParser::GrantProxyContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::GrantProxyContext::OPTION() {
  return getToken(MySQLParser::OPTION, 0);
}


size_t MySQLParser::GrantProxyContext::getRuleIndex() const {
  return MySQLParser::RuleGrantProxy;
}

void MySQLParser::GrantProxyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrantProxy(this);
}

void MySQLParser::GrantProxyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrantProxy(this);
}


antlrcpp::Any MySQLParser::GrantProxyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGrantProxy(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::GrantProxyContext* MySQLParser::grantProxy() {
  GrantProxyContext *_localctx = _tracker.createInstance<GrantProxyContext>(_ctx, getState());
  enterRule(_localctx, 402, MySQLParser::RuleGrantProxy);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4512);
    match(MySQLParser::GRANT);
    setState(4513);
    match(MySQLParser::PROXY);
    setState(4514);
    match(MySQLParser::ON);
    setState(4515);
    dynamic_cast<GrantProxyContext *>(_localctx)->fromFirst = userName();
    setState(4516);
    match(MySQLParser::TO);
    setState(4517);
    dynamic_cast<GrantProxyContext *>(_localctx)->toFirst = userName();
    setState(4522);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(4518);
      match(MySQLParser::COMMA);
      setState(4519);
      dynamic_cast<GrantProxyContext *>(_localctx)->userNameContext = userName();
      dynamic_cast<GrantProxyContext *>(_localctx)->toOther.push_back(dynamic_cast<GrantProxyContext *>(_localctx)->userNameContext);
      setState(4524);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::WITH) {
      setState(4525);
      match(MySQLParser::WITH);
      setState(4526);
      match(MySQLParser::GRANT);
      setState(4527);
      match(MySQLParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameUserContext ------------------------------------------------------------------

MySQLParser::RenameUserContext::RenameUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RenameUserContext::RENAME() {
  return getToken(MySQLParser::RENAME, 0);
}

tree::TerminalNode* MySQLParser::RenameUserContext::USER() {
  return getToken(MySQLParser::USER, 0);
}

std::vector<MySQLParser::RenameUserClauseContext *> MySQLParser::RenameUserContext::renameUserClause() {
  return getRuleContexts<MySQLParser::RenameUserClauseContext>();
}

MySQLParser::RenameUserClauseContext* MySQLParser::RenameUserContext::renameUserClause(size_t i) {
  return getRuleContext<MySQLParser::RenameUserClauseContext>(i);
}


size_t MySQLParser::RenameUserContext::getRuleIndex() const {
  return MySQLParser::RuleRenameUser;
}

void MySQLParser::RenameUserContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRenameUser(this);
}

void MySQLParser::RenameUserContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRenameUser(this);
}


antlrcpp::Any MySQLParser::RenameUserContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRenameUser(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RenameUserContext* MySQLParser::renameUser() {
  RenameUserContext *_localctx = _tracker.createInstance<RenameUserContext>(_ctx, getState());
  enterRule(_localctx, 404, MySQLParser::RuleRenameUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4530);
    match(MySQLParser::RENAME);
    setState(4531);
    match(MySQLParser::USER);
    setState(4532);
    renameUserClause();
    setState(4537);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(4533);
      match(MySQLParser::COMMA);
      setState(4534);
      renameUserClause();
      setState(4539);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RevokeStatementContext ------------------------------------------------------------------

MySQLParser::RevokeStatementContext::RevokeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::RevokeStatementContext::getRuleIndex() const {
  return MySQLParser::RuleRevokeStatement;
}

void MySQLParser::RevokeStatementContext::copyFrom(RevokeStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DetailRevokeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DetailRevokeContext::REVOKE() {
  return getToken(MySQLParser::REVOKE, 0);
}

std::vector<MySQLParser::PrivelegeClauseContext *> MySQLParser::DetailRevokeContext::privelegeClause() {
  return getRuleContexts<MySQLParser::PrivelegeClauseContext>();
}

MySQLParser::PrivelegeClauseContext* MySQLParser::DetailRevokeContext::privelegeClause(size_t i) {
  return getRuleContext<MySQLParser::PrivelegeClauseContext>(i);
}

tree::TerminalNode* MySQLParser::DetailRevokeContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

MySQLParser::PrivilegeLevelContext* MySQLParser::DetailRevokeContext::privilegeLevel() {
  return getRuleContext<MySQLParser::PrivilegeLevelContext>(0);
}

tree::TerminalNode* MySQLParser::DetailRevokeContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

std::vector<MySQLParser::UserNameContext *> MySQLParser::DetailRevokeContext::userName() {
  return getRuleContexts<MySQLParser::UserNameContext>();
}

MySQLParser::UserNameContext* MySQLParser::DetailRevokeContext::userName(size_t i) {
  return getRuleContext<MySQLParser::UserNameContext>(i);
}

tree::TerminalNode* MySQLParser::DetailRevokeContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

tree::TerminalNode* MySQLParser::DetailRevokeContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

tree::TerminalNode* MySQLParser::DetailRevokeContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

MySQLParser::DetailRevokeContext::DetailRevokeContext(RevokeStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::DetailRevokeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDetailRevoke(this);
}
void MySQLParser::DetailRevokeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDetailRevoke(this);
}

antlrcpp::Any MySQLParser::DetailRevokeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDetailRevoke(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShortRevokeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShortRevokeContext::REVOKE() {
  return getToken(MySQLParser::REVOKE, 0);
}

tree::TerminalNode* MySQLParser::ShortRevokeContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::ShortRevokeContext::GRANT() {
  return getToken(MySQLParser::GRANT, 0);
}

tree::TerminalNode* MySQLParser::ShortRevokeContext::OPTION() {
  return getToken(MySQLParser::OPTION, 0);
}

tree::TerminalNode* MySQLParser::ShortRevokeContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

std::vector<MySQLParser::UserNameContext *> MySQLParser::ShortRevokeContext::userName() {
  return getRuleContexts<MySQLParser::UserNameContext>();
}

MySQLParser::UserNameContext* MySQLParser::ShortRevokeContext::userName(size_t i) {
  return getRuleContext<MySQLParser::UserNameContext>(i);
}

tree::TerminalNode* MySQLParser::ShortRevokeContext::PRIVILEGES() {
  return getToken(MySQLParser::PRIVILEGES, 0);
}

MySQLParser::ShortRevokeContext::ShortRevokeContext(RevokeStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShortRevokeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShortRevoke(this);
}
void MySQLParser::ShortRevokeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShortRevoke(this);
}

antlrcpp::Any MySQLParser::ShortRevokeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShortRevoke(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::RevokeStatementContext* MySQLParser::revokeStatement() {
  RevokeStatementContext *_localctx = _tracker.createInstance<RevokeStatementContext>(_ctx, getState());
  enterRule(_localctx, 406, MySQLParser::RuleRevokeStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4580);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 668, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<RevokeStatementContext *>(_tracker.createInstance<MySQLParser::DetailRevokeContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4540);
      match(MySQLParser::REVOKE);
      setState(4541);
      privelegeClause();
      setState(4546);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4542);
        match(MySQLParser::COMMA);
        setState(4543);
        privelegeClause();
        setState(4548);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4549);
      match(MySQLParser::ON);
      setState(4551);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 664, _ctx)) {
      case 1: {
        setState(4550);
        dynamic_cast<DetailRevokeContext *>(_localctx)->privilegeObject = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::PROCEDURE

        || _la == MySQLParser::TABLE || _la == MySQLParser::FUNCTION)) {
          dynamic_cast<DetailRevokeContext *>(_localctx)->privilegeObject = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(4553);
      privilegeLevel();
      setState(4554);
      match(MySQLParser::FROM);
      setState(4555);
      userName();
      setState(4560);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4556);
        match(MySQLParser::COMMA);
        setState(4557);
        userName();
        setState(4562);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<RevokeStatementContext *>(_tracker.createInstance<MySQLParser::ShortRevokeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4563);
      match(MySQLParser::REVOKE);
      setState(4564);
      match(MySQLParser::ALL);
      setState(4566);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::PRIVILEGES) {
        setState(4565);
        match(MySQLParser::PRIVILEGES);
      }
      setState(4568);
      match(MySQLParser::COMMA);
      setState(4569);
      match(MySQLParser::GRANT);
      setState(4570);
      match(MySQLParser::OPTION);
      setState(4571);
      match(MySQLParser::FROM);
      setState(4572);
      userName();
      setState(4577);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4573);
        match(MySQLParser::COMMA);
        setState(4574);
        userName();
        setState(4579);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RevokeProxyContext ------------------------------------------------------------------

MySQLParser::RevokeProxyContext::RevokeProxyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RevokeProxyContext::REVOKE() {
  return getToken(MySQLParser::REVOKE, 0);
}

tree::TerminalNode* MySQLParser::RevokeProxyContext::PROXY() {
  return getToken(MySQLParser::PROXY, 0);
}

tree::TerminalNode* MySQLParser::RevokeProxyContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

tree::TerminalNode* MySQLParser::RevokeProxyContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

std::vector<MySQLParser::UserNameContext *> MySQLParser::RevokeProxyContext::userName() {
  return getRuleContexts<MySQLParser::UserNameContext>();
}

MySQLParser::UserNameContext* MySQLParser::RevokeProxyContext::userName(size_t i) {
  return getRuleContext<MySQLParser::UserNameContext>(i);
}


size_t MySQLParser::RevokeProxyContext::getRuleIndex() const {
  return MySQLParser::RuleRevokeProxy;
}

void MySQLParser::RevokeProxyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRevokeProxy(this);
}

void MySQLParser::RevokeProxyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRevokeProxy(this);
}


antlrcpp::Any MySQLParser::RevokeProxyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRevokeProxy(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RevokeProxyContext* MySQLParser::revokeProxy() {
  RevokeProxyContext *_localctx = _tracker.createInstance<RevokeProxyContext>(_ctx, getState());
  enterRule(_localctx, 408, MySQLParser::RuleRevokeProxy);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4582);
    match(MySQLParser::REVOKE);
    setState(4583);
    match(MySQLParser::PROXY);
    setState(4584);
    match(MySQLParser::ON);
    setState(4585);
    dynamic_cast<RevokeProxyContext *>(_localctx)->onUser = userName();
    setState(4586);
    match(MySQLParser::FROM);
    setState(4587);
    dynamic_cast<RevokeProxyContext *>(_localctx)->fromFirst = userName();
    setState(4592);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(4588);
      match(MySQLParser::COMMA);
      setState(4589);
      dynamic_cast<RevokeProxyContext *>(_localctx)->userNameContext = userName();
      dynamic_cast<RevokeProxyContext *>(_localctx)->fromOther.push_back(dynamic_cast<RevokeProxyContext *>(_localctx)->userNameContext);
      setState(4594);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetPasswordStatementContext ------------------------------------------------------------------

MySQLParser::SetPasswordStatementContext::SetPasswordStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SetPasswordStatementContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::SetPasswordStatementContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

MySQLParser::PasswordFunctionClauseContext* MySQLParser::SetPasswordStatementContext::passwordFunctionClause() {
  return getRuleContext<MySQLParser::PasswordFunctionClauseContext>(0);
}

tree::TerminalNode* MySQLParser::SetPasswordStatementContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::SetPasswordStatementContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

MySQLParser::UserNameContext* MySQLParser::SetPasswordStatementContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}


size_t MySQLParser::SetPasswordStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSetPasswordStatement;
}

void MySQLParser::SetPasswordStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetPasswordStatement(this);
}

void MySQLParser::SetPasswordStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetPasswordStatement(this);
}


antlrcpp::Any MySQLParser::SetPasswordStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetPasswordStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SetPasswordStatementContext* MySQLParser::setPasswordStatement() {
  SetPasswordStatementContext *_localctx = _tracker.createInstance<SetPasswordStatementContext>(_ctx, getState());
  enterRule(_localctx, 410, MySQLParser::RuleSetPasswordStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4595);
    match(MySQLParser::SET);
    setState(4596);
    match(MySQLParser::PASSWORD);
    setState(4599);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::FOR) {
      setState(4597);
      match(MySQLParser::FOR);
      setState(4598);
      userName();
    }
    setState(4601);
    match(MySQLParser::EQUAL_SYMBOL);
    setState(4604);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::PASSWORD: {
        setState(4602);
        passwordFunctionClause();
        break;
      }

      case MySQLParser::STRING_LITERAL: {
        setState(4603);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserSpecificationContext ------------------------------------------------------------------

MySQLParser::UserSpecificationContext::UserSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UserNameContext* MySQLParser::UserSpecificationContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

MySQLParser::UserPasswordOptionContext* MySQLParser::UserSpecificationContext::userPasswordOption() {
  return getRuleContext<MySQLParser::UserPasswordOptionContext>(0);
}


size_t MySQLParser::UserSpecificationContext::getRuleIndex() const {
  return MySQLParser::RuleUserSpecification;
}

void MySQLParser::UserSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUserSpecification(this);
}

void MySQLParser::UserSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUserSpecification(this);
}


antlrcpp::Any MySQLParser::UserSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUserSpecification(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UserSpecificationContext* MySQLParser::userSpecification() {
  UserSpecificationContext *_localctx = _tracker.createInstance<UserSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 412, MySQLParser::RuleUserSpecification);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4606);
    userName();
    setState(4607);
    userPasswordOption();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserAuthOptionContext ------------------------------------------------------------------

MySQLParser::UserAuthOptionContext::UserAuthOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::UserAuthOptionContext::getRuleIndex() const {
  return MySQLParser::RuleUserAuthOption;
}

void MySQLParser::UserAuthOptionContext::copyFrom(UserAuthOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SimpleAuthOptionContext ------------------------------------------------------------------

MySQLParser::UserNameContext* MySQLParser::SimpleAuthOptionContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

MySQLParser::SimpleAuthOptionContext::SimpleAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SimpleAuthOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleAuthOption(this);
}
void MySQLParser::SimpleAuthOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleAuthOption(this);
}

antlrcpp::Any MySQLParser::SimpleAuthOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleAuthOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PasswordAuthOptionContext ------------------------------------------------------------------

MySQLParser::UserNameContext* MySQLParser::PasswordAuthOptionContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

tree::TerminalNode* MySQLParser::PasswordAuthOptionContext::IDENTIFIED() {
  return getToken(MySQLParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySQLParser::PasswordAuthOptionContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

tree::TerminalNode* MySQLParser::PasswordAuthOptionContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::PasswordAuthOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::PasswordAuthOptionContext::PasswordAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PasswordAuthOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPasswordAuthOption(this);
}
void MySQLParser::PasswordAuthOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPasswordAuthOption(this);
}

antlrcpp::Any MySQLParser::PasswordAuthOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPasswordAuthOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StringAuthOptionContext ------------------------------------------------------------------

MySQLParser::UserNameContext* MySQLParser::StringAuthOptionContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

tree::TerminalNode* MySQLParser::StringAuthOptionContext::IDENTIFIED() {
  return getToken(MySQLParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySQLParser::StringAuthOptionContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

tree::TerminalNode* MySQLParser::StringAuthOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::StringAuthOptionContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

MySQLParser::AuthPluginContext* MySQLParser::StringAuthOptionContext::authPlugin() {
  return getRuleContext<MySQLParser::AuthPluginContext>(0);
}

MySQLParser::StringAuthOptionContext::StringAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::StringAuthOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringAuthOption(this);
}
void MySQLParser::StringAuthOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringAuthOption(this);
}

antlrcpp::Any MySQLParser::StringAuthOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStringAuthOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HashAuthOptionContext ------------------------------------------------------------------

MySQLParser::UserNameContext* MySQLParser::HashAuthOptionContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

tree::TerminalNode* MySQLParser::HashAuthOptionContext::IDENTIFIED() {
  return getToken(MySQLParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySQLParser::HashAuthOptionContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

MySQLParser::AuthPluginContext* MySQLParser::HashAuthOptionContext::authPlugin() {
  return getRuleContext<MySQLParser::AuthPluginContext>(0);
}

tree::TerminalNode* MySQLParser::HashAuthOptionContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

tree::TerminalNode* MySQLParser::HashAuthOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::HashAuthOptionContext::HashAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::HashAuthOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHashAuthOption(this);
}
void MySQLParser::HashAuthOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHashAuthOption(this);
}

antlrcpp::Any MySQLParser::HashAuthOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHashAuthOption(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::UserAuthOptionContext* MySQLParser::userAuthOption() {
  UserAuthOptionContext *_localctx = _tracker.createInstance<UserAuthOptionContext>(_ctx, getState());
  enterRule(_localctx, 414, MySQLParser::RuleUserAuthOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4633);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 674, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySQLParser::PasswordAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4609);
      userName();
      setState(4610);
      match(MySQLParser::IDENTIFIED);
      setState(4611);
      match(MySQLParser::BY);
      setState(4612);
      match(MySQLParser::PASSWORD);
      setState(4613);
      dynamic_cast<PasswordAuthOptionContext *>(_localctx)->hashed = match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySQLParser::StringAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4615);
      userName();
      setState(4616);
      match(MySQLParser::IDENTIFIED);
      setState(4619);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::WITH) {
        setState(4617);
        match(MySQLParser::WITH);
        setState(4618);
        authPlugin();
      }
      setState(4621);
      match(MySQLParser::BY);
      setState(4622);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySQLParser::HashAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4624);
      userName();
      setState(4625);
      match(MySQLParser::IDENTIFIED);
      setState(4626);
      match(MySQLParser::WITH);
      setState(4627);
      authPlugin();
      setState(4630);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(4628);
        match(MySQLParser::AS);
        setState(4629);
        match(MySQLParser::STRING_LITERAL);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySQLParser::SimpleAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4632);
      userName();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TlsOptionContext ------------------------------------------------------------------

MySQLParser::TlsOptionContext::TlsOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TlsOptionContext::SSL() {
  return getToken(MySQLParser::SSL, 0);
}

tree::TerminalNode* MySQLParser::TlsOptionContext::X509() {
  return getToken(MySQLParser::X509, 0);
}

tree::TerminalNode* MySQLParser::TlsOptionContext::CIPHER() {
  return getToken(MySQLParser::CIPHER, 0);
}

tree::TerminalNode* MySQLParser::TlsOptionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::TlsOptionContext::ISSUER() {
  return getToken(MySQLParser::ISSUER, 0);
}

tree::TerminalNode* MySQLParser::TlsOptionContext::SUBJECT() {
  return getToken(MySQLParser::SUBJECT, 0);
}


size_t MySQLParser::TlsOptionContext::getRuleIndex() const {
  return MySQLParser::RuleTlsOption;
}

void MySQLParser::TlsOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTlsOption(this);
}

void MySQLParser::TlsOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTlsOption(this);
}


antlrcpp::Any MySQLParser::TlsOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTlsOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TlsOptionContext* MySQLParser::tlsOption() {
  TlsOptionContext *_localctx = _tracker.createInstance<TlsOptionContext>(_ctx, getState());
  enterRule(_localctx, 416, MySQLParser::RuleTlsOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4643);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::SSL: {
        enterOuterAlt(_localctx, 1);
        setState(4635);
        match(MySQLParser::SSL);
        break;
      }

      case MySQLParser::X509: {
        enterOuterAlt(_localctx, 2);
        setState(4636);
        match(MySQLParser::X509);
        break;
      }

      case MySQLParser::CIPHER: {
        enterOuterAlt(_localctx, 3);
        setState(4637);
        match(MySQLParser::CIPHER);
        setState(4638);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::ISSUER: {
        enterOuterAlt(_localctx, 4);
        setState(4639);
        match(MySQLParser::ISSUER);
        setState(4640);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::SUBJECT: {
        enterOuterAlt(_localctx, 5);
        setState(4641);
        match(MySQLParser::SUBJECT);
        setState(4642);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserResourceOptionContext ------------------------------------------------------------------

MySQLParser::UserResourceOptionContext::UserResourceOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UserResourceOptionContext::MAX_QUERIES_PER_HOUR() {
  return getToken(MySQLParser::MAX_QUERIES_PER_HOUR, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::UserResourceOptionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::UserResourceOptionContext::MAX_UPDATES_PER_HOUR() {
  return getToken(MySQLParser::MAX_UPDATES_PER_HOUR, 0);
}

tree::TerminalNode* MySQLParser::UserResourceOptionContext::MAX_CONNECTIONS_PER_HOUR() {
  return getToken(MySQLParser::MAX_CONNECTIONS_PER_HOUR, 0);
}

tree::TerminalNode* MySQLParser::UserResourceOptionContext::MAX_USER_CONNECTIONS() {
  return getToken(MySQLParser::MAX_USER_CONNECTIONS, 0);
}


size_t MySQLParser::UserResourceOptionContext::getRuleIndex() const {
  return MySQLParser::RuleUserResourceOption;
}

void MySQLParser::UserResourceOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUserResourceOption(this);
}

void MySQLParser::UserResourceOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUserResourceOption(this);
}


antlrcpp::Any MySQLParser::UserResourceOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUserResourceOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UserResourceOptionContext* MySQLParser::userResourceOption() {
  UserResourceOptionContext *_localctx = _tracker.createInstance<UserResourceOptionContext>(_ctx, getState());
  enterRule(_localctx, 418, MySQLParser::RuleUserResourceOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4653);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::MAX_QUERIES_PER_HOUR: {
        enterOuterAlt(_localctx, 1);
        setState(4645);
        match(MySQLParser::MAX_QUERIES_PER_HOUR);
        setState(4646);
        decimalLiteral();
        break;
      }

      case MySQLParser::MAX_UPDATES_PER_HOUR: {
        enterOuterAlt(_localctx, 2);
        setState(4647);
        match(MySQLParser::MAX_UPDATES_PER_HOUR);
        setState(4648);
        decimalLiteral();
        break;
      }

      case MySQLParser::MAX_CONNECTIONS_PER_HOUR: {
        enterOuterAlt(_localctx, 3);
        setState(4649);
        match(MySQLParser::MAX_CONNECTIONS_PER_HOUR);
        setState(4650);
        decimalLiteral();
        break;
      }

      case MySQLParser::MAX_USER_CONNECTIONS: {
        enterOuterAlt(_localctx, 4);
        setState(4651);
        match(MySQLParser::MAX_USER_CONNECTIONS);
        setState(4652);
        decimalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserPasswordOptionContext ------------------------------------------------------------------

MySQLParser::UserPasswordOptionContext::UserPasswordOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UserPasswordOptionContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::UserPasswordOptionContext::EXPIRE() {
  return getToken(MySQLParser::EXPIRE, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::UserPasswordOptionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::UserPasswordOptionContext::DAY() {
  return getToken(MySQLParser::DAY, 0);
}

tree::TerminalNode* MySQLParser::UserPasswordOptionContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

tree::TerminalNode* MySQLParser::UserPasswordOptionContext::NEVER() {
  return getToken(MySQLParser::NEVER, 0);
}

tree::TerminalNode* MySQLParser::UserPasswordOptionContext::INTERVAL() {
  return getToken(MySQLParser::INTERVAL, 0);
}


size_t MySQLParser::UserPasswordOptionContext::getRuleIndex() const {
  return MySQLParser::RuleUserPasswordOption;
}

void MySQLParser::UserPasswordOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUserPasswordOption(this);
}

void MySQLParser::UserPasswordOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUserPasswordOption(this);
}


antlrcpp::Any MySQLParser::UserPasswordOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUserPasswordOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UserPasswordOptionContext* MySQLParser::userPasswordOption() {
  UserPasswordOptionContext *_localctx = _tracker.createInstance<UserPasswordOptionContext>(_ctx, getState());
  enterRule(_localctx, 420, MySQLParser::RuleUserPasswordOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4655);
    match(MySQLParser::PASSWORD);
    setState(4656);
    match(MySQLParser::EXPIRE);
    setState(4663);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::DEFAULT: {
        setState(4657);
        dynamic_cast<UserPasswordOptionContext *>(_localctx)->expireType = match(MySQLParser::DEFAULT);
        break;
      }

      case MySQLParser::NEVER: {
        setState(4658);
        dynamic_cast<UserPasswordOptionContext *>(_localctx)->expireType = match(MySQLParser::NEVER);
        break;
      }

      case MySQLParser::INTERVAL: {
        setState(4659);
        dynamic_cast<UserPasswordOptionContext *>(_localctx)->expireType = match(MySQLParser::INTERVAL);
        setState(4660);
        decimalLiteral();
        setState(4661);
        match(MySQLParser::DAY);
        break;
      }

      case MySQLParser::EOF:
      case MySQLParser::ALTER:
      case MySQLParser::ANALYZE:
      case MySQLParser::CALL:
      case MySQLParser::CHANGE:
      case MySQLParser::CHECK:
      case MySQLParser::CREATE:
      case MySQLParser::DELETE:
      case MySQLParser::DESC:
      case MySQLParser::DESCRIBE:
      case MySQLParser::DROP:
      case MySQLParser::EXPLAIN:
      case MySQLParser::GRANT:
      case MySQLParser::INSERT:
      case MySQLParser::KILL:
      case MySQLParser::LOAD:
      case MySQLParser::LOCK:
      case MySQLParser::OPTIMIZE:
      case MySQLParser::PURGE:
      case MySQLParser::RELEASE:
      case MySQLParser::RENAME:
      case MySQLParser::REPLACE:
      case MySQLParser::REVOKE:
      case MySQLParser::SELECT:
      case MySQLParser::SET:
      case MySQLParser::SHOW:
      case MySQLParser::UNLOCK:
      case MySQLParser::UPDATE:
      case MySQLParser::USE:
      case MySQLParser::ACCOUNT:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::CACHE:
      case MySQLParser::CHECKSUM:
      case MySQLParser::COMMIT:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DO:
      case MySQLParser::FLUSH:
      case MySQLParser::HANDLER:
      case MySQLParser::HELP:
      case MySQLParser::INSTALL:
      case MySQLParser::PASSWORD:
      case MySQLParser::PREPARE:
      case MySQLParser::REPAIR:
      case MySQLParser::RESET:
      case MySQLParser::ROLLBACK:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::START:
      case MySQLParser::STOP:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::XA:
      case MySQLParser::EXECUTE:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::MINUSMINUS:
      case MySQLParser::LR_BRACKET:
      case MySQLParser::COMMA:
      case MySQLParser::SEMI: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserLockOptionContext ------------------------------------------------------------------

MySQLParser::UserLockOptionContext::UserLockOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UserLockOptionContext::ACCOUNT() {
  return getToken(MySQLParser::ACCOUNT, 0);
}

tree::TerminalNode* MySQLParser::UserLockOptionContext::LOCK() {
  return getToken(MySQLParser::LOCK, 0);
}

tree::TerminalNode* MySQLParser::UserLockOptionContext::UNLOCK() {
  return getToken(MySQLParser::UNLOCK, 0);
}


size_t MySQLParser::UserLockOptionContext::getRuleIndex() const {
  return MySQLParser::RuleUserLockOption;
}

void MySQLParser::UserLockOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUserLockOption(this);
}

void MySQLParser::UserLockOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUserLockOption(this);
}


antlrcpp::Any MySQLParser::UserLockOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUserLockOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UserLockOptionContext* MySQLParser::userLockOption() {
  UserLockOptionContext *_localctx = _tracker.createInstance<UserLockOptionContext>(_ctx, getState());
  enterRule(_localctx, 422, MySQLParser::RuleUserLockOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4665);
    match(MySQLParser::ACCOUNT);
    setState(4666);
    dynamic_cast<UserLockOptionContext *>(_localctx)->lockType = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::LOCK || _la == MySQLParser::UNLOCK)) {
      dynamic_cast<UserLockOptionContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivelegeClauseContext ------------------------------------------------------------------

MySQLParser::PrivelegeClauseContext::PrivelegeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::PrivilegeContext* MySQLParser::PrivelegeClauseContext::privilege() {
  return getRuleContext<MySQLParser::PrivilegeContext>(0);
}

MySQLParser::UidListContext* MySQLParser::PrivelegeClauseContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}


size_t MySQLParser::PrivelegeClauseContext::getRuleIndex() const {
  return MySQLParser::RulePrivelegeClause;
}

void MySQLParser::PrivelegeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivelegeClause(this);
}

void MySQLParser::PrivelegeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivelegeClause(this);
}


antlrcpp::Any MySQLParser::PrivelegeClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPrivelegeClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PrivelegeClauseContext* MySQLParser::privelegeClause() {
  PrivelegeClauseContext *_localctx = _tracker.createInstance<PrivelegeClauseContext>(_ctx, getState());
  enterRule(_localctx, 424, MySQLParser::RulePrivelegeClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4668);
    privilege();
    setState(4673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LR_BRACKET) {
      setState(4669);
      match(MySQLParser::LR_BRACKET);
      setState(4670);
      uidList();
      setState(4671);
      match(MySQLParser::RR_BRACKET);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegeContext ------------------------------------------------------------------

MySQLParser::PrivilegeContext::PrivilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::PrivilegeContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::PRIVILEGES() {
  return getToken(MySQLParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::ALTER() {
  return getToken(MySQLParser::ALTER, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::ROUTINE() {
  return getToken(MySQLParser::ROUTINE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::TEMPORARY() {
  return getToken(MySQLParser::TEMPORARY, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::VIEW() {
  return getToken(MySQLParser::VIEW, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::USER() {
  return getToken(MySQLParser::USER, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::DELETE() {
  return getToken(MySQLParser::DELETE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::DROP() {
  return getToken(MySQLParser::DROP, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::EVENT() {
  return getToken(MySQLParser::EVENT, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::EXECUTE() {
  return getToken(MySQLParser::EXECUTE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::FILE() {
  return getToken(MySQLParser::FILE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::GRANT() {
  return getToken(MySQLParser::GRANT, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::OPTION() {
  return getToken(MySQLParser::OPTION, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::INSERT() {
  return getToken(MySQLParser::INSERT, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::LOCK() {
  return getToken(MySQLParser::LOCK, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::PROCESS() {
  return getToken(MySQLParser::PROCESS, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::PROXY() {
  return getToken(MySQLParser::PROXY, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::REFERENCES() {
  return getToken(MySQLParser::REFERENCES, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::RELOAD() {
  return getToken(MySQLParser::RELOAD, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::REPLICATION() {
  return getToken(MySQLParser::REPLICATION, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::CLIENT() {
  return getToken(MySQLParser::CLIENT, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::SELECT() {
  return getToken(MySQLParser::SELECT, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::DATABASES() {
  return getToken(MySQLParser::DATABASES, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::SHUTDOWN() {
  return getToken(MySQLParser::SHUTDOWN, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::SUPER() {
  return getToken(MySQLParser::SUPER, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::TRIGGER() {
  return getToken(MySQLParser::TRIGGER, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::USAGE() {
  return getToken(MySQLParser::USAGE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegeContext::SESSION_VARIABLES_ADMIN() {
  return getToken(MySQLParser::SESSION_VARIABLES_ADMIN, 0);
}


size_t MySQLParser::PrivilegeContext::getRuleIndex() const {
  return MySQLParser::RulePrivilege;
}

void MySQLParser::PrivilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivilege(this);
}

void MySQLParser::PrivilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivilege(this);
}


antlrcpp::Any MySQLParser::PrivilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPrivilege(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PrivilegeContext* MySQLParser::privilege() {
  PrivilegeContext *_localctx = _tracker.createInstance<PrivilegeContext>(_ctx, getState());
  enterRule(_localctx, 426, MySQLParser::RulePrivilege);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4718);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(4675);
        match(MySQLParser::ALL);
        setState(4677);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::PRIVILEGES) {
          setState(4676);
          match(MySQLParser::PRIVILEGES);
        }
        break;
      }

      case MySQLParser::ALTER: {
        enterOuterAlt(_localctx, 2);
        setState(4679);
        match(MySQLParser::ALTER);
        setState(4681);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::ROUTINE) {
          setState(4680);
          match(MySQLParser::ROUTINE);
        }
        break;
      }

      case MySQLParser::CREATE: {
        enterOuterAlt(_localctx, 3);
        setState(4683);
        match(MySQLParser::CREATE);
        setState(4690);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::TEMPORARY: {
            setState(4684);
            match(MySQLParser::TEMPORARY);
            setState(4685);
            match(MySQLParser::TABLES);
            break;
          }

          case MySQLParser::ROUTINE: {
            setState(4686);
            match(MySQLParser::ROUTINE);
            break;
          }

          case MySQLParser::VIEW: {
            setState(4687);
            match(MySQLParser::VIEW);
            break;
          }

          case MySQLParser::USER: {
            setState(4688);
            match(MySQLParser::USER);
            break;
          }

          case MySQLParser::TABLESPACE: {
            setState(4689);
            match(MySQLParser::TABLESPACE);
            break;
          }

          case MySQLParser::ON:
          case MySQLParser::LR_BRACKET:
          case MySQLParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case MySQLParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(4692);
        match(MySQLParser::DELETE);
        break;
      }

      case MySQLParser::DROP: {
        enterOuterAlt(_localctx, 5);
        setState(4693);
        match(MySQLParser::DROP);
        break;
      }

      case MySQLParser::EVENT: {
        enterOuterAlt(_localctx, 6);
        setState(4694);
        match(MySQLParser::EVENT);
        break;
      }

      case MySQLParser::EXECUTE: {
        enterOuterAlt(_localctx, 7);
        setState(4695);
        match(MySQLParser::EXECUTE);
        break;
      }

      case MySQLParser::FILE: {
        enterOuterAlt(_localctx, 8);
        setState(4696);
        match(MySQLParser::FILE);
        break;
      }

      case MySQLParser::GRANT: {
        enterOuterAlt(_localctx, 9);
        setState(4697);
        match(MySQLParser::GRANT);
        setState(4698);
        match(MySQLParser::OPTION);
        break;
      }

      case MySQLParser::INDEX: {
        enterOuterAlt(_localctx, 10);
        setState(4699);
        match(MySQLParser::INDEX);
        break;
      }

      case MySQLParser::INSERT: {
        enterOuterAlt(_localctx, 11);
        setState(4700);
        match(MySQLParser::INSERT);
        break;
      }

      case MySQLParser::LOCK: {
        enterOuterAlt(_localctx, 12);
        setState(4701);
        match(MySQLParser::LOCK);
        setState(4702);
        match(MySQLParser::TABLES);
        break;
      }

      case MySQLParser::PROCESS: {
        enterOuterAlt(_localctx, 13);
        setState(4703);
        match(MySQLParser::PROCESS);
        break;
      }

      case MySQLParser::PROXY: {
        enterOuterAlt(_localctx, 14);
        setState(4704);
        match(MySQLParser::PROXY);
        break;
      }

      case MySQLParser::REFERENCES: {
        enterOuterAlt(_localctx, 15);
        setState(4705);
        match(MySQLParser::REFERENCES);
        break;
      }

      case MySQLParser::RELOAD: {
        enterOuterAlt(_localctx, 16);
        setState(4706);
        match(MySQLParser::RELOAD);
        break;
      }

      case MySQLParser::REPLICATION: {
        enterOuterAlt(_localctx, 17);
        setState(4707);
        match(MySQLParser::REPLICATION);
        setState(4708);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::CLIENT || _la == MySQLParser::SLAVE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::SELECT: {
        enterOuterAlt(_localctx, 18);
        setState(4709);
        match(MySQLParser::SELECT);
        break;
      }

      case MySQLParser::SHOW: {
        enterOuterAlt(_localctx, 19);
        setState(4710);
        match(MySQLParser::SHOW);
        setState(4711);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::DATABASES || _la == MySQLParser::VIEW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::SHUTDOWN: {
        enterOuterAlt(_localctx, 20);
        setState(4712);
        match(MySQLParser::SHUTDOWN);
        break;
      }

      case MySQLParser::SUPER: {
        enterOuterAlt(_localctx, 21);
        setState(4713);
        match(MySQLParser::SUPER);
        break;
      }

      case MySQLParser::TRIGGER: {
        enterOuterAlt(_localctx, 22);
        setState(4714);
        match(MySQLParser::TRIGGER);
        break;
      }

      case MySQLParser::UPDATE: {
        enterOuterAlt(_localctx, 23);
        setState(4715);
        match(MySQLParser::UPDATE);
        break;
      }

      case MySQLParser::USAGE: {
        enterOuterAlt(_localctx, 24);
        setState(4716);
        match(MySQLParser::USAGE);
        break;
      }

      case MySQLParser::SESSION_VARIABLES_ADMIN: {
        enterOuterAlt(_localctx, 25);
        setState(4717);
        match(MySQLParser::SESSION_VARIABLES_ADMIN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegeLevelContext ------------------------------------------------------------------

MySQLParser::PrivilegeLevelContext::PrivilegeLevelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::PrivilegeLevelContext::getRuleIndex() const {
  return MySQLParser::RulePrivilegeLevel;
}

void MySQLParser::PrivilegeLevelContext::copyFrom(PrivilegeLevelContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DefiniteSchemaPrivLevelContext ------------------------------------------------------------------

MySQLParser::UidContext* MySQLParser::DefiniteSchemaPrivLevelContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::DefiniteSchemaPrivLevelContext::DefiniteSchemaPrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }

void MySQLParser::DefiniteSchemaPrivLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefiniteSchemaPrivLevel(this);
}
void MySQLParser::DefiniteSchemaPrivLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefiniteSchemaPrivLevel(this);
}

antlrcpp::Any MySQLParser::DefiniteSchemaPrivLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDefiniteSchemaPrivLevel(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DefiniteFullTablePrivLevelContext ------------------------------------------------------------------

std::vector<MySQLParser::UidContext *> MySQLParser::DefiniteFullTablePrivLevelContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::DefiniteFullTablePrivLevelContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

MySQLParser::DefiniteFullTablePrivLevelContext::DefiniteFullTablePrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }

void MySQLParser::DefiniteFullTablePrivLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefiniteFullTablePrivLevel(this);
}
void MySQLParser::DefiniteFullTablePrivLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefiniteFullTablePrivLevel(this);
}

antlrcpp::Any MySQLParser::DefiniteFullTablePrivLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDefiniteFullTablePrivLevel(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GlobalPrivLevelContext ------------------------------------------------------------------

MySQLParser::GlobalPrivLevelContext::GlobalPrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }

void MySQLParser::GlobalPrivLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobalPrivLevel(this);
}
void MySQLParser::GlobalPrivLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobalPrivLevel(this);
}

antlrcpp::Any MySQLParser::GlobalPrivLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGlobalPrivLevel(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DefiniteTablePrivLevelContext ------------------------------------------------------------------

MySQLParser::UidContext* MySQLParser::DefiniteTablePrivLevelContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::DefiniteTablePrivLevelContext::DefiniteTablePrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }

void MySQLParser::DefiniteTablePrivLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefiniteTablePrivLevel(this);
}
void MySQLParser::DefiniteTablePrivLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefiniteTablePrivLevel(this);
}

antlrcpp::Any MySQLParser::DefiniteTablePrivLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDefiniteTablePrivLevel(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CurrentSchemaPriviLevelContext ------------------------------------------------------------------

MySQLParser::CurrentSchemaPriviLevelContext::CurrentSchemaPriviLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }

void MySQLParser::CurrentSchemaPriviLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCurrentSchemaPriviLevel(this);
}
void MySQLParser::CurrentSchemaPriviLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCurrentSchemaPriviLevel(this);
}

antlrcpp::Any MySQLParser::CurrentSchemaPriviLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCurrentSchemaPriviLevel(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::PrivilegeLevelContext* MySQLParser::privilegeLevel() {
  PrivilegeLevelContext *_localctx = _tracker.createInstance<PrivilegeLevelContext>(_ctx, getState());
  enterRule(_localctx, 428, MySQLParser::RulePrivilegeLevel);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4733);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 683, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySQLParser::CurrentSchemaPriviLevelContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4720);
      match(MySQLParser::STAR);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySQLParser::GlobalPrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4721);
      match(MySQLParser::STAR);
      setState(4722);
      match(MySQLParser::DOT);
      setState(4723);
      match(MySQLParser::STAR);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySQLParser::DefiniteSchemaPrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4724);
      uid();
      setState(4725);
      match(MySQLParser::DOT);
      setState(4726);
      match(MySQLParser::STAR);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySQLParser::DefiniteFullTablePrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4728);
      uid();
      setState(4729);
      match(MySQLParser::DOT);
      setState(4730);
      uid();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySQLParser::DefiniteTablePrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(4732);
      uid();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameUserClauseContext ------------------------------------------------------------------

MySQLParser::RenameUserClauseContext::RenameUserClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RenameUserClauseContext::TO() {
  return getToken(MySQLParser::TO, 0);
}

std::vector<MySQLParser::UserNameContext *> MySQLParser::RenameUserClauseContext::userName() {
  return getRuleContexts<MySQLParser::UserNameContext>();
}

MySQLParser::UserNameContext* MySQLParser::RenameUserClauseContext::userName(size_t i) {
  return getRuleContext<MySQLParser::UserNameContext>(i);
}


size_t MySQLParser::RenameUserClauseContext::getRuleIndex() const {
  return MySQLParser::RuleRenameUserClause;
}

void MySQLParser::RenameUserClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRenameUserClause(this);
}

void MySQLParser::RenameUserClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRenameUserClause(this);
}


antlrcpp::Any MySQLParser::RenameUserClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRenameUserClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RenameUserClauseContext* MySQLParser::renameUserClause() {
  RenameUserClauseContext *_localctx = _tracker.createInstance<RenameUserClauseContext>(_ctx, getState());
  enterRule(_localctx, 430, MySQLParser::RuleRenameUserClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4735);
    dynamic_cast<RenameUserClauseContext *>(_localctx)->fromFirst = userName();
    setState(4736);
    match(MySQLParser::TO);
    setState(4737);
    dynamic_cast<RenameUserClauseContext *>(_localctx)->toFirst = userName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnalyzeTableContext ------------------------------------------------------------------

MySQLParser::AnalyzeTableContext::AnalyzeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::AnalyzeTableContext::ANALYZE() {
  return getToken(MySQLParser::ANALYZE, 0);
}

tree::TerminalNode* MySQLParser::AnalyzeTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::AnalyzeTableContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

tree::TerminalNode* MySQLParser::AnalyzeTableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySQLParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySQLParser::AnalyzeTableContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}


size_t MySQLParser::AnalyzeTableContext::getRuleIndex() const {
  return MySQLParser::RuleAnalyzeTable;
}

void MySQLParser::AnalyzeTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalyzeTable(this);
}

void MySQLParser::AnalyzeTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalyzeTable(this);
}


antlrcpp::Any MySQLParser::AnalyzeTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAnalyzeTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AnalyzeTableContext* MySQLParser::analyzeTable() {
  AnalyzeTableContext *_localctx = _tracker.createInstance<AnalyzeTableContext>(_ctx, getState());
  enterRule(_localctx, 432, MySQLParser::RuleAnalyzeTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4739);
    match(MySQLParser::ANALYZE);
    setState(4741);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL) {
      setState(4740);
      dynamic_cast<AnalyzeTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL)) {
        dynamic_cast<AnalyzeTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4743);
    match(MySQLParser::TABLE);
    setState(4744);
    tables();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CheckTableContext ------------------------------------------------------------------

MySQLParser::CheckTableContext::CheckTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CheckTableContext::CHECK() {
  return getToken(MySQLParser::CHECK, 0);
}

tree::TerminalNode* MySQLParser::CheckTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::CheckTableContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

std::vector<MySQLParser::CheckTableOptionContext *> MySQLParser::CheckTableContext::checkTableOption() {
  return getRuleContexts<MySQLParser::CheckTableOptionContext>();
}

MySQLParser::CheckTableOptionContext* MySQLParser::CheckTableContext::checkTableOption(size_t i) {
  return getRuleContext<MySQLParser::CheckTableOptionContext>(i);
}


size_t MySQLParser::CheckTableContext::getRuleIndex() const {
  return MySQLParser::RuleCheckTable;
}

void MySQLParser::CheckTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckTable(this);
}

void MySQLParser::CheckTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckTable(this);
}


antlrcpp::Any MySQLParser::CheckTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCheckTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CheckTableContext* MySQLParser::checkTable() {
  CheckTableContext *_localctx = _tracker.createInstance<CheckTableContext>(_ctx, getState());
  enterRule(_localctx, 434, MySQLParser::RuleCheckTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4746);
    match(MySQLParser::CHECK);
    setState(4747);
    match(MySQLParser::TABLE);
    setState(4748);
    tables();
    setState(4752);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::FOR || ((((_la - 274) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 274)) & ((1ULL << (MySQLParser::CHANGED - 274))
      | (1ULL << (MySQLParser::EXTENDED - 274))
      | (1ULL << (MySQLParser::FAST - 274)))) != 0) || _la == MySQLParser::MEDIUM

    || _la == MySQLParser::QUICK) {
      setState(4749);
      checkTableOption();
      setState(4754);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChecksumTableContext ------------------------------------------------------------------

MySQLParser::ChecksumTableContext::ChecksumTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ChecksumTableContext::CHECKSUM() {
  return getToken(MySQLParser::CHECKSUM, 0);
}

tree::TerminalNode* MySQLParser::ChecksumTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::ChecksumTableContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

tree::TerminalNode* MySQLParser::ChecksumTableContext::QUICK() {
  return getToken(MySQLParser::QUICK, 0);
}

tree::TerminalNode* MySQLParser::ChecksumTableContext::EXTENDED() {
  return getToken(MySQLParser::EXTENDED, 0);
}


size_t MySQLParser::ChecksumTableContext::getRuleIndex() const {
  return MySQLParser::RuleChecksumTable;
}

void MySQLParser::ChecksumTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChecksumTable(this);
}

void MySQLParser::ChecksumTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChecksumTable(this);
}


antlrcpp::Any MySQLParser::ChecksumTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitChecksumTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ChecksumTableContext* MySQLParser::checksumTable() {
  ChecksumTableContext *_localctx = _tracker.createInstance<ChecksumTableContext>(_ctx, getState());
  enterRule(_localctx, 436, MySQLParser::RuleChecksumTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4755);
    match(MySQLParser::CHECKSUM);
    setState(4756);
    match(MySQLParser::TABLE);
    setState(4757);
    tables();
    setState(4759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EXTENDED || _la == MySQLParser::QUICK) {
      setState(4758);
      dynamic_cast<ChecksumTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::EXTENDED || _la == MySQLParser::QUICK)) {
        dynamic_cast<ChecksumTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptimizeTableContext ------------------------------------------------------------------

MySQLParser::OptimizeTableContext::OptimizeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::OptimizeTableContext::OPTIMIZE() {
  return getToken(MySQLParser::OPTIMIZE, 0);
}

tree::TerminalNode* MySQLParser::OptimizeTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::OptimizeTableContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

tree::TerminalNode* MySQLParser::OptimizeTableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySQLParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySQLParser::OptimizeTableContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}


size_t MySQLParser::OptimizeTableContext::getRuleIndex() const {
  return MySQLParser::RuleOptimizeTable;
}

void MySQLParser::OptimizeTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptimizeTable(this);
}

void MySQLParser::OptimizeTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptimizeTable(this);
}


antlrcpp::Any MySQLParser::OptimizeTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitOptimizeTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::OptimizeTableContext* MySQLParser::optimizeTable() {
  OptimizeTableContext *_localctx = _tracker.createInstance<OptimizeTableContext>(_ctx, getState());
  enterRule(_localctx, 438, MySQLParser::RuleOptimizeTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4761);
    match(MySQLParser::OPTIMIZE);
    setState(4763);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL) {
      setState(4762);
      dynamic_cast<OptimizeTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL)) {
        dynamic_cast<OptimizeTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4765);
    match(MySQLParser::TABLE);
    setState(4766);
    tables();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepairTableContext ------------------------------------------------------------------

MySQLParser::RepairTableContext::RepairTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::RepairTableContext::REPAIR() {
  return getToken(MySQLParser::REPAIR, 0);
}

tree::TerminalNode* MySQLParser::RepairTableContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

MySQLParser::TablesContext* MySQLParser::RepairTableContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

tree::TerminalNode* MySQLParser::RepairTableContext::QUICK() {
  return getToken(MySQLParser::QUICK, 0);
}

tree::TerminalNode* MySQLParser::RepairTableContext::EXTENDED() {
  return getToken(MySQLParser::EXTENDED, 0);
}

tree::TerminalNode* MySQLParser::RepairTableContext::USE_FRM() {
  return getToken(MySQLParser::USE_FRM, 0);
}

tree::TerminalNode* MySQLParser::RepairTableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySQLParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySQLParser::RepairTableContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}


size_t MySQLParser::RepairTableContext::getRuleIndex() const {
  return MySQLParser::RuleRepairTable;
}

void MySQLParser::RepairTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepairTable(this);
}

void MySQLParser::RepairTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepairTable(this);
}


antlrcpp::Any MySQLParser::RepairTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitRepairTable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::RepairTableContext* MySQLParser::repairTable() {
  RepairTableContext *_localctx = _tracker.createInstance<RepairTableContext>(_ctx, getState());
  enterRule(_localctx, 440, MySQLParser::RuleRepairTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4768);
    match(MySQLParser::REPAIR);
    setState(4770);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL) {
      setState(4769);
      dynamic_cast<RepairTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL)) {
        dynamic_cast<RepairTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4772);
    match(MySQLParser::TABLE);
    setState(4773);
    tables();
    setState(4775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::QUICK) {
      setState(4774);
      match(MySQLParser::QUICK);
    }
    setState(4778);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EXTENDED) {
      setState(4777);
      match(MySQLParser::EXTENDED);
    }
    setState(4781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::USE_FRM) {
      setState(4780);
      match(MySQLParser::USE_FRM);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CheckTableOptionContext ------------------------------------------------------------------

MySQLParser::CheckTableOptionContext::CheckTableOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CheckTableOptionContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::CheckTableOptionContext::UPGRADE() {
  return getToken(MySQLParser::UPGRADE, 0);
}

tree::TerminalNode* MySQLParser::CheckTableOptionContext::QUICK() {
  return getToken(MySQLParser::QUICK, 0);
}

tree::TerminalNode* MySQLParser::CheckTableOptionContext::FAST() {
  return getToken(MySQLParser::FAST, 0);
}

tree::TerminalNode* MySQLParser::CheckTableOptionContext::MEDIUM() {
  return getToken(MySQLParser::MEDIUM, 0);
}

tree::TerminalNode* MySQLParser::CheckTableOptionContext::EXTENDED() {
  return getToken(MySQLParser::EXTENDED, 0);
}

tree::TerminalNode* MySQLParser::CheckTableOptionContext::CHANGED() {
  return getToken(MySQLParser::CHANGED, 0);
}


size_t MySQLParser::CheckTableOptionContext::getRuleIndex() const {
  return MySQLParser::RuleCheckTableOption;
}

void MySQLParser::CheckTableOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckTableOption(this);
}

void MySQLParser::CheckTableOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckTableOption(this);
}


antlrcpp::Any MySQLParser::CheckTableOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCheckTableOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CheckTableOptionContext* MySQLParser::checkTableOption() {
  CheckTableOptionContext *_localctx = _tracker.createInstance<CheckTableOptionContext>(_ctx, getState());
  enterRule(_localctx, 442, MySQLParser::RuleCheckTableOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4790);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(4783);
        match(MySQLParser::FOR);
        setState(4784);
        match(MySQLParser::UPGRADE);
        break;
      }

      case MySQLParser::QUICK: {
        enterOuterAlt(_localctx, 2);
        setState(4785);
        match(MySQLParser::QUICK);
        break;
      }

      case MySQLParser::FAST: {
        enterOuterAlt(_localctx, 3);
        setState(4786);
        match(MySQLParser::FAST);
        break;
      }

      case MySQLParser::MEDIUM: {
        enterOuterAlt(_localctx, 4);
        setState(4787);
        match(MySQLParser::MEDIUM);
        break;
      }

      case MySQLParser::EXTENDED: {
        enterOuterAlt(_localctx, 5);
        setState(4788);
        match(MySQLParser::EXTENDED);
        break;
      }

      case MySQLParser::CHANGED: {
        enterOuterAlt(_localctx, 6);
        setState(4789);
        match(MySQLParser::CHANGED);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateUdfunctionContext ------------------------------------------------------------------

MySQLParser::CreateUdfunctionContext::CreateUdfunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

MySQLParser::UidContext* MySQLParser::CreateUdfunctionContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::RETURNS() {
  return getToken(MySQLParser::RETURNS, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::SONAME() {
  return getToken(MySQLParser::SONAME, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::STRING() {
  return getToken(MySQLParser::STRING, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::INTEGER() {
  return getToken(MySQLParser::INTEGER, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::REAL() {
  return getToken(MySQLParser::REAL, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::DECIMAL() {
  return getToken(MySQLParser::DECIMAL, 0);
}

tree::TerminalNode* MySQLParser::CreateUdfunctionContext::AGGREGATE() {
  return getToken(MySQLParser::AGGREGATE, 0);
}


size_t MySQLParser::CreateUdfunctionContext::getRuleIndex() const {
  return MySQLParser::RuleCreateUdfunction;
}

void MySQLParser::CreateUdfunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateUdfunction(this);
}

void MySQLParser::CreateUdfunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateUdfunction(this);
}


antlrcpp::Any MySQLParser::CreateUdfunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateUdfunction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CreateUdfunctionContext* MySQLParser::createUdfunction() {
  CreateUdfunctionContext *_localctx = _tracker.createInstance<CreateUdfunctionContext>(_ctx, getState());
  enterRule(_localctx, 444, MySQLParser::RuleCreateUdfunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4792);
    match(MySQLParser::CREATE);
    setState(4794);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::AGGREGATE) {
      setState(4793);
      match(MySQLParser::AGGREGATE);
    }
    setState(4796);
    match(MySQLParser::FUNCTION);
    setState(4797);
    uid();
    setState(4798);
    match(MySQLParser::RETURNS);
    setState(4799);
    dynamic_cast<CreateUdfunctionContext *>(_localctx)->returnType = _input->LT(1);
    _la = _input->LA(1);
    if (!(((((_la - 175) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 175)) & ((1ULL << (MySQLParser::INTEGER - 175))
      | (1ULL << (MySQLParser::REAL - 175))
      | (1ULL << (MySQLParser::DECIMAL - 175)))) != 0) || _la == MySQLParser::STRING)) {
      dynamic_cast<CreateUdfunctionContext *>(_localctx)->returnType = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4800);
    match(MySQLParser::SONAME);
    setState(4801);
    match(MySQLParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstallPluginContext ------------------------------------------------------------------

MySQLParser::InstallPluginContext::InstallPluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::InstallPluginContext::INSTALL() {
  return getToken(MySQLParser::INSTALL, 0);
}

tree::TerminalNode* MySQLParser::InstallPluginContext::PLUGIN() {
  return getToken(MySQLParser::PLUGIN, 0);
}

MySQLParser::UidContext* MySQLParser::InstallPluginContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::InstallPluginContext::SONAME() {
  return getToken(MySQLParser::SONAME, 0);
}

tree::TerminalNode* MySQLParser::InstallPluginContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::InstallPluginContext::getRuleIndex() const {
  return MySQLParser::RuleInstallPlugin;
}

void MySQLParser::InstallPluginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstallPlugin(this);
}

void MySQLParser::InstallPluginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstallPlugin(this);
}


antlrcpp::Any MySQLParser::InstallPluginContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitInstallPlugin(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::InstallPluginContext* MySQLParser::installPlugin() {
  InstallPluginContext *_localctx = _tracker.createInstance<InstallPluginContext>(_ctx, getState());
  enterRule(_localctx, 446, MySQLParser::RuleInstallPlugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4803);
    match(MySQLParser::INSTALL);
    setState(4804);
    match(MySQLParser::PLUGIN);
    setState(4805);
    uid();
    setState(4806);
    match(MySQLParser::SONAME);
    setState(4807);
    match(MySQLParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UninstallPluginContext ------------------------------------------------------------------

MySQLParser::UninstallPluginContext::UninstallPluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UninstallPluginContext::UNINSTALL() {
  return getToken(MySQLParser::UNINSTALL, 0);
}

tree::TerminalNode* MySQLParser::UninstallPluginContext::PLUGIN() {
  return getToken(MySQLParser::PLUGIN, 0);
}

MySQLParser::UidContext* MySQLParser::UninstallPluginContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}


size_t MySQLParser::UninstallPluginContext::getRuleIndex() const {
  return MySQLParser::RuleUninstallPlugin;
}

void MySQLParser::UninstallPluginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUninstallPlugin(this);
}

void MySQLParser::UninstallPluginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUninstallPlugin(this);
}


antlrcpp::Any MySQLParser::UninstallPluginContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUninstallPlugin(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UninstallPluginContext* MySQLParser::uninstallPlugin() {
  UninstallPluginContext *_localctx = _tracker.createInstance<UninstallPluginContext>(_ctx, getState());
  enterRule(_localctx, 448, MySQLParser::RuleUninstallPlugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4809);
    match(MySQLParser::UNINSTALL);
    setState(4810);
    match(MySQLParser::PLUGIN);
    setState(4811);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetStatementContext ------------------------------------------------------------------

MySQLParser::SetStatementContext::SetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::SetStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSetStatement;
}

void MySQLParser::SetStatementContext::copyFrom(SetStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SetTransactionContext ------------------------------------------------------------------

MySQLParser::SetTransactionStatementContext* MySQLParser::SetTransactionContext::setTransactionStatement() {
  return getRuleContext<MySQLParser::SetTransactionStatementContext>(0);
}

MySQLParser::SetTransactionContext::SetTransactionContext(SetStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SetTransactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetTransaction(this);
}
void MySQLParser::SetTransactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetTransaction(this);
}

antlrcpp::Any MySQLParser::SetTransactionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetTransaction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetCharsetContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MySQLParser::SetCharsetContext::SET() {
  return getTokens(MySQLParser::SET);
}

tree::TerminalNode* MySQLParser::SetCharsetContext::SET(size_t i) {
  return getToken(MySQLParser::SET, i);
}

tree::TerminalNode* MySQLParser::SetCharsetContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::SetCharsetContext::CHARSET() {
  return getToken(MySQLParser::CHARSET, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::SetCharsetContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::SetCharsetContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

MySQLParser::SetCharsetContext::SetCharsetContext(SetStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SetCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetCharset(this);
}
void MySQLParser::SetCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetCharset(this);
}

antlrcpp::Any MySQLParser::SetCharsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetCharset(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetNamesContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SetNamesContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::SetNamesContext::NAMES() {
  return getToken(MySQLParser::NAMES, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::SetNamesContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::SetNamesContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}

tree::TerminalNode* MySQLParser::SetNamesContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::SetNamesContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}

MySQLParser::SetNamesContext::SetNamesContext(SetStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SetNamesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetNames(this);
}
void MySQLParser::SetNamesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetNames(this);
}

antlrcpp::Any MySQLParser::SetNamesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetNames(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetPasswordContext ------------------------------------------------------------------

MySQLParser::SetPasswordStatementContext* MySQLParser::SetPasswordContext::setPasswordStatement() {
  return getRuleContext<MySQLParser::SetPasswordStatementContext>(0);
}

MySQLParser::SetPasswordContext::SetPasswordContext(SetStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SetPasswordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetPassword(this);
}
void MySQLParser::SetPasswordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetPassword(this);
}

antlrcpp::Any MySQLParser::SetPasswordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetPassword(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetAutocommitContext ------------------------------------------------------------------

MySQLParser::SetAutocommitStatementContext* MySQLParser::SetAutocommitContext::setAutocommitStatement() {
  return getRuleContext<MySQLParser::SetAutocommitStatementContext>(0);
}

MySQLParser::SetAutocommitContext::SetAutocommitContext(SetStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SetAutocommitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetAutocommit(this);
}
void MySQLParser::SetAutocommitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetAutocommit(this);
}

antlrcpp::Any MySQLParser::SetAutocommitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetAutocommit(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetNewValueInsideTriggerContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SetNewValueInsideTriggerContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

MySQLParser::FullIdContext* MySQLParser::SetNewValueInsideTriggerContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::SetNewValueInsideTriggerContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

MySQLParser::SetNewValueInsideTriggerContext::SetNewValueInsideTriggerContext(SetStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SetNewValueInsideTriggerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetNewValueInsideTrigger(this);
}
void MySQLParser::SetNewValueInsideTriggerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetNewValueInsideTrigger(this);
}

antlrcpp::Any MySQLParser::SetNewValueInsideTriggerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetNewValueInsideTrigger(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetVariableContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SetVariableContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

std::vector<MySQLParser::VariableClauseContext *> MySQLParser::SetVariableContext::variableClause() {
  return getRuleContexts<MySQLParser::VariableClauseContext>();
}

MySQLParser::VariableClauseContext* MySQLParser::SetVariableContext::variableClause(size_t i) {
  return getRuleContext<MySQLParser::VariableClauseContext>(i);
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::SetVariableContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::SetVariableContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}

MySQLParser::SetVariableContext::SetVariableContext(SetStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::SetVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetVariable(this);
}
void MySQLParser::SetVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetVariable(this);
}

antlrcpp::Any MySQLParser::SetVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSetVariable(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::SetStatementContext* MySQLParser::setStatement() {
  SetStatementContext *_localctx = _tracker.createInstance<SetStatementContext>(_ctx, getState());
  enterRule(_localctx, 450, MySQLParser::RuleSetStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4855);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 699, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySQLParser::SetVariableContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4813);
      match(MySQLParser::SET);
      setState(4814);
      variableClause();
      setState(4815);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::VAR_ASSIGN

      || _la == MySQLParser::EQUAL_SYMBOL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4816);
      expression(0);
      setState(4824);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4817);
        match(MySQLParser::COMMA);
        setState(4818);
        variableClause();
        setState(4819);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::VAR_ASSIGN

        || _la == MySQLParser::EQUAL_SYMBOL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4820);
        expression(0);
        setState(4826);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySQLParser::SetCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4827);
      match(MySQLParser::SET);
      setState(4831);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::CHARACTER: {
          setState(4828);
          match(MySQLParser::CHARACTER);
          setState(4829);
          match(MySQLParser::SET);
          break;
        }

        case MySQLParser::CHARSET: {
          setState(4830);
          match(MySQLParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4835);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::BINARY:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL: {
          setState(4833);
          charsetName();
          break;
        }

        case MySQLParser::DEFAULT: {
          setState(4834);
          match(MySQLParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySQLParser::SetNamesContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4837);
      match(MySQLParser::SET);
      setState(4838);
      match(MySQLParser::NAMES);
      setState(4845);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::BINARY:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL: {
          setState(4839);
          charsetName();
          setState(4842);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::COLLATE) {
            setState(4840);
            match(MySQLParser::COLLATE);
            setState(4841);
            collationName();
          }
          break;
        }

        case MySQLParser::DEFAULT: {
          setState(4844);
          match(MySQLParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySQLParser::SetPasswordContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4847);
      setPasswordStatement();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySQLParser::SetTransactionContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(4848);
      setTransactionStatement();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySQLParser::SetAutocommitContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(4849);
      setAutocommitStatement();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySQLParser::SetNewValueInsideTriggerContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(4850);
      match(MySQLParser::SET);
      setState(4851);
      fullId();
      setState(4852);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::VAR_ASSIGN

      || _la == MySQLParser::EQUAL_SYMBOL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4853);
      expression(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowStatementContext ------------------------------------------------------------------

MySQLParser::ShowStatementContext::ShowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::ShowStatementContext::getRuleIndex() const {
  return MySQLParser::RuleShowStatement;
}

void MySQLParser::ShowStatementContext::copyFrom(ShowStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ShowOpenTablesContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowOpenTablesContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowOpenTablesContext::OPEN() {
  return getToken(MySQLParser::OPEN, 0);
}

tree::TerminalNode* MySQLParser::ShowOpenTablesContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}

MySQLParser::UidContext* MySQLParser::ShowOpenTablesContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::ShowFilterContext* MySQLParser::ShowOpenTablesContext::showFilter() {
  return getRuleContext<MySQLParser::ShowFilterContext>(0);
}

tree::TerminalNode* MySQLParser::ShowOpenTablesContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

tree::TerminalNode* MySQLParser::ShowOpenTablesContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

MySQLParser::ShowOpenTablesContext::ShowOpenTablesContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowOpenTablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowOpenTables(this);
}
void MySQLParser::ShowOpenTablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowOpenTables(this);
}

antlrcpp::Any MySQLParser::ShowOpenTablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowOpenTables(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowGlobalInfoContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowGlobalInfoContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

MySQLParser::ShowGlobalInfoClauseContext* MySQLParser::ShowGlobalInfoContext::showGlobalInfoClause() {
  return getRuleContext<MySQLParser::ShowGlobalInfoClauseContext>(0);
}

MySQLParser::ShowGlobalInfoContext::ShowGlobalInfoContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowGlobalInfoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowGlobalInfo(this);
}
void MySQLParser::ShowGlobalInfoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowGlobalInfo(this);
}

antlrcpp::Any MySQLParser::ShowGlobalInfoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowGlobalInfo(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowCreateFullIdObjectContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

MySQLParser::FullIdContext* MySQLParser::ShowCreateFullIdObjectContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::EVENT() {
  return getToken(MySQLParser::EVENT, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::TRIGGER() {
  return getToken(MySQLParser::TRIGGER, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateFullIdObjectContext::VIEW() {
  return getToken(MySQLParser::VIEW, 0);
}

MySQLParser::ShowCreateFullIdObjectContext::ShowCreateFullIdObjectContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowCreateFullIdObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCreateFullIdObject(this);
}
void MySQLParser::ShowCreateFullIdObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCreateFullIdObject(this);
}

antlrcpp::Any MySQLParser::ShowCreateFullIdObjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowCreateFullIdObject(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowCreateUserContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowCreateUserContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateUserContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateUserContext::USER() {
  return getToken(MySQLParser::USER, 0);
}

MySQLParser::UserNameContext* MySQLParser::ShowCreateUserContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

MySQLParser::ShowCreateUserContext::ShowCreateUserContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowCreateUserContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCreateUser(this);
}
void MySQLParser::ShowCreateUserContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCreateUser(this);
}

antlrcpp::Any MySQLParser::ShowCreateUserContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowCreateUser(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowErrorsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowErrorsContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowErrorsContext::ERRORS() {
  return getToken(MySQLParser::ERRORS, 0);
}

tree::TerminalNode* MySQLParser::ShowErrorsContext::WARNINGS() {
  return getToken(MySQLParser::WARNINGS, 0);
}

tree::TerminalNode* MySQLParser::ShowErrorsContext::LIMIT() {
  return getToken(MySQLParser::LIMIT, 0);
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::ShowErrorsContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::ShowErrorsContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}

MySQLParser::ShowErrorsContext::ShowErrorsContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowErrorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowErrors(this);
}
void MySQLParser::ShowErrorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowErrors(this);
}

antlrcpp::Any MySQLParser::ShowErrorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowErrors(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowCountErrorsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowCountErrorsContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowCountErrorsContext::COUNT() {
  return getToken(MySQLParser::COUNT, 0);
}

tree::TerminalNode* MySQLParser::ShowCountErrorsContext::ERRORS() {
  return getToken(MySQLParser::ERRORS, 0);
}

tree::TerminalNode* MySQLParser::ShowCountErrorsContext::WARNINGS() {
  return getToken(MySQLParser::WARNINGS, 0);
}

MySQLParser::ShowCountErrorsContext::ShowCountErrorsContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowCountErrorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCountErrors(this);
}
void MySQLParser::ShowCountErrorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCountErrors(this);
}

antlrcpp::Any MySQLParser::ShowCountErrorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowCountErrors(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowObjectFilterContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowObjectFilterContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

MySQLParser::ShowCommonEntityContext* MySQLParser::ShowObjectFilterContext::showCommonEntity() {
  return getRuleContext<MySQLParser::ShowCommonEntityContext>(0);
}

MySQLParser::ShowFilterContext* MySQLParser::ShowObjectFilterContext::showFilter() {
  return getRuleContext<MySQLParser::ShowFilterContext>(0);
}

MySQLParser::ShowObjectFilterContext::ShowObjectFilterContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowObjectFilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowObjectFilter(this);
}
void MySQLParser::ShowObjectFilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowObjectFilter(this);
}

antlrcpp::Any MySQLParser::ShowObjectFilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowObjectFilter(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowCreateDbContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowCreateDbContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateDbContext::CREATE() {
  return getToken(MySQLParser::CREATE, 0);
}

MySQLParser::UidContext* MySQLParser::ShowCreateDbContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::ShowCreateDbContext::DATABASE() {
  return getToken(MySQLParser::DATABASE, 0);
}

tree::TerminalNode* MySQLParser::ShowCreateDbContext::SCHEMA() {
  return getToken(MySQLParser::SCHEMA, 0);
}

MySQLParser::IfNotExistsContext* MySQLParser::ShowCreateDbContext::ifNotExists() {
  return getRuleContext<MySQLParser::IfNotExistsContext>(0);
}

MySQLParser::ShowCreateDbContext::ShowCreateDbContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowCreateDbContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCreateDb(this);
}
void MySQLParser::ShowCreateDbContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCreateDb(this);
}

antlrcpp::Any MySQLParser::ShowCreateDbContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowCreateDb(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowEngineContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowEngineContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

MySQLParser::EngineNameContext* MySQLParser::ShowEngineContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

tree::TerminalNode* MySQLParser::ShowEngineContext::STATUS() {
  return getToken(MySQLParser::STATUS, 0);
}

tree::TerminalNode* MySQLParser::ShowEngineContext::MUTEX() {
  return getToken(MySQLParser::MUTEX, 0);
}

MySQLParser::ShowEngineContext::ShowEngineContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowEngineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowEngine(this);
}
void MySQLParser::ShowEngineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowEngine(this);
}

antlrcpp::Any MySQLParser::ShowEngineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowEngine(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowSchemaFilterContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowSchemaFilterContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

MySQLParser::ShowSchemaEntityContext* MySQLParser::ShowSchemaFilterContext::showSchemaEntity() {
  return getRuleContext<MySQLParser::ShowSchemaEntityContext>(0);
}

MySQLParser::UidContext* MySQLParser::ShowSchemaFilterContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::ShowFilterContext* MySQLParser::ShowSchemaFilterContext::showFilter() {
  return getRuleContext<MySQLParser::ShowFilterContext>(0);
}

tree::TerminalNode* MySQLParser::ShowSchemaFilterContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

tree::TerminalNode* MySQLParser::ShowSchemaFilterContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

MySQLParser::ShowSchemaFilterContext::ShowSchemaFilterContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowSchemaFilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowSchemaFilter(this);
}
void MySQLParser::ShowSchemaFilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowSchemaFilter(this);
}

antlrcpp::Any MySQLParser::ShowSchemaFilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowSchemaFilter(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowIndexesContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowIndexesContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

MySQLParser::TableNameContext* MySQLParser::ShowIndexesContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::ShowIndexesContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::ShowIndexesContext::INDEXES() {
  return getToken(MySQLParser::INDEXES, 0);
}

tree::TerminalNode* MySQLParser::ShowIndexesContext::KEYS() {
  return getToken(MySQLParser::KEYS, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::ShowIndexesContext::FROM() {
  return getTokens(MySQLParser::FROM);
}

tree::TerminalNode* MySQLParser::ShowIndexesContext::FROM(size_t i) {
  return getToken(MySQLParser::FROM, i);
}

std::vector<tree::TerminalNode *> MySQLParser::ShowIndexesContext::IN() {
  return getTokens(MySQLParser::IN);
}

tree::TerminalNode* MySQLParser::ShowIndexesContext::IN(size_t i) {
  return getToken(MySQLParser::IN, i);
}

MySQLParser::UidContext* MySQLParser::ShowIndexesContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::WhereClauseContext* MySQLParser::ShowIndexesContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}

MySQLParser::ShowIndexesContext::ShowIndexesContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowIndexesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowIndexes(this);
}
void MySQLParser::ShowIndexesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowIndexes(this);
}

antlrcpp::Any MySQLParser::ShowIndexesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowIndexes(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowLogEventsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowLogEventsContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowLogEventsContext::EVENTS() {
  return getToken(MySQLParser::EVENTS, 0);
}

tree::TerminalNode* MySQLParser::ShowLogEventsContext::BINLOG() {
  return getToken(MySQLParser::BINLOG, 0);
}

tree::TerminalNode* MySQLParser::ShowLogEventsContext::RELAYLOG() {
  return getToken(MySQLParser::RELAYLOG, 0);
}

tree::TerminalNode* MySQLParser::ShowLogEventsContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

tree::TerminalNode* MySQLParser::ShowLogEventsContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

tree::TerminalNode* MySQLParser::ShowLogEventsContext::LIMIT() {
  return getToken(MySQLParser::LIMIT, 0);
}

tree::TerminalNode* MySQLParser::ShowLogEventsContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::ShowLogEventsContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::ShowLogEventsContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}

MySQLParser::ShowLogEventsContext::ShowLogEventsContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowLogEventsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowLogEvents(this);
}
void MySQLParser::ShowLogEventsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowLogEvents(this);
}

antlrcpp::Any MySQLParser::ShowLogEventsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowLogEvents(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowMasterLogsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowMasterLogsContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowMasterLogsContext::LOGS() {
  return getToken(MySQLParser::LOGS, 0);
}

tree::TerminalNode* MySQLParser::ShowMasterLogsContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

tree::TerminalNode* MySQLParser::ShowMasterLogsContext::MASTER() {
  return getToken(MySQLParser::MASTER, 0);
}

MySQLParser::ShowMasterLogsContext::ShowMasterLogsContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowMasterLogsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowMasterLogs(this);
}
void MySQLParser::ShowMasterLogsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowMasterLogs(this);
}

antlrcpp::Any MySQLParser::ShowMasterLogsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowMasterLogs(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowGrantsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowGrantsContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowGrantsContext::GRANTS() {
  return getToken(MySQLParser::GRANTS, 0);
}

tree::TerminalNode* MySQLParser::ShowGrantsContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

MySQLParser::UserNameContext* MySQLParser::ShowGrantsContext::userName() {
  return getRuleContext<MySQLParser::UserNameContext>(0);
}

MySQLParser::ShowGrantsContext::ShowGrantsContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowGrantsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowGrants(this);
}
void MySQLParser::ShowGrantsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowGrants(this);
}

antlrcpp::Any MySQLParser::ShowGrantsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowGrants(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowSlaveStatusContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowSlaveStatusContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowSlaveStatusContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}

tree::TerminalNode* MySQLParser::ShowSlaveStatusContext::STATUS() {
  return getToken(MySQLParser::STATUS, 0);
}

tree::TerminalNode* MySQLParser::ShowSlaveStatusContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::ShowSlaveStatusContext::CHANNEL() {
  return getToken(MySQLParser::CHANNEL, 0);
}

tree::TerminalNode* MySQLParser::ShowSlaveStatusContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::ShowSlaveStatusContext::ShowSlaveStatusContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowSlaveStatusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowSlaveStatus(this);
}
void MySQLParser::ShowSlaveStatusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowSlaveStatus(this);
}

antlrcpp::Any MySQLParser::ShowSlaveStatusContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowSlaveStatus(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowRoutineContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowRoutineContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowRoutineContext::CODE() {
  return getToken(MySQLParser::CODE, 0);
}

MySQLParser::FullIdContext* MySQLParser::ShowRoutineContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

tree::TerminalNode* MySQLParser::ShowRoutineContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

tree::TerminalNode* MySQLParser::ShowRoutineContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

MySQLParser::ShowRoutineContext::ShowRoutineContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowRoutineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowRoutine(this);
}
void MySQLParser::ShowRoutineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowRoutine(this);
}

antlrcpp::Any MySQLParser::ShowRoutineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowRoutine(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowProfileContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowProfileContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileContext::PROFILE() {
  return getToken(MySQLParser::PROFILE, 0);
}

std::vector<MySQLParser::ShowProfileTypeContext *> MySQLParser::ShowProfileContext::showProfileType() {
  return getRuleContexts<MySQLParser::ShowProfileTypeContext>();
}

MySQLParser::ShowProfileTypeContext* MySQLParser::ShowProfileContext::showProfileType(size_t i) {
  return getRuleContext<MySQLParser::ShowProfileTypeContext>(i);
}

tree::TerminalNode* MySQLParser::ShowProfileContext::LIMIT() {
  return getToken(MySQLParser::LIMIT, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileContext::QUERY() {
  return getToken(MySQLParser::QUERY, 0);
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::ShowProfileContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::ShowProfileContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}

MySQLParser::ShowProfileContext::ShowProfileContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowProfileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowProfile(this);
}
void MySQLParser::ShowProfileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowProfile(this);
}

antlrcpp::Any MySQLParser::ShowProfileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowProfile(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowColumnsContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ShowColumnsContext::SHOW() {
  return getToken(MySQLParser::SHOW, 0);
}

MySQLParser::TableNameContext* MySQLParser::ShowColumnsContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::ShowColumnsContext::COLUMNS() {
  return getToken(MySQLParser::COLUMNS, 0);
}

tree::TerminalNode* MySQLParser::ShowColumnsContext::FIELDS() {
  return getToken(MySQLParser::FIELDS, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::ShowColumnsContext::FROM() {
  return getTokens(MySQLParser::FROM);
}

tree::TerminalNode* MySQLParser::ShowColumnsContext::FROM(size_t i) {
  return getToken(MySQLParser::FROM, i);
}

std::vector<tree::TerminalNode *> MySQLParser::ShowColumnsContext::IN() {
  return getTokens(MySQLParser::IN);
}

tree::TerminalNode* MySQLParser::ShowColumnsContext::IN(size_t i) {
  return getToken(MySQLParser::IN, i);
}

tree::TerminalNode* MySQLParser::ShowColumnsContext::FULL() {
  return getToken(MySQLParser::FULL, 0);
}

MySQLParser::UidContext* MySQLParser::ShowColumnsContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::ShowFilterContext* MySQLParser::ShowColumnsContext::showFilter() {
  return getRuleContext<MySQLParser::ShowFilterContext>(0);
}

MySQLParser::ShowColumnsContext::ShowColumnsContext(ShowStatementContext *ctx) { copyFrom(ctx); }

void MySQLParser::ShowColumnsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowColumns(this);
}
void MySQLParser::ShowColumnsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowColumns(this);
}

antlrcpp::Any MySQLParser::ShowColumnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowColumns(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::ShowStatementContext* MySQLParser::showStatement() {
  ShowStatementContext *_localctx = _tracker.createInstance<ShowStatementContext>(_ctx, getState());
  enterRule(_localctx, 452, MySQLParser::RuleShowStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5007);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 721, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowMasterLogsContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4857);
      match(MySQLParser::SHOW);
      setState(4858);
      dynamic_cast<ShowMasterLogsContext *>(_localctx)->logFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::BINARY || _la == MySQLParser::MASTER)) {
        dynamic_cast<ShowMasterLogsContext *>(_localctx)->logFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4859);
      match(MySQLParser::LOGS);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowLogEventsContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4860);
      match(MySQLParser::SHOW);
      setState(4861);
      dynamic_cast<ShowLogEventsContext *>(_localctx)->logFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::BINLOG || _la == MySQLParser::RELAYLOG)) {
        dynamic_cast<ShowLogEventsContext *>(_localctx)->logFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4862);
      match(MySQLParser::EVENTS);
      setState(4865);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IN) {
        setState(4863);
        match(MySQLParser::IN);
        setState(4864);
        dynamic_cast<ShowLogEventsContext *>(_localctx)->filename = match(MySQLParser::STRING_LITERAL);
      }
      setState(4869);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FROM) {
        setState(4867);
        match(MySQLParser::FROM);
        setState(4868);
        dynamic_cast<ShowLogEventsContext *>(_localctx)->fromPosition = decimalLiteral();
      }
      setState(4878);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LIMIT) {
        setState(4871);
        match(MySQLParser::LIMIT);
        setState(4875);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 702, _ctx)) {
        case 1: {
          setState(4872);
          dynamic_cast<ShowLogEventsContext *>(_localctx)->offset = decimalLiteral();
          setState(4873);
          match(MySQLParser::COMMA);
          break;
        }

        }
        setState(4877);
        dynamic_cast<ShowLogEventsContext *>(_localctx)->rowCount = decimalLiteral();
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowObjectFilterContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4880);
      match(MySQLParser::SHOW);
      setState(4881);
      showCommonEntity();
      setState(4883);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LIKE || _la == MySQLParser::WHERE) {
        setState(4882);
        showFilter();
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowColumnsContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4885);
      match(MySQLParser::SHOW);
      setState(4887);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FULL) {
        setState(4886);
        match(MySQLParser::FULL);
      }
      setState(4889);
      dynamic_cast<ShowColumnsContext *>(_localctx)->columnsFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::COLUMNS

      || _la == MySQLParser::FIELDS)) {
        dynamic_cast<ShowColumnsContext *>(_localctx)->columnsFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4890);
      dynamic_cast<ShowColumnsContext *>(_localctx)->tableFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FROM

      || _la == MySQLParser::IN)) {
        dynamic_cast<ShowColumnsContext *>(_localctx)->tableFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4891);
      tableName();
      setState(4894);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FROM

      || _la == MySQLParser::IN) {
        setState(4892);
        dynamic_cast<ShowColumnsContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::FROM

        || _la == MySQLParser::IN)) {
          dynamic_cast<ShowColumnsContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4893);
        uid();
      }
      setState(4897);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LIKE || _la == MySQLParser::WHERE) {
        setState(4896);
        showFilter();
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowCreateDbContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(4899);
      match(MySQLParser::SHOW);
      setState(4900);
      match(MySQLParser::CREATE);
      setState(4901);
      dynamic_cast<ShowCreateDbContext *>(_localctx)->schemaFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::DATABASE || _la == MySQLParser::SCHEMA)) {
        dynamic_cast<ShowCreateDbContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4903);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::IF) {
        setState(4902);
        ifNotExists();
      }
      setState(4905);
      uid();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowCreateFullIdObjectContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(4906);
      match(MySQLParser::SHOW);
      setState(4907);
      match(MySQLParser::CREATE);
      setState(4908);
      dynamic_cast<ShowCreateFullIdObjectContext *>(_localctx)->namedEntity = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 113) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 113)) & ((1ULL << (MySQLParser::PROCEDURE - 113))
        | (1ULL << (MySQLParser::TABLE - 113))
        | (1ULL << (MySQLParser::TRIGGER - 113)))) != 0) || _la == MySQLParser::EVENT

      || _la == MySQLParser::FUNCTION || _la == MySQLParser::VIEW)) {
        dynamic_cast<ShowCreateFullIdObjectContext *>(_localctx)->namedEntity = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4909);
      fullId();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowCreateUserContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(4910);
      match(MySQLParser::SHOW);
      setState(4911);
      match(MySQLParser::CREATE);
      setState(4912);
      match(MySQLParser::USER);
      setState(4913);
      userName();
      break;
    }

    case 8: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowEngineContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(4914);
      match(MySQLParser::SHOW);
      setState(4915);
      match(MySQLParser::ENGINE);
      setState(4916);
      engineName();
      setState(4917);
      dynamic_cast<ShowEngineContext *>(_localctx)->engineOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::MUTEX || _la == MySQLParser::STATUS)) {
        dynamic_cast<ShowEngineContext *>(_localctx)->engineOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowGlobalInfoContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(4919);
      match(MySQLParser::SHOW);
      setState(4920);
      showGlobalInfoClause();
      break;
    }

    case 10: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowErrorsContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(4921);
      match(MySQLParser::SHOW);
      setState(4922);
      dynamic_cast<ShowErrorsContext *>(_localctx)->errorFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ERRORS || _la == MySQLParser::WARNINGS)) {
        dynamic_cast<ShowErrorsContext *>(_localctx)->errorFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }

      setState(4923);
      match(MySQLParser::LIMIT);
      setState(4927);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 709, _ctx)) {
      case 1: {
        setState(4924);
        dynamic_cast<ShowErrorsContext *>(_localctx)->offset = decimalLiteral();
        setState(4925);
        match(MySQLParser::COMMA);
        break;
      }

      }
      setState(4929);
      dynamic_cast<ShowErrorsContext *>(_localctx)->rowCount = decimalLiteral();
      break;
    }

    case 11: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowCountErrorsContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(4930);
      match(MySQLParser::SHOW);
      setState(4931);
      match(MySQLParser::COUNT);
      setState(4932);
      match(MySQLParser::LR_BRACKET);
      setState(4933);
      match(MySQLParser::STAR);
      setState(4934);
      match(MySQLParser::RR_BRACKET);
      setState(4935);
      dynamic_cast<ShowCountErrorsContext *>(_localctx)->errorFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ERRORS || _la == MySQLParser::WARNINGS)) {
        dynamic_cast<ShowCountErrorsContext *>(_localctx)->errorFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowSchemaFilterContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(4936);
      match(MySQLParser::SHOW);
      setState(4937);
      showSchemaEntity();
      setState(4940);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FROM

      || _la == MySQLParser::IN) {
        setState(4938);
        dynamic_cast<ShowSchemaFilterContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::FROM

        || _la == MySQLParser::IN)) {
          dynamic_cast<ShowSchemaFilterContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4939);
        uid();
      }
      setState(4943);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LIKE || _la == MySQLParser::WHERE) {
        setState(4942);
        showFilter();
      }
      break;
    }

    case 13: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowRoutineContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(4945);
      match(MySQLParser::SHOW);
      setState(4946);
      dynamic_cast<ShowRoutineContext *>(_localctx)->routine = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::PROCEDURE || _la == MySQLParser::FUNCTION)) {
        dynamic_cast<ShowRoutineContext *>(_localctx)->routine = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4947);
      match(MySQLParser::CODE);
      setState(4948);
      fullId();
      break;
    }

    case 14: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowGrantsContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(4949);
      match(MySQLParser::SHOW);
      setState(4950);
      match(MySQLParser::GRANTS);
      setState(4953);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FOR) {
        setState(4951);
        match(MySQLParser::FOR);
        setState(4952);
        userName();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowIndexesContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(4955);
      match(MySQLParser::SHOW);
      setState(4956);
      dynamic_cast<ShowIndexesContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::INDEX

      || _la == MySQLParser::KEYS || _la == MySQLParser::INDEXES)) {
        dynamic_cast<ShowIndexesContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4957);
      dynamic_cast<ShowIndexesContext *>(_localctx)->tableFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FROM

      || _la == MySQLParser::IN)) {
        dynamic_cast<ShowIndexesContext *>(_localctx)->tableFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4958);
      tableName();
      setState(4961);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FROM

      || _la == MySQLParser::IN) {
        setState(4959);
        dynamic_cast<ShowIndexesContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::FROM

        || _la == MySQLParser::IN)) {
          dynamic_cast<ShowIndexesContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4960);
        uid();
      }
      setState(4964);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::WHERE) {
        setState(4963);
        whereClause();
      }
      break;
    }

    case 16: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowOpenTablesContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(4966);
      match(MySQLParser::SHOW);
      setState(4967);
      match(MySQLParser::OPEN);
      setState(4968);
      match(MySQLParser::TABLES);
      setState(4971);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FROM

      || _la == MySQLParser::IN) {
        setState(4969);
        dynamic_cast<ShowOpenTablesContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::FROM

        || _la == MySQLParser::IN)) {
          dynamic_cast<ShowOpenTablesContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4970);
        uid();
      }
      setState(4974);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LIKE || _la == MySQLParser::WHERE) {
        setState(4973);
        showFilter();
      }
      break;
    }

    case 17: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowProfileContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(4976);
      match(MySQLParser::SHOW);
      setState(4977);
      match(MySQLParser::PROFILE);
      setState(4978);
      showProfileType();
      setState(4983);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(4979);
        match(MySQLParser::COMMA);
        setState(4980);
        showProfileType();
        setState(4985);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4989);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FOR) {
        setState(4986);
        match(MySQLParser::FOR);
        setState(4987);
        match(MySQLParser::QUERY);
        setState(4988);
        dynamic_cast<ShowProfileContext *>(_localctx)->queryCount = decimalLiteral();
      }

      setState(4991);
      match(MySQLParser::LIMIT);
      setState(4995);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 719, _ctx)) {
      case 1: {
        setState(4992);
        dynamic_cast<ShowProfileContext *>(_localctx)->offset = decimalLiteral();
        setState(4993);
        match(MySQLParser::COMMA);
        break;
      }

      }
      setState(4997);
      dynamic_cast<ShowProfileContext *>(_localctx)->rowCount = decimalLiteral();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySQLParser::ShowSlaveStatusContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(4999);
      match(MySQLParser::SHOW);
      setState(5000);
      match(MySQLParser::SLAVE);
      setState(5001);
      match(MySQLParser::STATUS);
      setState(5005);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FOR) {
        setState(5002);
        match(MySQLParser::FOR);
        setState(5003);
        match(MySQLParser::CHANNEL);
        setState(5004);
        match(MySQLParser::STRING_LITERAL);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableClauseContext ------------------------------------------------------------------

MySQLParser::VariableClauseContext::VariableClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::VariableClauseContext::LOCAL_ID() {
  return getToken(MySQLParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySQLParser::VariableClauseContext::GLOBAL_ID() {
  return getToken(MySQLParser::GLOBAL_ID, 0);
}

MySQLParser::UidContext* MySQLParser::VariableClauseContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::VariableClauseContext::GLOBAL() {
  return getToken(MySQLParser::GLOBAL, 0);
}

tree::TerminalNode* MySQLParser::VariableClauseContext::SESSION() {
  return getToken(MySQLParser::SESSION, 0);
}

tree::TerminalNode* MySQLParser::VariableClauseContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}


size_t MySQLParser::VariableClauseContext::getRuleIndex() const {
  return MySQLParser::RuleVariableClause;
}

void MySQLParser::VariableClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableClause(this);
}

void MySQLParser::VariableClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableClause(this);
}


antlrcpp::Any MySQLParser::VariableClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitVariableClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::VariableClauseContext* MySQLParser::variableClause() {
  VariableClauseContext *_localctx = _tracker.createInstance<VariableClauseContext>(_ctx, getState());
  enterRule(_localctx, 454, MySQLParser::RuleVariableClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5019);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 1);
        setState(5009);
        match(MySQLParser::LOCAL_ID);
        break;
      }

      case MySQLParser::GLOBAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(5010);
        match(MySQLParser::GLOBAL_ID);
        break;
      }

      case MySQLParser::DATABASE:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::DATETIME:
      case MySQLParser::YEAR:
      case MySQLParser::TEXT:
      case MySQLParser::ENUM:
      case MySQLParser::SERIAL:
      case MySQLParser::COUNT:
      case MySQLParser::POSITION:
      case MySQLParser::ACCOUNT:
      case MySQLParser::ACTION:
      case MySQLParser::AFTER:
      case MySQLParser::AGGREGATE:
      case MySQLParser::ALGORITHM:
      case MySQLParser::ANY:
      case MySQLParser::AT:
      case MySQLParser::AUTHORS:
      case MySQLParser::AUTOCOMMIT:
      case MySQLParser::AUTOEXTEND_SIZE:
      case MySQLParser::AUTO_INCREMENT:
      case MySQLParser::AVG_ROW_LENGTH:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::BIT:
      case MySQLParser::BLOCK:
      case MySQLParser::BOOL:
      case MySQLParser::BOOLEAN:
      case MySQLParser::BTREE:
      case MySQLParser::CACHE:
      case MySQLParser::CASCADED:
      case MySQLParser::CHAIN:
      case MySQLParser::CHANGED:
      case MySQLParser::CHANNEL:
      case MySQLParser::CHECKSUM:
      case MySQLParser::PAGE_CHECKSUM:
      case MySQLParser::CIPHER:
      case MySQLParser::CLIENT:
      case MySQLParser::CLOSE:
      case MySQLParser::COALESCE:
      case MySQLParser::CODE:
      case MySQLParser::COLUMNS:
      case MySQLParser::COLUMN_FORMAT:
      case MySQLParser::COMMENT:
      case MySQLParser::COMMIT:
      case MySQLParser::COMPACT:
      case MySQLParser::COMPLETION:
      case MySQLParser::COMPRESSED:
      case MySQLParser::COMPRESSION:
      case MySQLParser::CONCURRENT:
      case MySQLParser::CONNECTION:
      case MySQLParser::CONSISTENT:
      case MySQLParser::CONTAINS:
      case MySQLParser::CONTEXT:
      case MySQLParser::CONTRIBUTORS:
      case MySQLParser::COPY:
      case MySQLParser::CPU:
      case MySQLParser::DATA:
      case MySQLParser::DATAFILE:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DEFAULT_AUTH:
      case MySQLParser::DEFINER:
      case MySQLParser::DELAY_KEY_WRITE:
      case MySQLParser::DES_KEY_FILE:
      case MySQLParser::DIRECTORY:
      case MySQLParser::DISABLE:
      case MySQLParser::DISCARD:
      case MySQLParser::DISK:
      case MySQLParser::DO:
      case MySQLParser::DUMPFILE:
      case MySQLParser::DUPLICATE:
      case MySQLParser::DYNAMIC:
      case MySQLParser::ENABLE:
      case MySQLParser::ENCRYPTION:
      case MySQLParser::END:
      case MySQLParser::ENDS:
      case MySQLParser::ENGINE:
      case MySQLParser::ENGINES:
      case MySQLParser::ERROR:
      case MySQLParser::ERRORS:
      case MySQLParser::ESCAPE:
      case MySQLParser::EVEN:
      case MySQLParser::EVENT:
      case MySQLParser::EVENTS:
      case MySQLParser::EVERY:
      case MySQLParser::EXCHANGE:
      case MySQLParser::EXCLUSIVE:
      case MySQLParser::EXPIRE:
      case MySQLParser::EXPORT:
      case MySQLParser::EXTENDED:
      case MySQLParser::EXTENT_SIZE:
      case MySQLParser::FAST:
      case MySQLParser::FAULTS:
      case MySQLParser::FIELDS:
      case MySQLParser::FILE_BLOCK_SIZE:
      case MySQLParser::FILTER:
      case MySQLParser::FIRST:
      case MySQLParser::FIXED:
      case MySQLParser::FLUSH:
      case MySQLParser::FOLLOWS:
      case MySQLParser::FOUND:
      case MySQLParser::FULL:
      case MySQLParser::FUNCTION:
      case MySQLParser::GENERAL:
      case MySQLParser::GLOBAL:
      case MySQLParser::GRANTS:
      case MySQLParser::GROUP_REPLICATION:
      case MySQLParser::HANDLER:
      case MySQLParser::HASH:
      case MySQLParser::HELP:
      case MySQLParser::HOST:
      case MySQLParser::HOSTS:
      case MySQLParser::IDENTIFIED:
      case MySQLParser::IGNORE_SERVER_IDS:
      case MySQLParser::IMPORT:
      case MySQLParser::INDEXES:
      case MySQLParser::INITIAL_SIZE:
      case MySQLParser::INPLACE:
      case MySQLParser::INSERT_METHOD:
      case MySQLParser::INSTALL:
      case MySQLParser::INSTANCE:
      case MySQLParser::INVISIBLE:
      case MySQLParser::INVOKER:
      case MySQLParser::IO:
      case MySQLParser::IO_THREAD:
      case MySQLParser::IPC:
      case MySQLParser::ISOLATION:
      case MySQLParser::ISSUER:
      case MySQLParser::JSON:
      case MySQLParser::KEY_BLOCK_SIZE:
      case MySQLParser::LANGUAGE:
      case MySQLParser::LAST:
      case MySQLParser::LEAVES:
      case MySQLParser::LESS:
      case MySQLParser::LEVEL:
      case MySQLParser::LIST:
      case MySQLParser::LOCAL:
      case MySQLParser::LOGFILE:
      case MySQLParser::LOGS:
      case MySQLParser::MASTER:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_HEARTBEAT_PERIOD:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::MASTER_SSL:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
      case MySQLParser::MAX_QUERIES_PER_HOUR:
      case MySQLParser::MAX_ROWS:
      case MySQLParser::MAX_SIZE:
      case MySQLParser::MAX_UPDATES_PER_HOUR:
      case MySQLParser::MAX_USER_CONNECTIONS:
      case MySQLParser::MEDIUM:
      case MySQLParser::MERGE:
      case MySQLParser::MID:
      case MySQLParser::MIGRATE:
      case MySQLParser::MIN_ROWS:
      case MySQLParser::MODE:
      case MySQLParser::MODIFY:
      case MySQLParser::MUTEX:
      case MySQLParser::MYSQL:
      case MySQLParser::NAME:
      case MySQLParser::NAMES:
      case MySQLParser::NCHAR:
      case MySQLParser::NEVER:
      case MySQLParser::NEXT:
      case MySQLParser::NO:
      case MySQLParser::NODEGROUP:
      case MySQLParser::NONE:
      case MySQLParser::OFFLINE:
      case MySQLParser::OFFSET:
      case MySQLParser::OJ:
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::ONE:
      case MySQLParser::ONLINE:
      case MySQLParser::ONLY:
      case MySQLParser::OPEN:
      case MySQLParser::OPTIMIZER_COSTS:
      case MySQLParser::OPTIONS:
      case MySQLParser::OWNER:
      case MySQLParser::PACK_KEYS:
      case MySQLParser::PAGE:
      case MySQLParser::PARSER:
      case MySQLParser::PARTIAL:
      case MySQLParser::PARTITIONING:
      case MySQLParser::PARTITIONS:
      case MySQLParser::PASSWORD:
      case MySQLParser::PHASE:
      case MySQLParser::PLUGIN:
      case MySQLParser::PLUGIN_DIR:
      case MySQLParser::PLUGINS:
      case MySQLParser::PORT:
      case MySQLParser::PRECEDES:
      case MySQLParser::PREPARE:
      case MySQLParser::PRESERVE:
      case MySQLParser::PREV:
      case MySQLParser::PROCESSLIST:
      case MySQLParser::PROFILE:
      case MySQLParser::PROFILES:
      case MySQLParser::PROXY:
      case MySQLParser::QUERY:
      case MySQLParser::QUICK:
      case MySQLParser::REBUILD:
      case MySQLParser::RECOVER:
      case MySQLParser::REDO_BUFFER_SIZE:
      case MySQLParser::REDUNDANT:
      case MySQLParser::RELAY:
      case MySQLParser::RELAY_LOG_FILE:
      case MySQLParser::RELAY_LOG_POS:
      case MySQLParser::RELAYLOG:
      case MySQLParser::REMOVE:
      case MySQLParser::REORGANIZE:
      case MySQLParser::REPAIR:
      case MySQLParser::REPLICATE_DO_DB:
      case MySQLParser::REPLICATE_DO_TABLE:
      case MySQLParser::REPLICATE_IGNORE_DB:
      case MySQLParser::REPLICATE_IGNORE_TABLE:
      case MySQLParser::REPLICATE_REWRITE_DB:
      case MySQLParser::REPLICATE_WILD_DO_TABLE:
      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySQLParser::REPLICATION:
      case MySQLParser::RESET:
      case MySQLParser::RESUME:
      case MySQLParser::RETURNS:
      case MySQLParser::ROLLBACK:
      case MySQLParser::ROLLUP:
      case MySQLParser::ROTATE:
      case MySQLParser::ROW:
      case MySQLParser::ROWS:
      case MySQLParser::ROW_FORMAT:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::SCHEDULE:
      case MySQLParser::SECURITY:
      case MySQLParser::SERVER:
      case MySQLParser::SESSION:
      case MySQLParser::SHARE:
      case MySQLParser::SHARED:
      case MySQLParser::SIGNED:
      case MySQLParser::SIMPLE:
      case MySQLParser::SLAVE:
      case MySQLParser::SLOW:
      case MySQLParser::SNAPSHOT:
      case MySQLParser::SOCKET:
      case MySQLParser::SOME:
      case MySQLParser::SONAME:
      case MySQLParser::SOUNDS:
      case MySQLParser::SOURCE:
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_AFTER_MTS_GAPS:
      case MySQLParser::SQL_BEFORE_GTIDS:
      case MySQLParser::SQL_BUFFER_RESULT:
      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE:
      case MySQLParser::SQL_THREAD:
      case MySQLParser::START:
      case MySQLParser::STARTS:
      case MySQLParser::STATS_AUTO_RECALC:
      case MySQLParser::STATS_PERSISTENT:
      case MySQLParser::STATS_SAMPLE_PAGES:
      case MySQLParser::STATUS:
      case MySQLParser::STOP:
      case MySQLParser::STORAGE:
      case MySQLParser::STRING:
      case MySQLParser::SUBJECT:
      case MySQLParser::SUBPARTITION:
      case MySQLParser::SUBPARTITIONS:
      case MySQLParser::SUSPEND:
      case MySQLParser::SWAPS:
      case MySQLParser::SWITCHES:
      case MySQLParser::TABLESPACE:
      case MySQLParser::TEMPORARY:
      case MySQLParser::TEMPTABLE:
      case MySQLParser::THAN:
      case MySQLParser::TRADITIONAL:
      case MySQLParser::TRANSACTION:
      case MySQLParser::TRIGGERS:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNDEFINED:
      case MySQLParser::UNDOFILE:
      case MySQLParser::UNDO_BUFFER_SIZE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::UNKNOWN:
      case MySQLParser::UNTIL:
      case MySQLParser::UPGRADE:
      case MySQLParser::USER:
      case MySQLParser::USE_FRM:
      case MySQLParser::USER_RESOURCES:
      case MySQLParser::VALIDATION:
      case MySQLParser::VALUE:
      case MySQLParser::VARIABLES:
      case MySQLParser::VIEW:
      case MySQLParser::VISIBLE:
      case MySQLParser::WAIT:
      case MySQLParser::WARNINGS:
      case MySQLParser::WITHOUT:
      case MySQLParser::WORK:
      case MySQLParser::WRAPPER:
      case MySQLParser::X509:
      case MySQLParser::XA:
      case MySQLParser::XML:
      case MySQLParser::INTERNAL:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::TABLES:
      case MySQLParser::ROUTINE:
      case MySQLParser::EXECUTE:
      case MySQLParser::FILE:
      case MySQLParser::PROCESS:
      case MySQLParser::RELOAD:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::SUPER:
      case MySQLParser::PRIVILEGES:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4:
      case MySQLParser::ARCHIVE:
      case MySQLParser::BLACKHOLE:
      case MySQLParser::CSV:
      case MySQLParser::FEDERATED:
      case MySQLParser::INNODB:
      case MySQLParser::MEMORY:
      case MySQLParser::MRG_MYISAM:
      case MySQLParser::MYISAM:
      case MySQLParser::NDB:
      case MySQLParser::NDBCLUSTER:
      case MySQLParser::PERFORMANCE_SCHEMA:
      case MySQLParser::TOKUDB:
      case MySQLParser::REPEATABLE:
      case MySQLParser::COMMITTED:
      case MySQLParser::UNCOMMITTED:
      case MySQLParser::SERIALIZABLE:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION:
      case MySQLParser::AT_SIGN:
      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::ID:
      case MySQLParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 3);
        setState(5016);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 723, _ctx)) {
        case 1: {
          setState(5013);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::AT_SIGN) {
            setState(5011);
            match(MySQLParser::AT_SIGN);
            setState(5012);
            match(MySQLParser::AT_SIGN);
          }
          setState(5015);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::GLOBAL

          || _la == MySQLParser::LOCAL || _la == MySQLParser::SESSION)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        }
        setState(5018);
        uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowCommonEntityContext ------------------------------------------------------------------

MySQLParser::ShowCommonEntityContext::ShowCommonEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::COLLATION() {
  return getToken(MySQLParser::COLLATION, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::DATABASES() {
  return getToken(MySQLParser::DATABASES, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::SCHEMAS() {
  return getToken(MySQLParser::SCHEMAS, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::STATUS() {
  return getToken(MySQLParser::STATUS, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::PROCEDURE() {
  return getToken(MySQLParser::PROCEDURE, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::VARIABLES() {
  return getToken(MySQLParser::VARIABLES, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::GLOBAL() {
  return getToken(MySQLParser::GLOBAL, 0);
}

tree::TerminalNode* MySQLParser::ShowCommonEntityContext::SESSION() {
  return getToken(MySQLParser::SESSION, 0);
}


size_t MySQLParser::ShowCommonEntityContext::getRuleIndex() const {
  return MySQLParser::RuleShowCommonEntity;
}

void MySQLParser::ShowCommonEntityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCommonEntity(this);
}

void MySQLParser::ShowCommonEntityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCommonEntity(this);
}


antlrcpp::Any MySQLParser::ShowCommonEntityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowCommonEntity(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ShowCommonEntityContext* MySQLParser::showCommonEntity() {
  ShowCommonEntityContext *_localctx = _tracker.createInstance<ShowCommonEntityContext>(_ctx, getState());
  enterRule(_localctx, 456, MySQLParser::RuleShowCommonEntity);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5034);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::CHARACTER: {
        enterOuterAlt(_localctx, 1);
        setState(5021);
        match(MySQLParser::CHARACTER);
        setState(5022);
        match(MySQLParser::SET);
        break;
      }

      case MySQLParser::COLLATION: {
        enterOuterAlt(_localctx, 2);
        setState(5023);
        match(MySQLParser::COLLATION);
        break;
      }

      case MySQLParser::DATABASES: {
        enterOuterAlt(_localctx, 3);
        setState(5024);
        match(MySQLParser::DATABASES);
        break;
      }

      case MySQLParser::SCHEMAS: {
        enterOuterAlt(_localctx, 4);
        setState(5025);
        match(MySQLParser::SCHEMAS);
        break;
      }

      case MySQLParser::FUNCTION: {
        enterOuterAlt(_localctx, 5);
        setState(5026);
        match(MySQLParser::FUNCTION);
        setState(5027);
        match(MySQLParser::STATUS);
        break;
      }

      case MySQLParser::PROCEDURE: {
        enterOuterAlt(_localctx, 6);
        setState(5028);
        match(MySQLParser::PROCEDURE);
        setState(5029);
        match(MySQLParser::STATUS);
        break;
      }

      case MySQLParser::GLOBAL:
      case MySQLParser::SESSION:
      case MySQLParser::STATUS:
      case MySQLParser::VARIABLES: {
        enterOuterAlt(_localctx, 7);
        setState(5031);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::GLOBAL || _la == MySQLParser::SESSION) {
          setState(5030);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::GLOBAL || _la == MySQLParser::SESSION)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(5033);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::STATUS

        || _la == MySQLParser::VARIABLES)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowFilterContext ------------------------------------------------------------------

MySQLParser::ShowFilterContext::ShowFilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ShowFilterContext::LIKE() {
  return getToken(MySQLParser::LIKE, 0);
}

tree::TerminalNode* MySQLParser::ShowFilterContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::WhereClauseContext* MySQLParser::ShowFilterContext::whereClause() {
  return getRuleContext<MySQLParser::WhereClauseContext>(0);
}


size_t MySQLParser::ShowFilterContext::getRuleIndex() const {
  return MySQLParser::RuleShowFilter;
}

void MySQLParser::ShowFilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowFilter(this);
}

void MySQLParser::ShowFilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowFilter(this);
}


antlrcpp::Any MySQLParser::ShowFilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowFilter(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ShowFilterContext* MySQLParser::showFilter() {
  ShowFilterContext *_localctx = _tracker.createInstance<ShowFilterContext>(_ctx, getState());
  enterRule(_localctx, 458, MySQLParser::RuleShowFilter);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5039);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::LIKE: {
        enterOuterAlt(_localctx, 1);
        setState(5036);
        match(MySQLParser::LIKE);
        setState(5037);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::WHERE: {
        enterOuterAlt(_localctx, 2);
        setState(5038);
        whereClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowGlobalInfoClauseContext ------------------------------------------------------------------

MySQLParser::ShowGlobalInfoClauseContext::ShowGlobalInfoClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::ENGINES() {
  return getToken(MySQLParser::ENGINES, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::STORAGE() {
  return getToken(MySQLParser::STORAGE, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::MASTER() {
  return getToken(MySQLParser::MASTER, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::STATUS() {
  return getToken(MySQLParser::STATUS, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::PLUGINS() {
  return getToken(MySQLParser::PLUGINS, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::PRIVILEGES() {
  return getToken(MySQLParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::PROCESSLIST() {
  return getToken(MySQLParser::PROCESSLIST, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::FULL() {
  return getToken(MySQLParser::FULL, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::PROFILES() {
  return getToken(MySQLParser::PROFILES, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::HOSTS() {
  return getToken(MySQLParser::HOSTS, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::AUTHORS() {
  return getToken(MySQLParser::AUTHORS, 0);
}

tree::TerminalNode* MySQLParser::ShowGlobalInfoClauseContext::CONTRIBUTORS() {
  return getToken(MySQLParser::CONTRIBUTORS, 0);
}


size_t MySQLParser::ShowGlobalInfoClauseContext::getRuleIndex() const {
  return MySQLParser::RuleShowGlobalInfoClause;
}

void MySQLParser::ShowGlobalInfoClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowGlobalInfoClause(this);
}

void MySQLParser::ShowGlobalInfoClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowGlobalInfoClause(this);
}


antlrcpp::Any MySQLParser::ShowGlobalInfoClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowGlobalInfoClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ShowGlobalInfoClauseContext* MySQLParser::showGlobalInfoClause() {
  ShowGlobalInfoClauseContext *_localctx = _tracker.createInstance<ShowGlobalInfoClauseContext>(_ctx, getState());
  enterRule(_localctx, 460, MySQLParser::RuleShowGlobalInfoClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5058);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ENGINES:
      case MySQLParser::STORAGE: {
        enterOuterAlt(_localctx, 1);
        setState(5042);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::STORAGE) {
          setState(5041);
          match(MySQLParser::STORAGE);
        }
        setState(5044);
        match(MySQLParser::ENGINES);
        break;
      }

      case MySQLParser::MASTER: {
        enterOuterAlt(_localctx, 2);
        setState(5045);
        match(MySQLParser::MASTER);
        setState(5046);
        match(MySQLParser::STATUS);
        break;
      }

      case MySQLParser::PLUGINS: {
        enterOuterAlt(_localctx, 3);
        setState(5047);
        match(MySQLParser::PLUGINS);
        break;
      }

      case MySQLParser::PRIVILEGES: {
        enterOuterAlt(_localctx, 4);
        setState(5048);
        match(MySQLParser::PRIVILEGES);
        break;
      }

      case MySQLParser::FULL:
      case MySQLParser::PROCESSLIST: {
        enterOuterAlt(_localctx, 5);
        setState(5050);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::FULL) {
          setState(5049);
          match(MySQLParser::FULL);
        }
        setState(5052);
        match(MySQLParser::PROCESSLIST);
        break;
      }

      case MySQLParser::PROFILES: {
        enterOuterAlt(_localctx, 6);
        setState(5053);
        match(MySQLParser::PROFILES);
        break;
      }

      case MySQLParser::SLAVE: {
        enterOuterAlt(_localctx, 7);
        setState(5054);
        match(MySQLParser::SLAVE);
        setState(5055);
        match(MySQLParser::HOSTS);
        break;
      }

      case MySQLParser::AUTHORS: {
        enterOuterAlt(_localctx, 8);
        setState(5056);
        match(MySQLParser::AUTHORS);
        break;
      }

      case MySQLParser::CONTRIBUTORS: {
        enterOuterAlt(_localctx, 9);
        setState(5057);
        match(MySQLParser::CONTRIBUTORS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowSchemaEntityContext ------------------------------------------------------------------

MySQLParser::ShowSchemaEntityContext::ShowSchemaEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ShowSchemaEntityContext::EVENTS() {
  return getToken(MySQLParser::EVENTS, 0);
}

tree::TerminalNode* MySQLParser::ShowSchemaEntityContext::TABLE() {
  return getToken(MySQLParser::TABLE, 0);
}

tree::TerminalNode* MySQLParser::ShowSchemaEntityContext::STATUS() {
  return getToken(MySQLParser::STATUS, 0);
}

tree::TerminalNode* MySQLParser::ShowSchemaEntityContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}

tree::TerminalNode* MySQLParser::ShowSchemaEntityContext::FULL() {
  return getToken(MySQLParser::FULL, 0);
}

tree::TerminalNode* MySQLParser::ShowSchemaEntityContext::TRIGGERS() {
  return getToken(MySQLParser::TRIGGERS, 0);
}


size_t MySQLParser::ShowSchemaEntityContext::getRuleIndex() const {
  return MySQLParser::RuleShowSchemaEntity;
}

void MySQLParser::ShowSchemaEntityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowSchemaEntity(this);
}

void MySQLParser::ShowSchemaEntityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowSchemaEntity(this);
}


antlrcpp::Any MySQLParser::ShowSchemaEntityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowSchemaEntity(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ShowSchemaEntityContext* MySQLParser::showSchemaEntity() {
  ShowSchemaEntityContext *_localctx = _tracker.createInstance<ShowSchemaEntityContext>(_ctx, getState());
  enterRule(_localctx, 462, MySQLParser::RuleShowSchemaEntity);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5068);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::EVENTS: {
        enterOuterAlt(_localctx, 1);
        setState(5060);
        match(MySQLParser::EVENTS);
        break;
      }

      case MySQLParser::TABLE: {
        enterOuterAlt(_localctx, 2);
        setState(5061);
        match(MySQLParser::TABLE);
        setState(5062);
        match(MySQLParser::STATUS);
        break;
      }

      case MySQLParser::FULL:
      case MySQLParser::TABLES: {
        enterOuterAlt(_localctx, 3);
        setState(5064);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::FULL) {
          setState(5063);
          match(MySQLParser::FULL);
        }
        setState(5066);
        match(MySQLParser::TABLES);
        break;
      }

      case MySQLParser::TRIGGERS: {
        enterOuterAlt(_localctx, 4);
        setState(5067);
        match(MySQLParser::TRIGGERS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowProfileTypeContext ------------------------------------------------------------------

MySQLParser::ShowProfileTypeContext::ShowProfileTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::BLOCK() {
  return getToken(MySQLParser::BLOCK, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::IO() {
  return getToken(MySQLParser::IO, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::CONTEXT() {
  return getToken(MySQLParser::CONTEXT, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::SWITCHES() {
  return getToken(MySQLParser::SWITCHES, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::CPU() {
  return getToken(MySQLParser::CPU, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::IPC() {
  return getToken(MySQLParser::IPC, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::MEMORY() {
  return getToken(MySQLParser::MEMORY, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::PAGE() {
  return getToken(MySQLParser::PAGE, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::FAULTS() {
  return getToken(MySQLParser::FAULTS, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::SOURCE() {
  return getToken(MySQLParser::SOURCE, 0);
}

tree::TerminalNode* MySQLParser::ShowProfileTypeContext::SWAPS() {
  return getToken(MySQLParser::SWAPS, 0);
}


size_t MySQLParser::ShowProfileTypeContext::getRuleIndex() const {
  return MySQLParser::RuleShowProfileType;
}

void MySQLParser::ShowProfileTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowProfileType(this);
}

void MySQLParser::ShowProfileTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowProfileType(this);
}


antlrcpp::Any MySQLParser::ShowProfileTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShowProfileType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ShowProfileTypeContext* MySQLParser::showProfileType() {
  ShowProfileTypeContext *_localctx = _tracker.createInstance<ShowProfileTypeContext>(_ctx, getState());
  enterRule(_localctx, 464, MySQLParser::RuleShowProfileType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5082);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(5070);
        match(MySQLParser::ALL);
        break;
      }

      case MySQLParser::BLOCK: {
        enterOuterAlt(_localctx, 2);
        setState(5071);
        match(MySQLParser::BLOCK);
        setState(5072);
        match(MySQLParser::IO);
        break;
      }

      case MySQLParser::CONTEXT: {
        enterOuterAlt(_localctx, 3);
        setState(5073);
        match(MySQLParser::CONTEXT);
        setState(5074);
        match(MySQLParser::SWITCHES);
        break;
      }

      case MySQLParser::CPU: {
        enterOuterAlt(_localctx, 4);
        setState(5075);
        match(MySQLParser::CPU);
        break;
      }

      case MySQLParser::IPC: {
        enterOuterAlt(_localctx, 5);
        setState(5076);
        match(MySQLParser::IPC);
        break;
      }

      case MySQLParser::MEMORY: {
        enterOuterAlt(_localctx, 6);
        setState(5077);
        match(MySQLParser::MEMORY);
        break;
      }

      case MySQLParser::PAGE: {
        enterOuterAlt(_localctx, 7);
        setState(5078);
        match(MySQLParser::PAGE);
        setState(5079);
        match(MySQLParser::FAULTS);
        break;
      }

      case MySQLParser::SOURCE: {
        enterOuterAlt(_localctx, 8);
        setState(5080);
        match(MySQLParser::SOURCE);
        break;
      }

      case MySQLParser::SWAPS: {
        enterOuterAlt(_localctx, 9);
        setState(5081);
        match(MySQLParser::SWAPS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinlogStatementContext ------------------------------------------------------------------

MySQLParser::BinlogStatementContext::BinlogStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::BinlogStatementContext::BINLOG() {
  return getToken(MySQLParser::BINLOG, 0);
}

tree::TerminalNode* MySQLParser::BinlogStatementContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::BinlogStatementContext::getRuleIndex() const {
  return MySQLParser::RuleBinlogStatement;
}

void MySQLParser::BinlogStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinlogStatement(this);
}

void MySQLParser::BinlogStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinlogStatement(this);
}


antlrcpp::Any MySQLParser::BinlogStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitBinlogStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::BinlogStatementContext* MySQLParser::binlogStatement() {
  BinlogStatementContext *_localctx = _tracker.createInstance<BinlogStatementContext>(_ctx, getState());
  enterRule(_localctx, 466, MySQLParser::RuleBinlogStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5084);
    match(MySQLParser::BINLOG);
    setState(5085);
    match(MySQLParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CacheIndexStatementContext ------------------------------------------------------------------

MySQLParser::CacheIndexStatementContext::CacheIndexStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CacheIndexStatementContext::CACHE() {
  return getToken(MySQLParser::CACHE, 0);
}

tree::TerminalNode* MySQLParser::CacheIndexStatementContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

std::vector<MySQLParser::TableIndexesContext *> MySQLParser::CacheIndexStatementContext::tableIndexes() {
  return getRuleContexts<MySQLParser::TableIndexesContext>();
}

MySQLParser::TableIndexesContext* MySQLParser::CacheIndexStatementContext::tableIndexes(size_t i) {
  return getRuleContext<MySQLParser::TableIndexesContext>(i);
}

tree::TerminalNode* MySQLParser::CacheIndexStatementContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

MySQLParser::UidContext* MySQLParser::CacheIndexStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::CacheIndexStatementContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

MySQLParser::UidListContext* MySQLParser::CacheIndexStatementContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::CacheIndexStatementContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}


size_t MySQLParser::CacheIndexStatementContext::getRuleIndex() const {
  return MySQLParser::RuleCacheIndexStatement;
}

void MySQLParser::CacheIndexStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCacheIndexStatement(this);
}

void MySQLParser::CacheIndexStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCacheIndexStatement(this);
}


antlrcpp::Any MySQLParser::CacheIndexStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCacheIndexStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CacheIndexStatementContext* MySQLParser::cacheIndexStatement() {
  CacheIndexStatementContext *_localctx = _tracker.createInstance<CacheIndexStatementContext>(_ctx, getState());
  enterRule(_localctx, 468, MySQLParser::RuleCacheIndexStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5087);
    match(MySQLParser::CACHE);
    setState(5088);
    match(MySQLParser::INDEX);
    setState(5089);
    tableIndexes();
    setState(5094);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5090);
      match(MySQLParser::COMMA);
      setState(5091);
      tableIndexes();
      setState(5096);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5104);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITION) {
      setState(5097);
      match(MySQLParser::PARTITION);
      setState(5098);
      match(MySQLParser::LR_BRACKET);
      setState(5101);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(5099);
          uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(5100);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5103);
      match(MySQLParser::RR_BRACKET);
    }
    setState(5106);
    match(MySQLParser::IN);
    setState(5107);
    dynamic_cast<CacheIndexStatementContext *>(_localctx)->schema = uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlushStatementContext ------------------------------------------------------------------

MySQLParser::FlushStatementContext::FlushStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::FlushStatementContext::FLUSH() {
  return getToken(MySQLParser::FLUSH, 0);
}

std::vector<MySQLParser::FlushOptionContext *> MySQLParser::FlushStatementContext::flushOption() {
  return getRuleContexts<MySQLParser::FlushOptionContext>();
}

MySQLParser::FlushOptionContext* MySQLParser::FlushStatementContext::flushOption(size_t i) {
  return getRuleContext<MySQLParser::FlushOptionContext>(i);
}

tree::TerminalNode* MySQLParser::FlushStatementContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySQLParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySQLParser::FlushStatementContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}


size_t MySQLParser::FlushStatementContext::getRuleIndex() const {
  return MySQLParser::RuleFlushStatement;
}

void MySQLParser::FlushStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlushStatement(this);
}

void MySQLParser::FlushStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlushStatement(this);
}


antlrcpp::Any MySQLParser::FlushStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFlushStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FlushStatementContext* MySQLParser::flushStatement() {
  FlushStatementContext *_localctx = _tracker.createInstance<FlushStatementContext>(_ctx, getState());
  enterRule(_localctx, 470, MySQLParser::RuleFlushStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5109);
    match(MySQLParser::FLUSH);
    setState(5111);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL) {
      setState(5110);
      dynamic_cast<FlushStatementContext *>(_localctx)->flushFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::NO_WRITE_TO_BINLOG || _la == MySQLParser::LOCAL)) {
        dynamic_cast<FlushStatementContext *>(_localctx)->flushFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5113);
    flushOption();
    setState(5118);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5114);
      match(MySQLParser::COMMA);
      setState(5115);
      flushOption();
      setState(5120);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KillStatementContext ------------------------------------------------------------------

MySQLParser::KillStatementContext::KillStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::KillStatementContext::KILL() {
  return getToken(MySQLParser::KILL, 0);
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::KillStatementContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::KillStatementContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySQLParser::KillStatementContext::CONNECTION() {
  return getToken(MySQLParser::CONNECTION, 0);
}

tree::TerminalNode* MySQLParser::KillStatementContext::QUERY() {
  return getToken(MySQLParser::QUERY, 0);
}


size_t MySQLParser::KillStatementContext::getRuleIndex() const {
  return MySQLParser::RuleKillStatement;
}

void MySQLParser::KillStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKillStatement(this);
}

void MySQLParser::KillStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKillStatement(this);
}


antlrcpp::Any MySQLParser::KillStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitKillStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::KillStatementContext* MySQLParser::killStatement() {
  KillStatementContext *_localctx = _tracker.createInstance<KillStatementContext>(_ctx, getState());
  enterRule(_localctx, 472, MySQLParser::RuleKillStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5121);
    match(MySQLParser::KILL);
    setState(5123);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::CONNECTION || _la == MySQLParser::QUERY) {
      setState(5122);
      dynamic_cast<KillStatementContext *>(_localctx)->connectionFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::CONNECTION || _la == MySQLParser::QUERY)) {
        dynamic_cast<KillStatementContext *>(_localctx)->connectionFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5126); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5125);
      decimalLiteral();
      setState(5128); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 967) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 967)) & ((1ULL << (MySQLParser::ZERO_DECIMAL - 967))
      | (1ULL << (MySQLParser::ONE_DECIMAL - 967))
      | (1ULL << (MySQLParser::TWO_DECIMAL - 967))
      | (1ULL << (MySQLParser::DECIMAL_LITERAL - 967)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadIndexIntoCacheContext ------------------------------------------------------------------

MySQLParser::LoadIndexIntoCacheContext::LoadIndexIntoCacheContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LoadIndexIntoCacheContext::LOAD() {
  return getToken(MySQLParser::LOAD, 0);
}

tree::TerminalNode* MySQLParser::LoadIndexIntoCacheContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::LoadIndexIntoCacheContext::INTO() {
  return getToken(MySQLParser::INTO, 0);
}

tree::TerminalNode* MySQLParser::LoadIndexIntoCacheContext::CACHE() {
  return getToken(MySQLParser::CACHE, 0);
}

std::vector<MySQLParser::LoadedTableIndexesContext *> MySQLParser::LoadIndexIntoCacheContext::loadedTableIndexes() {
  return getRuleContexts<MySQLParser::LoadedTableIndexesContext>();
}

MySQLParser::LoadedTableIndexesContext* MySQLParser::LoadIndexIntoCacheContext::loadedTableIndexes(size_t i) {
  return getRuleContext<MySQLParser::LoadedTableIndexesContext>(i);
}


size_t MySQLParser::LoadIndexIntoCacheContext::getRuleIndex() const {
  return MySQLParser::RuleLoadIndexIntoCache;
}

void MySQLParser::LoadIndexIntoCacheContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoadIndexIntoCache(this);
}

void MySQLParser::LoadIndexIntoCacheContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoadIndexIntoCache(this);
}


antlrcpp::Any MySQLParser::LoadIndexIntoCacheContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLoadIndexIntoCache(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LoadIndexIntoCacheContext* MySQLParser::loadIndexIntoCache() {
  LoadIndexIntoCacheContext *_localctx = _tracker.createInstance<LoadIndexIntoCacheContext>(_ctx, getState());
  enterRule(_localctx, 474, MySQLParser::RuleLoadIndexIntoCache);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5130);
    match(MySQLParser::LOAD);
    setState(5131);
    match(MySQLParser::INDEX);
    setState(5132);
    match(MySQLParser::INTO);
    setState(5133);
    match(MySQLParser::CACHE);
    setState(5134);
    loadedTableIndexes();
    setState(5139);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5135);
      match(MySQLParser::COMMA);
      setState(5136);
      loadedTableIndexes();
      setState(5141);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResetStatementContext ------------------------------------------------------------------

MySQLParser::ResetStatementContext::ResetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ResetStatementContext::RESET() {
  return getToken(MySQLParser::RESET, 0);
}

tree::TerminalNode* MySQLParser::ResetStatementContext::QUERY() {
  return getToken(MySQLParser::QUERY, 0);
}

tree::TerminalNode* MySQLParser::ResetStatementContext::CACHE() {
  return getToken(MySQLParser::CACHE, 0);
}


size_t MySQLParser::ResetStatementContext::getRuleIndex() const {
  return MySQLParser::RuleResetStatement;
}

void MySQLParser::ResetStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResetStatement(this);
}

void MySQLParser::ResetStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResetStatement(this);
}


antlrcpp::Any MySQLParser::ResetStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitResetStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ResetStatementContext* MySQLParser::resetStatement() {
  ResetStatementContext *_localctx = _tracker.createInstance<ResetStatementContext>(_ctx, getState());
  enterRule(_localctx, 476, MySQLParser::RuleResetStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5142);
    match(MySQLParser::RESET);
    setState(5143);
    match(MySQLParser::QUERY);
    setState(5144);
    match(MySQLParser::CACHE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShutdownStatementContext ------------------------------------------------------------------

MySQLParser::ShutdownStatementContext::ShutdownStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ShutdownStatementContext::SHUTDOWN() {
  return getToken(MySQLParser::SHUTDOWN, 0);
}


size_t MySQLParser::ShutdownStatementContext::getRuleIndex() const {
  return MySQLParser::RuleShutdownStatement;
}

void MySQLParser::ShutdownStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShutdownStatement(this);
}

void MySQLParser::ShutdownStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShutdownStatement(this);
}


antlrcpp::Any MySQLParser::ShutdownStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitShutdownStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ShutdownStatementContext* MySQLParser::shutdownStatement() {
  ShutdownStatementContext *_localctx = _tracker.createInstance<ShutdownStatementContext>(_ctx, getState());
  enterRule(_localctx, 478, MySQLParser::RuleShutdownStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5146);
    match(MySQLParser::SHUTDOWN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIndexesContext ------------------------------------------------------------------

MySQLParser::TableIndexesContext::TableIndexesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::TableNameContext* MySQLParser::TableIndexesContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

MySQLParser::UidListContext* MySQLParser::TableIndexesContext::uidList() {
  return getRuleContext<MySQLParser::UidListContext>(0);
}

tree::TerminalNode* MySQLParser::TableIndexesContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::TableIndexesContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}


size_t MySQLParser::TableIndexesContext::getRuleIndex() const {
  return MySQLParser::RuleTableIndexes;
}

void MySQLParser::TableIndexesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableIndexes(this);
}

void MySQLParser::TableIndexesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableIndexes(this);
}


antlrcpp::Any MySQLParser::TableIndexesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableIndexes(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TableIndexesContext* MySQLParser::tableIndexes() {
  TableIndexesContext *_localctx = _tracker.createInstance<TableIndexesContext>(_ctx, getState());
  enterRule(_localctx, 480, MySQLParser::RuleTableIndexes);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5148);
    tableName();
    setState(5156);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::INDEX

    || _la == MySQLParser::KEY || _la == MySQLParser::LR_BRACKET) {
      setState(5150);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY) {
        setState(5149);
        dynamic_cast<TableIndexesContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::INDEX

        || _la == MySQLParser::KEY)) {
          dynamic_cast<TableIndexesContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5152);
      match(MySQLParser::LR_BRACKET);
      setState(5153);
      uidList();
      setState(5154);
      match(MySQLParser::RR_BRACKET);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlushOptionContext ------------------------------------------------------------------

MySQLParser::FlushOptionContext::FlushOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::FlushOptionContext::getRuleIndex() const {
  return MySQLParser::RuleFlushOption;
}

void MySQLParser::FlushOptionContext::copyFrom(FlushOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableFlushOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TableFlushOptionContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}

MySQLParser::TablesContext* MySQLParser::TableFlushOptionContext::tables() {
  return getRuleContext<MySQLParser::TablesContext>(0);
}

MySQLParser::FlushTableOptionContext* MySQLParser::TableFlushOptionContext::flushTableOption() {
  return getRuleContext<MySQLParser::FlushTableOptionContext>(0);
}

MySQLParser::TableFlushOptionContext::TableFlushOptionContext(FlushOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TableFlushOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableFlushOption(this);
}
void MySQLParser::TableFlushOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableFlushOption(this);
}

antlrcpp::Any MySQLParser::TableFlushOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableFlushOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ChannelFlushOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ChannelFlushOptionContext::RELAY() {
  return getToken(MySQLParser::RELAY, 0);
}

tree::TerminalNode* MySQLParser::ChannelFlushOptionContext::LOGS() {
  return getToken(MySQLParser::LOGS, 0);
}

MySQLParser::ChannelOptionContext* MySQLParser::ChannelFlushOptionContext::channelOption() {
  return getRuleContext<MySQLParser::ChannelOptionContext>(0);
}

MySQLParser::ChannelFlushOptionContext::ChannelFlushOptionContext(FlushOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::ChannelFlushOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChannelFlushOption(this);
}
void MySQLParser::ChannelFlushOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChannelFlushOption(this);
}

antlrcpp::Any MySQLParser::ChannelFlushOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitChannelFlushOption(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleFlushOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::DES_KEY_FILE() {
  return getToken(MySQLParser::DES_KEY_FILE, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::HOSTS() {
  return getToken(MySQLParser::HOSTS, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::LOGS() {
  return getToken(MySQLParser::LOGS, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::OPTIMIZER_COSTS() {
  return getToken(MySQLParser::OPTIMIZER_COSTS, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::PRIVILEGES() {
  return getToken(MySQLParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::QUERY() {
  return getToken(MySQLParser::QUERY, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::CACHE() {
  return getToken(MySQLParser::CACHE, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::STATUS() {
  return getToken(MySQLParser::STATUS, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::USER_RESOURCES() {
  return getToken(MySQLParser::USER_RESOURCES, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::LOCK() {
  return getToken(MySQLParser::LOCK, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::ERROR() {
  return getToken(MySQLParser::ERROR, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::GENERAL() {
  return getToken(MySQLParser::GENERAL, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::RELAY() {
  return getToken(MySQLParser::RELAY, 0);
}

tree::TerminalNode* MySQLParser::SimpleFlushOptionContext::SLOW() {
  return getToken(MySQLParser::SLOW, 0);
}

MySQLParser::SimpleFlushOptionContext::SimpleFlushOptionContext(FlushOptionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SimpleFlushOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleFlushOption(this);
}
void MySQLParser::SimpleFlushOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleFlushOption(this);
}

antlrcpp::Any MySQLParser::SimpleFlushOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleFlushOption(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::FlushOptionContext* MySQLParser::flushOption() {
  FlushOptionContext *_localctx = _tracker.createInstance<FlushOptionContext>(_ctx, getState());
  enterRule(_localctx, 482, MySQLParser::RuleFlushOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5188);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 749, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<FlushOptionContext *>(_tracker.createInstance<MySQLParser::SimpleFlushOptionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5176);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DES_KEY_FILE: {
          setState(5158);
          match(MySQLParser::DES_KEY_FILE);
          break;
        }

        case MySQLParser::HOSTS: {
          setState(5159);
          match(MySQLParser::HOSTS);
          break;
        }

        case MySQLParser::BINARY:
        case MySQLParser::ENGINE:
        case MySQLParser::ERROR:
        case MySQLParser::GENERAL:
        case MySQLParser::LOGS:
        case MySQLParser::RELAY:
        case MySQLParser::SLOW: {
          setState(5161);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::BINARY || ((((_la - 318) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 318)) & ((1ULL << (MySQLParser::ENGINE - 318))
            | (1ULL << (MySQLParser::ERROR - 318))
            | (1ULL << (MySQLParser::GENERAL - 318)))) != 0) || _la == MySQLParser::RELAY

          || _la == MySQLParser::SLOW) {
            setState(5160);
            _la = _input->LA(1);
            if (!(_la == MySQLParser::BINARY || ((((_la - 318) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 318)) & ((1ULL << (MySQLParser::ENGINE - 318))
              | (1ULL << (MySQLParser::ERROR - 318))
              | (1ULL << (MySQLParser::GENERAL - 318)))) != 0) || _la == MySQLParser::RELAY

            || _la == MySQLParser::SLOW)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
          }
          setState(5163);
          match(MySQLParser::LOGS);
          break;
        }

        case MySQLParser::OPTIMIZER_COSTS: {
          setState(5164);
          match(MySQLParser::OPTIMIZER_COSTS);
          break;
        }

        case MySQLParser::PRIVILEGES: {
          setState(5165);
          match(MySQLParser::PRIVILEGES);
          break;
        }

        case MySQLParser::QUERY: {
          setState(5166);
          match(MySQLParser::QUERY);
          setState(5167);
          match(MySQLParser::CACHE);
          break;
        }

        case MySQLParser::STATUS: {
          setState(5168);
          match(MySQLParser::STATUS);
          break;
        }

        case MySQLParser::USER_RESOURCES: {
          setState(5169);
          match(MySQLParser::USER_RESOURCES);
          break;
        }

        case MySQLParser::TABLES: {
          setState(5170);
          match(MySQLParser::TABLES);
          setState(5174);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::WITH) {
            setState(5171);
            match(MySQLParser::WITH);
            setState(5172);
            match(MySQLParser::READ);
            setState(5173);
            match(MySQLParser::LOCK);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<FlushOptionContext *>(_tracker.createInstance<MySQLParser::ChannelFlushOptionContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5178);
      match(MySQLParser::RELAY);
      setState(5179);
      match(MySQLParser::LOGS);
      setState(5181);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FOR) {
        setState(5180);
        channelOption();
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<FlushOptionContext *>(_tracker.createInstance<MySQLParser::TableFlushOptionContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5183);
      match(MySQLParser::TABLES);
      setState(5184);
      tables();
      setState(5186);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FOR || _la == MySQLParser::WITH) {
        setState(5185);
        flushTableOption();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlushTableOptionContext ------------------------------------------------------------------

MySQLParser::FlushTableOptionContext::FlushTableOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::FlushTableOptionContext::WITH() {
  return getToken(MySQLParser::WITH, 0);
}

tree::TerminalNode* MySQLParser::FlushTableOptionContext::READ() {
  return getToken(MySQLParser::READ, 0);
}

tree::TerminalNode* MySQLParser::FlushTableOptionContext::LOCK() {
  return getToken(MySQLParser::LOCK, 0);
}

tree::TerminalNode* MySQLParser::FlushTableOptionContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::FlushTableOptionContext::EXPORT() {
  return getToken(MySQLParser::EXPORT, 0);
}


size_t MySQLParser::FlushTableOptionContext::getRuleIndex() const {
  return MySQLParser::RuleFlushTableOption;
}

void MySQLParser::FlushTableOptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlushTableOption(this);
}

void MySQLParser::FlushTableOptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlushTableOption(this);
}


antlrcpp::Any MySQLParser::FlushTableOptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFlushTableOption(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FlushTableOptionContext* MySQLParser::flushTableOption() {
  FlushTableOptionContext *_localctx = _tracker.createInstance<FlushTableOptionContext>(_ctx, getState());
  enterRule(_localctx, 484, MySQLParser::RuleFlushTableOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5195);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(5190);
        match(MySQLParser::WITH);
        setState(5191);
        match(MySQLParser::READ);
        setState(5192);
        match(MySQLParser::LOCK);
        break;
      }

      case MySQLParser::FOR: {
        enterOuterAlt(_localctx, 2);
        setState(5193);
        match(MySQLParser::FOR);
        setState(5194);
        match(MySQLParser::EXPORT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadedTableIndexesContext ------------------------------------------------------------------

MySQLParser::LoadedTableIndexesContext::LoadedTableIndexesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::TableNameContext* MySQLParser::LoadedTableIndexesContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::LoadedTableIndexesContext::PARTITION() {
  return getToken(MySQLParser::PARTITION, 0);
}

tree::TerminalNode* MySQLParser::LoadedTableIndexesContext::IGNORE() {
  return getToken(MySQLParser::IGNORE, 0);
}

tree::TerminalNode* MySQLParser::LoadedTableIndexesContext::LEAVES() {
  return getToken(MySQLParser::LEAVES, 0);
}

std::vector<MySQLParser::UidListContext *> MySQLParser::LoadedTableIndexesContext::uidList() {
  return getRuleContexts<MySQLParser::UidListContext>();
}

MySQLParser::UidListContext* MySQLParser::LoadedTableIndexesContext::uidList(size_t i) {
  return getRuleContext<MySQLParser::UidListContext>(i);
}

tree::TerminalNode* MySQLParser::LoadedTableIndexesContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::LoadedTableIndexesContext::INDEX() {
  return getToken(MySQLParser::INDEX, 0);
}

tree::TerminalNode* MySQLParser::LoadedTableIndexesContext::KEY() {
  return getToken(MySQLParser::KEY, 0);
}


size_t MySQLParser::LoadedTableIndexesContext::getRuleIndex() const {
  return MySQLParser::RuleLoadedTableIndexes;
}

void MySQLParser::LoadedTableIndexesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoadedTableIndexes(this);
}

void MySQLParser::LoadedTableIndexesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoadedTableIndexes(this);
}


antlrcpp::Any MySQLParser::LoadedTableIndexesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLoadedTableIndexes(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LoadedTableIndexesContext* MySQLParser::loadedTableIndexes() {
  LoadedTableIndexesContext *_localctx = _tracker.createInstance<LoadedTableIndexesContext>(_ctx, getState());
  enterRule(_localctx, 486, MySQLParser::RuleLoadedTableIndexes);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5197);
    tableName();
    setState(5205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::PARTITION) {
      setState(5198);
      match(MySQLParser::PARTITION);
      setState(5199);
      match(MySQLParser::LR_BRACKET);
      setState(5202);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::DATABASE:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::COUNT:
        case MySQLParser::POSITION:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID: {
          setState(5200);
          dynamic_cast<LoadedTableIndexesContext *>(_localctx)->partitionList = uidList();
          break;
        }

        case MySQLParser::ALL: {
          setState(5201);
          match(MySQLParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5204);
      match(MySQLParser::RR_BRACKET);
    }
    setState(5214);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 754, _ctx)) {
    case 1: {
      setState(5208);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::INDEX

      || _la == MySQLParser::KEY) {
        setState(5207);
        dynamic_cast<LoadedTableIndexesContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::INDEX

        || _la == MySQLParser::KEY)) {
          dynamic_cast<LoadedTableIndexesContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5210);
      match(MySQLParser::LR_BRACKET);
      setState(5211);
      dynamic_cast<LoadedTableIndexesContext *>(_localctx)->indexList = uidList();
      setState(5212);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
    setState(5218);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::IGNORE) {
      setState(5216);
      match(MySQLParser::IGNORE);
      setState(5217);
      match(MySQLParser::LEAVES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDescribeStatementContext ------------------------------------------------------------------

MySQLParser::SimpleDescribeStatementContext::SimpleDescribeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::TableNameContext* MySQLParser::SimpleDescribeStatementContext::tableName() {
  return getRuleContext<MySQLParser::TableNameContext>(0);
}

tree::TerminalNode* MySQLParser::SimpleDescribeStatementContext::EXPLAIN() {
  return getToken(MySQLParser::EXPLAIN, 0);
}

tree::TerminalNode* MySQLParser::SimpleDescribeStatementContext::DESCRIBE() {
  return getToken(MySQLParser::DESCRIBE, 0);
}

tree::TerminalNode* MySQLParser::SimpleDescribeStatementContext::DESC() {
  return getToken(MySQLParser::DESC, 0);
}

MySQLParser::UidContext* MySQLParser::SimpleDescribeStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::SimpleDescribeStatementContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::SimpleDescribeStatementContext::getRuleIndex() const {
  return MySQLParser::RuleSimpleDescribeStatement;
}

void MySQLParser::SimpleDescribeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleDescribeStatement(this);
}

void MySQLParser::SimpleDescribeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleDescribeStatement(this);
}


antlrcpp::Any MySQLParser::SimpleDescribeStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleDescribeStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SimpleDescribeStatementContext* MySQLParser::simpleDescribeStatement() {
  SimpleDescribeStatementContext *_localctx = _tracker.createInstance<SimpleDescribeStatementContext>(_ctx, getState());
  enterRule(_localctx, 488, MySQLParser::RuleSimpleDescribeStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5220);
    dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->command = _input->LT(1);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySQLParser::DESC)
      | (1ULL << MySQLParser::DESCRIBE)
      | (1ULL << MySQLParser::EXPLAIN))) != 0))) {
      dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->command = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5221);
    tableName();
    setState(5224);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 756, _ctx)) {
    case 1: {
      setState(5222);
      dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->column = uid();
      break;
    }

    case 2: {
      setState(5223);
      dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->pattern = match(MySQLParser::STRING_LITERAL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullDescribeStatementContext ------------------------------------------------------------------

MySQLParser::FullDescribeStatementContext::FullDescribeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::DescribeObjectClauseContext* MySQLParser::FullDescribeStatementContext::describeObjectClause() {
  return getRuleContext<MySQLParser::DescribeObjectClauseContext>(0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::EXPLAIN() {
  return getToken(MySQLParser::EXPLAIN, 0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::DESCRIBE() {
  return getToken(MySQLParser::DESCRIBE, 0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::DESC() {
  return getToken(MySQLParser::DESC, 0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::EXTENDED() {
  return getToken(MySQLParser::EXTENDED, 0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::PARTITIONS() {
  return getToken(MySQLParser::PARTITIONS, 0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::FORMAT() {
  return getToken(MySQLParser::FORMAT, 0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::TRADITIONAL() {
  return getToken(MySQLParser::TRADITIONAL, 0);
}

tree::TerminalNode* MySQLParser::FullDescribeStatementContext::JSON() {
  return getToken(MySQLParser::JSON, 0);
}


size_t MySQLParser::FullDescribeStatementContext::getRuleIndex() const {
  return MySQLParser::RuleFullDescribeStatement;
}

void MySQLParser::FullDescribeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFullDescribeStatement(this);
}

void MySQLParser::FullDescribeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFullDescribeStatement(this);
}


antlrcpp::Any MySQLParser::FullDescribeStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFullDescribeStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FullDescribeStatementContext* MySQLParser::fullDescribeStatement() {
  FullDescribeStatementContext *_localctx = _tracker.createInstance<FullDescribeStatementContext>(_ctx, getState());
  enterRule(_localctx, 490, MySQLParser::RuleFullDescribeStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5226);
    dynamic_cast<FullDescribeStatementContext *>(_localctx)->command = _input->LT(1);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySQLParser::DESC)
      | (1ULL << MySQLParser::DESCRIBE)
      | (1ULL << MySQLParser::EXPLAIN))) != 0))) {
      dynamic_cast<FullDescribeStatementContext *>(_localctx)->command = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::EXTENDED || _la == MySQLParser::PARTITIONS || _la == MySQLParser::FORMAT) {
      setState(5227);
      dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::EXTENDED || _la == MySQLParser::PARTITIONS || _la == MySQLParser::FORMAT)) {
        dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5228);
      match(MySQLParser::EQUAL_SYMBOL);
      setState(5229);
      dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::JSON || _la == MySQLParser::TRADITIONAL)) {
        dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5232);
    describeObjectClause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HelpStatementContext ------------------------------------------------------------------

MySQLParser::HelpStatementContext::HelpStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::HelpStatementContext::HELP() {
  return getToken(MySQLParser::HELP, 0);
}

tree::TerminalNode* MySQLParser::HelpStatementContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::HelpStatementContext::getRuleIndex() const {
  return MySQLParser::RuleHelpStatement;
}

void MySQLParser::HelpStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHelpStatement(this);
}

void MySQLParser::HelpStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHelpStatement(this);
}


antlrcpp::Any MySQLParser::HelpStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHelpStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HelpStatementContext* MySQLParser::helpStatement() {
  HelpStatementContext *_localctx = _tracker.createInstance<HelpStatementContext>(_ctx, getState());
  enterRule(_localctx, 492, MySQLParser::RuleHelpStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5234);
    match(MySQLParser::HELP);
    setState(5235);
    match(MySQLParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseStatementContext ------------------------------------------------------------------

MySQLParser::UseStatementContext::UseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UseStatementContext::USE() {
  return getToken(MySQLParser::USE, 0);
}

MySQLParser::UidContext* MySQLParser::UseStatementContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}


size_t MySQLParser::UseStatementContext::getRuleIndex() const {
  return MySQLParser::RuleUseStatement;
}

void MySQLParser::UseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseStatement(this);
}

void MySQLParser::UseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseStatement(this);
}


antlrcpp::Any MySQLParser::UseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUseStatement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UseStatementContext* MySQLParser::useStatement() {
  UseStatementContext *_localctx = _tracker.createInstance<UseStatementContext>(_ctx, getState());
  enterRule(_localctx, 494, MySQLParser::RuleUseStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5237);
    match(MySQLParser::USE);
    setState(5238);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescribeObjectClauseContext ------------------------------------------------------------------

MySQLParser::DescribeObjectClauseContext::DescribeObjectClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::DescribeObjectClauseContext::getRuleIndex() const {
  return MySQLParser::RuleDescribeObjectClause;
}

void MySQLParser::DescribeObjectClauseContext::copyFrom(DescribeObjectClauseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DescribeStatementsContext ------------------------------------------------------------------

MySQLParser::SelectStatementContext* MySQLParser::DescribeStatementsContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

MySQLParser::DeleteStatementContext* MySQLParser::DescribeStatementsContext::deleteStatement() {
  return getRuleContext<MySQLParser::DeleteStatementContext>(0);
}

MySQLParser::InsertStatementContext* MySQLParser::DescribeStatementsContext::insertStatement() {
  return getRuleContext<MySQLParser::InsertStatementContext>(0);
}

MySQLParser::ReplaceStatementContext* MySQLParser::DescribeStatementsContext::replaceStatement() {
  return getRuleContext<MySQLParser::ReplaceStatementContext>(0);
}

MySQLParser::UpdateStatementContext* MySQLParser::DescribeStatementsContext::updateStatement() {
  return getRuleContext<MySQLParser::UpdateStatementContext>(0);
}

MySQLParser::DescribeStatementsContext::DescribeStatementsContext(DescribeObjectClauseContext *ctx) { copyFrom(ctx); }

void MySQLParser::DescribeStatementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDescribeStatements(this);
}
void MySQLParser::DescribeStatementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDescribeStatements(this);
}

antlrcpp::Any MySQLParser::DescribeStatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDescribeStatements(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DescribeConnectionContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DescribeConnectionContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

tree::TerminalNode* MySQLParser::DescribeConnectionContext::CONNECTION() {
  return getToken(MySQLParser::CONNECTION, 0);
}

MySQLParser::UidContext* MySQLParser::DescribeConnectionContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

MySQLParser::DescribeConnectionContext::DescribeConnectionContext(DescribeObjectClauseContext *ctx) { copyFrom(ctx); }

void MySQLParser::DescribeConnectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDescribeConnection(this);
}
void MySQLParser::DescribeConnectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDescribeConnection(this);
}

antlrcpp::Any MySQLParser::DescribeConnectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDescribeConnection(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::DescribeObjectClauseContext* MySQLParser::describeObjectClause() {
  DescribeObjectClauseContext *_localctx = _tracker.createInstance<DescribeObjectClauseContext>(_ctx, getState());
  enterRule(_localctx, 496, MySQLParser::RuleDescribeObjectClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5250);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::DELETE:
      case MySQLParser::INSERT:
      case MySQLParser::REPLACE:
      case MySQLParser::SELECT:
      case MySQLParser::UPDATE:
      case MySQLParser::LR_BRACKET: {
        _localctx = dynamic_cast<DescribeObjectClauseContext *>(_tracker.createInstance<MySQLParser::DescribeStatementsContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(5245);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::SELECT:
          case MySQLParser::LR_BRACKET: {
            setState(5240);
            selectStatement();
            break;
          }

          case MySQLParser::DELETE: {
            setState(5241);
            deleteStatement();
            break;
          }

          case MySQLParser::INSERT: {
            setState(5242);
            insertStatement();
            break;
          }

          case MySQLParser::REPLACE: {
            setState(5243);
            replaceStatement();
            break;
          }

          case MySQLParser::UPDATE: {
            setState(5244);
            updateStatement();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySQLParser::FOR: {
        _localctx = dynamic_cast<DescribeObjectClauseContext *>(_tracker.createInstance<MySQLParser::DescribeConnectionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(5247);
        match(MySQLParser::FOR);
        setState(5248);
        match(MySQLParser::CONNECTION);
        setState(5249);
        uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullIdContext ------------------------------------------------------------------

MySQLParser::FullIdContext::FullIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::UidContext *> MySQLParser::FullIdContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::FullIdContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}

std::vector<tree::TerminalNode *> MySQLParser::FullIdContext::DOT() {
  return getTokens(MySQLParser::DOT);
}

tree::TerminalNode* MySQLParser::FullIdContext::DOT(size_t i) {
  return getToken(MySQLParser::DOT, i);
}


size_t MySQLParser::FullIdContext::getRuleIndex() const {
  return MySQLParser::RuleFullId;
}

void MySQLParser::FullIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFullId(this);
}

void MySQLParser::FullIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFullId(this);
}


antlrcpp::Any MySQLParser::FullIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFullId(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FullIdContext* MySQLParser::fullId() {
  FullIdContext *_localctx = _tracker.createInstance<FullIdContext>(_ctx, getState());
  enterRule(_localctx, 498, MySQLParser::RuleFullId);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5252);
    uid();
    setState(5257);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 760, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5253);
        match(MySQLParser::DOT);
        setState(5254);
        uid(); 
      }
      setState(5259);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 760, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableNameContext ------------------------------------------------------------------

MySQLParser::TableNameContext::TableNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::FullIdContext* MySQLParser::TableNameContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}


size_t MySQLParser::TableNameContext::getRuleIndex() const {
  return MySQLParser::RuleTableName;
}

void MySQLParser::TableNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableName(this);
}

void MySQLParser::TableNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableName(this);
}


antlrcpp::Any MySQLParser::TableNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTableName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TableNameContext* MySQLParser::tableName() {
  TableNameContext *_localctx = _tracker.createInstance<TableNameContext>(_ctx, getState());
  enterRule(_localctx, 500, MySQLParser::RuleTableName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5260);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullColumnNameContext ------------------------------------------------------------------

MySQLParser::FullColumnNameContext::FullColumnNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::FullIdContext* MySQLParser::FullColumnNameContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}


size_t MySQLParser::FullColumnNameContext::getRuleIndex() const {
  return MySQLParser::RuleFullColumnName;
}

void MySQLParser::FullColumnNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFullColumnName(this);
}

void MySQLParser::FullColumnNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFullColumnName(this);
}


antlrcpp::Any MySQLParser::FullColumnNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFullColumnName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FullColumnNameContext* MySQLParser::fullColumnName() {
  FullColumnNameContext *_localctx = _tracker.createInstance<FullColumnNameContext>(_ctx, getState());
  enterRule(_localctx, 502, MySQLParser::RuleFullColumnName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5262);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexColumnNameContext ------------------------------------------------------------------

MySQLParser::IndexColumnNameContext::IndexColumnNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UidContext* MySQLParser::IndexColumnNameContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::IndexColumnNameContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::IndexColumnNameContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::IndexColumnNameContext::ASC() {
  return getToken(MySQLParser::ASC, 0);
}

tree::TerminalNode* MySQLParser::IndexColumnNameContext::DESC() {
  return getToken(MySQLParser::DESC, 0);
}


size_t MySQLParser::IndexColumnNameContext::getRuleIndex() const {
  return MySQLParser::RuleIndexColumnName;
}

void MySQLParser::IndexColumnNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexColumnName(this);
}

void MySQLParser::IndexColumnNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexColumnName(this);
}


antlrcpp::Any MySQLParser::IndexColumnNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIndexColumnName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IndexColumnNameContext* MySQLParser::indexColumnName() {
  IndexColumnNameContext *_localctx = _tracker.createInstance<IndexColumnNameContext>(_ctx, getState());
  enterRule(_localctx, 504, MySQLParser::RuleIndexColumnName);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5266);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 761, _ctx)) {
    case 1: {
      setState(5264);
      uid();
      break;
    }

    case 2: {
      setState(5265);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    }
    setState(5272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::LR_BRACKET) {
      setState(5268);
      match(MySQLParser::LR_BRACKET);
      setState(5269);
      decimalLiteral();
      setState(5270);
      match(MySQLParser::RR_BRACKET);
    }
    setState(5275);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ASC

    || _la == MySQLParser::DESC) {
      setState(5274);
      dynamic_cast<IndexColumnNameContext *>(_localctx)->sortType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ASC

      || _la == MySQLParser::DESC)) {
        dynamic_cast<IndexColumnNameContext *>(_localctx)->sortType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserNameContext ------------------------------------------------------------------

MySQLParser::UserNameContext::UserNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UserNameContext::STRING_USER_NAME() {
  return getToken(MySQLParser::STRING_USER_NAME, 0);
}

tree::TerminalNode* MySQLParser::UserNameContext::ID() {
  return getToken(MySQLParser::ID, 0);
}

tree::TerminalNode* MySQLParser::UserNameContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::UserNameContext::getRuleIndex() const {
  return MySQLParser::RuleUserName;
}

void MySQLParser::UserNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUserName(this);
}

void MySQLParser::UserNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUserName(this);
}


antlrcpp::Any MySQLParser::UserNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUserName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UserNameContext* MySQLParser::userName() {
  UserNameContext *_localctx = _tracker.createInstance<UserNameContext>(_ctx, getState());
  enterRule(_localctx, 506, MySQLParser::RuleUserName);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5277);
    _la = _input->LA(1);
    if (!(((((_la - 977) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 977)) & ((1ULL << (MySQLParser::STRING_LITERAL - 977))
      | (1ULL << (MySQLParser::ID - 977))
      | (1ULL << (MySQLParser::STRING_USER_NAME - 977)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MysqlVariableContext ------------------------------------------------------------------

MySQLParser::MysqlVariableContext::MysqlVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::MysqlVariableContext::LOCAL_ID() {
  return getToken(MySQLParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySQLParser::MysqlVariableContext::GLOBAL_ID() {
  return getToken(MySQLParser::GLOBAL_ID, 0);
}


size_t MySQLParser::MysqlVariableContext::getRuleIndex() const {
  return MySQLParser::RuleMysqlVariable;
}

void MySQLParser::MysqlVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMysqlVariable(this);
}

void MySQLParser::MysqlVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMysqlVariable(this);
}


antlrcpp::Any MySQLParser::MysqlVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMysqlVariable(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::MysqlVariableContext* MySQLParser::mysqlVariable() {
  MysqlVariableContext *_localctx = _tracker.createInstance<MysqlVariableContext>(_ctx, getState());
  enterRule(_localctx, 508, MySQLParser::RuleMysqlVariable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5279);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::LOCAL_ID

    || _la == MySQLParser::GLOBAL_ID)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharsetNameContext ------------------------------------------------------------------

MySQLParser::CharsetNameContext::CharsetNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CharsetNameContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

MySQLParser::CharsetNameBaseContext* MySQLParser::CharsetNameContext::charsetNameBase() {
  return getRuleContext<MySQLParser::CharsetNameBaseContext>(0);
}

tree::TerminalNode* MySQLParser::CharsetNameContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameContext::CHARSET_REVERSE_QOUTE_STRING() {
  return getToken(MySQLParser::CHARSET_REVERSE_QOUTE_STRING, 0);
}


size_t MySQLParser::CharsetNameContext::getRuleIndex() const {
  return MySQLParser::RuleCharsetName;
}

void MySQLParser::CharsetNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharsetName(this);
}

void MySQLParser::CharsetNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharsetName(this);
}


antlrcpp::Any MySQLParser::CharsetNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCharsetName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CharsetNameContext* MySQLParser::charsetName() {
  CharsetNameContext *_localctx = _tracker.createInstance<CharsetNameContext>(_ctx, getState());
  enterRule(_localctx, 510, MySQLParser::RuleCharsetName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5285);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::BINARY: {
        enterOuterAlt(_localctx, 1);
        setState(5281);
        match(MySQLParser::BINARY);
        break;
      }

      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4: {
        enterOuterAlt(_localctx, 2);
        setState(5282);
        charsetNameBase();
        break;
      }

      case MySQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(5283);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING: {
        enterOuterAlt(_localctx, 4);
        setState(5284);
        match(MySQLParser::CHARSET_REVERSE_QOUTE_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollationNameContext ------------------------------------------------------------------

MySQLParser::CollationNameContext::CollationNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UidContext* MySQLParser::CollationNameContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::CollationNameContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::CollationNameContext::getRuleIndex() const {
  return MySQLParser::RuleCollationName;
}

void MySQLParser::CollationNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollationName(this);
}

void MySQLParser::CollationNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollationName(this);
}


antlrcpp::Any MySQLParser::CollationNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCollationName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CollationNameContext* MySQLParser::collationName() {
  CollationNameContext *_localctx = _tracker.createInstance<CollationNameContext>(_ctx, getState());
  enterRule(_localctx, 512, MySQLParser::RuleCollationName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5289);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 765, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5287);
      uid();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5288);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EngineNameContext ------------------------------------------------------------------

MySQLParser::EngineNameContext::EngineNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::EngineNameContext::ARCHIVE() {
  return getToken(MySQLParser::ARCHIVE, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::BLACKHOLE() {
  return getToken(MySQLParser::BLACKHOLE, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::CSV() {
  return getToken(MySQLParser::CSV, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::FEDERATED() {
  return getToken(MySQLParser::FEDERATED, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::INNODB() {
  return getToken(MySQLParser::INNODB, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::MEMORY() {
  return getToken(MySQLParser::MEMORY, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::MRG_MYISAM() {
  return getToken(MySQLParser::MRG_MYISAM, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::MYISAM() {
  return getToken(MySQLParser::MYISAM, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::NDB() {
  return getToken(MySQLParser::NDB, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::NDBCLUSTER() {
  return getToken(MySQLParser::NDBCLUSTER, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::PERFORMANCE_SCHEMA() {
  return getToken(MySQLParser::PERFORMANCE_SCHEMA, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::TOKUDB() {
  return getToken(MySQLParser::TOKUDB, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::ID() {
  return getToken(MySQLParser::ID, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::EngineNameContext::REVERSE_QUOTE_ID() {
  return getToken(MySQLParser::REVERSE_QUOTE_ID, 0);
}


size_t MySQLParser::EngineNameContext::getRuleIndex() const {
  return MySQLParser::RuleEngineName;
}

void MySQLParser::EngineNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEngineName(this);
}

void MySQLParser::EngineNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEngineName(this);
}


antlrcpp::Any MySQLParser::EngineNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitEngineName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::EngineNameContext* MySQLParser::engineName() {
  EngineNameContext *_localctx = _tracker.createInstance<EngineNameContext>(_ctx, getState());
  enterRule(_localctx, 514, MySQLParser::RuleEngineName);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5291);
    _la = _input->LA(1);
    if (!(((((_la - 621) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 621)) & ((1ULL << (MySQLParser::ARCHIVE - 621))
      | (1ULL << (MySQLParser::BLACKHOLE - 621))
      | (1ULL << (MySQLParser::CSV - 621))
      | (1ULL << (MySQLParser::FEDERATED - 621))
      | (1ULL << (MySQLParser::INNODB - 621))
      | (1ULL << (MySQLParser::MEMORY - 621))
      | (1ULL << (MySQLParser::MRG_MYISAM - 621))
      | (1ULL << (MySQLParser::MYISAM - 621))
      | (1ULL << (MySQLParser::NDB - 621))
      | (1ULL << (MySQLParser::NDBCLUSTER - 621))
      | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 621))
      | (1ULL << (MySQLParser::TOKUDB - 621)))) != 0) || ((((_la - 977) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 977)) & ((1ULL << (MySQLParser::STRING_LITERAL - 977))
      | (1ULL << (MySQLParser::ID - 977))
      | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 977)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UuidSetContext ------------------------------------------------------------------

MySQLParser::UuidSetContext::UuidSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::UuidSetContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::UuidSetContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}


size_t MySQLParser::UuidSetContext::getRuleIndex() const {
  return MySQLParser::RuleUuidSet;
}

void MySQLParser::UuidSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUuidSet(this);
}

void MySQLParser::UuidSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUuidSet(this);
}


antlrcpp::Any MySQLParser::UuidSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUuidSet(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UuidSetContext* MySQLParser::uuidSet() {
  UuidSetContext *_localctx = _tracker.createInstance<UuidSetContext>(_ctx, getState());
  enterRule(_localctx, 516, MySQLParser::RuleUuidSet);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5293);
    decimalLiteral();
    setState(5294);
    match(MySQLParser::MINUS);
    setState(5295);
    decimalLiteral();
    setState(5296);
    match(MySQLParser::MINUS);
    setState(5297);
    decimalLiteral();
    setState(5298);
    match(MySQLParser::MINUS);
    setState(5299);
    decimalLiteral();
    setState(5300);
    match(MySQLParser::MINUS);
    setState(5301);
    decimalLiteral();
    setState(5307); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5302);
      match(MySQLParser::COLON_SYMB);
      setState(5303);
      decimalLiteral();
      setState(5304);
      match(MySQLParser::MINUS);
      setState(5305);
      decimalLiteral();
      setState(5309); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySQLParser::COLON_SYMB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XidContext ------------------------------------------------------------------

MySQLParser::XidContext::XidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::XuidStringIdContext *> MySQLParser::XidContext::xuidStringId() {
  return getRuleContexts<MySQLParser::XuidStringIdContext>();
}

MySQLParser::XuidStringIdContext* MySQLParser::XidContext::xuidStringId(size_t i) {
  return getRuleContext<MySQLParser::XuidStringIdContext>(i);
}

MySQLParser::DecimalLiteralContext* MySQLParser::XidContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}


size_t MySQLParser::XidContext::getRuleIndex() const {
  return MySQLParser::RuleXid;
}

void MySQLParser::XidContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXid(this);
}

void MySQLParser::XidContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXid(this);
}


antlrcpp::Any MySQLParser::XidContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXid(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XidContext* MySQLParser::xid() {
  XidContext *_localctx = _tracker.createInstance<XidContext>(_ctx, getState());
  enterRule(_localctx, 518, MySQLParser::RuleXid);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5311);
    dynamic_cast<XidContext *>(_localctx)->globalTableUid = xuidStringId();
    setState(5318);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::COMMA) {
      setState(5312);
      match(MySQLParser::COMMA);
      setState(5313);
      dynamic_cast<XidContext *>(_localctx)->qualifier = xuidStringId();
      setState(5316);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::COMMA) {
        setState(5314);
        match(MySQLParser::COMMA);
        setState(5315);
        dynamic_cast<XidContext *>(_localctx)->idFormat = decimalLiteral();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XuidStringIdContext ------------------------------------------------------------------

MySQLParser::XuidStringIdContext::XuidStringIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::XuidStringIdContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::XuidStringIdContext::BIT_STRING() {
  return getToken(MySQLParser::BIT_STRING, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::XuidStringIdContext::HEXADECIMAL_LITERAL() {
  return getTokens(MySQLParser::HEXADECIMAL_LITERAL);
}

tree::TerminalNode* MySQLParser::XuidStringIdContext::HEXADECIMAL_LITERAL(size_t i) {
  return getToken(MySQLParser::HEXADECIMAL_LITERAL, i);
}


size_t MySQLParser::XuidStringIdContext::getRuleIndex() const {
  return MySQLParser::RuleXuidStringId;
}

void MySQLParser::XuidStringIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXuidStringId(this);
}

void MySQLParser::XuidStringIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXuidStringId(this);
}


antlrcpp::Any MySQLParser::XuidStringIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitXuidStringId(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::XuidStringIdContext* MySQLParser::xuidStringId() {
  XuidStringIdContext *_localctx = _tracker.createInstance<XuidStringIdContext>(_ctx, getState());
  enterRule(_localctx, 520, MySQLParser::RuleXuidStringId);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5327);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(5320);
        match(MySQLParser::STRING_LITERAL);
        break;
      }

      case MySQLParser::BIT_STRING: {
        enterOuterAlt(_localctx, 2);
        setState(5321);
        match(MySQLParser::BIT_STRING);
        break;
      }

      case MySQLParser::HEXADECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(5323); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(5322);
          match(MySQLParser::HEXADECIMAL_LITERAL);
          setState(5325); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == MySQLParser::HEXADECIMAL_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AuthPluginContext ------------------------------------------------------------------

MySQLParser::AuthPluginContext::AuthPluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::UidContext* MySQLParser::AuthPluginContext::uid() {
  return getRuleContext<MySQLParser::UidContext>(0);
}

tree::TerminalNode* MySQLParser::AuthPluginContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::AuthPluginContext::getRuleIndex() const {
  return MySQLParser::RuleAuthPlugin;
}

void MySQLParser::AuthPluginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAuthPlugin(this);
}

void MySQLParser::AuthPluginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAuthPlugin(this);
}


antlrcpp::Any MySQLParser::AuthPluginContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAuthPlugin(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AuthPluginContext* MySQLParser::authPlugin() {
  AuthPluginContext *_localctx = _tracker.createInstance<AuthPluginContext>(_ctx, getState());
  enterRule(_localctx, 522, MySQLParser::RuleAuthPlugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5331);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 771, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5329);
      uid();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5330);
      match(MySQLParser::STRING_LITERAL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UidContext ------------------------------------------------------------------

MySQLParser::UidContext::UidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::SimpleIdContext* MySQLParser::UidContext::simpleId() {
  return getRuleContext<MySQLParser::SimpleIdContext>(0);
}

tree::TerminalNode* MySQLParser::UidContext::REVERSE_QUOTE_ID() {
  return getToken(MySQLParser::REVERSE_QUOTE_ID, 0);
}

tree::TerminalNode* MySQLParser::UidContext::CHARSET_REVERSE_QOUTE_STRING() {
  return getToken(MySQLParser::CHARSET_REVERSE_QOUTE_STRING, 0);
}


size_t MySQLParser::UidContext::getRuleIndex() const {
  return MySQLParser::RuleUid;
}

void MySQLParser::UidContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUid(this);
}

void MySQLParser::UidContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUid(this);
}


antlrcpp::Any MySQLParser::UidContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUid(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UidContext* MySQLParser::uid() {
  UidContext *_localctx = _tracker.createInstance<UidContext>(_ctx, getState());
  enterRule(_localctx, 524, MySQLParser::RuleUid);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5336);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 772, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5333);
      simpleId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5334);
      match(MySQLParser::REVERSE_QUOTE_ID);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5335);
      match(MySQLParser::CHARSET_REVERSE_QOUTE_STRING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleIdContext ------------------------------------------------------------------

MySQLParser::SimpleIdContext::SimpleIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::SimpleIdContext::ID() {
  return getToken(MySQLParser::ID, 0);
}

MySQLParser::CharsetNameBaseContext* MySQLParser::SimpleIdContext::charsetNameBase() {
  return getRuleContext<MySQLParser::CharsetNameBaseContext>(0);
}

MySQLParser::TransactionLevelBaseContext* MySQLParser::SimpleIdContext::transactionLevelBase() {
  return getRuleContext<MySQLParser::TransactionLevelBaseContext>(0);
}

MySQLParser::EngineNameContext* MySQLParser::SimpleIdContext::engineName() {
  return getRuleContext<MySQLParser::EngineNameContext>(0);
}

MySQLParser::PrivilegesBaseContext* MySQLParser::SimpleIdContext::privilegesBase() {
  return getRuleContext<MySQLParser::PrivilegesBaseContext>(0);
}

MySQLParser::IntervalTypeBaseContext* MySQLParser::SimpleIdContext::intervalTypeBase() {
  return getRuleContext<MySQLParser::IntervalTypeBaseContext>(0);
}

MySQLParser::DataTypeBaseContext* MySQLParser::SimpleIdContext::dataTypeBase() {
  return getRuleContext<MySQLParser::DataTypeBaseContext>(0);
}

MySQLParser::KeywordsCanBeIdContext* MySQLParser::SimpleIdContext::keywordsCanBeId() {
  return getRuleContext<MySQLParser::KeywordsCanBeIdContext>(0);
}

MySQLParser::FunctionNameBaseContext* MySQLParser::SimpleIdContext::functionNameBase() {
  return getRuleContext<MySQLParser::FunctionNameBaseContext>(0);
}


size_t MySQLParser::SimpleIdContext::getRuleIndex() const {
  return MySQLParser::RuleSimpleId;
}

void MySQLParser::SimpleIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleId(this);
}

void MySQLParser::SimpleIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleId(this);
}


antlrcpp::Any MySQLParser::SimpleIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleId(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SimpleIdContext* MySQLParser::simpleId() {
  SimpleIdContext *_localctx = _tracker.createInstance<SimpleIdContext>(_ctx, getState());
  enterRule(_localctx, 526, MySQLParser::RuleSimpleId);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5347);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 773, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5338);
      match(MySQLParser::ID);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5339);
      charsetNameBase();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5340);
      transactionLevelBase();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5341);
      engineName();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5342);
      privilegesBase();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5343);
      intervalTypeBase();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5344);
      dataTypeBase();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5345);
      keywordsCanBeId();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5346);
      functionNameBase();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecimalLiteralContext ------------------------------------------------------------------

MySQLParser::DecimalLiteralContext::DecimalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DecimalLiteralContext::DECIMAL_LITERAL() {
  return getToken(MySQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::DecimalLiteralContext::ZERO_DECIMAL() {
  return getToken(MySQLParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySQLParser::DecimalLiteralContext::ONE_DECIMAL() {
  return getToken(MySQLParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySQLParser::DecimalLiteralContext::TWO_DECIMAL() {
  return getToken(MySQLParser::TWO_DECIMAL, 0);
}


size_t MySQLParser::DecimalLiteralContext::getRuleIndex() const {
  return MySQLParser::RuleDecimalLiteral;
}

void MySQLParser::DecimalLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimalLiteral(this);
}

void MySQLParser::DecimalLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimalLiteral(this);
}


antlrcpp::Any MySQLParser::DecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DecimalLiteralContext* MySQLParser::decimalLiteral() {
  DecimalLiteralContext *_localctx = _tracker.createInstance<DecimalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 528, MySQLParser::RuleDecimalLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5349);
    _la = _input->LA(1);
    if (!(((((_la - 967) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 967)) & ((1ULL << (MySQLParser::ZERO_DECIMAL - 967))
      | (1ULL << (MySQLParser::ONE_DECIMAL - 967))
      | (1ULL << (MySQLParser::TWO_DECIMAL - 967))
      | (1ULL << (MySQLParser::DECIMAL_LITERAL - 967)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileSizeLiteralContext ------------------------------------------------------------------

MySQLParser::FileSizeLiteralContext::FileSizeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::FileSizeLiteralContext::FILESIZE_LITERAL() {
  return getToken(MySQLParser::FILESIZE_LITERAL, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::FileSizeLiteralContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}


size_t MySQLParser::FileSizeLiteralContext::getRuleIndex() const {
  return MySQLParser::RuleFileSizeLiteral;
}

void MySQLParser::FileSizeLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileSizeLiteral(this);
}

void MySQLParser::FileSizeLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileSizeLiteral(this);
}


antlrcpp::Any MySQLParser::FileSizeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFileSizeLiteral(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FileSizeLiteralContext* MySQLParser::fileSizeLiteral() {
  FileSizeLiteralContext *_localctx = _tracker.createInstance<FileSizeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 530, MySQLParser::RuleFileSizeLiteral);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5353);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::FILESIZE_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(5351);
        match(MySQLParser::FILESIZE_LITERAL);
        break;
      }

      case MySQLParser::ZERO_DECIMAL:
      case MySQLParser::ONE_DECIMAL:
      case MySQLParser::TWO_DECIMAL:
      case MySQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(5352);
        decimalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

MySQLParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::StringLiteralContext::STRING_LITERAL() {
  return getTokens(MySQLParser::STRING_LITERAL);
}

tree::TerminalNode* MySQLParser::StringLiteralContext::STRING_LITERAL(size_t i) {
  return getToken(MySQLParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySQLParser::StringLiteralContext::START_NATIONAL_STRING_LITERAL() {
  return getToken(MySQLParser::START_NATIONAL_STRING_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::StringLiteralContext::STRING_CHARSET_NAME() {
  return getToken(MySQLParser::STRING_CHARSET_NAME, 0);
}

tree::TerminalNode* MySQLParser::StringLiteralContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::StringLiteralContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}


size_t MySQLParser::StringLiteralContext::getRuleIndex() const {
  return MySQLParser::RuleStringLiteral;
}

void MySQLParser::StringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringLiteral(this);
}

void MySQLParser::StringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringLiteral(this);
}


antlrcpp::Any MySQLParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::StringLiteralContext* MySQLParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 532, MySQLParser::RuleStringLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(5378);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 781, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5360);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::STRING_CHARSET_NAME: {
          setState(5356);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::STRING_CHARSET_NAME) {
            setState(5355);
            match(MySQLParser::STRING_CHARSET_NAME);
          }
          setState(5358);
          match(MySQLParser::STRING_LITERAL);
          break;
        }

        case MySQLParser::START_NATIONAL_STRING_LITERAL: {
          setState(5359);
          match(MySQLParser::START_NATIONAL_STRING_LITERAL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5363); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(5362);
                match(MySQLParser::STRING_LITERAL);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(5365); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 777, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5372);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::STRING_CHARSET_NAME: {
          setState(5368);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::STRING_CHARSET_NAME) {
            setState(5367);
            match(MySQLParser::STRING_CHARSET_NAME);
          }
          setState(5370);
          match(MySQLParser::STRING_LITERAL);
          break;
        }

        case MySQLParser::START_NATIONAL_STRING_LITERAL: {
          setState(5371);
          match(MySQLParser::START_NATIONAL_STRING_LITERAL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5376);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 780, _ctx)) {
      case 1: {
        setState(5374);
        match(MySQLParser::COLLATE);
        setState(5375);
        collationName();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

MySQLParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::BooleanLiteralContext::TRUE() {
  return getToken(MySQLParser::TRUE, 0);
}

tree::TerminalNode* MySQLParser::BooleanLiteralContext::FALSE() {
  return getToken(MySQLParser::FALSE, 0);
}


size_t MySQLParser::BooleanLiteralContext::getRuleIndex() const {
  return MySQLParser::RuleBooleanLiteral;
}

void MySQLParser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}

void MySQLParser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}


antlrcpp::Any MySQLParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::BooleanLiteralContext* MySQLParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 534, MySQLParser::RuleBooleanLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5380);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::FALSE || _la == MySQLParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HexadecimalLiteralContext ------------------------------------------------------------------

MySQLParser::HexadecimalLiteralContext::HexadecimalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::HexadecimalLiteralContext::HEXADECIMAL_LITERAL() {
  return getToken(MySQLParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::HexadecimalLiteralContext::STRING_CHARSET_NAME() {
  return getToken(MySQLParser::STRING_CHARSET_NAME, 0);
}


size_t MySQLParser::HexadecimalLiteralContext::getRuleIndex() const {
  return MySQLParser::RuleHexadecimalLiteral;
}

void MySQLParser::HexadecimalLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHexadecimalLiteral(this);
}

void MySQLParser::HexadecimalLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHexadecimalLiteral(this);
}


antlrcpp::Any MySQLParser::HexadecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitHexadecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::HexadecimalLiteralContext* MySQLParser::hexadecimalLiteral() {
  HexadecimalLiteralContext *_localctx = _tracker.createInstance<HexadecimalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 536, MySQLParser::RuleHexadecimalLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5383);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::STRING_CHARSET_NAME) {
      setState(5382);
      match(MySQLParser::STRING_CHARSET_NAME);
    }
    setState(5385);
    match(MySQLParser::HEXADECIMAL_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullNotnullContext ------------------------------------------------------------------

MySQLParser::NullNotnullContext::NullNotnullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::NullNotnullContext::NULL_LITERAL() {
  return getToken(MySQLParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::NullNotnullContext::NULL_SPEC_LITERAL() {
  return getToken(MySQLParser::NULL_SPEC_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::NullNotnullContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}


size_t MySQLParser::NullNotnullContext::getRuleIndex() const {
  return MySQLParser::RuleNullNotnull;
}

void MySQLParser::NullNotnullContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullNotnull(this);
}

void MySQLParser::NullNotnullContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullNotnull(this);
}


antlrcpp::Any MySQLParser::NullNotnullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitNullNotnull(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::NullNotnullContext* MySQLParser::nullNotnull() {
  NullNotnullContext *_localctx = _tracker.createInstance<NullNotnullContext>(_ctx, getState());
  enterRule(_localctx, 538, MySQLParser::RuleNullNotnull);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::NOT) {
      setState(5387);
      match(MySQLParser::NOT);
    }
    setState(5390);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::NULL_LITERAL || _la == MySQLParser::NULL_SPEC_LITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

MySQLParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::StringLiteralContext* MySQLParser::ConstantContext::stringLiteral() {
  return getRuleContext<MySQLParser::StringLiteralContext>(0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::ConstantContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::HexadecimalLiteralContext* MySQLParser::ConstantContext::hexadecimalLiteral() {
  return getRuleContext<MySQLParser::HexadecimalLiteralContext>(0);
}

MySQLParser::BooleanLiteralContext* MySQLParser::ConstantContext::booleanLiteral() {
  return getRuleContext<MySQLParser::BooleanLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::ConstantContext::REAL_LITERAL() {
  return getToken(MySQLParser::REAL_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::ConstantContext::BIT_STRING() {
  return getToken(MySQLParser::BIT_STRING, 0);
}

tree::TerminalNode* MySQLParser::ConstantContext::NULL_LITERAL() {
  return getToken(MySQLParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::ConstantContext::NULL_SPEC_LITERAL() {
  return getToken(MySQLParser::NULL_SPEC_LITERAL, 0);
}

tree::TerminalNode* MySQLParser::ConstantContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}


size_t MySQLParser::ConstantContext::getRuleIndex() const {
  return MySQLParser::RuleConstant;
}

void MySQLParser::ConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant(this);
}

void MySQLParser::ConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant(this);
}


antlrcpp::Any MySQLParser::ConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitConstant(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ConstantContext* MySQLParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 540, MySQLParser::RuleConstant);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5402);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 785, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5392);
      stringLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5393);
      decimalLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5394);
      hexadecimalLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5395);
      booleanLiteral();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5396);
      match(MySQLParser::REAL_LITERAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5397);
      match(MySQLParser::BIT_STRING);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5399);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NOT) {
        setState(5398);
        match(MySQLParser::NOT);
      }
      setState(5401);
      dynamic_cast<ConstantContext *>(_localctx)->nullLiteral = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::NULL_LITERAL || _la == MySQLParser::NULL_SPEC_LITERAL)) {
        dynamic_cast<ConstantContext *>(_localctx)->nullLiteral = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeContext ------------------------------------------------------------------

MySQLParser::DataTypeContext::DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::DataTypeContext::getRuleIndex() const {
  return MySQLParser::RuleDataType;
}

void MySQLParser::DataTypeContext::copyFrom(DataTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpatialDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::GEOMETRYCOLLECTION() {
  return getToken(MySQLParser::GEOMETRYCOLLECTION, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::GEOMCOLLECTION() {
  return getToken(MySQLParser::GEOMCOLLECTION, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::LINESTRING() {
  return getToken(MySQLParser::LINESTRING, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::MULTILINESTRING() {
  return getToken(MySQLParser::MULTILINESTRING, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::MULTIPOINT() {
  return getToken(MySQLParser::MULTIPOINT, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::MULTIPOLYGON() {
  return getToken(MySQLParser::MULTIPOLYGON, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::POINT() {
  return getToken(MySQLParser::POINT, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::POLYGON() {
  return getToken(MySQLParser::POLYGON, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::JSON() {
  return getToken(MySQLParser::JSON, 0);
}

tree::TerminalNode* MySQLParser::SpatialDataTypeContext::GEOMETRY() {
  return getToken(MySQLParser::GEOMETRY, 0);
}

MySQLParser::SpatialDataTypeContext::SpatialDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }

void MySQLParser::SpatialDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpatialDataType(this);
}
void MySQLParser::SpatialDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpatialDataType(this);
}

antlrcpp::Any MySQLParser::SpatialDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSpatialDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CollectionDataTypeContext ------------------------------------------------------------------

MySQLParser::CollectionOptionsContext* MySQLParser::CollectionDataTypeContext::collectionOptions() {
  return getRuleContext<MySQLParser::CollectionOptionsContext>(0);
}

tree::TerminalNode* MySQLParser::CollectionDataTypeContext::ENUM() {
  return getToken(MySQLParser::ENUM, 0);
}

std::vector<tree::TerminalNode *> MySQLParser::CollectionDataTypeContext::SET() {
  return getTokens(MySQLParser::SET);
}

tree::TerminalNode* MySQLParser::CollectionDataTypeContext::SET(size_t i) {
  return getToken(MySQLParser::SET, i);
}

tree::TerminalNode* MySQLParser::CollectionDataTypeContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::CollectionDataTypeContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::CollectionDataTypeContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::CollectionDataTypeContext::CHARSET() {
  return getToken(MySQLParser::CHARSET, 0);
}

MySQLParser::CollectionDataTypeContext::CollectionDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }

void MySQLParser::CollectionDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollectionDataType(this);
}
void MySQLParser::CollectionDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollectionDataType(this);
}

antlrcpp::Any MySQLParser::CollectionDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCollectionDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NationalVaryingStringDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::NationalVaryingStringDataTypeContext::NATIONAL() {
  return getToken(MySQLParser::NATIONAL, 0);
}

tree::TerminalNode* MySQLParser::NationalVaryingStringDataTypeContext::VARYING() {
  return getToken(MySQLParser::VARYING, 0);
}

tree::TerminalNode* MySQLParser::NationalVaryingStringDataTypeContext::CHAR() {
  return getToken(MySQLParser::CHAR, 0);
}

tree::TerminalNode* MySQLParser::NationalVaryingStringDataTypeContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

MySQLParser::LengthOneDimensionContext* MySQLParser::NationalVaryingStringDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySQLParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::NationalVaryingStringDataTypeContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

MySQLParser::NationalVaryingStringDataTypeContext::NationalVaryingStringDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }

void MySQLParser::NationalVaryingStringDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNationalVaryingStringDataType(this);
}
void MySQLParser::NationalVaryingStringDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNationalVaryingStringDataType(this);
}

antlrcpp::Any MySQLParser::NationalVaryingStringDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitNationalVaryingStringDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DimensionDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::TINYINT() {
  return getToken(MySQLParser::TINYINT, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::SMALLINT() {
  return getToken(MySQLParser::SMALLINT, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::MEDIUMINT() {
  return getToken(MySQLParser::MEDIUMINT, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::INT() {
  return getToken(MySQLParser::INT, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::INTEGER() {
  return getToken(MySQLParser::INTEGER, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::BIGINT() {
  return getToken(MySQLParser::BIGINT, 0);
}

MySQLParser::LengthOneDimensionContext* MySQLParser::DimensionDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySQLParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::ZEROFILL() {
  return getToken(MySQLParser::ZEROFILL, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::SIGNED() {
  return getToken(MySQLParser::SIGNED, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::UNSIGNED() {
  return getToken(MySQLParser::UNSIGNED, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::REAL() {
  return getToken(MySQLParser::REAL, 0);
}

MySQLParser::LengthTwoDimensionContext* MySQLParser::DimensionDataTypeContext::lengthTwoDimension() {
  return getRuleContext<MySQLParser::LengthTwoDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::DOUBLE() {
  return getToken(MySQLParser::DOUBLE, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::PRECISION() {
  return getToken(MySQLParser::PRECISION, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::DECIMAL() {
  return getToken(MySQLParser::DECIMAL, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::DEC() {
  return getToken(MySQLParser::DEC, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::FIXED() {
  return getToken(MySQLParser::FIXED, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::NUMERIC() {
  return getToken(MySQLParser::NUMERIC, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::FLOAT() {
  return getToken(MySQLParser::FLOAT, 0);
}

MySQLParser::LengthTwoOptionalDimensionContext* MySQLParser::DimensionDataTypeContext::lengthTwoOptionalDimension() {
  return getRuleContext<MySQLParser::LengthTwoOptionalDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::BIT() {
  return getToken(MySQLParser::BIT, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::TIME() {
  return getToken(MySQLParser::TIME, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::TIMESTAMP() {
  return getToken(MySQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::DATETIME() {
  return getToken(MySQLParser::DATETIME, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::VARBINARY() {
  return getToken(MySQLParser::VARBINARY, 0);
}

tree::TerminalNode* MySQLParser::DimensionDataTypeContext::YEAR() {
  return getToken(MySQLParser::YEAR, 0);
}

MySQLParser::DimensionDataTypeContext::DimensionDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }

void MySQLParser::DimensionDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimensionDataType(this);
}
void MySQLParser::DimensionDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimensionDataType(this);
}

antlrcpp::Any MySQLParser::DimensionDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDimensionDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StringDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::StringDataTypeContext::CHAR() {
  return getToken(MySQLParser::CHAR, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::VARCHAR() {
  return getToken(MySQLParser::VARCHAR, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::TINYTEXT() {
  return getToken(MySQLParser::TINYTEXT, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::TEXT() {
  return getToken(MySQLParser::TEXT, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::MEDIUMTEXT() {
  return getToken(MySQLParser::MEDIUMTEXT, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::LONGTEXT() {
  return getToken(MySQLParser::LONGTEXT, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::NCHAR() {
  return getToken(MySQLParser::NCHAR, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::NVARCHAR() {
  return getToken(MySQLParser::NVARCHAR, 0);
}

MySQLParser::LengthOneDimensionContext* MySQLParser::StringDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySQLParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::StringDataTypeContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::StringDataTypeContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::StringDataTypeContext::CHARSET() {
  return getToken(MySQLParser::CHARSET, 0);
}

MySQLParser::StringDataTypeContext::StringDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }

void MySQLParser::StringDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringDataType(this);
}
void MySQLParser::StringDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringDataType(this);
}

antlrcpp::Any MySQLParser::StringDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitStringDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NationalStringDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::NationalStringDataTypeContext::NATIONAL() {
  return getToken(MySQLParser::NATIONAL, 0);
}

tree::TerminalNode* MySQLParser::NationalStringDataTypeContext::VARCHAR() {
  return getToken(MySQLParser::VARCHAR, 0);
}

tree::TerminalNode* MySQLParser::NationalStringDataTypeContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

MySQLParser::LengthOneDimensionContext* MySQLParser::NationalStringDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySQLParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::NationalStringDataTypeContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

tree::TerminalNode* MySQLParser::NationalStringDataTypeContext::NCHAR() {
  return getToken(MySQLParser::NCHAR, 0);
}

MySQLParser::NationalStringDataTypeContext::NationalStringDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }

void MySQLParser::NationalStringDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNationalStringDataType(this);
}
void MySQLParser::NationalStringDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNationalStringDataType(this);
}

antlrcpp::Any MySQLParser::NationalStringDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitNationalStringDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::DATE() {
  return getToken(MySQLParser::DATE, 0);
}

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::TINYBLOB() {
  return getToken(MySQLParser::TINYBLOB, 0);
}

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::BLOB() {
  return getToken(MySQLParser::BLOB, 0);
}

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::MEDIUMBLOB() {
  return getToken(MySQLParser::MEDIUMBLOB, 0);
}

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::LONGBLOB() {
  return getToken(MySQLParser::LONGBLOB, 0);
}

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::BOOL() {
  return getToken(MySQLParser::BOOL, 0);
}

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::BOOLEAN() {
  return getToken(MySQLParser::BOOLEAN, 0);
}

tree::TerminalNode* MySQLParser::SimpleDataTypeContext::SERIAL() {
  return getToken(MySQLParser::SERIAL, 0);
}

MySQLParser::SimpleDataTypeContext::SimpleDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }

void MySQLParser::SimpleDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleDataType(this);
}
void MySQLParser::SimpleDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleDataType(this);
}

antlrcpp::Any MySQLParser::SimpleDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleDataType(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::DataTypeContext* MySQLParser::dataType() {
  DataTypeContext *_localctx = _tracker.createInstance<DataTypeContext>(_ctx, getState());
  enterRule(_localctx, 542, MySQLParser::RuleDataType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5510);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 814, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::StringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5404);
      dynamic_cast<StringDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 189) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 189)) & ((1ULL << (MySQLParser::CHAR - 189))
        | (1ULL << (MySQLParser::VARCHAR - 189))
        | (1ULL << (MySQLParser::NVARCHAR - 189))
        | (1ULL << (MySQLParser::TINYTEXT - 189))
        | (1ULL << (MySQLParser::TEXT - 189))
        | (1ULL << (MySQLParser::MEDIUMTEXT - 189))
        | (1ULL << (MySQLParser::LONGTEXT - 189)))) != 0) || _la == MySQLParser::NCHAR)) {
        dynamic_cast<StringDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5406);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 786, _ctx)) {
      case 1: {
        setState(5405);
        lengthOneDimension();
        break;
      }

      }
      setState(5409);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::BINARY) {
        setState(5408);
        match(MySQLParser::BINARY);
      }
      setState(5417);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 789, _ctx)) {
      case 1: {
        setState(5414);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::CHARACTER: {
            setState(5411);
            match(MySQLParser::CHARACTER);
            setState(5412);
            match(MySQLParser::SET);
            break;
          }

          case MySQLParser::CHARSET: {
            setState(5413);
            match(MySQLParser::CHARSET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5416);
        charsetName();
        break;
      }

      }
      setState(5421);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 790, _ctx)) {
      case 1: {
        setState(5419);
        match(MySQLParser::COLLATE);
        setState(5420);
        collationName();
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::NationalStringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5423);
      match(MySQLParser::NATIONAL);
      setState(5424);
      dynamic_cast<NationalStringDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::CHARACTER || _la == MySQLParser::VARCHAR)) {
        dynamic_cast<NationalStringDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5426);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 791, _ctx)) {
      case 1: {
        setState(5425);
        lengthOneDimension();
        break;
      }

      }
      setState(5429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::BINARY) {
        setState(5428);
        match(MySQLParser::BINARY);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::NationalStringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5431);
      match(MySQLParser::NCHAR);
      setState(5432);
      dynamic_cast<NationalStringDataTypeContext *>(_localctx)->typeName = match(MySQLParser::VARCHAR);
      setState(5434);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 793, _ctx)) {
      case 1: {
        setState(5433);
        lengthOneDimension();
        break;
      }

      }
      setState(5437);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::BINARY) {
        setState(5436);
        match(MySQLParser::BINARY);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::NationalVaryingStringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5439);
      match(MySQLParser::NATIONAL);
      setState(5440);
      dynamic_cast<NationalVaryingStringDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::CHARACTER || _la == MySQLParser::CHAR)) {
        dynamic_cast<NationalVaryingStringDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5441);
      match(MySQLParser::VARYING);
      setState(5443);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 795, _ctx)) {
      case 1: {
        setState(5442);
        lengthOneDimension();
        break;
      }

      }
      setState(5446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::BINARY) {
        setState(5445);
        match(MySQLParser::BINARY);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5448);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 171) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 171)) & ((1ULL << (MySQLParser::TINYINT - 171))
        | (1ULL << (MySQLParser::SMALLINT - 171))
        | (1ULL << (MySQLParser::MEDIUMINT - 171))
        | (1ULL << (MySQLParser::INT - 171))
        | (1ULL << (MySQLParser::INTEGER - 171))
        | (1ULL << (MySQLParser::BIGINT - 171)))) != 0))) {
        dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5450);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 797, _ctx)) {
      case 1: {
        setState(5449);
        lengthOneDimension();
        break;
      }

      }
      setState(5453);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 798, _ctx)) {
      case 1: {
        setState(5452);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::UNSIGNED || _la == MySQLParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5456);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ZEROFILL) {
        setState(5455);
        match(MySQLParser::ZEROFILL);
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(5458);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = match(MySQLParser::REAL);
      setState(5460);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 800, _ctx)) {
      case 1: {
        setState(5459);
        lengthTwoDimension();
        break;
      }

      }
      setState(5463);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 801, _ctx)) {
      case 1: {
        setState(5462);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::UNSIGNED || _la == MySQLParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5466);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ZEROFILL) {
        setState(5465);
        match(MySQLParser::ZEROFILL);
      }
      break;
    }

    case 7: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(5468);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = match(MySQLParser::DOUBLE);
      setState(5470);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::PRECISION) {
        setState(5469);
        match(MySQLParser::PRECISION);
      }
      setState(5473);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 804, _ctx)) {
      case 1: {
        setState(5472);
        lengthTwoDimension();
        break;
      }

      }
      setState(5476);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 805, _ctx)) {
      case 1: {
        setState(5475);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::UNSIGNED || _la == MySQLParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5479);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ZEROFILL) {
        setState(5478);
        match(MySQLParser::ZEROFILL);
      }
      break;
    }

    case 8: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(5481);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 180) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 180)) & ((1ULL << (MySQLParser::FLOAT - 180))
        | (1ULL << (MySQLParser::DECIMAL - 180))
        | (1ULL << (MySQLParser::DEC - 180))
        | (1ULL << (MySQLParser::NUMERIC - 180)))) != 0) || _la == MySQLParser::FIXED)) {
        dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5483);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 807, _ctx)) {
      case 1: {
        setState(5482);
        lengthTwoOptionalDimension();
        break;
      }

      }
      setState(5486);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 808, _ctx)) {
      case 1: {
        setState(5485);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::UNSIGNED || _la == MySQLParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5489);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ZEROFILL) {
        setState(5488);
        match(MySQLParser::ZEROFILL);
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::SimpleDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(5491);
      dynamic_cast<SimpleDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TINYBLOB - 184))
        | (1ULL << (MySQLParser::BLOB - 184))
        | (1ULL << (MySQLParser::MEDIUMBLOB - 184))
        | (1ULL << (MySQLParser::LONGBLOB - 184))
        | (1ULL << (MySQLParser::SERIAL - 184)))) != 0) || _la == MySQLParser::BOOL

      || _la == MySQLParser::BOOLEAN)) {
        dynamic_cast<SimpleDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 10: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(5492);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 185) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 185)) & ((1ULL << (MySQLParser::TIME - 185))
        | (1ULL << (MySQLParser::TIMESTAMP - 185))
        | (1ULL << (MySQLParser::DATETIME - 185))
        | (1ULL << (MySQLParser::YEAR - 185))
        | (1ULL << (MySQLParser::BINARY - 185))
        | (1ULL << (MySQLParser::VARBINARY - 185)))) != 0) || _la == MySQLParser::BIT)) {
        dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5494);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 810, _ctx)) {
      case 1: {
        setState(5493);
        lengthOneDimension();
        break;
      }

      }
      break;
    }

    case 11: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::CollectionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(5496);
      dynamic_cast<CollectionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::SET || _la == MySQLParser::ENUM)) {
        dynamic_cast<CollectionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5497);
      collectionOptions();
      setState(5499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::BINARY) {
        setState(5498);
        match(MySQLParser::BINARY);
      }
      setState(5507);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 813, _ctx)) {
      case 1: {
        setState(5504);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySQLParser::CHARACTER: {
            setState(5501);
            match(MySQLParser::CHARACTER);
            setState(5502);
            match(MySQLParser::SET);
            break;
          }

          case MySQLParser::CHARSET: {
            setState(5503);
            match(MySQLParser::CHARSET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5506);
        charsetName();
        break;
      }

      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySQLParser::SpatialDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(5509);
      dynamic_cast<SpatialDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::JSON || ((((_la - 637) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 637)) & ((1ULL << (MySQLParser::GEOMETRYCOLLECTION - 637))
        | (1ULL << (MySQLParser::GEOMCOLLECTION - 637))
        | (1ULL << (MySQLParser::GEOMETRY - 637))
        | (1ULL << (MySQLParser::LINESTRING - 637))
        | (1ULL << (MySQLParser::MULTILINESTRING - 637))
        | (1ULL << (MySQLParser::MULTIPOINT - 637))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 637))
        | (1ULL << (MySQLParser::POINT - 637))
        | (1ULL << (MySQLParser::POLYGON - 637)))) != 0))) {
        dynamic_cast<SpatialDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionOptionsContext ------------------------------------------------------------------

MySQLParser::CollectionOptionsContext::CollectionOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::CollectionOptionsContext::STRING_LITERAL() {
  return getTokens(MySQLParser::STRING_LITERAL);
}

tree::TerminalNode* MySQLParser::CollectionOptionsContext::STRING_LITERAL(size_t i) {
  return getToken(MySQLParser::STRING_LITERAL, i);
}


size_t MySQLParser::CollectionOptionsContext::getRuleIndex() const {
  return MySQLParser::RuleCollectionOptions;
}

void MySQLParser::CollectionOptionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollectionOptions(this);
}

void MySQLParser::CollectionOptionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollectionOptions(this);
}


antlrcpp::Any MySQLParser::CollectionOptionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCollectionOptions(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CollectionOptionsContext* MySQLParser::collectionOptions() {
  CollectionOptionsContext *_localctx = _tracker.createInstance<CollectionOptionsContext>(_ctx, getState());
  enterRule(_localctx, 544, MySQLParser::RuleCollectionOptions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5512);
    match(MySQLParser::LR_BRACKET);
    setState(5513);
    match(MySQLParser::STRING_LITERAL);
    setState(5518);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5514);
      match(MySQLParser::COMMA);
      setState(5515);
      match(MySQLParser::STRING_LITERAL);
      setState(5520);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5521);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConvertedDataTypeContext ------------------------------------------------------------------

MySQLParser::ConvertedDataTypeContext::ConvertedDataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::NCHAR() {
  return getToken(MySQLParser::NCHAR, 0);
}

MySQLParser::LengthOneDimensionContext* MySQLParser::ConvertedDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySQLParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::CHAR() {
  return getToken(MySQLParser::CHAR, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::ConvertedDataTypeContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::CHARACTER() {
  return getToken(MySQLParser::CHARACTER, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::SET() {
  return getToken(MySQLParser::SET, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::CHARSET() {
  return getToken(MySQLParser::CHARSET, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::DATE() {
  return getToken(MySQLParser::DATE, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::DATETIME() {
  return getToken(MySQLParser::DATETIME, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::TIME() {
  return getToken(MySQLParser::TIME, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::DECIMAL() {
  return getToken(MySQLParser::DECIMAL, 0);
}

MySQLParser::LengthTwoDimensionContext* MySQLParser::ConvertedDataTypeContext::lengthTwoDimension() {
  return getRuleContext<MySQLParser::LengthTwoDimensionContext>(0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::SIGNED() {
  return getToken(MySQLParser::SIGNED, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::UNSIGNED() {
  return getToken(MySQLParser::UNSIGNED, 0);
}

tree::TerminalNode* MySQLParser::ConvertedDataTypeContext::INTEGER() {
  return getToken(MySQLParser::INTEGER, 0);
}


size_t MySQLParser::ConvertedDataTypeContext::getRuleIndex() const {
  return MySQLParser::RuleConvertedDataType;
}

void MySQLParser::ConvertedDataTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConvertedDataType(this);
}

void MySQLParser::ConvertedDataTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConvertedDataType(this);
}


antlrcpp::Any MySQLParser::ConvertedDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitConvertedDataType(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ConvertedDataTypeContext* MySQLParser::convertedDataType() {
  ConvertedDataTypeContext *_localctx = _tracker.createInstance<ConvertedDataTypeContext>(_ctx, getState());
  enterRule(_localctx, 546, MySQLParser::RuleConvertedDataType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5548);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::BINARY:
      case MySQLParser::NCHAR: {
        enterOuterAlt(_localctx, 1);
        setState(5523);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::BINARY || _la == MySQLParser::NCHAR)) {
          dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5525);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::LR_BRACKET) {
          setState(5524);
          lengthOneDimension();
        }
        break;
      }

      case MySQLParser::CHAR: {
        enterOuterAlt(_localctx, 2);
        setState(5527);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = match(MySQLParser::CHAR);
        setState(5529);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::LR_BRACKET) {
          setState(5528);
          lengthOneDimension();
        }
        setState(5537);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::CHARACTER || _la == MySQLParser::CHARSET) {
          setState(5534);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case MySQLParser::CHARACTER: {
              setState(5531);
              match(MySQLParser::CHARACTER);
              setState(5532);
              match(MySQLParser::SET);
              break;
            }

            case MySQLParser::CHARSET: {
              setState(5533);
              match(MySQLParser::CHARSET);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(5536);
          charsetName();
        }
        break;
      }

      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::DATETIME: {
        enterOuterAlt(_localctx, 3);
        setState(5539);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 184) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
          | (1ULL << (MySQLParser::TIME - 184))
          | (1ULL << (MySQLParser::DATETIME - 184)))) != 0))) {
          dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySQLParser::DECIMAL: {
        enterOuterAlt(_localctx, 4);
        setState(5540);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = match(MySQLParser::DECIMAL);
        setState(5542);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::LR_BRACKET) {
          setState(5541);
          lengthTwoDimension();
        }
        break;
      }

      case MySQLParser::UNSIGNED:
      case MySQLParser::SIGNED: {
        enterOuterAlt(_localctx, 5);
        setState(5544);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::UNSIGNED || _la == MySQLParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5546);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySQLParser::INTEGER) {
          setState(5545);
          match(MySQLParser::INTEGER);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthOneDimensionContext ------------------------------------------------------------------

MySQLParser::LengthOneDimensionContext::LengthOneDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::DecimalLiteralContext* MySQLParser::LengthOneDimensionContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}


size_t MySQLParser::LengthOneDimensionContext::getRuleIndex() const {
  return MySQLParser::RuleLengthOneDimension;
}

void MySQLParser::LengthOneDimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLengthOneDimension(this);
}

void MySQLParser::LengthOneDimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLengthOneDimension(this);
}


antlrcpp::Any MySQLParser::LengthOneDimensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLengthOneDimension(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LengthOneDimensionContext* MySQLParser::lengthOneDimension() {
  LengthOneDimensionContext *_localctx = _tracker.createInstance<LengthOneDimensionContext>(_ctx, getState());
  enterRule(_localctx, 548, MySQLParser::RuleLengthOneDimension);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5550);
    match(MySQLParser::LR_BRACKET);
    setState(5551);
    decimalLiteral();
    setState(5552);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthTwoDimensionContext ------------------------------------------------------------------

MySQLParser::LengthTwoDimensionContext::LengthTwoDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::LengthTwoDimensionContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::LengthTwoDimensionContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}


size_t MySQLParser::LengthTwoDimensionContext::getRuleIndex() const {
  return MySQLParser::RuleLengthTwoDimension;
}

void MySQLParser::LengthTwoDimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLengthTwoDimension(this);
}

void MySQLParser::LengthTwoDimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLengthTwoDimension(this);
}


antlrcpp::Any MySQLParser::LengthTwoDimensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLengthTwoDimension(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LengthTwoDimensionContext* MySQLParser::lengthTwoDimension() {
  LengthTwoDimensionContext *_localctx = _tracker.createInstance<LengthTwoDimensionContext>(_ctx, getState());
  enterRule(_localctx, 550, MySQLParser::RuleLengthTwoDimension);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5554);
    match(MySQLParser::LR_BRACKET);
    setState(5555);
    decimalLiteral();
    setState(5556);
    match(MySQLParser::COMMA);
    setState(5557);
    decimalLiteral();
    setState(5558);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthTwoOptionalDimensionContext ------------------------------------------------------------------

MySQLParser::LengthTwoOptionalDimensionContext::LengthTwoOptionalDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::LengthTwoOptionalDimensionContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::LengthTwoOptionalDimensionContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}


size_t MySQLParser::LengthTwoOptionalDimensionContext::getRuleIndex() const {
  return MySQLParser::RuleLengthTwoOptionalDimension;
}

void MySQLParser::LengthTwoOptionalDimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLengthTwoOptionalDimension(this);
}

void MySQLParser::LengthTwoOptionalDimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLengthTwoOptionalDimension(this);
}


antlrcpp::Any MySQLParser::LengthTwoOptionalDimensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLengthTwoOptionalDimension(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LengthTwoOptionalDimensionContext* MySQLParser::lengthTwoOptionalDimension() {
  LengthTwoOptionalDimensionContext *_localctx = _tracker.createInstance<LengthTwoOptionalDimensionContext>(_ctx, getState());
  enterRule(_localctx, 552, MySQLParser::RuleLengthTwoOptionalDimension);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5560);
    match(MySQLParser::LR_BRACKET);
    setState(5561);
    decimalLiteral();
    setState(5564);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::COMMA) {
      setState(5562);
      match(MySQLParser::COMMA);
      setState(5563);
      decimalLiteral();
    }
    setState(5566);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UidListContext ------------------------------------------------------------------

MySQLParser::UidListContext::UidListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::UidContext *> MySQLParser::UidListContext::uid() {
  return getRuleContexts<MySQLParser::UidContext>();
}

MySQLParser::UidContext* MySQLParser::UidListContext::uid(size_t i) {
  return getRuleContext<MySQLParser::UidContext>(i);
}


size_t MySQLParser::UidListContext::getRuleIndex() const {
  return MySQLParser::RuleUidList;
}

void MySQLParser::UidListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUidList(this);
}

void MySQLParser::UidListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUidList(this);
}


antlrcpp::Any MySQLParser::UidListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUidList(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UidListContext* MySQLParser::uidList() {
  UidListContext *_localctx = _tracker.createInstance<UidListContext>(_ctx, getState());
  enterRule(_localctx, 554, MySQLParser::RuleUidList);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5568);
    uid();
    setState(5573);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 824, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5569);
        match(MySQLParser::COMMA);
        setState(5570);
        uid(); 
      }
      setState(5575);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 824, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablesContext ------------------------------------------------------------------

MySQLParser::TablesContext::TablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::TableNameContext *> MySQLParser::TablesContext::tableName() {
  return getRuleContexts<MySQLParser::TableNameContext>();
}

MySQLParser::TableNameContext* MySQLParser::TablesContext::tableName(size_t i) {
  return getRuleContext<MySQLParser::TableNameContext>(i);
}


size_t MySQLParser::TablesContext::getRuleIndex() const {
  return MySQLParser::RuleTables;
}

void MySQLParser::TablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTables(this);
}

void MySQLParser::TablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTables(this);
}


antlrcpp::Any MySQLParser::TablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTables(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TablesContext* MySQLParser::tables() {
  TablesContext *_localctx = _tracker.createInstance<TablesContext>(_ctx, getState());
  enterRule(_localctx, 556, MySQLParser::RuleTables);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5576);
    tableName();
    setState(5581);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 825, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5577);
        match(MySQLParser::COMMA);
        setState(5578);
        tableName(); 
      }
      setState(5583);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 825, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexColumnNamesContext ------------------------------------------------------------------

MySQLParser::IndexColumnNamesContext::IndexColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::IndexColumnNameContext *> MySQLParser::IndexColumnNamesContext::indexColumnName() {
  return getRuleContexts<MySQLParser::IndexColumnNameContext>();
}

MySQLParser::IndexColumnNameContext* MySQLParser::IndexColumnNamesContext::indexColumnName(size_t i) {
  return getRuleContext<MySQLParser::IndexColumnNameContext>(i);
}


size_t MySQLParser::IndexColumnNamesContext::getRuleIndex() const {
  return MySQLParser::RuleIndexColumnNames;
}

void MySQLParser::IndexColumnNamesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexColumnNames(this);
}

void MySQLParser::IndexColumnNamesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexColumnNames(this);
}


antlrcpp::Any MySQLParser::IndexColumnNamesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIndexColumnNames(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IndexColumnNamesContext* MySQLParser::indexColumnNames() {
  IndexColumnNamesContext *_localctx = _tracker.createInstance<IndexColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 558, MySQLParser::RuleIndexColumnNames);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5584);
    match(MySQLParser::LR_BRACKET);
    setState(5585);
    indexColumnName();
    setState(5590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5586);
      match(MySQLParser::COMMA);
      setState(5587);
      indexColumnName();
      setState(5592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5593);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsContext ------------------------------------------------------------------

MySQLParser::ExpressionsContext::ExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::ExpressionsContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::ExpressionsContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}


size_t MySQLParser::ExpressionsContext::getRuleIndex() const {
  return MySQLParser::RuleExpressions;
}

void MySQLParser::ExpressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressions(this);
}

void MySQLParser::ExpressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressions(this);
}


antlrcpp::Any MySQLParser::ExpressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitExpressions(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ExpressionsContext* MySQLParser::expressions() {
  ExpressionsContext *_localctx = _tracker.createInstance<ExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 560, MySQLParser::RuleExpressions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5595);
    expression(0);
    setState(5600);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5596);
      match(MySQLParser::COMMA);
      setState(5597);
      expression(0);
      setState(5602);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsWithDefaultsContext ------------------------------------------------------------------

MySQLParser::ExpressionsWithDefaultsContext::ExpressionsWithDefaultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::ExpressionOrDefaultContext *> MySQLParser::ExpressionsWithDefaultsContext::expressionOrDefault() {
  return getRuleContexts<MySQLParser::ExpressionOrDefaultContext>();
}

MySQLParser::ExpressionOrDefaultContext* MySQLParser::ExpressionsWithDefaultsContext::expressionOrDefault(size_t i) {
  return getRuleContext<MySQLParser::ExpressionOrDefaultContext>(i);
}


size_t MySQLParser::ExpressionsWithDefaultsContext::getRuleIndex() const {
  return MySQLParser::RuleExpressionsWithDefaults;
}

void MySQLParser::ExpressionsWithDefaultsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionsWithDefaults(this);
}

void MySQLParser::ExpressionsWithDefaultsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionsWithDefaults(this);
}


antlrcpp::Any MySQLParser::ExpressionsWithDefaultsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitExpressionsWithDefaults(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ExpressionsWithDefaultsContext* MySQLParser::expressionsWithDefaults() {
  ExpressionsWithDefaultsContext *_localctx = _tracker.createInstance<ExpressionsWithDefaultsContext>(_ctx, getState());
  enterRule(_localctx, 562, MySQLParser::RuleExpressionsWithDefaults);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5603);
    expressionOrDefault();
    setState(5608);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5604);
      match(MySQLParser::COMMA);
      setState(5605);
      expressionOrDefault();
      setState(5610);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantsContext ------------------------------------------------------------------

MySQLParser::ConstantsContext::ConstantsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::ConstantContext *> MySQLParser::ConstantsContext::constant() {
  return getRuleContexts<MySQLParser::ConstantContext>();
}

MySQLParser::ConstantContext* MySQLParser::ConstantsContext::constant(size_t i) {
  return getRuleContext<MySQLParser::ConstantContext>(i);
}


size_t MySQLParser::ConstantsContext::getRuleIndex() const {
  return MySQLParser::RuleConstants;
}

void MySQLParser::ConstantsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstants(this);
}

void MySQLParser::ConstantsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstants(this);
}


antlrcpp::Any MySQLParser::ConstantsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitConstants(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ConstantsContext* MySQLParser::constants() {
  ConstantsContext *_localctx = _tracker.createInstance<ConstantsContext>(_ctx, getState());
  enterRule(_localctx, 564, MySQLParser::RuleConstants);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5611);
    constant();
    setState(5616);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5612);
      match(MySQLParser::COMMA);
      setState(5613);
      constant();
      setState(5618);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleStringsContext ------------------------------------------------------------------

MySQLParser::SimpleStringsContext::SimpleStringsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::SimpleStringsContext::STRING_LITERAL() {
  return getTokens(MySQLParser::STRING_LITERAL);
}

tree::TerminalNode* MySQLParser::SimpleStringsContext::STRING_LITERAL(size_t i) {
  return getToken(MySQLParser::STRING_LITERAL, i);
}


size_t MySQLParser::SimpleStringsContext::getRuleIndex() const {
  return MySQLParser::RuleSimpleStrings;
}

void MySQLParser::SimpleStringsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleStrings(this);
}

void MySQLParser::SimpleStringsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleStrings(this);
}


antlrcpp::Any MySQLParser::SimpleStringsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleStrings(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::SimpleStringsContext* MySQLParser::simpleStrings() {
  SimpleStringsContext *_localctx = _tracker.createInstance<SimpleStringsContext>(_ctx, getState());
  enterRule(_localctx, 566, MySQLParser::RuleSimpleStrings);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5619);
    match(MySQLParser::STRING_LITERAL);
    setState(5624);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5620);
      match(MySQLParser::COMMA);
      setState(5621);
      match(MySQLParser::STRING_LITERAL);
      setState(5626);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserVariablesContext ------------------------------------------------------------------

MySQLParser::UserVariablesContext::UserVariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySQLParser::UserVariablesContext::LOCAL_ID() {
  return getTokens(MySQLParser::LOCAL_ID);
}

tree::TerminalNode* MySQLParser::UserVariablesContext::LOCAL_ID(size_t i) {
  return getToken(MySQLParser::LOCAL_ID, i);
}


size_t MySQLParser::UserVariablesContext::getRuleIndex() const {
  return MySQLParser::RuleUserVariables;
}

void MySQLParser::UserVariablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUserVariables(this);
}

void MySQLParser::UserVariablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUserVariables(this);
}


antlrcpp::Any MySQLParser::UserVariablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUserVariables(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UserVariablesContext* MySQLParser::userVariables() {
  UserVariablesContext *_localctx = _tracker.createInstance<UserVariablesContext>(_ctx, getState());
  enterRule(_localctx, 568, MySQLParser::RuleUserVariables);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5627);
    match(MySQLParser::LOCAL_ID);
    setState(5632);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5628);
      match(MySQLParser::COMMA);
      setState(5629);
      match(MySQLParser::LOCAL_ID);
      setState(5634);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

MySQLParser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DefaultValueContext::NULL_LITERAL() {
  return getToken(MySQLParser::NULL_LITERAL, 0);
}

MySQLParser::ConstantContext* MySQLParser::DefaultValueContext::constant() {
  return getRuleContext<MySQLParser::ConstantContext>(0);
}

MySQLParser::UnaryOperatorContext* MySQLParser::DefaultValueContext::unaryOperator() {
  return getRuleContext<MySQLParser::UnaryOperatorContext>(0);
}

std::vector<MySQLParser::CurrentTimestampContext *> MySQLParser::DefaultValueContext::currentTimestamp() {
  return getRuleContexts<MySQLParser::CurrentTimestampContext>();
}

MySQLParser::CurrentTimestampContext* MySQLParser::DefaultValueContext::currentTimestamp(size_t i) {
  return getRuleContext<MySQLParser::CurrentTimestampContext>(i);
}

tree::TerminalNode* MySQLParser::DefaultValueContext::ON() {
  return getToken(MySQLParser::ON, 0);
}

tree::TerminalNode* MySQLParser::DefaultValueContext::UPDATE() {
  return getToken(MySQLParser::UPDATE, 0);
}


size_t MySQLParser::DefaultValueContext::getRuleIndex() const {
  return MySQLParser::RuleDefaultValue;
}

void MySQLParser::DefaultValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultValue(this);
}

void MySQLParser::DefaultValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultValue(this);
}


antlrcpp::Any MySQLParser::DefaultValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDefaultValue(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DefaultValueContext* MySQLParser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 570, MySQLParser::RuleDefaultValue);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5646);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 834, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5635);
      match(MySQLParser::NULL_LITERAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5637);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 832, _ctx)) {
      case 1: {
        setState(5636);
        unaryOperator();
        break;
      }

      }
      setState(5639);
      constant();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5640);
      currentTimestamp();
      setState(5644);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 833, _ctx)) {
      case 1: {
        setState(5641);
        match(MySQLParser::ON);
        setState(5642);
        match(MySQLParser::UPDATE);
        setState(5643);
        currentTimestamp();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CurrentTimestampContext ------------------------------------------------------------------

MySQLParser::CurrentTimestampContext::CurrentTimestampContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CurrentTimestampContext::NOW() {
  return getToken(MySQLParser::NOW, 0);
}

tree::TerminalNode* MySQLParser::CurrentTimestampContext::CURRENT_TIMESTAMP() {
  return getToken(MySQLParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::CurrentTimestampContext::LOCALTIME() {
  return getToken(MySQLParser::LOCALTIME, 0);
}

tree::TerminalNode* MySQLParser::CurrentTimestampContext::LOCALTIMESTAMP() {
  return getToken(MySQLParser::LOCALTIMESTAMP, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::CurrentTimestampContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}


size_t MySQLParser::CurrentTimestampContext::getRuleIndex() const {
  return MySQLParser::RuleCurrentTimestamp;
}

void MySQLParser::CurrentTimestampContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCurrentTimestamp(this);
}

void MySQLParser::CurrentTimestampContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCurrentTimestamp(this);
}


antlrcpp::Any MySQLParser::CurrentTimestampContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCurrentTimestamp(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CurrentTimestampContext* MySQLParser::currentTimestamp() {
  CurrentTimestampContext *_localctx = _tracker.createInstance<CurrentTimestampContext>(_ctx, getState());
  enterRule(_localctx, 572, MySQLParser::RuleCurrentTimestamp);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5662);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::CURRENT_TIMESTAMP:
      case MySQLParser::LOCALTIME:
      case MySQLParser::LOCALTIMESTAMP: {
        setState(5648);
        _la = _input->LA(1);
        if (!(((((_la - 235) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 235)) & ((1ULL << (MySQLParser::CURRENT_TIMESTAMP - 235))
          | (1ULL << (MySQLParser::LOCALTIME - 235))
          | (1ULL << (MySQLParser::LOCALTIMESTAMP - 235)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5654);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 836, _ctx)) {
        case 1: {
          setState(5649);
          match(MySQLParser::LR_BRACKET);
          setState(5651);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((((_la - 967) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 967)) & ((1ULL << (MySQLParser::ZERO_DECIMAL - 967))
            | (1ULL << (MySQLParser::ONE_DECIMAL - 967))
            | (1ULL << (MySQLParser::TWO_DECIMAL - 967))
            | (1ULL << (MySQLParser::DECIMAL_LITERAL - 967)))) != 0)) {
            setState(5650);
            decimalLiteral();
          }
          setState(5653);
          match(MySQLParser::RR_BRACKET);
          break;
        }

        }
        break;
      }

      case MySQLParser::NOW: {
        setState(5656);
        match(MySQLParser::NOW);
        setState(5657);
        match(MySQLParser::LR_BRACKET);
        setState(5659);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 967) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 967)) & ((1ULL << (MySQLParser::ZERO_DECIMAL - 967))
          | (1ULL << (MySQLParser::ONE_DECIMAL - 967))
          | (1ULL << (MySQLParser::TWO_DECIMAL - 967))
          | (1ULL << (MySQLParser::DECIMAL_LITERAL - 967)))) != 0)) {
          setState(5658);
          decimalLiteral();
        }
        setState(5661);
        match(MySQLParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionOrDefaultContext ------------------------------------------------------------------

MySQLParser::ExpressionOrDefaultContext::ExpressionOrDefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ExpressionContext* MySQLParser::ExpressionOrDefaultContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::ExpressionOrDefaultContext::DEFAULT() {
  return getToken(MySQLParser::DEFAULT, 0);
}


size_t MySQLParser::ExpressionOrDefaultContext::getRuleIndex() const {
  return MySQLParser::RuleExpressionOrDefault;
}

void MySQLParser::ExpressionOrDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionOrDefault(this);
}

void MySQLParser::ExpressionOrDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionOrDefault(this);
}


antlrcpp::Any MySQLParser::ExpressionOrDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitExpressionOrDefault(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ExpressionOrDefaultContext* MySQLParser::expressionOrDefault() {
  ExpressionOrDefaultContext *_localctx = _tracker.createInstance<ExpressionOrDefaultContext>(_ctx, getState());
  enterRule(_localctx, 574, MySQLParser::RuleExpressionOrDefault);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5666);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::CASE:
      case MySQLParser::CAST:
      case MySQLParser::CONVERT:
      case MySQLParser::CURRENT_USER:
      case MySQLParser::DATABASE:
      case MySQLParser::EXISTS:
      case MySQLParser::FALSE:
      case MySQLParser::IF:
      case MySQLParser::INSERT:
      case MySQLParser::INTERVAL:
      case MySQLParser::NOT:
      case MySQLParser::NULL_LITERAL:
      case MySQLParser::REPLACE:
      case MySQLParser::TRUE:
      case MySQLParser::VALUES:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::DATETIME:
      case MySQLParser::YEAR:
      case MySQLParser::CHAR:
      case MySQLParser::BINARY:
      case MySQLParser::TEXT:
      case MySQLParser::ENUM:
      case MySQLParser::SERIAL:
      case MySQLParser::AVG:
      case MySQLParser::BIT_AND:
      case MySQLParser::BIT_OR:
      case MySQLParser::BIT_XOR:
      case MySQLParser::COUNT:
      case MySQLParser::GROUP_CONCAT:
      case MySQLParser::MAX:
      case MySQLParser::MIN:
      case MySQLParser::STD:
      case MySQLParser::STDDEV:
      case MySQLParser::STDDEV_POP:
      case MySQLParser::STDDEV_SAMP:
      case MySQLParser::SUM:
      case MySQLParser::VAR_POP:
      case MySQLParser::VAR_SAMP:
      case MySQLParser::VARIANCE:
      case MySQLParser::CURRENT_DATE:
      case MySQLParser::CURRENT_TIME:
      case MySQLParser::CURRENT_TIMESTAMP:
      case MySQLParser::LOCALTIME:
      case MySQLParser::CURDATE:
      case MySQLParser::CURTIME:
      case MySQLParser::DATE_ADD:
      case MySQLParser::DATE_SUB:
      case MySQLParser::EXTRACT:
      case MySQLParser::LOCALTIMESTAMP:
      case MySQLParser::NOW:
      case MySQLParser::POSITION:
      case MySQLParser::SUBSTR:
      case MySQLParser::SUBSTRING:
      case MySQLParser::SYSDATE:
      case MySQLParser::TRIM:
      case MySQLParser::UTC_DATE:
      case MySQLParser::UTC_TIME:
      case MySQLParser::UTC_TIMESTAMP:
      case MySQLParser::ACCOUNT:
      case MySQLParser::ACTION:
      case MySQLParser::AFTER:
      case MySQLParser::AGGREGATE:
      case MySQLParser::ALGORITHM:
      case MySQLParser::ANY:
      case MySQLParser::AT:
      case MySQLParser::AUTHORS:
      case MySQLParser::AUTOCOMMIT:
      case MySQLParser::AUTOEXTEND_SIZE:
      case MySQLParser::AUTO_INCREMENT:
      case MySQLParser::AVG_ROW_LENGTH:
      case MySQLParser::BEGIN:
      case MySQLParser::BINLOG:
      case MySQLParser::BIT:
      case MySQLParser::BLOCK:
      case MySQLParser::BOOL:
      case MySQLParser::BOOLEAN:
      case MySQLParser::BTREE:
      case MySQLParser::CACHE:
      case MySQLParser::CASCADED:
      case MySQLParser::CHAIN:
      case MySQLParser::CHANGED:
      case MySQLParser::CHANNEL:
      case MySQLParser::CHECKSUM:
      case MySQLParser::PAGE_CHECKSUM:
      case MySQLParser::CIPHER:
      case MySQLParser::CLIENT:
      case MySQLParser::CLOSE:
      case MySQLParser::COALESCE:
      case MySQLParser::CODE:
      case MySQLParser::COLUMNS:
      case MySQLParser::COLUMN_FORMAT:
      case MySQLParser::COMMENT:
      case MySQLParser::COMMIT:
      case MySQLParser::COMPACT:
      case MySQLParser::COMPLETION:
      case MySQLParser::COMPRESSED:
      case MySQLParser::COMPRESSION:
      case MySQLParser::CONCURRENT:
      case MySQLParser::CONNECTION:
      case MySQLParser::CONSISTENT:
      case MySQLParser::CONTAINS:
      case MySQLParser::CONTEXT:
      case MySQLParser::CONTRIBUTORS:
      case MySQLParser::COPY:
      case MySQLParser::CPU:
      case MySQLParser::DATA:
      case MySQLParser::DATAFILE:
      case MySQLParser::DEALLOCATE:
      case MySQLParser::DEFAULT_AUTH:
      case MySQLParser::DEFINER:
      case MySQLParser::DELAY_KEY_WRITE:
      case MySQLParser::DES_KEY_FILE:
      case MySQLParser::DIRECTORY:
      case MySQLParser::DISABLE:
      case MySQLParser::DISCARD:
      case MySQLParser::DISK:
      case MySQLParser::DO:
      case MySQLParser::DUMPFILE:
      case MySQLParser::DUPLICATE:
      case MySQLParser::DYNAMIC:
      case MySQLParser::ENABLE:
      case MySQLParser::ENCRYPTION:
      case MySQLParser::END:
      case MySQLParser::ENDS:
      case MySQLParser::ENGINE:
      case MySQLParser::ENGINES:
      case MySQLParser::ERROR:
      case MySQLParser::ERRORS:
      case MySQLParser::ESCAPE:
      case MySQLParser::EVEN:
      case MySQLParser::EVENT:
      case MySQLParser::EVENTS:
      case MySQLParser::EVERY:
      case MySQLParser::EXCHANGE:
      case MySQLParser::EXCLUSIVE:
      case MySQLParser::EXPIRE:
      case MySQLParser::EXPORT:
      case MySQLParser::EXTENDED:
      case MySQLParser::EXTENT_SIZE:
      case MySQLParser::FAST:
      case MySQLParser::FAULTS:
      case MySQLParser::FIELDS:
      case MySQLParser::FILE_BLOCK_SIZE:
      case MySQLParser::FILTER:
      case MySQLParser::FIRST:
      case MySQLParser::FIXED:
      case MySQLParser::FLUSH:
      case MySQLParser::FOLLOWS:
      case MySQLParser::FOUND:
      case MySQLParser::FULL:
      case MySQLParser::FUNCTION:
      case MySQLParser::GENERAL:
      case MySQLParser::GLOBAL:
      case MySQLParser::GRANTS:
      case MySQLParser::GROUP_REPLICATION:
      case MySQLParser::HANDLER:
      case MySQLParser::HASH:
      case MySQLParser::HELP:
      case MySQLParser::HOST:
      case MySQLParser::HOSTS:
      case MySQLParser::IDENTIFIED:
      case MySQLParser::IGNORE_SERVER_IDS:
      case MySQLParser::IMPORT:
      case MySQLParser::INDEXES:
      case MySQLParser::INITIAL_SIZE:
      case MySQLParser::INPLACE:
      case MySQLParser::INSERT_METHOD:
      case MySQLParser::INSTALL:
      case MySQLParser::INSTANCE:
      case MySQLParser::INVISIBLE:
      case MySQLParser::INVOKER:
      case MySQLParser::IO:
      case MySQLParser::IO_THREAD:
      case MySQLParser::IPC:
      case MySQLParser::ISOLATION:
      case MySQLParser::ISSUER:
      case MySQLParser::JSON:
      case MySQLParser::KEY_BLOCK_SIZE:
      case MySQLParser::LANGUAGE:
      case MySQLParser::LAST:
      case MySQLParser::LEAVES:
      case MySQLParser::LESS:
      case MySQLParser::LEVEL:
      case MySQLParser::LIST:
      case MySQLParser::LOCAL:
      case MySQLParser::LOGFILE:
      case MySQLParser::LOGS:
      case MySQLParser::MASTER:
      case MySQLParser::MASTER_AUTO_POSITION:
      case MySQLParser::MASTER_CONNECT_RETRY:
      case MySQLParser::MASTER_DELAY:
      case MySQLParser::MASTER_HEARTBEAT_PERIOD:
      case MySQLParser::MASTER_HOST:
      case MySQLParser::MASTER_LOG_FILE:
      case MySQLParser::MASTER_LOG_POS:
      case MySQLParser::MASTER_PASSWORD:
      case MySQLParser::MASTER_PORT:
      case MySQLParser::MASTER_RETRY_COUNT:
      case MySQLParser::MASTER_SSL:
      case MySQLParser::MASTER_SSL_CA:
      case MySQLParser::MASTER_SSL_CAPATH:
      case MySQLParser::MASTER_SSL_CERT:
      case MySQLParser::MASTER_SSL_CIPHER:
      case MySQLParser::MASTER_SSL_CRL:
      case MySQLParser::MASTER_SSL_CRLPATH:
      case MySQLParser::MASTER_SSL_KEY:
      case MySQLParser::MASTER_TLS_VERSION:
      case MySQLParser::MASTER_USER:
      case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
      case MySQLParser::MAX_QUERIES_PER_HOUR:
      case MySQLParser::MAX_ROWS:
      case MySQLParser::MAX_SIZE:
      case MySQLParser::MAX_UPDATES_PER_HOUR:
      case MySQLParser::MAX_USER_CONNECTIONS:
      case MySQLParser::MEDIUM:
      case MySQLParser::MERGE:
      case MySQLParser::MID:
      case MySQLParser::MIGRATE:
      case MySQLParser::MIN_ROWS:
      case MySQLParser::MODE:
      case MySQLParser::MODIFY:
      case MySQLParser::MUTEX:
      case MySQLParser::MYSQL:
      case MySQLParser::NAME:
      case MySQLParser::NAMES:
      case MySQLParser::NCHAR:
      case MySQLParser::NEVER:
      case MySQLParser::NEXT:
      case MySQLParser::NO:
      case MySQLParser::NODEGROUP:
      case MySQLParser::NONE:
      case MySQLParser::OFFLINE:
      case MySQLParser::OFFSET:
      case MySQLParser::OJ:
      case MySQLParser::OLD_PASSWORD:
      case MySQLParser::ONE:
      case MySQLParser::ONLINE:
      case MySQLParser::ONLY:
      case MySQLParser::OPEN:
      case MySQLParser::OPTIMIZER_COSTS:
      case MySQLParser::OPTIONS:
      case MySQLParser::OWNER:
      case MySQLParser::PACK_KEYS:
      case MySQLParser::PAGE:
      case MySQLParser::PARSER:
      case MySQLParser::PARTIAL:
      case MySQLParser::PARTITIONING:
      case MySQLParser::PARTITIONS:
      case MySQLParser::PASSWORD:
      case MySQLParser::PHASE:
      case MySQLParser::PLUGIN:
      case MySQLParser::PLUGIN_DIR:
      case MySQLParser::PLUGINS:
      case MySQLParser::PORT:
      case MySQLParser::PRECEDES:
      case MySQLParser::PREPARE:
      case MySQLParser::PRESERVE:
      case MySQLParser::PREV:
      case MySQLParser::PROCESSLIST:
      case MySQLParser::PROFILE:
      case MySQLParser::PROFILES:
      case MySQLParser::PROXY:
      case MySQLParser::QUERY:
      case MySQLParser::QUICK:
      case MySQLParser::REBUILD:
      case MySQLParser::RECOVER:
      case MySQLParser::REDO_BUFFER_SIZE:
      case MySQLParser::REDUNDANT:
      case MySQLParser::RELAY:
      case MySQLParser::RELAY_LOG_FILE:
      case MySQLParser::RELAY_LOG_POS:
      case MySQLParser::RELAYLOG:
      case MySQLParser::REMOVE:
      case MySQLParser::REORGANIZE:
      case MySQLParser::REPAIR:
      case MySQLParser::REPLICATE_DO_DB:
      case MySQLParser::REPLICATE_DO_TABLE:
      case MySQLParser::REPLICATE_IGNORE_DB:
      case MySQLParser::REPLICATE_IGNORE_TABLE:
      case MySQLParser::REPLICATE_REWRITE_DB:
      case MySQLParser::REPLICATE_WILD_DO_TABLE:
      case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySQLParser::REPLICATION:
      case MySQLParser::RESET:
      case MySQLParser::RESUME:
      case MySQLParser::RETURNS:
      case MySQLParser::ROLLBACK:
      case MySQLParser::ROLLUP:
      case MySQLParser::ROTATE:
      case MySQLParser::ROW:
      case MySQLParser::ROWS:
      case MySQLParser::ROW_FORMAT:
      case MySQLParser::SAVEPOINT:
      case MySQLParser::SCHEDULE:
      case MySQLParser::SECURITY:
      case MySQLParser::SERVER:
      case MySQLParser::SESSION:
      case MySQLParser::SHARE:
      case MySQLParser::SHARED:
      case MySQLParser::SIGNED:
      case MySQLParser::SIMPLE:
      case MySQLParser::SLAVE:
      case MySQLParser::SLOW:
      case MySQLParser::SNAPSHOT:
      case MySQLParser::SOCKET:
      case MySQLParser::SOME:
      case MySQLParser::SONAME:
      case MySQLParser::SOUNDS:
      case MySQLParser::SOURCE:
      case MySQLParser::SQL_AFTER_GTIDS:
      case MySQLParser::SQL_AFTER_MTS_GAPS:
      case MySQLParser::SQL_BEFORE_GTIDS:
      case MySQLParser::SQL_BUFFER_RESULT:
      case MySQLParser::SQL_CACHE:
      case MySQLParser::SQL_NO_CACHE:
      case MySQLParser::SQL_THREAD:
      case MySQLParser::START:
      case MySQLParser::STARTS:
      case MySQLParser::STATS_AUTO_RECALC:
      case MySQLParser::STATS_PERSISTENT:
      case MySQLParser::STATS_SAMPLE_PAGES:
      case MySQLParser::STATUS:
      case MySQLParser::STOP:
      case MySQLParser::STORAGE:
      case MySQLParser::STRING:
      case MySQLParser::SUBJECT:
      case MySQLParser::SUBPARTITION:
      case MySQLParser::SUBPARTITIONS:
      case MySQLParser::SUSPEND:
      case MySQLParser::SWAPS:
      case MySQLParser::SWITCHES:
      case MySQLParser::TABLESPACE:
      case MySQLParser::TEMPORARY:
      case MySQLParser::TEMPTABLE:
      case MySQLParser::THAN:
      case MySQLParser::TRADITIONAL:
      case MySQLParser::TRANSACTION:
      case MySQLParser::TRIGGERS:
      case MySQLParser::TRUNCATE:
      case MySQLParser::UNDEFINED:
      case MySQLParser::UNDOFILE:
      case MySQLParser::UNDO_BUFFER_SIZE:
      case MySQLParser::UNINSTALL:
      case MySQLParser::UNKNOWN:
      case MySQLParser::UNTIL:
      case MySQLParser::UPGRADE:
      case MySQLParser::USER:
      case MySQLParser::USE_FRM:
      case MySQLParser::USER_RESOURCES:
      case MySQLParser::VALIDATION:
      case MySQLParser::VALUE:
      case MySQLParser::VARIABLES:
      case MySQLParser::VIEW:
      case MySQLParser::VISIBLE:
      case MySQLParser::WAIT:
      case MySQLParser::WARNINGS:
      case MySQLParser::WITHOUT:
      case MySQLParser::WORK:
      case MySQLParser::WRAPPER:
      case MySQLParser::X509:
      case MySQLParser::XA:
      case MySQLParser::XML:
      case MySQLParser::INTERNAL:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::TABLES:
      case MySQLParser::ROUTINE:
      case MySQLParser::EXECUTE:
      case MySQLParser::FILE:
      case MySQLParser::PROCESS:
      case MySQLParser::RELOAD:
      case MySQLParser::SHUTDOWN:
      case MySQLParser::SUPER:
      case MySQLParser::PRIVILEGES:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::ARMSCII8:
      case MySQLParser::ASCII:
      case MySQLParser::BIG5:
      case MySQLParser::CP1250:
      case MySQLParser::CP1251:
      case MySQLParser::CP1256:
      case MySQLParser::CP1257:
      case MySQLParser::CP850:
      case MySQLParser::CP852:
      case MySQLParser::CP866:
      case MySQLParser::CP932:
      case MySQLParser::DEC8:
      case MySQLParser::EUCJPMS:
      case MySQLParser::EUCKR:
      case MySQLParser::GB2312:
      case MySQLParser::GBK:
      case MySQLParser::GEOSTD8:
      case MySQLParser::GREEK:
      case MySQLParser::HEBREW:
      case MySQLParser::HP8:
      case MySQLParser::KEYBCS2:
      case MySQLParser::KOI8R:
      case MySQLParser::KOI8U:
      case MySQLParser::LATIN1:
      case MySQLParser::LATIN2:
      case MySQLParser::LATIN5:
      case MySQLParser::LATIN7:
      case MySQLParser::MACCE:
      case MySQLParser::MACROMAN:
      case MySQLParser::SJIS:
      case MySQLParser::SWE7:
      case MySQLParser::TIS620:
      case MySQLParser::UCS2:
      case MySQLParser::UJIS:
      case MySQLParser::UTF16:
      case MySQLParser::UTF16LE:
      case MySQLParser::UTF32:
      case MySQLParser::UTF8:
      case MySQLParser::UTF8MB3:
      case MySQLParser::UTF8MB4:
      case MySQLParser::ARCHIVE:
      case MySQLParser::BLACKHOLE:
      case MySQLParser::CSV:
      case MySQLParser::FEDERATED:
      case MySQLParser::INNODB:
      case MySQLParser::MEMORY:
      case MySQLParser::MRG_MYISAM:
      case MySQLParser::MYISAM:
      case MySQLParser::NDB:
      case MySQLParser::NDBCLUSTER:
      case MySQLParser::PERFORMANCE_SCHEMA:
      case MySQLParser::TOKUDB:
      case MySQLParser::REPEATABLE:
      case MySQLParser::COMMITTED:
      case MySQLParser::UNCOMMITTED:
      case MySQLParser::SERIALIZABLE:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION:
      case MySQLParser::PLUS:
      case MySQLParser::MINUS:
      case MySQLParser::EXCLAMATION_SYMBOL:
      case MySQLParser::BIT_NOT_OP:
      case MySQLParser::LR_BRACKET:
      case MySQLParser::ZERO_DECIMAL:
      case MySQLParser::ONE_DECIMAL:
      case MySQLParser::TWO_DECIMAL:
      case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySQLParser::START_NATIONAL_STRING_LITERAL:
      case MySQLParser::STRING_LITERAL:
      case MySQLParser::DECIMAL_LITERAL:
      case MySQLParser::HEXADECIMAL_LITERAL:
      case MySQLParser::REAL_LITERAL:
      case MySQLParser::NULL_SPEC_LITERAL:
      case MySQLParser::BIT_STRING:
      case MySQLParser::STRING_CHARSET_NAME:
      case MySQLParser::PLACEHOLDER_VALUE:
      case MySQLParser::ID:
      case MySQLParser::REVERSE_QUOTE_ID:
      case MySQLParser::LOCAL_ID:
      case MySQLParser::GLOBAL_ID: {
        enterOuterAlt(_localctx, 1);
        setState(5664);
        expression(0);
        break;
      }

      case MySQLParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(5665);
        match(MySQLParser::DEFAULT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfExistsContext ------------------------------------------------------------------

MySQLParser::IfExistsContext::IfExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IfExistsContext::IF() {
  return getToken(MySQLParser::IF, 0);
}

tree::TerminalNode* MySQLParser::IfExistsContext::EXISTS() {
  return getToken(MySQLParser::EXISTS, 0);
}


size_t MySQLParser::IfExistsContext::getRuleIndex() const {
  return MySQLParser::RuleIfExists;
}

void MySQLParser::IfExistsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfExists(this);
}

void MySQLParser::IfExistsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfExists(this);
}


antlrcpp::Any MySQLParser::IfExistsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIfExists(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IfExistsContext* MySQLParser::ifExists() {
  IfExistsContext *_localctx = _tracker.createInstance<IfExistsContext>(_ctx, getState());
  enterRule(_localctx, 576, MySQLParser::RuleIfExists);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5668);
    match(MySQLParser::IF);
    setState(5669);
    match(MySQLParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfNotExistsContext ------------------------------------------------------------------

MySQLParser::IfNotExistsContext::IfNotExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IfNotExistsContext::IF() {
  return getToken(MySQLParser::IF, 0);
}

tree::TerminalNode* MySQLParser::IfNotExistsContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}

tree::TerminalNode* MySQLParser::IfNotExistsContext::EXISTS() {
  return getToken(MySQLParser::EXISTS, 0);
}


size_t MySQLParser::IfNotExistsContext::getRuleIndex() const {
  return MySQLParser::RuleIfNotExists;
}

void MySQLParser::IfNotExistsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfNotExists(this);
}

void MySQLParser::IfNotExistsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfNotExists(this);
}


antlrcpp::Any MySQLParser::IfNotExistsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIfNotExists(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IfNotExistsContext* MySQLParser::ifNotExists() {
  IfNotExistsContext *_localctx = _tracker.createInstance<IfNotExistsContext>(_ctx, getState());
  enterRule(_localctx, 578, MySQLParser::RuleIfNotExists);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5671);
    match(MySQLParser::IF);
    setState(5672);
    match(MySQLParser::NOT);
    setState(5673);
    match(MySQLParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

MySQLParser::FunctionCallContext::FunctionCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::FunctionCallContext::getRuleIndex() const {
  return MySQLParser::RuleFunctionCall;
}

void MySQLParser::FunctionCallContext::copyFrom(FunctionCallContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpecificFunctionCallContext ------------------------------------------------------------------

MySQLParser::SpecificFunctionContext* MySQLParser::SpecificFunctionCallContext::specificFunction() {
  return getRuleContext<MySQLParser::SpecificFunctionContext>(0);
}

MySQLParser::SpecificFunctionCallContext::SpecificFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }

void MySQLParser::SpecificFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecificFunctionCall(this);
}
void MySQLParser::SpecificFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecificFunctionCall(this);
}

antlrcpp::Any MySQLParser::SpecificFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSpecificFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PasswordFunctionCallContext ------------------------------------------------------------------

MySQLParser::PasswordFunctionClauseContext* MySQLParser::PasswordFunctionCallContext::passwordFunctionClause() {
  return getRuleContext<MySQLParser::PasswordFunctionClauseContext>(0);
}

MySQLParser::PasswordFunctionCallContext::PasswordFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }

void MySQLParser::PasswordFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPasswordFunctionCall(this);
}
void MySQLParser::PasswordFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPasswordFunctionCall(this);
}

antlrcpp::Any MySQLParser::PasswordFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPasswordFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UdfFunctionCallContext ------------------------------------------------------------------

MySQLParser::FullIdContext* MySQLParser::UdfFunctionCallContext::fullId() {
  return getRuleContext<MySQLParser::FullIdContext>(0);
}

MySQLParser::FunctionArgsContext* MySQLParser::UdfFunctionCallContext::functionArgs() {
  return getRuleContext<MySQLParser::FunctionArgsContext>(0);
}

MySQLParser::UdfFunctionCallContext::UdfFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }

void MySQLParser::UdfFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUdfFunctionCall(this);
}
void MySQLParser::UdfFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUdfFunctionCall(this);
}

antlrcpp::Any MySQLParser::UdfFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUdfFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AggregateFunctionCallContext ------------------------------------------------------------------

MySQLParser::AggregateWindowedFunctionContext* MySQLParser::AggregateFunctionCallContext::aggregateWindowedFunction() {
  return getRuleContext<MySQLParser::AggregateWindowedFunctionContext>(0);
}

MySQLParser::AggregateFunctionCallContext::AggregateFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }

void MySQLParser::AggregateFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregateFunctionCall(this);
}
void MySQLParser::AggregateFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregateFunctionCall(this);
}

antlrcpp::Any MySQLParser::AggregateFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAggregateFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ScalarFunctionCallContext ------------------------------------------------------------------

MySQLParser::ScalarFunctionNameContext* MySQLParser::ScalarFunctionCallContext::scalarFunctionName() {
  return getRuleContext<MySQLParser::ScalarFunctionNameContext>(0);
}

MySQLParser::FunctionArgsContext* MySQLParser::ScalarFunctionCallContext::functionArgs() {
  return getRuleContext<MySQLParser::FunctionArgsContext>(0);
}

MySQLParser::ScalarFunctionCallContext::ScalarFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }

void MySQLParser::ScalarFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScalarFunctionCall(this);
}
void MySQLParser::ScalarFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScalarFunctionCall(this);
}

antlrcpp::Any MySQLParser::ScalarFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitScalarFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::FunctionCallContext* MySQLParser::functionCall() {
  FunctionCallContext *_localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
  enterRule(_localctx, 580, MySQLParser::RuleFunctionCall);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5692);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 842, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySQLParser::SpecificFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5675);
      specificFunction();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySQLParser::AggregateFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5676);
      aggregateWindowedFunction();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySQLParser::ScalarFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5677);
      scalarFunctionName();
      setState(5678);
      match(MySQLParser::LR_BRACKET);
      setState(5680);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 19) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 19)) & ((1ULL << (MySQLParser::CASE - 19))
        | (1ULL << (MySQLParser::CAST - 19))
        | (1ULL << (MySQLParser::CONVERT - 19))
        | (1ULL << (MySQLParser::CURRENT_USER - 19))
        | (1ULL << (MySQLParser::DATABASE - 19))
        | (1ULL << (MySQLParser::EXISTS - 19))
        | (1ULL << (MySQLParser::FALSE - 19))
        | (1ULL << (MySQLParser::IF - 19))
        | (1ULL << (MySQLParser::INSERT - 19))
        | (1ULL << (MySQLParser::INTERVAL - 19)))) != 0) || ((((_la - 99) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 99)) & ((1ULL << (MySQLParser::NOT - 99))
        | (1ULL << (MySQLParser::NULL_LITERAL - 99))
        | (1ULL << (MySQLParser::REPLACE - 99))
        | (1ULL << (MySQLParser::TRUE - 99)))) != 0) || ((((_la - 163) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 163)) & ((1ULL << (MySQLParser::VALUES - 163))
        | (1ULL << (MySQLParser::DATE - 163))
        | (1ULL << (MySQLParser::TIME - 163))
        | (1ULL << (MySQLParser::TIMESTAMP - 163))
        | (1ULL << (MySQLParser::DATETIME - 163))
        | (1ULL << (MySQLParser::YEAR - 163))
        | (1ULL << (MySQLParser::CHAR - 163))
        | (1ULL << (MySQLParser::BINARY - 163))
        | (1ULL << (MySQLParser::TEXT - 163))
        | (1ULL << (MySQLParser::ENUM - 163))
        | (1ULL << (MySQLParser::SERIAL - 163))
        | (1ULL << (MySQLParser::AVG - 163))
        | (1ULL << (MySQLParser::BIT_AND - 163))
        | (1ULL << (MySQLParser::BIT_OR - 163))
        | (1ULL << (MySQLParser::BIT_XOR - 163))
        | (1ULL << (MySQLParser::COUNT - 163))
        | (1ULL << (MySQLParser::GROUP_CONCAT - 163))
        | (1ULL << (MySQLParser::MAX - 163))
        | (1ULL << (MySQLParser::MIN - 163))
        | (1ULL << (MySQLParser::STD - 163))
        | (1ULL << (MySQLParser::STDDEV - 163)))) != 0) || ((((_la - 227) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 227)) & ((1ULL << (MySQLParser::STDDEV_POP - 227))
        | (1ULL << (MySQLParser::STDDEV_SAMP - 227))
        | (1ULL << (MySQLParser::SUM - 227))
        | (1ULL << (MySQLParser::VAR_POP - 227))
        | (1ULL << (MySQLParser::VAR_SAMP - 227))
        | (1ULL << (MySQLParser::VARIANCE - 227))
        | (1ULL << (MySQLParser::CURRENT_DATE - 227))
        | (1ULL << (MySQLParser::CURRENT_TIME - 227))
        | (1ULL << (MySQLParser::CURRENT_TIMESTAMP - 227))
        | (1ULL << (MySQLParser::LOCALTIME - 227))
        | (1ULL << (MySQLParser::CURDATE - 227))
        | (1ULL << (MySQLParser::CURTIME - 227))
        | (1ULL << (MySQLParser::DATE_ADD - 227))
        | (1ULL << (MySQLParser::DATE_SUB - 227))
        | (1ULL << (MySQLParser::EXTRACT - 227))
        | (1ULL << (MySQLParser::LOCALTIMESTAMP - 227))
        | (1ULL << (MySQLParser::NOW - 227))
        | (1ULL << (MySQLParser::POSITION - 227))
        | (1ULL << (MySQLParser::SUBSTR - 227))
        | (1ULL << (MySQLParser::SUBSTRING - 227))
        | (1ULL << (MySQLParser::SYSDATE - 227))
        | (1ULL << (MySQLParser::TRIM - 227))
        | (1ULL << (MySQLParser::UTC_DATE - 227))
        | (1ULL << (MySQLParser::UTC_TIME - 227))
        | (1ULL << (MySQLParser::UTC_TIMESTAMP - 227))
        | (1ULL << (MySQLParser::ACCOUNT - 227))
        | (1ULL << (MySQLParser::ACTION - 227))
        | (1ULL << (MySQLParser::AFTER - 227))
        | (1ULL << (MySQLParser::AGGREGATE - 227))
        | (1ULL << (MySQLParser::ALGORITHM - 227))
        | (1ULL << (MySQLParser::ANY - 227))
        | (1ULL << (MySQLParser::AT - 227))
        | (1ULL << (MySQLParser::AUTHORS - 227))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 227))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 227))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 227))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 227))
        | (1ULL << (MySQLParser::BEGIN - 227))
        | (1ULL << (MySQLParser::BINLOG - 227))
        | (1ULL << (MySQLParser::BIT - 227))
        | (1ULL << (MySQLParser::BLOCK - 227))
        | (1ULL << (MySQLParser::BOOL - 227))
        | (1ULL << (MySQLParser::BOOLEAN - 227))
        | (1ULL << (MySQLParser::BTREE - 227))
        | (1ULL << (MySQLParser::CACHE - 227))
        | (1ULL << (MySQLParser::CASCADED - 227))
        | (1ULL << (MySQLParser::CHAIN - 227))
        | (1ULL << (MySQLParser::CHANGED - 227))
        | (1ULL << (MySQLParser::CHANNEL - 227))
        | (1ULL << (MySQLParser::CHECKSUM - 227))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 227))
        | (1ULL << (MySQLParser::CIPHER - 227))
        | (1ULL << (MySQLParser::CLIENT - 227))
        | (1ULL << (MySQLParser::CLOSE - 227))
        | (1ULL << (MySQLParser::COALESCE - 227))
        | (1ULL << (MySQLParser::CODE - 227))
        | (1ULL << (MySQLParser::COLUMNS - 227))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 227))
        | (1ULL << (MySQLParser::COMMENT - 227))
        | (1ULL << (MySQLParser::COMMIT - 227))
        | (1ULL << (MySQLParser::COMPACT - 227))
        | (1ULL << (MySQLParser::COMPLETION - 227))
        | (1ULL << (MySQLParser::COMPRESSED - 227))
        | (1ULL << (MySQLParser::COMPRESSION - 227)))) != 0) || ((((_la - 291) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 291)) & ((1ULL << (MySQLParser::CONCURRENT - 291))
        | (1ULL << (MySQLParser::CONNECTION - 291))
        | (1ULL << (MySQLParser::CONSISTENT - 291))
        | (1ULL << (MySQLParser::CONTAINS - 291))
        | (1ULL << (MySQLParser::CONTEXT - 291))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 291))
        | (1ULL << (MySQLParser::COPY - 291))
        | (1ULL << (MySQLParser::CPU - 291))
        | (1ULL << (MySQLParser::DATA - 291))
        | (1ULL << (MySQLParser::DATAFILE - 291))
        | (1ULL << (MySQLParser::DEALLOCATE - 291))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 291))
        | (1ULL << (MySQLParser::DEFINER - 291))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 291))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 291))
        | (1ULL << (MySQLParser::DIRECTORY - 291))
        | (1ULL << (MySQLParser::DISABLE - 291))
        | (1ULL << (MySQLParser::DISCARD - 291))
        | (1ULL << (MySQLParser::DISK - 291))
        | (1ULL << (MySQLParser::DO - 291))
        | (1ULL << (MySQLParser::DUMPFILE - 291))
        | (1ULL << (MySQLParser::DUPLICATE - 291))
        | (1ULL << (MySQLParser::DYNAMIC - 291))
        | (1ULL << (MySQLParser::ENABLE - 291))
        | (1ULL << (MySQLParser::ENCRYPTION - 291))
        | (1ULL << (MySQLParser::END - 291))
        | (1ULL << (MySQLParser::ENDS - 291))
        | (1ULL << (MySQLParser::ENGINE - 291))
        | (1ULL << (MySQLParser::ENGINES - 291))
        | (1ULL << (MySQLParser::ERROR - 291))
        | (1ULL << (MySQLParser::ERRORS - 291))
        | (1ULL << (MySQLParser::ESCAPE - 291))
        | (1ULL << (MySQLParser::EVEN - 291))
        | (1ULL << (MySQLParser::EVENT - 291))
        | (1ULL << (MySQLParser::EVENTS - 291))
        | (1ULL << (MySQLParser::EVERY - 291))
        | (1ULL << (MySQLParser::EXCHANGE - 291))
        | (1ULL << (MySQLParser::EXCLUSIVE - 291))
        | (1ULL << (MySQLParser::EXPIRE - 291))
        | (1ULL << (MySQLParser::EXPORT - 291))
        | (1ULL << (MySQLParser::EXTENDED - 291))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 291))
        | (1ULL << (MySQLParser::FAST - 291))
        | (1ULL << (MySQLParser::FAULTS - 291))
        | (1ULL << (MySQLParser::FIELDS - 291))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 291))
        | (1ULL << (MySQLParser::FILTER - 291))
        | (1ULL << (MySQLParser::FIRST - 291))
        | (1ULL << (MySQLParser::FIXED - 291))
        | (1ULL << (MySQLParser::FLUSH - 291))
        | (1ULL << (MySQLParser::FOLLOWS - 291))
        | (1ULL << (MySQLParser::FOUND - 291))
        | (1ULL << (MySQLParser::FULL - 291))
        | (1ULL << (MySQLParser::FUNCTION - 291))
        | (1ULL << (MySQLParser::GENERAL - 291))
        | (1ULL << (MySQLParser::GLOBAL - 291))
        | (1ULL << (MySQLParser::GRANTS - 291))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 291))
        | (1ULL << (MySQLParser::HANDLER - 291))
        | (1ULL << (MySQLParser::HASH - 291))
        | (1ULL << (MySQLParser::HELP - 291))
        | (1ULL << (MySQLParser::HOST - 291))
        | (1ULL << (MySQLParser::HOSTS - 291))
        | (1ULL << (MySQLParser::IDENTIFIED - 291)))) != 0) || ((((_la - 355) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 355)) & ((1ULL << (MySQLParser::IGNORE_SERVER_IDS - 355))
        | (1ULL << (MySQLParser::IMPORT - 355))
        | (1ULL << (MySQLParser::INDEXES - 355))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 355))
        | (1ULL << (MySQLParser::INPLACE - 355))
        | (1ULL << (MySQLParser::INSERT_METHOD - 355))
        | (1ULL << (MySQLParser::INSTALL - 355))
        | (1ULL << (MySQLParser::INSTANCE - 355))
        | (1ULL << (MySQLParser::INVISIBLE - 355))
        | (1ULL << (MySQLParser::INVOKER - 355))
        | (1ULL << (MySQLParser::IO - 355))
        | (1ULL << (MySQLParser::IO_THREAD - 355))
        | (1ULL << (MySQLParser::IPC - 355))
        | (1ULL << (MySQLParser::ISOLATION - 355))
        | (1ULL << (MySQLParser::ISSUER - 355))
        | (1ULL << (MySQLParser::JSON - 355))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 355))
        | (1ULL << (MySQLParser::LANGUAGE - 355))
        | (1ULL << (MySQLParser::LAST - 355))
        | (1ULL << (MySQLParser::LEAVES - 355))
        | (1ULL << (MySQLParser::LESS - 355))
        | (1ULL << (MySQLParser::LEVEL - 355))
        | (1ULL << (MySQLParser::LIST - 355))
        | (1ULL << (MySQLParser::LOCAL - 355))
        | (1ULL << (MySQLParser::LOGFILE - 355))
        | (1ULL << (MySQLParser::LOGS - 355))
        | (1ULL << (MySQLParser::MASTER - 355))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 355))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 355))
        | (1ULL << (MySQLParser::MASTER_DELAY - 355))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 355))
        | (1ULL << (MySQLParser::MASTER_HOST - 355))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 355))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 355))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 355))
        | (1ULL << (MySQLParser::MASTER_PORT - 355))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 355))
        | (1ULL << (MySQLParser::MASTER_SSL - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 355))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 355))
        | (1ULL << (MySQLParser::MASTER_USER - 355))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 355))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 355))
        | (1ULL << (MySQLParser::MAX_ROWS - 355))
        | (1ULL << (MySQLParser::MAX_SIZE - 355))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 355))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 355))
        | (1ULL << (MySQLParser::MEDIUM - 355))
        | (1ULL << (MySQLParser::MERGE - 355))
        | (1ULL << (MySQLParser::MID - 355))
        | (1ULL << (MySQLParser::MIGRATE - 355))
        | (1ULL << (MySQLParser::MIN_ROWS - 355))
        | (1ULL << (MySQLParser::MODE - 355))
        | (1ULL << (MySQLParser::MODIFY - 355))
        | (1ULL << (MySQLParser::MUTEX - 355))
        | (1ULL << (MySQLParser::MYSQL - 355))
        | (1ULL << (MySQLParser::NAME - 355))
        | (1ULL << (MySQLParser::NAMES - 355)))) != 0) || ((((_la - 419) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 419)) & ((1ULL << (MySQLParser::NCHAR - 419))
        | (1ULL << (MySQLParser::NEVER - 419))
        | (1ULL << (MySQLParser::NEXT - 419))
        | (1ULL << (MySQLParser::NO - 419))
        | (1ULL << (MySQLParser::NODEGROUP - 419))
        | (1ULL << (MySQLParser::NONE - 419))
        | (1ULL << (MySQLParser::OFFLINE - 419))
        | (1ULL << (MySQLParser::OFFSET - 419))
        | (1ULL << (MySQLParser::OJ - 419))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 419))
        | (1ULL << (MySQLParser::ONE - 419))
        | (1ULL << (MySQLParser::ONLINE - 419))
        | (1ULL << (MySQLParser::ONLY - 419))
        | (1ULL << (MySQLParser::OPEN - 419))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 419))
        | (1ULL << (MySQLParser::OPTIONS - 419))
        | (1ULL << (MySQLParser::OWNER - 419))
        | (1ULL << (MySQLParser::PACK_KEYS - 419))
        | (1ULL << (MySQLParser::PAGE - 419))
        | (1ULL << (MySQLParser::PARSER - 419))
        | (1ULL << (MySQLParser::PARTIAL - 419))
        | (1ULL << (MySQLParser::PARTITIONING - 419))
        | (1ULL << (MySQLParser::PARTITIONS - 419))
        | (1ULL << (MySQLParser::PASSWORD - 419))
        | (1ULL << (MySQLParser::PHASE - 419))
        | (1ULL << (MySQLParser::PLUGIN - 419))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 419))
        | (1ULL << (MySQLParser::PLUGINS - 419))
        | (1ULL << (MySQLParser::PORT - 419))
        | (1ULL << (MySQLParser::PRECEDES - 419))
        | (1ULL << (MySQLParser::PREPARE - 419))
        | (1ULL << (MySQLParser::PRESERVE - 419))
        | (1ULL << (MySQLParser::PREV - 419))
        | (1ULL << (MySQLParser::PROCESSLIST - 419))
        | (1ULL << (MySQLParser::PROFILE - 419))
        | (1ULL << (MySQLParser::PROFILES - 419))
        | (1ULL << (MySQLParser::PROXY - 419))
        | (1ULL << (MySQLParser::QUERY - 419))
        | (1ULL << (MySQLParser::QUICK - 419))
        | (1ULL << (MySQLParser::REBUILD - 419))
        | (1ULL << (MySQLParser::RECOVER - 419))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 419))
        | (1ULL << (MySQLParser::REDUNDANT - 419))
        | (1ULL << (MySQLParser::RELAY - 419))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 419))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 419))
        | (1ULL << (MySQLParser::RELAYLOG - 419))
        | (1ULL << (MySQLParser::REMOVE - 419))
        | (1ULL << (MySQLParser::REORGANIZE - 419))
        | (1ULL << (MySQLParser::REPAIR - 419))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 419))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 419))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 419))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATION - 419))
        | (1ULL << (MySQLParser::RESET - 419))
        | (1ULL << (MySQLParser::RESUME - 419))
        | (1ULL << (MySQLParser::RETURNS - 419))
        | (1ULL << (MySQLParser::ROLLBACK - 419))
        | (1ULL << (MySQLParser::ROLLUP - 419))
        | (1ULL << (MySQLParser::ROTATE - 419)))) != 0) || ((((_la - 483) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 483)) & ((1ULL << (MySQLParser::ROW - 483))
        | (1ULL << (MySQLParser::ROWS - 483))
        | (1ULL << (MySQLParser::ROW_FORMAT - 483))
        | (1ULL << (MySQLParser::SAVEPOINT - 483))
        | (1ULL << (MySQLParser::SCHEDULE - 483))
        | (1ULL << (MySQLParser::SECURITY - 483))
        | (1ULL << (MySQLParser::SERVER - 483))
        | (1ULL << (MySQLParser::SESSION - 483))
        | (1ULL << (MySQLParser::SHARE - 483))
        | (1ULL << (MySQLParser::SHARED - 483))
        | (1ULL << (MySQLParser::SIGNED - 483))
        | (1ULL << (MySQLParser::SIMPLE - 483))
        | (1ULL << (MySQLParser::SLAVE - 483))
        | (1ULL << (MySQLParser::SLOW - 483))
        | (1ULL << (MySQLParser::SNAPSHOT - 483))
        | (1ULL << (MySQLParser::SOCKET - 483))
        | (1ULL << (MySQLParser::SOME - 483))
        | (1ULL << (MySQLParser::SONAME - 483))
        | (1ULL << (MySQLParser::SOUNDS - 483))
        | (1ULL << (MySQLParser::SOURCE - 483))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 483))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 483))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 483))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 483))
        | (1ULL << (MySQLParser::SQL_CACHE - 483))
        | (1ULL << (MySQLParser::SQL_NO_CACHE - 483))
        | (1ULL << (MySQLParser::SQL_THREAD - 483))
        | (1ULL << (MySQLParser::START - 483))
        | (1ULL << (MySQLParser::STARTS - 483))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 483))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 483))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 483))
        | (1ULL << (MySQLParser::STATUS - 483))
        | (1ULL << (MySQLParser::STOP - 483))
        | (1ULL << (MySQLParser::STORAGE - 483))
        | (1ULL << (MySQLParser::STRING - 483))
        | (1ULL << (MySQLParser::SUBJECT - 483))
        | (1ULL << (MySQLParser::SUBPARTITION - 483))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 483))
        | (1ULL << (MySQLParser::SUSPEND - 483))
        | (1ULL << (MySQLParser::SWAPS - 483))
        | (1ULL << (MySQLParser::SWITCHES - 483))
        | (1ULL << (MySQLParser::TABLESPACE - 483))
        | (1ULL << (MySQLParser::TEMPORARY - 483))
        | (1ULL << (MySQLParser::TEMPTABLE - 483))
        | (1ULL << (MySQLParser::THAN - 483))
        | (1ULL << (MySQLParser::TRADITIONAL - 483))
        | (1ULL << (MySQLParser::TRANSACTION - 483))
        | (1ULL << (MySQLParser::TRIGGERS - 483))
        | (1ULL << (MySQLParser::TRUNCATE - 483))
        | (1ULL << (MySQLParser::UNDEFINED - 483))
        | (1ULL << (MySQLParser::UNDOFILE - 483))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 483))
        | (1ULL << (MySQLParser::UNINSTALL - 483))
        | (1ULL << (MySQLParser::UNKNOWN - 483))
        | (1ULL << (MySQLParser::UNTIL - 483))
        | (1ULL << (MySQLParser::UPGRADE - 483))
        | (1ULL << (MySQLParser::USER - 483))
        | (1ULL << (MySQLParser::USE_FRM - 483))
        | (1ULL << (MySQLParser::USER_RESOURCES - 483))
        | (1ULL << (MySQLParser::VALIDATION - 483))
        | (1ULL << (MySQLParser::VALUE - 483))
        | (1ULL << (MySQLParser::VARIABLES - 483)))) != 0) || ((((_la - 547) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 547)) & ((1ULL << (MySQLParser::VIEW - 547))
        | (1ULL << (MySQLParser::VISIBLE - 547))
        | (1ULL << (MySQLParser::WAIT - 547))
        | (1ULL << (MySQLParser::WARNINGS - 547))
        | (1ULL << (MySQLParser::WITHOUT - 547))
        | (1ULL << (MySQLParser::WORK - 547))
        | (1ULL << (MySQLParser::WRAPPER - 547))
        | (1ULL << (MySQLParser::X509 - 547))
        | (1ULL << (MySQLParser::XA - 547))
        | (1ULL << (MySQLParser::XML - 547))
        | (1ULL << (MySQLParser::INTERNAL - 547))
        | (1ULL << (MySQLParser::QUARTER - 547))
        | (1ULL << (MySQLParser::MONTH - 547))
        | (1ULL << (MySQLParser::DAY - 547))
        | (1ULL << (MySQLParser::HOUR - 547))
        | (1ULL << (MySQLParser::MINUTE - 547))
        | (1ULL << (MySQLParser::WEEK - 547))
        | (1ULL << (MySQLParser::SECOND - 547))
        | (1ULL << (MySQLParser::MICROSECOND - 547))
        | (1ULL << (MySQLParser::TABLES - 547))
        | (1ULL << (MySQLParser::ROUTINE - 547))
        | (1ULL << (MySQLParser::EXECUTE - 547))
        | (1ULL << (MySQLParser::FILE - 547))
        | (1ULL << (MySQLParser::PROCESS - 547))
        | (1ULL << (MySQLParser::RELOAD - 547))
        | (1ULL << (MySQLParser::SHUTDOWN - 547))
        | (1ULL << (MySQLParser::SUPER - 547))
        | (1ULL << (MySQLParser::PRIVILEGES - 547))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 547))
        | (1ULL << (MySQLParser::ARMSCII8 - 547))
        | (1ULL << (MySQLParser::ASCII - 547))
        | (1ULL << (MySQLParser::BIG5 - 547))
        | (1ULL << (MySQLParser::CP1250 - 547))
        | (1ULL << (MySQLParser::CP1251 - 547))
        | (1ULL << (MySQLParser::CP1256 - 547))
        | (1ULL << (MySQLParser::CP1257 - 547))
        | (1ULL << (MySQLParser::CP850 - 547))
        | (1ULL << (MySQLParser::CP852 - 547))
        | (1ULL << (MySQLParser::CP866 - 547))
        | (1ULL << (MySQLParser::CP932 - 547))
        | (1ULL << (MySQLParser::DEC8 - 547))
        | (1ULL << (MySQLParser::EUCJPMS - 547))
        | (1ULL << (MySQLParser::EUCKR - 547))
        | (1ULL << (MySQLParser::GB2312 - 547))
        | (1ULL << (MySQLParser::GBK - 547))
        | (1ULL << (MySQLParser::GEOSTD8 - 547))
        | (1ULL << (MySQLParser::GREEK - 547))
        | (1ULL << (MySQLParser::HEBREW - 547))
        | (1ULL << (MySQLParser::HP8 - 547))
        | (1ULL << (MySQLParser::KEYBCS2 - 547))
        | (1ULL << (MySQLParser::KOI8R - 547))
        | (1ULL << (MySQLParser::KOI8U - 547))
        | (1ULL << (MySQLParser::LATIN1 - 547))
        | (1ULL << (MySQLParser::LATIN2 - 547))
        | (1ULL << (MySQLParser::LATIN5 - 547))
        | (1ULL << (MySQLParser::LATIN7 - 547))
        | (1ULL << (MySQLParser::MACCE - 547))
        | (1ULL << (MySQLParser::MACROMAN - 547))
        | (1ULL << (MySQLParser::SJIS - 547)))) != 0) || ((((_la - 611) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 611)) & ((1ULL << (MySQLParser::SWE7 - 611))
        | (1ULL << (MySQLParser::TIS620 - 611))
        | (1ULL << (MySQLParser::UCS2 - 611))
        | (1ULL << (MySQLParser::UJIS - 611))
        | (1ULL << (MySQLParser::UTF16 - 611))
        | (1ULL << (MySQLParser::UTF16LE - 611))
        | (1ULL << (MySQLParser::UTF32 - 611))
        | (1ULL << (MySQLParser::UTF8 - 611))
        | (1ULL << (MySQLParser::UTF8MB3 - 611))
        | (1ULL << (MySQLParser::UTF8MB4 - 611))
        | (1ULL << (MySQLParser::ARCHIVE - 611))
        | (1ULL << (MySQLParser::BLACKHOLE - 611))
        | (1ULL << (MySQLParser::CSV - 611))
        | (1ULL << (MySQLParser::FEDERATED - 611))
        | (1ULL << (MySQLParser::INNODB - 611))
        | (1ULL << (MySQLParser::MEMORY - 611))
        | (1ULL << (MySQLParser::MRG_MYISAM - 611))
        | (1ULL << (MySQLParser::MYISAM - 611))
        | (1ULL << (MySQLParser::NDB - 611))
        | (1ULL << (MySQLParser::NDBCLUSTER - 611))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 611))
        | (1ULL << (MySQLParser::TOKUDB - 611))
        | (1ULL << (MySQLParser::REPEATABLE - 611))
        | (1ULL << (MySQLParser::COMMITTED - 611))
        | (1ULL << (MySQLParser::UNCOMMITTED - 611))
        | (1ULL << (MySQLParser::SERIALIZABLE - 611))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 611))
        | (1ULL << (MySQLParser::LINESTRING - 611))
        | (1ULL << (MySQLParser::MULTILINESTRING - 611))
        | (1ULL << (MySQLParser::MULTIPOINT - 611))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 611))
        | (1ULL << (MySQLParser::POINT - 611))
        | (1ULL << (MySQLParser::POLYGON - 611))
        | (1ULL << (MySQLParser::ABS - 611))
        | (1ULL << (MySQLParser::ACOS - 611))
        | (1ULL << (MySQLParser::ADDDATE - 611))
        | (1ULL << (MySQLParser::ADDTIME - 611))
        | (1ULL << (MySQLParser::AES_DECRYPT - 611))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 611))
        | (1ULL << (MySQLParser::AREA - 611))
        | (1ULL << (MySQLParser::ASBINARY - 611))
        | (1ULL << (MySQLParser::ASIN - 611))
        | (1ULL << (MySQLParser::ASTEXT - 611))
        | (1ULL << (MySQLParser::ASWKB - 611))
        | (1ULL << (MySQLParser::ASWKT - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 611))
        | (1ULL << (MySQLParser::ATAN - 611))
        | (1ULL << (MySQLParser::ATAN2 - 611))
        | (1ULL << (MySQLParser::BENCHMARK - 611))
        | (1ULL << (MySQLParser::BIN - 611))
        | (1ULL << (MySQLParser::BIT_COUNT - 611))
        | (1ULL << (MySQLParser::BIT_LENGTH - 611))
        | (1ULL << (MySQLParser::BUFFER - 611))
        | (1ULL << (MySQLParser::CEIL - 611))
        | (1ULL << (MySQLParser::CEILING - 611))
        | (1ULL << (MySQLParser::CENTROID - 611))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 611))
        | (1ULL << (MySQLParser::CHARSET - 611)))) != 0) || ((((_la - 675) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 675)) & ((1ULL << (MySQLParser::CHAR_LENGTH - 675))
        | (1ULL << (MySQLParser::COERCIBILITY - 675))
        | (1ULL << (MySQLParser::COLLATION - 675))
        | (1ULL << (MySQLParser::COMPRESS - 675))
        | (1ULL << (MySQLParser::CONCAT - 675))
        | (1ULL << (MySQLParser::CONCAT_WS - 675))
        | (1ULL << (MySQLParser::CONNECTION_ID - 675))
        | (1ULL << (MySQLParser::CONV - 675))
        | (1ULL << (MySQLParser::CONVERT_TZ - 675))
        | (1ULL << (MySQLParser::COS - 675))
        | (1ULL << (MySQLParser::COT - 675))
        | (1ULL << (MySQLParser::CRC32 - 675))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 675))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 675))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 675))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 675))
        | (1ULL << (MySQLParser::CROSSES - 675))
        | (1ULL << (MySQLParser::DATEDIFF - 675))
        | (1ULL << (MySQLParser::DATE_FORMAT - 675))
        | (1ULL << (MySQLParser::DAYNAME - 675))
        | (1ULL << (MySQLParser::DAYOFMONTH - 675))
        | (1ULL << (MySQLParser::DAYOFWEEK - 675))
        | (1ULL << (MySQLParser::DAYOFYEAR - 675))
        | (1ULL << (MySQLParser::DECODE - 675))
        | (1ULL << (MySQLParser::DEGREES - 675))
        | (1ULL << (MySQLParser::DES_DECRYPT - 675))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 675))
        | (1ULL << (MySQLParser::DIMENSION - 675))
        | (1ULL << (MySQLParser::DISJOINT - 675))
        | (1ULL << (MySQLParser::ELT - 675))
        | (1ULL << (MySQLParser::ENCODE - 675))
        | (1ULL << (MySQLParser::ENCRYPT - 675))
        | (1ULL << (MySQLParser::ENDPOINT - 675))
        | (1ULL << (MySQLParser::ENVELOPE - 675))
        | (1ULL << (MySQLParser::EQUALS - 675))
        | (1ULL << (MySQLParser::EXP - 675))
        | (1ULL << (MySQLParser::EXPORT_SET - 675))
        | (1ULL << (MySQLParser::EXTERIORRING - 675))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 675))
        | (1ULL << (MySQLParser::FIELD - 675))
        | (1ULL << (MySQLParser::FIND_IN_SET - 675))
        | (1ULL << (MySQLParser::FLOOR - 675))
        | (1ULL << (MySQLParser::FORMAT - 675))
        | (1ULL << (MySQLParser::FOUND_ROWS - 675))
        | (1ULL << (MySQLParser::FROM_BASE64 - 675))
        | (1ULL << (MySQLParser::FROM_DAYS - 675))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 675))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 675))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 675))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 675))
        | (1ULL << (MySQLParser::GEOMETRYN - 675))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 675))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 675))
        | (1ULL << (MySQLParser::GET_FORMAT - 675))
        | (1ULL << (MySQLParser::GET_LOCK - 675))
        | (1ULL << (MySQLParser::GLENGTH - 675))
        | (1ULL << (MySQLParser::GREATEST - 675))
        | (1ULL << (MySQLParser::GTID_SUBSET - 675))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 675))
        | (1ULL << (MySQLParser::HEX - 675)))) != 0) || ((((_la - 739) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 739)) & ((1ULL << (MySQLParser::IFNULL - 739))
        | (1ULL << (MySQLParser::INET6_ATON - 739))
        | (1ULL << (MySQLParser::INET6_NTOA - 739))
        | (1ULL << (MySQLParser::INET_ATON - 739))
        | (1ULL << (MySQLParser::INET_NTOA - 739))
        | (1ULL << (MySQLParser::INSTR - 739))
        | (1ULL << (MySQLParser::INTERIORRINGN - 739))
        | (1ULL << (MySQLParser::INTERSECTS - 739))
        | (1ULL << (MySQLParser::ISCLOSED - 739))
        | (1ULL << (MySQLParser::ISEMPTY - 739))
        | (1ULL << (MySQLParser::ISNULL - 739))
        | (1ULL << (MySQLParser::ISSIMPLE - 739))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 739))
        | (1ULL << (MySQLParser::IS_IPV4 - 739))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 739))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 739))
        | (1ULL << (MySQLParser::IS_IPV6 - 739))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 739))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 739))
        | (1ULL << (MySQLParser::LCASE - 739))
        | (1ULL << (MySQLParser::LEAST - 739))
        | (1ULL << (MySQLParser::LENGTH - 739))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 739))
        | (1ULL << (MySQLParser::LINEFROMWKB - 739))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 739))
        | (1ULL << (MySQLParser::LINESTRINGFROMWKB - 739))
        | (1ULL << (MySQLParser::LN - 739))
        | (1ULL << (MySQLParser::LOAD_FILE - 739))
        | (1ULL << (MySQLParser::LOCATE - 739))
        | (1ULL << (MySQLParser::LOG - 739))
        | (1ULL << (MySQLParser::LOG10 - 739))
        | (1ULL << (MySQLParser::LOG2 - 739))
        | (1ULL << (MySQLParser::LOWER - 739))
        | (1ULL << (MySQLParser::LPAD - 739))
        | (1ULL << (MySQLParser::LTRIM - 739))
        | (1ULL << (MySQLParser::MAKEDATE - 739))
        | (1ULL << (MySQLParser::MAKETIME - 739))
        | (1ULL << (MySQLParser::MAKE_SET - 739))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 739))
        | (1ULL << (MySQLParser::MBRCONTAINS - 739))
        | (1ULL << (MySQLParser::MBRDISJOINT - 739))
        | (1ULL << (MySQLParser::MBREQUAL - 739))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 739))
        | (1ULL << (MySQLParser::MBROVERLAPS - 739))
        | (1ULL << (MySQLParser::MBRTOUCHES - 739))
        | (1ULL << (MySQLParser::MBRWITHIN - 739))
        | (1ULL << (MySQLParser::MD5 - 739))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 739))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 739))
        | (1ULL << (MySQLParser::MONTHNAME - 739))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 739))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 739))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 739))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 739))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 739))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 739))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 739))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 739))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 739))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 739))
        | (1ULL << (MySQLParser::NAME_CONST - 739))
        | (1ULL << (MySQLParser::NULLIF - 739))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 739))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 739)))) != 0) || ((((_la - 803) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 803)) & ((1ULL << (MySQLParser::NUMPOINTS - 803))
        | (1ULL << (MySQLParser::OCT - 803))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 803))
        | (1ULL << (MySQLParser::ORD - 803))
        | (1ULL << (MySQLParser::OVERLAPS - 803))
        | (1ULL << (MySQLParser::PERIOD_ADD - 803))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 803))
        | (1ULL << (MySQLParser::PI - 803))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 803))
        | (1ULL << (MySQLParser::POINTFROMWKB - 803))
        | (1ULL << (MySQLParser::POINTN - 803))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 803))
        | (1ULL << (MySQLParser::POLYFROMWKB - 803))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 803))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 803))
        | (1ULL << (MySQLParser::POW - 803))
        | (1ULL << (MySQLParser::POWER - 803))
        | (1ULL << (MySQLParser::QUOTE - 803))
        | (1ULL << (MySQLParser::RADIANS - 803))
        | (1ULL << (MySQLParser::RAND - 803))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 803))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 803))
        | (1ULL << (MySQLParser::REVERSE - 803))
        | (1ULL << (MySQLParser::ROUND - 803))
        | (1ULL << (MySQLParser::ROW_COUNT - 803))
        | (1ULL << (MySQLParser::RPAD - 803))
        | (1ULL << (MySQLParser::RTRIM - 803))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 803))
        | (1ULL << (MySQLParser::SESSION_USER - 803))
        | (1ULL << (MySQLParser::SHA - 803))
        | (1ULL << (MySQLParser::SHA1 - 803))
        | (1ULL << (MySQLParser::SHA2 - 803))
        | (1ULL << (MySQLParser::SIGN - 803))
        | (1ULL << (MySQLParser::SIN - 803))
        | (1ULL << (MySQLParser::SLEEP - 803))
        | (1ULL << (MySQLParser::SOUNDEX - 803))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 803))
        | (1ULL << (MySQLParser::SQRT - 803))
        | (1ULL << (MySQLParser::SRID - 803))
        | (1ULL << (MySQLParser::STARTPOINT - 803))
        | (1ULL << (MySQLParser::STRCMP - 803))
        | (1ULL << (MySQLParser::STR_TO_DATE - 803))
        | (1ULL << (MySQLParser::ST_AREA - 803))
        | (1ULL << (MySQLParser::ST_ASBINARY - 803))
        | (1ULL << (MySQLParser::ST_ASTEXT - 803))
        | (1ULL << (MySQLParser::ST_ASWKB - 803))
        | (1ULL << (MySQLParser::ST_ASWKT - 803))
        | (1ULL << (MySQLParser::ST_BUFFER - 803))
        | (1ULL << (MySQLParser::ST_CENTROID - 803))
        | (1ULL << (MySQLParser::ST_CONTAINS - 803))
        | (1ULL << (MySQLParser::ST_CROSSES - 803))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 803))
        | (1ULL << (MySQLParser::ST_DIMENSION - 803))
        | (1ULL << (MySQLParser::ST_DISJOINT - 803))
        | (1ULL << (MySQLParser::ST_DISTANCE - 803))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 803))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 803))
        | (1ULL << (MySQLParser::ST_EQUALS - 803))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 803))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 803))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 803))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 803))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 803))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 803)))) != 0) || ((((_la - 867) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 867)) & ((1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 867))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 867))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 867))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 867))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 867))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 867))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 867))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 867))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 867))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 867))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 867))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 867))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 867))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_POINTN - 867))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_POLYFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_SRID - 867))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 867))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 867))
        | (1ULL << (MySQLParser::ST_TOUCHES - 867))
        | (1ULL << (MySQLParser::ST_UNION - 867))
        | (1ULL << (MySQLParser::ST_WITHIN - 867))
        | (1ULL << (MySQLParser::ST_X - 867))
        | (1ULL << (MySQLParser::ST_Y - 867))
        | (1ULL << (MySQLParser::SUBDATE - 867))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 867))
        | (1ULL << (MySQLParser::SUBTIME - 867))
        | (1ULL << (MySQLParser::SYSTEM_USER - 867))
        | (1ULL << (MySQLParser::TAN - 867))
        | (1ULL << (MySQLParser::TIMEDIFF - 867))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 867))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 867))
        | (1ULL << (MySQLParser::TIME_FORMAT - 867))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 867))
        | (1ULL << (MySQLParser::TOUCHES - 867))
        | (1ULL << (MySQLParser::TO_BASE64 - 867))
        | (1ULL << (MySQLParser::TO_DAYS - 867))
        | (1ULL << (MySQLParser::TO_SECONDS - 867))
        | (1ULL << (MySQLParser::UCASE - 867))
        | (1ULL << (MySQLParser::UNCOMPRESS - 867))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 867))
        | (1ULL << (MySQLParser::UNHEX - 867))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 867))
        | (1ULL << (MySQLParser::UPDATEXML - 867))
        | (1ULL << (MySQLParser::UPPER - 867))
        | (1ULL << (MySQLParser::UUID - 867))
        | (1ULL << (MySQLParser::UUID_SHORT - 867))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 867))
        | (1ULL << (MySQLParser::VERSION - 867))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 867))
        | (1ULL << (MySQLParser::WEEKDAY - 867))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 867)))) != 0) || ((((_la - 931) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 931)) & ((1ULL << (MySQLParser::WEIGHT_STRING - 931))
        | (1ULL << (MySQLParser::WITHIN - 931))
        | (1ULL << (MySQLParser::YEARWEEK - 931))
        | (1ULL << (MySQLParser::Y_FUNCTION - 931))
        | (1ULL << (MySQLParser::X_FUNCTION - 931))
        | (1ULL << (MySQLParser::PLUS - 931))
        | (1ULL << (MySQLParser::MINUS - 931))
        | (1ULL << (MySQLParser::EXCLAMATION_SYMBOL - 931))
        | (1ULL << (MySQLParser::BIT_NOT_OP - 931))
        | (1ULL << (MySQLParser::LR_BRACKET - 931))
        | (1ULL << (MySQLParser::ZERO_DECIMAL - 931))
        | (1ULL << (MySQLParser::ONE_DECIMAL - 931))
        | (1ULL << (MySQLParser::TWO_DECIMAL - 931))
        | (1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 931))
        | (1ULL << (MySQLParser::START_NATIONAL_STRING_LITERAL - 931))
        | (1ULL << (MySQLParser::STRING_LITERAL - 931))
        | (1ULL << (MySQLParser::DECIMAL_LITERAL - 931))
        | (1ULL << (MySQLParser::HEXADECIMAL_LITERAL - 931))
        | (1ULL << (MySQLParser::REAL_LITERAL - 931))
        | (1ULL << (MySQLParser::NULL_SPEC_LITERAL - 931))
        | (1ULL << (MySQLParser::BIT_STRING - 931))
        | (1ULL << (MySQLParser::STRING_CHARSET_NAME - 931))
        | (1ULL << (MySQLParser::PLACEHOLDER_VALUE - 931))
        | (1ULL << (MySQLParser::ID - 931))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 931))
        | (1ULL << (MySQLParser::LOCAL_ID - 931))
        | (1ULL << (MySQLParser::GLOBAL_ID - 931)))) != 0)) {
        setState(5679);
        functionArgs();
      }
      setState(5682);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySQLParser::UdfFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5684);
      fullId();
      setState(5685);
      match(MySQLParser::LR_BRACKET);
      setState(5687);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 19) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 19)) & ((1ULL << (MySQLParser::CASE - 19))
        | (1ULL << (MySQLParser::CAST - 19))
        | (1ULL << (MySQLParser::CONVERT - 19))
        | (1ULL << (MySQLParser::CURRENT_USER - 19))
        | (1ULL << (MySQLParser::DATABASE - 19))
        | (1ULL << (MySQLParser::EXISTS - 19))
        | (1ULL << (MySQLParser::FALSE - 19))
        | (1ULL << (MySQLParser::IF - 19))
        | (1ULL << (MySQLParser::INSERT - 19))
        | (1ULL << (MySQLParser::INTERVAL - 19)))) != 0) || ((((_la - 99) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 99)) & ((1ULL << (MySQLParser::NOT - 99))
        | (1ULL << (MySQLParser::NULL_LITERAL - 99))
        | (1ULL << (MySQLParser::REPLACE - 99))
        | (1ULL << (MySQLParser::TRUE - 99)))) != 0) || ((((_la - 163) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 163)) & ((1ULL << (MySQLParser::VALUES - 163))
        | (1ULL << (MySQLParser::DATE - 163))
        | (1ULL << (MySQLParser::TIME - 163))
        | (1ULL << (MySQLParser::TIMESTAMP - 163))
        | (1ULL << (MySQLParser::DATETIME - 163))
        | (1ULL << (MySQLParser::YEAR - 163))
        | (1ULL << (MySQLParser::CHAR - 163))
        | (1ULL << (MySQLParser::BINARY - 163))
        | (1ULL << (MySQLParser::TEXT - 163))
        | (1ULL << (MySQLParser::ENUM - 163))
        | (1ULL << (MySQLParser::SERIAL - 163))
        | (1ULL << (MySQLParser::AVG - 163))
        | (1ULL << (MySQLParser::BIT_AND - 163))
        | (1ULL << (MySQLParser::BIT_OR - 163))
        | (1ULL << (MySQLParser::BIT_XOR - 163))
        | (1ULL << (MySQLParser::COUNT - 163))
        | (1ULL << (MySQLParser::GROUP_CONCAT - 163))
        | (1ULL << (MySQLParser::MAX - 163))
        | (1ULL << (MySQLParser::MIN - 163))
        | (1ULL << (MySQLParser::STD - 163))
        | (1ULL << (MySQLParser::STDDEV - 163)))) != 0) || ((((_la - 227) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 227)) & ((1ULL << (MySQLParser::STDDEV_POP - 227))
        | (1ULL << (MySQLParser::STDDEV_SAMP - 227))
        | (1ULL << (MySQLParser::SUM - 227))
        | (1ULL << (MySQLParser::VAR_POP - 227))
        | (1ULL << (MySQLParser::VAR_SAMP - 227))
        | (1ULL << (MySQLParser::VARIANCE - 227))
        | (1ULL << (MySQLParser::CURRENT_DATE - 227))
        | (1ULL << (MySQLParser::CURRENT_TIME - 227))
        | (1ULL << (MySQLParser::CURRENT_TIMESTAMP - 227))
        | (1ULL << (MySQLParser::LOCALTIME - 227))
        | (1ULL << (MySQLParser::CURDATE - 227))
        | (1ULL << (MySQLParser::CURTIME - 227))
        | (1ULL << (MySQLParser::DATE_ADD - 227))
        | (1ULL << (MySQLParser::DATE_SUB - 227))
        | (1ULL << (MySQLParser::EXTRACT - 227))
        | (1ULL << (MySQLParser::LOCALTIMESTAMP - 227))
        | (1ULL << (MySQLParser::NOW - 227))
        | (1ULL << (MySQLParser::POSITION - 227))
        | (1ULL << (MySQLParser::SUBSTR - 227))
        | (1ULL << (MySQLParser::SUBSTRING - 227))
        | (1ULL << (MySQLParser::SYSDATE - 227))
        | (1ULL << (MySQLParser::TRIM - 227))
        | (1ULL << (MySQLParser::UTC_DATE - 227))
        | (1ULL << (MySQLParser::UTC_TIME - 227))
        | (1ULL << (MySQLParser::UTC_TIMESTAMP - 227))
        | (1ULL << (MySQLParser::ACCOUNT - 227))
        | (1ULL << (MySQLParser::ACTION - 227))
        | (1ULL << (MySQLParser::AFTER - 227))
        | (1ULL << (MySQLParser::AGGREGATE - 227))
        | (1ULL << (MySQLParser::ALGORITHM - 227))
        | (1ULL << (MySQLParser::ANY - 227))
        | (1ULL << (MySQLParser::AT - 227))
        | (1ULL << (MySQLParser::AUTHORS - 227))
        | (1ULL << (MySQLParser::AUTOCOMMIT - 227))
        | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 227))
        | (1ULL << (MySQLParser::AUTO_INCREMENT - 227))
        | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 227))
        | (1ULL << (MySQLParser::BEGIN - 227))
        | (1ULL << (MySQLParser::BINLOG - 227))
        | (1ULL << (MySQLParser::BIT - 227))
        | (1ULL << (MySQLParser::BLOCK - 227))
        | (1ULL << (MySQLParser::BOOL - 227))
        | (1ULL << (MySQLParser::BOOLEAN - 227))
        | (1ULL << (MySQLParser::BTREE - 227))
        | (1ULL << (MySQLParser::CACHE - 227))
        | (1ULL << (MySQLParser::CASCADED - 227))
        | (1ULL << (MySQLParser::CHAIN - 227))
        | (1ULL << (MySQLParser::CHANGED - 227))
        | (1ULL << (MySQLParser::CHANNEL - 227))
        | (1ULL << (MySQLParser::CHECKSUM - 227))
        | (1ULL << (MySQLParser::PAGE_CHECKSUM - 227))
        | (1ULL << (MySQLParser::CIPHER - 227))
        | (1ULL << (MySQLParser::CLIENT - 227))
        | (1ULL << (MySQLParser::CLOSE - 227))
        | (1ULL << (MySQLParser::COALESCE - 227))
        | (1ULL << (MySQLParser::CODE - 227))
        | (1ULL << (MySQLParser::COLUMNS - 227))
        | (1ULL << (MySQLParser::COLUMN_FORMAT - 227))
        | (1ULL << (MySQLParser::COMMENT - 227))
        | (1ULL << (MySQLParser::COMMIT - 227))
        | (1ULL << (MySQLParser::COMPACT - 227))
        | (1ULL << (MySQLParser::COMPLETION - 227))
        | (1ULL << (MySQLParser::COMPRESSED - 227))
        | (1ULL << (MySQLParser::COMPRESSION - 227)))) != 0) || ((((_la - 291) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 291)) & ((1ULL << (MySQLParser::CONCURRENT - 291))
        | (1ULL << (MySQLParser::CONNECTION - 291))
        | (1ULL << (MySQLParser::CONSISTENT - 291))
        | (1ULL << (MySQLParser::CONTAINS - 291))
        | (1ULL << (MySQLParser::CONTEXT - 291))
        | (1ULL << (MySQLParser::CONTRIBUTORS - 291))
        | (1ULL << (MySQLParser::COPY - 291))
        | (1ULL << (MySQLParser::CPU - 291))
        | (1ULL << (MySQLParser::DATA - 291))
        | (1ULL << (MySQLParser::DATAFILE - 291))
        | (1ULL << (MySQLParser::DEALLOCATE - 291))
        | (1ULL << (MySQLParser::DEFAULT_AUTH - 291))
        | (1ULL << (MySQLParser::DEFINER - 291))
        | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 291))
        | (1ULL << (MySQLParser::DES_KEY_FILE - 291))
        | (1ULL << (MySQLParser::DIRECTORY - 291))
        | (1ULL << (MySQLParser::DISABLE - 291))
        | (1ULL << (MySQLParser::DISCARD - 291))
        | (1ULL << (MySQLParser::DISK - 291))
        | (1ULL << (MySQLParser::DO - 291))
        | (1ULL << (MySQLParser::DUMPFILE - 291))
        | (1ULL << (MySQLParser::DUPLICATE - 291))
        | (1ULL << (MySQLParser::DYNAMIC - 291))
        | (1ULL << (MySQLParser::ENABLE - 291))
        | (1ULL << (MySQLParser::ENCRYPTION - 291))
        | (1ULL << (MySQLParser::END - 291))
        | (1ULL << (MySQLParser::ENDS - 291))
        | (1ULL << (MySQLParser::ENGINE - 291))
        | (1ULL << (MySQLParser::ENGINES - 291))
        | (1ULL << (MySQLParser::ERROR - 291))
        | (1ULL << (MySQLParser::ERRORS - 291))
        | (1ULL << (MySQLParser::ESCAPE - 291))
        | (1ULL << (MySQLParser::EVEN - 291))
        | (1ULL << (MySQLParser::EVENT - 291))
        | (1ULL << (MySQLParser::EVENTS - 291))
        | (1ULL << (MySQLParser::EVERY - 291))
        | (1ULL << (MySQLParser::EXCHANGE - 291))
        | (1ULL << (MySQLParser::EXCLUSIVE - 291))
        | (1ULL << (MySQLParser::EXPIRE - 291))
        | (1ULL << (MySQLParser::EXPORT - 291))
        | (1ULL << (MySQLParser::EXTENDED - 291))
        | (1ULL << (MySQLParser::EXTENT_SIZE - 291))
        | (1ULL << (MySQLParser::FAST - 291))
        | (1ULL << (MySQLParser::FAULTS - 291))
        | (1ULL << (MySQLParser::FIELDS - 291))
        | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 291))
        | (1ULL << (MySQLParser::FILTER - 291))
        | (1ULL << (MySQLParser::FIRST - 291))
        | (1ULL << (MySQLParser::FIXED - 291))
        | (1ULL << (MySQLParser::FLUSH - 291))
        | (1ULL << (MySQLParser::FOLLOWS - 291))
        | (1ULL << (MySQLParser::FOUND - 291))
        | (1ULL << (MySQLParser::FULL - 291))
        | (1ULL << (MySQLParser::FUNCTION - 291))
        | (1ULL << (MySQLParser::GENERAL - 291))
        | (1ULL << (MySQLParser::GLOBAL - 291))
        | (1ULL << (MySQLParser::GRANTS - 291))
        | (1ULL << (MySQLParser::GROUP_REPLICATION - 291))
        | (1ULL << (MySQLParser::HANDLER - 291))
        | (1ULL << (MySQLParser::HASH - 291))
        | (1ULL << (MySQLParser::HELP - 291))
        | (1ULL << (MySQLParser::HOST - 291))
        | (1ULL << (MySQLParser::HOSTS - 291))
        | (1ULL << (MySQLParser::IDENTIFIED - 291)))) != 0) || ((((_la - 355) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 355)) & ((1ULL << (MySQLParser::IGNORE_SERVER_IDS - 355))
        | (1ULL << (MySQLParser::IMPORT - 355))
        | (1ULL << (MySQLParser::INDEXES - 355))
        | (1ULL << (MySQLParser::INITIAL_SIZE - 355))
        | (1ULL << (MySQLParser::INPLACE - 355))
        | (1ULL << (MySQLParser::INSERT_METHOD - 355))
        | (1ULL << (MySQLParser::INSTALL - 355))
        | (1ULL << (MySQLParser::INSTANCE - 355))
        | (1ULL << (MySQLParser::INVISIBLE - 355))
        | (1ULL << (MySQLParser::INVOKER - 355))
        | (1ULL << (MySQLParser::IO - 355))
        | (1ULL << (MySQLParser::IO_THREAD - 355))
        | (1ULL << (MySQLParser::IPC - 355))
        | (1ULL << (MySQLParser::ISOLATION - 355))
        | (1ULL << (MySQLParser::ISSUER - 355))
        | (1ULL << (MySQLParser::JSON - 355))
        | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 355))
        | (1ULL << (MySQLParser::LANGUAGE - 355))
        | (1ULL << (MySQLParser::LAST - 355))
        | (1ULL << (MySQLParser::LEAVES - 355))
        | (1ULL << (MySQLParser::LESS - 355))
        | (1ULL << (MySQLParser::LEVEL - 355))
        | (1ULL << (MySQLParser::LIST - 355))
        | (1ULL << (MySQLParser::LOCAL - 355))
        | (1ULL << (MySQLParser::LOGFILE - 355))
        | (1ULL << (MySQLParser::LOGS - 355))
        | (1ULL << (MySQLParser::MASTER - 355))
        | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 355))
        | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 355))
        | (1ULL << (MySQLParser::MASTER_DELAY - 355))
        | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 355))
        | (1ULL << (MySQLParser::MASTER_HOST - 355))
        | (1ULL << (MySQLParser::MASTER_LOG_FILE - 355))
        | (1ULL << (MySQLParser::MASTER_LOG_POS - 355))
        | (1ULL << (MySQLParser::MASTER_PASSWORD - 355))
        | (1ULL << (MySQLParser::MASTER_PORT - 355))
        | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 355))
        | (1ULL << (MySQLParser::MASTER_SSL - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CA - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CERT - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CRL - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 355))
        | (1ULL << (MySQLParser::MASTER_SSL_KEY - 355))
        | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 355))
        | (1ULL << (MySQLParser::MASTER_USER - 355))
        | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 355))
        | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 355))
        | (1ULL << (MySQLParser::MAX_ROWS - 355))
        | (1ULL << (MySQLParser::MAX_SIZE - 355))
        | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 355))
        | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 355))
        | (1ULL << (MySQLParser::MEDIUM - 355))
        | (1ULL << (MySQLParser::MERGE - 355))
        | (1ULL << (MySQLParser::MID - 355))
        | (1ULL << (MySQLParser::MIGRATE - 355))
        | (1ULL << (MySQLParser::MIN_ROWS - 355))
        | (1ULL << (MySQLParser::MODE - 355))
        | (1ULL << (MySQLParser::MODIFY - 355))
        | (1ULL << (MySQLParser::MUTEX - 355))
        | (1ULL << (MySQLParser::MYSQL - 355))
        | (1ULL << (MySQLParser::NAME - 355))
        | (1ULL << (MySQLParser::NAMES - 355)))) != 0) || ((((_la - 419) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 419)) & ((1ULL << (MySQLParser::NCHAR - 419))
        | (1ULL << (MySQLParser::NEVER - 419))
        | (1ULL << (MySQLParser::NEXT - 419))
        | (1ULL << (MySQLParser::NO - 419))
        | (1ULL << (MySQLParser::NODEGROUP - 419))
        | (1ULL << (MySQLParser::NONE - 419))
        | (1ULL << (MySQLParser::OFFLINE - 419))
        | (1ULL << (MySQLParser::OFFSET - 419))
        | (1ULL << (MySQLParser::OJ - 419))
        | (1ULL << (MySQLParser::OLD_PASSWORD - 419))
        | (1ULL << (MySQLParser::ONE - 419))
        | (1ULL << (MySQLParser::ONLINE - 419))
        | (1ULL << (MySQLParser::ONLY - 419))
        | (1ULL << (MySQLParser::OPEN - 419))
        | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 419))
        | (1ULL << (MySQLParser::OPTIONS - 419))
        | (1ULL << (MySQLParser::OWNER - 419))
        | (1ULL << (MySQLParser::PACK_KEYS - 419))
        | (1ULL << (MySQLParser::PAGE - 419))
        | (1ULL << (MySQLParser::PARSER - 419))
        | (1ULL << (MySQLParser::PARTIAL - 419))
        | (1ULL << (MySQLParser::PARTITIONING - 419))
        | (1ULL << (MySQLParser::PARTITIONS - 419))
        | (1ULL << (MySQLParser::PASSWORD - 419))
        | (1ULL << (MySQLParser::PHASE - 419))
        | (1ULL << (MySQLParser::PLUGIN - 419))
        | (1ULL << (MySQLParser::PLUGIN_DIR - 419))
        | (1ULL << (MySQLParser::PLUGINS - 419))
        | (1ULL << (MySQLParser::PORT - 419))
        | (1ULL << (MySQLParser::PRECEDES - 419))
        | (1ULL << (MySQLParser::PREPARE - 419))
        | (1ULL << (MySQLParser::PRESERVE - 419))
        | (1ULL << (MySQLParser::PREV - 419))
        | (1ULL << (MySQLParser::PROCESSLIST - 419))
        | (1ULL << (MySQLParser::PROFILE - 419))
        | (1ULL << (MySQLParser::PROFILES - 419))
        | (1ULL << (MySQLParser::PROXY - 419))
        | (1ULL << (MySQLParser::QUERY - 419))
        | (1ULL << (MySQLParser::QUICK - 419))
        | (1ULL << (MySQLParser::REBUILD - 419))
        | (1ULL << (MySQLParser::RECOVER - 419))
        | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 419))
        | (1ULL << (MySQLParser::REDUNDANT - 419))
        | (1ULL << (MySQLParser::RELAY - 419))
        | (1ULL << (MySQLParser::RELAY_LOG_FILE - 419))
        | (1ULL << (MySQLParser::RELAY_LOG_POS - 419))
        | (1ULL << (MySQLParser::RELAYLOG - 419))
        | (1ULL << (MySQLParser::REMOVE - 419))
        | (1ULL << (MySQLParser::REORGANIZE - 419))
        | (1ULL << (MySQLParser::REPAIR - 419))
        | (1ULL << (MySQLParser::REPLICATE_DO_DB - 419))
        | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 419))
        | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 419))
        | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 419))
        | (1ULL << (MySQLParser::REPLICATION - 419))
        | (1ULL << (MySQLParser::RESET - 419))
        | (1ULL << (MySQLParser::RESUME - 419))
        | (1ULL << (MySQLParser::RETURNS - 419))
        | (1ULL << (MySQLParser::ROLLBACK - 419))
        | (1ULL << (MySQLParser::ROLLUP - 419))
        | (1ULL << (MySQLParser::ROTATE - 419)))) != 0) || ((((_la - 483) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 483)) & ((1ULL << (MySQLParser::ROW - 483))
        | (1ULL << (MySQLParser::ROWS - 483))
        | (1ULL << (MySQLParser::ROW_FORMAT - 483))
        | (1ULL << (MySQLParser::SAVEPOINT - 483))
        | (1ULL << (MySQLParser::SCHEDULE - 483))
        | (1ULL << (MySQLParser::SECURITY - 483))
        | (1ULL << (MySQLParser::SERVER - 483))
        | (1ULL << (MySQLParser::SESSION - 483))
        | (1ULL << (MySQLParser::SHARE - 483))
        | (1ULL << (MySQLParser::SHARED - 483))
        | (1ULL << (MySQLParser::SIGNED - 483))
        | (1ULL << (MySQLParser::SIMPLE - 483))
        | (1ULL << (MySQLParser::SLAVE - 483))
        | (1ULL << (MySQLParser::SLOW - 483))
        | (1ULL << (MySQLParser::SNAPSHOT - 483))
        | (1ULL << (MySQLParser::SOCKET - 483))
        | (1ULL << (MySQLParser::SOME - 483))
        | (1ULL << (MySQLParser::SONAME - 483))
        | (1ULL << (MySQLParser::SOUNDS - 483))
        | (1ULL << (MySQLParser::SOURCE - 483))
        | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 483))
        | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 483))
        | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 483))
        | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 483))
        | (1ULL << (MySQLParser::SQL_CACHE - 483))
        | (1ULL << (MySQLParser::SQL_NO_CACHE - 483))
        | (1ULL << (MySQLParser::SQL_THREAD - 483))
        | (1ULL << (MySQLParser::START - 483))
        | (1ULL << (MySQLParser::STARTS - 483))
        | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 483))
        | (1ULL << (MySQLParser::STATS_PERSISTENT - 483))
        | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 483))
        | (1ULL << (MySQLParser::STATUS - 483))
        | (1ULL << (MySQLParser::STOP - 483))
        | (1ULL << (MySQLParser::STORAGE - 483))
        | (1ULL << (MySQLParser::STRING - 483))
        | (1ULL << (MySQLParser::SUBJECT - 483))
        | (1ULL << (MySQLParser::SUBPARTITION - 483))
        | (1ULL << (MySQLParser::SUBPARTITIONS - 483))
        | (1ULL << (MySQLParser::SUSPEND - 483))
        | (1ULL << (MySQLParser::SWAPS - 483))
        | (1ULL << (MySQLParser::SWITCHES - 483))
        | (1ULL << (MySQLParser::TABLESPACE - 483))
        | (1ULL << (MySQLParser::TEMPORARY - 483))
        | (1ULL << (MySQLParser::TEMPTABLE - 483))
        | (1ULL << (MySQLParser::THAN - 483))
        | (1ULL << (MySQLParser::TRADITIONAL - 483))
        | (1ULL << (MySQLParser::TRANSACTION - 483))
        | (1ULL << (MySQLParser::TRIGGERS - 483))
        | (1ULL << (MySQLParser::TRUNCATE - 483))
        | (1ULL << (MySQLParser::UNDEFINED - 483))
        | (1ULL << (MySQLParser::UNDOFILE - 483))
        | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 483))
        | (1ULL << (MySQLParser::UNINSTALL - 483))
        | (1ULL << (MySQLParser::UNKNOWN - 483))
        | (1ULL << (MySQLParser::UNTIL - 483))
        | (1ULL << (MySQLParser::UPGRADE - 483))
        | (1ULL << (MySQLParser::USER - 483))
        | (1ULL << (MySQLParser::USE_FRM - 483))
        | (1ULL << (MySQLParser::USER_RESOURCES - 483))
        | (1ULL << (MySQLParser::VALIDATION - 483))
        | (1ULL << (MySQLParser::VALUE - 483))
        | (1ULL << (MySQLParser::VARIABLES - 483)))) != 0) || ((((_la - 547) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 547)) & ((1ULL << (MySQLParser::VIEW - 547))
        | (1ULL << (MySQLParser::VISIBLE - 547))
        | (1ULL << (MySQLParser::WAIT - 547))
        | (1ULL << (MySQLParser::WARNINGS - 547))
        | (1ULL << (MySQLParser::WITHOUT - 547))
        | (1ULL << (MySQLParser::WORK - 547))
        | (1ULL << (MySQLParser::WRAPPER - 547))
        | (1ULL << (MySQLParser::X509 - 547))
        | (1ULL << (MySQLParser::XA - 547))
        | (1ULL << (MySQLParser::XML - 547))
        | (1ULL << (MySQLParser::INTERNAL - 547))
        | (1ULL << (MySQLParser::QUARTER - 547))
        | (1ULL << (MySQLParser::MONTH - 547))
        | (1ULL << (MySQLParser::DAY - 547))
        | (1ULL << (MySQLParser::HOUR - 547))
        | (1ULL << (MySQLParser::MINUTE - 547))
        | (1ULL << (MySQLParser::WEEK - 547))
        | (1ULL << (MySQLParser::SECOND - 547))
        | (1ULL << (MySQLParser::MICROSECOND - 547))
        | (1ULL << (MySQLParser::TABLES - 547))
        | (1ULL << (MySQLParser::ROUTINE - 547))
        | (1ULL << (MySQLParser::EXECUTE - 547))
        | (1ULL << (MySQLParser::FILE - 547))
        | (1ULL << (MySQLParser::PROCESS - 547))
        | (1ULL << (MySQLParser::RELOAD - 547))
        | (1ULL << (MySQLParser::SHUTDOWN - 547))
        | (1ULL << (MySQLParser::SUPER - 547))
        | (1ULL << (MySQLParser::PRIVILEGES - 547))
        | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 547))
        | (1ULL << (MySQLParser::ARMSCII8 - 547))
        | (1ULL << (MySQLParser::ASCII - 547))
        | (1ULL << (MySQLParser::BIG5 - 547))
        | (1ULL << (MySQLParser::CP1250 - 547))
        | (1ULL << (MySQLParser::CP1251 - 547))
        | (1ULL << (MySQLParser::CP1256 - 547))
        | (1ULL << (MySQLParser::CP1257 - 547))
        | (1ULL << (MySQLParser::CP850 - 547))
        | (1ULL << (MySQLParser::CP852 - 547))
        | (1ULL << (MySQLParser::CP866 - 547))
        | (1ULL << (MySQLParser::CP932 - 547))
        | (1ULL << (MySQLParser::DEC8 - 547))
        | (1ULL << (MySQLParser::EUCJPMS - 547))
        | (1ULL << (MySQLParser::EUCKR - 547))
        | (1ULL << (MySQLParser::GB2312 - 547))
        | (1ULL << (MySQLParser::GBK - 547))
        | (1ULL << (MySQLParser::GEOSTD8 - 547))
        | (1ULL << (MySQLParser::GREEK - 547))
        | (1ULL << (MySQLParser::HEBREW - 547))
        | (1ULL << (MySQLParser::HP8 - 547))
        | (1ULL << (MySQLParser::KEYBCS2 - 547))
        | (1ULL << (MySQLParser::KOI8R - 547))
        | (1ULL << (MySQLParser::KOI8U - 547))
        | (1ULL << (MySQLParser::LATIN1 - 547))
        | (1ULL << (MySQLParser::LATIN2 - 547))
        | (1ULL << (MySQLParser::LATIN5 - 547))
        | (1ULL << (MySQLParser::LATIN7 - 547))
        | (1ULL << (MySQLParser::MACCE - 547))
        | (1ULL << (MySQLParser::MACROMAN - 547))
        | (1ULL << (MySQLParser::SJIS - 547)))) != 0) || ((((_la - 611) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 611)) & ((1ULL << (MySQLParser::SWE7 - 611))
        | (1ULL << (MySQLParser::TIS620 - 611))
        | (1ULL << (MySQLParser::UCS2 - 611))
        | (1ULL << (MySQLParser::UJIS - 611))
        | (1ULL << (MySQLParser::UTF16 - 611))
        | (1ULL << (MySQLParser::UTF16LE - 611))
        | (1ULL << (MySQLParser::UTF32 - 611))
        | (1ULL << (MySQLParser::UTF8 - 611))
        | (1ULL << (MySQLParser::UTF8MB3 - 611))
        | (1ULL << (MySQLParser::UTF8MB4 - 611))
        | (1ULL << (MySQLParser::ARCHIVE - 611))
        | (1ULL << (MySQLParser::BLACKHOLE - 611))
        | (1ULL << (MySQLParser::CSV - 611))
        | (1ULL << (MySQLParser::FEDERATED - 611))
        | (1ULL << (MySQLParser::INNODB - 611))
        | (1ULL << (MySQLParser::MEMORY - 611))
        | (1ULL << (MySQLParser::MRG_MYISAM - 611))
        | (1ULL << (MySQLParser::MYISAM - 611))
        | (1ULL << (MySQLParser::NDB - 611))
        | (1ULL << (MySQLParser::NDBCLUSTER - 611))
        | (1ULL << (MySQLParser::PERFORMANCE_SCHEMA - 611))
        | (1ULL << (MySQLParser::TOKUDB - 611))
        | (1ULL << (MySQLParser::REPEATABLE - 611))
        | (1ULL << (MySQLParser::COMMITTED - 611))
        | (1ULL << (MySQLParser::UNCOMMITTED - 611))
        | (1ULL << (MySQLParser::SERIALIZABLE - 611))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTION - 611))
        | (1ULL << (MySQLParser::LINESTRING - 611))
        | (1ULL << (MySQLParser::MULTILINESTRING - 611))
        | (1ULL << (MySQLParser::MULTIPOINT - 611))
        | (1ULL << (MySQLParser::MULTIPOLYGON - 611))
        | (1ULL << (MySQLParser::POINT - 611))
        | (1ULL << (MySQLParser::POLYGON - 611))
        | (1ULL << (MySQLParser::ABS - 611))
        | (1ULL << (MySQLParser::ACOS - 611))
        | (1ULL << (MySQLParser::ADDDATE - 611))
        | (1ULL << (MySQLParser::ADDTIME - 611))
        | (1ULL << (MySQLParser::AES_DECRYPT - 611))
        | (1ULL << (MySQLParser::AES_ENCRYPT - 611))
        | (1ULL << (MySQLParser::AREA - 611))
        | (1ULL << (MySQLParser::ASBINARY - 611))
        | (1ULL << (MySQLParser::ASIN - 611))
        | (1ULL << (MySQLParser::ASTEXT - 611))
        | (1ULL << (MySQLParser::ASWKB - 611))
        | (1ULL << (MySQLParser::ASWKT - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 611))
        | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 611))
        | (1ULL << (MySQLParser::ATAN - 611))
        | (1ULL << (MySQLParser::ATAN2 - 611))
        | (1ULL << (MySQLParser::BENCHMARK - 611))
        | (1ULL << (MySQLParser::BIN - 611))
        | (1ULL << (MySQLParser::BIT_COUNT - 611))
        | (1ULL << (MySQLParser::BIT_LENGTH - 611))
        | (1ULL << (MySQLParser::BUFFER - 611))
        | (1ULL << (MySQLParser::CEIL - 611))
        | (1ULL << (MySQLParser::CEILING - 611))
        | (1ULL << (MySQLParser::CENTROID - 611))
        | (1ULL << (MySQLParser::CHARACTER_LENGTH - 611))
        | (1ULL << (MySQLParser::CHARSET - 611)))) != 0) || ((((_la - 675) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 675)) & ((1ULL << (MySQLParser::CHAR_LENGTH - 675))
        | (1ULL << (MySQLParser::COERCIBILITY - 675))
        | (1ULL << (MySQLParser::COLLATION - 675))
        | (1ULL << (MySQLParser::COMPRESS - 675))
        | (1ULL << (MySQLParser::CONCAT - 675))
        | (1ULL << (MySQLParser::CONCAT_WS - 675))
        | (1ULL << (MySQLParser::CONNECTION_ID - 675))
        | (1ULL << (MySQLParser::CONV - 675))
        | (1ULL << (MySQLParser::CONVERT_TZ - 675))
        | (1ULL << (MySQLParser::COS - 675))
        | (1ULL << (MySQLParser::COT - 675))
        | (1ULL << (MySQLParser::CRC32 - 675))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 675))
        | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 675))
        | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 675))
        | (1ULL << (MySQLParser::CREATE_DIGEST - 675))
        | (1ULL << (MySQLParser::CROSSES - 675))
        | (1ULL << (MySQLParser::DATEDIFF - 675))
        | (1ULL << (MySQLParser::DATE_FORMAT - 675))
        | (1ULL << (MySQLParser::DAYNAME - 675))
        | (1ULL << (MySQLParser::DAYOFMONTH - 675))
        | (1ULL << (MySQLParser::DAYOFWEEK - 675))
        | (1ULL << (MySQLParser::DAYOFYEAR - 675))
        | (1ULL << (MySQLParser::DECODE - 675))
        | (1ULL << (MySQLParser::DEGREES - 675))
        | (1ULL << (MySQLParser::DES_DECRYPT - 675))
        | (1ULL << (MySQLParser::DES_ENCRYPT - 675))
        | (1ULL << (MySQLParser::DIMENSION - 675))
        | (1ULL << (MySQLParser::DISJOINT - 675))
        | (1ULL << (MySQLParser::ELT - 675))
        | (1ULL << (MySQLParser::ENCODE - 675))
        | (1ULL << (MySQLParser::ENCRYPT - 675))
        | (1ULL << (MySQLParser::ENDPOINT - 675))
        | (1ULL << (MySQLParser::ENVELOPE - 675))
        | (1ULL << (MySQLParser::EQUALS - 675))
        | (1ULL << (MySQLParser::EXP - 675))
        | (1ULL << (MySQLParser::EXPORT_SET - 675))
        | (1ULL << (MySQLParser::EXTERIORRING - 675))
        | (1ULL << (MySQLParser::EXTRACTVALUE - 675))
        | (1ULL << (MySQLParser::FIELD - 675))
        | (1ULL << (MySQLParser::FIND_IN_SET - 675))
        | (1ULL << (MySQLParser::FLOOR - 675))
        | (1ULL << (MySQLParser::FORMAT - 675))
        | (1ULL << (MySQLParser::FOUND_ROWS - 675))
        | (1ULL << (MySQLParser::FROM_BASE64 - 675))
        | (1ULL << (MySQLParser::FROM_DAYS - 675))
        | (1ULL << (MySQLParser::FROM_UNIXTIME - 675))
        | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 675))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 675))
        | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 675))
        | (1ULL << (MySQLParser::GEOMETRYN - 675))
        | (1ULL << (MySQLParser::GEOMETRYTYPE - 675))
        | (1ULL << (MySQLParser::GEOMFROMTEXT - 675))
        | (1ULL << (MySQLParser::GEOMFROMWKB - 675))
        | (1ULL << (MySQLParser::GET_FORMAT - 675))
        | (1ULL << (MySQLParser::GET_LOCK - 675))
        | (1ULL << (MySQLParser::GLENGTH - 675))
        | (1ULL << (MySQLParser::GREATEST - 675))
        | (1ULL << (MySQLParser::GTID_SUBSET - 675))
        | (1ULL << (MySQLParser::GTID_SUBTRACT - 675))
        | (1ULL << (MySQLParser::HEX - 675)))) != 0) || ((((_la - 739) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 739)) & ((1ULL << (MySQLParser::IFNULL - 739))
        | (1ULL << (MySQLParser::INET6_ATON - 739))
        | (1ULL << (MySQLParser::INET6_NTOA - 739))
        | (1ULL << (MySQLParser::INET_ATON - 739))
        | (1ULL << (MySQLParser::INET_NTOA - 739))
        | (1ULL << (MySQLParser::INSTR - 739))
        | (1ULL << (MySQLParser::INTERIORRINGN - 739))
        | (1ULL << (MySQLParser::INTERSECTS - 739))
        | (1ULL << (MySQLParser::ISCLOSED - 739))
        | (1ULL << (MySQLParser::ISEMPTY - 739))
        | (1ULL << (MySQLParser::ISNULL - 739))
        | (1ULL << (MySQLParser::ISSIMPLE - 739))
        | (1ULL << (MySQLParser::IS_FREE_LOCK - 739))
        | (1ULL << (MySQLParser::IS_IPV4 - 739))
        | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 739))
        | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 739))
        | (1ULL << (MySQLParser::IS_IPV6 - 739))
        | (1ULL << (MySQLParser::IS_USED_LOCK - 739))
        | (1ULL << (MySQLParser::LAST_INSERT_ID - 739))
        | (1ULL << (MySQLParser::LCASE - 739))
        | (1ULL << (MySQLParser::LEAST - 739))
        | (1ULL << (MySQLParser::LENGTH - 739))
        | (1ULL << (MySQLParser::LINEFROMTEXT - 739))
        | (1ULL << (MySQLParser::LINEFROMWKB - 739))
        | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 739))
        | (1ULL << (MySQLParser::LINESTRINGFROMWKB - 739))
        | (1ULL << (MySQLParser::LN - 739))
        | (1ULL << (MySQLParser::LOAD_FILE - 739))
        | (1ULL << (MySQLParser::LOCATE - 739))
        | (1ULL << (MySQLParser::LOG - 739))
        | (1ULL << (MySQLParser::LOG10 - 739))
        | (1ULL << (MySQLParser::LOG2 - 739))
        | (1ULL << (MySQLParser::LOWER - 739))
        | (1ULL << (MySQLParser::LPAD - 739))
        | (1ULL << (MySQLParser::LTRIM - 739))
        | (1ULL << (MySQLParser::MAKEDATE - 739))
        | (1ULL << (MySQLParser::MAKETIME - 739))
        | (1ULL << (MySQLParser::MAKE_SET - 739))
        | (1ULL << (MySQLParser::MASTER_POS_WAIT - 739))
        | (1ULL << (MySQLParser::MBRCONTAINS - 739))
        | (1ULL << (MySQLParser::MBRDISJOINT - 739))
        | (1ULL << (MySQLParser::MBREQUAL - 739))
        | (1ULL << (MySQLParser::MBRINTERSECTS - 739))
        | (1ULL << (MySQLParser::MBROVERLAPS - 739))
        | (1ULL << (MySQLParser::MBRTOUCHES - 739))
        | (1ULL << (MySQLParser::MBRWITHIN - 739))
        | (1ULL << (MySQLParser::MD5 - 739))
        | (1ULL << (MySQLParser::MLINEFROMTEXT - 739))
        | (1ULL << (MySQLParser::MLINEFROMWKB - 739))
        | (1ULL << (MySQLParser::MONTHNAME - 739))
        | (1ULL << (MySQLParser::MPOINTFROMTEXT - 739))
        | (1ULL << (MySQLParser::MPOINTFROMWKB - 739))
        | (1ULL << (MySQLParser::MPOLYFROMTEXT - 739))
        | (1ULL << (MySQLParser::MPOLYFROMWKB - 739))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 739))
        | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 739))
        | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 739))
        | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 739))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 739))
        | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 739))
        | (1ULL << (MySQLParser::NAME_CONST - 739))
        | (1ULL << (MySQLParser::NULLIF - 739))
        | (1ULL << (MySQLParser::NUMGEOMETRIES - 739))
        | (1ULL << (MySQLParser::NUMINTERIORRINGS - 739)))) != 0) || ((((_la - 803) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 803)) & ((1ULL << (MySQLParser::NUMPOINTS - 803))
        | (1ULL << (MySQLParser::OCT - 803))
        | (1ULL << (MySQLParser::OCTET_LENGTH - 803))
        | (1ULL << (MySQLParser::ORD - 803))
        | (1ULL << (MySQLParser::OVERLAPS - 803))
        | (1ULL << (MySQLParser::PERIOD_ADD - 803))
        | (1ULL << (MySQLParser::PERIOD_DIFF - 803))
        | (1ULL << (MySQLParser::PI - 803))
        | (1ULL << (MySQLParser::POINTFROMTEXT - 803))
        | (1ULL << (MySQLParser::POINTFROMWKB - 803))
        | (1ULL << (MySQLParser::POINTN - 803))
        | (1ULL << (MySQLParser::POLYFROMTEXT - 803))
        | (1ULL << (MySQLParser::POLYFROMWKB - 803))
        | (1ULL << (MySQLParser::POLYGONFROMTEXT - 803))
        | (1ULL << (MySQLParser::POLYGONFROMWKB - 803))
        | (1ULL << (MySQLParser::POW - 803))
        | (1ULL << (MySQLParser::POWER - 803))
        | (1ULL << (MySQLParser::QUOTE - 803))
        | (1ULL << (MySQLParser::RADIANS - 803))
        | (1ULL << (MySQLParser::RAND - 803))
        | (1ULL << (MySQLParser::RANDOM_BYTES - 803))
        | (1ULL << (MySQLParser::RELEASE_LOCK - 803))
        | (1ULL << (MySQLParser::REVERSE - 803))
        | (1ULL << (MySQLParser::ROUND - 803))
        | (1ULL << (MySQLParser::ROW_COUNT - 803))
        | (1ULL << (MySQLParser::RPAD - 803))
        | (1ULL << (MySQLParser::RTRIM - 803))
        | (1ULL << (MySQLParser::SEC_TO_TIME - 803))
        | (1ULL << (MySQLParser::SESSION_USER - 803))
        | (1ULL << (MySQLParser::SHA - 803))
        | (1ULL << (MySQLParser::SHA1 - 803))
        | (1ULL << (MySQLParser::SHA2 - 803))
        | (1ULL << (MySQLParser::SIGN - 803))
        | (1ULL << (MySQLParser::SIN - 803))
        | (1ULL << (MySQLParser::SLEEP - 803))
        | (1ULL << (MySQLParser::SOUNDEX - 803))
        | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 803))
        | (1ULL << (MySQLParser::SQRT - 803))
        | (1ULL << (MySQLParser::SRID - 803))
        | (1ULL << (MySQLParser::STARTPOINT - 803))
        | (1ULL << (MySQLParser::STRCMP - 803))
        | (1ULL << (MySQLParser::STR_TO_DATE - 803))
        | (1ULL << (MySQLParser::ST_AREA - 803))
        | (1ULL << (MySQLParser::ST_ASBINARY - 803))
        | (1ULL << (MySQLParser::ST_ASTEXT - 803))
        | (1ULL << (MySQLParser::ST_ASWKB - 803))
        | (1ULL << (MySQLParser::ST_ASWKT - 803))
        | (1ULL << (MySQLParser::ST_BUFFER - 803))
        | (1ULL << (MySQLParser::ST_CENTROID - 803))
        | (1ULL << (MySQLParser::ST_CONTAINS - 803))
        | (1ULL << (MySQLParser::ST_CROSSES - 803))
        | (1ULL << (MySQLParser::ST_DIFFERENCE - 803))
        | (1ULL << (MySQLParser::ST_DIMENSION - 803))
        | (1ULL << (MySQLParser::ST_DISJOINT - 803))
        | (1ULL << (MySQLParser::ST_DISTANCE - 803))
        | (1ULL << (MySQLParser::ST_ENDPOINT - 803))
        | (1ULL << (MySQLParser::ST_ENVELOPE - 803))
        | (1ULL << (MySQLParser::ST_EQUALS - 803))
        | (1ULL << (MySQLParser::ST_EXTERIORRING - 803))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 803))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 803))
        | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 803))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 803))
        | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 803)))) != 0) || ((((_la - 867) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 867)) & ((1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_GEOMETRYN - 867))
        | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 867))
        | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_INTERIORRINGN - 867))
        | (1ULL << (MySQLParser::ST_INTERSECTION - 867))
        | (1ULL << (MySQLParser::ST_INTERSECTS - 867))
        | (1ULL << (MySQLParser::ST_ISCLOSED - 867))
        | (1ULL << (MySQLParser::ST_ISEMPTY - 867))
        | (1ULL << (MySQLParser::ST_ISSIMPLE - 867))
        | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_LINEFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 867))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 867))
        | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 867))
        | (1ULL << (MySQLParser::ST_NUMPOINTS - 867))
        | (1ULL << (MySQLParser::ST_OVERLAPS - 867))
        | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_POINTFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_POINTN - 867))
        | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_POLYFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 867))
        | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 867))
        | (1ULL << (MySQLParser::ST_SRID - 867))
        | (1ULL << (MySQLParser::ST_STARTPOINT - 867))
        | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 867))
        | (1ULL << (MySQLParser::ST_TOUCHES - 867))
        | (1ULL << (MySQLParser::ST_UNION - 867))
        | (1ULL << (MySQLParser::ST_WITHIN - 867))
        | (1ULL << (MySQLParser::ST_X - 867))
        | (1ULL << (MySQLParser::ST_Y - 867))
        | (1ULL << (MySQLParser::SUBDATE - 867))
        | (1ULL << (MySQLParser::SUBSTRING_INDEX - 867))
        | (1ULL << (MySQLParser::SUBTIME - 867))
        | (1ULL << (MySQLParser::SYSTEM_USER - 867))
        | (1ULL << (MySQLParser::TAN - 867))
        | (1ULL << (MySQLParser::TIMEDIFF - 867))
        | (1ULL << (MySQLParser::TIMESTAMPADD - 867))
        | (1ULL << (MySQLParser::TIMESTAMPDIFF - 867))
        | (1ULL << (MySQLParser::TIME_FORMAT - 867))
        | (1ULL << (MySQLParser::TIME_TO_SEC - 867))
        | (1ULL << (MySQLParser::TOUCHES - 867))
        | (1ULL << (MySQLParser::TO_BASE64 - 867))
        | (1ULL << (MySQLParser::TO_DAYS - 867))
        | (1ULL << (MySQLParser::TO_SECONDS - 867))
        | (1ULL << (MySQLParser::UCASE - 867))
        | (1ULL << (MySQLParser::UNCOMPRESS - 867))
        | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 867))
        | (1ULL << (MySQLParser::UNHEX - 867))
        | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 867))
        | (1ULL << (MySQLParser::UPDATEXML - 867))
        | (1ULL << (MySQLParser::UPPER - 867))
        | (1ULL << (MySQLParser::UUID - 867))
        | (1ULL << (MySQLParser::UUID_SHORT - 867))
        | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 867))
        | (1ULL << (MySQLParser::VERSION - 867))
        | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 867))
        | (1ULL << (MySQLParser::WEEKDAY - 867))
        | (1ULL << (MySQLParser::WEEKOFYEAR - 867)))) != 0) || ((((_la - 931) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 931)) & ((1ULL << (MySQLParser::WEIGHT_STRING - 931))
        | (1ULL << (MySQLParser::WITHIN - 931))
        | (1ULL << (MySQLParser::YEARWEEK - 931))
        | (1ULL << (MySQLParser::Y_FUNCTION - 931))
        | (1ULL << (MySQLParser::X_FUNCTION - 931))
        | (1ULL << (MySQLParser::PLUS - 931))
        | (1ULL << (MySQLParser::MINUS - 931))
        | (1ULL << (MySQLParser::EXCLAMATION_SYMBOL - 931))
        | (1ULL << (MySQLParser::BIT_NOT_OP - 931))
        | (1ULL << (MySQLParser::LR_BRACKET - 931))
        | (1ULL << (MySQLParser::ZERO_DECIMAL - 931))
        | (1ULL << (MySQLParser::ONE_DECIMAL - 931))
        | (1ULL << (MySQLParser::TWO_DECIMAL - 931))
        | (1ULL << (MySQLParser::CHARSET_REVERSE_QOUTE_STRING - 931))
        | (1ULL << (MySQLParser::START_NATIONAL_STRING_LITERAL - 931))
        | (1ULL << (MySQLParser::STRING_LITERAL - 931))
        | (1ULL << (MySQLParser::DECIMAL_LITERAL - 931))
        | (1ULL << (MySQLParser::HEXADECIMAL_LITERAL - 931))
        | (1ULL << (MySQLParser::REAL_LITERAL - 931))
        | (1ULL << (MySQLParser::NULL_SPEC_LITERAL - 931))
        | (1ULL << (MySQLParser::BIT_STRING - 931))
        | (1ULL << (MySQLParser::STRING_CHARSET_NAME - 931))
        | (1ULL << (MySQLParser::PLACEHOLDER_VALUE - 931))
        | (1ULL << (MySQLParser::ID - 931))
        | (1ULL << (MySQLParser::REVERSE_QUOTE_ID - 931))
        | (1ULL << (MySQLParser::LOCAL_ID - 931))
        | (1ULL << (MySQLParser::GLOBAL_ID - 931)))) != 0)) {
        setState(5686);
        functionArgs();
      }
      setState(5689);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySQLParser::PasswordFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5691);
      passwordFunctionClause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecificFunctionContext ------------------------------------------------------------------

MySQLParser::SpecificFunctionContext::SpecificFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::SpecificFunctionContext::getRuleIndex() const {
  return MySQLParser::RuleSpecificFunction;
}

void MySQLParser::SpecificFunctionContext::copyFrom(SpecificFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PositionFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::PositionFunctionCallContext::POSITION() {
  return getToken(MySQLParser::POSITION, 0);
}

tree::TerminalNode* MySQLParser::PositionFunctionCallContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

std::vector<MySQLParser::StringLiteralContext *> MySQLParser::PositionFunctionCallContext::stringLiteral() {
  return getRuleContexts<MySQLParser::StringLiteralContext>();
}

MySQLParser::StringLiteralContext* MySQLParser::PositionFunctionCallContext::stringLiteral(size_t i) {
  return getRuleContext<MySQLParser::StringLiteralContext>(i);
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::PositionFunctionCallContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::PositionFunctionCallContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}

MySQLParser::PositionFunctionCallContext::PositionFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::PositionFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositionFunctionCall(this);
}
void MySQLParser::PositionFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositionFunctionCall(this);
}

antlrcpp::Any MySQLParser::PositionFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPositionFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TrimFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::TrimFunctionCallContext::TRIM() {
  return getToken(MySQLParser::TRIM, 0);
}

tree::TerminalNode* MySQLParser::TrimFunctionCallContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

tree::TerminalNode* MySQLParser::TrimFunctionCallContext::BOTH() {
  return getToken(MySQLParser::BOTH, 0);
}

tree::TerminalNode* MySQLParser::TrimFunctionCallContext::LEADING() {
  return getToken(MySQLParser::LEADING, 0);
}

tree::TerminalNode* MySQLParser::TrimFunctionCallContext::TRAILING() {
  return getToken(MySQLParser::TRAILING, 0);
}

std::vector<MySQLParser::StringLiteralContext *> MySQLParser::TrimFunctionCallContext::stringLiteral() {
  return getRuleContexts<MySQLParser::StringLiteralContext>();
}

MySQLParser::StringLiteralContext* MySQLParser::TrimFunctionCallContext::stringLiteral(size_t i) {
  return getRuleContext<MySQLParser::StringLiteralContext>(i);
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::TrimFunctionCallContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::TrimFunctionCallContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}

MySQLParser::TrimFunctionCallContext::TrimFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::TrimFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrimFunctionCall(this);
}
void MySQLParser::TrimFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrimFunctionCall(this);
}

antlrcpp::Any MySQLParser::TrimFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTrimFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SimpleFunctionCallContext::CURRENT_DATE() {
  return getToken(MySQLParser::CURRENT_DATE, 0);
}

tree::TerminalNode* MySQLParser::SimpleFunctionCallContext::CURRENT_TIME() {
  return getToken(MySQLParser::CURRENT_TIME, 0);
}

tree::TerminalNode* MySQLParser::SimpleFunctionCallContext::CURRENT_TIMESTAMP() {
  return getToken(MySQLParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::SimpleFunctionCallContext::CURRENT_USER() {
  return getToken(MySQLParser::CURRENT_USER, 0);
}

tree::TerminalNode* MySQLParser::SimpleFunctionCallContext::LOCALTIME() {
  return getToken(MySQLParser::LOCALTIME, 0);
}

MySQLParser::SimpleFunctionCallContext::SimpleFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SimpleFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleFunctionCall(this);
}
void MySQLParser::SimpleFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleFunctionCall(this);
}

antlrcpp::Any MySQLParser::SimpleFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CharFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CharFunctionCallContext::CHAR() {
  return getToken(MySQLParser::CHAR, 0);
}

MySQLParser::FunctionArgsContext* MySQLParser::CharFunctionCallContext::functionArgs() {
  return getRuleContext<MySQLParser::FunctionArgsContext>(0);
}

tree::TerminalNode* MySQLParser::CharFunctionCallContext::USING() {
  return getToken(MySQLParser::USING, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::CharFunctionCallContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

MySQLParser::CharFunctionCallContext::CharFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::CharFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharFunctionCall(this);
}
void MySQLParser::CharFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharFunctionCall(this);
}

antlrcpp::Any MySQLParser::CharFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCharFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WeightFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::WeightFunctionCallContext::WEIGHT_STRING() {
  return getToken(MySQLParser::WEIGHT_STRING, 0);
}

MySQLParser::StringLiteralContext* MySQLParser::WeightFunctionCallContext::stringLiteral() {
  return getRuleContext<MySQLParser::StringLiteralContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::WeightFunctionCallContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::WeightFunctionCallContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::DecimalLiteralContext* MySQLParser::WeightFunctionCallContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

MySQLParser::LevelsInWeightStringContext* MySQLParser::WeightFunctionCallContext::levelsInWeightString() {
  return getRuleContext<MySQLParser::LevelsInWeightStringContext>(0);
}

tree::TerminalNode* MySQLParser::WeightFunctionCallContext::CHAR() {
  return getToken(MySQLParser::CHAR, 0);
}

tree::TerminalNode* MySQLParser::WeightFunctionCallContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

MySQLParser::WeightFunctionCallContext::WeightFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::WeightFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWeightFunctionCall(this);
}
void MySQLParser::WeightFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWeightFunctionCall(this);
}

antlrcpp::Any MySQLParser::WeightFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitWeightFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GetFormatFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::GetFormatFunctionCallContext::GET_FORMAT() {
  return getToken(MySQLParser::GET_FORMAT, 0);
}

MySQLParser::StringLiteralContext* MySQLParser::GetFormatFunctionCallContext::stringLiteral() {
  return getRuleContext<MySQLParser::StringLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::GetFormatFunctionCallContext::DATE() {
  return getToken(MySQLParser::DATE, 0);
}

tree::TerminalNode* MySQLParser::GetFormatFunctionCallContext::TIME() {
  return getToken(MySQLParser::TIME, 0);
}

tree::TerminalNode* MySQLParser::GetFormatFunctionCallContext::DATETIME() {
  return getToken(MySQLParser::DATETIME, 0);
}

MySQLParser::GetFormatFunctionCallContext::GetFormatFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::GetFormatFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetFormatFunctionCall(this);
}
void MySQLParser::GetFormatFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetFormatFunctionCall(this);
}

antlrcpp::Any MySQLParser::GetFormatFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitGetFormatFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CaseFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::CaseFunctionCallContext::CASE() {
  return getToken(MySQLParser::CASE, 0);
}

MySQLParser::ExpressionContext* MySQLParser::CaseFunctionCallContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

tree::TerminalNode* MySQLParser::CaseFunctionCallContext::END() {
  return getToken(MySQLParser::END, 0);
}

std::vector<MySQLParser::CaseFuncAlternativeContext *> MySQLParser::CaseFunctionCallContext::caseFuncAlternative() {
  return getRuleContexts<MySQLParser::CaseFuncAlternativeContext>();
}

MySQLParser::CaseFuncAlternativeContext* MySQLParser::CaseFunctionCallContext::caseFuncAlternative(size_t i) {
  return getRuleContext<MySQLParser::CaseFuncAlternativeContext>(i);
}

tree::TerminalNode* MySQLParser::CaseFunctionCallContext::ELSE() {
  return getToken(MySQLParser::ELSE, 0);
}

MySQLParser::FunctionArgContext* MySQLParser::CaseFunctionCallContext::functionArg() {
  return getRuleContext<MySQLParser::FunctionArgContext>(0);
}

MySQLParser::CaseFunctionCallContext::CaseFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::CaseFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseFunctionCall(this);
}
void MySQLParser::CaseFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseFunctionCall(this);
}

antlrcpp::Any MySQLParser::CaseFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCaseFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExtractFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ExtractFunctionCallContext::EXTRACT() {
  return getToken(MySQLParser::EXTRACT, 0);
}

MySQLParser::IntervalTypeContext* MySQLParser::ExtractFunctionCallContext::intervalType() {
  return getRuleContext<MySQLParser::IntervalTypeContext>(0);
}

tree::TerminalNode* MySQLParser::ExtractFunctionCallContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

MySQLParser::StringLiteralContext* MySQLParser::ExtractFunctionCallContext::stringLiteral() {
  return getRuleContext<MySQLParser::StringLiteralContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::ExtractFunctionCallContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

MySQLParser::ExtractFunctionCallContext::ExtractFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::ExtractFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtractFunctionCall(this);
}
void MySQLParser::ExtractFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtractFunctionCall(this);
}

antlrcpp::Any MySQLParser::ExtractFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitExtractFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DataTypeFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::DataTypeFunctionCallContext::CONVERT() {
  return getToken(MySQLParser::CONVERT, 0);
}

MySQLParser::ExpressionContext* MySQLParser::DataTypeFunctionCallContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}

MySQLParser::ConvertedDataTypeContext* MySQLParser::DataTypeFunctionCallContext::convertedDataType() {
  return getRuleContext<MySQLParser::ConvertedDataTypeContext>(0);
}

tree::TerminalNode* MySQLParser::DataTypeFunctionCallContext::USING() {
  return getToken(MySQLParser::USING, 0);
}

MySQLParser::CharsetNameContext* MySQLParser::DataTypeFunctionCallContext::charsetName() {
  return getRuleContext<MySQLParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySQLParser::DataTypeFunctionCallContext::CAST() {
  return getToken(MySQLParser::CAST, 0);
}

tree::TerminalNode* MySQLParser::DataTypeFunctionCallContext::AS() {
  return getToken(MySQLParser::AS, 0);
}

MySQLParser::DataTypeFunctionCallContext::DataTypeFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::DataTypeFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataTypeFunctionCall(this);
}
void MySQLParser::DataTypeFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataTypeFunctionCall(this);
}

antlrcpp::Any MySQLParser::DataTypeFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDataTypeFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ValuesFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::ValuesFunctionCallContext::VALUES() {
  return getToken(MySQLParser::VALUES, 0);
}

MySQLParser::FullColumnNameContext* MySQLParser::ValuesFunctionCallContext::fullColumnName() {
  return getRuleContext<MySQLParser::FullColumnNameContext>(0);
}

MySQLParser::ValuesFunctionCallContext::ValuesFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::ValuesFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValuesFunctionCall(this);
}
void MySQLParser::ValuesFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValuesFunctionCall(this);
}

antlrcpp::Any MySQLParser::ValuesFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitValuesFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubstrFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::SubstrFunctionCallContext::FROM() {
  return getToken(MySQLParser::FROM, 0);
}

tree::TerminalNode* MySQLParser::SubstrFunctionCallContext::SUBSTR() {
  return getToken(MySQLParser::SUBSTR, 0);
}

tree::TerminalNode* MySQLParser::SubstrFunctionCallContext::SUBSTRING() {
  return getToken(MySQLParser::SUBSTRING, 0);
}

MySQLParser::StringLiteralContext* MySQLParser::SubstrFunctionCallContext::stringLiteral() {
  return getRuleContext<MySQLParser::StringLiteralContext>(0);
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::SubstrFunctionCallContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::SubstrFunctionCallContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::SubstrFunctionCallContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::SubstrFunctionCallContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySQLParser::SubstrFunctionCallContext::FOR() {
  return getToken(MySQLParser::FOR, 0);
}

MySQLParser::SubstrFunctionCallContext::SubstrFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }

void MySQLParser::SubstrFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstrFunctionCall(this);
}
void MySQLParser::SubstrFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstrFunctionCall(this);
}

antlrcpp::Any MySQLParser::SubstrFunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitSubstrFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::SpecificFunctionContext* MySQLParser::specificFunction() {
  SpecificFunctionContext *_localctx = _tracker.createInstance<SpecificFunctionContext>(_ctx, getState());
  enterRule(_localctx, 582, MySQLParser::RuleSpecificFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5851);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 862, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::SimpleFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5694);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::CURRENT_USER || ((((_la - 233) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 233)) & ((1ULL << (MySQLParser::CURRENT_DATE - 233))
        | (1ULL << (MySQLParser::CURRENT_TIME - 233))
        | (1ULL << (MySQLParser::CURRENT_TIMESTAMP - 233))
        | (1ULL << (MySQLParser::LOCALTIME - 233)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::DataTypeFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5695);
      match(MySQLParser::CONVERT);
      setState(5696);
      match(MySQLParser::LR_BRACKET);
      setState(5697);
      expression(0);
      setState(5698);
      dynamic_cast<DataTypeFunctionCallContext *>(_localctx)->separator = match(MySQLParser::COMMA);
      setState(5699);
      convertedDataType();
      setState(5700);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::DataTypeFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5702);
      match(MySQLParser::CONVERT);
      setState(5703);
      match(MySQLParser::LR_BRACKET);
      setState(5704);
      expression(0);
      setState(5705);
      match(MySQLParser::USING);
      setState(5706);
      charsetName();
      setState(5707);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::DataTypeFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5709);
      match(MySQLParser::CAST);
      setState(5710);
      match(MySQLParser::LR_BRACKET);
      setState(5711);
      expression(0);
      setState(5712);
      match(MySQLParser::AS);
      setState(5713);
      convertedDataType();
      setState(5714);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::ValuesFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5716);
      match(MySQLParser::VALUES);
      setState(5717);
      match(MySQLParser::LR_BRACKET);
      setState(5718);
      fullColumnName();
      setState(5719);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::CaseFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(5721);
      match(MySQLParser::CASE);
      setState(5722);
      expression(0);
      setState(5724); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(5723);
        caseFuncAlternative();
        setState(5726); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySQLParser::WHEN);
      setState(5730);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ELSE) {
        setState(5728);
        match(MySQLParser::ELSE);
        setState(5729);
        dynamic_cast<CaseFunctionCallContext *>(_localctx)->elseArg = functionArg();
      }
      setState(5732);
      match(MySQLParser::END);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::CaseFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(5734);
      match(MySQLParser::CASE);
      setState(5736); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(5735);
        caseFuncAlternative();
        setState(5738); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySQLParser::WHEN);
      setState(5742);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ELSE) {
        setState(5740);
        match(MySQLParser::ELSE);
        setState(5741);
        dynamic_cast<CaseFunctionCallContext *>(_localctx)->elseArg = functionArg();
      }
      setState(5744);
      match(MySQLParser::END);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::CharFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(5746);
      match(MySQLParser::CHAR);
      setState(5747);
      match(MySQLParser::LR_BRACKET);
      setState(5748);
      functionArgs();
      setState(5751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::USING) {
        setState(5749);
        match(MySQLParser::USING);
        setState(5750);
        charsetName();
      }
      setState(5753);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 9: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::PositionFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(5755);
      match(MySQLParser::POSITION);
      setState(5756);
      match(MySQLParser::LR_BRACKET);
      setState(5759);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 848, _ctx)) {
      case 1: {
        setState(5757);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->positionString = stringLiteral();
        break;
      }

      case 2: {
        setState(5758);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->positionExpression = expression(0);
        break;
      }

      }
      setState(5761);
      match(MySQLParser::IN);
      setState(5764);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 849, _ctx)) {
      case 1: {
        setState(5762);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->inString = stringLiteral();
        break;
      }

      case 2: {
        setState(5763);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->inExpression = expression(0);
        break;
      }

      }
      setState(5766);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::SubstrFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(5768);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::SUBSTR

      || _la == MySQLParser::SUBSTRING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5769);
      match(MySQLParser::LR_BRACKET);
      setState(5772);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 850, _ctx)) {
      case 1: {
        setState(5770);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(5771);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(5774);
      match(MySQLParser::FROM);
      setState(5777);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 851, _ctx)) {
      case 1: {
        setState(5775);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->fromDecimal = decimalLiteral();
        break;
      }

      case 2: {
        setState(5776);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->fromExpression = expression(0);
        break;
      }

      }
      setState(5784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::FOR) {
        setState(5779);
        match(MySQLParser::FOR);
        setState(5782);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 852, _ctx)) {
        case 1: {
          setState(5780);
          dynamic_cast<SubstrFunctionCallContext *>(_localctx)->forDecimal = decimalLiteral();
          break;
        }

        case 2: {
          setState(5781);
          dynamic_cast<SubstrFunctionCallContext *>(_localctx)->forExpression = expression(0);
          break;
        }

        }
      }
      setState(5786);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::TrimFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(5788);
      match(MySQLParser::TRIM);
      setState(5789);
      match(MySQLParser::LR_BRACKET);
      setState(5790);
      dynamic_cast<TrimFunctionCallContext *>(_localctx)->positioinForm = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::BOTH || _la == MySQLParser::LEADING || _la == MySQLParser::TRAILING)) {
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->positioinForm = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5793);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 854, _ctx)) {
      case 1: {
        setState(5791);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(5792);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(5795);
      match(MySQLParser::FROM);
      setState(5798);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 855, _ctx)) {
      case 1: {
        setState(5796);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromString = stringLiteral();
        break;
      }

      case 2: {
        setState(5797);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromExpression = expression(0);
        break;
      }

      }
      setState(5800);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 12: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::TrimFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(5802);
      match(MySQLParser::TRIM);
      setState(5803);
      match(MySQLParser::LR_BRACKET);
      setState(5806);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 856, _ctx)) {
      case 1: {
        setState(5804);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(5805);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(5808);
      match(MySQLParser::FROM);
      setState(5811);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 857, _ctx)) {
      case 1: {
        setState(5809);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromString = stringLiteral();
        break;
      }

      case 2: {
        setState(5810);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromExpression = expression(0);
        break;
      }

      }
      setState(5813);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::WeightFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(5815);
      match(MySQLParser::WEIGHT_STRING);
      setState(5816);
      match(MySQLParser::LR_BRACKET);
      setState(5819);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 858, _ctx)) {
      case 1: {
        setState(5817);
        stringLiteral();
        break;
      }

      case 2: {
        setState(5818);
        expression(0);
        break;
      }

      }
      setState(5827);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::AS) {
        setState(5821);
        match(MySQLParser::AS);
        setState(5822);
        dynamic_cast<WeightFunctionCallContext *>(_localctx)->stringFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::CHAR

        || _la == MySQLParser::BINARY)) {
          dynamic_cast<WeightFunctionCallContext *>(_localctx)->stringFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5823);
        match(MySQLParser::LR_BRACKET);
        setState(5824);
        decimalLiteral();
        setState(5825);
        match(MySQLParser::RR_BRACKET);
      }
      setState(5830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::LEVEL) {
        setState(5829);
        levelsInWeightString();
      }
      setState(5832);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::ExtractFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(5834);
      match(MySQLParser::EXTRACT);
      setState(5835);
      match(MySQLParser::LR_BRACKET);
      setState(5836);
      intervalType();
      setState(5837);
      match(MySQLParser::FROM);
      setState(5840);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 861, _ctx)) {
      case 1: {
        setState(5838);
        dynamic_cast<ExtractFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(5839);
        dynamic_cast<ExtractFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(5842);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 15: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySQLParser::GetFormatFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(5844);
      match(MySQLParser::GET_FORMAT);
      setState(5845);
      match(MySQLParser::LR_BRACKET);
      setState(5846);
      dynamic_cast<GetFormatFunctionCallContext *>(_localctx)->datetimeFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 184) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
        | (1ULL << (MySQLParser::TIME - 184))
        | (1ULL << (MySQLParser::DATETIME - 184)))) != 0))) {
        dynamic_cast<GetFormatFunctionCallContext *>(_localctx)->datetimeFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5847);
      match(MySQLParser::COMMA);
      setState(5848);
      stringLiteral();
      setState(5849);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseFuncAlternativeContext ------------------------------------------------------------------

MySQLParser::CaseFuncAlternativeContext::CaseFuncAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CaseFuncAlternativeContext::WHEN() {
  return getToken(MySQLParser::WHEN, 0);
}

tree::TerminalNode* MySQLParser::CaseFuncAlternativeContext::THEN() {
  return getToken(MySQLParser::THEN, 0);
}

std::vector<MySQLParser::FunctionArgContext *> MySQLParser::CaseFuncAlternativeContext::functionArg() {
  return getRuleContexts<MySQLParser::FunctionArgContext>();
}

MySQLParser::FunctionArgContext* MySQLParser::CaseFuncAlternativeContext::functionArg(size_t i) {
  return getRuleContext<MySQLParser::FunctionArgContext>(i);
}


size_t MySQLParser::CaseFuncAlternativeContext::getRuleIndex() const {
  return MySQLParser::RuleCaseFuncAlternative;
}

void MySQLParser::CaseFuncAlternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseFuncAlternative(this);
}

void MySQLParser::CaseFuncAlternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseFuncAlternative(this);
}


antlrcpp::Any MySQLParser::CaseFuncAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCaseFuncAlternative(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CaseFuncAlternativeContext* MySQLParser::caseFuncAlternative() {
  CaseFuncAlternativeContext *_localctx = _tracker.createInstance<CaseFuncAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 584, MySQLParser::RuleCaseFuncAlternative);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5853);
    match(MySQLParser::WHEN);
    setState(5854);
    dynamic_cast<CaseFuncAlternativeContext *>(_localctx)->condition = functionArg();
    setState(5855);
    match(MySQLParser::THEN);
    setState(5856);
    dynamic_cast<CaseFuncAlternativeContext *>(_localctx)->consequent = functionArg();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LevelsInWeightStringContext ------------------------------------------------------------------

MySQLParser::LevelsInWeightStringContext::LevelsInWeightStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::LevelsInWeightStringContext::getRuleIndex() const {
  return MySQLParser::RuleLevelsInWeightString;
}

void MySQLParser::LevelsInWeightStringContext::copyFrom(LevelsInWeightStringContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LevelWeightRangeContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::LevelWeightRangeContext::LEVEL() {
  return getToken(MySQLParser::LEVEL, 0);
}

std::vector<MySQLParser::DecimalLiteralContext *> MySQLParser::LevelWeightRangeContext::decimalLiteral() {
  return getRuleContexts<MySQLParser::DecimalLiteralContext>();
}

MySQLParser::DecimalLiteralContext* MySQLParser::LevelWeightRangeContext::decimalLiteral(size_t i) {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(i);
}

MySQLParser::LevelWeightRangeContext::LevelWeightRangeContext(LevelsInWeightStringContext *ctx) { copyFrom(ctx); }

void MySQLParser::LevelWeightRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevelWeightRange(this);
}
void MySQLParser::LevelWeightRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevelWeightRange(this);
}

antlrcpp::Any MySQLParser::LevelWeightRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLevelWeightRange(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LevelWeightListContext ------------------------------------------------------------------

tree::TerminalNode* MySQLParser::LevelWeightListContext::LEVEL() {
  return getToken(MySQLParser::LEVEL, 0);
}

std::vector<MySQLParser::LevelInWeightListElementContext *> MySQLParser::LevelWeightListContext::levelInWeightListElement() {
  return getRuleContexts<MySQLParser::LevelInWeightListElementContext>();
}

MySQLParser::LevelInWeightListElementContext* MySQLParser::LevelWeightListContext::levelInWeightListElement(size_t i) {
  return getRuleContext<MySQLParser::LevelInWeightListElementContext>(i);
}

MySQLParser::LevelWeightListContext::LevelWeightListContext(LevelsInWeightStringContext *ctx) { copyFrom(ctx); }

void MySQLParser::LevelWeightListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevelWeightList(this);
}
void MySQLParser::LevelWeightListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevelWeightList(this);
}

antlrcpp::Any MySQLParser::LevelWeightListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLevelWeightList(this);
  else
    return visitor->visitChildren(this);
}
MySQLParser::LevelsInWeightStringContext* MySQLParser::levelsInWeightString() {
  LevelsInWeightStringContext *_localctx = _tracker.createInstance<LevelsInWeightStringContext>(_ctx, getState());
  enterRule(_localctx, 586, MySQLParser::RuleLevelsInWeightString);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5872);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 864, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<LevelsInWeightStringContext *>(_tracker.createInstance<MySQLParser::LevelWeightListContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5858);
      match(MySQLParser::LEVEL);
      setState(5859);
      levelInWeightListElement();
      setState(5864);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(5860);
        match(MySQLParser::COMMA);
        setState(5861);
        levelInWeightListElement();
        setState(5866);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<LevelsInWeightStringContext *>(_tracker.createInstance<MySQLParser::LevelWeightRangeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5867);
      match(MySQLParser::LEVEL);
      setState(5868);
      dynamic_cast<LevelWeightRangeContext *>(_localctx)->firstLevel = decimalLiteral();
      setState(5869);
      match(MySQLParser::MINUS);
      setState(5870);
      dynamic_cast<LevelWeightRangeContext *>(_localctx)->lastLevel = decimalLiteral();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LevelInWeightListElementContext ------------------------------------------------------------------

MySQLParser::LevelInWeightListElementContext::LevelInWeightListElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::DecimalLiteralContext* MySQLParser::LevelInWeightListElementContext::decimalLiteral() {
  return getRuleContext<MySQLParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySQLParser::LevelInWeightListElementContext::ASC() {
  return getToken(MySQLParser::ASC, 0);
}

tree::TerminalNode* MySQLParser::LevelInWeightListElementContext::DESC() {
  return getToken(MySQLParser::DESC, 0);
}

tree::TerminalNode* MySQLParser::LevelInWeightListElementContext::REVERSE() {
  return getToken(MySQLParser::REVERSE, 0);
}


size_t MySQLParser::LevelInWeightListElementContext::getRuleIndex() const {
  return MySQLParser::RuleLevelInWeightListElement;
}

void MySQLParser::LevelInWeightListElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevelInWeightListElement(this);
}

void MySQLParser::LevelInWeightListElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevelInWeightListElement(this);
}


antlrcpp::Any MySQLParser::LevelInWeightListElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLevelInWeightListElement(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LevelInWeightListElementContext* MySQLParser::levelInWeightListElement() {
  LevelInWeightListElementContext *_localctx = _tracker.createInstance<LevelInWeightListElementContext>(_ctx, getState());
  enterRule(_localctx, 588, MySQLParser::RuleLevelInWeightListElement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5874);
    decimalLiteral();
    setState(5876);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySQLParser::ASC

    || _la == MySQLParser::DESC || _la == MySQLParser::REVERSE) {
      setState(5875);
      dynamic_cast<LevelInWeightListElementContext *>(_localctx)->orderType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::ASC

      || _la == MySQLParser::DESC || _la == MySQLParser::REVERSE)) {
        dynamic_cast<LevelInWeightListElementContext *>(_localctx)->orderType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateWindowedFunctionContext ------------------------------------------------------------------

MySQLParser::AggregateWindowedFunctionContext::AggregateWindowedFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::FunctionArgContext* MySQLParser::AggregateWindowedFunctionContext::functionArg() {
  return getRuleContext<MySQLParser::FunctionArgContext>(0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::AVG() {
  return getToken(MySQLParser::AVG, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::MAX() {
  return getToken(MySQLParser::MAX, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::MIN() {
  return getToken(MySQLParser::MIN, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::SUM() {
  return getToken(MySQLParser::SUM, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::DISTINCT() {
  return getToken(MySQLParser::DISTINCT, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::COUNT() {
  return getToken(MySQLParser::COUNT, 0);
}

MySQLParser::FunctionArgsContext* MySQLParser::AggregateWindowedFunctionContext::functionArgs() {
  return getRuleContext<MySQLParser::FunctionArgsContext>(0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::BIT_AND() {
  return getToken(MySQLParser::BIT_AND, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::BIT_OR() {
  return getToken(MySQLParser::BIT_OR, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::BIT_XOR() {
  return getToken(MySQLParser::BIT_XOR, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::STD() {
  return getToken(MySQLParser::STD, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::STDDEV() {
  return getToken(MySQLParser::STDDEV, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::STDDEV_POP() {
  return getToken(MySQLParser::STDDEV_POP, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::STDDEV_SAMP() {
  return getToken(MySQLParser::STDDEV_SAMP, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::VAR_POP() {
  return getToken(MySQLParser::VAR_POP, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::VAR_SAMP() {
  return getToken(MySQLParser::VAR_SAMP, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::VARIANCE() {
  return getToken(MySQLParser::VARIANCE, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::GROUP_CONCAT() {
  return getToken(MySQLParser::GROUP_CONCAT, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::ORDER() {
  return getToken(MySQLParser::ORDER, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::BY() {
  return getToken(MySQLParser::BY, 0);
}

std::vector<MySQLParser::OrderByExpressionContext *> MySQLParser::AggregateWindowedFunctionContext::orderByExpression() {
  return getRuleContexts<MySQLParser::OrderByExpressionContext>();
}

MySQLParser::OrderByExpressionContext* MySQLParser::AggregateWindowedFunctionContext::orderByExpression(size_t i) {
  return getRuleContext<MySQLParser::OrderByExpressionContext>(i);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::SEPARATOR() {
  return getToken(MySQLParser::SEPARATOR, 0);
}

tree::TerminalNode* MySQLParser::AggregateWindowedFunctionContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::AggregateWindowedFunctionContext::getRuleIndex() const {
  return MySQLParser::RuleAggregateWindowedFunction;
}

void MySQLParser::AggregateWindowedFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregateWindowedFunction(this);
}

void MySQLParser::AggregateWindowedFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregateWindowedFunction(this);
}


antlrcpp::Any MySQLParser::AggregateWindowedFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitAggregateWindowedFunction(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::AggregateWindowedFunctionContext* MySQLParser::aggregateWindowedFunction() {
  AggregateWindowedFunctionContext *_localctx = _tracker.createInstance<AggregateWindowedFunctionContext>(_ctx, getState());
  enterRule(_localctx, 590, MySQLParser::RuleAggregateWindowedFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5934);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 874, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5878);
      _la = _input->LA(1);
      if (!(((((_la - 217) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 217)) & ((1ULL << (MySQLParser::AVG - 217))
        | (1ULL << (MySQLParser::MAX - 217))
        | (1ULL << (MySQLParser::MIN - 217))
        | (1ULL << (MySQLParser::SUM - 217)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5879);
      match(MySQLParser::LR_BRACKET);
      setState(5881);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ALL

      || _la == MySQLParser::DISTINCT) {
        setState(5880);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySQLParser::ALL

        || _la == MySQLParser::DISTINCT)) {
          dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5883);
      functionArg();
      setState(5884);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5886);
      match(MySQLParser::COUNT);
      setState(5887);
      match(MySQLParser::LR_BRACKET);
      setState(5893);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySQLParser::STAR: {
          setState(5888);
          dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->starArg = match(MySQLParser::STAR);
          break;
        }

        case MySQLParser::ALL:
        case MySQLParser::CASE:
        case MySQLParser::CAST:
        case MySQLParser::CONVERT:
        case MySQLParser::CURRENT_USER:
        case MySQLParser::DATABASE:
        case MySQLParser::EXISTS:
        case MySQLParser::FALSE:
        case MySQLParser::IF:
        case MySQLParser::INSERT:
        case MySQLParser::INTERVAL:
        case MySQLParser::NOT:
        case MySQLParser::NULL_LITERAL:
        case MySQLParser::REPLACE:
        case MySQLParser::TRUE:
        case MySQLParser::VALUES:
        case MySQLParser::DATE:
        case MySQLParser::TIME:
        case MySQLParser::TIMESTAMP:
        case MySQLParser::DATETIME:
        case MySQLParser::YEAR:
        case MySQLParser::CHAR:
        case MySQLParser::BINARY:
        case MySQLParser::TEXT:
        case MySQLParser::ENUM:
        case MySQLParser::SERIAL:
        case MySQLParser::AVG:
        case MySQLParser::BIT_AND:
        case MySQLParser::BIT_OR:
        case MySQLParser::BIT_XOR:
        case MySQLParser::COUNT:
        case MySQLParser::GROUP_CONCAT:
        case MySQLParser::MAX:
        case MySQLParser::MIN:
        case MySQLParser::STD:
        case MySQLParser::STDDEV:
        case MySQLParser::STDDEV_POP:
        case MySQLParser::STDDEV_SAMP:
        case MySQLParser::SUM:
        case MySQLParser::VAR_POP:
        case MySQLParser::VAR_SAMP:
        case MySQLParser::VARIANCE:
        case MySQLParser::CURRENT_DATE:
        case MySQLParser::CURRENT_TIME:
        case MySQLParser::CURRENT_TIMESTAMP:
        case MySQLParser::LOCALTIME:
        case MySQLParser::CURDATE:
        case MySQLParser::CURTIME:
        case MySQLParser::DATE_ADD:
        case MySQLParser::DATE_SUB:
        case MySQLParser::EXTRACT:
        case MySQLParser::LOCALTIMESTAMP:
        case MySQLParser::NOW:
        case MySQLParser::POSITION:
        case MySQLParser::SUBSTR:
        case MySQLParser::SUBSTRING:
        case MySQLParser::SYSDATE:
        case MySQLParser::TRIM:
        case MySQLParser::UTC_DATE:
        case MySQLParser::UTC_TIME:
        case MySQLParser::UTC_TIMESTAMP:
        case MySQLParser::ACCOUNT:
        case MySQLParser::ACTION:
        case MySQLParser::AFTER:
        case MySQLParser::AGGREGATE:
        case MySQLParser::ALGORITHM:
        case MySQLParser::ANY:
        case MySQLParser::AT:
        case MySQLParser::AUTHORS:
        case MySQLParser::AUTOCOMMIT:
        case MySQLParser::AUTOEXTEND_SIZE:
        case MySQLParser::AUTO_INCREMENT:
        case MySQLParser::AVG_ROW_LENGTH:
        case MySQLParser::BEGIN:
        case MySQLParser::BINLOG:
        case MySQLParser::BIT:
        case MySQLParser::BLOCK:
        case MySQLParser::BOOL:
        case MySQLParser::BOOLEAN:
        case MySQLParser::BTREE:
        case MySQLParser::CACHE:
        case MySQLParser::CASCADED:
        case MySQLParser::CHAIN:
        case MySQLParser::CHANGED:
        case MySQLParser::CHANNEL:
        case MySQLParser::CHECKSUM:
        case MySQLParser::PAGE_CHECKSUM:
        case MySQLParser::CIPHER:
        case MySQLParser::CLIENT:
        case MySQLParser::CLOSE:
        case MySQLParser::COALESCE:
        case MySQLParser::CODE:
        case MySQLParser::COLUMNS:
        case MySQLParser::COLUMN_FORMAT:
        case MySQLParser::COMMENT:
        case MySQLParser::COMMIT:
        case MySQLParser::COMPACT:
        case MySQLParser::COMPLETION:
        case MySQLParser::COMPRESSED:
        case MySQLParser::COMPRESSION:
        case MySQLParser::CONCURRENT:
        case MySQLParser::CONNECTION:
        case MySQLParser::CONSISTENT:
        case MySQLParser::CONTAINS:
        case MySQLParser::CONTEXT:
        case MySQLParser::CONTRIBUTORS:
        case MySQLParser::COPY:
        case MySQLParser::CPU:
        case MySQLParser::DATA:
        case MySQLParser::DATAFILE:
        case MySQLParser::DEALLOCATE:
        case MySQLParser::DEFAULT_AUTH:
        case MySQLParser::DEFINER:
        case MySQLParser::DELAY_KEY_WRITE:
        case MySQLParser::DES_KEY_FILE:
        case MySQLParser::DIRECTORY:
        case MySQLParser::DISABLE:
        case MySQLParser::DISCARD:
        case MySQLParser::DISK:
        case MySQLParser::DO:
        case MySQLParser::DUMPFILE:
        case MySQLParser::DUPLICATE:
        case MySQLParser::DYNAMIC:
        case MySQLParser::ENABLE:
        case MySQLParser::ENCRYPTION:
        case MySQLParser::END:
        case MySQLParser::ENDS:
        case MySQLParser::ENGINE:
        case MySQLParser::ENGINES:
        case MySQLParser::ERROR:
        case MySQLParser::ERRORS:
        case MySQLParser::ESCAPE:
        case MySQLParser::EVEN:
        case MySQLParser::EVENT:
        case MySQLParser::EVENTS:
        case MySQLParser::EVERY:
        case MySQLParser::EXCHANGE:
        case MySQLParser::EXCLUSIVE:
        case MySQLParser::EXPIRE:
        case MySQLParser::EXPORT:
        case MySQLParser::EXTENDED:
        case MySQLParser::EXTENT_SIZE:
        case MySQLParser::FAST:
        case MySQLParser::FAULTS:
        case MySQLParser::FIELDS:
        case MySQLParser::FILE_BLOCK_SIZE:
        case MySQLParser::FILTER:
        case MySQLParser::FIRST:
        case MySQLParser::FIXED:
        case MySQLParser::FLUSH:
        case MySQLParser::FOLLOWS:
        case MySQLParser::FOUND:
        case MySQLParser::FULL:
        case MySQLParser::FUNCTION:
        case MySQLParser::GENERAL:
        case MySQLParser::GLOBAL:
        case MySQLParser::GRANTS:
        case MySQLParser::GROUP_REPLICATION:
        case MySQLParser::HANDLER:
        case MySQLParser::HASH:
        case MySQLParser::HELP:
        case MySQLParser::HOST:
        case MySQLParser::HOSTS:
        case MySQLParser::IDENTIFIED:
        case MySQLParser::IGNORE_SERVER_IDS:
        case MySQLParser::IMPORT:
        case MySQLParser::INDEXES:
        case MySQLParser::INITIAL_SIZE:
        case MySQLParser::INPLACE:
        case MySQLParser::INSERT_METHOD:
        case MySQLParser::INSTALL:
        case MySQLParser::INSTANCE:
        case MySQLParser::INVISIBLE:
        case MySQLParser::INVOKER:
        case MySQLParser::IO:
        case MySQLParser::IO_THREAD:
        case MySQLParser::IPC:
        case MySQLParser::ISOLATION:
        case MySQLParser::ISSUER:
        case MySQLParser::JSON:
        case MySQLParser::KEY_BLOCK_SIZE:
        case MySQLParser::LANGUAGE:
        case MySQLParser::LAST:
        case MySQLParser::LEAVES:
        case MySQLParser::LESS:
        case MySQLParser::LEVEL:
        case MySQLParser::LIST:
        case MySQLParser::LOCAL:
        case MySQLParser::LOGFILE:
        case MySQLParser::LOGS:
        case MySQLParser::MASTER:
        case MySQLParser::MASTER_AUTO_POSITION:
        case MySQLParser::MASTER_CONNECT_RETRY:
        case MySQLParser::MASTER_DELAY:
        case MySQLParser::MASTER_HEARTBEAT_PERIOD:
        case MySQLParser::MASTER_HOST:
        case MySQLParser::MASTER_LOG_FILE:
        case MySQLParser::MASTER_LOG_POS:
        case MySQLParser::MASTER_PASSWORD:
        case MySQLParser::MASTER_PORT:
        case MySQLParser::MASTER_RETRY_COUNT:
        case MySQLParser::MASTER_SSL:
        case MySQLParser::MASTER_SSL_CA:
        case MySQLParser::MASTER_SSL_CAPATH:
        case MySQLParser::MASTER_SSL_CERT:
        case MySQLParser::MASTER_SSL_CIPHER:
        case MySQLParser::MASTER_SSL_CRL:
        case MySQLParser::MASTER_SSL_CRLPATH:
        case MySQLParser::MASTER_SSL_KEY:
        case MySQLParser::MASTER_TLS_VERSION:
        case MySQLParser::MASTER_USER:
        case MySQLParser::MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser::MAX_QUERIES_PER_HOUR:
        case MySQLParser::MAX_ROWS:
        case MySQLParser::MAX_SIZE:
        case MySQLParser::MAX_UPDATES_PER_HOUR:
        case MySQLParser::MAX_USER_CONNECTIONS:
        case MySQLParser::MEDIUM:
        case MySQLParser::MERGE:
        case MySQLParser::MID:
        case MySQLParser::MIGRATE:
        case MySQLParser::MIN_ROWS:
        case MySQLParser::MODE:
        case MySQLParser::MODIFY:
        case MySQLParser::MUTEX:
        case MySQLParser::MYSQL:
        case MySQLParser::NAME:
        case MySQLParser::NAMES:
        case MySQLParser::NCHAR:
        case MySQLParser::NEVER:
        case MySQLParser::NEXT:
        case MySQLParser::NO:
        case MySQLParser::NODEGROUP:
        case MySQLParser::NONE:
        case MySQLParser::OFFLINE:
        case MySQLParser::OFFSET:
        case MySQLParser::OJ:
        case MySQLParser::OLD_PASSWORD:
        case MySQLParser::ONE:
        case MySQLParser::ONLINE:
        case MySQLParser::ONLY:
        case MySQLParser::OPEN:
        case MySQLParser::OPTIMIZER_COSTS:
        case MySQLParser::OPTIONS:
        case MySQLParser::OWNER:
        case MySQLParser::PACK_KEYS:
        case MySQLParser::PAGE:
        case MySQLParser::PARSER:
        case MySQLParser::PARTIAL:
        case MySQLParser::PARTITIONING:
        case MySQLParser::PARTITIONS:
        case MySQLParser::PASSWORD:
        case MySQLParser::PHASE:
        case MySQLParser::PLUGIN:
        case MySQLParser::PLUGIN_DIR:
        case MySQLParser::PLUGINS:
        case MySQLParser::PORT:
        case MySQLParser::PRECEDES:
        case MySQLParser::PREPARE:
        case MySQLParser::PRESERVE:
        case MySQLParser::PREV:
        case MySQLParser::PROCESSLIST:
        case MySQLParser::PROFILE:
        case MySQLParser::PROFILES:
        case MySQLParser::PROXY:
        case MySQLParser::QUERY:
        case MySQLParser::QUICK:
        case MySQLParser::REBUILD:
        case MySQLParser::RECOVER:
        case MySQLParser::REDO_BUFFER_SIZE:
        case MySQLParser::REDUNDANT:
        case MySQLParser::RELAY:
        case MySQLParser::RELAY_LOG_FILE:
        case MySQLParser::RELAY_LOG_POS:
        case MySQLParser::RELAYLOG:
        case MySQLParser::REMOVE:
        case MySQLParser::REORGANIZE:
        case MySQLParser::REPAIR:
        case MySQLParser::REPLICATE_DO_DB:
        case MySQLParser::REPLICATE_DO_TABLE:
        case MySQLParser::REPLICATE_IGNORE_DB:
        case MySQLParser::REPLICATE_IGNORE_TABLE:
        case MySQLParser::REPLICATE_REWRITE_DB:
        case MySQLParser::REPLICATE_WILD_DO_TABLE:
        case MySQLParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser::REPLICATION:
        case MySQLParser::RESET:
        case MySQLParser::RESUME:
        case MySQLParser::RETURNS:
        case MySQLParser::ROLLBACK:
        case MySQLParser::ROLLUP:
        case MySQLParser::ROTATE:
        case MySQLParser::ROW:
        case MySQLParser::ROWS:
        case MySQLParser::ROW_FORMAT:
        case MySQLParser::SAVEPOINT:
        case MySQLParser::SCHEDULE:
        case MySQLParser::SECURITY:
        case MySQLParser::SERVER:
        case MySQLParser::SESSION:
        case MySQLParser::SHARE:
        case MySQLParser::SHARED:
        case MySQLParser::SIGNED:
        case MySQLParser::SIMPLE:
        case MySQLParser::SLAVE:
        case MySQLParser::SLOW:
        case MySQLParser::SNAPSHOT:
        case MySQLParser::SOCKET:
        case MySQLParser::SOME:
        case MySQLParser::SONAME:
        case MySQLParser::SOUNDS:
        case MySQLParser::SOURCE:
        case MySQLParser::SQL_AFTER_GTIDS:
        case MySQLParser::SQL_AFTER_MTS_GAPS:
        case MySQLParser::SQL_BEFORE_GTIDS:
        case MySQLParser::SQL_BUFFER_RESULT:
        case MySQLParser::SQL_CACHE:
        case MySQLParser::SQL_NO_CACHE:
        case MySQLParser::SQL_THREAD:
        case MySQLParser::START:
        case MySQLParser::STARTS:
        case MySQLParser::STATS_AUTO_RECALC:
        case MySQLParser::STATS_PERSISTENT:
        case MySQLParser::STATS_SAMPLE_PAGES:
        case MySQLParser::STATUS:
        case MySQLParser::STOP:
        case MySQLParser::STORAGE:
        case MySQLParser::STRING:
        case MySQLParser::SUBJECT:
        case MySQLParser::SUBPARTITION:
        case MySQLParser::SUBPARTITIONS:
        case MySQLParser::SUSPEND:
        case MySQLParser::SWAPS:
        case MySQLParser::SWITCHES:
        case MySQLParser::TABLESPACE:
        case MySQLParser::TEMPORARY:
        case MySQLParser::TEMPTABLE:
        case MySQLParser::THAN:
        case MySQLParser::TRADITIONAL:
        case MySQLParser::TRANSACTION:
        case MySQLParser::TRIGGERS:
        case MySQLParser::TRUNCATE:
        case MySQLParser::UNDEFINED:
        case MySQLParser::UNDOFILE:
        case MySQLParser::UNDO_BUFFER_SIZE:
        case MySQLParser::UNINSTALL:
        case MySQLParser::UNKNOWN:
        case MySQLParser::UNTIL:
        case MySQLParser::UPGRADE:
        case MySQLParser::USER:
        case MySQLParser::USE_FRM:
        case MySQLParser::USER_RESOURCES:
        case MySQLParser::VALIDATION:
        case MySQLParser::VALUE:
        case MySQLParser::VARIABLES:
        case MySQLParser::VIEW:
        case MySQLParser::VISIBLE:
        case MySQLParser::WAIT:
        case MySQLParser::WARNINGS:
        case MySQLParser::WITHOUT:
        case MySQLParser::WORK:
        case MySQLParser::WRAPPER:
        case MySQLParser::X509:
        case MySQLParser::XA:
        case MySQLParser::XML:
        case MySQLParser::INTERNAL:
        case MySQLParser::QUARTER:
        case MySQLParser::MONTH:
        case MySQLParser::DAY:
        case MySQLParser::HOUR:
        case MySQLParser::MINUTE:
        case MySQLParser::WEEK:
        case MySQLParser::SECOND:
        case MySQLParser::MICROSECOND:
        case MySQLParser::TABLES:
        case MySQLParser::ROUTINE:
        case MySQLParser::EXECUTE:
        case MySQLParser::FILE:
        case MySQLParser::PROCESS:
        case MySQLParser::RELOAD:
        case MySQLParser::SHUTDOWN:
        case MySQLParser::SUPER:
        case MySQLParser::PRIVILEGES:
        case MySQLParser::SESSION_VARIABLES_ADMIN:
        case MySQLParser::ARMSCII8:
        case MySQLParser::ASCII:
        case MySQLParser::BIG5:
        case MySQLParser::CP1250:
        case MySQLParser::CP1251:
        case MySQLParser::CP1256:
        case MySQLParser::CP1257:
        case MySQLParser::CP850:
        case MySQLParser::CP852:
        case MySQLParser::CP866:
        case MySQLParser::CP932:
        case MySQLParser::DEC8:
        case MySQLParser::EUCJPMS:
        case MySQLParser::EUCKR:
        case MySQLParser::GB2312:
        case MySQLParser::GBK:
        case MySQLParser::GEOSTD8:
        case MySQLParser::GREEK:
        case MySQLParser::HEBREW:
        case MySQLParser::HP8:
        case MySQLParser::KEYBCS2:
        case MySQLParser::KOI8R:
        case MySQLParser::KOI8U:
        case MySQLParser::LATIN1:
        case MySQLParser::LATIN2:
        case MySQLParser::LATIN5:
        case MySQLParser::LATIN7:
        case MySQLParser::MACCE:
        case MySQLParser::MACROMAN:
        case MySQLParser::SJIS:
        case MySQLParser::SWE7:
        case MySQLParser::TIS620:
        case MySQLParser::UCS2:
        case MySQLParser::UJIS:
        case MySQLParser::UTF16:
        case MySQLParser::UTF16LE:
        case MySQLParser::UTF32:
        case MySQLParser::UTF8:
        case MySQLParser::UTF8MB3:
        case MySQLParser::UTF8MB4:
        case MySQLParser::ARCHIVE:
        case MySQLParser::BLACKHOLE:
        case MySQLParser::CSV:
        case MySQLParser::FEDERATED:
        case MySQLParser::INNODB:
        case MySQLParser::MEMORY:
        case MySQLParser::MRG_MYISAM:
        case MySQLParser::MYISAM:
        case MySQLParser::NDB:
        case MySQLParser::NDBCLUSTER:
        case MySQLParser::PERFORMANCE_SCHEMA:
        case MySQLParser::TOKUDB:
        case MySQLParser::REPEATABLE:
        case MySQLParser::COMMITTED:
        case MySQLParser::UNCOMMITTED:
        case MySQLParser::SERIALIZABLE:
        case MySQLParser::GEOMETRYCOLLECTION:
        case MySQLParser::LINESTRING:
        case MySQLParser::MULTILINESTRING:
        case MySQLParser::MULTIPOINT:
        case MySQLParser::MULTIPOLYGON:
        case MySQLParser::POINT:
        case MySQLParser::POLYGON:
        case MySQLParser::ABS:
        case MySQLParser::ACOS:
        case MySQLParser::ADDDATE:
        case MySQLParser::ADDTIME:
        case MySQLParser::AES_DECRYPT:
        case MySQLParser::AES_ENCRYPT:
        case MySQLParser::AREA:
        case MySQLParser::ASBINARY:
        case MySQLParser::ASIN:
        case MySQLParser::ASTEXT:
        case MySQLParser::ASWKB:
        case MySQLParser::ASWKT:
        case MySQLParser::ASYMMETRIC_DECRYPT:
        case MySQLParser::ASYMMETRIC_DERIVE:
        case MySQLParser::ASYMMETRIC_ENCRYPT:
        case MySQLParser::ASYMMETRIC_SIGN:
        case MySQLParser::ASYMMETRIC_VERIFY:
        case MySQLParser::ATAN:
        case MySQLParser::ATAN2:
        case MySQLParser::BENCHMARK:
        case MySQLParser::BIN:
        case MySQLParser::BIT_COUNT:
        case MySQLParser::BIT_LENGTH:
        case MySQLParser::BUFFER:
        case MySQLParser::CEIL:
        case MySQLParser::CEILING:
        case MySQLParser::CENTROID:
        case MySQLParser::CHARACTER_LENGTH:
        case MySQLParser::CHARSET:
        case MySQLParser::CHAR_LENGTH:
        case MySQLParser::COERCIBILITY:
        case MySQLParser::COLLATION:
        case MySQLParser::COMPRESS:
        case MySQLParser::CONCAT:
        case MySQLParser::CONCAT_WS:
        case MySQLParser::CONNECTION_ID:
        case MySQLParser::CONV:
        case MySQLParser::CONVERT_TZ:
        case MySQLParser::COS:
        case MySQLParser::COT:
        case MySQLParser::CRC32:
        case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser::CREATE_DH_PARAMETERS:
        case MySQLParser::CREATE_DIGEST:
        case MySQLParser::CROSSES:
        case MySQLParser::DATEDIFF:
        case MySQLParser::DATE_FORMAT:
        case MySQLParser::DAYNAME:
        case MySQLParser::DAYOFMONTH:
        case MySQLParser::DAYOFWEEK:
        case MySQLParser::DAYOFYEAR:
        case MySQLParser::DECODE:
        case MySQLParser::DEGREES:
        case MySQLParser::DES_DECRYPT:
        case MySQLParser::DES_ENCRYPT:
        case MySQLParser::DIMENSION:
        case MySQLParser::DISJOINT:
        case MySQLParser::ELT:
        case MySQLParser::ENCODE:
        case MySQLParser::ENCRYPT:
        case MySQLParser::ENDPOINT:
        case MySQLParser::ENVELOPE:
        case MySQLParser::EQUALS:
        case MySQLParser::EXP:
        case MySQLParser::EXPORT_SET:
        case MySQLParser::EXTERIORRING:
        case MySQLParser::EXTRACTVALUE:
        case MySQLParser::FIELD:
        case MySQLParser::FIND_IN_SET:
        case MySQLParser::FLOOR:
        case MySQLParser::FORMAT:
        case MySQLParser::FOUND_ROWS:
        case MySQLParser::FROM_BASE64:
        case MySQLParser::FROM_DAYS:
        case MySQLParser::FROM_UNIXTIME:
        case MySQLParser::GEOMCOLLFROMTEXT:
        case MySQLParser::GEOMCOLLFROMWKB:
        case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::GEOMETRYFROMTEXT:
        case MySQLParser::GEOMETRYFROMWKB:
        case MySQLParser::GEOMETRYN:
        case MySQLParser::GEOMETRYTYPE:
        case MySQLParser::GEOMFROMTEXT:
        case MySQLParser::GEOMFROMWKB:
        case MySQLParser::GET_FORMAT:
        case MySQLParser::GET_LOCK:
        case MySQLParser::GLENGTH:
        case MySQLParser::GREATEST:
        case MySQLParser::GTID_SUBSET:
        case MySQLParser::GTID_SUBTRACT:
        case MySQLParser::HEX:
        case MySQLParser::IFNULL:
        case MySQLParser::INET6_ATON:
        case MySQLParser::INET6_NTOA:
        case MySQLParser::INET_ATON:
        case MySQLParser::INET_NTOA:
        case MySQLParser::INSTR:
        case MySQLParser::INTERIORRINGN:
        case MySQLParser::INTERSECTS:
        case MySQLParser::ISCLOSED:
        case MySQLParser::ISEMPTY:
        case MySQLParser::ISNULL:
        case MySQLParser::ISSIMPLE:
        case MySQLParser::IS_FREE_LOCK:
        case MySQLParser::IS_IPV4:
        case MySQLParser::IS_IPV4_COMPAT:
        case MySQLParser::IS_IPV4_MAPPED:
        case MySQLParser::IS_IPV6:
        case MySQLParser::IS_USED_LOCK:
        case MySQLParser::LAST_INSERT_ID:
        case MySQLParser::LCASE:
        case MySQLParser::LEAST:
        case MySQLParser::LENGTH:
        case MySQLParser::LINEFROMTEXT:
        case MySQLParser::LINEFROMWKB:
        case MySQLParser::LINESTRINGFROMTEXT:
        case MySQLParser::LINESTRINGFROMWKB:
        case MySQLParser::LN:
        case MySQLParser::LOAD_FILE:
        case MySQLParser::LOCATE:
        case MySQLParser::LOG:
        case MySQLParser::LOG10:
        case MySQLParser::LOG2:
        case MySQLParser::LOWER:
        case MySQLParser::LPAD:
        case MySQLParser::LTRIM:
        case MySQLParser::MAKEDATE:
        case MySQLParser::MAKETIME:
        case MySQLParser::MAKE_SET:
        case MySQLParser::MASTER_POS_WAIT:
        case MySQLParser::MBRCONTAINS:
        case MySQLParser::MBRDISJOINT:
        case MySQLParser::MBREQUAL:
        case MySQLParser::MBRINTERSECTS:
        case MySQLParser::MBROVERLAPS:
        case MySQLParser::MBRTOUCHES:
        case MySQLParser::MBRWITHIN:
        case MySQLParser::MD5:
        case MySQLParser::MLINEFROMTEXT:
        case MySQLParser::MLINEFROMWKB:
        case MySQLParser::MONTHNAME:
        case MySQLParser::MPOINTFROMTEXT:
        case MySQLParser::MPOINTFROMWKB:
        case MySQLParser::MPOLYFROMTEXT:
        case MySQLParser::MPOLYFROMWKB:
        case MySQLParser::MULTILINESTRINGFROMTEXT:
        case MySQLParser::MULTILINESTRINGFROMWKB:
        case MySQLParser::MULTIPOINTFROMTEXT:
        case MySQLParser::MULTIPOINTFROMWKB:
        case MySQLParser::MULTIPOLYGONFROMTEXT:
        case MySQLParser::MULTIPOLYGONFROMWKB:
        case MySQLParser::NAME_CONST:
        case MySQLParser::NULLIF:
        case MySQLParser::NUMGEOMETRIES:
        case MySQLParser::NUMINTERIORRINGS:
        case MySQLParser::NUMPOINTS:
        case MySQLParser::OCT:
        case MySQLParser::OCTET_LENGTH:
        case MySQLParser::ORD:
        case MySQLParser::OVERLAPS:
        case MySQLParser::PERIOD_ADD:
        case MySQLParser::PERIOD_DIFF:
        case MySQLParser::PI:
        case MySQLParser::POINTFROMTEXT:
        case MySQLParser::POINTFROMWKB:
        case MySQLParser::POINTN:
        case MySQLParser::POLYFROMTEXT:
        case MySQLParser::POLYFROMWKB:
        case MySQLParser::POLYGONFROMTEXT:
        case MySQLParser::POLYGONFROMWKB:
        case MySQLParser::POW:
        case MySQLParser::POWER:
        case MySQLParser::QUOTE:
        case MySQLParser::RADIANS:
        case MySQLParser::RAND:
        case MySQLParser::RANDOM_BYTES:
        case MySQLParser::RELEASE_LOCK:
        case MySQLParser::REVERSE:
        case MySQLParser::ROUND:
        case MySQLParser::ROW_COUNT:
        case MySQLParser::RPAD:
        case MySQLParser::RTRIM:
        case MySQLParser::SEC_TO_TIME:
        case MySQLParser::SESSION_USER:
        case MySQLParser::SHA:
        case MySQLParser::SHA1:
        case MySQLParser::SHA2:
        case MySQLParser::SIGN:
        case MySQLParser::SIN:
        case MySQLParser::SLEEP:
        case MySQLParser::SOUNDEX:
        case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser::SQRT:
        case MySQLParser::SRID:
        case MySQLParser::STARTPOINT:
        case MySQLParser::STRCMP:
        case MySQLParser::STR_TO_DATE:
        case MySQLParser::ST_AREA:
        case MySQLParser::ST_ASBINARY:
        case MySQLParser::ST_ASTEXT:
        case MySQLParser::ST_ASWKB:
        case MySQLParser::ST_ASWKT:
        case MySQLParser::ST_BUFFER:
        case MySQLParser::ST_CENTROID:
        case MySQLParser::ST_CONTAINS:
        case MySQLParser::ST_CROSSES:
        case MySQLParser::ST_DIFFERENCE:
        case MySQLParser::ST_DIMENSION:
        case MySQLParser::ST_DISJOINT:
        case MySQLParser::ST_DISTANCE:
        case MySQLParser::ST_ENDPOINT:
        case MySQLParser::ST_ENVELOPE:
        case MySQLParser::ST_EQUALS:
        case MySQLParser::ST_EXTERIORRING:
        case MySQLParser::ST_GEOMCOLLFROMTEXT:
        case MySQLParser::ST_GEOMCOLLFROMTXT:
        case MySQLParser::ST_GEOMCOLLFROMWKB:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser::ST_GEOMETRYFROMTEXT:
        case MySQLParser::ST_GEOMETRYFROMWKB:
        case MySQLParser::ST_GEOMETRYN:
        case MySQLParser::ST_GEOMETRYTYPE:
        case MySQLParser::ST_GEOMFROMTEXT:
        case MySQLParser::ST_GEOMFROMWKB:
        case MySQLParser::ST_INTERIORRINGN:
        case MySQLParser::ST_INTERSECTION:
        case MySQLParser::ST_INTERSECTS:
        case MySQLParser::ST_ISCLOSED:
        case MySQLParser::ST_ISEMPTY:
        case MySQLParser::ST_ISSIMPLE:
        case MySQLParser::ST_LINEFROMTEXT:
        case MySQLParser::ST_LINEFROMWKB:
        case MySQLParser::ST_LINESTRINGFROMTEXT:
        case MySQLParser::ST_LINESTRINGFROMWKB:
        case MySQLParser::ST_NUMGEOMETRIES:
        case MySQLParser::ST_NUMINTERIORRING:
        case MySQLParser::ST_NUMINTERIORRINGS:
        case MySQLParser::ST_NUMPOINTS:
        case MySQLParser::ST_OVERLAPS:
        case MySQLParser::ST_POINTFROMTEXT:
        case MySQLParser::ST_POINTFROMWKB:
        case MySQLParser::ST_POINTN:
        case MySQLParser::ST_POLYFROMTEXT:
        case MySQLParser::ST_POLYFROMWKB:
        case MySQLParser::ST_POLYGONFROMTEXT:
        case MySQLParser::ST_POLYGONFROMWKB:
        case MySQLParser::ST_SRID:
        case MySQLParser::ST_STARTPOINT:
        case MySQLParser::ST_SYMDIFFERENCE:
        case MySQLParser::ST_TOUCHES:
        case MySQLParser::ST_UNION:
        case MySQLParser::ST_WITHIN:
        case MySQLParser::ST_X:
        case MySQLParser::ST_Y:
        case MySQLParser::SUBDATE:
        case MySQLParser::SUBSTRING_INDEX:
        case MySQLParser::SUBTIME:
        case MySQLParser::SYSTEM_USER:
        case MySQLParser::TAN:
        case MySQLParser::TIMEDIFF:
        case MySQLParser::TIMESTAMPADD:
        case MySQLParser::TIMESTAMPDIFF:
        case MySQLParser::TIME_FORMAT:
        case MySQLParser::TIME_TO_SEC:
        case MySQLParser::TOUCHES:
        case MySQLParser::TO_BASE64:
        case MySQLParser::TO_DAYS:
        case MySQLParser::TO_SECONDS:
        case MySQLParser::UCASE:
        case MySQLParser::UNCOMPRESS:
        case MySQLParser::UNCOMPRESSED_LENGTH:
        case MySQLParser::UNHEX:
        case MySQLParser::UNIX_TIMESTAMP:
        case MySQLParser::UPDATEXML:
        case MySQLParser::UPPER:
        case MySQLParser::UUID:
        case MySQLParser::UUID_SHORT:
        case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser::VERSION:
        case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser::WEEKDAY:
        case MySQLParser::WEEKOFYEAR:
        case MySQLParser::WEIGHT_STRING:
        case MySQLParser::WITHIN:
        case MySQLParser::YEARWEEK:
        case MySQLParser::Y_FUNCTION:
        case MySQLParser::X_FUNCTION:
        case MySQLParser::PLUS:
        case MySQLParser::MINUS:
        case MySQLParser::EXCLAMATION_SYMBOL:
        case MySQLParser::BIT_NOT_OP:
        case MySQLParser::LR_BRACKET:
        case MySQLParser::ZERO_DECIMAL:
        case MySQLParser::ONE_DECIMAL:
        case MySQLParser::TWO_DECIMAL:
        case MySQLParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser::START_NATIONAL_STRING_LITERAL:
        case MySQLParser::STRING_LITERAL:
        case MySQLParser::DECIMAL_LITERAL:
        case MySQLParser::HEXADECIMAL_LITERAL:
        case MySQLParser::REAL_LITERAL:
        case MySQLParser::NULL_SPEC_LITERAL:
        case MySQLParser::BIT_STRING:
        case MySQLParser::STRING_CHARSET_NAME:
        case MySQLParser::PLACEHOLDER_VALUE:
        case MySQLParser::ID:
        case MySQLParser::REVERSE_QUOTE_ID:
        case MySQLParser::LOCAL_ID:
        case MySQLParser::GLOBAL_ID: {
          setState(5890);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::ALL) {
            setState(5889);
            dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySQLParser::ALL);
          }
          setState(5892);
          functionArg();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5895);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5896);
      match(MySQLParser::COUNT);
      setState(5897);
      match(MySQLParser::LR_BRACKET);
      setState(5898);
      dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySQLParser::DISTINCT);
      setState(5899);
      functionArgs();
      setState(5900);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5902);
      _la = _input->LA(1);
      if (!(((((_la - 218) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 218)) & ((1ULL << (MySQLParser::BIT_AND - 218))
        | (1ULL << (MySQLParser::BIT_OR - 218))
        | (1ULL << (MySQLParser::BIT_XOR - 218))
        | (1ULL << (MySQLParser::STD - 218))
        | (1ULL << (MySQLParser::STDDEV - 218))
        | (1ULL << (MySQLParser::STDDEV_POP - 218))
        | (1ULL << (MySQLParser::STDDEV_SAMP - 218))
        | (1ULL << (MySQLParser::VAR_POP - 218))
        | (1ULL << (MySQLParser::VAR_SAMP - 218))
        | (1ULL << (MySQLParser::VARIANCE - 218)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5903);
      match(MySQLParser::LR_BRACKET);
      setState(5905);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ALL) {
        setState(5904);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySQLParser::ALL);
      }
      setState(5907);
      functionArg();
      setState(5908);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5910);
      match(MySQLParser::GROUP_CONCAT);
      setState(5911);
      match(MySQLParser::LR_BRACKET);
      setState(5913);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::DISTINCT) {
        setState(5912);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySQLParser::DISTINCT);
      }
      setState(5915);
      functionArgs();
      setState(5926);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::ORDER) {
        setState(5916);
        match(MySQLParser::ORDER);
        setState(5917);
        match(MySQLParser::BY);
        setState(5918);
        orderByExpression();
        setState(5923);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySQLParser::COMMA) {
          setState(5919);
          match(MySQLParser::COMMA);
          setState(5920);
          orderByExpression();
          setState(5925);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(5930);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::SEPARATOR) {
        setState(5928);
        match(MySQLParser::SEPARATOR);
        setState(5929);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->separator = match(MySQLParser::STRING_LITERAL);
      }
      setState(5932);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScalarFunctionNameContext ------------------------------------------------------------------

MySQLParser::ScalarFunctionNameContext::ScalarFunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::FunctionNameBaseContext* MySQLParser::ScalarFunctionNameContext::functionNameBase() {
  return getRuleContext<MySQLParser::FunctionNameBaseContext>(0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::ASCII() {
  return getToken(MySQLParser::ASCII, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::CURDATE() {
  return getToken(MySQLParser::CURDATE, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::CURRENT_DATE() {
  return getToken(MySQLParser::CURRENT_DATE, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::CURRENT_TIME() {
  return getToken(MySQLParser::CURRENT_TIME, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::CURRENT_TIMESTAMP() {
  return getToken(MySQLParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::CURTIME() {
  return getToken(MySQLParser::CURTIME, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::DATE_ADD() {
  return getToken(MySQLParser::DATE_ADD, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::DATE_SUB() {
  return getToken(MySQLParser::DATE_SUB, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::IF() {
  return getToken(MySQLParser::IF, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::INSERT() {
  return getToken(MySQLParser::INSERT, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::LOCALTIME() {
  return getToken(MySQLParser::LOCALTIME, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::LOCALTIMESTAMP() {
  return getToken(MySQLParser::LOCALTIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::MID() {
  return getToken(MySQLParser::MID, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::NOW() {
  return getToken(MySQLParser::NOW, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::REPLACE() {
  return getToken(MySQLParser::REPLACE, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::SUBSTR() {
  return getToken(MySQLParser::SUBSTR, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::SUBSTRING() {
  return getToken(MySQLParser::SUBSTRING, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::SYSDATE() {
  return getToken(MySQLParser::SYSDATE, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::TRIM() {
  return getToken(MySQLParser::TRIM, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::UTC_DATE() {
  return getToken(MySQLParser::UTC_DATE, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::UTC_TIME() {
  return getToken(MySQLParser::UTC_TIME, 0);
}

tree::TerminalNode* MySQLParser::ScalarFunctionNameContext::UTC_TIMESTAMP() {
  return getToken(MySQLParser::UTC_TIMESTAMP, 0);
}


size_t MySQLParser::ScalarFunctionNameContext::getRuleIndex() const {
  return MySQLParser::RuleScalarFunctionName;
}

void MySQLParser::ScalarFunctionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScalarFunctionName(this);
}

void MySQLParser::ScalarFunctionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScalarFunctionName(this);
}


antlrcpp::Any MySQLParser::ScalarFunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitScalarFunctionName(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ScalarFunctionNameContext* MySQLParser::scalarFunctionName() {
  ScalarFunctionNameContext *_localctx = _tracker.createInstance<ScalarFunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 592, MySQLParser::RuleScalarFunctionName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5959);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::DATABASE:
      case MySQLParser::DATE:
      case MySQLParser::TIME:
      case MySQLParser::TIMESTAMP:
      case MySQLParser::YEAR:
      case MySQLParser::COUNT:
      case MySQLParser::POSITION:
      case MySQLParser::INVISIBLE:
      case MySQLParser::VISIBLE:
      case MySQLParser::QUARTER:
      case MySQLParser::MONTH:
      case MySQLParser::DAY:
      case MySQLParser::HOUR:
      case MySQLParser::MINUTE:
      case MySQLParser::WEEK:
      case MySQLParser::SECOND:
      case MySQLParser::MICROSECOND:
      case MySQLParser::SESSION_VARIABLES_ADMIN:
      case MySQLParser::GEOMETRYCOLLECTION:
      case MySQLParser::LINESTRING:
      case MySQLParser::MULTILINESTRING:
      case MySQLParser::MULTIPOINT:
      case MySQLParser::MULTIPOLYGON:
      case MySQLParser::POINT:
      case MySQLParser::POLYGON:
      case MySQLParser::ABS:
      case MySQLParser::ACOS:
      case MySQLParser::ADDDATE:
      case MySQLParser::ADDTIME:
      case MySQLParser::AES_DECRYPT:
      case MySQLParser::AES_ENCRYPT:
      case MySQLParser::AREA:
      case MySQLParser::ASBINARY:
      case MySQLParser::ASIN:
      case MySQLParser::ASTEXT:
      case MySQLParser::ASWKB:
      case MySQLParser::ASWKT:
      case MySQLParser::ASYMMETRIC_DECRYPT:
      case MySQLParser::ASYMMETRIC_DERIVE:
      case MySQLParser::ASYMMETRIC_ENCRYPT:
      case MySQLParser::ASYMMETRIC_SIGN:
      case MySQLParser::ASYMMETRIC_VERIFY:
      case MySQLParser::ATAN:
      case MySQLParser::ATAN2:
      case MySQLParser::BENCHMARK:
      case MySQLParser::BIN:
      case MySQLParser::BIT_COUNT:
      case MySQLParser::BIT_LENGTH:
      case MySQLParser::BUFFER:
      case MySQLParser::CEIL:
      case MySQLParser::CEILING:
      case MySQLParser::CENTROID:
      case MySQLParser::CHARACTER_LENGTH:
      case MySQLParser::CHARSET:
      case MySQLParser::CHAR_LENGTH:
      case MySQLParser::COERCIBILITY:
      case MySQLParser::COLLATION:
      case MySQLParser::COMPRESS:
      case MySQLParser::CONCAT:
      case MySQLParser::CONCAT_WS:
      case MySQLParser::CONNECTION_ID:
      case MySQLParser::CONV:
      case MySQLParser::CONVERT_TZ:
      case MySQLParser::COS:
      case MySQLParser::COT:
      case MySQLParser::CRC32:
      case MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySQLParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySQLParser::CREATE_DH_PARAMETERS:
      case MySQLParser::CREATE_DIGEST:
      case MySQLParser::CROSSES:
      case MySQLParser::DATEDIFF:
      case MySQLParser::DATE_FORMAT:
      case MySQLParser::DAYNAME:
      case MySQLParser::DAYOFMONTH:
      case MySQLParser::DAYOFWEEK:
      case MySQLParser::DAYOFYEAR:
      case MySQLParser::DECODE:
      case MySQLParser::DEGREES:
      case MySQLParser::DES_DECRYPT:
      case MySQLParser::DES_ENCRYPT:
      case MySQLParser::DIMENSION:
      case MySQLParser::DISJOINT:
      case MySQLParser::ELT:
      case MySQLParser::ENCODE:
      case MySQLParser::ENCRYPT:
      case MySQLParser::ENDPOINT:
      case MySQLParser::ENVELOPE:
      case MySQLParser::EQUALS:
      case MySQLParser::EXP:
      case MySQLParser::EXPORT_SET:
      case MySQLParser::EXTERIORRING:
      case MySQLParser::EXTRACTVALUE:
      case MySQLParser::FIELD:
      case MySQLParser::FIND_IN_SET:
      case MySQLParser::FLOOR:
      case MySQLParser::FORMAT:
      case MySQLParser::FOUND_ROWS:
      case MySQLParser::FROM_BASE64:
      case MySQLParser::FROM_DAYS:
      case MySQLParser::FROM_UNIXTIME:
      case MySQLParser::GEOMCOLLFROMTEXT:
      case MySQLParser::GEOMCOLLFROMWKB:
      case MySQLParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::GEOMETRYFROMTEXT:
      case MySQLParser::GEOMETRYFROMWKB:
      case MySQLParser::GEOMETRYN:
      case MySQLParser::GEOMETRYTYPE:
      case MySQLParser::GEOMFROMTEXT:
      case MySQLParser::GEOMFROMWKB:
      case MySQLParser::GET_FORMAT:
      case MySQLParser::GET_LOCK:
      case MySQLParser::GLENGTH:
      case MySQLParser::GREATEST:
      case MySQLParser::GTID_SUBSET:
      case MySQLParser::GTID_SUBTRACT:
      case MySQLParser::HEX:
      case MySQLParser::IFNULL:
      case MySQLParser::INET6_ATON:
      case MySQLParser::INET6_NTOA:
      case MySQLParser::INET_ATON:
      case MySQLParser::INET_NTOA:
      case MySQLParser::INSTR:
      case MySQLParser::INTERIORRINGN:
      case MySQLParser::INTERSECTS:
      case MySQLParser::ISCLOSED:
      case MySQLParser::ISEMPTY:
      case MySQLParser::ISNULL:
      case MySQLParser::ISSIMPLE:
      case MySQLParser::IS_FREE_LOCK:
      case MySQLParser::IS_IPV4:
      case MySQLParser::IS_IPV4_COMPAT:
      case MySQLParser::IS_IPV4_MAPPED:
      case MySQLParser::IS_IPV6:
      case MySQLParser::IS_USED_LOCK:
      case MySQLParser::LAST_INSERT_ID:
      case MySQLParser::LCASE:
      case MySQLParser::LEAST:
      case MySQLParser::LENGTH:
      case MySQLParser::LINEFROMTEXT:
      case MySQLParser::LINEFROMWKB:
      case MySQLParser::LINESTRINGFROMTEXT:
      case MySQLParser::LINESTRINGFROMWKB:
      case MySQLParser::LN:
      case MySQLParser::LOAD_FILE:
      case MySQLParser::LOCATE:
      case MySQLParser::LOG:
      case MySQLParser::LOG10:
      case MySQLParser::LOG2:
      case MySQLParser::LOWER:
      case MySQLParser::LPAD:
      case MySQLParser::LTRIM:
      case MySQLParser::MAKEDATE:
      case MySQLParser::MAKETIME:
      case MySQLParser::MAKE_SET:
      case MySQLParser::MASTER_POS_WAIT:
      case MySQLParser::MBRCONTAINS:
      case MySQLParser::MBRDISJOINT:
      case MySQLParser::MBREQUAL:
      case MySQLParser::MBRINTERSECTS:
      case MySQLParser::MBROVERLAPS:
      case MySQLParser::MBRTOUCHES:
      case MySQLParser::MBRWITHIN:
      case MySQLParser::MD5:
      case MySQLParser::MLINEFROMTEXT:
      case MySQLParser::MLINEFROMWKB:
      case MySQLParser::MONTHNAME:
      case MySQLParser::MPOINTFROMTEXT:
      case MySQLParser::MPOINTFROMWKB:
      case MySQLParser::MPOLYFROMTEXT:
      case MySQLParser::MPOLYFROMWKB:
      case MySQLParser::MULTILINESTRINGFROMTEXT:
      case MySQLParser::MULTILINESTRINGFROMWKB:
      case MySQLParser::MULTIPOINTFROMTEXT:
      case MySQLParser::MULTIPOINTFROMWKB:
      case MySQLParser::MULTIPOLYGONFROMTEXT:
      case MySQLParser::MULTIPOLYGONFROMWKB:
      case MySQLParser::NAME_CONST:
      case MySQLParser::NULLIF:
      case MySQLParser::NUMGEOMETRIES:
      case MySQLParser::NUMINTERIORRINGS:
      case MySQLParser::NUMPOINTS:
      case MySQLParser::OCT:
      case MySQLParser::OCTET_LENGTH:
      case MySQLParser::ORD:
      case MySQLParser::OVERLAPS:
      case MySQLParser::PERIOD_ADD:
      case MySQLParser::PERIOD_DIFF:
      case MySQLParser::PI:
      case MySQLParser::POINTFROMTEXT:
      case MySQLParser::POINTFROMWKB:
      case MySQLParser::POINTN:
      case MySQLParser::POLYFROMTEXT:
      case MySQLParser::POLYFROMWKB:
      case MySQLParser::POLYGONFROMTEXT:
      case MySQLParser::POLYGONFROMWKB:
      case MySQLParser::POW:
      case MySQLParser::POWER:
      case MySQLParser::QUOTE:
      case MySQLParser::RADIANS:
      case MySQLParser::RAND:
      case MySQLParser::RANDOM_BYTES:
      case MySQLParser::RELEASE_LOCK:
      case MySQLParser::REVERSE:
      case MySQLParser::ROUND:
      case MySQLParser::ROW_COUNT:
      case MySQLParser::RPAD:
      case MySQLParser::RTRIM:
      case MySQLParser::SEC_TO_TIME:
      case MySQLParser::SESSION_USER:
      case MySQLParser::SHA:
      case MySQLParser::SHA1:
      case MySQLParser::SHA2:
      case MySQLParser::SIGN:
      case MySQLParser::SIN:
      case MySQLParser::SLEEP:
      case MySQLParser::SOUNDEX:
      case MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySQLParser::SQRT:
      case MySQLParser::SRID:
      case MySQLParser::STARTPOINT:
      case MySQLParser::STRCMP:
      case MySQLParser::STR_TO_DATE:
      case MySQLParser::ST_AREA:
      case MySQLParser::ST_ASBINARY:
      case MySQLParser::ST_ASTEXT:
      case MySQLParser::ST_ASWKB:
      case MySQLParser::ST_ASWKT:
      case MySQLParser::ST_BUFFER:
      case MySQLParser::ST_CENTROID:
      case MySQLParser::ST_CONTAINS:
      case MySQLParser::ST_CROSSES:
      case MySQLParser::ST_DIFFERENCE:
      case MySQLParser::ST_DIMENSION:
      case MySQLParser::ST_DISJOINT:
      case MySQLParser::ST_DISTANCE:
      case MySQLParser::ST_ENDPOINT:
      case MySQLParser::ST_ENVELOPE:
      case MySQLParser::ST_EQUALS:
      case MySQLParser::ST_EXTERIORRING:
      case MySQLParser::ST_GEOMCOLLFROMTEXT:
      case MySQLParser::ST_GEOMCOLLFROMTXT:
      case MySQLParser::ST_GEOMCOLLFROMWKB:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySQLParser::ST_GEOMETRYFROMTEXT:
      case MySQLParser::ST_GEOMETRYFROMWKB:
      case MySQLParser::ST_GEOMETRYN:
      case MySQLParser::ST_GEOMETRYTYPE:
      case MySQLParser::ST_GEOMFROMTEXT:
      case MySQLParser::ST_GEOMFROMWKB:
      case MySQLParser::ST_INTERIORRINGN:
      case MySQLParser::ST_INTERSECTION:
      case MySQLParser::ST_INTERSECTS:
      case MySQLParser::ST_ISCLOSED:
      case MySQLParser::ST_ISEMPTY:
      case MySQLParser::ST_ISSIMPLE:
      case MySQLParser::ST_LINEFROMTEXT:
      case MySQLParser::ST_LINEFROMWKB:
      case MySQLParser::ST_LINESTRINGFROMTEXT:
      case MySQLParser::ST_LINESTRINGFROMWKB:
      case MySQLParser::ST_NUMGEOMETRIES:
      case MySQLParser::ST_NUMINTERIORRING:
      case MySQLParser::ST_NUMINTERIORRINGS:
      case MySQLParser::ST_NUMPOINTS:
      case MySQLParser::ST_OVERLAPS:
      case MySQLParser::ST_POINTFROMTEXT:
      case MySQLParser::ST_POINTFROMWKB:
      case MySQLParser::ST_POINTN:
      case MySQLParser::ST_POLYFROMTEXT:
      case MySQLParser::ST_POLYFROMWKB:
      case MySQLParser::ST_POLYGONFROMTEXT:
      case MySQLParser::ST_POLYGONFROMWKB:
      case MySQLParser::ST_SRID:
      case MySQLParser::ST_STARTPOINT:
      case MySQLParser::ST_SYMDIFFERENCE:
      case MySQLParser::ST_TOUCHES:
      case MySQLParser::ST_UNION:
      case MySQLParser::ST_WITHIN:
      case MySQLParser::ST_X:
      case MySQLParser::ST_Y:
      case MySQLParser::SUBDATE:
      case MySQLParser::SUBSTRING_INDEX:
      case MySQLParser::SUBTIME:
      case MySQLParser::SYSTEM_USER:
      case MySQLParser::TAN:
      case MySQLParser::TIMEDIFF:
      case MySQLParser::TIMESTAMPADD:
      case MySQLParser::TIMESTAMPDIFF:
      case MySQLParser::TIME_FORMAT:
      case MySQLParser::TIME_TO_SEC:
      case MySQLParser::TOUCHES:
      case MySQLParser::TO_BASE64:
      case MySQLParser::TO_DAYS:
      case MySQLParser::TO_SECONDS:
      case MySQLParser::UCASE:
      case MySQLParser::UNCOMPRESS:
      case MySQLParser::UNCOMPRESSED_LENGTH:
      case MySQLParser::UNHEX:
      case MySQLParser::UNIX_TIMESTAMP:
      case MySQLParser::UPDATEXML:
      case MySQLParser::UPPER:
      case MySQLParser::UUID:
      case MySQLParser::UUID_SHORT:
      case MySQLParser::VALIDATE_PASSWORD_STRENGTH:
      case MySQLParser::VERSION:
      case MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySQLParser::WEEKDAY:
      case MySQLParser::WEEKOFYEAR:
      case MySQLParser::WEIGHT_STRING:
      case MySQLParser::WITHIN:
      case MySQLParser::YEARWEEK:
      case MySQLParser::Y_FUNCTION:
      case MySQLParser::X_FUNCTION: {
        enterOuterAlt(_localctx, 1);
        setState(5936);
        functionNameBase();
        break;
      }

      case MySQLParser::ASCII: {
        enterOuterAlt(_localctx, 2);
        setState(5937);
        match(MySQLParser::ASCII);
        break;
      }

      case MySQLParser::CURDATE: {
        enterOuterAlt(_localctx, 3);
        setState(5938);
        match(MySQLParser::CURDATE);
        break;
      }

      case MySQLParser::CURRENT_DATE: {
        enterOuterAlt(_localctx, 4);
        setState(5939);
        match(MySQLParser::CURRENT_DATE);
        break;
      }

      case MySQLParser::CURRENT_TIME: {
        enterOuterAlt(_localctx, 5);
        setState(5940);
        match(MySQLParser::CURRENT_TIME);
        break;
      }

      case MySQLParser::CURRENT_TIMESTAMP: {
        enterOuterAlt(_localctx, 6);
        setState(5941);
        match(MySQLParser::CURRENT_TIMESTAMP);
        break;
      }

      case MySQLParser::CURTIME: {
        enterOuterAlt(_localctx, 7);
        setState(5942);
        match(MySQLParser::CURTIME);
        break;
      }

      case MySQLParser::DATE_ADD: {
        enterOuterAlt(_localctx, 8);
        setState(5943);
        match(MySQLParser::DATE_ADD);
        break;
      }

      case MySQLParser::DATE_SUB: {
        enterOuterAlt(_localctx, 9);
        setState(5944);
        match(MySQLParser::DATE_SUB);
        break;
      }

      case MySQLParser::IF: {
        enterOuterAlt(_localctx, 10);
        setState(5945);
        match(MySQLParser::IF);
        break;
      }

      case MySQLParser::INSERT: {
        enterOuterAlt(_localctx, 11);
        setState(5946);
        match(MySQLParser::INSERT);
        break;
      }

      case MySQLParser::LOCALTIME: {
        enterOuterAlt(_localctx, 12);
        setState(5947);
        match(MySQLParser::LOCALTIME);
        break;
      }

      case MySQLParser::LOCALTIMESTAMP: {
        enterOuterAlt(_localctx, 13);
        setState(5948);
        match(MySQLParser::LOCALTIMESTAMP);
        break;
      }

      case MySQLParser::MID: {
        enterOuterAlt(_localctx, 14);
        setState(5949);
        match(MySQLParser::MID);
        break;
      }

      case MySQLParser::NOW: {
        enterOuterAlt(_localctx, 15);
        setState(5950);
        match(MySQLParser::NOW);
        break;
      }

      case MySQLParser::REPLACE: {
        enterOuterAlt(_localctx, 16);
        setState(5951);
        match(MySQLParser::REPLACE);
        break;
      }

      case MySQLParser::SUBSTR: {
        enterOuterAlt(_localctx, 17);
        setState(5952);
        match(MySQLParser::SUBSTR);
        break;
      }

      case MySQLParser::SUBSTRING: {
        enterOuterAlt(_localctx, 18);
        setState(5953);
        match(MySQLParser::SUBSTRING);
        break;
      }

      case MySQLParser::SYSDATE: {
        enterOuterAlt(_localctx, 19);
        setState(5954);
        match(MySQLParser::SYSDATE);
        break;
      }

      case MySQLParser::TRIM: {
        enterOuterAlt(_localctx, 20);
        setState(5955);
        match(MySQLParser::TRIM);
        break;
      }

      case MySQLParser::UTC_DATE: {
        enterOuterAlt(_localctx, 21);
        setState(5956);
        match(MySQLParser::UTC_DATE);
        break;
      }

      case MySQLParser::UTC_TIME: {
        enterOuterAlt(_localctx, 22);
        setState(5957);
        match(MySQLParser::UTC_TIME);
        break;
      }

      case MySQLParser::UTC_TIMESTAMP: {
        enterOuterAlt(_localctx, 23);
        setState(5958);
        match(MySQLParser::UTC_TIMESTAMP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PasswordFunctionClauseContext ------------------------------------------------------------------

MySQLParser::PasswordFunctionClauseContext::PasswordFunctionClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::FunctionArgContext* MySQLParser::PasswordFunctionClauseContext::functionArg() {
  return getRuleContext<MySQLParser::FunctionArgContext>(0);
}

tree::TerminalNode* MySQLParser::PasswordFunctionClauseContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::PasswordFunctionClauseContext::OLD_PASSWORD() {
  return getToken(MySQLParser::OLD_PASSWORD, 0);
}


size_t MySQLParser::PasswordFunctionClauseContext::getRuleIndex() const {
  return MySQLParser::RulePasswordFunctionClause;
}

void MySQLParser::PasswordFunctionClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPasswordFunctionClause(this);
}

void MySQLParser::PasswordFunctionClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPasswordFunctionClause(this);
}


antlrcpp::Any MySQLParser::PasswordFunctionClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPasswordFunctionClause(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PasswordFunctionClauseContext* MySQLParser::passwordFunctionClause() {
  PasswordFunctionClauseContext *_localctx = _tracker.createInstance<PasswordFunctionClauseContext>(_ctx, getState());
  enterRule(_localctx, 594, MySQLParser::RulePasswordFunctionClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5961);
    dynamic_cast<PasswordFunctionClauseContext *>(_localctx)->functionName = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::OLD_PASSWORD

    || _la == MySQLParser::PASSWORD)) {
      dynamic_cast<PasswordFunctionClauseContext *>(_localctx)->functionName = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5962);
    match(MySQLParser::LR_BRACKET);
    setState(5963);
    functionArg();
    setState(5964);
    match(MySQLParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionArgsContext ------------------------------------------------------------------

MySQLParser::FunctionArgsContext::FunctionArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::ConstantContext *> MySQLParser::FunctionArgsContext::constant() {
  return getRuleContexts<MySQLParser::ConstantContext>();
}

MySQLParser::ConstantContext* MySQLParser::FunctionArgsContext::constant(size_t i) {
  return getRuleContext<MySQLParser::ConstantContext>(i);
}

std::vector<MySQLParser::FullColumnNameContext *> MySQLParser::FunctionArgsContext::fullColumnName() {
  return getRuleContexts<MySQLParser::FullColumnNameContext>();
}

MySQLParser::FullColumnNameContext* MySQLParser::FunctionArgsContext::fullColumnName(size_t i) {
  return getRuleContext<MySQLParser::FullColumnNameContext>(i);
}

std::vector<MySQLParser::FunctionCallContext *> MySQLParser::FunctionArgsContext::functionCall() {
  return getRuleContexts<MySQLParser::FunctionCallContext>();
}

MySQLParser::FunctionCallContext* MySQLParser::FunctionArgsContext::functionCall(size_t i) {
  return getRuleContext<MySQLParser::FunctionCallContext>(i);
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::FunctionArgsContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::FunctionArgsContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}


size_t MySQLParser::FunctionArgsContext::getRuleIndex() const {
  return MySQLParser::RuleFunctionArgs;
}

void MySQLParser::FunctionArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionArgs(this);
}

void MySQLParser::FunctionArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionArgs(this);
}


antlrcpp::Any MySQLParser::FunctionArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionArgs(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FunctionArgsContext* MySQLParser::functionArgs() {
  FunctionArgsContext *_localctx = _tracker.createInstance<FunctionArgsContext>(_ctx, getState());
  enterRule(_localctx, 596, MySQLParser::RuleFunctionArgs);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5970);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 876, _ctx)) {
    case 1: {
      setState(5966);
      constant();
      break;
    }

    case 2: {
      setState(5967);
      fullColumnName();
      break;
    }

    case 3: {
      setState(5968);
      functionCall();
      break;
    }

    case 4: {
      setState(5969);
      expression(0);
      break;
    }

    }
    setState(5981);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySQLParser::COMMA) {
      setState(5972);
      match(MySQLParser::COMMA);
      setState(5977);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 877, _ctx)) {
      case 1: {
        setState(5973);
        constant();
        break;
      }

      case 2: {
        setState(5974);
        fullColumnName();
        break;
      }

      case 3: {
        setState(5975);
        functionCall();
        break;
      }

      case 4: {
        setState(5976);
        expression(0);
        break;
      }

      }
      setState(5983);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionArgContext ------------------------------------------------------------------

MySQLParser::FunctionArgContext::FunctionArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ConstantContext* MySQLParser::FunctionArgContext::constant() {
  return getRuleContext<MySQLParser::ConstantContext>(0);
}

MySQLParser::FullColumnNameContext* MySQLParser::FunctionArgContext::fullColumnName() {
  return getRuleContext<MySQLParser::FullColumnNameContext>(0);
}

MySQLParser::FunctionCallContext* MySQLParser::FunctionArgContext::functionCall() {
  return getRuleContext<MySQLParser::FunctionCallContext>(0);
}

MySQLParser::ExpressionContext* MySQLParser::FunctionArgContext::expression() {
  return getRuleContext<MySQLParser::ExpressionContext>(0);
}


size_t MySQLParser::FunctionArgContext::getRuleIndex() const {
  return MySQLParser::RuleFunctionArg;
}

void MySQLParser::FunctionArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionArg(this);
}

void MySQLParser::FunctionArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionArg(this);
}


antlrcpp::Any MySQLParser::FunctionArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionArg(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FunctionArgContext* MySQLParser::functionArg() {
  FunctionArgContext *_localctx = _tracker.createInstance<FunctionArgContext>(_ctx, getState());
  enterRule(_localctx, 598, MySQLParser::RuleFunctionArg);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5988);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 879, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5984);
      constant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5985);
      fullColumnName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5986);
      functionCall();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5987);
      expression(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

MySQLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::ExpressionContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}

tree::TerminalNode* MySQLParser::ExpressionContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}

MySQLParser::PredicateContext* MySQLParser::ExpressionContext::predicate() {
  return getRuleContext<MySQLParser::PredicateContext>(0);
}

tree::TerminalNode* MySQLParser::ExpressionContext::IS() {
  return getToken(MySQLParser::IS, 0);
}

tree::TerminalNode* MySQLParser::ExpressionContext::TRUE() {
  return getToken(MySQLParser::TRUE, 0);
}

tree::TerminalNode* MySQLParser::ExpressionContext::FALSE() {
  return getToken(MySQLParser::FALSE, 0);
}

tree::TerminalNode* MySQLParser::ExpressionContext::UNKNOWN() {
  return getToken(MySQLParser::UNKNOWN, 0);
}

MySQLParser::LogicalOperatorContext* MySQLParser::ExpressionContext::logicalOperator() {
  return getRuleContext<MySQLParser::LogicalOperatorContext>(0);
}


size_t MySQLParser::ExpressionContext::getRuleIndex() const {
  return MySQLParser::RuleExpression;
}

void MySQLParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void MySQLParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


antlrcpp::Any MySQLParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}


MySQLParser::ExpressionContext* MySQLParser::expression() {
   return expression(0);
}

MySQLParser::ExpressionContext* MySQLParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySQLParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  MySQLParser::ExpressionContext *previousContext = _localctx;
  size_t startState = 600;
  enterRecursionRule(_localctx, 600, MySQLParser::RuleExpression, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6001);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 881, _ctx)) {
    case 1: {
      setState(5991);
      dynamic_cast<ExpressionContext *>(_localctx)->notOperator = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::NOT || _la == MySQLParser::EXCLAMATION_SYMBOL)) {
        dynamic_cast<ExpressionContext *>(_localctx)->notOperator = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5992);
      expression(4);
      break;
    }

    case 2: {
      setState(5993);
      predicate(0);
      setState(5994);
      match(MySQLParser::IS);
      setState(5996);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySQLParser::NOT) {
        setState(5995);
        match(MySQLParser::NOT);
      }
      setState(5998);
      dynamic_cast<ExpressionContext *>(_localctx)->testValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySQLParser::FALSE || _la == MySQLParser::TRUE || _la == MySQLParser::UNKNOWN)) {
        dynamic_cast<ExpressionContext *>(_localctx)->testValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 3: {
      setState(6000);
      predicate(0);
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(6009);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 882, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExpression);
        setState(6003);

        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
        setState(6004);
        logicalOperator();
        setState(6005);
        expression(4); 
      }
      setState(6011);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 882, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

MySQLParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ExpressionAtomContext* MySQLParser::PredicateContext::expressionAtom() {
  return getRuleContext<MySQLParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* MySQLParser::PredicateContext::LOCAL_ID() {
  return getToken(MySQLParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::VAR_ASSIGN() {
  return getToken(MySQLParser::VAR_ASSIGN, 0);
}

MySQLParser::ComparisonOperatorContext* MySQLParser::PredicateContext::comparisonOperator() {
  return getRuleContext<MySQLParser::ComparisonOperatorContext>(0);
}

std::vector<MySQLParser::PredicateContext *> MySQLParser::PredicateContext::predicate() {
  return getRuleContexts<MySQLParser::PredicateContext>();
}

MySQLParser::PredicateContext* MySQLParser::PredicateContext::predicate(size_t i) {
  return getRuleContext<MySQLParser::PredicateContext>(i);
}

tree::TerminalNode* MySQLParser::PredicateContext::BETWEEN() {
  return getToken(MySQLParser::BETWEEN, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::AND() {
  return getToken(MySQLParser::AND, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::SOUNDS() {
  return getToken(MySQLParser::SOUNDS, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::LIKE() {
  return getToken(MySQLParser::LIKE, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::REGEXP() {
  return getToken(MySQLParser::REGEXP, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::RLIKE() {
  return getToken(MySQLParser::RLIKE, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::IN() {
  return getToken(MySQLParser::IN, 0);
}

MySQLParser::SelectStatementContext* MySQLParser::PredicateContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

MySQLParser::ExpressionsContext* MySQLParser::PredicateContext::expressions() {
  return getRuleContext<MySQLParser::ExpressionsContext>(0);
}

tree::TerminalNode* MySQLParser::PredicateContext::IS() {
  return getToken(MySQLParser::IS, 0);
}

MySQLParser::NullNotnullContext* MySQLParser::PredicateContext::nullNotnull() {
  return getRuleContext<MySQLParser::NullNotnullContext>(0);
}

tree::TerminalNode* MySQLParser::PredicateContext::ALL() {
  return getToken(MySQLParser::ALL, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::ANY() {
  return getToken(MySQLParser::ANY, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::SOME() {
  return getToken(MySQLParser::SOME, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::ESCAPE() {
  return getToken(MySQLParser::ESCAPE, 0);
}

tree::TerminalNode* MySQLParser::PredicateContext::STRING_LITERAL() {
  return getToken(MySQLParser::STRING_LITERAL, 0);
}


size_t MySQLParser::PredicateContext::getRuleIndex() const {
  return MySQLParser::RulePredicate;
}

void MySQLParser::PredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicate(this);
}

void MySQLParser::PredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicate(this);
}


antlrcpp::Any MySQLParser::PredicateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPredicate(this);
  else
    return visitor->visitChildren(this);
}


MySQLParser::PredicateContext* MySQLParser::predicate() {
   return predicate(0);
}

MySQLParser::PredicateContext* MySQLParser::predicate(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySQLParser::PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, parentState);
  MySQLParser::PredicateContext *previousContext = _localctx;
  size_t startState = 602;
  enterRecursionRule(_localctx, 602, MySQLParser::RulePredicate, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6015);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 883, _ctx)) {
    case 1: {
      setState(6013);
      match(MySQLParser::LOCAL_ID);
      setState(6014);
      match(MySQLParser::VAR_ASSIGN);
      break;
    }

    }
    setState(6017);
    expressionAtom(0);
    _ctx->stop = _input->LT(-1);
    setState(6073);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 890, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(6071);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 889, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          _localctx->left = previousContext;
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6019);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(6020);
          comparisonOperator();
          setState(6021);
          dynamic_cast<PredicateContext *>(_localctx)->right = predicate(8);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6023);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(6024);
          match(MySQLParser::BETWEEN);
          setState(6025);
          predicate(0);
          setState(6026);
          match(MySQLParser::AND);
          setState(6027);
          predicate(6);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6029);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(6030);
          match(MySQLParser::SOUNDS);
          setState(6031);
          match(MySQLParser::LIKE);
          setState(6032);
          predicate(5);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6033);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(6035);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::NOT) {
            setState(6034);
            match(MySQLParser::NOT);
          }
          setState(6037);
          dynamic_cast<PredicateContext *>(_localctx)->regex = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::REGEXP

          || _la == MySQLParser::RLIKE)) {
            dynamic_cast<PredicateContext *>(_localctx)->regex = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(6038);
          predicate(3);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          _localctx->in_col = previousContext;
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6039);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(6041);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::NOT) {
            setState(6040);
            match(MySQLParser::NOT);
          }
          setState(6043);
          match(MySQLParser::IN);
          setState(6044);
          match(MySQLParser::LR_BRACKET);
          setState(6047);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 886, _ctx)) {
          case 1: {
            setState(6045);
            selectStatement();
            break;
          }

          case 2: {
            setState(6046);
            expressions();
            break;
          }

          }
          setState(6049);
          match(MySQLParser::RR_BRACKET);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6051);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(6052);
          match(MySQLParser::IS);
          setState(6053);
          nullNotnull();
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6054);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(6055);
          comparisonOperator();
          setState(6056);
          dynamic_cast<PredicateContext *>(_localctx)->quantifier = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySQLParser::ALL || _la == MySQLParser::ANY || _la == MySQLParser::SOME)) {
            dynamic_cast<PredicateContext *>(_localctx)->quantifier = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(6057);
          match(MySQLParser::LR_BRACKET);
          setState(6058);
          selectStatement();
          setState(6059);
          match(MySQLParser::RR_BRACKET);
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<PredicateContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePredicate);
          setState(6061);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(6063);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySQLParser::NOT) {
            setState(6062);
            match(MySQLParser::NOT);
          }
          setState(6065);
          match(MySQLParser::LIKE);
          setState(6066);
          predicate(0);
          setState(6069);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 888, _ctx)) {
          case 1: {
            setState(6067);
            match(MySQLParser::ESCAPE);
            setState(6068);
            match(MySQLParser::STRING_LITERAL);
            break;
          }

          }
          break;
        }

        } 
      }
      setState(6075);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 890, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionAtomContext ------------------------------------------------------------------

MySQLParser::ExpressionAtomContext::ExpressionAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySQLParser::ConstantContext* MySQLParser::ExpressionAtomContext::constant() {
  return getRuleContext<MySQLParser::ConstantContext>(0);
}

MySQLParser::FullColumnNameContext* MySQLParser::ExpressionAtomContext::fullColumnName() {
  return getRuleContext<MySQLParser::FullColumnNameContext>(0);
}

MySQLParser::FunctionCallContext* MySQLParser::ExpressionAtomContext::functionCall() {
  return getRuleContext<MySQLParser::FunctionCallContext>(0);
}

MySQLParser::MysqlVariableContext* MySQLParser::ExpressionAtomContext::mysqlVariable() {
  return getRuleContext<MySQLParser::MysqlVariableContext>(0);
}

MySQLParser::UnaryOperatorContext* MySQLParser::ExpressionAtomContext::unaryOperator() {
  return getRuleContext<MySQLParser::UnaryOperatorContext>(0);
}

std::vector<MySQLParser::ExpressionAtomContext *> MySQLParser::ExpressionAtomContext::expressionAtom() {
  return getRuleContexts<MySQLParser::ExpressionAtomContext>();
}

MySQLParser::ExpressionAtomContext* MySQLParser::ExpressionAtomContext::expressionAtom(size_t i) {
  return getRuleContext<MySQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* MySQLParser::ExpressionAtomContext::BINARY() {
  return getToken(MySQLParser::BINARY, 0);
}

std::vector<MySQLParser::ExpressionContext *> MySQLParser::ExpressionAtomContext::expression() {
  return getRuleContexts<MySQLParser::ExpressionContext>();
}

MySQLParser::ExpressionContext* MySQLParser::ExpressionAtomContext::expression(size_t i) {
  return getRuleContext<MySQLParser::ExpressionContext>(i);
}

tree::TerminalNode* MySQLParser::ExpressionAtomContext::ROW() {
  return getToken(MySQLParser::ROW, 0);
}

tree::TerminalNode* MySQLParser::ExpressionAtomContext::EXISTS() {
  return getToken(MySQLParser::EXISTS, 0);
}

MySQLParser::SelectStatementContext* MySQLParser::ExpressionAtomContext::selectStatement() {
  return getRuleContext<MySQLParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySQLParser::ExpressionAtomContext::INTERVAL() {
  return getToken(MySQLParser::INTERVAL, 0);
}

MySQLParser::IntervalTypeContext* MySQLParser::ExpressionAtomContext::intervalType() {
  return getRuleContext<MySQLParser::IntervalTypeContext>(0);
}

tree::TerminalNode* MySQLParser::ExpressionAtomContext::PLACEHOLDER_VALUE() {
  return getToken(MySQLParser::PLACEHOLDER_VALUE, 0);
}

MySQLParser::BitOperatorContext* MySQLParser::ExpressionAtomContext::bitOperator() {
  return getRuleContext<MySQLParser::BitOperatorContext>(0);
}

MySQLParser::MathOperatorContext* MySQLParser::ExpressionAtomContext::mathOperator() {
  return getRuleContext<MySQLParser::MathOperatorContext>(0);
}

tree::TerminalNode* MySQLParser::ExpressionAtomContext::COLLATE() {
  return getToken(MySQLParser::COLLATE, 0);
}

MySQLParser::CollationNameContext* MySQLParser::ExpressionAtomContext::collationName() {
  return getRuleContext<MySQLParser::CollationNameContext>(0);
}


size_t MySQLParser::ExpressionAtomContext::getRuleIndex() const {
  return MySQLParser::RuleExpressionAtom;
}

void MySQLParser::ExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionAtom(this);
}

void MySQLParser::ExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionAtom(this);
}


antlrcpp::Any MySQLParser::ExpressionAtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitExpressionAtom(this);
  else
    return visitor->visitChildren(this);
}


MySQLParser::ExpressionAtomContext* MySQLParser::expressionAtom() {
   return expressionAtom(0);
}

MySQLParser::ExpressionAtomContext* MySQLParser::expressionAtom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySQLParser::ExpressionAtomContext *_localctx = _tracker.createInstance<ExpressionAtomContext>(_ctx, parentState);
  MySQLParser::ExpressionAtomContext *previousContext = _localctx;
  size_t startState = 604;
  enterRecursionRule(_localctx, 604, MySQLParser::RuleExpressionAtom, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6122);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 893, _ctx)) {
    case 1: {
      setState(6077);
      constant();
      break;
    }

    case 2: {
      setState(6078);
      fullColumnName();
      break;
    }

    case 3: {
      setState(6079);
      functionCall();
      break;
    }

    case 4: {
      setState(6080);
      mysqlVariable();
      break;
    }

    case 5: {
      setState(6081);
      unaryOperator();
      setState(6082);
      expressionAtom(10);
      break;
    }

    case 6: {
      setState(6084);
      match(MySQLParser::BINARY);
      setState(6085);
      expressionAtom(9);
      break;
    }

    case 7: {
      setState(6086);
      match(MySQLParser::LR_BRACKET);
      setState(6087);
      expression(0);
      setState(6092);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySQLParser::COMMA) {
        setState(6088);
        match(MySQLParser::COMMA);
        setState(6089);
        expression(0);
        setState(6094);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(6095);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 8: {
      setState(6097);
      match(MySQLParser::ROW);
      setState(6098);
      match(MySQLParser::LR_BRACKET);
      setState(6099);
      expression(0);
      setState(6102); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(6100);
        match(MySQLParser::COMMA);
        setState(6101);
        expression(0);
        setState(6104); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySQLParser::COMMA);
      setState(6106);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 9: {
      setState(6108);
      match(MySQLParser::EXISTS);
      setState(6109);
      match(MySQLParser::LR_BRACKET);
      setState(6110);
      selectStatement();
      setState(6111);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 10: {
      setState(6113);
      match(MySQLParser::LR_BRACKET);
      setState(6114);
      selectStatement();
      setState(6115);
      match(MySQLParser::RR_BRACKET);
      break;
    }

    case 11: {
      setState(6117);
      match(MySQLParser::INTERVAL);
      setState(6118);
      expression(0);
      setState(6119);
      intervalType();
      break;
    }

    case 12: {
      setState(6121);
      match(MySQLParser::PLACEHOLDER_VALUE);
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(6137);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 895, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(6135);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 894, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionAtomContext>(parentContext, parentState);
          _localctx->left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionAtom);
          setState(6124);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(6125);
          bitOperator();
          setState(6126);
          dynamic_cast<ExpressionAtomContext *>(_localctx)->right = expressionAtom(4);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionAtomContext>(parentContext, parentState);
          _localctx->left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleExpressionAtom);
          setState(6128);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(6129);
          mathOperator();
          setState(6130);
          dynamic_cast<ExpressionAtomContext *>(_localctx)->right = expressionAtom(3);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionAtomContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpressionAtom);
          setState(6132);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(6133);
          match(MySQLParser::COLLATE);
          setState(6134);
          collationName();
          break;
        }

        } 
      }
      setState(6139);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 895, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

MySQLParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::UnaryOperatorContext::NOT() {
  return getToken(MySQLParser::NOT, 0);
}


size_t MySQLParser::UnaryOperatorContext::getRuleIndex() const {
  return MySQLParser::RuleUnaryOperator;
}

void MySQLParser::UnaryOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryOperator(this);
}

void MySQLParser::UnaryOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryOperator(this);
}


antlrcpp::Any MySQLParser::UnaryOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitUnaryOperator(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::UnaryOperatorContext* MySQLParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 606, MySQLParser::RuleUnaryOperator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6140);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::NOT || ((((_la - 948) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 948)) & ((1ULL << (MySQLParser::PLUS - 948))
      | (1ULL << (MySQLParser::MINUS - 948))
      | (1ULL << (MySQLParser::EXCLAMATION_SYMBOL - 948))
      | (1ULL << (MySQLParser::BIT_NOT_OP - 948)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

MySQLParser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::ComparisonOperatorContext::getRuleIndex() const {
  return MySQLParser::RuleComparisonOperator;
}

void MySQLParser::ComparisonOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonOperator(this);
}

void MySQLParser::ComparisonOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonOperator(this);
}


antlrcpp::Any MySQLParser::ComparisonOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitComparisonOperator(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::ComparisonOperatorContext* MySQLParser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 608, MySQLParser::RuleComparisonOperator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6156);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 896, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6142);
      match(MySQLParser::EQUAL_SYMBOL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6143);
      match(MySQLParser::GREATER_SYMBOL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6144);
      match(MySQLParser::LESS_SYMBOL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6145);
      match(MySQLParser::LESS_SYMBOL);
      setState(6146);
      match(MySQLParser::EQUAL_SYMBOL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6147);
      match(MySQLParser::GREATER_SYMBOL);
      setState(6148);
      match(MySQLParser::EQUAL_SYMBOL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6149);
      match(MySQLParser::LESS_SYMBOL);
      setState(6150);
      match(MySQLParser::GREATER_SYMBOL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6151);
      match(MySQLParser::EXCLAMATION_SYMBOL);
      setState(6152);
      match(MySQLParser::EQUAL_SYMBOL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(6153);
      match(MySQLParser::LESS_SYMBOL);
      setState(6154);
      match(MySQLParser::EQUAL_SYMBOL);
      setState(6155);
      match(MySQLParser::GREATER_SYMBOL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOperatorContext ------------------------------------------------------------------

MySQLParser::LogicalOperatorContext::LogicalOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::LogicalOperatorContext::AND() {
  return getToken(MySQLParser::AND, 0);
}

tree::TerminalNode* MySQLParser::LogicalOperatorContext::XOR() {
  return getToken(MySQLParser::XOR, 0);
}

tree::TerminalNode* MySQLParser::LogicalOperatorContext::OR() {
  return getToken(MySQLParser::OR, 0);
}


size_t MySQLParser::LogicalOperatorContext::getRuleIndex() const {
  return MySQLParser::RuleLogicalOperator;
}

void MySQLParser::LogicalOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalOperator(this);
}

void MySQLParser::LogicalOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalOperator(this);
}


antlrcpp::Any MySQLParser::LogicalOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitLogicalOperator(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::LogicalOperatorContext* MySQLParser::logicalOperator() {
  LogicalOperatorContext *_localctx = _tracker.createInstance<LogicalOperatorContext>(_ctx, getState());
  enterRule(_localctx, 610, MySQLParser::RuleLogicalOperator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6165);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::AND: {
        enterOuterAlt(_localctx, 1);
        setState(6158);
        match(MySQLParser::AND);
        break;
      }

      case MySQLParser::BIT_AND_OP: {
        enterOuterAlt(_localctx, 2);
        setState(6159);
        match(MySQLParser::BIT_AND_OP);
        setState(6160);
        match(MySQLParser::BIT_AND_OP);
        break;
      }

      case MySQLParser::XOR: {
        enterOuterAlt(_localctx, 3);
        setState(6161);
        match(MySQLParser::XOR);
        break;
      }

      case MySQLParser::OR: {
        enterOuterAlt(_localctx, 4);
        setState(6162);
        match(MySQLParser::OR);
        break;
      }

      case MySQLParser::BIT_OR_OP: {
        enterOuterAlt(_localctx, 5);
        setState(6163);
        match(MySQLParser::BIT_OR_OP);
        setState(6164);
        match(MySQLParser::BIT_OR_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitOperatorContext ------------------------------------------------------------------

MySQLParser::BitOperatorContext::BitOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySQLParser::BitOperatorContext::getRuleIndex() const {
  return MySQLParser::RuleBitOperator;
}

void MySQLParser::BitOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitOperator(this);
}

void MySQLParser::BitOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitOperator(this);
}


antlrcpp::Any MySQLParser::BitOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitBitOperator(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::BitOperatorContext* MySQLParser::bitOperator() {
  BitOperatorContext *_localctx = _tracker.createInstance<BitOperatorContext>(_ctx, getState());
  enterRule(_localctx, 612, MySQLParser::RuleBitOperator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6174);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySQLParser::LESS_SYMBOL: {
        enterOuterAlt(_localctx, 1);
        setState(6167);
        match(MySQLParser::LESS_SYMBOL);
        setState(6168);
        match(MySQLParser::LESS_SYMBOL);
        break;
      }

      case MySQLParser::GREATER_SYMBOL: {
        enterOuterAlt(_localctx, 2);
        setState(6169);
        match(MySQLParser::GREATER_SYMBOL);
        setState(6170);
        match(MySQLParser::GREATER_SYMBOL);
        break;
      }

      case MySQLParser::BIT_AND_OP: {
        enterOuterAlt(_localctx, 3);
        setState(6171);
        match(MySQLParser::BIT_AND_OP);
        break;
      }

      case MySQLParser::BIT_XOR_OP: {
        enterOuterAlt(_localctx, 4);
        setState(6172);
        match(MySQLParser::BIT_XOR_OP);
        break;
      }

      case MySQLParser::BIT_OR_OP: {
        enterOuterAlt(_localctx, 5);
        setState(6173);
        match(MySQLParser::BIT_OR_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MathOperatorContext ------------------------------------------------------------------

MySQLParser::MathOperatorContext::MathOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::MathOperatorContext::DIV() {
  return getToken(MySQLParser::DIV, 0);
}

tree::TerminalNode* MySQLParser::MathOperatorContext::MOD() {
  return getToken(MySQLParser::MOD, 0);
}


size_t MySQLParser::MathOperatorContext::getRuleIndex() const {
  return MySQLParser::RuleMathOperator;
}

void MySQLParser::MathOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMathOperator(this);
}

void MySQLParser::MathOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMathOperator(this);
}


antlrcpp::Any MySQLParser::MathOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitMathOperator(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::MathOperatorContext* MySQLParser::mathOperator() {
  MathOperatorContext *_localctx = _tracker.createInstance<MathOperatorContext>(_ctx, getState());
  enterRule(_localctx, 614, MySQLParser::RuleMathOperator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6176);
    _la = _input->LA(1);
    if (!(((((_la - 945) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 945)) & ((1ULL << (MySQLParser::STAR - 945))
      | (1ULL << (MySQLParser::DIVIDE - 945))
      | (1ULL << (MySQLParser::MODULE - 945))
      | (1ULL << (MySQLParser::PLUS - 945))
      | (1ULL << (MySQLParser::MINUSMINUS - 945))
      | (1ULL << (MySQLParser::MINUS - 945))
      | (1ULL << (MySQLParser::DIV - 945))
      | (1ULL << (MySQLParser::MOD - 945)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharsetNameBaseContext ------------------------------------------------------------------

MySQLParser::CharsetNameBaseContext::CharsetNameBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::ARMSCII8() {
  return getToken(MySQLParser::ARMSCII8, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::ASCII() {
  return getToken(MySQLParser::ASCII, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::BIG5() {
  return getToken(MySQLParser::BIG5, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP1250() {
  return getToken(MySQLParser::CP1250, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP1251() {
  return getToken(MySQLParser::CP1251, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP1256() {
  return getToken(MySQLParser::CP1256, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP1257() {
  return getToken(MySQLParser::CP1257, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP850() {
  return getToken(MySQLParser::CP850, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP852() {
  return getToken(MySQLParser::CP852, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP866() {
  return getToken(MySQLParser::CP866, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::CP932() {
  return getToken(MySQLParser::CP932, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::DEC8() {
  return getToken(MySQLParser::DEC8, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::EUCJPMS() {
  return getToken(MySQLParser::EUCJPMS, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::EUCKR() {
  return getToken(MySQLParser::EUCKR, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::GB2312() {
  return getToken(MySQLParser::GB2312, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::GBK() {
  return getToken(MySQLParser::GBK, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::GEOSTD8() {
  return getToken(MySQLParser::GEOSTD8, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::GREEK() {
  return getToken(MySQLParser::GREEK, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::HEBREW() {
  return getToken(MySQLParser::HEBREW, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::HP8() {
  return getToken(MySQLParser::HP8, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::KEYBCS2() {
  return getToken(MySQLParser::KEYBCS2, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::KOI8R() {
  return getToken(MySQLParser::KOI8R, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::KOI8U() {
  return getToken(MySQLParser::KOI8U, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::LATIN1() {
  return getToken(MySQLParser::LATIN1, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::LATIN2() {
  return getToken(MySQLParser::LATIN2, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::LATIN5() {
  return getToken(MySQLParser::LATIN5, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::LATIN7() {
  return getToken(MySQLParser::LATIN7, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::MACCE() {
  return getToken(MySQLParser::MACCE, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::MACROMAN() {
  return getToken(MySQLParser::MACROMAN, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::SJIS() {
  return getToken(MySQLParser::SJIS, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::SWE7() {
  return getToken(MySQLParser::SWE7, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::TIS620() {
  return getToken(MySQLParser::TIS620, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UCS2() {
  return getToken(MySQLParser::UCS2, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UJIS() {
  return getToken(MySQLParser::UJIS, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UTF16() {
  return getToken(MySQLParser::UTF16, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UTF16LE() {
  return getToken(MySQLParser::UTF16LE, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UTF32() {
  return getToken(MySQLParser::UTF32, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UTF8() {
  return getToken(MySQLParser::UTF8, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UTF8MB3() {
  return getToken(MySQLParser::UTF8MB3, 0);
}

tree::TerminalNode* MySQLParser::CharsetNameBaseContext::UTF8MB4() {
  return getToken(MySQLParser::UTF8MB4, 0);
}


size_t MySQLParser::CharsetNameBaseContext::getRuleIndex() const {
  return MySQLParser::RuleCharsetNameBase;
}

void MySQLParser::CharsetNameBaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharsetNameBase(this);
}

void MySQLParser::CharsetNameBaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharsetNameBase(this);
}


antlrcpp::Any MySQLParser::CharsetNameBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitCharsetNameBase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::CharsetNameBaseContext* MySQLParser::charsetNameBase() {
  CharsetNameBaseContext *_localctx = _tracker.createInstance<CharsetNameBaseContext>(_ctx, getState());
  enterRule(_localctx, 616, MySQLParser::RuleCharsetNameBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6178);
    _la = _input->LA(1);
    if (!(((((_la - 581) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 581)) & ((1ULL << (MySQLParser::ARMSCII8 - 581))
      | (1ULL << (MySQLParser::ASCII - 581))
      | (1ULL << (MySQLParser::BIG5 - 581))
      | (1ULL << (MySQLParser::CP1250 - 581))
      | (1ULL << (MySQLParser::CP1251 - 581))
      | (1ULL << (MySQLParser::CP1256 - 581))
      | (1ULL << (MySQLParser::CP1257 - 581))
      | (1ULL << (MySQLParser::CP850 - 581))
      | (1ULL << (MySQLParser::CP852 - 581))
      | (1ULL << (MySQLParser::CP866 - 581))
      | (1ULL << (MySQLParser::CP932 - 581))
      | (1ULL << (MySQLParser::DEC8 - 581))
      | (1ULL << (MySQLParser::EUCJPMS - 581))
      | (1ULL << (MySQLParser::EUCKR - 581))
      | (1ULL << (MySQLParser::GB2312 - 581))
      | (1ULL << (MySQLParser::GBK - 581))
      | (1ULL << (MySQLParser::GEOSTD8 - 581))
      | (1ULL << (MySQLParser::GREEK - 581))
      | (1ULL << (MySQLParser::HEBREW - 581))
      | (1ULL << (MySQLParser::HP8 - 581))
      | (1ULL << (MySQLParser::KEYBCS2 - 581))
      | (1ULL << (MySQLParser::KOI8R - 581))
      | (1ULL << (MySQLParser::KOI8U - 581))
      | (1ULL << (MySQLParser::LATIN1 - 581))
      | (1ULL << (MySQLParser::LATIN2 - 581))
      | (1ULL << (MySQLParser::LATIN5 - 581))
      | (1ULL << (MySQLParser::LATIN7 - 581))
      | (1ULL << (MySQLParser::MACCE - 581))
      | (1ULL << (MySQLParser::MACROMAN - 581))
      | (1ULL << (MySQLParser::SJIS - 581))
      | (1ULL << (MySQLParser::SWE7 - 581))
      | (1ULL << (MySQLParser::TIS620 - 581))
      | (1ULL << (MySQLParser::UCS2 - 581))
      | (1ULL << (MySQLParser::UJIS - 581))
      | (1ULL << (MySQLParser::UTF16 - 581))
      | (1ULL << (MySQLParser::UTF16LE - 581))
      | (1ULL << (MySQLParser::UTF32 - 581))
      | (1ULL << (MySQLParser::UTF8 - 581))
      | (1ULL << (MySQLParser::UTF8MB3 - 581))
      | (1ULL << (MySQLParser::UTF8MB4 - 581)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionLevelBaseContext ------------------------------------------------------------------

MySQLParser::TransactionLevelBaseContext::TransactionLevelBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::TransactionLevelBaseContext::REPEATABLE() {
  return getToken(MySQLParser::REPEATABLE, 0);
}

tree::TerminalNode* MySQLParser::TransactionLevelBaseContext::COMMITTED() {
  return getToken(MySQLParser::COMMITTED, 0);
}

tree::TerminalNode* MySQLParser::TransactionLevelBaseContext::UNCOMMITTED() {
  return getToken(MySQLParser::UNCOMMITTED, 0);
}

tree::TerminalNode* MySQLParser::TransactionLevelBaseContext::SERIALIZABLE() {
  return getToken(MySQLParser::SERIALIZABLE, 0);
}


size_t MySQLParser::TransactionLevelBaseContext::getRuleIndex() const {
  return MySQLParser::RuleTransactionLevelBase;
}

void MySQLParser::TransactionLevelBaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransactionLevelBase(this);
}

void MySQLParser::TransactionLevelBaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransactionLevelBase(this);
}


antlrcpp::Any MySQLParser::TransactionLevelBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionLevelBase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::TransactionLevelBaseContext* MySQLParser::transactionLevelBase() {
  TransactionLevelBaseContext *_localctx = _tracker.createInstance<TransactionLevelBaseContext>(_ctx, getState());
  enterRule(_localctx, 618, MySQLParser::RuleTransactionLevelBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6180);
    _la = _input->LA(1);
    if (!(((((_la - 633) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 633)) & ((1ULL << (MySQLParser::REPEATABLE - 633))
      | (1ULL << (MySQLParser::COMMITTED - 633))
      | (1ULL << (MySQLParser::UNCOMMITTED - 633))
      | (1ULL << (MySQLParser::SERIALIZABLE - 633)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegesBaseContext ------------------------------------------------------------------

MySQLParser::PrivilegesBaseContext::PrivilegesBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::TABLES() {
  return getToken(MySQLParser::TABLES, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::ROUTINE() {
  return getToken(MySQLParser::ROUTINE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::EXECUTE() {
  return getToken(MySQLParser::EXECUTE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::FILE() {
  return getToken(MySQLParser::FILE, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::PROCESS() {
  return getToken(MySQLParser::PROCESS, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::RELOAD() {
  return getToken(MySQLParser::RELOAD, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::SHUTDOWN() {
  return getToken(MySQLParser::SHUTDOWN, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::SUPER() {
  return getToken(MySQLParser::SUPER, 0);
}

tree::TerminalNode* MySQLParser::PrivilegesBaseContext::PRIVILEGES() {
  return getToken(MySQLParser::PRIVILEGES, 0);
}


size_t MySQLParser::PrivilegesBaseContext::getRuleIndex() const {
  return MySQLParser::RulePrivilegesBase;
}

void MySQLParser::PrivilegesBaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivilegesBase(this);
}

void MySQLParser::PrivilegesBaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivilegesBase(this);
}


antlrcpp::Any MySQLParser::PrivilegesBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitPrivilegesBase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::PrivilegesBaseContext* MySQLParser::privilegesBase() {
  PrivilegesBaseContext *_localctx = _tracker.createInstance<PrivilegesBaseContext>(_ctx, getState());
  enterRule(_localctx, 620, MySQLParser::RulePrivilegesBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6182);
    _la = _input->LA(1);
    if (!(((((_la - 571) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 571)) & ((1ULL << (MySQLParser::TABLES - 571))
      | (1ULL << (MySQLParser::ROUTINE - 571))
      | (1ULL << (MySQLParser::EXECUTE - 571))
      | (1ULL << (MySQLParser::FILE - 571))
      | (1ULL << (MySQLParser::PROCESS - 571))
      | (1ULL << (MySQLParser::RELOAD - 571))
      | (1ULL << (MySQLParser::SHUTDOWN - 571))
      | (1ULL << (MySQLParser::SUPER - 571))
      | (1ULL << (MySQLParser::PRIVILEGES - 571)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalTypeBaseContext ------------------------------------------------------------------

MySQLParser::IntervalTypeBaseContext::IntervalTypeBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::QUARTER() {
  return getToken(MySQLParser::QUARTER, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::MONTH() {
  return getToken(MySQLParser::MONTH, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::DAY() {
  return getToken(MySQLParser::DAY, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::HOUR() {
  return getToken(MySQLParser::HOUR, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::MINUTE() {
  return getToken(MySQLParser::MINUTE, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::WEEK() {
  return getToken(MySQLParser::WEEK, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::SECOND() {
  return getToken(MySQLParser::SECOND, 0);
}

tree::TerminalNode* MySQLParser::IntervalTypeBaseContext::MICROSECOND() {
  return getToken(MySQLParser::MICROSECOND, 0);
}


size_t MySQLParser::IntervalTypeBaseContext::getRuleIndex() const {
  return MySQLParser::RuleIntervalTypeBase;
}

void MySQLParser::IntervalTypeBaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalTypeBase(this);
}

void MySQLParser::IntervalTypeBaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalTypeBase(this);
}


antlrcpp::Any MySQLParser::IntervalTypeBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitIntervalTypeBase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::IntervalTypeBaseContext* MySQLParser::intervalTypeBase() {
  IntervalTypeBaseContext *_localctx = _tracker.createInstance<IntervalTypeBaseContext>(_ctx, getState());
  enterRule(_localctx, 622, MySQLParser::RuleIntervalTypeBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6184);
    _la = _input->LA(1);
    if (!(((((_la - 563) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 563)) & ((1ULL << (MySQLParser::QUARTER - 563))
      | (1ULL << (MySQLParser::MONTH - 563))
      | (1ULL << (MySQLParser::DAY - 563))
      | (1ULL << (MySQLParser::HOUR - 563))
      | (1ULL << (MySQLParser::MINUTE - 563))
      | (1ULL << (MySQLParser::WEEK - 563))
      | (1ULL << (MySQLParser::SECOND - 563))
      | (1ULL << (MySQLParser::MICROSECOND - 563)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeBaseContext ------------------------------------------------------------------

MySQLParser::DataTypeBaseContext::DataTypeBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::DataTypeBaseContext::DATE() {
  return getToken(MySQLParser::DATE, 0);
}

tree::TerminalNode* MySQLParser::DataTypeBaseContext::TIME() {
  return getToken(MySQLParser::TIME, 0);
}

tree::TerminalNode* MySQLParser::DataTypeBaseContext::TIMESTAMP() {
  return getToken(MySQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::DataTypeBaseContext::DATETIME() {
  return getToken(MySQLParser::DATETIME, 0);
}

tree::TerminalNode* MySQLParser::DataTypeBaseContext::YEAR() {
  return getToken(MySQLParser::YEAR, 0);
}

tree::TerminalNode* MySQLParser::DataTypeBaseContext::ENUM() {
  return getToken(MySQLParser::ENUM, 0);
}

tree::TerminalNode* MySQLParser::DataTypeBaseContext::TEXT() {
  return getToken(MySQLParser::TEXT, 0);
}


size_t MySQLParser::DataTypeBaseContext::getRuleIndex() const {
  return MySQLParser::RuleDataTypeBase;
}

void MySQLParser::DataTypeBaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataTypeBase(this);
}

void MySQLParser::DataTypeBaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataTypeBase(this);
}


antlrcpp::Any MySQLParser::DataTypeBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitDataTypeBase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::DataTypeBaseContext* MySQLParser::dataTypeBase() {
  DataTypeBaseContext *_localctx = _tracker.createInstance<DataTypeBaseContext>(_ctx, getState());
  enterRule(_localctx, 624, MySQLParser::RuleDataTypeBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6186);
    _la = _input->LA(1);
    if (!(((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::DATETIME - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::TEXT - 184))
      | (1ULL << (MySQLParser::ENUM - 184)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordsCanBeIdContext ------------------------------------------------------------------

MySQLParser::KeywordsCanBeIdContext::KeywordsCanBeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ACCOUNT() {
  return getToken(MySQLParser::ACCOUNT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ACTION() {
  return getToken(MySQLParser::ACTION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AFTER() {
  return getToken(MySQLParser::AFTER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AGGREGATE() {
  return getToken(MySQLParser::AGGREGATE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ALGORITHM() {
  return getToken(MySQLParser::ALGORITHM, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ANY() {
  return getToken(MySQLParser::ANY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AT() {
  return getToken(MySQLParser::AT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AUTHORS() {
  return getToken(MySQLParser::AUTHORS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AUTOCOMMIT() {
  return getToken(MySQLParser::AUTOCOMMIT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AUTOEXTEND_SIZE() {
  return getToken(MySQLParser::AUTOEXTEND_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AUTO_INCREMENT() {
  return getToken(MySQLParser::AUTO_INCREMENT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::AVG_ROW_LENGTH() {
  return getToken(MySQLParser::AVG_ROW_LENGTH, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::BEGIN() {
  return getToken(MySQLParser::BEGIN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::BINLOG() {
  return getToken(MySQLParser::BINLOG, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::BIT() {
  return getToken(MySQLParser::BIT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::BLOCK() {
  return getToken(MySQLParser::BLOCK, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::BOOL() {
  return getToken(MySQLParser::BOOL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::BOOLEAN() {
  return getToken(MySQLParser::BOOLEAN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::BTREE() {
  return getToken(MySQLParser::BTREE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CACHE() {
  return getToken(MySQLParser::CACHE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CASCADED() {
  return getToken(MySQLParser::CASCADED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CHAIN() {
  return getToken(MySQLParser::CHAIN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CHANGED() {
  return getToken(MySQLParser::CHANGED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CHANNEL() {
  return getToken(MySQLParser::CHANNEL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CHECKSUM() {
  return getToken(MySQLParser::CHECKSUM, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PAGE_CHECKSUM() {
  return getToken(MySQLParser::PAGE_CHECKSUM, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CIPHER() {
  return getToken(MySQLParser::CIPHER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CLIENT() {
  return getToken(MySQLParser::CLIENT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CLOSE() {
  return getToken(MySQLParser::CLOSE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COALESCE() {
  return getToken(MySQLParser::COALESCE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CODE() {
  return getToken(MySQLParser::CODE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COLUMNS() {
  return getToken(MySQLParser::COLUMNS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COLUMN_FORMAT() {
  return getToken(MySQLParser::COLUMN_FORMAT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COMMENT() {
  return getToken(MySQLParser::COMMENT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COMMIT() {
  return getToken(MySQLParser::COMMIT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COMPACT() {
  return getToken(MySQLParser::COMPACT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COMPLETION() {
  return getToken(MySQLParser::COMPLETION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COMPRESSED() {
  return getToken(MySQLParser::COMPRESSED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COMPRESSION() {
  return getToken(MySQLParser::COMPRESSION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CONCURRENT() {
  return getToken(MySQLParser::CONCURRENT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CONNECTION() {
  return getToken(MySQLParser::CONNECTION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CONSISTENT() {
  return getToken(MySQLParser::CONSISTENT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CONTAINS() {
  return getToken(MySQLParser::CONTAINS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CONTEXT() {
  return getToken(MySQLParser::CONTEXT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CONTRIBUTORS() {
  return getToken(MySQLParser::CONTRIBUTORS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::COPY() {
  return getToken(MySQLParser::COPY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::CPU() {
  return getToken(MySQLParser::CPU, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DATA() {
  return getToken(MySQLParser::DATA, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DATAFILE() {
  return getToken(MySQLParser::DATAFILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DEALLOCATE() {
  return getToken(MySQLParser::DEALLOCATE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DEFAULT_AUTH() {
  return getToken(MySQLParser::DEFAULT_AUTH, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DEFINER() {
  return getToken(MySQLParser::DEFINER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DELAY_KEY_WRITE() {
  return getToken(MySQLParser::DELAY_KEY_WRITE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DES_KEY_FILE() {
  return getToken(MySQLParser::DES_KEY_FILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DIRECTORY() {
  return getToken(MySQLParser::DIRECTORY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DISABLE() {
  return getToken(MySQLParser::DISABLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DISCARD() {
  return getToken(MySQLParser::DISCARD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DISK() {
  return getToken(MySQLParser::DISK, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DO() {
  return getToken(MySQLParser::DO, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DUMPFILE() {
  return getToken(MySQLParser::DUMPFILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DUPLICATE() {
  return getToken(MySQLParser::DUPLICATE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::DYNAMIC() {
  return getToken(MySQLParser::DYNAMIC, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ENABLE() {
  return getToken(MySQLParser::ENABLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ENCRYPTION() {
  return getToken(MySQLParser::ENCRYPTION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::END() {
  return getToken(MySQLParser::END, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ENDS() {
  return getToken(MySQLParser::ENDS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ENGINE() {
  return getToken(MySQLParser::ENGINE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ENGINES() {
  return getToken(MySQLParser::ENGINES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ERROR() {
  return getToken(MySQLParser::ERROR, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ERRORS() {
  return getToken(MySQLParser::ERRORS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ESCAPE() {
  return getToken(MySQLParser::ESCAPE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EVEN() {
  return getToken(MySQLParser::EVEN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EVENT() {
  return getToken(MySQLParser::EVENT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EVENTS() {
  return getToken(MySQLParser::EVENTS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EVERY() {
  return getToken(MySQLParser::EVERY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EXCHANGE() {
  return getToken(MySQLParser::EXCHANGE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EXCLUSIVE() {
  return getToken(MySQLParser::EXCLUSIVE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EXPIRE() {
  return getToken(MySQLParser::EXPIRE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EXPORT() {
  return getToken(MySQLParser::EXPORT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EXTENDED() {
  return getToken(MySQLParser::EXTENDED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::EXTENT_SIZE() {
  return getToken(MySQLParser::EXTENT_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FAST() {
  return getToken(MySQLParser::FAST, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FAULTS() {
  return getToken(MySQLParser::FAULTS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FIELDS() {
  return getToken(MySQLParser::FIELDS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FILE_BLOCK_SIZE() {
  return getToken(MySQLParser::FILE_BLOCK_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FILTER() {
  return getToken(MySQLParser::FILTER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FIRST() {
  return getToken(MySQLParser::FIRST, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FIXED() {
  return getToken(MySQLParser::FIXED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FLUSH() {
  return getToken(MySQLParser::FLUSH, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FOLLOWS() {
  return getToken(MySQLParser::FOLLOWS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FOUND() {
  return getToken(MySQLParser::FOUND, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FULL() {
  return getToken(MySQLParser::FULL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::FUNCTION() {
  return getToken(MySQLParser::FUNCTION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::GENERAL() {
  return getToken(MySQLParser::GENERAL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::GLOBAL() {
  return getToken(MySQLParser::GLOBAL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::GRANTS() {
  return getToken(MySQLParser::GRANTS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::GROUP_REPLICATION() {
  return getToken(MySQLParser::GROUP_REPLICATION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::HANDLER() {
  return getToken(MySQLParser::HANDLER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::HASH() {
  return getToken(MySQLParser::HASH, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::HELP() {
  return getToken(MySQLParser::HELP, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::HOST() {
  return getToken(MySQLParser::HOST, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::HOSTS() {
  return getToken(MySQLParser::HOSTS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::IDENTIFIED() {
  return getToken(MySQLParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::IGNORE_SERVER_IDS() {
  return getToken(MySQLParser::IGNORE_SERVER_IDS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::IMPORT() {
  return getToken(MySQLParser::IMPORT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INDEXES() {
  return getToken(MySQLParser::INDEXES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INITIAL_SIZE() {
  return getToken(MySQLParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INPLACE() {
  return getToken(MySQLParser::INPLACE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INSERT_METHOD() {
  return getToken(MySQLParser::INSERT_METHOD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INSTALL() {
  return getToken(MySQLParser::INSTALL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INSTANCE() {
  return getToken(MySQLParser::INSTANCE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INTERNAL() {
  return getToken(MySQLParser::INTERNAL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::INVOKER() {
  return getToken(MySQLParser::INVOKER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::IO() {
  return getToken(MySQLParser::IO, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::IO_THREAD() {
  return getToken(MySQLParser::IO_THREAD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::IPC() {
  return getToken(MySQLParser::IPC, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ISOLATION() {
  return getToken(MySQLParser::ISOLATION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ISSUER() {
  return getToken(MySQLParser::ISSUER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::JSON() {
  return getToken(MySQLParser::JSON, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::KEY_BLOCK_SIZE() {
  return getToken(MySQLParser::KEY_BLOCK_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LANGUAGE() {
  return getToken(MySQLParser::LANGUAGE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LAST() {
  return getToken(MySQLParser::LAST, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LEAVES() {
  return getToken(MySQLParser::LEAVES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LESS() {
  return getToken(MySQLParser::LESS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LEVEL() {
  return getToken(MySQLParser::LEVEL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LIST() {
  return getToken(MySQLParser::LIST, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LOCAL() {
  return getToken(MySQLParser::LOCAL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LOGFILE() {
  return getToken(MySQLParser::LOGFILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::LOGS() {
  return getToken(MySQLParser::LOGS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER() {
  return getToken(MySQLParser::MASTER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_AUTO_POSITION() {
  return getToken(MySQLParser::MASTER_AUTO_POSITION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_CONNECT_RETRY() {
  return getToken(MySQLParser::MASTER_CONNECT_RETRY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_DELAY() {
  return getToken(MySQLParser::MASTER_DELAY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_HEARTBEAT_PERIOD() {
  return getToken(MySQLParser::MASTER_HEARTBEAT_PERIOD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_HOST() {
  return getToken(MySQLParser::MASTER_HOST, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_LOG_FILE() {
  return getToken(MySQLParser::MASTER_LOG_FILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_LOG_POS() {
  return getToken(MySQLParser::MASTER_LOG_POS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_PASSWORD() {
  return getToken(MySQLParser::MASTER_PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_PORT() {
  return getToken(MySQLParser::MASTER_PORT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_RETRY_COUNT() {
  return getToken(MySQLParser::MASTER_RETRY_COUNT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL() {
  return getToken(MySQLParser::MASTER_SSL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL_CA() {
  return getToken(MySQLParser::MASTER_SSL_CA, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL_CAPATH() {
  return getToken(MySQLParser::MASTER_SSL_CAPATH, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL_CERT() {
  return getToken(MySQLParser::MASTER_SSL_CERT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL_CIPHER() {
  return getToken(MySQLParser::MASTER_SSL_CIPHER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL_CRL() {
  return getToken(MySQLParser::MASTER_SSL_CRL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL_CRLPATH() {
  return getToken(MySQLParser::MASTER_SSL_CRLPATH, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_SSL_KEY() {
  return getToken(MySQLParser::MASTER_SSL_KEY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_TLS_VERSION() {
  return getToken(MySQLParser::MASTER_TLS_VERSION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MASTER_USER() {
  return getToken(MySQLParser::MASTER_USER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MAX_CONNECTIONS_PER_HOUR() {
  return getToken(MySQLParser::MAX_CONNECTIONS_PER_HOUR, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MAX_QUERIES_PER_HOUR() {
  return getToken(MySQLParser::MAX_QUERIES_PER_HOUR, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MAX_ROWS() {
  return getToken(MySQLParser::MAX_ROWS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MAX_SIZE() {
  return getToken(MySQLParser::MAX_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MAX_UPDATES_PER_HOUR() {
  return getToken(MySQLParser::MAX_UPDATES_PER_HOUR, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MAX_USER_CONNECTIONS() {
  return getToken(MySQLParser::MAX_USER_CONNECTIONS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MEDIUM() {
  return getToken(MySQLParser::MEDIUM, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MEMORY() {
  return getToken(MySQLParser::MEMORY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MERGE() {
  return getToken(MySQLParser::MERGE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MID() {
  return getToken(MySQLParser::MID, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MIGRATE() {
  return getToken(MySQLParser::MIGRATE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MIN_ROWS() {
  return getToken(MySQLParser::MIN_ROWS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MODE() {
  return getToken(MySQLParser::MODE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MODIFY() {
  return getToken(MySQLParser::MODIFY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MUTEX() {
  return getToken(MySQLParser::MUTEX, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::MYSQL() {
  return getToken(MySQLParser::MYSQL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NAME() {
  return getToken(MySQLParser::NAME, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NAMES() {
  return getToken(MySQLParser::NAMES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NCHAR() {
  return getToken(MySQLParser::NCHAR, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NEVER() {
  return getToken(MySQLParser::NEVER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NEXT() {
  return getToken(MySQLParser::NEXT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NO() {
  return getToken(MySQLParser::NO, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NODEGROUP() {
  return getToken(MySQLParser::NODEGROUP, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::NONE() {
  return getToken(MySQLParser::NONE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OFFLINE() {
  return getToken(MySQLParser::OFFLINE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OFFSET() {
  return getToken(MySQLParser::OFFSET, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OJ() {
  return getToken(MySQLParser::OJ, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OLD_PASSWORD() {
  return getToken(MySQLParser::OLD_PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ONE() {
  return getToken(MySQLParser::ONE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ONLINE() {
  return getToken(MySQLParser::ONLINE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ONLY() {
  return getToken(MySQLParser::ONLY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OPEN() {
  return getToken(MySQLParser::OPEN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OPTIMIZER_COSTS() {
  return getToken(MySQLParser::OPTIMIZER_COSTS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OPTIONS() {
  return getToken(MySQLParser::OPTIONS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::OWNER() {
  return getToken(MySQLParser::OWNER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PACK_KEYS() {
  return getToken(MySQLParser::PACK_KEYS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PAGE() {
  return getToken(MySQLParser::PAGE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PARSER() {
  return getToken(MySQLParser::PARSER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PARTIAL() {
  return getToken(MySQLParser::PARTIAL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PARTITIONING() {
  return getToken(MySQLParser::PARTITIONING, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PARTITIONS() {
  return getToken(MySQLParser::PARTITIONS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PASSWORD() {
  return getToken(MySQLParser::PASSWORD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PHASE() {
  return getToken(MySQLParser::PHASE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PLUGINS() {
  return getToken(MySQLParser::PLUGINS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PLUGIN_DIR() {
  return getToken(MySQLParser::PLUGIN_DIR, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PLUGIN() {
  return getToken(MySQLParser::PLUGIN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PORT() {
  return getToken(MySQLParser::PORT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PRECEDES() {
  return getToken(MySQLParser::PRECEDES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PREPARE() {
  return getToken(MySQLParser::PREPARE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PRESERVE() {
  return getToken(MySQLParser::PRESERVE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PREV() {
  return getToken(MySQLParser::PREV, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PROCESSLIST() {
  return getToken(MySQLParser::PROCESSLIST, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PROFILE() {
  return getToken(MySQLParser::PROFILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PROFILES() {
  return getToken(MySQLParser::PROFILES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::PROXY() {
  return getToken(MySQLParser::PROXY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::QUERY() {
  return getToken(MySQLParser::QUERY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::QUICK() {
  return getToken(MySQLParser::QUICK, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REBUILD() {
  return getToken(MySQLParser::REBUILD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RECOVER() {
  return getToken(MySQLParser::RECOVER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REDO_BUFFER_SIZE() {
  return getToken(MySQLParser::REDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REDUNDANT() {
  return getToken(MySQLParser::REDUNDANT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RELAY() {
  return getToken(MySQLParser::RELAY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RELAYLOG() {
  return getToken(MySQLParser::RELAYLOG, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RELAY_LOG_FILE() {
  return getToken(MySQLParser::RELAY_LOG_FILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RELAY_LOG_POS() {
  return getToken(MySQLParser::RELAY_LOG_POS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REMOVE() {
  return getToken(MySQLParser::REMOVE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REORGANIZE() {
  return getToken(MySQLParser::REORGANIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPAIR() {
  return getToken(MySQLParser::REPAIR, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATE_DO_DB() {
  return getToken(MySQLParser::REPLICATE_DO_DB, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATE_DO_TABLE() {
  return getToken(MySQLParser::REPLICATE_DO_TABLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATE_IGNORE_DB() {
  return getToken(MySQLParser::REPLICATE_IGNORE_DB, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATE_IGNORE_TABLE() {
  return getToken(MySQLParser::REPLICATE_IGNORE_TABLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATE_REWRITE_DB() {
  return getToken(MySQLParser::REPLICATE_REWRITE_DB, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATE_WILD_DO_TABLE() {
  return getToken(MySQLParser::REPLICATE_WILD_DO_TABLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATE_WILD_IGNORE_TABLE() {
  return getToken(MySQLParser::REPLICATE_WILD_IGNORE_TABLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::REPLICATION() {
  return getToken(MySQLParser::REPLICATION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RESET() {
  return getToken(MySQLParser::RESET, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RESUME() {
  return getToken(MySQLParser::RESUME, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::RETURNS() {
  return getToken(MySQLParser::RETURNS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ROLLBACK() {
  return getToken(MySQLParser::ROLLBACK, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ROLLUP() {
  return getToken(MySQLParser::ROLLUP, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ROTATE() {
  return getToken(MySQLParser::ROTATE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ROW() {
  return getToken(MySQLParser::ROW, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ROWS() {
  return getToken(MySQLParser::ROWS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::ROW_FORMAT() {
  return getToken(MySQLParser::ROW_FORMAT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SAVEPOINT() {
  return getToken(MySQLParser::SAVEPOINT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SCHEDULE() {
  return getToken(MySQLParser::SCHEDULE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SECURITY() {
  return getToken(MySQLParser::SECURITY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SERIAL() {
  return getToken(MySQLParser::SERIAL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SERVER() {
  return getToken(MySQLParser::SERVER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SESSION() {
  return getToken(MySQLParser::SESSION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SHARE() {
  return getToken(MySQLParser::SHARE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SHARED() {
  return getToken(MySQLParser::SHARED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SIGNED() {
  return getToken(MySQLParser::SIGNED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SIMPLE() {
  return getToken(MySQLParser::SIMPLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SLAVE() {
  return getToken(MySQLParser::SLAVE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SLOW() {
  return getToken(MySQLParser::SLOW, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SNAPSHOT() {
  return getToken(MySQLParser::SNAPSHOT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SOCKET() {
  return getToken(MySQLParser::SOCKET, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SOME() {
  return getToken(MySQLParser::SOME, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SONAME() {
  return getToken(MySQLParser::SONAME, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SOUNDS() {
  return getToken(MySQLParser::SOUNDS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SOURCE() {
  return getToken(MySQLParser::SOURCE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SQL_AFTER_GTIDS() {
  return getToken(MySQLParser::SQL_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SQL_AFTER_MTS_GAPS() {
  return getToken(MySQLParser::SQL_AFTER_MTS_GAPS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SQL_BEFORE_GTIDS() {
  return getToken(MySQLParser::SQL_BEFORE_GTIDS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SQL_BUFFER_RESULT() {
  return getToken(MySQLParser::SQL_BUFFER_RESULT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SQL_CACHE() {
  return getToken(MySQLParser::SQL_CACHE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SQL_NO_CACHE() {
  return getToken(MySQLParser::SQL_NO_CACHE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SQL_THREAD() {
  return getToken(MySQLParser::SQL_THREAD, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::START() {
  return getToken(MySQLParser::START, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STARTS() {
  return getToken(MySQLParser::STARTS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STATS_AUTO_RECALC() {
  return getToken(MySQLParser::STATS_AUTO_RECALC, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STATS_PERSISTENT() {
  return getToken(MySQLParser::STATS_PERSISTENT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STATS_SAMPLE_PAGES() {
  return getToken(MySQLParser::STATS_SAMPLE_PAGES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STATUS() {
  return getToken(MySQLParser::STATUS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STOP() {
  return getToken(MySQLParser::STOP, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STORAGE() {
  return getToken(MySQLParser::STORAGE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::STRING() {
  return getToken(MySQLParser::STRING, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SUBJECT() {
  return getToken(MySQLParser::SUBJECT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SUBPARTITION() {
  return getToken(MySQLParser::SUBPARTITION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SUBPARTITIONS() {
  return getToken(MySQLParser::SUBPARTITIONS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SUSPEND() {
  return getToken(MySQLParser::SUSPEND, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SWAPS() {
  return getToken(MySQLParser::SWAPS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::SWITCHES() {
  return getToken(MySQLParser::SWITCHES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::TABLESPACE() {
  return getToken(MySQLParser::TABLESPACE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::TEMPORARY() {
  return getToken(MySQLParser::TEMPORARY, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::TEMPTABLE() {
  return getToken(MySQLParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::THAN() {
  return getToken(MySQLParser::THAN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::TRADITIONAL() {
  return getToken(MySQLParser::TRADITIONAL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::TRANSACTION() {
  return getToken(MySQLParser::TRANSACTION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::TRIGGERS() {
  return getToken(MySQLParser::TRIGGERS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::TRUNCATE() {
  return getToken(MySQLParser::TRUNCATE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::UNDEFINED() {
  return getToken(MySQLParser::UNDEFINED, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::UNDOFILE() {
  return getToken(MySQLParser::UNDOFILE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::UNDO_BUFFER_SIZE() {
  return getToken(MySQLParser::UNDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::UNINSTALL() {
  return getToken(MySQLParser::UNINSTALL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::UNKNOWN() {
  return getToken(MySQLParser::UNKNOWN, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::UNTIL() {
  return getToken(MySQLParser::UNTIL, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::UPGRADE() {
  return getToken(MySQLParser::UPGRADE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::USER() {
  return getToken(MySQLParser::USER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::USE_FRM() {
  return getToken(MySQLParser::USE_FRM, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::USER_RESOURCES() {
  return getToken(MySQLParser::USER_RESOURCES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::VALIDATION() {
  return getToken(MySQLParser::VALIDATION, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::VALUE() {
  return getToken(MySQLParser::VALUE, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::VARIABLES() {
  return getToken(MySQLParser::VARIABLES, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::VIEW() {
  return getToken(MySQLParser::VIEW, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::WAIT() {
  return getToken(MySQLParser::WAIT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::WARNINGS() {
  return getToken(MySQLParser::WARNINGS, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::WITHOUT() {
  return getToken(MySQLParser::WITHOUT, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::WORK() {
  return getToken(MySQLParser::WORK, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::WRAPPER() {
  return getToken(MySQLParser::WRAPPER, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::X509() {
  return getToken(MySQLParser::X509, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::XA() {
  return getToken(MySQLParser::XA, 0);
}

tree::TerminalNode* MySQLParser::KeywordsCanBeIdContext::XML() {
  return getToken(MySQLParser::XML, 0);
}


size_t MySQLParser::KeywordsCanBeIdContext::getRuleIndex() const {
  return MySQLParser::RuleKeywordsCanBeId;
}

void MySQLParser::KeywordsCanBeIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeywordsCanBeId(this);
}

void MySQLParser::KeywordsCanBeIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeywordsCanBeId(this);
}


antlrcpp::Any MySQLParser::KeywordsCanBeIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitKeywordsCanBeId(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::KeywordsCanBeIdContext* MySQLParser::keywordsCanBeId() {
  KeywordsCanBeIdContext *_localctx = _tracker.createInstance<KeywordsCanBeIdContext>(_ctx, getState());
  enterRule(_localctx, 626, MySQLParser::RuleKeywordsCanBeId);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6188);
    _la = _input->LA(1);
    if (!(((((_la - 205) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 205)) & ((1ULL << (MySQLParser::SERIAL - 205))
      | (1ULL << (MySQLParser::ACCOUNT - 205))
      | (1ULL << (MySQLParser::ACTION - 205))
      | (1ULL << (MySQLParser::AFTER - 205))
      | (1ULL << (MySQLParser::AGGREGATE - 205))
      | (1ULL << (MySQLParser::ALGORITHM - 205))
      | (1ULL << (MySQLParser::ANY - 205))
      | (1ULL << (MySQLParser::AT - 205))
      | (1ULL << (MySQLParser::AUTHORS - 205))
      | (1ULL << (MySQLParser::AUTOCOMMIT - 205))
      | (1ULL << (MySQLParser::AUTOEXTEND_SIZE - 205))
      | (1ULL << (MySQLParser::AUTO_INCREMENT - 205))
      | (1ULL << (MySQLParser::AVG_ROW_LENGTH - 205))
      | (1ULL << (MySQLParser::BEGIN - 205))
      | (1ULL << (MySQLParser::BINLOG - 205))
      | (1ULL << (MySQLParser::BIT - 205))
      | (1ULL << (MySQLParser::BLOCK - 205))
      | (1ULL << (MySQLParser::BOOL - 205)))) != 0) || ((((_la - 269) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 269)) & ((1ULL << (MySQLParser::BOOLEAN - 269))
      | (1ULL << (MySQLParser::BTREE - 269))
      | (1ULL << (MySQLParser::CACHE - 269))
      | (1ULL << (MySQLParser::CASCADED - 269))
      | (1ULL << (MySQLParser::CHAIN - 269))
      | (1ULL << (MySQLParser::CHANGED - 269))
      | (1ULL << (MySQLParser::CHANNEL - 269))
      | (1ULL << (MySQLParser::CHECKSUM - 269))
      | (1ULL << (MySQLParser::PAGE_CHECKSUM - 269))
      | (1ULL << (MySQLParser::CIPHER - 269))
      | (1ULL << (MySQLParser::CLIENT - 269))
      | (1ULL << (MySQLParser::CLOSE - 269))
      | (1ULL << (MySQLParser::COALESCE - 269))
      | (1ULL << (MySQLParser::CODE - 269))
      | (1ULL << (MySQLParser::COLUMNS - 269))
      | (1ULL << (MySQLParser::COLUMN_FORMAT - 269))
      | (1ULL << (MySQLParser::COMMENT - 269))
      | (1ULL << (MySQLParser::COMMIT - 269))
      | (1ULL << (MySQLParser::COMPACT - 269))
      | (1ULL << (MySQLParser::COMPLETION - 269))
      | (1ULL << (MySQLParser::COMPRESSED - 269))
      | (1ULL << (MySQLParser::COMPRESSION - 269))
      | (1ULL << (MySQLParser::CONCURRENT - 269))
      | (1ULL << (MySQLParser::CONNECTION - 269))
      | (1ULL << (MySQLParser::CONSISTENT - 269))
      | (1ULL << (MySQLParser::CONTAINS - 269))
      | (1ULL << (MySQLParser::CONTEXT - 269))
      | (1ULL << (MySQLParser::CONTRIBUTORS - 269))
      | (1ULL << (MySQLParser::COPY - 269))
      | (1ULL << (MySQLParser::CPU - 269))
      | (1ULL << (MySQLParser::DATA - 269))
      | (1ULL << (MySQLParser::DATAFILE - 269))
      | (1ULL << (MySQLParser::DEALLOCATE - 269))
      | (1ULL << (MySQLParser::DEFAULT_AUTH - 269))
      | (1ULL << (MySQLParser::DEFINER - 269))
      | (1ULL << (MySQLParser::DELAY_KEY_WRITE - 269))
      | (1ULL << (MySQLParser::DES_KEY_FILE - 269))
      | (1ULL << (MySQLParser::DIRECTORY - 269))
      | (1ULL << (MySQLParser::DISABLE - 269))
      | (1ULL << (MySQLParser::DISCARD - 269))
      | (1ULL << (MySQLParser::DISK - 269))
      | (1ULL << (MySQLParser::DO - 269))
      | (1ULL << (MySQLParser::DUMPFILE - 269))
      | (1ULL << (MySQLParser::DUPLICATE - 269))
      | (1ULL << (MySQLParser::DYNAMIC - 269))
      | (1ULL << (MySQLParser::ENABLE - 269))
      | (1ULL << (MySQLParser::ENCRYPTION - 269))
      | (1ULL << (MySQLParser::END - 269))
      | (1ULL << (MySQLParser::ENDS - 269))
      | (1ULL << (MySQLParser::ENGINE - 269))
      | (1ULL << (MySQLParser::ENGINES - 269))
      | (1ULL << (MySQLParser::ERROR - 269))
      | (1ULL << (MySQLParser::ERRORS - 269))
      | (1ULL << (MySQLParser::ESCAPE - 269))
      | (1ULL << (MySQLParser::EVEN - 269))
      | (1ULL << (MySQLParser::EVENT - 269))
      | (1ULL << (MySQLParser::EVENTS - 269))
      | (1ULL << (MySQLParser::EVERY - 269))
      | (1ULL << (MySQLParser::EXCHANGE - 269))
      | (1ULL << (MySQLParser::EXCLUSIVE - 269))
      | (1ULL << (MySQLParser::EXPIRE - 269))
      | (1ULL << (MySQLParser::EXPORT - 269))
      | (1ULL << (MySQLParser::EXTENDED - 269))
      | (1ULL << (MySQLParser::EXTENT_SIZE - 269)))) != 0) || ((((_la - 333) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 333)) & ((1ULL << (MySQLParser::FAST - 333))
      | (1ULL << (MySQLParser::FAULTS - 333))
      | (1ULL << (MySQLParser::FIELDS - 333))
      | (1ULL << (MySQLParser::FILE_BLOCK_SIZE - 333))
      | (1ULL << (MySQLParser::FILTER - 333))
      | (1ULL << (MySQLParser::FIRST - 333))
      | (1ULL << (MySQLParser::FIXED - 333))
      | (1ULL << (MySQLParser::FLUSH - 333))
      | (1ULL << (MySQLParser::FOLLOWS - 333))
      | (1ULL << (MySQLParser::FOUND - 333))
      | (1ULL << (MySQLParser::FULL - 333))
      | (1ULL << (MySQLParser::FUNCTION - 333))
      | (1ULL << (MySQLParser::GENERAL - 333))
      | (1ULL << (MySQLParser::GLOBAL - 333))
      | (1ULL << (MySQLParser::GRANTS - 333))
      | (1ULL << (MySQLParser::GROUP_REPLICATION - 333))
      | (1ULL << (MySQLParser::HANDLER - 333))
      | (1ULL << (MySQLParser::HASH - 333))
      | (1ULL << (MySQLParser::HELP - 333))
      | (1ULL << (MySQLParser::HOST - 333))
      | (1ULL << (MySQLParser::HOSTS - 333))
      | (1ULL << (MySQLParser::IDENTIFIED - 333))
      | (1ULL << (MySQLParser::IGNORE_SERVER_IDS - 333))
      | (1ULL << (MySQLParser::IMPORT - 333))
      | (1ULL << (MySQLParser::INDEXES - 333))
      | (1ULL << (MySQLParser::INITIAL_SIZE - 333))
      | (1ULL << (MySQLParser::INPLACE - 333))
      | (1ULL << (MySQLParser::INSERT_METHOD - 333))
      | (1ULL << (MySQLParser::INSTALL - 333))
      | (1ULL << (MySQLParser::INSTANCE - 333))
      | (1ULL << (MySQLParser::INVOKER - 333))
      | (1ULL << (MySQLParser::IO - 333))
      | (1ULL << (MySQLParser::IO_THREAD - 333))
      | (1ULL << (MySQLParser::IPC - 333))
      | (1ULL << (MySQLParser::ISOLATION - 333))
      | (1ULL << (MySQLParser::ISSUER - 333))
      | (1ULL << (MySQLParser::JSON - 333))
      | (1ULL << (MySQLParser::KEY_BLOCK_SIZE - 333))
      | (1ULL << (MySQLParser::LANGUAGE - 333))
      | (1ULL << (MySQLParser::LAST - 333))
      | (1ULL << (MySQLParser::LEAVES - 333))
      | (1ULL << (MySQLParser::LESS - 333))
      | (1ULL << (MySQLParser::LEVEL - 333))
      | (1ULL << (MySQLParser::LIST - 333))
      | (1ULL << (MySQLParser::LOCAL - 333))
      | (1ULL << (MySQLParser::LOGFILE - 333))
      | (1ULL << (MySQLParser::LOGS - 333))
      | (1ULL << (MySQLParser::MASTER - 333))
      | (1ULL << (MySQLParser::MASTER_AUTO_POSITION - 333))
      | (1ULL << (MySQLParser::MASTER_CONNECT_RETRY - 333))
      | (1ULL << (MySQLParser::MASTER_DELAY - 333))
      | (1ULL << (MySQLParser::MASTER_HEARTBEAT_PERIOD - 333))
      | (1ULL << (MySQLParser::MASTER_HOST - 333))
      | (1ULL << (MySQLParser::MASTER_LOG_FILE - 333))
      | (1ULL << (MySQLParser::MASTER_LOG_POS - 333))
      | (1ULL << (MySQLParser::MASTER_PASSWORD - 333))
      | (1ULL << (MySQLParser::MASTER_PORT - 333))
      | (1ULL << (MySQLParser::MASTER_RETRY_COUNT - 333))
      | (1ULL << (MySQLParser::MASTER_SSL - 333))
      | (1ULL << (MySQLParser::MASTER_SSL_CA - 333))
      | (1ULL << (MySQLParser::MASTER_SSL_CAPATH - 333))
      | (1ULL << (MySQLParser::MASTER_SSL_CERT - 333))
      | (1ULL << (MySQLParser::MASTER_SSL_CIPHER - 333)))) != 0) || ((((_la - 397) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 397)) & ((1ULL << (MySQLParser::MASTER_SSL_CRL - 397))
      | (1ULL << (MySQLParser::MASTER_SSL_CRLPATH - 397))
      | (1ULL << (MySQLParser::MASTER_SSL_KEY - 397))
      | (1ULL << (MySQLParser::MASTER_TLS_VERSION - 397))
      | (1ULL << (MySQLParser::MASTER_USER - 397))
      | (1ULL << (MySQLParser::MAX_CONNECTIONS_PER_HOUR - 397))
      | (1ULL << (MySQLParser::MAX_QUERIES_PER_HOUR - 397))
      | (1ULL << (MySQLParser::MAX_ROWS - 397))
      | (1ULL << (MySQLParser::MAX_SIZE - 397))
      | (1ULL << (MySQLParser::MAX_UPDATES_PER_HOUR - 397))
      | (1ULL << (MySQLParser::MAX_USER_CONNECTIONS - 397))
      | (1ULL << (MySQLParser::MEDIUM - 397))
      | (1ULL << (MySQLParser::MERGE - 397))
      | (1ULL << (MySQLParser::MID - 397))
      | (1ULL << (MySQLParser::MIGRATE - 397))
      | (1ULL << (MySQLParser::MIN_ROWS - 397))
      | (1ULL << (MySQLParser::MODE - 397))
      | (1ULL << (MySQLParser::MODIFY - 397))
      | (1ULL << (MySQLParser::MUTEX - 397))
      | (1ULL << (MySQLParser::MYSQL - 397))
      | (1ULL << (MySQLParser::NAME - 397))
      | (1ULL << (MySQLParser::NAMES - 397))
      | (1ULL << (MySQLParser::NCHAR - 397))
      | (1ULL << (MySQLParser::NEVER - 397))
      | (1ULL << (MySQLParser::NEXT - 397))
      | (1ULL << (MySQLParser::NO - 397))
      | (1ULL << (MySQLParser::NODEGROUP - 397))
      | (1ULL << (MySQLParser::NONE - 397))
      | (1ULL << (MySQLParser::OFFLINE - 397))
      | (1ULL << (MySQLParser::OFFSET - 397))
      | (1ULL << (MySQLParser::OJ - 397))
      | (1ULL << (MySQLParser::OLD_PASSWORD - 397))
      | (1ULL << (MySQLParser::ONE - 397))
      | (1ULL << (MySQLParser::ONLINE - 397))
      | (1ULL << (MySQLParser::ONLY - 397))
      | (1ULL << (MySQLParser::OPEN - 397))
      | (1ULL << (MySQLParser::OPTIMIZER_COSTS - 397))
      | (1ULL << (MySQLParser::OPTIONS - 397))
      | (1ULL << (MySQLParser::OWNER - 397))
      | (1ULL << (MySQLParser::PACK_KEYS - 397))
      | (1ULL << (MySQLParser::PAGE - 397))
      | (1ULL << (MySQLParser::PARSER - 397))
      | (1ULL << (MySQLParser::PARTIAL - 397))
      | (1ULL << (MySQLParser::PARTITIONING - 397))
      | (1ULL << (MySQLParser::PARTITIONS - 397))
      | (1ULL << (MySQLParser::PASSWORD - 397))
      | (1ULL << (MySQLParser::PHASE - 397))
      | (1ULL << (MySQLParser::PLUGIN - 397))
      | (1ULL << (MySQLParser::PLUGIN_DIR - 397))
      | (1ULL << (MySQLParser::PLUGINS - 397))
      | (1ULL << (MySQLParser::PORT - 397))
      | (1ULL << (MySQLParser::PRECEDES - 397))
      | (1ULL << (MySQLParser::PREPARE - 397))
      | (1ULL << (MySQLParser::PRESERVE - 397))
      | (1ULL << (MySQLParser::PREV - 397))
      | (1ULL << (MySQLParser::PROCESSLIST - 397))
      | (1ULL << (MySQLParser::PROFILE - 397))
      | (1ULL << (MySQLParser::PROFILES - 397))
      | (1ULL << (MySQLParser::PROXY - 397))
      | (1ULL << (MySQLParser::QUERY - 397))
      | (1ULL << (MySQLParser::QUICK - 397))
      | (1ULL << (MySQLParser::REBUILD - 397))
      | (1ULL << (MySQLParser::RECOVER - 397))
      | (1ULL << (MySQLParser::REDO_BUFFER_SIZE - 397)))) != 0) || ((((_la - 461) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 461)) & ((1ULL << (MySQLParser::REDUNDANT - 461))
      | (1ULL << (MySQLParser::RELAY - 461))
      | (1ULL << (MySQLParser::RELAY_LOG_FILE - 461))
      | (1ULL << (MySQLParser::RELAY_LOG_POS - 461))
      | (1ULL << (MySQLParser::RELAYLOG - 461))
      | (1ULL << (MySQLParser::REMOVE - 461))
      | (1ULL << (MySQLParser::REORGANIZE - 461))
      | (1ULL << (MySQLParser::REPAIR - 461))
      | (1ULL << (MySQLParser::REPLICATE_DO_DB - 461))
      | (1ULL << (MySQLParser::REPLICATE_DO_TABLE - 461))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_DB - 461))
      | (1ULL << (MySQLParser::REPLICATE_IGNORE_TABLE - 461))
      | (1ULL << (MySQLParser::REPLICATE_REWRITE_DB - 461))
      | (1ULL << (MySQLParser::REPLICATE_WILD_DO_TABLE - 461))
      | (1ULL << (MySQLParser::REPLICATE_WILD_IGNORE_TABLE - 461))
      | (1ULL << (MySQLParser::REPLICATION - 461))
      | (1ULL << (MySQLParser::RESET - 461))
      | (1ULL << (MySQLParser::RESUME - 461))
      | (1ULL << (MySQLParser::RETURNS - 461))
      | (1ULL << (MySQLParser::ROLLBACK - 461))
      | (1ULL << (MySQLParser::ROLLUP - 461))
      | (1ULL << (MySQLParser::ROTATE - 461))
      | (1ULL << (MySQLParser::ROW - 461))
      | (1ULL << (MySQLParser::ROWS - 461))
      | (1ULL << (MySQLParser::ROW_FORMAT - 461))
      | (1ULL << (MySQLParser::SAVEPOINT - 461))
      | (1ULL << (MySQLParser::SCHEDULE - 461))
      | (1ULL << (MySQLParser::SECURITY - 461))
      | (1ULL << (MySQLParser::SERVER - 461))
      | (1ULL << (MySQLParser::SESSION - 461))
      | (1ULL << (MySQLParser::SHARE - 461))
      | (1ULL << (MySQLParser::SHARED - 461))
      | (1ULL << (MySQLParser::SIGNED - 461))
      | (1ULL << (MySQLParser::SIMPLE - 461))
      | (1ULL << (MySQLParser::SLAVE - 461))
      | (1ULL << (MySQLParser::SLOW - 461))
      | (1ULL << (MySQLParser::SNAPSHOT - 461))
      | (1ULL << (MySQLParser::SOCKET - 461))
      | (1ULL << (MySQLParser::SOME - 461))
      | (1ULL << (MySQLParser::SONAME - 461))
      | (1ULL << (MySQLParser::SOUNDS - 461))
      | (1ULL << (MySQLParser::SOURCE - 461))
      | (1ULL << (MySQLParser::SQL_AFTER_GTIDS - 461))
      | (1ULL << (MySQLParser::SQL_AFTER_MTS_GAPS - 461))
      | (1ULL << (MySQLParser::SQL_BEFORE_GTIDS - 461))
      | (1ULL << (MySQLParser::SQL_BUFFER_RESULT - 461))
      | (1ULL << (MySQLParser::SQL_CACHE - 461))
      | (1ULL << (MySQLParser::SQL_NO_CACHE - 461))
      | (1ULL << (MySQLParser::SQL_THREAD - 461))
      | (1ULL << (MySQLParser::START - 461))
      | (1ULL << (MySQLParser::STARTS - 461))
      | (1ULL << (MySQLParser::STATS_AUTO_RECALC - 461))
      | (1ULL << (MySQLParser::STATS_PERSISTENT - 461))
      | (1ULL << (MySQLParser::STATS_SAMPLE_PAGES - 461))
      | (1ULL << (MySQLParser::STATUS - 461))
      | (1ULL << (MySQLParser::STOP - 461))
      | (1ULL << (MySQLParser::STORAGE - 461))
      | (1ULL << (MySQLParser::STRING - 461))
      | (1ULL << (MySQLParser::SUBJECT - 461))
      | (1ULL << (MySQLParser::SUBPARTITION - 461))
      | (1ULL << (MySQLParser::SUBPARTITIONS - 461))
      | (1ULL << (MySQLParser::SUSPEND - 461))
      | (1ULL << (MySQLParser::SWAPS - 461)))) != 0) || ((((_la - 525) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 525)) & ((1ULL << (MySQLParser::SWITCHES - 525))
      | (1ULL << (MySQLParser::TABLESPACE - 525))
      | (1ULL << (MySQLParser::TEMPORARY - 525))
      | (1ULL << (MySQLParser::TEMPTABLE - 525))
      | (1ULL << (MySQLParser::THAN - 525))
      | (1ULL << (MySQLParser::TRADITIONAL - 525))
      | (1ULL << (MySQLParser::TRANSACTION - 525))
      | (1ULL << (MySQLParser::TRIGGERS - 525))
      | (1ULL << (MySQLParser::TRUNCATE - 525))
      | (1ULL << (MySQLParser::UNDEFINED - 525))
      | (1ULL << (MySQLParser::UNDOFILE - 525))
      | (1ULL << (MySQLParser::UNDO_BUFFER_SIZE - 525))
      | (1ULL << (MySQLParser::UNINSTALL - 525))
      | (1ULL << (MySQLParser::UNKNOWN - 525))
      | (1ULL << (MySQLParser::UNTIL - 525))
      | (1ULL << (MySQLParser::UPGRADE - 525))
      | (1ULL << (MySQLParser::USER - 525))
      | (1ULL << (MySQLParser::USE_FRM - 525))
      | (1ULL << (MySQLParser::USER_RESOURCES - 525))
      | (1ULL << (MySQLParser::VALIDATION - 525))
      | (1ULL << (MySQLParser::VALUE - 525))
      | (1ULL << (MySQLParser::VARIABLES - 525))
      | (1ULL << (MySQLParser::VIEW - 525))
      | (1ULL << (MySQLParser::WAIT - 525))
      | (1ULL << (MySQLParser::WARNINGS - 525))
      | (1ULL << (MySQLParser::WITHOUT - 525))
      | (1ULL << (MySQLParser::WORK - 525))
      | (1ULL << (MySQLParser::WRAPPER - 525))
      | (1ULL << (MySQLParser::X509 - 525))
      | (1ULL << (MySQLParser::XA - 525))
      | (1ULL << (MySQLParser::XML - 525))
      | (1ULL << (MySQLParser::INTERNAL - 525)))) != 0) || _la == MySQLParser::MEMORY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionNameBaseContext ------------------------------------------------------------------

MySQLParser::FunctionNameBaseContext::FunctionNameBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ABS() {
  return getToken(MySQLParser::ABS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ACOS() {
  return getToken(MySQLParser::ACOS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ADDDATE() {
  return getToken(MySQLParser::ADDDATE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ADDTIME() {
  return getToken(MySQLParser::ADDTIME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::AES_DECRYPT() {
  return getToken(MySQLParser::AES_DECRYPT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::AES_ENCRYPT() {
  return getToken(MySQLParser::AES_ENCRYPT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::AREA() {
  return getToken(MySQLParser::AREA, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASBINARY() {
  return getToken(MySQLParser::ASBINARY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASIN() {
  return getToken(MySQLParser::ASIN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASTEXT() {
  return getToken(MySQLParser::ASTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASWKB() {
  return getToken(MySQLParser::ASWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASWKT() {
  return getToken(MySQLParser::ASWKT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASYMMETRIC_DECRYPT() {
  return getToken(MySQLParser::ASYMMETRIC_DECRYPT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASYMMETRIC_DERIVE() {
  return getToken(MySQLParser::ASYMMETRIC_DERIVE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASYMMETRIC_ENCRYPT() {
  return getToken(MySQLParser::ASYMMETRIC_ENCRYPT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASYMMETRIC_SIGN() {
  return getToken(MySQLParser::ASYMMETRIC_SIGN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ASYMMETRIC_VERIFY() {
  return getToken(MySQLParser::ASYMMETRIC_VERIFY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ATAN() {
  return getToken(MySQLParser::ATAN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ATAN2() {
  return getToken(MySQLParser::ATAN2, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::BENCHMARK() {
  return getToken(MySQLParser::BENCHMARK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::BIN() {
  return getToken(MySQLParser::BIN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::BIT_COUNT() {
  return getToken(MySQLParser::BIT_COUNT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::BIT_LENGTH() {
  return getToken(MySQLParser::BIT_LENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::BUFFER() {
  return getToken(MySQLParser::BUFFER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CEIL() {
  return getToken(MySQLParser::CEIL, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CEILING() {
  return getToken(MySQLParser::CEILING, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CENTROID() {
  return getToken(MySQLParser::CENTROID, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CHARACTER_LENGTH() {
  return getToken(MySQLParser::CHARACTER_LENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CHARSET() {
  return getToken(MySQLParser::CHARSET, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CHAR_LENGTH() {
  return getToken(MySQLParser::CHAR_LENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::COERCIBILITY() {
  return getToken(MySQLParser::COERCIBILITY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::COLLATION() {
  return getToken(MySQLParser::COLLATION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::COMPRESS() {
  return getToken(MySQLParser::COMPRESS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CONCAT() {
  return getToken(MySQLParser::CONCAT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CONCAT_WS() {
  return getToken(MySQLParser::CONCAT_WS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CONNECTION_ID() {
  return getToken(MySQLParser::CONNECTION_ID, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CONV() {
  return getToken(MySQLParser::CONV, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CONVERT_TZ() {
  return getToken(MySQLParser::CONVERT_TZ, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::COS() {
  return getToken(MySQLParser::COS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::COT() {
  return getToken(MySQLParser::COT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::COUNT() {
  return getToken(MySQLParser::COUNT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CRC32() {
  return getToken(MySQLParser::CRC32, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CREATE_ASYMMETRIC_PRIV_KEY() {
  return getToken(MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CREATE_ASYMMETRIC_PUB_KEY() {
  return getToken(MySQLParser::CREATE_ASYMMETRIC_PUB_KEY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CREATE_DH_PARAMETERS() {
  return getToken(MySQLParser::CREATE_DH_PARAMETERS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CREATE_DIGEST() {
  return getToken(MySQLParser::CREATE_DIGEST, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::CROSSES() {
  return getToken(MySQLParser::CROSSES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DATABASE() {
  return getToken(MySQLParser::DATABASE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DATE() {
  return getToken(MySQLParser::DATE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DATEDIFF() {
  return getToken(MySQLParser::DATEDIFF, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DATE_FORMAT() {
  return getToken(MySQLParser::DATE_FORMAT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DAY() {
  return getToken(MySQLParser::DAY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DAYNAME() {
  return getToken(MySQLParser::DAYNAME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DAYOFMONTH() {
  return getToken(MySQLParser::DAYOFMONTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DAYOFWEEK() {
  return getToken(MySQLParser::DAYOFWEEK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DAYOFYEAR() {
  return getToken(MySQLParser::DAYOFYEAR, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DECODE() {
  return getToken(MySQLParser::DECODE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DEGREES() {
  return getToken(MySQLParser::DEGREES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DES_DECRYPT() {
  return getToken(MySQLParser::DES_DECRYPT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DES_ENCRYPT() {
  return getToken(MySQLParser::DES_ENCRYPT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DIMENSION() {
  return getToken(MySQLParser::DIMENSION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::DISJOINT() {
  return getToken(MySQLParser::DISJOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ELT() {
  return getToken(MySQLParser::ELT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ENCODE() {
  return getToken(MySQLParser::ENCODE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ENCRYPT() {
  return getToken(MySQLParser::ENCRYPT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ENDPOINT() {
  return getToken(MySQLParser::ENDPOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ENVELOPE() {
  return getToken(MySQLParser::ENVELOPE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::EQUALS() {
  return getToken(MySQLParser::EQUALS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::EXP() {
  return getToken(MySQLParser::EXP, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::EXPORT_SET() {
  return getToken(MySQLParser::EXPORT_SET, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::EXTERIORRING() {
  return getToken(MySQLParser::EXTERIORRING, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::EXTRACTVALUE() {
  return getToken(MySQLParser::EXTRACTVALUE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FIELD() {
  return getToken(MySQLParser::FIELD, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FIND_IN_SET() {
  return getToken(MySQLParser::FIND_IN_SET, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FLOOR() {
  return getToken(MySQLParser::FLOOR, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FORMAT() {
  return getToken(MySQLParser::FORMAT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FOUND_ROWS() {
  return getToken(MySQLParser::FOUND_ROWS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FROM_BASE64() {
  return getToken(MySQLParser::FROM_BASE64, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FROM_DAYS() {
  return getToken(MySQLParser::FROM_DAYS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::FROM_UNIXTIME() {
  return getToken(MySQLParser::FROM_UNIXTIME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMCOLLFROMTEXT() {
  return getToken(MySQLParser::GEOMCOLLFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMCOLLFROMWKB() {
  return getToken(MySQLParser::GEOMCOLLFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMETRYCOLLECTION() {
  return getToken(MySQLParser::GEOMETRYCOLLECTION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMETRYCOLLECTIONFROMTEXT() {
  return getToken(MySQLParser::GEOMETRYCOLLECTIONFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMETRYCOLLECTIONFROMWKB() {
  return getToken(MySQLParser::GEOMETRYCOLLECTIONFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMETRYFROMTEXT() {
  return getToken(MySQLParser::GEOMETRYFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMETRYFROMWKB() {
  return getToken(MySQLParser::GEOMETRYFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMETRYN() {
  return getToken(MySQLParser::GEOMETRYN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMETRYTYPE() {
  return getToken(MySQLParser::GEOMETRYTYPE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMFROMTEXT() {
  return getToken(MySQLParser::GEOMFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GEOMFROMWKB() {
  return getToken(MySQLParser::GEOMFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GET_FORMAT() {
  return getToken(MySQLParser::GET_FORMAT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GET_LOCK() {
  return getToken(MySQLParser::GET_LOCK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GLENGTH() {
  return getToken(MySQLParser::GLENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GREATEST() {
  return getToken(MySQLParser::GREATEST, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GTID_SUBSET() {
  return getToken(MySQLParser::GTID_SUBSET, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::GTID_SUBTRACT() {
  return getToken(MySQLParser::GTID_SUBTRACT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::HEX() {
  return getToken(MySQLParser::HEX, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::HOUR() {
  return getToken(MySQLParser::HOUR, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::IFNULL() {
  return getToken(MySQLParser::IFNULL, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INET6_ATON() {
  return getToken(MySQLParser::INET6_ATON, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INET6_NTOA() {
  return getToken(MySQLParser::INET6_NTOA, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INET_ATON() {
  return getToken(MySQLParser::INET_ATON, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INET_NTOA() {
  return getToken(MySQLParser::INET_NTOA, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INSTR() {
  return getToken(MySQLParser::INSTR, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INTERIORRINGN() {
  return getToken(MySQLParser::INTERIORRINGN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INTERSECTS() {
  return getToken(MySQLParser::INTERSECTS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::INVISIBLE() {
  return getToken(MySQLParser::INVISIBLE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ISCLOSED() {
  return getToken(MySQLParser::ISCLOSED, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ISEMPTY() {
  return getToken(MySQLParser::ISEMPTY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ISNULL() {
  return getToken(MySQLParser::ISNULL, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ISSIMPLE() {
  return getToken(MySQLParser::ISSIMPLE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::IS_FREE_LOCK() {
  return getToken(MySQLParser::IS_FREE_LOCK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::IS_IPV4() {
  return getToken(MySQLParser::IS_IPV4, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::IS_IPV4_COMPAT() {
  return getToken(MySQLParser::IS_IPV4_COMPAT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::IS_IPV4_MAPPED() {
  return getToken(MySQLParser::IS_IPV4_MAPPED, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::IS_IPV6() {
  return getToken(MySQLParser::IS_IPV6, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::IS_USED_LOCK() {
  return getToken(MySQLParser::IS_USED_LOCK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LAST_INSERT_ID() {
  return getToken(MySQLParser::LAST_INSERT_ID, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LCASE() {
  return getToken(MySQLParser::LCASE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LEAST() {
  return getToken(MySQLParser::LEAST, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LENGTH() {
  return getToken(MySQLParser::LENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LINEFROMTEXT() {
  return getToken(MySQLParser::LINEFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LINEFROMWKB() {
  return getToken(MySQLParser::LINEFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LINESTRING() {
  return getToken(MySQLParser::LINESTRING, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LINESTRINGFROMTEXT() {
  return getToken(MySQLParser::LINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LINESTRINGFROMWKB() {
  return getToken(MySQLParser::LINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LN() {
  return getToken(MySQLParser::LN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LOAD_FILE() {
  return getToken(MySQLParser::LOAD_FILE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LOCATE() {
  return getToken(MySQLParser::LOCATE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LOG() {
  return getToken(MySQLParser::LOG, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LOG10() {
  return getToken(MySQLParser::LOG10, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LOG2() {
  return getToken(MySQLParser::LOG2, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LOWER() {
  return getToken(MySQLParser::LOWER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LPAD() {
  return getToken(MySQLParser::LPAD, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::LTRIM() {
  return getToken(MySQLParser::LTRIM, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MAKEDATE() {
  return getToken(MySQLParser::MAKEDATE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MAKETIME() {
  return getToken(MySQLParser::MAKETIME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MAKE_SET() {
  return getToken(MySQLParser::MAKE_SET, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MASTER_POS_WAIT() {
  return getToken(MySQLParser::MASTER_POS_WAIT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MBRCONTAINS() {
  return getToken(MySQLParser::MBRCONTAINS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MBRDISJOINT() {
  return getToken(MySQLParser::MBRDISJOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MBREQUAL() {
  return getToken(MySQLParser::MBREQUAL, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MBRINTERSECTS() {
  return getToken(MySQLParser::MBRINTERSECTS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MBROVERLAPS() {
  return getToken(MySQLParser::MBROVERLAPS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MBRTOUCHES() {
  return getToken(MySQLParser::MBRTOUCHES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MBRWITHIN() {
  return getToken(MySQLParser::MBRWITHIN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MD5() {
  return getToken(MySQLParser::MD5, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MICROSECOND() {
  return getToken(MySQLParser::MICROSECOND, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MINUTE() {
  return getToken(MySQLParser::MINUTE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MLINEFROMTEXT() {
  return getToken(MySQLParser::MLINEFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MLINEFROMWKB() {
  return getToken(MySQLParser::MLINEFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MONTH() {
  return getToken(MySQLParser::MONTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MONTHNAME() {
  return getToken(MySQLParser::MONTHNAME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MPOINTFROMTEXT() {
  return getToken(MySQLParser::MPOINTFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MPOINTFROMWKB() {
  return getToken(MySQLParser::MPOINTFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MPOLYFROMTEXT() {
  return getToken(MySQLParser::MPOLYFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MPOLYFROMWKB() {
  return getToken(MySQLParser::MPOLYFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTILINESTRING() {
  return getToken(MySQLParser::MULTILINESTRING, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTILINESTRINGFROMTEXT() {
  return getToken(MySQLParser::MULTILINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTILINESTRINGFROMWKB() {
  return getToken(MySQLParser::MULTILINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTIPOINT() {
  return getToken(MySQLParser::MULTIPOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTIPOINTFROMTEXT() {
  return getToken(MySQLParser::MULTIPOINTFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTIPOINTFROMWKB() {
  return getToken(MySQLParser::MULTIPOINTFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTIPOLYGON() {
  return getToken(MySQLParser::MULTIPOLYGON, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTIPOLYGONFROMTEXT() {
  return getToken(MySQLParser::MULTIPOLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::MULTIPOLYGONFROMWKB() {
  return getToken(MySQLParser::MULTIPOLYGONFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::NAME_CONST() {
  return getToken(MySQLParser::NAME_CONST, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::NULLIF() {
  return getToken(MySQLParser::NULLIF, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::NUMGEOMETRIES() {
  return getToken(MySQLParser::NUMGEOMETRIES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::NUMINTERIORRINGS() {
  return getToken(MySQLParser::NUMINTERIORRINGS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::NUMPOINTS() {
  return getToken(MySQLParser::NUMPOINTS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::OCT() {
  return getToken(MySQLParser::OCT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::OCTET_LENGTH() {
  return getToken(MySQLParser::OCTET_LENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ORD() {
  return getToken(MySQLParser::ORD, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::OVERLAPS() {
  return getToken(MySQLParser::OVERLAPS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::PERIOD_ADD() {
  return getToken(MySQLParser::PERIOD_ADD, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::PERIOD_DIFF() {
  return getToken(MySQLParser::PERIOD_DIFF, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::PI() {
  return getToken(MySQLParser::PI, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POINT() {
  return getToken(MySQLParser::POINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POINTFROMTEXT() {
  return getToken(MySQLParser::POINTFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POINTFROMWKB() {
  return getToken(MySQLParser::POINTFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POINTN() {
  return getToken(MySQLParser::POINTN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POLYFROMTEXT() {
  return getToken(MySQLParser::POLYFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POLYFROMWKB() {
  return getToken(MySQLParser::POLYFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POLYGON() {
  return getToken(MySQLParser::POLYGON, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POLYGONFROMTEXT() {
  return getToken(MySQLParser::POLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POLYGONFROMWKB() {
  return getToken(MySQLParser::POLYGONFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POSITION() {
  return getToken(MySQLParser::POSITION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POW() {
  return getToken(MySQLParser::POW, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::POWER() {
  return getToken(MySQLParser::POWER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::QUARTER() {
  return getToken(MySQLParser::QUARTER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::QUOTE() {
  return getToken(MySQLParser::QUOTE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::RADIANS() {
  return getToken(MySQLParser::RADIANS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::RAND() {
  return getToken(MySQLParser::RAND, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::RANDOM_BYTES() {
  return getToken(MySQLParser::RANDOM_BYTES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::RELEASE_LOCK() {
  return getToken(MySQLParser::RELEASE_LOCK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::REVERSE() {
  return getToken(MySQLParser::REVERSE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ROUND() {
  return getToken(MySQLParser::ROUND, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ROW_COUNT() {
  return getToken(MySQLParser::ROW_COUNT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::RPAD() {
  return getToken(MySQLParser::RPAD, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::RTRIM() {
  return getToken(MySQLParser::RTRIM, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SECOND() {
  return getToken(MySQLParser::SECOND, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SEC_TO_TIME() {
  return getToken(MySQLParser::SEC_TO_TIME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SESSION_USER() {
  return getToken(MySQLParser::SESSION_USER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SESSION_VARIABLES_ADMIN() {
  return getToken(MySQLParser::SESSION_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SHA() {
  return getToken(MySQLParser::SHA, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SHA1() {
  return getToken(MySQLParser::SHA1, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SHA2() {
  return getToken(MySQLParser::SHA2, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SIGN() {
  return getToken(MySQLParser::SIGN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SIN() {
  return getToken(MySQLParser::SIN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SLEEP() {
  return getToken(MySQLParser::SLEEP, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SOUNDEX() {
  return getToken(MySQLParser::SOUNDEX, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SQL_THREAD_WAIT_AFTER_GTIDS() {
  return getToken(MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SQRT() {
  return getToken(MySQLParser::SQRT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SRID() {
  return getToken(MySQLParser::SRID, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::STARTPOINT() {
  return getToken(MySQLParser::STARTPOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::STRCMP() {
  return getToken(MySQLParser::STRCMP, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::STR_TO_DATE() {
  return getToken(MySQLParser::STR_TO_DATE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_AREA() {
  return getToken(MySQLParser::ST_AREA, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ASBINARY() {
  return getToken(MySQLParser::ST_ASBINARY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ASTEXT() {
  return getToken(MySQLParser::ST_ASTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ASWKB() {
  return getToken(MySQLParser::ST_ASWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ASWKT() {
  return getToken(MySQLParser::ST_ASWKT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_BUFFER() {
  return getToken(MySQLParser::ST_BUFFER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_CENTROID() {
  return getToken(MySQLParser::ST_CENTROID, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_CONTAINS() {
  return getToken(MySQLParser::ST_CONTAINS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_CROSSES() {
  return getToken(MySQLParser::ST_CROSSES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_DIFFERENCE() {
  return getToken(MySQLParser::ST_DIFFERENCE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_DIMENSION() {
  return getToken(MySQLParser::ST_DIMENSION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_DISJOINT() {
  return getToken(MySQLParser::ST_DISJOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_DISTANCE() {
  return getToken(MySQLParser::ST_DISTANCE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ENDPOINT() {
  return getToken(MySQLParser::ST_ENDPOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ENVELOPE() {
  return getToken(MySQLParser::ST_ENVELOPE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_EQUALS() {
  return getToken(MySQLParser::ST_EQUALS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_EXTERIORRING() {
  return getToken(MySQLParser::ST_EXTERIORRING, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMCOLLFROMTEXT() {
  return getToken(MySQLParser::ST_GEOMCOLLFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMCOLLFROMTXT() {
  return getToken(MySQLParser::ST_GEOMCOLLFROMTXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMCOLLFROMWKB() {
  return getToken(MySQLParser::ST_GEOMCOLLFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMETRYCOLLECTIONFROMTEXT() {
  return getToken(MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMETRYCOLLECTIONFROMWKB() {
  return getToken(MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMETRYFROMTEXT() {
  return getToken(MySQLParser::ST_GEOMETRYFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMETRYFROMWKB() {
  return getToken(MySQLParser::ST_GEOMETRYFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMETRYN() {
  return getToken(MySQLParser::ST_GEOMETRYN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMETRYTYPE() {
  return getToken(MySQLParser::ST_GEOMETRYTYPE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMFROMTEXT() {
  return getToken(MySQLParser::ST_GEOMFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_GEOMFROMWKB() {
  return getToken(MySQLParser::ST_GEOMFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_INTERIORRINGN() {
  return getToken(MySQLParser::ST_INTERIORRINGN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_INTERSECTION() {
  return getToken(MySQLParser::ST_INTERSECTION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_INTERSECTS() {
  return getToken(MySQLParser::ST_INTERSECTS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ISCLOSED() {
  return getToken(MySQLParser::ST_ISCLOSED, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ISEMPTY() {
  return getToken(MySQLParser::ST_ISEMPTY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_ISSIMPLE() {
  return getToken(MySQLParser::ST_ISSIMPLE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_LINEFROMTEXT() {
  return getToken(MySQLParser::ST_LINEFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_LINEFROMWKB() {
  return getToken(MySQLParser::ST_LINEFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_LINESTRINGFROMTEXT() {
  return getToken(MySQLParser::ST_LINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_LINESTRINGFROMWKB() {
  return getToken(MySQLParser::ST_LINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_NUMGEOMETRIES() {
  return getToken(MySQLParser::ST_NUMGEOMETRIES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_NUMINTERIORRING() {
  return getToken(MySQLParser::ST_NUMINTERIORRING, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_NUMINTERIORRINGS() {
  return getToken(MySQLParser::ST_NUMINTERIORRINGS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_NUMPOINTS() {
  return getToken(MySQLParser::ST_NUMPOINTS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_OVERLAPS() {
  return getToken(MySQLParser::ST_OVERLAPS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_POINTFROMTEXT() {
  return getToken(MySQLParser::ST_POINTFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_POINTFROMWKB() {
  return getToken(MySQLParser::ST_POINTFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_POINTN() {
  return getToken(MySQLParser::ST_POINTN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_POLYFROMTEXT() {
  return getToken(MySQLParser::ST_POLYFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_POLYFROMWKB() {
  return getToken(MySQLParser::ST_POLYFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_POLYGONFROMTEXT() {
  return getToken(MySQLParser::ST_POLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_POLYGONFROMWKB() {
  return getToken(MySQLParser::ST_POLYGONFROMWKB, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_SRID() {
  return getToken(MySQLParser::ST_SRID, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_STARTPOINT() {
  return getToken(MySQLParser::ST_STARTPOINT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_SYMDIFFERENCE() {
  return getToken(MySQLParser::ST_SYMDIFFERENCE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_TOUCHES() {
  return getToken(MySQLParser::ST_TOUCHES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_UNION() {
  return getToken(MySQLParser::ST_UNION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_WITHIN() {
  return getToken(MySQLParser::ST_WITHIN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_X() {
  return getToken(MySQLParser::ST_X, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::ST_Y() {
  return getToken(MySQLParser::ST_Y, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SUBDATE() {
  return getToken(MySQLParser::SUBDATE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SUBSTRING_INDEX() {
  return getToken(MySQLParser::SUBSTRING_INDEX, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SUBTIME() {
  return getToken(MySQLParser::SUBTIME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::SYSTEM_USER() {
  return getToken(MySQLParser::SYSTEM_USER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TAN() {
  return getToken(MySQLParser::TAN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TIME() {
  return getToken(MySQLParser::TIME, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TIMEDIFF() {
  return getToken(MySQLParser::TIMEDIFF, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TIMESTAMP() {
  return getToken(MySQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TIMESTAMPADD() {
  return getToken(MySQLParser::TIMESTAMPADD, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TIMESTAMPDIFF() {
  return getToken(MySQLParser::TIMESTAMPDIFF, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TIME_FORMAT() {
  return getToken(MySQLParser::TIME_FORMAT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TIME_TO_SEC() {
  return getToken(MySQLParser::TIME_TO_SEC, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TOUCHES() {
  return getToken(MySQLParser::TOUCHES, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TO_BASE64() {
  return getToken(MySQLParser::TO_BASE64, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TO_DAYS() {
  return getToken(MySQLParser::TO_DAYS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::TO_SECONDS() {
  return getToken(MySQLParser::TO_SECONDS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UCASE() {
  return getToken(MySQLParser::UCASE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UNCOMPRESS() {
  return getToken(MySQLParser::UNCOMPRESS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UNCOMPRESSED_LENGTH() {
  return getToken(MySQLParser::UNCOMPRESSED_LENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UNHEX() {
  return getToken(MySQLParser::UNHEX, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UNIX_TIMESTAMP() {
  return getToken(MySQLParser::UNIX_TIMESTAMP, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UPDATEXML() {
  return getToken(MySQLParser::UPDATEXML, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UPPER() {
  return getToken(MySQLParser::UPPER, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UUID() {
  return getToken(MySQLParser::UUID, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::UUID_SHORT() {
  return getToken(MySQLParser::UUID_SHORT, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::VALIDATE_PASSWORD_STRENGTH() {
  return getToken(MySQLParser::VALIDATE_PASSWORD_STRENGTH, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::VERSION() {
  return getToken(MySQLParser::VERSION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::VISIBLE() {
  return getToken(MySQLParser::VISIBLE, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() {
  return getToken(MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::WEEK() {
  return getToken(MySQLParser::WEEK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::WEEKDAY() {
  return getToken(MySQLParser::WEEKDAY, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::WEEKOFYEAR() {
  return getToken(MySQLParser::WEEKOFYEAR, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::WEIGHT_STRING() {
  return getToken(MySQLParser::WEIGHT_STRING, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::WITHIN() {
  return getToken(MySQLParser::WITHIN, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::YEAR() {
  return getToken(MySQLParser::YEAR, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::YEARWEEK() {
  return getToken(MySQLParser::YEARWEEK, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::Y_FUNCTION() {
  return getToken(MySQLParser::Y_FUNCTION, 0);
}

tree::TerminalNode* MySQLParser::FunctionNameBaseContext::X_FUNCTION() {
  return getToken(MySQLParser::X_FUNCTION, 0);
}


size_t MySQLParser::FunctionNameBaseContext::getRuleIndex() const {
  return MySQLParser::RuleFunctionNameBase;
}

void MySQLParser::FunctionNameBaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionNameBase(this);
}

void MySQLParser::FunctionNameBaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySQLParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionNameBase(this);
}


antlrcpp::Any MySQLParser::FunctionNameBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MySQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionNameBase(this);
  else
    return visitor->visitChildren(this);
}

MySQLParser::FunctionNameBaseContext* MySQLParser::functionNameBase() {
  FunctionNameBaseContext *_localctx = _tracker.createInstance<FunctionNameBaseContext>(_ctx, getState());
  enterRule(_localctx, 628, MySQLParser::RuleFunctionNameBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6190);
    _la = _input->LA(1);
    if (!(_la == MySQLParser::DATABASE || ((((_la - 184) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 184)) & ((1ULL << (MySQLParser::DATE - 184))
      | (1ULL << (MySQLParser::TIME - 184))
      | (1ULL << (MySQLParser::TIMESTAMP - 184))
      | (1ULL << (MySQLParser::YEAR - 184))
      | (1ULL << (MySQLParser::COUNT - 184))
      | (1ULL << (MySQLParser::POSITION - 184)))) != 0) || _la == MySQLParser::INVISIBLE || ((((_la - 549) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 549)) & ((1ULL << (MySQLParser::VISIBLE - 549))
      | (1ULL << (MySQLParser::QUARTER - 549))
      | (1ULL << (MySQLParser::MONTH - 549))
      | (1ULL << (MySQLParser::DAY - 549))
      | (1ULL << (MySQLParser::HOUR - 549))
      | (1ULL << (MySQLParser::MINUTE - 549))
      | (1ULL << (MySQLParser::WEEK - 549))
      | (1ULL << (MySQLParser::SECOND - 549))
      | (1ULL << (MySQLParser::MICROSECOND - 549))
      | (1ULL << (MySQLParser::SESSION_VARIABLES_ADMIN - 549)))) != 0) || ((((_la - 637) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 637)) & ((1ULL << (MySQLParser::GEOMETRYCOLLECTION - 637))
      | (1ULL << (MySQLParser::LINESTRING - 637))
      | (1ULL << (MySQLParser::MULTILINESTRING - 637))
      | (1ULL << (MySQLParser::MULTIPOINT - 637))
      | (1ULL << (MySQLParser::MULTIPOLYGON - 637))
      | (1ULL << (MySQLParser::POINT - 637))
      | (1ULL << (MySQLParser::POLYGON - 637))
      | (1ULL << (MySQLParser::ABS - 637))
      | (1ULL << (MySQLParser::ACOS - 637))
      | (1ULL << (MySQLParser::ADDDATE - 637))
      | (1ULL << (MySQLParser::ADDTIME - 637))
      | (1ULL << (MySQLParser::AES_DECRYPT - 637))
      | (1ULL << (MySQLParser::AES_ENCRYPT - 637))
      | (1ULL << (MySQLParser::AREA - 637))
      | (1ULL << (MySQLParser::ASBINARY - 637))
      | (1ULL << (MySQLParser::ASIN - 637))
      | (1ULL << (MySQLParser::ASTEXT - 637))
      | (1ULL << (MySQLParser::ASWKB - 637))
      | (1ULL << (MySQLParser::ASWKT - 637))
      | (1ULL << (MySQLParser::ASYMMETRIC_DECRYPT - 637))
      | (1ULL << (MySQLParser::ASYMMETRIC_DERIVE - 637))
      | (1ULL << (MySQLParser::ASYMMETRIC_ENCRYPT - 637))
      | (1ULL << (MySQLParser::ASYMMETRIC_SIGN - 637))
      | (1ULL << (MySQLParser::ASYMMETRIC_VERIFY - 637))
      | (1ULL << (MySQLParser::ATAN - 637))
      | (1ULL << (MySQLParser::ATAN2 - 637))
      | (1ULL << (MySQLParser::BENCHMARK - 637))
      | (1ULL << (MySQLParser::BIN - 637))
      | (1ULL << (MySQLParser::BIT_COUNT - 637))
      | (1ULL << (MySQLParser::BIT_LENGTH - 637))
      | (1ULL << (MySQLParser::BUFFER - 637))
      | (1ULL << (MySQLParser::CEIL - 637))
      | (1ULL << (MySQLParser::CEILING - 637))
      | (1ULL << (MySQLParser::CENTROID - 637))
      | (1ULL << (MySQLParser::CHARACTER_LENGTH - 637))
      | (1ULL << (MySQLParser::CHARSET - 637))
      | (1ULL << (MySQLParser::CHAR_LENGTH - 637))
      | (1ULL << (MySQLParser::COERCIBILITY - 637))
      | (1ULL << (MySQLParser::COLLATION - 637))
      | (1ULL << (MySQLParser::COMPRESS - 637))
      | (1ULL << (MySQLParser::CONCAT - 637))
      | (1ULL << (MySQLParser::CONCAT_WS - 637))
      | (1ULL << (MySQLParser::CONNECTION_ID - 637))
      | (1ULL << (MySQLParser::CONV - 637))
      | (1ULL << (MySQLParser::CONVERT_TZ - 637))
      | (1ULL << (MySQLParser::COS - 637))
      | (1ULL << (MySQLParser::COT - 637))
      | (1ULL << (MySQLParser::CRC32 - 637))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PRIV_KEY - 637))
      | (1ULL << (MySQLParser::CREATE_ASYMMETRIC_PUB_KEY - 637))
      | (1ULL << (MySQLParser::CREATE_DH_PARAMETERS - 637))
      | (1ULL << (MySQLParser::CREATE_DIGEST - 637))
      | (1ULL << (MySQLParser::CROSSES - 637))
      | (1ULL << (MySQLParser::DATEDIFF - 637))
      | (1ULL << (MySQLParser::DATE_FORMAT - 637))
      | (1ULL << (MySQLParser::DAYNAME - 637))
      | (1ULL << (MySQLParser::DAYOFMONTH - 637))
      | (1ULL << (MySQLParser::DAYOFWEEK - 637))
      | (1ULL << (MySQLParser::DAYOFYEAR - 637))
      | (1ULL << (MySQLParser::DECODE - 637))
      | (1ULL << (MySQLParser::DEGREES - 637))
      | (1ULL << (MySQLParser::DES_DECRYPT - 637)))) != 0) || ((((_la - 701) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 701)) & ((1ULL << (MySQLParser::DES_ENCRYPT - 701))
      | (1ULL << (MySQLParser::DIMENSION - 701))
      | (1ULL << (MySQLParser::DISJOINT - 701))
      | (1ULL << (MySQLParser::ELT - 701))
      | (1ULL << (MySQLParser::ENCODE - 701))
      | (1ULL << (MySQLParser::ENCRYPT - 701))
      | (1ULL << (MySQLParser::ENDPOINT - 701))
      | (1ULL << (MySQLParser::ENVELOPE - 701))
      | (1ULL << (MySQLParser::EQUALS - 701))
      | (1ULL << (MySQLParser::EXP - 701))
      | (1ULL << (MySQLParser::EXPORT_SET - 701))
      | (1ULL << (MySQLParser::EXTERIORRING - 701))
      | (1ULL << (MySQLParser::EXTRACTVALUE - 701))
      | (1ULL << (MySQLParser::FIELD - 701))
      | (1ULL << (MySQLParser::FIND_IN_SET - 701))
      | (1ULL << (MySQLParser::FLOOR - 701))
      | (1ULL << (MySQLParser::FORMAT - 701))
      | (1ULL << (MySQLParser::FOUND_ROWS - 701))
      | (1ULL << (MySQLParser::FROM_BASE64 - 701))
      | (1ULL << (MySQLParser::FROM_DAYS - 701))
      | (1ULL << (MySQLParser::FROM_UNIXTIME - 701))
      | (1ULL << (MySQLParser::GEOMCOLLFROMTEXT - 701))
      | (1ULL << (MySQLParser::GEOMCOLLFROMWKB - 701))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMTEXT - 701))
      | (1ULL << (MySQLParser::GEOMETRYCOLLECTIONFROMWKB - 701))
      | (1ULL << (MySQLParser::GEOMETRYFROMTEXT - 701))
      | (1ULL << (MySQLParser::GEOMETRYFROMWKB - 701))
      | (1ULL << (MySQLParser::GEOMETRYN - 701))
      | (1ULL << (MySQLParser::GEOMETRYTYPE - 701))
      | (1ULL << (MySQLParser::GEOMFROMTEXT - 701))
      | (1ULL << (MySQLParser::GEOMFROMWKB - 701))
      | (1ULL << (MySQLParser::GET_FORMAT - 701))
      | (1ULL << (MySQLParser::GET_LOCK - 701))
      | (1ULL << (MySQLParser::GLENGTH - 701))
      | (1ULL << (MySQLParser::GREATEST - 701))
      | (1ULL << (MySQLParser::GTID_SUBSET - 701))
      | (1ULL << (MySQLParser::GTID_SUBTRACT - 701))
      | (1ULL << (MySQLParser::HEX - 701))
      | (1ULL << (MySQLParser::IFNULL - 701))
      | (1ULL << (MySQLParser::INET6_ATON - 701))
      | (1ULL << (MySQLParser::INET6_NTOA - 701))
      | (1ULL << (MySQLParser::INET_ATON - 701))
      | (1ULL << (MySQLParser::INET_NTOA - 701))
      | (1ULL << (MySQLParser::INSTR - 701))
      | (1ULL << (MySQLParser::INTERIORRINGN - 701))
      | (1ULL << (MySQLParser::INTERSECTS - 701))
      | (1ULL << (MySQLParser::ISCLOSED - 701))
      | (1ULL << (MySQLParser::ISEMPTY - 701))
      | (1ULL << (MySQLParser::ISNULL - 701))
      | (1ULL << (MySQLParser::ISSIMPLE - 701))
      | (1ULL << (MySQLParser::IS_FREE_LOCK - 701))
      | (1ULL << (MySQLParser::IS_IPV4 - 701))
      | (1ULL << (MySQLParser::IS_IPV4_COMPAT - 701))
      | (1ULL << (MySQLParser::IS_IPV4_MAPPED - 701))
      | (1ULL << (MySQLParser::IS_IPV6 - 701))
      | (1ULL << (MySQLParser::IS_USED_LOCK - 701))
      | (1ULL << (MySQLParser::LAST_INSERT_ID - 701))
      | (1ULL << (MySQLParser::LCASE - 701))
      | (1ULL << (MySQLParser::LEAST - 701))
      | (1ULL << (MySQLParser::LENGTH - 701))
      | (1ULL << (MySQLParser::LINEFROMTEXT - 701))
      | (1ULL << (MySQLParser::LINEFROMWKB - 701))
      | (1ULL << (MySQLParser::LINESTRINGFROMTEXT - 701))
      | (1ULL << (MySQLParser::LINESTRINGFROMWKB - 701)))) != 0) || ((((_la - 765) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 765)) & ((1ULL << (MySQLParser::LN - 765))
      | (1ULL << (MySQLParser::LOAD_FILE - 765))
      | (1ULL << (MySQLParser::LOCATE - 765))
      | (1ULL << (MySQLParser::LOG - 765))
      | (1ULL << (MySQLParser::LOG10 - 765))
      | (1ULL << (MySQLParser::LOG2 - 765))
      | (1ULL << (MySQLParser::LOWER - 765))
      | (1ULL << (MySQLParser::LPAD - 765))
      | (1ULL << (MySQLParser::LTRIM - 765))
      | (1ULL << (MySQLParser::MAKEDATE - 765))
      | (1ULL << (MySQLParser::MAKETIME - 765))
      | (1ULL << (MySQLParser::MAKE_SET - 765))
      | (1ULL << (MySQLParser::MASTER_POS_WAIT - 765))
      | (1ULL << (MySQLParser::MBRCONTAINS - 765))
      | (1ULL << (MySQLParser::MBRDISJOINT - 765))
      | (1ULL << (MySQLParser::MBREQUAL - 765))
      | (1ULL << (MySQLParser::MBRINTERSECTS - 765))
      | (1ULL << (MySQLParser::MBROVERLAPS - 765))
      | (1ULL << (MySQLParser::MBRTOUCHES - 765))
      | (1ULL << (MySQLParser::MBRWITHIN - 765))
      | (1ULL << (MySQLParser::MD5 - 765))
      | (1ULL << (MySQLParser::MLINEFROMTEXT - 765))
      | (1ULL << (MySQLParser::MLINEFROMWKB - 765))
      | (1ULL << (MySQLParser::MONTHNAME - 765))
      | (1ULL << (MySQLParser::MPOINTFROMTEXT - 765))
      | (1ULL << (MySQLParser::MPOINTFROMWKB - 765))
      | (1ULL << (MySQLParser::MPOLYFROMTEXT - 765))
      | (1ULL << (MySQLParser::MPOLYFROMWKB - 765))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMTEXT - 765))
      | (1ULL << (MySQLParser::MULTILINESTRINGFROMWKB - 765))
      | (1ULL << (MySQLParser::MULTIPOINTFROMTEXT - 765))
      | (1ULL << (MySQLParser::MULTIPOINTFROMWKB - 765))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMTEXT - 765))
      | (1ULL << (MySQLParser::MULTIPOLYGONFROMWKB - 765))
      | (1ULL << (MySQLParser::NAME_CONST - 765))
      | (1ULL << (MySQLParser::NULLIF - 765))
      | (1ULL << (MySQLParser::NUMGEOMETRIES - 765))
      | (1ULL << (MySQLParser::NUMINTERIORRINGS - 765))
      | (1ULL << (MySQLParser::NUMPOINTS - 765))
      | (1ULL << (MySQLParser::OCT - 765))
      | (1ULL << (MySQLParser::OCTET_LENGTH - 765))
      | (1ULL << (MySQLParser::ORD - 765))
      | (1ULL << (MySQLParser::OVERLAPS - 765))
      | (1ULL << (MySQLParser::PERIOD_ADD - 765))
      | (1ULL << (MySQLParser::PERIOD_DIFF - 765))
      | (1ULL << (MySQLParser::PI - 765))
      | (1ULL << (MySQLParser::POINTFROMTEXT - 765))
      | (1ULL << (MySQLParser::POINTFROMWKB - 765))
      | (1ULL << (MySQLParser::POINTN - 765))
      | (1ULL << (MySQLParser::POLYFROMTEXT - 765))
      | (1ULL << (MySQLParser::POLYFROMWKB - 765))
      | (1ULL << (MySQLParser::POLYGONFROMTEXT - 765))
      | (1ULL << (MySQLParser::POLYGONFROMWKB - 765))
      | (1ULL << (MySQLParser::POW - 765))
      | (1ULL << (MySQLParser::POWER - 765))
      | (1ULL << (MySQLParser::QUOTE - 765))
      | (1ULL << (MySQLParser::RADIANS - 765))
      | (1ULL << (MySQLParser::RAND - 765))
      | (1ULL << (MySQLParser::RANDOM_BYTES - 765))
      | (1ULL << (MySQLParser::RELEASE_LOCK - 765))
      | (1ULL << (MySQLParser::REVERSE - 765))
      | (1ULL << (MySQLParser::ROUND - 765))
      | (1ULL << (MySQLParser::ROW_COUNT - 765))
      | (1ULL << (MySQLParser::RPAD - 765)))) != 0) || ((((_la - 829) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 829)) & ((1ULL << (MySQLParser::RTRIM - 829))
      | (1ULL << (MySQLParser::SEC_TO_TIME - 829))
      | (1ULL << (MySQLParser::SESSION_USER - 829))
      | (1ULL << (MySQLParser::SHA - 829))
      | (1ULL << (MySQLParser::SHA1 - 829))
      | (1ULL << (MySQLParser::SHA2 - 829))
      | (1ULL << (MySQLParser::SIGN - 829))
      | (1ULL << (MySQLParser::SIN - 829))
      | (1ULL << (MySQLParser::SLEEP - 829))
      | (1ULL << (MySQLParser::SOUNDEX - 829))
      | (1ULL << (MySQLParser::SQL_THREAD_WAIT_AFTER_GTIDS - 829))
      | (1ULL << (MySQLParser::SQRT - 829))
      | (1ULL << (MySQLParser::SRID - 829))
      | (1ULL << (MySQLParser::STARTPOINT - 829))
      | (1ULL << (MySQLParser::STRCMP - 829))
      | (1ULL << (MySQLParser::STR_TO_DATE - 829))
      | (1ULL << (MySQLParser::ST_AREA - 829))
      | (1ULL << (MySQLParser::ST_ASBINARY - 829))
      | (1ULL << (MySQLParser::ST_ASTEXT - 829))
      | (1ULL << (MySQLParser::ST_ASWKB - 829))
      | (1ULL << (MySQLParser::ST_ASWKT - 829))
      | (1ULL << (MySQLParser::ST_BUFFER - 829))
      | (1ULL << (MySQLParser::ST_CENTROID - 829))
      | (1ULL << (MySQLParser::ST_CONTAINS - 829))
      | (1ULL << (MySQLParser::ST_CROSSES - 829))
      | (1ULL << (MySQLParser::ST_DIFFERENCE - 829))
      | (1ULL << (MySQLParser::ST_DIMENSION - 829))
      | (1ULL << (MySQLParser::ST_DISJOINT - 829))
      | (1ULL << (MySQLParser::ST_DISTANCE - 829))
      | (1ULL << (MySQLParser::ST_ENDPOINT - 829))
      | (1ULL << (MySQLParser::ST_ENVELOPE - 829))
      | (1ULL << (MySQLParser::ST_EQUALS - 829))
      | (1ULL << (MySQLParser::ST_EXTERIORRING - 829))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMTXT - 829))
      | (1ULL << (MySQLParser::ST_GEOMCOLLFROMWKB - 829))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_GEOMETRYCOLLECTIONFROMWKB - 829))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_GEOMETRYFROMWKB - 829))
      | (1ULL << (MySQLParser::ST_GEOMETRYN - 829))
      | (1ULL << (MySQLParser::ST_GEOMETRYTYPE - 829))
      | (1ULL << (MySQLParser::ST_GEOMFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_GEOMFROMWKB - 829))
      | (1ULL << (MySQLParser::ST_INTERIORRINGN - 829))
      | (1ULL << (MySQLParser::ST_INTERSECTION - 829))
      | (1ULL << (MySQLParser::ST_INTERSECTS - 829))
      | (1ULL << (MySQLParser::ST_ISCLOSED - 829))
      | (1ULL << (MySQLParser::ST_ISEMPTY - 829))
      | (1ULL << (MySQLParser::ST_ISSIMPLE - 829))
      | (1ULL << (MySQLParser::ST_LINEFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_LINEFROMWKB - 829))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_LINESTRINGFROMWKB - 829))
      | (1ULL << (MySQLParser::ST_NUMGEOMETRIES - 829))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRING - 829))
      | (1ULL << (MySQLParser::ST_NUMINTERIORRINGS - 829))
      | (1ULL << (MySQLParser::ST_NUMPOINTS - 829))
      | (1ULL << (MySQLParser::ST_OVERLAPS - 829))
      | (1ULL << (MySQLParser::ST_POINTFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_POINTFROMWKB - 829))
      | (1ULL << (MySQLParser::ST_POINTN - 829))
      | (1ULL << (MySQLParser::ST_POLYFROMTEXT - 829))
      | (1ULL << (MySQLParser::ST_POLYFROMWKB - 829)))) != 0) || ((((_la - 893) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 893)) & ((1ULL << (MySQLParser::ST_POLYGONFROMTEXT - 893))
      | (1ULL << (MySQLParser::ST_POLYGONFROMWKB - 893))
      | (1ULL << (MySQLParser::ST_SRID - 893))
      | (1ULL << (MySQLParser::ST_STARTPOINT - 893))
      | (1ULL << (MySQLParser::ST_SYMDIFFERENCE - 893))
      | (1ULL << (MySQLParser::ST_TOUCHES - 893))
      | (1ULL << (MySQLParser::ST_UNION - 893))
      | (1ULL << (MySQLParser::ST_WITHIN - 893))
      | (1ULL << (MySQLParser::ST_X - 893))
      | (1ULL << (MySQLParser::ST_Y - 893))
      | (1ULL << (MySQLParser::SUBDATE - 893))
      | (1ULL << (MySQLParser::SUBSTRING_INDEX - 893))
      | (1ULL << (MySQLParser::SUBTIME - 893))
      | (1ULL << (MySQLParser::SYSTEM_USER - 893))
      | (1ULL << (MySQLParser::TAN - 893))
      | (1ULL << (MySQLParser::TIMEDIFF - 893))
      | (1ULL << (MySQLParser::TIMESTAMPADD - 893))
      | (1ULL << (MySQLParser::TIMESTAMPDIFF - 893))
      | (1ULL << (MySQLParser::TIME_FORMAT - 893))
      | (1ULL << (MySQLParser::TIME_TO_SEC - 893))
      | (1ULL << (MySQLParser::TOUCHES - 893))
      | (1ULL << (MySQLParser::TO_BASE64 - 893))
      | (1ULL << (MySQLParser::TO_DAYS - 893))
      | (1ULL << (MySQLParser::TO_SECONDS - 893))
      | (1ULL << (MySQLParser::UCASE - 893))
      | (1ULL << (MySQLParser::UNCOMPRESS - 893))
      | (1ULL << (MySQLParser::UNCOMPRESSED_LENGTH - 893))
      | (1ULL << (MySQLParser::UNHEX - 893))
      | (1ULL << (MySQLParser::UNIX_TIMESTAMP - 893))
      | (1ULL << (MySQLParser::UPDATEXML - 893))
      | (1ULL << (MySQLParser::UPPER - 893))
      | (1ULL << (MySQLParser::UUID - 893))
      | (1ULL << (MySQLParser::UUID_SHORT - 893))
      | (1ULL << (MySQLParser::VALIDATE_PASSWORD_STRENGTH - 893))
      | (1ULL << (MySQLParser::VERSION - 893))
      | (1ULL << (MySQLParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893))
      | (1ULL << (MySQLParser::WEEKDAY - 893))
      | (1ULL << (MySQLParser::WEEKOFYEAR - 893))
      | (1ULL << (MySQLParser::WEIGHT_STRING - 893))
      | (1ULL << (MySQLParser::WITHIN - 893))
      | (1ULL << (MySQLParser::YEARWEEK - 893))
      | (1ULL << (MySQLParser::Y_FUNCTION - 893))
      | (1ULL << (MySQLParser::X_FUNCTION - 893)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MySQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 300: return expressionSempred(dynamic_cast<ExpressionContext *>(context), predicateIndex);
    case 301: return predicateSempred(dynamic_cast<PredicateContext *>(context), predicateIndex);
    case 302: return expressionAtomSempred(dynamic_cast<ExpressionAtomContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MySQLParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool MySQLParser::predicateSempred(PredicateContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 7);
    case 2: return precpred(_ctx, 5);
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 9);
    case 6: return precpred(_ctx, 8);
    case 7: return precpred(_ctx, 6);
    case 8: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool MySQLParser::expressionAtomSempred(ExpressionAtomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 3);
    case 10: return precpred(_ctx, 2);
    case 11: return precpred(_ctx, 12);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> MySQLParser::_decisionToDFA;
atn::PredictionContextCache MySQLParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN MySQLParser::_atn;
std::vector<uint16_t> MySQLParser::_serializedATN;

std::vector<std::string> MySQLParser::_ruleNames = {
  "root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
  "dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
  "compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
  "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
  "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
  "createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
  "ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
  "intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
  "functionParameter", "routineOption", "serverOption", "createDefinitions", 
  "createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
  "referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
  "tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
  "subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
  "partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
  "alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
  "alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
  "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
  "dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
  "dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
  "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
  "insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
  "selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
  "assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
  "delete_stmt_table", "handlerOpenStatement", "handlerReadIndexStatement", 
  "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
  "multipleUpdateStatement", "orderByClause", "orderByExpression", "tableSources", 
  "tableSource", "tableSourceItem", "indexHint", "indexHintType", "joinPart", 
  "joinPartOnClause", "joinPartUsingClause", "queryExpression", "queryExpressionNointo", 
  "querySpecification", "querySpecificationNointo", "unionParenthesis", 
  "unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
  "selectFieldsInto", "selectLinesInto", "fromClause", "whereClause", "groupClause", 
  "havingClause", "groupByItem", "limitClause", "limitClauseAtom", "startTransaction", 
  "beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
  "releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
  "setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
  "transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
  "purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
  "startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
  "decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
  "tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
  "xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
  "xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
  "deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
  "ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
  "repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
  "declareVariable", "declareCondition", "declareCursor", "declareHandler", 
  "handlerConditionValue", "procedureSqlStatement", "caseAlternative", "elifAlternative", 
  "alterUser", "createUser", "dropUser", "grantStatement", "grantProxy", 
  "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
  "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
  "userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
  "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
  "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
  "installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
  "showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
  "showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
  "killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
  "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
  "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
  "describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
  "userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
  "uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "decimalLiteral", 
  "fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
  "nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
  "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
  "uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
  "constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
  "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
  "caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
  "aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
  "functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
  "unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
  "mathOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
  "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
};

std::vector<std::string> MySQLParser::_literalNames = {
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", 
  "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", 
  "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", 
  "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
  "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", 
  "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
  "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
  "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
  "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
  "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
  "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
  "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", 
  "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", 
  "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", 
  "':'", "", "", "", "", "", "", "", "", "", "", "'?'"
};

std::vector<std::string> MySQLParser::_symbolicNames = {
  "", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "ADD", 
  "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
  "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
  "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
  "CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
  "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
  "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
  "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", 
  "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GRANT", "GROUP", "HAVING", 
  "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
  "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
  "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", 
  "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
  "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
  "NULL_LITERAL", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", 
  "OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
  "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
  "REPEAT", "REPLACE", "REQUIRE", "RESTRICT", "RETURN", "REVOKE", "RIGHT", 
  "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SPATIAL", 
  "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
  "SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
  "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
  "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
  "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
  "MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", 
  "FLOAT", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
  "YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
  "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", 
  "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
  "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
  "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", 
  "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", 
  "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
  "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
  "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
  "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
  "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
  "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
  "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
  "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
  "PAGE_CHECKSUM", "CIPHER", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
  "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
  "COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", "CONTAINS", "CONTEXT", 
  "CONTRIBUTORS", "COPY", "CPU", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
  "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
  "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
  "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
  "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", 
  "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
  "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
  "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", 
  "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", 
  "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", 
  "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", 
  "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", 
  "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
  "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
  "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
  "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
  "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
  "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
  "MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
  "MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", 
  "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
  "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
  "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
  "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
  "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
  "QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
  "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
  "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
  "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
  "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
  "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
  "SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
  "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
  "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
  "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
  "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
  "STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBJECT", "SUBPARTITION", 
  "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", 
  "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", 
  "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", 
  "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", 
  "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WITHOUT", 
  "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", 
  "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
  "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", 
  "SUPER", "PRIVILEGES", "SESSION_VARIABLES_ADMIN", "ARMSCII8", "ASCII", 
  "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", 
  "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", 
  "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", 
  "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", 
  "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", 
  "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
  "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
  "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
  "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
  "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
  "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
  "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
  "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
  "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", "CHARACTER_LENGTH", 
  "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", 
  "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", 
  "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
  "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", 
  "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
  "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", "ENVELOPE", 
  "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", 
  "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", 
  "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
  "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
  "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
  "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
  "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
  "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
  "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
  "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
  "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
  "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
  "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
  "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
  "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
  "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", 
  "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
  "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
  "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
  "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
  "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
  "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
  "SESSION_USER", "SHA", "SHA1", "SHA2", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
  "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
  "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
  "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
  "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
  "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
  "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
  "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
  "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
  "ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
  "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
  "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
  "ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
  "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
  "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
  "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
  "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
  "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
  "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
  "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
  "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
  "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
  "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", 
  "DIVIDE", "MODULE", "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
  "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", 
  "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", 
  "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
  "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", 
  "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
  "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", 
  "BIT_STRING", "STRING_CHARSET_NAME", "PLACEHOLDER_VALUE", "ID", "REVERSE_QUOTE_ID", 
  "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
};

dfa::Vocabulary MySQLParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> MySQLParser::_tokenNames;

MySQLParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x3e0, 0x1833, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
       0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 
       0x9, 0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 
       0xa, 0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 
       0x4, 0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 
       0x11, 0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 
       0x14, 0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 
       0x17, 0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 
       0x1a, 0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 
       0x1d, 0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 
       0x20, 0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 
       0x23, 0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 
       0x26, 0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 
       0x29, 0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 
       0x2c, 0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 
       0x2f, 0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 
       0x32, 0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 
       0x35, 0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 
       0x38, 0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 
       0x3b, 0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 
       0x3e, 0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 
       0x41, 0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 
       0x44, 0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 
       0x47, 0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 
       0x4a, 0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 
       0x4d, 0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 
       0x50, 0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 
       0x53, 0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 
       0x56, 0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 
       0x59, 0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 
       0x5c, 0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 
       0x5f, 0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 
       0x62, 0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 
       0x65, 0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 
       0x68, 0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 
       0x6b, 0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 
       0x6e, 0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 
       0x71, 0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 
       0x74, 0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 
       0x77, 0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 
       0x7a, 0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 
       0x7d, 0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 
       0x80, 0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 
       0x83, 0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 
       0x86, 0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 
       0x89, 0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 
       0x8c, 0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 
       0x8f, 0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 
       0x92, 0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 
       0x95, 0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 
       0x98, 0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 
       0x9b, 0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 
       0x9e, 0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 
       0xa1, 0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 
       0xa4, 0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 
       0xa7, 0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 
       0xaa, 0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 
       0xad, 0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 
       0xb0, 0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 
       0xb3, 0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 
       0xb6, 0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 
       0xb9, 0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 
       0xbc, 0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 
       0xbf, 0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 
       0xc2, 0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 
       0xc5, 0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 
       0xc8, 0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 
       0xcb, 0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 
       0xce, 0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 
       0xd1, 0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 
       0xd4, 0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 
       0xd7, 0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 
       0xda, 0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 
       0xdd, 0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 
       0xe0, 0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 
       0xe3, 0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 
       0xe6, 0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 
       0xe9, 0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 
       0xec, 0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 
       0xef, 0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 
       0xf2, 0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 
       0xf5, 0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x4, 0xf7, 0x9, 0xf7, 0x4, 
       0xf8, 0x9, 0xf8, 0x4, 0xf9, 0x9, 0xf9, 0x4, 0xfa, 0x9, 0xfa, 0x4, 
       0xfb, 0x9, 0xfb, 0x4, 0xfc, 0x9, 0xfc, 0x4, 0xfd, 0x9, 0xfd, 0x4, 
       0xfe, 0x9, 0xfe, 0x4, 0xff, 0x9, 0xff, 0x4, 0x100, 0x9, 0x100, 0x4, 
       0x101, 0x9, 0x101, 0x4, 0x102, 0x9, 0x102, 0x4, 0x103, 0x9, 0x103, 
       0x4, 0x104, 0x9, 0x104, 0x4, 0x105, 0x9, 0x105, 0x4, 0x106, 0x9, 
       0x106, 0x4, 0x107, 0x9, 0x107, 0x4, 0x108, 0x9, 0x108, 0x4, 0x109, 
       0x9, 0x109, 0x4, 0x10a, 0x9, 0x10a, 0x4, 0x10b, 0x9, 0x10b, 0x4, 
       0x10c, 0x9, 0x10c, 0x4, 0x10d, 0x9, 0x10d, 0x4, 0x10e, 0x9, 0x10e, 
       0x4, 0x10f, 0x9, 0x10f, 0x4, 0x110, 0x9, 0x110, 0x4, 0x111, 0x9, 
       0x111, 0x4, 0x112, 0x9, 0x112, 0x4, 0x113, 0x9, 0x113, 0x4, 0x114, 
       0x9, 0x114, 0x4, 0x115, 0x9, 0x115, 0x4, 0x116, 0x9, 0x116, 0x4, 
       0x117, 0x9, 0x117, 0x4, 0x118, 0x9, 0x118, 0x4, 0x119, 0x9, 0x119, 
       0x4, 0x11a, 0x9, 0x11a, 0x4, 0x11b, 0x9, 0x11b, 0x4, 0x11c, 0x9, 
       0x11c, 0x4, 0x11d, 0x9, 0x11d, 0x4, 0x11e, 0x9, 0x11e, 0x4, 0x11f, 
       0x9, 0x11f, 0x4, 0x120, 0x9, 0x120, 0x4, 0x121, 0x9, 0x121, 0x4, 
       0x122, 0x9, 0x122, 0x4, 0x123, 0x9, 0x123, 0x4, 0x124, 0x9, 0x124, 
       0x4, 0x125, 0x9, 0x125, 0x4, 0x126, 0x9, 0x126, 0x4, 0x127, 0x9, 
       0x127, 0x4, 0x128, 0x9, 0x128, 0x4, 0x129, 0x9, 0x129, 0x4, 0x12a, 
       0x9, 0x12a, 0x4, 0x12b, 0x9, 0x12b, 0x4, 0x12c, 0x9, 0x12c, 0x4, 
       0x12d, 0x9, 0x12d, 0x4, 0x12e, 0x9, 0x12e, 0x4, 0x12f, 0x9, 0x12f, 
       0x4, 0x130, 0x9, 0x130, 0x4, 0x131, 0x9, 0x131, 0x4, 0x132, 0x9, 
       0x132, 0x4, 0x133, 0x9, 0x133, 0x4, 0x134, 0x9, 0x134, 0x4, 0x135, 
       0x9, 0x135, 0x4, 0x136, 0x9, 0x136, 0x4, 0x137, 0x9, 0x137, 0x4, 
       0x138, 0x9, 0x138, 0x4, 0x139, 0x9, 0x139, 0x4, 0x13a, 0x9, 0x13a, 
       0x4, 0x13b, 0x9, 0x13b, 0x4, 0x13c, 0x9, 0x13c, 0x3, 0x2, 0x5, 0x2, 
       0x27a, 0xa, 0x2, 0x3, 0x2, 0x5, 0x2, 0x27d, 0xa, 0x2, 0x3, 0x2, 0x3, 
       0x2, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 0x283, 0xa, 0x3, 0x3, 0x3, 0x5, 
       0x3, 0x286, 0xa, 0x3, 0x3, 0x3, 0x7, 0x3, 0x289, 0xa, 0x3, 0xc, 0x3, 
       0xe, 0x3, 0x28c, 0xb, 0x3, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 0x290, 0xa, 
       0x3, 0x3, 0x3, 0x5, 0x3, 0x293, 0xa, 0x3, 0x3, 0x3, 0x5, 0x3, 0x296, 
       0xa, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 
       0x4, 0x3, 0x4, 0x5, 0x4, 0x29f, 0xa, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x5, 0x6, 0x2c6, 0xa, 0x6, 0x3, 0x7, 0x3, 0x7, 
       0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 
       0x7, 0x3, 0x7, 0x5, 0x7, 0x2d2, 0xa, 0x7, 0x3, 0x8, 0x3, 0x8, 0x3, 
       0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 
       0x5, 0x8, 0x2dd, 0xa, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x2ee, 0xa, 
       0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x5, 0xa, 0x2f3, 0xa, 0xa, 0x3, 
       0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 
       0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x5, 0xb, 0x2ff, 0xa, 0xb, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 
       0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 
       0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x5, 0xc, 0x31a, 0xa, 
       0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x5, 0xd, 0x320, 0xa, 
       0xd, 0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 0x5, 0xe, 0x325, 0xa, 0xe, 0x3, 
       0xe, 0x3, 0xe, 0x7, 0xe, 0x329, 0xa, 0xe, 0xc, 0xe, 0xe, 0xe, 0x32c, 
       0xb, 0xe, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x330, 0xa, 0xf, 0x3, 0xf, 
       0x3, 0xf, 0x5, 0xf, 0x334, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 
       0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x33d, 0xa, 0xf, 
       0x3, 0xf, 0x5, 0xf, 0x340, 0xa, 0xf, 0x3, 0xf, 0x5, 0xf, 0x343, 0xa, 
       0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x347, 0xa, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x34e, 0xa, 0x10, 
       0x3, 0x10, 0x5, 0x10, 0x351, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 
       0x10, 0x5, 0x10, 0x356, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 
       0x3, 0x10, 0x7, 0x10, 0x35c, 0xa, 0x10, 0xc, 0x10, 0xe, 0x10, 0x35f, 
       0xb, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x363, 0xa, 0x10, 0x3, 
       0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x368, 0xa, 0x10, 0x3, 0x10, 
       0x7, 0x10, 0x36b, 0xa, 0x10, 0xc, 0x10, 0xe, 0x10, 0x36e, 0xb, 0x10, 
       0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 
       0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x379, 0xa, 0x11, 0x3, 
       0x11, 0x5, 0x11, 0x37c, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 
       0x380, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x383, 0xa, 0x11, 0x3, 0x11, 
       0x3, 0x11, 0x5, 0x11, 0x387, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x38a, 
       0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x38e, 0xa, 0x11, 0x3, 
       0x11, 0x5, 0x11, 0x391, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x394, 0xa, 
       0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x398, 0xa, 0x11, 0x3, 0x11, 
       0x5, 0x11, 0x39b, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x39f, 
       0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 
       0x3a5, 0xa, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x5, 
       0x12, 0x3ab, 0xa, 0x12, 0x3, 0x12, 0x3, 0x12, 0x7, 0x12, 0x3af, 0xa, 
       0x12, 0xc, 0x12, 0xe, 0x12, 0x3b2, 0xb, 0x12, 0x3, 0x12, 0x3, 0x12, 
       0x7, 0x12, 0x3b6, 0xa, 0x12, 0xc, 0x12, 0xe, 0x12, 0x3b9, 0xb, 0x12, 
       0x3, 0x12, 0x3, 0x12, 0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x3bf, 0xa, 
       0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x3c5, 
       0xa, 0x13, 0x3, 0x13, 0x3, 0x13, 0x7, 0x13, 0x3c9, 0xa, 0x13, 0xc, 
       0x13, 0xe, 0x13, 0x3cc, 0xb, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 
       0x3, 0x13, 0x7, 0x13, 0x3d2, 0xa, 0x13, 0xc, 0x13, 0xe, 0x13, 0x3d5, 
       0xb, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x7, 0x14, 0x3e5, 0xa, 0x14, 0xc, 
       0x14, 0xe, 0x14, 0x3e8, 0xb, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x15, 
       0x3, 0x15, 0x5, 0x15, 0x3ee, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x3f2, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 
       0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x3fc, 0xa, 
       0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x400, 0xa, 0x15, 0x3, 0x15, 
       0x3, 0x15, 0x5, 0x15, 0x404, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x408, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x40c, 0xa, 
       0x15, 0x3, 0x15, 0x7, 0x15, 0x40f, 0xa, 0x15, 0xc, 0x15, 0xe, 0x15, 
       0x412, 0xb, 0x15, 0x5, 0x15, 0x414, 0xa, 0x15, 0x3, 0x15, 0x5, 0x15, 
       0x417, 0xa, 0x15, 0x3, 0x15, 0x5, 0x15, 0x41a, 0xa, 0x15, 0x3, 0x15, 
       0x5, 0x15, 0x41d, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 
       0x15, 0x5, 0x15, 0x423, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 
       0x427, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x42d, 0xa, 0x15, 0x3, 0x15, 0x7, 0x15, 0x430, 0xa, 0x15, 0xc, 
       0x15, 0xe, 0x15, 0x433, 0xb, 0x15, 0x5, 0x15, 0x435, 0xa, 0x15, 0x3, 
       0x15, 0x5, 0x15, 0x438, 0xa, 0x15, 0x5, 0x15, 0x43a, 0xa, 0x15, 0x3, 
       0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 
       0x16, 0x3, 0x16, 0x3, 0x16, 0x5, 0x16, 0x445, 0xa, 0x16, 0x3, 0x16, 
       0x3, 0x16, 0x5, 0x16, 0x449, 0xa, 0x16, 0x3, 0x16, 0x5, 0x16, 0x44c, 
       0xa, 0x16, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x3, 0x17, 0x5, 0x17, 0x45a, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x45d, 
       0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x461, 0xa, 0x17, 0x3, 
       0x17, 0x5, 0x17, 0x464, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 
       0x468, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x46b, 0xa, 0x17, 0x3, 0x17, 
       0x3, 0x17, 0x5, 0x17, 0x46f, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x472, 
       0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x476, 0xa, 0x17, 0x3, 
       0x17, 0x5, 0x17, 0x479, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x47c, 0xa, 
       0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x480, 0xa, 0x17, 0x3, 0x17, 
       0x5, 0x17, 0x483, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x487, 
       0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x18, 0x3, 0x18, 0x5, 0x18, 
       0x48d, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 
       0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 
       0x18, 0x5, 0x18, 0x49a, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x19, 
       0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x4a1, 0xa, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x3, 0x19, 0x5, 0x19, 0x4a6, 0xa, 0x19, 0x3, 0x19, 0x5, 0x19, 
       0x4a9, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x4ae, 
       0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 
       0x3, 0x19, 0x5, 0x19, 0x4b6, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x3, 0x19, 0x5, 0x19, 0x4bc, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 
       0x5, 0x19, 0x4c0, 0xa, 0x19, 0x3, 0x1a, 0x5, 0x1a, 0x4c3, 0xa, 0x1a, 
       0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x4c8, 0xa, 0x1a, 0x3, 
       0x1a, 0x5, 0x1a, 0x4cb, 0xa, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 
       0x4cf, 0xa, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x4d2, 0xa, 0x1a, 0x3, 0x1a, 
       0x3, 0x1a, 0x5, 0x1a, 0x4d6, 0xa, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x4d9, 
       0xa, 0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 
       0x3, 0x1b, 0x5, 0x1b, 0x4e1, 0xa, 0x1b, 0x5, 0x1b, 0x4e3, 0xa, 0x1b, 
       0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x7, 0x1c, 0x4e8, 0xa, 0x1c, 0xc, 
       0x1c, 0xe, 0x1c, 0x4eb, 0xb, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 
       0x5, 0x1c, 0x4f0, 0xa, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 
       0x1c, 0x7, 0x1c, 0x4f6, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x4f9, 0xb, 
       0x1c, 0x5, 0x1c, 0x4fb, 0xa, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 
       0x7, 0x1c, 0x500, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x503, 0xb, 0x1c, 
       0x5, 0x1c, 0x505, 0xa, 0x1c, 0x5, 0x1c, 0x507, 0xa, 0x1c, 0x3, 0x1d, 
       0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x5, 0x1d, 0x50d, 0xa, 0x1d, 0x3, 
       0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x513, 0xa, 0x1e, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 
       0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 
       0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x5, 0x1f, 0x524, 0xa, 0x1f, 0x3, 
       0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 0x20, 0x52b, 
       0xa, 0x20, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x22, 0x3, 0x22, 
       0x5, 0x22, 0x532, 0xa, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 
       0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x5, 
       0x22, 0x53d, 0xa, 0x22, 0x3, 0x23, 0x5, 0x23, 0x540, 0xa, 0x23, 0x3, 
       0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 
       0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x5, 0x25, 0x54d, 
       0xa, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 
       0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 
       0x5, 0x25, 0x55a, 0xa, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x5, 
       0x25, 0x55f, 0xa, 0x25, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x56f, 0xa, 
       0x26, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x7, 0x27, 0x575, 
       0xa, 0x27, 0xc, 0x27, 0xe, 0x27, 0x578, 0xb, 0x27, 0x3, 0x27, 0x3, 
       0x27, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 0x5, 
       0x28, 0x581, 0xa, 0x28, 0x3, 0x29, 0x3, 0x29, 0x7, 0x29, 0x585, 0xa, 
       0x29, 0xc, 0x29, 0xe, 0x29, 0x588, 0xb, 0x29, 0x3, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 
       0x591, 0xa, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x594, 0xa, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x599, 0xa, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x5a6, 0xa, 0x2a, 
       0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 
       0x5ad, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x5b2, 
       0xa, 0x2a, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5b6, 0xa, 0x2b, 0x5, 
       0x2b, 0x5b8, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 
       0x5bd, 0xa, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5c0, 0xa, 0x2b, 0x3, 0x2b, 
       0x3, 0x2b, 0x7, 0x2b, 0x5c4, 0xa, 0x2b, 0xc, 0x2b, 0xe, 0x2b, 0x5c7, 
       0xb, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5cb, 0xa, 0x2b, 0x5, 
       0x2b, 0x5cd, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5d1, 0xa, 
       0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5d4, 0xa, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 
       0x5d7, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x7, 0x2b, 0x5db, 0xa, 0x2b, 
       0xc, 0x2b, 0xe, 0x2b, 0x5de, 0xb, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 
       0x2b, 0x5e2, 0xa, 0x2b, 0x5, 0x2b, 0x5e4, 0xa, 0x2b, 0x3, 0x2b, 0x3, 
       0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5e9, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 
       0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5f0, 0xa, 0x2b, 0x5, 
       0x2b, 0x5f2, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 
       0x3, 0x2b, 0x5, 0x2b, 0x5f9, 0xa, 0x2b, 0x3, 0x2c, 0x3, 0x2c, 0x3, 
       0x2c, 0x5, 0x2c, 0x5fe, 0xa, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 0x5, 0x2c, 
       0x602, 0xa, 0x2c, 0x3, 0x2c, 0x5, 0x2c, 0x605, 0xa, 0x2c, 0x3, 0x2d, 
       0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x5, 0x2d, 
       0x60d, 0xa, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 
       0x2d, 0x3, 0x2d, 0x5, 0x2d, 0x615, 0xa, 0x2d, 0x5, 0x2d, 0x617, 0xa, 
       0x2d, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x5, 0x2e, 0x61f, 0xa, 0x2e, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 
       0x623, 0xa, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x626, 0xa, 0x2f, 0x3, 0x2f, 
       0x3, 0x2f, 0x7, 0x2f, 0x62a, 0xa, 0x2f, 0xc, 0x2f, 0xe, 0x2f, 0x62d, 
       0xb, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x631, 0xa, 0x2f, 0x3, 
       0x2f, 0x5, 0x2f, 0x634, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x7, 0x2f, 
       0x638, 0xa, 0x2f, 0xc, 0x2f, 0xe, 0x2f, 0x63b, 0xb, 0x2f, 0x5, 0x2f, 
       0x63d, 0xa, 0x2f, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x641, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x646, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x64b, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x64f, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x5, 0x30, 0x654, 0xa, 0x30, 0x3, 0x30, 0x5, 0x30, 0x657, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x65b, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x65f, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 
       0x30, 0x663, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x667, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x66c, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x671, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x676, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x67c, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x681, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x686, 0xa, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x68c, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x691, 0xa, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x5, 0x30, 0x696, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x69b, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x5, 0x30, 0x6a0, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x5, 0x30, 0x6a5, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 
       0x30, 0x6aa, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 
       0x6af, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6b4, 
       0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6b9, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6be, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6c4, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6c9, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6cf, 0xa, 
       0x30, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x32, 0x3, 0x32, 0x3, 
       0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x6d9, 0xa, 0x32, 0x3, 0x32, 
       0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x6e0, 0xa, 
       0x32, 0x5, 0x32, 0x6e2, 0xa, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 
       0x3, 0x32, 0x7, 0x32, 0x6e8, 0xa, 0x32, 0xc, 0x32, 0xe, 0x32, 0x6eb, 
       0xb, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x6ef, 0xa, 0x32, 0x3, 
       0x33, 0x5, 0x33, 0x6f2, 0xa, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x6fa, 0xa, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x700, 0xa, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x710, 0xa, 0x33, 0x3, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x71c, 0xa, 0x33, 0x5, 0x33, 
       0x71e, 0xa, 0x33, 0x3, 0x34, 0x5, 0x34, 0x721, 0xa, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 
       0x729, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 
       0x34, 0x72f, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x5, 0x34, 0x735, 0xa, 0x34, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 
       0x35, 0x740, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x743, 0xb, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x7, 0x35, 0x747, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 
       0x74a, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x74f, 
       0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x752, 0xb, 0x35, 0x5, 0x35, 0x754, 
       0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x75d, 0xa, 0x35, 0xc, 0x35, 0xe, 
       0x35, 0x760, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 
       0x765, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x768, 0xb, 0x35, 0x5, 0x35, 
       0x76a, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x774, 0xa, 0x35, 
       0xc, 0x35, 0xe, 0x35, 0x777, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 
       0x35, 0x77b, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x77e, 0xb, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x783, 0xa, 0x35, 0xc, 0x35, 
       0xe, 0x35, 0x786, 0xb, 0x35, 0x5, 0x35, 0x788, 0xa, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x7, 0x35, 0x792, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x795, 
       0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x799, 0xa, 0x35, 0xc, 
       0x35, 0xe, 0x35, 0x79c, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x7, 0x35, 0x7a1, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x7a4, 0xb, 0x35, 
       0x5, 0x35, 0x7a6, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 
       0x35, 0x7ab, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x7ae, 0xb, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x7b3, 0xa, 0x35, 0xc, 0x35, 
       0xe, 0x35, 0x7b6, 0xb, 0x35, 0x5, 0x35, 0x7b8, 0xa, 0x35, 0x5, 0x35, 
       0x7ba, 0xa, 0x35, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x5, 0x36, 0x7bf, 
       0xa, 0x36, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x6, 0x37, 
       0x7c5, 0xa, 0x37, 0xd, 0x37, 0xe, 0x37, 0x7c6, 0x3, 0x37, 0x3, 0x37, 
       0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x7, 0x38, 0x7ce, 0xa, 0x38, 0xc, 
       0x38, 0xe, 0x38, 0x7d1, 0xb, 0x38, 0x3, 0x39, 0x5, 0x39, 0x7d4, 0xa, 
       0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x7d8, 0xa, 0x39, 0x3, 0x39, 
       0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x7dd, 0xa, 0x39, 0x3, 0x39, 0x3, 
       0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x7e3, 0xa, 0x39, 0x3, 0x39, 
       0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x7e9, 0xa, 0x39, 0x3, 
       0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x7ee, 0xa, 0x39, 0x3, 0x39, 
       0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x7f3, 0xa, 0x39, 0x3, 0x39, 0x3, 
       0x39, 0x3, 0x39, 0x5, 0x39, 0x7f8, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 
       0x3, 0x39, 0x5, 0x39, 0x7fd, 0xa, 0x39, 0x3, 0x39, 0x5, 0x39, 0x800, 
       0xa, 0x39, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x805, 0xa, 
       0x3a, 0x3, 0x3a, 0x6, 0x3a, 0x808, 0xa, 0x3a, 0xd, 0x3a, 0xe, 0x3a, 
       0x809, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 
       0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x814, 0xa, 0x3a, 0x3, 0x3b, 
       0x3, 0x3b, 0x5, 0x3b, 0x818, 0xa, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 
       0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x81f, 0xa, 0x3b, 0x3, 0x3b, 
       0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x824, 0xa, 0x3b, 0x3, 0x3b, 0x5, 
       0x3b, 0x827, 0xa, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 
       0x82c, 0xa, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x82f, 0xa, 0x3b, 0x3, 0x3b, 
       0x3, 0x3b, 0x5, 0x3b, 0x833, 0xa, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 
       0x3b, 0x837, 0xa, 0x3b, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 
       0x7, 0x3c, 0x83d, 0xa, 0x3c, 0xc, 0x3c, 0xe, 0x3c, 0x840, 0xb, 0x3c, 
       0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 
       0x3, 0x3d, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 
       0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 0x852, 0xa, 
       0x3e, 0x3, 0x3e, 0x5, 0x3e, 0x855, 0xa, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 
       0x858, 0xa, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 0x85c, 0xa, 0x3e, 
       0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 
       0x7, 0x3f, 0x864, 0xa, 0x3f, 0xc, 0x3f, 0xe, 0x3f, 0x867, 0xb, 0x3f, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x7, 0x40, 0x871, 0xa, 0x40, 0xc, 0x40, 0xe, 
       0x40, 0x874, 0xb, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x41, 0x3, 0x41, 
       0x5, 0x41, 0x87a, 0xa, 0x41, 0x3, 0x41, 0x5, 0x41, 0x87d, 0xa, 0x41, 
       0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 0x7, 0x41, 
       0x884, 0xa, 0x41, 0xc, 0x41, 0xe, 0x41, 0x887, 0xb, 0x41, 0x5, 0x41, 
       0x889, 0xa, 0x41, 0x3, 0x41, 0x5, 0x41, 0x88c, 0xa, 0x41, 0x3, 0x42, 
       0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 
       0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 0x897, 0xa, 0x42, 0x3, 0x42, 0x5, 
       0x42, 0x89a, 0xa, 0x42, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 0x89e, 0xa, 
       0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 
       0x43, 0x5, 0x43, 0x8a6, 0xa, 0x43, 0x3, 0x43, 0x5, 0x43, 0x8a9, 0xa, 
       0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x8ae, 0xa, 0x43, 
       0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 
       0x5, 0x43, 0x8b6, 0xa, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 
       0x43, 0x5, 0x43, 0x8bc, 0xa, 0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 
       0x8c0, 0xa, 0x43, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x8c4, 0xa, 0x44, 
       0x3, 0x44, 0x7, 0x44, 0x8c7, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x8ca, 
       0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x8ce, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x8d5, 
       0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x8d9, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x7, 0x44, 0x8e2, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x8e5, 0xb, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0x8ec, 0xa, 0x44, 0x3, 0x44, 0x5, 0x44, 0x8ef, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x7, 0x44, 0x8f3, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 
       0x8f6, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x8fb, 
       0xa, 0x44, 0x5, 0x44, 0x8fd, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x902, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 
       0x906, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x909, 0xb, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x90e, 0xa, 0x44, 0x5, 0x44, 0x910, 
       0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x914, 0xa, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x917, 0xa, 0x44, 0x3, 0x44, 0x5, 0x44, 0x91a, 0xa, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0x91e, 0xa, 0x44, 0xc, 0x44, 
       0xe, 0x44, 0x921, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0x926, 0xa, 0x44, 0x3, 0x44, 0x5, 0x44, 0x929, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x7, 0x44, 0x92d, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 
       0x930, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x935, 
       0xa, 0x44, 0x5, 0x44, 0x937, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x93c, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x944, 0xa, 0x44, 0x5, 
       0x44, 0x946, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x94f, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x954, 0xa, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 
       0x95c, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x960, 0xa, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0x968, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x972, 
       0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x977, 0xa, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0x97e, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x982, 0xa, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x986, 0xa, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x99e, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x5, 0x44, 0x9a2, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9ae, 0xa, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0x9b1, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9ba, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x7, 0x44, 0x9c9, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x9cc, 0xb, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9d7, 0xa, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 
       0x9de, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x9e5, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0x9f2, 0xa, 0x44, 0xc, 0x44, 0xe, 
       0x44, 0x9f5, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0xa01, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0xa07, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x5, 0x44, 0xa0d, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x5, 0x44, 0xa13, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa19, 0xa, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa1f, 0xa, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa25, 0xa, 0x44, 0x3, 
       0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0xa2a, 0xa, 0x45, 0x3, 0x45, 
       0x3, 0x45, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x5, 0x46, 0xa31, 0xa, 
       0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x5, 
       0x47, 0xa38, 0xa, 0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 
       0x3, 0x47, 0x5, 0x47, 0xa3f, 0xa, 0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 
       0x47, 0x5, 0x47, 0xa44, 0xa, 0x47, 0x3, 0x47, 0x7, 0x47, 0xa47, 0xa, 
       0x47, 0xc, 0x47, 0xe, 0x47, 0xa4a, 0xb, 0x47, 0x3, 0x48, 0x3, 0x48, 
       0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 
       0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x5, 0x49, 0xa57, 0xa, 0x49, 0x3, 
       0x49, 0x3, 0x49, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x5, 0x4a, 0xa5e, 
       0xa, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 
       0x5, 0x4b, 0xa65, 0xa, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4c, 0x3, 
       0x4c, 0x5, 0x4c, 0xa6b, 0xa, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x5, 0x4c, 
       0xa6f, 0xa, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x5, 0x4c, 0xa73, 0xa, 0x4c, 
       0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x5, 0x4d, 
       0xa7a, 0xa, 0x4d, 0x3, 0x4d, 0x5, 0x4d, 0xa7d, 0xa, 0x4d, 0x3, 0x4e, 
       0x3, 0x4e, 0x3, 0x4e, 0x5, 0x4e, 0xa82, 0xa, 0x4e, 0x3, 0x4e, 0x3, 
       0x4e, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x5, 0x4f, 0xa89, 0xa, 0x4f, 
       0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x7, 0x4f, 0xa8e, 0xa, 0x4f, 0xc, 
       0x4f, 0xe, 0x4f, 0xa91, 0xb, 0x4f, 0x3, 0x4f, 0x5, 0x4f, 0xa94, 0xa, 
       0x4f, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 0x7, 
       0x50, 0xa9b, 0xa, 0x50, 0xc, 0x50, 0xe, 0x50, 0xa9e, 0xb, 0x50, 0x3, 
       0x51, 0x3, 0x51, 0x3, 0x51, 0x3, 0x51, 0x3, 0x52, 0x3, 0x52, 0x5, 
       0x52, 0xaa6, 0xa, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x53, 0x3, 0x53, 
       0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 0xaaf, 0xa, 0x53, 0x3, 
       0x53, 0x5, 0x53, 0xab2, 0xa, 0x53, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 
       0xab6, 0xa, 0x54, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0xabf, 0xa, 0x56, 0x3, 0x57, 
       0x3, 0x57, 0x5, 0x57, 0xac3, 0xa, 0x57, 0x3, 0x57, 0x5, 0x57, 0xac6, 
       0xa, 0x57, 0x3, 0x57, 0x5, 0x57, 0xac9, 0xa, 0x57, 0x3, 0x57, 0x3, 
       0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 0xad1, 
       0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 
       0xad7, 0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 
       0x57, 0x7, 0x57, 0xade, 0xa, 0x57, 0xc, 0x57, 0xe, 0x57, 0xae1, 0xb, 
       0x57, 0x5, 0x57, 0xae3, 0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 
       0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x7, 0x57, 0xaec, 0xa, 
       0x57, 0xc, 0x57, 0xe, 0x57, 0xaef, 0xb, 0x57, 0x5, 0x57, 0xaf1, 0xa, 
       0x57, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0xaf6, 0xa, 0x58, 
       0x3, 0x58, 0x5, 0x58, 0xaf9, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 
       0x58, 0x5, 0x58, 0xafe, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 
       0xb08, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0xb0d, 
       0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x6, 0x58, 0xb11, 0xa, 0x58, 0xd, 
       0x58, 0xe, 0x58, 0xb12, 0x5, 0x58, 0xb15, 0xa, 0x58, 0x3, 0x58, 0x3, 
       0x58, 0x6, 0x58, 0xb19, 0xa, 0x58, 0xd, 0x58, 0xe, 0x58, 0xb1a, 0x5, 
       0x58, 0xb1d, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x5, 0x58, 0xb23, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 
       0x58, 0x7, 0x58, 0xb29, 0xa, 0x58, 0xc, 0x58, 0xe, 0x58, 0xb2c, 0xb, 
       0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0xb30, 0xa, 0x58, 0x3, 0x58, 
       0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x7, 0x58, 0xb36, 0xa, 0x58, 0xc, 
       0x58, 0xe, 0x58, 0xb39, 0xb, 0x58, 0x5, 0x58, 0xb3b, 0xa, 0x58, 0x3, 
       0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0xb40, 0xa, 0x59, 0x3, 0x59, 
       0x5, 0x59, 0xb43, 0xa, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 
       0x59, 0xb48, 0xa, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 
       0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0xb50, 0xa, 0x59, 0x3, 0x59, 0x3, 
       0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0xb58, 
       0xa, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 
       0xb5e, 0xa, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x7, 
       0x59, 0xb64, 0xa, 0x59, 0xc, 0x59, 0xe, 0x59, 0xb67, 0xb, 0x59, 0x3, 
       0x59, 0x3, 0x59, 0x5, 0x59, 0xb6b, 0xa, 0x59, 0x3, 0x59, 0x3, 0x59, 
       0x3, 0x59, 0x3, 0x59, 0x7, 0x59, 0xb71, 0xa, 0x59, 0xc, 0x59, 0xe, 
       0x59, 0xb74, 0xb, 0x59, 0x5, 0x59, 0xb76, 0xa, 0x59, 0x3, 0x5a, 0x3, 
       0x5a, 0x5, 0x5a, 0xb7a, 0xa, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0xb7d, 0xa, 
       0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 
       0x5a, 0x5, 0x5a, 0xb85, 0xa, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 
       0x3, 0x5a, 0x5, 0x5a, 0xb8b, 0xa, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 
       0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x7, 0x5a, 0xb92, 0xa, 0x5a, 0xc, 0x5a, 
       0xe, 0x5a, 0xb95, 0xb, 0x5a, 0x5, 0x5a, 0xb97, 0xa, 0x5a, 0x3, 0x5b, 
       0x3, 0x5b, 0x5, 0x5b, 0xb9b, 0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 
       0x5b, 0xb9f, 0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x6, 0x5b, 0xba3, 0xa, 
       0x5b, 0xd, 0x5b, 0xe, 0x5b, 0xba4, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 
       0xba9, 0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbad, 0xa, 0x5b, 
       0x5, 0x5b, 0xbaf, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbb2, 0xa, 0x5b, 
       0x3, 0x5b, 0x5, 0x5b, 0xbb5, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbb8, 
       0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x6, 0x5b, 0xbbc, 0xa, 0x5b, 0xd, 
       0x5b, 0xe, 0x5b, 0xbbd, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbc2, 0xa, 
       0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbc5, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 
       0xbc8, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbcb, 0xa, 0x5b, 0x3, 0x5b, 
       0x5, 0x5b, 0xbce, 0xa, 0x5b, 0x5, 0x5b, 0xbd0, 0xa, 0x5b, 0x3, 0x5c, 
       0x3, 0x5c, 0x5, 0x5c, 0xbd4, 0xa, 0x5c, 0x3, 0x5d, 0x3, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x7, 0x5d, 0xbe0, 0xa, 0x5d, 0xc, 0x5d, 0xe, 0x5d, 
       0xbe3, 0xb, 0x5d, 0x5, 0x5d, 0xbe5, 0xa, 0x5d, 0x3, 0x5e, 0x3, 0x5e, 
       0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5f, 0x3, 0x5f, 0x5, 0x5f, 0xbed, 0xa, 
       0x5f, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 
       0x60, 0x5, 0x60, 0xbf5, 0xa, 0x60, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 
       0xbf9, 0xa, 0x61, 0x3, 0x61, 0x5, 0x61, 0xbfc, 0xa, 0x61, 0x3, 0x61, 
       0x5, 0x61, 0xbff, 0xa, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 
       0x61, 0xc04, 0xa, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc07, 0xa, 0x61, 0x3, 
       0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc0e, 
       0xa, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc11, 0xa, 0x61, 0x3, 0x61, 0x5, 
       0x61, 0xc14, 0xa, 0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc18, 0xa, 
       0x61, 0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0xc1c, 0xa, 0x62, 0x3, 0x62, 
       0x5, 0x62, 0xc1f, 0xa, 0x62, 0x3, 0x62, 0x5, 0x62, 0xc22, 0xa, 0x62, 
       0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x7, 0x62, 0xc27, 0xa, 0x62, 0xc, 
       0x62, 0xe, 0x62, 0xc2a, 0xb, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 
       0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x7, 0x62, 0xc33, 0xa, 
       0x62, 0xc, 0x62, 0xe, 0x62, 0xc36, 0xb, 0x62, 0x3, 0x62, 0x3, 0x62, 
       0x3, 0x62, 0x5, 0x62, 0xc3b, 0xa, 0x62, 0x3, 0x62, 0x5, 0x62, 0xc3e, 
       0xa, 0x62, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0xc43, 0xa, 
       0x63, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x5, 0x64, 0xc49, 
       0xa, 0x64, 0x3, 0x64, 0x5, 0x64, 0xc4c, 0xa, 0x64, 0x3, 0x65, 0x3, 
       0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x3, 0x65, 0x3, 0x65, 0x5, 0x65, 0xc58, 0xa, 0x65, 0x3, 0x65, 
       0x5, 0x65, 0xc5b, 0xa, 0x65, 0x3, 0x65, 0x3, 0x65, 0x5, 0x65, 0xc5f, 
       0xa, 0x65, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 
       0x5, 0x66, 0xc66, 0xa, 0x66, 0x3, 0x66, 0x3, 0x66, 0x5, 0x66, 0xc6a, 
       0xa, 0x66, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x68, 
       0x3, 0x68, 0x5, 0x68, 0xc72, 0xa, 0x68, 0x3, 0x68, 0x5, 0x68, 0xc75, 
       0xa, 0x68, 0x3, 0x68, 0x3, 0x68, 0x5, 0x68, 0xc79, 0xa, 0x68, 0x3, 
       0x68, 0x5, 0x68, 0xc7c, 0xa, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 
       0x3, 0x68, 0x7, 0x68, 0xc82, 0xa, 0x68, 0xc, 0x68, 0xe, 0x68, 0xc85, 
       0xb, 0x68, 0x3, 0x68, 0x5, 0x68, 0xc88, 0xa, 0x68, 0x3, 0x68, 0x5, 
       0x68, 0xc8b, 0xa, 0x68, 0x3, 0x68, 0x5, 0x68, 0xc8e, 0xa, 0x68, 0x3, 
       0x69, 0x3, 0x69, 0x5, 0x69, 0xc92, 0xa, 0x69, 0x3, 0x69, 0x5, 0x69, 
       0xc95, 0xa, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 
       0x69, 0x7, 0x69, 0xc9c, 0xa, 0x69, 0xc, 0x69, 0xe, 0x69, 0xc9f, 0xb, 
       0x69, 0x3, 0x69, 0x5, 0x69, 0xca2, 0xa, 0x69, 0x3, 0x6a, 0x3, 0x6a, 
       0x3, 0x6a, 0x3, 0x6a, 0x3, 0x6a, 0x7, 0x6a, 0xca9, 0xa, 0x6a, 0xc, 
       0x6a, 0xe, 0x6a, 0xcac, 0xb, 0x6a, 0x3, 0x6b, 0x3, 0x6b, 0x5, 0x6b, 
       0xcb0, 0xa, 0x6b, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x7, 0x6c, 0xcb5, 
       0xa, 0x6c, 0xc, 0x6c, 0xe, 0x6c, 0xcb8, 0xb, 0x6c, 0x3, 0x6d, 0x3, 
       0x6d, 0x7, 0x6d, 0xcbc, 0xa, 0x6d, 0xc, 0x6d, 0xe, 0x6d, 0xcbf, 0xb, 
       0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x7, 0x6d, 0xcc4, 0xa, 0x6d, 
       0xc, 0x6d, 0xe, 0x6d, 0xcc7, 0xb, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x5, 
       0x6d, 0xccb, 0xa, 0x6d, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 
       0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0xcd3, 0xa, 0x6e, 0x3, 0x6e, 0x5, 
       0x6e, 0xcd6, 0xa, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0xcd9, 0xa, 0x6e, 0x3, 
       0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x7, 0x6e, 0xcde, 0xa, 0x6e, 0xc, 0x6e, 
       0xe, 0x6e, 0xce1, 0xb, 0x6e, 0x5, 0x6e, 0xce3, 0xa, 0x6e, 0x3, 0x6e, 
       0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0xcea, 0xa, 
       0x6e, 0x3, 0x6e, 0x5, 0x6e, 0xced, 0xa, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 
       0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0xcf5, 0xa, 
       0x6e, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x5, 0x6f, 0xcfb, 
       0xa, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x70, 
       0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0xd06, 0xa, 
       0x70, 0x3, 0x71, 0x5, 0x71, 0xd09, 0xa, 0x71, 0x3, 0x71, 0x3, 0x71, 
       0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 0xd0f, 0xa, 0x71, 0x3, 0x71, 0x3, 
       0x71, 0x3, 0x71, 0x5, 0x71, 0xd14, 0xa, 0x71, 0x3, 0x71, 0x3, 0x71, 
       0x5, 0x71, 0xd18, 0xa, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 
       0x71, 0x5, 0x71, 0xd1e, 0xa, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 
       0x5, 0x71, 0xd23, 0xa, 0x71, 0x5, 0x71, 0xd25, 0xa, 0x71, 0x3, 0x71, 
       0x3, 0x71, 0x5, 0x71, 0xd29, 0xa, 0x71, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x3, 0x74, 0x5, 0x74, 0xd3b, 0xa, 0x74, 0x3, 0x75, 0x3, 0x75, 
       0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 
       0x5, 0x75, 0xd45, 0xa, 0x75, 0x3, 0x76, 0x3, 0x76, 0x7, 0x76, 0xd49, 
       0xa, 0x76, 0xc, 0x76, 0xe, 0x76, 0xd4c, 0xb, 0x76, 0x3, 0x76, 0x3, 
       0x76, 0x5, 0x76, 0xd50, 0xa, 0x76, 0x3, 0x76, 0x5, 0x76, 0xd53, 0xa, 
       0x76, 0x3, 0x76, 0x5, 0x76, 0xd56, 0xa, 0x76, 0x3, 0x76, 0x5, 0x76, 
       0xd59, 0xa, 0x76, 0x3, 0x76, 0x5, 0x76, 0xd5c, 0xa, 0x76, 0x3, 0x76, 
       0x5, 0x76, 0xd5f, 0xa, 0x76, 0x3, 0x76, 0x5, 0x76, 0xd62, 0xa, 0x76, 
       0x3, 0x76, 0x3, 0x76, 0x7, 0x76, 0xd66, 0xa, 0x76, 0xc, 0x76, 0xe, 
       0x76, 0xd69, 0xb, 0x76, 0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 0xd6d, 0xa, 
       0x76, 0x3, 0x76, 0x5, 0x76, 0xd70, 0xa, 0x76, 0x3, 0x76, 0x5, 0x76, 
       0xd73, 0xa, 0x76, 0x3, 0x76, 0x5, 0x76, 0xd76, 0xa, 0x76, 0x3, 0x76, 
       0x5, 0x76, 0xd79, 0xa, 0x76, 0x3, 0x76, 0x5, 0x76, 0xd7c, 0xa, 0x76, 
       0x3, 0x76, 0x5, 0x76, 0xd7f, 0xa, 0x76, 0x5, 0x76, 0xd81, 0xa, 0x76, 
       0x3, 0x77, 0x3, 0x77, 0x7, 0x77, 0xd85, 0xa, 0x77, 0xc, 0x77, 0xe, 
       0x77, 0xd88, 0xb, 0x77, 0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0xd8c, 0xa, 
       0x77, 0x3, 0x77, 0x5, 0x77, 0xd8f, 0xa, 0x77, 0x3, 0x77, 0x5, 0x77, 
       0xd92, 0xa, 0x77, 0x3, 0x77, 0x5, 0x77, 0xd95, 0xa, 0x77, 0x3, 0x77, 
       0x5, 0x77, 0xd98, 0xa, 0x77, 0x3, 0x77, 0x5, 0x77, 0xd9b, 0xa, 0x77, 
       0x3, 0x78, 0x3, 0x78, 0x5, 0x78, 0xd9f, 0xa, 0x78, 0x3, 0x78, 0x3, 
       0x78, 0x3, 0x79, 0x3, 0x79, 0x5, 0x79, 0xda5, 0xa, 0x79, 0x3, 0x79, 
       0x3, 0x79, 0x5, 0x79, 0xda9, 0xa, 0x79, 0x3, 0x7a, 0x3, 0x7a, 0x3, 
       0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x5, 
       0x7a, 0xdb3, 0xa, 0x7a, 0x3, 0x7b, 0x3, 0x7b, 0x5, 0x7b, 0xdb7, 0xa, 
       0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x7, 0x7b, 0xdbb, 0xa, 0x7b, 0xc, 0x7b, 
       0xe, 0x7b, 0xdbe, 0xb, 0x7b, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 
       0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0xdc6, 0xa, 0x7c, 0x3, 0x7c, 
       0x5, 0x7c, 0xdc9, 0xa, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0xdcd, 
       0xa, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0xdd0, 0xa, 0x7c, 0x3, 0x7c, 0x3, 
       0x7c, 0x5, 0x7c, 0xdd4, 0xa, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 
       0xdd8, 0xa, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0xddb, 0xa, 0x7c, 0x5, 0x7c, 
       0xddd, 0xa, 0x7c, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x7, 
       0x7d, 0xde3, 0xa, 0x7d, 0xc, 0x7d, 0xe, 0x7d, 0xde6, 0xb, 0x7d, 0x3, 
       0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 
       0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x5, 0x7d, 0xdf1, 0xa, 0x7d, 0x3, 0x7d, 
       0x3, 0x7d, 0x6, 0x7d, 0xdf5, 0xa, 0x7d, 0xd, 0x7d, 0xe, 0x7d, 0xdf6, 
       0x5, 0x7d, 0xdf9, 0xa, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x6, 0x7d, 0xdfd, 
       0xa, 0x7d, 0xd, 0x7d, 0xe, 0x7d, 0xdfe, 0x5, 0x7d, 0xe01, 0xa, 0x7d, 
       0x5, 0x7d, 0xe03, 0xa, 0x7d, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 
       0x7e, 0x5, 0x7e, 0xe09, 0xa, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 
       0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x5, 0x7e, 0xe11, 0xa, 0x7e, 0x3, 
       0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x5, 
       0x7f, 0xe19, 0xa, 0x7f, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x81, 
       0x3, 0x81, 0x3, 0x81, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 
       0x3, 0x82, 0x7, 0x82, 0xe26, 0xa, 0x82, 0xc, 0x82, 0xe, 0x82, 0xe29, 
       0xb, 0x82, 0x3, 0x82, 0x3, 0x82, 0x5, 0x82, 0xe2d, 0xa, 0x82, 0x3, 
       0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x84, 0x3, 0x84, 0x5, 0x84, 0xe34, 
       0xa, 0x84, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x5, 0x85, 
       0xe3a, 0xa, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 
       0x85, 0x5, 0x85, 0xe41, 0xa, 0x85, 0x3, 0x86, 0x3, 0x86, 0x3, 0x86, 
       0x5, 0x86, 0xe46, 0xa, 0x86, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 
       0x87, 0x3, 0x87, 0x7, 0x87, 0xe4d, 0xa, 0x87, 0xc, 0x87, 0xe, 0x87, 
       0xe50, 0xb, 0x87, 0x5, 0x87, 0xe52, 0xa, 0x87, 0x3, 0x88, 0x3, 0x88, 
       0x5, 0x88, 0xe56, 0xa, 0x88, 0x3, 0x89, 0x3, 0x89, 0x5, 0x89, 0xe5a, 
       0xa, 0x89, 0x3, 0x89, 0x3, 0x89, 0x5, 0x89, 0xe5e, 0xa, 0x89, 0x3, 
       0x89, 0x5, 0x89, 0xe61, 0xa, 0x89, 0x3, 0x89, 0x5, 0x89, 0xe64, 0xa, 
       0x89, 0x3, 0x89, 0x5, 0x89, 0xe67, 0xa, 0x89, 0x3, 0x8a, 0x3, 0x8a, 
       0x5, 0x8a, 0xe6b, 0xa, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0xe6f, 
       0xa, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0xe72, 0xa, 0x8a, 0x3, 0x8a, 0x5, 
       0x8a, 0xe75, 0xa, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0xe78, 0xa, 0x8a, 0x3, 
       0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0xe7f, 
       0xa, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0xe83, 0xa, 0x8c, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 
       0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x7, 0x8e, 0xe90, 
       0xa, 0x8e, 0xc, 0x8e, 0xe, 0x8e, 0xe93, 0xb, 0x8e, 0x3, 0x8f, 0x3, 
       0x8f, 0x3, 0x8f, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 0xe9f, 0xa, 0x91, 0x3, 0x91, 
       0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x7, 0x91, 0xea5, 0xa, 0x91, 0xc, 
       0x91, 0xe, 0x91, 0xea8, 0xb, 0x91, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 
       0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x5, 0x92, 0xeb1, 0xa, 
       0x92, 0x3, 0x93, 0x3, 0x93, 0x5, 0x93, 0xeb5, 0xa, 0x93, 0x3, 0x93, 
       0x5, 0x93, 0xeb8, 0xa, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x94, 0x3, 
       0x94, 0x5, 0x94, 0xebe, 0xa, 0x94, 0x3, 0x94, 0x5, 0x94, 0xec1, 0xa, 
       0x94, 0x3, 0x94, 0x5, 0x94, 0xec4, 0xa, 0x94, 0x3, 0x95, 0x3, 0x95, 
       0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x5, 0x95, 
       0xecd, 0xa, 0x95, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 
       0x96, 0x3, 0x96, 0x3, 0x96, 0x5, 0x96, 0xed6, 0xa, 0x96, 0x3, 0x97, 
       0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x7, 0x97, 
       0xede, 0xa, 0x97, 0xc, 0x97, 0xe, 0x97, 0xee1, 0xb, 0x97, 0x3, 0x97, 
       0x5, 0x97, 0xee4, 0xa, 0x97, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 
       0x98, 0x3, 0x98, 0x3, 0x98, 0x7, 0x98, 0xeec, 0xa, 0x98, 0xc, 0x98, 
       0xe, 0x98, 0xeef, 0xb, 0x98, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 
       0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x5, 0x99, 0xef8, 0xa, 0x99, 
       0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 
       0x5, 0x9b, 0xf00, 0xa, 0x9b, 0x3, 0x9b, 0x5, 0x9b, 0xf03, 0xa, 0x9b, 
       0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x7, 0x9c, 
       0xf0a, 0xa, 0x9c, 0xc, 0x9c, 0xe, 0x9c, 0xf0d, 0xb, 0x9c, 0x5, 0x9c, 
       0xf0f, 0xa, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xf13, 0xa, 0x9c, 
       0x3, 0x9c, 0x7, 0x9c, 0xf16, 0xa, 0x9c, 0xc, 0x9c, 0xe, 0x9c, 0xf19, 
       0xb, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xf1c, 0xa, 0x9c, 0x3, 0x9d, 0x3, 
       0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x7, 0x9d, 0xf23, 0xa, 0x9d, 
       0xc, 0x9d, 0xe, 0x9d, 0xf26, 0xb, 0x9d, 0x5, 0x9d, 0xf28, 0xa, 0x9d, 
       0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 
       0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 
       0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 
       0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 
       0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x7, 0xa0, 0xf45, 0xa, 0xa0, 0xc, 
       0xa0, 0xe, 0xa0, 0xf48, 0xb, 0xa0, 0x5, 0xa0, 0xf4a, 0xa, 0xa0, 0x3, 
       0xa0, 0x5, 0xa0, 0xf4d, 0xa, 0xa0, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa2, 
       0x3, 0xa2, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 
       0x3, 0xa4, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x7, 0xa5, 0xf83, 0xa, 0xa5, 0xc, 0xa5, 0xe, 0xa5, 0xf86, 
       0xb, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x5, 0xa5, 0xf8a, 0xa, 0xa5, 0x3, 
       0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 
       0xa7, 0x3, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 
       0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 
       0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 
       0xa8, 0x3, 0xa8, 0x5, 0xa8, 0xfa6, 0xa, 0xa8, 0x3, 0xa9, 0x3, 0xa9, 
       0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 
       0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x5, 0xa9, 0xfb4, 0xa, 
       0xa9, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x7, 0xaa, 0xfb9, 0xa, 0xaa, 
       0xc, 0xaa, 0xe, 0xaa, 0xfbc, 0xb, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0xfbf, 
       0xa, 0xaa, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x5, 0xab, 
       0xfc5, 0xa, 0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 
       0xac, 0x3, 0xac, 0x5, 0xac, 0xfcd, 0xa, 0xac, 0x5, 0xac, 0xfcf, 0xa, 
       0xac, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xae, 0x3, 
       0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x5, 0xae, 0xfda, 0xa, 0xae, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xb0, 0x3, 0xb0, 
       0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0xfe4, 0xa, 0xb0, 0x3, 0xb1, 0x3, 
       0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0xfeb, 0xa, 0xb1, 
       0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x5, 0xb2, 0xff1, 0xa, 
       0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb4, 0x3, 
       0xb4, 0x5, 0xb4, 0xff9, 0xa, 0xb4, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 
       0x5, 0xb5, 0xffe, 0xa, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 
       0xb5, 0x7, 0xb5, 0x1004, 0xa, 0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x1007, 
       0xb, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x100c, 0xa, 
       0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x100f, 0xb, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 
       0x3, 0xb5, 0x7, 0xb5, 0x1014, 0xa, 0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x1017, 
       0xb, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x101c, 0xa, 
       0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x101f, 0xb, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 
       0x1022, 0xa, 0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x1025, 0xb, 0xb5, 0x3, 
       0xb5, 0x3, 0xb5, 0x5, 0xb5, 0x1029, 0xa, 0xb5, 0x3, 0xb6, 0x3, 0xb6, 
       0x3, 0xb6, 0x5, 0xb6, 0x102e, 0xa, 0xb6, 0x3, 0xb6, 0x6, 0xb6, 0x1031, 
       0xa, 0xb6, 0xd, 0xb6, 0xe, 0xb6, 0x1032, 0x3, 0xb6, 0x3, 0xb6, 0x6, 
       0xb6, 0x1037, 0xa, 0xb6, 0xd, 0xb6, 0xe, 0xb6, 0x1038, 0x5, 0xb6, 
       0x103b, 0xa, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 0xb7, 0x3, 
       0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x6, 0xb7, 0x1044, 0xa, 0xb7, 0xd, 0xb7, 
       0xe, 0xb7, 0x1045, 0x3, 0xb7, 0x7, 0xb7, 0x1049, 0xa, 0xb7, 0xc, 
       0xb7, 0xe, 0xb7, 0x104c, 0xb, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x6, 0xb7, 
       0x1050, 0xa, 0xb7, 0xd, 0xb7, 0xe, 0xb7, 0x1051, 0x5, 0xb7, 0x1054, 
       0xa, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb8, 0x3, 0xb8, 
       0x3, 0xb8, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xba, 0x3, 0xba, 
       0x3, 0xba, 0x5, 0xba, 0x1062, 0xa, 0xba, 0x3, 0xba, 0x3, 0xba, 0x6, 
       0xba, 0x1066, 0xa, 0xba, 0xd, 0xba, 0xe, 0xba, 0x1067, 0x3, 0xba, 
       0x3, 0xba, 0x3, 0xba, 0x5, 0xba, 0x106d, 0xa, 0xba, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x5, 0xbb, 0x1072, 0xa, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x6, 0xbb, 0x1076, 0xa, 0xbb, 0xd, 0xbb, 0xe, 0xbb, 0x1077, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x5, 0xbb, 0x107f, 
       0xa, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbd, 0x3, 0xbd, 
       0x3, 0xbd, 0x5, 0xbd, 0x1087, 0xa, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 
       0xbd, 0x3, 0xbd, 0x6, 0xbd, 0x108d, 0xa, 0xbd, 0xd, 0xbd, 0xe, 0xbd, 
       0x108e, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x5, 0xbd, 0x1094, 0xa, 
       0xbd, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0x109a, 
       0xa, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0x109d, 0xa, 0xbe, 0x3, 0xbe, 0x3, 
       0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0x10a5, 
       0xa, 0xbe, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x5, 0xbf, 0x10ac, 0xa, 0xbf, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 
       0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x5, 0xc0, 0x10b5, 0xa, 0xc0, 
       0x3, 0xc0, 0x5, 0xc0, 0x10b8, 0xa, 0xc0, 0x3, 0xc1, 0x3, 0xc1, 0x3, 
       0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc2, 0x3, 0xc2, 0x3, 
       0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x7, 0xc2, 0x10c7, 
       0xa, 0xc2, 0xc, 0xc2, 0xe, 0xc2, 0x10ca, 0xb, 0xc2, 0x3, 0xc2, 0x3, 
       0xc2, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x10d1, 0xa, 0xc3, 
       0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x5, 0xc3, 0x10d9, 0xa, 0xc3, 0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0x10dd, 
       0xa, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 
       0x5, 0xc5, 0x10e4, 0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x6, 0xc5, 0x10e8, 
       0xa, 0xc5, 0xd, 0xc5, 0xe, 0xc5, 0x10e9, 0x3, 0xc6, 0x3, 0xc6, 0x3, 
       0xc6, 0x3, 0xc6, 0x6, 0xc6, 0x10f0, 0xa, 0xc6, 0xd, 0xc6, 0xe, 0xc6, 
       0x10f1, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x7, 
       0xc7, 0x10f9, 0xa, 0xc7, 0xc, 0xc7, 0xe, 0xc7, 0x10fc, 0xb, 0xc7, 
       0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x5, 0xc7, 0x1101, 0xa, 0xc7, 0x3, 
       0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x7, 0xc7, 0x1106, 0xa, 0xc7, 0xc, 0xc7, 
       0xe, 0xc7, 0x1109, 0xb, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 
       0xc7, 0x5, 0xc7, 0x110f, 0xa, 0xc7, 0x3, 0xc7, 0x7, 0xc7, 0x1112, 
       0xa, 0xc7, 0xc, 0xc7, 0xe, 0xc7, 0x1115, 0xb, 0xc7, 0x5, 0xc7, 0x1117, 
       0xa, 0xc7, 0x5, 0xc7, 0x1119, 0xa, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x6, 
       0xc7, 0x111d, 0xa, 0xc7, 0xd, 0xc7, 0xe, 0xc7, 0x111e, 0x5, 0xc7, 
       0x1121, 0xa, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x7, 0xc7, 0x1125, 0xa, 
       0xc7, 0xc, 0xc7, 0xe, 0xc7, 0x1128, 0xb, 0xc7, 0x5, 0xc7, 0x112a, 
       0xa, 0xc7, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 
       0x7, 0xc8, 0x1131, 0xa, 0xc8, 0xc, 0xc8, 0xe, 0xc8, 0x1134, 0xb, 
       0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x5, 0xc8, 0x1139, 0xa, 0xc8, 
       0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x7, 0xc8, 0x113e, 0xa, 0xc8, 0xc, 
       0xc8, 0xe, 0xc8, 0x1141, 0xb, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 
       0x3, 0xc8, 0x5, 0xc8, 0x1147, 0xa, 0xc8, 0x3, 0xc8, 0x7, 0xc8, 0x114a, 
       0xa, 0xc8, 0xc, 0xc8, 0xe, 0xc8, 0x114d, 0xb, 0xc8, 0x5, 0xc8, 0x114f, 
       0xa, 0xc8, 0x5, 0xc8, 0x1151, 0xa, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x6, 
       0xc8, 0x1155, 0xa, 0xc8, 0xd, 0xc8, 0xe, 0xc8, 0x1156, 0x5, 0xc8, 
       0x1159, 0xa, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x7, 0xc8, 0x115d, 0xa, 
       0xc8, 0xc, 0xc8, 0xe, 0xc8, 0x1160, 0xb, 0xc8, 0x5, 0xc8, 0x1162, 
       0xa, 0xc8, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x5, 0xc9, 0x1167, 0xa, 
       0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x7, 0xc9, 0x116c, 0xa, 0xc9, 
       0xc, 0xc9, 0xe, 0xc9, 0x116f, 0xb, 0xc9, 0x3, 0xca, 0x3, 0xca, 0x3, 
       0xca, 0x3, 0xca, 0x7, 0xca, 0x1175, 0xa, 0xca, 0xc, 0xca, 0xe, 0xca, 
       0x1178, 0xb, 0xca, 0x3, 0xca, 0x3, 0xca, 0x5, 0xca, 0x117c, 0xa, 
       0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x7, 
       0xca, 0x1183, 0xa, 0xca, 0xc, 0xca, 0xe, 0xca, 0x1186, 0xb, 0xca, 
       0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x5, 0xca, 0x118c, 0xa, 
       0xca, 0x3, 0xca, 0x7, 0xca, 0x118f, 0xa, 0xca, 0xc, 0xca, 0xe, 0xca, 
       0x1192, 0xb, 0xca, 0x5, 0xca, 0x1194, 0xa, 0xca, 0x5, 0xca, 0x1196, 
       0xa, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x7, 0xca, 
       0x119c, 0xa, 0xca, 0xc, 0xca, 0xe, 0xca, 0x119f, 0xb, 0xca, 0x5, 
       0xca, 0x11a1, 0xa, 0xca, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 
       0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x7, 0xcb, 0x11ab, 0xa, 
       0xcb, 0xc, 0xcb, 0xe, 0xcb, 0x11ae, 0xb, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 
       0x3, 0xcb, 0x5, 0xcb, 0x11b3, 0xa, 0xcb, 0x3, 0xcc, 0x3, 0xcc, 0x3, 
       0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x7, 0xcc, 0x11ba, 0xa, 0xcc, 0xc, 0xcc, 
       0xe, 0xcc, 0x11bd, 0xb, 0xcc, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x7, 0xcd, 0x11c3, 0xa, 0xcd, 0xc, 0xcd, 0xe, 0xcd, 0x11c6, 
       0xb, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x11ca, 0xa, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x7, 0xcd, 0x11d1, 
       0xa, 0xcd, 0xc, 0xcd, 0xe, 0xcd, 0x11d4, 0xb, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x11d9, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x7, 0xcd, 
       0x11e2, 0xa, 0xcd, 0xc, 0xcd, 0xe, 0xcd, 0x11e5, 0xb, 0xcd, 0x5, 
       0xcd, 0x11e7, 0xa, 0xcd, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 
       0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x7, 0xce, 0x11f1, 0xa, 
       0xce, 0xc, 0xce, 0xe, 0xce, 0x11f4, 0xb, 0xce, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x11fa, 0xa, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x11ff, 0xa, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 
       0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 
       0x120e, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0x1219, 
       0xa, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0x121c, 0xa, 0xd1, 0x3, 0xd2, 0x3, 
       0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 
       0xd2, 0x5, 0xd2, 0x1226, 0xa, 0xd2, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 
       0x1230, 0xa, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 
       0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 0x123a, 0xa, 0xd4, 
       0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 
       0x3, 0xd6, 0x3, 0xd6, 0x5, 0xd6, 0x1244, 0xa, 0xd6, 0x3, 0xd7, 0x3, 
       0xd7, 0x5, 0xd7, 0x1248, 0xa, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 
       0x124c, 0xa, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 
       0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 0x1255, 0xa, 0xd7, 0x3, 0xd7, 
       0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 
       0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 
       0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 
       0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 
       0x3, 0xd7, 0x5, 0xd7, 0x1271, 0xa, 0xd7, 0x3, 0xd8, 0x3, 0xd8, 0x3, 
       0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 
       0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x5, 0xd8, 0x1280, 
       0xa, 0xd8, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xda, 
       0x3, 0xda, 0x5, 0xda, 0x1288, 0xa, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 
       0xda, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x7, 0xdb, 0x1291, 
       0xa, 0xdb, 0xc, 0xdb, 0xe, 0xdb, 0x1294, 0xb, 0xdb, 0x3, 0xdc, 0x3, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0x129a, 0xa, 0xdc, 0x3, 0xdd, 
       0x3, 0xdd, 0x5, 0xdd, 0x129e, 0xa, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 
       0xdd, 0x3, 0xde, 0x3, 0xde, 0x5, 0xde, 0x12a5, 0xa, 0xde, 0x3, 0xde, 
       0x3, 0xde, 0x3, 0xde, 0x5, 0xde, 0x12aa, 0xa, 0xde, 0x3, 0xde, 0x5, 
       0xde, 0x12ad, 0xa, 0xde, 0x3, 0xde, 0x5, 0xde, 0x12b0, 0xa, 0xde, 
       0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 
       0x3, 0xdf, 0x5, 0xdf, 0x12b9, 0xa, 0xdf, 0x3, 0xe0, 0x3, 0xe0, 0x5, 
       0xe0, 0x12bd, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 
       0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 
       0x3, 0xe2, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 
       0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x7, 0xe3, 0x12d9, 0xa, 
       0xe3, 0xc, 0xe3, 0xe, 0xe3, 0x12dc, 0xb, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 
       0x3, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 0x12e2, 0xa, 0xe3, 0x3, 0xe3, 0x3, 
       0xe3, 0x5, 0xe3, 0x12e6, 0xa, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 
       0x3, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 0x12ed, 0xa, 0xe3, 0x3, 0xe3, 0x5, 
       0xe3, 0x12f0, 0xa, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 
       0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 0x12fa, 0xa, 
       0xe3, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1304, 0xa, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x5, 0xe4, 0x1308, 0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x130e, 0xa, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 
       0x1311, 0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1316, 
       0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x131a, 0xa, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1321, 
       0xa, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1324, 0xa, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x132a, 0xa, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1342, 0xa, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x134f, 
       0xa, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1352, 0xa, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x5, 0xe4, 0x135c, 0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1364, 0xa, 0xe4, 0x3, 
       0xe4, 0x5, 0xe4, 0x1367, 0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x136e, 0xa, 0xe4, 0x3, 0xe4, 0x5, 
       0xe4, 0x1371, 0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x7, 0xe4, 0x1378, 0xa, 0xe4, 0xc, 0xe4, 0xe, 0xe4, 0x137b, 
       0xb, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1380, 0xa, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1386, 
       0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1390, 0xa, 0xe4, 0x5, 
       0xe4, 0x1392, 0xa, 0xe4, 0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 
       0x5, 0xe5, 0x1398, 0xa, 0xe5, 0x3, 0xe5, 0x5, 0xe5, 0x139b, 0xa, 
       0xe5, 0x3, 0xe5, 0x5, 0xe5, 0x139e, 0xa, 0xe5, 0x3, 0xe6, 0x3, 0xe6, 
       0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 
       0x3, 0xe6, 0x3, 0xe6, 0x5, 0xe6, 0x13aa, 0xa, 0xe6, 0x3, 0xe6, 0x5, 
       0xe6, 0x13ad, 0xa, 0xe6, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x5, 0xe7, 
       0x13b2, 0xa, 0xe7, 0x3, 0xe8, 0x5, 0xe8, 0x13b5, 0xa, 0xe8, 0x3, 
       0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x5, 
       0xe8, 0x13bd, 0xa, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 
       0x3, 0xe8, 0x3, 0xe8, 0x5, 0xe8, 0x13c5, 0xa, 0xe8, 0x3, 0xe9, 0x3, 
       0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x5, 0xe9, 0x13cb, 0xa, 0xe9, 0x3, 0xe9, 
       0x3, 0xe9, 0x5, 0xe9, 0x13cf, 0xa, 0xe9, 0x3, 0xea, 0x3, 0xea, 0x3, 
       0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 
       0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x5, 0xea, 0x13dd, 0xa, 0xea, 
       0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 
       0x3, 0xec, 0x3, 0xec, 0x7, 0xec, 0x13e7, 0xa, 0xec, 0xc, 0xec, 0xe, 
       0xec, 0x13ea, 0xb, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 
       0x5, 0xec, 0x13f0, 0xa, 0xec, 0x3, 0xec, 0x5, 0xec, 0x13f3, 0xa, 
       0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xed, 0x3, 0xed, 0x5, 
       0xed, 0x13fa, 0xa, 0xed, 0x3, 0xed, 0x3, 0xed, 0x3, 0xed, 0x7, 0xed, 
       0x13ff, 0xa, 0xed, 0xc, 0xed, 0xe, 0xed, 0x1402, 0xb, 0xed, 0x3, 
       0xee, 0x3, 0xee, 0x5, 0xee, 0x1406, 0xa, 0xee, 0x3, 0xee, 0x6, 0xee, 
       0x1409, 0xa, 0xee, 0xd, 0xee, 0xe, 0xee, 0x140a, 0x3, 0xef, 0x3, 
       0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x7, 
       0xef, 0x1414, 0xa, 0xef, 0xc, 0xef, 0xe, 0xef, 0x1417, 0xb, 0xef, 
       0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf1, 0x3, 0xf1, 
       0x3, 0xf2, 0x3, 0xf2, 0x5, 0xf2, 0x1421, 0xa, 0xf2, 0x3, 0xf2, 0x3, 
       0xf2, 0x3, 0xf2, 0x3, 0xf2, 0x5, 0xf2, 0x1427, 0xa, 0xf2, 0x3, 0xf3, 
       0x3, 0xf3, 0x3, 0xf3, 0x5, 0xf3, 0x142c, 0xa, 0xf3, 0x3, 0xf3, 0x3, 
       0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 
       0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x5, 0xf3, 0x1439, 0xa, 0xf3, 
       0x5, 0xf3, 0x143b, 0xa, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x5, 
       0xf3, 0x1440, 0xa, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x5, 0xf3, 
       0x1445, 0xa, 0xf3, 0x5, 0xf3, 0x1447, 0xa, 0xf3, 0x3, 0xf4, 0x3, 
       0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x5, 0xf4, 0x144e, 0xa, 0xf4, 
       0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x5, 0xf5, 
       0x1455, 0xa, 0xf5, 0x3, 0xf5, 0x5, 0xf5, 0x1458, 0xa, 0xf5, 0x3, 
       0xf5, 0x5, 0xf5, 0x145b, 0xa, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 
       0x3, 0xf5, 0x5, 0xf5, 0x1461, 0xa, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x5, 
       0xf5, 0x1465, 0xa, 0xf5, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 
       0x5, 0xf6, 0x146b, 0xa, 0xf6, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 
       0xf7, 0x5, 0xf7, 0x1471, 0xa, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf8, 
       0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xfa, 
       0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1480, 0xa, 
       0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1485, 0xa, 0xfa, 
       0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x7, 0xfb, 0x148a, 0xa, 0xfb, 0xc, 
       0xfb, 0xe, 0xfb, 0x148d, 0xb, 0xfb, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfd, 
       0x3, 0xfd, 0x3, 0xfe, 0x3, 0xfe, 0x5, 0xfe, 0x1495, 0xa, 0xfe, 0x3, 
       0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x5, 0xfe, 0x149b, 0xa, 0xfe, 
       0x3, 0xfe, 0x5, 0xfe, 0x149e, 0xa, 0xfe, 0x3, 0xff, 0x3, 0xff, 0x3, 
       0x100, 0x3, 0x100, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 
       0x5, 0x101, 0x14a8, 0xa, 0x101, 0x3, 0x102, 0x3, 0x102, 0x5, 0x102, 
       0x14ac, 0xa, 0x102, 0x3, 0x103, 0x3, 0x103, 0x3, 0x104, 0x3, 0x104, 
       0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 
       0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 
       0x3, 0x104, 0x6, 0x104, 0x14be, 0xa, 0x104, 0xd, 0x104, 0xe, 0x104, 
       0x14bf, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 
       0x5, 0x105, 0x14c7, 0xa, 0x105, 0x5, 0x105, 0x14c9, 0xa, 0x105, 0x3, 
       0x106, 0x3, 0x106, 0x3, 0x106, 0x6, 0x106, 0x14ce, 0xa, 0x106, 0xd, 
       0x106, 0xe, 0x106, 0x14cf, 0x5, 0x106, 0x14d2, 0xa, 0x106, 0x3, 0x107, 
       0x3, 0x107, 0x5, 0x107, 0x14d6, 0xa, 0x107, 0x3, 0x108, 0x3, 0x108, 
       0x3, 0x108, 0x5, 0x108, 0x14db, 0xa, 0x108, 0x3, 0x109, 0x3, 0x109, 
       0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 0x3, 
       0x109, 0x3, 0x109, 0x5, 0x109, 0x14e6, 0xa, 0x109, 0x3, 0x10a, 0x3, 
       0x10a, 0x3, 0x10b, 0x3, 0x10b, 0x5, 0x10b, 0x14ec, 0xa, 0x10b, 0x3, 
       0x10c, 0x5, 0x10c, 0x14ef, 0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 
       0x10c, 0x14f3, 0xa, 0x10c, 0x3, 0x10c, 0x6, 0x10c, 0x14f6, 0xa, 0x10c, 
       0xd, 0x10c, 0xe, 0x10c, 0x14f7, 0x3, 0x10c, 0x5, 0x10c, 0x14fb, 0xa, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x14ff, 0xa, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x1503, 0xa, 0x10c, 0x5, 0x10c, 0x1505, 
       0xa, 0x10c, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10e, 0x5, 0x10e, 0x150a, 
       0xa, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10f, 0x5, 0x10f, 0x150f, 
       0xa, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x110, 0x3, 0x110, 0x3, 
       0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x5, 0x110, 
       0x151a, 0xa, 0x110, 0x3, 0x110, 0x5, 0x110, 0x151d, 0xa, 0x110, 0x3, 
       0x111, 0x3, 0x111, 0x5, 0x111, 0x1521, 0xa, 0x111, 0x3, 0x111, 0x5, 
       0x111, 0x1524, 0xa, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 
       0x111, 0x1529, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x152c, 0xa, 0x111, 
       0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1530, 0xa, 0x111, 0x3, 0x111, 
       0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1535, 0xa, 0x111, 0x3, 0x111, 
       0x5, 0x111, 0x1538, 0xa, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 
       0x5, 0x111, 0x153d, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1540, 0xa, 
       0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 
       0x1546, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1549, 0xa, 0x111, 0x3, 
       0x111, 0x3, 0x111, 0x5, 0x111, 0x154d, 0xa, 0x111, 0x3, 0x111, 0x5, 
       0x111, 0x1550, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1553, 0xa, 0x111, 
       0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1557, 0xa, 0x111, 0x3, 0x111, 
       0x5, 0x111, 0x155a, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x155d, 0xa, 
       0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1561, 0xa, 0x111, 0x3, 
       0x111, 0x5, 0x111, 0x1564, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1567, 
       0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x156a, 0xa, 0x111, 0x3, 0x111, 
       0x3, 0x111, 0x5, 0x111, 0x156e, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 
       0x1571, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1574, 0xa, 0x111, 0x3, 
       0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1579, 0xa, 0x111, 0x3, 
       0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0x157e, 0xa, 0x111, 0x3, 
       0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1583, 0xa, 0x111, 0x3, 
       0x111, 0x5, 0x111, 0x1586, 0xa, 0x111, 0x3, 0x111, 0x5, 0x111, 0x1589, 
       0xa, 0x111, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x7, 
       0x112, 0x158f, 0xa, 0x112, 0xc, 0x112, 0xe, 0x112, 0x1592, 0xb, 0x112, 
       0x3, 0x112, 0x3, 0x112, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1598, 
       0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x159c, 0xa, 0x113, 
       0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x15a1, 0xa, 0x113, 
       0x3, 0x113, 0x5, 0x113, 0x15a4, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x3, 0x113, 0x5, 0x113, 0x15a9, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x5, 0x113, 0x15ad, 0xa, 0x113, 0x5, 0x113, 0x15af, 0xa, 0x113, 0x3, 
       0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x115, 0x3, 0x115, 
       0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x116, 0x3, 
       0x116, 0x3, 0x116, 0x3, 0x116, 0x5, 0x116, 0x15bf, 0xa, 0x116, 0x3, 
       0x116, 0x3, 0x116, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x7, 0x117, 
       0x15c6, 0xa, 0x117, 0xc, 0x117, 0xe, 0x117, 0x15c9, 0xb, 0x117, 0x3, 
       0x118, 0x3, 0x118, 0x3, 0x118, 0x7, 0x118, 0x15ce, 0xa, 0x118, 0xc, 
       0x118, 0xe, 0x118, 0x15d1, 0xb, 0x118, 0x3, 0x119, 0x3, 0x119, 0x3, 
       0x119, 0x3, 0x119, 0x7, 0x119, 0x15d7, 0xa, 0x119, 0xc, 0x119, 0xe, 
       0x119, 0x15da, 0xb, 0x119, 0x3, 0x119, 0x3, 0x119, 0x3, 0x11a, 0x3, 
       0x11a, 0x3, 0x11a, 0x7, 0x11a, 0x15e1, 0xa, 0x11a, 0xc, 0x11a, 0xe, 
       0x11a, 0x15e4, 0xb, 0x11a, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x7, 
       0x11b, 0x15e9, 0xa, 0x11b, 0xc, 0x11b, 0xe, 0x11b, 0x15ec, 0xb, 0x11b, 
       0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x7, 0x11c, 0x15f1, 0xa, 0x11c, 
       0xc, 0x11c, 0xe, 0x11c, 0x15f4, 0xb, 0x11c, 0x3, 0x11d, 0x3, 0x11d, 
       0x3, 0x11d, 0x7, 0x11d, 0x15f9, 0xa, 0x11d, 0xc, 0x11d, 0xe, 0x11d, 
       0x15fc, 0xb, 0x11d, 0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x7, 0x11e, 
       0x1601, 0xa, 0x11e, 0xc, 0x11e, 0xe, 0x11e, 0x1604, 0xb, 0x11e, 0x3, 
       0x11f, 0x3, 0x11f, 0x5, 0x11f, 0x1608, 0xa, 0x11f, 0x3, 0x11f, 0x3, 
       0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x5, 0x11f, 0x160f, 0xa, 
       0x11f, 0x5, 0x11f, 0x1611, 0xa, 0x11f, 0x3, 0x120, 0x3, 0x120, 0x3, 
       0x120, 0x5, 0x120, 0x1616, 0xa, 0x120, 0x3, 0x120, 0x5, 0x120, 0x1619, 
       0xa, 0x120, 0x3, 0x120, 0x3, 0x120, 0x3, 0x120, 0x5, 0x120, 0x161e, 
       0xa, 0x120, 0x3, 0x120, 0x5, 0x120, 0x1621, 0xa, 0x120, 0x3, 0x121, 
       0x3, 0x121, 0x5, 0x121, 0x1625, 0xa, 0x121, 0x3, 0x122, 0x3, 0x122, 
       0x3, 0x122, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 0x3, 
       0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x5, 0x124, 
       0x1633, 0xa, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 
       0x3, 0x124, 0x5, 0x124, 0x163a, 0xa, 0x124, 0x3, 0x124, 0x3, 0x124, 
       0x3, 0x124, 0x5, 0x124, 0x163f, 0xa, 0x124, 0x3, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x6, 0x125, 0x165f, 0xa, 0x125, 0xd, 0x125, 0xe, 0x125, 0x1660, 
       0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x1665, 0xa, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x6, 0x125, 0x166b, 0xa, 0x125, 
       0xd, 0x125, 0xe, 0x125, 0x166c, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 
       0x1671, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x167a, 0xa, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x5, 0x125, 0x1682, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x5, 0x125, 0x1687, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x168f, 0xa, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x1694, 0xa, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x1699, 0xa, 
       0x125, 0x5, 0x125, 0x169b, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 
       0x16a4, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 
       0x16a9, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x16b1, 0xa, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x16b6, 0xa, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 
       0x125, 0x16be, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 0x16c6, 0xa, 0x125, 0x3, 
       0x125, 0x5, 0x125, 0x16c9, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 
       0x5, 0x125, 0x16d3, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x5, 0x125, 0x16de, 0xa, 0x125, 0x3, 0x126, 0x3, 0x126, 0x3, 
       0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x7, 0x127, 0x16e9, 0xa, 0x127, 0xc, 0x127, 0xe, 0x127, 
       0x16ec, 0xb, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x5, 0x127, 0x16f3, 0xa, 0x127, 0x3, 0x128, 0x3, 0x128, 
       0x5, 0x128, 0x16f7, 0xa, 0x128, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 
       0x5, 0x129, 0x16fc, 0xa, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 
       0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x5, 0x129, 0x1705, 
       0xa, 0x129, 0x3, 0x129, 0x5, 0x129, 0x1708, 0xa, 0x129, 0x3, 0x129, 
       0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 
       0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x5, 0x129, 0x1714, 0xa, 
       0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 
       0x3, 0x129, 0x5, 0x129, 0x171c, 0xa, 0x129, 0x3, 0x129, 0x3, 0x129, 
       0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x7, 0x129, 0x1724, 
       0xa, 0x129, 0xc, 0x129, 0xe, 0x129, 0x1727, 0xb, 0x129, 0x5, 0x129, 
       0x1729, 0xa, 0x129, 0x3, 0x129, 0x3, 0x129, 0x5, 0x129, 0x172d, 0xa, 
       0x129, 0x3, 0x129, 0x3, 0x129, 0x5, 0x129, 0x1731, 0xa, 0x129, 0x3, 
       0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 
       0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 
       0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 
       0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 
       0x12a, 0x5, 0x12a, 0x174a, 0xa, 0x12a, 0x3, 0x12b, 0x3, 0x12b, 0x3, 
       0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 
       0x3, 0x12c, 0x5, 0x12c, 0x1755, 0xa, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 
       0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x5, 0x12c, 0x175c, 0xa, 0x12c, 
       0x7, 0x12c, 0x175e, 0xa, 0x12c, 0xc, 0x12c, 0xe, 0x12c, 0x1761, 0xb, 
       0x12c, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x5, 0x12d, 
       0x1767, 0xa, 0x12d, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 
       0x3, 0x12e, 0x3, 0x12e, 0x5, 0x12e, 0x176f, 0xa, 0x12e, 0x3, 0x12e, 
       0x3, 0x12e, 0x3, 0x12e, 0x5, 0x12e, 0x1774, 0xa, 0x12e, 0x3, 0x12e, 
       0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x7, 0x12e, 0x177a, 0xa, 0x12e, 
       0xc, 0x12e, 0xe, 0x12e, 0x177d, 0xb, 0x12e, 0x3, 0x12f, 0x3, 0x12f, 
       0x3, 0x12f, 0x5, 0x12f, 0x1782, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 
       0x12f, 0x1796, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x179c, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x17a2, 0xa, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x17b2, 0xa, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x17b8, 0xa, 0x12f, 0x7, 
       0x12f, 0x17ba, 0xa, 0x12f, 0xc, 0x12f, 0xe, 0x12f, 0x17bd, 0xb, 0x12f, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 
       0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x7, 0x130, 0x17cd, 0xa, 0x130, 
       0xc, 0x130, 0xe, 0x130, 0x17d0, 0xb, 0x130, 0x3, 0x130, 0x3, 0x130, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x6, 
       0x130, 0x17d9, 0xa, 0x130, 0xd, 0x130, 0xe, 0x130, 0x17da, 0x3, 0x130, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 
       0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x5, 0x130, 0x17ed, 
       0xa, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 
       0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 
       0x3, 0x130, 0x7, 0x130, 0x17fa, 0xa, 0x130, 0xc, 0x130, 0xe, 0x130, 
       0x17fd, 0xb, 0x130, 0x3, 0x131, 0x3, 0x131, 0x3, 0x132, 0x3, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 
       0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 
       0x3, 0x132, 0x5, 0x132, 0x180f, 0xa, 0x132, 0x3, 0x133, 0x3, 0x133, 
       0x3, 0x133, 0x3, 0x133, 0x3, 0x133, 0x3, 0x133, 0x3, 0x133, 0x5, 
       0x133, 0x1818, 0xa, 0x133, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 
       0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x5, 0x134, 0x1821, 0xa, 
       0x134, 0x3, 0x135, 0x3, 0x135, 0x3, 0x136, 0x3, 0x136, 0x3, 0x137, 
       0x3, 0x137, 0x3, 0x138, 0x3, 0x138, 0x3, 0x139, 0x3, 0x139, 0x3, 
       0x13a, 0x3, 0x13a, 0x3, 0x13b, 0x3, 0x13b, 0x3, 0x13c, 0x3, 0x13c, 
       0x3, 0x13c, 0x2, 0x5, 0x25a, 0x25c, 0x25e, 0x13d, 0x2, 0x4, 0x6, 
       0x8, 0xa, 0xc, 0xe, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
       0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 
       0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 
       0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 
       0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 
       0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 
       0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 
       0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 
       0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 
       0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 
       0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 
       0xfc, 0xfe, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10a, 0x10c, 0x10e, 
       0x110, 0x112, 0x114, 0x116, 0x118, 0x11a, 0x11c, 0x11e, 0x120, 0x122, 
       0x124, 0x126, 0x128, 0x12a, 0x12c, 0x12e, 0x130, 0x132, 0x134, 0x136, 
       0x138, 0x13a, 0x13c, 0x13e, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14a, 
       0x14c, 0x14e, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15a, 0x15c, 0x15e, 
       0x160, 0x162, 0x164, 0x166, 0x168, 0x16a, 0x16c, 0x16e, 0x170, 0x172, 
       0x174, 0x176, 0x178, 0x17a, 0x17c, 0x17e, 0x180, 0x182, 0x184, 0x186, 
       0x188, 0x18a, 0x18c, 0x18e, 0x190, 0x192, 0x194, 0x196, 0x198, 0x19a, 
       0x19c, 0x19e, 0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 0x1aa, 0x1ac, 0x1ae, 
       0x1b0, 0x1b2, 0x1b4, 0x1b6, 0x1b8, 0x1ba, 0x1bc, 0x1be, 0x1c0, 0x1c2, 
       0x1c4, 0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 0x1d2, 0x1d4, 0x1d6, 
       0x1d8, 0x1da, 0x1dc, 0x1de, 0x1e0, 0x1e2, 0x1e4, 0x1e6, 0x1e8, 0x1ea, 
       0x1ec, 0x1ee, 0x1f0, 0x1f2, 0x1f4, 0x1f6, 0x1f8, 0x1fa, 0x1fc, 0x1fe, 
       0x200, 0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c, 0x20e, 0x210, 0x212, 
       0x214, 0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x220, 0x222, 0x224, 0x226, 
       0x228, 0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x234, 0x236, 0x238, 0x23a, 
       0x23c, 0x23e, 0x240, 0x242, 0x244, 0x246, 0x248, 0x24a, 0x24c, 0x24e, 
       0x250, 0x252, 0x254, 0x256, 0x258, 0x25a, 0x25c, 0x25e, 0x260, 0x262, 
       0x264, 0x266, 0x268, 0x26a, 0x26c, 0x26e, 0x270, 0x272, 0x274, 0x276, 
       0x2, 0x7a, 0x4, 0x2, 0x24, 0x24, 0x84, 0x84, 0x4, 0x2, 0x1ab, 0x1ab, 
       0x1b0, 0x1b0, 0x5, 0x2, 0x3e, 0x3e, 0x8a, 0x8a, 0x9e, 0x9e, 0x5, 
       0x2, 0x27, 0x27, 0x12b, 0x12b, 0x169, 0x169, 0x6, 0x2, 0x27, 0x27, 
       0x14a, 0x14a, 0x1aa, 0x1aa, 0x1ee, 0x1ee, 0x4, 0x2, 0x1a2, 0x1a2, 
       0x3d3, 0x3d3, 0x4, 0x2, 0x45, 0x45, 0x7d, 0x7d, 0x4, 0x2, 0xf, 0xf, 
       0x100, 0x100, 0x5, 0x2, 0x29, 0x29, 0x4b, 0x4b, 0xa1, 0xa1, 0x4, 
       0x2, 0x157, 0x157, 0x1c2, 0x1c2, 0x5, 0x2, 0x19b, 0x19b, 0x212, 0x212, 
       0x218, 0x218, 0x4, 0x2, 0x131, 0x131, 0x16e, 0x16e, 0x4, 0x2, 0x112, 
       0x112, 0x17c, 0x17c, 0x4, 0x2, 0x110, 0x110, 0x160, 0x160, 0x5, 0x2, 
       0x46, 0x46, 0x4a, 0x4a, 0x6e, 0x6e, 0x5, 0x2, 0x27, 0x27, 0x13b, 
       0x13b, 0x155, 0x155, 0x5, 0x2, 0x27, 0x27, 0x137, 0x137, 0x274, 0x274, 
       0x4, 0x2, 0x208, 0x208, 0x226, 0x226, 0x4, 0x2, 0x47, 0x47, 0x51, 
       0x51, 0x5, 0x2, 0x159, 0x159, 0x1b9, 0x1b9, 0x1f0, 0x1f0, 0x4, 0x2, 
       0x3e, 0x3e, 0x8a, 0x8a, 0x3, 0x2, 0x116, 0x117, 0x3, 0x2, 0x3c9, 
       0x3ca, 0x4, 0x2, 0x3d3, 0x3d3, 0x3db, 0x3db, 0x5, 0x2, 0x154, 0x154, 
       0x177, 0x177, 0x1a8, 0x1a8, 0x4, 0x2, 0x27, 0x27, 0x3c9, 0x3ca, 0x8, 
       0x2, 0x27, 0x27, 0x121, 0x121, 0x123, 0x123, 0x13b, 0x13b, 0x155, 
       0x155, 0x1cf, 0x1cf, 0x3, 0x2, 0x3ca, 0x3cb, 0x4, 0x2, 0x7, 0x7, 
       0x2f, 0x2f, 0x4, 0x2, 0xd, 0xd, 0x98, 0x98, 0x4, 0x2, 0xa9, 0xa9, 
       0x22a, 0x22a, 0x4, 0x2, 0x14, 0x14, 0x7f, 0x7f, 0x5, 0x2, 0x28, 0x28, 
       0x43, 0x43, 0x5e, 0x5e, 0x4, 0x2, 0x5e, 0x5e, 0x125, 0x125, 0x4, 
       0x2, 0x11d, 0x11d, 0x151, 0x151, 0x4, 0x2, 0x5a, 0x5a, 0x1e6, 0x1e6, 
       0x4, 0x2, 0x28, 0x28, 0x5e, 0x5e, 0x4, 0x2, 0x8, 0x8, 0x2d, 0x2d, 
       0x4, 0x2, 0xa5, 0xa5, 0x223, 0x223, 0x6, 0x2, 0x154, 0x154, 0x177, 
       0x177, 0x1a7, 0x1a7, 0x1c5, 0x1c5, 0x4, 0x2, 0x154, 0x154, 0x1a7, 
       0x1a7, 0x4, 0x2, 0xe, 0xe, 0x2a, 0x2a, 0x5, 0x2, 0x3b, 0x3b, 0x45, 
       0x45, 0xa3, 0xa3, 0x4, 0x2, 0x21, 0x21, 0x49, 0x49, 0x4, 0x2, 0x56, 
       0x56, 0x82, 0x82, 0x4, 0x2, 0x8, 0x8, 0x2d, 0x2e, 0x3, 0x2, 0x1fd, 
       0x1fe, 0x4, 0x2, 0x15c, 0x15c, 0x1ec, 0x1ec, 0x4, 0x2, 0xc3, 0xc3, 
       0x17f, 0x17f, 0x7, 0x2, 0x5f, 0x5f, 0x184, 0x185, 0x187, 0x187, 0x18b, 
       0x193, 0x1d1, 0x1d1, 0x6, 0x2, 0x181, 0x182, 0x186, 0x186, 0x188, 
       0x189, 0x1d2, 0x1d2, 0x5, 0x2, 0x60, 0x60, 0x180, 0x180, 0x18a, 0x18a, 
       0x4, 0x2, 0x170, 0x170, 0x1ff, 0x1ff, 0x4, 0x2, 0x1f9, 0x1f9, 0x1fb, 
       0x1fb, 0x4, 0x2, 0x10a, 0x10a, 0x200, 0x200, 0x4, 0x2, 0x50, 0x50, 
       0x1e0, 0x1e0, 0x4, 0x2, 0x2f, 0x2f, 0x12f, 0x12f, 0x5, 0x2, 0x1e, 
       0x1e, 0x36, 0x36, 0x9c, 0x9c, 0x5, 0x2, 0x73, 0x73, 0x95, 0x95, 0x15a, 
       0x15a, 0x4, 0x2, 0x5c, 0x5c, 0x9f, 0x9f, 0x4, 0x2, 0x119, 0x119, 
       0x1f1, 0x1f1, 0x4, 0x2, 0x25, 0x25, 0x225, 0x225, 0x4, 0x2, 0x66, 
       0x66, 0x17c, 0x17c, 0x4, 0x2, 0x14d, 0x14d, 0x1cb, 0x1cb, 0x6, 0x2, 
       0xb1, 0xb1, 0xb3, 0xb3, 0xb7, 0xb7, 0x209, 0x209, 0x4, 0x2, 0x3aa, 
       0x3aa, 0x3bb, 0x3bb, 0x4, 0x2, 0x10b, 0x10b, 0x1d3, 0x1d3, 0x4, 0x2, 
       0x3d, 0x3d, 0x46, 0x46, 0x8, 0x2, 0x73, 0x73, 0x95, 0x95, 0x9a, 0x9a, 
       0x146, 0x146, 0x15a, 0x15a, 0x225, 0x225, 0x4, 0x2, 0x1a1, 0x1a1, 
       0x205, 0x205, 0x4, 0x2, 0x143, 0x143, 0x229, 0x229, 0x4, 0x2, 0x73, 
       0x73, 0x15a, 0x15a, 0x5, 0x2, 0x47, 0x47, 0x52, 0x52, 0x167, 0x167, 
       0x5, 0x2, 0x15c, 0x15c, 0x17c, 0x17c, 0x1ec, 0x1ec, 0x4, 0x2, 0x205, 
       0x205, 0x224, 0x224, 0x4, 0x2, 0x126, 0x126, 0x1ca, 0x1ca, 0x8, 0x2, 
       0xc3, 0xc3, 0x140, 0x140, 0x142, 0x142, 0x15b, 0x15b, 0x1d0, 0x1d0, 
       0x1f2, 0x1f2, 0x4, 0x2, 0x2a, 0x2b, 0x37, 0x37, 0x5, 0x2, 0x14d, 
       0x14d, 0x1bb, 0x1bb, 0x2cf, 0x2cf, 0x4, 0x2, 0x174, 0x174, 0x214, 
       0x214, 0x5, 0x2, 0x3d3, 0x3d3, 0x3db, 0x3db, 0x3dd, 0x3dd, 0x3, 0x2, 
       0x3de, 0x3df, 0x5, 0x2, 0x26f, 0x27a, 0x3d3, 0x3d3, 0x3db, 0x3dc, 
       0x4, 0x2, 0x3c9, 0x3cb, 0x3d4, 0x3d4, 0x4, 0x2, 0x38, 0x38, 0x9b, 
       0x9b, 0x4, 0x2, 0x67, 0x67, 0x3d7, 0x3d7, 0x5, 0x2, 0xbf, 0xc1, 0xc9, 
       0xcc, 0x1a5, 0x1a5, 0x4, 0x2, 0x18, 0x18, 0xc0, 0xc0, 0x4, 0x2, 0x18, 
       0x18, 0xbf, 0xbf, 0x3, 0x2, 0xad, 0xb2, 0x4, 0x2, 0xa0, 0xa0, 0x1ef, 
       0x1ef, 0x4, 0x2, 0xb6, 0xb9, 0x155, 0x155, 0x6, 0x2, 0xba, 0xba, 
       0xc5, 0xc8, 0xcf, 0xcf, 0x10e, 0x10f, 0x5, 0x2, 0xbb, 0xbe, 0xc3, 
       0xc4, 0x10c, 0x10c, 0x4, 0x2, 0x87, 0x87, 0xcd, 0xcd, 0x4, 0x2, 0x174, 
       0x174, 0x27f, 0x287, 0x4, 0x2, 0xc3, 0xc3, 0x1a5, 0x1a5, 0x4, 0x2, 
       0xba, 0xbb, 0xbd, 0xbd, 0x4, 0x2, 0xed, 0xee, 0xf4, 0xf4, 0x4, 0x2, 
       0x22, 0x22, 0xeb, 0xee, 0x3, 0x2, 0xf7, 0xf8, 0x5, 0x2, 0x11, 0x11, 
       0x54, 0x54, 0x99, 0x99, 0x4, 0x2, 0xbf, 0xbf, 0xc3, 0xc3, 0x5, 0x2, 
       0xe, 0xe, 0x2a, 0x2a, 0x33b, 0x33b, 0x5, 0x2, 0xdb, 0xdb, 0xe1, 0xe2, 
       0xe7, 0xe7, 0x5, 0x2, 0xdc, 0xde, 0xe3, 0xe6, 0xe8, 0xea, 0x4, 0x2, 
       0x1ae, 0x1ae, 0x1bc, 0x1bc, 0x4, 0x2, 0x65, 0x65, 0x3be, 0x3be, 0x5, 
       0x2, 0x38, 0x38, 0x9b, 0x9b, 0x21c, 0x21c, 0x4, 0x2, 0x79, 0x79, 
       0x83, 0x83, 0x5, 0x2, 0x8, 0x8, 0x103, 0x103, 0x1f5, 0x1f5, 0x6, 
       0x2, 0x65, 0x65, 0x3b6, 0x3b6, 0x3b8, 0x3b8, 0x3be, 0x3bf, 0x3, 0x2, 
       0x3b3, 0x3ba, 0x3, 0x2, 0x247, 0x26e, 0x3, 0x2, 0x27b, 0x27e, 0x3, 
       0x2, 0x23d, 0x245, 0x3, 0x2, 0x235, 0x23c, 0x5, 0x2, 0xba, 0xbe, 
       0xca, 0xca, 0xcd, 0xcd, 0x9, 0x2, 0xcf, 0xcf, 0xfe, 0x16c, 0x16e, 
       0x207, 0x209, 0x225, 0x228, 0x22f, 0x234, 0x234, 0x274, 0x274, 0xd, 
       0x2, 0x24, 0x24, 0xba, 0xbc, 0xbe, 0xbe, 0xdf, 0xdf, 0xf6, 0xf6, 
       0x16d, 0x16d, 0x227, 0x227, 0x235, 0x23c, 0x246, 0x246, 0x27f, 0x27f, 
       0x282, 0x3a9, 0x2, 0x1c54, 0x2, 0x279, 0x3, 0x2, 0x2, 0x2, 0x4, 0x28a, 
       0x3, 0x2, 0x2, 0x2, 0x6, 0x29e, 0x3, 0x2, 0x2, 0x2, 0x8, 0x2a0, 0x3, 
       0x2, 0x2, 0x2, 0xa, 0x2c5, 0x3, 0x2, 0x2, 0x2, 0xc, 0x2d1, 0x3, 0x2, 
       0x2, 0x2, 0xe, 0x2dc, 0x3, 0x2, 0x2, 0x2, 0x10, 0x2ed, 0x3, 0x2, 
       0x2, 0x2, 0x12, 0x2f2, 0x3, 0x2, 0x2, 0x2, 0x14, 0x2fe, 0x3, 0x2, 
       0x2, 0x2, 0x16, 0x319, 0x3, 0x2, 0x2, 0x2, 0x18, 0x31f, 0x3, 0x2, 
       0x2, 0x2, 0x1a, 0x321, 0x3, 0x2, 0x2, 0x2, 0x1c, 0x32d, 0x3, 0x2, 
       0x2, 0x2, 0x1e, 0x34b, 0x3, 0x2, 0x2, 0x2, 0x20, 0x36f, 0x3, 0x2, 
       0x2, 0x2, 0x22, 0x3a2, 0x3, 0x2, 0x2, 0x2, 0x24, 0x3bc, 0x3, 0x2, 
       0x2, 0x2, 0x26, 0x3d8, 0x3, 0x2, 0x2, 0x2, 0x28, 0x439, 0x3, 0x2, 
       0x2, 0x2, 0x2a, 0x43b, 0x3, 0x2, 0x2, 0x2, 0x2c, 0x44d, 0x3, 0x2, 
       0x2, 0x2, 0x2e, 0x48a, 0x3, 0x2, 0x2, 0x2, 0x30, 0x49d, 0x3, 0x2, 
       0x2, 0x2, 0x32, 0x4d8, 0x3, 0x2, 0x2, 0x2, 0x34, 0x4da, 0x3, 0x2, 
       0x2, 0x2, 0x36, 0x506, 0x3, 0x2, 0x2, 0x2, 0x38, 0x50c, 0x3, 0x2, 
       0x2, 0x2, 0x3a, 0x50e, 0x3, 0x2, 0x2, 0x2, 0x3c, 0x523, 0x3, 0x2, 
       0x2, 0x2, 0x3e, 0x52a, 0x3, 0x2, 0x2, 0x2, 0x40, 0x52c, 0x3, 0x2, 
       0x2, 0x2, 0x42, 0x53c, 0x3, 0x2, 0x2, 0x2, 0x44, 0x53f, 0x3, 0x2, 
       0x2, 0x2, 0x46, 0x544, 0x3, 0x2, 0x2, 0x2, 0x48, 0x55e, 0x3, 0x2, 
       0x2, 0x2, 0x4a, 0x56e, 0x3, 0x2, 0x2, 0x2, 0x4c, 0x570, 0x3, 0x2, 
       0x2, 0x2, 0x4e, 0x580, 0x3, 0x2, 0x2, 0x2, 0x50, 0x582, 0x3, 0x2, 
       0x2, 0x2, 0x52, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x54, 0x5f8, 0x3, 0x2, 
       0x2, 0x2, 0x56, 0x5fa, 0x3, 0x2, 0x2, 0x2, 0x58, 0x616, 0x3, 0x2, 
       0x2, 0x2, 0x5a, 0x61e, 0x3, 0x2, 0x2, 0x2, 0x5c, 0x63c, 0x3, 0x2, 
       0x2, 0x2, 0x5e, 0x6ce, 0x3, 0x2, 0x2, 0x2, 0x60, 0x6d0, 0x3, 0x2, 
       0x2, 0x2, 0x62, 0x6d3, 0x3, 0x2, 0x2, 0x2, 0x64, 0x71d, 0x3, 0x2, 
       0x2, 0x2, 0x66, 0x734, 0x3, 0x2, 0x2, 0x2, 0x68, 0x7b9, 0x3, 0x2, 
       0x2, 0x2, 0x6a, 0x7be, 0x3, 0x2, 0x2, 0x2, 0x6c, 0x7c0, 0x3, 0x2, 
       0x2, 0x2, 0x6e, 0x7ca, 0x3, 0x2, 0x2, 0x2, 0x70, 0x7ff, 0x3, 0x2, 
       0x2, 0x2, 0x72, 0x813, 0x3, 0x2, 0x2, 0x2, 0x74, 0x815, 0x3, 0x2, 
       0x2, 0x2, 0x76, 0x838, 0x3, 0x2, 0x2, 0x2, 0x78, 0x841, 0x3, 0x2, 
       0x2, 0x2, 0x7a, 0x848, 0x3, 0x2, 0x2, 0x2, 0x7c, 0x85f, 0x3, 0x2, 
       0x2, 0x2, 0x7e, 0x868, 0x3, 0x2, 0x2, 0x2, 0x80, 0x877, 0x3, 0x2, 
       0x2, 0x2, 0x82, 0x88d, 0x3, 0x2, 0x2, 0x2, 0x84, 0x8a1, 0x3, 0x2, 
       0x2, 0x2, 0x86, 0xa24, 0x3, 0x2, 0x2, 0x2, 0x88, 0xa26, 0x3, 0x2, 
       0x2, 0x2, 0x8a, 0xa2d, 0x3, 0x2, 0x2, 0x2, 0x8c, 0xa34, 0x3, 0x2, 
       0x2, 0x2, 0x8e, 0xa4b, 0x3, 0x2, 0x2, 0x2, 0x90, 0xa53, 0x3, 0x2, 
       0x2, 0x2, 0x92, 0xa5a, 0x3, 0x2, 0x2, 0x2, 0x94, 0xa61, 0x3, 0x2, 
       0x2, 0x2, 0x96, 0xa68, 0x3, 0x2, 0x2, 0x2, 0x98, 0xa74, 0x3, 0x2, 
       0x2, 0x2, 0x9a, 0xa7e, 0x3, 0x2, 0x2, 0x2, 0x9c, 0xa85, 0x3, 0x2, 
       0x2, 0x2, 0x9e, 0xa95, 0x3, 0x2, 0x2, 0x2, 0xa0, 0xa9f, 0x3, 0x2, 
       0x2, 0x2, 0xa2, 0xaa3, 0x3, 0x2, 0x2, 0x2, 0xa4, 0xaa9, 0x3, 0x2, 
       0x2, 0x2, 0xa6, 0xab5, 0x3, 0x2, 0x2, 0x2, 0xa8, 0xab7, 0x3, 0x2, 
       0x2, 0x2, 0xaa, 0xabe, 0x3, 0x2, 0x2, 0x2, 0xac, 0xac0, 0x3, 0x2, 
       0x2, 0x2, 0xae, 0xaf2, 0x3, 0x2, 0x2, 0x2, 0xb0, 0xb3c, 0x3, 0x2, 
       0x2, 0x2, 0xb2, 0xb77, 0x3, 0x2, 0x2, 0x2, 0xb4, 0xbcf, 0x3, 0x2, 
       0x2, 0x2, 0xb6, 0xbd3, 0x3, 0x2, 0x2, 0x2, 0xb8, 0xbe4, 0x3, 0x2, 
       0x2, 0x2, 0xba, 0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbc, 0xbec, 0x3, 0x2, 
       0x2, 0x2, 0xbe, 0xbf4, 0x3, 0x2, 0x2, 0x2, 0xc0, 0xbf6, 0x3, 0x2, 
       0x2, 0x2, 0xc2, 0xc19, 0x3, 0x2, 0x2, 0x2, 0xc4, 0xc3f, 0x3, 0x2, 
       0x2, 0x2, 0xc6, 0xc44, 0x3, 0x2, 0x2, 0x2, 0xc8, 0xc4d, 0x3, 0x2, 
       0x2, 0x2, 0xca, 0xc60, 0x3, 0x2, 0x2, 0x2, 0xcc, 0xc6b, 0x3, 0x2, 
       0x2, 0x2, 0xce, 0xc6f, 0x3, 0x2, 0x2, 0x2, 0xd0, 0xc8f, 0x3, 0x2, 
       0x2, 0x2, 0xd2, 0xca3, 0x3, 0x2, 0x2, 0x2, 0xd4, 0xcad, 0x3, 0x2, 
       0x2, 0x2, 0xd6, 0xcb1, 0x3, 0x2, 0x2, 0x2, 0xd8, 0xcca, 0x3, 0x2, 
       0x2, 0x2, 0xda, 0xcf4, 0x3, 0x2, 0x2, 0x2, 0xdc, 0xcf6, 0x3, 0x2, 
       0x2, 0x2, 0xde, 0xd05, 0x3, 0x2, 0x2, 0x2, 0xe0, 0xd28, 0x3, 0x2, 
       0x2, 0x2, 0xe2, 0xd2a, 0x3, 0x2, 0x2, 0x2, 0xe4, 0xd2d, 0x3, 0x2, 
       0x2, 0x2, 0xe6, 0xd3a, 0x3, 0x2, 0x2, 0x2, 0xe8, 0xd44, 0x3, 0x2, 
       0x2, 0x2, 0xea, 0xd80, 0x3, 0x2, 0x2, 0x2, 0xec, 0xd82, 0x3, 0x2, 
       0x2, 0x2, 0xee, 0xd9c, 0x3, 0x2, 0x2, 0x2, 0xf0, 0xda2, 0x3, 0x2, 
       0x2, 0x2, 0xf2, 0xdb2, 0x3, 0x2, 0x2, 0x2, 0xf4, 0xdb6, 0x3, 0x2, 
       0x2, 0x2, 0xf6, 0xddc, 0x3, 0x2, 0x2, 0x2, 0xf8, 0xe02, 0x3, 0x2, 
       0x2, 0x2, 0xfa, 0xe10, 0x3, 0x2, 0x2, 0x2, 0xfc, 0xe18, 0x3, 0x2, 
       0x2, 0x2, 0xfe, 0xe1a, 0x3, 0x2, 0x2, 0x2, 0x100, 0xe1d, 0x3, 0x2, 
       0x2, 0x2, 0x102, 0xe20, 0x3, 0x2, 0x2, 0x2, 0x104, 0xe2e, 0x3, 0x2, 
       0x2, 0x2, 0x106, 0xe31, 0x3, 0x2, 0x2, 0x2, 0x108, 0xe35, 0x3, 0x2, 
       0x2, 0x2, 0x10a, 0xe45, 0x3, 0x2, 0x2, 0x2, 0x10c, 0xe47, 0x3, 0x2, 
       0x2, 0x2, 0x10e, 0xe53, 0x3, 0x2, 0x2, 0x2, 0x110, 0xe57, 0x3, 0x2, 
       0x2, 0x2, 0x112, 0xe68, 0x3, 0x2, 0x2, 0x2, 0x114, 0xe79, 0x3, 0x2, 
       0x2, 0x2, 0x116, 0xe7c, 0x3, 0x2, 0x2, 0x2, 0x118, 0xe86, 0x3, 0x2, 
       0x2, 0x2, 0x11a, 0xe8a, 0x3, 0x2, 0x2, 0x2, 0x11c, 0xe94, 0x3, 0x2, 
       0x2, 0x2, 0x11e, 0xe97, 0x3, 0x2, 0x2, 0x2, 0x120, 0xe9c, 0x3, 0x2, 
       0x2, 0x2, 0x122, 0xeb0, 0x3, 0x2, 0x2, 0x2, 0x124, 0xeb2, 0x3, 0x2, 
       0x2, 0x2, 0x126, 0xec3, 0x3, 0x2, 0x2, 0x2, 0x128, 0xecc, 0x3, 0x2, 
       0x2, 0x2, 0x12a, 0xed5, 0x3, 0x2, 0x2, 0x2, 0x12c, 0xed7, 0x3, 0x2, 
       0x2, 0x2, 0x12e, 0xee5, 0x3, 0x2, 0x2, 0x2, 0x130, 0xef0, 0x3, 0x2, 
       0x2, 0x2, 0x132, 0xef9, 0x3, 0x2, 0x2, 0x2, 0x134, 0xefc, 0x3, 0x2, 
       0x2, 0x2, 0x136, 0xf04, 0x3, 0x2, 0x2, 0x2, 0x138, 0xf1d, 0x3, 0x2, 
       0x2, 0x2, 0x13a, 0xf29, 0x3, 0x2, 0x2, 0x2, 0x13c, 0xf2c, 0x3, 0x2, 
       0x2, 0x2, 0x13e, 0xf4c, 0x3, 0x2, 0x2, 0x2, 0x140, 0xf4e, 0x3, 0x2, 
       0x2, 0x2, 0x142, 0xf50, 0x3, 0x2, 0x2, 0x2, 0x144, 0xf52, 0x3, 0x2, 
       0x2, 0x2, 0x146, 0xf54, 0x3, 0x2, 0x2, 0x2, 0x148, 0xf89, 0x3, 0x2, 
       0x2, 0x2, 0x14a, 0xf8b, 0x3, 0x2, 0x2, 0x2, 0x14c, 0xf91, 0x3, 0x2, 
       0x2, 0x2, 0x14e, 0xfa5, 0x3, 0x2, 0x2, 0x2, 0x150, 0xfb3, 0x3, 0x2, 
       0x2, 0x2, 0x152, 0xfbe, 0x3, 0x2, 0x2, 0x2, 0x154, 0xfc0, 0x3, 0x2, 
       0x2, 0x2, 0x156, 0xfc6, 0x3, 0x2, 0x2, 0x2, 0x158, 0xfd0, 0x3, 0x2, 
       0x2, 0x2, 0x15a, 0xfd4, 0x3, 0x2, 0x2, 0x2, 0x15c, 0xfdb, 0x3, 0x2, 
       0x2, 0x2, 0x15e, 0xfdf, 0x3, 0x2, 0x2, 0x2, 0x160, 0xfe5, 0x3, 0x2, 
       0x2, 0x2, 0x162, 0xfec, 0x3, 0x2, 0x2, 0x2, 0x164, 0xff2, 0x3, 0x2, 
       0x2, 0x2, 0x166, 0xff8, 0x3, 0x2, 0x2, 0x2, 0x168, 0xffd, 0x3, 0x2, 
       0x2, 0x2, 0x16a, 0x102a, 0x3, 0x2, 0x2, 0x2, 0x16c, 0x103f, 0x3, 
       0x2, 0x2, 0x2, 0x16e, 0x1058, 0x3, 0x2, 0x2, 0x2, 0x170, 0x105b, 
       0x3, 0x2, 0x2, 0x2, 0x172, 0x1061, 0x3, 0x2, 0x2, 0x2, 0x174, 0x1071, 
       0x3, 0x2, 0x2, 0x2, 0x176, 0x1080, 0x3, 0x2, 0x2, 0x2, 0x178, 0x1086, 
       0x3, 0x2, 0x2, 0x2, 0x17a, 0x10a4, 0x3, 0x2, 0x2, 0x2, 0x17c, 0x10a6, 
       0x3, 0x2, 0x2, 0x2, 0x17e, 0x10ad, 0x3, 0x2, 0x2, 0x2, 0x180, 0x10b9, 
       0x3, 0x2, 0x2, 0x2, 0x182, 0x10bf, 0x3, 0x2, 0x2, 0x2, 0x184, 0x10d8, 
       0x3, 0x2, 0x2, 0x2, 0x186, 0x10dc, 0x3, 0x2, 0x2, 0x2, 0x188, 0x10e0, 
       0x3, 0x2, 0x2, 0x2, 0x18a, 0x10eb, 0x3, 0x2, 0x2, 0x2, 0x18c, 0x1129, 
       0x3, 0x2, 0x2, 0x2, 0x18e, 0x1161, 0x3, 0x2, 0x2, 0x2, 0x190, 0x1163, 
       0x3, 0x2, 0x2, 0x2, 0x192, 0x1170, 0x3, 0x2, 0x2, 0x2, 0x194, 0x11a2, 
       0x3, 0x2, 0x2, 0x2, 0x196, 0x11b4, 0x3, 0x2, 0x2, 0x2, 0x198, 0x11e6, 
       0x3, 0x2, 0x2, 0x2, 0x19a, 0x11e8, 0x3, 0x2, 0x2, 0x2, 0x19c, 0x11f5, 
       0x3, 0x2, 0x2, 0x2, 0x19e, 0x1200, 0x3, 0x2, 0x2, 0x2, 0x1a0, 0x121b, 
       0x3, 0x2, 0x2, 0x2, 0x1a2, 0x1225, 0x3, 0x2, 0x2, 0x2, 0x1a4, 0x122f, 
       0x3, 0x2, 0x2, 0x2, 0x1a6, 0x1231, 0x3, 0x2, 0x2, 0x2, 0x1a8, 0x123b, 
       0x3, 0x2, 0x2, 0x2, 0x1aa, 0x123e, 0x3, 0x2, 0x2, 0x2, 0x1ac, 0x1270, 
       0x3, 0x2, 0x2, 0x2, 0x1ae, 0x127f, 0x3, 0x2, 0x2, 0x2, 0x1b0, 0x1281, 
       0x3, 0x2, 0x2, 0x2, 0x1b2, 0x1285, 0x3, 0x2, 0x2, 0x2, 0x1b4, 0x128c, 
       0x3, 0x2, 0x2, 0x2, 0x1b6, 0x1295, 0x3, 0x2, 0x2, 0x2, 0x1b8, 0x129b, 
       0x3, 0x2, 0x2, 0x2, 0x1ba, 0x12a2, 0x3, 0x2, 0x2, 0x2, 0x1bc, 0x12b8, 
       0x3, 0x2, 0x2, 0x2, 0x1be, 0x12ba, 0x3, 0x2, 0x2, 0x2, 0x1c0, 0x12c5, 
       0x3, 0x2, 0x2, 0x2, 0x1c2, 0x12cb, 0x3, 0x2, 0x2, 0x2, 0x1c4, 0x12f9, 
       0x3, 0x2, 0x2, 0x2, 0x1c6, 0x1391, 0x3, 0x2, 0x2, 0x2, 0x1c8, 0x139d, 
       0x3, 0x2, 0x2, 0x2, 0x1ca, 0x13ac, 0x3, 0x2, 0x2, 0x2, 0x1cc, 0x13b1, 
       0x3, 0x2, 0x2, 0x2, 0x1ce, 0x13c4, 0x3, 0x2, 0x2, 0x2, 0x1d0, 0x13ce, 
       0x3, 0x2, 0x2, 0x2, 0x1d2, 0x13dc, 0x3, 0x2, 0x2, 0x2, 0x1d4, 0x13de, 
       0x3, 0x2, 0x2, 0x2, 0x1d6, 0x13e1, 0x3, 0x2, 0x2, 0x2, 0x1d8, 0x13f7, 
       0x3, 0x2, 0x2, 0x2, 0x1da, 0x1403, 0x3, 0x2, 0x2, 0x2, 0x1dc, 0x140c, 
       0x3, 0x2, 0x2, 0x2, 0x1de, 0x1418, 0x3, 0x2, 0x2, 0x2, 0x1e0, 0x141c, 
       0x3, 0x2, 0x2, 0x2, 0x1e2, 0x141e, 0x3, 0x2, 0x2, 0x2, 0x1e4, 0x1446, 
       0x3, 0x2, 0x2, 0x2, 0x1e6, 0x144d, 0x3, 0x2, 0x2, 0x2, 0x1e8, 0x144f, 
       0x3, 0x2, 0x2, 0x2, 0x1ea, 0x1466, 0x3, 0x2, 0x2, 0x2, 0x1ec, 0x146c, 
       0x3, 0x2, 0x2, 0x2, 0x1ee, 0x1474, 0x3, 0x2, 0x2, 0x2, 0x1f0, 0x1477, 
       0x3, 0x2, 0x2, 0x2, 0x1f2, 0x1484, 0x3, 0x2, 0x2, 0x2, 0x1f4, 0x1486, 
       0x3, 0x2, 0x2, 0x2, 0x1f6, 0x148e, 0x3, 0x2, 0x2, 0x2, 0x1f8, 0x1490, 
       0x3, 0x2, 0x2, 0x2, 0x1fa, 0x1494, 0x3, 0x2, 0x2, 0x2, 0x1fc, 0x149f, 
       0x3, 0x2, 0x2, 0x2, 0x1fe, 0x14a1, 0x3, 0x2, 0x2, 0x2, 0x200, 0x14a7, 
       0x3, 0x2, 0x2, 0x2, 0x202, 0x14ab, 0x3, 0x2, 0x2, 0x2, 0x204, 0x14ad, 
       0x3, 0x2, 0x2, 0x2, 0x206, 0x14af, 0x3, 0x2, 0x2, 0x2, 0x208, 0x14c1, 
       0x3, 0x2, 0x2, 0x2, 0x20a, 0x14d1, 0x3, 0x2, 0x2, 0x2, 0x20c, 0x14d5, 
       0x3, 0x2, 0x2, 0x2, 0x20e, 0x14da, 0x3, 0x2, 0x2, 0x2, 0x210, 0x14e5, 
       0x3, 0x2, 0x2, 0x2, 0x212, 0x14e7, 0x3, 0x2, 0x2, 0x2, 0x214, 0x14eb, 
       0x3, 0x2, 0x2, 0x2, 0x216, 0x1504, 0x3, 0x2, 0x2, 0x2, 0x218, 0x1506, 
       0x3, 0x2, 0x2, 0x2, 0x21a, 0x1509, 0x3, 0x2, 0x2, 0x2, 0x21c, 0x150e, 
       0x3, 0x2, 0x2, 0x2, 0x21e, 0x151c, 0x3, 0x2, 0x2, 0x2, 0x220, 0x1588, 
       0x3, 0x2, 0x2, 0x2, 0x222, 0x158a, 0x3, 0x2, 0x2, 0x2, 0x224, 0x15ae, 
       0x3, 0x2, 0x2, 0x2, 0x226, 0x15b0, 0x3, 0x2, 0x2, 0x2, 0x228, 0x15b4, 
       0x3, 0x2, 0x2, 0x2, 0x22a, 0x15ba, 0x3, 0x2, 0x2, 0x2, 0x22c, 0x15c2, 
       0x3, 0x2, 0x2, 0x2, 0x22e, 0x15ca, 0x3, 0x2, 0x2, 0x2, 0x230, 0x15d2, 
       0x3, 0x2, 0x2, 0x2, 0x232, 0x15dd, 0x3, 0x2, 0x2, 0x2, 0x234, 0x15e5, 
       0x3, 0x2, 0x2, 0x2, 0x236, 0x15ed, 0x3, 0x2, 0x2, 0x2, 0x238, 0x15f5, 
       0x3, 0x2, 0x2, 0x2, 0x23a, 0x15fd, 0x3, 0x2, 0x2, 0x2, 0x23c, 0x1610, 
       0x3, 0x2, 0x2, 0x2, 0x23e, 0x1620, 0x3, 0x2, 0x2, 0x2, 0x240, 0x1624, 
       0x3, 0x2, 0x2, 0x2, 0x242, 0x1626, 0x3, 0x2, 0x2, 0x2, 0x244, 0x1629, 
       0x3, 0x2, 0x2, 0x2, 0x246, 0x163e, 0x3, 0x2, 0x2, 0x2, 0x248, 0x16dd, 
       0x3, 0x2, 0x2, 0x2, 0x24a, 0x16df, 0x3, 0x2, 0x2, 0x2, 0x24c, 0x16f2, 
       0x3, 0x2, 0x2, 0x2, 0x24e, 0x16f4, 0x3, 0x2, 0x2, 0x2, 0x250, 0x1730, 
       0x3, 0x2, 0x2, 0x2, 0x252, 0x1749, 0x3, 0x2, 0x2, 0x2, 0x254, 0x174b, 
       0x3, 0x2, 0x2, 0x2, 0x256, 0x1754, 0x3, 0x2, 0x2, 0x2, 0x258, 0x1766, 
       0x3, 0x2, 0x2, 0x2, 0x25a, 0x1773, 0x3, 0x2, 0x2, 0x2, 0x25c, 0x177e, 
       0x3, 0x2, 0x2, 0x2, 0x25e, 0x17ec, 0x3, 0x2, 0x2, 0x2, 0x260, 0x17fe, 
       0x3, 0x2, 0x2, 0x2, 0x262, 0x180e, 0x3, 0x2, 0x2, 0x2, 0x264, 0x1817, 
       0x3, 0x2, 0x2, 0x2, 0x266, 0x1820, 0x3, 0x2, 0x2, 0x2, 0x268, 0x1822, 
       0x3, 0x2, 0x2, 0x2, 0x26a, 0x1824, 0x3, 0x2, 0x2, 0x2, 0x26c, 0x1826, 
       0x3, 0x2, 0x2, 0x2, 0x26e, 0x1828, 0x3, 0x2, 0x2, 0x2, 0x270, 0x182a, 
       0x3, 0x2, 0x2, 0x2, 0x272, 0x182c, 0x3, 0x2, 0x2, 0x2, 0x274, 0x182e, 
       0x3, 0x2, 0x2, 0x2, 0x276, 0x1830, 0x3, 0x2, 0x2, 0x2, 0x278, 0x27a, 
       0x5, 0x4, 0x3, 0x2, 0x279, 0x278, 0x3, 0x2, 0x2, 0x2, 0x279, 0x27a, 
       0x3, 0x2, 0x2, 0x2, 0x27a, 0x27c, 0x3, 0x2, 0x2, 0x2, 0x27b, 0x27d, 
       0x7, 0x3b7, 0x2, 0x2, 0x27c, 0x27b, 0x3, 0x2, 0x2, 0x2, 0x27c, 0x27d, 
       0x3, 0x2, 0x2, 0x2, 0x27d, 0x27e, 0x3, 0x2, 0x2, 0x2, 0x27e, 0x27f, 
       0x7, 0x2, 0x2, 0x3, 0x27f, 0x3, 0x3, 0x2, 0x2, 0x2, 0x280, 0x282, 
       0x5, 0x6, 0x4, 0x2, 0x281, 0x283, 0x7, 0x3b7, 0x2, 0x2, 0x282, 0x281, 
       0x3, 0x2, 0x2, 0x2, 0x282, 0x283, 0x3, 0x2, 0x2, 0x2, 0x283, 0x285, 
       0x3, 0x2, 0x2, 0x2, 0x284, 0x286, 0x7, 0x3c7, 0x2, 0x2, 0x285, 0x284, 
       0x3, 0x2, 0x2, 0x2, 0x285, 0x286, 0x3, 0x2, 0x2, 0x2, 0x286, 0x289, 
       0x3, 0x2, 0x2, 0x2, 0x287, 0x289, 0x5, 0x8, 0x5, 0x2, 0x288, 0x280, 
       0x3, 0x2, 0x2, 0x2, 0x288, 0x287, 0x3, 0x2, 0x2, 0x2, 0x289, 0x28c, 
       0x3, 0x2, 0x2, 0x2, 0x28a, 0x288, 0x3, 0x2, 0x2, 0x2, 0x28a, 0x28b, 
       0x3, 0x2, 0x2, 0x2, 0x28b, 0x295, 0x3, 0x2, 0x2, 0x2, 0x28c, 0x28a, 
       0x3, 0x2, 0x2, 0x2, 0x28d, 0x292, 0x5, 0x6, 0x4, 0x2, 0x28e, 0x290, 
       0x7, 0x3b7, 0x2, 0x2, 0x28f, 0x28e, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x290, 
       0x3, 0x2, 0x2, 0x2, 0x290, 0x291, 0x3, 0x2, 0x2, 0x2, 0x291, 0x293, 
       0x7, 0x3c7, 0x2, 0x2, 0x292, 0x28f, 0x3, 0x2, 0x2, 0x2, 0x292, 0x293, 
       0x3, 0x2, 0x2, 0x2, 0x293, 0x296, 0x3, 0x2, 0x2, 0x2, 0x294, 0x296, 
       0x5, 0x8, 0x5, 0x2, 0x295, 0x28d, 0x3, 0x2, 0x2, 0x2, 0x295, 0x294, 
       0x3, 0x2, 0x2, 0x2, 0x296, 0x5, 0x3, 0x2, 0x2, 0x2, 0x297, 0x29f, 
       0x5, 0xa, 0x6, 0x2, 0x298, 0x29f, 0x5, 0xc, 0x7, 0x2, 0x299, 0x29f, 
       0x5, 0xe, 0x8, 0x2, 0x29a, 0x29f, 0x5, 0x10, 0x9, 0x2, 0x29b, 0x29f, 
       0x5, 0x12, 0xa, 0x2, 0x29c, 0x29f, 0x5, 0x16, 0xc, 0x2, 0x29d, 0x29f, 
       0x5, 0x18, 0xd, 0x2, 0x29e, 0x297, 0x3, 0x2, 0x2, 0x2, 0x29e, 0x298, 
       0x3, 0x2, 0x2, 0x2, 0x29e, 0x299, 0x3, 0x2, 0x2, 0x2, 0x29e, 0x29a, 
       0x3, 0x2, 0x2, 0x2, 0x29e, 0x29b, 0x3, 0x2, 0x2, 0x2, 0x29e, 0x29c, 
       0x3, 0x2, 0x2, 0x2, 0x29e, 0x29d, 0x3, 0x2, 0x2, 0x2, 0x29f, 0x7, 
       0x3, 0x2, 0x2, 0x2, 0x2a0, 0x2a1, 0x7, 0x3c7, 0x2, 0x2, 0x2a1, 0x9, 
       0x3, 0x2, 0x2, 0x2, 0x2a2, 0x2c6, 0x5, 0x1a, 0xe, 0x2, 0x2a3, 0x2c6, 
       0x5, 0x1c, 0xf, 0x2, 0x2a4, 0x2c6, 0x5, 0x1e, 0x10, 0x2, 0x2a5, 0x2c6, 
       0x5, 0x20, 0x11, 0x2, 0x2a6, 0x2c6, 0x5, 0x22, 0x12, 0x2, 0x2a7, 
       0x2c6, 0x5, 0x24, 0x13, 0x2, 0x2a8, 0x2c6, 0x5, 0x26, 0x14, 0x2, 
       0x2a9, 0x2c6, 0x5, 0x28, 0x15, 0x2, 0x2aa, 0x2c6, 0x5, 0x2a, 0x16, 
       0x2, 0x2ab, 0x2c6, 0x5, 0x2c, 0x17, 0x2, 0x2ac, 0x2c6, 0x5, 0x2e, 
       0x18, 0x2, 0x2ad, 0x2c6, 0x5, 0x30, 0x19, 0x2, 0x2ae, 0x2c6, 0x5, 
       0x72, 0x3a, 0x2, 0x2af, 0x2c6, 0x5, 0x74, 0x3b, 0x2, 0x2b0, 0x2c6, 
       0x5, 0x76, 0x3c, 0x2, 0x2b1, 0x2c6, 0x5, 0x78, 0x3d, 0x2, 0x2b2, 
       0x2c6, 0x5, 0x7a, 0x3e, 0x2, 0x2b3, 0x2c6, 0x5, 0x7c, 0x3f, 0x2, 
       0x2b4, 0x2c6, 0x5, 0x7e, 0x40, 0x2, 0x2b5, 0x2c6, 0x5, 0x80, 0x41, 
       0x2, 0x2b6, 0x2c6, 0x5, 0x82, 0x42, 0x2, 0x2b7, 0x2c6, 0x5, 0x84, 
       0x43, 0x2, 0x2b8, 0x2c6, 0x5, 0x88, 0x45, 0x2, 0x2b9, 0x2c6, 0x5, 
       0x8a, 0x46, 0x2, 0x2ba, 0x2c6, 0x5, 0x8c, 0x47, 0x2, 0x2bb, 0x2c6, 
       0x5, 0x8e, 0x48, 0x2, 0x2bc, 0x2c6, 0x5, 0x90, 0x49, 0x2, 0x2bd, 
       0x2c6, 0x5, 0x92, 0x4a, 0x2, 0x2be, 0x2c6, 0x5, 0x94, 0x4b, 0x2, 
       0x2bf, 0x2c6, 0x5, 0x96, 0x4c, 0x2, 0x2c0, 0x2c6, 0x5, 0x98, 0x4d, 
       0x2, 0x2c1, 0x2c6, 0x5, 0x9a, 0x4e, 0x2, 0x2c2, 0x2c6, 0x5, 0x9c, 
       0x4f, 0x2, 0x2c3, 0x2c6, 0x5, 0x9e, 0x50, 0x2, 0x2c4, 0x2c6, 0x5, 
       0xa2, 0x52, 0x2, 0x2c5, 0x2a2, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2a3, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2a4, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2a5, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2a6, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2a7, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2a8, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2a9, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2aa, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2ab, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2ac, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2ad, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2ae, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2af, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b0, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b1, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b2, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b3, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b4, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b5, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b6, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b7, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b8, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2b9, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2ba, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2bb, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2bc, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2bd, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2be, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2bf, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2c0, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2c1, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2c2, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2c3, 
       0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2c4, 0x3, 0x2, 0x2, 0x2, 0x2c6, 0xb, 
       0x3, 0x2, 0x2, 0x2, 0x2c7, 0x2d2, 0x5, 0xb4, 0x5b, 0x2, 0x2c8, 0x2d2, 
       0x5, 0xac, 0x57, 0x2, 0x2c9, 0x2d2, 0x5, 0xb6, 0x5c, 0x2, 0x2ca, 
       0x2d2, 0x5, 0xa6, 0x54, 0x2, 0x2cb, 0x2d2, 0x5, 0xb2, 0x5a, 0x2, 
       0x2cc, 0x2d2, 0x5, 0xa4, 0x53, 0x2, 0x2cd, 0x2d2, 0x5, 0xae, 0x58, 
       0x2, 0x2ce, 0x2d2, 0x5, 0xb0, 0x59, 0x2, 0x2cf, 0x2d2, 0x5, 0xa8, 
       0x55, 0x2, 0x2d0, 0x2d2, 0x5, 0xaa, 0x56, 0x2, 0x2d1, 0x2c7, 0x3, 
       0x2, 0x2, 0x2, 0x2d1, 0x2c8, 0x3, 0x2, 0x2, 0x2, 0x2d1, 0x2c9, 0x3, 
       0x2, 0x2, 0x2, 0x2d1, 0x2ca, 0x3, 0x2, 0x2, 0x2, 0x2d1, 0x2cb, 0x3, 
       0x2, 0x2, 0x2, 0x2d1, 0x2cc, 0x3, 0x2, 0x2, 0x2, 0x2d1, 0x2cd, 0x3, 
       0x2, 0x2, 0x2, 0x2d1, 0x2ce, 0x3, 0x2, 0x2, 0x2, 0x2d1, 0x2cf, 0x3, 
       0x2, 0x2, 0x2, 0x2d1, 0x2d0, 0x3, 0x2, 0x2, 0x2, 0x2d2, 0xd, 0x3, 
       0x2, 0x2, 0x2, 0x2d3, 0x2dd, 0x5, 0x10c, 0x87, 0x2, 0x2d4, 0x2dd, 
       0x5, 0x10e, 0x88, 0x2, 0x2d5, 0x2dd, 0x5, 0x110, 0x89, 0x2, 0x2d6, 
       0x2dd, 0x5, 0x112, 0x8a, 0x2, 0x2d7, 0x2dd, 0x5, 0x114, 0x8b, 0x2, 
       0x2d8, 0x2dd, 0x5, 0x116, 0x8c, 0x2, 0x2d9, 0x2dd, 0x5, 0x118, 0x8d, 
       0x2, 0x2da, 0x2dd, 0x5, 0x11a, 0x8e, 0x2, 0x2db, 0x2dd, 0x5, 0x11c, 
       0x8f, 0x2, 0x2dc, 0x2d3, 0x3, 0x2, 0x2, 0x2, 0x2dc, 0x2d4, 0x3, 0x2, 
       0x2, 0x2, 0x2dc, 0x2d5, 0x3, 0x2, 0x2, 0x2, 0x2dc, 0x2d6, 0x3, 0x2, 
       0x2, 0x2, 0x2dc, 0x2d7, 0x3, 0x2, 0x2, 0x2, 0x2dc, 0x2d8, 0x3, 0x2, 
       0x2, 0x2, 0x2dc, 0x2d9, 0x3, 0x2, 0x2, 0x2, 0x2dc, 0x2da, 0x3, 0x2, 
       0x2, 0x2, 0x2dc, 0x2db, 0x3, 0x2, 0x2, 0x2, 0x2dd, 0xf, 0x3, 0x2, 
       0x2, 0x2, 0x2de, 0x2ee, 0x5, 0x12c, 0x97, 0x2, 0x2df, 0x2ee, 0x5, 
       0x12e, 0x98, 0x2, 0x2e0, 0x2ee, 0x5, 0x130, 0x99, 0x2, 0x2e1, 0x2ee, 
       0x5, 0x132, 0x9a, 0x2, 0x2e2, 0x2ee, 0x5, 0x134, 0x9b, 0x2, 0x2e3, 
       0x2ee, 0x5, 0x136, 0x9c, 0x2, 0x2e4, 0x2ee, 0x5, 0x138, 0x9d, 0x2, 
       0x2e5, 0x2ee, 0x5, 0x13a, 0x9e, 0x2, 0x2e6, 0x2ee, 0x5, 0x13c, 0x9f, 
       0x2, 0x2e7, 0x2ee, 0x5, 0x154, 0xab, 0x2, 0x2e8, 0x2ee, 0x5, 0x156, 
       0xac, 0x2, 0x2e9, 0x2ee, 0x5, 0x158, 0xad, 0x2, 0x2ea, 0x2ee, 0x5, 
       0x15a, 0xae, 0x2, 0x2eb, 0x2ee, 0x5, 0x15c, 0xaf, 0x2, 0x2ec, 0x2ee, 
       0x5, 0x15e, 0xb0, 0x2, 0x2ed, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2df, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e0, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e1, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e2, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e3, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e4, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e5, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e6, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e7, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e8, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2e9, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2ea, 0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2eb, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2ec, 0x3, 0x2, 0x2, 0x2, 0x2ee, 0x11, 
       0x3, 0x2, 0x2, 0x2, 0x2ef, 0x2f3, 0x5, 0x160, 0xb1, 0x2, 0x2f0, 0x2f3, 
       0x5, 0x162, 0xb2, 0x2, 0x2f1, 0x2f3, 0x5, 0x164, 0xb3, 0x2, 0x2f2, 
       0x2ef, 0x3, 0x2, 0x2, 0x2, 0x2f2, 0x2f0, 0x3, 0x2, 0x2, 0x2, 0x2f2, 
       0x2f1, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x13, 0x3, 0x2, 0x2, 0x2, 0x2f4, 
       0x2ff, 0x5, 0x168, 0xb5, 0x2, 0x2f5, 0x2ff, 0x5, 0x16a, 0xb6, 0x2, 
       0x2f6, 0x2ff, 0x5, 0x16c, 0xb7, 0x2, 0x2f7, 0x2ff, 0x5, 0x170, 0xb9, 
       0x2, 0x2f8, 0x2ff, 0x5, 0x172, 0xba, 0x2, 0x2f9, 0x2ff, 0x5, 0x174, 
       0xbb, 0x2, 0x2fa, 0x2ff, 0x5, 0x178, 0xbd, 0x2, 0x2fb, 0x2ff, 0x5, 
       0x16e, 0xb8, 0x2, 0x2fc, 0x2ff, 0x5, 0x176, 0xbc, 0x2, 0x2fd, 0x2ff, 
       0x5, 0x17a, 0xbe, 0x2, 0x2fe, 0x2f4, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2f5, 
       0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2f6, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2f7, 
       0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2f8, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2f9, 
       0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2fa, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2fb, 
       0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2fc, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2fd, 
       0x3, 0x2, 0x2, 0x2, 0x2ff, 0x15, 0x3, 0x2, 0x2, 0x2, 0x300, 0x31a, 
       0x5, 0x18c, 0xc7, 0x2, 0x301, 0x31a, 0x5, 0x18e, 0xc8, 0x2, 0x302, 
       0x31a, 0x5, 0x190, 0xc9, 0x2, 0x303, 0x31a, 0x5, 0x192, 0xca, 0x2, 
       0x304, 0x31a, 0x5, 0x194, 0xcb, 0x2, 0x305, 0x31a, 0x5, 0x196, 0xcc, 
       0x2, 0x306, 0x31a, 0x5, 0x198, 0xcd, 0x2, 0x307, 0x31a, 0x5, 0x19a, 
       0xce, 0x2, 0x308, 0x31a, 0x5, 0x1b2, 0xda, 0x2, 0x309, 0x31a, 0x5, 
       0x1b4, 0xdb, 0x2, 0x30a, 0x31a, 0x5, 0x1b6, 0xdc, 0x2, 0x30b, 0x31a, 
       0x5, 0x1b8, 0xdd, 0x2, 0x30c, 0x31a, 0x5, 0x1ba, 0xde, 0x2, 0x30d, 
       0x31a, 0x5, 0x1be, 0xe0, 0x2, 0x30e, 0x31a, 0x5, 0x1c0, 0xe1, 0x2, 
       0x30f, 0x31a, 0x5, 0x1c2, 0xe2, 0x2, 0x310, 0x31a, 0x5, 0x1c4, 0xe3, 
       0x2, 0x311, 0x31a, 0x5, 0x1c6, 0xe4, 0x2, 0x312, 0x31a, 0x5, 0x1d4, 
       0xeb, 0x2, 0x313, 0x31a, 0x5, 0x1d6, 0xec, 0x2, 0x314, 0x31a, 0x5, 
       0x1d8, 0xed, 0x2, 0x315, 0x31a, 0x5, 0x1da, 0xee, 0x2, 0x316, 0x31a, 
       0x5, 0x1dc, 0xef, 0x2, 0x317, 0x31a, 0x5, 0x1de, 0xf0, 0x2, 0x318, 
       0x31a, 0x5, 0x1e0, 0xf1, 0x2, 0x319, 0x300, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x301, 0x3, 0x2, 0x2, 0x2, 0x319, 0x302, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x303, 0x3, 0x2, 0x2, 0x2, 0x319, 0x304, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x305, 0x3, 0x2, 0x2, 0x2, 0x319, 0x306, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x307, 0x3, 0x2, 0x2, 0x2, 0x319, 0x308, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x309, 0x3, 0x2, 0x2, 0x2, 0x319, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x30b, 0x3, 0x2, 0x2, 0x2, 0x319, 0x30c, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x30d, 0x3, 0x2, 0x2, 0x2, 0x319, 0x30e, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x30f, 0x3, 0x2, 0x2, 0x2, 0x319, 0x310, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x311, 0x3, 0x2, 0x2, 0x2, 0x319, 0x312, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x313, 0x3, 0x2, 0x2, 0x2, 0x319, 0x314, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x315, 0x3, 0x2, 0x2, 0x2, 0x319, 0x316, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x317, 0x3, 0x2, 0x2, 0x2, 0x319, 0x318, 0x3, 0x2, 0x2, 0x2, 0x31a, 
       0x17, 0x3, 0x2, 0x2, 0x2, 0x31b, 0x320, 0x5, 0x1ea, 0xf6, 0x2, 0x31c, 
       0x320, 0x5, 0x1ec, 0xf7, 0x2, 0x31d, 0x320, 0x5, 0x1ee, 0xf8, 0x2, 
       0x31e, 0x320, 0x5, 0x1f0, 0xf9, 0x2, 0x31f, 0x31b, 0x3, 0x2, 0x2, 
       0x2, 0x31f, 0x31c, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x31d, 0x3, 0x2, 0x2, 
       0x2, 0x31f, 0x31e, 0x3, 0x2, 0x2, 0x2, 0x320, 0x19, 0x3, 0x2, 0x2, 
       0x2, 0x321, 0x322, 0x7, 0x20, 0x2, 0x2, 0x322, 0x324, 0x9, 0x2, 0x2, 
       0x2, 0x323, 0x325, 0x5, 0x244, 0x123, 0x2, 0x324, 0x323, 0x3, 0x2, 
       0x2, 0x2, 0x324, 0x325, 0x3, 0x2, 0x2, 0x2, 0x325, 0x326, 0x3, 0x2, 
       0x2, 0x2, 0x326, 0x32a, 0x5, 0x20e, 0x108, 0x2, 0x327, 0x329, 0x5, 
       0x32, 0x1a, 0x2, 0x328, 0x327, 0x3, 0x2, 0x2, 0x2, 0x329, 0x32c, 
       0x3, 0x2, 0x2, 0x2, 0x32a, 0x328, 0x3, 0x2, 0x2, 0x2, 0x32a, 0x32b, 
       0x3, 0x2, 0x2, 0x2, 0x32b, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x32c, 0x32a, 
       0x3, 0x2, 0x2, 0x2, 0x32d, 0x32f, 0x7, 0x20, 0x2, 0x2, 0x32e, 0x330, 
       0x5, 0x34, 0x1b, 0x2, 0x32f, 0x32e, 0x3, 0x2, 0x2, 0x2, 0x32f, 0x330, 
       0x3, 0x2, 0x2, 0x2, 0x330, 0x331, 0x3, 0x2, 0x2, 0x2, 0x331, 0x333, 
       0x7, 0x146, 0x2, 0x2, 0x332, 0x334, 0x5, 0x244, 0x123, 0x2, 0x333, 
       0x332, 0x3, 0x2, 0x2, 0x2, 0x333, 0x334, 0x3, 0x2, 0x2, 0x2, 0x334, 
       0x335, 0x3, 0x2, 0x2, 0x2, 0x335, 0x336, 0x5, 0x1f4, 0xfb, 0x2, 0x336, 
       0x337, 0x7, 0x68, 0x2, 0x2, 0x337, 0x338, 0x7, 0x1e9, 0x2, 0x2, 0x338, 
       0x33f, 0x5, 0x36, 0x1c, 0x2, 0x339, 0x33a, 0x7, 0x68, 0x2, 0x2, 0x33a, 
       0x33c, 0x7, 0x122, 0x2, 0x2, 0x33b, 0x33d, 0x7, 0x65, 0x2, 0x2, 0x33c, 
       0x33b, 0x3, 0x2, 0x2, 0x2, 0x33c, 0x33d, 0x3, 0x2, 0x2, 0x2, 0x33d, 
       0x33e, 0x3, 0x2, 0x2, 0x2, 0x33e, 0x340, 0x7, 0x1c4, 0x2, 0x2, 0x33f, 
       0x339, 0x3, 0x2, 0x2, 0x2, 0x33f, 0x340, 0x3, 0x2, 0x2, 0x2, 0x340, 
       0x342, 0x3, 0x2, 0x2, 0x2, 0x341, 0x343, 0x5, 0x3e, 0x20, 0x2, 0x342, 
       0x341, 0x3, 0x2, 0x2, 0x2, 0x342, 0x343, 0x3, 0x2, 0x2, 0x2, 0x343, 
       0x346, 0x3, 0x2, 0x2, 0x2, 0x344, 0x345, 0x7, 0x11f, 0x2, 0x2, 0x345, 
       0x347, 0x7, 0x3d3, 0x2, 0x2, 0x346, 0x344, 0x3, 0x2, 0x2, 0x2, 0x346, 
       0x347, 0x3, 0x2, 0x2, 0x2, 0x347, 0x348, 0x3, 0x2, 0x2, 0x2, 0x348, 
       0x349, 0x7, 0x138, 0x2, 0x2, 0x349, 0x34a, 0x5, 0x166, 0xb4, 0x2, 
       0x34a, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x34b, 0x34d, 0x7, 0x20, 0x2, 0x2, 
       0x34c, 0x34e, 0x9, 0x3, 0x2, 0x2, 0x34d, 0x34c, 0x3, 0x2, 0x2, 0x2, 
       0x34d, 0x34e, 0x3, 0x2, 0x2, 0x2, 0x34e, 0x350, 0x3, 0x2, 0x2, 0x2, 
       0x34f, 0x351, 0x9, 0x4, 0x2, 0x2, 0x350, 0x34f, 0x3, 0x2, 0x2, 0x2, 
       0x350, 0x351, 0x3, 0x2, 0x2, 0x2, 0x351, 0x352, 0x3, 0x2, 0x2, 0x2, 
       0x352, 0x353, 0x7, 0x47, 0x2, 0x2, 0x353, 0x355, 0x5, 0x20e, 0x108, 
       0x2, 0x354, 0x356, 0x5, 0x40, 0x21, 0x2, 0x355, 0x354, 0x3, 0x2, 
       0x2, 0x2, 0x355, 0x356, 0x3, 0x2, 0x2, 0x2, 0x356, 0x357, 0x3, 0x2, 
       0x2, 0x2, 0x357, 0x358, 0x7, 0x68, 0x2, 0x2, 0x358, 0x359, 0x5, 0x1f6, 
       0xfc, 0x2, 0x359, 0x35d, 0x5, 0x230, 0x119, 0x2, 0x35a, 0x35c, 0x5, 
       0x42, 0x22, 0x2, 0x35b, 0x35a, 0x3, 0x2, 0x2, 0x2, 0x35c, 0x35f, 
       0x3, 0x2, 0x2, 0x2, 0x35d, 0x35b, 0x3, 0x2, 0x2, 0x2, 0x35d, 0x35e, 
       0x3, 0x2, 0x2, 0x2, 0x35e, 0x36c, 0x3, 0x2, 0x2, 0x2, 0x35f, 0x35d, 
       0x3, 0x2, 0x2, 0x2, 0x360, 0x362, 0x7, 0x102, 0x2, 0x2, 0x361, 0x363, 
       0x7, 0x3bb, 0x2, 0x2, 0x362, 0x361, 0x3, 0x2, 0x2, 0x2, 0x362, 0x363, 
       0x3, 0x2, 0x2, 0x2, 0x363, 0x364, 0x3, 0x2, 0x2, 0x2, 0x364, 0x36b, 
       0x9, 0x5, 0x2, 0x2, 0x365, 0x367, 0x7, 0x5c, 0x2, 0x2, 0x366, 0x368, 
       0x7, 0x3bb, 0x2, 0x2, 0x367, 0x366, 0x3, 0x2, 0x2, 0x2, 0x367, 0x368, 
       0x3, 0x2, 0x2, 0x2, 0x368, 0x369, 0x3, 0x2, 0x2, 0x2, 0x369, 0x36b, 
       0x9, 0x6, 0x2, 0x2, 0x36a, 0x360, 0x3, 0x2, 0x2, 0x2, 0x36a, 0x365, 
       0x3, 0x2, 0x2, 0x2, 0x36b, 0x36e, 0x3, 0x2, 0x2, 0x2, 0x36c, 0x36a, 
       0x3, 0x2, 0x2, 0x2, 0x36c, 0x36d, 0x3, 0x2, 0x2, 0x2, 0x36d, 0x1f, 
       0x3, 0x2, 0x2, 0x2, 0x36e, 0x36c, 0x3, 0x2, 0x2, 0x2, 0x36f, 0x370, 
       0x7, 0x20, 0x2, 0x2, 0x370, 0x371, 0x7, 0x17d, 0x2, 0x2, 0x371, 0x372, 
       0x7, 0x41, 0x2, 0x2, 0x372, 0x373, 0x5, 0x20e, 0x108, 0x2, 0x373, 
       0x374, 0x7, 0x7, 0x2, 0x2, 0x374, 0x375, 0x7, 0x219, 0x2, 0x2, 0x375, 
       0x37b, 0x7, 0x3d3, 0x2, 0x2, 0x376, 0x378, 0x7, 0x168, 0x2, 0x2, 
       0x377, 0x379, 0x7, 0x3bb, 0x2, 0x2, 0x378, 0x377, 0x3, 0x2, 0x2, 
       0x2, 0x378, 0x379, 0x3, 0x2, 0x2, 0x2, 0x379, 0x37a, 0x3, 0x2, 0x2, 
       0x2, 0x37a, 0x37c, 0x5, 0x214, 0x10b, 0x2, 0x37b, 0x376, 0x3, 0x2, 
       0x2, 0x2, 0x37b, 0x37c, 0x3, 0x2, 0x2, 0x2, 0x37c, 0x382, 0x3, 0x2, 
       0x2, 0x2, 0x37d, 0x37f, 0x7, 0x21a, 0x2, 0x2, 0x37e, 0x380, 0x7, 
       0x3bb, 0x2, 0x2, 0x37f, 0x37e, 0x3, 0x2, 0x2, 0x2, 0x37f, 0x380, 
       0x3, 0x2, 0x2, 0x2, 0x380, 0x381, 0x3, 0x2, 0x2, 0x2, 0x381, 0x383, 
       0x5, 0x214, 0x10b, 0x2, 0x382, 0x37d, 0x3, 0x2, 0x2, 0x2, 0x382, 
       0x383, 0x3, 0x2, 0x2, 0x2, 0x383, 0x389, 0x3, 0x2, 0x2, 0x2, 0x384, 
       0x386, 0x7, 0x1ce, 0x2, 0x2, 0x385, 0x387, 0x7, 0x3bb, 0x2, 0x2, 
       0x386, 0x385, 0x3, 0x2, 0x2, 0x2, 0x386, 0x387, 0x3, 0x2, 0x2, 0x2, 
       0x387, 0x388, 0x3, 0x2, 0x2, 0x2, 0x388, 0x38a, 0x5, 0x214, 0x10b, 
       0x2, 0x389, 0x384, 0x3, 0x2, 0x2, 0x2, 0x389, 0x38a, 0x3, 0x2, 0x2, 
       0x2, 0x38a, 0x390, 0x3, 0x2, 0x2, 0x2, 0x38b, 0x38d, 0x7, 0x1a9, 
       0x2, 0x2, 0x38c, 0x38e, 0x7, 0x3bb, 0x2, 0x2, 0x38d, 0x38c, 0x3, 
       0x2, 0x2, 0x2, 0x38d, 0x38e, 0x3, 0x2, 0x2, 0x2, 0x38e, 0x38f, 0x3, 
       0x2, 0x2, 0x2, 0x38f, 0x391, 0x5, 0x20e, 0x108, 0x2, 0x390, 0x38b, 
       0x3, 0x2, 0x2, 0x2, 0x390, 0x391, 0x3, 0x2, 0x2, 0x2, 0x391, 0x393, 
       0x3, 0x2, 0x2, 0x2, 0x392, 0x394, 0x7, 0x228, 0x2, 0x2, 0x393, 0x392, 
       0x3, 0x2, 0x2, 0x2, 0x393, 0x394, 0x3, 0x2, 0x2, 0x2, 0x394, 0x39a, 
       0x3, 0x2, 0x2, 0x2, 0x395, 0x397, 0x7, 0x11f, 0x2, 0x2, 0x396, 0x398, 
       0x7, 0x3bb, 0x2, 0x2, 0x397, 0x396, 0x3, 0x2, 0x2, 0x2, 0x397, 0x398, 
       0x3, 0x2, 0x2, 0x2, 0x398, 0x399, 0x3, 0x2, 0x2, 0x2, 0x399, 0x39b, 
       0x7, 0x3d3, 0x2, 0x2, 0x39a, 0x395, 0x3, 0x2, 0x2, 0x2, 0x39a, 0x39b, 
       0x3, 0x2, 0x2, 0x2, 0x39b, 0x39c, 0x3, 0x2, 0x2, 0x2, 0x39c, 0x39e, 
       0x7, 0x140, 0x2, 0x2, 0x39d, 0x39f, 0x7, 0x3bb, 0x2, 0x2, 0x39e, 
       0x39d, 0x3, 0x2, 0x2, 0x2, 0x39e, 0x39f, 0x3, 0x2, 0x2, 0x2, 0x39f, 
       0x3a0, 0x3, 0x2, 0x2, 0x2, 0x3a0, 0x3a1, 0x5, 0x204, 0x103, 0x2, 
       0x3a1, 0x21, 0x3, 0x2, 0x2, 0x2, 0x3a2, 0x3a4, 0x7, 0x20, 0x2, 0x2, 
       0x3a3, 0x3a5, 0x5, 0x34, 0x1b, 0x2, 0x3a4, 0x3a3, 0x3, 0x2, 0x2, 
       0x2, 0x3a4, 0x3a5, 0x3, 0x2, 0x2, 0x2, 0x3a5, 0x3a6, 0x3, 0x2, 0x2, 
       0x2, 0x3a6, 0x3a7, 0x7, 0x73, 0x2, 0x2, 0x3a7, 0x3a8, 0x5, 0x1f4, 
       0xfb, 0x2, 0x3a8, 0x3aa, 0x7, 0x3c4, 0x2, 0x2, 0x3a9, 0x3ab, 0x5, 
       0x44, 0x23, 0x2, 0x3aa, 0x3a9, 0x3, 0x2, 0x2, 0x2, 0x3aa, 0x3ab, 
       0x3, 0x2, 0x2, 0x2, 0x3ab, 0x3b0, 0x3, 0x2, 0x2, 0x2, 0x3ac, 0x3ad, 
       0x7, 0x3c6, 0x2, 0x2, 0x3ad, 0x3af, 0x5, 0x44, 0x23, 0x2, 0x3ae, 
       0x3ac, 0x3, 0x2, 0x2, 0x2, 0x3af, 0x3b2, 0x3, 0x2, 0x2, 0x2, 0x3b0, 
       0x3ae, 0x3, 0x2, 0x2, 0x2, 0x3b0, 0x3b1, 0x3, 0x2, 0x2, 0x2, 0x3b1, 
       0x3b3, 0x3, 0x2, 0x2, 0x2, 0x3b2, 0x3b0, 0x3, 0x2, 0x2, 0x2, 0x3b3, 
       0x3b7, 0x7, 0x3c5, 0x2, 0x2, 0x3b4, 0x3b6, 0x5, 0x48, 0x25, 0x2, 
       0x3b5, 0x3b4, 0x3, 0x2, 0x2, 0x2, 0x3b6, 0x3b9, 0x3, 0x2, 0x2, 0x2, 
       0x3b7, 0x3b5, 0x3, 0x2, 0x2, 0x2, 0x3b7, 0x3b8, 0x3, 0x2, 0x2, 0x2, 
       0x3b8, 0x3ba, 0x3, 0x2, 0x2, 0x2, 0x3b9, 0x3b7, 0x3, 0x2, 0x2, 0x2, 
       0x3ba, 0x3bb, 0x5, 0x166, 0xb4, 0x2, 0x3bb, 0x23, 0x3, 0x2, 0x2, 
       0x2, 0x3bc, 0x3be, 0x7, 0x20, 0x2, 0x2, 0x3bd, 0x3bf, 0x5, 0x34, 
       0x1b, 0x2, 0x3be, 0x3bd, 0x3, 0x2, 0x2, 0x2, 0x3be, 0x3bf, 0x3, 0x2, 
       0x2, 0x2, 0x3bf, 0x3c0, 0x3, 0x2, 0x2, 0x2, 0x3c0, 0x3c1, 0x7, 0x15a, 
       0x2, 0x2, 0x3c1, 0x3c2, 0x5, 0x1f4, 0xfb, 0x2, 0x3c2, 0x3c4, 0x7, 
       0x3c4, 0x2, 0x2, 0x3c3, 0x3c5, 0x5, 0x46, 0x24, 0x2, 0x3c4, 0x3c3, 
       0x3, 0x2, 0x2, 0x2, 0x3c4, 0x3c5, 0x3, 0x2, 0x2, 0x2, 0x3c5, 0x3ca, 
       0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c7, 0x7, 0x3c6, 0x2, 0x2, 0x3c7, 0x3c9, 
       0x5, 0x46, 0x24, 0x2, 0x3c8, 0x3c6, 0x3, 0x2, 0x2, 0x2, 0x3c9, 0x3cc, 
       0x3, 0x2, 0x2, 0x2, 0x3ca, 0x3c8, 0x3, 0x2, 0x2, 0x2, 0x3ca, 0x3cb, 
       0x3, 0x2, 0x2, 0x2, 0x3cb, 0x3cd, 0x3, 0x2, 0x2, 0x2, 0x3cc, 0x3ca, 
       0x3, 0x2, 0x2, 0x2, 0x3cd, 0x3ce, 0x7, 0x3c5, 0x2, 0x2, 0x3ce, 0x3cf, 
       0x7, 0x1e1, 0x2, 0x2, 0x3cf, 0x3d3, 0x5, 0x220, 0x111, 0x2, 0x3d0, 
       0x3d2, 0x5, 0x48, 0x25, 0x2, 0x3d1, 0x3d0, 0x3, 0x2, 0x2, 0x2, 0x3d2, 
       0x3d5, 0x3, 0x2, 0x2, 0x2, 0x3d3, 0x3d1, 0x3, 0x2, 0x2, 0x2, 0x3d3, 
       0x3d4, 0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3d5, 
       0x3d3, 0x3, 0x2, 0x2, 0x2, 0x3d6, 0x3d7, 0x5, 0x166, 0xb4, 0x2, 0x3d7, 
       0x25, 0x3, 0x2, 0x2, 0x2, 0x3d8, 0x3d9, 0x7, 0x20, 0x2, 0x2, 0x3d9, 
       0x3da, 0x7, 0x1eb, 0x2, 0x2, 0x3da, 0x3db, 0x5, 0x20e, 0x108, 0x2, 
       0x3db, 0x3dc, 0x7, 0x3c, 0x2, 0x2, 0x3dc, 0x3dd, 0x7, 0x12d, 0x2, 
       0x2, 0x3dd, 0x3de, 0x7, 0x22c, 0x2, 0x2, 0x3de, 0x3df, 0x9, 0x7, 
       0x2, 0x2, 0x3df, 0x3e0, 0x7, 0x1b4, 0x2, 0x2, 0x3e0, 0x3e1, 0x7, 
       0x3c4, 0x2, 0x2, 0x3e1, 0x3e6, 0x5, 0x4a, 0x26, 0x2, 0x3e2, 0x3e3, 
       0x7, 0x3c6, 0x2, 0x2, 0x3e3, 0x3e5, 0x5, 0x4a, 0x26, 0x2, 0x3e4, 
       0x3e2, 0x3, 0x2, 0x2, 0x2, 0x3e5, 0x3e8, 0x3, 0x2, 0x2, 0x2, 0x3e6, 
       0x3e4, 0x3, 0x2, 0x2, 0x2, 0x3e6, 0x3e7, 0x3, 0x2, 0x2, 0x2, 0x3e7, 
       0x3e9, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e6, 0x3, 0x2, 0x2, 0x2, 0x3e9, 
       0x3ea, 0x7, 0x3c5, 0x2, 0x2, 0x3ea, 0x27, 0x3, 0x2, 0x2, 0x2, 0x3eb, 
       0x3ed, 0x7, 0x20, 0x2, 0x2, 0x3ec, 0x3ee, 0x7, 0x211, 0x2, 0x2, 0x3ed, 
       0x3ec, 0x3, 0x2, 0x2, 0x2, 0x3ed, 0x3ee, 0x3, 0x2, 0x2, 0x2, 0x3ee, 
       0x3ef, 0x3, 0x2, 0x2, 0x2, 0x3ef, 0x3f1, 0x7, 0x95, 0x2, 0x2, 0x3f0, 
       0x3f2, 0x5, 0x244, 0x123, 0x2, 0x3f1, 0x3f0, 0x3, 0x2, 0x2, 0x2, 
       0x3f1, 0x3f2, 0x3, 0x2, 0x2, 0x2, 0x3f2, 0x3f3, 0x3, 0x2, 0x2, 0x2, 
       0x3f3, 0x3fb, 0x5, 0x1f6, 0xfc, 0x2, 0x3f4, 0x3f5, 0x7, 0x57, 0x2, 
       0x2, 0x3f5, 0x3fc, 0x5, 0x1f6, 0xfc, 0x2, 0x3f6, 0x3f7, 0x7, 0x3c4, 
       0x2, 0x2, 0x3f7, 0x3f8, 0x7, 0x57, 0x2, 0x2, 0x3f8, 0x3f9, 0x5, 0x1f6, 
       0xfc, 0x2, 0x3f9, 0x3fa, 0x7, 0x3c5, 0x2, 0x2, 0x3fa, 0x3fc, 0x3, 
       0x2, 0x2, 0x2, 0x3fb, 0x3f4, 0x3, 0x2, 0x2, 0x2, 0x3fb, 0x3f6, 0x3, 
       0x2, 0x2, 0x2, 0x3fc, 0x43a, 0x3, 0x2, 0x2, 0x2, 0x3fd, 0x3ff, 0x7, 
       0x20, 0x2, 0x2, 0x3fe, 0x400, 0x7, 0x211, 0x2, 0x2, 0x3ff, 0x3fe, 
       0x3, 0x2, 0x2, 0x2, 0x3ff, 0x400, 0x3, 0x2, 0x2, 0x2, 0x400, 0x401, 
       0x3, 0x2, 0x2, 0x2, 0x401, 0x403, 0x7, 0x95, 0x2, 0x2, 0x402, 0x404, 
       0x5, 0x244, 0x123, 0x2, 0x403, 0x402, 0x3, 0x2, 0x2, 0x2, 0x403, 
       0x404, 0x3, 0x2, 0x2, 0x2, 0x404, 0x405, 0x3, 0x2, 0x2, 0x2, 0x405, 
       0x407, 0x5, 0x1f6, 0xfc, 0x2, 0x406, 0x408, 0x5, 0x4c, 0x27, 0x2, 
       0x407, 0x406, 0x3, 0x2, 0x2, 0x2, 0x407, 0x408, 0x3, 0x2, 0x2, 0x2, 
       0x408, 0x413, 0x3, 0x2, 0x2, 0x2, 0x409, 0x410, 0x5, 0x5e, 0x30, 
       0x2, 0x40a, 0x40c, 0x7, 0x3c6, 0x2, 0x2, 0x40b, 0x40a, 0x3, 0x2, 
       0x2, 0x2, 0x40b, 0x40c, 0x3, 0x2, 0x2, 0x2, 0x40c, 0x40d, 0x3, 0x2, 
       0x2, 0x2, 0x40d, 0x40f, 0x5, 0x5e, 0x30, 0x2, 0x40e, 0x40b, 0x3, 
       0x2, 0x2, 0x2, 0x40f, 0x412, 0x3, 0x2, 0x2, 0x2, 0x410, 0x40e, 0x3, 
       0x2, 0x2, 0x2, 0x410, 0x411, 0x3, 0x2, 0x2, 0x2, 0x411, 0x414, 0x3, 
       0x2, 0x2, 0x2, 0x412, 0x410, 0x3, 0x2, 0x2, 0x2, 0x413, 0x409, 0x3, 
       0x2, 0x2, 0x2, 0x413, 0x414, 0x3, 0x2, 0x2, 0x2, 0x414, 0x416, 0x3, 
       0x2, 0x2, 0x2, 0x415, 0x417, 0x5, 0x62, 0x32, 0x2, 0x416, 0x415, 
       0x3, 0x2, 0x2, 0x2, 0x416, 0x417, 0x3, 0x2, 0x2, 0x2, 0x417, 0x419, 
       0x3, 0x2, 0x2, 0x2, 0x418, 0x41a, 0x9, 0x8, 0x2, 0x2, 0x419, 0x418, 
       0x3, 0x2, 0x2, 0x2, 0x419, 0x41a, 0x3, 0x2, 0x2, 0x2, 0x41a, 0x41c, 
       0x3, 0x2, 0x2, 0x2, 0x41b, 0x41d, 0x7, 0xd, 0x2, 0x2, 0x41c, 0x41b, 
       0x3, 0x2, 0x2, 0x2, 0x41c, 0x41d, 0x3, 0x2, 0x2, 0x2, 0x41d, 0x41e, 
       0x3, 0x2, 0x2, 0x2, 0x41e, 0x41f, 0x5, 0xb4, 0x5b, 0x2, 0x41f, 0x43a, 
       0x3, 0x2, 0x2, 0x2, 0x420, 0x422, 0x7, 0x20, 0x2, 0x2, 0x421, 0x423, 
       0x7, 0x211, 0x2, 0x2, 0x422, 0x421, 0x3, 0x2, 0x2, 0x2, 0x422, 0x423, 
       0x3, 0x2, 0x2, 0x2, 0x423, 0x424, 0x3, 0x2, 0x2, 0x2, 0x424, 0x426, 
       0x7, 0x95, 0x2, 0x2, 0x425, 0x427, 0x5, 0x244, 0x123, 0x2, 0x426, 
       0x425, 0x3, 0x2, 0x2, 0x2, 0x426, 0x427, 0x3, 0x2, 0x2, 0x2, 0x427, 
       0x428, 0x3, 0x2, 0x2, 0x2, 0x428, 0x429, 0x5, 0x1f6, 0xfc, 0x2, 0x429, 
       0x434, 0x5, 0x4c, 0x27, 0x2, 0x42a, 0x431, 0x5, 0x5e, 0x30, 0x2, 
       0x42b, 0x42d, 0x7, 0x3c6, 0x2, 0x2, 0x42c, 0x42b, 0x3, 0x2, 0x2, 
       0x2, 0x42c, 0x42d, 0x3, 0x2, 0x2, 0x2, 0x42d, 0x42e, 0x3, 0x2, 0x2, 
       0x2, 0x42e, 0x430, 0x5, 0x5e, 0x30, 0x2, 0x42f, 0x42c, 0x3, 0x2, 
       0x2, 0x2, 0x430, 0x433, 0x3, 0x2, 0x2, 0x2, 0x431, 0x42f, 0x3, 0x2, 
       0x2, 0x2, 0x431, 0x432, 0x3, 0x2, 0x2, 0x2, 0x432, 0x435, 0x3, 0x2, 
       0x2, 0x2, 0x433, 0x431, 0x3, 0x2, 0x2, 0x2, 0x434, 0x42a, 0x3, 0x2, 
       0x2, 0x2, 0x434, 0x435, 0x3, 0x2, 0x2, 0x2, 0x435, 0x437, 0x3, 0x2, 
       0x2, 0x2, 0x436, 0x438, 0x5, 0x62, 0x32, 0x2, 0x437, 0x436, 0x3, 
       0x2, 0x2, 0x2, 0x437, 0x438, 0x3, 0x2, 0x2, 0x2, 0x438, 0x43a, 0x3, 
       0x2, 0x2, 0x2, 0x439, 0x3eb, 0x3, 0x2, 0x2, 0x2, 0x439, 0x3fd, 0x3, 
       0x2, 0x2, 0x2, 0x439, 0x420, 0x3, 0x2, 0x2, 0x2, 0x43a, 0x29, 0x3, 
       0x2, 0x2, 0x2, 0x43b, 0x43c, 0x7, 0x20, 0x2, 0x2, 0x43c, 0x43d, 0x7, 
       0x210, 0x2, 0x2, 0x43d, 0x43e, 0x5, 0x20e, 0x108, 0x2, 0x43e, 0x43f, 
       0x7, 0x7, 0x2, 0x2, 0x43f, 0x440, 0x7, 0x12e, 0x2, 0x2, 0x440, 0x444, 
       0x7, 0x3d3, 0x2, 0x2, 0x441, 0x442, 0x7, 0x152, 0x2, 0x2, 0x442, 
       0x443, 0x7, 0x3bb, 0x2, 0x2, 0x443, 0x445, 0x5, 0x214, 0x10b, 0x2, 
       0x444, 0x441, 0x3, 0x2, 0x2, 0x2, 0x444, 0x445, 0x3, 0x2, 0x2, 0x2, 
       0x445, 0x44b, 0x3, 0x2, 0x2, 0x2, 0x446, 0x448, 0x7, 0x140, 0x2, 
       0x2, 0x447, 0x449, 0x7, 0x3bb, 0x2, 0x2, 0x448, 0x447, 0x3, 0x2, 
       0x2, 0x2, 0x448, 0x449, 0x3, 0x2, 0x2, 0x2, 0x449, 0x44a, 0x3, 0x2, 
       0x2, 0x2, 0x44a, 0x44c, 0x5, 0x204, 0x103, 0x2, 0x44b, 0x446, 0x3, 
       0x2, 0x2, 0x2, 0x44b, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x44c, 0x2b, 0x3, 
       0x2, 0x2, 0x2, 0x44d, 0x44e, 0x7, 0x20, 0x2, 0x2, 0x44e, 0x44f, 0x7, 
       0x210, 0x2, 0x2, 0x44f, 0x450, 0x5, 0x20e, 0x108, 0x2, 0x450, 0x451, 
       0x7, 0x7, 0x2, 0x2, 0x451, 0x452, 0x7, 0x12e, 0x2, 0x2, 0x452, 0x453, 
       0x7, 0x3d3, 0x2, 0x2, 0x453, 0x454, 0x7, 0xa3, 0x2, 0x2, 0x454, 0x455, 
       0x7, 0x17d, 0x2, 0x2, 0x455, 0x456, 0x7, 0x41, 0x2, 0x2, 0x456, 0x45c, 
       0x5, 0x20e, 0x108, 0x2, 0x457, 0x459, 0x7, 0x14e, 0x2, 0x2, 0x458, 
       0x45a, 0x7, 0x3bb, 0x2, 0x2, 0x459, 0x458, 0x3, 0x2, 0x2, 0x2, 0x459, 
       0x45a, 0x3, 0x2, 0x2, 0x2, 0x45a, 0x45b, 0x3, 0x2, 0x2, 0x2, 0x45b, 
       0x45d, 0x5, 0x214, 0x10b, 0x2, 0x45c, 0x457, 0x3, 0x2, 0x2, 0x2, 
       0x45c, 0x45d, 0x3, 0x2, 0x2, 0x2, 0x45d, 0x463, 0x3, 0x2, 0x2, 0x2, 
       0x45e, 0x460, 0x7, 0x168, 0x2, 0x2, 0x45f, 0x461, 0x7, 0x3bb, 0x2, 
       0x2, 0x460, 0x45f, 0x3, 0x2, 0x2, 0x2, 0x460, 0x461, 0x3, 0x2, 0x2, 
       0x2, 0x461, 0x462, 0x3, 0x2, 0x2, 0x2, 0x462, 0x464, 0x5, 0x214, 
       0x10b, 0x2, 0x463, 0x45e, 0x3, 0x2, 0x2, 0x2, 0x463, 0x464, 0x3, 
       0x2, 0x2, 0x2, 0x464, 0x46a, 0x3, 0x2, 0x2, 0x2, 0x465, 0x467, 0x7, 
       0x107, 0x2, 0x2, 0x466, 0x468, 0x7, 0x3bb, 0x2, 0x2, 0x467, 0x466, 
       0x3, 0x2, 0x2, 0x2, 0x467, 0x468, 0x3, 0x2, 0x2, 0x2, 0x468, 0x469, 
       0x3, 0x2, 0x2, 0x2, 0x469, 0x46b, 0x5, 0x214, 0x10b, 0x2, 0x46a, 
       0x465, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x46b, 0x3, 0x2, 0x2, 0x2, 0x46b, 
       0x471, 0x3, 0x2, 0x2, 0x2, 0x46c, 0x46e, 0x7, 0x197, 0x2, 0x2, 0x46d, 
       0x46f, 0x7, 0x3bb, 0x2, 0x2, 0x46e, 0x46d, 0x3, 0x2, 0x2, 0x2, 0x46e, 
       0x46f, 0x3, 0x2, 0x2, 0x2, 0x46f, 0x470, 0x3, 0x2, 0x2, 0x2, 0x470, 
       0x472, 0x5, 0x214, 0x10b, 0x2, 0x471, 0x46c, 0x3, 0x2, 0x2, 0x2, 
       0x471, 0x472, 0x3, 0x2, 0x2, 0x2, 0x472, 0x478, 0x3, 0x2, 0x2, 0x2, 
       0x473, 0x475, 0x7, 0x1a9, 0x2, 0x2, 0x474, 0x476, 0x7, 0x3bb, 0x2, 
       0x2, 0x475, 0x474, 0x3, 0x2, 0x2, 0x2, 0x475, 0x476, 0x3, 0x2, 0x2, 
       0x2, 0x476, 0x477, 0x3, 0x2, 0x2, 0x2, 0x477, 0x479, 0x5, 0x20e, 
       0x108, 0x2, 0x478, 0x473, 0x3, 0x2, 0x2, 0x2, 0x478, 0x479, 0x3, 
       0x2, 0x2, 0x2, 0x479, 0x47b, 0x3, 0x2, 0x2, 0x2, 0x47a, 0x47c, 0x7, 
       0x228, 0x2, 0x2, 0x47b, 0x47a, 0x3, 0x2, 0x2, 0x2, 0x47b, 0x47c, 
       0x3, 0x2, 0x2, 0x2, 0x47c, 0x482, 0x3, 0x2, 0x2, 0x2, 0x47d, 0x47f, 
       0x7, 0x11f, 0x2, 0x2, 0x47e, 0x480, 0x7, 0x3bb, 0x2, 0x2, 0x47f, 
       0x47e, 0x3, 0x2, 0x2, 0x2, 0x47f, 0x480, 0x3, 0x2, 0x2, 0x2, 0x480, 
       0x481, 0x3, 0x2, 0x2, 0x2, 0x481, 0x483, 0x7, 0x3d3, 0x2, 0x2, 0x482, 
       0x47d, 0x3, 0x2, 0x2, 0x2, 0x482, 0x483, 0x3, 0x2, 0x2, 0x2, 0x483, 
       0x484, 0x3, 0x2, 0x2, 0x2, 0x484, 0x486, 0x7, 0x140, 0x2, 0x2, 0x485, 
       0x487, 0x7, 0x3bb, 0x2, 0x2, 0x486, 0x485, 0x3, 0x2, 0x2, 0x2, 0x486, 
       0x487, 0x3, 0x2, 0x2, 0x2, 0x487, 0x488, 0x3, 0x2, 0x2, 0x2, 0x488, 
       0x489, 0x5, 0x204, 0x103, 0x2, 0x489, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x48a, 
       0x48c, 0x7, 0x20, 0x2, 0x2, 0x48b, 0x48d, 0x5, 0x34, 0x1b, 0x2, 0x48c, 
       0x48b, 0x3, 0x2, 0x2, 0x2, 0x48c, 0x48d, 0x3, 0x2, 0x2, 0x2, 0x48d, 
       0x48e, 0x3, 0x2, 0x2, 0x2, 0x48e, 0x48f, 0x7, 0x9a, 0x2, 0x2, 0x48f, 
       0x490, 0x5, 0x1f4, 0xfb, 0x2, 0x490, 0x491, 0x9, 0x9, 0x2, 0x2, 0x491, 
       0x492, 0x9, 0xa, 0x2, 0x2, 0x492, 0x493, 0x7, 0x68, 0x2, 0x2, 0x493, 
       0x494, 0x5, 0x1f6, 0xfc, 0x2, 0x494, 0x495, 0x7, 0x3a, 0x2, 0x2, 
       0x495, 0x496, 0x7, 0x30, 0x2, 0x2, 0x496, 0x499, 0x7, 0x1e5, 0x2, 
       0x2, 0x497, 0x498, 0x9, 0xb, 0x2, 0x2, 0x498, 0x49a, 0x5, 0x1f4, 
       0xfb, 0x2, 0x499, 0x497, 0x3, 0x2, 0x2, 0x2, 0x499, 0x49a, 0x3, 0x2, 
       0x2, 0x2, 0x49a, 0x49b, 0x3, 0x2, 0x2, 0x2, 0x49b, 0x49c, 0x5, 0x166, 
       0xb4, 0x2, 0x49c, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x49d, 0x4a0, 0x7, 0x20, 
       0x2, 0x2, 0x49e, 0x49f, 0x7, 0x6c, 0x2, 0x2, 0x49f, 0x4a1, 0x7, 0x7d, 
       0x2, 0x2, 0x4a0, 0x49e, 0x3, 0x2, 0x2, 0x2, 0x4a0, 0x4a1, 0x3, 0x2, 
       0x2, 0x2, 0x4a1, 0x4a5, 0x3, 0x2, 0x2, 0x2, 0x4a2, 0x4a3, 0x7, 0x102, 
       0x2, 0x2, 0x4a3, 0x4a4, 0x7, 0x3bb, 0x2, 0x2, 0x4a4, 0x4a6, 0x9, 
       0xc, 0x2, 0x2, 0x4a5, 0x4a2, 0x3, 0x2, 0x2, 0x2, 0x4a5, 0x4a6, 0x3, 
       0x2, 0x2, 0x2, 0x4a6, 0x4a8, 0x3, 0x2, 0x2, 0x2, 0x4a7, 0x4a9, 0x5, 
       0x34, 0x1b, 0x2, 0x4a8, 0x4a7, 0x3, 0x2, 0x2, 0x2, 0x4a8, 0x4a9, 
       0x3, 0x2, 0x2, 0x2, 0x4a9, 0x4ad, 0x3, 0x2, 0x2, 0x2, 0x4aa, 0x4ab, 
       0x7, 0x8b, 0x2, 0x2, 0x4ab, 0x4ac, 0x7, 0x1ea, 0x2, 0x2, 0x4ac, 0x4ae, 
       0x9, 0xd, 0x2, 0x2, 0x4ad, 0x4aa, 0x3, 0x2, 0x2, 0x2, 0x4ad, 0x4ae, 
       0x3, 0x2, 0x2, 0x2, 0x4ae, 0x4af, 0x3, 0x2, 0x2, 0x2, 0x4af, 0x4b0, 
       0x7, 0x225, 0x2, 0x2, 0x4b0, 0x4b5, 0x5, 0x1f4, 0xfb, 0x2, 0x4b1, 
       0x4b2, 0x7, 0x3c4, 0x2, 0x2, 0x4b2, 0x4b3, 0x5, 0x22c, 0x117, 0x2, 
       0x4b3, 0x4b4, 0x7, 0x3c5, 0x2, 0x2, 0x4b4, 0x4b6, 0x3, 0x2, 0x2, 
       0x2, 0x4b5, 0x4b1, 0x3, 0x2, 0x2, 0x2, 0x4b5, 0x4b6, 0x3, 0x2, 0x2, 
       0x2, 0x4b6, 0x4b7, 0x3, 0x2, 0x2, 0x2, 0x4b7, 0x4b8, 0x7, 0xd, 0x2, 
       0x2, 0x4b8, 0x4bf, 0x5, 0xb4, 0x5b, 0x2, 0x4b9, 0x4bb, 0x7, 0xa9, 
       0x2, 0x2, 0x4ba, 0x4bc, 0x9, 0xe, 0x2, 0x2, 0x4bb, 0x4ba, 0x3, 0x2, 
       0x2, 0x2, 0x4bb, 0x4bc, 0x3, 0x2, 0x2, 0x2, 0x4bc, 0x4bd, 0x3, 0x2, 
       0x2, 0x2, 0x4bd, 0x4be, 0x7, 0x19, 0x2, 0x2, 0x4be, 0x4c0, 0x7, 0x6a, 
       0x2, 0x2, 0x4bf, 0x4b9, 0x3, 0x2, 0x2, 0x2, 0x4bf, 0x4c0, 0x3, 0x2, 
       0x2, 0x2, 0x4c0, 0x31, 0x3, 0x2, 0x2, 0x2, 0x4c1, 0x4c3, 0x7, 0x27, 
       0x2, 0x2, 0x4c2, 0x4c1, 0x3, 0x2, 0x2, 0x2, 0x4c2, 0x4c3, 0x3, 0x2, 
       0x2, 0x2, 0x4c3, 0x4c7, 0x3, 0x2, 0x2, 0x2, 0x4c4, 0x4c5, 0x7, 0x18, 
       0x2, 0x2, 0x4c5, 0x4c8, 0x7, 0x87, 0x2, 0x2, 0x4c6, 0x4c8, 0x7, 0x2a4, 
       0x2, 0x2, 0x4c7, 0x4c4, 0x3, 0x2, 0x2, 0x2, 0x4c7, 0x4c6, 0x3, 0x2, 
       0x2, 0x2, 0x4c8, 0x4ca, 0x3, 0x2, 0x2, 0x2, 0x4c9, 0x4cb, 0x7, 0x3bb, 
       0x2, 0x2, 0x4ca, 0x4c9, 0x3, 0x2, 0x2, 0x2, 0x4ca, 0x4cb, 0x3, 0x2, 
       0x2, 0x2, 0x4cb, 0x4ce, 0x3, 0x2, 0x2, 0x2, 0x4cc, 0x4cf, 0x5, 0x200, 
       0x101, 0x2, 0x4cd, 0x4cf, 0x7, 0x27, 0x2, 0x2, 0x4ce, 0x4cc, 0x3, 
       0x2, 0x2, 0x2, 0x4ce, 0x4cd, 0x3, 0x2, 0x2, 0x2, 0x4cf, 0x4d9, 0x3, 
       0x2, 0x2, 0x2, 0x4d0, 0x4d2, 0x7, 0x27, 0x2, 0x2, 0x4d1, 0x4d0, 0x3, 
       0x2, 0x2, 0x2, 0x4d1, 0x4d2, 0x3, 0x2, 0x2, 0x2, 0x4d2, 0x4d3, 0x3, 
       0x2, 0x2, 0x2, 0x4d3, 0x4d5, 0x7, 0x1a, 0x2, 0x2, 0x4d4, 0x4d6, 0x7, 
       0x3bb, 0x2, 0x2, 0x4d5, 0x4d4, 0x3, 0x2, 0x2, 0x2, 0x4d5, 0x4d6, 
       0x3, 0x2, 0x2, 0x2, 0x4d6, 0x4d7, 0x3, 0x2, 0x2, 0x2, 0x4d7, 0x4d9, 
       0x5, 0x202, 0x102, 0x2, 0x4d8, 0x4c2, 0x3, 0x2, 0x2, 0x2, 0x4d8, 
       0x4d1, 0x3, 0x2, 0x2, 0x2, 0x4d9, 0x33, 0x3, 0x2, 0x2, 0x2, 0x4da, 
       0x4db, 0x7, 0x131, 0x2, 0x2, 0x4db, 0x4e2, 0x7, 0x3bb, 0x2, 0x2, 
       0x4dc, 0x4e3, 0x5, 0x1fc, 0xff, 0x2, 0x4dd, 0x4e0, 0x7, 0x22, 0x2, 
       0x2, 0x4de, 0x4df, 0x7, 0x3c4, 0x2, 0x2, 0x4df, 0x4e1, 0x7, 0x3c5, 
       0x2, 0x2, 0x4e0, 0x4de, 0x3, 0x2, 0x2, 0x2, 0x4e0, 0x4e1, 0x3, 0x2, 
       0x2, 0x2, 0x4e1, 0x4e3, 0x3, 0x2, 0x2, 0x2, 0x4e2, 0x4dc, 0x3, 0x2, 
       0x2, 0x2, 0x4e2, 0x4dd, 0x3, 0x2, 0x2, 0x2, 0x4e3, 0x35, 0x3, 0x2, 
       0x2, 0x2, 0x4e4, 0x4e5, 0x7, 0x104, 0x2, 0x2, 0x4e5, 0x4e9, 0x5, 
       0x38, 0x1d, 0x2, 0x4e6, 0x4e8, 0x5, 0x3a, 0x1e, 0x2, 0x4e7, 0x4e6, 
       0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4eb, 0x3, 0x2, 0x2, 0x2, 0x4e9, 0x4e7, 
       0x3, 0x2, 0x2, 0x2, 0x4e9, 0x4ea, 0x3, 0x2, 0x2, 0x2, 0x4ea, 0x507, 
       0x3, 0x2, 0x2, 0x2, 0x4eb, 0x4e9, 0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4ef, 
       0x7, 0x148, 0x2, 0x2, 0x4ed, 0x4f0, 0x5, 0x212, 0x10a, 0x2, 0x4ee, 
       0x4f0, 0x5, 0x25a, 0x12e, 0x2, 0x4ef, 0x4ed, 0x3, 0x2, 0x2, 0x2, 
       0x4ef, 0x4ee, 0x3, 0x2, 0x2, 0x2, 0x4f0, 0x4f1, 0x3, 0x2, 0x2, 0x2, 
       0x4f1, 0x4fa, 0x5, 0x3c, 0x1f, 0x2, 0x4f2, 0x4f3, 0x7, 0x201, 0x2, 
       0x2, 0x4f3, 0x4f7, 0x5, 0x38, 0x1d, 0x2, 0x4f4, 0x4f6, 0x5, 0x3a, 
       0x1e, 0x2, 0x4f5, 0x4f4, 0x3, 0x2, 0x2, 0x2, 0x4f6, 0x4f9, 0x3, 0x2, 
       0x2, 0x2, 0x4f7, 0x4f5, 0x3, 0x2, 0x2, 0x2, 0x4f7, 0x4f8, 0x3, 0x2, 
       0x2, 0x2, 0x4f8, 0x4fb, 0x3, 0x2, 0x2, 0x2, 0x4f9, 0x4f7, 0x3, 0x2, 
       0x2, 0x2, 0x4fa, 0x4f2, 0x3, 0x2, 0x2, 0x2, 0x4fa, 0x4fb, 0x3, 0x2, 
       0x2, 0x2, 0x4fb, 0x504, 0x3, 0x2, 0x2, 0x2, 0x4fc, 0x4fd, 0x7, 0x13f, 
       0x2, 0x2, 0x4fd, 0x501, 0x5, 0x38, 0x1d, 0x2, 0x4fe, 0x500, 0x5, 
       0x3a, 0x1e, 0x2, 0x4ff, 0x4fe, 0x3, 0x2, 0x2, 0x2, 0x500, 0x503, 
       0x3, 0x2, 0x2, 0x2, 0x501, 0x4ff, 0x3, 0x2, 0x2, 0x2, 0x501, 0x502, 
       0x3, 0x2, 0x2, 0x2, 0x502, 0x505, 0x3, 0x2, 0x2, 0x2, 0x503, 0x501, 
       0x3, 0x2, 0x2, 0x2, 0x504, 0x4fc, 0x3, 0x2, 0x2, 0x2, 0x504, 0x505, 
       0x3, 0x2, 0x2, 0x2, 0x505, 0x507, 0x3, 0x2, 0x2, 0x2, 0x506, 0x4e4, 
       0x3, 0x2, 0x2, 0x2, 0x506, 0x4ec, 0x3, 0x2, 0x2, 0x2, 0x507, 0x37, 
       0x3, 0x2, 0x2, 0x2, 0x508, 0x50d, 0x7, 0xed, 0x2, 0x2, 0x509, 0x50d, 
       0x5, 0x216, 0x10c, 0x2, 0x50a, 0x50d, 0x5, 0x212, 0x10a, 0x2, 0x50b, 
       0x50d, 0x5, 0x25a, 0x12e, 0x2, 0x50c, 0x508, 0x3, 0x2, 0x2, 0x2, 
       0x50c, 0x509, 0x3, 0x2, 0x2, 0x2, 0x50c, 0x50a, 0x3, 0x2, 0x2, 0x2, 
       0x50c, 0x50b, 0x3, 0x2, 0x2, 0x2, 0x50d, 0x39, 0x3, 0x2, 0x2, 0x2, 
       0x50e, 0x50f, 0x7, 0x3b6, 0x2, 0x2, 0x50f, 0x512, 0x7, 0x4c, 0x2, 
       0x2, 0x510, 0x513, 0x5, 0x212, 0x10a, 0x2, 0x511, 0x513, 0x5, 0x25a, 
       0x12e, 0x2, 0x512, 0x510, 0x3, 0x2, 0x2, 0x2, 0x512, 0x511, 0x3, 
       0x2, 0x2, 0x2, 0x513, 0x514, 0x3, 0x2, 0x2, 0x2, 0x514, 0x515, 0x5, 
       0x3c, 0x1f, 0x2, 0x515, 0x3b, 0x3, 0x2, 0x2, 0x2, 0x516, 0x524, 
  };
  static uint16_t serializedATNSegment1[] = {
    0x5, 0x270, 0x139, 0x2, 0x517, 0x524, 0x7, 0xbe, 0x2, 0x2, 0x518, 0x524, 
       0x7, 0xd0, 0x2, 0x2, 0x519, 0x524, 0x7, 0xd1, 0x2, 0x2, 0x51a, 0x524, 
       0x7, 0xd2, 0x2, 0x2, 0x51b, 0x524, 0x7, 0xd3, 0x2, 0x2, 0x51c, 0x524, 
       0x7, 0xd4, 0x2, 0x2, 0x51d, 0x524, 0x7, 0xd5, 0x2, 0x2, 0x51e, 0x524, 
       0x7, 0xd6, 0x2, 0x2, 0x51f, 0x524, 0x7, 0xd7, 0x2, 0x2, 0x520, 0x524, 
       0x7, 0xd8, 0x2, 0x2, 0x521, 0x524, 0x7, 0xd9, 0x2, 0x2, 0x522, 0x524, 
       0x7, 0xda, 0x2, 0x2, 0x523, 0x516, 0x3, 0x2, 0x2, 0x2, 0x523, 0x517, 
       0x3, 0x2, 0x2, 0x2, 0x523, 0x518, 0x3, 0x2, 0x2, 0x2, 0x523, 0x519, 
       0x3, 0x2, 0x2, 0x2, 0x523, 0x51a, 0x3, 0x2, 0x2, 0x2, 0x523, 0x51b, 
       0x3, 0x2, 0x2, 0x2, 0x523, 0x51c, 0x3, 0x2, 0x2, 0x2, 0x523, 0x51d, 
       0x3, 0x2, 0x2, 0x2, 0x523, 0x51e, 0x3, 0x2, 0x2, 0x2, 0x523, 0x51f, 
       0x3, 0x2, 0x2, 0x2, 0x523, 0x520, 0x3, 0x2, 0x2, 0x2, 0x523, 0x521, 
       0x3, 0x2, 0x2, 0x2, 0x523, 0x522, 0x3, 0x2, 0x2, 0x2, 0x524, 0x3d, 
       0x3, 0x2, 0x2, 0x2, 0x525, 0x52b, 0x7, 0x13c, 0x2, 0x2, 0x526, 0x52b, 
       0x7, 0x135, 0x2, 0x2, 0x527, 0x528, 0x7, 0x135, 0x2, 0x2, 0x528, 
       0x529, 0x7, 0x68, 0x2, 0x2, 0x529, 0x52b, 0x7, 0x1f1, 0x2, 0x2, 0x52a, 
       0x525, 0x3, 0x2, 0x2, 0x2, 0x52a, 0x526, 0x3, 0x2, 0x2, 0x2, 0x52a, 
       0x527, 0x3, 0x2, 0x2, 0x2, 0x52b, 0x3f, 0x3, 0x2, 0x2, 0x2, 0x52c, 
       0x52d, 0x7, 0xa4, 0x2, 0x2, 0x52d, 0x52e, 0x9, 0xf, 0x2, 0x2, 0x52e, 
       0x41, 0x3, 0x2, 0x2, 0x2, 0x52f, 0x531, 0x7, 0x175, 0x2, 0x2, 0x530, 
       0x532, 0x7, 0x3bb, 0x2, 0x2, 0x531, 0x530, 0x3, 0x2, 0x2, 0x2, 0x531, 
       0x532, 0x3, 0x2, 0x2, 0x2, 0x532, 0x533, 0x3, 0x2, 0x2, 0x2, 0x533, 
       0x53d, 0x5, 0x214, 0x10b, 0x2, 0x534, 0x53d, 0x5, 0x40, 0x21, 0x2, 
       0x535, 0x536, 0x7, 0xa9, 0x2, 0x2, 0x536, 0x537, 0x7, 0x1b8, 0x2, 
       0x2, 0x537, 0x53d, 0x5, 0x20e, 0x108, 0x2, 0x538, 0x539, 0x7, 0x11f, 
       0x2, 0x2, 0x539, 0x53d, 0x7, 0x3d3, 0x2, 0x2, 0x53a, 0x53d, 0x7, 
       0x16d, 0x2, 0x2, 0x53b, 0x53d, 0x7, 0x227, 0x2, 0x2, 0x53c, 0x52f, 
       0x3, 0x2, 0x2, 0x2, 0x53c, 0x534, 0x3, 0x2, 0x2, 0x2, 0x53c, 0x535, 
       0x3, 0x2, 0x2, 0x2, 0x53c, 0x538, 0x3, 0x2, 0x2, 0x2, 0x53c, 0x53a, 
       0x3, 0x2, 0x2, 0x2, 0x53c, 0x53b, 0x3, 0x2, 0x2, 0x2, 0x53d, 0x43, 
       0x3, 0x2, 0x2, 0x2, 0x53e, 0x540, 0x9, 0x10, 0x2, 0x2, 0x53f, 0x53e, 
       0x3, 0x2, 0x2, 0x2, 0x53f, 0x540, 0x3, 0x2, 0x2, 0x2, 0x540, 0x541, 
       0x3, 0x2, 0x2, 0x2, 0x541, 0x542, 0x5, 0x20e, 0x108, 0x2, 0x542, 
       0x543, 0x5, 0x220, 0x111, 0x2, 0x543, 0x45, 0x3, 0x2, 0x2, 0x2, 0x544, 
       0x545, 0x5, 0x20e, 0x108, 0x2, 0x545, 0x546, 0x5, 0x220, 0x111, 0x2, 
       0x546, 0x47, 0x3, 0x2, 0x2, 0x2, 0x547, 0x548, 0x7, 0x11f, 0x2, 0x2, 
       0x548, 0x55f, 0x7, 0x3d3, 0x2, 0x2, 0x549, 0x54a, 0x7, 0x176, 0x2, 
       0x2, 0x54a, 0x55f, 0x7, 0x8b, 0x2, 0x2, 0x54b, 0x54d, 0x7, 0x65, 
       0x2, 0x2, 0x54c, 0x54b, 0x3, 0x2, 0x2, 0x2, 0x54c, 0x54d, 0x3, 0x2, 
       0x2, 0x2, 0x54d, 0x54e, 0x3, 0x2, 0x2, 0x2, 0x54e, 0x55f, 0x7, 0x2c, 
       0x2, 0x2, 0x54f, 0x550, 0x7, 0x128, 0x2, 0x2, 0x550, 0x55a, 0x7, 
       0x8b, 0x2, 0x2, 0x551, 0x552, 0x7, 0x1a8, 0x2, 0x2, 0x552, 0x55a, 
       0x7, 0x8b, 0x2, 0x2, 0x553, 0x554, 0x7, 0x77, 0x2, 0x2, 0x554, 0x555, 
       0x7, 0x8b, 0x2, 0x2, 0x555, 0x55a, 0x7, 0x12d, 0x2, 0x2, 0x556, 0x557, 
       0x7, 0x63, 0x2, 0x2, 0x557, 0x558, 0x7, 0x8b, 0x2, 0x2, 0x558, 0x55a, 
       0x7, 0x12d, 0x2, 0x2, 0x559, 0x54f, 0x3, 0x2, 0x2, 0x2, 0x559, 0x551, 
       0x3, 0x2, 0x2, 0x2, 0x559, 0x553, 0x3, 0x2, 0x2, 0x2, 0x559, 0x556, 
       0x3, 0x2, 0x2, 0x2, 0x55a, 0x55f, 0x3, 0x2, 0x2, 0x2, 0x55b, 0x55c, 
       0x7, 0x8b, 0x2, 0x2, 0x55c, 0x55d, 0x7, 0x1ea, 0x2, 0x2, 0x55d, 0x55f, 
       0x9, 0xd, 0x2, 0x2, 0x55e, 0x547, 0x3, 0x2, 0x2, 0x2, 0x55e, 0x549, 
       0x3, 0x2, 0x2, 0x2, 0x55e, 0x54c, 0x3, 0x2, 0x2, 0x2, 0x55e, 0x559, 
       0x3, 0x2, 0x2, 0x2, 0x55e, 0x55b, 0x3, 0x2, 0x2, 0x2, 0x55f, 0x49, 
       0x3, 0x2, 0x2, 0x2, 0x560, 0x561, 0x7, 0x162, 0x2, 0x2, 0x561, 0x56f, 
       0x7, 0x3d3, 0x2, 0x2, 0x562, 0x563, 0x7, 0x24, 0x2, 0x2, 0x563, 0x56f, 
       0x7, 0x3d3, 0x2, 0x2, 0x564, 0x565, 0x7, 0x21f, 0x2, 0x2, 0x565, 
       0x56f, 0x7, 0x3d3, 0x2, 0x2, 0x566, 0x567, 0x7, 0x1bc, 0x2, 0x2, 
       0x567, 0x56f, 0x7, 0x3d3, 0x2, 0x2, 0x568, 0x569, 0x7, 0x1f4, 0x2, 
       0x2, 0x569, 0x56f, 0x7, 0x3d3, 0x2, 0x2, 0x56a, 0x56b, 0x7, 0x1b5, 
       0x2, 0x2, 0x56b, 0x56f, 0x7, 0x3d3, 0x2, 0x2, 0x56c, 0x56d, 0x7, 
       0x1c1, 0x2, 0x2, 0x56d, 0x56f, 0x5, 0x212, 0x10a, 0x2, 0x56e, 0x560, 
       0x3, 0x2, 0x2, 0x2, 0x56e, 0x562, 0x3, 0x2, 0x2, 0x2, 0x56e, 0x564, 
       0x3, 0x2, 0x2, 0x2, 0x56e, 0x566, 0x3, 0x2, 0x2, 0x2, 0x56e, 0x568, 
       0x3, 0x2, 0x2, 0x2, 0x56e, 0x56a, 0x3, 0x2, 0x2, 0x2, 0x56e, 0x56c, 
       0x3, 0x2, 0x2, 0x2, 0x56f, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x570, 0x571, 
       0x7, 0x3c4, 0x2, 0x2, 0x571, 0x576, 0x5, 0x4e, 0x28, 0x2, 0x572, 
       0x573, 0x7, 0x3c6, 0x2, 0x2, 0x573, 0x575, 0x5, 0x4e, 0x28, 0x2, 
       0x574, 0x572, 0x3, 0x2, 0x2, 0x2, 0x575, 0x578, 0x3, 0x2, 0x2, 0x2, 
       0x576, 0x574, 0x3, 0x2, 0x2, 0x2, 0x576, 0x577, 0x3, 0x2, 0x2, 0x2, 
       0x577, 0x579, 0x3, 0x2, 0x2, 0x2, 0x578, 0x576, 0x3, 0x2, 0x2, 0x2, 
       0x579, 0x57a, 0x7, 0x3c5, 0x2, 0x2, 0x57a, 0x4d, 0x3, 0x2, 0x2, 0x2, 
       0x57b, 0x57c, 0x5, 0x20e, 0x108, 0x2, 0x57c, 0x57d, 0x5, 0x50, 0x29, 
       0x2, 0x57d, 0x581, 0x3, 0x2, 0x2, 0x2, 0x57e, 0x581, 0x5, 0x54, 0x2b, 
       0x2, 0x57f, 0x581, 0x5, 0x5c, 0x2f, 0x2, 0x580, 0x57b, 0x3, 0x2, 
       0x2, 0x2, 0x580, 0x57e, 0x3, 0x2, 0x2, 0x2, 0x580, 0x57f, 0x3, 0x2, 
       0x2, 0x2, 0x581, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x582, 0x586, 0x5, 0x220, 
       0x111, 0x2, 0x583, 0x585, 0x5, 0x52, 0x2a, 0x2, 0x584, 0x583, 0x3, 
       0x2, 0x2, 0x2, 0x585, 0x588, 0x3, 0x2, 0x2, 0x2, 0x586, 0x584, 0x3, 
       0x2, 0x2, 0x2, 0x586, 0x587, 0x3, 0x2, 0x2, 0x2, 0x587, 0x51, 0x3, 
       0x2, 0x2, 0x2, 0x588, 0x586, 0x3, 0x2, 0x2, 0x2, 0x589, 0x5b2, 0x5, 
       0x21c, 0x10f, 0x2, 0x58a, 0x58b, 0x7, 0x27, 0x2, 0x2, 0x58b, 0x5b2, 
       0x5, 0x23c, 0x11f, 0x2, 0x58c, 0x591, 0x7, 0x108, 0x2, 0x2, 0x58d, 
       0x58e, 0x7, 0x68, 0x2, 0x2, 0x58e, 0x58f, 0x7, 0xa1, 0x2, 0x2, 0x58f, 
       0x591, 0x5, 0x23e, 0x120, 0x2, 0x590, 0x58c, 0x3, 0x2, 0x2, 0x2, 
       0x590, 0x58d, 0x3, 0x2, 0x2, 0x2, 0x591, 0x5b2, 0x3, 0x2, 0x2, 0x2, 
       0x592, 0x594, 0x7, 0x72, 0x2, 0x2, 0x593, 0x592, 0x3, 0x2, 0x2, 0x2, 
       0x593, 0x594, 0x3, 0x2, 0x2, 0x2, 0x594, 0x595, 0x3, 0x2, 0x2, 0x2, 
       0x595, 0x5b2, 0x7, 0x51, 0x2, 0x2, 0x596, 0x598, 0x7, 0x9e, 0x2, 
       0x2, 0x597, 0x599, 0x7, 0x51, 0x2, 0x2, 0x598, 0x597, 0x3, 0x2, 0x2, 
       0x2, 0x598, 0x599, 0x3, 0x2, 0x2, 0x2, 0x599, 0x5b2, 0x3, 0x2, 0x2, 
       0x2, 0x59a, 0x59b, 0x7, 0x11f, 0x2, 0x2, 0x59b, 0x5b2, 0x7, 0x3d3, 
       0x2, 0x2, 0x59c, 0x59d, 0x7, 0x11e, 0x2, 0x2, 0x59d, 0x5b2, 0x9, 
       0x11, 0x2, 0x2, 0x59e, 0x59f, 0x7, 0x207, 0x2, 0x2, 0x59f, 0x5b2, 
       0x9, 0x12, 0x2, 0x2, 0x5a0, 0x5b2, 0x5, 0x56, 0x2c, 0x2, 0x5a1, 0x5a2, 
       0x7, 0x1a, 0x2, 0x2, 0x5a2, 0x5b2, 0x5, 0x202, 0x102, 0x2, 0x5a3, 
       0x5a4, 0x7, 0x3f, 0x2, 0x2, 0x5a4, 0x5a6, 0x7, 0xa, 0x2, 0x2, 0x5a5, 
       0x5a3, 0x3, 0x2, 0x2, 0x2, 0x5a5, 0x5a6, 0x3, 0x2, 0x2, 0x2, 0x5a6, 
       0x5a7, 0x3, 0x2, 0x2, 0x2, 0x5a7, 0x5a8, 0x7, 0xd, 0x2, 0x2, 0x5a8, 
       0x5a9, 0x7, 0x3c4, 0x2, 0x2, 0x5a9, 0x5aa, 0x5, 0x25a, 0x12e, 0x2, 
       0x5aa, 0x5ac, 0x7, 0x3c5, 0x2, 0x2, 0x5ab, 0x5ad, 0x9, 0x13, 0x2, 
       0x2, 0x5ac, 0x5ab, 0x3, 0x2, 0x2, 0x2, 0x5ac, 0x5ad, 0x3, 0x2, 0x2, 
       0x2, 0x5ad, 0x5b2, 0x3, 0x2, 0x2, 0x2, 0x5ae, 0x5af, 0x7, 0xcf, 0x2, 
       0x2, 0x5af, 0x5b0, 0x7, 0x27, 0x2, 0x2, 0x5b0, 0x5b2, 0x7, 0x223, 
       0x2, 0x2, 0x5b1, 0x589, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x58a, 0x3, 0x2, 
       0x2, 0x2, 0x5b1, 0x590, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x593, 0x3, 0x2, 
       0x2, 0x2, 0x5b1, 0x596, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x59a, 0x3, 0x2, 
       0x2, 0x2, 0x5b1, 0x59c, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x59e, 0x3, 0x2, 
       0x2, 0x2, 0x5b1, 0x5a0, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x5a1, 0x3, 0x2, 
       0x2, 0x2, 0x5b1, 0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x5ae, 0x3, 0x2, 
       0x2, 0x2, 0x5b2, 0x53, 0x3, 0x2, 0x2, 0x2, 0x5b3, 0x5b5, 0x7, 0x1d, 
       0x2, 0x2, 0x5b4, 0x5b6, 0x5, 0x20e, 0x108, 0x2, 0x5b5, 0x5b4, 0x3, 
       0x2, 0x2, 0x2, 0x5b5, 0x5b6, 0x3, 0x2, 0x2, 0x2, 0x5b6, 0x5b8, 0x3, 
       0x2, 0x2, 0x2, 0x5b7, 0x5b3, 0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b8, 0x3, 
       0x2, 0x2, 0x2, 0x5b8, 0x5b9, 0x3, 0x2, 0x2, 0x2, 0x5b9, 0x5ba, 0x7, 
       0x72, 0x2, 0x2, 0x5ba, 0x5bc, 0x7, 0x51, 0x2, 0x2, 0x5bb, 0x5bd, 
       0x5, 0x20e, 0x108, 0x2, 0x5bc, 0x5bb, 0x3, 0x2, 0x2, 0x2, 0x5bc, 
       0x5bd, 0x3, 0x2, 0x2, 0x2, 0x5bd, 0x5bf, 0x3, 0x2, 0x2, 0x2, 0x5be, 
       0x5c0, 0x5, 0x40, 0x21, 0x2, 0x5bf, 0x5be, 0x3, 0x2, 0x2, 0x2, 0x5bf, 
       0x5c0, 0x3, 0x2, 0x2, 0x2, 0x5c0, 0x5c1, 0x3, 0x2, 0x2, 0x2, 0x5c1, 
       0x5c5, 0x5, 0x230, 0x119, 0x2, 0x5c2, 0x5c4, 0x5, 0x42, 0x22, 0x2, 
       0x5c3, 0x5c2, 0x3, 0x2, 0x2, 0x2, 0x5c4, 0x5c7, 0x3, 0x2, 0x2, 0x2, 
       0x5c5, 0x5c3, 0x3, 0x2, 0x2, 0x2, 0x5c5, 0x5c6, 0x3, 0x2, 0x2, 0x2, 
       0x5c6, 0x5f9, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5c5, 0x3, 0x2, 0x2, 0x2, 
       0x5c8, 0x5ca, 0x7, 0x1d, 0x2, 0x2, 0x5c9, 0x5cb, 0x5, 0x20e, 0x108, 
       0x2, 0x5ca, 0x5c9, 0x3, 0x2, 0x2, 0x2, 0x5ca, 0x5cb, 0x3, 0x2, 0x2, 
       0x2, 0x5cb, 0x5cd, 0x3, 0x2, 0x2, 0x2, 0x5cc, 0x5c8, 0x3, 0x2, 0x2, 
       0x2, 0x5cc, 0x5cd, 0x3, 0x2, 0x2, 0x2, 0x5cd, 0x5ce, 0x3, 0x2, 0x2, 
       0x2, 0x5ce, 0x5d0, 0x7, 0x9e, 0x2, 0x2, 0x5cf, 0x5d1, 0x9, 0x14, 
       0x2, 0x2, 0x5d0, 0x5cf, 0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5d1, 0x3, 0x2, 
       0x2, 0x2, 0x5d1, 0x5d3, 0x3, 0x2, 0x2, 0x2, 0x5d2, 0x5d4, 0x5, 0x20e, 
       0x108, 0x2, 0x5d3, 0x5d2, 0x3, 0x2, 0x2, 0x2, 0x5d3, 0x5d4, 0x3, 
       0x2, 0x2, 0x2, 0x5d4, 0x5d6, 0x3, 0x2, 0x2, 0x2, 0x5d5, 0x5d7, 0x5, 
       0x40, 0x21, 0x2, 0x5d6, 0x5d5, 0x3, 0x2, 0x2, 0x2, 0x5d6, 0x5d7, 
       0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d8, 0x3, 0x2, 0x2, 0x2, 0x5d8, 0x5dc, 
       0x5, 0x230, 0x119, 0x2, 0x5d9, 0x5db, 0x5, 0x42, 0x22, 0x2, 0x5da, 
       0x5d9, 0x3, 0x2, 0x2, 0x2, 0x5db, 0x5de, 0x3, 0x2, 0x2, 0x2, 0x5dc, 
       0x5da, 0x3, 0x2, 0x2, 0x2, 0x5dc, 0x5dd, 0x3, 0x2, 0x2, 0x2, 0x5dd, 
       0x5f9, 0x3, 0x2, 0x2, 0x2, 0x5de, 0x5dc, 0x3, 0x2, 0x2, 0x2, 0x5df, 
       0x5e1, 0x7, 0x1d, 0x2, 0x2, 0x5e0, 0x5e2, 0x5, 0x20e, 0x108, 0x2, 
       0x5e1, 0x5e0, 0x3, 0x2, 0x2, 0x2, 0x5e1, 0x5e2, 0x3, 0x2, 0x2, 0x2, 
       0x5e2, 0x5e4, 0x3, 0x2, 0x2, 0x2, 0x5e3, 0x5df, 0x3, 0x2, 0x2, 0x2, 
       0x5e3, 0x5e4, 0x3, 0x2, 0x2, 0x2, 0x5e4, 0x5e5, 0x3, 0x2, 0x2, 0x2, 
       0x5e5, 0x5e6, 0x7, 0x3c, 0x2, 0x2, 0x5e6, 0x5e8, 0x7, 0x51, 0x2, 
       0x2, 0x5e7, 0x5e9, 0x5, 0x20e, 0x108, 0x2, 0x5e8, 0x5e7, 0x3, 0x2, 
       0x2, 0x2, 0x5e8, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5e9, 0x5ea, 0x3, 0x2, 
       0x2, 0x2, 0x5ea, 0x5eb, 0x5, 0x230, 0x119, 0x2, 0x5eb, 0x5ec, 0x5, 
       0x56, 0x2c, 0x2, 0x5ec, 0x5f9, 0x3, 0x2, 0x2, 0x2, 0x5ed, 0x5ef, 
       0x7, 0x1d, 0x2, 0x2, 0x5ee, 0x5f0, 0x5, 0x20e, 0x108, 0x2, 0x5ef, 
       0x5ee, 0x3, 0x2, 0x2, 0x2, 0x5ef, 0x5f0, 0x3, 0x2, 0x2, 0x2, 0x5f0, 
       0x5f2, 0x3, 0x2, 0x2, 0x2, 0x5f1, 0x5ed, 0x3, 0x2, 0x2, 0x2, 0x5f1, 
       0x5f2, 0x3, 0x2, 0x2, 0x2, 0x5f2, 0x5f3, 0x3, 0x2, 0x2, 0x2, 0x5f3, 
       0x5f4, 0x7, 0x19, 0x2, 0x2, 0x5f4, 0x5f5, 0x7, 0x3c4, 0x2, 0x2, 0x5f5, 
       0x5f6, 0x5, 0x25a, 0x12e, 0x2, 0x5f6, 0x5f7, 0x7, 0x3c5, 0x2, 0x2, 
       0x5f7, 0x5f9, 0x3, 0x2, 0x2, 0x2, 0x5f8, 0x5b7, 0x3, 0x2, 0x2, 0x2, 
       0x5f8, 0x5cc, 0x3, 0x2, 0x2, 0x2, 0x5f8, 0x5e3, 0x3, 0x2, 0x2, 0x2, 
       0x5f8, 0x5f1, 0x3, 0x2, 0x2, 0x2, 0x5f9, 0x55, 0x3, 0x2, 0x2, 0x2, 
       0x5fa, 0x5fb, 0x7, 0x78, 0x2, 0x2, 0x5fb, 0x5fd, 0x5, 0x1f6, 0xfc, 
       0x2, 0x5fc, 0x5fe, 0x5, 0x230, 0x119, 0x2, 0x5fd, 0x5fc, 0x3, 0x2, 
       0x2, 0x2, 0x5fd, 0x5fe, 0x3, 0x2, 0x2, 0x2, 0x5fe, 0x601, 0x3, 0x2, 
       0x2, 0x2, 0x5ff, 0x600, 0x7, 0x61, 0x2, 0x2, 0x600, 0x602, 0x9, 0x15, 
       0x2, 0x2, 0x601, 0x5ff, 0x3, 0x2, 0x2, 0x2, 0x601, 0x602, 0x3, 0x2, 
       0x2, 0x2, 0x602, 0x604, 0x3, 0x2, 0x2, 0x2, 0x603, 0x605, 0x5, 0x58, 
       0x2d, 0x2, 0x604, 0x603, 0x3, 0x2, 0x2, 0x2, 0x604, 0x605, 0x3, 0x2, 
       0x2, 0x2, 0x605, 0x57, 0x3, 0x2, 0x2, 0x2, 0x606, 0x607, 0x7, 0x68, 
       0x2, 0x2, 0x607, 0x608, 0x7, 0x29, 0x2, 0x2, 0x608, 0x60c, 0x5, 0x5a, 
       0x2e, 0x2, 0x609, 0x60a, 0x7, 0x68, 0x2, 0x2, 0x60a, 0x60b, 0x7, 
       0xa1, 0x2, 0x2, 0x60b, 0x60d, 0x5, 0x5a, 0x2e, 0x2, 0x60c, 0x609, 
       0x3, 0x2, 0x2, 0x2, 0x60c, 0x60d, 0x3, 0x2, 0x2, 0x2, 0x60d, 0x617, 
       0x3, 0x2, 0x2, 0x2, 0x60e, 0x60f, 0x7, 0x68, 0x2, 0x2, 0x60f, 0x610, 
       0x7, 0xa1, 0x2, 0x2, 0x610, 0x614, 0x5, 0x5a, 0x2e, 0x2, 0x611, 0x612, 
       0x7, 0x68, 0x2, 0x2, 0x612, 0x613, 0x7, 0x29, 0x2, 0x2, 0x613, 0x615, 
       0x5, 0x5a, 0x2e, 0x2, 0x614, 0x611, 0x3, 0x2, 0x2, 0x2, 0x614, 0x615, 
       0x3, 0x2, 0x2, 0x2, 0x615, 0x617, 0x3, 0x2, 0x2, 0x2, 0x616, 0x606, 
       0x3, 0x2, 0x2, 0x2, 0x616, 0x60e, 0x3, 0x2, 0x2, 0x2, 0x617, 0x59, 
       0x3, 0x2, 0x2, 0x2, 0x618, 0x61f, 0x7, 0x7f, 0x2, 0x2, 0x619, 0x61f, 
       0x7, 0x14, 0x2, 0x2, 0x61a, 0x61b, 0x7, 0x87, 0x2, 0x2, 0x61b, 0x61f, 
       0x7, 0x67, 0x2, 0x2, 0x61c, 0x61d, 0x7, 0x1a8, 0x2, 0x2, 0x61d, 0x61f, 
       0x7, 0xff, 0x2, 0x2, 0x61e, 0x618, 0x3, 0x2, 0x2, 0x2, 0x61e, 0x619, 
       0x3, 0x2, 0x2, 0x2, 0x61e, 0x61a, 0x3, 0x2, 0x2, 0x2, 0x61e, 0x61c, 
       0x3, 0x2, 0x2, 0x2, 0x61f, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x620, 0x622, 
       0x9, 0x14, 0x2, 0x2, 0x621, 0x623, 0x5, 0x20e, 0x108, 0x2, 0x622, 
       0x621, 0x3, 0x2, 0x2, 0x2, 0x622, 0x623, 0x3, 0x2, 0x2, 0x2, 0x623, 
       0x625, 0x3, 0x2, 0x2, 0x2, 0x624, 0x626, 0x5, 0x40, 0x21, 0x2, 0x625, 
       0x624, 0x3, 0x2, 0x2, 0x2, 0x625, 0x626, 0x3, 0x2, 0x2, 0x2, 0x626, 
       0x627, 0x3, 0x2, 0x2, 0x2, 0x627, 0x62b, 0x5, 0x230, 0x119, 0x2, 
       0x628, 0x62a, 0x5, 0x42, 0x22, 0x2, 0x629, 0x628, 0x3, 0x2, 0x2, 
       0x2, 0x62a, 0x62d, 0x3, 0x2, 0x2, 0x2, 0x62b, 0x629, 0x3, 0x2, 0x2, 
       0x2, 0x62b, 0x62c, 0x3, 0x2, 0x2, 0x2, 0x62c, 0x63d, 0x3, 0x2, 0x2, 
       0x2, 0x62d, 0x62b, 0x3, 0x2, 0x2, 0x2, 0x62e, 0x630, 0x9, 0x16, 0x2, 
       0x2, 0x62f, 0x631, 0x9, 0x14, 0x2, 0x2, 0x630, 0x62f, 0x3, 0x2, 0x2, 
       0x2, 0x630, 0x631, 0x3, 0x2, 0x2, 0x2, 0x631, 0x633, 0x3, 0x2, 0x2, 
       0x2, 0x632, 0x634, 0x5, 0x20e, 0x108, 0x2, 0x633, 0x632, 0x3, 0x2, 
       0x2, 0x2, 0x633, 0x634, 0x3, 0x2, 0x2, 0x2, 0x634, 0x635, 0x3, 0x2, 
       0x2, 0x2, 0x635, 0x639, 0x5, 0x230, 0x119, 0x2, 0x636, 0x638, 0x5, 
       0x42, 0x22, 0x2, 0x637, 0x636, 0x3, 0x2, 0x2, 0x2, 0x638, 0x63b, 
       0x3, 0x2, 0x2, 0x2, 0x639, 0x637, 0x3, 0x2, 0x2, 0x2, 0x639, 0x63a, 
       0x3, 0x2, 0x2, 0x2, 0x63a, 0x63d, 0x3, 0x2, 0x2, 0x2, 0x63b, 0x639, 
       0x3, 0x2, 0x2, 0x2, 0x63c, 0x620, 0x3, 0x2, 0x2, 0x2, 0x63c, 0x62e, 
       0x3, 0x2, 0x2, 0x2, 0x63d, 0x5d, 0x3, 0x2, 0x2, 0x2, 0x63e, 0x640, 
       0x7, 0x140, 0x2, 0x2, 0x63f, 0x641, 0x7, 0x3bb, 0x2, 0x2, 0x640, 
       0x63f, 0x3, 0x2, 0x2, 0x2, 0x640, 0x641, 0x3, 0x2, 0x2, 0x2, 0x641, 
       0x642, 0x3, 0x2, 0x2, 0x2, 0x642, 0x6cf, 0x5, 0x204, 0x103, 0x2, 
       0x643, 0x645, 0x7, 0x108, 0x2, 0x2, 0x644, 0x646, 0x7, 0x3bb, 0x2, 
       0x2, 0x645, 0x644, 0x3, 0x2, 0x2, 0x2, 0x645, 0x646, 0x3, 0x2, 0x2, 
       0x2, 0x646, 0x647, 0x3, 0x2, 0x2, 0x2, 0x647, 0x6cf, 0x5, 0x212, 
       0x10a, 0x2, 0x648, 0x64a, 0x7, 0x109, 0x2, 0x2, 0x649, 0x64b, 0x7, 
       0x3bb, 0x2, 0x2, 0x64a, 0x649, 0x3, 0x2, 0x2, 0x2, 0x64a, 0x64b, 
       0x3, 0x2, 0x2, 0x2, 0x64b, 0x64c, 0x3, 0x2, 0x2, 0x2, 0x64c, 0x6cf, 
       0x5, 0x212, 0x10a, 0x2, 0x64d, 0x64f, 0x7, 0x27, 0x2, 0x2, 0x64e, 
       0x64d, 0x3, 0x2, 0x2, 0x2, 0x64e, 0x64f, 0x3, 0x2, 0x2, 0x2, 0x64f, 
       0x653, 0x3, 0x2, 0x2, 0x2, 0x650, 0x651, 0x7, 0x18, 0x2, 0x2, 0x651, 
       0x654, 0x7, 0x87, 0x2, 0x2, 0x652, 0x654, 0x7, 0x2a4, 0x2, 0x2, 0x653, 
       0x650, 0x3, 0x2, 0x2, 0x2, 0x653, 0x652, 0x3, 0x2, 0x2, 0x2, 0x654, 
       0x656, 0x3, 0x2, 0x2, 0x2, 0x655, 0x657, 0x7, 0x3bb, 0x2, 0x2, 0x656, 
       0x655, 0x3, 0x2, 0x2, 0x2, 0x656, 0x657, 0x3, 0x2, 0x2, 0x2, 0x657, 
       0x65a, 0x3, 0x2, 0x2, 0x2, 0x658, 0x65b, 0x5, 0x200, 0x101, 0x2, 
       0x659, 0x65b, 0x7, 0x27, 0x2, 0x2, 0x65a, 0x658, 0x3, 0x2, 0x2, 0x2, 
       0x65a, 0x659, 0x3, 0x2, 0x2, 0x2, 0x65b, 0x6cf, 0x3, 0x2, 0x2, 0x2, 
       0x65c, 0x65e, 0x9, 0x17, 0x2, 0x2, 0x65d, 0x65f, 0x7, 0x3bb, 0x2, 
       0x2, 0x65e, 0x65d, 0x3, 0x2, 0x2, 0x2, 0x65e, 0x65f, 0x3, 0x2, 0x2, 
       0x2, 0x65f, 0x660, 0x3, 0x2, 0x2, 0x2, 0x660, 0x6cf, 0x9, 0x18, 0x2, 
       0x2, 0x661, 0x663, 0x7, 0x27, 0x2, 0x2, 0x662, 0x661, 0x3, 0x2, 0x2, 
       0x2, 0x662, 0x663, 0x3, 0x2, 0x2, 0x2, 0x663, 0x664, 0x3, 0x2, 0x2, 
       0x2, 0x664, 0x666, 0x7, 0x1a, 0x2, 0x2, 0x665, 0x667, 0x7, 0x3bb, 
       0x2, 0x2, 0x666, 0x665, 0x3, 0x2, 0x2, 0x2, 0x666, 0x667, 0x3, 0x2, 
       0x2, 0x2, 0x667, 0x668, 0x3, 0x2, 0x2, 0x2, 0x668, 0x6cf, 0x5, 0x202, 
       0x102, 0x2, 0x669, 0x66b, 0x7, 0x11f, 0x2, 0x2, 0x66a, 0x66c, 0x7, 
       0x3bb, 0x2, 0x2, 0x66b, 0x66a, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x66c, 
       0x3, 0x2, 0x2, 0x2, 0x66c, 0x66d, 0x3, 0x2, 0x2, 0x2, 0x66d, 0x6cf, 
       0x7, 0x3d3, 0x2, 0x2, 0x66e, 0x670, 0x7, 0x124, 0x2, 0x2, 0x66f, 
       0x671, 0x7, 0x3bb, 0x2, 0x2, 0x670, 0x66f, 0x3, 0x2, 0x2, 0x2, 0x670, 
       0x671, 0x3, 0x2, 0x2, 0x2, 0x671, 0x672, 0x3, 0x2, 0x2, 0x2, 0x672, 
       0x6cf, 0x9, 0x19, 0x2, 0x2, 0x673, 0x675, 0x7, 0x126, 0x2, 0x2, 0x674, 
       0x676, 0x7, 0x3bb, 0x2, 0x2, 0x675, 0x674, 0x3, 0x2, 0x2, 0x2, 0x675, 
       0x676, 0x3, 0x2, 0x2, 0x2, 0x676, 0x677, 0x3, 0x2, 0x2, 0x2, 0x677, 
       0x6cf, 0x7, 0x3d3, 0x2, 0x2, 0x678, 0x679, 0x7, 0x12d, 0x2, 0x2, 
       0x679, 0x67b, 0x7, 0x134, 0x2, 0x2, 0x67a, 0x67c, 0x7, 0x3bb, 0x2, 
       0x2, 0x67b, 0x67a, 0x3, 0x2, 0x2, 0x2, 0x67b, 0x67c, 0x3, 0x2, 0x2, 
       0x2, 0x67c, 0x67d, 0x3, 0x2, 0x2, 0x2, 0x67d, 0x6cf, 0x7, 0x3d3, 
       0x2, 0x2, 0x67e, 0x680, 0x7, 0x132, 0x2, 0x2, 0x67f, 0x681, 0x7, 
       0x3bb, 0x2, 0x2, 0x680, 0x67f, 0x3, 0x2, 0x2, 0x2, 0x680, 0x681, 
       0x3, 0x2, 0x2, 0x2, 0x681, 0x682, 0x3, 0x2, 0x2, 0x2, 0x682, 0x6cf, 
       0x9, 0x18, 0x2, 0x2, 0x683, 0x685, 0x7, 0x13d, 0x2, 0x2, 0x684, 0x686, 
       0x7, 0x3bb, 0x2, 0x2, 0x685, 0x684, 0x3, 0x2, 0x2, 0x2, 0x685, 0x686, 
       0x3, 0x2, 0x2, 0x2, 0x686, 0x687, 0x3, 0x2, 0x2, 0x2, 0x687, 0x6cf, 
       0x7, 0x3d3, 0x2, 0x2, 0x688, 0x689, 0x7, 0x47, 0x2, 0x2, 0x689, 0x68b, 
       0x7, 0x134, 0x2, 0x2, 0x68a, 0x68c, 0x7, 0x3bb, 0x2, 0x2, 0x68b, 
       0x68a, 0x3, 0x2, 0x2, 0x2, 0x68b, 0x68c, 0x3, 0x2, 0x2, 0x2, 0x68c, 
       0x68d, 0x3, 0x2, 0x2, 0x2, 0x68d, 0x6cf, 0x7, 0x3d3, 0x2, 0x2, 0x68e, 
       0x690, 0x7, 0x16a, 0x2, 0x2, 0x68f, 0x691, 0x7, 0x3bb, 0x2, 0x2, 
       0x690, 0x68f, 0x3, 0x2, 0x2, 0x2, 0x690, 0x691, 0x3, 0x2, 0x2, 0x2, 
       0x691, 0x692, 0x3, 0x2, 0x2, 0x2, 0x692, 0x6cf, 0x9, 0x1a, 0x2, 0x2, 
       0x693, 0x695, 0x7, 0x175, 0x2, 0x2, 0x694, 0x696, 0x7, 0x3bb, 0x2, 
       0x2, 0x695, 0x694, 0x3, 0x2, 0x2, 0x2, 0x695, 0x696, 0x3, 0x2, 0x2, 
       0x2, 0x696, 0x697, 0x3, 0x2, 0x2, 0x2, 0x697, 0x6cf, 0x5, 0x214, 
       0x10b, 0x2, 0x698, 0x69a, 0x7, 0x196, 0x2, 0x2, 0x699, 0x69b, 0x7, 
       0x3bb, 0x2, 0x2, 0x69a, 0x699, 0x3, 0x2, 0x2, 0x2, 0x69a, 0x69b, 
       0x3, 0x2, 0x2, 0x2, 0x69b, 0x69c, 0x3, 0x2, 0x2, 0x2, 0x69c, 0x6cf, 
       0x5, 0x212, 0x10a, 0x2, 0x69d, 0x69f, 0x7, 0x19e, 0x2, 0x2, 0x69e, 
       0x6a0, 0x7, 0x3bb, 0x2, 0x2, 0x69f, 0x69e, 0x3, 0x2, 0x2, 0x2, 0x69f, 
       0x6a0, 0x3, 0x2, 0x2, 0x2, 0x6a0, 0x6a1, 0x3, 0x2, 0x2, 0x2, 0x6a1, 
       0x6cf, 0x5, 0x212, 0x10a, 0x2, 0x6a2, 0x6a4, 0x7, 0x1b6, 0x2, 0x2, 
       0x6a3, 0x6a5, 0x7, 0x3bb, 0x2, 0x2, 0x6a4, 0x6a3, 0x3, 0x2, 0x2, 
       0x2, 0x6a4, 0x6a5, 0x3, 0x2, 0x2, 0x2, 0x6a5, 0x6a6, 0x3, 0x2, 0x2, 
       0x2, 0x6a6, 0x6cf, 0x9, 0x1b, 0x2, 0x2, 0x6a7, 0x6a9, 0x7, 0x1bc, 
       0x2, 0x2, 0x6a8, 0x6aa, 0x7, 0x3bb, 0x2, 0x2, 0x6a9, 0x6a8, 0x3, 
       0x2, 0x2, 0x2, 0x6a9, 0x6aa, 0x3, 0x2, 0x2, 0x2, 0x6aa, 0x6ab, 0x3, 
       0x2, 0x2, 0x2, 0x6ab, 0x6cf, 0x7, 0x3d3, 0x2, 0x2, 0x6ac, 0x6ae, 
       0x7, 0x1e7, 0x2, 0x2, 0x6ad, 0x6af, 0x7, 0x3bb, 0x2, 0x2, 0x6ae, 
       0x6ad, 0x3, 0x2, 0x2, 0x2, 0x6ae, 0x6af, 0x3, 0x2, 0x2, 0x2, 0x6af, 
       0x6b0, 0x3, 0x2, 0x2, 0x2, 0x6b0, 0x6cf, 0x9, 0x1c, 0x2, 0x2, 0x6b1, 
       0x6b3, 0x7, 0x202, 0x2, 0x2, 0x6b2, 0x6b4, 0x7, 0x3bb, 0x2, 0x2, 
       0x6b3, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6b3, 0x6b4, 0x3, 0x2, 0x2, 0x2, 
       0x6b4, 0x6b5, 0x3, 0x2, 0x2, 0x2, 0x6b5, 0x6cf, 0x9, 0x1b, 0x2, 0x2, 
       0x6b6, 0x6b8, 0x7, 0x203, 0x2, 0x2, 0x6b7, 0x6b9, 0x7, 0x3bb, 0x2, 
       0x2, 0x6b8, 0x6b7, 0x3, 0x2, 0x2, 0x2, 0x6b8, 0x6b9, 0x3, 0x2, 0x2, 
       0x2, 0x6b9, 0x6ba, 0x3, 0x2, 0x2, 0x2, 0x6ba, 0x6cf, 0x9, 0x1b, 0x2, 
       0x2, 0x6bb, 0x6bd, 0x7, 0x204, 0x2, 0x2, 0x6bc, 0x6be, 0x7, 0x3bb, 
       0x2, 0x2, 0x6bd, 0x6bc, 0x3, 0x2, 0x2, 0x2, 0x6bd, 0x6be, 0x3, 0x2, 
       0x2, 0x2, 0x6be, 0x6bf, 0x3, 0x2, 0x2, 0x2, 0x6bf, 0x6cf, 0x5, 0x212, 
       0x10a, 0x2, 0x6c0, 0x6c1, 0x7, 0x210, 0x2, 0x2, 0x6c1, 0x6c3, 0x5, 
       0x20e, 0x108, 0x2, 0x6c2, 0x6c4, 0x5, 0x60, 0x31, 0x2, 0x6c3, 0x6c2, 
       0x3, 0x2, 0x2, 0x2, 0x6c3, 0x6c4, 0x3, 0x2, 0x2, 0x2, 0x6c4, 0x6cf, 
       0x3, 0x2, 0x2, 0x2, 0x6c5, 0x6cf, 0x5, 0x60, 0x31, 0x2, 0x6c6, 0x6c8, 
       0x7, 0x9d, 0x2, 0x2, 0x6c7, 0x6c9, 0x7, 0x3bb, 0x2, 0x2, 0x6c8, 0x6c7, 
       0x3, 0x2, 0x2, 0x2, 0x6c8, 0x6c9, 0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6ca, 
       0x3, 0x2, 0x2, 0x2, 0x6ca, 0x6cb, 0x7, 0x3c4, 0x2, 0x2, 0x6cb, 0x6cc, 
       0x5, 0x22e, 0x118, 0x2, 0x6cc, 0x6cd, 0x7, 0x3c5, 0x2, 0x2, 0x6cd, 
       0x6cf, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x63e, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x643, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x648, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x64e, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x65c, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x662, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x669, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x66e, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x673, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x678, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x67e, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x683, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x688, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x68e, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x693, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x698, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x69d, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x6a2, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6a7, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x6ac, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6b1, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x6b6, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6bb, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x6c0, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6c5, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x6c6, 0x3, 0x2, 0x2, 0x2, 0x6cf, 0x5f, 0x3, 0x2, 0x2, 0x2, 0x6d0, 
       0x6d1, 0x7, 0x207, 0x2, 0x2, 0x6d1, 0x6d2, 0x9, 0x12, 0x2, 0x2, 0x6d2, 
       0x61, 0x3, 0x2, 0x2, 0x2, 0x6d3, 0x6d4, 0x7, 0x71, 0x2, 0x2, 0x6d4, 
       0x6d5, 0x7, 0x12, 0x2, 0x2, 0x6d5, 0x6d8, 0x5, 0x64, 0x33, 0x2, 0x6d6, 
       0x6d7, 0x7, 0x1bb, 0x2, 0x2, 0x6d7, 0x6d9, 0x5, 0x212, 0x10a, 0x2, 
       0x6d8, 0x6d6, 0x3, 0x2, 0x2, 0x2, 0x6d8, 0x6d9, 0x3, 0x2, 0x2, 0x2, 
       0x6d9, 0x6e1, 0x3, 0x2, 0x2, 0x2, 0x6da, 0x6db, 0x7, 0x20b, 0x2, 
       0x2, 0x6db, 0x6dc, 0x7, 0x12, 0x2, 0x2, 0x6dc, 0x6df, 0x5, 0x66, 
       0x34, 0x2, 0x6dd, 0x6de, 0x7, 0x20c, 0x2, 0x2, 0x6de, 0x6e0, 0x5, 
       0x212, 0x10a, 0x2, 0x6df, 0x6dd, 0x3, 0x2, 0x2, 0x2, 0x6df, 0x6e0, 
       0x3, 0x2, 0x2, 0x2, 0x6e0, 0x6e2, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6da, 
       0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6e2, 0x3, 0x2, 0x2, 0x2, 0x6e2, 0x6ee, 
       0x3, 0x2, 0x2, 0x2, 0x6e3, 0x6e4, 0x7, 0x3c4, 0x2, 0x2, 0x6e4, 0x6e9, 
       0x5, 0x68, 0x35, 0x2, 0x6e5, 0x6e6, 0x7, 0x3c6, 0x2, 0x2, 0x6e6, 
       0x6e8, 0x5, 0x68, 0x35, 0x2, 0x6e7, 0x6e5, 0x3, 0x2, 0x2, 0x2, 0x6e8, 
       0x6eb, 0x3, 0x2, 0x2, 0x2, 0x6e9, 0x6e7, 0x3, 0x2, 0x2, 0x2, 0x6e9, 
       0x6ea, 0x3, 0x2, 0x2, 0x2, 0x6ea, 0x6ec, 0x3, 0x2, 0x2, 0x2, 0x6eb, 
       0x6e9, 0x3, 0x2, 0x2, 0x2, 0x6ec, 0x6ed, 0x7, 0x3c5, 0x2, 0x2, 0x6ed, 
       0x6ef, 0x3, 0x2, 0x2, 0x2, 0x6ee, 0x6e3, 0x3, 0x2, 0x2, 0x2, 0x6ee, 
       0x6ef, 0x3, 0x2, 0x2, 0x2, 0x6ef, 0x63, 0x3, 0x2, 0x2, 0x2, 0x6f0, 
       0x6f2, 0x7, 0x59, 0x2, 0x2, 0x6f1, 0x6f0, 0x3, 0x2, 0x2, 0x2, 0x6f1, 
       0x6f2, 0x3, 0x2, 0x2, 0x2, 0x6f2, 0x6f3, 0x3, 0x2, 0x2, 0x2, 0x6f3, 
       0x6f4, 0x7, 0x160, 0x2, 0x2, 0x6f4, 0x6f5, 0x7, 0x3c4, 0x2, 0x2, 
       0x6f5, 0x6f6, 0x5, 0x25a, 0x12e, 0x2, 0x6f6, 0x6f7, 0x7, 0x3c5, 0x2, 
       0x2, 0x6f7, 0x71e, 0x3, 0x2, 0x2, 0x2, 0x6f8, 0x6fa, 0x7, 0x59, 0x2, 
       0x2, 0x6f9, 0x6f8, 0x3, 0x2, 0x2, 0x2, 0x6f9, 0x6fa, 0x3, 0x2, 0x2, 
       0x2, 0x6fa, 0x6fb, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6ff, 0x7, 0x51, 0x2, 
       0x2, 0x6fc, 0x6fd, 0x7, 0x102, 0x2, 0x2, 0x6fd, 0x6fe, 0x7, 0x3bb, 
       0x2, 0x2, 0x6fe, 0x700, 0x9, 0x1d, 0x2, 0x2, 0x6ff, 0x6fc, 0x3, 0x2, 
       0x2, 0x2, 0x6ff, 0x700, 0x3, 0x2, 0x2, 0x2, 0x700, 0x701, 0x3, 0x2, 
       0x2, 0x2, 0x701, 0x702, 0x7, 0x3c4, 0x2, 0x2, 0x702, 0x703, 0x5, 
       0x22c, 0x117, 0x2, 0x703, 0x704, 0x7, 0x3c5, 0x2, 0x2, 0x704, 0x71e, 
       0x3, 0x2, 0x2, 0x2, 0x705, 0x70f, 0x7, 0x75, 0x2, 0x2, 0x706, 0x707, 
       0x7, 0x3c4, 0x2, 0x2, 0x707, 0x708, 0x5, 0x25a, 0x12e, 0x2, 0x708, 
       0x709, 0x7, 0x3c5, 0x2, 0x2, 0x709, 0x710, 0x3, 0x2, 0x2, 0x2, 0x70a, 
       0x70b, 0x7, 0x11d, 0x2, 0x2, 0x70b, 0x70c, 0x7, 0x3c4, 0x2, 0x2, 
       0x70c, 0x70d, 0x5, 0x22c, 0x117, 0x2, 0x70d, 0x70e, 0x7, 0x3c5, 0x2, 
       0x2, 0x70e, 0x710, 0x3, 0x2, 0x2, 0x2, 0x70f, 0x706, 0x3, 0x2, 0x2, 
       0x2, 0x70f, 0x70a, 0x3, 0x2, 0x2, 0x2, 0x710, 0x71e, 0x3, 0x2, 0x2, 
       0x2, 0x711, 0x71b, 0x7, 0x17b, 0x2, 0x2, 0x712, 0x713, 0x7, 0x3c4, 
       0x2, 0x2, 0x713, 0x714, 0x5, 0x25a, 0x12e, 0x2, 0x714, 0x715, 0x7, 
       0x3c5, 0x2, 0x2, 0x715, 0x71c, 0x3, 0x2, 0x2, 0x2, 0x716, 0x717, 
       0x7, 0x11d, 0x2, 0x2, 0x717, 0x718, 0x7, 0x3c4, 0x2, 0x2, 0x718, 
       0x719, 0x5, 0x22c, 0x117, 0x2, 0x719, 0x71a, 0x7, 0x3c5, 0x2, 0x2, 
       0x71a, 0x71c, 0x3, 0x2, 0x2, 0x2, 0x71b, 0x712, 0x3, 0x2, 0x2, 0x2, 
       0x71b, 0x716, 0x3, 0x2, 0x2, 0x2, 0x71c, 0x71e, 0x3, 0x2, 0x2, 0x2, 
       0x71d, 0x6f1, 0x3, 0x2, 0x2, 0x2, 0x71d, 0x6f9, 0x3, 0x2, 0x2, 0x2, 
       0x71d, 0x705, 0x3, 0x2, 0x2, 0x2, 0x71d, 0x711, 0x3, 0x2, 0x2, 0x2, 
       0x71e, 0x65, 0x3, 0x2, 0x2, 0x2, 0x71f, 0x721, 0x7, 0x59, 0x2, 0x2, 
       0x720, 0x71f, 0x3, 0x2, 0x2, 0x2, 0x720, 0x721, 0x3, 0x2, 0x2, 0x2, 
       0x721, 0x722, 0x3, 0x2, 0x2, 0x2, 0x722, 0x723, 0x7, 0x160, 0x2, 
       0x2, 0x723, 0x724, 0x7, 0x3c4, 0x2, 0x2, 0x724, 0x725, 0x5, 0x25a, 
       0x12e, 0x2, 0x725, 0x726, 0x7, 0x3c5, 0x2, 0x2, 0x726, 0x735, 0x3, 
       0x2, 0x2, 0x2, 0x727, 0x729, 0x7, 0x59, 0x2, 0x2, 0x728, 0x727, 0x3, 
       0x2, 0x2, 0x2, 0x728, 0x729, 0x3, 0x2, 0x2, 0x2, 0x729, 0x72a, 0x3, 
       0x2, 0x2, 0x2, 0x72a, 0x72e, 0x7, 0x51, 0x2, 0x2, 0x72b, 0x72c, 0x7, 
       0x102, 0x2, 0x2, 0x72c, 0x72d, 0x7, 0x3bb, 0x2, 0x2, 0x72d, 0x72f, 
       0x9, 0x1d, 0x2, 0x2, 0x72e, 0x72b, 0x3, 0x2, 0x2, 0x2, 0x72e, 0x72f, 
       0x3, 0x2, 0x2, 0x2, 0x72f, 0x730, 0x3, 0x2, 0x2, 0x2, 0x730, 0x731, 
       0x7, 0x3c4, 0x2, 0x2, 0x731, 0x732, 0x5, 0x22c, 0x117, 0x2, 0x732, 
       0x733, 0x7, 0x3c5, 0x2, 0x2, 0x733, 0x735, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x720, 0x3, 0x2, 0x2, 0x2, 0x734, 0x728, 0x3, 0x2, 0x2, 0x2, 0x735, 
       0x67, 0x3, 0x2, 0x2, 0x2, 0x736, 0x737, 0x7, 0x71, 0x2, 0x2, 0x737, 
       0x738, 0x5, 0x20e, 0x108, 0x2, 0x738, 0x739, 0x7, 0xa5, 0x2, 0x2, 
       0x739, 0x73a, 0x7, 0x179, 0x2, 0x2, 0x73a, 0x73b, 0x7, 0x213, 0x2, 
       0x2, 0x73b, 0x73c, 0x7, 0x3c4, 0x2, 0x2, 0x73c, 0x741, 0x5, 0x6a, 
       0x36, 0x2, 0x73d, 0x73e, 0x7, 0x3c6, 0x2, 0x2, 0x73e, 0x740, 0x5, 
       0x6a, 0x36, 0x2, 0x73f, 0x73d, 0x3, 0x2, 0x2, 0x2, 0x740, 0x743, 
       0x3, 0x2, 0x2, 0x2, 0x741, 0x73f, 0x3, 0x2, 0x2, 0x2, 0x741, 0x742, 
       0x3, 0x2, 0x2, 0x2, 0x742, 0x744, 0x3, 0x2, 0x2, 0x2, 0x743, 0x741, 
       0x3, 0x2, 0x2, 0x2, 0x744, 0x748, 0x7, 0x3c5, 0x2, 0x2, 0x745, 0x747, 
       0x5, 0x70, 0x39, 0x2, 0x746, 0x745, 0x3, 0x2, 0x2, 0x2, 0x747, 0x74a, 
       0x3, 0x2, 0x2, 0x2, 0x748, 0x746, 0x3, 0x2, 0x2, 0x2, 0x748, 0x749, 
       0x3, 0x2, 0x2, 0x2, 0x749, 0x753, 0x3, 0x2, 0x2, 0x2, 0x74a, 0x748, 
       0x3, 0x2, 0x2, 0x2, 0x74b, 0x750, 0x5, 0x6e, 0x38, 0x2, 0x74c, 0x74d, 
       0x7, 0x3c6, 0x2, 0x2, 0x74d, 0x74f, 0x5, 0x6e, 0x38, 0x2, 0x74e, 
       0x74c, 0x3, 0x2, 0x2, 0x2, 0x74f, 0x752, 0x3, 0x2, 0x2, 0x2, 0x750, 
       0x74e, 0x3, 0x2, 0x2, 0x2, 0x750, 0x751, 0x3, 0x2, 0x2, 0x2, 0x751, 
       0x754, 0x3, 0x2, 0x2, 0x2, 0x752, 0x750, 0x3, 0x2, 0x2, 0x2, 0x753, 
       0x74b, 0x3, 0x2, 0x2, 0x2, 0x753, 0x754, 0x3, 0x2, 0x2, 0x2, 0x754, 
       0x7ba, 0x3, 0x2, 0x2, 0x2, 0x755, 0x756, 0x7, 0x71, 0x2, 0x2, 0x756, 
       0x757, 0x5, 0x20e, 0x108, 0x2, 0x757, 0x758, 0x7, 0xa5, 0x2, 0x2, 
       0x758, 0x759, 0x7, 0x179, 0x2, 0x2, 0x759, 0x75a, 0x7, 0x213, 0x2, 
       0x2, 0x75a, 0x75e, 0x5, 0x6a, 0x36, 0x2, 0x75b, 0x75d, 0x5, 0x70, 
       0x39, 0x2, 0x75c, 0x75b, 0x3, 0x2, 0x2, 0x2, 0x75d, 0x760, 0x3, 0x2, 
       0x2, 0x2, 0x75e, 0x75c, 0x3, 0x2, 0x2, 0x2, 0x75e, 0x75f, 0x3, 0x2, 
       0x2, 0x2, 0x75f, 0x769, 0x3, 0x2, 0x2, 0x2, 0x760, 0x75e, 0x3, 0x2, 
       0x2, 0x2, 0x761, 0x766, 0x5, 0x6e, 0x38, 0x2, 0x762, 0x763, 0x7, 
       0x3c6, 0x2, 0x2, 0x763, 0x765, 0x5, 0x6e, 0x38, 0x2, 0x764, 0x762, 
       0x3, 0x2, 0x2, 0x2, 0x765, 0x768, 0x3, 0x2, 0x2, 0x2, 0x766, 0x764, 
       0x3, 0x2, 0x2, 0x2, 0x766, 0x767, 0x3, 0x2, 0x2, 0x2, 0x767, 0x76a, 
       0x3, 0x2, 0x2, 0x2, 0x768, 0x766, 0x3, 0x2, 0x2, 0x2, 0x769, 0x761, 
       0x3, 0x2, 0x2, 0x2, 0x769, 0x76a, 0x3, 0x2, 0x2, 0x2, 0x76a, 0x7ba, 
       0x3, 0x2, 0x2, 0x2, 0x76b, 0x76c, 0x7, 0x71, 0x2, 0x2, 0x76c, 0x76d, 
       0x5, 0x20e, 0x108, 0x2, 0x76d, 0x76e, 0x7, 0xa5, 0x2, 0x2, 0x76e, 
       0x76f, 0x7, 0x46, 0x2, 0x2, 0x76f, 0x770, 0x7, 0x3c4, 0x2, 0x2, 0x770, 
       0x775, 0x5, 0x6a, 0x36, 0x2, 0x771, 0x772, 0x7, 0x3c6, 0x2, 0x2, 
       0x772, 0x774, 0x5, 0x6a, 0x36, 0x2, 0x773, 0x771, 0x3, 0x2, 0x2, 
       0x2, 0x774, 0x777, 0x3, 0x2, 0x2, 0x2, 0x775, 0x773, 0x3, 0x2, 0x2, 
       0x2, 0x775, 0x776, 0x3, 0x2, 0x2, 0x2, 0x776, 0x778, 0x3, 0x2, 0x2, 
       0x2, 0x777, 0x775, 0x3, 0x2, 0x2, 0x2, 0x778, 0x77c, 0x7, 0x3c5, 
       0x2, 0x2, 0x779, 0x77b, 0x5, 0x70, 0x39, 0x2, 0x77a, 0x779, 0x3, 
       0x2, 0x2, 0x2, 0x77b, 0x77e, 0x3, 0x2, 0x2, 0x2, 0x77c, 0x77a, 0x3, 
       0x2, 0x2, 0x2, 0x77c, 0x77d, 0x3, 0x2, 0x2, 0x2, 0x77d, 0x787, 0x3, 
       0x2, 0x2, 0x2, 0x77e, 0x77c, 0x3, 0x2, 0x2, 0x2, 0x77f, 0x784, 0x5, 
       0x6e, 0x38, 0x2, 0x780, 0x781, 0x7, 0x3c6, 0x2, 0x2, 0x781, 0x783, 
       0x5, 0x6e, 0x38, 0x2, 0x782, 0x780, 0x3, 0x2, 0x2, 0x2, 0x783, 0x786, 
       0x3, 0x2, 0x2, 0x2, 0x784, 0x782, 0x3, 0x2, 0x2, 0x2, 0x784, 0x785, 
       0x3, 0x2, 0x2, 0x2, 0x785, 0x788, 0x3, 0x2, 0x2, 0x2, 0x786, 0x784, 
       0x3, 0x2, 0x2, 0x2, 0x787, 0x77f, 0x3, 0x2, 0x2, 0x2, 0x787, 0x788, 
       0x3, 0x2, 0x2, 0x2, 0x788, 0x7ba, 0x3, 0x2, 0x2, 0x2, 0x789, 0x78a, 
       0x7, 0x71, 0x2, 0x2, 0x78a, 0x78b, 0x5, 0x20e, 0x108, 0x2, 0x78b, 
       0x78c, 0x7, 0xa5, 0x2, 0x2, 0x78c, 0x78d, 0x7, 0x46, 0x2, 0x2, 0x78d, 
       0x78e, 0x7, 0x3c4, 0x2, 0x2, 0x78e, 0x793, 0x5, 0x6c, 0x37, 0x2, 
       0x78f, 0x790, 0x7, 0x3c6, 0x2, 0x2, 0x790, 0x792, 0x5, 0x6c, 0x37, 
       0x2, 0x791, 0x78f, 0x3, 0x2, 0x2, 0x2, 0x792, 0x795, 0x3, 0x2, 0x2, 
       0x2, 0x793, 0x791, 0x3, 0x2, 0x2, 0x2, 0x793, 0x794, 0x3, 0x2, 0x2, 
       0x2, 0x794, 0x796, 0x3, 0x2, 0x2, 0x2, 0x795, 0x793, 0x3, 0x2, 0x2, 
       0x2, 0x796, 0x79a, 0x7, 0x3c5, 0x2, 0x2, 0x797, 0x799, 0x5, 0x70, 
       0x39, 0x2, 0x798, 0x797, 0x3, 0x2, 0x2, 0x2, 0x799, 0x79c, 0x3, 0x2, 
       0x2, 0x2, 0x79a, 0x798, 0x3, 0x2, 0x2, 0x2, 0x79a, 0x79b, 0x3, 0x2, 
       0x2, 0x2, 0x79b, 0x7a5, 0x3, 0x2, 0x2, 0x2, 0x79c, 0x79a, 0x3, 0x2, 
       0x2, 0x2, 0x79d, 0x7a2, 0x5, 0x6e, 0x38, 0x2, 0x79e, 0x79f, 0x7, 
       0x3c6, 0x2, 0x2, 0x79f, 0x7a1, 0x5, 0x6e, 0x38, 0x2, 0x7a0, 0x79e, 
       0x3, 0x2, 0x2, 0x2, 0x7a1, 0x7a4, 0x3, 0x2, 0x2, 0x2, 0x7a2, 0x7a0, 
       0x3, 0x2, 0x2, 0x2, 0x7a2, 0x7a3, 0x3, 0x2, 0x2, 0x2, 0x7a3, 0x7a6, 
       0x3, 0x2, 0x2, 0x2, 0x7a4, 0x7a2, 0x3, 0x2, 0x2, 0x2, 0x7a5, 0x79d, 
       0x3, 0x2, 0x2, 0x2, 0x7a5, 0x7a6, 0x3, 0x2, 0x2, 0x2, 0x7a6, 0x7ba, 
       0x3, 0x2, 0x2, 0x2, 0x7a7, 0x7a8, 0x7, 0x71, 0x2, 0x2, 0x7a8, 0x7ac, 
       0x5, 0x20e, 0x108, 0x2, 0x7a9, 0x7ab, 0x5, 0x70, 0x39, 0x2, 0x7aa, 
       0x7a9, 0x3, 0x2, 0x2, 0x2, 0x7ab, 0x7ae, 0x3, 0x2, 0x2, 0x2, 0x7ac, 
       0x7aa, 0x3, 0x2, 0x2, 0x2, 0x7ac, 0x7ad, 0x3, 0x2, 0x2, 0x2, 0x7ad, 
       0x7b7, 0x3, 0x2, 0x2, 0x2, 0x7ae, 0x7ac, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7b4, 0x5, 0x6e, 0x38, 0x2, 0x7b0, 0x7b1, 0x7, 0x3c6, 0x2, 0x2, 
       0x7b1, 0x7b3, 0x5, 0x6e, 0x38, 0x2, 0x7b2, 0x7b0, 0x3, 0x2, 0x2, 
       0x2, 0x7b3, 0x7b6, 0x3, 0x2, 0x2, 0x2, 0x7b4, 0x7b2, 0x3, 0x2, 0x2, 
       0x2, 0x7b4, 0x7b5, 0x3, 0x2, 0x2, 0x2, 0x7b5, 0x7b8, 0x3, 0x2, 0x2, 
       0x2, 0x7b6, 0x7b4, 0x3, 0x2, 0x2, 0x2, 0x7b7, 0x7af, 0x3, 0x2, 0x2, 
       0x2, 0x7b7, 0x7b8, 0x3, 0x2, 0x2, 0x2, 0x7b8, 0x7ba, 0x3, 0x2, 0x2, 
       0x2, 0x7b9, 0x736, 0x3, 0x2, 0x2, 0x2, 0x7b9, 0x755, 0x3, 0x2, 0x2, 
       0x2, 0x7b9, 0x76b, 0x3, 0x2, 0x2, 0x2, 0x7b9, 0x789, 0x3, 0x2, 0x2, 
       0x2, 0x7b9, 0x7a7, 0x3, 0x2, 0x2, 0x2, 0x7ba, 0x69, 0x3, 0x2, 0x2, 
       0x2, 0x7bb, 0x7bf, 0x5, 0x21e, 0x110, 0x2, 0x7bc, 0x7bf, 0x5, 0x25a, 
       0x12e, 0x2, 0x7bd, 0x7bf, 0x7, 0x62, 0x2, 0x2, 0x7be, 0x7bb, 0x3, 
       0x2, 0x2, 0x2, 0x7be, 0x7bc, 0x3, 0x2, 0x2, 0x2, 0x7be, 0x7bd, 0x3, 
       0x2, 0x2, 0x2, 0x7bf, 0x6b, 0x3, 0x2, 0x2, 0x2, 0x7c0, 0x7c1, 0x7, 
       0x3c4, 0x2, 0x2, 0x7c1, 0x7c4, 0x5, 0x6a, 0x36, 0x2, 0x7c2, 0x7c3, 
       0x7, 0x3c6, 0x2, 0x2, 0x7c3, 0x7c5, 0x5, 0x6a, 0x36, 0x2, 0x7c4, 
       0x7c2, 0x3, 0x2, 0x2, 0x2, 0x7c5, 0x7c6, 0x3, 0x2, 0x2, 0x2, 0x7c6, 
       0x7c4, 0x3, 0x2, 0x2, 0x2, 0x7c6, 0x7c7, 0x3, 0x2, 0x2, 0x2, 0x7c7, 
       0x7c8, 0x3, 0x2, 0x2, 0x2, 0x7c8, 0x7c9, 0x7, 0x3c5, 0x2, 0x2, 0x7c9, 
       0x6d, 0x3, 0x2, 0x2, 0x2, 0x7ca, 0x7cb, 0x7, 0x20b, 0x2, 0x2, 0x7cb, 
       0x7cf, 0x5, 0x20e, 0x108, 0x2, 0x7cc, 0x7ce, 0x5, 0x70, 0x39, 0x2, 
       0x7cd, 0x7cc, 0x3, 0x2, 0x2, 0x2, 0x7ce, 0x7d1, 0x3, 0x2, 0x2, 0x2, 
       0x7cf, 0x7cd, 0x3, 0x2, 0x2, 0x2, 0x7cf, 0x7d0, 0x3, 0x2, 0x2, 0x2, 
       0x7d0, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x7d1, 0x7cf, 0x3, 0x2, 0x2, 0x2, 
       0x7d2, 0x7d4, 0x7, 0x207, 0x2, 0x2, 0x7d3, 0x7d2, 0x3, 0x2, 0x2, 
       0x2, 0x7d3, 0x7d4, 0x3, 0x2, 0x2, 0x2, 0x7d4, 0x7d5, 0x3, 0x2, 0x2, 
       0x2, 0x7d5, 0x7d7, 0x7, 0x140, 0x2, 0x2, 0x7d6, 0x7d8, 0x7, 0x3bb, 
       0x2, 0x2, 0x7d7, 0x7d6, 0x3, 0x2, 0x2, 0x2, 0x7d7, 0x7d8, 0x3, 0x2, 
       0x2, 0x2, 0x7d8, 0x7d9, 0x3, 0x2, 0x2, 0x2, 0x7d9, 0x800, 0x5, 0x204, 
       0x103, 0x2, 0x7da, 0x7dc, 0x7, 0x11f, 0x2, 0x2, 0x7db, 0x7dd, 0x7, 
       0x3bb, 0x2, 0x2, 0x7dc, 0x7db, 0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7dd, 
       0x3, 0x2, 0x2, 0x2, 0x7dd, 0x7de, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x800, 
       0x7, 0x3d3, 0x2, 0x2, 0x7df, 0x7e0, 0x7, 0x12d, 0x2, 0x2, 0x7e0, 
       0x7e2, 0x7, 0x134, 0x2, 0x2, 0x7e1, 0x7e3, 0x7, 0x3bb, 0x2, 0x2, 
       0x7e2, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7e2, 0x7e3, 0x3, 0x2, 0x2, 0x2, 
       0x7e3, 0x7e4, 0x3, 0x2, 0x2, 0x2, 0x7e4, 0x800, 0x7, 0x3d3, 0x2, 
       0x2, 0x7e5, 0x7e6, 0x7, 0x47, 0x2, 0x2, 0x7e6, 0x7e8, 0x7, 0x134, 
       0x2, 0x2, 0x7e7, 0x7e9, 0x7, 0x3bb, 0x2, 0x2, 0x7e8, 0x7e7, 0x3, 
       0x2, 0x2, 0x2, 0x7e8, 0x7e9, 0x3, 0x2, 0x2, 0x2, 0x7e9, 0x7ea, 0x3, 
       0x2, 0x2, 0x2, 0x7ea, 0x800, 0x7, 0x3d3, 0x2, 0x2, 0x7eb, 0x7ed, 
       0x7, 0x196, 0x2, 0x2, 0x7ec, 0x7ee, 0x7, 0x3bb, 0x2, 0x2, 0x7ed, 
       0x7ec, 0x3, 0x2, 0x2, 0x2, 0x7ed, 0x7ee, 0x3, 0x2, 0x2, 0x2, 0x7ee, 
       0x7ef, 0x3, 0x2, 0x2, 0x2, 0x7ef, 0x800, 0x5, 0x212, 0x10a, 0x2, 
       0x7f0, 0x7f2, 0x7, 0x19e, 0x2, 0x2, 0x7f1, 0x7f3, 0x7, 0x3bb, 0x2, 
       0x2, 0x7f2, 0x7f1, 0x3, 0x2, 0x2, 0x2, 0x7f2, 0x7f3, 0x3, 0x2, 0x2, 
       0x2, 0x7f3, 0x7f4, 0x3, 0x2, 0x2, 0x2, 0x7f4, 0x800, 0x5, 0x212, 
       0x10a, 0x2, 0x7f5, 0x7f7, 0x7, 0x210, 0x2, 0x2, 0x7f6, 0x7f8, 0x7, 
       0x3bb, 0x2, 0x2, 0x7f7, 0x7f6, 0x3, 0x2, 0x2, 0x2, 0x7f7, 0x7f8, 
       0x3, 0x2, 0x2, 0x2, 0x7f8, 0x7f9, 0x3, 0x2, 0x2, 0x2, 0x7f9, 0x800, 
       0x5, 0x20e, 0x108, 0x2, 0x7fa, 0x7fc, 0x7, 0x1a9, 0x2, 0x2, 0x7fb, 
       0x7fd, 0x7, 0x3bb, 0x2, 0x2, 0x7fc, 0x7fb, 0x3, 0x2, 0x2, 0x2, 0x7fc, 
       0x7fd, 0x3, 0x2, 0x2, 0x2, 0x7fd, 0x7fe, 0x3, 0x2, 0x2, 0x2, 0x7fe, 
       0x800, 0x5, 0x20e, 0x108, 0x2, 0x7ff, 0x7d3, 0x3, 0x2, 0x2, 0x2, 
       0x7ff, 0x7da, 0x3, 0x2, 0x2, 0x2, 0x7ff, 0x7df, 0x3, 0x2, 0x2, 0x2, 
       0x7ff, 0x7e5, 0x3, 0x2, 0x2, 0x2, 0x7ff, 0x7eb, 0x3, 0x2, 0x2, 0x2, 
       0x7ff, 0x7f0, 0x3, 0x2, 0x2, 0x2, 0x7ff, 0x7f5, 0x3, 0x2, 0x2, 0x2, 
       0x7ff, 0x7fa, 0x3, 0x2, 0x2, 0x2, 0x800, 0x71, 0x3, 0x2, 0x2, 0x2, 
       0x801, 0x802, 0x7, 0x9, 0x2, 0x2, 0x802, 0x804, 0x9, 0x2, 0x2, 0x2, 
       0x803, 0x805, 0x5, 0x20e, 0x108, 0x2, 0x804, 0x803, 0x3, 0x2, 0x2, 
       0x2, 0x804, 0x805, 0x3, 0x2, 0x2, 0x2, 0x805, 0x807, 0x3, 0x2, 0x2, 
       0x2, 0x806, 0x808, 0x5, 0x32, 0x1a, 0x2, 0x807, 0x806, 0x3, 0x2, 
       0x2, 0x2, 0x808, 0x809, 0x3, 0x2, 0x2, 0x2, 0x809, 0x807, 0x3, 0x2, 
       0x2, 0x2, 0x809, 0x80a, 0x3, 0x2, 0x2, 0x2, 0x80a, 0x814, 0x3, 0x2, 
       0x2, 0x2, 0x80b, 0x80c, 0x7, 0x9, 0x2, 0x2, 0x80c, 0x80d, 0x9, 0x2, 
       0x2, 0x2, 0x80d, 0x80e, 0x5, 0x20e, 0x108, 0x2, 0x80e, 0x80f, 0x7, 
       0x21e, 0x2, 0x2, 0x80f, 0x810, 0x7, 0x12d, 0x2, 0x2, 0x810, 0x811, 
       0x7, 0x134, 0x2, 0x2, 0x811, 0x812, 0x7, 0x1a3, 0x2, 0x2, 0x812, 
       0x814, 0x3, 0x2, 0x2, 0x2, 0x813, 0x801, 0x3, 0x2, 0x2, 0x2, 0x813, 
       0x80b, 0x3, 0x2, 0x2, 0x2, 0x814, 0x73, 0x3, 0x2, 0x2, 0x2, 0x815, 
       0x817, 0x7, 0x9, 0x2, 0x2, 0x816, 0x818, 0x5, 0x34, 0x1b, 0x2, 0x817, 
       0x816, 0x3, 0x2, 0x2, 0x2, 0x817, 0x818, 0x3, 0x2, 0x2, 0x2, 0x818, 
       0x819, 0x3, 0x2, 0x2, 0x2, 0x819, 0x81a, 0x7, 0x146, 0x2, 0x2, 0x81a, 
       0x81e, 0x5, 0x1f4, 0xfb, 0x2, 0x81b, 0x81c, 0x7, 0x68, 0x2, 0x2, 
       0x81c, 0x81d, 0x7, 0x1e9, 0x2, 0x2, 0x81d, 0x81f, 0x5, 0x36, 0x1c, 
       0x2, 0x81e, 0x81b, 0x3, 0x2, 0x2, 0x2, 0x81e, 0x81f, 0x3, 0x2, 0x2, 
       0x2, 0x81f, 0x826, 0x3, 0x2, 0x2, 0x2, 0x820, 0x821, 0x7, 0x68, 0x2, 
       0x2, 0x821, 0x823, 0x7, 0x122, 0x2, 0x2, 0x822, 0x824, 0x7, 0x65, 
       0x2, 0x2, 0x823, 0x822, 0x3, 0x2, 0x2, 0x2, 0x823, 0x824, 0x3, 0x2, 
       0x2, 0x2, 0x824, 0x825, 0x3, 0x2, 0x2, 0x2, 0x825, 0x827, 0x7, 0x1c4, 
       0x2, 0x2, 0x826, 0x820, 0x3, 0x2, 0x2, 0x2, 0x826, 0x827, 0x3, 0x2, 
       0x2, 0x2, 0x827, 0x82b, 0x3, 0x2, 0x2, 0x2, 0x828, 0x829, 0x7, 0x7b, 
       0x2, 0x2, 0x829, 0x82a, 0x7, 0x98, 0x2, 0x2, 0x82a, 0x82c, 0x5, 0x1f4, 
       0xfb, 0x2, 0x82b, 0x828, 0x3, 0x2, 0x2, 0x2, 0x82b, 0x82c, 0x3, 0x2, 
       0x2, 0x2, 0x82c, 0x82e, 0x3, 0x2, 0x2, 0x2, 0x82d, 0x82f, 0x5, 0x3e, 
       0x20, 0x2, 0x82e, 0x82d, 0x3, 0x2, 0x2, 0x2, 0x82e, 0x82f, 0x3, 0x2, 
       0x2, 0x2, 0x82f, 0x832, 0x3, 0x2, 0x2, 0x2, 0x830, 0x831, 0x7, 0x11f, 
       0x2, 0x2, 0x831, 0x833, 0x7, 0x3d3, 0x2, 0x2, 0x832, 0x830, 0x3, 
       0x2, 0x2, 0x2, 0x832, 0x833, 0x3, 0x2, 0x2, 0x2, 0x833, 0x836, 0x3, 
       0x2, 0x2, 0x2, 0x834, 0x835, 0x7, 0x138, 0x2, 0x2, 0x835, 0x837, 
       0x5, 0x166, 0xb4, 0x2, 0x836, 0x834, 0x3, 0x2, 0x2, 0x2, 0x836, 0x837, 
       0x3, 0x2, 0x2, 0x2, 0x837, 0x75, 0x3, 0x2, 0x2, 0x2, 0x838, 0x839, 
       0x7, 0x9, 0x2, 0x2, 0x839, 0x83a, 0x7, 0x15a, 0x2, 0x2, 0x83a, 0x83e, 
       0x5, 0x1f4, 0xfb, 0x2, 0x83b, 0x83d, 0x5, 0x48, 0x25, 0x2, 0x83c, 
       0x83b, 0x3, 0x2, 0x2, 0x2, 0x83d, 0x840, 0x3, 0x2, 0x2, 0x2, 0x83e, 
       0x83c, 0x3, 0x2, 0x2, 0x2, 0x83e, 0x83f, 0x3, 0x2, 0x2, 0x2, 0x83f, 
       0x77, 0x3, 0x2, 0x2, 0x2, 0x840, 0x83e, 0x3, 0x2, 0x2, 0x2, 0x841, 
       0x842, 0x7, 0x9, 0x2, 0x2, 0x842, 0x843, 0x7, 0x16c, 0x2, 0x2, 0x843, 
       0x844, 0x7, 0x1e4, 0x2, 0x2, 0x844, 0x845, 0x7, 0x273, 0x2, 0x2, 
       0x845, 0x846, 0x7, 0x17f, 0x2, 0x2, 0x846, 0x847, 0x7, 0x51, 0x2, 
       0x2, 0x847, 0x79, 0x3, 0x2, 0x2, 0x2, 0x848, 0x849, 0x7, 0x9, 0x2, 
       0x2, 0x849, 0x84a, 0x7, 0x17d, 0x2, 0x2, 0x84a, 0x84b, 0x7, 0x41, 
       0x2, 0x2, 0x84b, 0x84c, 0x5, 0x20e, 0x108, 0x2, 0x84c, 0x84d, 0x7, 
       0x7, 0x2, 0x2, 0x84d, 0x84e, 0x7, 0x219, 0x2, 0x2, 0x84e, 0x854, 
       0x7, 0x3d3, 0x2, 0x2, 0x84f, 0x851, 0x7, 0x168, 0x2, 0x2, 0x850, 
       0x852, 0x7, 0x3bb, 0x2, 0x2, 0x851, 0x850, 0x3, 0x2, 0x2, 0x2, 0x851, 
       0x852, 0x3, 0x2, 0x2, 0x2, 0x852, 0x853, 0x3, 0x2, 0x2, 0x2, 0x853, 
       0x855, 0x5, 0x214, 0x10b, 0x2, 0x854, 0x84f, 0x3, 0x2, 0x2, 0x2, 
       0x854, 0x855, 0x3, 0x2, 0x2, 0x2, 0x855, 0x857, 0x3, 0x2, 0x2, 0x2, 
       0x856, 0x858, 0x7, 0x228, 0x2, 0x2, 0x857, 0x856, 0x3, 0x2, 0x2, 
       0x2, 0x857, 0x858, 0x3, 0x2, 0x2, 0x2, 0x858, 0x859, 0x3, 0x2, 0x2, 
       0x2, 0x859, 0x85b, 0x7, 0x140, 0x2, 0x2, 0x85a, 0x85c, 0x7, 0x3bb, 
       0x2, 0x2, 0x85b, 0x85a, 0x3, 0x2, 0x2, 0x2, 0x85b, 0x85c, 0x3, 0x2, 
       0x2, 0x2, 0x85c, 0x85d, 0x3, 0x2, 0x2, 0x2, 0x85d, 0x85e, 0x5, 0x204, 
       0x103, 0x2, 0x85e, 0x7b, 0x3, 0x2, 0x2, 0x2, 0x85f, 0x860, 0x7, 0x9, 
       0x2, 0x2, 0x860, 0x861, 0x7, 0x73, 0x2, 0x2, 0x861, 0x865, 0x5, 0x1f4, 
       0xfb, 0x2, 0x862, 0x864, 0x5, 0x48, 0x25, 0x2, 0x863, 0x862, 0x3, 
       0x2, 0x2, 0x2, 0x864, 0x867, 0x3, 0x2, 0x2, 0x2, 0x865, 0x863, 0x3, 
       0x2, 0x2, 0x2, 0x865, 0x866, 0x3, 0x2, 0x2, 0x2, 0x866, 0x7d, 0x3, 
       0x2, 0x2, 0x2, 0x867, 0x865, 0x3, 0x2, 0x2, 0x2, 0x868, 0x869, 0x7, 
       0x9, 0x2, 0x2, 0x869, 0x86a, 0x7, 0x1eb, 0x2, 0x2, 0x86a, 0x86b, 
       0x5, 0x20e, 0x108, 0x2, 0x86b, 0x86c, 0x7, 0x1b4, 0x2, 0x2, 0x86c, 
       0x86d, 0x7, 0x3c4, 0x2, 0x2, 0x86d, 0x872, 0x5, 0x4a, 0x26, 0x2, 
       0x86e, 0x86f, 0x7, 0x3c6, 0x2, 0x2, 0x86f, 0x871, 0x5, 0x4a, 0x26, 
       0x2, 0x870, 0x86e, 0x3, 0x2, 0x2, 0x2, 0x871, 0x874, 0x3, 0x2, 0x2, 
       0x2, 0x872, 0x870, 0x3, 0x2, 0x2, 0x2, 0x872, 0x873, 0x3, 0x2, 0x2, 
       0x2, 0x873, 0x875, 0x3, 0x2, 0x2, 0x2, 0x874, 0x872, 0x3, 0x2, 0x2, 
       0x2, 0x875, 0x876, 0x7, 0x3c5, 0x2, 0x2, 0x876, 0x7f, 0x3, 0x2, 0x2, 
       0x2, 0x877, 0x879, 0x7, 0x9, 0x2, 0x2, 0x878, 0x87a, 0x9, 0x3, 0x2, 
       0x2, 0x879, 0x878, 0x3, 0x2, 0x2, 0x2, 0x879, 0x87a, 0x3, 0x2, 0x2, 
       0x2, 0x87a, 0x87c, 0x3, 0x2, 0x2, 0x2, 0x87b, 0x87d, 0x7, 0x45, 0x2, 
       0x2, 0x87c, 0x87b, 0x3, 0x2, 0x2, 0x2, 0x87c, 0x87d, 0x3, 0x2, 0x2, 
       0x2, 0x87d, 0x87e, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x87f, 0x7, 0x95, 0x2, 
       0x2, 0x87f, 0x888, 0x5, 0x1f6, 0xfc, 0x2, 0x880, 0x885, 0x5, 0x86, 
       0x44, 0x2, 0x881, 0x882, 0x7, 0x3c6, 0x2, 0x2, 0x882, 0x884, 0x5, 
       0x86, 0x44, 0x2, 0x883, 0x881, 0x3, 0x2, 0x2, 0x2, 0x884, 0x887, 
       0x3, 0x2, 0x2, 0x2, 0x885, 0x883, 0x3, 0x2, 0x2, 0x2, 0x885, 0x886, 
       0x3, 0x2, 0x2, 0x2, 0x886, 0x889, 0x3, 0x2, 0x2, 0x2, 0x887, 0x885, 
       0x3, 0x2, 0x2, 0x2, 0x888, 0x880, 0x3, 0x2, 0x2, 0x2, 0x888, 0x889, 
       0x3, 0x2, 0x2, 0x2, 0x889, 0x88b, 0x3, 0x2, 0x2, 0x2, 0x88a, 0x88c, 
       0x5, 0x62, 0x32, 0x2, 0x88b, 0x88a, 0x3, 0x2, 0x2, 0x2, 0x88b, 0x88c, 
       0x3, 0x2, 0x2, 0x2, 0x88c, 0x81, 0x3, 0x2, 0x2, 0x2, 0x88d, 0x88e, 
       0x7, 0x9, 0x2, 0x2, 0x88e, 0x88f, 0x7, 0x210, 0x2, 0x2, 0x88f, 0x890, 
       0x5, 0x20e, 0x108, 0x2, 0x890, 0x891, 0x9, 0x1e, 0x2, 0x2, 0x891, 
       0x892, 0x7, 0x12e, 0x2, 0x2, 0x892, 0x896, 0x7, 0x3d3, 0x2, 0x2, 
       0x893, 0x894, 0x7, 0x168, 0x2, 0x2, 0x894, 0x895, 0x7, 0x3bb, 0x2, 
       0x2, 0x895, 0x897, 0x5, 0x214, 0x10b, 0x2, 0x896, 0x893, 0x3, 0x2, 
       0x2, 0x2, 0x896, 0x897, 0x3, 0x2, 0x2, 0x2, 0x897, 0x899, 0x3, 0x2, 
       0x2, 0x2, 0x898, 0x89a, 0x7, 0x228, 0x2, 0x2, 0x899, 0x898, 0x3, 
       0x2, 0x2, 0x2, 0x899, 0x89a, 0x3, 0x2, 0x2, 0x2, 0x89a, 0x89b, 0x3, 
       0x2, 0x2, 0x2, 0x89b, 0x89d, 0x7, 0x140, 0x2, 0x2, 0x89c, 0x89e, 
       0x7, 0x3bb, 0x2, 0x2, 0x89d, 0x89c, 0x3, 0x2, 0x2, 0x2, 0x89d, 0x89e, 
       0x3, 0x2, 0x2, 0x2, 0x89e, 0x89f, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x8a0, 
       0x5, 0x204, 0x103, 0x2, 0x8a0, 0x83, 0x3, 0x2, 0x2, 0x2, 0x8a1, 0x8a5, 
       0x7, 0x9, 0x2, 0x2, 0x8a2, 0x8a3, 0x7, 0x102, 0x2, 0x2, 0x8a3, 0x8a4, 
       0x7, 0x3bb, 0x2, 0x2, 0x8a4, 0x8a6, 0x9, 0xc, 0x2, 0x2, 0x8a5, 0x8a2, 
       0x3, 0x2, 0x2, 0x2, 0x8a5, 0x8a6, 0x3, 0x2, 0x2, 0x2, 0x8a6, 0x8a8, 
       0x3, 0x2, 0x2, 0x2, 0x8a7, 0x8a9, 0x5, 0x34, 0x1b, 0x2, 0x8a8, 0x8a7, 
       0x3, 0x2, 0x2, 0x2, 0x8a8, 0x8a9, 0x3, 0x2, 0x2, 0x2, 0x8a9, 0x8ad, 
       0x3, 0x2, 0x2, 0x2, 0x8aa, 0x8ab, 0x7, 0x8b, 0x2, 0x2, 0x8ab, 0x8ac, 
       0x7, 0x1ea, 0x2, 0x2, 0x8ac, 0x8ae, 0x9, 0xd, 0x2, 0x2, 0x8ad, 0x8aa, 
       0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ae, 0x3, 0x2, 0x2, 0x2, 0x8ae, 0x8af, 
       0x3, 0x2, 0x2, 0x2, 0x8af, 0x8b0, 0x7, 0x225, 0x2, 0x2, 0x8b0, 0x8b5, 
       0x5, 0x1f4, 0xfb, 0x2, 0x8b1, 0x8b2, 0x7, 0x3c4, 0x2, 0x2, 0x8b2, 
       0x8b3, 0x5, 0x22c, 0x117, 0x2, 0x8b3, 0x8b4, 0x7, 0x3c5, 0x2, 0x2, 
       0x8b4, 0x8b6, 0x3, 0x2, 0x2, 0x2, 0x8b5, 0x8b1, 0x3, 0x2, 0x2, 0x2, 
       0x8b5, 0x8b6, 0x3, 0x2, 0x2, 0x2, 0x8b6, 0x8b7, 0x3, 0x2, 0x2, 0x2, 
       0x8b7, 0x8b8, 0x7, 0xd, 0x2, 0x2, 0x8b8, 0x8bf, 0x5, 0xb4, 0x5b, 
       0x2, 0x8b9, 0x8bb, 0x7, 0xa9, 0x2, 0x2, 0x8ba, 0x8bc, 0x9, 0xe, 0x2, 
       0x2, 0x8bb, 0x8ba, 0x3, 0x2, 0x2, 0x2, 0x8bb, 0x8bc, 0x3, 0x2, 0x2, 
       0x2, 0x8bc, 0x8bd, 0x3, 0x2, 0x2, 0x2, 0x8bd, 0x8be, 0x7, 0x19, 0x2, 
       0x2, 0x8be, 0x8c0, 0x7, 0x6a, 0x2, 0x2, 0x8bf, 0x8b9, 0x3, 0x2, 0x2, 
       0x2, 0x8bf, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8c0, 0x85, 0x3, 0x2, 0x2, 
       0x2, 0x8c1, 0x8c8, 0x5, 0x5e, 0x30, 0x2, 0x8c2, 0x8c4, 0x7, 0x3c6, 
       0x2, 0x2, 0x8c3, 0x8c2, 0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8c4, 0x3, 0x2, 
       0x2, 0x2, 0x8c4, 0x8c5, 0x3, 0x2, 0x2, 0x2, 0x8c5, 0x8c7, 0x5, 0x5e, 
       0x30, 0x2, 0x8c6, 0x8c3, 0x3, 0x2, 0x2, 0x2, 0x8c7, 0x8ca, 0x3, 0x2, 
       0x2, 0x2, 0x8c8, 0x8c6, 0x3, 0x2, 0x2, 0x2, 0x8c8, 0x8c9, 0x3, 0x2, 
       0x2, 0x2, 0x8c9, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x8ca, 0x8c8, 0x3, 0x2, 
       0x2, 0x2, 0x8cb, 0x8cd, 0x7, 0x7, 0x2, 0x2, 0x8cc, 0x8ce, 0x7, 0x1b, 
       0x2, 0x2, 0x8cd, 0x8cc, 0x3, 0x2, 0x2, 0x2, 0x8cd, 0x8ce, 0x3, 0x2, 
       0x2, 0x2, 0x8ce, 0x8cf, 0x3, 0x2, 0x2, 0x2, 0x8cf, 0x8d0, 0x5, 0x20e, 
       0x108, 0x2, 0x8d0, 0x8d4, 0x5, 0x50, 0x29, 0x2, 0x8d1, 0x8d5, 0x7, 
       0x154, 0x2, 0x2, 0x8d2, 0x8d3, 0x7, 0x100, 0x2, 0x2, 0x8d3, 0x8d5, 
       0x5, 0x20e, 0x108, 0x2, 0x8d4, 0x8d1, 0x3, 0x2, 0x2, 0x2, 0x8d4, 
       0x8d2, 0x3, 0x2, 0x2, 0x2, 0x8d4, 0x8d5, 0x3, 0x2, 0x2, 0x2, 0x8d5, 
       0xa25, 0x3, 0x2, 0x2, 0x2, 0x8d6, 0x8d8, 0x7, 0x7, 0x2, 0x2, 0x8d7, 
       0x8d9, 0x7, 0x1b, 0x2, 0x2, 0x8d8, 0x8d7, 0x3, 0x2, 0x2, 0x2, 0x8d8, 
       0x8d9, 0x3, 0x2, 0x2, 0x2, 0x8d9, 0x8da, 0x3, 0x2, 0x2, 0x2, 0x8da, 
       0x8db, 0x7, 0x3c4, 0x2, 0x2, 0x8db, 0x8dc, 0x5, 0x20e, 0x108, 0x2, 
       0x8dc, 0x8e3, 0x5, 0x50, 0x29, 0x2, 0x8dd, 0x8de, 0x7, 0x3c6, 0x2, 
       0x2, 0x8de, 0x8df, 0x5, 0x20e, 0x108, 0x2, 0x8df, 0x8e0, 0x5, 0x50, 
       0x29, 0x2, 0x8e0, 0x8e2, 0x3, 0x2, 0x2, 0x2, 0x8e1, 0x8dd, 0x3, 0x2, 
       0x2, 0x2, 0x8e2, 0x8e5, 0x3, 0x2, 0x2, 0x2, 0x8e3, 0x8e1, 0x3, 0x2, 
       0x2, 0x2, 0x8e3, 0x8e4, 0x3, 0x2, 0x2, 0x2, 0x8e4, 0x8e6, 0x3, 0x2, 
       0x2, 0x2, 0x8e5, 0x8e3, 0x3, 0x2, 0x2, 0x2, 0x8e6, 0x8e7, 0x7, 0x3c5, 
       0x2, 0x2, 0x8e7, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x8e8, 0x8e9, 0x7, 0x7, 
       0x2, 0x2, 0x8e9, 0x8eb, 0x9, 0x14, 0x2, 0x2, 0x8ea, 0x8ec, 0x5, 0x20e, 
       0x108, 0x2, 0x8eb, 0x8ea, 0x3, 0x2, 0x2, 0x2, 0x8eb, 0x8ec, 0x3, 
       0x2, 0x2, 0x2, 0x8ec, 0x8ee, 0x3, 0x2, 0x2, 0x2, 0x8ed, 0x8ef, 0x5, 
       0x40, 0x21, 0x2, 0x8ee, 0x8ed, 0x3, 0x2, 0x2, 0x2, 0x8ee, 0x8ef, 
       0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8f0, 0x3, 0x2, 0x2, 0x2, 0x8f0, 0x8f4, 
       0x5, 0x230, 0x119, 0x2, 0x8f1, 0x8f3, 0x5, 0x42, 0x22, 0x2, 0x8f2, 
       0x8f1, 0x3, 0x2, 0x2, 0x2, 0x8f3, 0x8f6, 0x3, 0x2, 0x2, 0x2, 0x8f4, 
       0x8f2, 0x3, 0x2, 0x2, 0x2, 0x8f4, 0x8f5, 0x3, 0x2, 0x2, 0x2, 0x8f5, 
       0xa25, 0x3, 0x2, 0x2, 0x2, 0x8f6, 0x8f4, 0x3, 0x2, 0x2, 0x2, 0x8f7, 
       0x8fc, 0x7, 0x7, 0x2, 0x2, 0x8f8, 0x8fa, 0x7, 0x1d, 0x2, 0x2, 0x8f9, 
       0x8fb, 0x5, 0x20e, 0x108, 0x2, 0x8fa, 0x8f9, 0x3, 0x2, 0x2, 0x2, 
       0x8fa, 0x8fb, 0x3, 0x2, 0x2, 0x2, 0x8fb, 0x8fd, 0x3, 0x2, 0x2, 0x2, 
       0x8fc, 0x8f8, 0x3, 0x2, 0x2, 0x2, 0x8fc, 0x8fd, 0x3, 0x2, 0x2, 0x2, 
       0x8fd, 0x8fe, 0x3, 0x2, 0x2, 0x2, 0x8fe, 0x8ff, 0x7, 0x72, 0x2, 0x2, 
       0x8ff, 0x901, 0x7, 0x51, 0x2, 0x2, 0x900, 0x902, 0x5, 0x40, 0x21, 
       0x2, 0x901, 0x900, 0x3, 0x2, 0x2, 0x2, 0x901, 0x902, 0x3, 0x2, 0x2, 
       0x2, 0x902, 0x903, 0x3, 0x2, 0x2, 0x2, 0x903, 0x907, 0x5, 0x230, 
       0x119, 0x2, 0x904, 0x906, 0x5, 0x42, 0x22, 0x2, 0x905, 0x904, 0x3, 
       0x2, 0x2, 0x2, 0x906, 0x909, 0x3, 0x2, 0x2, 0x2, 0x907, 0x905, 0x3, 
       0x2, 0x2, 0x2, 0x907, 0x908, 0x3, 0x2, 0x2, 0x2, 0x908, 0xa25, 0x3, 
       0x2, 0x2, 0x2, 0x909, 0x907, 0x3, 0x2, 0x2, 0x2, 0x90a, 0x90f, 0x7, 
       0x7, 0x2, 0x2, 0x90b, 0x90d, 0x7, 0x1d, 0x2, 0x2, 0x90c, 0x90e, 0x5, 
       0x20e, 0x108, 0x2, 0x90d, 0x90c, 0x3, 0x2, 0x2, 0x2, 0x90d, 0x90e, 
       0x3, 0x2, 0x2, 0x2, 0x90e, 0x910, 0x3, 0x2, 0x2, 0x2, 0x90f, 0x90b, 
       0x3, 0x2, 0x2, 0x2, 0x90f, 0x910, 0x3, 0x2, 0x2, 0x2, 0x910, 0x911, 
       0x3, 0x2, 0x2, 0x2, 0x911, 0x913, 0x7, 0x9e, 0x2, 0x2, 0x912, 0x914, 
       0x9, 0x14, 0x2, 0x2, 0x913, 0x912, 0x3, 0x2, 0x2, 0x2, 0x913, 0x914, 
       0x3, 0x2, 0x2, 0x2, 0x914, 0x916, 0x3, 0x2, 0x2, 0x2, 0x915, 0x917, 
       0x5, 0x20e, 0x108, 0x2, 0x916, 0x915, 0x3, 0x2, 0x2, 0x2, 0x916, 
       0x917, 0x3, 0x2, 0x2, 0x2, 0x917, 0x919, 0x3, 0x2, 0x2, 0x2, 0x918, 
       0x91a, 0x5, 0x40, 0x21, 0x2, 0x919, 0x918, 0x3, 0x2, 0x2, 0x2, 0x919, 
       0x91a, 0x3, 0x2, 0x2, 0x2, 0x91a, 0x91b, 0x3, 0x2, 0x2, 0x2, 0x91b, 
       0x91f, 0x5, 0x230, 0x119, 0x2, 0x91c, 0x91e, 0x5, 0x42, 0x22, 0x2, 
       0x91d, 0x91c, 0x3, 0x2, 0x2, 0x2, 0x91e, 0x921, 0x3, 0x2, 0x2, 0x2, 
       0x91f, 0x91d, 0x3, 0x2, 0x2, 0x2, 0x91f, 0x920, 0x3, 0x2, 0x2, 0x2, 
       0x920, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x921, 0x91f, 0x3, 0x2, 0x2, 0x2, 
       0x922, 0x923, 0x7, 0x7, 0x2, 0x2, 0x923, 0x925, 0x9, 0x16, 0x2, 0x2, 
       0x924, 0x926, 0x9, 0x14, 0x2, 0x2, 0x925, 0x924, 0x3, 0x2, 0x2, 0x2, 
       0x925, 0x926, 0x3, 0x2, 0x2, 0x2, 0x926, 0x928, 0x3, 0x2, 0x2, 0x2, 
       0x927, 0x929, 0x5, 0x20e, 0x108, 0x2, 0x928, 0x927, 0x3, 0x2, 0x2, 
       0x2, 0x928, 0x929, 0x3, 0x2, 0x2, 0x2, 0x929, 0x92a, 0x3, 0x2, 0x2, 
       0x2, 0x92a, 0x92e, 0x5, 0x230, 0x119, 0x2, 0x92b, 0x92d, 0x5, 0x42, 
       0x22, 0x2, 0x92c, 0x92b, 0x3, 0x2, 0x2, 0x2, 0x92d, 0x930, 0x3, 0x2, 
       0x2, 0x2, 0x92e, 0x92c, 0x3, 0x2, 0x2, 0x2, 0x92e, 0x92f, 0x3, 0x2, 
       0x2, 0x2, 0x92f, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x930, 0x92e, 0x3, 0x2, 
       0x2, 0x2, 0x931, 0x936, 0x7, 0x7, 0x2, 0x2, 0x932, 0x934, 0x7, 0x1d, 
       0x2, 0x2, 0x933, 0x935, 0x5, 0x20e, 0x108, 0x2, 0x934, 0x933, 0x3, 
       0x2, 0x2, 0x2, 0x934, 0x935, 0x3, 0x2, 0x2, 0x2, 0x935, 0x937, 0x3, 
       0x2, 0x2, 0x2, 0x936, 0x932, 0x3, 0x2, 0x2, 0x2, 0x936, 0x937, 0x3, 
       0x2, 0x2, 0x2, 0x937, 0x938, 0x3, 0x2, 0x2, 0x2, 0x938, 0x939, 0x7, 
       0x3c, 0x2, 0x2, 0x939, 0x93b, 0x7, 0x51, 0x2, 0x2, 0x93a, 0x93c, 
       0x5, 0x20e, 0x108, 0x2, 0x93b, 0x93a, 0x3, 0x2, 0x2, 0x2, 0x93b, 
       0x93c, 0x3, 0x2, 0x2, 0x2, 0x93c, 0x93d, 0x3, 0x2, 0x2, 0x2, 0x93d, 
       0x93e, 0x5, 0x230, 0x119, 0x2, 0x93e, 0x93f, 0x5, 0x56, 0x2c, 0x2, 
       0x93f, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x940, 0x945, 0x7, 0x7, 0x2, 0x2, 
       0x941, 0x943, 0x7, 0x1d, 0x2, 0x2, 0x942, 0x944, 0x5, 0x20e, 0x108, 
       0x2, 0x943, 0x942, 0x3, 0x2, 0x2, 0x2, 0x943, 0x944, 0x3, 0x2, 0x2, 
       0x2, 0x944, 0x946, 0x3, 0x2, 0x2, 0x2, 0x945, 0x941, 0x3, 0x2, 0x2, 
       0x2, 0x945, 0x946, 0x3, 0x2, 0x2, 0x2, 0x946, 0x947, 0x3, 0x2, 0x2, 
       0x2, 0x947, 0x948, 0x7, 0x19, 0x2, 0x2, 0x948, 0x949, 0x7, 0x3c4, 
       0x2, 0x2, 0x949, 0x94a, 0x5, 0x25a, 0x12e, 0x2, 0x94a, 0x94b, 0x7, 
       0x3c5, 0x2, 0x2, 0x94b, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x94c, 0x94e, 
       0x7, 0x102, 0x2, 0x2, 0x94d, 0x94f, 0x7, 0x3bb, 0x2, 0x2, 0x94e, 
       0x94d, 0x3, 0x2, 0x2, 0x2, 0x94e, 0x94f, 0x3, 0x2, 0x2, 0x2, 0x94f, 
       0x950, 0x3, 0x2, 0x2, 0x2, 0x950, 0xa25, 0x9, 0x5, 0x2, 0x2, 0x951, 
       0x953, 0x7, 0x9, 0x2, 0x2, 0x952, 0x954, 0x7, 0x1b, 0x2, 0x2, 0x953, 
       0x952, 0x3, 0x2, 0x2, 0x2, 0x953, 0x954, 0x3, 0x2, 0x2, 0x2, 0x954, 
       0x955, 0x3, 0x2, 0x2, 0x2, 0x955, 0x95b, 0x5, 0x20e, 0x108, 0x2, 
       0x956, 0x957, 0x7, 0x87, 0x2, 0x2, 0x957, 0x958, 0x7, 0x27, 0x2, 
       0x2, 0x958, 0x95c, 0x5, 0x23c, 0x11f, 0x2, 0x959, 0x95a, 0x7, 0x2f, 
       0x2, 0x2, 0x95a, 0x95c, 0x7, 0x27, 0x2, 0x2, 0x95b, 0x956, 0x3, 0x2, 
       0x2, 0x2, 0x95b, 0x959, 0x3, 0x2, 0x2, 0x2, 0x95c, 0xa25, 0x3, 0x2, 
       0x2, 0x2, 0x95d, 0x95f, 0x7, 0x17, 0x2, 0x2, 0x95e, 0x960, 0x7, 0x1b, 
       0x2, 0x2, 0x95f, 0x95e, 0x3, 0x2, 0x2, 0x2, 0x95f, 0x960, 0x3, 0x2, 
       0x2, 0x2, 0x960, 0x961, 0x3, 0x2, 0x2, 0x2, 0x961, 0x962, 0x5, 0x20e, 
       0x108, 0x2, 0x962, 0x963, 0x5, 0x20e, 0x108, 0x2, 0x963, 0x967, 0x5, 
       0x50, 0x29, 0x2, 0x964, 0x968, 0x7, 0x154, 0x2, 0x2, 0x965, 0x966, 
       0x7, 0x100, 0x2, 0x2, 0x966, 0x968, 0x5, 0x20e, 0x108, 0x2, 0x967, 
       0x964, 0x3, 0x2, 0x2, 0x2, 0x967, 0x965, 0x3, 0x2, 0x2, 0x2, 0x967, 
       0x968, 0x3, 0x2, 0x2, 0x2, 0x968, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x969, 
       0x96a, 0x7, 0x7b, 0x2, 0x2, 0x96a, 0x96b, 0x7, 0x1b, 0x2, 0x2, 0x96b, 
       0x96c, 0x5, 0x20e, 0x108, 0x2, 0x96c, 0x96d, 0x7, 0x98, 0x2, 0x2, 
       0x96d, 0x96e, 0x5, 0x20e, 0x108, 0x2, 0x96e, 0xa25, 0x3, 0x2, 0x2, 
       0x2, 0x96f, 0x971, 0x7, 0x5c, 0x2, 0x2, 0x970, 0x972, 0x7, 0x3bb, 
       0x2, 0x2, 0x971, 0x970, 0x3, 0x2, 0x2, 0x2, 0x971, 0x972, 0x3, 0x2, 
       0x2, 0x2, 0x972, 0x973, 0x3, 0x2, 0x2, 0x2, 0x973, 0xa25, 0x9, 0x6, 
       0x2, 0x2, 0x974, 0x976, 0x7, 0x1a0, 0x2, 0x2, 0x975, 0x977, 0x7, 
       0x1b, 0x2, 0x2, 0x976, 0x975, 0x3, 0x2, 0x2, 0x2, 0x976, 0x977, 0x3, 
       0x2, 0x2, 0x2, 0x977, 0x978, 0x3, 0x2, 0x2, 0x2, 0x978, 0x979, 0x5, 
       0x20e, 0x108, 0x2, 0x979, 0x97d, 0x5, 0x50, 0x29, 0x2, 0x97a, 0x97e, 
       0x7, 0x154, 0x2, 0x2, 0x97b, 0x97c, 0x7, 0x100, 0x2, 0x2, 0x97c, 
       0x97e, 0x5, 0x20e, 0x108, 0x2, 0x97d, 0x97a, 0x3, 0x2, 0x2, 0x2, 
       0x97d, 0x97b, 0x3, 0x2, 0x2, 0x2, 0x97d, 0x97e, 0x3, 0x2, 0x2, 0x2, 
       0x97e, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x97f, 0x981, 0x7, 0x2f, 0x2, 0x2, 
       0x980, 0x982, 0x7, 0x1b, 0x2, 0x2, 0x981, 0x980, 0x3, 0x2, 0x2, 0x2, 
       0x981, 0x982, 0x3, 0x2, 0x2, 0x2, 0x982, 0x983, 0x3, 0x2, 0x2, 0x2, 
       0x983, 0x985, 0x5, 0x20e, 0x108, 0x2, 0x984, 0x986, 0x7, 0x7f, 0x2, 
       0x2, 0x985, 0x984, 0x3, 0x2, 0x2, 0x2, 0x985, 0x986, 0x3, 0x2, 0x2, 
       0x2, 0x986, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x987, 0x988, 0x7, 0x2f, 0x2, 
       0x2, 0x988, 0x989, 0x7, 0x72, 0x2, 0x2, 0x989, 0xa25, 0x7, 0x51, 
       0x2, 0x2, 0x98a, 0x98b, 0x7, 0x7b, 0x2, 0x2, 0x98b, 0x98c, 0x9, 0x14, 
       0x2, 0x2, 0x98c, 0x98d, 0x5, 0x20e, 0x108, 0x2, 0x98d, 0x98e, 0x7, 
       0x98, 0x2, 0x2, 0x98e, 0x98f, 0x5, 0x20e, 0x108, 0x2, 0x98f, 0xa25, 
       0x3, 0x2, 0x2, 0x2, 0x990, 0x991, 0x7, 0x2f, 0x2, 0x2, 0x991, 0x992, 
       0x9, 0x14, 0x2, 0x2, 0x992, 0xa25, 0x5, 0x20e, 0x108, 0x2, 0x993, 
       0x994, 0x7, 0x2f, 0x2, 0x2, 0x994, 0x995, 0x7, 0x3c, 0x2, 0x2, 0x995, 
       0x996, 0x7, 0x51, 0x2, 0x2, 0x996, 0xa25, 0x5, 0x20e, 0x108, 0x2, 
       0x997, 0x998, 0x7, 0x135, 0x2, 0x2, 0x998, 0xa25, 0x7, 0x52, 0x2, 
       0x2, 0x999, 0x99a, 0x7, 0x13c, 0x2, 0x2, 0x99a, 0xa25, 0x7, 0x52, 
       0x2, 0x2, 0x99b, 0x99d, 0x7, 0x7b, 0x2, 0x2, 0x99c, 0x99e, 0x9, 0x1f, 
       0x2, 0x2, 0x99d, 0x99c, 0x3, 0x2, 0x2, 0x2, 0x99d, 0x99e, 0x3, 0x2, 
       0x2, 0x2, 0x99e, 0x9a1, 0x3, 0x2, 0x2, 0x2, 0x99f, 0x9a2, 0x5, 0x20e, 
       0x108, 0x2, 0x9a0, 0x9a2, 0x5, 0x1f4, 0xfb, 0x2, 0x9a1, 0x99f, 0x3, 
       0x2, 0x2, 0x2, 0x9a1, 0x9a0, 0x3, 0x2, 0x2, 0x2, 0x9a2, 0xa25, 0x3, 
       0x2, 0x2, 0x2, 0x9a3, 0x9a4, 0x7, 0x6d, 0x2, 0x2, 0x9a4, 0x9a5, 0x7, 
       0x12, 0x2, 0x2, 0x9a5, 0xa25, 0x5, 0x22c, 0x117, 0x2, 0x9a6, 0x9a7, 
       0x7, 0x1f, 0x2, 0x2, 0x9a7, 0x9a8, 0x7, 0x98, 0x2, 0x2, 0x9a8, 0x9a9, 
       0x7, 0x18, 0x2, 0x2, 0x9a9, 0x9aa, 0x7, 0x87, 0x2, 0x2, 0x9aa, 0x9ad, 
       0x5, 0x200, 0x101, 0x2, 0x9ab, 0x9ac, 0x7, 0x1a, 0x2, 0x2, 0x9ac, 
       0x9ae, 0x5, 0x202, 0x102, 0x2, 0x9ad, 0x9ab, 0x3, 0x2, 0x2, 0x2, 
       0x9ad, 0x9ae, 0x3, 0x2, 0x2, 0x2, 0x9ae, 0xa25, 0x3, 0x2, 0x2, 0x2, 
       0x9af, 0x9b1, 0x7, 0x27, 0x2, 0x2, 0x9b0, 0x9af, 0x3, 0x2, 0x2, 0x2, 
       0x9b0, 0x9b1, 0x3, 0x2, 0x2, 0x2, 0x9b1, 0x9b2, 0x3, 0x2, 0x2, 0x2, 
       0x9b2, 0x9b3, 0x7, 0x18, 0x2, 0x2, 0x9b3, 0x9b4, 0x7, 0x87, 0x2, 
       0x2, 0x9b4, 0x9b5, 0x7, 0x3bb, 0x2, 0x2, 0x9b5, 0x9b9, 0x5, 0x200, 
       0x101, 0x2, 0x9b6, 0x9b7, 0x7, 0x1a, 0x2, 0x2, 0x9b7, 0x9b8, 0x7, 
       0x3bb, 0x2, 0x2, 0x9b8, 0x9ba, 0x5, 0x202, 0x102, 0x2, 0x9b9, 0x9b6, 
       0x3, 0x2, 0x2, 0x2, 0x9b9, 0x9ba, 0x3, 0x2, 0x2, 0x2, 0x9ba, 0xa25, 
       0x3, 0x2, 0x2, 0x2, 0x9bb, 0x9bc, 0x7, 0x136, 0x2, 0x2, 0x9bc, 0xa25, 
       0x7, 0x210, 0x2, 0x2, 0x9bd, 0x9be, 0x7, 0x166, 0x2, 0x2, 0x9be, 
       0xa25, 0x7, 0x210, 0x2, 0x2, 0x9bf, 0xa25, 0x7, 0x3b, 0x2, 0x2, 0x9c0, 
       0x9c1, 0x9, 0x20, 0x2, 0x2, 0x9c1, 0xa25, 0x7, 0x222, 0x2, 0x2, 0x9c2, 
       0x9c3, 0x7, 0x7, 0x2, 0x2, 0x9c3, 0x9c4, 0x7, 0x71, 0x2, 0x2, 0x9c4, 
       0x9c5, 0x7, 0x3c4, 0x2, 0x2, 0x9c5, 0x9ca, 0x5, 0x68, 0x35, 0x2, 
       0x9c6, 0x9c7, 0x7, 0x3c6, 0x2, 0x2, 0x9c7, 0x9c9, 0x5, 0x68, 0x35, 
       0x2, 0x9c8, 0x9c6, 0x3, 0x2, 0x2, 0x2, 0x9c9, 0x9cc, 0x3, 0x2, 0x2, 
       0x2, 0x9ca, 0x9c8, 0x3, 0x2, 0x2, 0x2, 0x9ca, 0x9cb, 0x3, 0x2, 0x2, 
       0x2, 0x9cb, 0x9cd, 0x3, 0x2, 0x2, 0x2, 0x9cc, 0x9ca, 0x3, 0x2, 0x2, 
       0x2, 0x9cd, 0x9ce, 0x7, 0x3c5, 0x2, 0x2, 0x9ce, 0xa25, 0x3, 0x2, 
       0x2, 0x2, 0x9cf, 0x9d0, 0x7, 0x2f, 0x2, 0x2, 0x9d0, 0x9d1, 0x7, 0x71, 
       0x2, 0x2, 0x9d1, 0xa25, 0x5, 0x22c, 0x117, 0x2, 0x9d2, 0x9d3, 0x7, 
       0x136, 0x2, 0x2, 0x9d3, 0x9d6, 0x7, 0x71, 0x2, 0x2, 0x9d4, 0x9d7, 
       0x5, 0x22c, 0x117, 0x2, 0x9d5, 0x9d7, 0x7, 0x8, 0x2, 0x2, 0x9d6, 
       0x9d4, 0x3, 0x2, 0x2, 0x2, 0x9d6, 0x9d5, 0x3, 0x2, 0x2, 0x2, 0x9d7, 
       0x9d8, 0x3, 0x2, 0x2, 0x2, 0x9d8, 0xa25, 0x7, 0x210, 0x2, 0x2, 0x9d9, 
       0x9da, 0x7, 0x166, 0x2, 0x2, 0x9da, 0x9dd, 0x7, 0x71, 0x2, 0x2, 0x9db, 
       0x9de, 0x5, 0x22c, 0x117, 0x2, 0x9dc, 0x9de, 0x7, 0x8, 0x2, 0x2, 
       0x9dd, 0x9db, 0x3, 0x2, 0x2, 0x2, 0x9dd, 0x9dc, 0x3, 0x2, 0x2, 0x2, 
       0x9de, 0x9df, 0x3, 0x2, 0x2, 0x2, 0x9df, 0xa25, 0x7, 0x210, 0x2, 
       0x2, 0x9e0, 0x9e1, 0x7, 0x217, 0x2, 0x2, 0x9e1, 0x9e4, 0x7, 0x71, 
       0x2, 0x2, 0x9e2, 0x9e5, 0x5, 0x22c, 0x117, 0x2, 0x9e3, 0x9e5, 0x7, 
       0x8, 0x2, 0x2, 0x9e4, 0x9e2, 0x3, 0x2, 0x2, 0x2, 0x9e4, 0x9e3, 0x3, 
       0x2, 0x2, 0x2, 0x9e5, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x9e6, 0x9e7, 0x7, 
       0x11b, 0x2, 0x2, 0x9e7, 0x9e8, 0x7, 0x71, 0x2, 0x2, 0x9e8, 0xa25, 
       0x5, 0x212, 0x10a, 0x2, 0x9e9, 0x9ea, 0x7, 0x1d5, 0x2, 0x2, 0x9ea, 
       0x9eb, 0x7, 0x71, 0x2, 0x2, 0x9eb, 0x9ec, 0x5, 0x22c, 0x117, 0x2, 
       0x9ec, 0x9ed, 0x7, 0x4d, 0x2, 0x2, 0x9ed, 0x9ee, 0x7, 0x3c4, 0x2, 
       0x2, 0x9ee, 0x9f3, 0x5, 0x68, 0x35, 0x2, 0x9ef, 0x9f0, 0x7, 0x3c6, 
       0x2, 0x2, 0x9f0, 0x9f2, 0x5, 0x68, 0x35, 0x2, 0x9f1, 0x9ef, 0x3, 
       0x2, 0x2, 0x2, 0x9f2, 0x9f5, 0x3, 0x2, 0x2, 0x2, 0x9f3, 0x9f1, 0x3, 
       0x2, 0x2, 0x2, 0x9f3, 0x9f4, 0x3, 0x2, 0x2, 0x2, 0x9f4, 0x9f6, 0x3, 
       0x2, 0x2, 0x2, 0x9f5, 0x9f3, 0x3, 0x2, 0x2, 0x2, 0x9f6, 0x9f7, 0x7, 
       0x3c5, 0x2, 0x2, 0x9f7, 0xa25, 0x3, 0x2, 0x2, 0x2, 0x9f8, 0x9f9, 
       0x7, 0x149, 0x2, 0x2, 0x9f9, 0x9fa, 0x7, 0x71, 0x2, 0x2, 0x9fa, 0x9fb, 
       0x5, 0x20e, 0x108, 0x2, 0x9fb, 0x9fc, 0x7, 0xa9, 0x2, 0x2, 0x9fc, 
       0x9fd, 0x7, 0x95, 0x2, 0x2, 0x9fd, 0xa00, 0x5, 0x1f6, 0xfc, 0x2, 
       0x9fe, 0x9ff, 0x9, 0x20, 0x2, 0x2, 0x9ff, 0xa01, 0x7, 0x222, 0x2, 
       0x2, 0xa00, 0x9fe, 0x3, 0x2, 0x2, 0x2, 0xa00, 0xa01, 0x3, 0x2, 0x2, 
       0x2, 0xa01, 0xa25, 0x3, 0x2, 0x2, 0x2, 0xa02, 0xa03, 0x7, 0xb, 0x2, 
       0x2, 0xa03, 0xa06, 0x7, 0x71, 0x2, 0x2, 0xa04, 0xa07, 0x5, 0x22c, 
       0x117, 0x2, 0xa05, 0xa07, 0x7, 0x8, 0x2, 0x2, 0xa06, 0xa04, 0x3, 
       0x2, 0x2, 0x2, 0xa06, 0xa05, 0x3, 0x2, 0x2, 0x2, 0xa07, 0xa25, 0x3, 
       0x2, 0x2, 0x2, 0xa08, 0xa09, 0x7, 0x19, 0x2, 0x2, 0xa09, 0xa0c, 0x7, 
       0x71, 0x2, 0x2, 0xa0a, 0xa0d, 0x5, 0x22c, 0x117, 0x2, 0xa0b, 0xa0d, 
       0x7, 0x8, 0x2, 0x2, 0xa0c, 0xa0a, 0x3, 0x2, 0x2, 0x2, 0xa0c, 0xa0b, 
       0x3, 0x2, 0x2, 0x2, 0xa0d, 0xa25, 0x3, 0x2, 0x2, 0x2, 0xa0e, 0xa0f, 
       0x7, 0x69, 0x2, 0x2, 0xa0f, 0xa12, 0x7, 0x71, 0x2, 0x2, 0xa10, 0xa13, 
       0x5, 0x22c, 0x117, 0x2, 0xa11, 0xa13, 0x7, 0x8, 0x2, 0x2, 0xa12, 
       0xa10, 0x3, 0x2, 0x2, 0x2, 0xa12, 0xa11, 0x3, 0x2, 0x2, 0x2, 0xa13, 
       0xa25, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa15, 0x7, 0x1cc, 0x2, 0x2, 0xa15, 
       0xa18, 0x7, 0x71, 0x2, 0x2, 0xa16, 0xa19, 0x5, 0x22c, 0x117, 0x2, 
       0xa17, 0xa19, 0x7, 0x8, 0x2, 0x2, 0xa18, 0xa16, 0x3, 0x2, 0x2, 0x2, 
       0xa18, 0xa17, 0x3, 0x2, 0x2, 0x2, 0xa19, 0xa25, 0x3, 0x2, 0x2, 0x2, 
       0xa1a, 0xa1b, 0x7, 0x1d6, 0x2, 0x2, 0xa1b, 0xa1e, 0x7, 0x71, 0x2, 
       0x2, 0xa1c, 0xa1f, 0x5, 0x22c, 0x117, 0x2, 0xa1d, 0xa1f, 0x7, 0x8, 
       0x2, 0x2, 0xa1e, 0xa1c, 0x3, 0x2, 0x2, 0x2, 0xa1e, 0xa1d, 0x3, 0x2, 
       0x2, 0x2, 0xa1f, 0xa25, 0x3, 0x2, 0x2, 0x2, 0xa20, 0xa21, 0x7, 0x1d4, 
       0x2, 0x2, 0xa21, 0xa25, 0x7, 0x1ba, 0x2, 0x2, 0xa22, 0xa23, 0x7, 
       0x21e, 0x2, 0x2, 0xa23, 0xa25, 0x7, 0x1ba, 0x2, 0x2, 0xa24, 0x8c1, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x8cb, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x8d6, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x8e8, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x8f7, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x90a, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x922, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x931, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x940, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x94c, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x951, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x95d, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x969, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x96f, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x974, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x97f, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x987, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x98a, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x990, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x993, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x997, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x999, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x99b, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9a3, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x9a6, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9b0, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x9bb, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x9bf, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9c0, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x9c2, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9cf, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x9d2, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9d9, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x9e0, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9e6, 0x3, 0x2, 0x2, 0x2, 0xa24, 0x9e9, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0x9f8, 0x3, 0x2, 0x2, 0x2, 0xa24, 0xa02, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0xa08, 0x3, 0x2, 0x2, 0x2, 0xa24, 0xa0e, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0xa14, 0x3, 0x2, 0x2, 0x2, 0xa24, 0xa1a, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0xa20, 0x3, 0x2, 0x2, 0x2, 0xa24, 0xa22, 
       0x3, 0x2, 0x2, 0x2, 0xa25, 0x87, 0x3, 0x2, 0x2, 0x2, 0xa26, 0xa27, 
       0x7, 0x2f, 0x2, 0x2, 0xa27, 0xa29, 0x9, 0x2, 0x2, 0x2, 0xa28, 0xa2a, 
       0x5, 0x242, 0x122, 0x2, 0xa29, 0xa28, 0x3, 0x2, 0x2, 0x2, 0xa29, 
       0xa2a, 0x3, 0x2, 0x2, 0x2, 0xa2a, 0xa2b, 0x3, 0x2, 0x2, 0x2, 0xa2b, 
       0xa2c, 0x5, 0x20e, 0x108, 0x2, 0xa2c, 0x89, 0x3, 0x2, 0x2, 0x2, 0xa2d, 
       0xa2e, 0x7, 0x2f, 0x2, 0x2, 0xa2e, 0xa30, 0x7, 0x146, 0x2, 0x2, 0xa2f, 
       0xa31, 0x5, 0x242, 0x122, 0x2, 0xa30, 0xa2f, 0x3, 0x2, 0x2, 0x2, 
       0xa30, 0xa31, 0x3, 0x2, 0x2, 0x2, 0xa31, 0xa32, 0x3, 0x2, 0x2, 0x2, 
       0xa32, 0xa33, 0x5, 0x1f4, 0xfb, 0x2, 0xa33, 0x8b, 0x3, 0x2, 0x2, 
       0x2, 0xa34, 0xa35, 0x7, 0x2f, 0x2, 0x2, 0xa35, 0xa37, 0x7, 0x47, 
       0x2, 0x2, 0xa36, 0xa38, 0x9, 0x3, 0x2, 0x2, 0xa37, 0xa36, 0x3, 0x2, 
       0x2, 0x2, 0xa37, 0xa38, 0x3, 0x2, 0x2, 0x2, 0xa38, 0xa39, 0x3, 0x2, 
       0x2, 0x2, 0xa39, 0xa3a, 0x5, 0x20e, 0x108, 0x2, 0xa3a, 0xa3b, 0x7, 
       0x68, 0x2, 0x2, 0xa3b, 0xa48, 0x5, 0x1f6, 0xfc, 0x2, 0xa3c, 0xa3e, 
       0x7, 0x102, 0x2, 0x2, 0xa3d, 0xa3f, 0x7, 0x3bb, 0x2, 0x2, 0xa3e, 
       0xa3d, 0x3, 0x2, 0x2, 0x2, 0xa3e, 0xa3f, 0x3, 0x2, 0x2, 0x2, 0xa3f, 
       0xa40, 0x3, 0x2, 0x2, 0x2, 0xa40, 0xa47, 0x9, 0x5, 0x2, 0x2, 0xa41, 
       0xa43, 0x7, 0x5c, 0x2, 0x2, 0xa42, 0xa44, 0x7, 0x3bb, 0x2, 0x2, 0xa43, 
       0xa42, 0x3, 0x2, 0x2, 0x2, 0xa43, 0xa44, 0x3, 0x2, 0x2, 0x2, 0xa44, 
       0xa45, 0x3, 0x2, 0x2, 0x2, 0xa45, 0xa47, 0x9, 0x6, 0x2, 0x2, 0xa46, 
       0xa3c, 0x3, 0x2, 0x2, 0x2, 0xa46, 0xa41, 0x3, 0x2, 0x2, 0x2, 0xa47, 
       0xa4a, 0x3, 0x2, 0x2, 0x2, 0xa48, 0xa46, 0x3, 0x2, 0x2, 0x2, 0xa48, 
       0xa49, 0x3, 0x2, 0x2, 0x2, 0xa49, 0x8d, 0x3, 0x2, 0x2, 0x2, 0xa4a, 
       0xa48, 0x3, 0x2, 0x2, 0x2, 0xa4b, 0xa4c, 0x7, 0x2f, 0x2, 0x2, 0xa4c, 
       0xa4d, 0x7, 0x17d, 0x2, 0x2, 0xa4d, 0xa4e, 0x7, 0x41, 0x2, 0x2, 0xa4e, 
       0xa4f, 0x5, 0x20e, 0x108, 0x2, 0xa4f, 0xa50, 0x7, 0x140, 0x2, 0x2, 
       0xa50, 0xa51, 0x7, 0x3bb, 0x2, 0x2, 0xa51, 0xa52, 0x5, 0x204, 0x103, 
       0x2, 0xa52, 0x8f, 0x3, 0x2, 0x2, 0x2, 0xa53, 0xa54, 0x7, 0x2f, 0x2, 
       0x2, 0xa54, 0xa56, 0x7, 0x73, 0x2, 0x2, 0xa55, 0xa57, 0x5, 0x242, 
       0x122, 0x2, 0xa56, 0xa55, 0x3, 0x2, 0x2, 0x2, 0xa56, 0xa57, 0x3, 
       0x2, 0x2, 0x2, 0xa57, 0xa58, 0x3, 0x2, 0x2, 0x2, 0xa58, 0xa59, 0x5, 
       0x1f4, 0xfb, 0x2, 0xa59, 0x91, 0x3, 0x2, 0x2, 0x2, 0xa5a, 0xa5b, 
       0x7, 0x2f, 0x2, 0x2, 0xa5b, 0xa5d, 0x7, 0x15a, 0x2, 0x2, 0xa5c, 0xa5e, 
       0x5, 0x242, 0x122, 0x2, 0xa5d, 0xa5c, 0x3, 0x2, 0x2, 0x2, 0xa5d, 
       0xa5e, 0x3, 0x2, 0x2, 0x2, 0xa5e, 0xa5f, 0x3, 0x2, 0x2, 0x2, 0xa5f, 
       0xa60, 0x5, 0x1f4, 0xfb, 0x2, 0xa60, 0x93, 0x3, 0x2, 0x2, 0x2, 0xa61, 
       0xa62, 0x7, 0x2f, 0x2, 0x2, 0xa62, 0xa64, 0x7, 0x1eb, 0x2, 0x2, 0xa63, 
       0xa65, 0x5, 0x242, 0x122, 0x2, 0xa64, 0xa63, 0x3, 0x2, 0x2, 0x2, 
       0xa64, 0xa65, 0x3, 0x2, 0x2, 0x2, 0xa65, 0xa66, 0x3, 0x2, 0x2, 0x2, 
       0xa66, 0xa67, 0x5, 0x20e, 0x108, 0x2, 0xa67, 0x95, 0x3, 0x2, 0x2, 
       0x2, 0xa68, 0xa6a, 0x7, 0x2f, 0x2, 0x2, 0xa69, 0xa6b, 0x7, 0x211, 
       0x2, 0x2, 0xa6a, 0xa69, 0x3, 0x2, 0x2, 0x2, 0xa6a, 0xa6b, 0x3, 0x2, 
       0x2, 0x2, 0xa6b, 0xa6c, 0x3, 0x2, 0x2, 0x2, 0xa6c, 0xa6e, 0x7, 0x95, 
       0x2, 0x2, 0xa6d, 0xa6f, 0x5, 0x242, 0x122, 0x2, 0xa6e, 0xa6d, 0x3, 
       0x2, 0x2, 0x2, 0xa6e, 0xa6f, 0x3, 0x2, 0x2, 0x2, 0xa6f, 0xa70, 0x3, 
       0x2, 0x2, 0x2, 0xa70, 0xa72, 0x5, 0x22e, 0x118, 0x2, 0xa71, 0xa73, 
       0x9, 0x21, 0x2, 0x2, 0xa72, 0xa71, 0x3, 0x2, 0x2, 0x2, 0xa72, 0xa73, 
       0x3, 0x2, 0x2, 0x2, 0xa73, 0x97, 0x3, 0x2, 0x2, 0x2, 0xa74, 0xa75, 
       0x7, 0x2f, 0x2, 0x2, 0xa75, 0xa76, 0x7, 0x210, 0x2, 0x2, 0xa76, 0xa7c, 
       0x5, 0x20e, 0x108, 0x2, 0xa77, 0xa79, 0x7, 0x140, 0x2, 0x2, 0xa78, 
       0xa7a, 0x7, 0x3bb, 0x2, 0x2, 0xa79, 0xa78, 0x3, 0x2, 0x2, 0x2, 0xa79, 
       0xa7a, 0x3, 0x2, 0x2, 0x2, 0xa7a, 0xa7b, 0x3, 0x2, 0x2, 0x2, 0xa7b, 
       0xa7d, 0x5, 0x204, 0x103, 0x2, 0xa7c, 0xa77, 0x3, 0x2, 0x2, 0x2, 
       0xa7c, 0xa7d, 0x3, 0x2, 0x2, 0x2, 0xa7d, 0x99, 0x3, 0x2, 0x2, 0x2, 
       0xa7e, 0xa7f, 0x7, 0x2f, 0x2, 0x2, 0xa7f, 0xa81, 0x7, 0x9a, 0x2, 
       0x2, 0xa80, 0xa82, 0x5, 0x242, 0x122, 0x2, 0xa81, 0xa80, 0x3, 0x2, 
       0x2, 0x2, 0xa81, 0xa82, 0x3, 0x2, 0x2, 0x2, 0xa82, 0xa83, 0x3, 0x2, 
       0x2, 0x2, 0xa83, 0xa84, 0x5, 0x1f4, 0xfb, 0x2, 0xa84, 0x9b, 0x3, 
       0x2, 0x2, 0x2, 0xa85, 0xa86, 0x7, 0x2f, 0x2, 0x2, 0xa86, 0xa88, 0x7, 
       0x225, 0x2, 0x2, 0xa87, 0xa89, 0x5, 0x242, 0x122, 0x2, 0xa88, 0xa87, 
       0x3, 0x2, 0x2, 0x2, 0xa88, 0xa89, 0x3, 0x2, 0x2, 0x2, 0xa89, 0xa8a, 
       0x3, 0x2, 0x2, 0x2, 0xa8a, 0xa8f, 0x5, 0x1f4, 0xfb, 0x2, 0xa8b, 0xa8c, 
       0x7, 0x3c6, 0x2, 0x2, 0xa8c, 0xa8e, 0x5, 0x1f4, 0xfb, 0x2, 0xa8d, 
       0xa8b, 0x3, 0x2, 0x2, 0x2, 0xa8e, 0xa91, 0x3, 0x2, 0x2, 0x2, 0xa8f, 
       0xa8d, 0x3, 0x2, 0x2, 0x2, 0xa8f, 0xa90, 0x3, 0x2, 0x2, 0x2, 0xa90, 
       0xa93, 0x3, 0x2, 0x2, 0x2, 0xa91, 0xa8f, 0x3, 0x2, 0x2, 0x2, 0xa92, 
       0xa94, 0x9, 0x21, 0x2, 0x2, 0xa93, 0xa92, 0x3, 0x2, 0x2, 0x2, 0xa93, 
       0xa94, 0x3, 0x2, 0x2, 0x2, 0xa94, 0x9d, 0x3, 0x2, 0x2, 0x2, 0xa95, 
       0xa96, 0x7, 0x7b, 0x2, 0x2, 0xa96, 0xa97, 0x7, 0x95, 0x2, 0x2, 0xa97, 
       0xa9c, 0x5, 0xa0, 0x51, 0x2, 0xa98, 0xa99, 0x7, 0x3c6, 0x2, 0x2, 
       0xa99, 0xa9b, 0x5, 0xa0, 0x51, 0x2, 0xa9a, 0xa98, 0x3, 0x2, 0x2, 
       0x2, 0xa9b, 0xa9e, 0x3, 0x2, 0x2, 0x2, 0xa9c, 0xa9a, 0x3, 0x2, 0x2, 
       0x2, 0xa9c, 0xa9d, 0x3, 0x2, 0x2, 0x2, 0xa9d, 0x9f, 0x3, 0x2, 0x2, 
       0x2, 0xa9e, 0xa9c, 0x3, 0x2, 0x2, 0x2, 0xa9f, 0xaa0, 0x5, 0x1f6, 
       0xfc, 0x2, 0xaa0, 0xaa1, 0x7, 0x98, 0x2, 0x2, 0xaa1, 0xaa2, 0x5, 
       0x1f6, 0xfc, 0x2, 0xaa2, 0xa1, 0x3, 0x2, 0x2, 0x2, 0xaa3, 0xaa5, 
       0x7, 0x217, 0x2, 0x2, 0xaa4, 0xaa6, 0x7, 0x95, 0x2, 0x2, 0xaa5, 0xaa4, 
       0x3, 0x2, 0x2, 0x2, 0xaa5, 0xaa6, 0x3, 0x2, 0x2, 0x2, 0xaa6, 0xaa7, 
       0x3, 0x2, 0x2, 0x2, 0xaa7, 0xaa8, 0x5, 0x1f6, 0xfc, 0x2, 0xaa8, 0xa3, 
       0x3, 0x2, 0x2, 0x2, 0xaa9, 0xaaa, 0x7, 0x13, 0x2, 0x2, 0xaaa, 0xab1, 
       0x5, 0x1f4, 0xfb, 0x2, 0xaab, 0xaae, 0x7, 0x3c4, 0x2, 0x2, 0xaac, 
       0xaaf, 0x5, 0x236, 0x11c, 0x2, 0xaad, 0xaaf, 0x5, 0x232, 0x11a, 0x2, 
       0xaae, 0xaac, 0x3, 0x2, 0x2, 0x2, 0xaae, 0xaad, 0x3, 0x2, 0x2, 0x2, 
       0xaae, 0xaaf, 0x3, 0x2, 0x2, 0x2, 0xaaf, 0xab0, 0x3, 0x2, 0x2, 0x2, 
       0xab0, 0xab2, 0x7, 0x3c5, 0x2, 0x2, 0xab1, 0xaab, 0x3, 0x2, 0x2, 
       0x2, 0xab1, 0xab2, 0x3, 0x2, 0x2, 0x2, 0xab2, 0xa5, 0x3, 0x2, 0x2, 
       0x2, 0xab3, 0xab6, 0x5, 0xc0, 0x61, 0x2, 0xab4, 0xab6, 0x5, 0xc2, 
       0x62, 0x2, 0xab5, 0xab3, 0x3, 0x2, 0x2, 0x2, 0xab5, 0xab4, 0x3, 0x2, 
       0x2, 0x2, 0xab6, 0xa7, 0x3, 0x2, 0x2, 0x2, 0xab7, 0xab8, 0x7, 0x138, 
       0x2, 0x2, 0xab8, 0xab9, 0x5, 0x232, 0x11a, 0x2, 0xab9, 0xa9, 0x3, 
       0x2, 0x2, 0x2, 0xaba, 0xabf, 0x5, 0xc6, 0x64, 0x2, 0xabb, 0xabf, 
       0x5, 0xc8, 0x65, 0x2, 0xabc, 0xabf, 0x5, 0xca, 0x66, 0x2, 0xabd, 
       0xabf, 0x5, 0xcc, 0x67, 0x2, 0xabe, 0xaba, 0x3, 0x2, 0x2, 0x2, 0xabe, 
       0xabb, 0x3, 0x2, 0x2, 0x2, 0xabe, 0xabc, 0x3, 0x2, 0x2, 0x2, 0xabe, 
       0xabd, 0x3, 0x2, 0x2, 0x2, 0xabf, 0xab, 0x3, 0x2, 0x2, 0x2, 0xac0, 
       0xac2, 0x7, 0x4b, 0x2, 0x2, 0xac1, 0xac3, 0x9, 0x22, 0x2, 0x2, 0xac2, 
       0xac1, 0x3, 0x2, 0x2, 0x2, 0xac2, 0xac3, 0x3, 0x2, 0x2, 0x2, 0xac3, 
       0xac5, 0x3, 0x2, 0x2, 0x2, 0xac4, 0xac6, 0x7, 0x45, 0x2, 0x2, 0xac5, 
       0xac4, 0x3, 0x2, 0x2, 0x2, 0xac5, 0xac6, 0x3, 0x2, 0x2, 0x2, 0xac6, 
       0xac8, 0x3, 0x2, 0x2, 0x2, 0xac7, 0xac9, 0x7, 0x4d, 0x2, 0x2, 0xac8, 
       0xac7, 0x3, 0x2, 0x2, 0x2, 0xac8, 0xac9, 0x3, 0x2, 0x2, 0x2, 0xac9, 
       0xaca, 0x3, 0x2, 0x2, 0x2, 0xaca, 0xad0, 0x5, 0x1f6, 0xfc, 0x2, 0xacb, 
       0xacc, 0x7, 0x71, 0x2, 0x2, 0xacc, 0xacd, 0x7, 0x3c4, 0x2, 0x2, 0xacd, 
       0xace, 0x5, 0x22c, 0x117, 0x2, 0xace, 0xacf, 0x7, 0x3c5, 0x2, 0x2, 
       0xacf, 0xad1, 0x3, 0x2, 0x2, 0x2, 0xad0, 0xacb, 0x3, 0x2, 0x2, 0x2, 
       0xad0, 0xad1, 0x3, 0x2, 0x2, 0x2, 0xad1, 0xae2, 0x3, 0x2, 0x2, 0x2, 
       0xad2, 0xad3, 0x7, 0x3c4, 0x2, 0x2, 0xad3, 0xad4, 0x5, 0x22c, 0x117, 
       0x2, 0xad4, 0xad5, 0x7, 0x3c5, 0x2, 0x2, 0xad5, 0xad7, 0x3, 0x2, 
       0x2, 0x2, 0xad6, 0xad2, 0x3, 0x2, 0x2, 0x2, 0xad6, 0xad7, 0x3, 0x2, 
       0x2, 0x2, 0xad7, 0xad8, 0x3, 0x2, 0x2, 0x2, 0xad8, 0xae3, 0x5, 0xb8, 
       0x5d, 0x2, 0xad9, 0xada, 0x7, 0x87, 0x2, 0x2, 0xada, 0xadf, 0x5, 
       0xba, 0x5e, 0x2, 0xadb, 0xadc, 0x7, 0x3c6, 0x2, 0x2, 0xadc, 0xade, 
       0x5, 0xba, 0x5e, 0x2, 0xadd, 0xadb, 0x3, 0x2, 0x2, 0x2, 0xade, 0xae1, 
       0x3, 0x2, 0x2, 0x2, 0xadf, 0xadd, 0x3, 0x2, 0x2, 0x2, 0xadf, 0xae0, 
       0x3, 0x2, 0x2, 0x2, 0xae0, 0xae3, 0x3, 0x2, 0x2, 0x2, 0xae1, 0xadf, 
       0x3, 0x2, 0x2, 0x2, 0xae2, 0xad6, 0x3, 0x2, 0x2, 0x2, 0xae2, 0xad9, 
       0x3, 0x2, 0x2, 0x2, 0xae3, 0xaf0, 0x3, 0x2, 0x2, 0x2, 0xae4, 0xae5, 
       0x7, 0x68, 0x2, 0x2, 0xae5, 0xae6, 0x7, 0x13a, 0x2, 0x2, 0xae6, 0xae7, 
       0x7, 0x51, 0x2, 0x2, 0xae7, 0xae8, 0x7, 0xa1, 0x2, 0x2, 0xae8, 0xaed, 
       0x5, 0xba, 0x5e, 0x2, 0xae9, 0xaea, 0x7, 0x3c6, 0x2, 0x2, 0xaea, 
       0xaec, 0x5, 0xba, 0x5e, 0x2, 0xaeb, 0xae9, 0x3, 0x2, 0x2, 0x2, 0xaec, 
       0xaef, 0x3, 0x2, 0x2, 0x2, 0xaed, 0xaeb, 0x3, 0x2, 0x2, 0x2, 0xaed, 
       0xaee, 0x3, 0x2, 0x2, 0x2, 0xaee, 0xaf1, 0x3, 0x2, 0x2, 0x2, 0xaef, 
       0xaed, 0x3, 0x2, 0x2, 0x2, 0xaf0, 0xae4, 0x3, 0x2, 0x2, 0x2, 0xaf0, 
       0xaf1, 0x3, 0x2, 0x2, 0x2, 0xaf1, 0xad, 0x3, 0x2, 0x2, 0x2, 0xaf2, 
       0xaf3, 0x7, 0x5b, 0x2, 0x2, 0xaf3, 0xaf5, 0x7, 0x12d, 0x2, 0x2, 0xaf4, 
       0xaf6, 0x9, 0x23, 0x2, 0x2, 0xaf5, 0xaf4, 0x3, 0x2, 0x2, 0x2, 0xaf5, 
       0xaf6, 0x3, 0x2, 0x2, 0x2, 0xaf6, 0xaf8, 0x3, 0x2, 0x2, 0x2, 0xaf7, 
       0xaf9, 0x7, 0x17c, 0x2, 0x2, 0xaf8, 0xaf7, 0x3, 0x2, 0x2, 0x2, 0xaf8, 
       0xaf9, 0x3, 0x2, 0x2, 0x2, 0xaf9, 0xafa, 0x3, 0x2, 0x2, 0x2, 0xafa, 
       0xafb, 0x7, 0x48, 0x2, 0x2, 0xafb, 0xafd, 0x7, 0x3d3, 0x2, 0x2, 0xafc, 
       0xafe, 0x9, 0x8, 0x2, 0x2, 0xafd, 0xafc, 0x3, 0x2, 0x2, 0x2, 0xafd, 
       0xafe, 0x3, 0x2, 0x2, 0x2, 0xafe, 0xaff, 0x3, 0x2, 0x2, 0x2, 0xaff, 
       0xb00, 0x7, 0x4d, 0x2, 0x2, 0xb00, 0xb01, 0x7, 0x95, 0x2, 0x2, 0xb01, 
       0xb07, 0x5, 0x1f6, 0xfc, 0x2, 0xb02, 0xb03, 0x7, 0x71, 0x2, 0x2, 
       0xb03, 0xb04, 0x7, 0x3c4, 0x2, 0x2, 0xb04, 0xb05, 0x5, 0x22c, 0x117, 
       0x2, 0xb05, 0xb06, 0x7, 0x3c5, 0x2, 0x2, 0xb06, 0xb08, 0x3, 0x2, 
       0x2, 0x2, 0xb07, 0xb02, 0x3, 0x2, 0x2, 0x2, 0xb07, 0xb08, 0x3, 0x2, 
       0x2, 0x2, 0xb08, 0xb0c, 0x3, 0x2, 0x2, 0x2, 0xb09, 0xb0a, 0x7, 0x18, 
       0x2, 0x2, 0xb0a, 0xb0b, 0x7, 0x87, 0x2, 0x2, 0xb0b, 0xb0d, 0x5, 0x200, 
       0x101, 0x2, 0xb0c, 0xb09, 0x3, 0x2, 0x2, 0x2, 0xb0c, 0xb0d, 0x3, 
       0x2, 0x2, 0x2, 0xb0d, 0xb14, 0x3, 0x2, 0x2, 0x2, 0xb0e, 0xb10, 0x9, 
       0x24, 0x2, 0x2, 0xb0f, 0xb11, 0x5, 0xfa, 0x7e, 0x2, 0xb10, 0xb0f, 
       0x3, 0x2, 0x2, 0x2, 0xb11, 0xb12, 0x3, 0x2, 0x2, 0x2, 0xb12, 0xb10, 
       0x3, 0x2, 0x2, 0x2, 0xb12, 0xb13, 0x3, 0x2, 0x2, 0x2, 0xb13, 0xb15, 
       0x3, 0x2, 0x2, 0x2, 0xb14, 0xb0e, 0x3, 0x2, 0x2, 0x2, 0xb14, 0xb15, 
       0x3, 0x2, 0x2, 0x2, 0xb15, 0xb1c, 0x3, 0x2, 0x2, 0x2, 0xb16, 0xb18, 
       0x7, 0x5a, 0x2, 0x2, 0xb17, 0xb19, 0x5, 0xfc, 0x7f, 0x2, 0xb18, 0xb17, 
       0x3, 0x2, 0x2, 0x2, 0xb19, 0xb1a, 0x3, 0x2, 0x2, 0x2, 0xb1a, 0xb18, 
       0x3, 0x2, 0x2, 0x2, 0xb1a, 0xb1b, 0x3, 0x2, 0x2, 0x2, 0xb1b, 0xb1d, 
       0x3, 0x2, 0x2, 0x2, 0xb1c, 0xb16, 0x3, 0x2, 0x2, 0x2, 0xb1c, 0xb1d, 
       0x3, 0x2, 0x2, 0x2, 0xb1d, 0xb22, 0x3, 0x2, 0x2, 0x2, 0xb1e, 0xb1f, 
       0x7, 0x45, 0x2, 0x2, 0xb1f, 0xb20, 0x5, 0x212, 0x10a, 0x2, 0xb20, 
       0xb21, 0x9, 0x25, 0x2, 0x2, 0xb21, 0xb23, 0x3, 0x2, 0x2, 0x2, 0xb22, 
       0xb1e, 0x3, 0x2, 0x2, 0x2, 0xb22, 0xb23, 0x3, 0x2, 0x2, 0x2, 0xb23, 
       0xb2f, 0x3, 0x2, 0x2, 0x2, 0xb24, 0xb25, 0x7, 0x3c4, 0x2, 0x2, 0xb25, 
       0xb2a, 0x5, 0xbc, 0x5f, 0x2, 0xb26, 0xb27, 0x7, 0x3c6, 0x2, 0x2, 
       0xb27, 0xb29, 0x5, 0xbc, 0x5f, 0x2, 0xb28, 0xb26, 0x3, 0x2, 0x2, 
       0x2, 0xb29, 0xb2c, 0x3, 0x2, 0x2, 0x2, 0xb2a, 0xb28, 0x3, 0x2, 0x2, 
       0x2, 0xb2a, 0xb2b, 0x3, 0x2, 0x2, 0x2, 0xb2b, 0xb2d, 0x3, 0x2, 0x2, 
       0x2, 0xb2c, 0xb2a, 0x3, 0x2, 0x2, 0x2, 0xb2d, 0xb2e, 0x7, 0x3c5, 
       0x2, 0x2, 0xb2e, 0xb30, 0x3, 0x2, 0x2, 0x2, 0xb2f, 0xb24, 0x3, 0x2, 
       0x2, 0x2, 0xb2f, 0xb30, 0x3, 0x2, 0x2, 0x2, 0xb30, 0xb3a, 0x3, 0x2, 
       0x2, 0x2, 0xb31, 0xb32, 0x7, 0x87, 0x2, 0x2, 0xb32, 0xb37, 0x5, 0xba, 
       0x5e, 0x2, 0xb33, 0xb34, 0x7, 0x3c6, 0x2, 0x2, 0xb34, 0xb36, 0x5, 
       0xba, 0x5e, 0x2, 0xb35, 0xb33, 0x3, 0x2, 0x2, 0x2, 0xb36, 0xb39, 
       0x3, 0x2, 0x2, 0x2, 0xb37, 0xb35, 0x3, 0x2, 0x2, 0x2, 0xb37, 0xb38, 
       0x3, 0x2, 0x2, 0x2, 0xb38, 0xb3b, 0x3, 0x2, 0x2, 0x2, 0xb39, 0xb37, 
       0x3, 0x2, 0x2, 0x2, 0xb3a, 0xb31, 0x3, 0x2, 0x2, 0x2, 0xb3a, 0xb3b, 
       0x3, 0x2, 0x2, 0x2, 0xb3b, 0xaf, 0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb3d, 
       0x7, 0x5b, 0x2, 0x2, 0xb3d, 0xb3f, 0x7, 0x22f, 0x2, 0x2, 0xb3e, 0xb40, 
       0x9, 0x23, 0x2, 0x2, 0xb3f, 0xb3e, 0x3, 0x2, 0x2, 0x2, 0xb3f, 0xb40, 
       0x3, 0x2, 0x2, 0x2, 0xb40, 0xb42, 0x3, 0x2, 0x2, 0x2, 0xb41, 0xb43, 
       0x7, 0x17c, 0x2, 0x2, 0xb42, 0xb41, 0x3, 0x2, 0x2, 0x2, 0xb42, 0xb43, 
       0x3, 0x2, 0x2, 0x2, 0xb43, 0xb44, 0x3, 0x2, 0x2, 0x2, 0xb44, 0xb45, 
       0x7, 0x48, 0x2, 0x2, 0xb45, 0xb47, 0x7, 0x3d3, 0x2, 0x2, 0xb46, 0xb48, 
       0x9, 0x8, 0x2, 0x2, 0xb47, 0xb46, 0x3, 0x2, 0x2, 0x2, 0xb47, 0xb48, 
       0x3, 0x2, 0x2, 0x2, 0xb48, 0xb49, 0x3, 0x2, 0x2, 0x2, 0xb49, 0xb4a, 
       0x7, 0x4d, 0x2, 0x2, 0xb4a, 0xb4b, 0x7, 0x95, 0x2, 0x2, 0xb4b, 0xb4f, 
       0x5, 0x1f6, 0xfc, 0x2, 0xb4c, 0xb4d, 0x7, 0x18, 0x2, 0x2, 0xb4d, 
       0xb4e, 0x7, 0x87, 0x2, 0x2, 0xb4e, 0xb50, 0x5, 0x200, 0x101, 0x2, 
       0xb4f, 0xb4c, 0x3, 0x2, 0x2, 0x2, 0xb4f, 0xb50, 0x3, 0x2, 0x2, 0x2, 
       0xb50, 0xb57, 0x3, 0x2, 0x2, 0x2, 0xb51, 0xb52, 0x7, 0x1e6, 0x2, 
       0x2, 0xb52, 0xb53, 0x7, 0x164, 0x2, 0x2, 0xb53, 0xb54, 0x7, 0x12, 
       0x2, 0x2, 0xb54, 0xb55, 0x7, 0x3bd, 0x2, 0x2, 0xb55, 0xb56, 0x7, 
       0x3d3, 0x2, 0x2, 0xb56, 0xb58, 0x7, 0x3bc, 0x2, 0x2, 0xb57, 0xb51, 
       0x3, 0x2, 0x2, 0x2, 0xb57, 0xb58, 0x3, 0x2, 0x2, 0x2, 0xb58, 0xb5d, 
       0x3, 0x2, 0x2, 0x2, 0xb59, 0xb5a, 0x7, 0x45, 0x2, 0x2, 0xb5a, 0xb5b, 
       0x5, 0x212, 0x10a, 0x2, 0xb5b, 0xb5c, 0x9, 0x25, 0x2, 0x2, 0xb5c, 
       0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb5d, 0xb59, 0x3, 0x2, 0x2, 0x2, 0xb5d, 
       0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb5e, 0xb6a, 0x3, 0x2, 0x2, 0x2, 0xb5f, 
       0xb60, 0x7, 0x3c4, 0x2, 0x2, 0xb60, 0xb65, 0x5, 0xbc, 0x5f, 0x2, 
       0xb61, 0xb62, 0x7, 0x3c6, 0x2, 0x2, 0xb62, 0xb64, 0x5, 0xbc, 0x5f, 
       0x2, 0xb63, 0xb61, 0x3, 0x2, 0x2, 0x2, 0xb64, 0xb67, 0x3, 0x2, 0x2, 
       0x2, 0xb65, 0xb63, 0x3, 0x2, 0x2, 0x2, 0xb65, 0xb66, 0x3, 0x2, 0x2, 
       0x2, 0xb66, 0xb68, 0x3, 0x2, 0x2, 0x2, 0xb67, 0xb65, 0x3, 0x2, 0x2, 
       0x2, 0xb68, 0xb69, 0x7, 0x3c5, 0x2, 0x2, 0xb69, 0xb6b, 0x3, 0x2, 
       0x2, 0x2, 0xb6a, 0xb5f, 0x3, 0x2, 0x2, 0x2, 0xb6a, 0xb6b, 0x3, 0x2, 
       0x2, 0x2, 0xb6b, 0xb75, 0x3, 0x2, 0x2, 0x2, 0xb6c, 0xb6d, 0x7, 0x87, 
       0x2, 0x2, 0xb6d, 0xb72, 0x5, 0xba, 0x5e, 0x2, 0xb6e, 0xb6f, 0x7, 
       0x3c6, 0x2, 0x2, 0xb6f, 0xb71, 0x5, 0xba, 0x5e, 0x2, 0xb70, 0xb6e, 
       0x3, 0x2, 0x2, 0x2, 0xb71, 0xb74, 0x3, 0x2, 0x2, 0x2, 0xb72, 0xb70, 
       0x3, 0x2, 0x2, 0x2, 0xb72, 0xb73, 0x3, 0x2, 0x2, 0x2, 0xb73, 0xb76, 
       0x3, 0x2, 0x2, 0x2, 0xb74, 0xb72, 0x3, 0x2, 0x2, 0x2, 0xb75, 0xb6c, 
       0x3, 0x2, 0x2, 0x2, 0xb75, 0xb76, 0x3, 0x2, 0x2, 0x2, 0xb76, 0xb1, 
       0x3, 0x2, 0x2, 0x2, 0xb77, 0xb79, 0x7, 0x7d, 0x2, 0x2, 0xb78, 0xb7a, 
       0x9, 0x26, 0x2, 0x2, 0xb79, 0xb78, 0x3, 0x2, 0x2, 0x2, 0xb79, 0xb7a, 
       0x3, 0x2, 0x2, 0x2, 0xb7a, 0xb7c, 0x3, 0x2, 0x2, 0x2, 0xb7b, 0xb7d, 
       0x7, 0x4d, 0x2, 0x2, 0xb7c, 0xb7b, 0x3, 0x2, 0x2, 0x2, 0xb7c, 0xb7d, 
       0x3, 0x2, 0x2, 0x2, 0xb7d, 0xb7e, 0x3, 0x2, 0x2, 0x2, 0xb7e, 0xb84, 
       0x5, 0x1f6, 0xfc, 0x2, 0xb7f, 0xb80, 0x7, 0x71, 0x2, 0x2, 0xb80, 
       0xb81, 0x7, 0x3c4, 0x2, 0x2, 0xb81, 0xb82, 0x5, 0x22c, 0x117, 0x2, 
       0xb82, 0xb83, 0x7, 0x3c5, 0x2, 0x2, 0xb83, 0xb85, 0x3, 0x2, 0x2, 
       0x2, 0xb84, 0xb7f, 0x3, 0x2, 0x2, 0x2, 0xb84, 0xb85, 0x3, 0x2, 0x2, 
       0x2, 0xb85, 0xb96, 0x3, 0x2, 0x2, 0x2, 0xb86, 0xb87, 0x7, 0x3c4, 
       0x2, 0x2, 0xb87, 0xb88, 0x5, 0x22c, 0x117, 0x2, 0xb88, 0xb89, 0x7, 
       0x3c5, 0x2, 0x2, 0xb89, 0xb8b, 0x3, 0x2, 0x2, 0x2, 0xb8a, 0xb86, 
       0x3, 0x2, 0x2, 0x2, 0xb8a, 0xb8b, 0x3, 0x2, 0x2, 0x2, 0xb8b, 0xb8c, 
       0x3, 0x2, 0x2, 0x2, 0xb8c, 0xb97, 0x5, 0xb8, 0x5d, 0x2, 0xb8d, 0xb8e, 
       0x7, 0x87, 0x2, 0x2, 0xb8e, 0xb93, 0x5, 0xba, 0x5e, 0x2, 0xb8f, 0xb90, 
       0x7, 0x3c6, 0x2, 0x2, 0xb90, 0xb92, 0x5, 0xba, 0x5e, 0x2, 0xb91, 
       0xb8f, 0x3, 0x2, 0x2, 0x2, 0xb92, 0xb95, 0x3, 0x2, 0x2, 0x2, 0xb93, 
       0xb91, 0x3, 0x2, 0x2, 0x2, 0xb93, 0xb94, 0x3, 0x2, 0x2, 0x2, 0xb94, 
       0xb97, 0x3, 0x2, 0x2, 0x2, 0xb95, 0xb93, 0x3, 0x2, 0x2, 0x2, 0xb96, 
       0xb8a, 0x3, 0x2, 0x2, 0x2, 0xb96, 0xb8d, 0x3, 0x2, 0x2, 0x2, 0xb97, 
       0xb3, 0x3, 0x2, 0x2, 0x2, 0xb98, 0xb9a, 0x5, 0xea, 0x76, 0x2, 0xb99, 
       0xb9b, 0x5, 0xbe, 0x60, 0x2, 0xb9a, 0xb99, 0x3, 0x2, 0x2, 0x2, 0xb9a, 
       0xb9b, 0x3, 0x2, 0x2, 0x2, 0xb9b, 0xbd0, 0x3, 0x2, 0x2, 0x2, 0xb9c, 
       0xb9e, 0x5, 0xe6, 0x74, 0x2, 0xb9d, 0xb9f, 0x5, 0xbe, 0x60, 0x2, 
       0xb9e, 0xb9d, 0x3, 0x2, 0x2, 0x2, 0xb9e, 0xb9f, 0x3, 0x2, 0x2, 0x2, 
       0xb9f, 0xbd0, 0x3, 0x2, 0x2, 0x2, 0xba0, 0xba2, 0x5, 0xec, 0x77, 
       0x2, 0xba1, 0xba3, 0x5, 0xf0, 0x79, 0x2, 0xba2, 0xba1, 0x3, 0x2, 
       0x2, 0x2, 0xba3, 0xba4, 0x3, 0x2, 0x2, 0x2, 0xba4, 0xba2, 0x3, 0x2, 
       0x2, 0x2, 0xba4, 0xba5, 0x3, 0x2, 0x2, 0x2, 0xba5, 0xbae, 0x3, 0x2, 
       0x2, 0x2, 0xba6, 0xba8, 0x7, 0x9d, 0x2, 0x2, 0xba7, 0xba9, 0x9, 0x27, 
       0x2, 0x2, 0xba8, 0xba7, 0x3, 0x2, 0x2, 0x2, 0xba8, 0xba9, 0x3, 0x2, 
       0x2, 0x2, 0xba9, 0xbac, 0x3, 0x2, 0x2, 0x2, 0xbaa, 0xbad, 0x5, 0xea, 
       0x76, 0x2, 0xbab, 0xbad, 0x5, 0xe6, 0x74, 0x2, 0xbac, 0xbaa, 0x3, 
       0x2, 0x2, 0x2, 0xbac, 0xbab, 0x3, 0x2, 0x2, 0x2, 0xbad, 0xbaf, 0x3, 
       0x2, 0x2, 0x2, 0xbae, 0xba6, 0x3, 0x2, 0x2, 0x2, 0xbae, 0xbaf, 0x3, 
       0x2, 0x2, 0x2, 0xbaf, 0xbb1, 0x3, 0x2, 0x2, 0x2, 0xbb0, 0xbb2, 0x5, 
       0xd2, 0x6a, 0x2, 0xbb1, 0xbb0, 0x3, 0x2, 0x2, 0x2, 0xbb1, 0xbb2, 
       0x3, 0x2, 0x2, 0x2, 0xbb2, 0xbb4, 0x3, 0x2, 0x2, 0x2, 0xbb3, 0xbb5, 
       0x5, 0x108, 0x85, 0x2, 0xbb4, 0xbb3, 0x3, 0x2, 0x2, 0x2, 0xbb4, 0xbb5, 
       0x3, 0x2, 0x2, 0x2, 0xbb5, 0xbb7, 0x3, 0x2, 0x2, 0x2, 0xbb6, 0xbb8, 
       0x5, 0xbe, 0x60, 0x2, 0xbb7, 0xbb6, 0x3, 0x2, 0x2, 0x2, 0xbb7, 0xbb8, 
       0x3, 0x2, 0x2, 0x2, 0xbb8, 0xbd0, 0x3, 0x2, 0x2, 0x2, 0xbb9, 0xbbb, 
       0x5, 0xe8, 0x75, 0x2, 0xbba, 0xbbc, 0x5, 0xee, 0x78, 0x2, 0xbbb, 
       0xbba, 0x3, 0x2, 0x2, 0x2, 0xbbc, 0xbbd, 0x3, 0x2, 0x2, 0x2, 0xbbd, 
       0xbbb, 0x3, 0x2, 0x2, 0x2, 0xbbd, 0xbbe, 0x3, 0x2, 0x2, 0x2, 0xbbe, 
       0xbc4, 0x3, 0x2, 0x2, 0x2, 0xbbf, 0xbc1, 0x7, 0x9d, 0x2, 0x2, 0xbc0, 
       0xbc2, 0x9, 0x27, 0x2, 0x2, 0xbc1, 0xbc0, 0x3, 0x2, 0x2, 0x2, 0xbc1, 
       0xbc2, 0x3, 0x2, 0x2, 0x2, 0xbc2, 0xbc3, 0x3, 0x2, 0x2, 0x2, 0xbc3, 
       0xbc5, 0x5, 0xe6, 0x74, 0x2, 0xbc4, 0xbbf, 0x3, 0x2, 0x2, 0x2, 0xbc4, 
       0xbc5, 0x3, 0x2, 0x2, 0x2, 0xbc5, 0xbc7, 0x3, 0x2, 0x2, 0x2, 0xbc6, 
       0xbc8, 0x5, 0xd2, 0x6a, 0x2, 0xbc7, 0xbc6, 0x3, 0x2, 0x2, 0x2, 0xbc7, 
       0xbc8, 0x3, 0x2, 0x2, 0x2, 0xbc8, 0xbca, 0x3, 0x2, 0x2, 0x2, 0xbc9, 
       0xbcb, 0x5, 0x108, 0x85, 0x2, 0xbca, 0xbc9, 0x3, 0x2, 0x2, 0x2, 0xbca, 
       0xbcb, 0x3, 0x2, 0x2, 0x2, 0xbcb, 0xbcd, 0x3, 0x2, 0x2, 0x2, 0xbcc, 
       0xbce, 0x5, 0xbe, 0x60, 0x2, 0xbcd, 0xbcc, 0x3, 0x2, 0x2, 0x2, 0xbcd, 
       0xbce, 0x3, 0x2, 0x2, 0x2, 0xbce, 0xbd0, 0x3, 0x2, 0x2, 0x2, 0xbcf, 
       0xb98, 0x3, 0x2, 0x2, 0x2, 0xbcf, 0xb9c, 0x3, 0x2, 0x2, 0x2, 0xbcf, 
       0xba0, 0x3, 0x2, 0x2, 0x2, 0xbcf, 0xbb9, 0x3, 0x2, 0x2, 0x2, 0xbd0, 
       0xb5, 0x3, 0x2, 0x2, 0x2, 0xbd1, 0xbd4, 0x5, 0xce, 0x68, 0x2, 0xbd2, 
       0xbd4, 0x5, 0xd0, 0x69, 0x2, 0xbd3, 0xbd1, 0x3, 0x2, 0x2, 0x2, 0xbd3, 
       0xbd2, 0x3, 0x2, 0x2, 0x2, 0xbd4, 0xb7, 0x3, 0x2, 0x2, 0x2, 0xbd5, 
       0xbe5, 0x5, 0xb4, 0x5b, 0x2, 0xbd6, 0xbd7, 0x9, 0x28, 0x2, 0x2, 0xbd7, 
       0xbd8, 0x7, 0x3c4, 0x2, 0x2, 0xbd8, 0xbd9, 0x5, 0x234, 0x11b, 0x2, 
       0xbd9, 0xbe1, 0x7, 0x3c5, 0x2, 0x2, 0xbda, 0xbdb, 0x7, 0x3c6, 0x2, 
       0x2, 0xbdb, 0xbdc, 0x7, 0x3c4, 0x2, 0x2, 0xbdc, 0xbdd, 0x5, 0x234, 
       0x11b, 0x2, 0xbdd, 0xbde, 0x7, 0x3c5, 0x2, 0x2, 0xbde, 0xbe0, 0x3, 
       0x2, 0x2, 0x2, 0xbdf, 0xbda, 0x3, 0x2, 0x2, 0x2, 0xbe0, 0xbe3, 0x3, 
       0x2, 0x2, 0x2, 0xbe1, 0xbdf, 0x3, 0x2, 0x2, 0x2, 0xbe1, 0xbe2, 0x3, 
       0x2, 0x2, 0x2, 0xbe2, 0xbe5, 0x3, 0x2, 0x2, 0x2, 0xbe3, 0xbe1, 0x3, 
       0x2, 0x2, 0x2, 0xbe4, 0xbd5, 0x3, 0x2, 0x2, 0x2, 0xbe4, 0xbd6, 0x3, 
       0x2, 0x2, 0x2, 0xbe5, 0xb9, 0x3, 0x2, 0x2, 0x2, 0xbe6, 0xbe7, 0x5, 
       0x1f8, 0xfd, 0x2, 0xbe7, 0xbe8, 0x7, 0x3bb, 0x2, 0x2, 0xbe8, 0xbe9, 
       0x5, 0x240, 0x121, 0x2, 0xbe9, 0xbb, 0x3, 0x2, 0x2, 0x2, 0xbea, 0xbed, 
       0x5, 0x20e, 0x108, 0x2, 0xbeb, 0xbed, 0x7, 0x3de, 0x2, 0x2, 0xbec, 
       0xbea, 0x3, 0x2, 0x2, 0x2, 0xbec, 0xbeb, 0x3, 0x2, 0x2, 0x2, 0xbed, 
       0xbd, 0x3, 0x2, 0x2, 0x2, 0xbee, 0xbef, 0x7, 0x3a, 0x2, 0x2, 0xbef, 
       0xbf5, 0x7, 0xa1, 0x2, 0x2, 0xbf0, 0xbf1, 0x7, 0x5c, 0x2, 0x2, 0xbf1, 
       0xbf2, 0x7, 0x46, 0x2, 0x2, 0xbf2, 0xbf3, 0x7, 0x1ed, 0x2, 0x2, 0xbf3, 
       0xbf5, 0x7, 0x19f, 0x2, 0x2, 0xbf4, 0xbee, 0x3, 0x2, 0x2, 0x2, 0xbf4, 
       0xbf0, 0x3, 0x2, 0x2, 0x2, 0xbf5, 0xbf, 0x3, 0x2, 0x2, 0x2, 0xbf6, 
       0xbf8, 0x7, 0x29, 0x2, 0x2, 0xbf7, 0xbf9, 0x7, 0x5e, 0x2, 0x2, 0xbf8, 
       0xbf7, 0x3, 0x2, 0x2, 0x2, 0xbf8, 0xbf9, 0x3, 0x2, 0x2, 0x2, 0xbf9, 
       0xbfb, 0x3, 0x2, 0x2, 0x2, 0xbfa, 0xbfc, 0x7, 0x1cb, 0x2, 0x2, 0xbfb, 
       0xbfa, 0x3, 0x2, 0x2, 0x2, 0xbfb, 0xbfc, 0x3, 0x2, 0x2, 0x2, 0xbfc, 
       0xbfe, 0x3, 0x2, 0x2, 0x2, 0xbfd, 0xbff, 0x7, 0x45, 0x2, 0x2, 0xbfe, 
       0xbfd, 0x3, 0x2, 0x2, 0x2, 0xbfe, 0xbff, 0x3, 0x2, 0x2, 0x2, 0xbff, 
       0xc00, 0x3, 0x2, 0x2, 0x2, 0xc00, 0xc01, 0x7, 0x3d, 0x2, 0x2, 0xc01, 
       0xc06, 0x5, 0x1f6, 0xfc, 0x2, 0xc02, 0xc04, 0x7, 0xd, 0x2, 0x2, 0xc03, 
       0xc02, 0x3, 0x2, 0x2, 0x2, 0xc03, 0xc04, 0x3, 0x2, 0x2, 0x2, 0xc04, 
       0xc05, 0x3, 0x2, 0x2, 0x2, 0xc05, 0xc07, 0x5, 0x20e, 0x108, 0x2, 
       0xc06, 0xc03, 0x3, 0x2, 0x2, 0x2, 0xc06, 0xc07, 0x3, 0x2, 0x2, 0x2, 
       0xc07, 0xc0d, 0x3, 0x2, 0x2, 0x2, 0xc08, 0xc09, 0x7, 0x71, 0x2, 0x2, 
       0xc09, 0xc0a, 0x7, 0x3c4, 0x2, 0x2, 0xc0a, 0xc0b, 0x5, 0x22c, 0x117, 
       0x2, 0xc0b, 0xc0c, 0x7, 0x3c5, 0x2, 0x2, 0xc0c, 0xc0e, 0x3, 0x2, 
       0x2, 0x2, 0xc0d, 0xc08, 0x3, 0x2, 0x2, 0x2, 0xc0d, 0xc0e, 0x3, 0x2, 
       0x2, 0x2, 0xc0e, 0xc10, 0x3, 0x2, 0x2, 0x2, 0xc0f, 0xc11, 0x5, 0x100, 
       0x81, 0x2, 0xc10, 0xc0f, 0x3, 0x2, 0x2, 0x2, 0xc10, 0xc11, 0x3, 0x2, 
       0x2, 0x2, 0xc11, 0xc13, 0x3, 0x2, 0x2, 0x2, 0xc12, 0xc14, 0x5, 0xd2, 
       0x6a, 0x2, 0xc13, 0xc12, 0x3, 0x2, 0x2, 0x2, 0xc13, 0xc14, 0x3, 0x2, 
       0x2, 0x2, 0xc14, 0xc17, 0x3, 0x2, 0x2, 0x2, 0xc15, 0xc16, 0x7, 0x58, 
       0x2, 0x2, 0xc16, 0xc18, 0x5, 0x212, 0x10a, 0x2, 0xc17, 0xc15, 0x3, 
       0x2, 0x2, 0x2, 0xc17, 0xc18, 0x3, 0x2, 0x2, 0x2, 0xc18, 0xc1, 0x3, 
       0x2, 0x2, 0x2, 0xc19, 0xc1b, 0x7, 0x29, 0x2, 0x2, 0xc1a, 0xc1c, 0x7, 
       0x5e, 0x2, 0x2, 0xc1b, 0xc1a, 0x3, 0x2, 0x2, 0x2, 0xc1b, 0xc1c, 0x3, 
       0x2, 0x2, 0x2, 0xc1c, 0xc1e, 0x3, 0x2, 0x2, 0x2, 0xc1d, 0xc1f, 0x7, 
       0x1cb, 0x2, 0x2, 0xc1e, 0xc1d, 0x3, 0x2, 0x2, 0x2, 0xc1e, 0xc1f, 
       0x3, 0x2, 0x2, 0x2, 0xc1f, 0xc21, 0x3, 0x2, 0x2, 0x2, 0xc20, 0xc22, 
       0x7, 0x45, 0x2, 0x2, 0xc21, 0xc20, 0x3, 0x2, 0x2, 0x2, 0xc21, 0xc22, 
       0x3, 0x2, 0x2, 0x2, 0xc22, 0xc3a, 0x3, 0x2, 0x2, 0x2, 0xc23, 0xc28, 
       0x5, 0xc4, 0x63, 0x2, 0xc24, 0xc25, 0x7, 0x3c6, 0x2, 0x2, 0xc25, 
       0xc27, 0x5, 0xc4, 0x63, 0x2, 0xc26, 0xc24, 0x3, 0x2, 0x2, 0x2, 0xc27, 
       0xc2a, 0x3, 0x2, 0x2, 0x2, 0xc28, 0xc26, 0x3, 0x2, 0x2, 0x2, 0xc28, 
       0xc29, 0x3, 0x2, 0x2, 0x2, 0xc29, 0xc2b, 0x3, 0x2, 0x2, 0x2, 0xc2a, 
       0xc28, 0x3, 0x2, 0x2, 0x2, 0xc2b, 0xc2c, 0x7, 0x3d, 0x2, 0x2, 0xc2c, 
       0xc2d, 0x5, 0xd6, 0x6c, 0x2, 0xc2d, 0xc3b, 0x3, 0x2, 0x2, 0x2, 0xc2e, 
       0xc2f, 0x7, 0x3d, 0x2, 0x2, 0xc2f, 0xc34, 0x5, 0xc4, 0x63, 0x2, 0xc30, 
       0xc31, 0x7, 0x3c6, 0x2, 0x2, 0xc31, 0xc33, 0x5, 0xc4, 0x63, 0x2, 
       0xc32, 0xc30, 0x3, 0x2, 0x2, 0x2, 0xc33, 0xc36, 0x3, 0x2, 0x2, 0x2, 
       0xc34, 0xc32, 0x3, 0x2, 0x2, 0x2, 0xc34, 0xc35, 0x3, 0x2, 0x2, 0x2, 
       0xc35, 0xc37, 0x3, 0x2, 0x2, 0x2, 0xc36, 0xc34, 0x3, 0x2, 0x2, 0x2, 
       0xc37, 0xc38, 0x7, 0xa4, 0x2, 0x2, 0xc38, 0xc39, 0x5, 0xd6, 0x6c, 
       0x2, 0xc39, 0xc3b, 0x3, 0x2, 0x2, 0x2, 0xc3a, 0xc23, 0x3, 0x2, 0x2, 
       0x2, 0xc3a, 0xc2e, 0x3, 0x2, 0x2, 0x2, 0xc3b, 0xc3d, 0x3, 0x2, 0x2, 
       0x2, 0xc3c, 0xc3e, 0x5, 0x100, 0x81, 0x2, 0xc3d, 0xc3c, 0x3, 0x2, 
       0x2, 0x2, 0xc3d, 0xc3e, 0x3, 0x2, 0x2, 0x2, 0xc3e, 0xc3, 0x3, 0x2, 
       0x2, 0x2, 0xc3f, 0xc42, 0x5, 0x1f6, 0xfc, 0x2, 0xc40, 0xc41, 0x7, 
       0x3c3, 0x2, 0x2, 0xc41, 0xc43, 0x7, 0x3b3, 0x2, 0x2, 0xc42, 0xc40, 
       0x3, 0x2, 0x2, 0x2, 0xc42, 0xc43, 0x3, 0x2, 0x2, 0x2, 0xc43, 0xc5, 
       0x3, 0x2, 0x2, 0x2, 0xc44, 0xc45, 0x7, 0x15f, 0x2, 0x2, 0xc45, 0xc46, 
       0x5, 0x1f6, 0xfc, 0x2, 0xc46, 0xc4b, 0x7, 0x1b2, 0x2, 0x2, 0xc47, 
       0xc49, 0x7, 0xd, 0x2, 0x2, 0xc48, 0xc47, 0x3, 0x2, 0x2, 0x2, 0xc48, 
       0xc49, 0x3, 0x2, 0x2, 0x2, 0xc49, 0xc4a, 0x3, 0x2, 0x2, 0x2, 0xc4a, 
       0xc4c, 0x5, 0x20e, 0x108, 0x2, 0xc4b, 0xc48, 0x3, 0x2, 0x2, 0x2, 
       0xc4b, 0xc4c, 0x3, 0x2, 0x2, 0x2, 0xc4c, 0xc7, 0x3, 0x2, 0x2, 0x2, 
       0xc4d, 0xc4e, 0x7, 0x15f, 0x2, 0x2, 0xc4e, 0xc4f, 0x5, 0x1f6, 0xfc, 
       0x2, 0xc4f, 0xc50, 0x7, 0x76, 0x2, 0x2, 0xc50, 0xc57, 0x5, 0x20e, 
       0x108, 0x2, 0xc51, 0xc52, 0x5, 0x262, 0x132, 0x2, 0xc52, 0xc53, 0x7, 
       0x3c4, 0x2, 0x2, 0xc53, 0xc54, 0x5, 0x236, 0x11c, 0x2, 0xc54, 0xc55, 
       0x7, 0x3c5, 0x2, 0x2, 0xc55, 0xc58, 0x3, 0x2, 0x2, 0x2, 0xc56, 0xc58, 
       0x9, 0x29, 0x2, 0x2, 0xc57, 0xc51, 0x3, 0x2, 0x2, 0x2, 0xc57, 0xc56, 
       0x3, 0x2, 0x2, 0x2, 0xc58, 0xc5a, 0x3, 0x2, 0x2, 0x2, 0xc59, 0xc5b, 
       0x5, 0x100, 0x81, 0x2, 0xc5a, 0xc59, 0x3, 0x2, 0x2, 0x2, 0xc5a, 0xc5b, 
       0x3, 0x2, 0x2, 0x2, 0xc5b, 0xc5e, 0x3, 0x2, 0x2, 0x2, 0xc5c, 0xc5d, 
       0x7, 0x58, 0x2, 0x2, 0xc5d, 0xc5f, 0x5, 0x212, 0x10a, 0x2, 0xc5e, 
       0xc5c, 0x3, 0x2, 0x2, 0x2, 0xc5e, 0xc5f, 0x3, 0x2, 0x2, 0x2, 0xc5f, 
       0xc9, 0x3, 0x2, 0x2, 0x2, 0xc60, 0xc61, 0x7, 0x15f, 0x2, 0x2, 0xc61, 
       0xc62, 0x5, 0x1f6, 0xfc, 0x2, 0xc62, 0xc63, 0x7, 0x76, 0x2, 0x2, 
       0xc63, 0xc65, 0x9, 0x2a, 0x2, 0x2, 0xc64, 0xc66, 0x5, 0x100, 0x81, 
       0x2, 0xc65, 0xc64, 0x3, 0x2, 0x2, 0x2, 0xc65, 0xc66, 0x3, 0x2, 0x2, 
       0x2, 0xc66, 0xc69, 0x3, 0x2, 0x2, 0x2, 0xc67, 0xc68, 0x7, 0x58, 0x2, 
       0x2, 0xc68, 0xc6a, 0x5, 0x212, 0x10a, 0x2, 0xc69, 0xc67, 0x3, 0x2, 
       0x2, 0x2, 0xc69, 0xc6a, 0x3, 0x2, 0x2, 0x2, 0xc6a, 0xcb, 0x3, 0x2, 
       0x2, 0x2, 0xc6b, 0xc6c, 0x7, 0x15f, 0x2, 0x2, 0xc6c, 0xc6d, 0x5, 
       0x1f6, 0xfc, 0x2, 0xc6d, 0xc6e, 0x7, 0x11a, 0x2, 0x2, 0xc6e, 0xcd, 
       0x3, 0x2, 0x2, 0x2, 0xc6f, 0xc71, 0x7, 0xa1, 0x2, 0x2, 0xc70, 0xc72, 
       0x7, 0x5e, 0x2, 0x2, 0xc71, 0xc70, 0x3, 0x2, 0x2, 0x2, 0xc71, 0xc72, 
       0x3, 0x2, 0x2, 0x2, 0xc72, 0xc74, 0x3, 0x2, 0x2, 0x2, 0xc73, 0xc75, 
       0x7, 0x45, 0x2, 0x2, 0xc74, 0xc73, 0x3, 0x2, 0x2, 0x2, 0xc74, 0xc75, 
       0x3, 0x2, 0x2, 0x2, 0xc75, 0xc76, 0x3, 0x2, 0x2, 0x2, 0xc76, 0xc7b, 
       0x5, 0x1f6, 0xfc, 0x2, 0xc77, 0xc79, 0x7, 0xd, 0x2, 0x2, 0xc78, 0xc77, 
       0x3, 0x2, 0x2, 0x2, 0xc78, 0xc79, 0x3, 0x2, 0x2, 0x2, 0xc79, 0xc7a, 
       0x3, 0x2, 0x2, 0x2, 0xc7a, 0xc7c, 0x5, 0x20e, 0x108, 0x2, 0xc7b, 
       0xc78, 0x3, 0x2, 0x2, 0x2, 0xc7b, 0xc7c, 0x3, 0x2, 0x2, 0x2, 0xc7c, 
       0xc7d, 0x3, 0x2, 0x2, 0x2, 0xc7d, 0xc7e, 0x7, 0x87, 0x2, 0x2, 0xc7e, 
       0xc83, 0x5, 0xba, 0x5e, 0x2, 0xc7f, 0xc80, 0x7, 0x3c6, 0x2, 0x2, 
       0xc80, 0xc82, 0x5, 0xba, 0x5e, 0x2, 0xc81, 0xc7f, 0x3, 0x2, 0x2, 
       0x2, 0xc82, 0xc85, 0x3, 0x2, 0x2, 0x2, 0xc83, 0xc81, 0x3, 0x2, 0x2, 
       0x2, 0xc83, 0xc84, 0x3, 0x2, 0x2, 0x2, 0xc84, 0xc87, 0x3, 0x2, 0x2, 
       0x2, 0xc85, 0xc83, 0x3, 0x2, 0x2, 0x2, 0xc86, 0xc88, 0x5, 0x100, 
       0x81, 0x2, 0xc87, 0xc86, 0x3, 0x2, 0x2, 0x2, 0xc87, 0xc88, 0x3, 0x2, 
       0x2, 0x2, 0xc88, 0xc8a, 0x3, 0x2, 0x2, 0x2, 0xc89, 0xc8b, 0x5, 0xd2, 
       0x6a, 0x2, 0xc8a, 0xc89, 0x3, 0x2, 0x2, 0x2, 0xc8a, 0xc8b, 0x3, 0x2, 
       0x2, 0x2, 0xc8b, 0xc8d, 0x3, 0x2, 0x2, 0x2, 0xc8c, 0xc8e, 0x5, 0x108, 
       0x85, 0x2, 0xc8d, 0xc8c, 0x3, 0x2, 0x2, 0x2, 0xc8d, 0xc8e, 0x3, 0x2, 
       0x2, 0x2, 0xc8e, 0xcf, 0x3, 0x2, 0x2, 0x2, 0xc8f, 0xc91, 0x7, 0xa1, 
       0x2, 0x2, 0xc90, 0xc92, 0x7, 0x5e, 0x2, 0x2, 0xc91, 0xc90, 0x3, 0x2, 
       0x2, 0x2, 0xc91, 0xc92, 0x3, 0x2, 0x2, 0x2, 0xc92, 0xc94, 0x3, 0x2, 
       0x2, 0x2, 0xc93, 0xc95, 0x7, 0x45, 0x2, 0x2, 0xc94, 0xc93, 0x3, 0x2, 
       0x2, 0x2, 0xc94, 0xc95, 0x3, 0x2, 0x2, 0x2, 0xc95, 0xc96, 0x3, 0x2, 
       0x2, 0x2, 0xc96, 0xc97, 0x5, 0xd6, 0x6c, 0x2, 0xc97, 0xc98, 0x7, 
       0x87, 0x2, 0x2, 0xc98, 0xc9d, 0x5, 0xba, 0x5e, 0x2, 0xc99, 0xc9a, 
       0x7, 0x3c6, 0x2, 0x2, 0xc9a, 0xc9c, 0x5, 0xba, 0x5e, 0x2, 0xc9b, 
       0xc99, 0x3, 0x2, 0x2, 0x2, 0xc9c, 0xc9f, 0x3, 0x2, 0x2, 0x2, 0xc9d, 
       0xc9b, 0x3, 0x2, 0x2, 0x2, 0xc9d, 0xc9e, 0x3, 0x2, 0x2, 0x2, 0xc9e, 
       0xca1, 0x3, 0x2, 0x2, 0x2, 0xc9f, 0xc9d, 0x3, 0x2, 0x2, 0x2, 0xca0, 
       0xca2, 0x5, 0x100, 0x81, 0x2, 0xca1, 0xca0, 0x3, 0x2, 0x2, 0x2, 0xca1, 
       0xca2, 0x3, 0x2, 0x2, 0x2, 0xca2, 0xd1, 0x3, 0x2, 0x2, 0x2, 0xca3, 
       0xca4, 0x7, 0x6d, 0x2, 0x2, 0xca4, 0xca5, 0x7, 0x12, 0x2, 0x2, 0xca5, 
       0xcaa, 0x5, 0xd4, 0x6b, 0x2, 0xca6, 0xca7, 0x7, 0x3c6, 0x2, 0x2, 
       0xca7, 0xca9, 0x5, 0xd4, 0x6b, 0x2, 0xca8, 0xca6, 0x3, 0x2, 0x2, 
       0x2, 0xca9, 0xcac, 0x3, 0x2, 0x2, 0x2, 0xcaa, 0xca8, 0x3, 0x2, 0x2, 
       0x2, 0xcaa, 0xcab, 0x3, 0x2, 0x2, 0x2, 0xcab, 0xd3, 0x3, 0x2, 0x2, 
       0x2, 0xcac, 0xcaa, 0x3, 0x2, 0x2, 0x2, 0xcad, 0xcaf, 0x5, 0x25a, 
       0x12e, 0x2, 0xcae, 0xcb0, 0x9, 0x2b, 0x2, 0x2, 0xcaf, 0xcae, 0x3, 
       0x2, 0x2, 0x2, 0xcaf, 0xcb0, 0x3, 0x2, 0x2, 0x2, 0xcb0, 0xd5, 0x3, 
       0x2, 0x2, 0x2, 0xcb1, 0xcb6, 0x5, 0xd8, 0x6d, 0x2, 0xcb2, 0xcb3, 
       0x7, 0x3c6, 0x2, 0x2, 0xcb3, 0xcb5, 0x5, 0xd8, 0x6d, 0x2, 0xcb4, 
       0xcb2, 0x3, 0x2, 0x2, 0x2, 0xcb5, 0xcb8, 0x3, 0x2, 0x2, 0x2, 0xcb6, 
       0xcb4, 0x3, 0x2, 0x2, 0x2, 0xcb6, 0xcb7, 0x3, 0x2, 0x2, 0x2, 0xcb7, 
       0xd7, 0x3, 0x2, 0x2, 0x2, 0xcb8, 0xcb6, 0x3, 0x2, 0x2, 0x2, 0xcb9, 
       0xcbd, 0x5, 0xda, 0x6e, 0x2, 0xcba, 0xcbc, 0x5, 0xe0, 0x71, 0x2, 
       0xcbb, 0xcba, 0x3, 0x2, 0x2, 0x2, 0xcbc, 0xcbf, 0x3, 0x2, 0x2, 0x2, 
       0xcbd, 0xcbb, 0x3, 0x2, 0x2, 0x2, 0xcbd, 0xcbe, 0x3, 0x2, 0x2, 0x2, 
       0xcbe, 0xccb, 0x3, 0x2, 0x2, 0x2, 0xcbf, 0xcbd, 0x3, 0x2, 0x2, 0x2, 
       0xcc0, 0xcc1, 0x7, 0x3c4, 0x2, 0x2, 0xcc1, 0xcc5, 0x5, 0xda, 0x6e, 
       0x2, 0xcc2, 0xcc4, 0x5, 0xe0, 0x71, 0x2, 0xcc3, 0xcc2, 0x3, 0x2, 
       0x2, 0x2, 0xcc4, 0xcc7, 0x3, 0x2, 0x2, 0x2, 0xcc5, 0xcc3, 0x3, 0x2, 
       0x2, 0x2, 0xcc5, 0xcc6, 0x3, 0x2, 0x2, 0x2, 0xcc6, 0xcc8, 0x3, 0x2, 
       0x2, 0x2, 0xcc7, 0xcc5, 0x3, 0x2, 0x2, 0x2, 0xcc8, 0xcc9, 0x7, 0x3c5, 
       0x2, 0x2, 0xcc9, 0xccb, 0x3, 0x2, 0x2, 0x2, 0xcca, 0xcb9, 0x3, 0x2, 
       0x2, 0x2, 0xcca, 0xcc0, 0x3, 0x2, 0x2, 0x2, 0xccb, 0xd9, 0x3, 0x2, 
       0x2, 0x2, 0xccc, 0xcd2, 0x5, 0x1f6, 0xfc, 0x2, 0xccd, 0xcce, 0x7, 
       0x71, 0x2, 0x2, 0xcce, 0xccf, 0x7, 0x3c4, 0x2, 0x2, 0xccf, 0xcd0, 
       0x5, 0x22c, 0x117, 0x2, 0xcd0, 0xcd1, 0x7, 0x3c5, 0x2, 0x2, 0xcd1, 
       0xcd3, 0x3, 0x2, 0x2, 0x2, 0xcd2, 0xccd, 0x3, 0x2, 0x2, 0x2, 0xcd2, 
       0xcd3, 0x3, 0x2, 0x2, 0x2, 0xcd3, 0xcd8, 0x3, 0x2, 0x2, 0x2, 0xcd4, 
       0xcd6, 0x7, 0xd, 0x2, 0x2, 0xcd5, 0xcd4, 0x3, 0x2, 0x2, 0x2, 0xcd5, 
       0xcd6, 0x3, 0x2, 0x2, 0x2, 0xcd6, 0xcd7, 0x3, 0x2, 0x2, 0x2, 0xcd7, 
       0xcd9, 0x5, 0x20e, 0x108, 0x2, 0xcd8, 0xcd5, 0x3, 0x2, 0x2, 0x2, 
       0xcd8, 0xcd9, 0x3, 0x2, 0x2, 0x2, 0xcd9, 0xce2, 0x3, 0x2, 0x2, 0x2, 
       0xcda, 0xcdf, 0x5, 0xdc, 0x6f, 0x2, 0xcdb, 0xcdc, 0x7, 0x3c6, 0x2, 
       0x2, 0xcdc, 0xcde, 0x5, 0xdc, 0x6f, 0x2, 0xcdd, 0xcdb, 0x3, 0x2, 
       0x2, 0x2, 0xcde, 0xce1, 0x3, 0x2, 0x2, 0x2, 0xcdf, 0xcdd, 0x3, 0x2, 
       0x2, 0x2, 0xcdf, 0xce0, 0x3, 0x2, 0x2, 0x2, 0xce0, 0xce3, 0x3, 0x2, 
       0x2, 0x2, 0xce1, 0xcdf, 0x3, 0x2, 0x2, 0x2, 0xce2, 0xcda, 0x3, 0x2, 
       0x2, 0x2, 0xce2, 0xce3, 0x3, 0x2, 0x2, 0x2, 0xce3, 0xcf5, 0x3, 0x2, 
       0x2, 0x2, 0xce4, 0xcea, 0x5, 0xb4, 0x5b, 0x2, 0xce5, 0xce6, 0x7, 
       0x3c4, 0x2, 0x2, 0xce6, 0xce7, 0x5, 0xb4, 0x5b, 0x2, 0xce7, 0xce8, 
       0x7, 0x3c5, 0x2, 0x2, 0xce8, 0xcea, 0x3, 0x2, 0x2, 0x2, 0xce9, 0xce4, 
       0x3, 0x2, 0x2, 0x2, 0xce9, 0xce5, 0x3, 0x2, 0x2, 0x2, 0xcea, 0xcec, 
       0x3, 0x2, 0x2, 0x2, 0xceb, 0xced, 0x7, 0xd, 0x2, 0x2, 0xcec, 0xceb, 
       0x3, 0x2, 0x2, 0x2, 0xcec, 0xced, 0x3, 0x2, 0x2, 0x2, 0xced, 0xcee, 
       0x3, 0x2, 0x2, 0x2, 0xcee, 0xcef, 0x5, 0x20e, 0x108, 0x2, 0xcef, 
       0xcf5, 0x3, 0x2, 0x2, 0x2, 0xcf0, 0xcf1, 0x7, 0x3c4, 0x2, 0x2, 0xcf1, 
       0xcf2, 0x5, 0xd6, 0x6c, 0x2, 0xcf2, 0xcf3, 0x7, 0x3c5, 0x2, 0x2, 
       0xcf3, 0xcf5, 0x3, 0x2, 0x2, 0x2, 0xcf4, 0xccc, 0x3, 0x2, 0x2, 0x2, 
       0xcf4, 0xce9, 0x3, 0x2, 0x2, 0x2, 0xcf4, 0xcf0, 0x3, 0x2, 0x2, 0x2, 
       0xcf5, 0xdb, 0x3, 0x2, 0x2, 0x2, 0xcf6, 0xcf7, 0x9, 0x2c, 0x2, 0x2, 
       0xcf7, 0xcfa, 0x9, 0x14, 0x2, 0x2, 0xcf8, 0xcf9, 0x7, 0x3a, 0x2, 
       0x2, 0xcf9, 0xcfb, 0x5, 0xde, 0x70, 0x2, 0xcfa, 0xcf8, 0x3, 0x2, 
       0x2, 0x2, 0xcfa, 0xcfb, 0x3, 0x2, 0x2, 0x2, 0xcfb, 0xcfc, 0x3, 0x2, 
       0x2, 0x2, 0xcfc, 0xcfd, 0x7, 0x3c4, 0x2, 0x2, 0xcfd, 0xcfe, 0x5, 
       0x22c, 0x117, 0x2, 0xcfe, 0xcff, 0x7, 0x3c5, 0x2, 0x2, 0xcff, 0xdd, 
       0x3, 0x2, 0x2, 0x2, 0xd00, 0xd06, 0x7, 0x50, 0x2, 0x2, 0xd01, 0xd02, 
       0x7, 0x6d, 0x2, 0x2, 0xd02, 0xd06, 0x7, 0x12, 0x2, 0x2, 0xd03, 0xd04, 
       0x7, 0x41, 0x2, 0x2, 0xd04, 0xd06, 0x7, 0x12, 0x2, 0x2, 0xd05, 0xd00, 
       0x3, 0x2, 0x2, 0x2, 0xd05, 0xd01, 0x3, 0x2, 0x2, 0x2, 0xd05, 0xd03, 
       0x3, 0x2, 0x2, 0x2, 0xd06, 0xdf, 0x3, 0x2, 0x2, 0x2, 0xd07, 0xd09, 
       0x9, 0x2d, 0x2, 0x2, 0xd08, 0xd07, 0x3, 0x2, 0x2, 0x2, 0xd08, 0xd09, 
       0x3, 0x2, 0x2, 0x2, 0xd09, 0xd0a, 0x3, 0x2, 0x2, 0x2, 0xd0a, 0xd0b, 
       0x7, 0x50, 0x2, 0x2, 0xd0b, 0xd0e, 0x5, 0xda, 0x6e, 0x2, 0xd0c, 0xd0f, 
       0x5, 0xe2, 0x72, 0x2, 0xd0d, 0xd0f, 0x5, 0xe4, 0x73, 0x2, 0xd0e, 
       0xd0c, 0x3, 0x2, 0x2, 0x2, 0xd0e, 0xd0d, 0x3, 0x2, 0x2, 0x2, 0xd0e, 
       0xd0f, 0x3, 0x2, 0x2, 0x2, 0xd0f, 0xd29, 0x3, 0x2, 0x2, 0x2, 0xd10, 
       0xd11, 0x7, 0x94, 0x2, 0x2, 0xd11, 0xd13, 0x5, 0xda, 0x6e, 0x2, 0xd12, 
       0xd14, 0x5, 0xe2, 0x72, 0x2, 0xd13, 0xd12, 0x3, 0x2, 0x2, 0x2, 0xd13, 
       0xd14, 0x3, 0x2, 0x2, 0x2, 0xd14, 0xd29, 0x3, 0x2, 0x2, 0x2, 0xd15, 
       0xd17, 0x9, 0x2e, 0x2, 0x2, 0xd16, 0xd18, 0x7, 0x6f, 0x2, 0x2, 0xd17, 
       0xd16, 0x3, 0x2, 0x2, 0x2, 0xd17, 0xd18, 0x3, 0x2, 0x2, 0x2, 0xd18, 
       0xd19, 0x3, 0x2, 0x2, 0x2, 0xd19, 0xd1a, 0x7, 0x50, 0x2, 0x2, 0xd1a, 
       0xd1d, 0x5, 0xda, 0x6e, 0x2, 0xd1b, 0xd1e, 0x5, 0xe2, 0x72, 0x2, 
       0xd1c, 0xd1e, 0x5, 0xe4, 0x73, 0x2, 0xd1d, 0xd1b, 0x3, 0x2, 0x2, 
       0x2, 0xd1d, 0xd1c, 0x3, 0x2, 0x2, 0x2, 0xd1e, 0xd29, 0x3, 0x2, 0x2, 
       0x2, 0xd1f, 0xd24, 0x7, 0x64, 0x2, 0x2, 0xd20, 0xd22, 0x9, 0x2e, 
       0x2, 0x2, 0xd21, 0xd23, 0x7, 0x6f, 0x2, 0x2, 0xd22, 0xd21, 0x3, 0x2, 
       0x2, 0x2, 0xd22, 0xd23, 0x3, 0x2, 0x2, 0x2, 0xd23, 0xd25, 0x3, 0x2, 
       0x2, 0x2, 0xd24, 0xd20, 0x3, 0x2, 0x2, 0x2, 0xd24, 0xd25, 0x3, 0x2, 
       0x2, 0x2, 0xd25, 0xd26, 0x3, 0x2, 0x2, 0x2, 0xd26, 0xd27, 0x7, 0x50, 
       0x2, 0x2, 0xd27, 0xd29, 0x5, 0xda, 0x6e, 0x2, 0xd28, 0xd08, 0x3, 
       0x2, 0x2, 0x2, 0xd28, 0xd10, 0x3, 0x2, 0x2, 0x2, 0xd28, 0xd15, 0x3, 
       0x2, 0x2, 0x2, 0xd28, 0xd1f, 0x3, 0x2, 0x2, 0x2, 0xd29, 0xe1, 0x3, 
       0x2, 0x2, 0x2, 0xd2a, 0xd2b, 0x7, 0x68, 0x2, 0x2, 0xd2b, 0xd2c, 0x5, 
       0x25a, 0x12e, 0x2, 0xd2c, 0xe3, 0x3, 0x2, 0x2, 0x2, 0xd2d, 0xd2e, 
       0x7, 0xa4, 0x2, 0x2, 0xd2e, 0xd2f, 0x7, 0x3c4, 0x2, 0x2, 0xd2f, 0xd30, 
       0x5, 0x22c, 0x117, 0x2, 0xd30, 0xd31, 0x7, 0x3c5, 0x2, 0x2, 0xd31, 
       0xe5, 0x3, 0x2, 0x2, 0x2, 0xd32, 0xd33, 0x7, 0x3c4, 0x2, 0x2, 0xd33, 
       0xd34, 0x5, 0xea, 0x76, 0x2, 0xd34, 0xd35, 0x7, 0x3c5, 0x2, 0x2, 
       0xd35, 0xd3b, 0x3, 0x2, 0x2, 0x2, 0xd36, 0xd37, 0x7, 0x3c4, 0x2, 
       0x2, 0xd37, 0xd38, 0x5, 0xe6, 0x74, 0x2, 0xd38, 0xd39, 0x7, 0x3c5, 
       0x2, 0x2, 0xd39, 0xd3b, 0x3, 0x2, 0x2, 0x2, 0xd3a, 0xd32, 0x3, 0x2, 
       0x2, 0x2, 0xd3a, 0xd36, 0x3, 0x2, 0x2, 0x2, 0xd3b, 0xe7, 0x3, 0x2, 
       0x2, 0x2, 0xd3c, 0xd3d, 0x7, 0x3c4, 0x2, 0x2, 0xd3d, 0xd3e, 0x5, 
       0xec, 0x77, 0x2, 0xd3e, 0xd3f, 0x7, 0x3c5, 0x2, 0x2, 0xd3f, 0xd45, 
       0x3, 0x2, 0x2, 0x2, 0xd40, 0xd41, 0x7, 0x3c4, 0x2, 0x2, 0xd41, 0xd42, 
       0x5, 0xe8, 0x75, 0x2, 0xd42, 0xd43, 0x7, 0x3c5, 0x2, 0x2, 0xd43, 
       0xd45, 0x3, 0x2, 0x2, 0x2, 0xd44, 0xd3c, 0x3, 0x2, 0x2, 0x2, 0xd44, 
       0xd40, 0x3, 0x2, 0x2, 0x2, 0xd45, 0xe9, 0x3, 0x2, 0x2, 0x2, 0xd46, 
       0xd4a, 0x7, 0x86, 0x2, 0x2, 0xd47, 0xd49, 0x5, 0xf2, 0x7a, 0x2, 0xd48, 
       0xd47, 0x3, 0x2, 0x2, 0x2, 0xd49, 0xd4c, 0x3, 0x2, 0x2, 0x2, 0xd4a, 
       0xd48, 0x3, 0x2, 0x2, 0x2, 0xd4a, 0xd4b, 0x3, 0x2, 0x2, 0x2, 0xd4b, 
       0xd4d, 0x3, 0x2, 0x2, 0x2, 0xd4c, 0xd4a, 0x3, 0x2, 0x2, 0x2, 0xd4d, 
       0xd4f, 0x5, 0xf4, 0x7b, 0x2, 0xd4e, 0xd50, 0x5, 0xf8, 0x7d, 0x2, 
       0xd4f, 0xd4e, 0x3, 0x2, 0x2, 0x2, 0xd4f, 0xd50, 0x3, 0x2, 0x2, 0x2, 
       0xd50, 0xd52, 0x3, 0x2, 0x2, 0x2, 0xd51, 0xd53, 0x5, 0xfe, 0x80, 
       0x2, 0xd52, 0xd51, 0x3, 0x2, 0x2, 0x2, 0xd52, 0xd53, 0x3, 0x2, 0x2, 
       0x2, 0xd53, 0xd55, 0x3, 0x2, 0x2, 0x2, 0xd54, 0xd56, 0x5, 0x100, 
       0x81, 0x2, 0xd55, 0xd54, 0x3, 0x2, 0x2, 0x2, 0xd55, 0xd56, 0x3, 0x2, 
       0x2, 0x2, 0xd56, 0xd58, 0x3, 0x2, 0x2, 0x2, 0xd57, 0xd59, 0x5, 0x102, 
       0x82, 0x2, 0xd58, 0xd57, 0x3, 0x2, 0x2, 0x2, 0xd58, 0xd59, 0x3, 0x2, 
       0x2, 0x2, 0xd59, 0xd5b, 0x3, 0x2, 0x2, 0x2, 0xd5a, 0xd5c, 0x5, 0x104, 
       0x83, 0x2, 0xd5b, 0xd5a, 0x3, 0x2, 0x2, 0x2, 0xd5b, 0xd5c, 0x3, 0x2, 
       0x2, 0x2, 0xd5c, 0xd5e, 0x3, 0x2, 0x2, 0x2, 0xd5d, 0xd5f, 0x5, 0xd2, 
       0x6a, 0x2, 0xd5e, 0xd5d, 0x3, 0x2, 0x2, 0x2, 0xd5e, 0xd5f, 0x3, 0x2, 
       0x2, 0x2, 0xd5f, 0xd61, 0x3, 0x2, 0x2, 0x2, 0xd60, 0xd62, 0x5, 0x108, 
       0x85, 0x2, 0xd61, 0xd60, 0x3, 0x2, 0x2, 0x2, 0xd61, 0xd62, 0x3, 0x2, 
       0x2, 0x2, 0xd62, 0xd81, 0x3, 0x2, 0x2, 0x2, 0xd63, 0xd67, 0x7, 0x86, 
       0x2, 0x2, 0xd64, 0xd66, 0x5, 0xf2, 0x7a, 0x2, 0xd65, 0xd64, 0x3, 
       0x2, 0x2, 0x2, 0xd66, 0xd69, 0x3, 0x2, 0x2, 0x2, 0xd67, 0xd65, 0x3, 
       0x2, 0x2, 0x2, 0xd67, 0xd68, 0x3, 0x2, 0x2, 0x2, 0xd68, 0xd6a, 0x3, 
       0x2, 0x2, 0x2, 0xd69, 0xd67, 0x3, 0x2, 0x2, 0x2, 0xd6a, 0xd6c, 0x5, 
       0xf4, 0x7b, 0x2, 0xd6b, 0xd6d, 0x5, 0xfe, 0x80, 0x2, 0xd6c, 0xd6b, 
       0x3, 0x2, 0x2, 0x2, 0xd6c, 0xd6d, 0x3, 0x2, 0x2, 0x2, 0xd6d, 0xd6f, 
       0x3, 0x2, 0x2, 0x2, 0xd6e, 0xd70, 0x5, 0x100, 0x81, 0x2, 0xd6f, 0xd6e, 
       0x3, 0x2, 0x2, 0x2, 0xd6f, 0xd70, 0x3, 0x2, 0x2, 0x2, 0xd70, 0xd72, 
       0x3, 0x2, 0x2, 0x2, 0xd71, 0xd73, 0x5, 0x102, 0x82, 0x2, 0xd72, 0xd71, 
       0x3, 0x2, 0x2, 0x2, 0xd72, 0xd73, 0x3, 0x2, 0x2, 0x2, 0xd73, 0xd75, 
       0x3, 0x2, 0x2, 0x2, 0xd74, 0xd76, 0x5, 0x104, 0x83, 0x2, 0xd75, 0xd74, 
       0x3, 0x2, 0x2, 0x2, 0xd75, 0xd76, 0x3, 0x2, 0x2, 0x2, 0xd76, 0xd78, 
       0x3, 0x2, 0x2, 0x2, 0xd77, 0xd79, 0x5, 0xd2, 0x6a, 0x2, 0xd78, 0xd77, 
       0x3, 0x2, 0x2, 0x2, 0xd78, 0xd79, 0x3, 0x2, 0x2, 0x2, 0xd79, 0xd7b, 
       0x3, 0x2, 0x2, 0x2, 0xd7a, 0xd7c, 0x5, 0x108, 0x85, 0x2, 0xd7b, 0xd7a, 
       0x3, 0x2, 0x2, 0x2, 0xd7b, 0xd7c, 0x3, 0x2, 0x2, 0x2, 0xd7c, 0xd7e, 
       0x3, 0x2, 0x2, 0x2, 0xd7d, 0xd7f, 0x5, 0xf8, 0x7d, 0x2, 0xd7e, 0xd7d, 
       0x3, 0x2, 0x2, 0x2, 0xd7e, 0xd7f, 0x3, 0x2, 0x2, 0x2, 0xd7f, 0xd81, 
       0x3, 0x2, 0x2, 0x2, 0xd80, 0xd46, 0x3, 0x2, 0x2, 0x2, 0xd80, 0xd63, 
       0x3, 0x2, 0x2, 0x2, 0xd81, 0xeb, 0x3, 0x2, 0x2, 0x2, 0xd82, 0xd86, 
       0x7, 0x86, 0x2, 0x2, 0xd83, 0xd85, 0x5, 0xf2, 0x7a, 0x2, 0xd84, 0xd83, 
       0x3, 0x2, 0x2, 0x2, 0xd85, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd86, 0xd84, 
       0x3, 0x2, 0x2, 0x2, 0xd86, 0xd87, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd89, 
       0x3, 0x2, 0x2, 0x2, 0xd88, 0xd86, 0x3, 0x2, 0x2, 0x2, 0xd89, 0xd8b, 
       0x5, 0xf4, 0x7b, 0x2, 0xd8a, 0xd8c, 0x5, 0xfe, 0x80, 0x2, 0xd8b, 
       0xd8a, 0x3, 0x2, 0x2, 0x2, 0xd8b, 0xd8c, 0x3, 0x2, 0x2, 0x2, 0xd8c, 
       0xd8e, 0x3, 0x2, 0x2, 0x2, 0xd8d, 0xd8f, 0x5, 0x100, 0x81, 0x2, 0xd8e, 
       0xd8d, 0x3, 0x2, 0x2, 0x2, 0xd8e, 0xd8f, 0x3, 0x2, 0x2, 0x2, 0xd8f, 
       0xd91, 0x3, 0x2, 0x2, 0x2, 0xd90, 0xd92, 0x5, 0x102, 0x82, 0x2, 0xd91, 
       0xd90, 0x3, 0x2, 0x2, 0x2, 0xd91, 0xd92, 0x3, 0x2, 0x2, 0x2, 0xd92, 
       0xd94, 0x3, 0x2, 0x2, 0x2, 0xd93, 0xd95, 0x5, 0x104, 0x83, 0x2, 0xd94, 
       0xd93, 0x3, 0x2, 0x2, 0x2, 0xd94, 0xd95, 0x3, 0x2, 0x2, 0x2, 0xd95, 
       0xd97, 0x3, 0x2, 0x2, 0x2, 0xd96, 0xd98, 0x5, 0xd2, 0x6a, 0x2, 0xd97, 
       0xd96, 0x3, 0x2, 0x2, 0x2, 0xd97, 0xd98, 0x3, 0x2, 0x2, 0x2, 0xd98, 
       0xd9a, 0x3, 0x2, 0x2, 0x2, 0xd99, 0xd9b, 0x5, 0x108, 0x85, 0x2, 0xd9a, 
       0xd99, 0x3, 0x2, 0x2, 0x2, 0xd9a, 0xd9b, 0x3, 0x2, 0x2, 0x2, 0xd9b, 
       0xed, 0x3, 0x2, 0x2, 0x2, 0xd9c, 0xd9e, 0x7, 0x9d, 0x2, 0x2, 0xd9d, 
       0xd9f, 0x9, 0x27, 0x2, 0x2, 0xd9e, 0xd9d, 0x3, 0x2, 0x2, 0x2, 0xd9e, 
       0xd9f, 0x3, 0x2, 0x2, 0x2, 0xd9f, 0xda0, 0x3, 0x2, 0x2, 0x2, 0xda0, 
       0xda1, 0x5, 0xe8, 0x75, 0x2, 0xda1, 0xef, 0x3, 0x2, 0x2, 0x2, 0xda2, 
       0xda4, 0x7, 0x9d, 0x2, 0x2, 0xda3, 0xda5, 0x9, 0x27, 0x2, 0x2, 0xda4, 
       0xda3, 0x3, 0x2, 0x2, 0x2, 0xda4, 0xda5, 0x3, 0x2, 0x2, 0x2, 0xda5, 
       0xda8, 0x3, 0x2, 0x2, 0x2, 0xda6, 0xda9, 0x5, 0xec, 0x77, 0x2, 0xda7, 
       0xda9, 0x5, 0xe8, 0x75, 0x2, 0xda8, 0xda6, 0x3, 0x2, 0x2, 0x2, 0xda8, 
       0xda7, 0x3, 0x2, 0x2, 0x2, 0xda9, 0xf1, 0x3, 0x2, 0x2, 0x2, 0xdaa, 
       0xdb3, 0x9, 0x2f, 0x2, 0x2, 0xdab, 0xdb3, 0x7, 0x43, 0x2, 0x2, 0xdac, 
       0xdb3, 0x7, 0x94, 0x2, 0x2, 0xdad, 0xdb3, 0x7, 0x91, 0x2, 0x2, 0xdae, 
       0xdb3, 0x7, 0x8f, 0x2, 0x2, 0xdaf, 0xdb3, 0x7, 0x1fc, 0x2, 0x2, 0xdb0, 
       0xdb3, 0x9, 0x30, 0x2, 0x2, 0xdb1, 0xdb3, 0x7, 0x90, 0x2, 0x2, 0xdb2, 
       0xdaa, 0x3, 0x2, 0x2, 0x2, 0xdb2, 0xdab, 0x3, 0x2, 0x2, 0x2, 0xdb2, 
       0xdac, 0x3, 0x2, 0x2, 0x2, 0xdb2, 0xdad, 0x3, 0x2, 0x2, 0x2, 0xdb2, 
       0xdae, 0x3, 0x2, 0x2, 0x2, 0xdb2, 0xdaf, 0x3, 0x2, 0x2, 0x2, 0xdb2, 
       0xdb0, 0x3, 0x2, 0x2, 0x2, 0xdb2, 0xdb1, 0x3, 0x2, 0x2, 0x2, 0xdb3, 
       0xf3, 0x3, 0x2, 0x2, 0x2, 0xdb4, 0xdb7, 0x7, 0x3b3, 0x2, 0x2, 0xdb5, 
       0xdb7, 0x5, 0xf6, 0x7c, 0x2, 0xdb6, 0xdb4, 0x3, 0x2, 0x2, 0x2, 0xdb6, 
       0xdb5, 0x3, 0x2, 0x2, 0x2, 0xdb7, 0xdbc, 0x3, 0x2, 0x2, 0x2, 0xdb8, 
       0xdb9, 0x7, 0x3c6, 0x2, 0x2, 0xdb9, 0xdbb, 0x5, 0xf6, 0x7c, 0x2, 
       0xdba, 0xdb8, 0x3, 0x2, 0x2, 0x2, 0xdbb, 0xdbe, 0x3, 0x2, 0x2, 0x2, 
       0xdbc, 0xdba, 0x3, 0x2, 0x2, 0x2, 0xdbc, 0xdbd, 0x3, 0x2, 0x2, 0x2, 
       0xdbd, 0xf5, 0x3, 0x2, 0x2, 0x2, 0xdbe, 0xdbc, 0x3, 0x2, 0x2, 0x2, 
       0xdbf, 0xdc0, 0x5, 0x1f4, 0xfb, 0x2, 0xdc0, 0xdc1, 0x7, 0x3c3, 0x2, 
       0x2, 0xdc1, 0xdc2, 0x7, 0x3b3, 0x2, 0x2, 0xdc2, 0xddd, 0x3, 0x2, 
       0x2, 0x2, 0xdc3, 0xdc8, 0x5, 0x1f8, 0xfd, 0x2, 0xdc4, 0xdc6, 0x7, 
       0xd, 0x2, 0x2, 0xdc5, 0xdc4, 0x3, 0x2, 0x2, 0x2, 0xdc5, 0xdc6, 0x3, 
       0x2, 0x2, 0x2, 0xdc6, 0xdc7, 0x3, 0x2, 0x2, 0x2, 0xdc7, 0xdc9, 0x5, 
       0x20e, 0x108, 0x2, 0xdc8, 0xdc5, 0x3, 0x2, 0x2, 0x2, 0xdc8, 0xdc9, 
       0x3, 0x2, 0x2, 0x2, 0xdc9, 0xddd, 0x3, 0x2, 0x2, 0x2, 0xdca, 0xdcf, 
       0x5, 0x246, 0x124, 0x2, 0xdcb, 0xdcd, 0x7, 0xd, 0x2, 0x2, 0xdcc, 
       0xdcb, 0x3, 0x2, 0x2, 0x2, 0xdcc, 0xdcd, 0x3, 0x2, 0x2, 0x2, 0xdcd, 
       0xdce, 0x3, 0x2, 0x2, 0x2, 0xdce, 0xdd0, 0x5, 0x20e, 0x108, 0x2, 
       0xdcf, 0xdcc, 0x3, 0x2, 0x2, 0x2, 0xdcf, 0xdd0, 0x3, 0x2, 0x2, 0x2, 
       0xdd0, 0xddd, 0x3, 0x2, 0x2, 0x2, 0xdd1, 0xdd2, 0x7, 0x3de, 0x2, 
       0x2, 0xdd2, 0xdd4, 0x7, 0x3aa, 0x2, 0x2, 0xdd3, 0xdd1, 0x3, 0x2, 
       0x2, 0x2, 0xdd3, 0xdd4, 0x3, 0x2, 0x2, 0x2, 0xdd4, 0xdd5, 0x3, 0x2, 
       0x2, 0x2, 0xdd5, 0xdda, 0x5, 0x25a, 0x12e, 0x2, 0xdd6, 0xdd8, 0x7, 
       0xd, 0x2, 0x2, 0xdd7, 0xdd6, 0x3, 0x2, 0x2, 0x2, 0xdd7, 0xdd8, 0x3, 
       0x2, 0x2, 0x2, 0xdd8, 0xdd9, 0x3, 0x2, 0x2, 0x2, 0xdd9, 0xddb, 0x5, 
       0x20e, 0x108, 0x2, 0xdda, 0xdd7, 0x3, 0x2, 0x2, 0x2, 0xdda, 0xddb, 
       0x3, 0x2, 0x2, 0x2, 0xddb, 0xddd, 0x3, 0x2, 0x2, 0x2, 0xddc, 0xdbf, 
       0x3, 0x2, 0x2, 0x2, 0xddc, 0xdc3, 0x3, 0x2, 0x2, 0x2, 0xddc, 0xdca, 
       0x3, 0x2, 0x2, 0x2, 0xddc, 0xdd3, 0x3, 0x2, 0x2, 0x2, 0xddd, 0xf7, 
       0x3, 0x2, 0x2, 0x2, 0xdde, 0xddf, 0x7, 0x4d, 0x2, 0x2, 0xddf, 0xde4, 
       0x5, 0xbc, 0x5f, 0x2, 0xde0, 0xde1, 0x7, 0x3c6, 0x2, 0x2, 0xde1, 
       0xde3, 0x5, 0xbc, 0x5f, 0x2, 0xde2, 0xde0, 0x3, 0x2, 0x2, 0x2, 0xde3, 
       0xde6, 0x3, 0x2, 0x2, 0x2, 0xde4, 0xde2, 0x3, 0x2, 0x2, 0x2, 0xde4, 
       0xde5, 0x3, 0x2, 0x2, 0x2, 0xde5, 0xe03, 0x3, 0x2, 0x2, 0x2, 0xde6, 
       0xde4, 0x3, 0x2, 0x2, 0x2, 0xde7, 0xde8, 0x7, 0x4d, 0x2, 0x2, 0xde8, 
       0xde9, 0x7, 0x139, 0x2, 0x2, 0xde9, 0xe03, 0x7, 0x3d3, 0x2, 0x2, 
       0xdea, 0xdeb, 0x7, 0x4d, 0x2, 0x2, 0xdeb, 0xdec, 0x7, 0x70, 0x2, 
       0x2, 0xdec, 0xdf0, 0x7, 0x3d3, 0x2, 0x2, 0xded, 0xdee, 0x7, 0x18, 
       0x2, 0x2, 0xdee, 0xdef, 0x7, 0x87, 0x2, 0x2, 0xdef, 0xdf1, 0x5, 0x200, 
       0x101, 0x2, 0xdf0, 0xded, 0x3, 0x2, 0x2, 0x2, 0xdf0, 0xdf1, 0x3, 
       0x2, 0x2, 0x2, 0xdf1, 0xdf8, 0x3, 0x2, 0x2, 0x2, 0xdf2, 0xdf4, 0x9, 
       0x24, 0x2, 0x2, 0xdf3, 0xdf5, 0x5, 0xfa, 0x7e, 0x2, 0xdf4, 0xdf3, 
       0x3, 0x2, 0x2, 0x2, 0xdf5, 0xdf6, 0x3, 0x2, 0x2, 0x2, 0xdf6, 0xdf4, 
       0x3, 0x2, 0x2, 0x2, 0xdf6, 0xdf7, 0x3, 0x2, 0x2, 0x2, 0xdf7, 0xdf9, 
       0x3, 0x2, 0x2, 0x2, 0xdf8, 0xdf2, 0x3, 0x2, 0x2, 0x2, 0xdf8, 0xdf9, 
       0x3, 0x2, 0x2, 0x2, 0xdf9, 0xe00, 0x3, 0x2, 0x2, 0x2, 0xdfa, 0xdfc, 
       0x7, 0x5a, 0x2, 0x2, 0xdfb, 0xdfd, 0x5, 0xfc, 0x7f, 0x2, 0xdfc, 0xdfb, 
       0x3, 0x2, 0x2, 0x2, 0xdfd, 0xdfe, 0x3, 0x2, 0x2, 0x2, 0xdfe, 0xdfc, 
       0x3, 0x2, 0x2, 0x2, 0xdfe, 0xdff, 0x3, 0x2, 0x2, 0x2, 0xdff, 0xe01, 
       0x3, 0x2, 0x2, 0x2, 0xe00, 0xdfa, 0x3, 0x2, 0x2, 0x2, 0xe00, 0xe01, 
       0x3, 0x2, 0x2, 0x2, 0xe01, 0xe03, 0x3, 0x2, 0x2, 0x2, 0xe02, 0xdde, 
       0x3, 0x2, 0x2, 0x2, 0xe02, 0xde7, 0x3, 0x2, 0x2, 0x2, 0xe02, 0xdea, 
       0x3, 0x2, 0x2, 0x2, 0xe03, 0xf9, 0x3, 0x2, 0x2, 0x2, 0xe04, 0xe05, 
       0x7, 0x96, 0x2, 0x2, 0xe05, 0xe06, 0x7, 0x12, 0x2, 0x2, 0xe06, 0xe11, 
       0x7, 0x3d3, 0x2, 0x2, 0xe07, 0xe09, 0x7, 0x6b, 0x2, 0x2, 0xe08, 0xe07, 
       0x3, 0x2, 0x2, 0x2, 0xe08, 0xe09, 0x3, 0x2, 0x2, 0x2, 0xe09, 0xe0a, 
       0x3, 0x2, 0x2, 0x2, 0xe0a, 0xe0b, 0x7, 0x33, 0x2, 0x2, 0xe0b, 0xe0c, 
       0x7, 0x12, 0x2, 0x2, 0xe0c, 0xe11, 0x7, 0x3d3, 0x2, 0x2, 0xe0d, 0xe0e, 
       0x7, 0x34, 0x2, 0x2, 0xe0e, 0xe0f, 0x7, 0x12, 0x2, 0x2, 0xe0f, 0xe11, 
       0x7, 0x3d3, 0x2, 0x2, 0xe10, 0xe04, 0x3, 0x2, 0x2, 0x2, 0xe10, 0xe08, 
       0x3, 0x2, 0x2, 0x2, 0xe10, 0xe0d, 0x3, 0x2, 0x2, 0x2, 0xe11, 0xfb, 
       0x3, 0x2, 0x2, 0x2, 0xe12, 0xe13, 0x7, 0x93, 0x2, 0x2, 0xe13, 0xe14, 
       0x7, 0x12, 0x2, 0x2, 0xe14, 0xe19, 0x7, 0x3d3, 0x2, 0x2, 0xe15, 0xe16, 
       0x7, 0x96, 0x2, 0x2, 0xe16, 0xe17, 0x7, 0x12, 0x2, 0x2, 0xe17, 0xe19, 
       0x7, 0x3d3, 0x2, 0x2, 0xe18, 0xe12, 0x3, 0x2, 0x2, 0x2, 0xe18, 0xe15, 
       0x3, 0x2, 0x2, 0x2, 0xe19, 0xfd, 0x3, 0x2, 0x2, 0x2, 0xe1a, 0xe1b, 
       0x7, 0x3d, 0x2, 0x2, 0xe1b, 0xe1c, 0x5, 0xd6, 0x6c, 0x2, 0xe1c, 0xff, 
       0x3, 0x2, 0x2, 0x2, 0xe1d, 0xe1e, 0x7, 0xa7, 0x2, 0x2, 0xe1e, 0xe1f, 
       0x5, 0x25a, 0x12e, 0x2, 0xe1f, 0x101, 0x3, 0x2, 0x2, 0x2, 0xe20, 
       0xe21, 0x7, 0x41, 0x2, 0x2, 0xe21, 0xe22, 0x7, 0x12, 0x2, 0x2, 0xe22, 
       0xe27, 0x5, 0x106, 0x84, 0x2, 0xe23, 0xe24, 0x7, 0x3c6, 0x2, 0x2, 
       0xe24, 0xe26, 0x5, 0x106, 0x84, 0x2, 0xe25, 0xe23, 0x3, 0x2, 0x2, 
       0x2, 0xe26, 0xe29, 0x3, 0x2, 0x2, 0x2, 0xe27, 0xe25, 0x3, 0x2, 0x2, 
       0x2, 0xe27, 0xe28, 0x3, 0x2, 0x2, 0x2, 0xe28, 0xe2c, 0x3, 0x2, 0x2, 
       0x2, 0xe29, 0xe27, 0x3, 0x2, 0x2, 0x2, 0xe2a, 0xe2b, 0x7, 0xa9, 0x2, 
       0x2, 0xe2b, 0xe2d, 0x7, 0x1e3, 0x2, 0x2, 0xe2c, 0xe2a, 0x3, 0x2, 
       0x2, 0x2, 0xe2c, 0xe2d, 0x3, 0x2, 0x2, 0x2, 0xe2d, 0x103, 0x3, 0x2, 
       0x2, 0x2, 0xe2e, 0xe2f, 0x7, 0x42, 0x2, 0x2, 0xe2f, 0xe30, 0x5, 0x25a, 
       0x12e, 0x2, 0xe30, 0x105, 0x3, 0x2, 0x2, 0x2, 0xe31, 0xe33, 0x5, 
       0x25a, 0x12e, 0x2, 0xe32, 0xe34, 0x9, 0x2b, 0x2, 0x2, 0xe33, 0xe32, 
       0x3, 0x2, 0x2, 0x2, 0xe33, 0xe34, 0x3, 0x2, 0x2, 0x2, 0xe34, 0x107, 
       0x3, 0x2, 0x2, 0x2, 0xe35, 0xe40, 0x7, 0x58, 0x2, 0x2, 0xe36, 0xe37, 
       0x5, 0x10a, 0x86, 0x2, 0xe37, 0xe38, 0x7, 0x3c6, 0x2, 0x2, 0xe38, 
       0xe3a, 0x3, 0x2, 0x2, 0x2, 0xe39, 0xe36, 0x3, 0x2, 0x2, 0x2, 0xe39, 
       0xe3a, 0x3, 0x2, 0x2, 0x2, 0xe3a, 0xe3b, 0x3, 0x2, 0x2, 0x2, 0xe3b, 
       0xe41, 0x5, 0x10a, 0x86, 0x2, 0xe3c, 0xe3d, 0x5, 0x10a, 0x86, 0x2, 
       0xe3d, 0xe3e, 0x7, 0x1ac, 0x2, 0x2, 0xe3e, 0xe3f, 0x5, 0x10a, 0x86, 
       0x2, 0xe3f, 0xe41, 0x3, 0x2, 0x2, 0x2, 0xe40, 0xe39, 0x3, 0x2, 0x2, 
       0x2, 0xe40, 0xe3c, 0x3, 0x2, 0x2, 0x2, 0xe41, 0x109, 0x3, 0x2, 0x2, 
       0x2, 0xe42, 0xe46, 0x5, 0x212, 0x10a, 0x2, 0xe43, 0xe46, 0x5, 0x1fe, 
       0x100, 0x2, 0xe44, 0xe46, 0x7, 0x3da, 0x2, 0x2, 0xe45, 0xe42, 0x3, 
       0x2, 0x2, 0x2, 0xe45, 0xe43, 0x3, 0x2, 0x2, 0x2, 0xe45, 0xe44, 0x3, 
       0x2, 0x2, 0x2, 0xe46, 0x10b, 0x3, 0x2, 0x2, 0x2, 0xe47, 0xe48, 0x7, 
       0x200, 0x2, 0x2, 0xe48, 0xe51, 0x7, 0x215, 0x2, 0x2, 0xe49, 0xe4e, 
       0x5, 0x122, 0x92, 0x2, 0xe4a, 0xe4b, 0x7, 0x3c6, 0x2, 0x2, 0xe4b, 
       0xe4d, 0x5, 0x122, 0x92, 0x2, 0xe4c, 0xe4a, 0x3, 0x2, 0x2, 0x2, 0xe4d, 
       0xe50, 0x3, 0x2, 0x2, 0x2, 0xe4e, 0xe4c, 0x3, 0x2, 0x2, 0x2, 0xe4e, 
       0xe4f, 0x3, 0x2, 0x2, 0x2, 0xe4f, 0xe52, 0x3, 0x2, 0x2, 0x2, 0xe50, 
       0xe4e, 0x3, 0x2, 0x2, 0x2, 0xe51, 0xe49, 0x3, 0x2, 0x2, 0x2, 0xe51, 
       0xe52, 0x3, 0x2, 0x2, 0x2, 0xe52, 0x10d, 0x3, 0x2, 0x2, 0x2, 0xe53, 
       0xe55, 0x7, 0x10a, 0x2, 0x2, 0xe54, 0xe56, 0x7, 0x22b, 0x2, 0x2, 
       0xe55, 0xe54, 0x3, 0x2, 0x2, 0x2, 0xe55, 0xe56, 0x3, 0x2, 0x2, 0x2, 
       0xe56, 0x10f, 0x3, 0x2, 0x2, 0x2, 0xe57, 0xe59, 0x7, 0x120, 0x2, 
       0x2, 0xe58, 0xe5a, 0x7, 0x22b, 0x2, 0x2, 0xe59, 0xe58, 0x3, 0x2, 
       0x2, 0x2, 0xe59, 0xe5a, 0x3, 0x2, 0x2, 0x2, 0xe5a, 0xe60, 0x3, 0x2, 
       0x2, 0x2, 0xe5b, 0xe5d, 0x7, 0xc, 0x2, 0x2, 0xe5c, 0xe5e, 0x7, 0x1a8, 
       0x2, 0x2, 0xe5d, 0xe5c, 0x3, 0x2, 0x2, 0x2, 0xe5d, 0xe5e, 0x3, 0x2, 
       0x2, 0x2, 0xe5e, 0xe5f, 0x3, 0x2, 0x2, 0x2, 0xe5f, 0xe61, 0x7, 0x113, 
       0x2, 0x2, 0xe60, 0xe5b, 0x3, 0x2, 0x2, 0x2, 0xe60, 0xe61, 0x3, 0x2, 
       0x2, 0x2, 0xe61, 0xe66, 0x3, 0x2, 0x2, 0x2, 0xe62, 0xe64, 0x7, 0x1a8, 
       0x2, 0x2, 0xe63, 0xe62, 0x3, 0x2, 0x2, 0x2, 0xe63, 0xe64, 0x3, 0x2, 
       0x2, 0x2, 0xe64, 0xe65, 0x3, 0x2, 0x2, 0x2, 0xe65, 0xe67, 0x7, 0x7a, 
       0x2, 0x2, 0xe66, 0xe63, 0x3, 0x2, 0x2, 0x2, 0xe66, 0xe67, 0x3, 0x2, 
       0x2, 0x2, 0xe67, 0x111, 0x3, 0x2, 0x2, 0x2, 0xe68, 0xe6a, 0x7, 0x1e2, 
       0x2, 0x2, 0xe69, 0xe6b, 0x7, 0x22b, 0x2, 0x2, 0xe6a, 0xe69, 0x3, 
       0x2, 0x2, 0x2, 0xe6a, 0xe6b, 0x3, 0x2, 0x2, 0x2, 0xe6b, 0xe71, 0x3, 
       0x2, 0x2, 0x2, 0xe6c, 0xe6e, 0x7, 0xc, 0x2, 0x2, 0xe6d, 0xe6f, 0x7, 
       0x1a8, 0x2, 0x2, 0xe6e, 0xe6d, 0x3, 0x2, 0x2, 0x2, 0xe6e, 0xe6f, 
       0x3, 0x2, 0x2, 0x2, 0xe6f, 0xe70, 0x3, 0x2, 0x2, 0x2, 0xe70, 0xe72, 
       0x7, 0x113, 0x2, 0x2, 0xe71, 0xe6c, 0x3, 0x2, 0x2, 0x2, 0xe71, 0xe72, 
       0x3, 0x2, 0x2, 0x2, 0xe72, 0xe77, 0x3, 0x2, 0x2, 0x2, 0xe73, 0xe75, 
       0x7, 0x1a8, 0x2, 0x2, 0xe74, 0xe73, 0x3, 0x2, 0x2, 0x2, 0xe74, 0xe75, 
       0x3, 0x2, 0x2, 0x2, 0xe75, 0xe76, 0x3, 0x2, 0x2, 0x2, 0xe76, 0xe78, 
       0x7, 0x7a, 0x2, 0x2, 0xe77, 0xe74, 0x3, 0x2, 0x2, 0x2, 0xe77, 0xe78, 
       0x3, 0x2, 0x2, 0x2, 0xe78, 0x113, 0x3, 0x2, 0x2, 0x2, 0xe79, 0xe7a, 
       0x7, 0x1e8, 0x2, 0x2, 0xe7a, 0xe7b, 0x5, 0x20e, 0x108, 0x2, 0xe7b, 
       0x115, 0x3, 0x2, 0x2, 0x2, 0xe7c, 0xe7e, 0x7, 0x1e2, 0x2, 0x2, 0xe7d, 
       0xe7f, 0x7, 0x22b, 0x2, 0x2, 0xe7e, 0xe7d, 0x3, 0x2, 0x2, 0x2, 0xe7e, 
       0xe7f, 0x3, 0x2, 0x2, 0x2, 0xe7f, 0xe80, 0x3, 0x2, 0x2, 0x2, 0xe80, 
       0xe82, 0x7, 0x98, 0x2, 0x2, 0xe81, 0xe83, 0x7, 0x1e8, 0x2, 0x2, 0xe82, 
       0xe81, 0x3, 0x2, 0x2, 0x2, 0xe82, 0xe83, 0x3, 0x2, 0x2, 0x2, 0xe83, 
       0xe84, 0x3, 0x2, 0x2, 0x2, 0xe84, 0xe85, 0x5, 0x20e, 0x108, 0x2, 
       0xe85, 0x117, 0x3, 0x2, 0x2, 0x2, 0xe86, 0xe87, 0x7, 0x7a, 0x2, 0x2, 
       0xe87, 0xe88, 0x7, 0x1e8, 0x2, 0x2, 0xe88, 0xe89, 0x5, 0x20e, 0x108, 
       0x2, 0xe89, 0x119, 0x3, 0x2, 0x2, 0x2, 0xe8a, 0xe8b, 0x7, 0x5c, 0x2, 
       0x2, 0xe8b, 0xe8c, 0x7, 0x23d, 0x2, 0x2, 0xe8c, 0xe91, 0x5, 0x124, 
       0x93, 0x2, 0xe8d, 0xe8e, 0x7, 0x3c6, 0x2, 0x2, 0xe8e, 0xe90, 0x5, 
       0x124, 0x93, 0x2, 0xe8f, 0xe8d, 0x3, 0x2, 0x2, 0x2, 0xe90, 0xe93, 
       0x3, 0x2, 0x2, 0x2, 0xe91, 0xe8f, 0x3, 0x2, 0x2, 0x2, 0xe91, 0xe92, 
       0x3, 0x2, 0x2, 0x2, 0xe92, 0x11b, 0x3, 0x2, 0x2, 0x2, 0xe93, 0xe91, 
       0x3, 0x2, 0x2, 0x2, 0xe94, 0xe95, 0x7, 0x9f, 0x2, 0x2, 0xe95, 0xe96, 
       0x7, 0x23d, 0x2, 0x2, 0xe96, 0x11d, 0x3, 0x2, 0x2, 0x2, 0xe97, 0xe98, 
       0x7, 0x87, 0x2, 0x2, 0xe98, 0xe99, 0x7, 0x106, 0x2, 0x2, 0xe99, 0xe9a, 
       0x7, 0x3bb, 0x2, 0x2, 0xe9a, 0xe9b, 0x9, 0x18, 0x2, 0x2, 0xe9b, 0x11f, 
       0x3, 0x2, 0x2, 0x2, 0xe9c, 0xe9e, 0x7, 0x87, 0x2, 0x2, 0xe9d, 0xe9f, 
       0x9, 0x31, 0x2, 0x2, 0xe9e, 0xe9d, 0x3, 0x2, 0x2, 0x2, 0xe9e, 0xe9f, 
       0x3, 0x2, 0x2, 0x2, 0xe9f, 0xea0, 0x3, 0x2, 0x2, 0x2, 0xea0, 0xea1, 
       0x7, 0x215, 0x2, 0x2, 0xea1, 0xea6, 0x5, 0x128, 0x95, 0x2, 0xea2, 
       0xea3, 0x7, 0x3c6, 0x2, 0x2, 0xea3, 0xea5, 0x5, 0x128, 0x95, 0x2, 
       0xea4, 0xea2, 0x3, 0x2, 0x2, 0x2, 0xea5, 0xea8, 0x3, 0x2, 0x2, 0x2, 
       0xea6, 0xea4, 0x3, 0x2, 0x2, 0x2, 0xea6, 0xea7, 0x3, 0x2, 0x2, 0x2, 
       0xea7, 0x121, 0x3, 0x2, 0x2, 0x2, 0xea8, 0xea6, 0x3, 0x2, 0x2, 0x2, 
       0xea9, 0xeaa, 0x7, 0xa9, 0x2, 0x2, 0xeaa, 0xeab, 0x7, 0x127, 0x2, 
       0x2, 0xeab, 0xeb1, 0x7, 0x1f3, 0x2, 0x2, 0xeac, 0xead, 0x7, 0x76, 
       0x2, 0x2, 0xead, 0xeb1, 0x7, 0xaa, 0x2, 0x2, 0xeae, 0xeaf, 0x7, 0x76, 
       0x2, 0x2, 0xeaf, 0xeb1, 0x7, 0x1b1, 0x2, 0x2, 0xeb0, 0xea9, 0x3, 
       0x2, 0x2, 0x2, 0xeb0, 0xeac, 0x3, 0x2, 0x2, 0x2, 0xeb0, 0xeae, 0x3, 
       0x2, 0x2, 0x2, 0xeb1, 0x123, 0x3, 0x2, 0x2, 0x2, 0xeb2, 0xeb7, 0x5, 
       0x1f6, 0xfc, 0x2, 0xeb3, 0xeb5, 0x7, 0xd, 0x2, 0x2, 0xeb4, 0xeb3, 
       0x3, 0x2, 0x2, 0x2, 0xeb4, 0xeb5, 0x3, 0x2, 0x2, 0x2, 0xeb5, 0xeb6, 
       0x3, 0x2, 0x2, 0x2, 0xeb6, 0xeb8, 0x5, 0x20e, 0x108, 0x2, 0xeb7, 
       0xeb4, 0x3, 0x2, 0x2, 0x2, 0xeb7, 0xeb8, 0x3, 0x2, 0x2, 0x2, 0xeb8, 
       0xeb9, 0x3, 0x2, 0x2, 0x2, 0xeb9, 0xeba, 0x5, 0x126, 0x94, 0x2, 0xeba, 
       0x125, 0x3, 0x2, 0x2, 0x2, 0xebb, 0xebd, 0x7, 0x76, 0x2, 0x2, 0xebc, 
       0xebe, 0x7, 0x17c, 0x2, 0x2, 0xebd, 0xebc, 0x3, 0x2, 0x2, 0x2, 0xebd, 
       0xebe, 0x3, 0x2, 0x2, 0x2, 0xebe, 0xec4, 0x3, 0x2, 0x2, 0x2, 0xebf, 
       0xec1, 0x7, 0x5e, 0x2, 0x2, 0xec0, 0xebf, 0x3, 0x2, 0x2, 0x2, 0xec0, 
       0xec1, 0x3, 0x2, 0x2, 0x2, 0xec1, 0xec2, 0x3, 0x2, 0x2, 0x2, 0xec2, 
       0xec4, 0x7, 0xaa, 0x2, 0x2, 0xec3, 0xebb, 0x3, 0x2, 0x2, 0x2, 0xec3, 
       0xec0, 0x3, 0x2, 0x2, 0x2, 0xec4, 0x127, 0x3, 0x2, 0x2, 0x2, 0xec5, 
       0xec6, 0x7, 0x172, 0x2, 0x2, 0xec6, 0xec7, 0x7, 0x17a, 0x2, 0x2, 
       0xec7, 0xecd, 0x5, 0x12a, 0x96, 0x2, 0xec8, 0xec9, 0x7, 0x76, 0x2, 
       0x2, 0xec9, 0xecd, 0x7, 0xaa, 0x2, 0x2, 0xeca, 0xecb, 0x7, 0x76, 
       0x2, 0x2, 0xecb, 0xecd, 0x7, 0x1b1, 0x2, 0x2, 0xecc, 0xec5, 0x3, 
       0x2, 0x2, 0x2, 0xecc, 0xec8, 0x3, 0x2, 0x2, 0x2, 0xecc, 0xeca, 0x3, 
       0x2, 0x2, 0x2, 0xecd, 0x129, 0x3, 0x2, 0x2, 0x2, 0xece, 0xecf, 0x7, 
       0x27b, 0x2, 0x2, 0xecf, 0xed6, 0x7, 0x76, 0x2, 0x2, 0xed0, 0xed1, 
       0x7, 0x76, 0x2, 0x2, 0xed1, 0xed6, 0x7, 0x27c, 0x2, 0x2, 0xed2, 0xed3, 
       0x7, 0x76, 0x2, 0x2, 0xed3, 0xed6, 0x7, 0x27d, 0x2, 0x2, 0xed4, 0xed6, 
       0x7, 0x27e, 0x2, 0x2, 0xed5, 0xece, 0x3, 0x2, 0x2, 0x2, 0xed5, 0xed0, 
       0x3, 0x2, 0x2, 0x2, 0xed5, 0xed2, 0x3, 0x2, 0x2, 0x2, 0xed5, 0xed4, 
       0x3, 0x2, 0x2, 0x2, 0xed6, 0x12b, 0x3, 0x2, 0x2, 0x2, 0xed7, 0xed8, 
       0x7, 0x17, 0x2, 0x2, 0xed8, 0xed9, 0x7, 0x17f, 0x2, 0x2, 0xed9, 0xeda, 
       0x7, 0x98, 0x2, 0x2, 0xeda, 0xedf, 0x5, 0x13e, 0xa0, 0x2, 0xedb, 
       0xedc, 0x7, 0x3c6, 0x2, 0x2, 0xedc, 0xede, 0x5, 0x13e, 0xa0, 0x2, 
       0xedd, 0xedb, 0x3, 0x2, 0x2, 0x2, 0xede, 0xee1, 0x3, 0x2, 0x2, 0x2, 
       0xedf, 0xedd, 0x3, 0x2, 0x2, 0x2, 0xedf, 0xee0, 0x3, 0x2, 0x2, 0x2, 
       0xee0, 0xee3, 0x3, 0x2, 0x2, 0x2, 0xee1, 0xedf, 0x3, 0x2, 0x2, 0x2, 
       0xee2, 0xee4, 0x5, 0x146, 0xa4, 0x2, 0xee3, 0xee2, 0x3, 0x2, 0x2, 
       0x2, 0xee3, 0xee4, 0x3, 0x2, 0x2, 0x2, 0xee4, 0x12d, 0x3, 0x2, 0x2, 
       0x2, 0xee5, 0xee6, 0x7, 0x17, 0x2, 0x2, 0xee6, 0xee7, 0x7, 0x1de, 
       0x2, 0x2, 0xee7, 0xee8, 0x7, 0x153, 0x2, 0x2, 0xee8, 0xeed, 0x5, 
       0x148, 0xa5, 0x2, 0xee9, 0xeea, 0x7, 0x3c6, 0x2, 0x2, 0xeea, 0xeec, 
       0x5, 0x148, 0xa5, 0x2, 0xeeb, 0xee9, 0x3, 0x2, 0x2, 0x2, 0xeec, 0xeef, 
       0x3, 0x2, 0x2, 0x2, 0xeed, 0xeeb, 0x3, 0x2, 0x2, 0x2, 0xeed, 0xeee, 
       0x3, 0x2, 0x2, 0x2, 0xeee, 0x12f, 0x3, 0x2, 0x2, 0x2, 0xeef, 0xeed, 
       0x3, 0x2, 0x2, 0x2, 0xef0, 0xef1, 0x7, 0x74, 0x2, 0x2, 0xef1, 0xef2, 
       0x9, 0x32, 0x2, 0x2, 0xef2, 0xef7, 0x7, 0x17e, 0x2, 0x2, 0xef3, 0xef4, 
       0x7, 0x98, 0x2, 0x2, 0xef4, 0xef8, 0x7, 0x3d3, 0x2, 0x2, 0xef5, 0xef6, 
       0x7, 0xf, 0x2, 0x2, 0xef6, 0xef8, 0x7, 0x3d3, 0x2, 0x2, 0xef7, 0xef3, 
       0x3, 0x2, 0x2, 0x2, 0xef7, 0xef5, 0x3, 0x2, 0x2, 0x2, 0xef8, 0x131, 
       0x3, 0x2, 0x2, 0x2, 0xef9, 0xefa, 0x7, 0x1df, 0x2, 0x2, 0xefa, 0xefb, 
       0x7, 0x17f, 0x2, 0x2, 0xefb, 0x133, 0x3, 0x2, 0x2, 0x2, 0xefc, 0xefd, 
       0x7, 0x1df, 0x2, 0x2, 0xefd, 0xeff, 0x7, 0x1f1, 0x2, 0x2, 0xefe, 
       0xf00, 0x7, 0x8, 0x2, 0x2, 0xeff, 0xefe, 0x3, 0x2, 0x2, 0x2, 0xeff, 
       0xf00, 0x3, 0x2, 0x2, 0x2, 0xf00, 0xf02, 0x3, 0x2, 0x2, 0x2, 0xf01, 
       0xf03, 0x5, 0x146, 0xa4, 0x2, 0xf02, 0xf01, 0x3, 0x2, 0x2, 0x2, 0xf02, 
       0xf03, 0x3, 0x2, 0x2, 0x2, 0xf03, 0x135, 0x3, 0x2, 0x2, 0x2, 0xf04, 
       0xf05, 0x7, 0x200, 0x2, 0x2, 0xf05, 0xf0e, 0x7, 0x1f1, 0x2, 0x2, 
       0xf06, 0xf0b, 0x5, 0x14c, 0xa7, 0x2, 0xf07, 0xf08, 0x7, 0x3c6, 0x2, 
       0x2, 0xf08, 0xf0a, 0x5, 0x14c, 0xa7, 0x2, 0xf09, 0xf07, 0x3, 0x2, 
       0x2, 0x2, 0xf0a, 0xf0d, 0x3, 0x2, 0x2, 0x2, 0xf0b, 0xf09, 0x3, 0x2, 
       0x2, 0x2, 0xf0b, 0xf0c, 0x3, 0x2, 0x2, 0x2, 0xf0c, 0xf0f, 0x3, 0x2, 
       0x2, 0x2, 0xf0d, 0xf0b, 0x3, 0x2, 0x2, 0x2, 0xf0e, 0xf06, 0x3, 0x2, 
       0x2, 0x2, 0xf0e, 0xf0f, 0x3, 0x2, 0x2, 0x2, 0xf0f, 0xf12, 0x3, 0x2, 
       0x2, 0x2, 0xf10, 0xf11, 0x7, 0x21d, 0x2, 0x2, 0xf11, 0xf13, 0x5, 
       0x14e, 0xa8, 0x2, 0xf12, 0xf10, 0x3, 0x2, 0x2, 0x2, 0xf12, 0xf13, 
       0x3, 0x2, 0x2, 0x2, 0xf13, 0xf17, 0x3, 0x2, 0x2, 0x2, 0xf14, 0xf16, 
       0x5, 0x150, 0xa9, 0x2, 0xf15, 0xf14, 0x3, 0x2, 0x2, 0x2, 0xf16, 0xf19, 
       0x3, 0x2, 0x2, 0x2, 0xf17, 0xf15, 0x3, 0x2, 0x2, 0x2, 0xf17, 0xf18, 
       0x3, 0x2, 0x2, 0x2, 0xf18, 0xf1b, 0x3, 0x2, 0x2, 0x2, 0xf19, 0xf17, 
       0x3, 0x2, 0x2, 0x2, 0xf1a, 0xf1c, 0x5, 0x146, 0xa4, 0x2, 0xf1b, 0xf1a, 
       0x3, 0x2, 0x2, 0x2, 0xf1b, 0xf1c, 0x3, 0x2, 0x2, 0x2, 0xf1c, 0x137, 
       0x3, 0x2, 0x2, 0x2, 0xf1d, 0xf1e, 0x7, 0x206, 0x2, 0x2, 0xf1e, 0xf27, 
       0x7, 0x1f1, 0x2, 0x2, 0xf1f, 0xf24, 0x5, 0x14c, 0xa7, 0x2, 0xf20, 
       0xf21, 0x7, 0x3c6, 0x2, 0x2, 0xf21, 0xf23, 0x5, 0x14c, 0xa7, 0x2, 
       0xf22, 0xf20, 0x3, 0x2, 0x2, 0x2, 0xf23, 0xf26, 0x3, 0x2, 0x2, 0x2, 
       0xf24, 0xf22, 0x3, 0x2, 0x2, 0x2, 0xf24, 0xf25, 0x3, 0x2, 0x2, 0x2, 
       0xf25, 0xf28, 0x3, 0x2, 0x2, 0x2, 0xf26, 0xf24, 0x3, 0x2, 0x2, 0x2, 
       0xf27, 0xf1f, 0x3, 0x2, 0x2, 0x2, 0xf27, 0xf28, 0x3, 0x2, 0x2, 0x2, 
       0xf28, 0x139, 0x3, 0x2, 0x2, 0x2, 0xf29, 0xf2a, 0x7, 0x200, 0x2, 
       0x2, 0xf2a, 0xf2b, 0x7, 0x15e, 0x2, 0x2, 0xf2b, 0x13b, 0x3, 0x2, 
       0x2, 0x2, 0xf2c, 0xf2d, 0x7, 0x206, 0x2, 0x2, 0xf2d, 0xf2e, 0x7, 
       0x15e, 0x2, 0x2, 0xf2e, 0x13d, 0x3, 0x2, 0x2, 0x2, 0xf2f, 0xf30, 
       0x5, 0x140, 0xa1, 0x2, 0xf30, 0xf31, 0x7, 0x3bb, 0x2, 0x2, 0xf31, 
       0xf32, 0x7, 0x3d3, 0x2, 0x2, 0xf32, 0xf4d, 0x3, 0x2, 0x2, 0x2, 0xf33, 
       0xf34, 0x5, 0x142, 0xa2, 0x2, 0xf34, 0xf35, 0x7, 0x3bb, 0x2, 0x2, 
       0xf35, 0xf36, 0x5, 0x212, 0x10a, 0x2, 0xf36, 0xf4d, 0x3, 0x2, 0x2, 
       0x2, 0xf37, 0xf38, 0x5, 0x144, 0xa3, 0x2, 0xf38, 0xf39, 0x7, 0x3bb, 
       0x2, 0x2, 0xf39, 0xf3a, 0x9, 0x18, 0x2, 0x2, 0xf3a, 0xf4d, 0x3, 0x2, 
       0x2, 0x2, 0xf3b, 0xf3c, 0x7, 0x183, 0x2, 0x2, 0xf3c, 0xf3d, 0x7, 
       0x3bb, 0x2, 0x2, 0xf3d, 0xf4d, 0x7, 0x3d6, 0x2, 0x2, 0xf3e, 0xf3f, 
       0x7, 0x165, 0x2, 0x2, 0xf3f, 0xf40, 0x7, 0x3bb, 0x2, 0x2, 0xf40, 
       0xf49, 0x7, 0x3c4, 0x2, 0x2, 0xf41, 0xf46, 0x5, 0x20e, 0x108, 0x2, 
       0xf42, 0xf43, 0x7, 0x3c6, 0x2, 0x2, 0xf43, 0xf45, 0x5, 0x20e, 0x108, 
       0x2, 0xf44, 0xf42, 0x3, 0x2, 0x2, 0x2, 0xf45, 0xf48, 0x3, 0x2, 0x2, 
       0x2, 0xf46, 0xf44, 0x3, 0x2, 0x2, 0x2, 0xf46, 0xf47, 0x3, 0x2, 0x2, 
       0x2, 0xf47, 0xf4a, 0x3, 0x2, 0x2, 0x2, 0xf48, 0xf46, 0x3, 0x2, 0x2, 
       0x2, 0xf49, 0xf41, 0x3, 0x2, 0x2, 0x2, 0xf49, 0xf4a, 0x3, 0x2, 0x2, 
       0x2, 0xf4a, 0xf4b, 0x3, 0x2, 0x2, 0x2, 0xf4b, 0xf4d, 0x7, 0x3c5, 
       0x2, 0x2, 0xf4c, 0xf2f, 0x3, 0x2, 0x2, 0x2, 0xf4c, 0xf33, 0x3, 0x2, 
       0x2, 0x2, 0xf4c, 0xf37, 0x3, 0x2, 0x2, 0x2, 0xf4c, 0xf3b, 0x3, 0x2, 
       0x2, 0x2, 0xf4c, 0xf3e, 0x3, 0x2, 0x2, 0x2, 0xf4d, 0x13f, 0x3, 0x2, 
       0x2, 0x2, 0xf4e, 0xf4f, 0x9, 0x33, 0x2, 0x2, 0xf4f, 0x141, 0x3, 0x2, 
       0x2, 0x2, 0xf50, 0xf51, 0x9, 0x34, 0x2, 0x2, 0xf51, 0x143, 0x3, 0x2, 
       0x2, 0x2, 0xf52, 0xf53, 0x9, 0x35, 0x2, 0x2, 0xf53, 0x145, 0x3, 0x2, 
       0x2, 0x2, 0xf54, 0xf55, 0x7, 0x3a, 0x2, 0x2, 0xf55, 0xf56, 0x7, 0x115, 
       0x2, 0x2, 0xf56, 0xf57, 0x7, 0x3d3, 0x2, 0x2, 0xf57, 0x147, 0x3, 
       0x2, 0x2, 0x2, 0xf58, 0xf59, 0x7, 0x1d7, 0x2, 0x2, 0xf59, 0xf5a, 
       0x7, 0x3bb, 0x2, 0x2, 0xf5a, 0xf5b, 0x7, 0x3c4, 0x2, 0x2, 0xf5b, 
       0xf5c, 0x5, 0x22c, 0x117, 0x2, 0xf5c, 0xf5d, 0x7, 0x3c5, 0x2, 0x2, 
       0xf5d, 0xf8a, 0x3, 0x2, 0x2, 0x2, 0xf5e, 0xf5f, 0x7, 0x1d9, 0x2, 
       0x2, 0xf5f, 0xf60, 0x7, 0x3bb, 0x2, 0x2, 0xf60, 0xf61, 0x7, 0x3c4, 
       0x2, 0x2, 0xf61, 0xf62, 0x5, 0x22c, 0x117, 0x2, 0xf62, 0xf63, 0x7, 
       0x3c5, 0x2, 0x2, 0xf63, 0xf8a, 0x3, 0x2, 0x2, 0x2, 0xf64, 0xf65, 
       0x7, 0x1d8, 0x2, 0x2, 0xf65, 0xf66, 0x7, 0x3bb, 0x2, 0x2, 0xf66, 
       0xf67, 0x7, 0x3c4, 0x2, 0x2, 0xf67, 0xf68, 0x5, 0x22e, 0x118, 0x2, 
       0xf68, 0xf69, 0x7, 0x3c5, 0x2, 0x2, 0xf69, 0xf8a, 0x3, 0x2, 0x2, 
       0x2, 0xf6a, 0xf6b, 0x7, 0x1da, 0x2, 0x2, 0xf6b, 0xf6c, 0x7, 0x3bb, 
       0x2, 0x2, 0xf6c, 0xf6d, 0x7, 0x3c4, 0x2, 0x2, 0xf6d, 0xf6e, 0x5, 
       0x22e, 0x118, 0x2, 0xf6e, 0xf6f, 0x7, 0x3c5, 0x2, 0x2, 0xf6f, 0xf8a, 
       0x3, 0x2, 0x2, 0x2, 0xf70, 0xf71, 0x7, 0x1dc, 0x2, 0x2, 0xf71, 0xf72, 
       0x7, 0x3bb, 0x2, 0x2, 0xf72, 0xf73, 0x7, 0x3c4, 0x2, 0x2, 0xf73, 
       0xf74, 0x5, 0x238, 0x11d, 0x2, 0xf74, 0xf75, 0x7, 0x3c5, 0x2, 0x2, 
       0xf75, 0xf8a, 0x3, 0x2, 0x2, 0x2, 0xf76, 0xf77, 0x7, 0x1dd, 0x2, 
       0x2, 0xf77, 0xf78, 0x7, 0x3bb, 0x2, 0x2, 0xf78, 0xf79, 0x7, 0x3c4, 
       0x2, 0x2, 0xf79, 0xf7a, 0x5, 0x238, 0x11d, 0x2, 0xf7a, 0xf7b, 0x7, 
       0x3c5, 0x2, 0x2, 0xf7b, 0xf8a, 0x3, 0x2, 0x2, 0x2, 0xf7c, 0xf7d, 
       0x7, 0x1db, 0x2, 0x2, 0xf7d, 0xf7e, 0x7, 0x3bb, 0x2, 0x2, 0xf7e, 
       0xf7f, 0x7, 0x3c4, 0x2, 0x2, 0xf7f, 0xf84, 0x5, 0x14a, 0xa6, 0x2, 
       0xf80, 0xf81, 0x7, 0x3c6, 0x2, 0x2, 0xf81, 0xf83, 0x5, 0x14a, 0xa6, 
       0x2, 0xf82, 0xf80, 0x3, 0x2, 0x2, 0x2, 0xf83, 0xf86, 0x3, 0x2, 0x2, 
       0x2, 0xf84, 0xf82, 0x3, 0x2, 0x2, 0x2, 0xf84, 0xf85, 0x3, 0x2, 0x2, 
       0x2, 0xf85, 0xf87, 0x3, 0x2, 0x2, 0x2, 0xf86, 0xf84, 0x3, 0x2, 0x2, 
       0x2, 0xf87, 0xf88, 0x7, 0x3c5, 0x2, 0x2, 0xf88, 0xf8a, 0x3, 0x2, 
       0x2, 0x2, 0xf89, 0xf58, 0x3, 0x2, 0x2, 0x2, 0xf89, 0xf5e, 0x3, 0x2, 
       0x2, 0x2, 0xf89, 0xf64, 0x3, 0x2, 0x2, 0x2, 0xf89, 0xf6a, 0x3, 0x2, 
       0x2, 0x2, 0xf89, 0xf70, 0x3, 0x2, 0x2, 0x2, 0xf89, 0xf76, 0x3, 0x2, 
       0x2, 0x2, 0xf89, 0xf7c, 0x3, 0x2, 0x2, 0x2, 0xf8a, 0x149, 0x3, 0x2, 
       0x2, 0x2, 0xf8b, 0xf8c, 0x7, 0x3c4, 0x2, 0x2, 0xf8c, 0xf8d, 0x5, 
       0x1f6, 0xfc, 0x2, 0xf8d, 0xf8e, 0x7, 0x3c6, 0x2, 0x2, 0xf8e, 0xf8f, 
       0x5, 0x1f6, 0xfc, 0x2, 0xf8f, 0xf90, 0x7, 0x3c5, 0x2, 0x2, 0xf90, 
       0x14b, 0x3, 0x2, 0x2, 0x2, 0xf91, 0xf92, 0x9, 0x36, 0x2, 0x2, 0xf92, 
       0x14d, 0x3, 0x2, 0x2, 0x2, 0xf93, 0xf94, 0x9, 0x37, 0x2, 0x2, 0xf94, 
       0xf95, 0x7, 0x3bb, 0x2, 0x2, 0xf95, 0xfa6, 0x5, 0x152, 0xaa, 0x2, 
       0xf96, 0xf97, 0x7, 0x185, 0x2, 0x2, 0xf97, 0xf98, 0x7, 0x3bb, 0x2, 
       0x2, 0xf98, 0xf99, 0x7, 0x3d3, 0x2, 0x2, 0xf99, 0xf9a, 0x7, 0x3c6, 
       0x2, 0x2, 0xf9a, 0xf9b, 0x7, 0x186, 0x2, 0x2, 0xf9b, 0xf9c, 0x7, 
       0x3bb, 0x2, 0x2, 0xf9c, 0xfa6, 0x5, 0x212, 0x10a, 0x2, 0xf9d, 0xf9e, 
       0x7, 0x1d1, 0x2, 0x2, 0xf9e, 0xf9f, 0x7, 0x3bb, 0x2, 0x2, 0xf9f, 
       0xfa0, 0x7, 0x3d3, 0x2, 0x2, 0xfa0, 0xfa1, 0x7, 0x3c6, 0x2, 0x2, 
       0xfa1, 0xfa2, 0x7, 0x1d2, 0x2, 0x2, 0xfa2, 0xfa3, 0x7, 0x3bb, 0x2, 
       0x2, 0xfa3, 0xfa6, 0x5, 0x212, 0x10a, 0x2, 0xfa4, 0xfa6, 0x7, 0x1fa, 
       0x2, 0x2, 0xfa5, 0xf93, 0x3, 0x2, 0x2, 0x2, 0xfa5, 0xf96, 0x3, 0x2, 
       0x2, 0x2, 0xfa5, 0xf9d, 0x3, 0x2, 0x2, 0x2, 0xfa5, 0xfa4, 0x3, 0x2, 
       0x2, 0x2, 0xfa6, 0x14f, 0x3, 0x2, 0x2, 0x2, 0xfa7, 0xfa8, 0x7, 0x21f, 
       0x2, 0x2, 0xfa8, 0xfa9, 0x7, 0x3bb, 0x2, 0x2, 0xfa9, 0xfb4, 0x7, 
       0x3d3, 0x2, 0x2, 0xfaa, 0xfab, 0x7, 0x1bc, 0x2, 0x2, 0xfab, 0xfac, 
       0x7, 0x3bb, 0x2, 0x2, 0xfac, 0xfb4, 0x7, 0x3d3, 0x2, 0x2, 0xfad, 
       0xfae, 0x7, 0x130, 0x2, 0x2, 0xfae, 0xfaf, 0x7, 0x3bb, 0x2, 0x2, 
       0xfaf, 0xfb4, 0x7, 0x3d3, 0x2, 0x2, 0xfb0, 0xfb1, 0x7, 0x1bf, 0x2, 
       0x2, 0xfb1, 0xfb2, 0x7, 0x3bb, 0x2, 0x2, 0xfb2, 0xfb4, 0x7, 0x3d3, 
       0x2, 0x2, 0xfb3, 0xfa7, 0x3, 0x2, 0x2, 0x2, 0xfb3, 0xfaa, 0x3, 0x2, 
       0x2, 0x2, 0xfb3, 0xfad, 0x3, 0x2, 0x2, 0x2, 0xfb3, 0xfb0, 0x3, 0x2, 
       0x2, 0x2, 0xfb4, 0x151, 0x3, 0x2, 0x2, 0x2, 0xfb5, 0xfba, 0x5, 0x206, 
       0x104, 0x2, 0xfb6, 0xfb7, 0x7, 0x3c6, 0x2, 0x2, 0xfb7, 0xfb9, 0x5, 
       0x206, 0x104, 0x2, 0xfb8, 0xfb6, 0x3, 0x2, 0x2, 0x2, 0xfb9, 0xfbc, 
       0x3, 0x2, 0x2, 0x2, 0xfba, 0xfb8, 0x3, 0x2, 0x2, 0x2, 0xfba, 0xfbb, 
       0x3, 0x2, 0x2, 0x2, 0xfbb, 0xfbf, 0x3, 0x2, 0x2, 0x2, 0xfbc, 0xfba, 
       0x3, 0x2, 0x2, 0x2, 0xfbd, 0xfbf, 0x7, 0x3d3, 0x2, 0x2, 0xfbe, 0xfb5, 
       0x3, 0x2, 0x2, 0x2, 0xfbe, 0xfbd, 0x3, 0x2, 0x2, 0x2, 0xfbf, 0x153, 
       0x3, 0x2, 0x2, 0x2, 0xfc0, 0xfc1, 0x7, 0x22e, 0x2, 0x2, 0xfc1, 0xfc2, 
       0x9, 0x38, 0x2, 0x2, 0xfc2, 0xfc4, 0x5, 0x208, 0x105, 0x2, 0xfc3, 
       0xfc5, 0x9, 0x39, 0x2, 0x2, 0xfc4, 0xfc3, 0x3, 0x2, 0x2, 0x2, 0xfc4, 
       0xfc5, 0x3, 0x2, 0x2, 0x2, 0xfc5, 0x155, 0x3, 0x2, 0x2, 0x2, 0xfc6, 
       0xfc7, 0x7, 0x22e, 0x2, 0x2, 0xfc7, 0xfc8, 0x7, 0x13e, 0x2, 0x2, 
       0xfc8, 0xfce, 0x5, 0x208, 0x105, 0x2, 0xfc9, 0xfcc, 0x7, 0x20d, 0x2, 
       0x2, 0xfca, 0xfcb, 0x7, 0x3a, 0x2, 0x2, 0xfcb, 0xfcd, 0x7, 0x19d, 
       0x2, 0x2, 0xfcc, 0xfca, 0x3, 0x2, 0x2, 0x2, 0xfcc, 0xfcd, 0x3, 0x2, 
       0x2, 0x2, 0xfcd, 0xfcf, 0x3, 0x2, 0x2, 0x2, 0xfce, 0xfc9, 0x3, 0x2, 
       0x2, 0x2, 0xfce, 0xfcf, 0x3, 0x2, 0x2, 0x2, 0xfcf, 0x157, 0x3, 0x2, 
       0x2, 0x2, 0xfd0, 0xfd1, 0x7, 0x22e, 0x2, 0x2, 0xfd1, 0xfd2, 0x7, 
       0x1c3, 0x2, 0x2, 0xfd2, 0xfd3, 0x5, 0x208, 0x105, 0x2, 0xfd3, 0x159, 
       0x3, 0x2, 0x2, 0x2, 0xfd4, 0xfd5, 0x7, 0x22e, 0x2, 0x2, 0xfd5, 0xfd6, 
       0x7, 0x120, 0x2, 0x2, 0xfd6, 0xfd9, 0x5, 0x208, 0x105, 0x2, 0xfd7, 
       0xfd8, 0x7, 0x1af, 0x2, 0x2, 0xfd8, 0xfda, 0x7, 0x1bd, 0x2, 0x2, 
       0xfd9, 0xfd7, 0x3, 0x2, 0x2, 0x2, 0xfd9, 0xfda, 0x3, 0x2, 0x2, 0x2, 
       0xfda, 0x15b, 0x3, 0x2, 0x2, 0x2, 0xfdb, 0xfdc, 0x7, 0x22e, 0x2, 
       0x2, 0xfdc, 0xfdd, 0x7, 0x1e2, 0x2, 0x2, 0xfdd, 0xfde, 0x5, 0x208, 
       0x105, 0x2, 0xfde, 0x15d, 0x3, 0x2, 0x2, 0x2, 0xfdf, 0xfe0, 0x7, 
       0x22e, 0x2, 0x2, 0xfe0, 0xfe3, 0x7, 0x1cd, 0x2, 0x2, 0xfe1, 0xfe2, 
       0x7, 0x1f, 0x2, 0x2, 0xfe2, 0xfe4, 0x5, 0x208, 0x105, 0x2, 0xfe3, 
       0xfe1, 0x3, 0x2, 0x2, 0x2, 0xfe3, 0xfe4, 0x3, 0x2, 0x2, 0x2, 0xfe4, 
       0x15f, 0x3, 0x2, 0x2, 0x2, 0xfe5, 0xfe6, 0x7, 0x1c3, 0x2, 0x2, 0xfe6, 
       0xfe7, 0x5, 0x20e, 0x108, 0x2, 0xfe7, 0xfea, 0x7, 0x3d, 0x2, 0x2, 
       0xfe8, 0xfeb, 0x7, 0x3d3, 0x2, 0x2, 0xfe9, 0xfeb, 0x7, 0x3de, 0x2, 
       0x2, 0xfea, 0xfe8, 0x3, 0x2, 0x2, 0x2, 0xfea, 0xfe9, 0x3, 0x2, 0x2, 
       0x2, 0xfeb, 0x161, 0x3, 0x2, 0x2, 0x2, 0xfec, 0xfed, 0x7, 0x23f, 
       0x2, 0x2, 0xfed, 0xff0, 0x5, 0x20e, 0x108, 0x2, 0xfee, 0xfef, 0x7, 
       0xa4, 0x2, 0x2, 0xfef, 0xff1, 0x5, 0x23a, 0x11e, 0x2, 0xff0, 0xfee, 
       0x3, 0x2, 0x2, 0x2, 0xff0, 0xff1, 0x3, 0x2, 0x2, 0x2, 0xff1, 0x163, 
       0x3, 0x2, 0x2, 0x2, 0xff2, 0xff3, 0x9, 0x3a, 0x2, 0x2, 0xff3, 0xff4, 
       0x7, 0x1c3, 0x2, 0x2, 0xff4, 0xff5, 0x5, 0x20e, 0x108, 0x2, 0xff5, 
       0x165, 0x3, 0x2, 0x2, 0x2, 0xff6, 0xff9, 0x5, 0x168, 0xb5, 0x2, 0xff7, 
       0xff9, 0x5, 0x6, 0x4, 0x2, 0xff8, 0xff6, 0x3, 0x2, 0x2, 0x2, 0xff8, 
       0xff7, 0x3, 0x2, 0x2, 0x2, 0xff9, 0x167, 0x3, 0x2, 0x2, 0x2, 0xffa, 
       0xffb, 0x5, 0x20e, 0x108, 0x2, 0xffb, 0xffc, 0x7, 0x3cf, 0x2, 0x2, 
       0xffc, 0xffe, 0x3, 0x2, 0x2, 0x2, 0xffd, 0xffa, 0x3, 0x2, 0x2, 0x2, 
       0xffd, 0xffe, 0x3, 0x2, 0x2, 0x2, 0xffe, 0xfff, 0x3, 0x2, 0x2, 0x2, 
       0xfff, 0x1005, 0x7, 0x10a, 0x2, 0x2, 0x1000, 0x1001, 0x5, 0x17c, 
       0xbf, 0x2, 0x1001, 0x1002, 0x7, 0x3c7, 0x2, 0x2, 0x1002, 0x1004, 
       0x3, 0x2, 0x2, 0x2, 0x1003, 0x1000, 0x3, 0x2, 0x2, 0x2, 0x1004, 0x1007, 
       0x3, 0x2, 0x2, 0x2, 0x1005, 0x1003, 0x3, 0x2, 0x2, 0x2, 0x1005, 0x1006, 
       0x3, 0x2, 0x2, 0x2, 0x1006, 0x100d, 0x3, 0x2, 0x2, 0x2, 0x1007, 0x1005, 
       0x3, 0x2, 0x2, 0x2, 0x1008, 0x1009, 0x5, 0x17e, 0xc0, 0x2, 0x1009, 
       0x100a, 0x7, 0x3c7, 0x2, 0x2, 0x100a, 0x100c, 0x3, 0x2, 0x2, 0x2, 
       0x100b, 0x1008, 0x3, 0x2, 0x2, 0x2, 0x100c, 0x100f, 0x3, 0x2, 0x2, 
       0x2, 0x100d, 0x100b, 0x3, 0x2, 0x2, 0x2, 0x100d, 0x100e, 0x3, 0x2, 
       0x2, 0x2, 0x100e, 0x1015, 0x3, 0x2, 0x2, 0x2, 0x100f, 0x100d, 0x3, 
       0x2, 0x2, 0x2, 0x1010, 0x1011, 0x5, 0x180, 0xc1, 0x2, 0x1011, 0x1012, 
       0x7, 0x3c7, 0x2, 0x2, 0x1012, 0x1014, 0x3, 0x2, 0x2, 0x2, 0x1013, 
       0x1010, 0x3, 0x2, 0x2, 0x2, 0x1014, 0x1017, 0x3, 0x2, 0x2, 0x2, 0x1015, 
       0x1013, 0x3, 0x2, 0x2, 0x2, 0x1015, 0x1016, 0x3, 0x2, 0x2, 0x2, 0x1016, 
       0x101d, 0x3, 0x2, 0x2, 0x2, 0x1017, 0x1015, 0x3, 0x2, 0x2, 0x2, 0x1018, 
       0x1019, 0x5, 0x182, 0xc2, 0x2, 0x1019, 0x101a, 0x7, 0x3c7, 0x2, 0x2, 
       0x101a, 0x101c, 0x3, 0x2, 0x2, 0x2, 0x101b, 0x1018, 0x3, 0x2, 0x2, 
       0x2, 0x101c, 0x101f, 0x3, 0x2, 0x2, 0x2, 0x101d, 0x101b, 0x3, 0x2, 
       0x2, 0x2, 0x101d, 0x101e, 0x3, 0x2, 0x2, 0x2, 0x101e, 0x1023, 0x3, 
       0x2, 0x2, 0x2, 0x101f, 0x101d, 0x3, 0x2, 0x2, 0x2, 0x1020, 0x1022, 
       0x5, 0x186, 0xc4, 0x2, 0x1021, 0x1020, 0x3, 0x2, 0x2, 0x2, 0x1022, 
       0x1025, 0x3, 0x2, 0x2, 0x2, 0x1023, 0x1021, 0x3, 0x2, 0x2, 0x2, 0x1023, 
       0x1024, 0x3, 0x2, 0x2, 0x2, 0x1024, 0x1026, 0x3, 0x2, 0x2, 0x2, 0x1025, 
       0x1023, 0x3, 0x2, 0x2, 0x2, 0x1026, 0x1028, 0x7, 0x13e, 0x2, 0x2, 
       0x1027, 0x1029, 0x5, 0x20e, 0x108, 0x2, 0x1028, 0x1027, 0x3, 0x2, 
       0x2, 0x2, 0x1028, 0x1029, 0x3, 0x2, 0x2, 0x2, 0x1029, 0x169, 0x3, 
       0x2, 0x2, 0x2, 0x102a, 0x102d, 0x7, 0x15, 0x2, 0x2, 0x102b, 0x102e, 
       0x5, 0x20e, 0x108, 0x2, 0x102c, 0x102e, 0x5, 0x25a, 0x12e, 0x2, 0x102d, 
       0x102b, 0x3, 0x2, 0x2, 0x2, 0x102d, 0x102c, 0x3, 0x2, 0x2, 0x2, 0x102d, 
       0x102e, 0x3, 0x2, 0x2, 0x2, 0x102e, 0x1030, 0x3, 0x2, 0x2, 0x2, 0x102f, 
       0x1031, 0x5, 0x188, 0xc5, 0x2, 0x1030, 0x102f, 0x3, 0x2, 0x2, 0x2, 
       0x1031, 0x1032, 0x3, 0x2, 0x2, 0x2, 0x1032, 0x1030, 0x3, 0x2, 0x2, 
       0x2, 0x1032, 0x1033, 0x3, 0x2, 0x2, 0x2, 0x1033, 0x103a, 0x3, 0x2, 
       0x2, 0x2, 0x1034, 0x1036, 0x7, 0x31, 0x2, 0x2, 0x1035, 0x1037, 0x5, 
       0x186, 0xc4, 0x2, 0x1036, 0x1035, 0x3, 0x2, 0x2, 0x2, 0x1037, 0x1038, 
       0x3, 0x2, 0x2, 0x2, 0x1038, 0x1036, 0x3, 0x2, 0x2, 0x2, 0x1038, 0x1039, 
       0x3, 0x2, 0x2, 0x2, 0x1039, 0x103b, 0x3, 0x2, 0x2, 0x2, 0x103a, 0x1034, 
       0x3, 0x2, 0x2, 0x2, 0x103a, 0x103b, 0x3, 0x2, 0x2, 0x2, 0x103b, 0x103c, 
       0x3, 0x2, 0x2, 0x2, 0x103c, 0x103d, 0x7, 0x13e, 0x2, 0x2, 0x103d, 
       0x103e, 0x7, 0x15, 0x2, 0x2, 0x103e, 0x16b, 0x3, 0x2, 0x2, 0x2, 0x103f, 
       0x1040, 0x7, 0x44, 0x2, 0x2, 0x1040, 0x1041, 0x5, 0x25a, 0x12e, 0x2, 
       0x1041, 0x1043, 0x7, 0x97, 0x2, 0x2, 0x1042, 0x1044, 0x5, 0x186, 
       0xc4, 0x2, 0x1043, 0x1042, 0x3, 0x2, 0x2, 0x2, 0x1044, 0x1045, 0x3, 
       0x2, 0x2, 0x2, 0x1045, 0x1043, 0x3, 0x2, 0x2, 0x2, 0x1045, 0x1046, 
       0x3, 0x2, 0x2, 0x2, 0x1046, 0x104a, 0x3, 0x2, 0x2, 0x2, 0x1047, 0x1049, 
       0x5, 0x18a, 0xc6, 0x2, 0x1048, 0x1047, 0x3, 0x2, 0x2, 0x2, 0x1049, 
       0x104c, 0x3, 0x2, 0x2, 0x2, 0x104a, 0x1048, 0x3, 0x2, 0x2, 0x2, 0x104a, 
       0x104b, 0x3, 0x2, 0x2, 0x2, 0x104b, 0x1053, 0x3, 0x2, 0x2, 0x2, 0x104c, 
       0x104a, 0x3, 0x2, 0x2, 0x2, 0x104d, 0x104f, 0x7, 0x31, 0x2, 0x2, 
       0x104e, 0x1050, 0x5, 0x186, 0xc4, 0x2, 0x104f, 0x104e, 0x3, 0x2, 
       0x2, 0x2, 0x1050, 0x1051, 0x3, 0x2, 0x2, 0x2, 0x1051, 0x104f, 0x3, 
       0x2, 0x2, 0x2, 0x1051, 0x1052, 0x3, 0x2, 0x2, 0x2, 0x1052, 0x1054, 
       0x3, 0x2, 0x2, 0x2, 0x1053, 0x104d, 0x3, 0x2, 0x2, 0x2, 0x1053, 0x1054, 
       0x3, 0x2, 0x2, 0x2, 0x1054, 0x1055, 0x3, 0x2, 0x2, 0x2, 0x1055, 0x1056, 
       0x7, 0x13e, 0x2, 0x2, 0x1056, 0x1057, 0x7, 0x44, 0x2, 0x2, 0x1057, 
       0x16d, 0x3, 0x2, 0x2, 0x2, 0x1058, 0x1059, 0x7, 0x4f, 0x2, 0x2, 0x1059, 
       0x105a, 0x5, 0x20e, 0x108, 0x2, 0x105a, 0x16f, 0x3, 0x2, 0x2, 0x2, 
       0x105b, 0x105c, 0x7, 0x55, 0x2, 0x2, 0x105c, 0x105d, 0x5, 0x20e, 
       0x108, 0x2, 0x105d, 0x171, 0x3, 0x2, 0x2, 0x2, 0x105e, 0x105f, 0x5, 
       0x20e, 0x108, 0x2, 0x105f, 0x1060, 0x7, 0x3cf, 0x2, 0x2, 0x1060, 
       0x1062, 0x3, 0x2, 0x2, 0x2, 0x1061, 0x105e, 0x3, 0x2, 0x2, 0x2, 0x1061, 
       0x1062, 0x3, 0x2, 0x2, 0x2, 0x1062, 0x1063, 0x3, 0x2, 0x2, 0x2, 0x1063, 
       0x1065, 0x7, 0x5d, 0x2, 0x2, 0x1064, 0x1066, 0x5, 0x186, 0xc4, 0x2, 
       0x1065, 0x1064, 0x3, 0x2, 0x2, 0x2, 0x1066, 0x1067, 0x3, 0x2, 0x2, 
       0x2, 0x1067, 0x1065, 0x3, 0x2, 0x2, 0x2, 0x1067, 0x1068, 0x3, 0x2, 
       0x2, 0x2, 0x1068, 0x1069, 0x3, 0x2, 0x2, 0x2, 0x1069, 0x106a, 0x7, 
       0x13e, 0x2, 0x2, 0x106a, 0x106c, 0x7, 0x5d, 0x2, 0x2, 0x106b, 0x106d, 
       0x5, 0x20e, 0x108, 0x2, 0x106c, 0x106b, 0x3, 0x2, 0x2, 0x2, 0x106c, 
       0x106d, 0x3, 0x2, 0x2, 0x2, 0x106d, 0x173, 0x3, 0x2, 0x2, 0x2, 0x106e, 
       0x106f, 0x5, 0x20e, 0x108, 0x2, 0x106f, 0x1070, 0x7, 0x3cf, 0x2, 
       0x2, 0x1070, 0x1072, 0x3, 0x2, 0x2, 0x2, 0x1071, 0x106e, 0x3, 0x2, 
       0x2, 0x2, 0x1071, 0x1072, 0x3, 0x2, 0x2, 0x2, 0x1072, 0x1073, 0x3, 
       0x2, 0x2, 0x2, 0x1073, 0x1075, 0x7, 0x7c, 0x2, 0x2, 0x1074, 0x1076, 
       0x5, 0x186, 0xc4, 0x2, 0x1075, 0x1074, 0x3, 0x2, 0x2, 0x2, 0x1076, 
       0x1077, 0x3, 0x2, 0x2, 0x2, 0x1077, 0x1075, 0x3, 0x2, 0x2, 0x2, 0x1077, 
       0x1078, 0x3, 0x2, 0x2, 0x2, 0x1078, 0x1079, 0x3, 0x2, 0x2, 0x2, 0x1079, 
       0x107a, 0x7, 0x21d, 0x2, 0x2, 0x107a, 0x107b, 0x5, 0x25a, 0x12e, 
       0x2, 0x107b, 0x107c, 0x7, 0x13e, 0x2, 0x2, 0x107c, 0x107e, 0x7, 0x7c, 
       0x2, 0x2, 0x107d, 0x107f, 0x5, 0x20e, 0x108, 0x2, 0x107e, 0x107d, 
       0x3, 0x2, 0x2, 0x2, 0x107e, 0x107f, 0x3, 0x2, 0x2, 0x2, 0x107f, 0x175, 
       0x3, 0x2, 0x2, 0x2, 0x1080, 0x1081, 0x7, 0x80, 0x2, 0x2, 0x1081, 
       0x1082, 0x5, 0x25a, 0x12e, 0x2, 0x1082, 0x177, 0x3, 0x2, 0x2, 0x2, 
       0x1083, 0x1084, 0x5, 0x20e, 0x108, 0x2, 0x1084, 0x1085, 0x7, 0x3cf, 
       0x2, 0x2, 0x1085, 0x1087, 0x3, 0x2, 0x2, 0x2, 0x1086, 0x1083, 0x3, 
       0x2, 0x2, 0x2, 0x1086, 0x1087, 0x3, 0x2, 0x2, 0x2, 0x1087, 0x1088, 
       0x3, 0x2, 0x2, 0x2, 0x1088, 0x1089, 0x7, 0xa8, 0x2, 0x2, 0x1089, 
       0x108a, 0x5, 0x25a, 0x12e, 0x2, 0x108a, 0x108c, 0x7, 0x138, 0x2, 
       0x2, 0x108b, 0x108d, 0x5, 0x186, 0xc4, 0x2, 0x108c, 0x108b, 0x3, 
       0x2, 0x2, 0x2, 0x108d, 0x108e, 0x3, 0x2, 0x2, 0x2, 0x108e, 0x108c, 
       0x3, 0x2, 0x2, 0x2, 0x108e, 0x108f, 0x3, 0x2, 0x2, 0x2, 0x108f, 0x1090, 
       0x3, 0x2, 0x2, 0x2, 0x1090, 0x1091, 0x7, 0x13e, 0x2, 0x2, 0x1091, 
       0x1093, 0x7, 0xa8, 0x2, 0x2, 0x1092, 0x1094, 0x5, 0x20e, 0x108, 0x2, 
       0x1093, 0x1092, 0x3, 0x2, 0x2, 0x2, 0x1093, 0x1094, 0x3, 0x2, 0x2, 
       0x2, 0x1094, 0x179, 0x3, 0x2, 0x2, 0x2, 0x1095, 0x1096, 0x7, 0x11a, 
       0x2, 0x2, 0x1096, 0x10a5, 0x5, 0x20e, 0x108, 0x2, 0x1097, 0x109c, 
       0x7, 0x39, 0x2, 0x2, 0x1098, 0x109a, 0x7, 0x1a7, 0x2, 0x2, 0x1099, 
       0x1098, 0x3, 0x2, 0x2, 0x2, 0x1099, 0x109a, 0x3, 0x2, 0x2, 0x2, 0x109a, 
       0x109b, 0x3, 0x2, 0x2, 0x2, 0x109b, 0x109d, 0x7, 0x3d, 0x2, 0x2, 
       0x109c, 0x1099, 0x3, 0x2, 0x2, 0x2, 0x109c, 0x109d, 0x3, 0x2, 0x2, 
       0x2, 0x109d, 0x109e, 0x3, 0x2, 0x2, 0x2, 0x109e, 0x109f, 0x5, 0x20e, 
       0x108, 0x2, 0x109f, 0x10a0, 0x7, 0x4d, 0x2, 0x2, 0x10a0, 0x10a1, 
       0x5, 0x22c, 0x117, 0x2, 0x10a1, 0x10a5, 0x3, 0x2, 0x2, 0x2, 0x10a2, 
       0x10a3, 0x7, 0x1b2, 0x2, 0x2, 0x10a3, 0x10a5, 0x5, 0x20e, 0x108, 
       0x2, 0x10a4, 0x1095, 0x3, 0x2, 0x2, 0x2, 0x10a4, 0x1097, 0x3, 0x2, 
       0x2, 0x2, 0x10a4, 0x10a2, 0x3, 0x2, 0x2, 0x2, 0x10a5, 0x17b, 0x3, 
       0x2, 0x2, 0x2, 0x10a6, 0x10a7, 0x7, 0x26, 0x2, 0x2, 0x10a7, 0x10a8, 
       0x5, 0x22c, 0x117, 0x2, 0x10a8, 0x10ab, 0x5, 0x220, 0x111, 0x2, 0x10a9, 
       0x10aa, 0x7, 0x27, 0x2, 0x2, 0x10aa, 0x10ac, 0x5, 0x23c, 0x11f, 0x2, 
       0x10ab, 0x10a9, 0x3, 0x2, 0x2, 0x2, 0x10ab, 0x10ac, 0x3, 0x2, 0x2, 
       0x2, 0x10ac, 0x17d, 0x3, 0x2, 0x2, 0x2, 0x10ad, 0x10ae, 0x7, 0x26, 
       0x2, 0x2, 0x10ae, 0x10af, 0x5, 0x20e, 0x108, 0x2, 0x10af, 0x10b0, 
       0x7, 0x1c, 0x2, 0x2, 0x10b0, 0x10b7, 0x7, 0x3a, 0x2, 0x2, 0x10b1, 
       0x10b8, 0x5, 0x212, 0x10a, 0x2, 0x10b2, 0x10b4, 0x7, 0x8d, 0x2, 0x2, 
       0x10b3, 0x10b5, 0x7, 0x223, 0x2, 0x2, 0x10b4, 0x10b3, 0x3, 0x2, 0x2, 
       0x2, 0x10b4, 0x10b5, 0x3, 0x2, 0x2, 0x2, 0x10b5, 0x10b6, 0x3, 0x2, 
       0x2, 0x2, 0x10b6, 0x10b8, 0x7, 0x3d3, 0x2, 0x2, 0x10b7, 0x10b1, 0x3, 
       0x2, 0x2, 0x2, 0x10b7, 0x10b2, 0x3, 0x2, 0x2, 0x2, 0x10b8, 0x17f, 
       0x3, 0x2, 0x2, 0x2, 0x10b9, 0x10ba, 0x7, 0x26, 0x2, 0x2, 0x10ba, 
  };
  static uint16_t serializedATNSegment2[] = {
    0x10bb, 0x5, 0x20e, 0x108, 0x2, 0x10bb, 0x10bc, 0x7, 0x23, 0x2, 0x2, 
       0x10bc, 0x10bd, 0x7, 0x3a, 0x2, 0x2, 0x10bd, 0x10be, 0x5, 0xb4, 0x5b, 
       0x2, 0x10be, 0x181, 0x3, 0x2, 0x2, 0x2, 0x10bf, 0x10c0, 0x7, 0x26, 
       0x2, 0x2, 0x10c0, 0x10c1, 0x9, 0x3b, 0x2, 0x2, 0x10c1, 0x10c2, 0x7, 
       0x15f, 0x2, 0x2, 0x10c2, 0x10c3, 0x7, 0x3a, 0x2, 0x2, 0x10c3, 0x10c8, 
       0x5, 0x184, 0xc3, 0x2, 0x10c4, 0x10c5, 0x7, 0x3c6, 0x2, 0x2, 0x10c5, 
       0x10c7, 0x5, 0x184, 0xc3, 0x2, 0x10c6, 0x10c4, 0x3, 0x2, 0x2, 0x2, 
       0x10c7, 0x10ca, 0x3, 0x2, 0x2, 0x2, 0x10c8, 0x10c6, 0x3, 0x2, 0x2, 
       0x2, 0x10c8, 0x10c9, 0x3, 0x2, 0x2, 0x2, 0x10c9, 0x10cb, 0x3, 0x2, 
       0x2, 0x2, 0x10ca, 0x10c8, 0x3, 0x2, 0x2, 0x2, 0x10cb, 0x10cc, 0x5, 
       0x166, 0xb4, 0x2, 0x10cc, 0x183, 0x3, 0x2, 0x2, 0x2, 0x10cd, 0x10d9, 
       0x5, 0x212, 0x10a, 0x2, 0x10ce, 0x10d0, 0x7, 0x8d, 0x2, 0x2, 0x10cf, 
       0x10d1, 0x7, 0x223, 0x2, 0x2, 0x10d0, 0x10cf, 0x3, 0x2, 0x2, 0x2, 
       0x10d0, 0x10d1, 0x3, 0x2, 0x2, 0x2, 0x10d1, 0x10d2, 0x3, 0x2, 0x2, 
       0x2, 0x10d2, 0x10d9, 0x7, 0x3d3, 0x2, 0x2, 0x10d3, 0x10d9, 0x5, 0x20e, 
       0x108, 0x2, 0x10d4, 0x10d9, 0x7, 0x8e, 0x2, 0x2, 0x10d5, 0x10d6, 
       0x7, 0x65, 0x2, 0x2, 0x10d6, 0x10d9, 0x7, 0x158, 0x2, 0x2, 0x10d7, 
       0x10d9, 0x7, 0x8c, 0x2, 0x2, 0x10d8, 0x10cd, 0x3, 0x2, 0x2, 0x2, 
       0x10d8, 0x10ce, 0x3, 0x2, 0x2, 0x2, 0x10d8, 0x10d3, 0x3, 0x2, 0x2, 
       0x2, 0x10d8, 0x10d4, 0x3, 0x2, 0x2, 0x2, 0x10d8, 0x10d5, 0x3, 0x2, 
       0x2, 0x2, 0x10d8, 0x10d7, 0x3, 0x2, 0x2, 0x2, 0x10d9, 0x185, 0x3, 
       0x2, 0x2, 0x2, 0x10da, 0x10dd, 0x5, 0x14, 0xb, 0x2, 0x10db, 0x10dd, 
       0x5, 0x6, 0x4, 0x2, 0x10dc, 0x10da, 0x3, 0x2, 0x2, 0x2, 0x10dc, 0x10db, 
       0x3, 0x2, 0x2, 0x2, 0x10dd, 0x10de, 0x3, 0x2, 0x2, 0x2, 0x10de, 0x10df, 
       0x7, 0x3c7, 0x2, 0x2, 0x10df, 0x187, 0x3, 0x2, 0x2, 0x2, 0x10e0, 
       0x10e3, 0x7, 0xa6, 0x2, 0x2, 0x10e1, 0x10e4, 0x5, 0x21e, 0x110, 0x2, 
       0x10e2, 0x10e4, 0x5, 0x25a, 0x12e, 0x2, 0x10e3, 0x10e1, 0x3, 0x2, 
       0x2, 0x2, 0x10e3, 0x10e2, 0x3, 0x2, 0x2, 0x2, 0x10e4, 0x10e5, 0x3, 
       0x2, 0x2, 0x2, 0x10e5, 0x10e7, 0x7, 0x97, 0x2, 0x2, 0x10e6, 0x10e8, 
       0x5, 0x186, 0xc4, 0x2, 0x10e7, 0x10e6, 0x3, 0x2, 0x2, 0x2, 0x10e8, 
       0x10e9, 0x3, 0x2, 0x2, 0x2, 0x10e9, 0x10e7, 0x3, 0x2, 0x2, 0x2, 0x10e9, 
       0x10ea, 0x3, 0x2, 0x2, 0x2, 0x10ea, 0x189, 0x3, 0x2, 0x2, 0x2, 0x10eb, 
       0x10ec, 0x7, 0x32, 0x2, 0x2, 0x10ec, 0x10ed, 0x5, 0x25a, 0x12e, 0x2, 
       0x10ed, 0x10ef, 0x7, 0x97, 0x2, 0x2, 0x10ee, 0x10f0, 0x5, 0x186, 
       0xc4, 0x2, 0x10ef, 0x10ee, 0x3, 0x2, 0x2, 0x2, 0x10f0, 0x10f1, 0x3, 
       0x2, 0x2, 0x2, 0x10f1, 0x10ef, 0x3, 0x2, 0x2, 0x2, 0x10f1, 0x10f2, 
       0x3, 0x2, 0x2, 0x2, 0x10f2, 0x18b, 0x3, 0x2, 0x2, 0x2, 0x10f3, 0x10f4, 
       0x7, 0x9, 0x2, 0x2, 0x10f4, 0x10f5, 0x7, 0x21f, 0x2, 0x2, 0x10f5, 
       0x10fa, 0x5, 0x19e, 0xd0, 0x2, 0x10f6, 0x10f7, 0x7, 0x3c6, 0x2, 0x2, 
       0x10f7, 0x10f9, 0x5, 0x19e, 0xd0, 0x2, 0x10f8, 0x10f6, 0x3, 0x2, 
       0x2, 0x2, 0x10f9, 0x10fc, 0x3, 0x2, 0x2, 0x2, 0x10fa, 0x10f8, 0x3, 
       0x2, 0x2, 0x2, 0x10fa, 0x10fb, 0x3, 0x2, 0x2, 0x2, 0x10fb, 0x112a, 
       0x3, 0x2, 0x2, 0x2, 0x10fc, 0x10fa, 0x3, 0x2, 0x2, 0x2, 0x10fd, 0x10fe, 
       0x7, 0x9, 0x2, 0x2, 0x10fe, 0x1100, 0x7, 0x21f, 0x2, 0x2, 0x10ff, 
       0x1101, 0x5, 0x242, 0x122, 0x2, 0x1100, 0x10ff, 0x3, 0x2, 0x2, 0x2, 
       0x1100, 0x1101, 0x3, 0x2, 0x2, 0x2, 0x1101, 0x1102, 0x3, 0x2, 0x2, 
       0x2, 0x1102, 0x1107, 0x5, 0x1a0, 0xd1, 0x2, 0x1103, 0x1104, 0x7, 
       0x3c6, 0x2, 0x2, 0x1104, 0x1106, 0x5, 0x1a0, 0xd1, 0x2, 0x1105, 0x1103, 
       0x3, 0x2, 0x2, 0x2, 0x1106, 0x1109, 0x3, 0x2, 0x2, 0x2, 0x1107, 0x1105, 
       0x3, 0x2, 0x2, 0x2, 0x1107, 0x1108, 0x3, 0x2, 0x2, 0x2, 0x1108, 0x1118, 
       0x3, 0x2, 0x2, 0x2, 0x1109, 0x1107, 0x3, 0x2, 0x2, 0x2, 0x110a, 0x1116, 
       0x7, 0x7e, 0x2, 0x2, 0x110b, 0x1117, 0x7, 0x1aa, 0x2, 0x2, 0x110c, 
       0x1113, 0x5, 0x1a2, 0xd2, 0x2, 0x110d, 0x110f, 0x7, 0xc, 0x2, 0x2, 
       0x110e, 0x110d, 0x3, 0x2, 0x2, 0x2, 0x110e, 0x110f, 0x3, 0x2, 0x2, 
       0x2, 0x110f, 0x1110, 0x3, 0x2, 0x2, 0x2, 0x1110, 0x1112, 0x5, 0x1a2, 
       0xd2, 0x2, 0x1111, 0x110e, 0x3, 0x2, 0x2, 0x2, 0x1112, 0x1115, 0x3, 
       0x2, 0x2, 0x2, 0x1113, 0x1111, 0x3, 0x2, 0x2, 0x2, 0x1113, 0x1114, 
       0x3, 0x2, 0x2, 0x2, 0x1114, 0x1117, 0x3, 0x2, 0x2, 0x2, 0x1115, 0x1113, 
       0x3, 0x2, 0x2, 0x2, 0x1116, 0x110b, 0x3, 0x2, 0x2, 0x2, 0x1116, 0x110c, 
       0x3, 0x2, 0x2, 0x2, 0x1117, 0x1119, 0x3, 0x2, 0x2, 0x2, 0x1118, 0x110a, 
       0x3, 0x2, 0x2, 0x2, 0x1118, 0x1119, 0x3, 0x2, 0x2, 0x2, 0x1119, 0x1120, 
       0x3, 0x2, 0x2, 0x2, 0x111a, 0x111c, 0x7, 0xa9, 0x2, 0x2, 0x111b, 
       0x111d, 0x5, 0x1a4, 0xd3, 0x2, 0x111c, 0x111b, 0x3, 0x2, 0x2, 0x2, 
       0x111d, 0x111e, 0x3, 0x2, 0x2, 0x2, 0x111e, 0x111c, 0x3, 0x2, 0x2, 
       0x2, 0x111e, 0x111f, 0x3, 0x2, 0x2, 0x2, 0x111f, 0x1121, 0x3, 0x2, 
       0x2, 0x2, 0x1120, 0x111a, 0x3, 0x2, 0x2, 0x2, 0x1120, 0x1121, 0x3, 
       0x2, 0x2, 0x2, 0x1121, 0x1126, 0x3, 0x2, 0x2, 0x2, 0x1122, 0x1125, 
       0x5, 0x1a6, 0xd4, 0x2, 0x1123, 0x1125, 0x5, 0x1a8, 0xd5, 0x2, 0x1124, 
       0x1122, 0x3, 0x2, 0x2, 0x2, 0x1124, 0x1123, 0x3, 0x2, 0x2, 0x2, 0x1125, 
       0x1128, 0x3, 0x2, 0x2, 0x2, 0x1126, 0x1124, 0x3, 0x2, 0x2, 0x2, 0x1126, 
       0x1127, 0x3, 0x2, 0x2, 0x2, 0x1127, 0x112a, 0x3, 0x2, 0x2, 0x2, 0x1128, 
       0x1126, 0x3, 0x2, 0x2, 0x2, 0x1129, 0x10f3, 0x3, 0x2, 0x2, 0x2, 0x1129, 
       0x10fd, 0x3, 0x2, 0x2, 0x2, 0x112a, 0x18d, 0x3, 0x2, 0x2, 0x2, 0x112b, 
       0x112c, 0x7, 0x20, 0x2, 0x2, 0x112c, 0x112d, 0x7, 0x21f, 0x2, 0x2, 
       0x112d, 0x1132, 0x5, 0x1a0, 0xd1, 0x2, 0x112e, 0x112f, 0x7, 0x3c6, 
       0x2, 0x2, 0x112f, 0x1131, 0x5, 0x1a0, 0xd1, 0x2, 0x1130, 0x112e, 
       0x3, 0x2, 0x2, 0x2, 0x1131, 0x1134, 0x3, 0x2, 0x2, 0x2, 0x1132, 0x1130, 
       0x3, 0x2, 0x2, 0x2, 0x1132, 0x1133, 0x3, 0x2, 0x2, 0x2, 0x1133, 0x1162, 
       0x3, 0x2, 0x2, 0x2, 0x1134, 0x1132, 0x3, 0x2, 0x2, 0x2, 0x1135, 0x1136, 
       0x7, 0x20, 0x2, 0x2, 0x1136, 0x1138, 0x7, 0x21f, 0x2, 0x2, 0x1137, 
       0x1139, 0x5, 0x244, 0x123, 0x2, 0x1138, 0x1137, 0x3, 0x2, 0x2, 0x2, 
       0x1138, 0x1139, 0x3, 0x2, 0x2, 0x2, 0x1139, 0x113a, 0x3, 0x2, 0x2, 
       0x2, 0x113a, 0x113f, 0x5, 0x1a0, 0xd1, 0x2, 0x113b, 0x113c, 0x7, 
       0x3c6, 0x2, 0x2, 0x113c, 0x113e, 0x5, 0x1a0, 0xd1, 0x2, 0x113d, 0x113b, 
       0x3, 0x2, 0x2, 0x2, 0x113e, 0x1141, 0x3, 0x2, 0x2, 0x2, 0x113f, 0x113d, 
       0x3, 0x2, 0x2, 0x2, 0x113f, 0x1140, 0x3, 0x2, 0x2, 0x2, 0x1140, 0x1150, 
       0x3, 0x2, 0x2, 0x2, 0x1141, 0x113f, 0x3, 0x2, 0x2, 0x2, 0x1142, 0x114e, 
       0x7, 0x7e, 0x2, 0x2, 0x1143, 0x114f, 0x7, 0x1aa, 0x2, 0x2, 0x1144, 
       0x114b, 0x5, 0x1a2, 0xd2, 0x2, 0x1145, 0x1147, 0x7, 0xc, 0x2, 0x2, 
       0x1146, 0x1145, 0x3, 0x2, 0x2, 0x2, 0x1146, 0x1147, 0x3, 0x2, 0x2, 
       0x2, 0x1147, 0x1148, 0x3, 0x2, 0x2, 0x2, 0x1148, 0x114a, 0x5, 0x1a2, 
       0xd2, 0x2, 0x1149, 0x1146, 0x3, 0x2, 0x2, 0x2, 0x114a, 0x114d, 0x3, 
       0x2, 0x2, 0x2, 0x114b, 0x1149, 0x3, 0x2, 0x2, 0x2, 0x114b, 0x114c, 
       0x3, 0x2, 0x2, 0x2, 0x114c, 0x114f, 0x3, 0x2, 0x2, 0x2, 0x114d, 0x114b, 
       0x3, 0x2, 0x2, 0x2, 0x114e, 0x1143, 0x3, 0x2, 0x2, 0x2, 0x114e, 0x1144, 
       0x3, 0x2, 0x2, 0x2, 0x114f, 0x1151, 0x3, 0x2, 0x2, 0x2, 0x1150, 0x1142, 
       0x3, 0x2, 0x2, 0x2, 0x1150, 0x1151, 0x3, 0x2, 0x2, 0x2, 0x1151, 0x1158, 
       0x3, 0x2, 0x2, 0x2, 0x1152, 0x1154, 0x7, 0xa9, 0x2, 0x2, 0x1153, 
       0x1155, 0x5, 0x1a4, 0xd3, 0x2, 0x1154, 0x1153, 0x3, 0x2, 0x2, 0x2, 
       0x1155, 0x1156, 0x3, 0x2, 0x2, 0x2, 0x1156, 0x1154, 0x3, 0x2, 0x2, 
       0x2, 0x1156, 0x1157, 0x3, 0x2, 0x2, 0x2, 0x1157, 0x1159, 0x3, 0x2, 
       0x2, 0x2, 0x1158, 0x1152, 0x3, 0x2, 0x2, 0x2, 0x1158, 0x1159, 0x3, 
       0x2, 0x2, 0x2, 0x1159, 0x115e, 0x3, 0x2, 0x2, 0x2, 0x115a, 0x115d, 
       0x5, 0x1a6, 0xd4, 0x2, 0x115b, 0x115d, 0x5, 0x1a8, 0xd5, 0x2, 0x115c, 
       0x115a, 0x3, 0x2, 0x2, 0x2, 0x115c, 0x115b, 0x3, 0x2, 0x2, 0x2, 0x115d, 
       0x1160, 0x3, 0x2, 0x2, 0x2, 0x115e, 0x115c, 0x3, 0x2, 0x2, 0x2, 0x115e, 
       0x115f, 0x3, 0x2, 0x2, 0x2, 0x115f, 0x1162, 0x3, 0x2, 0x2, 0x2, 0x1160, 
       0x115e, 0x3, 0x2, 0x2, 0x2, 0x1161, 0x112b, 0x3, 0x2, 0x2, 0x2, 0x1161, 
       0x1135, 0x3, 0x2, 0x2, 0x2, 0x1162, 0x18f, 0x3, 0x2, 0x2, 0x2, 0x1163, 
       0x1164, 0x7, 0x2f, 0x2, 0x2, 0x1164, 0x1166, 0x7, 0x21f, 0x2, 0x2, 
       0x1165, 0x1167, 0x5, 0x242, 0x122, 0x2, 0x1166, 0x1165, 0x3, 0x2, 
       0x2, 0x2, 0x1166, 0x1167, 0x3, 0x2, 0x2, 0x2, 0x1167, 0x1168, 0x3, 
       0x2, 0x2, 0x2, 0x1168, 0x116d, 0x5, 0x1fc, 0xff, 0x2, 0x1169, 0x116a, 
       0x7, 0x3c6, 0x2, 0x2, 0x116a, 0x116c, 0x5, 0x1fc, 0xff, 0x2, 0x116b, 
       0x1169, 0x3, 0x2, 0x2, 0x2, 0x116c, 0x116f, 0x3, 0x2, 0x2, 0x2, 0x116d, 
       0x116b, 0x3, 0x2, 0x2, 0x2, 0x116d, 0x116e, 0x3, 0x2, 0x2, 0x2, 0x116e, 
       0x191, 0x3, 0x2, 0x2, 0x2, 0x116f, 0x116d, 0x3, 0x2, 0x2, 0x2, 0x1170, 
       0x1171, 0x7, 0x40, 0x2, 0x2, 0x1171, 0x1176, 0x5, 0x1aa, 0xd6, 0x2, 
       0x1172, 0x1173, 0x7, 0x3c6, 0x2, 0x2, 0x1173, 0x1175, 0x5, 0x1aa, 
       0xd6, 0x2, 0x1174, 0x1172, 0x3, 0x2, 0x2, 0x2, 0x1175, 0x1178, 0x3, 
       0x2, 0x2, 0x2, 0x1176, 0x1174, 0x3, 0x2, 0x2, 0x2, 0x1176, 0x1177, 
       0x3, 0x2, 0x2, 0x2, 0x1177, 0x1179, 0x3, 0x2, 0x2, 0x2, 0x1178, 0x1176, 
       0x3, 0x2, 0x2, 0x2, 0x1179, 0x117b, 0x7, 0x68, 0x2, 0x2, 0x117a, 
       0x117c, 0x9, 0x3c, 0x2, 0x2, 0x117b, 0x117a, 0x3, 0x2, 0x2, 0x2, 
       0x117b, 0x117c, 0x3, 0x2, 0x2, 0x2, 0x117c, 0x117d, 0x3, 0x2, 0x2, 
       0x2, 0x117d, 0x117e, 0x5, 0x1ae, 0xd8, 0x2, 0x117e, 0x117f, 0x7, 
       0x98, 0x2, 0x2, 0x117f, 0x1184, 0x5, 0x1a0, 0xd1, 0x2, 0x1180, 0x1181, 
       0x7, 0x3c6, 0x2, 0x2, 0x1181, 0x1183, 0x5, 0x1a0, 0xd1, 0x2, 0x1182, 
       0x1180, 0x3, 0x2, 0x2, 0x2, 0x1183, 0x1186, 0x3, 0x2, 0x2, 0x2, 0x1184, 
       0x1182, 0x3, 0x2, 0x2, 0x2, 0x1184, 0x1185, 0x3, 0x2, 0x2, 0x2, 0x1185, 
       0x1195, 0x3, 0x2, 0x2, 0x2, 0x1186, 0x1184, 0x3, 0x2, 0x2, 0x2, 0x1187, 
       0x1193, 0x7, 0x7e, 0x2, 0x2, 0x1188, 0x1194, 0x7, 0x1aa, 0x2, 0x2, 
       0x1189, 0x1190, 0x5, 0x1a2, 0xd2, 0x2, 0x118a, 0x118c, 0x7, 0xc, 
       0x2, 0x2, 0x118b, 0x118a, 0x3, 0x2, 0x2, 0x2, 0x118b, 0x118c, 0x3, 
       0x2, 0x2, 0x2, 0x118c, 0x118d, 0x3, 0x2, 0x2, 0x2, 0x118d, 0x118f, 
       0x5, 0x1a2, 0xd2, 0x2, 0x118e, 0x118b, 0x3, 0x2, 0x2, 0x2, 0x118f, 
       0x1192, 0x3, 0x2, 0x2, 0x2, 0x1190, 0x118e, 0x3, 0x2, 0x2, 0x2, 0x1190, 
       0x1191, 0x3, 0x2, 0x2, 0x2, 0x1191, 0x1194, 0x3, 0x2, 0x2, 0x2, 0x1192, 
       0x1190, 0x3, 0x2, 0x2, 0x2, 0x1193, 0x1188, 0x3, 0x2, 0x2, 0x2, 0x1193, 
       0x1189, 0x3, 0x2, 0x2, 0x2, 0x1194, 0x1196, 0x3, 0x2, 0x2, 0x2, 0x1195, 
       0x1187, 0x3, 0x2, 0x2, 0x2, 0x1195, 0x1196, 0x3, 0x2, 0x2, 0x2, 0x1196, 
       0x11a0, 0x3, 0x2, 0x2, 0x2, 0x1197, 0x119d, 0x7, 0xa9, 0x2, 0x2, 
       0x1198, 0x1199, 0x7, 0x40, 0x2, 0x2, 0x1199, 0x119c, 0x7, 0x6a, 0x2, 
       0x2, 0x119a, 0x119c, 0x5, 0x1a4, 0xd3, 0x2, 0x119b, 0x1198, 0x3, 
       0x2, 0x2, 0x2, 0x119b, 0x119a, 0x3, 0x2, 0x2, 0x2, 0x119c, 0x119f, 
       0x3, 0x2, 0x2, 0x2, 0x119d, 0x119b, 0x3, 0x2, 0x2, 0x2, 0x119d, 0x119e, 
       0x3, 0x2, 0x2, 0x2, 0x119e, 0x11a1, 0x3, 0x2, 0x2, 0x2, 0x119f, 0x119d, 
       0x3, 0x2, 0x2, 0x2, 0x11a0, 0x1197, 0x3, 0x2, 0x2, 0x2, 0x11a0, 0x11a1, 
       0x3, 0x2, 0x2, 0x2, 0x11a1, 0x193, 0x3, 0x2, 0x2, 0x2, 0x11a2, 0x11a3, 
       0x7, 0x40, 0x2, 0x2, 0x11a3, 0x11a4, 0x7, 0x1c9, 0x2, 0x2, 0x11a4, 
       0x11a5, 0x7, 0x68, 0x2, 0x2, 0x11a5, 0x11a6, 0x5, 0x1fc, 0xff, 0x2, 
       0x11a6, 0x11a7, 0x7, 0x98, 0x2, 0x2, 0x11a7, 0x11ac, 0x5, 0x1fc, 
       0xff, 0x2, 0x11a8, 0x11a9, 0x7, 0x3c6, 0x2, 0x2, 0x11a9, 0x11ab, 
       0x5, 0x1fc, 0xff, 0x2, 0x11aa, 0x11a8, 0x3, 0x2, 0x2, 0x2, 0x11ab, 
       0x11ae, 0x3, 0x2, 0x2, 0x2, 0x11ac, 0x11aa, 0x3, 0x2, 0x2, 0x2, 0x11ac, 
       0x11ad, 0x3, 0x2, 0x2, 0x2, 0x11ad, 0x11b2, 0x3, 0x2, 0x2, 0x2, 0x11ae, 
       0x11ac, 0x3, 0x2, 0x2, 0x2, 0x11af, 0x11b0, 0x7, 0xa9, 0x2, 0x2, 
       0x11b0, 0x11b1, 0x7, 0x40, 0x2, 0x2, 0x11b1, 0x11b3, 0x7, 0x6a, 0x2, 
       0x2, 0x11b2, 0x11af, 0x3, 0x2, 0x2, 0x2, 0x11b2, 0x11b3, 0x3, 0x2, 
       0x2, 0x2, 0x11b3, 0x195, 0x3, 0x2, 0x2, 0x2, 0x11b4, 0x11b5, 0x7, 
       0x7b, 0x2, 0x2, 0x11b5, 0x11b6, 0x7, 0x21f, 0x2, 0x2, 0x11b6, 0x11bb, 
       0x5, 0x1b0, 0xd9, 0x2, 0x11b7, 0x11b8, 0x7, 0x3c6, 0x2, 0x2, 0x11b8, 
       0x11ba, 0x5, 0x1b0, 0xd9, 0x2, 0x11b9, 0x11b7, 0x3, 0x2, 0x2, 0x2, 
       0x11ba, 0x11bd, 0x3, 0x2, 0x2, 0x2, 0x11bb, 0x11b9, 0x3, 0x2, 0x2, 
       0x2, 0x11bb, 0x11bc, 0x3, 0x2, 0x2, 0x2, 0x11bc, 0x197, 0x3, 0x2, 
       0x2, 0x2, 0x11bd, 0x11bb, 0x3, 0x2, 0x2, 0x2, 0x11be, 0x11bf, 0x7, 
       0x81, 0x2, 0x2, 0x11bf, 0x11c4, 0x5, 0x1aa, 0xd6, 0x2, 0x11c0, 0x11c1, 
       0x7, 0x3c6, 0x2, 0x2, 0x11c1, 0x11c3, 0x5, 0x1aa, 0xd6, 0x2, 0x11c2, 
       0x11c0, 0x3, 0x2, 0x2, 0x2, 0x11c3, 0x11c6, 0x3, 0x2, 0x2, 0x2, 0x11c4, 
       0x11c2, 0x3, 0x2, 0x2, 0x2, 0x11c4, 0x11c5, 0x3, 0x2, 0x2, 0x2, 0x11c5, 
       0x11c7, 0x3, 0x2, 0x2, 0x2, 0x11c6, 0x11c4, 0x3, 0x2, 0x2, 0x2, 0x11c7, 
       0x11c9, 0x7, 0x68, 0x2, 0x2, 0x11c8, 0x11ca, 0x9, 0x3c, 0x2, 0x2, 
       0x11c9, 0x11c8, 0x3, 0x2, 0x2, 0x2, 0x11c9, 0x11ca, 0x3, 0x2, 0x2, 
       0x2, 0x11ca, 0x11cb, 0x3, 0x2, 0x2, 0x2, 0x11cb, 0x11cc, 0x5, 0x1ae, 
       0xd8, 0x2, 0x11cc, 0x11cd, 0x7, 0x3d, 0x2, 0x2, 0x11cd, 0x11d2, 0x5, 
       0x1fc, 0xff, 0x2, 0x11ce, 0x11cf, 0x7, 0x3c6, 0x2, 0x2, 0x11cf, 0x11d1, 
       0x5, 0x1fc, 0xff, 0x2, 0x11d0, 0x11ce, 0x3, 0x2, 0x2, 0x2, 0x11d1, 
       0x11d4, 0x3, 0x2, 0x2, 0x2, 0x11d2, 0x11d0, 0x3, 0x2, 0x2, 0x2, 0x11d2, 
       0x11d3, 0x3, 0x2, 0x2, 0x2, 0x11d3, 0x11e7, 0x3, 0x2, 0x2, 0x2, 0x11d4, 
       0x11d2, 0x3, 0x2, 0x2, 0x2, 0x11d5, 0x11d6, 0x7, 0x81, 0x2, 0x2, 
       0x11d6, 0x11d8, 0x7, 0x8, 0x2, 0x2, 0x11d7, 0x11d9, 0x7, 0x245, 0x2, 
       0x2, 0x11d8, 0x11d7, 0x3, 0x2, 0x2, 0x2, 0x11d8, 0x11d9, 0x3, 0x2, 
       0x2, 0x2, 0x11d9, 0x11da, 0x3, 0x2, 0x2, 0x2, 0x11da, 0x11db, 0x7, 
       0x3c6, 0x2, 0x2, 0x11db, 0x11dc, 0x7, 0x40, 0x2, 0x2, 0x11dc, 0x11dd, 
       0x7, 0x6a, 0x2, 0x2, 0x11dd, 0x11de, 0x7, 0x3d, 0x2, 0x2, 0x11de, 
       0x11e3, 0x5, 0x1fc, 0xff, 0x2, 0x11df, 0x11e0, 0x7, 0x3c6, 0x2, 0x2, 
       0x11e0, 0x11e2, 0x5, 0x1fc, 0xff, 0x2, 0x11e1, 0x11df, 0x3, 0x2, 
       0x2, 0x2, 0x11e2, 0x11e5, 0x3, 0x2, 0x2, 0x2, 0x11e3, 0x11e1, 0x3, 
       0x2, 0x2, 0x2, 0x11e3, 0x11e4, 0x3, 0x2, 0x2, 0x2, 0x11e4, 0x11e7, 
       0x3, 0x2, 0x2, 0x2, 0x11e5, 0x11e3, 0x3, 0x2, 0x2, 0x2, 0x11e6, 0x11be, 
       0x3, 0x2, 0x2, 0x2, 0x11e6, 0x11d5, 0x3, 0x2, 0x2, 0x2, 0x11e7, 0x199, 
       0x3, 0x2, 0x2, 0x2, 0x11e8, 0x11e9, 0x7, 0x81, 0x2, 0x2, 0x11e9, 
       0x11ea, 0x7, 0x1c9, 0x2, 0x2, 0x11ea, 0x11eb, 0x7, 0x68, 0x2, 0x2, 
       0x11eb, 0x11ec, 0x5, 0x1fc, 0xff, 0x2, 0x11ec, 0x11ed, 0x7, 0x3d, 
       0x2, 0x2, 0x11ed, 0x11f2, 0x5, 0x1fc, 0xff, 0x2, 0x11ee, 0x11ef, 
       0x7, 0x3c6, 0x2, 0x2, 0x11ef, 0x11f1, 0x5, 0x1fc, 0xff, 0x2, 0x11f0, 
       0x11ee, 0x3, 0x2, 0x2, 0x2, 0x11f1, 0x11f4, 0x3, 0x2, 0x2, 0x2, 0x11f2, 
       0x11f0, 0x3, 0x2, 0x2, 0x2, 0x11f2, 0x11f3, 0x3, 0x2, 0x2, 0x2, 0x11f3, 
       0x19b, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11f2, 0x3, 0x2, 0x2, 0x2, 0x11f5, 
       0x11f6, 0x7, 0x87, 0x2, 0x2, 0x11f6, 0x11f9, 0x7, 0x1bc, 0x2, 0x2, 
       0x11f7, 0x11f8, 0x7, 0x3a, 0x2, 0x2, 0x11f8, 0x11fa, 0x5, 0x1fc, 
       0xff, 0x2, 0x11f9, 0x11f7, 0x3, 0x2, 0x2, 0x2, 0x11f9, 0x11fa, 0x3, 
       0x2, 0x2, 0x2, 0x11fa, 0x11fb, 0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11fe, 
       0x7, 0x3bb, 0x2, 0x2, 0x11fc, 0x11ff, 0x5, 0x254, 0x12b, 0x2, 0x11fd, 
       0x11ff, 0x7, 0x3d3, 0x2, 0x2, 0x11fe, 0x11fc, 0x3, 0x2, 0x2, 0x2, 
       0x11fe, 0x11fd, 0x3, 0x2, 0x2, 0x2, 0x11ff, 0x19d, 0x3, 0x2, 0x2, 
       0x2, 0x1200, 0x1201, 0x5, 0x1fc, 0xff, 0x2, 0x1201, 0x1202, 0x5, 
       0x1a6, 0xd4, 0x2, 0x1202, 0x19f, 0x3, 0x2, 0x2, 0x2, 0x1203, 0x1204, 
       0x5, 0x1fc, 0xff, 0x2, 0x1204, 0x1205, 0x7, 0x164, 0x2, 0x2, 0x1205, 
       0x1206, 0x7, 0x12, 0x2, 0x2, 0x1206, 0x1207, 0x7, 0x1bc, 0x2, 0x2, 
       0x1207, 0x1208, 0x7, 0x3d3, 0x2, 0x2, 0x1208, 0x121c, 0x3, 0x2, 0x2, 
       0x2, 0x1209, 0x120a, 0x5, 0x1fc, 0xff, 0x2, 0x120a, 0x120d, 0x7, 
       0x164, 0x2, 0x2, 0x120b, 0x120c, 0x7, 0xa9, 0x2, 0x2, 0x120c, 0x120e, 
       0x5, 0x20c, 0x107, 0x2, 0x120d, 0x120b, 0x3, 0x2, 0x2, 0x2, 0x120d, 
       0x120e, 0x3, 0x2, 0x2, 0x2, 0x120e, 0x120f, 0x3, 0x2, 0x2, 0x2, 0x120f, 
       0x1210, 0x7, 0x12, 0x2, 0x2, 0x1210, 0x1211, 0x7, 0x3d3, 0x2, 0x2, 
       0x1211, 0x121c, 0x3, 0x2, 0x2, 0x2, 0x1212, 0x1213, 0x5, 0x1fc, 0xff, 
       0x2, 0x1213, 0x1214, 0x7, 0x164, 0x2, 0x2, 0x1214, 0x1215, 0x7, 0xa9, 
       0x2, 0x2, 0x1215, 0x1218, 0x5, 0x20c, 0x107, 0x2, 0x1216, 0x1217, 
       0x7, 0xd, 0x2, 0x2, 0x1217, 0x1219, 0x7, 0x3d3, 0x2, 0x2, 0x1218, 
       0x1216, 0x3, 0x2, 0x2, 0x2, 0x1218, 0x1219, 0x3, 0x2, 0x2, 0x2, 0x1219, 
       0x121c, 0x3, 0x2, 0x2, 0x2, 0x121a, 0x121c, 0x5, 0x1fc, 0xff, 0x2, 
       0x121b, 0x1203, 0x3, 0x2, 0x2, 0x2, 0x121b, 0x1209, 0x3, 0x2, 0x2, 
       0x2, 0x121b, 0x1212, 0x3, 0x2, 0x2, 0x2, 0x121b, 0x121a, 0x3, 0x2, 
       0x2, 0x2, 0x121c, 0x1a1, 0x3, 0x2, 0x2, 0x2, 0x121d, 0x1226, 0x7, 
       0x92, 0x2, 0x2, 0x121e, 0x1226, 0x7, 0x22d, 0x2, 0x2, 0x121f, 0x1220, 
       0x7, 0x118, 0x2, 0x2, 0x1220, 0x1226, 0x7, 0x3d3, 0x2, 0x2, 0x1221, 
       0x1222, 0x7, 0x173, 0x2, 0x2, 0x1222, 0x1226, 0x7, 0x3d3, 0x2, 0x2, 
       0x1223, 0x1224, 0x7, 0x20a, 0x2, 0x2, 0x1224, 0x1226, 0x7, 0x3d3, 
       0x2, 0x2, 0x1225, 0x121d, 0x3, 0x2, 0x2, 0x2, 0x1225, 0x121e, 0x3, 
       0x2, 0x2, 0x2, 0x1225, 0x121f, 0x3, 0x2, 0x2, 0x2, 0x1225, 0x1221, 
       0x3, 0x2, 0x2, 0x2, 0x1225, 0x1223, 0x3, 0x2, 0x2, 0x2, 0x1226, 0x1a3, 
       0x3, 0x2, 0x2, 0x2, 0x1227, 0x1228, 0x7, 0x195, 0x2, 0x2, 0x1228, 
       0x1230, 0x5, 0x212, 0x10a, 0x2, 0x1229, 0x122a, 0x7, 0x198, 0x2, 
       0x2, 0x122a, 0x1230, 0x5, 0x212, 0x10a, 0x2, 0x122b, 0x122c, 0x7, 
       0x194, 0x2, 0x2, 0x122c, 0x1230, 0x5, 0x212, 0x10a, 0x2, 0x122d, 
       0x122e, 0x7, 0x199, 0x2, 0x2, 0x122e, 0x1230, 0x5, 0x212, 0x10a, 
       0x2, 0x122f, 0x1227, 0x3, 0x2, 0x2, 0x2, 0x122f, 0x1229, 0x3, 0x2, 
       0x2, 0x2, 0x122f, 0x122b, 0x3, 0x2, 0x2, 0x2, 0x122f, 0x122d, 0x3, 
       0x2, 0x2, 0x2, 0x1230, 0x1a5, 0x3, 0x2, 0x2, 0x2, 0x1231, 0x1232, 
       0x7, 0x1bc, 0x2, 0x2, 0x1232, 0x1239, 0x7, 0x14b, 0x2, 0x2, 0x1233, 
       0x123a, 0x7, 0x27, 0x2, 0x2, 0x1234, 0x123a, 0x7, 0x1a6, 0x2, 0x2, 
       0x1235, 0x1236, 0x7, 0x4c, 0x2, 0x2, 0x1236, 0x1237, 0x5, 0x212, 
       0x10a, 0x2, 0x1237, 0x1238, 0x7, 0x237, 0x2, 0x2, 0x1238, 0x123a, 
       0x3, 0x2, 0x2, 0x2, 0x1239, 0x1233, 0x3, 0x2, 0x2, 0x2, 0x1239, 0x1234, 
       0x3, 0x2, 0x2, 0x2, 0x1239, 0x1235, 0x3, 0x2, 0x2, 0x2, 0x1239, 0x123a, 
       0x3, 0x2, 0x2, 0x2, 0x123a, 0x1a7, 0x3, 0x2, 0x2, 0x2, 0x123b, 0x123c, 
       0x7, 0xfe, 0x2, 0x2, 0x123c, 0x123d, 0x9, 0x3d, 0x2, 0x2, 0x123d, 
       0x1a9, 0x3, 0x2, 0x2, 0x2, 0x123e, 0x1243, 0x5, 0x1ac, 0xd7, 0x2, 
       0x123f, 0x1240, 0x7, 0x3c4, 0x2, 0x2, 0x1240, 0x1241, 0x5, 0x22c, 
       0x117, 0x2, 0x1241, 0x1242, 0x7, 0x3c5, 0x2, 0x2, 0x1242, 0x1244, 
       0x3, 0x2, 0x2, 0x2, 0x1243, 0x123f, 0x3, 0x2, 0x2, 0x2, 0x1243, 0x1244, 
       0x3, 0x2, 0x2, 0x2, 0x1244, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0x1245, 0x1247, 
       0x7, 0x8, 0x2, 0x2, 0x1246, 0x1248, 0x7, 0x245, 0x2, 0x2, 0x1247, 
       0x1246, 0x3, 0x2, 0x2, 0x2, 0x1247, 0x1248, 0x3, 0x2, 0x2, 0x2, 0x1248, 
       0x1271, 0x3, 0x2, 0x2, 0x2, 0x1249, 0x124b, 0x7, 0x9, 0x2, 0x2, 0x124a, 
       0x124c, 0x7, 0x23e, 0x2, 0x2, 0x124b, 0x124a, 0x3, 0x2, 0x2, 0x2, 
       0x124b, 0x124c, 0x3, 0x2, 0x2, 0x2, 0x124c, 0x1271, 0x3, 0x2, 0x2, 
       0x2, 0x124d, 0x1254, 0x7, 0x20, 0x2, 0x2, 0x124e, 0x124f, 0x7, 0x211, 
       0x2, 0x2, 0x124f, 0x1255, 0x7, 0x23d, 0x2, 0x2, 0x1250, 0x1255, 0x7, 
       0x23e, 0x2, 0x2, 0x1251, 0x1255, 0x7, 0x225, 0x2, 0x2, 0x1252, 0x1255, 
       0x7, 0x21f, 0x2, 0x2, 0x1253, 0x1255, 0x7, 0x210, 0x2, 0x2, 0x1254, 
       0x124e, 0x3, 0x2, 0x2, 0x2, 0x1254, 0x1250, 0x3, 0x2, 0x2, 0x2, 0x1254, 
       0x1251, 0x3, 0x2, 0x2, 0x2, 0x1254, 0x1252, 0x3, 0x2, 0x2, 0x2, 0x1254, 
       0x1253, 0x3, 0x2, 0x2, 0x2, 0x1254, 0x1255, 0x3, 0x2, 0x2, 0x2, 0x1255, 
       0x1271, 0x3, 0x2, 0x2, 0x2, 0x1256, 0x1271, 0x7, 0x29, 0x2, 0x2, 
       0x1257, 0x1271, 0x7, 0x2f, 0x2, 0x2, 0x1258, 0x1271, 0x7, 0x146, 
       0x2, 0x2, 0x1259, 0x1271, 0x7, 0x23f, 0x2, 0x2, 0x125a, 0x1271, 0x7, 
       0x240, 0x2, 0x2, 0x125b, 0x125c, 0x7, 0x40, 0x2, 0x2, 0x125c, 0x1271, 
       0x7, 0x6a, 0x2, 0x2, 0x125d, 0x1271, 0x7, 0x47, 0x2, 0x2, 0x125e, 
       0x1271, 0x7, 0x4b, 0x2, 0x2, 0x125f, 0x1260, 0x7, 0x5c, 0x2, 0x2, 
       0x1260, 0x1271, 0x7, 0x23d, 0x2, 0x2, 0x1261, 0x1271, 0x7, 0x241, 
       0x2, 0x2, 0x1262, 0x1271, 0x7, 0x1c9, 0x2, 0x2, 0x1263, 0x1271, 0x7, 
       0x78, 0x2, 0x2, 0x1264, 0x1271, 0x7, 0x242, 0x2, 0x2, 0x1265, 0x1266, 
       0x7, 0x1de, 0x2, 0x2, 0x1266, 0x1271, 0x9, 0x3e, 0x2, 0x2, 0x1267, 
       0x1271, 0x7, 0x86, 0x2, 0x2, 0x1268, 0x1269, 0x7, 0x89, 0x2, 0x2, 
       0x1269, 0x1271, 0x9, 0x3f, 0x2, 0x2, 0x126a, 0x1271, 0x7, 0x243, 
       0x2, 0x2, 0x126b, 0x1271, 0x7, 0x244, 0x2, 0x2, 0x126c, 0x1271, 0x7, 
       0x9a, 0x2, 0x2, 0x126d, 0x1271, 0x7, 0xa1, 0x2, 0x2, 0x126e, 0x1271, 
       0x7, 0xa2, 0x2, 0x2, 0x126f, 0x1271, 0x7, 0x246, 0x2, 0x2, 0x1270, 
       0x1245, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x1249, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x124d, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x1256, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x1257, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x1258, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x1259, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x125a, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x125b, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x125d, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x125e, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x125f, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x1261, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x1262, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x1263, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x1264, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x1265, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x1267, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x1268, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x126a, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x126b, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x126c, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x126d, 0x3, 0x2, 0x2, 0x2, 0x1270, 0x126e, 0x3, 0x2, 0x2, 0x2, 0x1270, 
       0x126f, 0x3, 0x2, 0x2, 0x2, 0x1271, 0x1ad, 0x3, 0x2, 0x2, 0x2, 0x1272, 
       0x1280, 0x7, 0x3b3, 0x2, 0x2, 0x1273, 0x1274, 0x7, 0x3b3, 0x2, 0x2, 
       0x1274, 0x1275, 0x7, 0x3c3, 0x2, 0x2, 0x1275, 0x1280, 0x7, 0x3b3, 
       0x2, 0x2, 0x1276, 0x1277, 0x5, 0x20e, 0x108, 0x2, 0x1277, 0x1278, 
       0x7, 0x3c3, 0x2, 0x2, 0x1278, 0x1279, 0x7, 0x3b3, 0x2, 0x2, 0x1279, 
       0x1280, 0x3, 0x2, 0x2, 0x2, 0x127a, 0x127b, 0x5, 0x20e, 0x108, 0x2, 
       0x127b, 0x127c, 0x7, 0x3c3, 0x2, 0x2, 0x127c, 0x127d, 0x5, 0x20e, 
       0x108, 0x2, 0x127d, 0x1280, 0x3, 0x2, 0x2, 0x2, 0x127e, 0x1280, 0x5, 
       0x20e, 0x108, 0x2, 0x127f, 0x1272, 0x3, 0x2, 0x2, 0x2, 0x127f, 0x1273, 
       0x3, 0x2, 0x2, 0x2, 0x127f, 0x1276, 0x3, 0x2, 0x2, 0x2, 0x127f, 0x127a, 
       0x3, 0x2, 0x2, 0x2, 0x127f, 0x127e, 0x3, 0x2, 0x2, 0x2, 0x1280, 0x1af, 
       0x3, 0x2, 0x2, 0x2, 0x1281, 0x1282, 0x5, 0x1fc, 0xff, 0x2, 0x1282, 
       0x1283, 0x7, 0x98, 0x2, 0x2, 0x1283, 0x1284, 0x5, 0x1fc, 0xff, 0x2, 
       0x1284, 0x1b1, 0x3, 0x2, 0x2, 0x2, 0x1285, 0x1287, 0x7, 0xb, 0x2, 
       0x2, 0x1286, 0x1288, 0x9, 0x40, 0x2, 0x2, 0x1287, 0x1286, 0x3, 0x2, 
       0x2, 0x2, 0x1287, 0x1288, 0x3, 0x2, 0x2, 0x2, 0x1288, 0x1289, 0x3, 
       0x2, 0x2, 0x2, 0x1289, 0x128a, 0x7, 0x95, 0x2, 0x2, 0x128a, 0x128b, 
       0x5, 0x22e, 0x118, 0x2, 0x128b, 0x1b3, 0x3, 0x2, 0x2, 0x2, 0x128c, 
       0x128d, 0x7, 0x19, 0x2, 0x2, 0x128d, 0x128e, 0x7, 0x95, 0x2, 0x2, 
       0x128e, 0x1292, 0x5, 0x22e, 0x118, 0x2, 0x128f, 0x1291, 0x5, 0x1bc, 
       0xdf, 0x2, 0x1290, 0x128f, 0x3, 0x2, 0x2, 0x2, 0x1291, 0x1294, 0x3, 
       0x2, 0x2, 0x2, 0x1292, 0x1290, 0x3, 0x2, 0x2, 0x2, 0x1292, 0x1293, 
       0x3, 0x2, 0x2, 0x2, 0x1293, 0x1b5, 0x3, 0x2, 0x2, 0x2, 0x1294, 0x1292, 
       0x3, 0x2, 0x2, 0x2, 0x1295, 0x1296, 0x7, 0x116, 0x2, 0x2, 0x1296, 
       0x1297, 0x7, 0x95, 0x2, 0x2, 0x1297, 0x1299, 0x5, 0x22e, 0x118, 0x2, 
       0x1298, 0x129a, 0x9, 0x41, 0x2, 0x2, 0x1299, 0x1298, 0x3, 0x2, 0x2, 
       0x2, 0x1299, 0x129a, 0x3, 0x2, 0x2, 0x2, 0x129a, 0x1b7, 0x3, 0x2, 
       0x2, 0x2, 0x129b, 0x129d, 0x7, 0x69, 0x2, 0x2, 0x129c, 0x129e, 0x9, 
       0x40, 0x2, 0x2, 0x129d, 0x129c, 0x3, 0x2, 0x2, 0x2, 0x129d, 0x129e, 
       0x3, 0x2, 0x2, 0x2, 0x129e, 0x129f, 0x3, 0x2, 0x2, 0x2, 0x129f, 0x12a0, 
       0x7, 0x95, 0x2, 0x2, 0x12a0, 0x12a1, 0x5, 0x22e, 0x118, 0x2, 0x12a1, 
       0x1b9, 0x3, 0x2, 0x2, 0x2, 0x12a2, 0x12a4, 0x7, 0x1d6, 0x2, 0x2, 
       0x12a3, 0x12a5, 0x9, 0x40, 0x2, 0x2, 0x12a4, 0x12a3, 0x3, 0x2, 0x2, 
       0x2, 0x12a4, 0x12a5, 0x3, 0x2, 0x2, 0x2, 0x12a5, 0x12a6, 0x3, 0x2, 
       0x2, 0x2, 0x12a6, 0x12a7, 0x7, 0x95, 0x2, 0x2, 0x12a7, 0x12a9, 0x5, 
       0x22e, 0x118, 0x2, 0x12a8, 0x12aa, 0x7, 0x1cb, 0x2, 0x2, 0x12a9, 
       0x12a8, 0x3, 0x2, 0x2, 0x2, 0x12a9, 0x12aa, 0x3, 0x2, 0x2, 0x2, 0x12aa, 
       0x12ac, 0x3, 0x2, 0x2, 0x2, 0x12ab, 0x12ad, 0x7, 0x14d, 0x2, 0x2, 
       0x12ac, 0x12ab, 0x3, 0x2, 0x2, 0x2, 0x12ac, 0x12ad, 0x3, 0x2, 0x2, 
       0x2, 0x12ad, 0x12af, 0x3, 0x2, 0x2, 0x2, 0x12ae, 0x12b0, 0x7, 0x220, 
       0x2, 0x2, 0x12af, 0x12ae, 0x3, 0x2, 0x2, 0x2, 0x12af, 0x12b0, 0x3, 
       0x2, 0x2, 0x2, 0x12b0, 0x1bb, 0x3, 0x2, 0x2, 0x2, 0x12b1, 0x12b2, 
       0x7, 0x3a, 0x2, 0x2, 0x12b2, 0x12b9, 0x7, 0x21e, 0x2, 0x2, 0x12b3, 
       0x12b9, 0x7, 0x1cb, 0x2, 0x2, 0x12b4, 0x12b9, 0x7, 0x14f, 0x2, 0x2, 
       0x12b5, 0x12b9, 0x7, 0x19a, 0x2, 0x2, 0x12b6, 0x12b9, 0x7, 0x14d, 
       0x2, 0x2, 0x12b7, 0x12b9, 0x7, 0x114, 0x2, 0x2, 0x12b8, 0x12b1, 0x3, 
       0x2, 0x2, 0x2, 0x12b8, 0x12b3, 0x3, 0x2, 0x2, 0x2, 0x12b8, 0x12b4, 
       0x3, 0x2, 0x2, 0x2, 0x12b8, 0x12b5, 0x3, 0x2, 0x2, 0x2, 0x12b8, 0x12b6, 
       0x3, 0x2, 0x2, 0x2, 0x12b8, 0x12b7, 0x3, 0x2, 0x2, 0x2, 0x12b9, 0x1bd, 
       0x3, 0x2, 0x2, 0x2, 0x12ba, 0x12bc, 0x7, 0x20, 0x2, 0x2, 0x12bb, 
       0x12bd, 0x7, 0x101, 0x2, 0x2, 0x12bc, 0x12bb, 0x3, 0x2, 0x2, 0x2, 
       0x12bc, 0x12bd, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x12be, 0x3, 0x2, 0x2, 
       0x2, 0x12be, 0x12bf, 0x7, 0x15a, 0x2, 0x2, 0x12bf, 0x12c0, 0x5, 0x20e, 
       0x108, 0x2, 0x12c0, 0x12c1, 0x7, 0x1e1, 0x2, 0x2, 0x12c1, 0x12c2, 
       0x9, 0x42, 0x2, 0x2, 0x12c2, 0x12c3, 0x7, 0x1f6, 0x2, 0x2, 0x12c3, 
       0x12c4, 0x7, 0x3d3, 0x2, 0x2, 0x12c4, 0x1bf, 0x3, 0x2, 0x2, 0x2, 
       0x12c5, 0x12c6, 0x7, 0x16b, 0x2, 0x2, 0x12c6, 0x12c7, 0x7, 0x1be, 
       0x2, 0x2, 0x12c7, 0x12c8, 0x5, 0x20e, 0x108, 0x2, 0x12c8, 0x12c9, 
       0x7, 0x1f6, 0x2, 0x2, 0x12c9, 0x12ca, 0x7, 0x3d3, 0x2, 0x2, 0x12ca, 
       0x1c1, 0x3, 0x2, 0x2, 0x2, 0x12cb, 0x12cc, 0x7, 0x21b, 0x2, 0x2, 
       0x12cc, 0x12cd, 0x7, 0x1be, 0x2, 0x2, 0x12cd, 0x12ce, 0x5, 0x20e, 
       0x108, 0x2, 0x12ce, 0x1c3, 0x3, 0x2, 0x2, 0x2, 0x12cf, 0x12d0, 0x7, 
       0x87, 0x2, 0x2, 0x12d0, 0x12d1, 0x5, 0x1c8, 0xe5, 0x2, 0x12d1, 0x12d2, 
       0x9, 0x43, 0x2, 0x2, 0x12d2, 0x12da, 0x5, 0x25a, 0x12e, 0x2, 0x12d3, 
       0x12d4, 0x7, 0x3c6, 0x2, 0x2, 0x12d4, 0x12d5, 0x5, 0x1c8, 0xe5, 0x2, 
       0x12d5, 0x12d6, 0x9, 0x43, 0x2, 0x2, 0x12d6, 0x12d7, 0x5, 0x25a, 
       0x12e, 0x2, 0x12d7, 0x12d9, 0x3, 0x2, 0x2, 0x2, 0x12d8, 0x12d3, 0x3, 
       0x2, 0x2, 0x2, 0x12d9, 0x12dc, 0x3, 0x2, 0x2, 0x2, 0x12da, 0x12d8, 
       0x3, 0x2, 0x2, 0x2, 0x12da, 0x12db, 0x3, 0x2, 0x2, 0x2, 0x12db, 0x12fa, 
       0x3, 0x2, 0x2, 0x2, 0x12dc, 0x12da, 0x3, 0x2, 0x2, 0x2, 0x12dd, 0x12e1, 
       0x7, 0x87, 0x2, 0x2, 0x12de, 0x12df, 0x7, 0x18, 0x2, 0x2, 0x12df, 
       0x12e2, 0x7, 0x87, 0x2, 0x2, 0x12e0, 0x12e2, 0x7, 0x2a4, 0x2, 0x2, 
       0x12e1, 0x12de, 0x3, 0x2, 0x2, 0x2, 0x12e1, 0x12e0, 0x3, 0x2, 0x2, 
       0x2, 0x12e2, 0x12e5, 0x3, 0x2, 0x2, 0x2, 0x12e3, 0x12e6, 0x5, 0x200, 
       0x101, 0x2, 0x12e4, 0x12e6, 0x7, 0x27, 0x2, 0x2, 0x12e5, 0x12e3, 
       0x3, 0x2, 0x2, 0x2, 0x12e5, 0x12e4, 0x3, 0x2, 0x2, 0x2, 0x12e6, 0x12fa, 
       0x3, 0x2, 0x2, 0x2, 0x12e7, 0x12e8, 0x7, 0x87, 0x2, 0x2, 0x12e8, 
       0x12ef, 0x7, 0x1a4, 0x2, 0x2, 0x12e9, 0x12ec, 0x5, 0x200, 0x101, 
       0x2, 0x12ea, 0x12eb, 0x7, 0x1a, 0x2, 0x2, 0x12eb, 0x12ed, 0x5, 0x202, 
       0x102, 0x2, 0x12ec, 0x12ea, 0x3, 0x2, 0x2, 0x2, 0x12ec, 0x12ed, 0x3, 
       0x2, 0x2, 0x2, 0x12ed, 0x12f0, 0x3, 0x2, 0x2, 0x2, 0x12ee, 0x12f0, 
       0x7, 0x27, 0x2, 0x2, 0x12ef, 0x12e9, 0x3, 0x2, 0x2, 0x2, 0x12ef, 
       0x12ee, 0x3, 0x2, 0x2, 0x2, 0x12f0, 0x12fa, 0x3, 0x2, 0x2, 0x2, 0x12f1, 
       0x12fa, 0x5, 0x19c, 0xcf, 0x2, 0x12f2, 0x12fa, 0x5, 0x120, 0x91, 
       0x2, 0x12f3, 0x12fa, 0x5, 0x11e, 0x90, 0x2, 0x12f4, 0x12f5, 0x7, 
       0x87, 0x2, 0x2, 0x12f5, 0x12f6, 0x5, 0x1f4, 0xfb, 0x2, 0x12f6, 0x12f7, 
       0x9, 0x43, 0x2, 0x2, 0x12f7, 0x12f8, 0x5, 0x25a, 0x12e, 0x2, 0x12f8, 
       0x12fa, 0x3, 0x2, 0x2, 0x2, 0x12f9, 0x12cf, 0x3, 0x2, 0x2, 0x2, 0x12f9, 
       0x12dd, 0x3, 0x2, 0x2, 0x2, 0x12f9, 0x12e7, 0x3, 0x2, 0x2, 0x2, 0x12f9, 
       0x12f1, 0x3, 0x2, 0x2, 0x2, 0x12f9, 0x12f2, 0x3, 0x2, 0x2, 0x2, 0x12f9, 
       0x12f3, 0x3, 0x2, 0x2, 0x2, 0x12f9, 0x12f4, 0x3, 0x2, 0x2, 0x2, 0x12fa, 
       0x1c5, 0x3, 0x2, 0x2, 0x2, 0x12fb, 0x12fc, 0x7, 0x89, 0x2, 0x2, 0x12fc, 
       0x12fd, 0x9, 0x32, 0x2, 0x2, 0x12fd, 0x1392, 0x7, 0x17e, 0x2, 0x2, 
       0x12fe, 0x12ff, 0x7, 0x89, 0x2, 0x2, 0x12ff, 0x1300, 0x9, 0x44, 0x2, 
       0x2, 0x1300, 0x1303, 0x7, 0x147, 0x2, 0x2, 0x1301, 0x1302, 0x7, 0x46, 
       0x2, 0x2, 0x1302, 0x1304, 0x7, 0x3d3, 0x2, 0x2, 0x1303, 0x1301, 0x3, 
       0x2, 0x2, 0x2, 0x1303, 0x1304, 0x3, 0x2, 0x2, 0x2, 0x1304, 0x1307, 
       0x3, 0x2, 0x2, 0x2, 0x1305, 0x1306, 0x7, 0x3d, 0x2, 0x2, 0x1306, 
       0x1308, 0x5, 0x212, 0x10a, 0x2, 0x1307, 0x1305, 0x3, 0x2, 0x2, 0x2, 
       0x1307, 0x1308, 0x3, 0x2, 0x2, 0x2, 0x1308, 0x1310, 0x3, 0x2, 0x2, 
       0x2, 0x1309, 0x130d, 0x7, 0x58, 0x2, 0x2, 0x130a, 0x130b, 0x5, 0x212, 
       0x10a, 0x2, 0x130b, 0x130c, 0x7, 0x3c6, 0x2, 0x2, 0x130c, 0x130e, 
       0x3, 0x2, 0x2, 0x2, 0x130d, 0x130a, 0x3, 0x2, 0x2, 0x2, 0x130d, 0x130e, 
       0x3, 0x2, 0x2, 0x2, 0x130e, 0x130f, 0x3, 0x2, 0x2, 0x2, 0x130f, 0x1311, 
       0x5, 0x212, 0x10a, 0x2, 0x1310, 0x1309, 0x3, 0x2, 0x2, 0x2, 0x1310, 
       0x1311, 0x3, 0x2, 0x2, 0x2, 0x1311, 0x1392, 0x3, 0x2, 0x2, 0x2, 0x1312, 
       0x1313, 0x7, 0x89, 0x2, 0x2, 0x1313, 0x1315, 0x5, 0x1ca, 0xe6, 0x2, 
       0x1314, 0x1316, 0x5, 0x1cc, 0xe7, 0x2, 0x1315, 0x1314, 0x3, 0x2, 
       0x2, 0x2, 0x1315, 0x1316, 0x3, 0x2, 0x2, 0x2, 0x1316, 0x1392, 0x3, 
       0x2, 0x2, 0x2, 0x1317, 0x1319, 0x7, 0x89, 0x2, 0x2, 0x1318, 0x131a, 
       0x7, 0x159, 0x2, 0x2, 0x1319, 0x1318, 0x3, 0x2, 0x2, 0x2, 0x1319, 
       0x131a, 0x3, 0x2, 0x2, 0x2, 0x131a, 0x131b, 0x3, 0x2, 0x2, 0x2, 0x131b, 
       0x131c, 0x9, 0x24, 0x2, 0x2, 0x131c, 0x131d, 0x9, 0x45, 0x2, 0x2, 
       0x131d, 0x1320, 0x5, 0x1f6, 0xfc, 0x2, 0x131e, 0x131f, 0x9, 0x45, 
       0x2, 0x2, 0x131f, 0x1321, 0x5, 0x20e, 0x108, 0x2, 0x1320, 0x131e, 
       0x3, 0x2, 0x2, 0x2, 0x1320, 0x1321, 0x3, 0x2, 0x2, 0x2, 0x1321, 0x1323, 
       0x3, 0x2, 0x2, 0x2, 0x1322, 0x1324, 0x5, 0x1cc, 0xe7, 0x2, 0x1323, 
       0x1322, 0x3, 0x2, 0x2, 0x2, 0x1323, 0x1324, 0x3, 0x2, 0x2, 0x2, 0x1324, 
       0x1392, 0x3, 0x2, 0x2, 0x2, 0x1325, 0x1326, 0x7, 0x89, 0x2, 0x2, 
       0x1326, 0x1327, 0x7, 0x20, 0x2, 0x2, 0x1327, 0x1329, 0x9, 0x2, 0x2, 
       0x2, 0x1328, 0x132a, 0x5, 0x244, 0x123, 0x2, 0x1329, 0x1328, 0x3, 
       0x2, 0x2, 0x2, 0x1329, 0x132a, 0x3, 0x2, 0x2, 0x2, 0x132a, 0x132b, 
       0x3, 0x2, 0x2, 0x2, 0x132b, 0x1392, 0x5, 0x20e, 0x108, 0x2, 0x132c, 
       0x132d, 0x7, 0x89, 0x2, 0x2, 0x132d, 0x132e, 0x7, 0x20, 0x2, 0x2, 
       0x132e, 0x132f, 0x9, 0x46, 0x2, 0x2, 0x132f, 0x1392, 0x5, 0x1f4, 
       0xfb, 0x2, 0x1330, 0x1331, 0x7, 0x89, 0x2, 0x2, 0x1331, 0x1332, 0x7, 
       0x20, 0x2, 0x2, 0x1332, 0x1333, 0x7, 0x21f, 0x2, 0x2, 0x1333, 0x1392, 
       0x5, 0x1fc, 0xff, 0x2, 0x1334, 0x1335, 0x7, 0x89, 0x2, 0x2, 0x1335, 
       0x1336, 0x7, 0x140, 0x2, 0x2, 0x1336, 0x1337, 0x5, 0x204, 0x103, 
       0x2, 0x1337, 0x1338, 0x9, 0x47, 0x2, 0x2, 0x1338, 0x1392, 0x3, 0x2, 
       0x2, 0x2, 0x1339, 0x133a, 0x7, 0x89, 0x2, 0x2, 0x133a, 0x1392, 0x5, 
       0x1ce, 0xe8, 0x2, 0x133b, 0x133c, 0x7, 0x89, 0x2, 0x2, 0x133c, 0x133d, 
       0x9, 0x48, 0x2, 0x2, 0x133d, 0x1341, 0x7, 0x58, 0x2, 0x2, 0x133e, 
       0x133f, 0x5, 0x212, 0x10a, 0x2, 0x133f, 0x1340, 0x7, 0x3c6, 0x2, 
       0x2, 0x1340, 0x1342, 0x3, 0x2, 0x2, 0x2, 0x1341, 0x133e, 0x3, 0x2, 
       0x2, 0x2, 0x1341, 0x1342, 0x3, 0x2, 0x2, 0x2, 0x1342, 0x1343, 0x3, 
       0x2, 0x2, 0x2, 0x1343, 0x1392, 0x5, 0x212, 0x10a, 0x2, 0x1344, 0x1345, 
       0x7, 0x89, 0x2, 0x2, 0x1345, 0x1346, 0x7, 0xdf, 0x2, 0x2, 0x1346, 
       0x1347, 0x7, 0x3c4, 0x2, 0x2, 0x1347, 0x1348, 0x7, 0x3b3, 0x2, 0x2, 
       0x1348, 0x1349, 0x7, 0x3c5, 0x2, 0x2, 0x1349, 0x1392, 0x9, 0x48, 
       0x2, 0x2, 0x134a, 0x134b, 0x7, 0x89, 0x2, 0x2, 0x134b, 0x134e, 0x5, 
       0x1d0, 0xe9, 0x2, 0x134c, 0x134d, 0x9, 0x45, 0x2, 0x2, 0x134d, 0x134f, 
       0x5, 0x20e, 0x108, 0x2, 0x134e, 0x134c, 0x3, 0x2, 0x2, 0x2, 0x134e, 
       0x134f, 0x3, 0x2, 0x2, 0x2, 0x134f, 0x1351, 0x3, 0x2, 0x2, 0x2, 0x1350, 
       0x1352, 0x5, 0x1cc, 0xe7, 0x2, 0x1351, 0x1350, 0x3, 0x2, 0x2, 0x2, 
       0x1351, 0x1352, 0x3, 0x2, 0x2, 0x2, 0x1352, 0x1392, 0x3, 0x2, 0x2, 
       0x2, 0x1353, 0x1354, 0x7, 0x89, 0x2, 0x2, 0x1354, 0x1355, 0x9, 0x49, 
       0x2, 0x2, 0x1355, 0x1356, 0x7, 0x11c, 0x2, 0x2, 0x1356, 0x1392, 0x5, 
       0x1f4, 0xfb, 0x2, 0x1357, 0x1358, 0x7, 0x89, 0x2, 0x2, 0x1358, 0x135b, 
       0x7, 0x15d, 0x2, 0x2, 0x1359, 0x135a, 0x7, 0x3a, 0x2, 0x2, 0x135a, 
       0x135c, 0x5, 0x1fc, 0xff, 0x2, 0x135b, 0x1359, 0x3, 0x2, 0x2, 0x2, 
       0x135b, 0x135c, 0x3, 0x2, 0x2, 0x2, 0x135c, 0x1392, 0x3, 0x2, 0x2, 
       0x2, 0x135d, 0x135e, 0x7, 0x89, 0x2, 0x2, 0x135e, 0x135f, 0x9, 0x4a, 
       0x2, 0x2, 0x135f, 0x1360, 0x9, 0x45, 0x2, 0x2, 0x1360, 0x1363, 0x5, 
       0x1f6, 0xfc, 0x2, 0x1361, 0x1362, 0x9, 0x45, 0x2, 0x2, 0x1362, 0x1364, 
       0x5, 0x20e, 0x108, 0x2, 0x1363, 0x1361, 0x3, 0x2, 0x2, 0x2, 0x1363, 
       0x1364, 0x3, 0x2, 0x2, 0x2, 0x1364, 0x1366, 0x3, 0x2, 0x2, 0x2, 0x1365, 
       0x1367, 0x5, 0x100, 0x81, 0x2, 0x1366, 0x1365, 0x3, 0x2, 0x2, 0x2, 
       0x1366, 0x1367, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x1392, 0x3, 0x2, 0x2, 
       0x2, 0x1368, 0x1369, 0x7, 0x89, 0x2, 0x2, 0x1369, 0x136a, 0x7, 0x1b2, 
       0x2, 0x2, 0x136a, 0x136d, 0x7, 0x23d, 0x2, 0x2, 0x136b, 0x136c, 0x9, 
       0x45, 0x2, 0x2, 0x136c, 0x136e, 0x5, 0x20e, 0x108, 0x2, 0x136d, 0x136b, 
       0x3, 0x2, 0x2, 0x2, 0x136d, 0x136e, 0x3, 0x2, 0x2, 0x2, 0x136e, 0x1370, 
       0x3, 0x2, 0x2, 0x2, 0x136f, 0x1371, 0x5, 0x1cc, 0xe7, 0x2, 0x1370, 
       0x136f, 0x3, 0x2, 0x2, 0x2, 0x1370, 0x1371, 0x3, 0x2, 0x2, 0x2, 0x1371, 
       0x1392, 0x3, 0x2, 0x2, 0x2, 0x1372, 0x1373, 0x7, 0x89, 0x2, 0x2, 
       0x1373, 0x1374, 0x7, 0x1c7, 0x2, 0x2, 0x1374, 0x1379, 0x5, 0x1d2, 
       0xea, 0x2, 0x1375, 0x1376, 0x7, 0x3c6, 0x2, 0x2, 0x1376, 0x1378, 
       0x5, 0x1d2, 0xea, 0x2, 0x1377, 0x1375, 0x3, 0x2, 0x2, 0x2, 0x1378, 
       0x137b, 0x3, 0x2, 0x2, 0x2, 0x1379, 0x1377, 0x3, 0x2, 0x2, 0x2, 0x1379, 
       0x137a, 0x3, 0x2, 0x2, 0x2, 0x137a, 0x137f, 0x3, 0x2, 0x2, 0x2, 0x137b, 
       0x1379, 0x3, 0x2, 0x2, 0x2, 0x137c, 0x137d, 0x7, 0x3a, 0x2, 0x2, 
       0x137d, 0x137e, 0x7, 0x1ca, 0x2, 0x2, 0x137e, 0x1380, 0x5, 0x212, 
       0x10a, 0x2, 0x137f, 0x137c, 0x3, 0x2, 0x2, 0x2, 0x137f, 0x1380, 0x3, 
       0x2, 0x2, 0x2, 0x1380, 0x1381, 0x3, 0x2, 0x2, 0x2, 0x1381, 0x1385, 
       0x7, 0x58, 0x2, 0x2, 0x1382, 0x1383, 0x5, 0x212, 0x10a, 0x2, 0x1383, 
       0x1384, 0x7, 0x3c6, 0x2, 0x2, 0x1384, 0x1386, 0x3, 0x2, 0x2, 0x2, 
       0x1385, 0x1382, 0x3, 0x2, 0x2, 0x2, 0x1385, 0x1386, 0x3, 0x2, 0x2, 
       0x2, 0x1386, 0x1387, 0x3, 0x2, 0x2, 0x2, 0x1387, 0x1388, 0x5, 0x212, 
       0x10a, 0x2, 0x1388, 0x1392, 0x3, 0x2, 0x2, 0x2, 0x1389, 0x138a, 0x7, 
       0x89, 0x2, 0x2, 0x138a, 0x138b, 0x7, 0x1f1, 0x2, 0x2, 0x138b, 0x138f, 
       0x7, 0x205, 0x2, 0x2, 0x138c, 0x138d, 0x7, 0x3a, 0x2, 0x2, 0x138d, 
       0x138e, 0x7, 0x115, 0x2, 0x2, 0x138e, 0x1390, 0x7, 0x3d3, 0x2, 0x2, 
       0x138f, 0x138c, 0x3, 0x2, 0x2, 0x2, 0x138f, 0x1390, 0x3, 0x2, 0x2, 
       0x2, 0x1390, 0x1392, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x12fb, 0x3, 0x2, 
       0x2, 0x2, 0x1391, 0x12fe, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x1312, 0x3, 
       0x2, 0x2, 0x2, 0x1391, 0x1317, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x1325, 
       0x3, 0x2, 0x2, 0x2, 0x1391, 0x132c, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x1330, 
       0x3, 0x2, 0x2, 0x2, 0x1391, 0x1334, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x1339, 
       0x3, 0x2, 0x2, 0x2, 0x1391, 0x133b, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x1344, 
       0x3, 0x2, 0x2, 0x2, 0x1391, 0x134a, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x1353, 
       0x3, 0x2, 0x2, 0x2, 0x1391, 0x1357, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x135d, 
       0x3, 0x2, 0x2, 0x2, 0x1391, 0x1368, 0x3, 0x2, 0x2, 0x2, 0x1391, 0x1372, 
       0x3, 0x2, 0x2, 0x2, 0x1391, 0x1389, 0x3, 0x2, 0x2, 0x2, 0x1392, 0x1c7, 
       0x3, 0x2, 0x2, 0x2, 0x1393, 0x139e, 0x7, 0x3de, 0x2, 0x2, 0x1394, 
       0x139e, 0x7, 0x3df, 0x2, 0x2, 0x1395, 0x1396, 0x7, 0x3c8, 0x2, 0x2, 
       0x1396, 0x1398, 0x7, 0x3c8, 0x2, 0x2, 0x1397, 0x1395, 0x3, 0x2, 0x2, 
       0x2, 0x1397, 0x1398, 0x3, 0x2, 0x2, 0x2, 0x1398, 0x1399, 0x3, 0x2, 
       0x2, 0x2, 0x1399, 0x139b, 0x9, 0x4b, 0x2, 0x2, 0x139a, 0x1397, 0x3, 
       0x2, 0x2, 0x2, 0x139a, 0x139b, 0x3, 0x2, 0x2, 0x2, 0x139b, 0x139c, 
       0x3, 0x2, 0x2, 0x2, 0x139c, 0x139e, 0x5, 0x20e, 0x108, 0x2, 0x139d, 
       0x1393, 0x3, 0x2, 0x2, 0x2, 0x139d, 0x1394, 0x3, 0x2, 0x2, 0x2, 0x139d, 
       0x139a, 0x3, 0x2, 0x2, 0x2, 0x139e, 0x1c9, 0x3, 0x2, 0x2, 0x2, 0x139f, 
       0x13a0, 0x7, 0x18, 0x2, 0x2, 0x13a0, 0x13ad, 0x7, 0x87, 0x2, 0x2, 
       0x13a1, 0x13ad, 0x7, 0x2a7, 0x2, 0x2, 0x13a2, 0x13ad, 0x7, 0x25, 
       0x2, 0x2, 0x13a3, 0x13ad, 0x7, 0x85, 0x2, 0x2, 0x13a4, 0x13a5, 0x7, 
       0x15a, 0x2, 0x2, 0x13a5, 0x13ad, 0x7, 0x205, 0x2, 0x2, 0x13a6, 0x13a7, 
       0x7, 0x73, 0x2, 0x2, 0x13a7, 0x13ad, 0x7, 0x205, 0x2, 0x2, 0x13a8, 
       0x13aa, 0x9, 0x31, 0x2, 0x2, 0x13a9, 0x13a8, 0x3, 0x2, 0x2, 0x2, 
       0x13a9, 0x13aa, 0x3, 0x2, 0x2, 0x2, 0x13aa, 0x13ab, 0x3, 0x2, 0x2, 
       0x2, 0x13ab, 0x13ad, 0x9, 0x4c, 0x2, 0x2, 0x13ac, 0x139f, 0x3, 0x2, 
       0x2, 0x2, 0x13ac, 0x13a1, 0x3, 0x2, 0x2, 0x2, 0x13ac, 0x13a2, 0x3, 
       0x2, 0x2, 0x2, 0x13ac, 0x13a3, 0x3, 0x2, 0x2, 0x2, 0x13ac, 0x13a4, 
       0x3, 0x2, 0x2, 0x2, 0x13ac, 0x13a6, 0x3, 0x2, 0x2, 0x2, 0x13ac, 0x13a9, 
       0x3, 0x2, 0x2, 0x2, 0x13ad, 0x1cb, 0x3, 0x2, 0x2, 0x2, 0x13ae, 0x13af, 
       0x7, 0x57, 0x2, 0x2, 0x13af, 0x13b2, 0x7, 0x3d3, 0x2, 0x2, 0x13b0, 
       0x13b2, 0x5, 0x100, 0x81, 0x2, 0x13b1, 0x13ae, 0x3, 0x2, 0x2, 0x2, 
       0x13b1, 0x13b0, 0x3, 0x2, 0x2, 0x2, 0x13b2, 0x1cd, 0x3, 0x2, 0x2, 
       0x2, 0x13b3, 0x13b5, 0x7, 0x207, 0x2, 0x2, 0x13b4, 0x13b3, 0x3, 0x2, 
       0x2, 0x2, 0x13b4, 0x13b5, 0x3, 0x2, 0x2, 0x2, 0x13b5, 0x13b6, 0x3, 
       0x2, 0x2, 0x2, 0x13b6, 0x13c5, 0x7, 0x141, 0x2, 0x2, 0x13b7, 0x13b8, 
       0x7, 0x17f, 0x2, 0x2, 0x13b8, 0x13c5, 0x7, 0x205, 0x2, 0x2, 0x13b9, 
       0x13c5, 0x7, 0x1c0, 0x2, 0x2, 0x13ba, 0x13c5, 0x7, 0x245, 0x2, 0x2, 
       0x13bb, 0x13bd, 0x7, 0x159, 0x2, 0x2, 0x13bc, 0x13bb, 0x3, 0x2, 0x2, 
       0x2, 0x13bc, 0x13bd, 0x3, 0x2, 0x2, 0x2, 0x13bd, 0x13be, 0x3, 0x2, 
       0x2, 0x2, 0x13be, 0x13c5, 0x7, 0x1c6, 0x2, 0x2, 0x13bf, 0x13c5, 0x7, 
       0x1c8, 0x2, 0x2, 0x13c0, 0x13c1, 0x7, 0x1f1, 0x2, 0x2, 0x13c1, 0x13c5, 
       0x7, 0x163, 0x2, 0x2, 0x13c2, 0x13c5, 0x7, 0x105, 0x2, 0x2, 0x13c3, 
       0x13c5, 0x7, 0x12a, 0x2, 0x2, 0x13c4, 0x13b4, 0x3, 0x2, 0x2, 0x2, 
       0x13c4, 0x13b7, 0x3, 0x2, 0x2, 0x2, 0x13c4, 0x13b9, 0x3, 0x2, 0x2, 
       0x2, 0x13c4, 0x13ba, 0x3, 0x2, 0x2, 0x2, 0x13c4, 0x13bc, 0x3, 0x2, 
       0x2, 0x2, 0x13c4, 0x13bf, 0x3, 0x2, 0x2, 0x2, 0x13c4, 0x13c0, 0x3, 
       0x2, 0x2, 0x2, 0x13c4, 0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13c4, 0x13c3, 
       0x3, 0x2, 0x2, 0x2, 0x13c5, 0x1cf, 0x3, 0x2, 0x2, 0x2, 0x13c6, 0x13cf, 
       0x7, 0x147, 0x2, 0x2, 0x13c7, 0x13c8, 0x7, 0x95, 0x2, 0x2, 0x13c8, 
       0x13cf, 0x7, 0x205, 0x2, 0x2, 0x13c9, 0x13cb, 0x7, 0x159, 0x2, 0x2, 
       0x13ca, 0x13c9, 0x3, 0x2, 0x2, 0x2, 0x13ca, 0x13cb, 0x3, 0x2, 0x2, 
       0x2, 0x13cb, 0x13cc, 0x3, 0x2, 0x2, 0x2, 0x13cc, 0x13cf, 0x7, 0x23d, 
       0x2, 0x2, 0x13cd, 0x13cf, 0x7, 0x216, 0x2, 0x2, 0x13ce, 0x13c6, 0x3, 
       0x2, 0x2, 0x2, 0x13ce, 0x13c7, 0x3, 0x2, 0x2, 0x2, 0x13ce, 0x13ca, 
       0x3, 0x2, 0x2, 0x2, 0x13ce, 0x13cd, 0x3, 0x2, 0x2, 0x2, 0x13cf, 0x1d1, 
       0x3, 0x2, 0x2, 0x2, 0x13d0, 0x13dd, 0x7, 0x8, 0x2, 0x2, 0x13d1, 0x13d2, 
       0x7, 0x10d, 0x2, 0x2, 0x13d2, 0x13dd, 0x7, 0x16f, 0x2, 0x2, 0x13d3, 
       0x13d4, 0x7, 0x129, 0x2, 0x2, 0x13d4, 0x13dd, 0x7, 0x20f, 0x2, 0x2, 
       0x13d5, 0x13dd, 0x7, 0x12c, 0x2, 0x2, 0x13d6, 0x13dd, 0x7, 0x171, 
       0x2, 0x2, 0x13d7, 0x13dd, 0x7, 0x274, 0x2, 0x2, 0x13d8, 0x13d9, 0x7, 
       0x1b7, 0x2, 0x2, 0x13d9, 0x13dd, 0x7, 0x150, 0x2, 0x2, 0x13da, 0x13dd, 
       0x7, 0x1f8, 0x2, 0x2, 0x13db, 0x13dd, 0x7, 0x20e, 0x2, 0x2, 0x13dc, 
       0x13d0, 0x3, 0x2, 0x2, 0x2, 0x13dc, 0x13d1, 0x3, 0x2, 0x2, 0x2, 0x13dc, 
       0x13d3, 0x3, 0x2, 0x2, 0x2, 0x13dc, 0x13d5, 0x3, 0x2, 0x2, 0x2, 0x13dc, 
       0x13d6, 0x3, 0x2, 0x2, 0x2, 0x13dc, 0x13d7, 0x3, 0x2, 0x2, 0x2, 0x13dc, 
       0x13d8, 0x3, 0x2, 0x2, 0x2, 0x13dc, 0x13da, 0x3, 0x2, 0x2, 0x2, 0x13dc, 
       0x13db, 0x3, 0x2, 0x2, 0x2, 0x13dd, 0x1d3, 0x3, 0x2, 0x2, 0x2, 0x13de, 
       0x13df, 0x7, 0x10b, 0x2, 0x2, 0x13df, 0x13e0, 0x7, 0x3d3, 0x2, 0x2, 
       0x13e0, 0x1d5, 0x3, 0x2, 0x2, 0x2, 0x13e1, 0x13e2, 0x7, 0x111, 0x2, 
       0x2, 0x13e2, 0x13e3, 0x7, 0x47, 0x2, 0x2, 0x13e3, 0x13e8, 0x5, 0x1e2, 
       0xf2, 0x2, 0x13e4, 0x13e5, 0x7, 0x3c6, 0x2, 0x2, 0x13e5, 0x13e7, 
       0x5, 0x1e2, 0xf2, 0x2, 0x13e6, 0x13e4, 0x3, 0x2, 0x2, 0x2, 0x13e7, 
       0x13ea, 0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e6, 0x3, 0x2, 0x2, 0x2, 0x13e8, 
       0x13e9, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13f2, 0x3, 0x2, 0x2, 0x2, 0x13ea, 
       0x13e8, 0x3, 0x2, 0x2, 0x2, 0x13eb, 0x13ec, 0x7, 0x71, 0x2, 0x2, 
       0x13ec, 0x13ef, 0x7, 0x3c4, 0x2, 0x2, 0x13ed, 0x13f0, 0x5, 0x22c, 
       0x117, 0x2, 0x13ee, 0x13f0, 0x7, 0x8, 0x2, 0x2, 0x13ef, 0x13ed, 0x3, 
       0x2, 0x2, 0x2, 0x13ef, 0x13ee, 0x3, 0x2, 0x2, 0x2, 0x13f0, 0x13f1, 
       0x3, 0x2, 0x2, 0x2, 0x13f1, 0x13f3, 0x7, 0x3c5, 0x2, 0x2, 0x13f2, 
       0x13eb, 0x3, 0x2, 0x2, 0x2, 0x13f2, 0x13f3, 0x3, 0x2, 0x2, 0x2, 0x13f3, 
       0x13f4, 0x3, 0x2, 0x2, 0x2, 0x13f4, 0x13f5, 0x7, 0x46, 0x2, 0x2, 
       0x13f5, 0x13f6, 0x5, 0x20e, 0x108, 0x2, 0x13f6, 0x1d7, 0x3, 0x2, 
       0x2, 0x2, 0x13f7, 0x13f9, 0x7, 0x156, 0x2, 0x2, 0x13f8, 0x13fa, 0x9, 
       0x40, 0x2, 0x2, 0x13f9, 0x13f8, 0x3, 0x2, 0x2, 0x2, 0x13f9, 0x13fa, 
       0x3, 0x2, 0x2, 0x2, 0x13fa, 0x13fb, 0x3, 0x2, 0x2, 0x2, 0x13fb, 0x1400, 
       0x5, 0x1e4, 0xf3, 0x2, 0x13fc, 0x13fd, 0x7, 0x3c6, 0x2, 0x2, 0x13fd, 
       0x13ff, 0x5, 0x1e4, 0xf3, 0x2, 0x13fe, 0x13fc, 0x3, 0x2, 0x2, 0x2, 
       0x13ff, 0x1402, 0x3, 0x2, 0x2, 0x2, 0x1400, 0x13fe, 0x3, 0x2, 0x2, 
       0x2, 0x1400, 0x1401, 0x3, 0x2, 0x2, 0x2, 0x1401, 0x1d9, 0x3, 0x2, 
       0x2, 0x2, 0x1402, 0x1400, 0x3, 0x2, 0x2, 0x2, 0x1403, 0x1405, 0x7, 
       0x53, 0x2, 0x2, 0x1404, 0x1406, 0x9, 0x4d, 0x2, 0x2, 0x1405, 0x1404, 
       0x3, 0x2, 0x2, 0x2, 0x1405, 0x1406, 0x3, 0x2, 0x2, 0x2, 0x1406, 0x1408, 
       0x3, 0x2, 0x2, 0x2, 0x1407, 0x1409, 0x5, 0x212, 0x10a, 0x2, 0x1408, 
       0x1407, 0x3, 0x2, 0x2, 0x2, 0x1409, 0x140a, 0x3, 0x2, 0x2, 0x2, 0x140a, 
       0x1408, 0x3, 0x2, 0x2, 0x2, 0x140a, 0x140b, 0x3, 0x2, 0x2, 0x2, 0x140b, 
       0x1db, 0x3, 0x2, 0x2, 0x2, 0x140c, 0x140d, 0x7, 0x5b, 0x2, 0x2, 0x140d, 
       0x140e, 0x7, 0x47, 0x2, 0x2, 0x140e, 0x140f, 0x7, 0x4d, 0x2, 0x2, 
       0x140f, 0x1410, 0x7, 0x111, 0x2, 0x2, 0x1410, 0x1415, 0x5, 0x1e8, 
       0xf5, 0x2, 0x1411, 0x1412, 0x7, 0x3c6, 0x2, 0x2, 0x1412, 0x1414, 
       0x5, 0x1e8, 0xf5, 0x2, 0x1413, 0x1411, 0x3, 0x2, 0x2, 0x2, 0x1414, 
       0x1417, 0x3, 0x2, 0x2, 0x2, 0x1415, 0x1413, 0x3, 0x2, 0x2, 0x2, 0x1415, 
       0x1416, 0x3, 0x2, 0x2, 0x2, 0x1416, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0x1417, 
       0x1415, 0x3, 0x2, 0x2, 0x2, 0x1418, 0x1419, 0x7, 0x1df, 0x2, 0x2, 
       0x1419, 0x141a, 0x7, 0x1ca, 0x2, 0x2, 0x141a, 0x141b, 0x7, 0x111, 
       0x2, 0x2, 0x141b, 0x1df, 0x3, 0x2, 0x2, 0x2, 0x141c, 0x141d, 0x7, 
       0x243, 0x2, 0x2, 0x141d, 0x1e1, 0x3, 0x2, 0x2, 0x2, 0x141e, 0x1426, 
       0x5, 0x1f6, 0xfc, 0x2, 0x141f, 0x1421, 0x9, 0x14, 0x2, 0x2, 0x1420, 
       0x141f, 0x3, 0x2, 0x2, 0x2, 0x1420, 0x1421, 0x3, 0x2, 0x2, 0x2, 0x1421, 
       0x1422, 0x3, 0x2, 0x2, 0x2, 0x1422, 0x1423, 0x7, 0x3c4, 0x2, 0x2, 
       0x1423, 0x1424, 0x5, 0x22c, 0x117, 0x2, 0x1424, 0x1425, 0x7, 0x3c5, 
       0x2, 0x2, 0x1425, 0x1427, 0x3, 0x2, 0x2, 0x2, 0x1426, 0x1420, 0x3, 
       0x2, 0x2, 0x2, 0x1426, 0x1427, 0x3, 0x2, 0x2, 0x2, 0x1427, 0x1e3, 
       0x3, 0x2, 0x2, 0x2, 0x1428, 0x143b, 0x7, 0x133, 0x2, 0x2, 0x1429, 
       0x143b, 0x7, 0x163, 0x2, 0x2, 0x142a, 0x142c, 0x9, 0x4e, 0x2, 0x2, 
       0x142b, 0x142a, 0x3, 0x2, 0x2, 0x2, 0x142b, 0x142c, 0x3, 0x2, 0x2, 
       0x2, 0x142c, 0x142d, 0x3, 0x2, 0x2, 0x2, 0x142d, 0x143b, 0x7, 0x17e, 
       0x2, 0x2, 0x142e, 0x143b, 0x7, 0x1b3, 0x2, 0x2, 0x142f, 0x143b, 0x7, 
       0x245, 0x2, 0x2, 0x1430, 0x1431, 0x7, 0x1ca, 0x2, 0x2, 0x1431, 0x143b, 
       0x7, 0x111, 0x2, 0x2, 0x1432, 0x143b, 0x7, 0x205, 0x2, 0x2, 0x1433, 
       0x143b, 0x7, 0x221, 0x2, 0x2, 0x1434, 0x1438, 0x7, 0x23d, 0x2, 0x2, 
       0x1435, 0x1436, 0x7, 0xa9, 0x2, 0x2, 0x1436, 0x1437, 0x7, 0x76, 0x2, 
       0x2, 0x1437, 0x1439, 0x7, 0x5c, 0x2, 0x2, 0x1438, 0x1435, 0x3, 0x2, 
       0x2, 0x2, 0x1438, 0x1439, 0x3, 0x2, 0x2, 0x2, 0x1439, 0x143b, 0x3, 
       0x2, 0x2, 0x2, 0x143a, 0x1428, 0x3, 0x2, 0x2, 0x2, 0x143a, 0x1429, 
       0x3, 0x2, 0x2, 0x2, 0x143a, 0x142b, 0x3, 0x2, 0x2, 0x2, 0x143a, 0x142e, 
       0x3, 0x2, 0x2, 0x2, 0x143a, 0x142f, 0x3, 0x2, 0x2, 0x2, 0x143a, 0x1430, 
       0x3, 0x2, 0x2, 0x2, 0x143a, 0x1432, 0x3, 0x2, 0x2, 0x2, 0x143a, 0x1433, 
       0x3, 0x2, 0x2, 0x2, 0x143a, 0x1434, 0x3, 0x2, 0x2, 0x2, 0x143b, 0x1447, 
       0x3, 0x2, 0x2, 0x2, 0x143c, 0x143d, 0x7, 0x1d0, 0x2, 0x2, 0x143d, 
       0x143f, 0x7, 0x17e, 0x2, 0x2, 0x143e, 0x1440, 0x5, 0x146, 0xa4, 0x2, 
       0x143f, 0x143e, 0x3, 0x2, 0x2, 0x2, 0x143f, 0x1440, 0x3, 0x2, 0x2, 
       0x2, 0x1440, 0x1447, 0x3, 0x2, 0x2, 0x2, 0x1441, 0x1442, 0x7, 0x23d, 
       0x2, 0x2, 0x1442, 0x1444, 0x5, 0x22e, 0x118, 0x2, 0x1443, 0x1445, 
       0x5, 0x1e6, 0xf4, 0x2, 0x1444, 0x1443, 0x3, 0x2, 0x2, 0x2, 0x1444, 
       0x1445, 0x3, 0x2, 0x2, 0x2, 0x1445, 0x1447, 0x3, 0x2, 0x2, 0x2, 0x1446, 
       0x143a, 0x3, 0x2, 0x2, 0x2, 0x1446, 0x143c, 0x3, 0x2, 0x2, 0x2, 0x1446, 
       0x1441, 0x3, 0x2, 0x2, 0x2, 0x1447, 0x1e5, 0x3, 0x2, 0x2, 0x2, 0x1448, 
       0x1449, 0x7, 0xa9, 0x2, 0x2, 0x1449, 0x144a, 0x7, 0x76, 0x2, 0x2, 
       0x144a, 0x144e, 0x7, 0x5c, 0x2, 0x2, 0x144b, 0x144c, 0x7, 0x3a, 0x2, 
       0x2, 0x144c, 0x144e, 0x7, 0x14c, 0x2, 0x2, 0x144d, 0x1448, 0x3, 0x2, 
       0x2, 0x2, 0x144d, 0x144b, 0x3, 0x2, 0x2, 0x2, 0x144e, 0x1e7, 0x3, 
       0x2, 0x2, 0x2, 0x144f, 0x1457, 0x5, 0x1f6, 0xfc, 0x2, 0x1450, 0x1451, 
       0x7, 0x71, 0x2, 0x2, 0x1451, 0x1454, 0x7, 0x3c4, 0x2, 0x2, 0x1452, 
       0x1455, 0x5, 0x22c, 0x117, 0x2, 0x1453, 0x1455, 0x7, 0x8, 0x2, 0x2, 
       0x1454, 0x1452, 0x3, 0x2, 0x2, 0x2, 0x1454, 0x1453, 0x3, 0x2, 0x2, 
       0x2, 0x1455, 0x1456, 0x3, 0x2, 0x2, 0x2, 0x1456, 0x1458, 0x7, 0x3c5, 
       0x2, 0x2, 0x1457, 0x1450, 0x3, 0x2, 0x2, 0x2, 0x1457, 0x1458, 0x3, 
       0x2, 0x2, 0x2, 0x1458, 0x1460, 0x3, 0x2, 0x2, 0x2, 0x1459, 0x145b, 
       0x9, 0x14, 0x2, 0x2, 0x145a, 0x1459, 0x3, 0x2, 0x2, 0x2, 0x145a, 
       0x145b, 0x3, 0x2, 0x2, 0x2, 0x145b, 0x145c, 0x3, 0x2, 0x2, 0x2, 0x145c, 
       0x145d, 0x7, 0x3c4, 0x2, 0x2, 0x145d, 0x145e, 0x5, 0x22c, 0x117, 
       0x2, 0x145e, 0x145f, 0x7, 0x3c5, 0x2, 0x2, 0x145f, 0x1461, 0x3, 0x2, 
       0x2, 0x2, 0x1460, 0x145a, 0x3, 0x2, 0x2, 0x2, 0x1460, 0x1461, 0x3, 
       0x2, 0x2, 0x2, 0x1461, 0x1464, 0x3, 0x2, 0x2, 0x2, 0x1462, 0x1463, 
       0x7, 0x45, 0x2, 0x2, 0x1463, 0x1465, 0x7, 0x178, 0x2, 0x2, 0x1464, 
       0x1462, 0x3, 0x2, 0x2, 0x2, 0x1464, 0x1465, 0x3, 0x2, 0x2, 0x2, 0x1465, 
       0x1e9, 0x3, 0x2, 0x2, 0x2, 0x1466, 0x1467, 0x9, 0x4f, 0x2, 0x2, 0x1467, 
       0x146a, 0x5, 0x1f6, 0xfc, 0x2, 0x1468, 0x146b, 0x5, 0x20e, 0x108, 
       0x2, 0x1469, 0x146b, 0x7, 0x3d3, 0x2, 0x2, 0x146a, 0x1468, 0x3, 0x2, 
       0x2, 0x2, 0x146a, 0x1469, 0x3, 0x2, 0x2, 0x2, 0x146a, 0x146b, 0x3, 
       0x2, 0x2, 0x2, 0x146b, 0x1eb, 0x3, 0x2, 0x2, 0x2, 0x146c, 0x1470, 
       0x9, 0x4f, 0x2, 0x2, 0x146d, 0x146e, 0x9, 0x50, 0x2, 0x2, 0x146e, 
       0x146f, 0x7, 0x3bb, 0x2, 0x2, 0x146f, 0x1471, 0x9, 0x51, 0x2, 0x2, 
       0x1470, 0x146d, 0x3, 0x2, 0x2, 0x2, 0x1470, 0x1471, 0x3, 0x2, 0x2, 
       0x2, 0x1471, 0x1472, 0x3, 0x2, 0x2, 0x2, 0x1472, 0x1473, 0x5, 0x1f2, 
       0xfa, 0x2, 0x1473, 0x1ed, 0x3, 0x2, 0x2, 0x2, 0x1474, 0x1475, 0x7, 
       0x161, 0x2, 0x2, 0x1475, 0x1476, 0x7, 0x3d3, 0x2, 0x2, 0x1476, 0x1ef, 
       0x3, 0x2, 0x2, 0x2, 0x1477, 0x1478, 0x7, 0xa3, 0x2, 0x2, 0x1478, 
       0x1479, 0x5, 0x20e, 0x108, 0x2, 0x1479, 0x1f1, 0x3, 0x2, 0x2, 0x2, 
       0x147a, 0x1480, 0x5, 0xb4, 0x5b, 0x2, 0x147b, 0x1480, 0x5, 0xa6, 
       0x54, 0x2, 0x147c, 0x1480, 0x5, 0xac, 0x57, 0x2, 0x147d, 0x1480, 
       0x5, 0xb2, 0x5a, 0x2, 0x147e, 0x1480, 0x5, 0xb6, 0x5c, 0x2, 0x147f, 
       0x147a, 0x3, 0x2, 0x2, 0x2, 0x147f, 0x147b, 0x3, 0x2, 0x2, 0x2, 0x147f, 
       0x147c, 0x3, 0x2, 0x2, 0x2, 0x147f, 0x147d, 0x3, 0x2, 0x2, 0x2, 0x147f, 
       0x147e, 0x3, 0x2, 0x2, 0x2, 0x1480, 0x1485, 0x3, 0x2, 0x2, 0x2, 0x1481, 
       0x1482, 0x7, 0x3a, 0x2, 0x2, 0x1482, 0x1483, 0x7, 0x126, 0x2, 0x2, 
       0x1483, 0x1485, 0x5, 0x20e, 0x108, 0x2, 0x1484, 0x147f, 0x3, 0x2, 
       0x2, 0x2, 0x1484, 0x1481, 0x3, 0x2, 0x2, 0x2, 0x1485, 0x1f3, 0x3, 
       0x2, 0x2, 0x2, 0x1486, 0x148b, 0x5, 0x20e, 0x108, 0x2, 0x1487, 0x1488, 
       0x7, 0x3c3, 0x2, 0x2, 0x1488, 0x148a, 0x5, 0x20e, 0x108, 0x2, 0x1489, 
       0x1487, 0x3, 0x2, 0x2, 0x2, 0x148a, 0x148d, 0x3, 0x2, 0x2, 0x2, 0x148b, 
       0x1489, 0x3, 0x2, 0x2, 0x2, 0x148b, 0x148c, 0x3, 0x2, 0x2, 0x2, 0x148c, 
       0x1f5, 0x3, 0x2, 0x2, 0x2, 0x148d, 0x148b, 0x3, 0x2, 0x2, 0x2, 0x148e, 
       0x148f, 0x5, 0x1f4, 0xfb, 0x2, 0x148f, 0x1f7, 0x3, 0x2, 0x2, 0x2, 
       0x1490, 0x1491, 0x5, 0x1f4, 0xfb, 0x2, 0x1491, 0x1f9, 0x3, 0x2, 0x2, 
       0x2, 0x1492, 0x1495, 0x5, 0x20e, 0x108, 0x2, 0x1493, 0x1495, 0x7, 
       0x3d3, 0x2, 0x2, 0x1494, 0x1492, 0x3, 0x2, 0x2, 0x2, 0x1494, 0x1493, 
       0x3, 0x2, 0x2, 0x2, 0x1495, 0x149a, 0x3, 0x2, 0x2, 0x2, 0x1496, 0x1497, 
       0x7, 0x3c4, 0x2, 0x2, 0x1497, 0x1498, 0x5, 0x212, 0x10a, 0x2, 0x1498, 
       0x1499, 0x7, 0x3c5, 0x2, 0x2, 0x1499, 0x149b, 0x3, 0x2, 0x2, 0x2, 
       0x149a, 0x1496, 0x3, 0x2, 0x2, 0x2, 0x149a, 0x149b, 0x3, 0x2, 0x2, 
       0x2, 0x149b, 0x149d, 0x3, 0x2, 0x2, 0x2, 0x149c, 0x149e, 0x9, 0x2b, 
       0x2, 0x2, 0x149d, 0x149c, 0x3, 0x2, 0x2, 0x2, 0x149d, 0x149e, 0x3, 
       0x2, 0x2, 0x2, 0x149e, 0x1fb, 0x3, 0x2, 0x2, 0x2, 0x149f, 0x14a0, 
       0x9, 0x52, 0x2, 0x2, 0x14a0, 0x1fd, 0x3, 0x2, 0x2, 0x2, 0x14a1, 0x14a2, 
       0x9, 0x53, 0x2, 0x2, 0x14a2, 0x1ff, 0x3, 0x2, 0x2, 0x2, 0x14a3, 0x14a8, 
       0x7, 0xc3, 0x2, 0x2, 0x14a4, 0x14a8, 0x5, 0x26a, 0x136, 0x2, 0x14a5, 
       0x14a8, 0x7, 0x3d3, 0x2, 0x2, 0x14a6, 0x14a8, 0x7, 0x3d0, 0x2, 0x2, 
       0x14a7, 0x14a3, 0x3, 0x2, 0x2, 0x2, 0x14a7, 0x14a4, 0x3, 0x2, 0x2, 
       0x2, 0x14a7, 0x14a5, 0x3, 0x2, 0x2, 0x2, 0x14a7, 0x14a6, 0x3, 0x2, 
       0x2, 0x2, 0x14a8, 0x201, 0x3, 0x2, 0x2, 0x2, 0x14a9, 0x14ac, 0x5, 
       0x20e, 0x108, 0x2, 0x14aa, 0x14ac, 0x7, 0x3d3, 0x2, 0x2, 0x14ab, 
       0x14a9, 0x3, 0x2, 0x2, 0x2, 0x14ab, 0x14aa, 0x3, 0x2, 0x2, 0x2, 0x14ac, 
       0x203, 0x3, 0x2, 0x2, 0x2, 0x14ad, 0x14ae, 0x9, 0x54, 0x2, 0x2, 0x14ae, 
       0x205, 0x3, 0x2, 0x2, 0x2, 0x14af, 0x14b0, 0x5, 0x212, 0x10a, 0x2, 
       0x14b0, 0x14b1, 0x7, 0x3b8, 0x2, 0x2, 0x14b1, 0x14b2, 0x5, 0x212, 
       0x10a, 0x2, 0x14b2, 0x14b3, 0x7, 0x3b8, 0x2, 0x2, 0x14b3, 0x14b4, 
       0x5, 0x212, 0x10a, 0x2, 0x14b4, 0x14b5, 0x7, 0x3b8, 0x2, 0x2, 0x14b5, 
       0x14b6, 0x5, 0x212, 0x10a, 0x2, 0x14b6, 0x14b7, 0x7, 0x3b8, 0x2, 
       0x2, 0x14b7, 0x14bd, 0x5, 0x212, 0x10a, 0x2, 0x14b8, 0x14b9, 0x7, 
       0x3cf, 0x2, 0x2, 0x14b9, 0x14ba, 0x5, 0x212, 0x10a, 0x2, 0x14ba, 
       0x14bb, 0x7, 0x3b8, 0x2, 0x2, 0x14bb, 0x14bc, 0x5, 0x212, 0x10a, 
       0x2, 0x14bc, 0x14be, 0x3, 0x2, 0x2, 0x2, 0x14bd, 0x14b8, 0x3, 0x2, 
       0x2, 0x2, 0x14be, 0x14bf, 0x3, 0x2, 0x2, 0x2, 0x14bf, 0x14bd, 0x3, 
       0x2, 0x2, 0x2, 0x14bf, 0x14c0, 0x3, 0x2, 0x2, 0x2, 0x14c0, 0x207, 
       0x3, 0x2, 0x2, 0x2, 0x14c1, 0x14c8, 0x5, 0x20a, 0x106, 0x2, 0x14c2, 
       0x14c3, 0x7, 0x3c6, 0x2, 0x2, 0x14c3, 0x14c6, 0x5, 0x20a, 0x106, 
       0x2, 0x14c4, 0x14c5, 0x7, 0x3c6, 0x2, 0x2, 0x14c5, 0x14c7, 0x5, 0x212, 
       0x10a, 0x2, 0x14c6, 0x14c4, 0x3, 0x2, 0x2, 0x2, 0x14c6, 0x14c7, 0x3, 
       0x2, 0x2, 0x2, 0x14c7, 0x14c9, 0x3, 0x2, 0x2, 0x2, 0x14c8, 0x14c2, 
       0x3, 0x2, 0x2, 0x2, 0x14c8, 0x14c9, 0x3, 0x2, 0x2, 0x2, 0x14c9, 0x209, 
       0x3, 0x2, 0x2, 0x2, 0x14ca, 0x14d2, 0x7, 0x3d3, 0x2, 0x2, 0x14cb, 
       0x14d2, 0x7, 0x3d8, 0x2, 0x2, 0x14cc, 0x14ce, 0x7, 0x3d5, 0x2, 0x2, 
       0x14cd, 0x14cc, 0x3, 0x2, 0x2, 0x2, 0x14ce, 0x14cf, 0x3, 0x2, 0x2, 
       0x2, 0x14cf, 0x14cd, 0x3, 0x2, 0x2, 0x2, 0x14cf, 0x14d0, 0x3, 0x2, 
       0x2, 0x2, 0x14d0, 0x14d2, 0x3, 0x2, 0x2, 0x2, 0x14d1, 0x14ca, 0x3, 
       0x2, 0x2, 0x2, 0x14d1, 0x14cb, 0x3, 0x2, 0x2, 0x2, 0x14d1, 0x14cd, 
       0x3, 0x2, 0x2, 0x2, 0x14d2, 0x20b, 0x3, 0x2, 0x2, 0x2, 0x14d3, 0x14d6, 
       0x5, 0x20e, 0x108, 0x2, 0x14d4, 0x14d6, 0x7, 0x3d3, 0x2, 0x2, 0x14d5, 
       0x14d3, 0x3, 0x2, 0x2, 0x2, 0x14d5, 0x14d4, 0x3, 0x2, 0x2, 0x2, 0x14d6, 
       0x20d, 0x3, 0x2, 0x2, 0x2, 0x14d7, 0x14db, 0x5, 0x210, 0x109, 0x2, 
       0x14d8, 0x14db, 0x7, 0x3dc, 0x2, 0x2, 0x14d9, 0x14db, 0x7, 0x3d0, 
       0x2, 0x2, 0x14da, 0x14d7, 0x3, 0x2, 0x2, 0x2, 0x14da, 0x14d8, 0x3, 
       0x2, 0x2, 0x2, 0x14da, 0x14d9, 0x3, 0x2, 0x2, 0x2, 0x14db, 0x20f, 
       0x3, 0x2, 0x2, 0x2, 0x14dc, 0x14e6, 0x7, 0x3db, 0x2, 0x2, 0x14dd, 
       0x14e6, 0x5, 0x26a, 0x136, 0x2, 0x14de, 0x14e6, 0x5, 0x26c, 0x137, 
       0x2, 0x14df, 0x14e6, 0x5, 0x204, 0x103, 0x2, 0x14e0, 0x14e6, 0x5, 
       0x26e, 0x138, 0x2, 0x14e1, 0x14e6, 0x5, 0x270, 0x139, 0x2, 0x14e2, 
       0x14e6, 0x5, 0x272, 0x13a, 0x2, 0x14e3, 0x14e6, 0x5, 0x274, 0x13b, 
       0x2, 0x14e4, 0x14e6, 0x5, 0x276, 0x13c, 0x2, 0x14e5, 0x14dc, 0x3, 
       0x2, 0x2, 0x2, 0x14e5, 0x14dd, 0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14de, 
       0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14df, 0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14e0, 
       0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14e1, 0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14e2, 
       0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14e3, 0x3, 0x2, 0x2, 0x2, 0x14e5, 0x14e4, 
       0x3, 0x2, 0x2, 0x2, 0x14e6, 0x211, 0x3, 0x2, 0x2, 0x2, 0x14e7, 0x14e8, 
       0x9, 0x55, 0x2, 0x2, 0x14e8, 0x213, 0x3, 0x2, 0x2, 0x2, 0x14e9, 0x14ec, 
       0x7, 0x3d1, 0x2, 0x2, 0x14ea, 0x14ec, 0x5, 0x212, 0x10a, 0x2, 0x14eb, 
       0x14e9, 0x3, 0x2, 0x2, 0x2, 0x14eb, 0x14ea, 0x3, 0x2, 0x2, 0x2, 0x14ec, 
       0x215, 0x3, 0x2, 0x2, 0x2, 0x14ed, 0x14ef, 0x7, 0x3d9, 0x2, 0x2, 
       0x14ee, 0x14ed, 0x3, 0x2, 0x2, 0x2, 0x14ee, 0x14ef, 0x3, 0x2, 0x2, 
       0x2, 0x14ef, 0x14f0, 0x3, 0x2, 0x2, 0x2, 0x14f0, 0x14f3, 0x7, 0x3d3, 
       0x2, 0x2, 0x14f1, 0x14f3, 0x7, 0x3d2, 0x2, 0x2, 0x14f2, 0x14ee, 0x3, 
       0x2, 0x2, 0x2, 0x14f2, 0x14f1, 0x3, 0x2, 0x2, 0x2, 0x14f3, 0x14f5, 
       0x3, 0x2, 0x2, 0x2, 0x14f4, 0x14f6, 0x7, 0x3d3, 0x2, 0x2, 0x14f5, 
       0x14f4, 0x3, 0x2, 0x2, 0x2, 0x14f6, 0x14f7, 0x3, 0x2, 0x2, 0x2, 0x14f7, 
       0x14f5, 0x3, 0x2, 0x2, 0x2, 0x14f7, 0x14f8, 0x3, 0x2, 0x2, 0x2, 0x14f8, 
       0x1505, 0x3, 0x2, 0x2, 0x2, 0x14f9, 0x14fb, 0x7, 0x3d9, 0x2, 0x2, 
       0x14fa, 0x14f9, 0x3, 0x2, 0x2, 0x2, 0x14fa, 0x14fb, 0x3, 0x2, 0x2, 
       0x2, 0x14fb, 0x14fc, 0x3, 0x2, 0x2, 0x2, 0x14fc, 0x14ff, 0x7, 0x3d3, 
       0x2, 0x2, 0x14fd, 0x14ff, 0x7, 0x3d2, 0x2, 0x2, 0x14fe, 0x14fa, 0x3, 
       0x2, 0x2, 0x2, 0x14fe, 0x14fd, 0x3, 0x2, 0x2, 0x2, 0x14ff, 0x1502, 
       0x3, 0x2, 0x2, 0x2, 0x1500, 0x1501, 0x7, 0x1a, 0x2, 0x2, 0x1501, 
       0x1503, 0x5, 0x202, 0x102, 0x2, 0x1502, 0x1500, 0x3, 0x2, 0x2, 0x2, 
       0x1502, 0x1503, 0x3, 0x2, 0x2, 0x2, 0x1503, 0x1505, 0x3, 0x2, 0x2, 
       0x2, 0x1504, 0x14f2, 0x3, 0x2, 0x2, 0x2, 0x1504, 0x14fe, 0x3, 0x2, 
       0x2, 0x2, 0x1505, 0x217, 0x3, 0x2, 0x2, 0x2, 0x1506, 0x1507, 0x9, 
       0x56, 0x2, 0x2, 0x1507, 0x219, 0x3, 0x2, 0x2, 0x2, 0x1508, 0x150a, 
       0x7, 0x3d9, 0x2, 0x2, 0x1509, 0x1508, 0x3, 0x2, 0x2, 0x2, 0x1509, 
       0x150a, 0x3, 0x2, 0x2, 0x2, 0x150a, 0x150b, 0x3, 0x2, 0x2, 0x2, 0x150b, 
       0x150c, 0x7, 0x3d5, 0x2, 0x2, 0x150c, 0x21b, 0x3, 0x2, 0x2, 0x2, 
       0x150d, 0x150f, 0x7, 0x65, 0x2, 0x2, 0x150e, 0x150d, 0x3, 0x2, 0x2, 
       0x2, 0x150e, 0x150f, 0x3, 0x2, 0x2, 0x2, 0x150f, 0x1510, 0x3, 0x2, 
       0x2, 0x2, 0x1510, 0x1511, 0x9, 0x57, 0x2, 0x2, 0x1511, 0x21d, 0x3, 
       0x2, 0x2, 0x2, 0x1512, 0x151d, 0x5, 0x216, 0x10c, 0x2, 0x1513, 0x151d, 
       0x5, 0x212, 0x10a, 0x2, 0x1514, 0x151d, 0x5, 0x21a, 0x10e, 0x2, 0x1515, 
       0x151d, 0x5, 0x218, 0x10d, 0x2, 0x1516, 0x151d, 0x7, 0x3d6, 0x2, 
       0x2, 0x1517, 0x151d, 0x7, 0x3d8, 0x2, 0x2, 0x1518, 0x151a, 0x7, 0x65, 
       0x2, 0x2, 0x1519, 0x1518, 0x3, 0x2, 0x2, 0x2, 0x1519, 0x151a, 0x3, 
       0x2, 0x2, 0x2, 0x151a, 0x151b, 0x3, 0x2, 0x2, 0x2, 0x151b, 0x151d, 
       0x9, 0x57, 0x2, 0x2, 0x151c, 0x1512, 0x3, 0x2, 0x2, 0x2, 0x151c, 
       0x1513, 0x3, 0x2, 0x2, 0x2, 0x151c, 0x1514, 0x3, 0x2, 0x2, 0x2, 0x151c, 
       0x1515, 0x3, 0x2, 0x2, 0x2, 0x151c, 0x1516, 0x3, 0x2, 0x2, 0x2, 0x151c, 
       0x1517, 0x3, 0x2, 0x2, 0x2, 0x151c, 0x1519, 0x3, 0x2, 0x2, 0x2, 0x151d, 
       0x21f, 0x3, 0x2, 0x2, 0x2, 0x151e, 0x1520, 0x9, 0x58, 0x2, 0x2, 0x151f, 
       0x1521, 0x5, 0x226, 0x114, 0x2, 0x1520, 0x151f, 0x3, 0x2, 0x2, 0x2, 
       0x1520, 0x1521, 0x3, 0x2, 0x2, 0x2, 0x1521, 0x1523, 0x3, 0x2, 0x2, 
       0x2, 0x1522, 0x1524, 0x7, 0xc3, 0x2, 0x2, 0x1523, 0x1522, 0x3, 0x2, 
       0x2, 0x2, 0x1523, 0x1524, 0x3, 0x2, 0x2, 0x2, 0x1524, 0x152b, 0x3, 
       0x2, 0x2, 0x2, 0x1525, 0x1526, 0x7, 0x18, 0x2, 0x2, 0x1526, 0x1529, 
       0x7, 0x87, 0x2, 0x2, 0x1527, 0x1529, 0x7, 0x2a4, 0x2, 0x2, 0x1528, 
       0x1525, 0x3, 0x2, 0x2, 0x2, 0x1528, 0x1527, 0x3, 0x2, 0x2, 0x2, 0x1529, 
       0x152a, 0x3, 0x2, 0x2, 0x2, 0x152a, 0x152c, 0x5, 0x200, 0x101, 0x2, 
       0x152b, 0x1528, 0x3, 0x2, 0x2, 0x2, 0x152b, 0x152c, 0x3, 0x2, 0x2, 
       0x2, 0x152c, 0x152f, 0x3, 0x2, 0x2, 0x2, 0x152d, 0x152e, 0x7, 0x1a, 
       0x2, 0x2, 0x152e, 0x1530, 0x5, 0x202, 0x102, 0x2, 0x152f, 0x152d, 
       0x3, 0x2, 0x2, 0x2, 0x152f, 0x1530, 0x3, 0x2, 0x2, 0x2, 0x1530, 0x1589, 
       0x3, 0x2, 0x2, 0x2, 0x1531, 0x1532, 0x7, 0xc2, 0x2, 0x2, 0x1532, 
       0x1534, 0x9, 0x59, 0x2, 0x2, 0x1533, 0x1535, 0x5, 0x226, 0x114, 0x2, 
       0x1534, 0x1533, 0x3, 0x2, 0x2, 0x2, 0x1534, 0x1535, 0x3, 0x2, 0x2, 
       0x2, 0x1535, 0x1537, 0x3, 0x2, 0x2, 0x2, 0x1536, 0x1538, 0x7, 0xc3, 
       0x2, 0x2, 0x1537, 0x1536, 0x3, 0x2, 0x2, 0x2, 0x1537, 0x1538, 0x3, 
       0x2, 0x2, 0x2, 0x1538, 0x1589, 0x3, 0x2, 0x2, 0x2, 0x1539, 0x153a, 
       0x7, 0x1a5, 0x2, 0x2, 0x153a, 0x153c, 0x7, 0xc0, 0x2, 0x2, 0x153b, 
       0x153d, 0x5, 0x226, 0x114, 0x2, 0x153c, 0x153b, 0x3, 0x2, 0x2, 0x2, 
       0x153c, 0x153d, 0x3, 0x2, 0x2, 0x2, 0x153d, 0x153f, 0x3, 0x2, 0x2, 
       0x2, 0x153e, 0x1540, 0x7, 0xc3, 0x2, 0x2, 0x153f, 0x153e, 0x3, 0x2, 
       0x2, 0x2, 0x153f, 0x1540, 0x3, 0x2, 0x2, 0x2, 0x1540, 0x1589, 0x3, 
       0x2, 0x2, 0x2, 0x1541, 0x1542, 0x7, 0xc2, 0x2, 0x2, 0x1542, 0x1543, 
       0x9, 0x5a, 0x2, 0x2, 0x1543, 0x1545, 0x7, 0xce, 0x2, 0x2, 0x1544, 
       0x1546, 0x5, 0x226, 0x114, 0x2, 0x1545, 0x1544, 0x3, 0x2, 0x2, 0x2, 
       0x1545, 0x1546, 0x3, 0x2, 0x2, 0x2, 0x1546, 0x1548, 0x3, 0x2, 0x2, 
       0x2, 0x1547, 0x1549, 0x7, 0xc3, 0x2, 0x2, 0x1548, 0x1547, 0x3, 0x2, 
       0x2, 0x2, 0x1548, 0x1549, 0x3, 0x2, 0x2, 0x2, 0x1549, 0x1589, 0x3, 
       0x2, 0x2, 0x2, 0x154a, 0x154c, 0x9, 0x5b, 0x2, 0x2, 0x154b, 0x154d, 
       0x5, 0x226, 0x114, 0x2, 0x154c, 0x154b, 0x3, 0x2, 0x2, 0x2, 0x154c, 
       0x154d, 0x3, 0x2, 0x2, 0x2, 0x154d, 0x154f, 0x3, 0x2, 0x2, 0x2, 0x154e, 
       0x1550, 0x9, 0x5c, 0x2, 0x2, 0x154f, 0x154e, 0x3, 0x2, 0x2, 0x2, 
       0x154f, 0x1550, 0x3, 0x2, 0x2, 0x2, 0x1550, 0x1552, 0x3, 0x2, 0x2, 
       0x2, 0x1551, 0x1553, 0x7, 0xac, 0x2, 0x2, 0x1552, 0x1551, 0x3, 0x2, 
       0x2, 0x2, 0x1552, 0x1553, 0x3, 0x2, 0x2, 0x2, 0x1553, 0x1589, 0x3, 
       0x2, 0x2, 0x2, 0x1554, 0x1556, 0x7, 0xb3, 0x2, 0x2, 0x1555, 0x1557, 
       0x5, 0x228, 0x115, 0x2, 0x1556, 0x1555, 0x3, 0x2, 0x2, 0x2, 0x1556, 
       0x1557, 0x3, 0x2, 0x2, 0x2, 0x1557, 0x1559, 0x3, 0x2, 0x2, 0x2, 0x1558, 
       0x155a, 0x9, 0x5c, 0x2, 0x2, 0x1559, 0x1558, 0x3, 0x2, 0x2, 0x2, 
       0x1559, 0x155a, 0x3, 0x2, 0x2, 0x2, 0x155a, 0x155c, 0x3, 0x2, 0x2, 
       0x2, 0x155b, 0x155d, 0x7, 0xac, 0x2, 0x2, 0x155c, 0x155b, 0x3, 0x2, 
       0x2, 0x2, 0x155c, 0x155d, 0x3, 0x2, 0x2, 0x2, 0x155d, 0x1589, 0x3, 
       0x2, 0x2, 0x2, 0x155e, 0x1560, 0x7, 0xb4, 0x2, 0x2, 0x155f, 0x1561, 
       0x7, 0xb5, 0x2, 0x2, 0x1560, 0x155f, 0x3, 0x2, 0x2, 0x2, 0x1560, 
       0x1561, 0x3, 0x2, 0x2, 0x2, 0x1561, 0x1563, 0x3, 0x2, 0x2, 0x2, 0x1562, 
       0x1564, 0x5, 0x228, 0x115, 0x2, 0x1563, 0x1562, 0x3, 0x2, 0x2, 0x2, 
       0x1563, 0x1564, 0x3, 0x2, 0x2, 0x2, 0x1564, 0x1566, 0x3, 0x2, 0x2, 
       0x2, 0x1565, 0x1567, 0x9, 0x5c, 0x2, 0x2, 0x1566, 0x1565, 0x3, 0x2, 
       0x2, 0x2, 0x1566, 0x1567, 0x3, 0x2, 0x2, 0x2, 0x1567, 0x1569, 0x3, 
       0x2, 0x2, 0x2, 0x1568, 0x156a, 0x7, 0xac, 0x2, 0x2, 0x1569, 0x1568, 
       0x3, 0x2, 0x2, 0x2, 0x1569, 0x156a, 0x3, 0x2, 0x2, 0x2, 0x156a, 0x1589, 
       0x3, 0x2, 0x2, 0x2, 0x156b, 0x156d, 0x9, 0x5d, 0x2, 0x2, 0x156c, 
       0x156e, 0x5, 0x22a, 0x116, 0x2, 0x156d, 0x156c, 0x3, 0x2, 0x2, 0x2, 
       0x156d, 0x156e, 0x3, 0x2, 0x2, 0x2, 0x156e, 0x1570, 0x3, 0x2, 0x2, 
       0x2, 0x156f, 0x1571, 0x9, 0x5c, 0x2, 0x2, 0x1570, 0x156f, 0x3, 0x2, 
       0x2, 0x2, 0x1570, 0x1571, 0x3, 0x2, 0x2, 0x2, 0x1571, 0x1573, 0x3, 
       0x2, 0x2, 0x2, 0x1572, 0x1574, 0x7, 0xac, 0x2, 0x2, 0x1573, 0x1572, 
       0x3, 0x2, 0x2, 0x2, 0x1573, 0x1574, 0x3, 0x2, 0x2, 0x2, 0x1574, 0x1589, 
       0x3, 0x2, 0x2, 0x2, 0x1575, 0x1589, 0x9, 0x5e, 0x2, 0x2, 0x1576, 
       0x1578, 0x9, 0x5f, 0x2, 0x2, 0x1577, 0x1579, 0x5, 0x226, 0x114, 0x2, 
       0x1578, 0x1577, 0x3, 0x2, 0x2, 0x2, 0x1578, 0x1579, 0x3, 0x2, 0x2, 
       0x2, 0x1579, 0x1589, 0x3, 0x2, 0x2, 0x2, 0x157a, 0x157b, 0x9, 0x60, 
       0x2, 0x2, 0x157b, 0x157d, 0x5, 0x222, 0x112, 0x2, 0x157c, 0x157e, 
       0x7, 0xc3, 0x2, 0x2, 0x157d, 0x157c, 0x3, 0x2, 0x2, 0x2, 0x157d, 
       0x157e, 0x3, 0x2, 0x2, 0x2, 0x157e, 0x1585, 0x3, 0x2, 0x2, 0x2, 0x157f, 
       0x1580, 0x7, 0x18, 0x2, 0x2, 0x1580, 0x1583, 0x7, 0x87, 0x2, 0x2, 
       0x1581, 0x1583, 0x7, 0x2a4, 0x2, 0x2, 0x1582, 0x157f, 0x3, 0x2, 0x2, 
       0x2, 0x1582, 0x1581, 0x3, 0x2, 0x2, 0x2, 0x1583, 0x1584, 0x3, 0x2, 
       0x2, 0x2, 0x1584, 0x1586, 0x5, 0x200, 0x101, 0x2, 0x1585, 0x1582, 
       0x3, 0x2, 0x2, 0x2, 0x1585, 0x1586, 0x3, 0x2, 0x2, 0x2, 0x1586, 0x1589, 
       0x3, 0x2, 0x2, 0x2, 0x1587, 0x1589, 0x9, 0x61, 0x2, 0x2, 0x1588, 
       0x151e, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x1531, 0x3, 0x2, 0x2, 0x2, 0x1588, 
       0x1539, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x1541, 0x3, 0x2, 0x2, 0x2, 0x1588, 
       0x154a, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x1554, 0x3, 0x2, 0x2, 0x2, 0x1588, 
       0x155e, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x156b, 0x3, 0x2, 0x2, 0x2, 0x1588, 
       0x1575, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x1576, 0x3, 0x2, 0x2, 0x2, 0x1588, 
       0x157a, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x1587, 0x3, 0x2, 0x2, 0x2, 0x1589, 
       0x221, 0x3, 0x2, 0x2, 0x2, 0x158a, 0x158b, 0x7, 0x3c4, 0x2, 0x2, 
       0x158b, 0x1590, 0x7, 0x3d3, 0x2, 0x2, 0x158c, 0x158d, 0x7, 0x3c6, 
       0x2, 0x2, 0x158d, 0x158f, 0x7, 0x3d3, 0x2, 0x2, 0x158e, 0x158c, 0x3, 
       0x2, 0x2, 0x2, 0x158f, 0x1592, 0x3, 0x2, 0x2, 0x2, 0x1590, 0x158e, 
       0x3, 0x2, 0x2, 0x2, 0x1590, 0x1591, 0x3, 0x2, 0x2, 0x2, 0x1591, 0x1593, 
       0x3, 0x2, 0x2, 0x2, 0x1592, 0x1590, 0x3, 0x2, 0x2, 0x2, 0x1593, 0x1594, 
       0x7, 0x3c5, 0x2, 0x2, 0x1594, 0x223, 0x3, 0x2, 0x2, 0x2, 0x1595, 
       0x1597, 0x9, 0x62, 0x2, 0x2, 0x1596, 0x1598, 0x5, 0x226, 0x114, 0x2, 
       0x1597, 0x1596, 0x3, 0x2, 0x2, 0x2, 0x1597, 0x1598, 0x3, 0x2, 0x2, 
       0x2, 0x1598, 0x15af, 0x3, 0x2, 0x2, 0x2, 0x1599, 0x159b, 0x7, 0xbf, 
       0x2, 0x2, 0x159a, 0x159c, 0x5, 0x226, 0x114, 0x2, 0x159b, 0x159a, 
       0x3, 0x2, 0x2, 0x2, 0x159b, 0x159c, 0x3, 0x2, 0x2, 0x2, 0x159c, 0x15a3, 
       0x3, 0x2, 0x2, 0x2, 0x159d, 0x159e, 0x7, 0x18, 0x2, 0x2, 0x159e, 
       0x15a1, 0x7, 0x87, 0x2, 0x2, 0x159f, 0x15a1, 0x7, 0x2a4, 0x2, 0x2, 
       0x15a0, 0x159d, 0x3, 0x2, 0x2, 0x2, 0x15a0, 0x159f, 0x3, 0x2, 0x2, 
       0x2, 0x15a1, 0x15a2, 0x3, 0x2, 0x2, 0x2, 0x15a2, 0x15a4, 0x5, 0x200, 
       0x101, 0x2, 0x15a3, 0x15a0, 0x3, 0x2, 0x2, 0x2, 0x15a3, 0x15a4, 0x3, 
       0x2, 0x2, 0x2, 0x15a4, 0x15af, 0x3, 0x2, 0x2, 0x2, 0x15a5, 0x15af, 
       0x9, 0x63, 0x2, 0x2, 0x15a6, 0x15a8, 0x7, 0xb7, 0x2, 0x2, 0x15a7, 
       0x15a9, 0x5, 0x228, 0x115, 0x2, 0x15a8, 0x15a7, 0x3, 0x2, 0x2, 0x2, 
       0x15a8, 0x15a9, 0x3, 0x2, 0x2, 0x2, 0x15a9, 0x15af, 0x3, 0x2, 0x2, 
       0x2, 0x15aa, 0x15ac, 0x9, 0x5c, 0x2, 0x2, 0x15ab, 0x15ad, 0x7, 0xb1, 
       0x2, 0x2, 0x15ac, 0x15ab, 0x3, 0x2, 0x2, 0x2, 0x15ac, 0x15ad, 0x3, 
       0x2, 0x2, 0x2, 0x15ad, 0x15af, 0x3, 0x2, 0x2, 0x2, 0x15ae, 0x1595, 
       0x3, 0x2, 0x2, 0x2, 0x15ae, 0x1599, 0x3, 0x2, 0x2, 0x2, 0x15ae, 0x15a5, 
       0x3, 0x2, 0x2, 0x2, 0x15ae, 0x15a6, 0x3, 0x2, 0x2, 0x2, 0x15ae, 0x15aa, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x225, 0x3, 0x2, 0x2, 0x2, 0x15b0, 0x15b1, 
       0x7, 0x3c4, 0x2, 0x2, 0x15b1, 0x15b2, 0x5, 0x212, 0x10a, 0x2, 0x15b2, 
       0x15b3, 0x7, 0x3c5, 0x2, 0x2, 0x15b3, 0x227, 0x3, 0x2, 0x2, 0x2, 
       0x15b4, 0x15b5, 0x7, 0x3c4, 0x2, 0x2, 0x15b5, 0x15b6, 0x5, 0x212, 
       0x10a, 0x2, 0x15b6, 0x15b7, 0x7, 0x3c6, 0x2, 0x2, 0x15b7, 0x15b8, 
       0x5, 0x212, 0x10a, 0x2, 0x15b8, 0x15b9, 0x7, 0x3c5, 0x2, 0x2, 0x15b9, 
       0x229, 0x3, 0x2, 0x2, 0x2, 0x15ba, 0x15bb, 0x7, 0x3c4, 0x2, 0x2, 
       0x15bb, 0x15be, 0x5, 0x212, 0x10a, 0x2, 0x15bc, 0x15bd, 0x7, 0x3c6, 
       0x2, 0x2, 0x15bd, 0x15bf, 0x5, 0x212, 0x10a, 0x2, 0x15be, 0x15bc, 
       0x3, 0x2, 0x2, 0x2, 0x15be, 0x15bf, 0x3, 0x2, 0x2, 0x2, 0x15bf, 0x15c0, 
       0x3, 0x2, 0x2, 0x2, 0x15c0, 0x15c1, 0x7, 0x3c5, 0x2, 0x2, 0x15c1, 
       0x22b, 0x3, 0x2, 0x2, 0x2, 0x15c2, 0x15c7, 0x5, 0x20e, 0x108, 0x2, 
       0x15c3, 0x15c4, 0x7, 0x3c6, 0x2, 0x2, 0x15c4, 0x15c6, 0x5, 0x20e, 
       0x108, 0x2, 0x15c5, 0x15c3, 0x3, 0x2, 0x2, 0x2, 0x15c6, 0x15c9, 0x3, 
       0x2, 0x2, 0x2, 0x15c7, 0x15c5, 0x3, 0x2, 0x2, 0x2, 0x15c7, 0x15c8, 
       0x3, 0x2, 0x2, 0x2, 0x15c8, 0x22d, 0x3, 0x2, 0x2, 0x2, 0x15c9, 0x15c7, 
       0x3, 0x2, 0x2, 0x2, 0x15ca, 0x15cf, 0x5, 0x1f6, 0xfc, 0x2, 0x15cb, 
       0x15cc, 0x7, 0x3c6, 0x2, 0x2, 0x15cc, 0x15ce, 0x5, 0x1f6, 0xfc, 0x2, 
       0x15cd, 0x15cb, 0x3, 0x2, 0x2, 0x2, 0x15ce, 0x15d1, 0x3, 0x2, 0x2, 
       0x2, 0x15cf, 0x15cd, 0x3, 0x2, 0x2, 0x2, 0x15cf, 0x15d0, 0x3, 0x2, 
       0x2, 0x2, 0x15d0, 0x22f, 0x3, 0x2, 0x2, 0x2, 0x15d1, 0x15cf, 0x3, 
       0x2, 0x2, 0x2, 0x15d2, 0x15d3, 0x7, 0x3c4, 0x2, 0x2, 0x15d3, 0x15d8, 
       0x5, 0x1fa, 0xfe, 0x2, 0x15d4, 0x15d5, 0x7, 0x3c6, 0x2, 0x2, 0x15d5, 
       0x15d7, 0x5, 0x1fa, 0xfe, 0x2, 0x15d6, 0x15d4, 0x3, 0x2, 0x2, 0x2, 
       0x15d7, 0x15da, 0x3, 0x2, 0x2, 0x2, 0x15d8, 0x15d6, 0x3, 0x2, 0x2, 
       0x2, 0x15d8, 0x15d9, 0x3, 0x2, 0x2, 0x2, 0x15d9, 0x15db, 0x3, 0x2, 
       0x2, 0x2, 0x15da, 0x15d8, 0x3, 0x2, 0x2, 0x2, 0x15db, 0x15dc, 0x7, 
       0x3c5, 0x2, 0x2, 0x15dc, 0x231, 0x3, 0x2, 0x2, 0x2, 0x15dd, 0x15e2, 
       0x5, 0x25a, 0x12e, 0x2, 0x15de, 0x15df, 0x7, 0x3c6, 0x2, 0x2, 0x15df, 
       0x15e1, 0x5, 0x25a, 0x12e, 0x2, 0x15e0, 0x15de, 0x3, 0x2, 0x2, 0x2, 
       0x15e1, 0x15e4, 0x3, 0x2, 0x2, 0x2, 0x15e2, 0x15e0, 0x3, 0x2, 0x2, 
       0x2, 0x15e2, 0x15e3, 0x3, 0x2, 0x2, 0x2, 0x15e3, 0x233, 0x3, 0x2, 
       0x2, 0x2, 0x15e4, 0x15e2, 0x3, 0x2, 0x2, 0x2, 0x15e5, 0x15ea, 0x5, 
       0x240, 0x121, 0x2, 0x15e6, 0x15e7, 0x7, 0x3c6, 0x2, 0x2, 0x15e7, 
       0x15e9, 0x5, 0x240, 0x121, 0x2, 0x15e8, 0x15e6, 0x3, 0x2, 0x2, 0x2, 
       0x15e9, 0x15ec, 0x3, 0x2, 0x2, 0x2, 0x15ea, 0x15e8, 0x3, 0x2, 0x2, 
       0x2, 0x15ea, 0x15eb, 0x3, 0x2, 0x2, 0x2, 0x15eb, 0x235, 0x3, 0x2, 
       0x2, 0x2, 0x15ec, 0x15ea, 0x3, 0x2, 0x2, 0x2, 0x15ed, 0x15f2, 0x5, 
       0x21e, 0x110, 0x2, 0x15ee, 0x15ef, 0x7, 0x3c6, 0x2, 0x2, 0x15ef, 
       0x15f1, 0x5, 0x21e, 0x110, 0x2, 0x15f0, 0x15ee, 0x3, 0x2, 0x2, 0x2, 
       0x15f1, 0x15f4, 0x3, 0x2, 0x2, 0x2, 0x15f2, 0x15f0, 0x3, 0x2, 0x2, 
       0x2, 0x15f2, 0x15f3, 0x3, 0x2, 0x2, 0x2, 0x15f3, 0x237, 0x3, 0x2, 
       0x2, 0x2, 0x15f4, 0x15f2, 0x3, 0x2, 0x2, 0x2, 0x15f5, 0x15fa, 0x7, 
       0x3d3, 0x2, 0x2, 0x15f6, 0x15f7, 0x7, 0x3c6, 0x2, 0x2, 0x15f7, 0x15f9, 
       0x7, 0x3d3, 0x2, 0x2, 0x15f8, 0x15f6, 0x3, 0x2, 0x2, 0x2, 0x15f9, 
       0x15fc, 0x3, 0x2, 0x2, 0x2, 0x15fa, 0x15f8, 0x3, 0x2, 0x2, 0x2, 0x15fa, 
       0x15fb, 0x3, 0x2, 0x2, 0x2, 0x15fb, 0x239, 0x3, 0x2, 0x2, 0x2, 0x15fc, 
       0x15fa, 0x3, 0x2, 0x2, 0x2, 0x15fd, 0x1602, 0x7, 0x3de, 0x2, 0x2, 
       0x15fe, 0x15ff, 0x7, 0x3c6, 0x2, 0x2, 0x15ff, 0x1601, 0x7, 0x3de, 
       0x2, 0x2, 0x1600, 0x15fe, 0x3, 0x2, 0x2, 0x2, 0x1601, 0x1604, 0x3, 
       0x2, 0x2, 0x2, 0x1602, 0x1600, 0x3, 0x2, 0x2, 0x2, 0x1602, 0x1603, 
       0x3, 0x2, 0x2, 0x2, 0x1603, 0x23b, 0x3, 0x2, 0x2, 0x2, 0x1604, 0x1602, 
       0x3, 0x2, 0x2, 0x2, 0x1605, 0x1611, 0x7, 0x67, 0x2, 0x2, 0x1606, 
       0x1608, 0x5, 0x260, 0x131, 0x2, 0x1607, 0x1606, 0x3, 0x2, 0x2, 0x2, 
       0x1607, 0x1608, 0x3, 0x2, 0x2, 0x2, 0x1608, 0x1609, 0x3, 0x2, 0x2, 
       0x2, 0x1609, 0x1611, 0x5, 0x21e, 0x110, 0x2, 0x160a, 0x160e, 0x5, 
       0x23e, 0x120, 0x2, 0x160b, 0x160c, 0x7, 0x68, 0x2, 0x2, 0x160c, 0x160d, 
       0x7, 0xa1, 0x2, 0x2, 0x160d, 0x160f, 0x5, 0x23e, 0x120, 0x2, 0x160e, 
       0x160b, 0x3, 0x2, 0x2, 0x2, 0x160e, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x160f, 
       0x1611, 0x3, 0x2, 0x2, 0x2, 0x1610, 0x1605, 0x3, 0x2, 0x2, 0x2, 0x1610, 
       0x1607, 0x3, 0x2, 0x2, 0x2, 0x1610, 0x160a, 0x3, 0x2, 0x2, 0x2, 0x1611, 
       0x23d, 0x3, 0x2, 0x2, 0x2, 0x1612, 0x1618, 0x9, 0x64, 0x2, 0x2, 0x1613, 
       0x1615, 0x7, 0x3c4, 0x2, 0x2, 0x1614, 0x1616, 0x5, 0x212, 0x10a, 
       0x2, 0x1615, 0x1614, 0x3, 0x2, 0x2, 0x2, 0x1615, 0x1616, 0x3, 0x2, 
       0x2, 0x2, 0x1616, 0x1617, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1619, 0x7, 
       0x3c5, 0x2, 0x2, 0x1618, 0x1613, 0x3, 0x2, 0x2, 0x2, 0x1618, 0x1619, 
       0x3, 0x2, 0x2, 0x2, 0x1619, 0x1621, 0x3, 0x2, 0x2, 0x2, 0x161a, 0x161b, 
       0x7, 0xf5, 0x2, 0x2, 0x161b, 0x161d, 0x7, 0x3c4, 0x2, 0x2, 0x161c, 
       0x161e, 0x5, 0x212, 0x10a, 0x2, 0x161d, 0x161c, 0x3, 0x2, 0x2, 0x2, 
       0x161d, 0x161e, 0x3, 0x2, 0x2, 0x2, 0x161e, 0x161f, 0x3, 0x2, 0x2, 
       0x2, 0x161f, 0x1621, 0x7, 0x3c5, 0x2, 0x2, 0x1620, 0x1612, 0x3, 0x2, 
       0x2, 0x2, 0x1620, 0x161a, 0x3, 0x2, 0x2, 0x2, 0x1621, 0x23f, 0x3, 
       0x2, 0x2, 0x2, 0x1622, 0x1625, 0x5, 0x25a, 0x12e, 0x2, 0x1623, 0x1625, 
       0x7, 0x27, 0x2, 0x2, 0x1624, 0x1622, 0x3, 0x2, 0x2, 0x2, 0x1624, 
       0x1623, 0x3, 0x2, 0x2, 0x2, 0x1625, 0x241, 0x3, 0x2, 0x2, 0x2, 0x1626, 
       0x1627, 0x7, 0x44, 0x2, 0x2, 0x1627, 0x1628, 0x7, 0x35, 0x2, 0x2, 
       0x1628, 0x243, 0x3, 0x2, 0x2, 0x2, 0x1629, 0x162a, 0x7, 0x44, 0x2, 
       0x2, 0x162a, 0x162b, 0x7, 0x65, 0x2, 0x2, 0x162b, 0x162c, 0x7, 0x35, 
       0x2, 0x2, 0x162c, 0x245, 0x3, 0x2, 0x2, 0x2, 0x162d, 0x163f, 0x5, 
       0x248, 0x125, 0x2, 0x162e, 0x163f, 0x5, 0x250, 0x129, 0x2, 0x162f, 
       0x1630, 0x5, 0x252, 0x12a, 0x2, 0x1630, 0x1632, 0x7, 0x3c4, 0x2, 
       0x2, 0x1631, 0x1633, 0x5, 0x256, 0x12c, 0x2, 0x1632, 0x1631, 0x3, 
       0x2, 0x2, 0x2, 0x1632, 0x1633, 0x3, 0x2, 0x2, 0x2, 0x1633, 0x1634, 
       0x3, 0x2, 0x2, 0x2, 0x1634, 0x1635, 0x7, 0x3c5, 0x2, 0x2, 0x1635, 
       0x163f, 0x3, 0x2, 0x2, 0x2, 0x1636, 0x1637, 0x5, 0x1f4, 0xfb, 0x2, 
       0x1637, 0x1639, 0x7, 0x3c4, 0x2, 0x2, 0x1638, 0x163a, 0x5, 0x256, 
       0x12c, 0x2, 0x1639, 0x1638, 0x3, 0x2, 0x2, 0x2, 0x1639, 0x163a, 0x3, 
       0x2, 0x2, 0x2, 0x163a, 0x163b, 0x3, 0x2, 0x2, 0x2, 0x163b, 0x163c, 
       0x7, 0x3c5, 0x2, 0x2, 0x163c, 0x163f, 0x3, 0x2, 0x2, 0x2, 0x163d, 
       0x163f, 0x5, 0x254, 0x12b, 0x2, 0x163e, 0x162d, 0x3, 0x2, 0x2, 0x2, 
       0x163e, 0x162e, 0x3, 0x2, 0x2, 0x2, 0x163e, 0x162f, 0x3, 0x2, 0x2, 
       0x2, 0x163e, 0x1636, 0x3, 0x2, 0x2, 0x2, 0x163e, 0x163d, 0x3, 0x2, 
       0x2, 0x2, 0x163f, 0x247, 0x3, 0x2, 0x2, 0x2, 0x1640, 0x16de, 0x9, 
       0x65, 0x2, 0x2, 0x1641, 0x1642, 0x7, 0x1f, 0x2, 0x2, 0x1642, 0x1643, 
       0x7, 0x3c4, 0x2, 0x2, 0x1643, 0x1644, 0x5, 0x25a, 0x12e, 0x2, 0x1644, 
       0x1645, 0x7, 0x3c6, 0x2, 0x2, 0x1645, 0x1646, 0x5, 0x224, 0x113, 
       0x2, 0x1646, 0x1647, 0x7, 0x3c5, 0x2, 0x2, 0x1647, 0x16de, 0x3, 0x2, 
       0x2, 0x2, 0x1648, 0x1649, 0x7, 0x1f, 0x2, 0x2, 0x1649, 0x164a, 0x7, 
       0x3c4, 0x2, 0x2, 0x164a, 0x164b, 0x5, 0x25a, 0x12e, 0x2, 0x164b, 
       0x164c, 0x7, 0xa4, 0x2, 0x2, 0x164c, 0x164d, 0x5, 0x200, 0x101, 0x2, 
       0x164d, 0x164e, 0x7, 0x3c5, 0x2, 0x2, 0x164e, 0x16de, 0x3, 0x2, 0x2, 
       0x2, 0x164f, 0x1650, 0x7, 0x16, 0x2, 0x2, 0x1650, 0x1651, 0x7, 0x3c4, 
       0x2, 0x2, 0x1651, 0x1652, 0x5, 0x25a, 0x12e, 0x2, 0x1652, 0x1653, 
       0x7, 0xd, 0x2, 0x2, 0x1653, 0x1654, 0x5, 0x224, 0x113, 0x2, 0x1654, 
       0x1655, 0x7, 0x3c5, 0x2, 0x2, 0x1655, 0x16de, 0x3, 0x2, 0x2, 0x2, 
       0x1656, 0x1657, 0x7, 0xa5, 0x2, 0x2, 0x1657, 0x1658, 0x7, 0x3c4, 
       0x2, 0x2, 0x1658, 0x1659, 0x5, 0x1f8, 0xfd, 0x2, 0x1659, 0x165a, 
       0x7, 0x3c5, 0x2, 0x2, 0x165a, 0x16de, 0x3, 0x2, 0x2, 0x2, 0x165b, 
       0x165c, 0x7, 0x15, 0x2, 0x2, 0x165c, 0x165e, 0x5, 0x25a, 0x12e, 0x2, 
       0x165d, 0x165f, 0x5, 0x24a, 0x126, 0x2, 0x165e, 0x165d, 0x3, 0x2, 
       0x2, 0x2, 0x165f, 0x1660, 0x3, 0x2, 0x2, 0x2, 0x1660, 0x165e, 0x3, 
       0x2, 0x2, 0x2, 0x1660, 0x1661, 0x3, 0x2, 0x2, 0x2, 0x1661, 0x1664, 
       0x3, 0x2, 0x2, 0x2, 0x1662, 0x1663, 0x7, 0x31, 0x2, 0x2, 0x1663, 
       0x1665, 0x5, 0x258, 0x12d, 0x2, 0x1664, 0x1662, 0x3, 0x2, 0x2, 0x2, 
       0x1664, 0x1665, 0x3, 0x2, 0x2, 0x2, 0x1665, 0x1666, 0x3, 0x2, 0x2, 
       0x2, 0x1666, 0x1667, 0x7, 0x13e, 0x2, 0x2, 0x1667, 0x16de, 0x3, 0x2, 
       0x2, 0x2, 0x1668, 0x166a, 0x7, 0x15, 0x2, 0x2, 0x1669, 0x166b, 0x5, 
       0x24a, 0x126, 0x2, 0x166a, 0x1669, 0x3, 0x2, 0x2, 0x2, 0x166b, 0x166c, 
       0x3, 0x2, 0x2, 0x2, 0x166c, 0x166a, 0x3, 0x2, 0x2, 0x2, 0x166c, 0x166d, 
       0x3, 0x2, 0x2, 0x2, 0x166d, 0x1670, 0x3, 0x2, 0x2, 0x2, 0x166e, 0x166f, 
       0x7, 0x31, 0x2, 0x2, 0x166f, 0x1671, 0x5, 0x258, 0x12d, 0x2, 0x1670, 
       0x166e, 0x3, 0x2, 0x2, 0x2, 0x1670, 0x1671, 0x3, 0x2, 0x2, 0x2, 0x1671, 
       0x1672, 0x3, 0x2, 0x2, 0x2, 0x1672, 0x1673, 0x7, 0x13e, 0x2, 0x2, 
       0x1673, 0x16de, 0x3, 0x2, 0x2, 0x2, 0x1674, 0x1675, 0x7, 0xbf, 0x2, 
       0x2, 0x1675, 0x1676, 0x7, 0x3c4, 0x2, 0x2, 0x1676, 0x1679, 0x5, 0x256, 
       0x12c, 0x2, 0x1677, 0x1678, 0x7, 0xa4, 0x2, 0x2, 0x1678, 0x167a, 
       0x5, 0x200, 0x101, 0x2, 0x1679, 0x1677, 0x3, 0x2, 0x2, 0x2, 0x1679, 
       0x167a, 0x3, 0x2, 0x2, 0x2, 0x167a, 0x167b, 0x3, 0x2, 0x2, 0x2, 0x167b, 
       0x167c, 0x7, 0x3c5, 0x2, 0x2, 0x167c, 0x16de, 0x3, 0x2, 0x2, 0x2, 
       0x167d, 0x167e, 0x7, 0xf6, 0x2, 0x2, 0x167e, 0x1681, 0x7, 0x3c4, 
       0x2, 0x2, 0x167f, 0x1682, 0x5, 0x216, 0x10c, 0x2, 0x1680, 0x1682, 
       0x5, 0x25a, 0x12e, 0x2, 0x1681, 0x167f, 0x3, 0x2, 0x2, 0x2, 0x1681, 
       0x1680, 0x3, 0x2, 0x2, 0x2, 0x1682, 0x1683, 0x3, 0x2, 0x2, 0x2, 0x1683, 
       0x1686, 0x7, 0x46, 0x2, 0x2, 0x1684, 0x1687, 0x5, 0x216, 0x10c, 0x2, 
       0x1685, 0x1687, 0x5, 0x25a, 0x12e, 0x2, 0x1686, 0x1684, 0x3, 0x2, 
       0x2, 0x2, 0x1686, 0x1685, 0x3, 0x2, 0x2, 0x2, 0x1687, 0x1688, 0x3, 
       0x2, 0x2, 0x2, 0x1688, 0x1689, 0x7, 0x3c5, 0x2, 0x2, 0x1689, 0x16de, 
       0x3, 0x2, 0x2, 0x2, 0x168a, 0x168b, 0x9, 0x66, 0x2, 0x2, 0x168b, 
       0x168e, 0x7, 0x3c4, 0x2, 0x2, 0x168c, 0x168f, 0x5, 0x216, 0x10c, 
       0x2, 0x168d, 0x168f, 0x5, 0x25a, 0x12e, 0x2, 0x168e, 0x168c, 0x3, 
       0x2, 0x2, 0x2, 0x168e, 0x168d, 0x3, 0x2, 0x2, 0x2, 0x168f, 0x1690, 
       0x3, 0x2, 0x2, 0x2, 0x1690, 0x1693, 0x7, 0x3d, 0x2, 0x2, 0x1691, 
       0x1694, 0x5, 0x212, 0x10a, 0x2, 0x1692, 0x1694, 0x5, 0x25a, 0x12e, 
       0x2, 0x1693, 0x1691, 0x3, 0x2, 0x2, 0x2, 0x1693, 0x1692, 0x3, 0x2, 
       0x2, 0x2, 0x1694, 0x169a, 0x3, 0x2, 0x2, 0x2, 0x1695, 0x1698, 0x7, 
       0x3a, 0x2, 0x2, 0x1696, 0x1699, 0x5, 0x212, 0x10a, 0x2, 0x1697, 0x1699, 
       0x5, 0x25a, 0x12e, 0x2, 0x1698, 0x1696, 0x3, 0x2, 0x2, 0x2, 0x1698, 
       0x1697, 0x3, 0x2, 0x2, 0x2, 0x1699, 0x169b, 0x3, 0x2, 0x2, 0x2, 0x169a, 
       0x1695, 0x3, 0x2, 0x2, 0x2, 0x169a, 0x169b, 0x3, 0x2, 0x2, 0x2, 0x169b, 
       0x169c, 0x3, 0x2, 0x2, 0x2, 0x169c, 0x169d, 0x7, 0x3c5, 0x2, 0x2, 
       0x169d, 0x16de, 0x3, 0x2, 0x2, 0x2, 0x169e, 0x169f, 0x7, 0xfa, 0x2, 
       0x2, 0x169f, 0x16a0, 0x7, 0x3c4, 0x2, 0x2, 0x16a0, 0x16a3, 0x9, 0x67, 
       0x2, 0x2, 0x16a1, 0x16a4, 0x5, 0x216, 0x10c, 0x2, 0x16a2, 0x16a4, 
       0x5, 0x25a, 0x12e, 0x2, 0x16a3, 0x16a1, 0x3, 0x2, 0x2, 0x2, 0x16a3, 
       0x16a2, 0x3, 0x2, 0x2, 0x2, 0x16a3, 0x16a4, 0x3, 0x2, 0x2, 0x2, 0x16a4, 
       0x16a5, 0x3, 0x2, 0x2, 0x2, 0x16a5, 0x16a8, 0x7, 0x3d, 0x2, 0x2, 
       0x16a6, 0x16a9, 0x5, 0x216, 0x10c, 0x2, 0x16a7, 0x16a9, 0x5, 0x25a, 
       0x12e, 0x2, 0x16a8, 0x16a6, 0x3, 0x2, 0x2, 0x2, 0x16a8, 0x16a7, 0x3, 
       0x2, 0x2, 0x2, 0x16a9, 0x16aa, 0x3, 0x2, 0x2, 0x2, 0x16aa, 0x16ab, 
       0x7, 0x3c5, 0x2, 0x2, 0x16ab, 0x16de, 0x3, 0x2, 0x2, 0x2, 0x16ac, 
       0x16ad, 0x7, 0xfa, 0x2, 0x2, 0x16ad, 0x16b0, 0x7, 0x3c4, 0x2, 0x2, 
       0x16ae, 0x16b1, 0x5, 0x216, 0x10c, 0x2, 0x16af, 0x16b1, 0x5, 0x25a, 
       0x12e, 0x2, 0x16b0, 0x16ae, 0x3, 0x2, 0x2, 0x2, 0x16b0, 0x16af, 0x3, 
       0x2, 0x2, 0x2, 0x16b1, 0x16b2, 0x3, 0x2, 0x2, 0x2, 0x16b2, 0x16b5, 
       0x7, 0x3d, 0x2, 0x2, 0x16b3, 0x16b6, 0x5, 0x216, 0x10c, 0x2, 0x16b4, 
       0x16b6, 0x5, 0x25a, 0x12e, 0x2, 0x16b5, 0x16b3, 0x3, 0x2, 0x2, 0x2, 
       0x16b5, 0x16b4, 0x3, 0x2, 0x2, 0x2, 0x16b6, 0x16b7, 0x3, 0x2, 0x2, 
       0x2, 0x16b7, 0x16b8, 0x7, 0x3c5, 0x2, 0x2, 0x16b8, 0x16de, 0x3, 0x2, 
       0x2, 0x2, 0x16b9, 0x16ba, 0x7, 0x3a5, 0x2, 0x2, 0x16ba, 0x16bd, 0x7, 
       0x3c4, 0x2, 0x2, 0x16bb, 0x16be, 0x5, 0x216, 0x10c, 0x2, 0x16bc, 
       0x16be, 0x5, 0x25a, 0x12e, 0x2, 0x16bd, 0x16bb, 0x3, 0x2, 0x2, 0x2, 
       0x16bd, 0x16bc, 0x3, 0x2, 0x2, 0x2, 0x16be, 0x16c5, 0x3, 0x2, 0x2, 
       0x2, 0x16bf, 0x16c0, 0x7, 0xd, 0x2, 0x2, 0x16c0, 0x16c1, 0x9, 0x68, 
       0x2, 0x2, 0x16c1, 0x16c2, 0x7, 0x3c4, 0x2, 0x2, 0x16c2, 0x16c3, 0x5, 
       0x212, 0x10a, 0x2, 0x16c3, 0x16c4, 0x7, 0x3c5, 0x2, 0x2, 0x16c4, 
       0x16c6, 0x3, 0x2, 0x2, 0x2, 0x16c5, 0x16bf, 0x3, 0x2, 0x2, 0x2, 0x16c5, 
       0x16c6, 0x3, 0x2, 0x2, 0x2, 0x16c6, 0x16c8, 0x3, 0x2, 0x2, 0x2, 0x16c7, 
       0x16c9, 0x5, 0x24c, 0x127, 0x2, 0x16c8, 0x16c7, 0x3, 0x2, 0x2, 0x2, 
       0x16c8, 0x16c9, 0x3, 0x2, 0x2, 0x2, 0x16c9, 0x16ca, 0x3, 0x2, 0x2, 
       0x2, 0x16ca, 0x16cb, 0x7, 0x3c5, 0x2, 0x2, 0x16cb, 0x16de, 0x3, 0x2, 
       0x2, 0x2, 0x16cc, 0x16cd, 0x7, 0xf3, 0x2, 0x2, 0x16cd, 0x16ce, 0x7, 
       0x3c4, 0x2, 0x2, 0x16ce, 0x16cf, 0x5, 0x3c, 0x1f, 0x2, 0x16cf, 0x16d2, 
       0x7, 0x3d, 0x2, 0x2, 0x16d0, 0x16d3, 0x5, 0x216, 0x10c, 0x2, 0x16d1, 
       0x16d3, 0x5, 0x25a, 0x12e, 0x2, 0x16d2, 0x16d0, 0x3, 0x2, 0x2, 0x2, 
       0x16d2, 0x16d1, 0x3, 0x2, 0x2, 0x2, 0x16d3, 0x16d4, 0x3, 0x2, 0x2, 
       0x2, 0x16d4, 0x16d5, 0x7, 0x3c5, 0x2, 0x2, 0x16d5, 0x16de, 0x3, 0x2, 
       0x2, 0x2, 0x16d6, 0x16d7, 0x7, 0x2de, 0x2, 0x2, 0x16d7, 0x16d8, 0x7, 
       0x3c4, 0x2, 0x2, 0x16d8, 0x16d9, 0x9, 0x63, 0x2, 0x2, 0x16d9, 0x16da, 
       0x7, 0x3c6, 0x2, 0x2, 0x16da, 0x16db, 0x5, 0x216, 0x10c, 0x2, 0x16db, 
       0x16dc, 0x7, 0x3c5, 0x2, 0x2, 0x16dc, 0x16de, 0x3, 0x2, 0x2, 0x2, 
       0x16dd, 0x1640, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x1641, 0x3, 0x2, 0x2, 
       0x2, 0x16dd, 0x1648, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x164f, 0x3, 0x2, 
       0x2, 0x2, 0x16dd, 0x1656, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x165b, 0x3, 
       0x2, 0x2, 0x2, 0x16dd, 0x1668, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x1674, 
       0x3, 0x2, 0x2, 0x2, 0x16dd, 0x167d, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x168a, 
       0x3, 0x2, 0x2, 0x2, 0x16dd, 0x169e, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x16ac, 
       0x3, 0x2, 0x2, 0x2, 0x16dd, 0x16b9, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x16cc, 
       0x3, 0x2, 0x2, 0x2, 0x16dd, 0x16d6, 0x3, 0x2, 0x2, 0x2, 0x16de, 0x249, 
       0x3, 0x2, 0x2, 0x2, 0x16df, 0x16e0, 0x7, 0xa6, 0x2, 0x2, 0x16e0, 
       0x16e1, 0x5, 0x258, 0x12d, 0x2, 0x16e1, 0x16e2, 0x7, 0x97, 0x2, 0x2, 
       0x16e2, 0x16e3, 0x5, 0x258, 0x12d, 0x2, 0x16e3, 0x24b, 0x3, 0x2, 
       0x2, 0x2, 0x16e4, 0x16e5, 0x7, 0x17a, 0x2, 0x2, 0x16e5, 0x16ea, 0x5, 
       0x24e, 0x128, 0x2, 0x16e6, 0x16e7, 0x7, 0x3c6, 0x2, 0x2, 0x16e7, 
       0x16e9, 0x5, 0x24e, 0x128, 0x2, 0x16e8, 0x16e6, 0x3, 0x2, 0x2, 0x2, 
       0x16e9, 0x16ec, 0x3, 0x2, 0x2, 0x2, 0x16ea, 0x16e8, 0x3, 0x2, 0x2, 
       0x2, 0x16ea, 0x16eb, 0x3, 0x2, 0x2, 0x2, 0x16eb, 0x16f3, 0x3, 0x2, 
       0x2, 0x2, 0x16ec, 0x16ea, 0x3, 0x2, 0x2, 0x2, 0x16ed, 0x16ee, 0x7, 
       0x17a, 0x2, 0x2, 0x16ee, 0x16ef, 0x5, 0x212, 0x10a, 0x2, 0x16ef, 
       0x16f0, 0x7, 0x3b8, 0x2, 0x2, 0x16f0, 0x16f1, 0x5, 0x212, 0x10a, 
       0x2, 0x16f1, 0x16f3, 0x3, 0x2, 0x2, 0x2, 0x16f2, 0x16e4, 0x3, 0x2, 
       0x2, 0x2, 0x16f2, 0x16ed, 0x3, 0x2, 0x2, 0x2, 0x16f3, 0x24d, 0x3, 
       0x2, 0x2, 0x2, 0x16f4, 0x16f6, 0x5, 0x212, 0x10a, 0x2, 0x16f5, 0x16f7, 
       0x9, 0x69, 0x2, 0x2, 0x16f6, 0x16f5, 0x3, 0x2, 0x2, 0x2, 0x16f6, 
       0x16f7, 0x3, 0x2, 0x2, 0x2, 0x16f7, 0x24f, 0x3, 0x2, 0x2, 0x2, 0x16f8, 
       0x16f9, 0x9, 0x6a, 0x2, 0x2, 0x16f9, 0x16fb, 0x7, 0x3c4, 0x2, 0x2, 
       0x16fa, 0x16fc, 0x9, 0x27, 0x2, 0x2, 0x16fb, 0x16fa, 0x3, 0x2, 0x2, 
       0x2, 0x16fb, 0x16fc, 0x3, 0x2, 0x2, 0x2, 0x16fc, 0x16fd, 0x3, 0x2, 
       0x2, 0x2, 0x16fd, 0x16fe, 0x5, 0x258, 0x12d, 0x2, 0x16fe, 0x16ff, 
       0x7, 0x3c5, 0x2, 0x2, 0x16ff, 0x1731, 0x3, 0x2, 0x2, 0x2, 0x1700, 
       0x1701, 0x7, 0xdf, 0x2, 0x2, 0x1701, 0x1707, 0x7, 0x3c4, 0x2, 0x2, 
       0x1702, 0x1708, 0x7, 0x3b3, 0x2, 0x2, 0x1703, 0x1705, 0x7, 0x8, 0x2, 
       0x2, 0x1704, 0x1703, 0x3, 0x2, 0x2, 0x2, 0x1704, 0x1705, 0x3, 0x2, 
       0x2, 0x2, 0x1705, 0x1706, 0x3, 0x2, 0x2, 0x2, 0x1706, 0x1708, 0x5, 
       0x258, 0x12d, 0x2, 0x1707, 0x1702, 0x3, 0x2, 0x2, 0x2, 0x1707, 0x1704, 
       0x3, 0x2, 0x2, 0x2, 0x1708, 0x1709, 0x3, 0x2, 0x2, 0x2, 0x1709, 0x1731, 
       0x7, 0x3c5, 0x2, 0x2, 0x170a, 0x170b, 0x7, 0xdf, 0x2, 0x2, 0x170b, 
       0x170c, 0x7, 0x3c4, 0x2, 0x2, 0x170c, 0x170d, 0x7, 0x2d, 0x2, 0x2, 
       0x170d, 0x170e, 0x5, 0x256, 0x12c, 0x2, 0x170e, 0x170f, 0x7, 0x3c5, 
       0x2, 0x2, 0x170f, 0x1731, 0x3, 0x2, 0x2, 0x2, 0x1710, 0x1711, 0x9, 
       0x6b, 0x2, 0x2, 0x1711, 0x1713, 0x7, 0x3c4, 0x2, 0x2, 0x1712, 0x1714, 
       0x7, 0x8, 0x2, 0x2, 0x1713, 0x1712, 0x3, 0x2, 0x2, 0x2, 0x1713, 0x1714, 
       0x3, 0x2, 0x2, 0x2, 0x1714, 0x1715, 0x3, 0x2, 0x2, 0x2, 0x1715, 0x1716, 
       0x5, 0x258, 0x12d, 0x2, 0x1716, 0x1717, 0x7, 0x3c5, 0x2, 0x2, 0x1717, 
       0x1731, 0x3, 0x2, 0x2, 0x2, 0x1718, 0x1719, 0x7, 0xe0, 0x2, 0x2, 
       0x1719, 0x171b, 0x7, 0x3c4, 0x2, 0x2, 0x171a, 0x171c, 0x7, 0x2d, 
       0x2, 0x2, 0x171b, 0x171a, 0x3, 0x2, 0x2, 0x2, 0x171b, 0x171c, 0x3, 
       0x2, 0x2, 0x2, 0x171c, 0x171d, 0x3, 0x2, 0x2, 0x2, 0x171d, 0x1728, 
       0x5, 0x256, 0x12c, 0x2, 0x171e, 0x171f, 0x7, 0x6d, 0x2, 0x2, 0x171f, 
       0x1720, 0x7, 0x12, 0x2, 0x2, 0x1720, 0x1725, 0x5, 0xd4, 0x6b, 0x2, 
       0x1721, 0x1722, 0x7, 0x3c6, 0x2, 0x2, 0x1722, 0x1724, 0x5, 0xd4, 
       0x6b, 0x2, 0x1723, 0x1721, 0x3, 0x2, 0x2, 0x2, 0x1724, 0x1727, 0x3, 
       0x2, 0x2, 0x2, 0x1725, 0x1723, 0x3, 0x2, 0x2, 0x2, 0x1725, 0x1726, 
       0x3, 0x2, 0x2, 0x2, 0x1726, 0x1729, 0x3, 0x2, 0x2, 0x2, 0x1727, 0x1725, 
       0x3, 0x2, 0x2, 0x2, 0x1728, 0x171e, 0x3, 0x2, 0x2, 0x2, 0x1728, 0x1729, 
       0x3, 0x2, 0x2, 0x2, 0x1729, 0x172c, 0x3, 0x2, 0x2, 0x2, 0x172a, 0x172b, 
       0x7, 0x88, 0x2, 0x2, 0x172b, 0x172d, 0x7, 0x3d3, 0x2, 0x2, 0x172c, 
       0x172a, 0x3, 0x2, 0x2, 0x2, 0x172c, 0x172d, 0x3, 0x2, 0x2, 0x2, 0x172d, 
       0x172e, 0x3, 0x2, 0x2, 0x2, 0x172e, 0x172f, 0x7, 0x3c5, 0x2, 0x2, 
       0x172f, 0x1731, 0x3, 0x2, 0x2, 0x2, 0x1730, 0x16f8, 0x3, 0x2, 0x2, 
       0x2, 0x1730, 0x1700, 0x3, 0x2, 0x2, 0x2, 0x1730, 0x170a, 0x3, 0x2, 
       0x2, 0x2, 0x1730, 0x1710, 0x3, 0x2, 0x2, 0x2, 0x1730, 0x1718, 0x3, 
       0x2, 0x2, 0x2, 0x1731, 0x251, 0x3, 0x2, 0x2, 0x2, 0x1732, 0x174a, 
       0x5, 0x276, 0x13c, 0x2, 0x1733, 0x174a, 0x7, 0x248, 0x2, 0x2, 0x1734, 
       0x174a, 0x7, 0xef, 0x2, 0x2, 0x1735, 0x174a, 0x7, 0xeb, 0x2, 0x2, 
       0x1736, 0x174a, 0x7, 0xec, 0x2, 0x2, 0x1737, 0x174a, 0x7, 0xed, 0x2, 
       0x2, 0x1738, 0x174a, 0x7, 0xf0, 0x2, 0x2, 0x1739, 0x174a, 0x7, 0xf1, 
       0x2, 0x2, 0x173a, 0x174a, 0x7, 0xf2, 0x2, 0x2, 0x173b, 0x174a, 0x7, 
       0x44, 0x2, 0x2, 0x173c, 0x174a, 0x7, 0x4b, 0x2, 0x2, 0x173d, 0x174a, 
       0x7, 0xee, 0x2, 0x2, 0x173e, 0x174a, 0x7, 0xf4, 0x2, 0x2, 0x173f, 
       0x174a, 0x7, 0x19c, 0x2, 0x2, 0x1740, 0x174a, 0x7, 0xf5, 0x2, 0x2, 
       0x1741, 0x174a, 0x7, 0x7d, 0x2, 0x2, 0x1742, 0x174a, 0x7, 0xf7, 0x2, 
       0x2, 0x1743, 0x174a, 0x7, 0xf8, 0x2, 0x2, 0x1744, 0x174a, 0x7, 0xf9, 
       0x2, 0x2, 0x1745, 0x174a, 0x7, 0xfa, 0x2, 0x2, 0x1746, 0x174a, 0x7, 
       0xfb, 0x2, 0x2, 0x1747, 0x174a, 0x7, 0xfc, 0x2, 0x2, 0x1748, 0x174a, 
       0x7, 0xfd, 0x2, 0x2, 0x1749, 0x1732, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1733, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1734, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1735, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1736, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1737, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1738, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1739, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x173a, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x173b, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x173c, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x173d, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x173e, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x173f, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1740, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1741, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1742, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1743, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1744, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1745, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1746, 0x3, 0x2, 0x2, 0x2, 0x1749, 
       0x1747, 0x3, 0x2, 0x2, 0x2, 0x1749, 0x1748, 0x3, 0x2, 0x2, 0x2, 0x174a, 
       0x253, 0x3, 0x2, 0x2, 0x2, 0x174b, 0x174c, 0x9, 0x6c, 0x2, 0x2, 0x174c, 
       0x174d, 0x7, 0x3c4, 0x2, 0x2, 0x174d, 0x174e, 0x5, 0x258, 0x12d, 
       0x2, 0x174e, 0x174f, 0x7, 0x3c5, 0x2, 0x2, 0x174f, 0x255, 0x3, 0x2, 
       0x2, 0x2, 0x1750, 0x1755, 0x5, 0x21e, 0x110, 0x2, 0x1751, 0x1755, 
       0x5, 0x1f8, 0xfd, 0x2, 0x1752, 0x1755, 0x5, 0x246, 0x124, 0x2, 0x1753, 
       0x1755, 0x5, 0x25a, 0x12e, 0x2, 0x1754, 0x1750, 0x3, 0x2, 0x2, 0x2, 
       0x1754, 0x1751, 0x3, 0x2, 0x2, 0x2, 0x1754, 0x1752, 0x3, 0x2, 0x2, 
       0x2, 0x1754, 0x1753, 0x3, 0x2, 0x2, 0x2, 0x1755, 0x175f, 0x3, 0x2, 
       0x2, 0x2, 0x1756, 0x175b, 0x7, 0x3c6, 0x2, 0x2, 0x1757, 0x175c, 0x5, 
       0x21e, 0x110, 0x2, 0x1758, 0x175c, 0x5, 0x1f8, 0xfd, 0x2, 0x1759, 
       0x175c, 0x5, 0x246, 0x124, 0x2, 0x175a, 0x175c, 0x5, 0x25a, 0x12e, 
       0x2, 0x175b, 0x1757, 0x3, 0x2, 0x2, 0x2, 0x175b, 0x1758, 0x3, 0x2, 
       0x2, 0x2, 0x175b, 0x1759, 0x3, 0x2, 0x2, 0x2, 0x175b, 0x175a, 0x3, 
       0x2, 0x2, 0x2, 0x175c, 0x175e, 0x3, 0x2, 0x2, 0x2, 0x175d, 0x1756, 
       0x3, 0x2, 0x2, 0x2, 0x175e, 0x1761, 0x3, 0x2, 0x2, 0x2, 0x175f, 0x175d, 
       0x3, 0x2, 0x2, 0x2, 0x175f, 0x1760, 0x3, 0x2, 0x2, 0x2, 0x1760, 0x257, 
       0x3, 0x2, 0x2, 0x2, 0x1761, 0x175f, 0x3, 0x2, 0x2, 0x2, 0x1762, 0x1767, 
       0x5, 0x21e, 0x110, 0x2, 0x1763, 0x1767, 0x5, 0x1f8, 0xfd, 0x2, 0x1764, 
       0x1767, 0x5, 0x246, 0x124, 0x2, 0x1765, 0x1767, 0x5, 0x25a, 0x12e, 
       0x2, 0x1766, 0x1762, 0x3, 0x2, 0x2, 0x2, 0x1766, 0x1763, 0x3, 0x2, 
       0x2, 0x2, 0x1766, 0x1764, 0x3, 0x2, 0x2, 0x2, 0x1766, 0x1765, 0x3, 
       0x2, 0x2, 0x2, 0x1767, 0x259, 0x3, 0x2, 0x2, 0x2, 0x1768, 0x1769, 
       0x8, 0x12e, 0x1, 0x2, 0x1769, 0x176a, 0x9, 0x6d, 0x2, 0x2, 0x176a, 
       0x1774, 0x5, 0x25a, 0x12e, 0x6, 0x176b, 0x176c, 0x5, 0x25c, 0x12f, 
       0x2, 0x176c, 0x176e, 0x7, 0x4e, 0x2, 0x2, 0x176d, 0x176f, 0x7, 0x65, 
       0x2, 0x2, 0x176e, 0x176d, 0x3, 0x2, 0x2, 0x2, 0x176e, 0x176f, 0x3, 
       0x2, 0x2, 0x2, 0x176f, 0x1770, 0x3, 0x2, 0x2, 0x2, 0x1770, 0x1771, 
       0x9, 0x6e, 0x2, 0x2, 0x1771, 0x1774, 0x3, 0x2, 0x2, 0x2, 0x1772, 
       0x1774, 0x5, 0x25c, 0x12f, 0x2, 0x1773, 0x1768, 0x3, 0x2, 0x2, 0x2, 
       0x1773, 0x176b, 0x3, 0x2, 0x2, 0x2, 0x1773, 0x1772, 0x3, 0x2, 0x2, 
       0x2, 0x1774, 0x177b, 0x3, 0x2, 0x2, 0x2, 0x1775, 0x1776, 0xc, 0x5, 
       0x2, 0x2, 0x1776, 0x1777, 0x5, 0x264, 0x133, 0x2, 0x1777, 0x1778, 
       0x5, 0x25a, 0x12e, 0x6, 0x1778, 0x177a, 0x3, 0x2, 0x2, 0x2, 0x1779, 
       0x1775, 0x3, 0x2, 0x2, 0x2, 0x177a, 0x177d, 0x3, 0x2, 0x2, 0x2, 0x177b, 
       0x1779, 0x3, 0x2, 0x2, 0x2, 0x177b, 0x177c, 0x3, 0x2, 0x2, 0x2, 0x177c, 
       0x25b, 0x3, 0x2, 0x2, 0x2, 0x177d, 0x177b, 0x3, 0x2, 0x2, 0x2, 0x177e, 
       0x1781, 0x8, 0x12f, 0x1, 0x2, 0x177f, 0x1780, 0x7, 0x3de, 0x2, 0x2, 
       0x1780, 0x1782, 0x7, 0x3aa, 0x2, 0x2, 0x1781, 0x177f, 0x3, 0x2, 0x2, 
       0x2, 0x1781, 0x1782, 0x3, 0x2, 0x2, 0x2, 0x1782, 0x1783, 0x3, 0x2, 
       0x2, 0x2, 0x1783, 0x1784, 0x5, 0x25e, 0x130, 0x2, 0x1784, 0x17bb, 
       0x3, 0x2, 0x2, 0x2, 0x1785, 0x1786, 0xc, 0x9, 0x2, 0x2, 0x1786, 0x1787, 
       0x5, 0x262, 0x132, 0x2, 0x1787, 0x1788, 0x5, 0x25c, 0x12f, 0xa, 0x1788, 
       0x17ba, 0x3, 0x2, 0x2, 0x2, 0x1789, 0x178a, 0xc, 0x7, 0x2, 0x2, 0x178a, 
       0x178b, 0x7, 0x10, 0x2, 0x2, 0x178b, 0x178c, 0x5, 0x25c, 0x12f, 0x2, 
       0x178c, 0x178d, 0x7, 0xc, 0x2, 0x2, 0x178d, 0x178e, 0x5, 0x25c, 0x12f, 
       0x8, 0x178e, 0x17ba, 0x3, 0x2, 0x2, 0x2, 0x178f, 0x1790, 0xc, 0x6, 
       0x2, 0x2, 0x1790, 0x1791, 0x7, 0x1f7, 0x2, 0x2, 0x1791, 0x1792, 0x7, 
       0x57, 0x2, 0x2, 0x1792, 0x17ba, 0x5, 0x25c, 0x12f, 0x7, 0x1793, 0x1795, 
       0xc, 0x4, 0x2, 0x2, 0x1794, 0x1796, 0x7, 0x65, 0x2, 0x2, 0x1795, 
       0x1794, 0x3, 0x2, 0x2, 0x2, 0x1795, 0x1796, 0x3, 0x2, 0x2, 0x2, 0x1796, 
       0x1797, 0x3, 0x2, 0x2, 0x2, 0x1797, 0x1798, 0x9, 0x6f, 0x2, 0x2, 
       0x1798, 0x17ba, 0x5, 0x25c, 0x12f, 0x5, 0x1799, 0x179b, 0xc, 0xb, 
       0x2, 0x2, 0x179a, 0x179c, 0x7, 0x65, 0x2, 0x2, 0x179b, 0x179a, 0x3, 
       0x2, 0x2, 0x2, 0x179b, 0x179c, 0x3, 0x2, 0x2, 0x2, 0x179c, 0x179d, 
       0x3, 0x2, 0x2, 0x2, 0x179d, 0x179e, 0x7, 0x46, 0x2, 0x2, 0x179e, 
       0x17a1, 0x7, 0x3c4, 0x2, 0x2, 0x179f, 0x17a2, 0x5, 0xb4, 0x5b, 0x2, 
       0x17a0, 0x17a2, 0x5, 0x232, 0x11a, 0x2, 0x17a1, 0x179f, 0x3, 0x2, 
       0x2, 0x2, 0x17a1, 0x17a0, 0x3, 0x2, 0x2, 0x2, 0x17a2, 0x17a3, 0x3, 
       0x2, 0x2, 0x2, 0x17a3, 0x17a4, 0x7, 0x3c5, 0x2, 0x2, 0x17a4, 0x17ba, 
       0x3, 0x2, 0x2, 0x2, 0x17a5, 0x17a6, 0xc, 0xa, 0x2, 0x2, 0x17a6, 0x17a7, 
       0x7, 0x4e, 0x2, 0x2, 0x17a7, 0x17ba, 0x5, 0x21c, 0x10f, 0x2, 0x17a8, 
       0x17a9, 0xc, 0x8, 0x2, 0x2, 0x17a9, 0x17aa, 0x5, 0x262, 0x132, 0x2, 
       0x17aa, 0x17ab, 0x9, 0x70, 0x2, 0x2, 0x17ab, 0x17ac, 0x7, 0x3c4, 
       0x2, 0x2, 0x17ac, 0x17ad, 0x5, 0xb4, 0x5b, 0x2, 0x17ad, 0x17ae, 0x7, 
       0x3c5, 0x2, 0x2, 0x17ae, 0x17ba, 0x3, 0x2, 0x2, 0x2, 0x17af, 0x17b1, 
       0xc, 0x5, 0x2, 0x2, 0x17b0, 0x17b2, 0x7, 0x65, 0x2, 0x2, 0x17b1, 
       0x17b0, 0x3, 0x2, 0x2, 0x2, 0x17b1, 0x17b2, 0x3, 0x2, 0x2, 0x2, 0x17b2, 
       0x17b3, 0x3, 0x2, 0x2, 0x2, 0x17b3, 0x17b4, 0x7, 0x57, 0x2, 0x2, 
       0x17b4, 0x17b7, 0x5, 0x25c, 0x12f, 0x2, 0x17b5, 0x17b6, 0x7, 0x144, 
       0x2, 0x2, 0x17b6, 0x17b8, 0x7, 0x3d3, 0x2, 0x2, 0x17b7, 0x17b5, 0x3, 
       0x2, 0x2, 0x2, 0x17b7, 0x17b8, 0x3, 0x2, 0x2, 0x2, 0x17b8, 0x17ba, 
       0x3, 0x2, 0x2, 0x2, 0x17b9, 0x1785, 0x3, 0x2, 0x2, 0x2, 0x17b9, 0x1789, 
       0x3, 0x2, 0x2, 0x2, 0x17b9, 0x178f, 0x3, 0x2, 0x2, 0x2, 0x17b9, 0x1793, 
       0x3, 0x2, 0x2, 0x2, 0x17b9, 0x1799, 0x3, 0x2, 0x2, 0x2, 0x17b9, 0x17a5, 
       0x3, 0x2, 0x2, 0x2, 0x17b9, 0x17a8, 0x3, 0x2, 0x2, 0x2, 0x17b9, 0x17af, 
       0x3, 0x2, 0x2, 0x2, 0x17ba, 0x17bd, 0x3, 0x2, 0x2, 0x2, 0x17bb, 0x17b9, 
       0x3, 0x2, 0x2, 0x2, 0x17bb, 0x17bc, 0x3, 0x2, 0x2, 0x2, 0x17bc, 0x25d, 
       0x3, 0x2, 0x2, 0x2, 0x17bd, 0x17bb, 0x3, 0x2, 0x2, 0x2, 0x17be, 0x17bf, 
       0x8, 0x130, 0x1, 0x2, 0x17bf, 0x17ed, 0x5, 0x21e, 0x110, 0x2, 0x17c0, 
       0x17ed, 0x5, 0x1f8, 0xfd, 0x2, 0x17c1, 0x17ed, 0x5, 0x246, 0x124, 
       0x2, 0x17c2, 0x17ed, 0x5, 0x1fe, 0x100, 0x2, 0x17c3, 0x17c4, 0x5, 
       0x260, 0x131, 0x2, 0x17c4, 0x17c5, 0x5, 0x25e, 0x130, 0xc, 0x17c5, 
       0x17ed, 0x3, 0x2, 0x2, 0x2, 0x17c6, 0x17c7, 0x7, 0xc3, 0x2, 0x2, 
       0x17c7, 0x17ed, 0x5, 0x25e, 0x130, 0xb, 0x17c8, 0x17c9, 0x7, 0x3c4, 
       0x2, 0x2, 0x17c9, 0x17ce, 0x5, 0x25a, 0x12e, 0x2, 0x17ca, 0x17cb, 
       0x7, 0x3c6, 0x2, 0x2, 0x17cb, 0x17cd, 0x5, 0x25a, 0x12e, 0x2, 0x17cc, 
       0x17ca, 0x3, 0x2, 0x2, 0x2, 0x17cd, 0x17d0, 0x3, 0x2, 0x2, 0x2, 0x17ce, 
       0x17cc, 0x3, 0x2, 0x2, 0x2, 0x17ce, 0x17cf, 0x3, 0x2, 0x2, 0x2, 0x17cf, 
       0x17d1, 0x3, 0x2, 0x2, 0x2, 0x17d0, 0x17ce, 0x3, 0x2, 0x2, 0x2, 0x17d1, 
       0x17d2, 0x7, 0x3c5, 0x2, 0x2, 0x17d2, 0x17ed, 0x3, 0x2, 0x2, 0x2, 
       0x17d3, 0x17d4, 0x7, 0x1e5, 0x2, 0x2, 0x17d4, 0x17d5, 0x7, 0x3c4, 
       0x2, 0x2, 0x17d5, 0x17d8, 0x5, 0x25a, 0x12e, 0x2, 0x17d6, 0x17d7, 
       0x7, 0x3c6, 0x2, 0x2, 0x17d7, 0x17d9, 0x5, 0x25a, 0x12e, 0x2, 0x17d8, 
       0x17d6, 0x3, 0x2, 0x2, 0x2, 0x17d9, 0x17da, 0x3, 0x2, 0x2, 0x2, 0x17da, 
       0x17d8, 0x3, 0x2, 0x2, 0x2, 0x17da, 0x17db, 0x3, 0x2, 0x2, 0x2, 0x17db, 
       0x17dc, 0x3, 0x2, 0x2, 0x2, 0x17dc, 0x17dd, 0x7, 0x3c5, 0x2, 0x2, 
       0x17dd, 0x17ed, 0x3, 0x2, 0x2, 0x2, 0x17de, 0x17df, 0x7, 0x35, 0x2, 
       0x2, 0x17df, 0x17e0, 0x7, 0x3c4, 0x2, 0x2, 0x17e0, 0x17e1, 0x5, 0xb4, 
       0x5b, 0x2, 0x17e1, 0x17e2, 0x7, 0x3c5, 0x2, 0x2, 0x17e2, 0x17ed, 
       0x3, 0x2, 0x2, 0x2, 0x17e3, 0x17e4, 0x7, 0x3c4, 0x2, 0x2, 0x17e4, 
       0x17e5, 0x5, 0xb4, 0x5b, 0x2, 0x17e5, 0x17e6, 0x7, 0x3c5, 0x2, 0x2, 
       0x17e6, 0x17ed, 0x3, 0x2, 0x2, 0x2, 0x17e7, 0x17e8, 0x7, 0x4c, 0x2, 
       0x2, 0x17e8, 0x17e9, 0x5, 0x25a, 0x12e, 0x2, 0x17e9, 0x17ea, 0x5, 
       0x3c, 0x1f, 0x2, 0x17ea, 0x17ed, 0x3, 0x2, 0x2, 0x2, 0x17eb, 0x17ed, 
       0x7, 0x3da, 0x2, 0x2, 0x17ec, 0x17be, 0x3, 0x2, 0x2, 0x2, 0x17ec, 
       0x17c0, 0x3, 0x2, 0x2, 0x2, 0x17ec, 0x17c1, 0x3, 0x2, 0x2, 0x2, 0x17ec, 
       0x17c2, 0x3, 0x2, 0x2, 0x2, 0x17ec, 0x17c3, 0x3, 0x2, 0x2, 0x2, 0x17ec, 
       0x17c6, 0x3, 0x2, 0x2, 0x2, 0x17ec, 0x17c8, 0x3, 0x2, 0x2, 0x2, 0x17ec, 
       0x17d3, 0x3, 0x2, 0x2, 0x2, 0x17ec, 0x17de, 0x3, 0x2, 0x2, 0x2, 0x17ec, 
       0x17e3, 0x3, 0x2, 0x2, 0x2, 0x17ec, 0x17e7, 0x3, 0x2, 0x2, 0x2, 0x17ec, 
       0x17eb, 0x3, 0x2, 0x2, 0x2, 0x17ed, 0x17fb, 0x3, 0x2, 0x2, 0x2, 0x17ee, 
       0x17ef, 0xc, 0x5, 0x2, 0x2, 0x17ef, 0x17f0, 0x5, 0x266, 0x134, 0x2, 
       0x17f0, 0x17f1, 0x5, 0x25e, 0x130, 0x6, 0x17f1, 0x17fa, 0x3, 0x2, 
       0x2, 0x2, 0x17f2, 0x17f3, 0xc, 0x4, 0x2, 0x2, 0x17f3, 0x17f4, 0x5, 
       0x268, 0x135, 0x2, 0x17f4, 0x17f5, 0x5, 0x25e, 0x130, 0x5, 0x17f5, 
       0x17fa, 0x3, 0x2, 0x2, 0x2, 0x17f6, 0x17f7, 0xc, 0xe, 0x2, 0x2, 0x17f7, 
       0x17f8, 0x7, 0x1a, 0x2, 0x2, 0x17f8, 0x17fa, 0x5, 0x202, 0x102, 0x2, 
       0x17f9, 0x17ee, 0x3, 0x2, 0x2, 0x2, 0x17f9, 0x17f2, 0x3, 0x2, 0x2, 
       0x2, 0x17f9, 0x17f6, 0x3, 0x2, 0x2, 0x2, 0x17fa, 0x17fd, 0x3, 0x2, 
       0x2, 0x2, 0x17fb, 0x17f9, 0x3, 0x2, 0x2, 0x2, 0x17fb, 0x17fc, 0x3, 
       0x2, 0x2, 0x2, 0x17fc, 0x25f, 0x3, 0x2, 0x2, 0x2, 0x17fd, 0x17fb, 
       0x3, 0x2, 0x2, 0x2, 0x17fe, 0x17ff, 0x9, 0x71, 0x2, 0x2, 0x17ff, 
       0x261, 0x3, 0x2, 0x2, 0x2, 0x1800, 0x180f, 0x7, 0x3bb, 0x2, 0x2, 
       0x1801, 0x180f, 0x7, 0x3bc, 0x2, 0x2, 0x1802, 0x180f, 0x7, 0x3bd, 
       0x2, 0x2, 0x1803, 0x1804, 0x7, 0x3bd, 0x2, 0x2, 0x1804, 0x180f, 0x7, 
       0x3bb, 0x2, 0x2, 0x1805, 0x1806, 0x7, 0x3bc, 0x2, 0x2, 0x1806, 0x180f, 
       0x7, 0x3bb, 0x2, 0x2, 0x1807, 0x1808, 0x7, 0x3bd, 0x2, 0x2, 0x1808, 
       0x180f, 0x7, 0x3bc, 0x2, 0x2, 0x1809, 0x180a, 0x7, 0x3be, 0x2, 0x2, 
       0x180a, 0x180f, 0x7, 0x3bb, 0x2, 0x2, 0x180b, 0x180c, 0x7, 0x3bd, 
       0x2, 0x2, 0x180c, 0x180d, 0x7, 0x3bb, 0x2, 0x2, 0x180d, 0x180f, 0x7, 
       0x3bc, 0x2, 0x2, 0x180e, 0x1800, 0x3, 0x2, 0x2, 0x2, 0x180e, 0x1801, 
       0x3, 0x2, 0x2, 0x2, 0x180e, 0x1802, 0x3, 0x2, 0x2, 0x2, 0x180e, 0x1803, 
       0x3, 0x2, 0x2, 0x2, 0x180e, 0x1805, 0x3, 0x2, 0x2, 0x2, 0x180e, 0x1807, 
       0x3, 0x2, 0x2, 0x2, 0x180e, 0x1809, 0x3, 0x2, 0x2, 0x2, 0x180e, 0x180b, 
       0x3, 0x2, 0x2, 0x2, 0x180f, 0x263, 0x3, 0x2, 0x2, 0x2, 0x1810, 0x1818, 
       0x7, 0xc, 0x2, 0x2, 0x1811, 0x1812, 0x7, 0x3c1, 0x2, 0x2, 0x1812, 
       0x1818, 0x7, 0x3c1, 0x2, 0x2, 0x1813, 0x1818, 0x7, 0xab, 0x2, 0x2, 
       0x1814, 0x1818, 0x7, 0x6c, 0x2, 0x2, 0x1815, 0x1816, 0x7, 0x3c0, 
       0x2, 0x2, 0x1816, 0x1818, 0x7, 0x3c0, 0x2, 0x2, 0x1817, 0x1810, 0x3, 
       0x2, 0x2, 0x2, 0x1817, 0x1811, 0x3, 0x2, 0x2, 0x2, 0x1817, 0x1813, 
       0x3, 0x2, 0x2, 0x2, 0x1817, 0x1814, 0x3, 0x2, 0x2, 0x2, 0x1817, 0x1815, 
       0x3, 0x2, 0x2, 0x2, 0x1818, 0x265, 0x3, 0x2, 0x2, 0x2, 0x1819, 0x181a, 
       0x7, 0x3bd, 0x2, 0x2, 0x181a, 0x1821, 0x7, 0x3bd, 0x2, 0x2, 0x181b, 
       0x181c, 0x7, 0x3bc, 0x2, 0x2, 0x181c, 0x1821, 0x7, 0x3bc, 0x2, 0x2, 
       0x181d, 0x1821, 0x7, 0x3c1, 0x2, 0x2, 0x181e, 0x1821, 0x7, 0x3c2, 
       0x2, 0x2, 0x181f, 0x1821, 0x7, 0x3c0, 0x2, 0x2, 0x1820, 0x1819, 0x3, 
       0x2, 0x2, 0x2, 0x1820, 0x181b, 0x3, 0x2, 0x2, 0x2, 0x1820, 0x181d, 
       0x3, 0x2, 0x2, 0x2, 0x1820, 0x181e, 0x3, 0x2, 0x2, 0x2, 0x1820, 0x181f, 
       0x3, 0x2, 0x2, 0x2, 0x1821, 0x267, 0x3, 0x2, 0x2, 0x2, 0x1822, 0x1823, 
       0x9, 0x72, 0x2, 0x2, 0x1823, 0x269, 0x3, 0x2, 0x2, 0x2, 0x1824, 0x1825, 
       0x9, 0x73, 0x2, 0x2, 0x1825, 0x26b, 0x3, 0x2, 0x2, 0x2, 0x1826, 0x1827, 
       0x9, 0x74, 0x2, 0x2, 0x1827, 0x26d, 0x3, 0x2, 0x2, 0x2, 0x1828, 0x1829, 
       0x9, 0x75, 0x2, 0x2, 0x1829, 0x26f, 0x3, 0x2, 0x2, 0x2, 0x182a, 0x182b, 
       0x9, 0x76, 0x2, 0x2, 0x182b, 0x271, 0x3, 0x2, 0x2, 0x2, 0x182c, 0x182d, 
       0x9, 0x77, 0x2, 0x2, 0x182d, 0x273, 0x3, 0x2, 0x2, 0x2, 0x182e, 0x182f, 
       0x9, 0x78, 0x2, 0x2, 0x182f, 0x275, 0x3, 0x2, 0x2, 0x2, 0x1830, 0x1831, 
       0x9, 0x79, 0x2, 0x2, 0x1831, 0x277, 0x3, 0x2, 0x2, 0x2, 0x385, 0x279, 
       0x27c, 0x282, 0x285, 0x288, 0x28a, 0x28f, 0x292, 0x295, 0x29e, 0x2c5, 
       0x2d1, 0x2dc, 0x2ed, 0x2f2, 0x2fe, 0x319, 0x31f, 0x324, 0x32a, 0x32f, 
       0x333, 0x33c, 0x33f, 0x342, 0x346, 0x34d, 0x350, 0x355, 0x35d, 0x362, 
       0x367, 0x36a, 0x36c, 0x378, 0x37b, 0x37f, 0x382, 0x386, 0x389, 0x38d, 
       0x390, 0x393, 0x397, 0x39a, 0x39e, 0x3a4, 0x3aa, 0x3b0, 0x3b7, 0x3be, 
       0x3c4, 0x3ca, 0x3d3, 0x3e6, 0x3ed, 0x3f1, 0x3fb, 0x3ff, 0x403, 0x407, 
       0x40b, 0x410, 0x413, 0x416, 0x419, 0x41c, 0x422, 0x426, 0x42c, 0x431, 
       0x434, 0x437, 0x439, 0x444, 0x448, 0x44b, 0x459, 0x45c, 0x460, 0x463, 
       0x467, 0x46a, 0x46e, 0x471, 0x475, 0x478, 0x47b, 0x47f, 0x482, 0x486, 
       0x48c, 0x499, 0x4a0, 0x4a5, 0x4a8, 0x4ad, 0x4b5, 0x4bb, 0x4bf, 0x4c2, 
       0x4c7, 0x4ca, 0x4ce, 0x4d1, 0x4d5, 0x4d8, 0x4e0, 0x4e2, 0x4e9, 0x4ef, 
       0x4f7, 0x4fa, 0x501, 0x504, 0x506, 0x50c, 0x512, 0x523, 0x52a, 0x531, 
       0x53c, 0x53f, 0x54c, 0x559, 0x55e, 0x56e, 0x576, 0x580, 0x586, 0x590, 
       0x593, 0x598, 0x5a5, 0x5ac, 0x5b1, 0x5b5, 0x5b7, 0x5bc, 0x5bf, 0x5c5, 
       0x5ca, 0x5cc, 0x5d0, 0x5d3, 0x5d6, 0x5dc, 0x5e1, 0x5e3, 0x5e8, 0x5ef, 
       0x5f1, 0x5f8, 0x5fd, 0x601, 0x604, 0x60c, 0x614, 0x616, 0x61e, 0x622, 
       0x625, 0x62b, 0x630, 0x633, 0x639, 0x63c, 0x640, 0x645, 0x64a, 0x64e, 
       0x653, 0x656, 0x65a, 0x65e, 0x662, 0x666, 0x66b, 0x670, 0x675, 0x67b, 
       0x680, 0x685, 0x68b, 0x690, 0x695, 0x69a, 0x69f, 0x6a4, 0x6a9, 0x6ae, 
       0x6b3, 0x6b8, 0x6bd, 0x6c3, 0x6c8, 0x6ce, 0x6d8, 0x6df, 0x6e1, 0x6e9, 
       0x6ee, 0x6f1, 0x6f9, 0x6ff, 0x70f, 0x71b, 0x71d, 0x720, 0x728, 0x72e, 
       0x734, 0x741, 0x748, 0x750, 0x753, 0x75e, 0x766, 0x769, 0x775, 0x77c, 
       0x784, 0x787, 0x793, 0x79a, 0x7a2, 0x7a5, 0x7ac, 0x7b4, 0x7b7, 0x7b9, 
       0x7be, 0x7c6, 0x7cf, 0x7d3, 0x7d7, 0x7dc, 0x7e2, 0x7e8, 0x7ed, 0x7f2, 
       0x7f7, 0x7fc, 0x7ff, 0x804, 0x809, 0x813, 0x817, 0x81e, 0x823, 0x826, 
       0x82b, 0x82e, 0x832, 0x836, 0x83e, 0x851, 0x854, 0x857, 0x85b, 0x865, 
       0x872, 0x879, 0x87c, 0x885, 0x888, 0x88b, 0x896, 0x899, 0x89d, 0x8a5, 
       0x8a8, 0x8ad, 0x8b5, 0x8bb, 0x8bf, 0x8c3, 0x8c8, 0x8cd, 0x8d4, 0x8d8, 
       0x8e3, 0x8eb, 0x8ee, 0x8f4, 0x8fa, 0x8fc, 0x901, 0x907, 0x90d, 0x90f, 
       0x913, 0x916, 0x919, 0x91f, 0x925, 0x928, 0x92e, 0x934, 0x936, 0x93b, 
       0x943, 0x945, 0x94e, 0x953, 0x95b, 0x95f, 0x967, 0x971, 0x976, 0x97d, 
       0x981, 0x985, 0x99d, 0x9a1, 0x9ad, 0x9b0, 0x9b9, 0x9ca, 0x9d6, 0x9dd, 
       0x9e4, 0x9f3, 0xa00, 0xa06, 0xa0c, 0xa12, 0xa18, 0xa1e, 0xa24, 0xa29, 
       0xa30, 0xa37, 0xa3e, 0xa43, 0xa46, 0xa48, 0xa56, 0xa5d, 0xa64, 0xa6a, 
       0xa6e, 0xa72, 0xa79, 0xa7c, 0xa81, 0xa88, 0xa8f, 0xa93, 0xa9c, 0xaa5, 
       0xaae, 0xab1, 0xab5, 0xabe, 0xac2, 0xac5, 0xac8, 0xad0, 0xad6, 0xadf, 
       0xae2, 0xaed, 0xaf0, 0xaf5, 0xaf8, 0xafd, 0xb07, 0xb0c, 0xb12, 0xb14, 
       0xb1a, 0xb1c, 0xb22, 0xb2a, 0xb2f, 0xb37, 0xb3a, 0xb3f, 0xb42, 0xb47, 
       0xb4f, 0xb57, 0xb5d, 0xb65, 0xb6a, 0xb72, 0xb75, 0xb79, 0xb7c, 0xb84, 
       0xb8a, 0xb93, 0xb96, 0xb9a, 0xb9e, 0xba4, 0xba8, 0xbac, 0xbae, 0xbb1, 
       0xbb4, 0xbb7, 0xbbd, 0xbc1, 0xbc4, 0xbc7, 0xbca, 0xbcd, 0xbcf, 0xbd3, 
       0xbe1, 0xbe4, 0xbec, 0xbf4, 0xbf8, 0xbfb, 0xbfe, 0xc03, 0xc06, 0xc0d, 
       0xc10, 0xc13, 0xc17, 0xc1b, 0xc1e, 0xc21, 0xc28, 0xc34, 0xc3a, 0xc3d, 
       0xc42, 0xc48, 0xc4b, 0xc57, 0xc5a, 0xc5e, 0xc65, 0xc69, 0xc71, 0xc74, 
       0xc78, 0xc7b, 0xc83, 0xc87, 0xc8a, 0xc8d, 0xc91, 0xc94, 0xc9d, 0xca1, 
       0xcaa, 0xcaf, 0xcb6, 0xcbd, 0xcc5, 0xcca, 0xcd2, 0xcd5, 0xcd8, 0xcdf, 
       0xce2, 0xce9, 0xcec, 0xcf4, 0xcfa, 0xd05, 0xd08, 0xd0e, 0xd13, 0xd17, 
       0xd1d, 0xd22, 0xd24, 0xd28, 0xd3a, 0xd44, 0xd4a, 0xd4f, 0xd52, 0xd55, 
       0xd58, 0xd5b, 0xd5e, 0xd61, 0xd67, 0xd6c, 0xd6f, 0xd72, 0xd75, 0xd78, 
       0xd7b, 0xd7e, 0xd80, 0xd86, 0xd8b, 0xd8e, 0xd91, 0xd94, 0xd97, 0xd9a, 
       0xd9e, 0xda4, 0xda8, 0xdb2, 0xdb6, 0xdbc, 0xdc5, 0xdc8, 0xdcc, 0xdcf, 
       0xdd3, 0xdd7, 0xdda, 0xddc, 0xde4, 0xdf0, 0xdf6, 0xdf8, 0xdfe, 0xe00, 
       0xe02, 0xe08, 0xe10, 0xe18, 0xe27, 0xe2c, 0xe33, 0xe39, 0xe40, 0xe45, 
       0xe4e, 0xe51, 0xe55, 0xe59, 0xe5d, 0xe60, 0xe63, 0xe66, 0xe6a, 0xe6e, 
       0xe71, 0xe74, 0xe77, 0xe7e, 0xe82, 0xe91, 0xe9e, 0xea6, 0xeb0, 0xeb4, 
       0xeb7, 0xebd, 0xec0, 0xec3, 0xecc, 0xed5, 0xedf, 0xee3, 0xeed, 0xef7, 
       0xeff, 0xf02, 0xf0b, 0xf0e, 0xf12, 0xf17, 0xf1b, 0xf24, 0xf27, 0xf46, 
       0xf49, 0xf4c, 0xf84, 0xf89, 0xfa5, 0xfb3, 0xfba, 0xfbe, 0xfc4, 0xfcc, 
       0xfce, 0xfd9, 0xfe3, 0xfea, 0xff0, 0xff8, 0xffd, 0x1005, 0x100d, 
       0x1015, 0x101d, 0x1023, 0x1028, 0x102d, 0x1032, 0x1038, 0x103a, 0x1045, 
       0x104a, 0x1051, 0x1053, 0x1061, 0x1067, 0x106c, 0x1071, 0x1077, 0x107e, 
       0x1086, 0x108e, 0x1093, 0x1099, 0x109c, 0x10a4, 0x10ab, 0x10b4, 0x10b7, 
       0x10c8, 0x10d0, 0x10d8, 0x10dc, 0x10e3, 0x10e9, 0x10f1, 0x10fa, 0x1100, 
       0x1107, 0x110e, 0x1113, 0x1116, 0x1118, 0x111e, 0x1120, 0x1124, 0x1126, 
       0x1129, 0x1132, 0x1138, 0x113f, 0x1146, 0x114b, 0x114e, 0x1150, 0x1156, 
       0x1158, 0x115c, 0x115e, 0x1161, 0x1166, 0x116d, 0x1176, 0x117b, 0x1184, 
       0x118b, 0x1190, 0x1193, 0x1195, 0x119b, 0x119d, 0x11a0, 0x11ac, 0x11b2, 
       0x11bb, 0x11c4, 0x11c9, 0x11d2, 0x11d8, 0x11e3, 0x11e6, 0x11f2, 0x11f9, 
       0x11fe, 0x120d, 0x1218, 0x121b, 0x1225, 0x122f, 0x1239, 0x1243, 0x1247, 
       0x124b, 0x1254, 0x1270, 0x127f, 0x1287, 0x1292, 0x1299, 0x129d, 0x12a4, 
       0x12a9, 0x12ac, 0x12af, 0x12b8, 0x12bc, 0x12da, 0x12e1, 0x12e5, 0x12ec, 
       0x12ef, 0x12f9, 0x1303, 0x1307, 0x130d, 0x1310, 0x1315, 0x1319, 0x1320, 
       0x1323, 0x1329, 0x1341, 0x134e, 0x1351, 0x135b, 0x1363, 0x1366, 0x136d, 
       0x1370, 0x1379, 0x137f, 0x1385, 0x138f, 0x1391, 0x1397, 0x139a, 0x139d, 
       0x13a9, 0x13ac, 0x13b1, 0x13b4, 0x13bc, 0x13c4, 0x13ca, 0x13ce, 0x13dc, 
       0x13e8, 0x13ef, 0x13f2, 0x13f9, 0x1400, 0x1405, 0x140a, 0x1415, 0x1420, 
       0x1426, 0x142b, 0x1438, 0x143a, 0x143f, 0x1444, 0x1446, 0x144d, 0x1454, 
       0x1457, 0x145a, 0x1460, 0x1464, 0x146a, 0x1470, 0x147f, 0x1484, 0x148b, 
       0x1494, 0x149a, 0x149d, 0x14a7, 0x14ab, 0x14bf, 0x14c6, 0x14c8, 0x14cf, 
       0x14d1, 0x14d5, 0x14da, 0x14e5, 0x14eb, 0x14ee, 0x14f2, 0x14f7, 0x14fa, 
       0x14fe, 0x1502, 0x1504, 0x1509, 0x150e, 0x1519, 0x151c, 0x1520, 0x1523, 
       0x1528, 0x152b, 0x152f, 0x1534, 0x1537, 0x153c, 0x153f, 0x1545, 0x1548, 
       0x154c, 0x154f, 0x1552, 0x1556, 0x1559, 0x155c, 0x1560, 0x1563, 0x1566, 
       0x1569, 0x156d, 0x1570, 0x1573, 0x1578, 0x157d, 0x1582, 0x1585, 0x1588, 
       0x1590, 0x1597, 0x159b, 0x15a0, 0x15a3, 0x15a8, 0x15ac, 0x15ae, 0x15be, 
       0x15c7, 0x15cf, 0x15d8, 0x15e2, 0x15ea, 0x15f2, 0x15fa, 0x1602, 0x1607, 
       0x160e, 0x1610, 0x1615, 0x1618, 0x161d, 0x1620, 0x1624, 0x1632, 0x1639, 
       0x163e, 0x1660, 0x1664, 0x166c, 0x1670, 0x1679, 0x1681, 0x1686, 0x168e, 
       0x1693, 0x1698, 0x169a, 0x16a3, 0x16a8, 0x16b0, 0x16b5, 0x16bd, 0x16c5, 
       0x16c8, 0x16d2, 0x16dd, 0x16ea, 0x16f2, 0x16f6, 0x16fb, 0x1704, 0x1707, 
       0x1713, 0x171b, 0x1725, 0x1728, 0x172c, 0x1730, 0x1749, 0x1754, 0x175b, 
       0x175f, 0x1766, 0x176e, 0x1773, 0x177b, 0x1781, 0x1795, 0x179b, 0x17a1, 
       0x17b1, 0x17b7, 0x17b9, 0x17bb, 0x17ce, 0x17da, 0x17ec, 0x17f9, 0x17fb, 
       0x180e, 0x1817, 0x1820, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment2,
    serializedATNSegment2 + sizeof(serializedATNSegment2) / sizeof(serializedATNSegment2[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

MySQLParser::Initializer MySQLParser::_init;
