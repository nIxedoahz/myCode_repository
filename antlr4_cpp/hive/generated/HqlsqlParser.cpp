
// Generated from /home/jona/myGit/myCode_repository/antlr4_cpp/hive/HqlsqlParser.g4 by ANTLR 4.7.1


#include "HqlsqlParserListener.h"
#include "HqlsqlParserVisitor.h"

#include "HqlsqlParser.h"


#include <strings.h>


using namespace antlrcpp;
using namespace antlr4;

HqlsqlParser::HqlsqlParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

HqlsqlParser::~HqlsqlParser() {
  delete _interpreter;
}

std::string HqlsqlParser::getGrammarFileName() const {
  return "HqlsqlParser.g4";
}

const std::vector<std::string>& HqlsqlParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& HqlsqlParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- ProgramContext ------------------------------------------------------------------

HqlsqlParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::BlockContext* HqlsqlParser::ProgramContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

tree::TerminalNode* HqlsqlParser::ProgramContext::EOF() {
  return getToken(HqlsqlParser::EOF, 0);
}


size_t HqlsqlParser::ProgramContext::getRuleIndex() const {
  return HqlsqlParser::RuleProgram;
}

void HqlsqlParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void HqlsqlParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


antlrcpp::Any HqlsqlParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::ProgramContext* HqlsqlParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, HqlsqlParser::RuleProgram);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(660);
    block();
    setState(661);
    match(HqlsqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

HqlsqlParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Block_contentContext *> HqlsqlParser::BlockContext::block_content() {
  return getRuleContexts<HqlsqlParser::Block_contentContext>();
}

HqlsqlParser::Block_contentContext* HqlsqlParser::BlockContext::block_content(size_t i) {
  return getRuleContext<HqlsqlParser::Block_contentContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::BlockContext::T_GO() {
  return getTokens(HqlsqlParser::T_GO);
}

tree::TerminalNode* HqlsqlParser::BlockContext::T_GO(size_t i) {
  return getToken(HqlsqlParser::T_GO, i);
}


size_t HqlsqlParser::BlockContext::getRuleIndex() const {
  return HqlsqlParser::RuleBlock;
}

void HqlsqlParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void HqlsqlParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}


antlrcpp::Any HqlsqlParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::BlockContext* HqlsqlParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 2, HqlsqlParser::RuleBlock);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(667); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(663);
              block_content();
              setState(665);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
              case 1: {
                setState(664);
                match(HqlsqlParser::T_GO);
                break;
              }

              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(669); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_contentContext ------------------------------------------------------------------

HqlsqlParser::Block_contentContext::Block_contentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Begin_end_blockContext* HqlsqlParser::Block_contentContext::begin_end_block() {
  return getRuleContext<HqlsqlParser::Begin_end_blockContext>(0);
}

HqlsqlParser::StmtContext* HqlsqlParser::Block_contentContext::stmt() {
  return getRuleContext<HqlsqlParser::StmtContext>(0);
}


size_t HqlsqlParser::Block_contentContext::getRuleIndex() const {
  return HqlsqlParser::RuleBlock_content;
}

void HqlsqlParser::Block_contentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_content(this);
}

void HqlsqlParser::Block_contentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_content(this);
}


antlrcpp::Any HqlsqlParser::Block_contentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_content(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Block_contentContext* HqlsqlParser::block_content() {
  Block_contentContext *_localctx = _tracker.createInstance<Block_contentContext>(_ctx, getState());
  enterRule(_localctx, 4, HqlsqlParser::RuleBlock_content);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(673);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(671);
      begin_end_block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(672);
      stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Begin_end_blockContext ------------------------------------------------------------------

HqlsqlParser::Begin_end_blockContext::Begin_end_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Begin_end_blockContext::T_BEGIN() {
  return getToken(HqlsqlParser::T_BEGIN, 0);
}

HqlsqlParser::BlockContext* HqlsqlParser::Begin_end_blockContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

HqlsqlParser::Block_endContext* HqlsqlParser::Begin_end_blockContext::block_end() {
  return getRuleContext<HqlsqlParser::Block_endContext>(0);
}

HqlsqlParser::Declare_blockContext* HqlsqlParser::Begin_end_blockContext::declare_block() {
  return getRuleContext<HqlsqlParser::Declare_blockContext>(0);
}

HqlsqlParser::Exception_blockContext* HqlsqlParser::Begin_end_blockContext::exception_block() {
  return getRuleContext<HqlsqlParser::Exception_blockContext>(0);
}


size_t HqlsqlParser::Begin_end_blockContext::getRuleIndex() const {
  return HqlsqlParser::RuleBegin_end_block;
}

void HqlsqlParser::Begin_end_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBegin_end_block(this);
}

void HqlsqlParser::Begin_end_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBegin_end_block(this);
}


antlrcpp::Any HqlsqlParser::Begin_end_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBegin_end_block(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Begin_end_blockContext* HqlsqlParser::begin_end_block() {
  Begin_end_blockContext *_localctx = _tracker.createInstance<Begin_end_blockContext>(_ctx, getState());
  enterRule(_localctx, 6, HqlsqlParser::RuleBegin_end_block);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(676);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_DECLARE) {
      setState(675);
      declare_block();
    }
    setState(678);
    match(HqlsqlParser::T_BEGIN);
    setState(679);
    block();
    setState(681);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(680);
      exception_block();
      break;
    }

    }
    setState(683);
    block_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_block_stmtContext ------------------------------------------------------------------

HqlsqlParser::Single_block_stmtContext::Single_block_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Single_block_stmtContext::T_BEGIN() {
  return getToken(HqlsqlParser::T_BEGIN, 0);
}

HqlsqlParser::BlockContext* HqlsqlParser::Single_block_stmtContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

HqlsqlParser::Block_endContext* HqlsqlParser::Single_block_stmtContext::block_end() {
  return getRuleContext<HqlsqlParser::Block_endContext>(0);
}

HqlsqlParser::Exception_blockContext* HqlsqlParser::Single_block_stmtContext::exception_block() {
  return getRuleContext<HqlsqlParser::Exception_blockContext>(0);
}

HqlsqlParser::StmtContext* HqlsqlParser::Single_block_stmtContext::stmt() {
  return getRuleContext<HqlsqlParser::StmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Single_block_stmtContext::T_SEMICOLON() {
  return getToken(HqlsqlParser::T_SEMICOLON, 0);
}


size_t HqlsqlParser::Single_block_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleSingle_block_stmt;
}

void HqlsqlParser::Single_block_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_block_stmt(this);
}

void HqlsqlParser::Single_block_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_block_stmt(this);
}


antlrcpp::Any HqlsqlParser::Single_block_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSingle_block_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Single_block_stmtContext* HqlsqlParser::single_block_stmt() {
  Single_block_stmtContext *_localctx = _tracker.createInstance<Single_block_stmtContext>(_ctx, getState());
  enterRule(_localctx, 8, HqlsqlParser::RuleSingle_block_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(696);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(685);
      match(HqlsqlParser::T_BEGIN);
      setState(686);
      block();
      setState(688);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
      case 1: {
        setState(687);
        exception_block();
        break;
      }

      }
      setState(690);
      block_end();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(692);
      stmt();
      setState(694);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
      case 1: {
        setState(693);
        match(HqlsqlParser::T_SEMICOLON);
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_endContext ------------------------------------------------------------------

HqlsqlParser::Block_endContext::Block_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Block_endContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}


size_t HqlsqlParser::Block_endContext::getRuleIndex() const {
  return HqlsqlParser::RuleBlock_end;
}

void HqlsqlParser::Block_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_end(this);
}

void HqlsqlParser::Block_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_end(this);
}


antlrcpp::Any HqlsqlParser::Block_endContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_end(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Block_endContext* HqlsqlParser::block_end() {
  Block_endContext *_localctx = _tracker.createInstance<Block_endContext>(_ctx, getState());
  enterRule(_localctx, 10, HqlsqlParser::RuleBlock_end);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698);

    if (!(!(strcasecmp(_input->LT(2)->getText().c_str(), "TRANSACTION") == 0))) throw FailedPredicateException(this, "!(strcasecmp(_input->LT(2)->getText().c_str(), \"TRANSACTION\") == 0)");
    setState(699);
    match(HqlsqlParser::T_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Proc_blockContext ------------------------------------------------------------------

HqlsqlParser::Proc_blockContext::Proc_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Begin_end_blockContext* HqlsqlParser::Proc_blockContext::begin_end_block() {
  return getRuleContext<HqlsqlParser::Begin_end_blockContext>(0);
}

std::vector<HqlsqlParser::StmtContext *> HqlsqlParser::Proc_blockContext::stmt() {
  return getRuleContexts<HqlsqlParser::StmtContext>();
}

HqlsqlParser::StmtContext* HqlsqlParser::Proc_blockContext::stmt(size_t i) {
  return getRuleContext<HqlsqlParser::StmtContext>(i);
}

tree::TerminalNode* HqlsqlParser::Proc_blockContext::T_GO() {
  return getToken(HqlsqlParser::T_GO, 0);
}


size_t HqlsqlParser::Proc_blockContext::getRuleIndex() const {
  return HqlsqlParser::RuleProc_block;
}

void HqlsqlParser::Proc_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProc_block(this);
}

void HqlsqlParser::Proc_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProc_block(this);
}


antlrcpp::Any HqlsqlParser::Proc_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitProc_block(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Proc_blockContext* HqlsqlParser::proc_block() {
  Proc_blockContext *_localctx = _tracker.createInstance<Proc_blockContext>(_ctx, getState());
  enterRule(_localctx, 12, HqlsqlParser::RuleProc_block);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(710);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(701);
      begin_end_block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(703); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(702);
                stmt();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(705); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(708);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
      case 1: {
        setState(707);
        match(HqlsqlParser::T_GO);
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

HqlsqlParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Alter_stmtContext* HqlsqlParser::StmtContext::alter_stmt() {
  return getRuleContext<HqlsqlParser::Alter_stmtContext>(0);
}

HqlsqlParser::Allocate_cursor_stmtContext* HqlsqlParser::StmtContext::allocate_cursor_stmt() {
  return getRuleContext<HqlsqlParser::Allocate_cursor_stmtContext>(0);
}

HqlsqlParser::Associate_locator_stmtContext* HqlsqlParser::StmtContext::associate_locator_stmt() {
  return getRuleContext<HqlsqlParser::Associate_locator_stmtContext>(0);
}

HqlsqlParser::Begin_transaction_stmtContext* HqlsqlParser::StmtContext::begin_transaction_stmt() {
  return getRuleContext<HqlsqlParser::Begin_transaction_stmtContext>(0);
}

HqlsqlParser::Abort_transactions_stmtContext* HqlsqlParser::StmtContext::abort_transactions_stmt() {
  return getRuleContext<HqlsqlParser::Abort_transactions_stmtContext>(0);
}

HqlsqlParser::Break_stmtContext* HqlsqlParser::StmtContext::break_stmt() {
  return getRuleContext<HqlsqlParser::Break_stmtContext>(0);
}

HqlsqlParser::Call_stmtContext* HqlsqlParser::StmtContext::call_stmt() {
  return getRuleContext<HqlsqlParser::Call_stmtContext>(0);
}

HqlsqlParser::Collect_stats_stmtContext* HqlsqlParser::StmtContext::collect_stats_stmt() {
  return getRuleContext<HqlsqlParser::Collect_stats_stmtContext>(0);
}

HqlsqlParser::Close_stmtContext* HqlsqlParser::StmtContext::close_stmt() {
  return getRuleContext<HqlsqlParser::Close_stmtContext>(0);
}

HqlsqlParser::Cmp_stmtContext* HqlsqlParser::StmtContext::cmp_stmt() {
  return getRuleContext<HqlsqlParser::Cmp_stmtContext>(0);
}

HqlsqlParser::Copy_from_local_stmtContext* HqlsqlParser::StmtContext::copy_from_local_stmt() {
  return getRuleContext<HqlsqlParser::Copy_from_local_stmtContext>(0);
}

HqlsqlParser::Copy_stmtContext* HqlsqlParser::StmtContext::copy_stmt() {
  return getRuleContext<HqlsqlParser::Copy_stmtContext>(0);
}

HqlsqlParser::Commit_stmtContext* HqlsqlParser::StmtContext::commit_stmt() {
  return getRuleContext<HqlsqlParser::Commit_stmtContext>(0);
}

HqlsqlParser::Create_database_stmtContext* HqlsqlParser::StmtContext::create_database_stmt() {
  return getRuleContext<HqlsqlParser::Create_database_stmtContext>(0);
}

HqlsqlParser::Create_function_stmtContext* HqlsqlParser::StmtContext::create_function_stmt() {
  return getRuleContext<HqlsqlParser::Create_function_stmtContext>(0);
}

HqlsqlParser::Create_index_stmtContext* HqlsqlParser::StmtContext::create_index_stmt() {
  return getRuleContext<HqlsqlParser::Create_index_stmtContext>(0);
}

HqlsqlParser::Create_local_temp_table_stmtContext* HqlsqlParser::StmtContext::create_local_temp_table_stmt() {
  return getRuleContext<HqlsqlParser::Create_local_temp_table_stmtContext>(0);
}

HqlsqlParser::Create_package_stmtContext* HqlsqlParser::StmtContext::create_package_stmt() {
  return getRuleContext<HqlsqlParser::Create_package_stmtContext>(0);
}

HqlsqlParser::Create_package_body_stmtContext* HqlsqlParser::StmtContext::create_package_body_stmt() {
  return getRuleContext<HqlsqlParser::Create_package_body_stmtContext>(0);
}

HqlsqlParser::Create_procedure_stmtContext* HqlsqlParser::StmtContext::create_procedure_stmt() {
  return getRuleContext<HqlsqlParser::Create_procedure_stmtContext>(0);
}

HqlsqlParser::Create_table_stmtContext* HqlsqlParser::StmtContext::create_table_stmt() {
  return getRuleContext<HqlsqlParser::Create_table_stmtContext>(0);
}

HqlsqlParser::Declare_stmtContext* HqlsqlParser::StmtContext::declare_stmt() {
  return getRuleContext<HqlsqlParser::Declare_stmtContext>(0);
}

HqlsqlParser::Drop_stmtContext* HqlsqlParser::StmtContext::drop_stmt() {
  return getRuleContext<HqlsqlParser::Drop_stmtContext>(0);
}

HqlsqlParser::End_transaction_stmtContext* HqlsqlParser::StmtContext::end_transaction_stmt() {
  return getRuleContext<HqlsqlParser::End_transaction_stmtContext>(0);
}

HqlsqlParser::Exec_stmtContext* HqlsqlParser::StmtContext::exec_stmt() {
  return getRuleContext<HqlsqlParser::Exec_stmtContext>(0);
}

HqlsqlParser::Exit_stmtContext* HqlsqlParser::StmtContext::exit_stmt() {
  return getRuleContext<HqlsqlParser::Exit_stmtContext>(0);
}

HqlsqlParser::Fetch_stmtContext* HqlsqlParser::StmtContext::fetch_stmt() {
  return getRuleContext<HqlsqlParser::Fetch_stmtContext>(0);
}

HqlsqlParser::For_cursor_stmtContext* HqlsqlParser::StmtContext::for_cursor_stmt() {
  return getRuleContext<HqlsqlParser::For_cursor_stmtContext>(0);
}

HqlsqlParser::For_range_stmtContext* HqlsqlParser::StmtContext::for_range_stmt() {
  return getRuleContext<HqlsqlParser::For_range_stmtContext>(0);
}

HqlsqlParser::If_stmtContext* HqlsqlParser::StmtContext::if_stmt() {
  return getRuleContext<HqlsqlParser::If_stmtContext>(0);
}

HqlsqlParser::Include_stmtContext* HqlsqlParser::StmtContext::include_stmt() {
  return getRuleContext<HqlsqlParser::Include_stmtContext>(0);
}

HqlsqlParser::Get_diag_stmtContext* HqlsqlParser::StmtContext::get_diag_stmt() {
  return getRuleContext<HqlsqlParser::Get_diag_stmtContext>(0);
}

HqlsqlParser::Leave_stmtContext* HqlsqlParser::StmtContext::leave_stmt() {
  return getRuleContext<HqlsqlParser::Leave_stmtContext>(0);
}

HqlsqlParser::Map_object_stmtContext* HqlsqlParser::StmtContext::map_object_stmt() {
  return getRuleContext<HqlsqlParser::Map_object_stmtContext>(0);
}

HqlsqlParser::Open_stmtContext* HqlsqlParser::StmtContext::open_stmt() {
  return getRuleContext<HqlsqlParser::Open_stmtContext>(0);
}

HqlsqlParser::Print_stmtContext* HqlsqlParser::StmtContext::print_stmt() {
  return getRuleContext<HqlsqlParser::Print_stmtContext>(0);
}

HqlsqlParser::Quit_stmtContext* HqlsqlParser::StmtContext::quit_stmt() {
  return getRuleContext<HqlsqlParser::Quit_stmtContext>(0);
}

HqlsqlParser::Raise_stmtContext* HqlsqlParser::StmtContext::raise_stmt() {
  return getRuleContext<HqlsqlParser::Raise_stmtContext>(0);
}

HqlsqlParser::Resignal_stmtContext* HqlsqlParser::StmtContext::resignal_stmt() {
  return getRuleContext<HqlsqlParser::Resignal_stmtContext>(0);
}

HqlsqlParser::Return_stmtContext* HqlsqlParser::StmtContext::return_stmt() {
  return getRuleContext<HqlsqlParser::Return_stmtContext>(0);
}

HqlsqlParser::Rollback_stmtContext* HqlsqlParser::StmtContext::rollback_stmt() {
  return getRuleContext<HqlsqlParser::Rollback_stmtContext>(0);
}

HqlsqlParser::Signal_stmtContext* HqlsqlParser::StmtContext::signal_stmt() {
  return getRuleContext<HqlsqlParser::Signal_stmtContext>(0);
}

HqlsqlParser::Summary_stmtContext* HqlsqlParser::StmtContext::summary_stmt() {
  return getRuleContext<HqlsqlParser::Summary_stmtContext>(0);
}

HqlsqlParser::Use_stmtContext* HqlsqlParser::StmtContext::use_stmt() {
  return getRuleContext<HqlsqlParser::Use_stmtContext>(0);
}

HqlsqlParser::Truncate_table_stmtContext* HqlsqlParser::StmtContext::truncate_table_stmt() {
  return getRuleContext<HqlsqlParser::Truncate_table_stmtContext>(0);
}

HqlsqlParser::Values_into_stmtContext* HqlsqlParser::StmtContext::values_into_stmt() {
  return getRuleContext<HqlsqlParser::Values_into_stmtContext>(0);
}

HqlsqlParser::While_stmtContext* HqlsqlParser::StmtContext::while_stmt() {
  return getRuleContext<HqlsqlParser::While_stmtContext>(0);
}

HqlsqlParser::LabelContext* HqlsqlParser::StmtContext::label() {
  return getRuleContext<HqlsqlParser::LabelContext>(0);
}

HqlsqlParser::HiveContext* HqlsqlParser::StmtContext::hive() {
  return getRuleContext<HqlsqlParser::HiveContext>(0);
}

HqlsqlParser::HostContext* HqlsqlParser::StmtContext::host() {
  return getRuleContext<HqlsqlParser::HostContext>(0);
}

HqlsqlParser::Create_view_stmtContext* HqlsqlParser::StmtContext::create_view_stmt() {
  return getRuleContext<HqlsqlParser::Create_view_stmtContext>(0);
}

HqlsqlParser::Create_macro_stmtContext* HqlsqlParser::StmtContext::create_macro_stmt() {
  return getRuleContext<HqlsqlParser::Create_macro_stmtContext>(0);
}

HqlsqlParser::Reload_functionContext* HqlsqlParser::StmtContext::reload_function() {
  return getRuleContext<HqlsqlParser::Reload_functionContext>(0);
}

HqlsqlParser::Create_role_stmtContext* HqlsqlParser::StmtContext::create_role_stmt() {
  return getRuleContext<HqlsqlParser::Create_role_stmtContext>(0);
}

HqlsqlParser::Grant_revoke_role_stmtContext* HqlsqlParser::StmtContext::grant_revoke_role_stmt() {
  return getRuleContext<HqlsqlParser::Grant_revoke_role_stmtContext>(0);
}

HqlsqlParser::Grant_revoke_privilege_stmtContext* HqlsqlParser::StmtContext::grant_revoke_privilege_stmt() {
  return getRuleContext<HqlsqlParser::Grant_revoke_privilege_stmtContext>(0);
}

HqlsqlParser::Load_file_stmtContext* HqlsqlParser::StmtContext::load_file_stmt() {
  return getRuleContext<HqlsqlParser::Load_file_stmtContext>(0);
}

HqlsqlParser::Insert_stmtContext* HqlsqlParser::StmtContext::insert_stmt() {
  return getRuleContext<HqlsqlParser::Insert_stmtContext>(0);
}

HqlsqlParser::Update_stmtContext* HqlsqlParser::StmtContext::update_stmt() {
  return getRuleContext<HqlsqlParser::Update_stmtContext>(0);
}

HqlsqlParser::Delete_stmtContext* HqlsqlParser::StmtContext::delete_stmt() {
  return getRuleContext<HqlsqlParser::Delete_stmtContext>(0);
}

HqlsqlParser::Merge_stmtContext* HqlsqlParser::StmtContext::merge_stmt() {
  return getRuleContext<HqlsqlParser::Merge_stmtContext>(0);
}

HqlsqlParser::Analyze_table_stmtContext* HqlsqlParser::StmtContext::analyze_table_stmt() {
  return getRuleContext<HqlsqlParser::Analyze_table_stmtContext>(0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::StmtContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

HqlsqlParser::Show_stmtContext* HqlsqlParser::StmtContext::show_stmt() {
  return getRuleContext<HqlsqlParser::Show_stmtContext>(0);
}

HqlsqlParser::Describe_stmtContext* HqlsqlParser::StmtContext::describe_stmt() {
  return getRuleContext<HqlsqlParser::Describe_stmtContext>(0);
}

HqlsqlParser::Import_stmtContext* HqlsqlParser::StmtContext::import_stmt() {
  return getRuleContext<HqlsqlParser::Import_stmtContext>(0);
}

HqlsqlParser::Export_stmtContext* HqlsqlParser::StmtContext::export_stmt() {
  return getRuleContext<HqlsqlParser::Export_stmtContext>(0);
}

HqlsqlParser::Explain_stmtContext* HqlsqlParser::StmtContext::explain_stmt() {
  return getRuleContext<HqlsqlParser::Explain_stmtContext>(0);
}

HqlsqlParser::Assignment_stmtContext* HqlsqlParser::StmtContext::assignment_stmt() {
  return getRuleContext<HqlsqlParser::Assignment_stmtContext>(0);
}

HqlsqlParser::Semicolon_stmtContext* HqlsqlParser::StmtContext::semicolon_stmt() {
  return getRuleContext<HqlsqlParser::Semicolon_stmtContext>(0);
}


size_t HqlsqlParser::StmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleStmt;
}

void HqlsqlParser::StmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt(this);
}

void HqlsqlParser::StmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt(this);
}


antlrcpp::Any HqlsqlParser::StmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitStmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::StmtContext* HqlsqlParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 14, HqlsqlParser::RuleStmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(782);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(712);
      alter_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(713);
      allocate_cursor_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(714);
      associate_locator_stmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(715);
      begin_transaction_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(716);
      abort_transactions_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(717);
      break_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(718);
      call_stmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(719);
      collect_stats_stmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(720);
      close_stmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(721);
      cmp_stmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(722);
      copy_from_local_stmt();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(723);
      copy_stmt();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(724);
      commit_stmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(725);
      create_database_stmt();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(726);
      create_function_stmt();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(727);
      create_index_stmt();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(728);
      create_local_temp_table_stmt();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(729);
      create_package_stmt();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(730);
      create_package_body_stmt();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(731);
      create_procedure_stmt();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(732);
      create_table_stmt();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(733);
      declare_stmt();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(734);
      drop_stmt();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(735);
      end_transaction_stmt();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(736);
      exec_stmt();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(737);
      exit_stmt();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(738);
      fetch_stmt();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(739);
      for_cursor_stmt();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(740);
      for_range_stmt();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(741);
      if_stmt();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(742);
      include_stmt();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(743);
      get_diag_stmt();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(744);
      leave_stmt();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(745);
      map_object_stmt();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(746);
      open_stmt();
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(747);
      print_stmt();
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(748);
      quit_stmt();
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(749);
      raise_stmt();
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(750);
      resignal_stmt();
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(751);
      return_stmt();
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(752);
      rollback_stmt();
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(753);
      signal_stmt();
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(754);
      summary_stmt();
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(755);
      use_stmt();
      break;
    }

    case 45: {
      enterOuterAlt(_localctx, 45);
      setState(756);
      truncate_table_stmt();
      break;
    }

    case 46: {
      enterOuterAlt(_localctx, 46);
      setState(757);
      values_into_stmt();
      break;
    }

    case 47: {
      enterOuterAlt(_localctx, 47);
      setState(758);
      while_stmt();
      break;
    }

    case 48: {
      enterOuterAlt(_localctx, 48);
      setState(759);
      label();
      break;
    }

    case 49: {
      enterOuterAlt(_localctx, 49);
      setState(760);
      hive();
      break;
    }

    case 50: {
      enterOuterAlt(_localctx, 50);
      setState(761);
      host();
      break;
    }

    case 51: {
      enterOuterAlt(_localctx, 51);
      setState(762);
      create_view_stmt();
      break;
    }

    case 52: {
      enterOuterAlt(_localctx, 52);
      setState(763);
      create_macro_stmt();
      break;
    }

    case 53: {
      enterOuterAlt(_localctx, 53);
      setState(764);
      reload_function();
      break;
    }

    case 54: {
      enterOuterAlt(_localctx, 54);
      setState(765);
      create_role_stmt();
      break;
    }

    case 55: {
      enterOuterAlt(_localctx, 55);
      setState(766);
      grant_revoke_role_stmt();
      break;
    }

    case 56: {
      enterOuterAlt(_localctx, 56);
      setState(767);
      grant_revoke_privilege_stmt();
      break;
    }

    case 57: {
      enterOuterAlt(_localctx, 57);
      setState(768);
      load_file_stmt();
      break;
    }

    case 58: {
      enterOuterAlt(_localctx, 58);
      setState(769);
      insert_stmt();
      break;
    }

    case 59: {
      enterOuterAlt(_localctx, 59);
      setState(770);
      update_stmt();
      break;
    }

    case 60: {
      enterOuterAlt(_localctx, 60);
      setState(771);
      delete_stmt();
      break;
    }

    case 61: {
      enterOuterAlt(_localctx, 61);
      setState(772);
      merge_stmt();
      break;
    }

    case 62: {
      enterOuterAlt(_localctx, 62);
      setState(773);
      analyze_table_stmt();
      break;
    }

    case 63: {
      enterOuterAlt(_localctx, 63);
      setState(774);
      select_stmt();
      break;
    }

    case 64: {
      enterOuterAlt(_localctx, 64);
      setState(775);
      show_stmt();
      break;
    }

    case 65: {
      enterOuterAlt(_localctx, 65);
      setState(776);
      describe_stmt();
      break;
    }

    case 66: {
      enterOuterAlt(_localctx, 66);
      setState(777);
      import_stmt();
      break;
    }

    case 67: {
      enterOuterAlt(_localctx, 67);
      setState(778);
      export_stmt();
      break;
    }

    case 68: {
      enterOuterAlt(_localctx, 68);
      setState(779);
      explain_stmt();
      break;
    }

    case 69: {
      enterOuterAlt(_localctx, 69);
      setState(780);
      assignment_stmt();
      break;
    }

    case 70: {
      enterOuterAlt(_localctx, 70);
      setState(781);
      semicolon_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Semicolon_stmtContext ------------------------------------------------------------------

HqlsqlParser::Semicolon_stmtContext::Semicolon_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Semicolon_stmtContext::T_SEMICOLON() {
  return getToken(HqlsqlParser::T_SEMICOLON, 0);
}

tree::TerminalNode* HqlsqlParser::Semicolon_stmtContext::T_AT_SIGN() {
  return getToken(HqlsqlParser::T_AT_SIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Semicolon_stmtContext::T_POUND_SIGN() {
  return getToken(HqlsqlParser::T_POUND_SIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Semicolon_stmtContext::T_DIV_SIGN() {
  return getToken(HqlsqlParser::T_DIV_SIGN, 0);
}


size_t HqlsqlParser::Semicolon_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleSemicolon_stmt;
}

void HqlsqlParser::Semicolon_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSemicolon_stmt(this);
}

void HqlsqlParser::Semicolon_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSemicolon_stmt(this);
}


antlrcpp::Any HqlsqlParser::Semicolon_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSemicolon_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Semicolon_stmtContext* HqlsqlParser::semicolon_stmt() {
  Semicolon_stmtContext *_localctx = _tracker.createInstance<Semicolon_stmtContext>(_ctx, getState());
  enterRule(_localctx, 16, HqlsqlParser::RuleSemicolon_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(784);
    _la = _input->LA(1);
    if (!(((((_la - 467) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 467)) & ((1ULL << (HqlsqlParser::T_DIV_SIGN - 467))
      | (1ULL << (HqlsqlParser::T_SEMICOLON - 467))
      | (1ULL << (HqlsqlParser::T_AT_SIGN - 467))
      | (1ULL << (HqlsqlParser::T_POUND_SIGN - 467)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_blockContext ------------------------------------------------------------------

HqlsqlParser::Exception_blockContext::Exception_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Exception_blockContext::T_EXCEPTION() {
  return getToken(HqlsqlParser::T_EXCEPTION, 0);
}

std::vector<HqlsqlParser::Exception_block_itemContext *> HqlsqlParser::Exception_blockContext::exception_block_item() {
  return getRuleContexts<HqlsqlParser::Exception_block_itemContext>();
}

HqlsqlParser::Exception_block_itemContext* HqlsqlParser::Exception_blockContext::exception_block_item(size_t i) {
  return getRuleContext<HqlsqlParser::Exception_block_itemContext>(i);
}


size_t HqlsqlParser::Exception_blockContext::getRuleIndex() const {
  return HqlsqlParser::RuleException_block;
}

void HqlsqlParser::Exception_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_block(this);
}

void HqlsqlParser::Exception_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_block(this);
}


antlrcpp::Any HqlsqlParser::Exception_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitException_block(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Exception_blockContext* HqlsqlParser::exception_block() {
  Exception_blockContext *_localctx = _tracker.createInstance<Exception_blockContext>(_ctx, getState());
  enterRule(_localctx, 18, HqlsqlParser::RuleException_block);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(786);
    match(HqlsqlParser::T_EXCEPTION);
    setState(788); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(787);
              exception_block_item();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(790); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_block_itemContext ------------------------------------------------------------------

HqlsqlParser::Exception_block_itemContext::Exception_block_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::Exception_block_itemContext::T_WHEN() {
  return getTokens(HqlsqlParser::T_WHEN);
}

tree::TerminalNode* HqlsqlParser::Exception_block_itemContext::T_WHEN(size_t i) {
  return getToken(HqlsqlParser::T_WHEN, i);
}

tree::TerminalNode* HqlsqlParser::Exception_block_itemContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}

tree::TerminalNode* HqlsqlParser::Exception_block_itemContext::T_THEN() {
  return getToken(HqlsqlParser::T_THEN, 0);
}

HqlsqlParser::BlockContext* HqlsqlParser::Exception_block_itemContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

tree::TerminalNode* HqlsqlParser::Exception_block_itemContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}


size_t HqlsqlParser::Exception_block_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleException_block_item;
}

void HqlsqlParser::Exception_block_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_block_item(this);
}

void HqlsqlParser::Exception_block_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_block_item(this);
}


antlrcpp::Any HqlsqlParser::Exception_block_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitException_block_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Exception_block_itemContext* HqlsqlParser::exception_block_item() {
  Exception_block_itemContext *_localctx = _tracker.createInstance<Exception_block_itemContext>(_ctx, getState());
  enterRule(_localctx, 20, HqlsqlParser::RuleException_block_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(792);
    match(HqlsqlParser::T_WHEN);
    setState(793);
    match(HqlsqlParser::L_ID);
    setState(794);
    match(HqlsqlParser::T_THEN);
    setState(795);
    block();
    setState(796);
    _la = _input->LA(1);
    if (_la == 0 || _la == Token::EOF || (_la == HqlsqlParser::T_END || _la == HqlsqlParser::T_WHEN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_stmtContext ------------------------------------------------------------------

HqlsqlParser::Assignment_stmtContext::Assignment_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Assignment_stmtContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

HqlsqlParser::Set_session_optionContext* HqlsqlParser::Assignment_stmtContext::set_session_option() {
  return getRuleContext<HqlsqlParser::Set_session_optionContext>(0);
}

std::vector<HqlsqlParser::Assignment_stmt_itemContext *> HqlsqlParser::Assignment_stmtContext::assignment_stmt_item() {
  return getRuleContexts<HqlsqlParser::Assignment_stmt_itemContext>();
}

HqlsqlParser::Assignment_stmt_itemContext* HqlsqlParser::Assignment_stmtContext::assignment_stmt_item(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_stmt_itemContext>(i);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmtContext::T_RESET() {
  return getToken(HqlsqlParser::T_RESET, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Assignment_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssignment_stmt;
}

void HqlsqlParser::Assignment_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_stmt(this);
}

void HqlsqlParser::Assignment_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_stmt(this);
}


antlrcpp::Any HqlsqlParser::Assignment_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Assignment_stmtContext* HqlsqlParser::assignment_stmt() {
  Assignment_stmtContext *_localctx = _tracker.createInstance<Assignment_stmtContext>(_ctx, getState());
  enterRule(_localctx, 22, HqlsqlParser::RuleAssignment_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(809);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(798);
      match(HqlsqlParser::T_SET);
      setState(799);
      set_session_option();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(800);
      dynamic_cast<Assignment_stmtContext *>(_localctx)->tk = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_SET

      || _la == HqlsqlParser::T_RESET)) {
        dynamic_cast<Assignment_stmtContext *>(_localctx)->tk = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(801);
      assignment_stmt_item();
      setState(806);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(802);
          match(HqlsqlParser::T_COMMA);
          setState(803);
          assignment_stmt_item(); 
        }
        setState(808);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_stmt_itemContext ------------------------------------------------------------------

HqlsqlParser::Assignment_stmt_itemContext::Assignment_stmt_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Assignment_stmt_single_itemContext* HqlsqlParser::Assignment_stmt_itemContext::assignment_stmt_single_item() {
  return getRuleContext<HqlsqlParser::Assignment_stmt_single_itemContext>(0);
}

HqlsqlParser::Assignment_stmt_multiple_itemContext* HqlsqlParser::Assignment_stmt_itemContext::assignment_stmt_multiple_item() {
  return getRuleContext<HqlsqlParser::Assignment_stmt_multiple_itemContext>(0);
}

HqlsqlParser::Assignment_stmt_select_itemContext* HqlsqlParser::Assignment_stmt_itemContext::assignment_stmt_select_item() {
  return getRuleContext<HqlsqlParser::Assignment_stmt_select_itemContext>(0);
}


size_t HqlsqlParser::Assignment_stmt_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssignment_stmt_item;
}

void HqlsqlParser::Assignment_stmt_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_stmt_item(this);
}

void HqlsqlParser::Assignment_stmt_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_stmt_item(this);
}


antlrcpp::Any HqlsqlParser::Assignment_stmt_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_stmt_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Assignment_stmt_itemContext* HqlsqlParser::assignment_stmt_item() {
  Assignment_stmt_itemContext *_localctx = _tracker.createInstance<Assignment_stmt_itemContext>(_ctx, getState());
  enterRule(_localctx, 24, HqlsqlParser::RuleAssignment_stmt_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(814);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(811);
      assignment_stmt_single_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(812);
      assignment_stmt_multiple_item();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(813);
      assignment_stmt_select_item();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_stmt_single_itemContext ------------------------------------------------------------------

HqlsqlParser::Assignment_stmt_single_itemContext::Assignment_stmt_single_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Assignment_exprContext *> HqlsqlParser::Assignment_stmt_single_itemContext::assignment_expr() {
  return getRuleContexts<HqlsqlParser::Assignment_exprContext>();
}

HqlsqlParser::Assignment_exprContext* HqlsqlParser::Assignment_stmt_single_itemContext::assignment_expr(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_exprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_single_itemContext::T_COLON() {
  return getToken(HqlsqlParser::T_COLON, 0);
}

std::vector<HqlsqlParser::Bool_expr_binary_operatorContext *> HqlsqlParser::Assignment_stmt_single_itemContext::bool_expr_binary_operator() {
  return getRuleContexts<HqlsqlParser::Bool_expr_binary_operatorContext>();
}

HqlsqlParser::Bool_expr_binary_operatorContext* HqlsqlParser::Assignment_stmt_single_itemContext::bool_expr_binary_operator(size_t i) {
  return getRuleContext<HqlsqlParser::Bool_expr_binary_operatorContext>(i);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_single_itemContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_single_itemContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_single_itemContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}


size_t HqlsqlParser::Assignment_stmt_single_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssignment_stmt_single_item;
}

void HqlsqlParser::Assignment_stmt_single_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_stmt_single_item(this);
}

void HqlsqlParser::Assignment_stmt_single_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_stmt_single_item(this);
}


antlrcpp::Any HqlsqlParser::Assignment_stmt_single_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_stmt_single_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Assignment_stmt_single_itemContext* HqlsqlParser::assignment_stmt_single_item() {
  Assignment_stmt_single_itemContext *_localctx = _tracker.createInstance<Assignment_stmt_single_itemContext>(_ctx, getState());
  enterRule(_localctx, 26, HqlsqlParser::RuleAssignment_stmt_single_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(837);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(816);
      assignment_expr();
      setState(818);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
      case 1: {
        setState(817);
        match(HqlsqlParser::T_COLON);
        break;
      }

      }
      setState(825);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(820);
          bool_expr_binary_operator();
          setState(821);
          assignment_expr(); 
        }
        setState(827);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(828);
      match(HqlsqlParser::T_OPEN_P);
      setState(829);
      assignment_expr();
      setState(830);
      match(HqlsqlParser::T_CLOSE_P);
      setState(832);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COLON) {
        setState(831);
        match(HqlsqlParser::T_COLON);
      }
      setState(834);
      match(HqlsqlParser::T_EQUAL);
      setState(835);
      assignment_expr();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_stmt_multiple_itemContext ------------------------------------------------------------------

HqlsqlParser::Assignment_stmt_multiple_itemContext::Assignment_stmt_multiple_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_stmt_multiple_itemContext::T_OPEN_P() {
  return getTokens(HqlsqlParser::T_OPEN_P);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_multiple_itemContext::T_OPEN_P(size_t i) {
  return getToken(HqlsqlParser::T_OPEN_P, i);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Assignment_stmt_multiple_itemContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Assignment_stmt_multiple_itemContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_stmt_multiple_itemContext::T_CLOSE_P() {
  return getTokens(HqlsqlParser::T_CLOSE_P);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_multiple_itemContext::T_CLOSE_P(size_t i) {
  return getToken(HqlsqlParser::T_CLOSE_P, i);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_multiple_itemContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_stmt_multiple_itemContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_multiple_itemContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_multiple_itemContext::T_COLON() {
  return getToken(HqlsqlParser::T_COLON, 0);
}


size_t HqlsqlParser::Assignment_stmt_multiple_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssignment_stmt_multiple_item;
}

void HqlsqlParser::Assignment_stmt_multiple_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_stmt_multiple_item(this);
}

void HqlsqlParser::Assignment_stmt_multiple_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_stmt_multiple_item(this);
}


antlrcpp::Any HqlsqlParser::Assignment_stmt_multiple_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_stmt_multiple_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Assignment_stmt_multiple_itemContext* HqlsqlParser::assignment_stmt_multiple_item() {
  Assignment_stmt_multiple_itemContext *_localctx = _tracker.createInstance<Assignment_stmt_multiple_itemContext>(_ctx, getState());
  enterRule(_localctx, 28, HqlsqlParser::RuleAssignment_stmt_multiple_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(839);
    match(HqlsqlParser::T_OPEN_P);
    setState(840);
    expr(0);
    setState(845);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(841);
      match(HqlsqlParser::T_COMMA);
      setState(842);
      expr(0);
      setState(847);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(848);
    match(HqlsqlParser::T_CLOSE_P);
    setState(850);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_COLON) {
      setState(849);
      match(HqlsqlParser::T_COLON);
    }
    setState(852);
    match(HqlsqlParser::T_EQUAL);
    setState(853);
    match(HqlsqlParser::T_OPEN_P);
    setState(854);
    expr(0);
    setState(859);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(855);
      match(HqlsqlParser::T_COMMA);
      setState(856);
      expr(0);
      setState(861);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(862);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_stmt_select_itemContext ------------------------------------------------------------------

HqlsqlParser::Assignment_stmt_select_itemContext::Assignment_stmt_select_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_select_itemContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_stmt_select_itemContext::T_OPEN_P() {
  return getTokens(HqlsqlParser::T_OPEN_P);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_select_itemContext::T_OPEN_P(size_t i) {
  return getToken(HqlsqlParser::T_OPEN_P, i);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Assignment_stmt_select_itemContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_stmt_select_itemContext::T_CLOSE_P() {
  return getTokens(HqlsqlParser::T_CLOSE_P);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_select_itemContext::T_CLOSE_P(size_t i) {
  return getToken(HqlsqlParser::T_CLOSE_P, i);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Assignment_stmt_select_itemContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Assignment_stmt_select_itemContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_select_itemContext::T_COLON() {
  return getToken(HqlsqlParser::T_COLON, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_stmt_select_itemContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Assignment_stmt_select_itemContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Assignment_stmt_select_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssignment_stmt_select_item;
}

void HqlsqlParser::Assignment_stmt_select_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_stmt_select_item(this);
}

void HqlsqlParser::Assignment_stmt_select_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_stmt_select_item(this);
}


antlrcpp::Any HqlsqlParser::Assignment_stmt_select_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_stmt_select_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Assignment_stmt_select_itemContext* HqlsqlParser::assignment_stmt_select_item() {
  Assignment_stmt_select_itemContext *_localctx = _tracker.createInstance<Assignment_stmt_select_itemContext>(_ctx, getState());
  enterRule(_localctx, 30, HqlsqlParser::RuleAssignment_stmt_select_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(876);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(864);
      expr(0);
      break;
    }

    case 2: {
      setState(865);
      match(HqlsqlParser::T_OPEN_P);
      setState(866);
      expr(0);
      setState(871);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(867);
        match(HqlsqlParser::T_COMMA);
        setState(868);
        expr(0);
        setState(873);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(874);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    }
    setState(879);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_COLON) {
      setState(878);
      match(HqlsqlParser::T_COLON);
    }
    setState(881);
    match(HqlsqlParser::T_EQUAL);
    setState(882);
    match(HqlsqlParser::T_OPEN_P);
    setState(883);
    select_stmt();
    setState(884);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_exprContext ------------------------------------------------------------------

HqlsqlParser::Assignment_exprContext::Assignment_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Assignment_exprContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Assignment_exprContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

std::vector<HqlsqlParser::Assignment_reserverd_wordsContext *> HqlsqlParser::Assignment_exprContext::assignment_reserverd_words() {
  return getRuleContexts<HqlsqlParser::Assignment_reserverd_wordsContext>();
}

HqlsqlParser::Assignment_reserverd_wordsContext* HqlsqlParser::Assignment_exprContext::assignment_reserverd_words(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_reserverd_wordsContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Assignment_exprContext::T_PERIOD() {
  return getTokens(HqlsqlParser::T_PERIOD);
}

tree::TerminalNode* HqlsqlParser::Assignment_exprContext::T_PERIOD(size_t i) {
  return getToken(HqlsqlParser::T_PERIOD, i);
}

HqlsqlParser::ExprContext* HqlsqlParser::Assignment_exprContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Assignment_exprContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssignment_expr;
}

void HqlsqlParser::Assignment_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_expr(this);
}

void HqlsqlParser::Assignment_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_expr(this);
}


antlrcpp::Any HqlsqlParser::Assignment_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_expr(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Assignment_exprContext* HqlsqlParser::assignment_expr() {
  Assignment_exprContext *_localctx = _tracker.createInstance<Assignment_exprContext>(_ctx, getState());
  enterRule(_localctx, 32, HqlsqlParser::RuleAssignment_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(901);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(888);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
      case 1: {
        setState(886);
        ident();
        break;
      }

      case 2: {
        setState(887);
        assignment_reserverd_words();
        break;
      }

      }
      setState(897);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(890);
          match(HqlsqlParser::T_PERIOD);
          setState(893);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
          case 1: {
            setState(891);
            ident();
            break;
          }

          case 2: {
            setState(892);
            assignment_reserverd_words();
            break;
          }

          } 
        }
        setState(899);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(900);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_reserverd_wordsContext ------------------------------------------------------------------

HqlsqlParser::Assignment_reserverd_wordsContext::Assignment_reserverd_wordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_WINDOW() {
  return getToken(HqlsqlParser::T_WINDOW, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_CHECK() {
  return getToken(HqlsqlParser::T_CHECK, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_EXTERNAL() {
  return getToken(HqlsqlParser::T_EXTERNAL, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_TABLES() {
  return getToken(HqlsqlParser::T_TABLES, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_LIMIT() {
  return getToken(HqlsqlParser::T_LIMIT, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_UNION() {
  return getToken(HqlsqlParser::T_UNION, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_BUCKET() {
  return getToken(HqlsqlParser::T_BUCKET, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_INTERVAL() {
  return getToken(HqlsqlParser::T_INTERVAL, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_DISABLE() {
  return getToken(HqlsqlParser::T_DISABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_REBUILD() {
  return getToken(HqlsqlParser::T_REBUILD, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_PERCENTS() {
  return getToken(HqlsqlParser::T_PERCENTS, 0);
}

tree::TerminalNode* HqlsqlParser::Assignment_reserverd_wordsContext::T_EXPORT() {
  return getToken(HqlsqlParser::T_EXPORT, 0);
}


size_t HqlsqlParser::Assignment_reserverd_wordsContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssignment_reserverd_words;
}

void HqlsqlParser::Assignment_reserverd_wordsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_reserverd_words(this);
}

void HqlsqlParser::Assignment_reserverd_wordsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_reserverd_words(this);
}


antlrcpp::Any HqlsqlParser::Assignment_reserverd_wordsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_reserverd_words(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Assignment_reserverd_wordsContext* HqlsqlParser::assignment_reserverd_words() {
  Assignment_reserverd_wordsContext *_localctx = _tracker.createInstance<Assignment_reserverd_wordsContext>(_ctx, getState());
  enterRule(_localctx, 34, HqlsqlParser::RuleAssignment_reserverd_words);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(903);
    _la = _input->LA(1);
    if (!(((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (HqlsqlParser::T_REBUILD - 74))
      | (1ULL << (HqlsqlParser::T_DISABLE - 74))
      | (1ULL << (HqlsqlParser::T_CHECK - 74))
      | (1ULL << (HqlsqlParser::T_FROM - 74)))) != 0) || _la == HqlsqlParser::T_INTERVAL

    || _la == HqlsqlParser::T_LIMIT || ((((_la - 263) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 263)) & ((1ULL << (HqlsqlParser::T_SET - 263))
      | (1ULL << (HqlsqlParser::T_TABLE - 263))
      | (1ULL << (HqlsqlParser::T_TABLES - 263))
      | (1ULL << (HqlsqlParser::T_EXTERNAL - 263))
      | (1ULL << (HqlsqlParser::T_UNION - 263)))) != 0) || _la == HqlsqlParser::T_EXPORT || ((((_la - 453) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 453)) & ((1ULL << (HqlsqlParser::T_BUCKET - 453))
      | (1ULL << (HqlsqlParser::T_PERCENTS - 453))
      | (1ULL << (HqlsqlParser::T_WINDOW - 453)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Allocate_cursor_stmtContext ------------------------------------------------------------------

HqlsqlParser::Allocate_cursor_stmtContext::Allocate_cursor_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Allocate_cursor_stmtContext::T_ALLOCATE() {
  return getToken(HqlsqlParser::T_ALLOCATE, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Allocate_cursor_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Allocate_cursor_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

tree::TerminalNode* HqlsqlParser::Allocate_cursor_stmtContext::T_CURSOR() {
  return getToken(HqlsqlParser::T_CURSOR, 0);
}

tree::TerminalNode* HqlsqlParser::Allocate_cursor_stmtContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::Allocate_cursor_stmtContext::T_PROCEDURE() {
  return getToken(HqlsqlParser::T_PROCEDURE, 0);
}

tree::TerminalNode* HqlsqlParser::Allocate_cursor_stmtContext::T_RESULT() {
  return getToken(HqlsqlParser::T_RESULT, 0);
}

tree::TerminalNode* HqlsqlParser::Allocate_cursor_stmtContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}


size_t HqlsqlParser::Allocate_cursor_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleAllocate_cursor_stmt;
}

void HqlsqlParser::Allocate_cursor_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocate_cursor_stmt(this);
}

void HqlsqlParser::Allocate_cursor_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocate_cursor_stmt(this);
}


antlrcpp::Any HqlsqlParser::Allocate_cursor_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAllocate_cursor_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Allocate_cursor_stmtContext* HqlsqlParser::allocate_cursor_stmt() {
  Allocate_cursor_stmtContext *_localctx = _tracker.createInstance<Allocate_cursor_stmtContext>(_ctx, getState());
  enterRule(_localctx, 36, HqlsqlParser::RuleAllocate_cursor_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(905);
    match(HqlsqlParser::T_ALLOCATE);
    setState(906);
    ident();
    setState(907);
    match(HqlsqlParser::T_CURSOR);
    setState(908);
    match(HqlsqlParser::T_FOR);
    setState(912);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_RESULT: {
        setState(909);
        match(HqlsqlParser::T_RESULT);
        setState(910);
        match(HqlsqlParser::T_SET);
        break;
      }

      case HqlsqlParser::T_PROCEDURE: {
        setState(911);
        match(HqlsqlParser::T_PROCEDURE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(914);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Associate_locator_stmtContext ------------------------------------------------------------------

HqlsqlParser::Associate_locator_stmtContext::Associate_locator_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_ASSOCIATE() {
  return getToken(HqlsqlParser::T_ASSOCIATE, 0);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Associate_locator_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Associate_locator_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_PROCEDURE() {
  return getToken(HqlsqlParser::T_PROCEDURE, 0);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_LOCATOR() {
  return getToken(HqlsqlParser::T_LOCATOR, 0);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_LOCATORS() {
  return getToken(HqlsqlParser::T_LOCATORS, 0);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_RESULT() {
  return getToken(HqlsqlParser::T_RESULT, 0);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Associate_locator_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Associate_locator_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Associate_locator_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleAssociate_locator_stmt;
}

void HqlsqlParser::Associate_locator_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociate_locator_stmt(this);
}

void HqlsqlParser::Associate_locator_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociate_locator_stmt(this);
}


antlrcpp::Any HqlsqlParser::Associate_locator_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAssociate_locator_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Associate_locator_stmtContext* HqlsqlParser::associate_locator_stmt() {
  Associate_locator_stmtContext *_localctx = _tracker.createInstance<Associate_locator_stmtContext>(_ctx, getState());
  enterRule(_localctx, 38, HqlsqlParser::RuleAssociate_locator_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(916);
    match(HqlsqlParser::T_ASSOCIATE);
    setState(919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_RESULT) {
      setState(917);
      match(HqlsqlParser::T_RESULT);
      setState(918);
      match(HqlsqlParser::T_SET);
    }
    setState(921);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_LOCATOR

    || _la == HqlsqlParser::T_LOCATORS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(922);
    match(HqlsqlParser::T_OPEN_P);
    setState(923);
    ident();
    setState(928);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(924);
      match(HqlsqlParser::T_COMMA);
      setState(925);
      ident();
      setState(930);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(931);
    match(HqlsqlParser::T_CLOSE_P);
    setState(932);
    match(HqlsqlParser::T_WITH);
    setState(933);
    match(HqlsqlParser::T_PROCEDURE);
    setState(934);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Begin_transaction_stmtContext ------------------------------------------------------------------

HqlsqlParser::Begin_transaction_stmtContext::Begin_transaction_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Begin_transaction_stmtContext::T_BEGIN() {
  return getToken(HqlsqlParser::T_BEGIN, 0);
}

tree::TerminalNode* HqlsqlParser::Begin_transaction_stmtContext::T_TRANSACTION() {
  return getToken(HqlsqlParser::T_TRANSACTION, 0);
}


size_t HqlsqlParser::Begin_transaction_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleBegin_transaction_stmt;
}

void HqlsqlParser::Begin_transaction_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBegin_transaction_stmt(this);
}

void HqlsqlParser::Begin_transaction_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBegin_transaction_stmt(this);
}


antlrcpp::Any HqlsqlParser::Begin_transaction_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBegin_transaction_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Begin_transaction_stmtContext* HqlsqlParser::begin_transaction_stmt() {
  Begin_transaction_stmtContext *_localctx = _tracker.createInstance<Begin_transaction_stmtContext>(_ctx, getState());
  enterRule(_localctx, 40, HqlsqlParser::RuleBegin_transaction_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(936);
    match(HqlsqlParser::T_BEGIN);
    setState(937);
    match(HqlsqlParser::T_TRANSACTION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Abort_transactions_stmtContext ------------------------------------------------------------------

HqlsqlParser::Abort_transactions_stmtContext::Abort_transactions_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Abort_transactions_stmtContext::T_ABORT() {
  return getToken(HqlsqlParser::T_ABORT, 0);
}

tree::TerminalNode* HqlsqlParser::Abort_transactions_stmtContext::T_TRANSACTIONS() {
  return getToken(HqlsqlParser::T_TRANSACTIONS, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Abort_transactions_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Abort_transactions_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}


size_t HqlsqlParser::Abort_transactions_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleAbort_transactions_stmt;
}

void HqlsqlParser::Abort_transactions_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbort_transactions_stmt(this);
}

void HqlsqlParser::Abort_transactions_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbort_transactions_stmt(this);
}


antlrcpp::Any HqlsqlParser::Abort_transactions_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAbort_transactions_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Abort_transactions_stmtContext* HqlsqlParser::abort_transactions_stmt() {
  Abort_transactions_stmtContext *_localctx = _tracker.createInstance<Abort_transactions_stmtContext>(_ctx, getState());
  enterRule(_localctx, 42, HqlsqlParser::RuleAbort_transactions_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(939);
    match(HqlsqlParser::T_ABORT);
    setState(940);
    match(HqlsqlParser::T_TRANSACTIONS);
    setState(942); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(941);
              ident();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(944); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Break_stmtContext ------------------------------------------------------------------

HqlsqlParser::Break_stmtContext::Break_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Break_stmtContext::T_BREAK() {
  return getToken(HqlsqlParser::T_BREAK, 0);
}


size_t HqlsqlParser::Break_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleBreak_stmt;
}

void HqlsqlParser::Break_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreak_stmt(this);
}

void HqlsqlParser::Break_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreak_stmt(this);
}


antlrcpp::Any HqlsqlParser::Break_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBreak_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Break_stmtContext* HqlsqlParser::break_stmt() {
  Break_stmtContext *_localctx = _tracker.createInstance<Break_stmtContext>(_ctx, getState());
  enterRule(_localctx, 44, HqlsqlParser::RuleBreak_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(946);
    match(HqlsqlParser::T_BREAK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_stmtContext ------------------------------------------------------------------

HqlsqlParser::Call_stmtContext::Call_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Call_stmtContext::T_CALL() {
  return getToken(HqlsqlParser::T_CALL, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Call_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Call_stmtContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Call_stmtContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Expr_func_paramsContext* HqlsqlParser::Call_stmtContext::expr_func_params() {
  return getRuleContext<HqlsqlParser::Expr_func_paramsContext>(0);
}


size_t HqlsqlParser::Call_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCall_stmt;
}

void HqlsqlParser::Call_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_stmt(this);
}

void HqlsqlParser::Call_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_stmt(this);
}


antlrcpp::Any HqlsqlParser::Call_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCall_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Call_stmtContext* HqlsqlParser::call_stmt() {
  Call_stmtContext *_localctx = _tracker.createInstance<Call_stmtContext>(_ctx, getState());
  enterRule(_localctx, 46, HqlsqlParser::RuleCall_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(948);
    match(HqlsqlParser::T_CALL);
    setState(949);
    ident();
    setState(956);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(950);
      match(HqlsqlParser::T_OPEN_P);
      setState(952);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ACTION)
        | (1ULL << HqlsqlParser::T_ADD)
        | (1ULL << HqlsqlParser::T_ALL)
        | (1ULL << HqlsqlParser::T_ALLOCATE)
        | (1ULL << HqlsqlParser::T_ALTER)
        | (1ULL << HqlsqlParser::T_AND)
        | (1ULL << HqlsqlParser::T_ANSI_NULLS)
        | (1ULL << HqlsqlParser::T_ANSI_PADDING)
        | (1ULL << HqlsqlParser::T_AS)
        | (1ULL << HqlsqlParser::T_ASC)
        | (1ULL << HqlsqlParser::T_ASSOCIATE)
        | (1ULL << HqlsqlParser::T_AT)
        | (1ULL << HqlsqlParser::T_AUTO_INCREMENT)
        | (1ULL << HqlsqlParser::T_AVG)
        | (1ULL << HqlsqlParser::T_BATCHSIZE)
        | (1ULL << HqlsqlParser::T_BEGIN)
        | (1ULL << HqlsqlParser::T_BETWEEN)
        | (1ULL << HqlsqlParser::T_BIGINT)
        | (1ULL << HqlsqlParser::T_BINARY_DOUBLE)
        | (1ULL << HqlsqlParser::T_BINARY_FLOAT)
        | (1ULL << HqlsqlParser::T_BIT)
        | (1ULL << HqlsqlParser::T_BODY)
        | (1ULL << HqlsqlParser::T_BREAK)
        | (1ULL << HqlsqlParser::T_BY)
        | (1ULL << HqlsqlParser::T_BYTE)
        | (1ULL << HqlsqlParser::T_CALL)
        | (1ULL << HqlsqlParser::T_CALLER)
        | (1ULL << HqlsqlParser::T_CASCADE)
        | (1ULL << HqlsqlParser::T_CASE)
        | (1ULL << HqlsqlParser::T_CASESPECIFIC)
        | (1ULL << HqlsqlParser::T_CAST)
        | (1ULL << HqlsqlParser::T_CHAR)
        | (1ULL << HqlsqlParser::T_CHARACTER)
        | (1ULL << HqlsqlParser::T_CHARSET)
        | (1ULL << HqlsqlParser::T_CLIENT)
        | (1ULL << HqlsqlParser::T_CLOSE)
        | (1ULL << HqlsqlParser::T_CLUSTERED)
        | (1ULL << HqlsqlParser::T_CMP)
        | (1ULL << HqlsqlParser::T_COLLECT)
        | (1ULL << HqlsqlParser::T_COLLECTION)
        | (1ULL << HqlsqlParser::T_COLUMN)
        | (1ULL << HqlsqlParser::T_COMMENT)
        | (1ULL << HqlsqlParser::T_CONSTANT)
        | (1ULL << HqlsqlParser::T_COMMIT)
        | (1ULL << HqlsqlParser::T_COMPRESS)
        | (1ULL << HqlsqlParser::T_CONCAT)
        | (1ULL << HqlsqlParser::T_CONDITION)
        | (1ULL << HqlsqlParser::T_CONSTRAINT)
        | (1ULL << HqlsqlParser::T_CONTINUE)
        | (1ULL << HqlsqlParser::T_COPY)
        | (1ULL << HqlsqlParser::T_COUNT)
        | (1ULL << HqlsqlParser::T_COUNT_BIG)
        | (1ULL << HqlsqlParser::T_CREATE)
        | (1ULL << HqlsqlParser::T_CREATION)
        | (1ULL << HqlsqlParser::T_CREATOR)
        | (1ULL << HqlsqlParser::T_CS)
        | (1ULL << HqlsqlParser::T_CURRENT)
        | (1ULL << HqlsqlParser::T_CURRENT_SCHEMA)
        | (1ULL << HqlsqlParser::T_CURSOR)
        | (1ULL << HqlsqlParser::T_DATABASE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (HqlsqlParser::T_DATA - 64))
        | (1ULL << (HqlsqlParser::T_DATE - 64))
        | (1ULL << (HqlsqlParser::T_DATETIME - 64))
        | (1ULL << (HqlsqlParser::T_DAY - 64))
        | (1ULL << (HqlsqlParser::T_DAYS - 64))
        | (1ULL << (HqlsqlParser::T_DEC - 64))
        | (1ULL << (HqlsqlParser::T_DECIMAL - 64))
        | (1ULL << (HqlsqlParser::T_DECLARE - 64))
        | (1ULL << (HqlsqlParser::T_DEFAULT - 64))
        | (1ULL << (HqlsqlParser::T_DEFERRED - 64))
        | (1ULL << (HqlsqlParser::T_DEFINED - 64))
        | (1ULL << (HqlsqlParser::T_DEFINER - 64))
        | (1ULL << (HqlsqlParser::T_DEFINITION - 64))
        | (1ULL << (HqlsqlParser::T_DELETE - 64))
        | (1ULL << (HqlsqlParser::T_DELIMITED - 64))
        | (1ULL << (HqlsqlParser::T_DELIMITER - 64))
        | (1ULL << (HqlsqlParser::T_DESC - 64))
        | (1ULL << (HqlsqlParser::T_DESCRIBE - 64))
        | (1ULL << (HqlsqlParser::T_DIAGNOSTICS - 64))
        | (1ULL << (HqlsqlParser::T_DIR - 64))
        | (1ULL << (HqlsqlParser::T_DIRECTORY - 64))
        | (1ULL << (HqlsqlParser::T_DISTINCT - 64))
        | (1ULL << (HqlsqlParser::T_DISTRIBUTE - 64))
        | (1ULL << (HqlsqlParser::T_DO - 64))
        | (1ULL << (HqlsqlParser::T_DOUBLE - 64))
        | (1ULL << (HqlsqlParser::T_DROP - 64))
        | (1ULL << (HqlsqlParser::T_DYNAMIC - 64))
        | (1ULL << (HqlsqlParser::T_ENABLE - 64))
        | (1ULL << (HqlsqlParser::T_ENGINE - 64))
        | (1ULL << (HqlsqlParser::T_ESCAPED - 64))
        | (1ULL << (HqlsqlParser::T_EXCEPT - 64))
        | (1ULL << (HqlsqlParser::T_EXEC - 64))
        | (1ULL << (HqlsqlParser::T_EXECUTE - 64))
        | (1ULL << (HqlsqlParser::T_EXCEPTION - 64))
        | (1ULL << (HqlsqlParser::T_EXCLUSIVE - 64))
        | (1ULL << (HqlsqlParser::T_EXISTS - 64))
        | (1ULL << (HqlsqlParser::T_EXIT - 64))
        | (1ULL << (HqlsqlParser::T_FALLBACK - 64))
        | (1ULL << (HqlsqlParser::T_FALSE - 64))
        | (1ULL << (HqlsqlParser::T_FETCH - 64))
        | (1ULL << (HqlsqlParser::T_FIELDS - 64))
        | (1ULL << (HqlsqlParser::T_FILE - 64))
        | (1ULL << (HqlsqlParser::T_FILES - 64))
        | (1ULL << (HqlsqlParser::T_FLOAT - 64))
        | (1ULL << (HqlsqlParser::T_FOR - 64))
        | (1ULL << (HqlsqlParser::T_FOREIGN - 64))
        | (1ULL << (HqlsqlParser::T_FORMAT - 64))
        | (1ULL << (HqlsqlParser::T_FOUND - 64))
        | (1ULL << (HqlsqlParser::T_FULL - 64))
        | (1ULL << (HqlsqlParser::T_FUNCTION - 64))
        | (1ULL << (HqlsqlParser::T_GET - 64))
        | (1ULL << (HqlsqlParser::T_GLOBAL - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (HqlsqlParser::T_GO - 128))
        | (1ULL << (HqlsqlParser::T_GRANT - 128))
        | (1ULL << (HqlsqlParser::T_ROLE - 128))
        | (1ULL << (HqlsqlParser::T_HANDLER - 128))
        | (1ULL << (HqlsqlParser::T_HASH - 128))
        | (1ULL << (HqlsqlParser::T_HAVING - 128))
        | (1ULL << (HqlsqlParser::T_HDFS - 128))
        | (1ULL << (HqlsqlParser::T_HIVE - 128))
        | (1ULL << (HqlsqlParser::T_HOST - 128))
        | (1ULL << (HqlsqlParser::T_IDENTITY - 128))
        | (1ULL << (HqlsqlParser::T_IF - 128))
        | (1ULL << (HqlsqlParser::T_IGNORE - 128))
        | (1ULL << (HqlsqlParser::T_IMMEDIATE - 128))
        | (1ULL << (HqlsqlParser::T_IN - 128))
        | (1ULL << (HqlsqlParser::T_INCLUDE - 128))
        | (1ULL << (HqlsqlParser::T_INDEX - 128))
        | (1ULL << (HqlsqlParser::T_INITRANS - 128))
        | (1ULL << (HqlsqlParser::T_INNER - 128))
        | (1ULL << (HqlsqlParser::T_INOUT - 128))
        | (1ULL << (HqlsqlParser::T_INSERT - 128))
        | (1ULL << (HqlsqlParser::T_INT - 128))
        | (1ULL << (HqlsqlParser::T_INT2 - 128))
        | (1ULL << (HqlsqlParser::T_INT4 - 128))
        | (1ULL << (HqlsqlParser::T_INT8 - 128))
        | (1ULL << (HqlsqlParser::T_INTEGER - 128))
        | (1ULL << (HqlsqlParser::T_INTERSECT - 128))
        | (1ULL << (HqlsqlParser::T_INTERVAL - 128))
        | (1ULL << (HqlsqlParser::T_INTO - 128))
        | (1ULL << (HqlsqlParser::T_INVOKER - 128))
        | (1ULL << (HqlsqlParser::T_IS - 128))
        | (1ULL << (HqlsqlParser::T_ISOPEN - 128))
        | (1ULL << (HqlsqlParser::T_ITEMS - 128))
        | (1ULL << (HqlsqlParser::T_JOIN - 128))
        | (1ULL << (HqlsqlParser::T_KEEP - 128))
        | (1ULL << (HqlsqlParser::T_KEY - 128))
        | (1ULL << (HqlsqlParser::T_KEYS - 128))
        | (1ULL << (HqlsqlParser::T_LANGUAGE - 128))
        | (1ULL << (HqlsqlParser::T_LEAVE - 128))
        | (1ULL << (HqlsqlParser::T_LEFT - 128))
        | (1ULL << (HqlsqlParser::T_LIKE - 128))
        | (1ULL << (HqlsqlParser::T_LINES - 128))
        | (1ULL << (HqlsqlParser::T_LOCAL - 128))
        | (1ULL << (HqlsqlParser::T_LOCATION - 128))
        | (1ULL << (HqlsqlParser::T_LOCATOR - 128))
        | (1ULL << (HqlsqlParser::T_LOCATORS - 128))
        | (1ULL << (HqlsqlParser::T_LOCKS - 128))
        | (1ULL << (HqlsqlParser::T_LOG - 128))
        | (1ULL << (HqlsqlParser::T_LOGGED - 128))
        | (1ULL << (HqlsqlParser::T_LOGGING - 128))
        | (1ULL << (HqlsqlParser::T_LOOP - 128))
        | (1ULL << (HqlsqlParser::T_MAP - 128))
        | (1ULL << (HqlsqlParser::T_MATCHED - 128))
        | (1ULL << (HqlsqlParser::T_MAX - 128))
        | (1ULL << (HqlsqlParser::T_MAXTRANS - 128))
        | (1ULL << (HqlsqlParser::T_MERGE - 128))
        | (1ULL << (HqlsqlParser::T_MESSAGE_TEXT - 128))
        | (1ULL << (HqlsqlParser::T_MICROSECOND - 128))
        | (1ULL << (HqlsqlParser::T_MICROSECONDS - 128))
        | (1ULL << (HqlsqlParser::T_MIN - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (HqlsqlParser::T_MULTISET - 192))
        | (1ULL << (HqlsqlParser::T_NCHAR - 192))
        | (1ULL << (HqlsqlParser::T_NEW - 192))
        | (1ULL << (HqlsqlParser::T_NVARCHAR - 192))
        | (1ULL << (HqlsqlParser::T_NO - 192))
        | (1ULL << (HqlsqlParser::T_NOCOUNT - 192))
        | (1ULL << (HqlsqlParser::T_NOCOMPRESS - 192))
        | (1ULL << (HqlsqlParser::T_NOLOGGING - 192))
        | (1ULL << (HqlsqlParser::T_NONE - 192))
        | (1ULL << (HqlsqlParser::T_NOT - 192))
        | (1ULL << (HqlsqlParser::T_NOTFOUND - 192))
        | (1ULL << (HqlsqlParser::T_NULL - 192))
        | (1ULL << (HqlsqlParser::T_NUMERIC - 192))
        | (1ULL << (HqlsqlParser::T_NUMBER - 192))
        | (1ULL << (HqlsqlParser::T_OBJECT - 192))
        | (1ULL << (HqlsqlParser::T_OFF - 192))
        | (1ULL << (HqlsqlParser::T_ON - 192))
        | (1ULL << (HqlsqlParser::T_ONLY - 192))
        | (1ULL << (HqlsqlParser::T_OPEN - 192))
        | (1ULL << (HqlsqlParser::T_OR - 192))
        | (1ULL << (HqlsqlParser::T_OUT - 192))
        | (1ULL << (HqlsqlParser::T_OUTER - 192))
        | (1ULL << (HqlsqlParser::T_OVERWRITE - 192))
        | (1ULL << (HqlsqlParser::T_OWNER - 192))
        | (1ULL << (HqlsqlParser::T_PACKAGE - 192))
        | (1ULL << (HqlsqlParser::T_PARTITION - 192))
        | (1ULL << (HqlsqlParser::T_PCTFREE - 192))
        | (1ULL << (HqlsqlParser::T_PCTUSED - 192))
        | (1ULL << (HqlsqlParser::T_PRECISION - 192))
        | (1ULL << (HqlsqlParser::T_PRESERVE - 192))
        | (1ULL << (HqlsqlParser::T_PRIMARY - 192))
        | (1ULL << (HqlsqlParser::T_PRINT - 192))
        | (1ULL << (HqlsqlParser::T_PROC - 192))
        | (1ULL << (HqlsqlParser::T_PROCEDURE - 192))
        | (1ULL << (HqlsqlParser::T_QUALIFY - 192))
        | (1ULL << (HqlsqlParser::T_QUERY_BAND - 192))
        | (1ULL << (HqlsqlParser::T_QUIT - 192))
        | (1ULL << (HqlsqlParser::T_QUOTED_IDENTIFIER - 192))
        | (1ULL << (HqlsqlParser::T_RAISE - 192))
        | (1ULL << (HqlsqlParser::T_REAL - 192))
        | (1ULL << (HqlsqlParser::T_REFERENCES - 192))
        | (1ULL << (HqlsqlParser::T_REGEXP - 192))
        | (1ULL << (HqlsqlParser::T_REPLACE - 192))
        | (1ULL << (HqlsqlParser::T_RESIGNAL - 192))
        | (1ULL << (HqlsqlParser::T_RESTRICT - 192))
        | (1ULL << (HqlsqlParser::T_RESULT - 192))
        | (1ULL << (HqlsqlParser::T_RESULT_SET_LOCATOR - 192))
        | (1ULL << (HqlsqlParser::T_RETURN - 192))
        | (1ULL << (HqlsqlParser::T_RETURNS - 192))
        | (1ULL << (HqlsqlParser::T_REVERSE - 192))
        | (1ULL << (HqlsqlParser::T_RIGHT - 192))
        | (1ULL << (HqlsqlParser::T_RLIKE - 192))
        | (1ULL << (HqlsqlParser::T_ROLLBACK - 192))
        | (1ULL << (HqlsqlParser::T_ROW - 192))
        | (1ULL << (HqlsqlParser::T_ROWS - 192))
        | (1ULL << (HqlsqlParser::T_ROW_COUNT - 192))
        | (1ULL << (HqlsqlParser::T_RR - 192))
        | (1ULL << (HqlsqlParser::T_RS - 192))
        | (1ULL << (HqlsqlParser::T_PWD - 192))
        | (1ULL << (HqlsqlParser::T_TRIM - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (HqlsqlParser::T_SCHEMA - 256))
        | (1ULL << (HqlsqlParser::T_SECOND - 256))
        | (1ULL << (HqlsqlParser::T_SECONDS - 256))
        | (1ULL << (HqlsqlParser::T_SECURITY - 256))
        | (1ULL << (HqlsqlParser::T_SEGMENT - 256))
        | (1ULL << (HqlsqlParser::T_SELECT - 256))
        | (1ULL << (HqlsqlParser::T_SESSION - 256))
        | (1ULL << (HqlsqlParser::T_SESSIONS - 256))
        | (1ULL << (HqlsqlParser::T_SETS - 256))
        | (1ULL << (HqlsqlParser::T_SHARE - 256))
        | (1ULL << (HqlsqlParser::T_SIGNAL - 256))
        | (1ULL << (HqlsqlParser::T_SIMPLE_DOUBLE - 256))
        | (1ULL << (HqlsqlParser::T_SIMPLE_FLOAT - 256))
        | (1ULL << (HqlsqlParser::T_SMALLDATETIME - 256))
        | (1ULL << (HqlsqlParser::T_SMALLINT - 256))
        | (1ULL << (HqlsqlParser::T_SQL - 256))
        | (1ULL << (HqlsqlParser::T_SQLEXCEPTION - 256))
        | (1ULL << (HqlsqlParser::T_SQLINSERT - 256))
        | (1ULL << (HqlsqlParser::T_SQLSTATE - 256))
        | (1ULL << (HqlsqlParser::T_SQLWARNING - 256))
        | (1ULL << (HqlsqlParser::T_STATS - 256))
        | (1ULL << (HqlsqlParser::T_STATISTICS - 256))
        | (1ULL << (HqlsqlParser::T_STEP - 256))
        | (1ULL << (HqlsqlParser::T_STORAGE - 256))
        | (1ULL << (HqlsqlParser::T_STORED - 256))
        | (1ULL << (HqlsqlParser::T_STRING - 256))
        | (1ULL << (HqlsqlParser::T_SUBDIR - 256))
        | (1ULL << (HqlsqlParser::T_SUBSTRING - 256))
        | (1ULL << (HqlsqlParser::T_SUM - 256))
        | (1ULL << (HqlsqlParser::T_SUMMARY - 256))
        | (1ULL << (HqlsqlParser::T_SYS_REFCURSOR - 256))
        | (1ULL << (HqlsqlParser::T_TABLE - 256))
        | (1ULL << (HqlsqlParser::T_TABLESPACE - 256))
        | (1ULL << (HqlsqlParser::T_TEMPORARY - 256))
        | (1ULL << (HqlsqlParser::T_TERMINATED - 256))
        | (1ULL << (HqlsqlParser::T_TEXTIMAGE_ON - 256))
        | (1ULL << (HqlsqlParser::T_THEN - 256))
        | (1ULL << (HqlsqlParser::T_TIMESTAMP - 256))
        | (1ULL << (HqlsqlParser::T_TITLE - 256))
        | (1ULL << (HqlsqlParser::T_TO - 256))
        | (1ULL << (HqlsqlParser::T_TOP - 256))
        | (1ULL << (HqlsqlParser::T_TRANSACTION - 256))
        | (1ULL << (HqlsqlParser::T_TRUE - 256))
        | (1ULL << (HqlsqlParser::T_TRUNCATE - 256))
        | (1ULL << (HqlsqlParser::T_TYPE - 256))
        | (1ULL << (HqlsqlParser::T_UNIQUE - 256))
        | (1ULL << (HqlsqlParser::T_UPDATE - 256))
        | (1ULL << (HqlsqlParser::T_UR - 256))
        | (1ULL << (HqlsqlParser::T_USE - 256))
        | (1ULL << (HqlsqlParser::T_USING - 256))
        | (1ULL << (HqlsqlParser::T_VALUE - 256))
        | (1ULL << (HqlsqlParser::T_VALUES - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (HqlsqlParser::T_VAR - 320))
        | (1ULL << (HqlsqlParser::T_VARCHAR - 320))
        | (1ULL << (HqlsqlParser::T_VARCHAR2 - 320))
        | (1ULL << (HqlsqlParser::T_VARYING - 320))
        | (1ULL << (HqlsqlParser::T_VOLATILE - 320))
        | (1ULL << (HqlsqlParser::T_WHILE - 320))
        | (1ULL << (HqlsqlParser::T_WITH - 320))
        | (1ULL << (HqlsqlParser::T_WITHOUT - 320))
        | (1ULL << (HqlsqlParser::T_WORK - 320))
        | (1ULL << (HqlsqlParser::T_XACT_ABORT - 320))
        | (1ULL << (HqlsqlParser::T_XML - 320))
        | (1ULL << (HqlsqlParser::T_YES - 320))
        | (1ULL << (HqlsqlParser::T_ARRAY - 320))
        | (1ULL << (HqlsqlParser::T_STRUCT - 320))
        | (1ULL << (HqlsqlParser::T_SERDE - 320))
        | (1ULL << (HqlsqlParser::T_SEQUENCEFILE - 320))
        | (1ULL << (HqlsqlParser::T_TEXTFILE - 320))
        | (1ULL << (HqlsqlParser::T_RCFILE - 320))
        | (1ULL << (HqlsqlParser::T_ORC - 320))
        | (1ULL << (HqlsqlParser::T_PARQUET - 320))
        | (1ULL << (HqlsqlParser::T_AVRO - 320))
        | (1ULL << (HqlsqlParser::T_JSONFILE - 320))
        | (1ULL << (HqlsqlParser::T_INPUTFORMAT - 320))
        | (1ULL << (HqlsqlParser::T_FILEFORMAT - 320))
        | (1ULL << (HqlsqlParser::T_T - 320))
        | (1ULL << (HqlsqlParser::T_S - 320))
        | (1ULL << (HqlsqlParser::T_ACTIVITY_COUNT - 320))
        | (1ULL << (HqlsqlParser::T_CUME_DIST - 320))
        | (1ULL << (HqlsqlParser::T_CURRENT_DATE - 320))
        | (1ULL << (HqlsqlParser::T_CURRENT_TIMESTAMP - 320))
        | (1ULL << (HqlsqlParser::T_CURRENT_USER - 320))
        | (1ULL << (HqlsqlParser::T_DENSE_RANK - 320))
        | (1ULL << (HqlsqlParser::T_FIRST_VALUE - 320))
        | (1ULL << (HqlsqlParser::T_LAG - 320))
        | (1ULL << (HqlsqlParser::T_LAST_VALUE - 320))
        | (1ULL << (HqlsqlParser::T_LEAD - 320))
        | (1ULL << (HqlsqlParser::T_MAX_PART_STRING - 320))
        | (1ULL << (HqlsqlParser::T_MIN_PART_STRING - 320))
        | (1ULL << (HqlsqlParser::T_MAX_PART_INT - 320))
        | (1ULL << (HqlsqlParser::T_MIN_PART_INT - 320))
        | (1ULL << (HqlsqlParser::T_MAX_PART_DATE - 320))
        | (1ULL << (HqlsqlParser::T_MIN_PART_DATE - 320))
        | (1ULL << (HqlsqlParser::T_PART_COUNT - 320))
        | (1ULL << (HqlsqlParser::T_PART_LOC - 320))
        | (1ULL << (HqlsqlParser::T_RANK - 320))
        | (1ULL << (HqlsqlParser::T_ROW_NUMBER - 320))
        | (1ULL << (HqlsqlParser::T_STDEV - 320))
        | (1ULL << (HqlsqlParser::T_STD - 320))
        | (1ULL << (HqlsqlParser::T_SYSDATE - 320))
        | (1ULL << (HqlsqlParser::T_VARIANCE - 320))
        | (1ULL << (HqlsqlParser::T_USER - 320))
        | (1ULL << (HqlsqlParser::T_PURGE - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 384)) & ((1ULL << (HqlsqlParser::T_BUCKETS - 384))
        | (1ULL << (HqlsqlParser::T_SKEWED - 384))
        | (1ULL << (HqlsqlParser::T_DIRECTORIES - 384))
        | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 384))
        | (1ULL << (HqlsqlParser::T_RENAME - 384))
        | (1ULL << (HqlsqlParser::T_SORTED - 384))
        | (1ULL << (HqlsqlParser::T_SORT - 384))
        | (1ULL << (HqlsqlParser::T_CHANGE - 384))
        | (1ULL << (HqlsqlParser::T_EXCHANGE - 384))
        | (1ULL << (HqlsqlParser::T_RECOVER - 384))
        | (1ULL << (HqlsqlParser::T_PARTITIONS - 384))
        | (1ULL << (HqlsqlParser::T_PROTECTION - 384))
        | (1ULL << (HqlsqlParser::T_ARCHIVE - 384))
        | (1ULL << (HqlsqlParser::T_UNARCHIVE - 384))
        | (1ULL << (HqlsqlParser::T_TOUCH - 384))
        | (1ULL << (HqlsqlParser::T_OFFLINE - 384))
        | (1ULL << (HqlsqlParser::T_NO_DROP - 384))
        | (1ULL << (HqlsqlParser::T_COMPACT - 384))
        | (1ULL << (HqlsqlParser::T_CONCATENATE - 384))
        | (1ULL << (HqlsqlParser::T_WAIT - 384))
        | (1ULL << (HqlsqlParser::T_COLUMNS - 384))
        | (1ULL << (HqlsqlParser::T_FIRST - 384))
        | (1ULL << (HqlsqlParser::T_LAST - 384))
        | (1ULL << (HqlsqlParser::T_NULLS - 384))
        | (1ULL << (HqlsqlParser::T_AFTER - 384))
        | (1ULL << (HqlsqlParser::T_MATERIALIZED - 384))
        | (1ULL << (HqlsqlParser::T_REWRITE - 384))
        | (1ULL << (HqlsqlParser::T_PARTITIONED - 384))
        | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 384))
        | (1ULL << (HqlsqlParser::T_MACRO - 384))
        | (1ULL << (HqlsqlParser::T_SHOW - 384))
        | (1ULL << (HqlsqlParser::T_EXTENDED - 384))
        | (1ULL << (HqlsqlParser::T_FORMATTED - 384))
        | (1ULL << (HqlsqlParser::T_SEMI - 384))
        | (1ULL << (HqlsqlParser::T_CROSS - 384))
        | (1ULL << (HqlsqlParser::T_LATERAL - 384))
        | (1ULL << (HqlsqlParser::T_RELOAD - 384))
        | (1ULL << (HqlsqlParser::T_LOAD - 384))
        | (1ULL << (HqlsqlParser::T_INPATH - 384))
        | (1ULL << (HqlsqlParser::T_PRINCIPALS - 384))
        | (1ULL << (HqlsqlParser::T_COMPACTIONS - 384))
        | (1ULL << (HqlsqlParser::T_CONF - 384))
        | (1ULL << (HqlsqlParser::T_ADMIN - 384))
        | (1ULL << (HqlsqlParser::T_OPTION - 384))
        | (1ULL << (HqlsqlParser::T_PRIVILEGES - 384))
        | (1ULL << (HqlsqlParser::T_LOCK - 384))
        | (1ULL << (HqlsqlParser::T_SHOW_DATABASE - 384))
        | (1ULL << (HqlsqlParser::T_COMPUTE - 384))
        | (1ULL << (HqlsqlParser::T_CACHE - 384))
        | (1ULL << (HqlsqlParser::T_METADATA - 384))
        | (1ULL << (HqlsqlParser::T_NOSCAN - 384))
        | (1ULL << (HqlsqlParser::T_UNIONTYPE - 384))
        | (1ULL << (HqlsqlParser::T_ANALYZE - 384))
        | (1ULL << (HqlsqlParser::T_EXPLAIN - 384))
        | (1ULL << (HqlsqlParser::T_CBO - 384))
        | (1ULL << (HqlsqlParser::T_AST - 384))
        | (1ULL << (HqlsqlParser::T_DEPENDENCY - 384))
        | (1ULL << (HqlsqlParser::T_AUTHORIZATION - 384))
        | (1ULL << (HqlsqlParser::T_VECTORIZATION - 384))
        | (1ULL << (HqlsqlParser::T_COST - 384))
        | (1ULL << (HqlsqlParser::T_JOINCOST - 384))
        | (1ULL << (HqlsqlParser::T_OPERATOR - 384))
        | (1ULL << (HqlsqlParser::T_EXPRESSION - 384))
        | (1ULL << (HqlsqlParser::T_DETAIL - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 448)) & ((1ULL << (HqlsqlParser::T_UNBOUNDED - 448))
        | (1ULL << (HqlsqlParser::T_PRECEDING - 448))
        | (1ULL << (HqlsqlParser::T_FOLLOWING - 448))
        | (1ULL << (HqlsqlParser::T_RANGE - 448))
        | (1ULL << (HqlsqlParser::T_YEAR - 448))
        | (1ULL << (HqlsqlParser::T_MONTH - 448))
        | (1ULL << (HqlsqlParser::T_MINUTE - 448))
        | (1ULL << (HqlsqlParser::T_TIME - 448))
        | (1ULL << (HqlsqlParser::T_ZONE - 448))
        | (1ULL << (HqlsqlParser::T_ADD_SIGN - 448))
        | (1ULL << (HqlsqlParser::T_MUL - 448))
        | (1ULL << (HqlsqlParser::T_OPEN_P - 448))
        | (1ULL << (HqlsqlParser::T_SUB - 448))
        | (1ULL << (HqlsqlParser::T_EXCLAMATION - 448))
        | (1ULL << (HqlsqlParser::L_ID - 448))
        | (1ULL << (HqlsqlParser::L_S_STRING - 448))
        | (1ULL << (HqlsqlParser::L_D_STRING - 448))
        | (1ULL << (HqlsqlParser::L_INT - 448))
        | (1ULL << (HqlsqlParser::L_DEC - 448)))) != 0)) {
        setState(951);
        expr_func_params();
      }
      setState(954);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 2: {
      setState(955);
      expr_func_params();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_stmtContext ------------------------------------------------------------------

HqlsqlParser::Declare_stmtContext::Declare_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Declare_stmtContext::T_DECLARE() {
  return getToken(HqlsqlParser::T_DECLARE, 0);
}

std::vector<HqlsqlParser::Declare_stmt_itemContext *> HqlsqlParser::Declare_stmtContext::declare_stmt_item() {
  return getRuleContexts<HqlsqlParser::Declare_stmt_itemContext>();
}

HqlsqlParser::Declare_stmt_itemContext* HqlsqlParser::Declare_stmtContext::declare_stmt_item(size_t i) {
  return getRuleContext<HqlsqlParser::Declare_stmt_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Declare_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Declare_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Declare_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_stmt;
}

void HqlsqlParser::Declare_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_stmt(this);
}

void HqlsqlParser::Declare_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_stmt(this);
}


antlrcpp::Any HqlsqlParser::Declare_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_stmtContext* HqlsqlParser::declare_stmt() {
  Declare_stmtContext *_localctx = _tracker.createInstance<Declare_stmtContext>(_ctx, getState());
  enterRule(_localctx, 48, HqlsqlParser::RuleDeclare_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(958);
    match(HqlsqlParser::T_DECLARE);
    setState(959);
    declare_stmt_item();
    setState(964);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(960);
        match(HqlsqlParser::T_COMMA);
        setState(961);
        declare_stmt_item(); 
      }
      setState(966);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_blockContext ------------------------------------------------------------------

HqlsqlParser::Declare_blockContext::Declare_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Declare_blockContext::T_DECLARE() {
  return getToken(HqlsqlParser::T_DECLARE, 0);
}

std::vector<HqlsqlParser::Declare_stmt_itemContext *> HqlsqlParser::Declare_blockContext::declare_stmt_item() {
  return getRuleContexts<HqlsqlParser::Declare_stmt_itemContext>();
}

HqlsqlParser::Declare_stmt_itemContext* HqlsqlParser::Declare_blockContext::declare_stmt_item(size_t i) {
  return getRuleContext<HqlsqlParser::Declare_stmt_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Declare_blockContext::T_SEMICOLON() {
  return getTokens(HqlsqlParser::T_SEMICOLON);
}

tree::TerminalNode* HqlsqlParser::Declare_blockContext::T_SEMICOLON(size_t i) {
  return getToken(HqlsqlParser::T_SEMICOLON, i);
}


size_t HqlsqlParser::Declare_blockContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_block;
}

void HqlsqlParser::Declare_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_block(this);
}

void HqlsqlParser::Declare_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_block(this);
}


antlrcpp::Any HqlsqlParser::Declare_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_block(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_blockContext* HqlsqlParser::declare_block() {
  Declare_blockContext *_localctx = _tracker.createInstance<Declare_blockContext>(_ctx, getState());
  enterRule(_localctx, 50, HqlsqlParser::RuleDeclare_block);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(967);
    match(HqlsqlParser::T_DECLARE);
    setState(968);
    declare_stmt_item();
    setState(969);
    match(HqlsqlParser::T_SEMICOLON);
    setState(975);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(970);
        declare_stmt_item();
        setState(971);
        match(HqlsqlParser::T_SEMICOLON); 
      }
      setState(977);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_block_inplaceContext ------------------------------------------------------------------

HqlsqlParser::Declare_block_inplaceContext::Declare_block_inplaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Declare_stmt_itemContext *> HqlsqlParser::Declare_block_inplaceContext::declare_stmt_item() {
  return getRuleContexts<HqlsqlParser::Declare_stmt_itemContext>();
}

HqlsqlParser::Declare_stmt_itemContext* HqlsqlParser::Declare_block_inplaceContext::declare_stmt_item(size_t i) {
  return getRuleContext<HqlsqlParser::Declare_stmt_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Declare_block_inplaceContext::T_SEMICOLON() {
  return getTokens(HqlsqlParser::T_SEMICOLON);
}

tree::TerminalNode* HqlsqlParser::Declare_block_inplaceContext::T_SEMICOLON(size_t i) {
  return getToken(HqlsqlParser::T_SEMICOLON, i);
}


size_t HqlsqlParser::Declare_block_inplaceContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_block_inplace;
}

void HqlsqlParser::Declare_block_inplaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_block_inplace(this);
}

void HqlsqlParser::Declare_block_inplaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_block_inplace(this);
}


antlrcpp::Any HqlsqlParser::Declare_block_inplaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_block_inplace(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_block_inplaceContext* HqlsqlParser::declare_block_inplace() {
  Declare_block_inplaceContext *_localctx = _tracker.createInstance<Declare_block_inplaceContext>(_ctx, getState());
  enterRule(_localctx, 52, HqlsqlParser::RuleDeclare_block_inplace);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(978);
    declare_stmt_item();
    setState(979);
    match(HqlsqlParser::T_SEMICOLON);
    setState(985);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(980);
        declare_stmt_item();
        setState(981);
        match(HqlsqlParser::T_SEMICOLON); 
      }
      setState(987);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_stmt_itemContext ------------------------------------------------------------------

HqlsqlParser::Declare_stmt_itemContext::Declare_stmt_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Declare_cursor_itemContext* HqlsqlParser::Declare_stmt_itemContext::declare_cursor_item() {
  return getRuleContext<HqlsqlParser::Declare_cursor_itemContext>(0);
}

HqlsqlParser::Declare_condition_itemContext* HqlsqlParser::Declare_stmt_itemContext::declare_condition_item() {
  return getRuleContext<HqlsqlParser::Declare_condition_itemContext>(0);
}

HqlsqlParser::Declare_handler_itemContext* HqlsqlParser::Declare_stmt_itemContext::declare_handler_item() {
  return getRuleContext<HqlsqlParser::Declare_handler_itemContext>(0);
}

HqlsqlParser::Declare_var_itemContext* HqlsqlParser::Declare_stmt_itemContext::declare_var_item() {
  return getRuleContext<HqlsqlParser::Declare_var_itemContext>(0);
}

HqlsqlParser::Declare_temporary_table_itemContext* HqlsqlParser::Declare_stmt_itemContext::declare_temporary_table_item() {
  return getRuleContext<HqlsqlParser::Declare_temporary_table_itemContext>(0);
}


size_t HqlsqlParser::Declare_stmt_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_stmt_item;
}

void HqlsqlParser::Declare_stmt_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_stmt_item(this);
}

void HqlsqlParser::Declare_stmt_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_stmt_item(this);
}


antlrcpp::Any HqlsqlParser::Declare_stmt_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_stmt_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_stmt_itemContext* HqlsqlParser::declare_stmt_item() {
  Declare_stmt_itemContext *_localctx = _tracker.createInstance<Declare_stmt_itemContext>(_ctx, getState());
  enterRule(_localctx, 54, HqlsqlParser::RuleDeclare_stmt_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(993);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(988);
      declare_cursor_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(989);
      declare_condition_item();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(990);
      declare_handler_item();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(991);
      declare_var_item();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(992);
      declare_temporary_table_item();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_var_itemContext ------------------------------------------------------------------

HqlsqlParser::Declare_var_itemContext::Declare_var_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Declare_var_itemContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Declare_var_itemContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Declare_var_itemContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Declare_var_itemContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Declare_var_itemContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

tree::TerminalNode* HqlsqlParser::Declare_var_itemContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

std::vector<HqlsqlParser::Dtype_attrContext *> HqlsqlParser::Declare_var_itemContext::dtype_attr() {
  return getRuleContexts<HqlsqlParser::Dtype_attrContext>();
}

HqlsqlParser::Dtype_attrContext* HqlsqlParser::Declare_var_itemContext::dtype_attr(size_t i) {
  return getRuleContext<HqlsqlParser::Dtype_attrContext>(i);
}

HqlsqlParser::Dtype_defaultContext* HqlsqlParser::Declare_var_itemContext::dtype_default() {
  return getRuleContext<HqlsqlParser::Dtype_defaultContext>(0);
}

tree::TerminalNode* HqlsqlParser::Declare_var_itemContext::T_CONSTANT() {
  return getToken(HqlsqlParser::T_CONSTANT, 0);
}


size_t HqlsqlParser::Declare_var_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_var_item;
}

void HqlsqlParser::Declare_var_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_var_item(this);
}

void HqlsqlParser::Declare_var_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_var_item(this);
}


antlrcpp::Any HqlsqlParser::Declare_var_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_var_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_var_itemContext* HqlsqlParser::declare_var_item() {
  Declare_var_itemContext *_localctx = _tracker.createInstance<Declare_var_itemContext>(_ctx, getState());
  enterRule(_localctx, 56, HqlsqlParser::RuleDeclare_var_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1024);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(995);
      ident();
      setState(1000);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(996);
        match(HqlsqlParser::T_COMMA);
        setState(997);
        ident();
        setState(1002);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1004);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_AS) {
        setState(1003);
        match(HqlsqlParser::T_AS);
      }
      setState(1006);
      dtype();
      setState(1010);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1007);
          dtype_attr(); 
        }
        setState(1012);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
      }
      setState(1014);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
      case 1: {
        setState(1013);
        dtype_default();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1016);
      ident();
      setState(1017);
      match(HqlsqlParser::T_CONSTANT);
      setState(1019);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_AS) {
        setState(1018);
        match(HqlsqlParser::T_AS);
      }
      setState(1021);
      dtype();
      setState(1022);
      dtype_default();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_condition_itemContext ------------------------------------------------------------------

HqlsqlParser::Declare_condition_itemContext::Declare_condition_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Declare_condition_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Declare_condition_itemContext::T_CONDITION() {
  return getToken(HqlsqlParser::T_CONDITION, 0);
}


size_t HqlsqlParser::Declare_condition_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_condition_item;
}

void HqlsqlParser::Declare_condition_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_condition_item(this);
}

void HqlsqlParser::Declare_condition_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_condition_item(this);
}


antlrcpp::Any HqlsqlParser::Declare_condition_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_condition_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_condition_itemContext* HqlsqlParser::declare_condition_item() {
  Declare_condition_itemContext *_localctx = _tracker.createInstance<Declare_condition_itemContext>(_ctx, getState());
  enterRule(_localctx, 58, HqlsqlParser::RuleDeclare_condition_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1026);
    ident();
    setState(1027);
    match(HqlsqlParser::T_CONDITION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_cursor_itemContext ------------------------------------------------------------------

HqlsqlParser::Declare_cursor_itemContext::Declare_cursor_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Declare_cursor_itemContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_cursor_itemContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_cursor_itemContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_cursor_itemContext::T_CURSOR() {
  return getToken(HqlsqlParser::T_CURSOR, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Declare_cursor_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Declare_cursor_itemContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Declare_cursor_itemContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

HqlsqlParser::Cursor_with_returnContext* HqlsqlParser::Declare_cursor_itemContext::cursor_with_return() {
  return getRuleContext<HqlsqlParser::Cursor_with_returnContext>(0);
}

HqlsqlParser::Cursor_without_returnContext* HqlsqlParser::Declare_cursor_itemContext::cursor_without_return() {
  return getRuleContext<HqlsqlParser::Cursor_without_returnContext>(0);
}


size_t HqlsqlParser::Declare_cursor_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_cursor_item;
}

void HqlsqlParser::Declare_cursor_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_cursor_item(this);
}

void HqlsqlParser::Declare_cursor_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_cursor_item(this);
}


antlrcpp::Any HqlsqlParser::Declare_cursor_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_cursor_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_cursor_itemContext* HqlsqlParser::declare_cursor_item() {
  Declare_cursor_itemContext *_localctx = _tracker.createInstance<Declare_cursor_itemContext>(_ctx, getState());
  enterRule(_localctx, 60, HqlsqlParser::RuleDeclare_cursor_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(1029);
      match(HqlsqlParser::T_CURSOR);
      setState(1030);
      ident();
      break;
    }

    case 2: {
      setState(1031);
      ident();
      setState(1032);
      match(HqlsqlParser::T_CURSOR);
      break;
    }

    }
    setState(1038);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_WITH: {
        setState(1036);
        cursor_with_return();
        break;
      }

      case HqlsqlParser::T_WITHOUT: {
        setState(1037);
        cursor_without_return();
        break;
      }

      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_IS: {
        break;
      }

    default:
      break;
    }
    setState(1040);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_AS || _la == HqlsqlParser::T_FOR

    || _la == HqlsqlParser::T_IS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1043);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(1041);
      select_stmt();
      break;
    }

    case 2: {
      setState(1042);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_with_returnContext ------------------------------------------------------------------

HqlsqlParser::Cursor_with_returnContext::Cursor_with_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Cursor_with_returnContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::Cursor_with_returnContext::T_RETURN() {
  return getToken(HqlsqlParser::T_RETURN, 0);
}

tree::TerminalNode* HqlsqlParser::Cursor_with_returnContext::T_ONLY() {
  return getToken(HqlsqlParser::T_ONLY, 0);
}

tree::TerminalNode* HqlsqlParser::Cursor_with_returnContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

tree::TerminalNode* HqlsqlParser::Cursor_with_returnContext::T_CALLER() {
  return getToken(HqlsqlParser::T_CALLER, 0);
}

tree::TerminalNode* HqlsqlParser::Cursor_with_returnContext::T_CLIENT() {
  return getToken(HqlsqlParser::T_CLIENT, 0);
}


size_t HqlsqlParser::Cursor_with_returnContext::getRuleIndex() const {
  return HqlsqlParser::RuleCursor_with_return;
}

void HqlsqlParser::Cursor_with_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCursor_with_return(this);
}

void HqlsqlParser::Cursor_with_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCursor_with_return(this);
}


antlrcpp::Any HqlsqlParser::Cursor_with_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCursor_with_return(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cursor_with_returnContext* HqlsqlParser::cursor_with_return() {
  Cursor_with_returnContext *_localctx = _tracker.createInstance<Cursor_with_returnContext>(_ctx, getState());
  enterRule(_localctx, 62, HqlsqlParser::RuleCursor_with_return);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1045);
    match(HqlsqlParser::T_WITH);
    setState(1046);
    match(HqlsqlParser::T_RETURN);
    setState(1048);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ONLY) {
      setState(1047);
      match(HqlsqlParser::T_ONLY);
    }
    setState(1052);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_TO) {
      setState(1050);
      match(HqlsqlParser::T_TO);
      setState(1051);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_CALLER

      || _la == HqlsqlParser::T_CLIENT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_without_returnContext ------------------------------------------------------------------

HqlsqlParser::Cursor_without_returnContext::Cursor_without_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Cursor_without_returnContext::T_WITHOUT() {
  return getToken(HqlsqlParser::T_WITHOUT, 0);
}

tree::TerminalNode* HqlsqlParser::Cursor_without_returnContext::T_RETURN() {
  return getToken(HqlsqlParser::T_RETURN, 0);
}


size_t HqlsqlParser::Cursor_without_returnContext::getRuleIndex() const {
  return HqlsqlParser::RuleCursor_without_return;
}

void HqlsqlParser::Cursor_without_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCursor_without_return(this);
}

void HqlsqlParser::Cursor_without_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCursor_without_return(this);
}


antlrcpp::Any HqlsqlParser::Cursor_without_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCursor_without_return(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cursor_without_returnContext* HqlsqlParser::cursor_without_return() {
  Cursor_without_returnContext *_localctx = _tracker.createInstance<Cursor_without_returnContext>(_ctx, getState());
  enterRule(_localctx, 64, HqlsqlParser::RuleCursor_without_return);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1054);
    match(HqlsqlParser::T_WITHOUT);
    setState(1055);
    match(HqlsqlParser::T_RETURN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_handler_itemContext ------------------------------------------------------------------

HqlsqlParser::Declare_handler_itemContext::Declare_handler_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_HANDLER() {
  return getToken(HqlsqlParser::T_HANDLER, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

HqlsqlParser::Single_block_stmtContext* HqlsqlParser::Declare_handler_itemContext::single_block_stmt() {
  return getRuleContext<HqlsqlParser::Single_block_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_CONTINUE() {
  return getToken(HqlsqlParser::T_CONTINUE, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_EXIT() {
  return getToken(HqlsqlParser::T_EXIT, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_SQLEXCEPTION() {
  return getToken(HqlsqlParser::T_SQLEXCEPTION, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_SQLWARNING() {
  return getToken(HqlsqlParser::T_SQLWARNING, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_handler_itemContext::T_FOUND() {
  return getToken(HqlsqlParser::T_FOUND, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Declare_handler_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Declare_handler_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_handler_item;
}

void HqlsqlParser::Declare_handler_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_handler_item(this);
}

void HqlsqlParser::Declare_handler_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_handler_item(this);
}


antlrcpp::Any HqlsqlParser::Declare_handler_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_handler_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_handler_itemContext* HqlsqlParser::declare_handler_item() {
  Declare_handler_itemContext *_localctx = _tracker.createInstance<Declare_handler_itemContext>(_ctx, getState());
  enterRule(_localctx, 66, HqlsqlParser::RuleDeclare_handler_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1057);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_CONTINUE

    || _la == HqlsqlParser::T_EXIT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1058);
    match(HqlsqlParser::T_HANDLER);
    setState(1059);
    match(HqlsqlParser::T_FOR);
    setState(1065);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      setState(1060);
      match(HqlsqlParser::T_SQLEXCEPTION);
      break;
    }

    case 2: {
      setState(1061);
      match(HqlsqlParser::T_SQLWARNING);
      break;
    }

    case 3: {
      setState(1062);
      match(HqlsqlParser::T_NOT);
      setState(1063);
      match(HqlsqlParser::T_FOUND);
      break;
    }

    case 4: {
      setState(1064);
      ident();
      break;
    }

    }
    setState(1067);
    single_block_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_temporary_table_itemContext ------------------------------------------------------------------

HqlsqlParser::Declare_temporary_table_itemContext::Declare_temporary_table_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Declare_temporary_table_itemContext::T_TEMPORARY() {
  return getToken(HqlsqlParser::T_TEMPORARY, 0);
}

tree::TerminalNode* HqlsqlParser::Declare_temporary_table_itemContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Declare_temporary_table_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Create_table_definitionContext* HqlsqlParser::Declare_temporary_table_itemContext::create_table_definition() {
  return getRuleContext<HqlsqlParser::Create_table_definitionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Declare_temporary_table_itemContext::T_GLOBAL() {
  return getToken(HqlsqlParser::T_GLOBAL, 0);
}

HqlsqlParser::Create_table_preoptionsContext* HqlsqlParser::Declare_temporary_table_itemContext::create_table_preoptions() {
  return getRuleContext<HqlsqlParser::Create_table_preoptionsContext>(0);
}


size_t HqlsqlParser::Declare_temporary_table_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleDeclare_temporary_table_item;
}

void HqlsqlParser::Declare_temporary_table_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_temporary_table_item(this);
}

void HqlsqlParser::Declare_temporary_table_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_temporary_table_item(this);
}


antlrcpp::Any HqlsqlParser::Declare_temporary_table_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDeclare_temporary_table_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Declare_temporary_table_itemContext* HqlsqlParser::declare_temporary_table_item() {
  Declare_temporary_table_itemContext *_localctx = _tracker.createInstance<Declare_temporary_table_itemContext>(_ctx, getState());
  enterRule(_localctx, 68, HqlsqlParser::RuleDeclare_temporary_table_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1070);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_GLOBAL) {
      setState(1069);
      match(HqlsqlParser::T_GLOBAL);
    }
    setState(1072);
    match(HqlsqlParser::T_TEMPORARY);
    setState(1073);
    match(HqlsqlParser::T_TABLE);
    setState(1074);
    ident();
    setState(1076);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(1075);
      create_table_preoptions();
      break;
    }

    }
    setState(1078);
    create_table_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_table_stmtContext::Create_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Create_table_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::Create_table_definitionContext* HqlsqlParser::Create_table_stmtContext::create_table_definition() {
  return getRuleContext<HqlsqlParser::Create_table_definitionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_stmtContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_stmtContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_stmtContext::T_TEMPORARY() {
  return getToken(HqlsqlParser::T_TEMPORARY, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_stmtContext::T_EXTERNAL() {
  return getToken(HqlsqlParser::T_EXTERNAL, 0);
}


size_t HqlsqlParser::Create_table_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_stmt;
}

void HqlsqlParser::Create_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_stmt(this);
}

void HqlsqlParser::Create_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_stmtContext* HqlsqlParser::create_table_stmt() {
  Create_table_stmtContext *_localctx = _tracker.createInstance<Create_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 70, HqlsqlParser::RuleCreate_table_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1080);
    match(HqlsqlParser::T_CREATE);
    setState(1082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_TEMPORARY

    || _la == HqlsqlParser::T_EXTERNAL) {
      setState(1081);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_TEMPORARY

      || _la == HqlsqlParser::T_EXTERNAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1084);
    match(HqlsqlParser::T_TABLE);
    setState(1088);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(1085);
      match(HqlsqlParser::T_IF);
      setState(1086);
      match(HqlsqlParser::T_NOT);
      setState(1087);
      match(HqlsqlParser::T_EXISTS);
      break;
    }

    }
    setState(1090);
    table_name();
    setState(1091);
    create_table_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_local_temp_table_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_local_temp_table_stmtContext::Create_local_temp_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_local_temp_table_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_local_temp_table_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_local_temp_table_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Create_table_definitionContext* HqlsqlParser::Create_local_temp_table_stmtContext::create_table_definition() {
  return getRuleContext<HqlsqlParser::Create_table_definitionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_local_temp_table_stmtContext::T_LOCAL() {
  return getToken(HqlsqlParser::T_LOCAL, 0);
}

tree::TerminalNode* HqlsqlParser::Create_local_temp_table_stmtContext::T_TEMPORARY() {
  return getToken(HqlsqlParser::T_TEMPORARY, 0);
}

tree::TerminalNode* HqlsqlParser::Create_local_temp_table_stmtContext::T_VOLATILE() {
  return getToken(HqlsqlParser::T_VOLATILE, 0);
}

HqlsqlParser::Create_table_preoptionsContext* HqlsqlParser::Create_local_temp_table_stmtContext::create_table_preoptions() {
  return getRuleContext<HqlsqlParser::Create_table_preoptionsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_local_temp_table_stmtContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

tree::TerminalNode* HqlsqlParser::Create_local_temp_table_stmtContext::T_MULTISET() {
  return getToken(HqlsqlParser::T_MULTISET, 0);
}


size_t HqlsqlParser::Create_local_temp_table_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_local_temp_table_stmt;
}

void HqlsqlParser::Create_local_temp_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_local_temp_table_stmt(this);
}

void HqlsqlParser::Create_local_temp_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_local_temp_table_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_local_temp_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_local_temp_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_local_temp_table_stmtContext* HqlsqlParser::create_local_temp_table_stmt() {
  Create_local_temp_table_stmtContext *_localctx = _tracker.createInstance<Create_local_temp_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 72, HqlsqlParser::RuleCreate_local_temp_table_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1093);
    match(HqlsqlParser::T_CREATE);
    setState(1100);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_LOCAL: {
        setState(1094);
        match(HqlsqlParser::T_LOCAL);
        setState(1095);
        match(HqlsqlParser::T_TEMPORARY);
        break;
      }

      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_SET:
      case HqlsqlParser::T_VOLATILE: {
        setState(1097);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_MULTISET || _la == HqlsqlParser::T_SET) {
          setState(1096);
          _la = _input->LA(1);
          if (!(_la == HqlsqlParser::T_MULTISET || _la == HqlsqlParser::T_SET)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(1099);
        match(HqlsqlParser::T_VOLATILE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1102);
    match(HqlsqlParser::T_TABLE);
    setState(1103);
    ident();
    setState(1105);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(1104);
      create_table_preoptions();
      break;
    }

    }
    setState(1107);
    create_table_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_definitionContext ------------------------------------------------------------------

HqlsqlParser::Create_table_definitionContext::Create_table_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Create_table_optionsContext* HqlsqlParser::Create_table_definitionContext::create_table_options() {
  return getRuleContext<HqlsqlParser::Create_table_optionsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_definitionContext::T_LIKE() {
  return getToken(HqlsqlParser::T_LIKE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Create_table_definitionContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::Location_partContext* HqlsqlParser::Create_table_definitionContext::location_part() {
  return getRuleContext<HqlsqlParser::Location_partContext>(0);
}


size_t HqlsqlParser::Create_table_definitionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_definition;
}

void HqlsqlParser::Create_table_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_definition(this);
}

void HqlsqlParser::Create_table_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_definition(this);
}


antlrcpp::Any HqlsqlParser::Create_table_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_definition(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_definitionContext* HqlsqlParser::create_table_definition() {
  Create_table_definitionContext *_localctx = _tracker.createInstance<Create_table_definitionContext>(_ctx, getState());
  enterRule(_localctx, 74, HqlsqlParser::RuleCreate_table_definition);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1117);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1110);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
      case 1: {
        setState(1109);
        create_table_options();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1112);
      match(HqlsqlParser::T_LIKE);
      setState(1113);
      table_name();
      setState(1115);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
      case 1: {
        setState(1114);
        location_part();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_columnsContext ------------------------------------------------------------------

HqlsqlParser::Create_table_columnsContext::Create_table_columnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Create_table_columns_itemContext *> HqlsqlParser::Create_table_columnsContext::create_table_columns_item() {
  return getRuleContexts<HqlsqlParser::Create_table_columns_itemContext>();
}

HqlsqlParser::Create_table_columns_itemContext* HqlsqlParser::Create_table_columnsContext::create_table_columns_item(size_t i) {
  return getRuleContext<HqlsqlParser::Create_table_columns_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_table_columnsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Create_table_columnsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

HqlsqlParser::Constraint_specificationContext* HqlsqlParser::Create_table_columnsContext::constraint_specification() {
  return getRuleContext<HqlsqlParser::Constraint_specificationContext>(0);
}


size_t HqlsqlParser::Create_table_columnsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_columns;
}

void HqlsqlParser::Create_table_columnsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_columns(this);
}

void HqlsqlParser::Create_table_columnsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_columns(this);
}


antlrcpp::Any HqlsqlParser::Create_table_columnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_columns(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_columnsContext* HqlsqlParser::create_table_columns() {
  Create_table_columnsContext *_localctx = _tracker.createInstance<Create_table_columnsContext>(_ctx, getState());
  enterRule(_localctx, 76, HqlsqlParser::RuleCreate_table_columns);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1119);
    create_table_columns_item();
    setState(1124);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1120);
        match(HqlsqlParser::T_COMMA);
        setState(1121);
        create_table_columns_item(); 
      }
      setState(1126);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
    setState(1128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_COMMA) {
      setState(1127);
      constraint_specification();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_columns_itemContext ------------------------------------------------------------------

HqlsqlParser::Create_table_columns_itemContext::Create_table_columns_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Column_nameContext* HqlsqlParser::Create_table_columns_itemContext::column_name() {
  return getRuleContext<HqlsqlParser::Column_nameContext>(0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Create_table_columns_itemContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

HqlsqlParser::Column_constrains_specificationContext* HqlsqlParser::Create_table_columns_itemContext::column_constrains_specification() {
  return getRuleContext<HqlsqlParser::Column_constrains_specificationContext>(0);
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Create_table_columns_itemContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}


size_t HqlsqlParser::Create_table_columns_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_columns_item;
}

void HqlsqlParser::Create_table_columns_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_columns_item(this);
}

void HqlsqlParser::Create_table_columns_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_columns_item(this);
}


antlrcpp::Any HqlsqlParser::Create_table_columns_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_columns_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_columns_itemContext* HqlsqlParser::create_table_columns_item() {
  Create_table_columns_itemContext *_localctx = _tracker.createInstance<Create_table_columns_itemContext>(_ctx, getState());
  enterRule(_localctx, 78, HqlsqlParser::RuleCreate_table_columns_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1130);
    column_name();
    setState(1131);
    dtype();
    setState(1133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & ((1ULL << (HqlsqlParser::T_DEFAULT - 72))
      | (1ULL << (HqlsqlParser::T_DISABLE - 72))
      | (1ULL << (HqlsqlParser::T_CHECK - 72)))) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 201)) & ((1ULL << (HqlsqlParser::T_NOT - 201))
      | (1ULL << (HqlsqlParser::T_NULL - 201))
      | (1ULL << (HqlsqlParser::T_PRIMARY - 201)))) != 0) || _la == HqlsqlParser::T_UNIQUE) {
      setState(1132);
      column_constrains_specification();
    }
    setState(1136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_COMMENT) {
      setState(1135);
      comment_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_nameContext ------------------------------------------------------------------

HqlsqlParser::Column_nameContext::Column_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Column_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Column_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleColumn_name;
}

void HqlsqlParser::Column_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_name(this);
}

void HqlsqlParser::Column_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_name(this);
}


antlrcpp::Any HqlsqlParser::Column_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitColumn_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Column_nameContext* HqlsqlParser::column_name() {
  Column_nameContext *_localctx = _tracker.createInstance<Column_nameContext>(_ctx, getState());
  enterRule(_localctx, 80, HqlsqlParser::RuleColumn_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1138);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Old_column_nameContext ------------------------------------------------------------------

HqlsqlParser::Old_column_nameContext::Old_column_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Old_column_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Old_column_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleOld_column_name;
}

void HqlsqlParser::Old_column_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOld_column_name(this);
}

void HqlsqlParser::Old_column_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOld_column_name(this);
}


antlrcpp::Any HqlsqlParser::Old_column_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitOld_column_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Old_column_nameContext* HqlsqlParser::old_column_name() {
  Old_column_nameContext *_localctx = _tracker.createInstance<Old_column_nameContext>(_ctx, getState());
  enterRule(_localctx, 82, HqlsqlParser::RuleOld_column_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1140);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- New_column_nameContext ------------------------------------------------------------------

HqlsqlParser::New_column_nameContext::New_column_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::New_column_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::New_column_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleNew_column_name;
}

void HqlsqlParser::New_column_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNew_column_name(this);
}

void HqlsqlParser::New_column_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNew_column_name(this);
}


antlrcpp::Any HqlsqlParser::New_column_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitNew_column_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::New_column_nameContext* HqlsqlParser::new_column_name() {
  New_column_nameContext *_localctx = _tracker.createInstance<New_column_nameContext>(_ctx, getState());
  enterRule(_localctx, 84, HqlsqlParser::RuleNew_column_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1142);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraint_specificationContext ------------------------------------------------------------------

HqlsqlParser::Constraint_specificationContext::Constraint_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Constraint_specContext *> HqlsqlParser::Constraint_specificationContext::constraint_spec() {
  return getRuleContexts<HqlsqlParser::Constraint_specContext>();
}

HqlsqlParser::Constraint_specContext* HqlsqlParser::Constraint_specificationContext::constraint_spec(size_t i) {
  return getRuleContext<HqlsqlParser::Constraint_specContext>(i);
}


size_t HqlsqlParser::Constraint_specificationContext::getRuleIndex() const {
  return HqlsqlParser::RuleConstraint_specification;
}

void HqlsqlParser::Constraint_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint_specification(this);
}

void HqlsqlParser::Constraint_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint_specification(this);
}


antlrcpp::Any HqlsqlParser::Constraint_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitConstraint_specification(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Constraint_specificationContext* HqlsqlParser::constraint_specification() {
  Constraint_specificationContext *_localctx = _tracker.createInstance<Constraint_specificationContext>(_ctx, getState());
  enterRule(_localctx, 86, HqlsqlParser::RuleConstraint_specification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1144);
      constraint_spec();
      setState(1147); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == HqlsqlParser::T_COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraint_specContext ------------------------------------------------------------------

HqlsqlParser::Constraint_specContext::Constraint_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_PRIMARY() {
  return getToken(HqlsqlParser::T_PRIMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_KEY() {
  return getToken(HqlsqlParser::T_KEY, 0);
}

std::vector<HqlsqlParser::Paren_column_listContext *> HqlsqlParser::Constraint_specContext::paren_column_list() {
  return getRuleContexts<HqlsqlParser::Paren_column_listContext>();
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Constraint_specContext::paren_column_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_DISABLE() {
  return getToken(HqlsqlParser::T_DISABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_NOVALIDATE() {
  return getToken(HqlsqlParser::T_NOVALIDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_RELY() {
  return getToken(HqlsqlParser::T_RELY, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_DIV_SIGN() {
  return getToken(HqlsqlParser::T_DIV_SIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_NORELY() {
  return getToken(HqlsqlParser::T_NORELY, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_CONSTRAINT() {
  return getToken(HqlsqlParser::T_CONSTRAINT, 0);
}

HqlsqlParser::Constraint_nameContext* HqlsqlParser::Constraint_specContext::constraint_name() {
  return getRuleContext<HqlsqlParser::Constraint_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_FOREIGN() {
  return getToken(HqlsqlParser::T_FOREIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_REFERENCES() {
  return getToken(HqlsqlParser::T_REFERENCES, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Constraint_specContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_UNIQUE() {
  return getToken(HqlsqlParser::T_UNIQUE, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_CHECK() {
  return getToken(HqlsqlParser::T_CHECK, 0);
}

tree::TerminalNode* HqlsqlParser::Constraint_specContext::T_ENABLE() {
  return getToken(HqlsqlParser::T_ENABLE, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Constraint_specContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Constraint_specContext::getRuleIndex() const {
  return HqlsqlParser::RuleConstraint_spec;
}

void HqlsqlParser::Constraint_specContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint_spec(this);
}

void HqlsqlParser::Constraint_specContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint_spec(this);
}


antlrcpp::Any HqlsqlParser::Constraint_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitConstraint_spec(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Constraint_specContext* HqlsqlParser::constraint_spec() {
  Constraint_specContext *_localctx = _tracker.createInstance<Constraint_specContext>(_ctx, getState());
  enterRule(_localctx, 88, HqlsqlParser::RuleConstraint_spec);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1195);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1149);
      match(HqlsqlParser::T_COMMA);
      setState(1150);
      match(HqlsqlParser::T_PRIMARY);
      setState(1151);
      match(HqlsqlParser::T_KEY);
      setState(1152);
      paren_column_list();
      setState(1153);
      match(HqlsqlParser::T_DISABLE);
      setState(1154);
      match(HqlsqlParser::T_NOVALIDATE);
      setState(1155);
      match(HqlsqlParser::T_RELY);
      setState(1156);
      match(HqlsqlParser::T_DIV_SIGN);
      setState(1157);
      match(HqlsqlParser::T_NORELY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1159);
      match(HqlsqlParser::T_COMMA);
      setState(1160);
      match(HqlsqlParser::T_CONSTRAINT);
      setState(1161);
      constraint_name();
      setState(1162);
      match(HqlsqlParser::T_FOREIGN);
      setState(1163);
      match(HqlsqlParser::T_KEY);
      setState(1164);
      paren_column_list();
      setState(1165);
      match(HqlsqlParser::T_REFERENCES);
      setState(1166);
      table_name();
      setState(1167);
      paren_column_list();
      setState(1168);
      match(HqlsqlParser::T_DISABLE);
      setState(1169);
      match(HqlsqlParser::T_NOVALIDATE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1171);
      match(HqlsqlParser::T_COMMA);
      setState(1172);
      match(HqlsqlParser::T_CONSTRAINT);
      setState(1173);
      constraint_name();
      setState(1174);
      match(HqlsqlParser::T_UNIQUE);
      setState(1175);
      paren_column_list();
      setState(1176);
      match(HqlsqlParser::T_DISABLE);
      setState(1177);
      match(HqlsqlParser::T_NOVALIDATE);
      setState(1178);
      match(HqlsqlParser::T_RELY);
      setState(1179);
      match(HqlsqlParser::T_DIV_SIGN);
      setState(1180);
      match(HqlsqlParser::T_NORELY);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1182);
      match(HqlsqlParser::T_COMMA);
      setState(1183);
      match(HqlsqlParser::T_CONSTRAINT);
      setState(1184);
      constraint_name();
      setState(1185);
      match(HqlsqlParser::T_CHECK);
      setState(1187);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
      case 1: {
        setState(1186);
        expr(0);
        break;
      }

      }
      setState(1189);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ENABLE

      || _la == HqlsqlParser::T_DISABLE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1190);
      match(HqlsqlParser::T_NOVALIDATE);
      setState(1191);
      match(HqlsqlParser::T_RELY);
      setState(1192);
      match(HqlsqlParser::T_DIV_SIGN);
      setState(1193);
      match(HqlsqlParser::T_NORELY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraint_nameContext ------------------------------------------------------------------

HqlsqlParser::Constraint_nameContext::Constraint_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Constraint_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Constraint_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleConstraint_name;
}

void HqlsqlParser::Constraint_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint_name(this);
}

void HqlsqlParser::Constraint_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint_name(this);
}


antlrcpp::Any HqlsqlParser::Constraint_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitConstraint_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Constraint_nameContext* HqlsqlParser::constraint_name() {
  Constraint_nameContext *_localctx = _tracker.createInstance<Constraint_nameContext>(_ctx, getState());
  enterRule(_localctx, 90, HqlsqlParser::RuleConstraint_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1197);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_column_listContext ------------------------------------------------------------------

HqlsqlParser::Paren_column_listContext::Paren_column_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Paren_column_listContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Column_name_listContext* HqlsqlParser::Paren_column_listContext::column_name_list() {
  return getRuleContext<HqlsqlParser::Column_name_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Paren_column_listContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Paren_column_listContext::getRuleIndex() const {
  return HqlsqlParser::RuleParen_column_list;
}

void HqlsqlParser::Paren_column_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_column_list(this);
}

void HqlsqlParser::Paren_column_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_column_list(this);
}


antlrcpp::Any HqlsqlParser::Paren_column_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitParen_column_list(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::paren_column_list() {
  Paren_column_listContext *_localctx = _tracker.createInstance<Paren_column_listContext>(_ctx, getState());
  enterRule(_localctx, 92, HqlsqlParser::RuleParen_column_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1199);
    match(HqlsqlParser::T_OPEN_P);
    setState(1200);
    column_name_list();
    setState(1201);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_name_listContext ------------------------------------------------------------------

HqlsqlParser::Column_name_listContext::Column_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Column_name_eleContext *> HqlsqlParser::Column_name_listContext::column_name_ele() {
  return getRuleContexts<HqlsqlParser::Column_name_eleContext>();
}

HqlsqlParser::Column_name_eleContext* HqlsqlParser::Column_name_listContext::column_name_ele(size_t i) {
  return getRuleContext<HqlsqlParser::Column_name_eleContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Column_name_listContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Column_name_listContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Column_name_listContext::getRuleIndex() const {
  return HqlsqlParser::RuleColumn_name_list;
}

void HqlsqlParser::Column_name_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_name_list(this);
}

void HqlsqlParser::Column_name_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_name_list(this);
}


antlrcpp::Any HqlsqlParser::Column_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitColumn_name_list(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Column_name_listContext* HqlsqlParser::column_name_list() {
  Column_name_listContext *_localctx = _tracker.createInstance<Column_name_listContext>(_ctx, getState());
  enterRule(_localctx, 94, HqlsqlParser::RuleColumn_name_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1203);
    column_name_ele();
    setState(1208);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1204);
        match(HqlsqlParser::T_COMMA);
        setState(1205);
        column_name_ele(); 
      }
      setState(1210);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_name_eleContext ------------------------------------------------------------------

HqlsqlParser::Column_name_eleContext::Column_name_eleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Column_nameContext* HqlsqlParser::Column_name_eleContext::column_name() {
  return getRuleContext<HqlsqlParser::Column_nameContext>(0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Column_name_eleContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Column_name_eleContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Column_name_eleContext::T_ASC() {
  return getToken(HqlsqlParser::T_ASC, 0);
}

tree::TerminalNode* HqlsqlParser::Column_name_eleContext::T_DESC() {
  return getToken(HqlsqlParser::T_DESC, 0);
}


size_t HqlsqlParser::Column_name_eleContext::getRuleIndex() const {
  return HqlsqlParser::RuleColumn_name_ele;
}

void HqlsqlParser::Column_name_eleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_name_ele(this);
}

void HqlsqlParser::Column_name_eleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_name_ele(this);
}


antlrcpp::Any HqlsqlParser::Column_name_eleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitColumn_name_ele(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Column_name_eleContext* HqlsqlParser::column_name_ele() {
  Column_name_eleContext *_localctx = _tracker.createInstance<Column_name_eleContext>(_ctx, getState());
  enterRule(_localctx, 96, HqlsqlParser::RuleColumn_name_ele);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    column_name();
    setState(1213);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      setState(1212);
      dtype();
      break;
    }

    }
    setState(1216);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      setState(1215);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(1219);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      setState(1218);
      comment_part();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_col_valuesContext ------------------------------------------------------------------

HqlsqlParser::Paren_col_valuesContext::Paren_col_valuesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Paren_col_valuesContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Paren_col_valuesContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Paren_col_valuesContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Paren_col_valuesContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Paren_col_valuesContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Paren_col_valuesContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Paren_col_valuesContext::getRuleIndex() const {
  return HqlsqlParser::RuleParen_col_values;
}

void HqlsqlParser::Paren_col_valuesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_col_values(this);
}

void HqlsqlParser::Paren_col_valuesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_col_values(this);
}


antlrcpp::Any HqlsqlParser::Paren_col_valuesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitParen_col_values(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Paren_col_valuesContext* HqlsqlParser::paren_col_values() {
  Paren_col_valuesContext *_localctx = _tracker.createInstance<Paren_col_valuesContext>(_ctx, getState());
  enterRule(_localctx, 98, HqlsqlParser::RuleParen_col_values);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1221);
    match(HqlsqlParser::T_OPEN_P);
    setState(1222);
    expr(0);
    setState(1227);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(1223);
      match(HqlsqlParser::T_COMMA);
      setState(1224);
      expr(0);
      setState(1229);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1230);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_constrains_specificationContext ------------------------------------------------------------------

HqlsqlParser::Column_constrains_specificationContext::Column_constrains_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_PRIMARY() {
  return getToken(HqlsqlParser::T_PRIMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_KEY() {
  return getToken(HqlsqlParser::T_KEY, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_UNIQUE() {
  return getToken(HqlsqlParser::T_UNIQUE, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_DEFAULT() {
  return getToken(HqlsqlParser::T_DEFAULT, 0);
}

HqlsqlParser::Default_valueContext* HqlsqlParser::Column_constrains_specificationContext::default_value() {
  return getRuleContext<HqlsqlParser::Default_valueContext>(0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_CHECK() {
  return getToken(HqlsqlParser::T_CHECK, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_ENABLE() {
  return getToken(HqlsqlParser::T_ENABLE, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Column_constrains_specificationContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_DISABLE() {
  return getToken(HqlsqlParser::T_DISABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_NOVALIDATE() {
  return getToken(HqlsqlParser::T_NOVALIDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_RELY() {
  return getToken(HqlsqlParser::T_RELY, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_DIV_SIGN() {
  return getToken(HqlsqlParser::T_DIV_SIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Column_constrains_specificationContext::T_NORELY() {
  return getToken(HqlsqlParser::T_NORELY, 0);
}


size_t HqlsqlParser::Column_constrains_specificationContext::getRuleIndex() const {
  return HqlsqlParser::RuleColumn_constrains_specification;
}

void HqlsqlParser::Column_constrains_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_constrains_specification(this);
}

void HqlsqlParser::Column_constrains_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_constrains_specification(this);
}


antlrcpp::Any HqlsqlParser::Column_constrains_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitColumn_constrains_specification(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Column_constrains_specificationContext* HqlsqlParser::column_constrains_specification() {
  Column_constrains_specificationContext *_localctx = _tracker.createInstance<Column_constrains_specificationContext>(_ctx, getState());
  enterRule(_localctx, 100, HqlsqlParser::RuleColumn_constrains_specification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1251);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_PRIMARY: {
        enterOuterAlt(_localctx, 1);
        setState(1232);
        match(HqlsqlParser::T_PRIMARY);
        setState(1233);
        match(HqlsqlParser::T_KEY);
        break;
      }

      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NULL: {
        enterOuterAlt(_localctx, 2);
        setState(1235);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_NOT) {
          setState(1234);
          match(HqlsqlParser::T_NOT);
        }
        setState(1237);
        match(HqlsqlParser::T_NULL);
        break;
      }

      case HqlsqlParser::T_UNIQUE: {
        enterOuterAlt(_localctx, 3);
        setState(1238);
        match(HqlsqlParser::T_UNIQUE);
        break;
      }

      case HqlsqlParser::T_DEFAULT: {
        enterOuterAlt(_localctx, 4);
        setState(1239);
        match(HqlsqlParser::T_DEFAULT);
        setState(1240);
        default_value();
        break;
      }

      case HqlsqlParser::T_CHECK: {
        enterOuterAlt(_localctx, 5);
        setState(1241);
        match(HqlsqlParser::T_CHECK);
        setState(1243);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
        case 1: {
          setState(1242);
          expr(0);
          break;
        }

        }
        setState(1245);
        match(HqlsqlParser::T_ENABLE);
        break;
      }

      case HqlsqlParser::T_DISABLE: {
        enterOuterAlt(_localctx, 6);
        setState(1246);
        match(HqlsqlParser::T_DISABLE);
        setState(1247);
        match(HqlsqlParser::T_NOVALIDATE);
        setState(1248);
        match(HqlsqlParser::T_RELY);
        setState(1249);
        match(HqlsqlParser::T_DIV_SIGN);
        setState(1250);
        match(HqlsqlParser::T_NORELY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_valueContext ------------------------------------------------------------------

HqlsqlParser::Default_valueContext::Default_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Default_valueContext::T_LITERAL() {
  return getToken(HqlsqlParser::T_LITERAL, 0);
}

tree::TerminalNode* HqlsqlParser::Default_valueContext::T_CURRENT_USER() {
  return getToken(HqlsqlParser::T_CURRENT_USER, 0);
}

tree::TerminalNode* HqlsqlParser::Default_valueContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Default_valueContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Default_valueContext::T_CURRENT_DATE() {
  return getToken(HqlsqlParser::T_CURRENT_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Default_valueContext::T_CURRENT_TIMESTAMP() {
  return getToken(HqlsqlParser::T_CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* HqlsqlParser::Default_valueContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}


size_t HqlsqlParser::Default_valueContext::getRuleIndex() const {
  return HqlsqlParser::RuleDefault_value;
}

void HqlsqlParser::Default_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_value(this);
}

void HqlsqlParser::Default_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_value(this);
}


antlrcpp::Any HqlsqlParser::Default_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDefault_value(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Default_valueContext* HqlsqlParser::default_value() {
  Default_valueContext *_localctx = _tracker.createInstance<Default_valueContext>(_ctx, getState());
  enterRule(_localctx, 102, HqlsqlParser::RuleDefault_value);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1264);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1253);
        match(HqlsqlParser::T_LITERAL);
        break;
      }

      case HqlsqlParser::T_CURRENT_USER: {
        enterOuterAlt(_localctx, 2);
        setState(1254);
        match(HqlsqlParser::T_CURRENT_USER);
        setState(1255);
        match(HqlsqlParser::T_OPEN_P);
        setState(1256);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

      case HqlsqlParser::T_CURRENT_DATE: {
        enterOuterAlt(_localctx, 3);
        setState(1257);
        match(HqlsqlParser::T_CURRENT_DATE);
        setState(1258);
        match(HqlsqlParser::T_OPEN_P);
        setState(1259);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

      case HqlsqlParser::T_CURRENT_TIMESTAMP: {
        enterOuterAlt(_localctx, 4);
        setState(1260);
        match(HqlsqlParser::T_CURRENT_TIMESTAMP);
        setState(1261);
        match(HqlsqlParser::T_OPEN_P);
        setState(1262);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

      case HqlsqlParser::T_NULL: {
        enterOuterAlt(_localctx, 5);
        setState(1263);
        match(HqlsqlParser::T_NULL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_column_commentContext ------------------------------------------------------------------

HqlsqlParser::Create_table_column_commentContext::Create_table_column_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_column_commentContext::T_COMMENT() {
  return getToken(HqlsqlParser::T_COMMENT, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Create_table_column_commentContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Create_table_column_commentContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_column_comment;
}

void HqlsqlParser::Create_table_column_commentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_column_comment(this);
}

void HqlsqlParser::Create_table_column_commentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_column_comment(this);
}


antlrcpp::Any HqlsqlParser::Create_table_column_commentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_column_comment(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_column_commentContext* HqlsqlParser::create_table_column_comment() {
  Create_table_column_commentContext *_localctx = _tracker.createInstance<Create_table_column_commentContext>(_ctx, getState());
  enterRule(_localctx, 104, HqlsqlParser::RuleCreate_table_column_comment);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1266);
    match(HqlsqlParser::T_COMMENT);
    setState(1267);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_column_consContext ------------------------------------------------------------------

HqlsqlParser::Create_table_column_consContext::Create_table_column_consContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_PRIMARY() {
  return getToken(HqlsqlParser::T_PRIMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_KEY() {
  return getToken(HqlsqlParser::T_KEY, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_table_column_consContext::T_OPEN_P() {
  return getTokens(HqlsqlParser::T_OPEN_P);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_OPEN_P(size_t i) {
  return getToken(HqlsqlParser::T_OPEN_P, i);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Create_table_column_consContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_table_column_consContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_table_column_consContext::T_CLOSE_P() {
  return getTokens(HqlsqlParser::T_CLOSE_P);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_CLOSE_P(size_t i) {
  return getToken(HqlsqlParser::T_CLOSE_P, i);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_CLUSTERED() {
  return getToken(HqlsqlParser::T_CLUSTERED, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_table_column_consContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_ENABLE() {
  return getToken(HqlsqlParser::T_ENABLE, 0);
}

HqlsqlParser::Index_storage_clauseContext* HqlsqlParser::Create_table_column_consContext::index_storage_clause() {
  return getRuleContext<HqlsqlParser::Index_storage_clauseContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_table_column_consContext::T_ASC() {
  return getTokens(HqlsqlParser::T_ASC);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_ASC(size_t i) {
  return getToken(HqlsqlParser::T_ASC, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_table_column_consContext::T_DESC() {
  return getTokens(HqlsqlParser::T_DESC);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_DESC(size_t i) {
  return getToken(HqlsqlParser::T_DESC, i);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_FOREIGN() {
  return getToken(HqlsqlParser::T_FOREIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_column_consContext::T_REFERENCES() {
  return getToken(HqlsqlParser::T_REFERENCES, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Create_table_column_consContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

std::vector<HqlsqlParser::Create_table_fk_actionContext *> HqlsqlParser::Create_table_column_consContext::create_table_fk_action() {
  return getRuleContexts<HqlsqlParser::Create_table_fk_actionContext>();
}

HqlsqlParser::Create_table_fk_actionContext* HqlsqlParser::Create_table_column_consContext::create_table_fk_action(size_t i) {
  return getRuleContext<HqlsqlParser::Create_table_fk_actionContext>(i);
}


size_t HqlsqlParser::Create_table_column_consContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_column_cons;
}

void HqlsqlParser::Create_table_column_consContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_column_cons(this);
}

void HqlsqlParser::Create_table_column_consContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_column_cons(this);
}


antlrcpp::Any HqlsqlParser::Create_table_column_consContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_column_cons(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_column_consContext* HqlsqlParser::create_table_column_cons() {
  Create_table_column_consContext *_localctx = _tracker.createInstance<Create_table_column_consContext>(_ctx, getState());
  enterRule(_localctx, 106, HqlsqlParser::RuleCreate_table_column_cons);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1326);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_PRIMARY: {
        enterOuterAlt(_localctx, 1);
        setState(1269);
        match(HqlsqlParser::T_PRIMARY);
        setState(1270);
        match(HqlsqlParser::T_KEY);
        setState(1272);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_CLUSTERED) {
          setState(1271);
          match(HqlsqlParser::T_CLUSTERED);
        }
        setState(1274);
        match(HqlsqlParser::T_OPEN_P);
        setState(1275);
        ident();
        setState(1277);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC) {
          setState(1276);
          _la = _input->LA(1);
          if (!(_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(1286);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(1279);
          match(HqlsqlParser::T_COMMA);
          setState(1280);
          ident();
          setState(1282);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC) {
            setState(1281);
            _la = _input->LA(1);
            if (!(_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
          }
          setState(1288);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1289);
        match(HqlsqlParser::T_CLOSE_P);
        setState(1291);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_ENABLE) {
          setState(1290);
          match(HqlsqlParser::T_ENABLE);
        }
        setState(1294);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_WITH) {
          setState(1293);
          index_storage_clause();
        }
        break;
      }

      case HqlsqlParser::T_FOREIGN: {
        enterOuterAlt(_localctx, 2);
        setState(1296);
        match(HqlsqlParser::T_FOREIGN);
        setState(1297);
        match(HqlsqlParser::T_KEY);
        setState(1298);
        match(HqlsqlParser::T_OPEN_P);
        setState(1299);
        ident();
        setState(1304);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(1300);
          match(HqlsqlParser::T_COMMA);
          setState(1301);
          ident();
          setState(1306);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1307);
        match(HqlsqlParser::T_CLOSE_P);
        setState(1308);
        match(HqlsqlParser::T_REFERENCES);
        setState(1309);
        table_name();
        setState(1310);
        match(HqlsqlParser::T_OPEN_P);
        setState(1311);
        ident();
        setState(1316);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(1312);
          match(HqlsqlParser::T_COMMA);
          setState(1313);
          ident();
          setState(1318);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1319);
        match(HqlsqlParser::T_CLOSE_P);
        setState(1323);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_ON) {
          setState(1320);
          create_table_fk_action();
          setState(1325);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_fk_actionContext ------------------------------------------------------------------

HqlsqlParser::Create_table_fk_actionContext::Create_table_fk_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_UPDATE() {
  return getToken(HqlsqlParser::T_UPDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_DELETE() {
  return getToken(HqlsqlParser::T_DELETE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_NO() {
  return getToken(HqlsqlParser::T_NO, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_ACTION() {
  return getToken(HqlsqlParser::T_ACTION, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_RESTRICT() {
  return getToken(HqlsqlParser::T_RESTRICT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_DEFAULT() {
  return getToken(HqlsqlParser::T_DEFAULT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_fk_actionContext::T_CASCADE() {
  return getToken(HqlsqlParser::T_CASCADE, 0);
}


size_t HqlsqlParser::Create_table_fk_actionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_fk_action;
}

void HqlsqlParser::Create_table_fk_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_fk_action(this);
}

void HqlsqlParser::Create_table_fk_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_fk_action(this);
}


antlrcpp::Any HqlsqlParser::Create_table_fk_actionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_fk_action(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_fk_actionContext* HqlsqlParser::create_table_fk_action() {
  Create_table_fk_actionContext *_localctx = _tracker.createInstance<Create_table_fk_actionContext>(_ctx, getState());
  enterRule(_localctx, 108, HqlsqlParser::RuleCreate_table_fk_action);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1328);
    match(HqlsqlParser::T_ON);
    setState(1329);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_DELETE || _la == HqlsqlParser::T_UPDATE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1338);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(1330);
      match(HqlsqlParser::T_NO);
      setState(1331);
      match(HqlsqlParser::T_ACTION);
      break;
    }

    case 2: {
      setState(1332);
      match(HqlsqlParser::T_RESTRICT);
      break;
    }

    case 3: {
      setState(1333);
      match(HqlsqlParser::T_SET);
      setState(1334);
      match(HqlsqlParser::T_NULL);
      break;
    }

    case 4: {
      setState(1335);
      match(HqlsqlParser::T_SET);
      setState(1336);
      match(HqlsqlParser::T_DEFAULT);
      break;
    }

    case 5: {
      setState(1337);
      match(HqlsqlParser::T_CASCADE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_preoptionsContext ------------------------------------------------------------------

HqlsqlParser::Create_table_preoptionsContext::Create_table_preoptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Create_table_preoptions_itemContext *> HqlsqlParser::Create_table_preoptionsContext::create_table_preoptions_item() {
  return getRuleContexts<HqlsqlParser::Create_table_preoptions_itemContext>();
}

HqlsqlParser::Create_table_preoptions_itemContext* HqlsqlParser::Create_table_preoptionsContext::create_table_preoptions_item(size_t i) {
  return getRuleContext<HqlsqlParser::Create_table_preoptions_itemContext>(i);
}


size_t HqlsqlParser::Create_table_preoptionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_preoptions;
}

void HqlsqlParser::Create_table_preoptionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_preoptions(this);
}

void HqlsqlParser::Create_table_preoptionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_preoptions(this);
}


antlrcpp::Any HqlsqlParser::Create_table_preoptionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_preoptions(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_preoptionsContext* HqlsqlParser::create_table_preoptions() {
  Create_table_preoptionsContext *_localctx = _tracker.createInstance<Create_table_preoptionsContext>(_ctx, getState());
  enterRule(_localctx, 110, HqlsqlParser::RuleCreate_table_preoptions);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1341); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1340);
              create_table_preoptions_item();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1343); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_preoptions_itemContext ------------------------------------------------------------------

HqlsqlParser::Create_table_preoptions_itemContext::Create_table_preoptions_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_preoptions_itemContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}

HqlsqlParser::Create_table_preoptions_td_itemContext* HqlsqlParser::Create_table_preoptions_itemContext::create_table_preoptions_td_item() {
  return getRuleContext<HqlsqlParser::Create_table_preoptions_td_itemContext>(0);
}

HqlsqlParser::Create_table_options_hive_itemContext* HqlsqlParser::Create_table_preoptions_itemContext::create_table_options_hive_item() {
  return getRuleContext<HqlsqlParser::Create_table_options_hive_itemContext>(0);
}


size_t HqlsqlParser::Create_table_preoptions_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_preoptions_item;
}

void HqlsqlParser::Create_table_preoptions_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_preoptions_item(this);
}

void HqlsqlParser::Create_table_preoptions_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_preoptions_item(this);
}


antlrcpp::Any HqlsqlParser::Create_table_preoptions_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_preoptions_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_preoptions_itemContext* HqlsqlParser::create_table_preoptions_item() {
  Create_table_preoptions_itemContext *_localctx = _tracker.createInstance<Create_table_preoptions_itemContext>(_ctx, getState());
  enterRule(_localctx, 112, HqlsqlParser::RuleCreate_table_preoptions_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1348);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_COMMA: {
        enterOuterAlt(_localctx, 1);
        setState(1345);
        match(HqlsqlParser::T_COMMA);
        setState(1346);
        create_table_preoptions_td_item();
        break;
      }

      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_STORED: {
        enterOuterAlt(_localctx, 2);
        setState(1347);
        create_table_options_hive_item();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_preoptions_td_itemContext ------------------------------------------------------------------

HqlsqlParser::Create_table_preoptions_td_itemContext::Create_table_preoptions_td_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_preoptions_td_itemContext::T_LOG() {
  return getToken(HqlsqlParser::T_LOG, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_preoptions_td_itemContext::T_FALLBACK() {
  return getToken(HqlsqlParser::T_FALLBACK, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_preoptions_td_itemContext::T_NO() {
  return getToken(HqlsqlParser::T_NO, 0);
}


size_t HqlsqlParser::Create_table_preoptions_td_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_preoptions_td_item;
}

void HqlsqlParser::Create_table_preoptions_td_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_preoptions_td_item(this);
}

void HqlsqlParser::Create_table_preoptions_td_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_preoptions_td_item(this);
}


antlrcpp::Any HqlsqlParser::Create_table_preoptions_td_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_preoptions_td_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_preoptions_td_itemContext* HqlsqlParser::create_table_preoptions_td_item() {
  Create_table_preoptions_td_itemContext *_localctx = _tracker.createInstance<Create_table_preoptions_td_itemContext>(_ctx, getState());
  enterRule(_localctx, 114, HqlsqlParser::RuleCreate_table_preoptions_td_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_NO) {
      setState(1350);
      match(HqlsqlParser::T_NO);
    }
    setState(1353);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_FALLBACK || _la == HqlsqlParser::T_LOG)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_optionsContext ------------------------------------------------------------------

HqlsqlParser::Create_table_optionsContext::Create_table_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Create_table_optionContext *> HqlsqlParser::Create_table_optionsContext::create_table_option() {
  return getRuleContexts<HqlsqlParser::Create_table_optionContext>();
}

HqlsqlParser::Create_table_optionContext* HqlsqlParser::Create_table_optionsContext::create_table_option(size_t i) {
  return getRuleContext<HqlsqlParser::Create_table_optionContext>(i);
}


size_t HqlsqlParser::Create_table_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_options;
}

void HqlsqlParser::Create_table_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_options(this);
}

void HqlsqlParser::Create_table_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_options(this);
}


antlrcpp::Any HqlsqlParser::Create_table_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_optionsContext* HqlsqlParser::create_table_options() {
  Create_table_optionsContext *_localctx = _tracker.createInstance<Create_table_optionsContext>(_ctx, getState());
  enterRule(_localctx, 116, HqlsqlParser::RuleCreate_table_options);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1356); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1355);
              create_table_option();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1358); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_optionContext ------------------------------------------------------------------

HqlsqlParser::Create_table_optionContext::Create_table_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_optionContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Create_table_columnsContext* HqlsqlParser::Create_table_optionContext::create_table_columns() {
  return getRuleContext<HqlsqlParser::Create_table_columnsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_optionContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Create_table_optionContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}

HqlsqlParser::Partition_by_partContext* HqlsqlParser::Create_table_optionContext::partition_by_part() {
  return getRuleContext<HqlsqlParser::Partition_by_partContext>(0);
}

HqlsqlParser::Cluster_by_partContext* HqlsqlParser::Create_table_optionContext::cluster_by_part() {
  return getRuleContext<HqlsqlParser::Cluster_by_partContext>(0);
}

HqlsqlParser::Skewed_by_partContext* HqlsqlParser::Create_table_optionContext::skewed_by_part() {
  return getRuleContext<HqlsqlParser::Skewed_by_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_optionContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::Col_valuesContext* HqlsqlParser::Create_table_optionContext::col_values() {
  return getRuleContext<HqlsqlParser::Col_valuesContext>(0);
}

HqlsqlParser::Stored_as_partContext* HqlsqlParser::Create_table_optionContext::stored_as_part() {
  return getRuleContext<HqlsqlParser::Stored_as_partContext>(0);
}

HqlsqlParser::Row_format_partContext* HqlsqlParser::Create_table_optionContext::row_format_part() {
  return getRuleContext<HqlsqlParser::Row_format_partContext>(0);
}

HqlsqlParser::Location_partContext* HqlsqlParser::Create_table_optionContext::location_part() {
  return getRuleContext<HqlsqlParser::Location_partContext>(0);
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::Create_table_optionContext::property_values_part() {
  return getRuleContext<HqlsqlParser::Property_values_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_optionContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Create_table_optionContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}


size_t HqlsqlParser::Create_table_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_option;
}

void HqlsqlParser::Create_table_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_option(this);
}

void HqlsqlParser::Create_table_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_option(this);
}


antlrcpp::Any HqlsqlParser::Create_table_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_optionContext* HqlsqlParser::create_table_option() {
  Create_table_optionContext *_localctx = _tracker.createInstance<Create_table_optionContext>(_ctx, getState());
  enterRule(_localctx, 118, HqlsqlParser::RuleCreate_table_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1380);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1360);
      match(HqlsqlParser::T_OPEN_P);
      setState(1361);
      create_table_columns();
      setState(1362);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1364);
      comment_part();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1365);
      partition_by_part();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1366);
      cluster_by_part();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1367);
      skewed_by_part();
      setState(1368);
      match(HqlsqlParser::T_ON);
      setState(1369);
      match(HqlsqlParser::T_OPEN_P);
      setState(1370);
      col_values();
      setState(1371);
      match(HqlsqlParser::T_CLOSE_P);
      setState(1373);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
      case 1: {
        setState(1372);
        stored_as_part();
        break;
      }

      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1375);
      row_format_part();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1376);
      location_part();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1377);
      property_values_part();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1378);
      match(HqlsqlParser::T_AS);
      setState(1379);
      select_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_by_partContext ------------------------------------------------------------------

HqlsqlParser::Partition_by_partContext::Partition_by_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Partition_by_partContext::T_PARTITIONED() {
  return getToken(HqlsqlParser::T_PARTITIONED, 0);
}

tree::TerminalNode* HqlsqlParser::Partition_by_partContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Partition_by_partContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}


size_t HqlsqlParser::Partition_by_partContext::getRuleIndex() const {
  return HqlsqlParser::RulePartition_by_part;
}

void HqlsqlParser::Partition_by_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_by_part(this);
}

void HqlsqlParser::Partition_by_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_by_part(this);
}


antlrcpp::Any HqlsqlParser::Partition_by_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPartition_by_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Partition_by_partContext* HqlsqlParser::partition_by_part() {
  Partition_by_partContext *_localctx = _tracker.createInstance<Partition_by_partContext>(_ctx, getState());
  enterRule(_localctx, 120, HqlsqlParser::RulePartition_by_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1382);
    match(HqlsqlParser::T_PARTITIONED);
    setState(1383);
    match(HqlsqlParser::T_BY);
    setState(1384);
    paren_column_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cluster_by_partContext ------------------------------------------------------------------

HqlsqlParser::Cluster_by_partContext::Cluster_by_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Cluster_by_partContext::T_CLUSTERED() {
  return getToken(HqlsqlParser::T_CLUSTERED, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Cluster_by_partContext::T_BY() {
  return getTokens(HqlsqlParser::T_BY);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_partContext::T_BY(size_t i) {
  return getToken(HqlsqlParser::T_BY, i);
}

std::vector<HqlsqlParser::Paren_column_listContext *> HqlsqlParser::Cluster_by_partContext::paren_column_list() {
  return getRuleContexts<HqlsqlParser::Paren_column_listContext>();
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Cluster_by_partContext::paren_column_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_partContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

HqlsqlParser::Int_numberContext* HqlsqlParser::Cluster_by_partContext::int_number() {
  return getRuleContext<HqlsqlParser::Int_numberContext>(0);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_partContext::T_BUCKETS() {
  return getToken(HqlsqlParser::T_BUCKETS, 0);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_partContext::T_SORTED() {
  return getToken(HqlsqlParser::T_SORTED, 0);
}


size_t HqlsqlParser::Cluster_by_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleCluster_by_part;
}

void HqlsqlParser::Cluster_by_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCluster_by_part(this);
}

void HqlsqlParser::Cluster_by_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCluster_by_part(this);
}


antlrcpp::Any HqlsqlParser::Cluster_by_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCluster_by_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cluster_by_partContext* HqlsqlParser::cluster_by_part() {
  Cluster_by_partContext *_localctx = _tracker.createInstance<Cluster_by_partContext>(_ctx, getState());
  enterRule(_localctx, 122, HqlsqlParser::RuleCluster_by_part);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1386);
    match(HqlsqlParser::T_CLUSTERED);
    setState(1387);
    match(HqlsqlParser::T_BY);
    setState(1388);
    paren_column_list();
    setState(1392);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_SORTED) {
      setState(1389);
      match(HqlsqlParser::T_SORTED);
      setState(1390);
      match(HqlsqlParser::T_BY);
      setState(1391);
      paren_column_list();
    }
    setState(1394);
    match(HqlsqlParser::T_INTO);
    setState(1395);
    int_number();
    setState(1396);
    match(HqlsqlParser::T_BUCKETS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Skewed_by_partContext ------------------------------------------------------------------

HqlsqlParser::Skewed_by_partContext::Skewed_by_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Skewed_by_partContext::T_SKEWED() {
  return getToken(HqlsqlParser::T_SKEWED, 0);
}

tree::TerminalNode* HqlsqlParser::Skewed_by_partContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Skewed_by_partContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}


size_t HqlsqlParser::Skewed_by_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleSkewed_by_part;
}

void HqlsqlParser::Skewed_by_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSkewed_by_part(this);
}

void HqlsqlParser::Skewed_by_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSkewed_by_part(this);
}


antlrcpp::Any HqlsqlParser::Skewed_by_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSkewed_by_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Skewed_by_partContext* HqlsqlParser::skewed_by_part() {
  Skewed_by_partContext *_localctx = _tracker.createInstance<Skewed_by_partContext>(_ctx, getState());
  enterRule(_localctx, 124, HqlsqlParser::RuleSkewed_by_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1398);
    match(HqlsqlParser::T_SKEWED);
    setState(1399);
    match(HqlsqlParser::T_BY);
    setState(1400);
    paren_column_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_valuesContext ------------------------------------------------------------------

HqlsqlParser::Col_valuesContext::Col_valuesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Paren_col_valuesContext *> HqlsqlParser::Col_valuesContext::paren_col_values() {
  return getRuleContexts<HqlsqlParser::Paren_col_valuesContext>();
}

HqlsqlParser::Paren_col_valuesContext* HqlsqlParser::Col_valuesContext::paren_col_values(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_col_valuesContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Col_valuesContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Col_valuesContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Col_valuesContext::getRuleIndex() const {
  return HqlsqlParser::RuleCol_values;
}

void HqlsqlParser::Col_valuesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_values(this);
}

void HqlsqlParser::Col_valuesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_values(this);
}


antlrcpp::Any HqlsqlParser::Col_valuesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCol_values(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Col_valuesContext* HqlsqlParser::col_values() {
  Col_valuesContext *_localctx = _tracker.createInstance<Col_valuesContext>(_ctx, getState());
  enterRule(_localctx, 126, HqlsqlParser::RuleCol_values);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    paren_col_values();
    setState(1407);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(1403);
      match(HqlsqlParser::T_COMMA);
      setState(1404);
      paren_col_values();
      setState(1409);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stored_as_partContext ------------------------------------------------------------------

HqlsqlParser::Stored_as_partContext::Stored_as_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Stored_as_partContext::T_STORED() {
  return getToken(HqlsqlParser::T_STORED, 0);
}

tree::TerminalNode* HqlsqlParser::Stored_as_partContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Stored_as_partContext::T_DIRECTORIES() {
  return getToken(HqlsqlParser::T_DIRECTORIES, 0);
}

HqlsqlParser::File_formatContext* HqlsqlParser::Stored_as_partContext::file_format() {
  return getRuleContext<HqlsqlParser::File_formatContext>(0);
}


size_t HqlsqlParser::Stored_as_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleStored_as_part;
}

void HqlsqlParser::Stored_as_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStored_as_part(this);
}

void HqlsqlParser::Stored_as_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStored_as_part(this);
}


antlrcpp::Any HqlsqlParser::Stored_as_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitStored_as_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Stored_as_partContext* HqlsqlParser::stored_as_part() {
  Stored_as_partContext *_localctx = _tracker.createInstance<Stored_as_partContext>(_ctx, getState());
  enterRule(_localctx, 128, HqlsqlParser::RuleStored_as_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1410);
    match(HqlsqlParser::T_STORED);
    setState(1411);
    match(HqlsqlParser::T_AS);
    setState(1414);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_DIRECTORIES: {
        setState(1412);
        match(HqlsqlParser::T_DIRECTORIES);
        break;
      }

      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT: {
        setState(1413);
        file_format();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_format_partContext ------------------------------------------------------------------

HqlsqlParser::Row_format_partContext::Row_format_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::Row_format_partContext::T_ROW() {
  return getTokens(HqlsqlParser::T_ROW);
}

tree::TerminalNode* HqlsqlParser::Row_format_partContext::T_ROW(size_t i) {
  return getToken(HqlsqlParser::T_ROW, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Row_format_partContext::T_FORMAT() {
  return getTokens(HqlsqlParser::T_FORMAT);
}

tree::TerminalNode* HqlsqlParser::Row_format_partContext::T_FORMAT(size_t i) {
  return getToken(HqlsqlParser::T_FORMAT, i);
}

std::vector<HqlsqlParser::Row_formatContext *> HqlsqlParser::Row_format_partContext::row_format() {
  return getRuleContexts<HqlsqlParser::Row_formatContext>();
}

HqlsqlParser::Row_formatContext* HqlsqlParser::Row_format_partContext::row_format(size_t i) {
  return getRuleContext<HqlsqlParser::Row_formatContext>(i);
}

std::vector<HqlsqlParser::Stored_as_partContext *> HqlsqlParser::Row_format_partContext::stored_as_part() {
  return getRuleContexts<HqlsqlParser::Stored_as_partContext>();
}

HqlsqlParser::Stored_as_partContext* HqlsqlParser::Row_format_partContext::stored_as_part(size_t i) {
  return getRuleContext<HqlsqlParser::Stored_as_partContext>(i);
}

tree::TerminalNode* HqlsqlParser::Row_format_partContext::T_STORED() {
  return getToken(HqlsqlParser::T_STORED, 0);
}

tree::TerminalNode* HqlsqlParser::Row_format_partContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Row_format_partContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

HqlsqlParser::Property_valuesContext* HqlsqlParser::Row_format_partContext::property_values() {
  return getRuleContext<HqlsqlParser::Property_valuesContext>(0);
}


size_t HqlsqlParser::Row_format_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleRow_format_part;
}

void HqlsqlParser::Row_format_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRow_format_part(this);
}

void HqlsqlParser::Row_format_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRow_format_part(this);
}


antlrcpp::Any HqlsqlParser::Row_format_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitRow_format_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Row_format_partContext* HqlsqlParser::row_format_part() {
  Row_format_partContext *_localctx = _tracker.createInstance<Row_format_partContext>(_ctx, getState());
  enterRule(_localctx, 130, HqlsqlParser::RuleRow_format_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1430);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1420); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1420);
                _errHandler->sync(this);
                switch (_input->LA(1)) {
                  case HqlsqlParser::T_ROW: {
                    setState(1416);
                    match(HqlsqlParser::T_ROW);
                    setState(1417);
                    match(HqlsqlParser::T_FORMAT);
                    setState(1418);
                    row_format();
                    break;
                  }

                  case HqlsqlParser::T_STORED: {
                    setState(1419);
                    stored_as_part();
                    break;
                  }

                default:
                  throw NoViableAltException(this);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1422); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1424);
      match(HqlsqlParser::T_STORED);
      setState(1425);
      match(HqlsqlParser::T_BY);
      setState(1426);
      expr(0);
      setState(1428);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
      case 1: {
        setState(1427);
        property_values();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_formatContext ------------------------------------------------------------------

HqlsqlParser::File_formatContext::File_formatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_SEQUENCEFILE() {
  return getToken(HqlsqlParser::T_SEQUENCEFILE, 0);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_TEXTFILE() {
  return getToken(HqlsqlParser::T_TEXTFILE, 0);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_RCFILE() {
  return getToken(HqlsqlParser::T_RCFILE, 0);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_ORC() {
  return getToken(HqlsqlParser::T_ORC, 0);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_PARQUET() {
  return getToken(HqlsqlParser::T_PARQUET, 0);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_AVRO() {
  return getToken(HqlsqlParser::T_AVRO, 0);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_JSONFILE() {
  return getToken(HqlsqlParser::T_JSONFILE, 0);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_INPUTFORMAT() {
  return getToken(HqlsqlParser::T_INPUTFORMAT, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::File_formatContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::File_formatContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::File_formatContext::T_OUTPUTFORMAT() {
  return getToken(HqlsqlParser::T_OUTPUTFORMAT, 0);
}


size_t HqlsqlParser::File_formatContext::getRuleIndex() const {
  return HqlsqlParser::RuleFile_format;
}

void HqlsqlParser::File_formatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_format(this);
}

void HqlsqlParser::File_formatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_format(this);
}


antlrcpp::Any HqlsqlParser::File_formatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFile_format(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::File_formatContext* HqlsqlParser::file_format() {
  File_formatContext *_localctx = _tracker.createInstance<File_formatContext>(_ctx, getState());
  enterRule(_localctx, 132, HqlsqlParser::RuleFile_format);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1444);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_SEQUENCEFILE: {
        enterOuterAlt(_localctx, 1);
        setState(1432);
        match(HqlsqlParser::T_SEQUENCEFILE);
        break;
      }

      case HqlsqlParser::T_TEXTFILE: {
        enterOuterAlt(_localctx, 2);
        setState(1433);
        match(HqlsqlParser::T_TEXTFILE);
        break;
      }

      case HqlsqlParser::T_RCFILE: {
        enterOuterAlt(_localctx, 3);
        setState(1434);
        match(HqlsqlParser::T_RCFILE);
        break;
      }

      case HqlsqlParser::T_ORC: {
        enterOuterAlt(_localctx, 4);
        setState(1435);
        match(HqlsqlParser::T_ORC);
        break;
      }

      case HqlsqlParser::T_PARQUET: {
        enterOuterAlt(_localctx, 5);
        setState(1436);
        match(HqlsqlParser::T_PARQUET);
        break;
      }

      case HqlsqlParser::T_AVRO: {
        enterOuterAlt(_localctx, 6);
        setState(1437);
        match(HqlsqlParser::T_AVRO);
        break;
      }

      case HqlsqlParser::T_JSONFILE: {
        enterOuterAlt(_localctx, 7);
        setState(1438);
        match(HqlsqlParser::T_JSONFILE);
        break;
      }

      case HqlsqlParser::T_INPUTFORMAT: {
        enterOuterAlt(_localctx, 8);
        setState(1439);
        match(HqlsqlParser::T_INPUTFORMAT);
        setState(1440);
        expr(0);
        setState(1441);
        match(HqlsqlParser::T_OUTPUTFORMAT);
        setState(1442);
        expr(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_formatContext ------------------------------------------------------------------

HqlsqlParser::Row_formatContext::Row_formatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_DELIMITED() {
  return getToken(HqlsqlParser::T_DELIMITED, 0);
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_FIELDS() {
  return getToken(HqlsqlParser::T_FIELDS, 0);
}

HqlsqlParser::Terminated_byContext* HqlsqlParser::Row_formatContext::terminated_by() {
  return getRuleContext<HqlsqlParser::Terminated_byContext>(0);
}

std::vector<HqlsqlParser::Terminated_by_partContext *> HqlsqlParser::Row_formatContext::terminated_by_part() {
  return getRuleContexts<HqlsqlParser::Terminated_by_partContext>();
}

HqlsqlParser::Terminated_by_partContext* HqlsqlParser::Row_formatContext::terminated_by_part(size_t i) {
  return getRuleContext<HqlsqlParser::Terminated_by_partContext>(i);
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_DEFINED() {
  return getToken(HqlsqlParser::T_DEFINED, 0);
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

std::vector<HqlsqlParser::By_charContext *> HqlsqlParser::Row_formatContext::by_char() {
  return getRuleContexts<HqlsqlParser::By_charContext>();
}

HqlsqlParser::By_charContext* HqlsqlParser::Row_formatContext::by_char(size_t i) {
  return getRuleContext<HqlsqlParser::By_charContext>(i);
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_ESCAPED() {
  return getToken(HqlsqlParser::T_ESCAPED, 0);
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

tree::TerminalNode* HqlsqlParser::Row_formatContext::T_SERDE() {
  return getToken(HqlsqlParser::T_SERDE, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Row_formatContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

HqlsqlParser::Property_valuesContext* HqlsqlParser::Row_formatContext::property_values() {
  return getRuleContext<HqlsqlParser::Property_valuesContext>(0);
}


size_t HqlsqlParser::Row_formatContext::getRuleIndex() const {
  return HqlsqlParser::RuleRow_format;
}

void HqlsqlParser::Row_formatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRow_format(this);
}

void HqlsqlParser::Row_formatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRow_format(this);
}


antlrcpp::Any HqlsqlParser::Row_formatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitRow_format(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Row_formatContext* HqlsqlParser::row_format() {
  Row_formatContext *_localctx = _tracker.createInstance<Row_formatContext>(_ctx, getState());
  enterRule(_localctx, 134, HqlsqlParser::RuleRow_format);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1473);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_DELIMITED: {
        enterOuterAlt(_localctx, 1);
        setState(1446);
        match(HqlsqlParser::T_DELIMITED);
        setState(1454);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
        case 1: {
          setState(1447);
          match(HqlsqlParser::T_FIELDS);
          setState(1448);
          terminated_by();
          setState(1452);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
          case 1: {
            setState(1449);
            match(HqlsqlParser::T_ESCAPED);
            setState(1450);
            match(HqlsqlParser::T_BY);
            setState(1451);
            by_char();
            break;
          }

          }
          break;
        }

        }
        setState(1459);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1456);
            terminated_by_part(); 
          }
          setState(1461);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
        }
        setState(1466);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          setState(1462);
          match(HqlsqlParser::T_NULL);
          setState(1463);
          match(HqlsqlParser::T_DEFINED);
          setState(1464);
          match(HqlsqlParser::T_AS);
          setState(1465);
          by_char();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_SERDE: {
        enterOuterAlt(_localctx, 2);
        setState(1468);
        match(HqlsqlParser::T_SERDE);
        setState(1469);
        expr(0);
        setState(1471);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
        case 1: {
          setState(1470);
          property_values();
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Terminated_by_partContext ------------------------------------------------------------------

HqlsqlParser::Terminated_by_partContext::Terminated_by_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Terminated_byContext* HqlsqlParser::Terminated_by_partContext::terminated_by() {
  return getRuleContext<HqlsqlParser::Terminated_byContext>(0);
}

tree::TerminalNode* HqlsqlParser::Terminated_by_partContext::T_COLLECTION() {
  return getToken(HqlsqlParser::T_COLLECTION, 0);
}

tree::TerminalNode* HqlsqlParser::Terminated_by_partContext::T_ITEMS() {
  return getToken(HqlsqlParser::T_ITEMS, 0);
}

tree::TerminalNode* HqlsqlParser::Terminated_by_partContext::T_MAP() {
  return getToken(HqlsqlParser::T_MAP, 0);
}

tree::TerminalNode* HqlsqlParser::Terminated_by_partContext::T_KEYS() {
  return getToken(HqlsqlParser::T_KEYS, 0);
}

tree::TerminalNode* HqlsqlParser::Terminated_by_partContext::T_LINES() {
  return getToken(HqlsqlParser::T_LINES, 0);
}


size_t HqlsqlParser::Terminated_by_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleTerminated_by_part;
}

void HqlsqlParser::Terminated_by_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminated_by_part(this);
}

void HqlsqlParser::Terminated_by_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminated_by_part(this);
}


antlrcpp::Any HqlsqlParser::Terminated_by_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTerminated_by_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Terminated_by_partContext* HqlsqlParser::terminated_by_part() {
  Terminated_by_partContext *_localctx = _tracker.createInstance<Terminated_by_partContext>(_ctx, getState());
  enterRule(_localctx, 136, HqlsqlParser::RuleTerminated_by_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1480);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_COLLECTION: {
        setState(1475);
        match(HqlsqlParser::T_COLLECTION);
        setState(1476);
        match(HqlsqlParser::T_ITEMS);
        break;
      }

      case HqlsqlParser::T_MAP: {
        setState(1477);
        match(HqlsqlParser::T_MAP);
        setState(1478);
        match(HqlsqlParser::T_KEYS);
        break;
      }

      case HqlsqlParser::T_LINES: {
        setState(1479);
        match(HqlsqlParser::T_LINES);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1482);
    terminated_by();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Terminated_byContext ------------------------------------------------------------------

HqlsqlParser::Terminated_byContext::Terminated_byContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Terminated_byContext::T_TERMINATED() {
  return getToken(HqlsqlParser::T_TERMINATED, 0);
}

tree::TerminalNode* HqlsqlParser::Terminated_byContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

HqlsqlParser::By_charContext* HqlsqlParser::Terminated_byContext::by_char() {
  return getRuleContext<HqlsqlParser::By_charContext>(0);
}


size_t HqlsqlParser::Terminated_byContext::getRuleIndex() const {
  return HqlsqlParser::RuleTerminated_by;
}

void HqlsqlParser::Terminated_byContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminated_by(this);
}

void HqlsqlParser::Terminated_byContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminated_by(this);
}


antlrcpp::Any HqlsqlParser::Terminated_byContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTerminated_by(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Terminated_byContext* HqlsqlParser::terminated_by() {
  Terminated_byContext *_localctx = _tracker.createInstance<Terminated_byContext>(_ctx, getState());
  enterRule(_localctx, 138, HqlsqlParser::RuleTerminated_by);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1484);
    match(HqlsqlParser::T_TERMINATED);
    setState(1485);
    match(HqlsqlParser::T_BY);
    setState(1486);
    by_char();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- By_charContext ------------------------------------------------------------------

HqlsqlParser::By_charContext::By_charContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::ExprContext* HqlsqlParser::By_charContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::By_charContext::getRuleIndex() const {
  return HqlsqlParser::RuleBy_char;
}

void HqlsqlParser::By_charContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBy_char(this);
}

void HqlsqlParser::By_charContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBy_char(this);
}


antlrcpp::Any HqlsqlParser::By_charContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBy_char(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::By_charContext* HqlsqlParser::by_char() {
  By_charContext *_localctx = _tracker.createInstance<By_charContext>(_ctx, getState());
  enterRule(_localctx, 140, HqlsqlParser::RuleBy_char);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1488);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_options_hive_itemContext ------------------------------------------------------------------

HqlsqlParser::Create_table_options_hive_itemContext::Create_table_options_hive_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Create_table_hive_row_formatContext* HqlsqlParser::Create_table_options_hive_itemContext::create_table_hive_row_format() {
  return getRuleContext<HqlsqlParser::Create_table_hive_row_formatContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_options_hive_itemContext::T_STORED() {
  return getToken(HqlsqlParser::T_STORED, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_options_hive_itemContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_table_options_hive_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Create_table_options_hive_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_options_hive_item;
}

void HqlsqlParser::Create_table_options_hive_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_options_hive_item(this);
}

void HqlsqlParser::Create_table_options_hive_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_options_hive_item(this);
}


antlrcpp::Any HqlsqlParser::Create_table_options_hive_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_options_hive_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_options_hive_itemContext* HqlsqlParser::create_table_options_hive_item() {
  Create_table_options_hive_itemContext *_localctx = _tracker.createInstance<Create_table_options_hive_itemContext>(_ctx, getState());
  enterRule(_localctx, 142, HqlsqlParser::RuleCreate_table_options_hive_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1494);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ROW: {
        enterOuterAlt(_localctx, 1);
        setState(1490);
        create_table_hive_row_format();
        break;
      }

      case HqlsqlParser::T_STORED: {
        enterOuterAlt(_localctx, 2);
        setState(1491);
        match(HqlsqlParser::T_STORED);
        setState(1492);
        match(HqlsqlParser::T_AS);
        setState(1493);
        ident();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_hive_row_formatContext ------------------------------------------------------------------

HqlsqlParser::Create_table_hive_row_formatContext::Create_table_hive_row_formatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_formatContext::T_ROW() {
  return getToken(HqlsqlParser::T_ROW, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_formatContext::T_FORMAT() {
  return getToken(HqlsqlParser::T_FORMAT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_formatContext::T_DELIMITED() {
  return getToken(HqlsqlParser::T_DELIMITED, 0);
}

std::vector<HqlsqlParser::Create_table_hive_row_format_fieldsContext *> HqlsqlParser::Create_table_hive_row_formatContext::create_table_hive_row_format_fields() {
  return getRuleContexts<HqlsqlParser::Create_table_hive_row_format_fieldsContext>();
}

HqlsqlParser::Create_table_hive_row_format_fieldsContext* HqlsqlParser::Create_table_hive_row_formatContext::create_table_hive_row_format_fields(size_t i) {
  return getRuleContext<HqlsqlParser::Create_table_hive_row_format_fieldsContext>(i);
}


size_t HqlsqlParser::Create_table_hive_row_formatContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_hive_row_format;
}

void HqlsqlParser::Create_table_hive_row_formatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_hive_row_format(this);
}

void HqlsqlParser::Create_table_hive_row_formatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_hive_row_format(this);
}


antlrcpp::Any HqlsqlParser::Create_table_hive_row_formatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_hive_row_format(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_hive_row_formatContext* HqlsqlParser::create_table_hive_row_format() {
  Create_table_hive_row_formatContext *_localctx = _tracker.createInstance<Create_table_hive_row_formatContext>(_ctx, getState());
  enterRule(_localctx, 144, HqlsqlParser::RuleCreate_table_hive_row_format);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1496);
    match(HqlsqlParser::T_ROW);
    setState(1497);
    match(HqlsqlParser::T_FORMAT);
    setState(1498);
    match(HqlsqlParser::T_DELIMITED);
    setState(1502);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1499);
        create_table_hive_row_format_fields(); 
      }
      setState(1504);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_hive_row_format_fieldsContext ------------------------------------------------------------------

HqlsqlParser::Create_table_hive_row_format_fieldsContext::Create_table_hive_row_format_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_FIELDS() {
  return getToken(HqlsqlParser::T_FIELDS, 0);
}

HqlsqlParser::Terminated_byContext* HqlsqlParser::Create_table_hive_row_format_fieldsContext::terminated_by() {
  return getRuleContext<HqlsqlParser::Terminated_byContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_ESCAPED() {
  return getToken(HqlsqlParser::T_ESCAPED, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Create_table_hive_row_format_fieldsContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_COLLECTION() {
  return getToken(HqlsqlParser::T_COLLECTION, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_ITEMS() {
  return getToken(HqlsqlParser::T_ITEMS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_MAP() {
  return getToken(HqlsqlParser::T_MAP, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_KEYS() {
  return getToken(HqlsqlParser::T_KEYS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_LINES() {
  return getToken(HqlsqlParser::T_LINES, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_DEFINED() {
  return getToken(HqlsqlParser::T_DEFINED, 0);
}

tree::TerminalNode* HqlsqlParser::Create_table_hive_row_format_fieldsContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}


size_t HqlsqlParser::Create_table_hive_row_format_fieldsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_hive_row_format_fields;
}

void HqlsqlParser::Create_table_hive_row_format_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_hive_row_format_fields(this);
}

void HqlsqlParser::Create_table_hive_row_format_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_hive_row_format_fields(this);
}


antlrcpp::Any HqlsqlParser::Create_table_hive_row_format_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_hive_row_format_fields(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_hive_row_format_fieldsContext* HqlsqlParser::create_table_hive_row_format_fields() {
  Create_table_hive_row_format_fieldsContext *_localctx = _tracker.createInstance<Create_table_hive_row_format_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 146, HqlsqlParser::RuleCreate_table_hive_row_format_fields);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1524);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_FIELDS: {
        enterOuterAlt(_localctx, 1);
        setState(1505);
        match(HqlsqlParser::T_FIELDS);
        setState(1506);
        terminated_by();
        setState(1510);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
        case 1: {
          setState(1507);
          match(HqlsqlParser::T_ESCAPED);
          setState(1508);
          match(HqlsqlParser::T_BY);
          setState(1509);
          expr(0);
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_COLLECTION: {
        enterOuterAlt(_localctx, 2);
        setState(1512);
        match(HqlsqlParser::T_COLLECTION);
        setState(1513);
        match(HqlsqlParser::T_ITEMS);
        setState(1514);
        terminated_by();
        break;
      }

      case HqlsqlParser::T_MAP: {
        enterOuterAlt(_localctx, 3);
        setState(1515);
        match(HqlsqlParser::T_MAP);
        setState(1516);
        match(HqlsqlParser::T_KEYS);
        setState(1517);
        terminated_by();
        break;
      }

      case HqlsqlParser::T_LINES: {
        enterOuterAlt(_localctx, 4);
        setState(1518);
        match(HqlsqlParser::T_LINES);
        setState(1519);
        terminated_by();
        break;
      }

      case HqlsqlParser::T_NULL: {
        enterOuterAlt(_localctx, 5);
        setState(1520);
        match(HqlsqlParser::T_NULL);
        setState(1521);
        match(HqlsqlParser::T_DEFINED);
        setState(1522);
        match(HqlsqlParser::T_AS);
        setState(1523);
        expr(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_options_mssql_itemContext ------------------------------------------------------------------

HqlsqlParser::Create_table_options_mssql_itemContext::Create_table_options_mssql_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_table_options_mssql_itemContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_table_options_mssql_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_table_options_mssql_itemContext::T_TEXTIMAGE_ON() {
  return getToken(HqlsqlParser::T_TEXTIMAGE_ON, 0);
}


size_t HqlsqlParser::Create_table_options_mssql_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_table_options_mssql_item;
}

void HqlsqlParser::Create_table_options_mssql_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_options_mssql_item(this);
}

void HqlsqlParser::Create_table_options_mssql_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_options_mssql_item(this);
}


antlrcpp::Any HqlsqlParser::Create_table_options_mssql_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_table_options_mssql_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_table_options_mssql_itemContext* HqlsqlParser::create_table_options_mssql_item() {
  Create_table_options_mssql_itemContext *_localctx = _tracker.createInstance<Create_table_options_mssql_itemContext>(_ctx, getState());
  enterRule(_localctx, 148, HqlsqlParser::RuleCreate_table_options_mssql_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1530);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ON: {
        enterOuterAlt(_localctx, 1);
        setState(1526);
        match(HqlsqlParser::T_ON);
        setState(1527);
        ident();
        break;
      }

      case HqlsqlParser::T_TEXTIMAGE_ON: {
        enterOuterAlt(_localctx, 2);
        setState(1528);
        match(HqlsqlParser::T_TEXTIMAGE_ON);
        setState(1529);
        ident();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_view_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_view_stmtContext::Create_view_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_view_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_view_stmtContext::T_VIEW() {
  return getToken(HqlsqlParser::T_VIEW, 0);
}

HqlsqlParser::View_nameContext* HqlsqlParser::Create_view_stmtContext::view_name() {
  return getRuleContext<HqlsqlParser::View_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_view_stmtContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Create_view_stmtContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_view_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Create_view_stmtContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_view_stmtContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Create_view_stmtContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}

std::vector<HqlsqlParser::Create_view_optionsContext *> HqlsqlParser::Create_view_stmtContext::create_view_options() {
  return getRuleContexts<HqlsqlParser::Create_view_optionsContext>();
}

HqlsqlParser::Create_view_optionsContext* HqlsqlParser::Create_view_stmtContext::create_view_options(size_t i) {
  return getRuleContext<HqlsqlParser::Create_view_optionsContext>(i);
}

tree::TerminalNode* HqlsqlParser::Create_view_stmtContext::T_MATERIALIZED() {
  return getToken(HqlsqlParser::T_MATERIALIZED, 0);
}

std::vector<HqlsqlParser::Create_materialized_view_optionContext *> HqlsqlParser::Create_view_stmtContext::create_materialized_view_option() {
  return getRuleContexts<HqlsqlParser::Create_materialized_view_optionContext>();
}

HqlsqlParser::Create_materialized_view_optionContext* HqlsqlParser::Create_view_stmtContext::create_materialized_view_option(size_t i) {
  return getRuleContext<HqlsqlParser::Create_materialized_view_optionContext>(i);
}


size_t HqlsqlParser::Create_view_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_view_stmt;
}

void HqlsqlParser::Create_view_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_view_stmt(this);
}

void HqlsqlParser::Create_view_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_view_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_view_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_view_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_view_stmtContext* HqlsqlParser::create_view_stmt() {
  Create_view_stmtContext *_localctx = _tracker.createInstance<Create_view_stmtContext>(_ctx, getState());
  enterRule(_localctx, 150, HqlsqlParser::RuleCreate_view_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1570);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1532);
      match(HqlsqlParser::T_CREATE);
      setState(1533);
      match(HqlsqlParser::T_VIEW);
      setState(1537);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
      case 1: {
        setState(1534);
        match(HqlsqlParser::T_IF);
        setState(1535);
        match(HqlsqlParser::T_NOT);
        setState(1536);
        match(HqlsqlParser::T_EXISTS);
        break;
      }

      }
      setState(1539);
      view_name();
      setState(1541);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
      case 1: {
        setState(1540);
        paren_column_list();
        break;
      }

      }
      setState(1546);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMENT || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (HqlsqlParser::T_DBPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_TBLPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_IDXPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 380)))) != 0) || _la == HqlsqlParser::T_OPEN_P) {
        setState(1543);
        create_view_options();
        setState(1548);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1549);
      match(HqlsqlParser::T_AS);
      setState(1550);
      select_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1552);
      match(HqlsqlParser::T_CREATE);
      setState(1553);
      match(HqlsqlParser::T_MATERIALIZED);
      setState(1554);
      match(HqlsqlParser::T_VIEW);
      setState(1558);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
      case 1: {
        setState(1555);
        match(HqlsqlParser::T_IF);
        setState(1556);
        match(HqlsqlParser::T_NOT);
        setState(1557);
        match(HqlsqlParser::T_EXISTS);
        break;
      }

      }
      setState(1560);
      view_name();
      setState(1564);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 38) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 38)) & ((1ULL << (HqlsqlParser::T_CLUSTERED - 38))
        | (1ULL << (HqlsqlParser::T_COMMENT - 38))
        | (1ULL << (HqlsqlParser::T_DISABLE - 38)))) != 0) || _la == HqlsqlParser::T_LOCATION || _la == HqlsqlParser::T_ROW

      || _la == HqlsqlParser::T_STORED || ((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (HqlsqlParser::T_DBPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_TBLPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_IDXPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_PARTITIONED - 380))
        | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 380)))) != 0) || _la == HqlsqlParser::T_OPEN_P) {
        setState(1561);
        create_materialized_view_option();
        setState(1566);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1567);
      match(HqlsqlParser::T_AS);
      setState(1568);
      select_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_view_optionsContext ------------------------------------------------------------------

HqlsqlParser::Create_view_optionsContext::Create_view_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Create_view_optionsContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::Create_view_optionsContext::property_values_part() {
  return getRuleContext<HqlsqlParser::Property_values_partContext>(0);
}


size_t HqlsqlParser::Create_view_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_view_options;
}

void HqlsqlParser::Create_view_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_view_options(this);
}

void HqlsqlParser::Create_view_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_view_options(this);
}


antlrcpp::Any HqlsqlParser::Create_view_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_view_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_view_optionsContext* HqlsqlParser::create_view_options() {
  Create_view_optionsContext *_localctx = _tracker.createInstance<Create_view_optionsContext>(_ctx, getState());
  enterRule(_localctx, 152, HqlsqlParser::RuleCreate_view_options);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1574);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_COMMENT: {
        enterOuterAlt(_localctx, 1);
        setState(1572);
        comment_part();
        break;
      }

      case HqlsqlParser::T_DBPROPERTIES:
      case HqlsqlParser::T_TBLPROPERTIES:
      case HqlsqlParser::T_IDXPROPERTIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_OPEN_P: {
        enterOuterAlt(_localctx, 2);
        setState(1573);
        property_values_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_materialized_view_optionContext ------------------------------------------------------------------

HqlsqlParser::Create_materialized_view_optionContext::Create_materialized_view_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Create_view_optionsContext* HqlsqlParser::Create_materialized_view_optionContext::create_view_options() {
  return getRuleContext<HqlsqlParser::Create_view_optionsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_materialized_view_optionContext::T_DISABLE() {
  return getToken(HqlsqlParser::T_DISABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_materialized_view_optionContext::T_REWRITE() {
  return getToken(HqlsqlParser::T_REWRITE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_materialized_view_optionContext::T_PARTITIONED() {
  return getToken(HqlsqlParser::T_PARTITIONED, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_materialized_view_optionContext::T_ON() {
  return getTokens(HqlsqlParser::T_ON);
}

tree::TerminalNode* HqlsqlParser::Create_materialized_view_optionContext::T_ON(size_t i) {
  return getToken(HqlsqlParser::T_ON, i);
}

std::vector<HqlsqlParser::Paren_column_listContext *> HqlsqlParser::Create_materialized_view_optionContext::paren_column_list() {
  return getRuleContexts<HqlsqlParser::Paren_column_listContext>();
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Create_materialized_view_optionContext::paren_column_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Create_materialized_view_optionContext::T_CLUSTERED() {
  return getToken(HqlsqlParser::T_CLUSTERED, 0);
}

tree::TerminalNode* HqlsqlParser::Create_materialized_view_optionContext::T_DISTRIBUTED() {
  return getToken(HqlsqlParser::T_DISTRIBUTED, 0);
}

tree::TerminalNode* HqlsqlParser::Create_materialized_view_optionContext::T_SORTED() {
  return getToken(HqlsqlParser::T_SORTED, 0);
}

HqlsqlParser::Row_format_partContext* HqlsqlParser::Create_materialized_view_optionContext::row_format_part() {
  return getRuleContext<HqlsqlParser::Row_format_partContext>(0);
}

HqlsqlParser::Location_partContext* HqlsqlParser::Create_materialized_view_optionContext::location_part() {
  return getRuleContext<HqlsqlParser::Location_partContext>(0);
}


size_t HqlsqlParser::Create_materialized_view_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_materialized_view_option;
}

void HqlsqlParser::Create_materialized_view_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_materialized_view_option(this);
}

void HqlsqlParser::Create_materialized_view_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_materialized_view_option(this);
}


antlrcpp::Any HqlsqlParser::Create_materialized_view_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_materialized_view_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_materialized_view_optionContext* HqlsqlParser::create_materialized_view_option() {
  Create_materialized_view_optionContext *_localctx = _tracker.createInstance<Create_materialized_view_optionContext>(_ctx, getState());
  enterRule(_localctx, 154, HqlsqlParser::RuleCreate_materialized_view_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1594);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_DBPROPERTIES:
      case HqlsqlParser::T_TBLPROPERTIES:
      case HqlsqlParser::T_IDXPROPERTIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_OPEN_P: {
        enterOuterAlt(_localctx, 1);
        setState(1576);
        create_view_options();
        break;
      }

      case HqlsqlParser::T_DISABLE: {
        enterOuterAlt(_localctx, 2);
        setState(1577);
        match(HqlsqlParser::T_DISABLE);
        setState(1578);
        match(HqlsqlParser::T_REWRITE);
        break;
      }

      case HqlsqlParser::T_PARTITIONED: {
        enterOuterAlt(_localctx, 3);
        setState(1579);
        match(HqlsqlParser::T_PARTITIONED);
        setState(1580);
        match(HqlsqlParser::T_ON);
        setState(1581);
        paren_column_list();
        break;
      }

      case HqlsqlParser::T_CLUSTERED: {
        enterOuterAlt(_localctx, 4);
        setState(1582);
        match(HqlsqlParser::T_CLUSTERED);
        setState(1583);
        match(HqlsqlParser::T_ON);
        setState(1584);
        paren_column_list();
        break;
      }

      case HqlsqlParser::T_DISTRIBUTED: {
        enterOuterAlt(_localctx, 5);
        setState(1585);
        match(HqlsqlParser::T_DISTRIBUTED);
        setState(1586);
        match(HqlsqlParser::T_ON);
        setState(1587);
        paren_column_list();
        setState(1588);
        match(HqlsqlParser::T_SORTED);
        setState(1589);
        match(HqlsqlParser::T_ON);
        setState(1590);
        paren_column_list();
        break;
      }

      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_STORED: {
        enterOuterAlt(_localctx, 6);
        setState(1592);
        row_format_part();
        break;
      }

      case HqlsqlParser::T_LOCATION: {
        enterOuterAlt(_localctx, 7);
        setState(1593);
        location_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_macro_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_macro_stmtContext::Create_macro_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_macro_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_macro_stmtContext::T_TEMPORARY() {
  return getToken(HqlsqlParser::T_TEMPORARY, 0);
}

tree::TerminalNode* HqlsqlParser::Create_macro_stmtContext::T_MACRO() {
  return getToken(HqlsqlParser::T_MACRO, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_macro_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Create_macro_stmtContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Create_macro_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Create_macro_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_macro_stmt;
}

void HqlsqlParser::Create_macro_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_macro_stmt(this);
}

void HqlsqlParser::Create_macro_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_macro_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_macro_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_macro_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_macro_stmtContext* HqlsqlParser::create_macro_stmt() {
  Create_macro_stmtContext *_localctx = _tracker.createInstance<Create_macro_stmtContext>(_ctx, getState());
  enterRule(_localctx, 156, HqlsqlParser::RuleCreate_macro_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1596);
    match(HqlsqlParser::T_CREATE);
    setState(1597);
    match(HqlsqlParser::T_TEMPORARY);
    setState(1598);
    match(HqlsqlParser::T_MACRO);
    setState(1599);
    ident();
    setState(1600);
    paren_column_list();
    setState(1601);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_role_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_role_stmtContext::Create_role_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_role_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_role_stmtContext::T_ROLE() {
  return getToken(HqlsqlParser::T_ROLE, 0);
}

HqlsqlParser::Role_nameContext* HqlsqlParser::Create_role_stmtContext::role_name() {
  return getRuleContext<HqlsqlParser::Role_nameContext>(0);
}


size_t HqlsqlParser::Create_role_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_role_stmt;
}

void HqlsqlParser::Create_role_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_role_stmt(this);
}

void HqlsqlParser::Create_role_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_role_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_role_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_role_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_role_stmtContext* HqlsqlParser::create_role_stmt() {
  Create_role_stmtContext *_localctx = _tracker.createInstance<Create_role_stmtContext>(_ctx, getState());
  enterRule(_localctx, 158, HqlsqlParser::RuleCreate_role_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1603);
    match(HqlsqlParser::T_CREATE);
    setState(1604);
    match(HqlsqlParser::T_ROLE);
    setState(1605);
    role_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_revoke_role_stmtContext ------------------------------------------------------------------

HqlsqlParser::Grant_revoke_role_stmtContext::Grant_revoke_role_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_role_stmtContext::T_GRANT() {
  return getToken(HqlsqlParser::T_GRANT, 0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_role_stmtContext::T_ROLE() {
  return getToken(HqlsqlParser::T_ROLE, 0);
}

HqlsqlParser::Role_namesContext* HqlsqlParser::Grant_revoke_role_stmtContext::role_names() {
  return getRuleContext<HqlsqlParser::Role_namesContext>(0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_role_stmtContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

HqlsqlParser::Principal_specificationsContext* HqlsqlParser::Grant_revoke_role_stmtContext::principal_specifications() {
  return getRuleContext<HqlsqlParser::Principal_specificationsContext>(0);
}

HqlsqlParser::With_option_forContext* HqlsqlParser::Grant_revoke_role_stmtContext::with_option_for() {
  return getRuleContext<HqlsqlParser::With_option_forContext>(0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_role_stmtContext::T_REVOKE() {
  return getToken(HqlsqlParser::T_REVOKE, 0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_role_stmtContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}


size_t HqlsqlParser::Grant_revoke_role_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleGrant_revoke_role_stmt;
}

void HqlsqlParser::Grant_revoke_role_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_revoke_role_stmt(this);
}

void HqlsqlParser::Grant_revoke_role_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_revoke_role_stmt(this);
}


antlrcpp::Any HqlsqlParser::Grant_revoke_role_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitGrant_revoke_role_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Grant_revoke_role_stmtContext* HqlsqlParser::grant_revoke_role_stmt() {
  Grant_revoke_role_stmtContext *_localctx = _tracker.createInstance<Grant_revoke_role_stmtContext>(_ctx, getState());
  enterRule(_localctx, 160, HqlsqlParser::RuleGrant_revoke_role_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1624);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_GRANT: {
        enterOuterAlt(_localctx, 1);
        setState(1607);
        match(HqlsqlParser::T_GRANT);
        setState(1608);
        match(HqlsqlParser::T_ROLE);
        setState(1609);
        role_names();
        setState(1610);
        match(HqlsqlParser::T_TO);
        setState(1611);
        principal_specifications();
        setState(1613);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
        case 1: {
          setState(1612);
          with_option_for();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_REVOKE: {
        enterOuterAlt(_localctx, 2);
        setState(1615);
        match(HqlsqlParser::T_REVOKE);
        setState(1617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_GRANT || _la == HqlsqlParser::T_WITH || _la == HqlsqlParser::T_ADMIN) {
          setState(1616);
          with_option_for();
        }
        setState(1619);
        match(HqlsqlParser::T_ROLE);
        setState(1620);
        role_names();
        setState(1621);
        match(HqlsqlParser::T_FROM);
        setState(1622);
        principal_specifications();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_option_forContext ------------------------------------------------------------------

HqlsqlParser::With_option_forContext::With_option_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::With_option_forContext::T_ADMIN() {
  return getToken(HqlsqlParser::T_ADMIN, 0);
}

tree::TerminalNode* HqlsqlParser::With_option_forContext::T_OPTION() {
  return getToken(HqlsqlParser::T_OPTION, 0);
}

tree::TerminalNode* HqlsqlParser::With_option_forContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::With_option_forContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::With_option_forContext::T_GRANT() {
  return getToken(HqlsqlParser::T_GRANT, 0);
}


size_t HqlsqlParser::With_option_forContext::getRuleIndex() const {
  return HqlsqlParser::RuleWith_option_for;
}

void HqlsqlParser::With_option_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_option_for(this);
}

void HqlsqlParser::With_option_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_option_for(this);
}


antlrcpp::Any HqlsqlParser::With_option_forContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitWith_option_for(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::With_option_forContext* HqlsqlParser::with_option_for() {
  With_option_forContext *_localctx = _tracker.createInstance<With_option_forContext>(_ctx, getState());
  enterRule(_localctx, 162, HqlsqlParser::RuleWith_option_for);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1642);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1627);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_WITH) {
        setState(1626);
        match(HqlsqlParser::T_WITH);
      }
      setState(1629);
      match(HqlsqlParser::T_ADMIN);
      setState(1630);
      match(HqlsqlParser::T_OPTION);
      setState(1632);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
      case 1: {
        setState(1631);
        match(HqlsqlParser::T_FOR);
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1635);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_WITH) {
        setState(1634);
        match(HqlsqlParser::T_WITH);
      }
      setState(1637);
      match(HqlsqlParser::T_GRANT);
      setState(1638);
      match(HqlsqlParser::T_OPTION);
      setState(1640);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
      case 1: {
        setState(1639);
        match(HqlsqlParser::T_FOR);
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Role_nameContext ------------------------------------------------------------------

HqlsqlParser::Role_nameContext::Role_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Role_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Role_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleRole_name;
}

void HqlsqlParser::Role_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRole_name(this);
}

void HqlsqlParser::Role_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRole_name(this);
}


antlrcpp::Any HqlsqlParser::Role_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitRole_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Role_nameContext* HqlsqlParser::role_name() {
  Role_nameContext *_localctx = _tracker.createInstance<Role_nameContext>(_ctx, getState());
  enterRule(_localctx, 164, HqlsqlParser::RuleRole_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1644);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Role_namesContext ------------------------------------------------------------------

HqlsqlParser::Role_namesContext::Role_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Role_nameContext *> HqlsqlParser::Role_namesContext::role_name() {
  return getRuleContexts<HqlsqlParser::Role_nameContext>();
}

HqlsqlParser::Role_nameContext* HqlsqlParser::Role_namesContext::role_name(size_t i) {
  return getRuleContext<HqlsqlParser::Role_nameContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Role_namesContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Role_namesContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Role_namesContext::getRuleIndex() const {
  return HqlsqlParser::RuleRole_names;
}

void HqlsqlParser::Role_namesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRole_names(this);
}

void HqlsqlParser::Role_namesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRole_names(this);
}


antlrcpp::Any HqlsqlParser::Role_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitRole_names(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Role_namesContext* HqlsqlParser::role_names() {
  Role_namesContext *_localctx = _tracker.createInstance<Role_namesContext>(_ctx, getState());
  enterRule(_localctx, 166, HqlsqlParser::RuleRole_names);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1646);
    role_name();
    setState(1651);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(1647);
      match(HqlsqlParser::T_COMMA);
      setState(1648);
      role_name();
      setState(1653);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_revoke_privilege_stmtContext ------------------------------------------------------------------

HqlsqlParser::Grant_revoke_privilege_stmtContext::Grant_revoke_privilege_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Privilege_columnsContext* HqlsqlParser::Grant_revoke_privilege_stmtContext::privilege_columns() {
  return getRuleContext<HqlsqlParser::Privilege_columnsContext>(0);
}

HqlsqlParser::Principal_specificationsContext* HqlsqlParser::Grant_revoke_privilege_stmtContext::principal_specifications() {
  return getRuleContext<HqlsqlParser::Principal_specificationsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_GRANT() {
  return getToken(HqlsqlParser::T_GRANT, 0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_REVOKE() {
  return getToken(HqlsqlParser::T_REVOKE, 0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

std::vector<HqlsqlParser::With_option_forContext *> HqlsqlParser::Grant_revoke_privilege_stmtContext::with_option_for() {
  return getRuleContexts<HqlsqlParser::With_option_forContext>();
}

HqlsqlParser::With_option_forContext* HqlsqlParser::Grant_revoke_privilege_stmtContext::with_option_for(size_t i) {
  return getRuleContext<HqlsqlParser::With_option_forContext>(i);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::Object_specificationContext* HqlsqlParser::Grant_revoke_privilege_stmtContext::object_specification() {
  return getRuleContext<HqlsqlParser::Object_specificationContext>(0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_ALL() {
  return getToken(HqlsqlParser::T_ALL, 0);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_PRIVILEGES() {
  return getToken(HqlsqlParser::T_PRIVILEGES, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Grant_revoke_privilege_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Grant_revoke_privilege_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Grant_revoke_privilege_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Grant_revoke_privilege_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}


size_t HqlsqlParser::Grant_revoke_privilege_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleGrant_revoke_privilege_stmt;
}

void HqlsqlParser::Grant_revoke_privilege_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_revoke_privilege_stmt(this);
}

void HqlsqlParser::Grant_revoke_privilege_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_revoke_privilege_stmt(this);
}


antlrcpp::Any HqlsqlParser::Grant_revoke_privilege_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitGrant_revoke_privilege_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Grant_revoke_privilege_stmtContext* HqlsqlParser::grant_revoke_privilege_stmt() {
  Grant_revoke_privilege_stmtContext *_localctx = _tracker.createInstance<Grant_revoke_privilege_stmtContext>(_ctx, getState());
  enterRule(_localctx, 168, HqlsqlParser::RuleGrant_revoke_privilege_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1682);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1654);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_GRANT

      || _la == HqlsqlParser::T_REVOKE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1656);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_GRANT || _la == HqlsqlParser::T_WITH || _la == HqlsqlParser::T_ADMIN) {
        setState(1655);
        with_option_for();
      }
      setState(1658);
      privilege_columns();
      setState(1661);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_ON) {
        setState(1659);
        match(HqlsqlParser::T_ON);
        setState(1660);
        object_specification();
      }
      setState(1663);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_FROM || _la == HqlsqlParser::T_TO)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1664);
      principal_specifications();
      setState(1666);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
      case 1: {
        setState(1665);
        with_option_for();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1668);
      match(HqlsqlParser::T_REVOKE);
      setState(1669);
      match(HqlsqlParser::T_ALL);
      setState(1670);
      match(HqlsqlParser::T_PRIVILEGES);
      setState(1671);
      match(HqlsqlParser::T_COMMA);
      setState(1672);
      with_option_for();
      setState(1673);
      match(HqlsqlParser::T_FROM);
      setState(1674);
      ident();
      setState(1679);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1675);
          match(HqlsqlParser::T_COMMA);
          setState(1676);
          ident(); 
        }
        setState(1681);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Privilege_columnsContext ------------------------------------------------------------------

HqlsqlParser::Privilege_columnsContext::Privilege_columnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Priv_typeContext *> HqlsqlParser::Privilege_columnsContext::priv_type() {
  return getRuleContexts<HqlsqlParser::Priv_typeContext>();
}

HqlsqlParser::Priv_typeContext* HqlsqlParser::Privilege_columnsContext::priv_type(size_t i) {
  return getRuleContext<HqlsqlParser::Priv_typeContext>(i);
}

std::vector<HqlsqlParser::Paren_column_listContext *> HqlsqlParser::Privilege_columnsContext::paren_column_list() {
  return getRuleContexts<HqlsqlParser::Paren_column_listContext>();
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Privilege_columnsContext::paren_column_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(i);
}


size_t HqlsqlParser::Privilege_columnsContext::getRuleIndex() const {
  return HqlsqlParser::RulePrivilege_columns;
}

void HqlsqlParser::Privilege_columnsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivilege_columns(this);
}

void HqlsqlParser::Privilege_columnsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivilege_columns(this);
}


antlrcpp::Any HqlsqlParser::Privilege_columnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPrivilege_columns(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Privilege_columnsContext* HqlsqlParser::privilege_columns() {
  Privilege_columnsContext *_localctx = _tracker.createInstance<Privilege_columnsContext>(_ctx, getState());
  enterRule(_localctx, 170, HqlsqlParser::RulePrivilege_columns);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1684);
    priv_type();
    setState(1686);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_OPEN_P) {
      setState(1685);
      paren_column_list();
    }
    setState(1694);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ALL)
      | (1ULL << HqlsqlParser::T_ALTER)
      | (1ULL << HqlsqlParser::T_CREATE))) != 0) || _la == HqlsqlParser::T_DROP

    || _la == HqlsqlParser::T_INDEX || _la == HqlsqlParser::T_SELECT

    || _la == HqlsqlParser::T_UPDATE || _la == HqlsqlParser::T_LOCK

    || _la == HqlsqlParser::T_SHOW_DATABASE) {
      setState(1688);
      priv_type();
      setState(1690);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_OPEN_P) {
        setState(1689);
        paren_column_list();
      }
      setState(1696);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Priv_typeContext ------------------------------------------------------------------

HqlsqlParser::Priv_typeContext::Priv_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_ALL() {
  return getToken(HqlsqlParser::T_ALL, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_UPDATE() {
  return getToken(HqlsqlParser::T_UPDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_DROP() {
  return getToken(HqlsqlParser::T_DROP, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_INDEX() {
  return getToken(HqlsqlParser::T_INDEX, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_LOCK() {
  return getToken(HqlsqlParser::T_LOCK, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_SELECT() {
  return getToken(HqlsqlParser::T_SELECT, 0);
}

tree::TerminalNode* HqlsqlParser::Priv_typeContext::T_SHOW_DATABASE() {
  return getToken(HqlsqlParser::T_SHOW_DATABASE, 0);
}


size_t HqlsqlParser::Priv_typeContext::getRuleIndex() const {
  return HqlsqlParser::RulePriv_type;
}

void HqlsqlParser::Priv_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPriv_type(this);
}

void HqlsqlParser::Priv_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPriv_type(this);
}


antlrcpp::Any HqlsqlParser::Priv_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPriv_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Priv_typeContext* HqlsqlParser::priv_type() {
  Priv_typeContext *_localctx = _tracker.createInstance<Priv_typeContext>(_ctx, getState());
  enterRule(_localctx, 172, HqlsqlParser::RulePriv_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ALL)
      | (1ULL << HqlsqlParser::T_ALTER)
      | (1ULL << HqlsqlParser::T_CREATE))) != 0) || _la == HqlsqlParser::T_DROP

    || _la == HqlsqlParser::T_INDEX || _la == HqlsqlParser::T_SELECT

    || _la == HqlsqlParser::T_UPDATE || _la == HqlsqlParser::T_LOCK

    || _la == HqlsqlParser::T_SHOW_DATABASE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_specificationContext ------------------------------------------------------------------

HqlsqlParser::Object_specificationContext::Object_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Object_specificationContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Object_specificationContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Object_specificationContext::T_DATABASE() {
  return getToken(HqlsqlParser::T_DATABASE, 0);
}

HqlsqlParser::Db_nameContext* HqlsqlParser::Object_specificationContext::db_name() {
  return getRuleContext<HqlsqlParser::Db_nameContext>(0);
}


size_t HqlsqlParser::Object_specificationContext::getRuleIndex() const {
  return HqlsqlParser::RuleObject_specification;
}

void HqlsqlParser::Object_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_specification(this);
}

void HqlsqlParser::Object_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_specification(this);
}


antlrcpp::Any HqlsqlParser::Object_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitObject_specification(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Object_specificationContext* HqlsqlParser::object_specification() {
  Object_specificationContext *_localctx = _tracker.createInstance<Object_specificationContext>(_ctx, getState());
  enterRule(_localctx, 174, HqlsqlParser::RuleObject_specification);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1703);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_TABLE: {
        enterOuterAlt(_localctx, 1);
        setState(1699);
        match(HqlsqlParser::T_TABLE);
        setState(1700);
        table_name();
        break;
      }

      case HqlsqlParser::T_DATABASE: {
        enterOuterAlt(_localctx, 2);
        setState(1701);
        match(HqlsqlParser::T_DATABASE);
        setState(1702);
        db_name();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_stmtContext ------------------------------------------------------------------

HqlsqlParser::Alter_stmtContext::Alter_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HqlsqlParser::Alter_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_stmt;
}

void HqlsqlParser::Alter_stmtContext::copyFrom(Alter_stmtContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Alter_indexContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Alter_indexContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_indexContext::T_INDEX() {
  return getToken(HqlsqlParser::T_INDEX, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Alter_indexContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_indexContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Alter_indexContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_indexContext::T_REBUILD() {
  return getToken(HqlsqlParser::T_REBUILD, 0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Alter_indexContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

HqlsqlParser::Alter_indexContext::Alter_indexContext(Alter_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Alter_indexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_index(this);
}
void HqlsqlParser::Alter_indexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_index(this);
}

antlrcpp::Any HqlsqlParser::Alter_indexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_index(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Alter_materialized_viewContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Alter_materialized_viewContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_materialized_viewContext::T_MATERIALIZED() {
  return getToken(HqlsqlParser::T_MATERIALIZED, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_materialized_viewContext::T_VIEW() {
  return getToken(HqlsqlParser::T_VIEW, 0);
}

HqlsqlParser::View_nameContext* HqlsqlParser::Alter_materialized_viewContext::view_name() {
  return getRuleContext<HqlsqlParser::View_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_materialized_viewContext::T_REWRITE() {
  return getToken(HqlsqlParser::T_REWRITE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_materialized_viewContext::T_ENABLE() {
  return getToken(HqlsqlParser::T_ENABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_materialized_viewContext::T_DISABLE() {
  return getToken(HqlsqlParser::T_DISABLE, 0);
}

HqlsqlParser::Alter_materialized_viewContext::Alter_materialized_viewContext(Alter_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Alter_materialized_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_materialized_view(this);
}
void HqlsqlParser::Alter_materialized_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_materialized_view(this);
}

antlrcpp::Any HqlsqlParser::Alter_materialized_viewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_materialized_view(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Alter_table_stmt_labelContext ------------------------------------------------------------------

HqlsqlParser::Alter_table_stmtContext* HqlsqlParser::Alter_table_stmt_labelContext::alter_table_stmt() {
  return getRuleContext<HqlsqlParser::Alter_table_stmtContext>(0);
}

HqlsqlParser::Alter_table_stmt_labelContext::Alter_table_stmt_labelContext(Alter_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Alter_table_stmt_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_stmt_label(this);
}
void HqlsqlParser::Alter_table_stmt_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_stmt_label(this);
}

antlrcpp::Any HqlsqlParser::Alter_table_stmt_labelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_stmt_label(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Alter_db_schema_viewContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Alter_db_schema_viewContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Alter_db_schema_viewContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_db_schema_viewContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

HqlsqlParser::Alter_optionContext* HqlsqlParser::Alter_db_schema_viewContext::alter_option() {
  return getRuleContext<HqlsqlParser::Alter_optionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_db_schema_viewContext::T_DATABASE() {
  return getToken(HqlsqlParser::T_DATABASE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_db_schema_viewContext::T_SCHEMA() {
  return getToken(HqlsqlParser::T_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_db_schema_viewContext::T_VIEW() {
  return getToken(HqlsqlParser::T_VIEW, 0);
}

HqlsqlParser::Alter_db_schema_viewContext::Alter_db_schema_viewContext(Alter_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Alter_db_schema_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_db_schema_view(this);
}
void HqlsqlParser::Alter_db_schema_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_db_schema_view(this);
}

antlrcpp::Any HqlsqlParser::Alter_db_schema_viewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_db_schema_view(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Alter_view_as_selectContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Alter_view_as_selectContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_view_as_selectContext::T_VIEW() {
  return getToken(HqlsqlParser::T_VIEW, 0);
}

HqlsqlParser::View_nameContext* HqlsqlParser::Alter_view_as_selectContext::view_name() {
  return getRuleContext<HqlsqlParser::View_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_view_as_selectContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Alter_view_as_selectContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

HqlsqlParser::Alter_view_as_selectContext::Alter_view_as_selectContext(Alter_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Alter_view_as_selectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_view_as_select(this);
}
void HqlsqlParser::Alter_view_as_selectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_view_as_select(this);
}

antlrcpp::Any HqlsqlParser::Alter_view_as_selectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_view_as_select(this);
  else
    return visitor->visitChildren(this);
}
HqlsqlParser::Alter_stmtContext* HqlsqlParser::alter_stmt() {
  Alter_stmtContext *_localctx = _tracker.createInstance<Alter_stmtContext>(_ctx, getState());
  enterRule(_localctx, 176, HqlsqlParser::RuleAlter_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1735);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Alter_stmtContext *>(_tracker.createInstance<HqlsqlParser::Alter_table_stmt_labelContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1705);
      alter_table_stmt();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Alter_stmtContext *>(_tracker.createInstance<HqlsqlParser::Alter_db_schema_viewContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1706);
      match(HqlsqlParser::T_ALTER);
      setState(1707);
      dynamic_cast<Alter_db_schema_viewContext *>(_localctx)->tk = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_DATABASE || _la == HqlsqlParser::T_SCHEMA

      || _la == HqlsqlParser::T_VIEW)) {
        dynamic_cast<Alter_db_schema_viewContext *>(_localctx)->tk = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1708);
      ident();
      setState(1709);
      match(HqlsqlParser::T_SET);
      setState(1710);
      alter_option();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Alter_stmtContext *>(_tracker.createInstance<HqlsqlParser::Alter_materialized_viewContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1712);
      match(HqlsqlParser::T_ALTER);
      setState(1713);
      match(HqlsqlParser::T_MATERIALIZED);
      setState(1714);
      match(HqlsqlParser::T_VIEW);
      setState(1715);
      view_name();
      setState(1716);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ENABLE

      || _la == HqlsqlParser::T_DISABLE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1717);
      match(HqlsqlParser::T_REWRITE);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Alter_stmtContext *>(_tracker.createInstance<HqlsqlParser::Alter_indexContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1719);
      match(HqlsqlParser::T_ALTER);
      setState(1720);
      match(HqlsqlParser::T_INDEX);
      setState(1721);
      ident();
      setState(1722);
      match(HqlsqlParser::T_ON);
      setState(1723);
      table_name();
      setState(1725);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(1724);
        partition_assignment_list();
      }
      setState(1727);
      match(HqlsqlParser::T_REBUILD);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Alter_stmtContext *>(_tracker.createInstance<HqlsqlParser::Alter_view_as_selectContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1729);
      match(HqlsqlParser::T_ALTER);
      setState(1730);
      match(HqlsqlParser::T_VIEW);
      setState(1731);
      view_name();
      setState(1732);
      match(HqlsqlParser::T_AS);
      setState(1733);
      select_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_optionContext ------------------------------------------------------------------

HqlsqlParser::Alter_optionContext::Alter_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::Alter_optionContext::property_values_part() {
  return getRuleContext<HqlsqlParser::Property_values_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_optionContext::T_OWNER() {
  return getToken(HqlsqlParser::T_OWNER, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Alter_optionContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_optionContext::T_USER() {
  return getToken(HqlsqlParser::T_USER, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_optionContext::T_ROLE() {
  return getToken(HqlsqlParser::T_ROLE, 0);
}

HqlsqlParser::Location_partContext* HqlsqlParser::Alter_optionContext::location_part() {
  return getRuleContext<HqlsqlParser::Location_partContext>(0);
}


size_t HqlsqlParser::Alter_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_option;
}

void HqlsqlParser::Alter_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_option(this);
}

void HqlsqlParser::Alter_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_option(this);
}


antlrcpp::Any HqlsqlParser::Alter_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Alter_optionContext* HqlsqlParser::alter_option() {
  Alter_optionContext *_localctx = _tracker.createInstance<Alter_optionContext>(_ctx, getState());
  enterRule(_localctx, 178, HqlsqlParser::RuleAlter_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1742);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_DBPROPERTIES:
      case HqlsqlParser::T_TBLPROPERTIES:
      case HqlsqlParser::T_IDXPROPERTIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_OPEN_P: {
        enterOuterAlt(_localctx, 1);
        setState(1737);
        property_values_part();
        break;
      }

      case HqlsqlParser::T_OWNER: {
        enterOuterAlt(_localctx, 2);
        setState(1738);
        match(HqlsqlParser::T_OWNER);
        setState(1739);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_ROLE || _la == HqlsqlParser::T_USER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1740);
        ident();
        break;
      }

      case HqlsqlParser::T_LOCATION: {
        enterOuterAlt(_localctx, 3);
        setState(1741);
        location_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_stmtContext ------------------------------------------------------------------

HqlsqlParser::Alter_table_stmtContext::Alter_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Alter_table_stmtContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Alter_table_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::Alter_table_item_optionsContext* HqlsqlParser::Alter_table_stmtContext::alter_table_item_options() {
  return getRuleContext<HqlsqlParser::Alter_table_item_optionsContext>(0);
}


size_t HqlsqlParser::Alter_table_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_table_stmt;
}

void HqlsqlParser::Alter_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_stmt(this);
}

void HqlsqlParser::Alter_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_stmt(this);
}


antlrcpp::Any HqlsqlParser::Alter_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Alter_table_stmtContext* HqlsqlParser::alter_table_stmt() {
  Alter_table_stmtContext *_localctx = _tracker.createInstance<Alter_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 180, HqlsqlParser::RuleAlter_table_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1744);
    match(HqlsqlParser::T_ALTER);
    setState(1745);
    match(HqlsqlParser::T_TABLE);
    setState(1746);
    table_name();
    setState(1747);
    alter_table_item_options();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_item_optionsContext ------------------------------------------------------------------

HqlsqlParser::Alter_table_item_optionsContext::Alter_table_item_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Alter_table_propertiesContext* HqlsqlParser::Alter_table_item_optionsContext::alter_table_properties() {
  return getRuleContext<HqlsqlParser::Alter_table_propertiesContext>(0);
}

HqlsqlParser::Alter_table_partition_propertiesContext* HqlsqlParser::Alter_table_item_optionsContext::alter_table_partition_properties() {
  return getRuleContext<HqlsqlParser::Alter_table_partition_propertiesContext>(0);
}

HqlsqlParser::Alter_table_or_partition_optionsContext* HqlsqlParser::Alter_table_item_optionsContext::alter_table_or_partition_options() {
  return getRuleContext<HqlsqlParser::Alter_table_or_partition_optionsContext>(0);
}

HqlsqlParser::Alter_table_column_propertiesContext* HqlsqlParser::Alter_table_item_optionsContext::alter_table_column_properties() {
  return getRuleContext<HqlsqlParser::Alter_table_column_propertiesContext>(0);
}


size_t HqlsqlParser::Alter_table_item_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_table_item_options;
}

void HqlsqlParser::Alter_table_item_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_item_options(this);
}

void HqlsqlParser::Alter_table_item_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_item_options(this);
}


antlrcpp::Any HqlsqlParser::Alter_table_item_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_item_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Alter_table_item_optionsContext* HqlsqlParser::alter_table_item_options() {
  Alter_table_item_optionsContext *_localctx = _tracker.createInstance<Alter_table_item_optionsContext>(_ctx, getState());
  enterRule(_localctx, 182, HqlsqlParser::RuleAlter_table_item_options);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1749);
      alter_table_properties();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1750);
      alter_table_partition_properties();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1751);
      alter_table_or_partition_options();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1752);
      alter_table_column_properties();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_propertiesContext ------------------------------------------------------------------

HqlsqlParser::Alter_table_propertiesContext::Alter_table_propertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Alter_table_propertiesContext::T_RENAME() {
  return getToken(HqlsqlParser::T_RENAME, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_propertiesContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

HqlsqlParser::New_table_nameContext* HqlsqlParser::Alter_table_propertiesContext::new_table_name() {
  return getRuleContext<HqlsqlParser::New_table_nameContext>(0);
}

HqlsqlParser::Set_tblpropertiesContext* HqlsqlParser::Alter_table_propertiesContext::set_tblproperties() {
  return getRuleContext<HqlsqlParser::Set_tblpropertiesContext>(0);
}

HqlsqlParser::Add_serde_propertiesContext* HqlsqlParser::Alter_table_propertiesContext::add_serde_properties() {
  return getRuleContext<HqlsqlParser::Add_serde_propertiesContext>(0);
}

HqlsqlParser::Table_storage_propertiesContext* HqlsqlParser::Alter_table_propertiesContext::table_storage_properties() {
  return getRuleContext<HqlsqlParser::Table_storage_propertiesContext>(0);
}

HqlsqlParser::Table_skewed_propertiesContext* HqlsqlParser::Alter_table_propertiesContext::table_skewed_properties() {
  return getRuleContext<HqlsqlParser::Table_skewed_propertiesContext>(0);
}

HqlsqlParser::Table_constraintsContext* HqlsqlParser::Alter_table_propertiesContext::table_constraints() {
  return getRuleContext<HqlsqlParser::Table_constraintsContext>(0);
}


size_t HqlsqlParser::Alter_table_propertiesContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_table_properties;
}

void HqlsqlParser::Alter_table_propertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_properties(this);
}

void HqlsqlParser::Alter_table_propertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_properties(this);
}


antlrcpp::Any HqlsqlParser::Alter_table_propertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_properties(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Alter_table_propertiesContext* HqlsqlParser::alter_table_properties() {
  Alter_table_propertiesContext *_localctx = _tracker.createInstance<Alter_table_propertiesContext>(_ctx, getState());
  enterRule(_localctx, 184, HqlsqlParser::RuleAlter_table_properties);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1763);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1755);
      match(HqlsqlParser::T_RENAME);
      setState(1756);
      match(HqlsqlParser::T_TO);
      setState(1757);
      new_table_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1758);
      set_tblproperties();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1759);
      add_serde_properties();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1760);
      table_storage_properties();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1761);
      table_skewed_properties();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1762);
      table_constraints();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_tblpropertiesContext ------------------------------------------------------------------

HqlsqlParser::Set_tblpropertiesContext::Set_tblpropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Set_tblpropertiesContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

tree::TerminalNode* HqlsqlParser::Set_tblpropertiesContext::T_TBLPROPERTIES() {
  return getToken(HqlsqlParser::T_TBLPROPERTIES, 0);
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::Set_tblpropertiesContext::property_values_part() {
  return getRuleContext<HqlsqlParser::Property_values_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Set_tblpropertiesContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Assignment_stmt_single_itemContext* HqlsqlParser::Set_tblpropertiesContext::assignment_stmt_single_item() {
  return getRuleContext<HqlsqlParser::Assignment_stmt_single_itemContext>(0);
}

tree::TerminalNode* HqlsqlParser::Set_tblpropertiesContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Set_tblpropertiesContext::getRuleIndex() const {
  return HqlsqlParser::RuleSet_tblproperties;
}

void HqlsqlParser::Set_tblpropertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_tblproperties(this);
}

void HqlsqlParser::Set_tblpropertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_tblproperties(this);
}


antlrcpp::Any HqlsqlParser::Set_tblpropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSet_tblproperties(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Set_tblpropertiesContext* HqlsqlParser::set_tblproperties() {
  Set_tblpropertiesContext *_localctx = _tracker.createInstance<Set_tblpropertiesContext>(_ctx, getState());
  enterRule(_localctx, 186, HqlsqlParser::RuleSet_tblproperties);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1765);
    match(HqlsqlParser::T_SET);
    setState(1766);
    match(HqlsqlParser::T_TBLPROPERTIES);
    setState(1772);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      setState(1767);
      property_values_part();
      break;
    }

    case 2: {
      setState(1768);
      match(HqlsqlParser::T_OPEN_P);
      setState(1769);
      assignment_stmt_single_item();
      setState(1770);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_serde_propertiesContext ------------------------------------------------------------------

HqlsqlParser::Add_serde_propertiesContext::Add_serde_propertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Add_serde_propertiesContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::Add_serde_propertiesContext::property_values_part() {
  return getRuleContext<HqlsqlParser::Property_values_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Add_serde_propertiesContext::T_SERDE() {
  return getToken(HqlsqlParser::T_SERDE, 0);
}

HqlsqlParser::Serde_class_nameContext* HqlsqlParser::Add_serde_propertiesContext::serde_class_name() {
  return getRuleContext<HqlsqlParser::Serde_class_nameContext>(0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Add_serde_propertiesContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

HqlsqlParser::Property_valuesContext* HqlsqlParser::Add_serde_propertiesContext::property_values() {
  return getRuleContext<HqlsqlParser::Property_valuesContext>(0);
}


size_t HqlsqlParser::Add_serde_propertiesContext::getRuleIndex() const {
  return HqlsqlParser::RuleAdd_serde_properties;
}

void HqlsqlParser::Add_serde_propertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_serde_properties(this);
}

void HqlsqlParser::Add_serde_propertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_serde_properties(this);
}


antlrcpp::Any HqlsqlParser::Add_serde_propertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAdd_serde_properties(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Add_serde_propertiesContext* HqlsqlParser::add_serde_properties() {
  Add_serde_propertiesContext *_localctx = _tracker.createInstance<Add_serde_propertiesContext>(_ctx, getState());
  enterRule(_localctx, 188, HqlsqlParser::RuleAdd_serde_properties);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_PARTITION) {
      setState(1774);
      partition_assignment_list();
    }
    setState(1777);
    match(HqlsqlParser::T_SET);
    setState(1784);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_DBPROPERTIES:
      case HqlsqlParser::T_TBLPROPERTIES:
      case HqlsqlParser::T_IDXPROPERTIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_OPEN_P: {
        setState(1778);
        property_values_part();
        break;
      }

      case HqlsqlParser::T_SERDE: {
        setState(1779);
        match(HqlsqlParser::T_SERDE);
        setState(1780);
        serde_class_name();
        setState(1782);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
        case 1: {
          setState(1781);
          property_values();
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Serde_class_nameContext ------------------------------------------------------------------

HqlsqlParser::Serde_class_nameContext::Serde_class_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Serde_class_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Serde_class_nameContext::L_S_STRING() {
  return getToken(HqlsqlParser::L_S_STRING, 0);
}

tree::TerminalNode* HqlsqlParser::Serde_class_nameContext::L_D_STRING() {
  return getToken(HqlsqlParser::L_D_STRING, 0);
}


size_t HqlsqlParser::Serde_class_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleSerde_class_name;
}

void HqlsqlParser::Serde_class_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSerde_class_name(this);
}

void HqlsqlParser::Serde_class_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSerde_class_name(this);
}


antlrcpp::Any HqlsqlParser::Serde_class_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSerde_class_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Serde_class_nameContext* HqlsqlParser::serde_class_name() {
  Serde_class_nameContext *_localctx = _tracker.createInstance<Serde_class_nameContext>(_ctx, getState());
  enterRule(_localctx, 190, HqlsqlParser::RuleSerde_class_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1789);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::L_ID: {
        enterOuterAlt(_localctx, 1);
        setState(1786);
        ident();
        break;
      }

      case HqlsqlParser::L_S_STRING: {
        enterOuterAlt(_localctx, 2);
        setState(1787);
        match(HqlsqlParser::L_S_STRING);
        break;
      }

      case HqlsqlParser::L_D_STRING: {
        enterOuterAlt(_localctx, 3);
        setState(1788);
        match(HqlsqlParser::L_D_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_storage_propertiesContext ------------------------------------------------------------------

HqlsqlParser::Table_storage_propertiesContext::Table_storage_propertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Table_storage_propertiesContext::T_CLUSTERED() {
  return getToken(HqlsqlParser::T_CLUSTERED, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Table_storage_propertiesContext::T_BY() {
  return getTokens(HqlsqlParser::T_BY);
}

tree::TerminalNode* HqlsqlParser::Table_storage_propertiesContext::T_BY(size_t i) {
  return getToken(HqlsqlParser::T_BY, i);
}

std::vector<HqlsqlParser::Paren_column_listContext *> HqlsqlParser::Table_storage_propertiesContext::paren_column_list() {
  return getRuleContexts<HqlsqlParser::Paren_column_listContext>();
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Table_storage_propertiesContext::paren_column_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Table_storage_propertiesContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Table_storage_propertiesContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Table_storage_propertiesContext::T_BUCKETS() {
  return getToken(HqlsqlParser::T_BUCKETS, 0);
}

tree::TerminalNode* HqlsqlParser::Table_storage_propertiesContext::T_SORTED() {
  return getToken(HqlsqlParser::T_SORTED, 0);
}

tree::TerminalNode* HqlsqlParser::Table_storage_propertiesContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

HqlsqlParser::Stored_as_partContext* HqlsqlParser::Table_storage_propertiesContext::stored_as_part() {
  return getRuleContext<HqlsqlParser::Stored_as_partContext>(0);
}


size_t HqlsqlParser::Table_storage_propertiesContext::getRuleIndex() const {
  return HqlsqlParser::RuleTable_storage_properties;
}

void HqlsqlParser::Table_storage_propertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_storage_properties(this);
}

void HqlsqlParser::Table_storage_propertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_storage_properties(this);
}


antlrcpp::Any HqlsqlParser::Table_storage_propertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTable_storage_properties(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Table_storage_propertiesContext* HqlsqlParser::table_storage_properties() {
  Table_storage_propertiesContext *_localctx = _tracker.createInstance<Table_storage_propertiesContext>(_ctx, getState());
  enterRule(_localctx, 192, HqlsqlParser::RuleTable_storage_properties);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1805);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_CLUSTERED: {
        enterOuterAlt(_localctx, 1);
        setState(1791);
        match(HqlsqlParser::T_CLUSTERED);
        setState(1792);
        match(HqlsqlParser::T_BY);
        setState(1793);
        paren_column_list();
        setState(1797);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_SORTED) {
          setState(1794);
          match(HqlsqlParser::T_SORTED);
          setState(1795);
          match(HqlsqlParser::T_BY);
          setState(1796);
          paren_column_list();
        }
        setState(1799);
        match(HqlsqlParser::T_INTO);
        setState(1800);
        ident();
        setState(1801);
        match(HqlsqlParser::T_BUCKETS);
        break;
      }

      case HqlsqlParser::T_NOT: {
        enterOuterAlt(_localctx, 2);
        setState(1803);
        match(HqlsqlParser::T_NOT);
        setState(1804);
        stored_as_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_skewed_propertiesContext ------------------------------------------------------------------

HqlsqlParser::Table_skewed_propertiesContext::Table_skewed_propertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_SKEWED() {
  return getToken(HqlsqlParser::T_SKEWED, 0);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

std::vector<HqlsqlParser::Paren_column_listContext *> HqlsqlParser::Table_skewed_propertiesContext::paren_column_list() {
  return getRuleContexts<HqlsqlParser::Paren_column_listContext>();
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Table_skewed_propertiesContext::paren_column_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::Stored_as_partContext* HqlsqlParser::Table_skewed_propertiesContext::stored_as_part() {
  return getRuleContext<HqlsqlParser::Stored_as_partContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Table_skewed_propertiesContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_LOCATION() {
  return getToken(HqlsqlParser::T_LOCATION, 0);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::Assignment_stmt_single_itemContext *> HqlsqlParser::Table_skewed_propertiesContext::assignment_stmt_single_item() {
  return getRuleContexts<HqlsqlParser::Assignment_stmt_single_itemContext>();
}

HqlsqlParser::Assignment_stmt_single_itemContext* HqlsqlParser::Table_skewed_propertiesContext::assignment_stmt_single_item(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_stmt_single_itemContext>(i);
}

tree::TerminalNode* HqlsqlParser::Table_skewed_propertiesContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Table_skewed_propertiesContext::getRuleIndex() const {
  return HqlsqlParser::RuleTable_skewed_properties;
}

void HqlsqlParser::Table_skewed_propertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_skewed_properties(this);
}

void HqlsqlParser::Table_skewed_propertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_skewed_properties(this);
}


antlrcpp::Any HqlsqlParser::Table_skewed_propertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTable_skewed_properties(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Table_skewed_propertiesContext* HqlsqlParser::table_skewed_properties() {
  Table_skewed_propertiesContext *_localctx = _tracker.createInstance<Table_skewed_propertiesContext>(_ctx, getState());
  enterRule(_localctx, 194, HqlsqlParser::RuleTable_skewed_properties);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1837);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_SKEWED: {
        enterOuterAlt(_localctx, 1);
        setState(1807);
        match(HqlsqlParser::T_SKEWED);
        setState(1808);
        match(HqlsqlParser::T_BY);
        setState(1809);
        paren_column_list();
        setState(1810);
        match(HqlsqlParser::T_ON);
        setState(1811);
        paren_column_list();
        setState(1816);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(1812);
          match(HqlsqlParser::T_COMMA);
          setState(1813);
          paren_column_list();
          setState(1818);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1819);
        stored_as_part();
        break;
      }

      case HqlsqlParser::T_NOT: {
        enterOuterAlt(_localctx, 2);
        setState(1821);
        match(HqlsqlParser::T_NOT);
        setState(1822);
        match(HqlsqlParser::T_SKEWED);
        break;
      }

      case HqlsqlParser::T_SET: {
        enterOuterAlt(_localctx, 3);
        setState(1823);
        match(HqlsqlParser::T_SET);
        setState(1824);
        match(HqlsqlParser::T_SKEWED);
        setState(1825);
        match(HqlsqlParser::T_LOCATION);
        setState(1826);
        match(HqlsqlParser::T_OPEN_P);
        setState(1827);
        assignment_stmt_single_item();
        setState(1832);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(1828);
          match(HqlsqlParser::T_COMMA);
          setState(1829);
          assignment_stmt_single_item();
          setState(1834);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1835);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_constraintsContext ------------------------------------------------------------------

HqlsqlParser::Table_constraintsContext::Table_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Add_constraint_propertyContext* HqlsqlParser::Table_constraintsContext::add_constraint_property() {
  return getRuleContext<HqlsqlParser::Add_constraint_propertyContext>(0);
}

HqlsqlParser::Change_column_propertyContext* HqlsqlParser::Table_constraintsContext::change_column_property() {
  return getRuleContext<HqlsqlParser::Change_column_propertyContext>(0);
}

HqlsqlParser::Drop_constraint_propertyContext* HqlsqlParser::Table_constraintsContext::drop_constraint_property() {
  return getRuleContext<HqlsqlParser::Drop_constraint_propertyContext>(0);
}


size_t HqlsqlParser::Table_constraintsContext::getRuleIndex() const {
  return HqlsqlParser::RuleTable_constraints;
}

void HqlsqlParser::Table_constraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_constraints(this);
}

void HqlsqlParser::Table_constraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_constraints(this);
}


antlrcpp::Any HqlsqlParser::Table_constraintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTable_constraints(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Table_constraintsContext* HqlsqlParser::table_constraints() {
  Table_constraintsContext *_localctx = _tracker.createInstance<Table_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 196, HqlsqlParser::RuleTable_constraints);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1842);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ADD: {
        enterOuterAlt(_localctx, 1);
        setState(1839);
        add_constraint_property();
        break;
      }

      case HqlsqlParser::T_CHANGE: {
        enterOuterAlt(_localctx, 2);
        setState(1840);
        change_column_property();
        break;
      }

      case HqlsqlParser::T_DROP: {
        enterOuterAlt(_localctx, 3);
        setState(1841);
        drop_constraint_property();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_constraint_propertyContext ------------------------------------------------------------------

HqlsqlParser::Add_constraint_propertyContext::Add_constraint_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_ADD() {
  return getToken(HqlsqlParser::T_ADD, 0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_CONSTRAINT() {
  return getToken(HqlsqlParser::T_CONSTRAINT, 0);
}

HqlsqlParser::Constraint_nameContext* HqlsqlParser::Add_constraint_propertyContext::constraint_name() {
  return getRuleContext<HqlsqlParser::Constraint_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_PRIMARY() {
  return getToken(HqlsqlParser::T_PRIMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_KEY() {
  return getToken(HqlsqlParser::T_KEY, 0);
}

std::vector<HqlsqlParser::Paren_column_listContext *> HqlsqlParser::Add_constraint_propertyContext::paren_column_list() {
  return getRuleContexts<HqlsqlParser::Paren_column_listContext>();
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Add_constraint_propertyContext::paren_column_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_DISABLE() {
  return getToken(HqlsqlParser::T_DISABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_NOVALIDATE() {
  return getToken(HqlsqlParser::T_NOVALIDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_FOREIGN() {
  return getToken(HqlsqlParser::T_FOREIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_REFERENCES() {
  return getToken(HqlsqlParser::T_REFERENCES, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Add_constraint_propertyContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_RELY() {
  return getToken(HqlsqlParser::T_RELY, 0);
}

tree::TerminalNode* HqlsqlParser::Add_constraint_propertyContext::T_UNIQUE() {
  return getToken(HqlsqlParser::T_UNIQUE, 0);
}


size_t HqlsqlParser::Add_constraint_propertyContext::getRuleIndex() const {
  return HqlsqlParser::RuleAdd_constraint_property;
}

void HqlsqlParser::Add_constraint_propertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_constraint_property(this);
}

void HqlsqlParser::Add_constraint_propertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_constraint_property(this);
}


antlrcpp::Any HqlsqlParser::Add_constraint_propertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAdd_constraint_property(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Add_constraint_propertyContext* HqlsqlParser::add_constraint_property() {
  Add_constraint_propertyContext *_localctx = _tracker.createInstance<Add_constraint_propertyContext>(_ctx, getState());
  enterRule(_localctx, 198, HqlsqlParser::RuleAdd_constraint_property);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1874);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1844);
      match(HqlsqlParser::T_ADD);
      setState(1845);
      match(HqlsqlParser::T_CONSTRAINT);
      setState(1846);
      constraint_name();
      setState(1847);
      match(HqlsqlParser::T_PRIMARY);
      setState(1848);
      match(HqlsqlParser::T_KEY);
      setState(1849);
      paren_column_list();
      setState(1850);
      match(HqlsqlParser::T_DISABLE);
      setState(1851);
      match(HqlsqlParser::T_NOVALIDATE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1853);
      match(HqlsqlParser::T_ADD);
      setState(1854);
      match(HqlsqlParser::T_CONSTRAINT);
      setState(1855);
      constraint_name();
      setState(1856);
      match(HqlsqlParser::T_FOREIGN);
      setState(1857);
      match(HqlsqlParser::T_KEY);
      setState(1858);
      paren_column_list();
      setState(1859);
      match(HqlsqlParser::T_REFERENCES);
      setState(1860);
      table_name();
      setState(1861);
      paren_column_list();
      setState(1862);
      match(HqlsqlParser::T_DISABLE);
      setState(1863);
      match(HqlsqlParser::T_NOVALIDATE);
      setState(1864);
      match(HqlsqlParser::T_RELY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1866);
      match(HqlsqlParser::T_ADD);
      setState(1867);
      match(HqlsqlParser::T_CONSTRAINT);
      setState(1868);
      constraint_name();
      setState(1869);
      match(HqlsqlParser::T_UNIQUE);
      setState(1870);
      paren_column_list();
      setState(1871);
      match(HqlsqlParser::T_DISABLE);
      setState(1872);
      match(HqlsqlParser::T_NOVALIDATE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Change_column_propertyContext ------------------------------------------------------------------

HqlsqlParser::Change_column_propertyContext::Change_column_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_CHANGE() {
  return getToken(HqlsqlParser::T_CHANGE, 0);
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_COLUMN() {
  return getToken(HqlsqlParser::T_COLUMN, 0);
}

std::vector<HqlsqlParser::Column_nameContext *> HqlsqlParser::Change_column_propertyContext::column_name() {
  return getRuleContexts<HqlsqlParser::Column_nameContext>();
}

HqlsqlParser::Column_nameContext* HqlsqlParser::Change_column_propertyContext::column_name(size_t i) {
  return getRuleContext<HqlsqlParser::Column_nameContext>(i);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Change_column_propertyContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_CONSTRAINT() {
  return getToken(HqlsqlParser::T_CONSTRAINT, 0);
}

HqlsqlParser::Constraint_nameContext* HqlsqlParser::Change_column_propertyContext::constraint_name() {
  return getRuleContext<HqlsqlParser::Constraint_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_ENABLE() {
  return getToken(HqlsqlParser::T_ENABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_DEFAULT() {
  return getToken(HqlsqlParser::T_DEFAULT, 0);
}

HqlsqlParser::Default_valueContext* HqlsqlParser::Change_column_propertyContext::default_value() {
  return getRuleContext<HqlsqlParser::Default_valueContext>(0);
}

tree::TerminalNode* HqlsqlParser::Change_column_propertyContext::T_CHECK() {
  return getToken(HqlsqlParser::T_CHECK, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Change_column_propertyContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Change_column_propertyContext::getRuleIndex() const {
  return HqlsqlParser::RuleChange_column_property;
}

void HqlsqlParser::Change_column_propertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChange_column_property(this);
}

void HqlsqlParser::Change_column_propertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChange_column_property(this);
}


antlrcpp::Any HqlsqlParser::Change_column_propertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitChange_column_property(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Change_column_propertyContext* HqlsqlParser::change_column_property() {
  Change_column_propertyContext *_localctx = _tracker.createInstance<Change_column_propertyContext>(_ctx, getState());
  enterRule(_localctx, 200, HqlsqlParser::RuleChange_column_property);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1876);
    match(HqlsqlParser::T_CHANGE);
    setState(1877);
    match(HqlsqlParser::T_COLUMN);
    setState(1878);
    column_name();
    setState(1879);
    column_name();
    setState(1880);
    dtype();
    setState(1881);
    match(HqlsqlParser::T_CONSTRAINT);
    setState(1882);
    constraint_name();
    setState(1894);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_NOT: {
        setState(1883);
        match(HqlsqlParser::T_NOT);
        setState(1884);
        match(HqlsqlParser::T_NULL);
        setState(1885);
        match(HqlsqlParser::T_ENABLE);
        break;
      }

      case HqlsqlParser::T_DEFAULT: {
        setState(1886);
        match(HqlsqlParser::T_DEFAULT);
        setState(1887);
        default_value();
        setState(1888);
        match(HqlsqlParser::T_ENABLE);
        break;
      }

      case HqlsqlParser::T_CHECK: {
        setState(1890);
        match(HqlsqlParser::T_CHECK);
        setState(1891);
        expr(0);
        setState(1892);
        match(HqlsqlParser::T_ENABLE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_constraint_propertyContext ------------------------------------------------------------------

HqlsqlParser::Drop_constraint_propertyContext::Drop_constraint_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Drop_constraint_propertyContext::T_DROP() {
  return getToken(HqlsqlParser::T_DROP, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_constraint_propertyContext::T_CONSTRAINT() {
  return getToken(HqlsqlParser::T_CONSTRAINT, 0);
}

HqlsqlParser::Constraint_nameContext* HqlsqlParser::Drop_constraint_propertyContext::constraint_name() {
  return getRuleContext<HqlsqlParser::Constraint_nameContext>(0);
}


size_t HqlsqlParser::Drop_constraint_propertyContext::getRuleIndex() const {
  return HqlsqlParser::RuleDrop_constraint_property;
}

void HqlsqlParser::Drop_constraint_propertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_constraint_property(this);
}

void HqlsqlParser::Drop_constraint_propertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_constraint_property(this);
}


antlrcpp::Any HqlsqlParser::Drop_constraint_propertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDrop_constraint_property(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Drop_constraint_propertyContext* HqlsqlParser::drop_constraint_property() {
  Drop_constraint_propertyContext *_localctx = _tracker.createInstance<Drop_constraint_propertyContext>(_ctx, getState());
  enterRule(_localctx, 202, HqlsqlParser::RuleDrop_constraint_property);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1896);
    match(HqlsqlParser::T_DROP);
    setState(1897);
    match(HqlsqlParser::T_CONSTRAINT);
    setState(1898);
    constraint_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- New_table_nameContext ------------------------------------------------------------------

HqlsqlParser::New_table_nameContext::New_table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::New_table_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::New_table_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleNew_table_name;
}

void HqlsqlParser::New_table_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNew_table_name(this);
}

void HqlsqlParser::New_table_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNew_table_name(this);
}


antlrcpp::Any HqlsqlParser::New_table_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitNew_table_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::New_table_nameContext* HqlsqlParser::new_table_name() {
  New_table_nameContext *_localctx = _tracker.createInstance<New_table_nameContext>(_ctx, getState());
  enterRule(_localctx, 204, HqlsqlParser::RuleNew_table_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1900);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_partition_propertiesContext ------------------------------------------------------------------

HqlsqlParser::Alter_table_partition_propertiesContext::Alter_table_partition_propertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Add_partition_propertyContext* HqlsqlParser::Alter_table_partition_propertiesContext::add_partition_property() {
  return getRuleContext<HqlsqlParser::Add_partition_propertyContext>(0);
}

std::vector<HqlsqlParser::Partition_assignment_listContext *> HqlsqlParser::Alter_table_partition_propertiesContext::partition_assignment_list() {
  return getRuleContexts<HqlsqlParser::Partition_assignment_listContext>();
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Alter_table_partition_propertiesContext::partition_assignment_list(size_t i) {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_RENAME() {
  return getToken(HqlsqlParser::T_RENAME, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_EXCHANGE() {
  return getToken(HqlsqlParser::T_EXCHANGE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_PARTITION() {
  return getToken(HqlsqlParser::T_PARTITION, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::Partition_specContext *> HqlsqlParser::Alter_table_partition_propertiesContext::partition_spec() {
  return getRuleContexts<HqlsqlParser::Partition_specContext>();
}

HqlsqlParser::Partition_specContext* HqlsqlParser::Alter_table_partition_propertiesContext::partition_spec(size_t i) {
  return getRuleContext<HqlsqlParser::Partition_specContext>(i);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Alter_table_partition_propertiesContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Alter_table_partition_propertiesContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Alter_table_partition_propertiesContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

HqlsqlParser::Recover_partition_propertyContext* HqlsqlParser::Alter_table_partition_propertiesContext::recover_partition_property() {
  return getRuleContext<HqlsqlParser::Recover_partition_propertyContext>(0);
}

HqlsqlParser::Drop_partition_propertyContext* HqlsqlParser::Alter_table_partition_propertiesContext::drop_partition_property() {
  return getRuleContext<HqlsqlParser::Drop_partition_propertyContext>(0);
}

HqlsqlParser::Archive_partition_propertyContext* HqlsqlParser::Alter_table_partition_propertiesContext::archive_partition_property() {
  return getRuleContext<HqlsqlParser::Archive_partition_propertyContext>(0);
}


size_t HqlsqlParser::Alter_table_partition_propertiesContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_table_partition_properties;
}

void HqlsqlParser::Alter_table_partition_propertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_partition_properties(this);
}

void HqlsqlParser::Alter_table_partition_propertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_partition_properties(this);
}


antlrcpp::Any HqlsqlParser::Alter_table_partition_propertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_partition_properties(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Alter_table_partition_propertiesContext* HqlsqlParser::alter_table_partition_properties() {
  Alter_table_partition_propertiesContext *_localctx = _tracker.createInstance<Alter_table_partition_propertiesContext>(_ctx, getState());
  enterRule(_localctx, 206, HqlsqlParser::RuleAlter_table_partition_properties);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1927);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ADD: {
        enterOuterAlt(_localctx, 1);
        setState(1902);
        add_partition_property();
        break;
      }

      case HqlsqlParser::T_PARTITION: {
        enterOuterAlt(_localctx, 2);
        setState(1903);
        partition_assignment_list();
        setState(1904);
        match(HqlsqlParser::T_RENAME);
        setState(1905);
        match(HqlsqlParser::T_TO);
        setState(1906);
        partition_assignment_list();
        break;
      }

      case HqlsqlParser::T_EXCHANGE: {
        enterOuterAlt(_localctx, 3);
        setState(1908);
        match(HqlsqlParser::T_EXCHANGE);
        setState(1909);
        match(HqlsqlParser::T_PARTITION);
        setState(1910);
        match(HqlsqlParser::T_OPEN_P);
        setState(1911);
        partition_spec();
        setState(1916);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(1912);
          match(HqlsqlParser::T_COMMA);
          setState(1913);
          partition_spec();
          setState(1918);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1919);
        match(HqlsqlParser::T_CLOSE_P);
        setState(1920);
        match(HqlsqlParser::T_WITH);
        setState(1921);
        match(HqlsqlParser::T_TABLE);
        setState(1922);
        table_name();
        break;
      }

      case HqlsqlParser::T_RECOVER: {
        enterOuterAlt(_localctx, 4);
        setState(1924);
        recover_partition_property();
        break;
      }

      case HqlsqlParser::T_DROP: {
        enterOuterAlt(_localctx, 5);
        setState(1925);
        drop_partition_property();
        break;
      }

      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE: {
        enterOuterAlt(_localctx, 6);
        setState(1926);
        archive_partition_property();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_partition_propertyContext ------------------------------------------------------------------

HqlsqlParser::Add_partition_propertyContext::Add_partition_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Add_partition_propertyContext::T_ADD() {
  return getToken(HqlsqlParser::T_ADD, 0);
}

HqlsqlParser::Add_partition_property_optionsContext* HqlsqlParser::Add_partition_propertyContext::add_partition_property_options() {
  return getRuleContext<HqlsqlParser::Add_partition_property_optionsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Add_partition_propertyContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Add_partition_propertyContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Add_partition_propertyContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}


size_t HqlsqlParser::Add_partition_propertyContext::getRuleIndex() const {
  return HqlsqlParser::RuleAdd_partition_property;
}

void HqlsqlParser::Add_partition_propertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_partition_property(this);
}

void HqlsqlParser::Add_partition_propertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_partition_property(this);
}


antlrcpp::Any HqlsqlParser::Add_partition_propertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAdd_partition_property(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Add_partition_propertyContext* HqlsqlParser::add_partition_property() {
  Add_partition_propertyContext *_localctx = _tracker.createInstance<Add_partition_propertyContext>(_ctx, getState());
  enterRule(_localctx, 208, HqlsqlParser::RuleAdd_partition_property);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1929);
    match(HqlsqlParser::T_ADD);
    setState(1933);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_IF) {
      setState(1930);
      match(HqlsqlParser::T_IF);
      setState(1931);
      match(HqlsqlParser::T_NOT);
      setState(1932);
      match(HqlsqlParser::T_EXISTS);
    }
    setState(1935);
    add_partition_property_options();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_partition_property_optionsContext ------------------------------------------------------------------

HqlsqlParser::Add_partition_property_optionsContext::Add_partition_property_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Add_partition_property_optionContext *> HqlsqlParser::Add_partition_property_optionsContext::add_partition_property_option() {
  return getRuleContexts<HqlsqlParser::Add_partition_property_optionContext>();
}

HqlsqlParser::Add_partition_property_optionContext* HqlsqlParser::Add_partition_property_optionsContext::add_partition_property_option(size_t i) {
  return getRuleContext<HqlsqlParser::Add_partition_property_optionContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Add_partition_property_optionsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Add_partition_property_optionsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Add_partition_property_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleAdd_partition_property_options;
}

void HqlsqlParser::Add_partition_property_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_partition_property_options(this);
}

void HqlsqlParser::Add_partition_property_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_partition_property_options(this);
}


antlrcpp::Any HqlsqlParser::Add_partition_property_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAdd_partition_property_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Add_partition_property_optionsContext* HqlsqlParser::add_partition_property_options() {
  Add_partition_property_optionsContext *_localctx = _tracker.createInstance<Add_partition_property_optionsContext>(_ctx, getState());
  enterRule(_localctx, 210, HqlsqlParser::RuleAdd_partition_property_options);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1937);
    add_partition_property_option();
    setState(1942);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1938);
        match(HqlsqlParser::T_COMMA);
        setState(1939);
        add_partition_property_option(); 
      }
      setState(1944);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_partition_property_optionContext ------------------------------------------------------------------

HqlsqlParser::Add_partition_property_optionContext::Add_partition_property_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Add_partition_property_optionContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Add_partition_property_optionContext::T_LOCATION() {
  return getToken(HqlsqlParser::T_LOCATION, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Add_partition_property_optionContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Add_partition_property_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleAdd_partition_property_option;
}

void HqlsqlParser::Add_partition_property_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_partition_property_option(this);
}

void HqlsqlParser::Add_partition_property_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_partition_property_option(this);
}


antlrcpp::Any HqlsqlParser::Add_partition_property_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAdd_partition_property_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Add_partition_property_optionContext* HqlsqlParser::add_partition_property_option() {
  Add_partition_property_optionContext *_localctx = _tracker.createInstance<Add_partition_property_optionContext>(_ctx, getState());
  enterRule(_localctx, 212, HqlsqlParser::RuleAdd_partition_property_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1945);
    partition_assignment_list();
    setState(1948);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      setState(1946);
      match(HqlsqlParser::T_LOCATION);
      setState(1947);
      ident();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Recover_partition_propertyContext ------------------------------------------------------------------

HqlsqlParser::Recover_partition_propertyContext::Recover_partition_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Recover_partition_propertyContext::T_RECOVER() {
  return getToken(HqlsqlParser::T_RECOVER, 0);
}

tree::TerminalNode* HqlsqlParser::Recover_partition_propertyContext::T_PARTITIONS() {
  return getToken(HqlsqlParser::T_PARTITIONS, 0);
}


size_t HqlsqlParser::Recover_partition_propertyContext::getRuleIndex() const {
  return HqlsqlParser::RuleRecover_partition_property;
}

void HqlsqlParser::Recover_partition_propertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecover_partition_property(this);
}

void HqlsqlParser::Recover_partition_propertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecover_partition_property(this);
}


antlrcpp::Any HqlsqlParser::Recover_partition_propertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitRecover_partition_property(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Recover_partition_propertyContext* HqlsqlParser::recover_partition_property() {
  Recover_partition_propertyContext *_localctx = _tracker.createInstance<Recover_partition_propertyContext>(_ctx, getState());
  enterRule(_localctx, 214, HqlsqlParser::RuleRecover_partition_property);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1950);
    match(HqlsqlParser::T_RECOVER);
    setState(1951);
    match(HqlsqlParser::T_PARTITIONS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_partition_propertyContext ------------------------------------------------------------------

HqlsqlParser::Drop_partition_propertyContext::Drop_partition_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Drop_partition_propertyContext::T_DROP() {
  return getToken(HqlsqlParser::T_DROP, 0);
}

std::vector<HqlsqlParser::Partition_assignment_listContext *> HqlsqlParser::Drop_partition_propertyContext::partition_assignment_list() {
  return getRuleContexts<HqlsqlParser::Partition_assignment_listContext>();
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Drop_partition_propertyContext::partition_assignment_list(size_t i) {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Drop_partition_propertyContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_partition_propertyContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Drop_partition_propertyContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Drop_partition_propertyContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

tree::TerminalNode* HqlsqlParser::Drop_partition_propertyContext::T_IGNORE() {
  return getToken(HqlsqlParser::T_IGNORE, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_partition_propertyContext::T_PROTECTION() {
  return getToken(HqlsqlParser::T_PROTECTION, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_partition_propertyContext::T_PURGE() {
  return getToken(HqlsqlParser::T_PURGE, 0);
}


size_t HqlsqlParser::Drop_partition_propertyContext::getRuleIndex() const {
  return HqlsqlParser::RuleDrop_partition_property;
}

void HqlsqlParser::Drop_partition_propertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_partition_property(this);
}

void HqlsqlParser::Drop_partition_propertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_partition_property(this);
}


antlrcpp::Any HqlsqlParser::Drop_partition_propertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDrop_partition_property(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Drop_partition_propertyContext* HqlsqlParser::drop_partition_property() {
  Drop_partition_propertyContext *_localctx = _tracker.createInstance<Drop_partition_propertyContext>(_ctx, getState());
  enterRule(_localctx, 216, HqlsqlParser::RuleDrop_partition_property);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1953);
    match(HqlsqlParser::T_DROP);
    setState(1956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_IF) {
      setState(1954);
      match(HqlsqlParser::T_IF);
      setState(1955);
      match(HqlsqlParser::T_EXISTS);
    }
    setState(1958);
    partition_assignment_list();
    setState(1963);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1959);
        match(HqlsqlParser::T_COMMA);
        setState(1960);
        partition_assignment_list(); 
      }
      setState(1965);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx);
    }
    setState(1968);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      setState(1966);
      match(HqlsqlParser::T_IGNORE);
      setState(1967);
      match(HqlsqlParser::T_PROTECTION);
      break;
    }

    }
    setState(1971);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      setState(1970);
      match(HqlsqlParser::T_PURGE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Archive_partition_propertyContext ------------------------------------------------------------------

HqlsqlParser::Archive_partition_propertyContext::Archive_partition_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Archive_partition_propertyContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Archive_partition_propertyContext::T_ARCHIVE() {
  return getToken(HqlsqlParser::T_ARCHIVE, 0);
}

tree::TerminalNode* HqlsqlParser::Archive_partition_propertyContext::T_UNARCHIVE() {
  return getToken(HqlsqlParser::T_UNARCHIVE, 0);
}


size_t HqlsqlParser::Archive_partition_propertyContext::getRuleIndex() const {
  return HqlsqlParser::RuleArchive_partition_property;
}

void HqlsqlParser::Archive_partition_propertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArchive_partition_property(this);
}

void HqlsqlParser::Archive_partition_propertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArchive_partition_property(this);
}


antlrcpp::Any HqlsqlParser::Archive_partition_propertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitArchive_partition_property(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Archive_partition_propertyContext* HqlsqlParser::archive_partition_property() {
  Archive_partition_propertyContext *_localctx = _tracker.createInstance<Archive_partition_propertyContext>(_ctx, getState());
  enterRule(_localctx, 218, HqlsqlParser::RuleArchive_partition_property);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1973);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ARCHIVE

    || _la == HqlsqlParser::T_UNARCHIVE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1974);
    partition_assignment_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_or_partition_optionsContext ------------------------------------------------------------------

HqlsqlParser::Alter_table_or_partition_optionsContext::Alter_table_or_partition_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_FILEFORMAT() {
  return getToken(HqlsqlParser::T_FILEFORMAT, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_LOCATION() {
  return getToken(HqlsqlParser::T_LOCATION, 0);
}

HqlsqlParser::File_formatContext* HqlsqlParser::Alter_table_or_partition_optionsContext::file_format() {
  return getRuleContext<HqlsqlParser::File_formatContext>(0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Alter_table_or_partition_optionsContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Alter_table_or_partition_optionsContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_TOUCH() {
  return getToken(HqlsqlParser::T_TOUCH, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_ENABLE() {
  return getToken(HqlsqlParser::T_ENABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_DISABLE() {
  return getToken(HqlsqlParser::T_DISABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_OFFLINE() {
  return getToken(HqlsqlParser::T_OFFLINE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_NO_DROP() {
  return getToken(HqlsqlParser::T_NO_DROP, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_CASCADE() {
  return getToken(HqlsqlParser::T_CASCADE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_COMPACT() {
  return getToken(HqlsqlParser::T_COMPACT, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_AND() {
  return getToken(HqlsqlParser::T_AND, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_WAIT() {
  return getToken(HqlsqlParser::T_WAIT, 0);
}

HqlsqlParser::Property_valuesContext* HqlsqlParser::Alter_table_or_partition_optionsContext::property_values() {
  return getRuleContext<HqlsqlParser::Property_valuesContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_CONCATENATE() {
  return getToken(HqlsqlParser::T_CONCATENATE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_UPDATE() {
  return getToken(HqlsqlParser::T_UPDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_or_partition_optionsContext::T_COLUMNS() {
  return getToken(HqlsqlParser::T_COLUMNS, 0);
}


size_t HqlsqlParser::Alter_table_or_partition_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_table_or_partition_options;
}

void HqlsqlParser::Alter_table_or_partition_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_or_partition_options(this);
}

void HqlsqlParser::Alter_table_or_partition_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_or_partition_options(this);
}


antlrcpp::Any HqlsqlParser::Alter_table_or_partition_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_or_partition_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Alter_table_or_partition_optionsContext* HqlsqlParser::alter_table_or_partition_options() {
  Alter_table_or_partition_optionsContext *_localctx = _tracker.createInstance<Alter_table_or_partition_optionsContext>(_ctx, getState());
  enterRule(_localctx, 220, HqlsqlParser::RuleAlter_table_or_partition_options);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2020);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1977);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(1976);
        partition_assignment_list();
      }
      setState(1979);
      match(HqlsqlParser::T_SET);
      setState(1980);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_LOCATION || _la == HqlsqlParser::T_FILEFORMAT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1983);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
      case 1: {
        setState(1981);
        file_format();
        break;
      }

      case 2: {
        setState(1982);
        ident();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1985);
      match(HqlsqlParser::T_TOUCH);
      setState(1987);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
      case 1: {
        setState(1986);
        partition_assignment_list();
        break;
      }

      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1990);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(1989);
        partition_assignment_list();
      }
      setState(1992);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ENABLE

      || _la == HqlsqlParser::T_DISABLE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1998);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_OFFLINE: {
          setState(1993);
          match(HqlsqlParser::T_OFFLINE);
          break;
        }

        case HqlsqlParser::T_NO_DROP: {
          setState(1994);
          match(HqlsqlParser::T_NO_DROP);
          setState(1996);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
          case 1: {
            setState(1995);
            match(HqlsqlParser::T_CASCADE);
            break;
          }

          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2001);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(2000);
        partition_assignment_list();
      }
      setState(2003);
      match(HqlsqlParser::T_COMPACT);
      setState(2004);
      ident();
      setState(2007);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
      case 1: {
        setState(2005);
        match(HqlsqlParser::T_AND);
        setState(2006);
        match(HqlsqlParser::T_WAIT);
        break;
      }

      }
      setState(2010);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
      case 1: {
        setState(2009);
        property_values();
        break;
      }

      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2013);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(2012);
        partition_assignment_list();
      }
      setState(2018);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_CONCATENATE: {
          setState(2015);
          match(HqlsqlParser::T_CONCATENATE);
          break;
        }

        case HqlsqlParser::T_UPDATE: {
          setState(2016);
          match(HqlsqlParser::T_UPDATE);
          setState(2017);
          match(HqlsqlParser::T_COLUMNS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_column_propertiesContext ------------------------------------------------------------------

HqlsqlParser::Alter_table_column_propertiesContext::Alter_table_column_propertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_CHANGE() {
  return getToken(HqlsqlParser::T_CHANGE, 0);
}

HqlsqlParser::Old_column_nameContext* HqlsqlParser::Alter_table_column_propertiesContext::old_column_name() {
  return getRuleContext<HqlsqlParser::Old_column_nameContext>(0);
}

HqlsqlParser::New_column_nameContext* HqlsqlParser::Alter_table_column_propertiesContext::new_column_name() {
  return getRuleContext<HqlsqlParser::New_column_nameContext>(0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Alter_table_column_propertiesContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Alter_table_column_propertiesContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Alter_table_column_propertiesContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_COLUMN() {
  return getToken(HqlsqlParser::T_COLUMN, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_FIRST() {
  return getToken(HqlsqlParser::T_FIRST, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_AFTER() {
  return getToken(HqlsqlParser::T_AFTER, 0);
}

HqlsqlParser::Column_nameContext* HqlsqlParser::Alter_table_column_propertiesContext::column_name() {
  return getRuleContext<HqlsqlParser::Column_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_CASCADE() {
  return getToken(HqlsqlParser::T_CASCADE, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_RESTRICT() {
  return getToken(HqlsqlParser::T_RESTRICT, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_COLUMNS() {
  return getToken(HqlsqlParser::T_COLUMNS, 0);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Alter_table_column_propertiesContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_ADD() {
  return getToken(HqlsqlParser::T_ADD, 0);
}

tree::TerminalNode* HqlsqlParser::Alter_table_column_propertiesContext::T_REPLACE() {
  return getToken(HqlsqlParser::T_REPLACE, 0);
}


size_t HqlsqlParser::Alter_table_column_propertiesContext::getRuleIndex() const {
  return HqlsqlParser::RuleAlter_table_column_properties;
}

void HqlsqlParser::Alter_table_column_propertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_column_properties(this);
}

void HqlsqlParser::Alter_table_column_propertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_column_properties(this);
}


antlrcpp::Any HqlsqlParser::Alter_table_column_propertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAlter_table_column_properties(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Alter_table_column_propertiesContext* HqlsqlParser::alter_table_column_properties() {
  Alter_table_column_propertiesContext *_localctx = _tracker.createInstance<Alter_table_column_propertiesContext>(_ctx, getState());
  enterRule(_localctx, 222, HqlsqlParser::RuleAlter_table_column_properties);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2050);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2023);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(2022);
        partition_assignment_list();
      }
      setState(2025);
      match(HqlsqlParser::T_CHANGE);
      setState(2027);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
      case 1: {
        setState(2026);
        match(HqlsqlParser::T_COLUMN);
        break;
      }

      }
      setState(2029);
      old_column_name();
      setState(2030);
      new_column_name();
      setState(2031);
      dtype();
      setState(2032);
      comment_part();
      setState(2036);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
      case 1: {
        setState(2033);
        match(HqlsqlParser::T_FIRST);
        break;
      }

      case 2: {
        setState(2034);
        match(HqlsqlParser::T_AFTER);
        setState(2035);
        column_name();
        break;
      }

      }
      setState(2039);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
      case 1: {
        setState(2038);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_CASCADE || _la == HqlsqlParser::T_RESTRICT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2042);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(2041);
        partition_assignment_list();
      }
      setState(2044);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ADD || _la == HqlsqlParser::T_REPLACE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2045);
      match(HqlsqlParser::T_COLUMNS);
      setState(2046);
      paren_column_list();
      setState(2048);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
      case 1: {
        setState(2047);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_CASCADE || _la == HqlsqlParser::T_RESTRICT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_stmtContext ------------------------------------------------------------------

HqlsqlParser::Show_stmtContext::Show_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_SHOW() {
  return getToken(HqlsqlParser::T_SHOW, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_DATABASES() {
  return getToken(HqlsqlParser::T_DATABASES, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_SCHEMAS() {
  return getToken(HqlsqlParser::T_SCHEMAS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_LIKE() {
  return getToken(HqlsqlParser::T_LIKE, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Show_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_TABLES() {
  return getToken(HqlsqlParser::T_TABLES, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Show_stmtContext::T_IN() {
  return getTokens(HqlsqlParser::T_IN);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_IN(size_t i) {
  return getToken(HqlsqlParser::T_IN, i);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Show_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Show_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_VIEWS() {
  return getToken(HqlsqlParser::T_VIEWS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_MATERIALIZED() {
  return getToken(HqlsqlParser::T_MATERIALIZED, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Show_stmtContext::T_FROM() {
  return getTokens(HqlsqlParser::T_FROM);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_FROM(size_t i) {
  return getToken(HqlsqlParser::T_FROM, i);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_PARTITIONS() {
  return getToken(HqlsqlParser::T_PARTITIONS, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Show_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Show_stmtContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_EXTENDED() {
  return getToken(HqlsqlParser::T_EXTENDED, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_TBLPROPERTIES() {
  return getToken(HqlsqlParser::T_TBLPROPERTIES, 0);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Show_stmtContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_INDEX() {
  return getToken(HqlsqlParser::T_INDEX, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_INDEXES() {
  return getToken(HqlsqlParser::T_INDEXES, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_FORMATTED() {
  return getToken(HqlsqlParser::T_FORMATTED, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_COLUMNS() {
  return getToken(HqlsqlParser::T_COLUMNS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_FUNCTIONS() {
  return getToken(HqlsqlParser::T_FUNCTIONS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_GRANT() {
  return getToken(HqlsqlParser::T_GRANT, 0);
}

HqlsqlParser::Principal_specificationContext* HqlsqlParser::Show_stmtContext::principal_specification() {
  return getRuleContext<HqlsqlParser::Principal_specificationContext>(0);
}

HqlsqlParser::Object_specificationContext* HqlsqlParser::Show_stmtContext::object_specification() {
  return getRuleContext<HqlsqlParser::Object_specificationContext>(0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_ROLE() {
  return getToken(HqlsqlParser::T_ROLE, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_ROLES() {
  return getToken(HqlsqlParser::T_ROLES, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_CURRENT() {
  return getToken(HqlsqlParser::T_CURRENT, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_PRINCIPALS() {
  return getToken(HqlsqlParser::T_PRINCIPALS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_LOCKS() {
  return getToken(HqlsqlParser::T_LOCKS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_DATABASE() {
  return getToken(HqlsqlParser::T_DATABASE, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_SCHEMA() {
  return getToken(HqlsqlParser::T_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_CONF() {
  return getToken(HqlsqlParser::T_CONF, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_LESS() {
  return getToken(HqlsqlParser::T_LESS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_GREATER() {
  return getToken(HqlsqlParser::T_GREATER, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_TRANSACTIONS() {
  return getToken(HqlsqlParser::T_TRANSACTIONS, 0);
}

tree::TerminalNode* HqlsqlParser::Show_stmtContext::T_COMPACTIONS() {
  return getToken(HqlsqlParser::T_COMPACTIONS, 0);
}


size_t HqlsqlParser::Show_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleShow_stmt;
}

void HqlsqlParser::Show_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_stmt(this);
}

void HqlsqlParser::Show_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_stmt(this);
}


antlrcpp::Any HqlsqlParser::Show_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitShow_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Show_stmtContext* HqlsqlParser::show_stmt() {
  Show_stmtContext *_localctx = _tracker.createInstance<Show_stmtContext>(_ctx, getState());
  enterRule(_localctx, 224, HqlsqlParser::RuleShow_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2179);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2052);
      match(HqlsqlParser::T_SHOW);
      setState(2053);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_DATABASES || _la == HqlsqlParser::T_SCHEMAS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2056);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
      case 1: {
        setState(2054);
        match(HqlsqlParser::T_LIKE);
        setState(2055);
        expr(0);
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2058);
      match(HqlsqlParser::T_SHOW);
      setState(2059);
      match(HqlsqlParser::T_TABLES);

      setState(2060);
      match(HqlsqlParser::T_IN);
      setState(2061);
      ident();
      setState(2064);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
      case 1: {
        setState(2063);
        expr(0);
        break;
      }

      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2066);
      match(HqlsqlParser::T_SHOW);
      setState(2068);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_MATERIALIZED) {
        setState(2067);
        match(HqlsqlParser::T_MATERIALIZED);
      }
      setState(2070);
      match(HqlsqlParser::T_VIEWS);
      setState(2073);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
      case 1: {
        setState(2071);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_FROM

        || _la == HqlsqlParser::T_IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2072);
        ident();
        break;
      }

      }
      setState(2077);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
      case 1: {
        setState(2075);
        match(HqlsqlParser::T_LIKE);
        setState(2076);
        expr(0);
        break;
      }

      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2079);
      match(HqlsqlParser::T_SHOW);
      setState(2080);
      match(HqlsqlParser::T_PARTITIONS);
      setState(2081);
      table_name();
      setState(2082);
      partition_assignment_list();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2084);
      match(HqlsqlParser::T_SHOW);
      setState(2085);
      match(HqlsqlParser::T_TABLE);
      setState(2086);
      match(HqlsqlParser::T_EXTENDED);
      setState(2089);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_FROM

      || _la == HqlsqlParser::T_IN) {
        setState(2087);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_FROM

        || _la == HqlsqlParser::T_IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2088);
        ident();
      }
      setState(2091);
      match(HqlsqlParser::T_LIKE);
      setState(2092);
      expr(0);
      setState(2094);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
      case 1: {
        setState(2093);
        partition_assignment_list();
        break;
      }

      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2096);
      match(HqlsqlParser::T_SHOW);
      setState(2097);
      match(HqlsqlParser::T_TBLPROPERTIES);
      setState(2098);
      table_name();
      setState(2099);
      paren_column_list();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2101);
      match(HqlsqlParser::T_SHOW);
      setState(2102);
      match(HqlsqlParser::T_CREATE);
      setState(2103);
      match(HqlsqlParser::T_TABLE);
      setState(2104);
      table_name();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2105);
      match(HqlsqlParser::T_SHOW);
      setState(2107);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_FORMATTED) {
        setState(2106);
        match(HqlsqlParser::T_FORMATTED);
      }
      setState(2109);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_INDEX

      || _la == HqlsqlParser::T_INDEXES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2110);
      match(HqlsqlParser::T_ON);
      setState(2111);
      ident();
      setState(2114);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
      case 1: {
        setState(2112);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_FROM

        || _la == HqlsqlParser::T_IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2113);
        ident();
        break;
      }

      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2116);
      match(HqlsqlParser::T_SHOW);
      setState(2117);
      match(HqlsqlParser::T_COLUMNS);
      setState(2118);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_FROM

      || _la == HqlsqlParser::T_IN)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2119);
      table_name();
      setState(2122);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
      case 1: {
        setState(2120);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_FROM

        || _la == HqlsqlParser::T_IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2121);
        ident();
        break;
      }

      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2124);
      match(HqlsqlParser::T_SHOW);
      setState(2125);
      match(HqlsqlParser::T_FUNCTIONS);
      setState(2128);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
      case 1: {
        setState(2126);
        match(HqlsqlParser::T_LIKE);
        setState(2127);
        expr(0);
        break;
      }

      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2130);
      match(HqlsqlParser::T_SHOW);
      setState(2131);
      match(HqlsqlParser::T_GRANT);
      setState(2132);
      principal_specification();
      setState(2138);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
      case 1: {
        setState(2133);
        match(HqlsqlParser::T_ON);
        setState(2134);
        object_specification();
        setState(2136);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
        case 1: {
          setState(2135);
          paren_column_list();
          break;
        }

        }
        break;
      }

      }
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2140);
      match(HqlsqlParser::T_SHOW);
      setState(2141);
      match(HqlsqlParser::T_ROLE);
      setState(2142);
      match(HqlsqlParser::T_GRANT);
      setState(2143);
      principal_specification();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2144);
      match(HqlsqlParser::T_SHOW);
      setState(2146);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_CURRENT) {
        setState(2145);
        match(HqlsqlParser::T_CURRENT);
      }
      setState(2148);
      match(HqlsqlParser::T_ROLES);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2149);
      match(HqlsqlParser::T_SHOW);
      setState(2150);
      match(HqlsqlParser::T_PRINCIPALS);
      setState(2151);
      ident();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2152);
      match(HqlsqlParser::T_SHOW);
      setState(2153);
      match(HqlsqlParser::T_LOCKS);
      setState(2155);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
      case 1: {
        setState(2154);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_DATABASE || _la == HqlsqlParser::T_SCHEMA)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(2157);
      ident();
      setState(2159);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
      case 1: {
        setState(2158);
        partition_assignment_list();
        break;
      }

      }
      setState(2162);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
      case 1: {
        setState(2161);
        match(HqlsqlParser::T_EXTENDED);
        break;
      }

      }
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2164);
      match(HqlsqlParser::T_SHOW);
      setState(2165);
      match(HqlsqlParser::T_CONF);
      setState(2166);
      match(HqlsqlParser::T_LESS);
      setState(2167);
      ident();
      setState(2168);
      match(HqlsqlParser::T_GREATER);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(2170);
      match(HqlsqlParser::T_SHOW);
      setState(2171);
      match(HqlsqlParser::T_TRANSACTIONS);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(2172);
      match(HqlsqlParser::T_SHOW);
      setState(2173);
      match(HqlsqlParser::T_COMPACTIONS);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(2174);
      match(HqlsqlParser::T_SHOW);
      setState(2175);
      match(HqlsqlParser::T_PARTITIONS);
      setState(2177);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
      case 1: {
        setState(2176);
        partition_assignment_list();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Principal_specificationContext ------------------------------------------------------------------

HqlsqlParser::Principal_specificationContext::Principal_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Principal_specificationContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Principal_specificationContext::T_USER() {
  return getToken(HqlsqlParser::T_USER, 0);
}

tree::TerminalNode* HqlsqlParser::Principal_specificationContext::T_ROLE() {
  return getToken(HqlsqlParser::T_ROLE, 0);
}


size_t HqlsqlParser::Principal_specificationContext::getRuleIndex() const {
  return HqlsqlParser::RulePrincipal_specification;
}

void HqlsqlParser::Principal_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrincipal_specification(this);
}

void HqlsqlParser::Principal_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrincipal_specification(this);
}


antlrcpp::Any HqlsqlParser::Principal_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPrincipal_specification(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Principal_specificationContext* HqlsqlParser::principal_specification() {
  Principal_specificationContext *_localctx = _tracker.createInstance<Principal_specificationContext>(_ctx, getState());
  enterRule(_localctx, 226, HqlsqlParser::RulePrincipal_specification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2181);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ROLE || _la == HqlsqlParser::T_USER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2182);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Principal_specificationsContext ------------------------------------------------------------------

HqlsqlParser::Principal_specificationsContext::Principal_specificationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Principal_specificationContext *> HqlsqlParser::Principal_specificationsContext::principal_specification() {
  return getRuleContexts<HqlsqlParser::Principal_specificationContext>();
}

HqlsqlParser::Principal_specificationContext* HqlsqlParser::Principal_specificationsContext::principal_specification(size_t i) {
  return getRuleContext<HqlsqlParser::Principal_specificationContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Principal_specificationsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Principal_specificationsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Principal_specificationsContext::getRuleIndex() const {
  return HqlsqlParser::RulePrincipal_specifications;
}

void HqlsqlParser::Principal_specificationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrincipal_specifications(this);
}

void HqlsqlParser::Principal_specificationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrincipal_specifications(this);
}


antlrcpp::Any HqlsqlParser::Principal_specificationsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPrincipal_specifications(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Principal_specificationsContext* HqlsqlParser::principal_specifications() {
  Principal_specificationsContext *_localctx = _tracker.createInstance<Principal_specificationsContext>(_ctx, getState());
  enterRule(_localctx, 228, HqlsqlParser::RulePrincipal_specifications);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2184);
    principal_specification();
    setState(2189);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2185);
        match(HqlsqlParser::T_COMMA);
        setState(2186);
        principal_specification(); 
      }
      setState(2191);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_stmtContext ------------------------------------------------------------------

HqlsqlParser::Import_stmtContext::Import_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Import_stmtContext::T_IMPORT() {
  return getToken(HqlsqlParser::T_IMPORT, 0);
}

tree::TerminalNode* HqlsqlParser::Import_stmtContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

tree::TerminalNode* HqlsqlParser::Import_stmtContext::L_S_STRING() {
  return getToken(HqlsqlParser::L_S_STRING, 0);
}

tree::TerminalNode* HqlsqlParser::Import_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Import_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::Location_partContext* HqlsqlParser::Import_stmtContext::location_part() {
  return getRuleContext<HqlsqlParser::Location_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Import_stmtContext::T_EXTERNAL() {
  return getToken(HqlsqlParser::T_EXTERNAL, 0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Import_stmtContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}


size_t HqlsqlParser::Import_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleImport_stmt;
}

void HqlsqlParser::Import_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_stmt(this);
}

void HqlsqlParser::Import_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_stmt(this);
}


antlrcpp::Any HqlsqlParser::Import_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitImport_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Import_stmtContext* HqlsqlParser::import_stmt() {
  Import_stmtContext *_localctx = _tracker.createInstance<Import_stmtContext>(_ctx, getState());
  enterRule(_localctx, 230, HqlsqlParser::RuleImport_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2192);
    match(HqlsqlParser::T_IMPORT);
    setState(2201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_TABLE

    || _la == HqlsqlParser::T_EXTERNAL) {
      setState(2194);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_EXTERNAL) {
        setState(2193);
        match(HqlsqlParser::T_EXTERNAL);
      }
      setState(2196);
      match(HqlsqlParser::T_TABLE);
      setState(2197);
      table_name();
      setState(2199);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_PARTITION) {
        setState(2198);
        partition_assignment_list();
      }
    }
    setState(2203);
    match(HqlsqlParser::T_FROM);
    setState(2204);
    match(HqlsqlParser::L_S_STRING);
    setState(2206);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      setState(2205);
      location_part();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Export_stmtContext ------------------------------------------------------------------

HqlsqlParser::Export_stmtContext::Export_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Export_stmtContext::T_EXPORT() {
  return getToken(HqlsqlParser::T_EXPORT, 0);
}

tree::TerminalNode* HqlsqlParser::Export_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Export_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Export_stmtContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

tree::TerminalNode* HqlsqlParser::Export_stmtContext::L_S_STRING() {
  return getToken(HqlsqlParser::L_S_STRING, 0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Export_stmtContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Export_stmtContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

HqlsqlParser::Expr_funcContext* HqlsqlParser::Export_stmtContext::expr_func() {
  return getRuleContext<HqlsqlParser::Expr_funcContext>(0);
}


size_t HqlsqlParser::Export_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleExport_stmt;
}

void HqlsqlParser::Export_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExport_stmt(this);
}

void HqlsqlParser::Export_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExport_stmt(this);
}


antlrcpp::Any HqlsqlParser::Export_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExport_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Export_stmtContext* HqlsqlParser::export_stmt() {
  Export_stmtContext *_localctx = _tracker.createInstance<Export_stmtContext>(_ctx, getState());
  enterRule(_localctx, 232, HqlsqlParser::RuleExport_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2208);
    match(HqlsqlParser::T_EXPORT);
    setState(2209);
    match(HqlsqlParser::T_TABLE);
    setState(2210);
    table_name();
    setState(2212);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_PARTITION) {
      setState(2211);
      partition_assignment_list();
    }
    setState(2214);
    match(HqlsqlParser::T_TO);
    setState(2215);
    match(HqlsqlParser::L_S_STRING);
    setState(2218);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      setState(2216);
      match(HqlsqlParser::T_FOR);
      setState(2217);
      expr_func();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explain_stmtContext ------------------------------------------------------------------

HqlsqlParser::Explain_stmtContext::Explain_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_EXPLAIN() {
  return getToken(HqlsqlParser::T_EXPLAIN, 0);
}

HqlsqlParser::StmtContext* HqlsqlParser::Explain_stmtContext::stmt() {
  return getRuleContext<HqlsqlParser::StmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_EXTENDED() {
  return getToken(HqlsqlParser::T_EXTENDED, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_CBO() {
  return getToken(HqlsqlParser::T_CBO, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_AST() {
  return getToken(HqlsqlParser::T_AST, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_DEPENDENCY() {
  return getToken(HqlsqlParser::T_DEPENDENCY, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_AUTHORIZATION() {
  return getToken(HqlsqlParser::T_AUTHORIZATION, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_LOCKS() {
  return getToken(HqlsqlParser::T_LOCKS, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_VECTORIZATION() {
  return getToken(HqlsqlParser::T_VECTORIZATION, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_ANALYZE() {
  return getToken(HqlsqlParser::T_ANALYZE, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_FORMATTED() {
  return getToken(HqlsqlParser::T_FORMATTED, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_ONLY() {
  return getToken(HqlsqlParser::T_ONLY, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_COST() {
  return getToken(HqlsqlParser::T_COST, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_JOINCOST() {
  return getToken(HqlsqlParser::T_JOINCOST, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_SUMMARY() {
  return getToken(HqlsqlParser::T_SUMMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_OPERATOR() {
  return getToken(HqlsqlParser::T_OPERATOR, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_EXPRESSION() {
  return getToken(HqlsqlParser::T_EXPRESSION, 0);
}

tree::TerminalNode* HqlsqlParser::Explain_stmtContext::T_DETAIL() {
  return getToken(HqlsqlParser::T_DETAIL, 0);
}


size_t HqlsqlParser::Explain_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleExplain_stmt;
}

void HqlsqlParser::Explain_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplain_stmt(this);
}

void HqlsqlParser::Explain_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplain_stmt(this);
}


antlrcpp::Any HqlsqlParser::Explain_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExplain_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Explain_stmtContext* HqlsqlParser::explain_stmt() {
  Explain_stmtContext *_localctx = _tracker.createInstance<Explain_stmtContext>(_ctx, getState());
  enterRule(_localctx, 234, HqlsqlParser::RuleExplain_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2220);
    match(HqlsqlParser::T_EXPLAIN);
    setState(2241);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      setState(2221);
      match(HqlsqlParser::T_EXTENDED);
      break;
    }

    case 2: {
      setState(2223);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_FORMATTED) {
        setState(2222);
        match(HqlsqlParser::T_FORMATTED);
      }
      setState(2225);
      match(HqlsqlParser::T_CBO);
      setState(2227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COST

      || _la == HqlsqlParser::T_JOINCOST) {
        setState(2226);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_COST

        || _la == HqlsqlParser::T_JOINCOST)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      break;
    }

    case 3: {
      setState(2229);
      match(HqlsqlParser::T_AST);
      break;
    }

    case 4: {
      setState(2230);
      match(HqlsqlParser::T_DEPENDENCY);
      break;
    }

    case 5: {
      setState(2231);
      match(HqlsqlParser::T_AUTHORIZATION);
      break;
    }

    case 6: {
      setState(2232);
      match(HqlsqlParser::T_LOCKS);
      break;
    }

    case 7: {
      setState(2233);
      match(HqlsqlParser::T_VECTORIZATION);
      setState(2235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_ONLY) {
        setState(2234);
        match(HqlsqlParser::T_ONLY);
      }
      setState(2238);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
      case 1: {
        setState(2237);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_SUMMARY || ((((_la - 445) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 445)) & ((1ULL << (HqlsqlParser::T_OPERATOR - 445))
          | (1ULL << (HqlsqlParser::T_EXPRESSION - 445))
          | (1ULL << (HqlsqlParser::T_DETAIL - 445)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      break;
    }

    case 8: {
      setState(2240);
      match(HqlsqlParser::T_ANALYZE);
      break;
    }

    }
    setState(2243);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DtypeContext ------------------------------------------------------------------

HqlsqlParser::DtypeContext::DtypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Data_typeContext* HqlsqlParser::DtypeContext::data_type() {
  return getRuleContext<HqlsqlParser::Data_typeContext>(0);
}

HqlsqlParser::Dtype_lenContext* HqlsqlParser::DtypeContext::dtype_len() {
  return getRuleContext<HqlsqlParser::Dtype_lenContext>(0);
}


size_t HqlsqlParser::DtypeContext::getRuleIndex() const {
  return HqlsqlParser::RuleDtype;
}

void HqlsqlParser::DtypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDtype(this);
}

void HqlsqlParser::DtypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDtype(this);
}


antlrcpp::Any HqlsqlParser::DtypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDtype(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::DtypeContext* HqlsqlParser::dtype() {
  DtypeContext *_localctx = _tracker.createInstance<DtypeContext>(_ctx, getState());
  enterRule(_localctx, 236, HqlsqlParser::RuleDtype);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2245);
    data_type();
    setState(2247);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      setState(2246);
      dtype_len();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_typeContext ------------------------------------------------------------------

HqlsqlParser::Data_typeContext::Data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Primitive_typeContext* HqlsqlParser::Data_typeContext::primitive_type() {
  return getRuleContext<HqlsqlParser::Primitive_typeContext>(0);
}

HqlsqlParser::Array_typeContext* HqlsqlParser::Data_typeContext::array_type() {
  return getRuleContext<HqlsqlParser::Array_typeContext>(0);
}

HqlsqlParser::Map_typeContext* HqlsqlParser::Data_typeContext::map_type() {
  return getRuleContext<HqlsqlParser::Map_typeContext>(0);
}

HqlsqlParser::Struct_typeContext* HqlsqlParser::Data_typeContext::struct_type() {
  return getRuleContext<HqlsqlParser::Struct_typeContext>(0);
}

HqlsqlParser::Union_typeContext* HqlsqlParser::Data_typeContext::union_type() {
  return getRuleContext<HqlsqlParser::Union_typeContext>(0);
}


size_t HqlsqlParser::Data_typeContext::getRuleIndex() const {
  return HqlsqlParser::RuleData_type;
}

void HqlsqlParser::Data_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_type(this);
}

void HqlsqlParser::Data_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_type(this);
}


antlrcpp::Any HqlsqlParser::Data_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitData_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Data_typeContext* HqlsqlParser::data_type() {
  Data_typeContext *_localctx = _tracker.createInstance<Data_typeContext>(_ctx, getState());
  enterRule(_localctx, 238, HqlsqlParser::RuleData_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2254);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_BINARY:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TINYINT:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_BOOLEAN: {
        enterOuterAlt(_localctx, 1);
        setState(2249);
        primitive_type();
        break;
      }

      case HqlsqlParser::T_ARRAY: {
        enterOuterAlt(_localctx, 2);
        setState(2250);
        array_type();
        break;
      }

      case HqlsqlParser::T_MAP: {
        enterOuterAlt(_localctx, 3);
        setState(2251);
        map_type();
        break;
      }

      case HqlsqlParser::T_STRUCT: {
        enterOuterAlt(_localctx, 4);
        setState(2252);
        struct_type();
        break;
      }

      case HqlsqlParser::T_UNIONTYPE: {
        enterOuterAlt(_localctx, 5);
        setState(2253);
        union_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primitive_typeContext ------------------------------------------------------------------

HqlsqlParser::Primitive_typeContext::Primitive_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_TINYINT() {
  return getToken(HqlsqlParser::T_TINYINT, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_SMALLINT() {
  return getToken(HqlsqlParser::T_SMALLINT, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_INT() {
  return getToken(HqlsqlParser::T_INT, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_BIGINT() {
  return getToken(HqlsqlParser::T_BIGINT, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_BOOLEAN() {
  return getToken(HqlsqlParser::T_BOOLEAN, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_FLOAT() {
  return getToken(HqlsqlParser::T_FLOAT, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_DOUBLE() {
  return getToken(HqlsqlParser::T_DOUBLE, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_PRECISION() {
  return getToken(HqlsqlParser::T_PRECISION, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_STRING() {
  return getToken(HqlsqlParser::T_STRING, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_BINARY() {
  return getToken(HqlsqlParser::T_BINARY, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_TIMESTAMP() {
  return getToken(HqlsqlParser::T_TIMESTAMP, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_LOCAL() {
  return getToken(HqlsqlParser::T_LOCAL, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_TIME() {
  return getToken(HqlsqlParser::T_TIME, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_ZONE() {
  return getToken(HqlsqlParser::T_ZONE, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_DECIMAL() {
  return getToken(HqlsqlParser::T_DECIMAL, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Primitive_typeContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Primitive_typeContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_DATE() {
  return getToken(HqlsqlParser::T_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_VARCHAR() {
  return getToken(HqlsqlParser::T_VARCHAR, 0);
}

tree::TerminalNode* HqlsqlParser::Primitive_typeContext::T_CHAR() {
  return getToken(HqlsqlParser::T_CHAR, 0);
}


size_t HqlsqlParser::Primitive_typeContext::getRuleIndex() const {
  return HqlsqlParser::RulePrimitive_type;
}

void HqlsqlParser::Primitive_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitive_type(this);
}

void HqlsqlParser::Primitive_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitive_type(this);
}


antlrcpp::Any HqlsqlParser::Primitive_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPrimitive_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Primitive_typeContext* HqlsqlParser::primitive_type() {
  Primitive_typeContext *_localctx = _tracker.createInstance<Primitive_typeContext>(_ctx, getState());
  enterRule(_localctx, 240, HqlsqlParser::RulePrimitive_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2285);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2256);
      match(HqlsqlParser::T_TINYINT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2257);
      match(HqlsqlParser::T_SMALLINT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2258);
      match(HqlsqlParser::T_INT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2259);
      match(HqlsqlParser::T_BIGINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2260);
      match(HqlsqlParser::T_BOOLEAN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2261);
      match(HqlsqlParser::T_FLOAT);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2262);
      match(HqlsqlParser::T_DOUBLE);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2263);
      match(HqlsqlParser::T_DOUBLE);
      setState(2264);
      match(HqlsqlParser::T_PRECISION);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2265);
      match(HqlsqlParser::T_STRING);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2266);
      match(HqlsqlParser::T_BINARY);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2267);
      match(HqlsqlParser::T_TIMESTAMP);
      setState(2272);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
      case 1: {
        setState(2268);
        match(HqlsqlParser::T_WITH);
        setState(2269);
        match(HqlsqlParser::T_LOCAL);
        setState(2270);
        match(HqlsqlParser::T_TIME);
        setState(2271);
        match(HqlsqlParser::T_ZONE);
        break;
      }

      }
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2274);
      match(HqlsqlParser::T_DECIMAL);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2275);
      match(HqlsqlParser::T_DECIMAL);
      setState(2276);
      match(HqlsqlParser::T_OPEN_P);
      setState(2277);
      expr(0);
      setState(2278);
      match(HqlsqlParser::T_COMMA);
      setState(2279);
      expr(0);
      setState(2280);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2282);
      match(HqlsqlParser::T_DATE);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2283);
      match(HqlsqlParser::T_VARCHAR);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2284);
      match(HqlsqlParser::T_CHAR);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_typeContext ------------------------------------------------------------------

HqlsqlParser::Array_typeContext::Array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Array_typeContext::T_ARRAY() {
  return getToken(HqlsqlParser::T_ARRAY, 0);
}

tree::TerminalNode* HqlsqlParser::Array_typeContext::T_LESS() {
  return getToken(HqlsqlParser::T_LESS, 0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Array_typeContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Array_typeContext::T_GREATER() {
  return getToken(HqlsqlParser::T_GREATER, 0);
}


size_t HqlsqlParser::Array_typeContext::getRuleIndex() const {
  return HqlsqlParser::RuleArray_type;
}

void HqlsqlParser::Array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type(this);
}

void HqlsqlParser::Array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type(this);
}


antlrcpp::Any HqlsqlParser::Array_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitArray_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Array_typeContext* HqlsqlParser::array_type() {
  Array_typeContext *_localctx = _tracker.createInstance<Array_typeContext>(_ctx, getState());
  enterRule(_localctx, 242, HqlsqlParser::RuleArray_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2287);
    match(HqlsqlParser::T_ARRAY);
    setState(2288);
    match(HqlsqlParser::T_LESS);
    setState(2289);
    dtype();
    setState(2290);
    match(HqlsqlParser::T_GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Map_typeContext ------------------------------------------------------------------

HqlsqlParser::Map_typeContext::Map_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Map_typeContext::T_MAP() {
  return getToken(HqlsqlParser::T_MAP, 0);
}

tree::TerminalNode* HqlsqlParser::Map_typeContext::T_LESS() {
  return getToken(HqlsqlParser::T_LESS, 0);
}

HqlsqlParser::Primitive_typeContext* HqlsqlParser::Map_typeContext::primitive_type() {
  return getRuleContext<HqlsqlParser::Primitive_typeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Map_typeContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Map_typeContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Map_typeContext::T_GREATER() {
  return getToken(HqlsqlParser::T_GREATER, 0);
}


size_t HqlsqlParser::Map_typeContext::getRuleIndex() const {
  return HqlsqlParser::RuleMap_type;
}

void HqlsqlParser::Map_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMap_type(this);
}

void HqlsqlParser::Map_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMap_type(this);
}


antlrcpp::Any HqlsqlParser::Map_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitMap_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Map_typeContext* HqlsqlParser::map_type() {
  Map_typeContext *_localctx = _tracker.createInstance<Map_typeContext>(_ctx, getState());
  enterRule(_localctx, 244, HqlsqlParser::RuleMap_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2292);
    match(HqlsqlParser::T_MAP);
    setState(2293);
    match(HqlsqlParser::T_LESS);
    setState(2294);
    primitive_type();
    setState(2295);
    match(HqlsqlParser::T_COMMA);
    setState(2296);
    dtype();
    setState(2297);
    match(HqlsqlParser::T_GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_typeContext ------------------------------------------------------------------

HqlsqlParser::Struct_typeContext::Struct_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Struct_typeContext::T_STRUCT() {
  return getToken(HqlsqlParser::T_STRUCT, 0);
}

tree::TerminalNode* HqlsqlParser::Struct_typeContext::T_LESS() {
  return getToken(HqlsqlParser::T_LESS, 0);
}

std::vector<HqlsqlParser::Struct_type_typeContext *> HqlsqlParser::Struct_typeContext::struct_type_type() {
  return getRuleContexts<HqlsqlParser::Struct_type_typeContext>();
}

HqlsqlParser::Struct_type_typeContext* HqlsqlParser::Struct_typeContext::struct_type_type(size_t i) {
  return getRuleContext<HqlsqlParser::Struct_type_typeContext>(i);
}

tree::TerminalNode* HqlsqlParser::Struct_typeContext::T_GREATER() {
  return getToken(HqlsqlParser::T_GREATER, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Struct_typeContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Struct_typeContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Struct_typeContext::getRuleIndex() const {
  return HqlsqlParser::RuleStruct_type;
}

void HqlsqlParser::Struct_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_type(this);
}

void HqlsqlParser::Struct_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_type(this);
}


antlrcpp::Any HqlsqlParser::Struct_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitStruct_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Struct_typeContext* HqlsqlParser::struct_type() {
  Struct_typeContext *_localctx = _tracker.createInstance<Struct_typeContext>(_ctx, getState());
  enterRule(_localctx, 246, HqlsqlParser::RuleStruct_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2299);
    match(HqlsqlParser::T_STRUCT);
    setState(2300);
    match(HqlsqlParser::T_LESS);
    setState(2301);
    struct_type_type();
    setState(2306);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(2302);
      match(HqlsqlParser::T_COMMA);
      setState(2303);
      struct_type_type();
      setState(2308);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2309);
    match(HqlsqlParser::T_GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_type_typeContext ------------------------------------------------------------------

HqlsqlParser::Struct_type_typeContext::Struct_type_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Column_nameContext* HqlsqlParser::Struct_type_typeContext::column_name() {
  return getRuleContext<HqlsqlParser::Column_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Struct_type_typeContext::T_COLON() {
  return getToken(HqlsqlParser::T_COLON, 0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Struct_type_typeContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Struct_type_typeContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}


size_t HqlsqlParser::Struct_type_typeContext::getRuleIndex() const {
  return HqlsqlParser::RuleStruct_type_type;
}

void HqlsqlParser::Struct_type_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_type_type(this);
}

void HqlsqlParser::Struct_type_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_type_type(this);
}


antlrcpp::Any HqlsqlParser::Struct_type_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitStruct_type_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Struct_type_typeContext* HqlsqlParser::struct_type_type() {
  Struct_type_typeContext *_localctx = _tracker.createInstance<Struct_type_typeContext>(_ctx, getState());
  enterRule(_localctx, 248, HqlsqlParser::RuleStruct_type_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2311);
    column_name();
    setState(2312);
    match(HqlsqlParser::T_COLON);
    setState(2313);
    dtype();
    setState(2315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_COMMENT) {
      setState(2314);
      comment_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Union_typeContext ------------------------------------------------------------------

HqlsqlParser::Union_typeContext::Union_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Union_typeContext::T_UNIONTYPE() {
  return getToken(HqlsqlParser::T_UNIONTYPE, 0);
}

tree::TerminalNode* HqlsqlParser::Union_typeContext::T_LESS() {
  return getToken(HqlsqlParser::T_LESS, 0);
}

std::vector<HqlsqlParser::DtypeContext *> HqlsqlParser::Union_typeContext::dtype() {
  return getRuleContexts<HqlsqlParser::DtypeContext>();
}

HqlsqlParser::DtypeContext* HqlsqlParser::Union_typeContext::dtype(size_t i) {
  return getRuleContext<HqlsqlParser::DtypeContext>(i);
}

tree::TerminalNode* HqlsqlParser::Union_typeContext::T_GREATER() {
  return getToken(HqlsqlParser::T_GREATER, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Union_typeContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Union_typeContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Union_typeContext::getRuleIndex() const {
  return HqlsqlParser::RuleUnion_type;
}

void HqlsqlParser::Union_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnion_type(this);
}

void HqlsqlParser::Union_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnion_type(this);
}


antlrcpp::Any HqlsqlParser::Union_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitUnion_type(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Union_typeContext* HqlsqlParser::union_type() {
  Union_typeContext *_localctx = _tracker.createInstance<Union_typeContext>(_ctx, getState());
  enterRule(_localctx, 250, HqlsqlParser::RuleUnion_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2317);
    match(HqlsqlParser::T_UNIONTYPE);
    setState(2318);
    match(HqlsqlParser::T_LESS);
    setState(2319);
    dtype();
    setState(2324);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(2320);
      match(HqlsqlParser::T_COMMA);
      setState(2321);
      dtype();
      setState(2326);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2327);
    match(HqlsqlParser::T_GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dtype_lenContext ------------------------------------------------------------------

HqlsqlParser::Dtype_lenContext::Dtype_lenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Dtype_lenContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_lenContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Dtype_lenContext::L_INT() {
  return getTokens(HqlsqlParser::L_INT);
}

tree::TerminalNode* HqlsqlParser::Dtype_lenContext::L_INT(size_t i) {
  return getToken(HqlsqlParser::L_INT, i);
}

tree::TerminalNode* HqlsqlParser::Dtype_lenContext::T_MAX() {
  return getToken(HqlsqlParser::T_MAX, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_lenContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_lenContext::T_CHAR() {
  return getToken(HqlsqlParser::T_CHAR, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_lenContext::T_BYTE() {
  return getToken(HqlsqlParser::T_BYTE, 0);
}


size_t HqlsqlParser::Dtype_lenContext::getRuleIndex() const {
  return HqlsqlParser::RuleDtype_len;
}

void HqlsqlParser::Dtype_lenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDtype_len(this);
}

void HqlsqlParser::Dtype_lenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDtype_len(this);
}


antlrcpp::Any HqlsqlParser::Dtype_lenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDtype_len(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Dtype_lenContext* HqlsqlParser::dtype_len() {
  Dtype_lenContext *_localctx = _tracker.createInstance<Dtype_lenContext>(_ctx, getState());
  enterRule(_localctx, 252, HqlsqlParser::RuleDtype_len);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2329);
    match(HqlsqlParser::T_OPEN_P);
    setState(2330);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_MAX || _la == HqlsqlParser::L_INT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_BYTE

    || _la == HqlsqlParser::T_CHAR) {
      setState(2331);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_BYTE

      || _la == HqlsqlParser::T_CHAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2336);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_COMMA) {
      setState(2334);
      match(HqlsqlParser::T_COMMA);
      setState(2335);
      match(HqlsqlParser::L_INT);
    }
    setState(2338);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dtype_attrContext ------------------------------------------------------------------

HqlsqlParser::Dtype_attrContext::Dtype_attrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Dtype_attrContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_attrContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_attrContext::T_CHARACTER() {
  return getToken(HqlsqlParser::T_CHARACTER, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_attrContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Dtype_attrContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Dtype_attrContext::T_CASESPECIFIC() {
  return getToken(HqlsqlParser::T_CASESPECIFIC, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_attrContext::T_CS() {
  return getToken(HqlsqlParser::T_CS, 0);
}


size_t HqlsqlParser::Dtype_attrContext::getRuleIndex() const {
  return HqlsqlParser::RuleDtype_attr;
}

void HqlsqlParser::Dtype_attrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDtype_attr(this);
}

void HqlsqlParser::Dtype_attrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDtype_attr(this);
}


antlrcpp::Any HqlsqlParser::Dtype_attrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDtype_attr(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Dtype_attrContext* HqlsqlParser::dtype_attr() {
  Dtype_attrContext *_localctx = _tracker.createInstance<Dtype_attrContext>(_ctx, getState());
  enterRule(_localctx, 254, HqlsqlParser::RuleDtype_attr);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2351);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2341);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_NOT) {
        setState(2340);
        match(HqlsqlParser::T_NOT);
      }
      setState(2343);
      match(HqlsqlParser::T_NULL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2344);
      match(HqlsqlParser::T_CHARACTER);
      setState(2345);
      match(HqlsqlParser::T_SET);
      setState(2346);
      ident();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2348);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_NOT) {
        setState(2347);
        match(HqlsqlParser::T_NOT);
      }
      setState(2350);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_CASESPECIFIC

      || _la == HqlsqlParser::T_CS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dtype_defaultContext ------------------------------------------------------------------

HqlsqlParser::Dtype_defaultContext::Dtype_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Dtype_defaultContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Dtype_defaultContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Dtype_defaultContext::T_COLON() {
  return getToken(HqlsqlParser::T_COLON, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_defaultContext::T_DEFAULT() {
  return getToken(HqlsqlParser::T_DEFAULT, 0);
}

tree::TerminalNode* HqlsqlParser::Dtype_defaultContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}


size_t HqlsqlParser::Dtype_defaultContext::getRuleIndex() const {
  return HqlsqlParser::RuleDtype_default;
}

void HqlsqlParser::Dtype_defaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDtype_default(this);
}

void HqlsqlParser::Dtype_defaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDtype_default(this);
}


antlrcpp::Any HqlsqlParser::Dtype_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDtype_default(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Dtype_defaultContext* HqlsqlParser::dtype_default() {
  Dtype_defaultContext *_localctx = _tracker.createInstance<Dtype_defaultContext>(_ctx, getState());
  enterRule(_localctx, 256, HqlsqlParser::RuleDtype_default);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2365);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_COLON:
      case HqlsqlParser::T_EQUAL: {
        enterOuterAlt(_localctx, 1);
        setState(2354);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_COLON) {
          setState(2353);
          match(HqlsqlParser::T_COLON);
        }
        setState(2356);
        match(HqlsqlParser::T_EQUAL);
        setState(2357);
        expr(0);
        break;
      }

      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_WITH: {
        enterOuterAlt(_localctx, 2);
        setState(2359);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_WITH) {
          setState(2358);
          match(HqlsqlParser::T_WITH);
        }
        setState(2361);
        match(HqlsqlParser::T_DEFAULT);
        setState(2363);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
        case 1: {
          setState(2362);
          expr(0);
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_database_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_database_stmtContext::Create_database_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_database_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_database_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Create_database_optionContext* HqlsqlParser::Create_database_stmtContext::create_database_option() {
  return getRuleContext<HqlsqlParser::Create_database_optionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_database_stmtContext::T_DATABASE() {
  return getToken(HqlsqlParser::T_DATABASE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_database_stmtContext::T_SCHEMA() {
  return getToken(HqlsqlParser::T_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Create_database_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Create_database_stmtContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_database_stmtContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}


size_t HqlsqlParser::Create_database_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_database_stmt;
}

void HqlsqlParser::Create_database_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_database_stmt(this);
}

void HqlsqlParser::Create_database_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_database_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_database_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_database_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_database_stmtContext* HqlsqlParser::create_database_stmt() {
  Create_database_stmtContext *_localctx = _tracker.createInstance<Create_database_stmtContext>(_ctx, getState());
  enterRule(_localctx, 258, HqlsqlParser::RuleCreate_database_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2367);
    match(HqlsqlParser::T_CREATE);
    setState(2368);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_DATABASE || _la == HqlsqlParser::T_SCHEMA)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2372);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
    case 1: {
      setState(2369);
      match(HqlsqlParser::T_IF);
      setState(2370);
      match(HqlsqlParser::T_NOT);
      setState(2371);
      match(HqlsqlParser::T_EXISTS);
      break;
    }

    }
    setState(2374);
    ident();
    setState(2375);
    create_database_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_database_optionContext ------------------------------------------------------------------

HqlsqlParser::Create_database_optionContext::Create_database_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Create_database_optionContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}

HqlsqlParser::Location_partContext* HqlsqlParser::Create_database_optionContext::location_part() {
  return getRuleContext<HqlsqlParser::Location_partContext>(0);
}

HqlsqlParser::Property_valuesContext* HqlsqlParser::Create_database_optionContext::property_values() {
  return getRuleContext<HqlsqlParser::Property_valuesContext>(0);
}


size_t HqlsqlParser::Create_database_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_database_option;
}

void HqlsqlParser::Create_database_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_database_option(this);
}

void HqlsqlParser::Create_database_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_database_option(this);
}


antlrcpp::Any HqlsqlParser::Create_database_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_database_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_database_optionContext* HqlsqlParser::create_database_option() {
  Create_database_optionContext *_localctx = _tracker.createInstance<Create_database_optionContext>(_ctx, getState());
  enterRule(_localctx, 260, HqlsqlParser::RuleCreate_database_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2378);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
    case 1: {
      setState(2377);
      comment_part();
      break;
    }

    }
    setState(2381);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(2380);
      location_part();
      break;
    }

    }
    setState(2384);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      setState(2383);
      property_values();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comment_partContext ------------------------------------------------------------------

HqlsqlParser::Comment_partContext::Comment_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Comment_partContext::T_COMMENT() {
  return getToken(HqlsqlParser::T_COMMENT, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Comment_partContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Comment_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleComment_part;
}

void HqlsqlParser::Comment_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment_part(this);
}

void HqlsqlParser::Comment_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment_part(this);
}


antlrcpp::Any HqlsqlParser::Comment_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitComment_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Comment_partContext* HqlsqlParser::comment_part() {
  Comment_partContext *_localctx = _tracker.createInstance<Comment_partContext>(_ctx, getState());
  enterRule(_localctx, 262, HqlsqlParser::RuleComment_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2386);
    match(HqlsqlParser::T_COMMENT);
    setState(2387);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Location_partContext ------------------------------------------------------------------

HqlsqlParser::Location_partContext::Location_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Location_partContext::T_LOCATION() {
  return getToken(HqlsqlParser::T_LOCATION, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Location_partContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Location_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleLocation_part;
}

void HqlsqlParser::Location_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocation_part(this);
}

void HqlsqlParser::Location_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocation_part(this);
}


antlrcpp::Any HqlsqlParser::Location_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitLocation_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Location_partContext* HqlsqlParser::location_part() {
  Location_partContext *_localctx = _tracker.createInstance<Location_partContext>(_ctx, getState());
  enterRule(_localctx, 264, HqlsqlParser::RuleLocation_part);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2389);
    match(HqlsqlParser::T_LOCATION);
    setState(2390);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_valuesContext ------------------------------------------------------------------

HqlsqlParser::Property_valuesContext::Property_valuesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Property_valuesContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::Property_valuesContext::property_values_part() {
  return getRuleContext<HqlsqlParser::Property_values_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Property_valuesContext::T_OVERWRITE() {
  return getToken(HqlsqlParser::T_OVERWRITE, 0);
}


size_t HqlsqlParser::Property_valuesContext::getRuleIndex() const {
  return HqlsqlParser::RuleProperty_values;
}

void HqlsqlParser::Property_valuesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProperty_values(this);
}

void HqlsqlParser::Property_valuesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProperty_values(this);
}


antlrcpp::Any HqlsqlParser::Property_valuesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitProperty_values(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Property_valuesContext* HqlsqlParser::property_values() {
  Property_valuesContext *_localctx = _tracker.createInstance<Property_valuesContext>(_ctx, getState());
  enterRule(_localctx, 266, HqlsqlParser::RuleProperty_values);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2392);
    match(HqlsqlParser::T_WITH);
    setState(2394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_OVERWRITE) {
      setState(2393);
      match(HqlsqlParser::T_OVERWRITE);
    }
    setState(2396);
    property_values_part();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_values_partContext ------------------------------------------------------------------

HqlsqlParser::Property_values_partContext::Property_values_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Property_values_partContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::Assignment_stmt_single_itemContext *> HqlsqlParser::Property_values_partContext::assignment_stmt_single_item() {
  return getRuleContexts<HqlsqlParser::Assignment_stmt_single_itemContext>();
}

HqlsqlParser::Assignment_stmt_single_itemContext* HqlsqlParser::Property_values_partContext::assignment_stmt_single_item(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_stmt_single_itemContext>(i);
}

tree::TerminalNode* HqlsqlParser::Property_values_partContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Property_values_partContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Property_values_partContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

tree::TerminalNode* HqlsqlParser::Property_values_partContext::T_DBPROPERTIES() {
  return getToken(HqlsqlParser::T_DBPROPERTIES, 0);
}

tree::TerminalNode* HqlsqlParser::Property_values_partContext::T_TBLPROPERTIES() {
  return getToken(HqlsqlParser::T_TBLPROPERTIES, 0);
}

tree::TerminalNode* HqlsqlParser::Property_values_partContext::T_IDXPROPERTIES() {
  return getToken(HqlsqlParser::T_IDXPROPERTIES, 0);
}

tree::TerminalNode* HqlsqlParser::Property_values_partContext::T_SERDEPROPERTIES() {
  return getToken(HqlsqlParser::T_SERDEPROPERTIES, 0);
}


size_t HqlsqlParser::Property_values_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleProperty_values_part;
}

void HqlsqlParser::Property_values_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProperty_values_part(this);
}

void HqlsqlParser::Property_values_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProperty_values_part(this);
}


antlrcpp::Any HqlsqlParser::Property_values_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitProperty_values_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::property_values_part() {
  Property_values_partContext *_localctx = _tracker.createInstance<Property_values_partContext>(_ctx, getState());
  enterRule(_localctx, 268, HqlsqlParser::RuleProperty_values_part);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2399);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 380) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 380)) & ((1ULL << (HqlsqlParser::T_DBPROPERTIES - 380))
      | (1ULL << (HqlsqlParser::T_TBLPROPERTIES - 380))
      | (1ULL << (HqlsqlParser::T_IDXPROPERTIES - 380))
      | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 380)))) != 0)) {
      setState(2398);
      _la = _input->LA(1);
      if (!(((((_la - 380) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 380)) & ((1ULL << (HqlsqlParser::T_DBPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_TBLPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_IDXPROPERTIES - 380))
        | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 380)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2401);
    match(HqlsqlParser::T_OPEN_P);
    setState(2402);
    assignment_stmt_single_item();
    setState(2407);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(2403);
      match(HqlsqlParser::T_COMMA);
      setState(2404);
      assignment_stmt_single_item();
      setState(2409);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2410);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_function_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_function_stmtContext::Create_function_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Create_temporary_functionContext* HqlsqlParser::Create_function_stmtContext::create_temporary_function() {
  return getRuleContext<HqlsqlParser::Create_temporary_functionContext>(0);
}

HqlsqlParser::Create_permanent_functionContext* HqlsqlParser::Create_function_stmtContext::create_permanent_function() {
  return getRuleContext<HqlsqlParser::Create_permanent_functionContext>(0);
}

HqlsqlParser::Create_function_procedureContext* HqlsqlParser::Create_function_stmtContext::create_function_procedure() {
  return getRuleContext<HqlsqlParser::Create_function_procedureContext>(0);
}


size_t HqlsqlParser::Create_function_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_function_stmt;
}

void HqlsqlParser::Create_function_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_function_stmt(this);
}

void HqlsqlParser::Create_function_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_function_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_function_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_function_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_function_stmtContext* HqlsqlParser::create_function_stmt() {
  Create_function_stmtContext *_localctx = _tracker.createInstance<Create_function_stmtContext>(_ctx, getState());
  enterRule(_localctx, 270, HqlsqlParser::RuleCreate_function_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2415);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2412);
      create_temporary_function();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2413);
      create_permanent_function();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2414);
      create_function_procedure();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_function_procedureContext ------------------------------------------------------------------

HqlsqlParser::Create_function_procedureContext::Create_function_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_function_procedureContext::T_FUNCTION() {
  return getToken(HqlsqlParser::T_FUNCTION, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_function_procedureContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Create_function_returnContext* HqlsqlParser::Create_function_procedureContext::create_function_return() {
  return getRuleContext<HqlsqlParser::Create_function_returnContext>(0);
}

HqlsqlParser::Single_block_stmtContext* HqlsqlParser::Create_function_procedureContext::single_block_stmt() {
  return getRuleContext<HqlsqlParser::Single_block_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_function_procedureContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Create_function_procedureContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_function_procedureContext::T_REPLACE() {
  return getToken(HqlsqlParser::T_REPLACE, 0);
}

HqlsqlParser::Create_routine_paramsContext* HqlsqlParser::Create_function_procedureContext::create_routine_params() {
  return getRuleContext<HqlsqlParser::Create_routine_paramsContext>(0);
}

HqlsqlParser::Declare_block_inplaceContext* HqlsqlParser::Create_function_procedureContext::declare_block_inplace() {
  return getRuleContext<HqlsqlParser::Declare_block_inplaceContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_function_procedureContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_function_procedureContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_function_procedureContext::T_OR() {
  return getToken(HqlsqlParser::T_OR, 0);
}


size_t HqlsqlParser::Create_function_procedureContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_function_procedure;
}

void HqlsqlParser::Create_function_procedureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_function_procedure(this);
}

void HqlsqlParser::Create_function_procedureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_function_procedure(this);
}


antlrcpp::Any HqlsqlParser::Create_function_procedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_function_procedure(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_function_procedureContext* HqlsqlParser::create_function_procedure() {
  Create_function_procedureContext *_localctx = _tracker.createInstance<Create_function_procedureContext>(_ctx, getState());
  enterRule(_localctx, 272, HqlsqlParser::RuleCreate_function_procedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ALTER: {
        setState(2417);
        match(HqlsqlParser::T_ALTER);
        break;
      }

      case HqlsqlParser::T_CREATE: {
        setState(2418);
        match(HqlsqlParser::T_CREATE);
        setState(2421);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_OR) {
          setState(2419);
          match(HqlsqlParser::T_OR);
          setState(2420);
          match(HqlsqlParser::T_REPLACE);
        }
        break;
      }

      case HqlsqlParser::T_REPLACE: {
        setState(2423);
        match(HqlsqlParser::T_REPLACE);
        break;
      }

      case HqlsqlParser::T_FUNCTION: {
        break;
      }

    default:
      break;
    }
    setState(2426);
    match(HqlsqlParser::T_FUNCTION);
    setState(2427);
    ident();
    setState(2429);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      setState(2428);
      create_routine_params();
      break;
    }

    }
    setState(2431);
    create_function_return();
    setState(2433);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
    case 1: {
      setState(2432);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_AS || _la == HqlsqlParser::T_IS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(2436);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx)) {
    case 1: {
      setState(2435);
      declare_block_inplace();
      break;
    }

    }
    setState(2438);
    single_block_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_temporary_functionContext ------------------------------------------------------------------

HqlsqlParser::Create_temporary_functionContext::Create_temporary_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_temporary_functionContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_temporary_functionContext::T_TEMPORARY() {
  return getToken(HqlsqlParser::T_TEMPORARY, 0);
}

tree::TerminalNode* HqlsqlParser::Create_temporary_functionContext::T_FUNCTION() {
  return getToken(HqlsqlParser::T_FUNCTION, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_temporary_functionContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_temporary_functionContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Create_temporary_functionContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Create_temporary_functionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_temporary_function;
}

void HqlsqlParser::Create_temporary_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_temporary_function(this);
}

void HqlsqlParser::Create_temporary_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_temporary_function(this);
}


antlrcpp::Any HqlsqlParser::Create_temporary_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_temporary_function(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_temporary_functionContext* HqlsqlParser::create_temporary_function() {
  Create_temporary_functionContext *_localctx = _tracker.createInstance<Create_temporary_functionContext>(_ctx, getState());
  enterRule(_localctx, 274, HqlsqlParser::RuleCreate_temporary_function);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2440);
    match(HqlsqlParser::T_CREATE);
    setState(2441);
    match(HqlsqlParser::T_TEMPORARY);
    setState(2442);
    match(HqlsqlParser::T_FUNCTION);
    setState(2443);
    ident();
    setState(2444);
    match(HqlsqlParser::T_AS);
    setState(2445);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_permanent_functionContext ------------------------------------------------------------------

HqlsqlParser::Create_permanent_functionContext::Create_permanent_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_permanent_functionContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_permanent_functionContext::T_FUNCTION() {
  return getToken(HqlsqlParser::T_FUNCTION, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_permanent_functionContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_permanent_functionContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Create_permanent_functionContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

HqlsqlParser::Permanent_function_optionsContext* HqlsqlParser::Create_permanent_functionContext::permanent_function_options() {
  return getRuleContext<HqlsqlParser::Permanent_function_optionsContext>(0);
}


size_t HqlsqlParser::Create_permanent_functionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_permanent_function;
}

void HqlsqlParser::Create_permanent_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_permanent_function(this);
}

void HqlsqlParser::Create_permanent_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_permanent_function(this);
}


antlrcpp::Any HqlsqlParser::Create_permanent_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_permanent_function(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_permanent_functionContext* HqlsqlParser::create_permanent_function() {
  Create_permanent_functionContext *_localctx = _tracker.createInstance<Create_permanent_functionContext>(_ctx, getState());
  enterRule(_localctx, 276, HqlsqlParser::RuleCreate_permanent_function);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2447);
    match(HqlsqlParser::T_CREATE);
    setState(2448);
    match(HqlsqlParser::T_FUNCTION);
    setState(2449);
    ident();
    setState(2450);
    match(HqlsqlParser::T_AS);
    setState(2451);
    expr(0);
    setState(2453);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
    case 1: {
      setState(2452);
      permanent_function_options();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Permanent_function_optionsContext ------------------------------------------------------------------

HqlsqlParser::Permanent_function_optionsContext::Permanent_function_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Permanent_function_optionContext *> HqlsqlParser::Permanent_function_optionsContext::permanent_function_option() {
  return getRuleContexts<HqlsqlParser::Permanent_function_optionContext>();
}

HqlsqlParser::Permanent_function_optionContext* HqlsqlParser::Permanent_function_optionsContext::permanent_function_option(size_t i) {
  return getRuleContext<HqlsqlParser::Permanent_function_optionContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Permanent_function_optionsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Permanent_function_optionsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Permanent_function_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RulePermanent_function_options;
}

void HqlsqlParser::Permanent_function_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPermanent_function_options(this);
}

void HqlsqlParser::Permanent_function_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPermanent_function_options(this);
}


antlrcpp::Any HqlsqlParser::Permanent_function_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPermanent_function_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Permanent_function_optionsContext* HqlsqlParser::permanent_function_options() {
  Permanent_function_optionsContext *_localctx = _tracker.createInstance<Permanent_function_optionsContext>(_ctx, getState());
  enterRule(_localctx, 278, HqlsqlParser::RulePermanent_function_options);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2455);
    permanent_function_option();
    setState(2460);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2456);
        match(HqlsqlParser::T_COMMA);
        setState(2457);
        permanent_function_option(); 
      }
      setState(2462);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Permanent_function_optionContext ------------------------------------------------------------------

HqlsqlParser::Permanent_function_optionContext::Permanent_function_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Permanent_function_optionContext::T_USING() {
  return getToken(HqlsqlParser::T_USING, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Permanent_function_optionContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Permanent_function_optionContext::T_JAR() {
  return getToken(HqlsqlParser::T_JAR, 0);
}

tree::TerminalNode* HqlsqlParser::Permanent_function_optionContext::T_FILE() {
  return getToken(HqlsqlParser::T_FILE, 0);
}

tree::TerminalNode* HqlsqlParser::Permanent_function_optionContext::T_ARCHIVE() {
  return getToken(HqlsqlParser::T_ARCHIVE, 0);
}


size_t HqlsqlParser::Permanent_function_optionContext::getRuleIndex() const {
  return HqlsqlParser::RulePermanent_function_option;
}

void HqlsqlParser::Permanent_function_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPermanent_function_option(this);
}

void HqlsqlParser::Permanent_function_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPermanent_function_option(this);
}


antlrcpp::Any HqlsqlParser::Permanent_function_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPermanent_function_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Permanent_function_optionContext* HqlsqlParser::permanent_function_option() {
  Permanent_function_optionContext *_localctx = _tracker.createInstance<Permanent_function_optionContext>(_ctx, getState());
  enterRule(_localctx, 280, HqlsqlParser::RulePermanent_function_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2463);
    match(HqlsqlParser::T_USING);
    setState(2464);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_FILE

    || _la == HqlsqlParser::T_JAR || _la == HqlsqlParser::T_ARCHIVE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2465);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reload_functionContext ------------------------------------------------------------------

HqlsqlParser::Reload_functionContext::Reload_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Reload_functionContext::T_RELOAD() {
  return getToken(HqlsqlParser::T_RELOAD, 0);
}

tree::TerminalNode* HqlsqlParser::Reload_functionContext::T_FUNCTIONS() {
  return getToken(HqlsqlParser::T_FUNCTIONS, 0);
}

tree::TerminalNode* HqlsqlParser::Reload_functionContext::T_FUNCTION() {
  return getToken(HqlsqlParser::T_FUNCTION, 0);
}


size_t HqlsqlParser::Reload_functionContext::getRuleIndex() const {
  return HqlsqlParser::RuleReload_function;
}

void HqlsqlParser::Reload_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReload_function(this);
}

void HqlsqlParser::Reload_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReload_function(this);
}


antlrcpp::Any HqlsqlParser::Reload_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitReload_function(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Reload_functionContext* HqlsqlParser::reload_function() {
  Reload_functionContext *_localctx = _tracker.createInstance<Reload_functionContext>(_ctx, getState());
  enterRule(_localctx, 282, HqlsqlParser::RuleReload_function);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2467);
    match(HqlsqlParser::T_RELOAD);
    setState(2468);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_FUNCTION || _la == HqlsqlParser::T_FUNCTIONS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_function_returnContext ------------------------------------------------------------------

HqlsqlParser::Create_function_returnContext::Create_function_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::DtypeContext* HqlsqlParser::Create_function_returnContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_function_returnContext::T_RETURN() {
  return getToken(HqlsqlParser::T_RETURN, 0);
}

tree::TerminalNode* HqlsqlParser::Create_function_returnContext::T_RETURNS() {
  return getToken(HqlsqlParser::T_RETURNS, 0);
}


size_t HqlsqlParser::Create_function_returnContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_function_return;
}

void HqlsqlParser::Create_function_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_function_return(this);
}

void HqlsqlParser::Create_function_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_function_return(this);
}


antlrcpp::Any HqlsqlParser::Create_function_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_function_return(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_function_returnContext* HqlsqlParser::create_function_return() {
  Create_function_returnContext *_localctx = _tracker.createInstance<Create_function_returnContext>(_ctx, getState());
  enterRule(_localctx, 284, HqlsqlParser::RuleCreate_function_return);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2470);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_RETURN

    || _la == HqlsqlParser::T_RETURNS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2471);
    dtype();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_package_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_package_stmtContext::Create_package_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_PACKAGE() {
  return getToken(HqlsqlParser::T_PACKAGE, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Create_package_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_package_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

HqlsqlParser::Package_specContext* HqlsqlParser::Create_package_stmtContext::package_spec() {
  return getRuleContext<HqlsqlParser::Package_specContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_REPLACE() {
  return getToken(HqlsqlParser::T_REPLACE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_SEMICOLON() {
  return getToken(HqlsqlParser::T_SEMICOLON, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_stmtContext::T_OR() {
  return getToken(HqlsqlParser::T_OR, 0);
}


size_t HqlsqlParser::Create_package_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_package_stmt;
}

void HqlsqlParser::Create_package_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_package_stmt(this);
}

void HqlsqlParser::Create_package_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_package_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_package_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_package_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_package_stmtContext* HqlsqlParser::create_package_stmt() {
  Create_package_stmtContext *_localctx = _tracker.createInstance<Create_package_stmtContext>(_ctx, getState());
  enterRule(_localctx, 286, HqlsqlParser::RuleCreate_package_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2480);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ALTER: {
        setState(2473);
        match(HqlsqlParser::T_ALTER);
        break;
      }

      case HqlsqlParser::T_CREATE: {
        setState(2474);
        match(HqlsqlParser::T_CREATE);
        setState(2477);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_OR) {
          setState(2475);
          match(HqlsqlParser::T_OR);
          setState(2476);
          match(HqlsqlParser::T_REPLACE);
        }
        break;
      }

      case HqlsqlParser::T_REPLACE: {
        setState(2479);
        match(HqlsqlParser::T_REPLACE);
        break;
      }

      case HqlsqlParser::T_PACKAGE: {
        break;
      }

    default:
      break;
    }
    setState(2482);
    match(HqlsqlParser::T_PACKAGE);
    setState(2483);
    ident();
    setState(2484);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_AS || _la == HqlsqlParser::T_IS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2485);
    package_spec();
    setState(2486);
    match(HqlsqlParser::T_END);
    setState(2490);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      setState(2487);
      ident();
      setState(2488);
      match(HqlsqlParser::T_SEMICOLON);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_specContext ------------------------------------------------------------------

HqlsqlParser::Package_specContext::Package_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Package_spec_itemContext *> HqlsqlParser::Package_specContext::package_spec_item() {
  return getRuleContexts<HqlsqlParser::Package_spec_itemContext>();
}

HqlsqlParser::Package_spec_itemContext* HqlsqlParser::Package_specContext::package_spec_item(size_t i) {
  return getRuleContext<HqlsqlParser::Package_spec_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Package_specContext::T_SEMICOLON() {
  return getTokens(HqlsqlParser::T_SEMICOLON);
}

tree::TerminalNode* HqlsqlParser::Package_specContext::T_SEMICOLON(size_t i) {
  return getToken(HqlsqlParser::T_SEMICOLON, i);
}


size_t HqlsqlParser::Package_specContext::getRuleIndex() const {
  return HqlsqlParser::RulePackage_spec;
}

void HqlsqlParser::Package_specContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_spec(this);
}

void HqlsqlParser::Package_specContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_spec(this);
}


antlrcpp::Any HqlsqlParser::Package_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_spec(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Package_specContext* HqlsqlParser::package_spec() {
  Package_specContext *_localctx = _tracker.createInstance<Package_specContext>(_ctx, getState());
  enterRule(_localctx, 288, HqlsqlParser::RulePackage_spec);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2492);
    package_spec_item();
    setState(2493);
    match(HqlsqlParser::T_SEMICOLON);
    setState(2499);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ACTION)
      | (1ULL << HqlsqlParser::T_ADD)
      | (1ULL << HqlsqlParser::T_ALL)
      | (1ULL << HqlsqlParser::T_ALLOCATE)
      | (1ULL << HqlsqlParser::T_ALTER)
      | (1ULL << HqlsqlParser::T_AND)
      | (1ULL << HqlsqlParser::T_ANSI_NULLS)
      | (1ULL << HqlsqlParser::T_ANSI_PADDING)
      | (1ULL << HqlsqlParser::T_AS)
      | (1ULL << HqlsqlParser::T_ASC)
      | (1ULL << HqlsqlParser::T_ASSOCIATE)
      | (1ULL << HqlsqlParser::T_AT)
      | (1ULL << HqlsqlParser::T_AUTO_INCREMENT)
      | (1ULL << HqlsqlParser::T_AVG)
      | (1ULL << HqlsqlParser::T_BATCHSIZE)
      | (1ULL << HqlsqlParser::T_BEGIN)
      | (1ULL << HqlsqlParser::T_BETWEEN)
      | (1ULL << HqlsqlParser::T_BIGINT)
      | (1ULL << HqlsqlParser::T_BINARY_DOUBLE)
      | (1ULL << HqlsqlParser::T_BINARY_FLOAT)
      | (1ULL << HqlsqlParser::T_BIT)
      | (1ULL << HqlsqlParser::T_BODY)
      | (1ULL << HqlsqlParser::T_BREAK)
      | (1ULL << HqlsqlParser::T_BY)
      | (1ULL << HqlsqlParser::T_BYTE)
      | (1ULL << HqlsqlParser::T_CALL)
      | (1ULL << HqlsqlParser::T_CALLER)
      | (1ULL << HqlsqlParser::T_CASCADE)
      | (1ULL << HqlsqlParser::T_CASE)
      | (1ULL << HqlsqlParser::T_CASESPECIFIC)
      | (1ULL << HqlsqlParser::T_CAST)
      | (1ULL << HqlsqlParser::T_CHAR)
      | (1ULL << HqlsqlParser::T_CHARACTER)
      | (1ULL << HqlsqlParser::T_CHARSET)
      | (1ULL << HqlsqlParser::T_CLIENT)
      | (1ULL << HqlsqlParser::T_CLOSE)
      | (1ULL << HqlsqlParser::T_CLUSTERED)
      | (1ULL << HqlsqlParser::T_CMP)
      | (1ULL << HqlsqlParser::T_COLLECT)
      | (1ULL << HqlsqlParser::T_COLLECTION)
      | (1ULL << HqlsqlParser::T_COLUMN)
      | (1ULL << HqlsqlParser::T_COMMENT)
      | (1ULL << HqlsqlParser::T_CONSTANT)
      | (1ULL << HqlsqlParser::T_COMMIT)
      | (1ULL << HqlsqlParser::T_COMPRESS)
      | (1ULL << HqlsqlParser::T_CONCAT)
      | (1ULL << HqlsqlParser::T_CONDITION)
      | (1ULL << HqlsqlParser::T_CONSTRAINT)
      | (1ULL << HqlsqlParser::T_CONTINUE)
      | (1ULL << HqlsqlParser::T_COPY)
      | (1ULL << HqlsqlParser::T_COUNT)
      | (1ULL << HqlsqlParser::T_COUNT_BIG)
      | (1ULL << HqlsqlParser::T_CREATE)
      | (1ULL << HqlsqlParser::T_CREATION)
      | (1ULL << HqlsqlParser::T_CREATOR)
      | (1ULL << HqlsqlParser::T_CS)
      | (1ULL << HqlsqlParser::T_CURRENT)
      | (1ULL << HqlsqlParser::T_CURRENT_SCHEMA)
      | (1ULL << HqlsqlParser::T_CURSOR)
      | (1ULL << HqlsqlParser::T_DATABASE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (HqlsqlParser::T_DATA - 64))
      | (1ULL << (HqlsqlParser::T_DATE - 64))
      | (1ULL << (HqlsqlParser::T_DATETIME - 64))
      | (1ULL << (HqlsqlParser::T_DAY - 64))
      | (1ULL << (HqlsqlParser::T_DAYS - 64))
      | (1ULL << (HqlsqlParser::T_DEC - 64))
      | (1ULL << (HqlsqlParser::T_DECIMAL - 64))
      | (1ULL << (HqlsqlParser::T_DECLARE - 64))
      | (1ULL << (HqlsqlParser::T_DEFAULT - 64))
      | (1ULL << (HqlsqlParser::T_DEFERRED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINER - 64))
      | (1ULL << (HqlsqlParser::T_DEFINITION - 64))
      | (1ULL << (HqlsqlParser::T_DELETE - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITED - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITER - 64))
      | (1ULL << (HqlsqlParser::T_DESC - 64))
      | (1ULL << (HqlsqlParser::T_DESCRIBE - 64))
      | (1ULL << (HqlsqlParser::T_DIAGNOSTICS - 64))
      | (1ULL << (HqlsqlParser::T_DIR - 64))
      | (1ULL << (HqlsqlParser::T_DIRECTORY - 64))
      | (1ULL << (HqlsqlParser::T_DISTINCT - 64))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTE - 64))
      | (1ULL << (HqlsqlParser::T_DO - 64))
      | (1ULL << (HqlsqlParser::T_DOUBLE - 64))
      | (1ULL << (HqlsqlParser::T_DROP - 64))
      | (1ULL << (HqlsqlParser::T_DYNAMIC - 64))
      | (1ULL << (HqlsqlParser::T_ENABLE - 64))
      | (1ULL << (HqlsqlParser::T_ENGINE - 64))
      | (1ULL << (HqlsqlParser::T_ESCAPED - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPT - 64))
      | (1ULL << (HqlsqlParser::T_EXEC - 64))
      | (1ULL << (HqlsqlParser::T_EXECUTE - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPTION - 64))
      | (1ULL << (HqlsqlParser::T_EXCLUSIVE - 64))
      | (1ULL << (HqlsqlParser::T_EXISTS - 64))
      | (1ULL << (HqlsqlParser::T_EXIT - 64))
      | (1ULL << (HqlsqlParser::T_FALLBACK - 64))
      | (1ULL << (HqlsqlParser::T_FALSE - 64))
      | (1ULL << (HqlsqlParser::T_FETCH - 64))
      | (1ULL << (HqlsqlParser::T_FIELDS - 64))
      | (1ULL << (HqlsqlParser::T_FILE - 64))
      | (1ULL << (HqlsqlParser::T_FILES - 64))
      | (1ULL << (HqlsqlParser::T_FLOAT - 64))
      | (1ULL << (HqlsqlParser::T_FOR - 64))
      | (1ULL << (HqlsqlParser::T_FOREIGN - 64))
      | (1ULL << (HqlsqlParser::T_FORMAT - 64))
      | (1ULL << (HqlsqlParser::T_FOUND - 64))
      | (1ULL << (HqlsqlParser::T_FULL - 64))
      | (1ULL << (HqlsqlParser::T_FUNCTION - 64))
      | (1ULL << (HqlsqlParser::T_GET - 64))
      | (1ULL << (HqlsqlParser::T_GLOBAL - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (HqlsqlParser::T_GO - 128))
      | (1ULL << (HqlsqlParser::T_GRANT - 128))
      | (1ULL << (HqlsqlParser::T_ROLE - 128))
      | (1ULL << (HqlsqlParser::T_HANDLER - 128))
      | (1ULL << (HqlsqlParser::T_HASH - 128))
      | (1ULL << (HqlsqlParser::T_HAVING - 128))
      | (1ULL << (HqlsqlParser::T_HDFS - 128))
      | (1ULL << (HqlsqlParser::T_HIVE - 128))
      | (1ULL << (HqlsqlParser::T_HOST - 128))
      | (1ULL << (HqlsqlParser::T_IDENTITY - 128))
      | (1ULL << (HqlsqlParser::T_IF - 128))
      | (1ULL << (HqlsqlParser::T_IGNORE - 128))
      | (1ULL << (HqlsqlParser::T_IMMEDIATE - 128))
      | (1ULL << (HqlsqlParser::T_IN - 128))
      | (1ULL << (HqlsqlParser::T_INCLUDE - 128))
      | (1ULL << (HqlsqlParser::T_INDEX - 128))
      | (1ULL << (HqlsqlParser::T_INITRANS - 128))
      | (1ULL << (HqlsqlParser::T_INNER - 128))
      | (1ULL << (HqlsqlParser::T_INOUT - 128))
      | (1ULL << (HqlsqlParser::T_INSERT - 128))
      | (1ULL << (HqlsqlParser::T_INT - 128))
      | (1ULL << (HqlsqlParser::T_INT2 - 128))
      | (1ULL << (HqlsqlParser::T_INT4 - 128))
      | (1ULL << (HqlsqlParser::T_INT8 - 128))
      | (1ULL << (HqlsqlParser::T_INTEGER - 128))
      | (1ULL << (HqlsqlParser::T_INTERSECT - 128))
      | (1ULL << (HqlsqlParser::T_INTO - 128))
      | (1ULL << (HqlsqlParser::T_INVOKER - 128))
      | (1ULL << (HqlsqlParser::T_IS - 128))
      | (1ULL << (HqlsqlParser::T_ISOPEN - 128))
      | (1ULL << (HqlsqlParser::T_ITEMS - 128))
      | (1ULL << (HqlsqlParser::T_JOIN - 128))
      | (1ULL << (HqlsqlParser::T_KEEP - 128))
      | (1ULL << (HqlsqlParser::T_KEY - 128))
      | (1ULL << (HqlsqlParser::T_KEYS - 128))
      | (1ULL << (HqlsqlParser::T_LANGUAGE - 128))
      | (1ULL << (HqlsqlParser::T_LEAVE - 128))
      | (1ULL << (HqlsqlParser::T_LEFT - 128))
      | (1ULL << (HqlsqlParser::T_LIKE - 128))
      | (1ULL << (HqlsqlParser::T_LINES - 128))
      | (1ULL << (HqlsqlParser::T_LOCAL - 128))
      | (1ULL << (HqlsqlParser::T_LOCATION - 128))
      | (1ULL << (HqlsqlParser::T_LOCATOR - 128))
      | (1ULL << (HqlsqlParser::T_LOCATORS - 128))
      | (1ULL << (HqlsqlParser::T_LOCKS - 128))
      | (1ULL << (HqlsqlParser::T_LOG - 128))
      | (1ULL << (HqlsqlParser::T_LOGGED - 128))
      | (1ULL << (HqlsqlParser::T_LOGGING - 128))
      | (1ULL << (HqlsqlParser::T_LOOP - 128))
      | (1ULL << (HqlsqlParser::T_MAP - 128))
      | (1ULL << (HqlsqlParser::T_MATCHED - 128))
      | (1ULL << (HqlsqlParser::T_MAX - 128))
      | (1ULL << (HqlsqlParser::T_MAXTRANS - 128))
      | (1ULL << (HqlsqlParser::T_MERGE - 128))
      | (1ULL << (HqlsqlParser::T_MESSAGE_TEXT - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECOND - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECONDS - 128))
      | (1ULL << (HqlsqlParser::T_MIN - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (HqlsqlParser::T_MULTISET - 192))
      | (1ULL << (HqlsqlParser::T_NCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NEW - 192))
      | (1ULL << (HqlsqlParser::T_NVARCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NO - 192))
      | (1ULL << (HqlsqlParser::T_NOCOUNT - 192))
      | (1ULL << (HqlsqlParser::T_NOCOMPRESS - 192))
      | (1ULL << (HqlsqlParser::T_NOLOGGING - 192))
      | (1ULL << (HqlsqlParser::T_NONE - 192))
      | (1ULL << (HqlsqlParser::T_NOT - 192))
      | (1ULL << (HqlsqlParser::T_NOTFOUND - 192))
      | (1ULL << (HqlsqlParser::T_NUMERIC - 192))
      | (1ULL << (HqlsqlParser::T_NUMBER - 192))
      | (1ULL << (HqlsqlParser::T_OBJECT - 192))
      | (1ULL << (HqlsqlParser::T_OFF - 192))
      | (1ULL << (HqlsqlParser::T_ON - 192))
      | (1ULL << (HqlsqlParser::T_ONLY - 192))
      | (1ULL << (HqlsqlParser::T_OPEN - 192))
      | (1ULL << (HqlsqlParser::T_OR - 192))
      | (1ULL << (HqlsqlParser::T_OUT - 192))
      | (1ULL << (HqlsqlParser::T_OUTER - 192))
      | (1ULL << (HqlsqlParser::T_OVERWRITE - 192))
      | (1ULL << (HqlsqlParser::T_OWNER - 192))
      | (1ULL << (HqlsqlParser::T_PACKAGE - 192))
      | (1ULL << (HqlsqlParser::T_PARTITION - 192))
      | (1ULL << (HqlsqlParser::T_PCTFREE - 192))
      | (1ULL << (HqlsqlParser::T_PCTUSED - 192))
      | (1ULL << (HqlsqlParser::T_PRECISION - 192))
      | (1ULL << (HqlsqlParser::T_PRESERVE - 192))
      | (1ULL << (HqlsqlParser::T_PRIMARY - 192))
      | (1ULL << (HqlsqlParser::T_PRINT - 192))
      | (1ULL << (HqlsqlParser::T_PROC - 192))
      | (1ULL << (HqlsqlParser::T_PROCEDURE - 192))
      | (1ULL << (HqlsqlParser::T_QUALIFY - 192))
      | (1ULL << (HqlsqlParser::T_QUERY_BAND - 192))
      | (1ULL << (HqlsqlParser::T_QUIT - 192))
      | (1ULL << (HqlsqlParser::T_QUOTED_IDENTIFIER - 192))
      | (1ULL << (HqlsqlParser::T_RAISE - 192))
      | (1ULL << (HqlsqlParser::T_REAL - 192))
      | (1ULL << (HqlsqlParser::T_REFERENCES - 192))
      | (1ULL << (HqlsqlParser::T_REGEXP - 192))
      | (1ULL << (HqlsqlParser::T_REPLACE - 192))
      | (1ULL << (HqlsqlParser::T_RESIGNAL - 192))
      | (1ULL << (HqlsqlParser::T_RESTRICT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT_SET_LOCATOR - 192))
      | (1ULL << (HqlsqlParser::T_RETURN - 192))
      | (1ULL << (HqlsqlParser::T_RETURNS - 192))
      | (1ULL << (HqlsqlParser::T_REVERSE - 192))
      | (1ULL << (HqlsqlParser::T_RIGHT - 192))
      | (1ULL << (HqlsqlParser::T_RLIKE - 192))
      | (1ULL << (HqlsqlParser::T_ROLLBACK - 192))
      | (1ULL << (HqlsqlParser::T_ROW - 192))
      | (1ULL << (HqlsqlParser::T_ROWS - 192))
      | (1ULL << (HqlsqlParser::T_ROW_COUNT - 192))
      | (1ULL << (HqlsqlParser::T_RR - 192))
      | (1ULL << (HqlsqlParser::T_RS - 192))
      | (1ULL << (HqlsqlParser::T_PWD - 192))
      | (1ULL << (HqlsqlParser::T_TRIM - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (HqlsqlParser::T_SCHEMA - 256))
      | (1ULL << (HqlsqlParser::T_SECOND - 256))
      | (1ULL << (HqlsqlParser::T_SECONDS - 256))
      | (1ULL << (HqlsqlParser::T_SECURITY - 256))
      | (1ULL << (HqlsqlParser::T_SEGMENT - 256))
      | (1ULL << (HqlsqlParser::T_SELECT - 256))
      | (1ULL << (HqlsqlParser::T_SESSION - 256))
      | (1ULL << (HqlsqlParser::T_SESSIONS - 256))
      | (1ULL << (HqlsqlParser::T_SETS - 256))
      | (1ULL << (HqlsqlParser::T_SHARE - 256))
      | (1ULL << (HqlsqlParser::T_SIGNAL - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_DOUBLE - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_FLOAT - 256))
      | (1ULL << (HqlsqlParser::T_SMALLDATETIME - 256))
      | (1ULL << (HqlsqlParser::T_SMALLINT - 256))
      | (1ULL << (HqlsqlParser::T_SQL - 256))
      | (1ULL << (HqlsqlParser::T_SQLEXCEPTION - 256))
      | (1ULL << (HqlsqlParser::T_SQLINSERT - 256))
      | (1ULL << (HqlsqlParser::T_SQLSTATE - 256))
      | (1ULL << (HqlsqlParser::T_SQLWARNING - 256))
      | (1ULL << (HqlsqlParser::T_STATS - 256))
      | (1ULL << (HqlsqlParser::T_STATISTICS - 256))
      | (1ULL << (HqlsqlParser::T_STEP - 256))
      | (1ULL << (HqlsqlParser::T_STORAGE - 256))
      | (1ULL << (HqlsqlParser::T_STORED - 256))
      | (1ULL << (HqlsqlParser::T_STRING - 256))
      | (1ULL << (HqlsqlParser::T_SUBDIR - 256))
      | (1ULL << (HqlsqlParser::T_SUBSTRING - 256))
      | (1ULL << (HqlsqlParser::T_SUM - 256))
      | (1ULL << (HqlsqlParser::T_SUMMARY - 256))
      | (1ULL << (HqlsqlParser::T_SYS_REFCURSOR - 256))
      | (1ULL << (HqlsqlParser::T_TABLE - 256))
      | (1ULL << (HqlsqlParser::T_TABLESPACE - 256))
      | (1ULL << (HqlsqlParser::T_TEMPORARY - 256))
      | (1ULL << (HqlsqlParser::T_TERMINATED - 256))
      | (1ULL << (HqlsqlParser::T_TEXTIMAGE_ON - 256))
      | (1ULL << (HqlsqlParser::T_THEN - 256))
      | (1ULL << (HqlsqlParser::T_TIMESTAMP - 256))
      | (1ULL << (HqlsqlParser::T_TITLE - 256))
      | (1ULL << (HqlsqlParser::T_TO - 256))
      | (1ULL << (HqlsqlParser::T_TOP - 256))
      | (1ULL << (HqlsqlParser::T_TRANSACTION - 256))
      | (1ULL << (HqlsqlParser::T_TRUE - 256))
      | (1ULL << (HqlsqlParser::T_TRUNCATE - 256))
      | (1ULL << (HqlsqlParser::T_TYPE - 256))
      | (1ULL << (HqlsqlParser::T_UNIQUE - 256))
      | (1ULL << (HqlsqlParser::T_UPDATE - 256))
      | (1ULL << (HqlsqlParser::T_UR - 256))
      | (1ULL << (HqlsqlParser::T_USE - 256))
      | (1ULL << (HqlsqlParser::T_USING - 256))
      | (1ULL << (HqlsqlParser::T_VALUE - 256))
      | (1ULL << (HqlsqlParser::T_VALUES - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (HqlsqlParser::T_VAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR2 - 320))
      | (1ULL << (HqlsqlParser::T_VARYING - 320))
      | (1ULL << (HqlsqlParser::T_VOLATILE - 320))
      | (1ULL << (HqlsqlParser::T_WHILE - 320))
      | (1ULL << (HqlsqlParser::T_WITH - 320))
      | (1ULL << (HqlsqlParser::T_WITHOUT - 320))
      | (1ULL << (HqlsqlParser::T_WORK - 320))
      | (1ULL << (HqlsqlParser::T_XACT_ABORT - 320))
      | (1ULL << (HqlsqlParser::T_XML - 320))
      | (1ULL << (HqlsqlParser::T_YES - 320))
      | (1ULL << (HqlsqlParser::T_ARRAY - 320))
      | (1ULL << (HqlsqlParser::T_STRUCT - 320))
      | (1ULL << (HqlsqlParser::T_SERDE - 320))
      | (1ULL << (HqlsqlParser::T_SEQUENCEFILE - 320))
      | (1ULL << (HqlsqlParser::T_TEXTFILE - 320))
      | (1ULL << (HqlsqlParser::T_RCFILE - 320))
      | (1ULL << (HqlsqlParser::T_ORC - 320))
      | (1ULL << (HqlsqlParser::T_PARQUET - 320))
      | (1ULL << (HqlsqlParser::T_AVRO - 320))
      | (1ULL << (HqlsqlParser::T_JSONFILE - 320))
      | (1ULL << (HqlsqlParser::T_INPUTFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_FILEFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_T - 320))
      | (1ULL << (HqlsqlParser::T_S - 320))
      | (1ULL << (HqlsqlParser::T_ACTIVITY_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_CUME_DIST - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_DATE - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_TIMESTAMP - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_USER - 320))
      | (1ULL << (HqlsqlParser::T_DENSE_RANK - 320))
      | (1ULL << (HqlsqlParser::T_FIRST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LAG - 320))
      | (1ULL << (HqlsqlParser::T_LAST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LEAD - 320))
      | (1ULL << (HqlsqlParser::T_PART_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_PART_LOC - 320))
      | (1ULL << (HqlsqlParser::T_RANK - 320))
      | (1ULL << (HqlsqlParser::T_ROW_NUMBER - 320))
      | (1ULL << (HqlsqlParser::T_STDEV - 320))
      | (1ULL << (HqlsqlParser::T_STD - 320))
      | (1ULL << (HqlsqlParser::T_SYSDATE - 320))
      | (1ULL << (HqlsqlParser::T_VARIANCE - 320))
      | (1ULL << (HqlsqlParser::T_USER - 320))
      | (1ULL << (HqlsqlParser::T_PURGE - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 384)) & ((1ULL << (HqlsqlParser::T_BUCKETS - 384))
      | (1ULL << (HqlsqlParser::T_SKEWED - 384))
      | (1ULL << (HqlsqlParser::T_DIRECTORIES - 384))
      | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 384))
      | (1ULL << (HqlsqlParser::T_RENAME - 384))
      | (1ULL << (HqlsqlParser::T_SORTED - 384))
      | (1ULL << (HqlsqlParser::T_SORT - 384))
      | (1ULL << (HqlsqlParser::T_CHANGE - 384))
      | (1ULL << (HqlsqlParser::T_EXCHANGE - 384))
      | (1ULL << (HqlsqlParser::T_RECOVER - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONS - 384))
      | (1ULL << (HqlsqlParser::T_PROTECTION - 384))
      | (1ULL << (HqlsqlParser::T_ARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_UNARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_TOUCH - 384))
      | (1ULL << (HqlsqlParser::T_OFFLINE - 384))
      | (1ULL << (HqlsqlParser::T_NO_DROP - 384))
      | (1ULL << (HqlsqlParser::T_COMPACT - 384))
      | (1ULL << (HqlsqlParser::T_CONCATENATE - 384))
      | (1ULL << (HqlsqlParser::T_WAIT - 384))
      | (1ULL << (HqlsqlParser::T_COLUMNS - 384))
      | (1ULL << (HqlsqlParser::T_FIRST - 384))
      | (1ULL << (HqlsqlParser::T_LAST - 384))
      | (1ULL << (HqlsqlParser::T_NULLS - 384))
      | (1ULL << (HqlsqlParser::T_AFTER - 384))
      | (1ULL << (HqlsqlParser::T_MATERIALIZED - 384))
      | (1ULL << (HqlsqlParser::T_REWRITE - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONED - 384))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 384))
      | (1ULL << (HqlsqlParser::T_MACRO - 384))
      | (1ULL << (HqlsqlParser::T_SHOW - 384))
      | (1ULL << (HqlsqlParser::T_EXTENDED - 384))
      | (1ULL << (HqlsqlParser::T_FORMATTED - 384))
      | (1ULL << (HqlsqlParser::T_SEMI - 384))
      | (1ULL << (HqlsqlParser::T_CROSS - 384))
      | (1ULL << (HqlsqlParser::T_LATERAL - 384))
      | (1ULL << (HqlsqlParser::T_RELOAD - 384))
      | (1ULL << (HqlsqlParser::T_LOAD - 384))
      | (1ULL << (HqlsqlParser::T_INPATH - 384))
      | (1ULL << (HqlsqlParser::T_PRINCIPALS - 384))
      | (1ULL << (HqlsqlParser::T_COMPACTIONS - 384))
      | (1ULL << (HqlsqlParser::T_CONF - 384))
      | (1ULL << (HqlsqlParser::T_ADMIN - 384))
      | (1ULL << (HqlsqlParser::T_OPTION - 384))
      | (1ULL << (HqlsqlParser::T_PRIVILEGES - 384))
      | (1ULL << (HqlsqlParser::T_LOCK - 384))
      | (1ULL << (HqlsqlParser::T_SHOW_DATABASE - 384))
      | (1ULL << (HqlsqlParser::T_COMPUTE - 384))
      | (1ULL << (HqlsqlParser::T_CACHE - 384))
      | (1ULL << (HqlsqlParser::T_METADATA - 384))
      | (1ULL << (HqlsqlParser::T_NOSCAN - 384))
      | (1ULL << (HqlsqlParser::T_UNIONTYPE - 384))
      | (1ULL << (HqlsqlParser::T_ANALYZE - 384))
      | (1ULL << (HqlsqlParser::T_EXPLAIN - 384))
      | (1ULL << (HqlsqlParser::T_CBO - 384))
      | (1ULL << (HqlsqlParser::T_AST - 384))
      | (1ULL << (HqlsqlParser::T_DEPENDENCY - 384))
      | (1ULL << (HqlsqlParser::T_AUTHORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_VECTORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_COST - 384))
      | (1ULL << (HqlsqlParser::T_JOINCOST - 384))
      | (1ULL << (HqlsqlParser::T_OPERATOR - 384))
      | (1ULL << (HqlsqlParser::T_EXPRESSION - 384))
      | (1ULL << (HqlsqlParser::T_DETAIL - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 448)) & ((1ULL << (HqlsqlParser::T_UNBOUNDED - 448))
      | (1ULL << (HqlsqlParser::T_PRECEDING - 448))
      | (1ULL << (HqlsqlParser::T_FOLLOWING - 448))
      | (1ULL << (HqlsqlParser::T_RANGE - 448))
      | (1ULL << (HqlsqlParser::T_YEAR - 448))
      | (1ULL << (HqlsqlParser::T_MONTH - 448))
      | (1ULL << (HqlsqlParser::T_MINUTE - 448))
      | (1ULL << (HqlsqlParser::T_TIME - 448))
      | (1ULL << (HqlsqlParser::T_ZONE - 448))
      | (1ULL << (HqlsqlParser::T_SUB - 448))
      | (1ULL << (HqlsqlParser::L_ID - 448)))) != 0)) {
      setState(2494);
      package_spec_item();
      setState(2495);
      match(HqlsqlParser::T_SEMICOLON);
      setState(2501);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_spec_itemContext ------------------------------------------------------------------

HqlsqlParser::Package_spec_itemContext::Package_spec_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Declare_stmt_itemContext* HqlsqlParser::Package_spec_itemContext::declare_stmt_item() {
  return getRuleContext<HqlsqlParser::Declare_stmt_itemContext>(0);
}

tree::TerminalNode* HqlsqlParser::Package_spec_itemContext::T_FUNCTION() {
  return getToken(HqlsqlParser::T_FUNCTION, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Package_spec_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Create_function_returnContext* HqlsqlParser::Package_spec_itemContext::create_function_return() {
  return getRuleContext<HqlsqlParser::Create_function_returnContext>(0);
}

HqlsqlParser::Create_routine_paramsContext* HqlsqlParser::Package_spec_itemContext::create_routine_params() {
  return getRuleContext<HqlsqlParser::Create_routine_paramsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Package_spec_itemContext::T_PROCEDURE() {
  return getToken(HqlsqlParser::T_PROCEDURE, 0);
}

tree::TerminalNode* HqlsqlParser::Package_spec_itemContext::T_PROC() {
  return getToken(HqlsqlParser::T_PROC, 0);
}


size_t HqlsqlParser::Package_spec_itemContext::getRuleIndex() const {
  return HqlsqlParser::RulePackage_spec_item;
}

void HqlsqlParser::Package_spec_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_spec_item(this);
}

void HqlsqlParser::Package_spec_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_spec_item(this);
}


antlrcpp::Any HqlsqlParser::Package_spec_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_spec_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Package_spec_itemContext* HqlsqlParser::package_spec_item() {
  Package_spec_itemContext *_localctx = _tracker.createInstance<Package_spec_itemContext>(_ctx, getState());
  enterRule(_localctx, 290, HqlsqlParser::RulePackage_spec_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2515);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2502);
      declare_stmt_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2503);
      match(HqlsqlParser::T_FUNCTION);
      setState(2504);
      ident();
      setState(2506);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
      case 1: {
        setState(2505);
        create_routine_params();
        break;
      }

      }
      setState(2508);
      create_function_return();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2510);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_PROC

      || _la == HqlsqlParser::T_PROCEDURE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2511);
      ident();
      setState(2513);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ACTION)
        | (1ULL << HqlsqlParser::T_ADD)
        | (1ULL << HqlsqlParser::T_ALL)
        | (1ULL << HqlsqlParser::T_ALLOCATE)
        | (1ULL << HqlsqlParser::T_ALTER)
        | (1ULL << HqlsqlParser::T_AND)
        | (1ULL << HqlsqlParser::T_ANSI_NULLS)
        | (1ULL << HqlsqlParser::T_ANSI_PADDING)
        | (1ULL << HqlsqlParser::T_AS)
        | (1ULL << HqlsqlParser::T_ASC)
        | (1ULL << HqlsqlParser::T_ASSOCIATE)
        | (1ULL << HqlsqlParser::T_AT)
        | (1ULL << HqlsqlParser::T_AUTO_INCREMENT)
        | (1ULL << HqlsqlParser::T_AVG)
        | (1ULL << HqlsqlParser::T_BATCHSIZE)
        | (1ULL << HqlsqlParser::T_BEGIN)
        | (1ULL << HqlsqlParser::T_BETWEEN)
        | (1ULL << HqlsqlParser::T_BIGINT)
        | (1ULL << HqlsqlParser::T_BINARY_DOUBLE)
        | (1ULL << HqlsqlParser::T_BINARY_FLOAT)
        | (1ULL << HqlsqlParser::T_BIT)
        | (1ULL << HqlsqlParser::T_BODY)
        | (1ULL << HqlsqlParser::T_BREAK)
        | (1ULL << HqlsqlParser::T_BY)
        | (1ULL << HqlsqlParser::T_BYTE)
        | (1ULL << HqlsqlParser::T_CALL)
        | (1ULL << HqlsqlParser::T_CALLER)
        | (1ULL << HqlsqlParser::T_CASCADE)
        | (1ULL << HqlsqlParser::T_CASE)
        | (1ULL << HqlsqlParser::T_CASESPECIFIC)
        | (1ULL << HqlsqlParser::T_CAST)
        | (1ULL << HqlsqlParser::T_CHAR)
        | (1ULL << HqlsqlParser::T_CHARACTER)
        | (1ULL << HqlsqlParser::T_CHARSET)
        | (1ULL << HqlsqlParser::T_CLIENT)
        | (1ULL << HqlsqlParser::T_CLOSE)
        | (1ULL << HqlsqlParser::T_CLUSTERED)
        | (1ULL << HqlsqlParser::T_CMP)
        | (1ULL << HqlsqlParser::T_COLLECT)
        | (1ULL << HqlsqlParser::T_COLLECTION)
        | (1ULL << HqlsqlParser::T_COLUMN)
        | (1ULL << HqlsqlParser::T_COMMENT)
        | (1ULL << HqlsqlParser::T_CONSTANT)
        | (1ULL << HqlsqlParser::T_COMMIT)
        | (1ULL << HqlsqlParser::T_COMPRESS)
        | (1ULL << HqlsqlParser::T_CONCAT)
        | (1ULL << HqlsqlParser::T_CONDITION)
        | (1ULL << HqlsqlParser::T_CONSTRAINT)
        | (1ULL << HqlsqlParser::T_CONTINUE)
        | (1ULL << HqlsqlParser::T_COPY)
        | (1ULL << HqlsqlParser::T_COUNT)
        | (1ULL << HqlsqlParser::T_COUNT_BIG)
        | (1ULL << HqlsqlParser::T_CREATE)
        | (1ULL << HqlsqlParser::T_CREATION)
        | (1ULL << HqlsqlParser::T_CREATOR)
        | (1ULL << HqlsqlParser::T_CS)
        | (1ULL << HqlsqlParser::T_CURRENT)
        | (1ULL << HqlsqlParser::T_CURRENT_SCHEMA)
        | (1ULL << HqlsqlParser::T_CURSOR)
        | (1ULL << HqlsqlParser::T_DATABASE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (HqlsqlParser::T_DATA - 64))
        | (1ULL << (HqlsqlParser::T_DATE - 64))
        | (1ULL << (HqlsqlParser::T_DATETIME - 64))
        | (1ULL << (HqlsqlParser::T_DAY - 64))
        | (1ULL << (HqlsqlParser::T_DAYS - 64))
        | (1ULL << (HqlsqlParser::T_DEC - 64))
        | (1ULL << (HqlsqlParser::T_DECIMAL - 64))
        | (1ULL << (HqlsqlParser::T_DECLARE - 64))
        | (1ULL << (HqlsqlParser::T_DEFAULT - 64))
        | (1ULL << (HqlsqlParser::T_DEFERRED - 64))
        | (1ULL << (HqlsqlParser::T_DEFINED - 64))
        | (1ULL << (HqlsqlParser::T_DEFINER - 64))
        | (1ULL << (HqlsqlParser::T_DEFINITION - 64))
        | (1ULL << (HqlsqlParser::T_DELETE - 64))
        | (1ULL << (HqlsqlParser::T_DELIMITED - 64))
        | (1ULL << (HqlsqlParser::T_DELIMITER - 64))
        | (1ULL << (HqlsqlParser::T_DESC - 64))
        | (1ULL << (HqlsqlParser::T_DESCRIBE - 64))
        | (1ULL << (HqlsqlParser::T_DIAGNOSTICS - 64))
        | (1ULL << (HqlsqlParser::T_DIR - 64))
        | (1ULL << (HqlsqlParser::T_DIRECTORY - 64))
        | (1ULL << (HqlsqlParser::T_DISTINCT - 64))
        | (1ULL << (HqlsqlParser::T_DISTRIBUTE - 64))
        | (1ULL << (HqlsqlParser::T_DO - 64))
        | (1ULL << (HqlsqlParser::T_DOUBLE - 64))
        | (1ULL << (HqlsqlParser::T_DROP - 64))
        | (1ULL << (HqlsqlParser::T_DYNAMIC - 64))
        | (1ULL << (HqlsqlParser::T_ENABLE - 64))
        | (1ULL << (HqlsqlParser::T_ENGINE - 64))
        | (1ULL << (HqlsqlParser::T_ESCAPED - 64))
        | (1ULL << (HqlsqlParser::T_EXCEPT - 64))
        | (1ULL << (HqlsqlParser::T_EXEC - 64))
        | (1ULL << (HqlsqlParser::T_EXECUTE - 64))
        | (1ULL << (HqlsqlParser::T_EXCEPTION - 64))
        | (1ULL << (HqlsqlParser::T_EXCLUSIVE - 64))
        | (1ULL << (HqlsqlParser::T_EXISTS - 64))
        | (1ULL << (HqlsqlParser::T_EXIT - 64))
        | (1ULL << (HqlsqlParser::T_FALLBACK - 64))
        | (1ULL << (HqlsqlParser::T_FALSE - 64))
        | (1ULL << (HqlsqlParser::T_FETCH - 64))
        | (1ULL << (HqlsqlParser::T_FIELDS - 64))
        | (1ULL << (HqlsqlParser::T_FILE - 64))
        | (1ULL << (HqlsqlParser::T_FILES - 64))
        | (1ULL << (HqlsqlParser::T_FLOAT - 64))
        | (1ULL << (HqlsqlParser::T_FOR - 64))
        | (1ULL << (HqlsqlParser::T_FOREIGN - 64))
        | (1ULL << (HqlsqlParser::T_FORMAT - 64))
        | (1ULL << (HqlsqlParser::T_FOUND - 64))
        | (1ULL << (HqlsqlParser::T_FULL - 64))
        | (1ULL << (HqlsqlParser::T_FUNCTION - 64))
        | (1ULL << (HqlsqlParser::T_GET - 64))
        | (1ULL << (HqlsqlParser::T_GLOBAL - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (HqlsqlParser::T_GO - 128))
        | (1ULL << (HqlsqlParser::T_GRANT - 128))
        | (1ULL << (HqlsqlParser::T_ROLE - 128))
        | (1ULL << (HqlsqlParser::T_HANDLER - 128))
        | (1ULL << (HqlsqlParser::T_HASH - 128))
        | (1ULL << (HqlsqlParser::T_HAVING - 128))
        | (1ULL << (HqlsqlParser::T_HDFS - 128))
        | (1ULL << (HqlsqlParser::T_HIVE - 128))
        | (1ULL << (HqlsqlParser::T_HOST - 128))
        | (1ULL << (HqlsqlParser::T_IDENTITY - 128))
        | (1ULL << (HqlsqlParser::T_IF - 128))
        | (1ULL << (HqlsqlParser::T_IGNORE - 128))
        | (1ULL << (HqlsqlParser::T_IMMEDIATE - 128))
        | (1ULL << (HqlsqlParser::T_IN - 128))
        | (1ULL << (HqlsqlParser::T_INCLUDE - 128))
        | (1ULL << (HqlsqlParser::T_INDEX - 128))
        | (1ULL << (HqlsqlParser::T_INITRANS - 128))
        | (1ULL << (HqlsqlParser::T_INNER - 128))
        | (1ULL << (HqlsqlParser::T_INOUT - 128))
        | (1ULL << (HqlsqlParser::T_INSERT - 128))
        | (1ULL << (HqlsqlParser::T_INT - 128))
        | (1ULL << (HqlsqlParser::T_INT2 - 128))
        | (1ULL << (HqlsqlParser::T_INT4 - 128))
        | (1ULL << (HqlsqlParser::T_INT8 - 128))
        | (1ULL << (HqlsqlParser::T_INTEGER - 128))
        | (1ULL << (HqlsqlParser::T_INTERSECT - 128))
        | (1ULL << (HqlsqlParser::T_INTO - 128))
        | (1ULL << (HqlsqlParser::T_INVOKER - 128))
        | (1ULL << (HqlsqlParser::T_IS - 128))
        | (1ULL << (HqlsqlParser::T_ISOPEN - 128))
        | (1ULL << (HqlsqlParser::T_ITEMS - 128))
        | (1ULL << (HqlsqlParser::T_JOIN - 128))
        | (1ULL << (HqlsqlParser::T_KEEP - 128))
        | (1ULL << (HqlsqlParser::T_KEY - 128))
        | (1ULL << (HqlsqlParser::T_KEYS - 128))
        | (1ULL << (HqlsqlParser::T_LANGUAGE - 128))
        | (1ULL << (HqlsqlParser::T_LEAVE - 128))
        | (1ULL << (HqlsqlParser::T_LEFT - 128))
        | (1ULL << (HqlsqlParser::T_LIKE - 128))
        | (1ULL << (HqlsqlParser::T_LINES - 128))
        | (1ULL << (HqlsqlParser::T_LOCAL - 128))
        | (1ULL << (HqlsqlParser::T_LOCATION - 128))
        | (1ULL << (HqlsqlParser::T_LOCATOR - 128))
        | (1ULL << (HqlsqlParser::T_LOCATORS - 128))
        | (1ULL << (HqlsqlParser::T_LOCKS - 128))
        | (1ULL << (HqlsqlParser::T_LOG - 128))
        | (1ULL << (HqlsqlParser::T_LOGGED - 128))
        | (1ULL << (HqlsqlParser::T_LOGGING - 128))
        | (1ULL << (HqlsqlParser::T_LOOP - 128))
        | (1ULL << (HqlsqlParser::T_MAP - 128))
        | (1ULL << (HqlsqlParser::T_MATCHED - 128))
        | (1ULL << (HqlsqlParser::T_MAX - 128))
        | (1ULL << (HqlsqlParser::T_MAXTRANS - 128))
        | (1ULL << (HqlsqlParser::T_MERGE - 128))
        | (1ULL << (HqlsqlParser::T_MESSAGE_TEXT - 128))
        | (1ULL << (HqlsqlParser::T_MICROSECOND - 128))
        | (1ULL << (HqlsqlParser::T_MICROSECONDS - 128))
        | (1ULL << (HqlsqlParser::T_MIN - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (HqlsqlParser::T_MULTISET - 192))
        | (1ULL << (HqlsqlParser::T_NCHAR - 192))
        | (1ULL << (HqlsqlParser::T_NEW - 192))
        | (1ULL << (HqlsqlParser::T_NVARCHAR - 192))
        | (1ULL << (HqlsqlParser::T_NO - 192))
        | (1ULL << (HqlsqlParser::T_NOCOUNT - 192))
        | (1ULL << (HqlsqlParser::T_NOCOMPRESS - 192))
        | (1ULL << (HqlsqlParser::T_NOLOGGING - 192))
        | (1ULL << (HqlsqlParser::T_NONE - 192))
        | (1ULL << (HqlsqlParser::T_NOT - 192))
        | (1ULL << (HqlsqlParser::T_NOTFOUND - 192))
        | (1ULL << (HqlsqlParser::T_NUMERIC - 192))
        | (1ULL << (HqlsqlParser::T_NUMBER - 192))
        | (1ULL << (HqlsqlParser::T_OBJECT - 192))
        | (1ULL << (HqlsqlParser::T_OFF - 192))
        | (1ULL << (HqlsqlParser::T_ON - 192))
        | (1ULL << (HqlsqlParser::T_ONLY - 192))
        | (1ULL << (HqlsqlParser::T_OPEN - 192))
        | (1ULL << (HqlsqlParser::T_OR - 192))
        | (1ULL << (HqlsqlParser::T_OUT - 192))
        | (1ULL << (HqlsqlParser::T_OUTER - 192))
        | (1ULL << (HqlsqlParser::T_OVERWRITE - 192))
        | (1ULL << (HqlsqlParser::T_OWNER - 192))
        | (1ULL << (HqlsqlParser::T_PACKAGE - 192))
        | (1ULL << (HqlsqlParser::T_PARTITION - 192))
        | (1ULL << (HqlsqlParser::T_PCTFREE - 192))
        | (1ULL << (HqlsqlParser::T_PCTUSED - 192))
        | (1ULL << (HqlsqlParser::T_PRECISION - 192))
        | (1ULL << (HqlsqlParser::T_PRESERVE - 192))
        | (1ULL << (HqlsqlParser::T_PRIMARY - 192))
        | (1ULL << (HqlsqlParser::T_PRINT - 192))
        | (1ULL << (HqlsqlParser::T_PROC - 192))
        | (1ULL << (HqlsqlParser::T_PROCEDURE - 192))
        | (1ULL << (HqlsqlParser::T_QUALIFY - 192))
        | (1ULL << (HqlsqlParser::T_QUERY_BAND - 192))
        | (1ULL << (HqlsqlParser::T_QUIT - 192))
        | (1ULL << (HqlsqlParser::T_QUOTED_IDENTIFIER - 192))
        | (1ULL << (HqlsqlParser::T_RAISE - 192))
        | (1ULL << (HqlsqlParser::T_REAL - 192))
        | (1ULL << (HqlsqlParser::T_REFERENCES - 192))
        | (1ULL << (HqlsqlParser::T_REGEXP - 192))
        | (1ULL << (HqlsqlParser::T_REPLACE - 192))
        | (1ULL << (HqlsqlParser::T_RESIGNAL - 192))
        | (1ULL << (HqlsqlParser::T_RESTRICT - 192))
        | (1ULL << (HqlsqlParser::T_RESULT - 192))
        | (1ULL << (HqlsqlParser::T_RESULT_SET_LOCATOR - 192))
        | (1ULL << (HqlsqlParser::T_RETURN - 192))
        | (1ULL << (HqlsqlParser::T_RETURNS - 192))
        | (1ULL << (HqlsqlParser::T_REVERSE - 192))
        | (1ULL << (HqlsqlParser::T_RIGHT - 192))
        | (1ULL << (HqlsqlParser::T_RLIKE - 192))
        | (1ULL << (HqlsqlParser::T_ROLLBACK - 192))
        | (1ULL << (HqlsqlParser::T_ROW - 192))
        | (1ULL << (HqlsqlParser::T_ROWS - 192))
        | (1ULL << (HqlsqlParser::T_ROW_COUNT - 192))
        | (1ULL << (HqlsqlParser::T_RR - 192))
        | (1ULL << (HqlsqlParser::T_RS - 192))
        | (1ULL << (HqlsqlParser::T_PWD - 192))
        | (1ULL << (HqlsqlParser::T_TRIM - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (HqlsqlParser::T_SCHEMA - 256))
        | (1ULL << (HqlsqlParser::T_SECOND - 256))
        | (1ULL << (HqlsqlParser::T_SECONDS - 256))
        | (1ULL << (HqlsqlParser::T_SECURITY - 256))
        | (1ULL << (HqlsqlParser::T_SEGMENT - 256))
        | (1ULL << (HqlsqlParser::T_SELECT - 256))
        | (1ULL << (HqlsqlParser::T_SESSION - 256))
        | (1ULL << (HqlsqlParser::T_SESSIONS - 256))
        | (1ULL << (HqlsqlParser::T_SETS - 256))
        | (1ULL << (HqlsqlParser::T_SHARE - 256))
        | (1ULL << (HqlsqlParser::T_SIGNAL - 256))
        | (1ULL << (HqlsqlParser::T_SIMPLE_DOUBLE - 256))
        | (1ULL << (HqlsqlParser::T_SIMPLE_FLOAT - 256))
        | (1ULL << (HqlsqlParser::T_SMALLDATETIME - 256))
        | (1ULL << (HqlsqlParser::T_SMALLINT - 256))
        | (1ULL << (HqlsqlParser::T_SQL - 256))
        | (1ULL << (HqlsqlParser::T_SQLEXCEPTION - 256))
        | (1ULL << (HqlsqlParser::T_SQLINSERT - 256))
        | (1ULL << (HqlsqlParser::T_SQLSTATE - 256))
        | (1ULL << (HqlsqlParser::T_SQLWARNING - 256))
        | (1ULL << (HqlsqlParser::T_STATS - 256))
        | (1ULL << (HqlsqlParser::T_STATISTICS - 256))
        | (1ULL << (HqlsqlParser::T_STEP - 256))
        | (1ULL << (HqlsqlParser::T_STORAGE - 256))
        | (1ULL << (HqlsqlParser::T_STORED - 256))
        | (1ULL << (HqlsqlParser::T_STRING - 256))
        | (1ULL << (HqlsqlParser::T_SUBDIR - 256))
        | (1ULL << (HqlsqlParser::T_SUBSTRING - 256))
        | (1ULL << (HqlsqlParser::T_SUM - 256))
        | (1ULL << (HqlsqlParser::T_SUMMARY - 256))
        | (1ULL << (HqlsqlParser::T_SYS_REFCURSOR - 256))
        | (1ULL << (HqlsqlParser::T_TABLE - 256))
        | (1ULL << (HqlsqlParser::T_TABLESPACE - 256))
        | (1ULL << (HqlsqlParser::T_TEMPORARY - 256))
        | (1ULL << (HqlsqlParser::T_TERMINATED - 256))
        | (1ULL << (HqlsqlParser::T_TEXTIMAGE_ON - 256))
        | (1ULL << (HqlsqlParser::T_THEN - 256))
        | (1ULL << (HqlsqlParser::T_TIMESTAMP - 256))
        | (1ULL << (HqlsqlParser::T_TITLE - 256))
        | (1ULL << (HqlsqlParser::T_TO - 256))
        | (1ULL << (HqlsqlParser::T_TOP - 256))
        | (1ULL << (HqlsqlParser::T_TRANSACTION - 256))
        | (1ULL << (HqlsqlParser::T_TRUE - 256))
        | (1ULL << (HqlsqlParser::T_TRUNCATE - 256))
        | (1ULL << (HqlsqlParser::T_TYPE - 256))
        | (1ULL << (HqlsqlParser::T_UNIQUE - 256))
        | (1ULL << (HqlsqlParser::T_UPDATE - 256))
        | (1ULL << (HqlsqlParser::T_UR - 256))
        | (1ULL << (HqlsqlParser::T_USE - 256))
        | (1ULL << (HqlsqlParser::T_USING - 256))
        | (1ULL << (HqlsqlParser::T_VALUE - 256))
        | (1ULL << (HqlsqlParser::T_VALUES - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (HqlsqlParser::T_VAR - 320))
        | (1ULL << (HqlsqlParser::T_VARCHAR - 320))
        | (1ULL << (HqlsqlParser::T_VARCHAR2 - 320))
        | (1ULL << (HqlsqlParser::T_VARYING - 320))
        | (1ULL << (HqlsqlParser::T_VOLATILE - 320))
        | (1ULL << (HqlsqlParser::T_WHILE - 320))
        | (1ULL << (HqlsqlParser::T_WITH - 320))
        | (1ULL << (HqlsqlParser::T_WITHOUT - 320))
        | (1ULL << (HqlsqlParser::T_WORK - 320))
        | (1ULL << (HqlsqlParser::T_XACT_ABORT - 320))
        | (1ULL << (HqlsqlParser::T_XML - 320))
        | (1ULL << (HqlsqlParser::T_YES - 320))
        | (1ULL << (HqlsqlParser::T_ARRAY - 320))
        | (1ULL << (HqlsqlParser::T_STRUCT - 320))
        | (1ULL << (HqlsqlParser::T_SERDE - 320))
        | (1ULL << (HqlsqlParser::T_SEQUENCEFILE - 320))
        | (1ULL << (HqlsqlParser::T_TEXTFILE - 320))
        | (1ULL << (HqlsqlParser::T_RCFILE - 320))
        | (1ULL << (HqlsqlParser::T_ORC - 320))
        | (1ULL << (HqlsqlParser::T_PARQUET - 320))
        | (1ULL << (HqlsqlParser::T_AVRO - 320))
        | (1ULL << (HqlsqlParser::T_JSONFILE - 320))
        | (1ULL << (HqlsqlParser::T_INPUTFORMAT - 320))
        | (1ULL << (HqlsqlParser::T_FILEFORMAT - 320))
        | (1ULL << (HqlsqlParser::T_T - 320))
        | (1ULL << (HqlsqlParser::T_S - 320))
        | (1ULL << (HqlsqlParser::T_ACTIVITY_COUNT - 320))
        | (1ULL << (HqlsqlParser::T_CUME_DIST - 320))
        | (1ULL << (HqlsqlParser::T_CURRENT_DATE - 320))
        | (1ULL << (HqlsqlParser::T_CURRENT_TIMESTAMP - 320))
        | (1ULL << (HqlsqlParser::T_CURRENT_USER - 320))
        | (1ULL << (HqlsqlParser::T_DENSE_RANK - 320))
        | (1ULL << (HqlsqlParser::T_FIRST_VALUE - 320))
        | (1ULL << (HqlsqlParser::T_LAG - 320))
        | (1ULL << (HqlsqlParser::T_LAST_VALUE - 320))
        | (1ULL << (HqlsqlParser::T_LEAD - 320))
        | (1ULL << (HqlsqlParser::T_PART_COUNT - 320))
        | (1ULL << (HqlsqlParser::T_PART_LOC - 320))
        | (1ULL << (HqlsqlParser::T_RANK - 320))
        | (1ULL << (HqlsqlParser::T_ROW_NUMBER - 320))
        | (1ULL << (HqlsqlParser::T_STDEV - 320))
        | (1ULL << (HqlsqlParser::T_STD - 320))
        | (1ULL << (HqlsqlParser::T_SYSDATE - 320))
        | (1ULL << (HqlsqlParser::T_VARIANCE - 320))
        | (1ULL << (HqlsqlParser::T_USER - 320))
        | (1ULL << (HqlsqlParser::T_PURGE - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 384)) & ((1ULL << (HqlsqlParser::T_BUCKETS - 384))
        | (1ULL << (HqlsqlParser::T_SKEWED - 384))
        | (1ULL << (HqlsqlParser::T_DIRECTORIES - 384))
        | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 384))
        | (1ULL << (HqlsqlParser::T_RENAME - 384))
        | (1ULL << (HqlsqlParser::T_SORTED - 384))
        | (1ULL << (HqlsqlParser::T_SORT - 384))
        | (1ULL << (HqlsqlParser::T_CHANGE - 384))
        | (1ULL << (HqlsqlParser::T_EXCHANGE - 384))
        | (1ULL << (HqlsqlParser::T_RECOVER - 384))
        | (1ULL << (HqlsqlParser::T_PARTITIONS - 384))
        | (1ULL << (HqlsqlParser::T_PROTECTION - 384))
        | (1ULL << (HqlsqlParser::T_ARCHIVE - 384))
        | (1ULL << (HqlsqlParser::T_UNARCHIVE - 384))
        | (1ULL << (HqlsqlParser::T_TOUCH - 384))
        | (1ULL << (HqlsqlParser::T_OFFLINE - 384))
        | (1ULL << (HqlsqlParser::T_NO_DROP - 384))
        | (1ULL << (HqlsqlParser::T_COMPACT - 384))
        | (1ULL << (HqlsqlParser::T_CONCATENATE - 384))
        | (1ULL << (HqlsqlParser::T_WAIT - 384))
        | (1ULL << (HqlsqlParser::T_COLUMNS - 384))
        | (1ULL << (HqlsqlParser::T_FIRST - 384))
        | (1ULL << (HqlsqlParser::T_LAST - 384))
        | (1ULL << (HqlsqlParser::T_NULLS - 384))
        | (1ULL << (HqlsqlParser::T_AFTER - 384))
        | (1ULL << (HqlsqlParser::T_MATERIALIZED - 384))
        | (1ULL << (HqlsqlParser::T_REWRITE - 384))
        | (1ULL << (HqlsqlParser::T_PARTITIONED - 384))
        | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 384))
        | (1ULL << (HqlsqlParser::T_MACRO - 384))
        | (1ULL << (HqlsqlParser::T_SHOW - 384))
        | (1ULL << (HqlsqlParser::T_EXTENDED - 384))
        | (1ULL << (HqlsqlParser::T_FORMATTED - 384))
        | (1ULL << (HqlsqlParser::T_SEMI - 384))
        | (1ULL << (HqlsqlParser::T_CROSS - 384))
        | (1ULL << (HqlsqlParser::T_LATERAL - 384))
        | (1ULL << (HqlsqlParser::T_RELOAD - 384))
        | (1ULL << (HqlsqlParser::T_LOAD - 384))
        | (1ULL << (HqlsqlParser::T_INPATH - 384))
        | (1ULL << (HqlsqlParser::T_PRINCIPALS - 384))
        | (1ULL << (HqlsqlParser::T_COMPACTIONS - 384))
        | (1ULL << (HqlsqlParser::T_CONF - 384))
        | (1ULL << (HqlsqlParser::T_ADMIN - 384))
        | (1ULL << (HqlsqlParser::T_OPTION - 384))
        | (1ULL << (HqlsqlParser::T_PRIVILEGES - 384))
        | (1ULL << (HqlsqlParser::T_LOCK - 384))
        | (1ULL << (HqlsqlParser::T_SHOW_DATABASE - 384))
        | (1ULL << (HqlsqlParser::T_COMPUTE - 384))
        | (1ULL << (HqlsqlParser::T_CACHE - 384))
        | (1ULL << (HqlsqlParser::T_METADATA - 384))
        | (1ULL << (HqlsqlParser::T_NOSCAN - 384))
        | (1ULL << (HqlsqlParser::T_UNIONTYPE - 384))
        | (1ULL << (HqlsqlParser::T_ANALYZE - 384))
        | (1ULL << (HqlsqlParser::T_EXPLAIN - 384))
        | (1ULL << (HqlsqlParser::T_CBO - 384))
        | (1ULL << (HqlsqlParser::T_AST - 384))
        | (1ULL << (HqlsqlParser::T_DEPENDENCY - 384))
        | (1ULL << (HqlsqlParser::T_AUTHORIZATION - 384))
        | (1ULL << (HqlsqlParser::T_VECTORIZATION - 384))
        | (1ULL << (HqlsqlParser::T_COST - 384))
        | (1ULL << (HqlsqlParser::T_JOINCOST - 384))
        | (1ULL << (HqlsqlParser::T_OPERATOR - 384))
        | (1ULL << (HqlsqlParser::T_EXPRESSION - 384))
        | (1ULL << (HqlsqlParser::T_DETAIL - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 448)) & ((1ULL << (HqlsqlParser::T_UNBOUNDED - 448))
        | (1ULL << (HqlsqlParser::T_PRECEDING - 448))
        | (1ULL << (HqlsqlParser::T_FOLLOWING - 448))
        | (1ULL << (HqlsqlParser::T_RANGE - 448))
        | (1ULL << (HqlsqlParser::T_YEAR - 448))
        | (1ULL << (HqlsqlParser::T_MONTH - 448))
        | (1ULL << (HqlsqlParser::T_MINUTE - 448))
        | (1ULL << (HqlsqlParser::T_TIME - 448))
        | (1ULL << (HqlsqlParser::T_ZONE - 448))
        | (1ULL << (HqlsqlParser::T_OPEN_P - 448))
        | (1ULL << (HqlsqlParser::T_SUB - 448))
        | (1ULL << (HqlsqlParser::L_ID - 448)))) != 0)) {
        setState(2512);
        create_routine_params();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_package_body_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_package_body_stmtContext::Create_package_body_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_PACKAGE() {
  return getToken(HqlsqlParser::T_PACKAGE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_BODY() {
  return getToken(HqlsqlParser::T_BODY, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Create_package_body_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_package_body_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

HqlsqlParser::Package_bodyContext* HqlsqlParser::Create_package_body_stmtContext::package_body() {
  return getRuleContext<HqlsqlParser::Package_bodyContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_REPLACE() {
  return getToken(HqlsqlParser::T_REPLACE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_SEMICOLON() {
  return getToken(HqlsqlParser::T_SEMICOLON, 0);
}

tree::TerminalNode* HqlsqlParser::Create_package_body_stmtContext::T_OR() {
  return getToken(HqlsqlParser::T_OR, 0);
}


size_t HqlsqlParser::Create_package_body_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_package_body_stmt;
}

void HqlsqlParser::Create_package_body_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_package_body_stmt(this);
}

void HqlsqlParser::Create_package_body_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_package_body_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_package_body_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_package_body_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_package_body_stmtContext* HqlsqlParser::create_package_body_stmt() {
  Create_package_body_stmtContext *_localctx = _tracker.createInstance<Create_package_body_stmtContext>(_ctx, getState());
  enterRule(_localctx, 292, HqlsqlParser::RuleCreate_package_body_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2524);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ALTER: {
        setState(2517);
        match(HqlsqlParser::T_ALTER);
        break;
      }

      case HqlsqlParser::T_CREATE: {
        setState(2518);
        match(HqlsqlParser::T_CREATE);
        setState(2521);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_OR) {
          setState(2519);
          match(HqlsqlParser::T_OR);
          setState(2520);
          match(HqlsqlParser::T_REPLACE);
        }
        break;
      }

      case HqlsqlParser::T_REPLACE: {
        setState(2523);
        match(HqlsqlParser::T_REPLACE);
        break;
      }

      case HqlsqlParser::T_PACKAGE: {
        break;
      }

    default:
      break;
    }
    setState(2526);
    match(HqlsqlParser::T_PACKAGE);
    setState(2527);
    match(HqlsqlParser::T_BODY);
    setState(2528);
    ident();
    setState(2529);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_AS || _la == HqlsqlParser::T_IS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2530);
    package_body();
    setState(2531);
    match(HqlsqlParser::T_END);
    setState(2535);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      setState(2532);
      ident();
      setState(2533);
      match(HqlsqlParser::T_SEMICOLON);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_bodyContext ------------------------------------------------------------------

HqlsqlParser::Package_bodyContext::Package_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Package_body_itemContext *> HqlsqlParser::Package_bodyContext::package_body_item() {
  return getRuleContexts<HqlsqlParser::Package_body_itemContext>();
}

HqlsqlParser::Package_body_itemContext* HqlsqlParser::Package_bodyContext::package_body_item(size_t i) {
  return getRuleContext<HqlsqlParser::Package_body_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Package_bodyContext::T_SEMICOLON() {
  return getTokens(HqlsqlParser::T_SEMICOLON);
}

tree::TerminalNode* HqlsqlParser::Package_bodyContext::T_SEMICOLON(size_t i) {
  return getToken(HqlsqlParser::T_SEMICOLON, i);
}


size_t HqlsqlParser::Package_bodyContext::getRuleIndex() const {
  return HqlsqlParser::RulePackage_body;
}

void HqlsqlParser::Package_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body(this);
}

void HqlsqlParser::Package_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body(this);
}


antlrcpp::Any HqlsqlParser::Package_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_body(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Package_bodyContext* HqlsqlParser::package_body() {
  Package_bodyContext *_localctx = _tracker.createInstance<Package_bodyContext>(_ctx, getState());
  enterRule(_localctx, 294, HqlsqlParser::RulePackage_body);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2537);
    package_body_item();
    setState(2538);
    match(HqlsqlParser::T_SEMICOLON);
    setState(2544);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ACTION)
      | (1ULL << HqlsqlParser::T_ADD)
      | (1ULL << HqlsqlParser::T_ALL)
      | (1ULL << HqlsqlParser::T_ALLOCATE)
      | (1ULL << HqlsqlParser::T_ALTER)
      | (1ULL << HqlsqlParser::T_AND)
      | (1ULL << HqlsqlParser::T_ANSI_NULLS)
      | (1ULL << HqlsqlParser::T_ANSI_PADDING)
      | (1ULL << HqlsqlParser::T_AS)
      | (1ULL << HqlsqlParser::T_ASC)
      | (1ULL << HqlsqlParser::T_ASSOCIATE)
      | (1ULL << HqlsqlParser::T_AT)
      | (1ULL << HqlsqlParser::T_AUTO_INCREMENT)
      | (1ULL << HqlsqlParser::T_AVG)
      | (1ULL << HqlsqlParser::T_BATCHSIZE)
      | (1ULL << HqlsqlParser::T_BEGIN)
      | (1ULL << HqlsqlParser::T_BETWEEN)
      | (1ULL << HqlsqlParser::T_BIGINT)
      | (1ULL << HqlsqlParser::T_BINARY_DOUBLE)
      | (1ULL << HqlsqlParser::T_BINARY_FLOAT)
      | (1ULL << HqlsqlParser::T_BIT)
      | (1ULL << HqlsqlParser::T_BODY)
      | (1ULL << HqlsqlParser::T_BREAK)
      | (1ULL << HqlsqlParser::T_BY)
      | (1ULL << HqlsqlParser::T_BYTE)
      | (1ULL << HqlsqlParser::T_CALL)
      | (1ULL << HqlsqlParser::T_CALLER)
      | (1ULL << HqlsqlParser::T_CASCADE)
      | (1ULL << HqlsqlParser::T_CASE)
      | (1ULL << HqlsqlParser::T_CASESPECIFIC)
      | (1ULL << HqlsqlParser::T_CAST)
      | (1ULL << HqlsqlParser::T_CHAR)
      | (1ULL << HqlsqlParser::T_CHARACTER)
      | (1ULL << HqlsqlParser::T_CHARSET)
      | (1ULL << HqlsqlParser::T_CLIENT)
      | (1ULL << HqlsqlParser::T_CLOSE)
      | (1ULL << HqlsqlParser::T_CLUSTERED)
      | (1ULL << HqlsqlParser::T_CMP)
      | (1ULL << HqlsqlParser::T_COLLECT)
      | (1ULL << HqlsqlParser::T_COLLECTION)
      | (1ULL << HqlsqlParser::T_COLUMN)
      | (1ULL << HqlsqlParser::T_COMMENT)
      | (1ULL << HqlsqlParser::T_CONSTANT)
      | (1ULL << HqlsqlParser::T_COMMIT)
      | (1ULL << HqlsqlParser::T_COMPRESS)
      | (1ULL << HqlsqlParser::T_CONCAT)
      | (1ULL << HqlsqlParser::T_CONDITION)
      | (1ULL << HqlsqlParser::T_CONSTRAINT)
      | (1ULL << HqlsqlParser::T_CONTINUE)
      | (1ULL << HqlsqlParser::T_COPY)
      | (1ULL << HqlsqlParser::T_COUNT)
      | (1ULL << HqlsqlParser::T_COUNT_BIG)
      | (1ULL << HqlsqlParser::T_CREATE)
      | (1ULL << HqlsqlParser::T_CREATION)
      | (1ULL << HqlsqlParser::T_CREATOR)
      | (1ULL << HqlsqlParser::T_CS)
      | (1ULL << HqlsqlParser::T_CURRENT)
      | (1ULL << HqlsqlParser::T_CURRENT_SCHEMA)
      | (1ULL << HqlsqlParser::T_CURSOR)
      | (1ULL << HqlsqlParser::T_DATABASE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (HqlsqlParser::T_DATA - 64))
      | (1ULL << (HqlsqlParser::T_DATE - 64))
      | (1ULL << (HqlsqlParser::T_DATETIME - 64))
      | (1ULL << (HqlsqlParser::T_DAY - 64))
      | (1ULL << (HqlsqlParser::T_DAYS - 64))
      | (1ULL << (HqlsqlParser::T_DEC - 64))
      | (1ULL << (HqlsqlParser::T_DECIMAL - 64))
      | (1ULL << (HqlsqlParser::T_DECLARE - 64))
      | (1ULL << (HqlsqlParser::T_DEFAULT - 64))
      | (1ULL << (HqlsqlParser::T_DEFERRED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINER - 64))
      | (1ULL << (HqlsqlParser::T_DEFINITION - 64))
      | (1ULL << (HqlsqlParser::T_DELETE - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITED - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITER - 64))
      | (1ULL << (HqlsqlParser::T_DESC - 64))
      | (1ULL << (HqlsqlParser::T_DESCRIBE - 64))
      | (1ULL << (HqlsqlParser::T_DIAGNOSTICS - 64))
      | (1ULL << (HqlsqlParser::T_DIR - 64))
      | (1ULL << (HqlsqlParser::T_DIRECTORY - 64))
      | (1ULL << (HqlsqlParser::T_DISTINCT - 64))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTE - 64))
      | (1ULL << (HqlsqlParser::T_DO - 64))
      | (1ULL << (HqlsqlParser::T_DOUBLE - 64))
      | (1ULL << (HqlsqlParser::T_DROP - 64))
      | (1ULL << (HqlsqlParser::T_DYNAMIC - 64))
      | (1ULL << (HqlsqlParser::T_ENABLE - 64))
      | (1ULL << (HqlsqlParser::T_ENGINE - 64))
      | (1ULL << (HqlsqlParser::T_ESCAPED - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPT - 64))
      | (1ULL << (HqlsqlParser::T_EXEC - 64))
      | (1ULL << (HqlsqlParser::T_EXECUTE - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPTION - 64))
      | (1ULL << (HqlsqlParser::T_EXCLUSIVE - 64))
      | (1ULL << (HqlsqlParser::T_EXISTS - 64))
      | (1ULL << (HqlsqlParser::T_EXIT - 64))
      | (1ULL << (HqlsqlParser::T_FALLBACK - 64))
      | (1ULL << (HqlsqlParser::T_FALSE - 64))
      | (1ULL << (HqlsqlParser::T_FETCH - 64))
      | (1ULL << (HqlsqlParser::T_FIELDS - 64))
      | (1ULL << (HqlsqlParser::T_FILE - 64))
      | (1ULL << (HqlsqlParser::T_FILES - 64))
      | (1ULL << (HqlsqlParser::T_FLOAT - 64))
      | (1ULL << (HqlsqlParser::T_FOR - 64))
      | (1ULL << (HqlsqlParser::T_FOREIGN - 64))
      | (1ULL << (HqlsqlParser::T_FORMAT - 64))
      | (1ULL << (HqlsqlParser::T_FOUND - 64))
      | (1ULL << (HqlsqlParser::T_FULL - 64))
      | (1ULL << (HqlsqlParser::T_FUNCTION - 64))
      | (1ULL << (HqlsqlParser::T_GET - 64))
      | (1ULL << (HqlsqlParser::T_GLOBAL - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (HqlsqlParser::T_GO - 128))
      | (1ULL << (HqlsqlParser::T_GRANT - 128))
      | (1ULL << (HqlsqlParser::T_ROLE - 128))
      | (1ULL << (HqlsqlParser::T_HANDLER - 128))
      | (1ULL << (HqlsqlParser::T_HASH - 128))
      | (1ULL << (HqlsqlParser::T_HAVING - 128))
      | (1ULL << (HqlsqlParser::T_HDFS - 128))
      | (1ULL << (HqlsqlParser::T_HIVE - 128))
      | (1ULL << (HqlsqlParser::T_HOST - 128))
      | (1ULL << (HqlsqlParser::T_IDENTITY - 128))
      | (1ULL << (HqlsqlParser::T_IF - 128))
      | (1ULL << (HqlsqlParser::T_IGNORE - 128))
      | (1ULL << (HqlsqlParser::T_IMMEDIATE - 128))
      | (1ULL << (HqlsqlParser::T_IN - 128))
      | (1ULL << (HqlsqlParser::T_INCLUDE - 128))
      | (1ULL << (HqlsqlParser::T_INDEX - 128))
      | (1ULL << (HqlsqlParser::T_INITRANS - 128))
      | (1ULL << (HqlsqlParser::T_INNER - 128))
      | (1ULL << (HqlsqlParser::T_INOUT - 128))
      | (1ULL << (HqlsqlParser::T_INSERT - 128))
      | (1ULL << (HqlsqlParser::T_INT - 128))
      | (1ULL << (HqlsqlParser::T_INT2 - 128))
      | (1ULL << (HqlsqlParser::T_INT4 - 128))
      | (1ULL << (HqlsqlParser::T_INT8 - 128))
      | (1ULL << (HqlsqlParser::T_INTEGER - 128))
      | (1ULL << (HqlsqlParser::T_INTERSECT - 128))
      | (1ULL << (HqlsqlParser::T_INTO - 128))
      | (1ULL << (HqlsqlParser::T_INVOKER - 128))
      | (1ULL << (HqlsqlParser::T_IS - 128))
      | (1ULL << (HqlsqlParser::T_ISOPEN - 128))
      | (1ULL << (HqlsqlParser::T_ITEMS - 128))
      | (1ULL << (HqlsqlParser::T_JOIN - 128))
      | (1ULL << (HqlsqlParser::T_KEEP - 128))
      | (1ULL << (HqlsqlParser::T_KEY - 128))
      | (1ULL << (HqlsqlParser::T_KEYS - 128))
      | (1ULL << (HqlsqlParser::T_LANGUAGE - 128))
      | (1ULL << (HqlsqlParser::T_LEAVE - 128))
      | (1ULL << (HqlsqlParser::T_LEFT - 128))
      | (1ULL << (HqlsqlParser::T_LIKE - 128))
      | (1ULL << (HqlsqlParser::T_LINES - 128))
      | (1ULL << (HqlsqlParser::T_LOCAL - 128))
      | (1ULL << (HqlsqlParser::T_LOCATION - 128))
      | (1ULL << (HqlsqlParser::T_LOCATOR - 128))
      | (1ULL << (HqlsqlParser::T_LOCATORS - 128))
      | (1ULL << (HqlsqlParser::T_LOCKS - 128))
      | (1ULL << (HqlsqlParser::T_LOG - 128))
      | (1ULL << (HqlsqlParser::T_LOGGED - 128))
      | (1ULL << (HqlsqlParser::T_LOGGING - 128))
      | (1ULL << (HqlsqlParser::T_LOOP - 128))
      | (1ULL << (HqlsqlParser::T_MAP - 128))
      | (1ULL << (HqlsqlParser::T_MATCHED - 128))
      | (1ULL << (HqlsqlParser::T_MAX - 128))
      | (1ULL << (HqlsqlParser::T_MAXTRANS - 128))
      | (1ULL << (HqlsqlParser::T_MERGE - 128))
      | (1ULL << (HqlsqlParser::T_MESSAGE_TEXT - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECOND - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECONDS - 128))
      | (1ULL << (HqlsqlParser::T_MIN - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (HqlsqlParser::T_MULTISET - 192))
      | (1ULL << (HqlsqlParser::T_NCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NEW - 192))
      | (1ULL << (HqlsqlParser::T_NVARCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NO - 192))
      | (1ULL << (HqlsqlParser::T_NOCOUNT - 192))
      | (1ULL << (HqlsqlParser::T_NOCOMPRESS - 192))
      | (1ULL << (HqlsqlParser::T_NOLOGGING - 192))
      | (1ULL << (HqlsqlParser::T_NONE - 192))
      | (1ULL << (HqlsqlParser::T_NOT - 192))
      | (1ULL << (HqlsqlParser::T_NOTFOUND - 192))
      | (1ULL << (HqlsqlParser::T_NUMERIC - 192))
      | (1ULL << (HqlsqlParser::T_NUMBER - 192))
      | (1ULL << (HqlsqlParser::T_OBJECT - 192))
      | (1ULL << (HqlsqlParser::T_OFF - 192))
      | (1ULL << (HqlsqlParser::T_ON - 192))
      | (1ULL << (HqlsqlParser::T_ONLY - 192))
      | (1ULL << (HqlsqlParser::T_OPEN - 192))
      | (1ULL << (HqlsqlParser::T_OR - 192))
      | (1ULL << (HqlsqlParser::T_OUT - 192))
      | (1ULL << (HqlsqlParser::T_OUTER - 192))
      | (1ULL << (HqlsqlParser::T_OVERWRITE - 192))
      | (1ULL << (HqlsqlParser::T_OWNER - 192))
      | (1ULL << (HqlsqlParser::T_PACKAGE - 192))
      | (1ULL << (HqlsqlParser::T_PARTITION - 192))
      | (1ULL << (HqlsqlParser::T_PCTFREE - 192))
      | (1ULL << (HqlsqlParser::T_PCTUSED - 192))
      | (1ULL << (HqlsqlParser::T_PRECISION - 192))
      | (1ULL << (HqlsqlParser::T_PRESERVE - 192))
      | (1ULL << (HqlsqlParser::T_PRIMARY - 192))
      | (1ULL << (HqlsqlParser::T_PRINT - 192))
      | (1ULL << (HqlsqlParser::T_PROC - 192))
      | (1ULL << (HqlsqlParser::T_PROCEDURE - 192))
      | (1ULL << (HqlsqlParser::T_QUALIFY - 192))
      | (1ULL << (HqlsqlParser::T_QUERY_BAND - 192))
      | (1ULL << (HqlsqlParser::T_QUIT - 192))
      | (1ULL << (HqlsqlParser::T_QUOTED_IDENTIFIER - 192))
      | (1ULL << (HqlsqlParser::T_RAISE - 192))
      | (1ULL << (HqlsqlParser::T_REAL - 192))
      | (1ULL << (HqlsqlParser::T_REFERENCES - 192))
      | (1ULL << (HqlsqlParser::T_REGEXP - 192))
      | (1ULL << (HqlsqlParser::T_REPLACE - 192))
      | (1ULL << (HqlsqlParser::T_RESIGNAL - 192))
      | (1ULL << (HqlsqlParser::T_RESTRICT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT_SET_LOCATOR - 192))
      | (1ULL << (HqlsqlParser::T_RETURN - 192))
      | (1ULL << (HqlsqlParser::T_RETURNS - 192))
      | (1ULL << (HqlsqlParser::T_REVERSE - 192))
      | (1ULL << (HqlsqlParser::T_RIGHT - 192))
      | (1ULL << (HqlsqlParser::T_RLIKE - 192))
      | (1ULL << (HqlsqlParser::T_ROLLBACK - 192))
      | (1ULL << (HqlsqlParser::T_ROW - 192))
      | (1ULL << (HqlsqlParser::T_ROWS - 192))
      | (1ULL << (HqlsqlParser::T_ROW_COUNT - 192))
      | (1ULL << (HqlsqlParser::T_RR - 192))
      | (1ULL << (HqlsqlParser::T_RS - 192))
      | (1ULL << (HqlsqlParser::T_PWD - 192))
      | (1ULL << (HqlsqlParser::T_TRIM - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (HqlsqlParser::T_SCHEMA - 256))
      | (1ULL << (HqlsqlParser::T_SECOND - 256))
      | (1ULL << (HqlsqlParser::T_SECONDS - 256))
      | (1ULL << (HqlsqlParser::T_SECURITY - 256))
      | (1ULL << (HqlsqlParser::T_SEGMENT - 256))
      | (1ULL << (HqlsqlParser::T_SELECT - 256))
      | (1ULL << (HqlsqlParser::T_SESSION - 256))
      | (1ULL << (HqlsqlParser::T_SESSIONS - 256))
      | (1ULL << (HqlsqlParser::T_SETS - 256))
      | (1ULL << (HqlsqlParser::T_SHARE - 256))
      | (1ULL << (HqlsqlParser::T_SIGNAL - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_DOUBLE - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_FLOAT - 256))
      | (1ULL << (HqlsqlParser::T_SMALLDATETIME - 256))
      | (1ULL << (HqlsqlParser::T_SMALLINT - 256))
      | (1ULL << (HqlsqlParser::T_SQL - 256))
      | (1ULL << (HqlsqlParser::T_SQLEXCEPTION - 256))
      | (1ULL << (HqlsqlParser::T_SQLINSERT - 256))
      | (1ULL << (HqlsqlParser::T_SQLSTATE - 256))
      | (1ULL << (HqlsqlParser::T_SQLWARNING - 256))
      | (1ULL << (HqlsqlParser::T_STATS - 256))
      | (1ULL << (HqlsqlParser::T_STATISTICS - 256))
      | (1ULL << (HqlsqlParser::T_STEP - 256))
      | (1ULL << (HqlsqlParser::T_STORAGE - 256))
      | (1ULL << (HqlsqlParser::T_STORED - 256))
      | (1ULL << (HqlsqlParser::T_STRING - 256))
      | (1ULL << (HqlsqlParser::T_SUBDIR - 256))
      | (1ULL << (HqlsqlParser::T_SUBSTRING - 256))
      | (1ULL << (HqlsqlParser::T_SUM - 256))
      | (1ULL << (HqlsqlParser::T_SUMMARY - 256))
      | (1ULL << (HqlsqlParser::T_SYS_REFCURSOR - 256))
      | (1ULL << (HqlsqlParser::T_TABLE - 256))
      | (1ULL << (HqlsqlParser::T_TABLESPACE - 256))
      | (1ULL << (HqlsqlParser::T_TEMPORARY - 256))
      | (1ULL << (HqlsqlParser::T_TERMINATED - 256))
      | (1ULL << (HqlsqlParser::T_TEXTIMAGE_ON - 256))
      | (1ULL << (HqlsqlParser::T_THEN - 256))
      | (1ULL << (HqlsqlParser::T_TIMESTAMP - 256))
      | (1ULL << (HqlsqlParser::T_TITLE - 256))
      | (1ULL << (HqlsqlParser::T_TO - 256))
      | (1ULL << (HqlsqlParser::T_TOP - 256))
      | (1ULL << (HqlsqlParser::T_TRANSACTION - 256))
      | (1ULL << (HqlsqlParser::T_TRUE - 256))
      | (1ULL << (HqlsqlParser::T_TRUNCATE - 256))
      | (1ULL << (HqlsqlParser::T_TYPE - 256))
      | (1ULL << (HqlsqlParser::T_UNIQUE - 256))
      | (1ULL << (HqlsqlParser::T_UPDATE - 256))
      | (1ULL << (HqlsqlParser::T_UR - 256))
      | (1ULL << (HqlsqlParser::T_USE - 256))
      | (1ULL << (HqlsqlParser::T_USING - 256))
      | (1ULL << (HqlsqlParser::T_VALUE - 256))
      | (1ULL << (HqlsqlParser::T_VALUES - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (HqlsqlParser::T_VAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR2 - 320))
      | (1ULL << (HqlsqlParser::T_VARYING - 320))
      | (1ULL << (HqlsqlParser::T_VOLATILE - 320))
      | (1ULL << (HqlsqlParser::T_WHILE - 320))
      | (1ULL << (HqlsqlParser::T_WITH - 320))
      | (1ULL << (HqlsqlParser::T_WITHOUT - 320))
      | (1ULL << (HqlsqlParser::T_WORK - 320))
      | (1ULL << (HqlsqlParser::T_XACT_ABORT - 320))
      | (1ULL << (HqlsqlParser::T_XML - 320))
      | (1ULL << (HqlsqlParser::T_YES - 320))
      | (1ULL << (HqlsqlParser::T_ARRAY - 320))
      | (1ULL << (HqlsqlParser::T_STRUCT - 320))
      | (1ULL << (HqlsqlParser::T_SERDE - 320))
      | (1ULL << (HqlsqlParser::T_SEQUENCEFILE - 320))
      | (1ULL << (HqlsqlParser::T_TEXTFILE - 320))
      | (1ULL << (HqlsqlParser::T_RCFILE - 320))
      | (1ULL << (HqlsqlParser::T_ORC - 320))
      | (1ULL << (HqlsqlParser::T_PARQUET - 320))
      | (1ULL << (HqlsqlParser::T_AVRO - 320))
      | (1ULL << (HqlsqlParser::T_JSONFILE - 320))
      | (1ULL << (HqlsqlParser::T_INPUTFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_FILEFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_T - 320))
      | (1ULL << (HqlsqlParser::T_S - 320))
      | (1ULL << (HqlsqlParser::T_ACTIVITY_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_CUME_DIST - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_DATE - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_TIMESTAMP - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_USER - 320))
      | (1ULL << (HqlsqlParser::T_DENSE_RANK - 320))
      | (1ULL << (HqlsqlParser::T_FIRST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LAG - 320))
      | (1ULL << (HqlsqlParser::T_LAST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LEAD - 320))
      | (1ULL << (HqlsqlParser::T_PART_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_PART_LOC - 320))
      | (1ULL << (HqlsqlParser::T_RANK - 320))
      | (1ULL << (HqlsqlParser::T_ROW_NUMBER - 320))
      | (1ULL << (HqlsqlParser::T_STDEV - 320))
      | (1ULL << (HqlsqlParser::T_STD - 320))
      | (1ULL << (HqlsqlParser::T_SYSDATE - 320))
      | (1ULL << (HqlsqlParser::T_VARIANCE - 320))
      | (1ULL << (HqlsqlParser::T_USER - 320))
      | (1ULL << (HqlsqlParser::T_PURGE - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 384)) & ((1ULL << (HqlsqlParser::T_BUCKETS - 384))
      | (1ULL << (HqlsqlParser::T_SKEWED - 384))
      | (1ULL << (HqlsqlParser::T_DIRECTORIES - 384))
      | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 384))
      | (1ULL << (HqlsqlParser::T_RENAME - 384))
      | (1ULL << (HqlsqlParser::T_SORTED - 384))
      | (1ULL << (HqlsqlParser::T_SORT - 384))
      | (1ULL << (HqlsqlParser::T_CHANGE - 384))
      | (1ULL << (HqlsqlParser::T_EXCHANGE - 384))
      | (1ULL << (HqlsqlParser::T_RECOVER - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONS - 384))
      | (1ULL << (HqlsqlParser::T_PROTECTION - 384))
      | (1ULL << (HqlsqlParser::T_ARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_UNARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_TOUCH - 384))
      | (1ULL << (HqlsqlParser::T_OFFLINE - 384))
      | (1ULL << (HqlsqlParser::T_NO_DROP - 384))
      | (1ULL << (HqlsqlParser::T_COMPACT - 384))
      | (1ULL << (HqlsqlParser::T_CONCATENATE - 384))
      | (1ULL << (HqlsqlParser::T_WAIT - 384))
      | (1ULL << (HqlsqlParser::T_COLUMNS - 384))
      | (1ULL << (HqlsqlParser::T_FIRST - 384))
      | (1ULL << (HqlsqlParser::T_LAST - 384))
      | (1ULL << (HqlsqlParser::T_NULLS - 384))
      | (1ULL << (HqlsqlParser::T_AFTER - 384))
      | (1ULL << (HqlsqlParser::T_MATERIALIZED - 384))
      | (1ULL << (HqlsqlParser::T_REWRITE - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONED - 384))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 384))
      | (1ULL << (HqlsqlParser::T_MACRO - 384))
      | (1ULL << (HqlsqlParser::T_SHOW - 384))
      | (1ULL << (HqlsqlParser::T_EXTENDED - 384))
      | (1ULL << (HqlsqlParser::T_FORMATTED - 384))
      | (1ULL << (HqlsqlParser::T_SEMI - 384))
      | (1ULL << (HqlsqlParser::T_CROSS - 384))
      | (1ULL << (HqlsqlParser::T_LATERAL - 384))
      | (1ULL << (HqlsqlParser::T_RELOAD - 384))
      | (1ULL << (HqlsqlParser::T_LOAD - 384))
      | (1ULL << (HqlsqlParser::T_INPATH - 384))
      | (1ULL << (HqlsqlParser::T_PRINCIPALS - 384))
      | (1ULL << (HqlsqlParser::T_COMPACTIONS - 384))
      | (1ULL << (HqlsqlParser::T_CONF - 384))
      | (1ULL << (HqlsqlParser::T_ADMIN - 384))
      | (1ULL << (HqlsqlParser::T_OPTION - 384))
      | (1ULL << (HqlsqlParser::T_PRIVILEGES - 384))
      | (1ULL << (HqlsqlParser::T_LOCK - 384))
      | (1ULL << (HqlsqlParser::T_SHOW_DATABASE - 384))
      | (1ULL << (HqlsqlParser::T_COMPUTE - 384))
      | (1ULL << (HqlsqlParser::T_CACHE - 384))
      | (1ULL << (HqlsqlParser::T_METADATA - 384))
      | (1ULL << (HqlsqlParser::T_NOSCAN - 384))
      | (1ULL << (HqlsqlParser::T_UNIONTYPE - 384))
      | (1ULL << (HqlsqlParser::T_ANALYZE - 384))
      | (1ULL << (HqlsqlParser::T_EXPLAIN - 384))
      | (1ULL << (HqlsqlParser::T_CBO - 384))
      | (1ULL << (HqlsqlParser::T_AST - 384))
      | (1ULL << (HqlsqlParser::T_DEPENDENCY - 384))
      | (1ULL << (HqlsqlParser::T_AUTHORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_VECTORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_COST - 384))
      | (1ULL << (HqlsqlParser::T_JOINCOST - 384))
      | (1ULL << (HqlsqlParser::T_OPERATOR - 384))
      | (1ULL << (HqlsqlParser::T_EXPRESSION - 384))
      | (1ULL << (HqlsqlParser::T_DETAIL - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 448)) & ((1ULL << (HqlsqlParser::T_UNBOUNDED - 448))
      | (1ULL << (HqlsqlParser::T_PRECEDING - 448))
      | (1ULL << (HqlsqlParser::T_FOLLOWING - 448))
      | (1ULL << (HqlsqlParser::T_RANGE - 448))
      | (1ULL << (HqlsqlParser::T_YEAR - 448))
      | (1ULL << (HqlsqlParser::T_MONTH - 448))
      | (1ULL << (HqlsqlParser::T_MINUTE - 448))
      | (1ULL << (HqlsqlParser::T_TIME - 448))
      | (1ULL << (HqlsqlParser::T_ZONE - 448))
      | (1ULL << (HqlsqlParser::T_SUB - 448))
      | (1ULL << (HqlsqlParser::L_ID - 448)))) != 0)) {
      setState(2539);
      package_body_item();
      setState(2540);
      match(HqlsqlParser::T_SEMICOLON);
      setState(2546);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_body_itemContext ------------------------------------------------------------------

HqlsqlParser::Package_body_itemContext::Package_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Declare_stmt_itemContext* HqlsqlParser::Package_body_itemContext::declare_stmt_item() {
  return getRuleContext<HqlsqlParser::Declare_stmt_itemContext>(0);
}

HqlsqlParser::Create_function_stmtContext* HqlsqlParser::Package_body_itemContext::create_function_stmt() {
  return getRuleContext<HqlsqlParser::Create_function_stmtContext>(0);
}

HqlsqlParser::Create_procedure_stmtContext* HqlsqlParser::Package_body_itemContext::create_procedure_stmt() {
  return getRuleContext<HqlsqlParser::Create_procedure_stmtContext>(0);
}


size_t HqlsqlParser::Package_body_itemContext::getRuleIndex() const {
  return HqlsqlParser::RulePackage_body_item;
}

void HqlsqlParser::Package_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body_item(this);
}

void HqlsqlParser::Package_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body_item(this);
}


antlrcpp::Any HqlsqlParser::Package_body_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_body_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Package_body_itemContext* HqlsqlParser::package_body_item() {
  Package_body_itemContext *_localctx = _tracker.createInstance<Package_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 296, HqlsqlParser::RulePackage_body_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2550);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2547);
      declare_stmt_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2548);
      create_function_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2549);
      create_procedure_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_procedure_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_procedure_stmtContext::Create_procedure_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Create_procedure_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_procedure_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

HqlsqlParser::Proc_blockContext* HqlsqlParser::Create_procedure_stmtContext::proc_block() {
  return getRuleContext<HqlsqlParser::Proc_blockContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_PROCEDURE() {
  return getToken(HqlsqlParser::T_PROCEDURE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_PROC() {
  return getToken(HqlsqlParser::T_PROC, 0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_REPLACE() {
  return getToken(HqlsqlParser::T_REPLACE, 0);
}

HqlsqlParser::Create_routine_paramsContext* HqlsqlParser::Create_procedure_stmtContext::create_routine_params() {
  return getRuleContext<HqlsqlParser::Create_routine_paramsContext>(0);
}

HqlsqlParser::Create_routine_optionsContext* HqlsqlParser::Create_procedure_stmtContext::create_routine_options() {
  return getRuleContext<HqlsqlParser::Create_routine_optionsContext>(0);
}

HqlsqlParser::Declare_block_inplaceContext* HqlsqlParser::Create_procedure_stmtContext::declare_block_inplace() {
  return getRuleContext<HqlsqlParser::Declare_block_inplaceContext>(0);
}

HqlsqlParser::LabelContext* HqlsqlParser::Create_procedure_stmtContext::label() {
  return getRuleContext<HqlsqlParser::LabelContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_SEMICOLON() {
  return getToken(HqlsqlParser::T_SEMICOLON, 0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::Create_procedure_stmtContext::T_OR() {
  return getToken(HqlsqlParser::T_OR, 0);
}


size_t HqlsqlParser::Create_procedure_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_procedure_stmt;
}

void HqlsqlParser::Create_procedure_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_procedure_stmt(this);
}

void HqlsqlParser::Create_procedure_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_procedure_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_procedure_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_procedure_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_procedure_stmtContext* HqlsqlParser::create_procedure_stmt() {
  Create_procedure_stmtContext *_localctx = _tracker.createInstance<Create_procedure_stmtContext>(_ctx, getState());
  enterRule(_localctx, 298, HqlsqlParser::RuleCreate_procedure_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2559);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ALTER: {
        setState(2552);
        match(HqlsqlParser::T_ALTER);
        break;
      }

      case HqlsqlParser::T_CREATE: {
        setState(2553);
        match(HqlsqlParser::T_CREATE);
        setState(2556);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_OR) {
          setState(2554);
          match(HqlsqlParser::T_OR);
          setState(2555);
          match(HqlsqlParser::T_REPLACE);
        }
        break;
      }

      case HqlsqlParser::T_REPLACE: {
        setState(2558);
        match(HqlsqlParser::T_REPLACE);
        break;
      }

      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE: {
        break;
      }

    default:
      break;
    }
    setState(2561);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_PROC

    || _la == HqlsqlParser::T_PROCEDURE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2562);
    ident();
    setState(2564);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
    case 1: {
      setState(2563);
      create_routine_params();
      break;
    }

    }
    setState(2567);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx)) {
    case 1: {
      setState(2566);
      create_routine_options();
      break;
    }

    }
    setState(2570);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      setState(2569);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_AS || _la == HqlsqlParser::T_IS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(2573);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
    case 1: {
      setState(2572);
      declare_block_inplace();
      break;
    }

    }
    setState(2576);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
    case 1: {
      setState(2575);
      label();
      break;
    }

    }
    setState(2578);
    proc_block();
    setState(2582);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(2579);
      ident();
      setState(2580);
      match(HqlsqlParser::T_SEMICOLON);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_routine_paramsContext ------------------------------------------------------------------

HqlsqlParser::Create_routine_paramsContext::Create_routine_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_routine_paramsContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_paramsContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<HqlsqlParser::Create_routine_param_itemContext *> HqlsqlParser::Create_routine_paramsContext::create_routine_param_item() {
  return getRuleContexts<HqlsqlParser::Create_routine_param_itemContext>();
}

HqlsqlParser::Create_routine_param_itemContext* HqlsqlParser::Create_routine_paramsContext::create_routine_param_item(size_t i) {
  return getRuleContext<HqlsqlParser::Create_routine_param_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_routine_paramsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Create_routine_paramsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Create_routine_paramsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_routine_params;
}

void HqlsqlParser::Create_routine_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_routine_params(this);
}

void HqlsqlParser::Create_routine_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_routine_params(this);
}


antlrcpp::Any HqlsqlParser::Create_routine_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_routine_params(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_routine_paramsContext* HqlsqlParser::create_routine_params() {
  Create_routine_paramsContext *_localctx = _tracker.createInstance<Create_routine_paramsContext>(_ctx, getState());
  enterRule(_localctx, 300, HqlsqlParser::RuleCreate_routine_params);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2605);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2584);
      match(HqlsqlParser::T_OPEN_P);
      setState(2585);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2586);
      match(HqlsqlParser::T_OPEN_P);
      setState(2587);
      create_routine_param_item();
      setState(2592);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(2588);
        match(HqlsqlParser::T_COMMA);
        setState(2589);
        create_routine_param_item();
        setState(2594);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2595);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2597);
      create_routine_param_item();
      setState(2602);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(2598);
        match(HqlsqlParser::T_COMMA);
        setState(2599);
        create_routine_param_item();
        setState(2604);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_routine_param_itemContext ------------------------------------------------------------------

HqlsqlParser::Create_routine_param_itemContext::Create_routine_param_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_routine_param_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Create_routine_param_itemContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_param_itemContext::T_IN() {
  return getToken(HqlsqlParser::T_IN, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_param_itemContext::T_OUT() {
  return getToken(HqlsqlParser::T_OUT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_param_itemContext::T_INOUT() {
  return getToken(HqlsqlParser::T_INOUT, 0);
}

std::vector<HqlsqlParser::Dtype_attrContext *> HqlsqlParser::Create_routine_param_itemContext::dtype_attr() {
  return getRuleContexts<HqlsqlParser::Dtype_attrContext>();
}

HqlsqlParser::Dtype_attrContext* HqlsqlParser::Create_routine_param_itemContext::dtype_attr(size_t i) {
  return getRuleContext<HqlsqlParser::Dtype_attrContext>(i);
}

HqlsqlParser::Dtype_defaultContext* HqlsqlParser::Create_routine_param_itemContext::dtype_default() {
  return getRuleContext<HqlsqlParser::Dtype_defaultContext>(0);
}


size_t HqlsqlParser::Create_routine_param_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_routine_param_item;
}

void HqlsqlParser::Create_routine_param_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_routine_param_item(this);
}

void HqlsqlParser::Create_routine_param_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_routine_param_item(this);
}


antlrcpp::Any HqlsqlParser::Create_routine_param_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_routine_param_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_routine_param_itemContext* HqlsqlParser::create_routine_param_item() {
  Create_routine_param_itemContext *_localctx = _tracker.createInstance<Create_routine_param_itemContext>(_ctx, getState());
  enterRule(_localctx, 302, HqlsqlParser::RuleCreate_routine_param_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(2643);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2612);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
      case 1: {
        setState(2607);
        match(HqlsqlParser::T_IN);
        break;
      }

      case 2: {
        setState(2608);
        match(HqlsqlParser::T_OUT);
        break;
      }

      case 3: {
        setState(2609);
        match(HqlsqlParser::T_INOUT);
        break;
      }

      case 4: {
        setState(2610);
        match(HqlsqlParser::T_IN);
        setState(2611);
        match(HqlsqlParser::T_OUT);
        break;
      }

      }
      setState(2614);
      ident();
      setState(2615);
      dtype();
      setState(2619);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2616);
          dtype_attr(); 
        }
        setState(2621);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx);
      }
      setState(2623);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
      case 1: {
        setState(2622);
        dtype_default();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2625);
      ident();
      setState(2631);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
      case 1: {
        setState(2626);
        match(HqlsqlParser::T_IN);
        break;
      }

      case 2: {
        setState(2627);
        match(HqlsqlParser::T_OUT);
        break;
      }

      case 3: {
        setState(2628);
        match(HqlsqlParser::T_INOUT);
        break;
      }

      case 4: {
        setState(2629);
        match(HqlsqlParser::T_IN);
        setState(2630);
        match(HqlsqlParser::T_OUT);
        break;
      }

      }
      setState(2633);
      dtype();
      setState(2637);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2634);
          dtype_attr(); 
        }
        setState(2639);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
      }
      setState(2641);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
      case 1: {
        setState(2640);
        dtype_default();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_routine_optionsContext ------------------------------------------------------------------

HqlsqlParser::Create_routine_optionsContext::Create_routine_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Create_routine_optionContext *> HqlsqlParser::Create_routine_optionsContext::create_routine_option() {
  return getRuleContexts<HqlsqlParser::Create_routine_optionContext>();
}

HqlsqlParser::Create_routine_optionContext* HqlsqlParser::Create_routine_optionsContext::create_routine_option(size_t i) {
  return getRuleContext<HqlsqlParser::Create_routine_optionContext>(i);
}


size_t HqlsqlParser::Create_routine_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_routine_options;
}

void HqlsqlParser::Create_routine_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_routine_options(this);
}

void HqlsqlParser::Create_routine_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_routine_options(this);
}


antlrcpp::Any HqlsqlParser::Create_routine_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_routine_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_routine_optionsContext* HqlsqlParser::create_routine_options() {
  Create_routine_optionsContext *_localctx = _tracker.createInstance<Create_routine_optionsContext>(_ctx, getState());
  enterRule(_localctx, 304, HqlsqlParser::RuleCreate_routine_options);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2646); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2645);
              create_routine_option();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2648); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_routine_optionContext ------------------------------------------------------------------

HqlsqlParser::Create_routine_optionContext::Create_routine_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_LANGUAGE() {
  return getToken(HqlsqlParser::T_LANGUAGE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_SQL() {
  return getToken(HqlsqlParser::T_SQL, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_SECURITY() {
  return getToken(HqlsqlParser::T_SECURITY, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_CREATOR() {
  return getToken(HqlsqlParser::T_CREATOR, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_DEFINER() {
  return getToken(HqlsqlParser::T_DEFINER, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_INVOKER() {
  return getToken(HqlsqlParser::T_INVOKER, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_OWNER() {
  return getToken(HqlsqlParser::T_OWNER, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_RESULT() {
  return getToken(HqlsqlParser::T_RESULT, 0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_SETS() {
  return getToken(HqlsqlParser::T_SETS, 0);
}

HqlsqlParser::Int_numberContext* HqlsqlParser::Create_routine_optionContext::int_number() {
  return getRuleContext<HqlsqlParser::Int_numberContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_routine_optionContext::T_DYNAMIC() {
  return getToken(HqlsqlParser::T_DYNAMIC, 0);
}


size_t HqlsqlParser::Create_routine_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_routine_option;
}

void HqlsqlParser::Create_routine_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_routine_option(this);
}

void HqlsqlParser::Create_routine_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_routine_option(this);
}


antlrcpp::Any HqlsqlParser::Create_routine_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_routine_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_routine_optionContext* HqlsqlParser::create_routine_option() {
  Create_routine_optionContext *_localctx = _tracker.createInstance<Create_routine_optionContext>(_ctx, getState());
  enterRule(_localctx, 306, HqlsqlParser::RuleCreate_routine_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2661);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_LANGUAGE: {
        enterOuterAlt(_localctx, 1);
        setState(2650);
        match(HqlsqlParser::T_LANGUAGE);
        setState(2651);
        match(HqlsqlParser::T_SQL);
        break;
      }

      case HqlsqlParser::T_SQL: {
        enterOuterAlt(_localctx, 2);
        setState(2652);
        match(HqlsqlParser::T_SQL);
        setState(2653);
        match(HqlsqlParser::T_SECURITY);
        setState(2654);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_CREATOR

        || _la == HqlsqlParser::T_DEFINER || _la == HqlsqlParser::T_INVOKER

        || _la == HqlsqlParser::T_OWNER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_RESULT: {
        enterOuterAlt(_localctx, 3);
        setState(2656);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_DYNAMIC) {
          setState(2655);
          match(HqlsqlParser::T_DYNAMIC);
        }
        setState(2658);
        match(HqlsqlParser::T_RESULT);
        setState(2659);
        match(HqlsqlParser::T_SETS);
        setState(2660);
        int_number();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_stmtContext ------------------------------------------------------------------

HqlsqlParser::Drop_stmtContext::Drop_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HqlsqlParser::Drop_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleDrop_stmt;
}

void HqlsqlParser::Drop_stmtContext::copyFrom(Drop_stmtContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Drop_table_view_role_index_stmtContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_DROP() {
  return getToken(HqlsqlParser::T_DROP, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Drop_table_view_role_index_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_VIEW() {
  return getToken(HqlsqlParser::T_VIEW, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_INDEX() {
  return getToken(HqlsqlParser::T_INDEX, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_ROLE() {
  return getToken(HqlsqlParser::T_ROLE, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_MATERIALIZED() {
  return getToken(HqlsqlParser::T_MATERIALIZED, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_table_view_role_index_stmtContext::T_PURGE() {
  return getToken(HqlsqlParser::T_PURGE, 0);
}

HqlsqlParser::Drop_table_view_role_index_stmtContext::Drop_table_view_role_index_stmtContext(Drop_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Drop_table_view_role_index_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_table_view_role_index_stmt(this);
}
void HqlsqlParser::Drop_table_view_role_index_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_table_view_role_index_stmt(this);
}

antlrcpp::Any HqlsqlParser::Drop_table_view_role_index_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDrop_table_view_role_index_stmt(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Drop_db_schema_stmtContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Drop_db_schema_stmtContext::T_DROP() {
  return getToken(HqlsqlParser::T_DROP, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Drop_db_schema_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Drop_db_schema_stmtContext::T_DATABASE() {
  return getToken(HqlsqlParser::T_DATABASE, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_db_schema_stmtContext::T_SCHEMA() {
  return getToken(HqlsqlParser::T_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_db_schema_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_db_schema_stmtContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_db_schema_stmtContext::T_RESTRICT() {
  return getToken(HqlsqlParser::T_RESTRICT, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_db_schema_stmtContext::T_CASCADE() {
  return getToken(HqlsqlParser::T_CASCADE, 0);
}

HqlsqlParser::Drop_db_schema_stmtContext::Drop_db_schema_stmtContext(Drop_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Drop_db_schema_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_db_schema_stmt(this);
}
void HqlsqlParser::Drop_db_schema_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_db_schema_stmt(this);
}

antlrcpp::Any HqlsqlParser::Drop_db_schema_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDrop_db_schema_stmt(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Drop_macro_func_stmtContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Drop_macro_func_stmtContext::T_DROP() {
  return getToken(HqlsqlParser::T_DROP, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Drop_macro_func_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Drop_macro_func_stmtContext::T_MACRO() {
  return getToken(HqlsqlParser::T_MACRO, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_macro_func_stmtContext::T_FUNCTION() {
  return getToken(HqlsqlParser::T_FUNCTION, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_macro_func_stmtContext::T_TEMPORARY() {
  return getToken(HqlsqlParser::T_TEMPORARY, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_macro_func_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Drop_macro_func_stmtContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

HqlsqlParser::Drop_macro_func_stmtContext::Drop_macro_func_stmtContext(Drop_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Drop_macro_func_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_macro_func_stmt(this);
}
void HqlsqlParser::Drop_macro_func_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_macro_func_stmt(this);
}

antlrcpp::Any HqlsqlParser::Drop_macro_func_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDrop_macro_func_stmt(this);
  else
    return visitor->visitChildren(this);
}
HqlsqlParser::Drop_stmtContext* HqlsqlParser::drop_stmt() {
  Drop_stmtContext *_localctx = _tracker.createInstance<Drop_stmtContext>(_ctx, getState());
  enterRule(_localctx, 308, HqlsqlParser::RuleDrop_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2696);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Drop_stmtContext *>(_tracker.createInstance<HqlsqlParser::Drop_table_view_role_index_stmtContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2663);
      match(HqlsqlParser::T_DROP);
      setState(2665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_MATERIALIZED) {
        setState(2664);
        match(HqlsqlParser::T_MATERIALIZED);
      }
      setState(2667);
      dynamic_cast<Drop_table_view_role_index_stmtContext *>(_localctx)->tk = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ROLE

      || _la == HqlsqlParser::T_INDEX || _la == HqlsqlParser::T_TABLE

      || _la == HqlsqlParser::T_VIEW)) {
        dynamic_cast<Drop_table_view_role_index_stmtContext *>(_localctx)->tk = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2670);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
      case 1: {
        setState(2668);
        match(HqlsqlParser::T_IF);
        setState(2669);
        match(HqlsqlParser::T_EXISTS);
        break;
      }

      }
      setState(2672);
      ident();
      setState(2674);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
      case 1: {
        setState(2673);
        match(HqlsqlParser::T_PURGE);
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Drop_stmtContext *>(_tracker.createInstance<HqlsqlParser::Drop_db_schema_stmtContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2676);
      match(HqlsqlParser::T_DROP);
      setState(2677);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_DATABASE || _la == HqlsqlParser::T_SCHEMA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2680);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx)) {
      case 1: {
        setState(2678);
        match(HqlsqlParser::T_IF);
        setState(2679);
        match(HqlsqlParser::T_EXISTS);
        break;
      }

      }
      setState(2682);
      ident();
      setState(2684);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
      case 1: {
        setState(2683);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_CASCADE || _la == HqlsqlParser::T_RESTRICT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Drop_stmtContext *>(_tracker.createInstance<HqlsqlParser::Drop_macro_func_stmtContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2686);
      match(HqlsqlParser::T_DROP);
      setState(2688);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_TEMPORARY) {
        setState(2687);
        match(HqlsqlParser::T_TEMPORARY);
      }
      setState(2690);
      dynamic_cast<Drop_macro_func_stmtContext *>(_localctx)->tk = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_FUNCTION || _la == HqlsqlParser::T_MACRO)) {
        dynamic_cast<Drop_macro_func_stmtContext *>(_localctx)->tk = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2693);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx)) {
      case 1: {
        setState(2691);
        match(HqlsqlParser::T_IF);
        setState(2692);
        match(HqlsqlParser::T_EXISTS);
        break;
      }

      }
      setState(2695);
      ident();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- End_transaction_stmtContext ------------------------------------------------------------------

HqlsqlParser::End_transaction_stmtContext::End_transaction_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::End_transaction_stmtContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

tree::TerminalNode* HqlsqlParser::End_transaction_stmtContext::T_TRANSACTION() {
  return getToken(HqlsqlParser::T_TRANSACTION, 0);
}


size_t HqlsqlParser::End_transaction_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleEnd_transaction_stmt;
}

void HqlsqlParser::End_transaction_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnd_transaction_stmt(this);
}

void HqlsqlParser::End_transaction_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnd_transaction_stmt(this);
}


antlrcpp::Any HqlsqlParser::End_transaction_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitEnd_transaction_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::End_transaction_stmtContext* HqlsqlParser::end_transaction_stmt() {
  End_transaction_stmtContext *_localctx = _tracker.createInstance<End_transaction_stmtContext>(_ctx, getState());
  enterRule(_localctx, 310, HqlsqlParser::RuleEnd_transaction_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2698);
    match(HqlsqlParser::T_END);
    setState(2699);
    match(HqlsqlParser::T_TRANSACTION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exec_stmtContext ------------------------------------------------------------------

HqlsqlParser::Exec_stmtContext::Exec_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::ExprContext* HqlsqlParser::Exec_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::T_EXEC() {
  return getToken(HqlsqlParser::T_EXEC, 0);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::T_EXECUTE() {
  return getToken(HqlsqlParser::T_EXECUTE, 0);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::T_IMMEDIATE() {
  return getToken(HqlsqlParser::T_IMMEDIATE, 0);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Expr_func_paramsContext* HqlsqlParser::Exec_stmtContext::expr_func_params() {
  return getRuleContext<HqlsqlParser::Expr_func_paramsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Exec_stmtContext::L_ID() {
  return getTokens(HqlsqlParser::L_ID);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::L_ID(size_t i) {
  return getToken(HqlsqlParser::L_ID, i);
}

HqlsqlParser::Using_clauseContext* HqlsqlParser::Exec_stmtContext::using_clause() {
  return getRuleContext<HqlsqlParser::Using_clauseContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Exec_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Exec_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Exec_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleExec_stmt;
}

void HqlsqlParser::Exec_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExec_stmt(this);
}

void HqlsqlParser::Exec_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExec_stmt(this);
}


antlrcpp::Any HqlsqlParser::Exec_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExec_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Exec_stmtContext* HqlsqlParser::exec_stmt() {
  Exec_stmtContext *_localctx = _tracker.createInstance<Exec_stmtContext>(_ctx, getState());
  enterRule(_localctx, 312, HqlsqlParser::RuleExec_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2701);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_EXEC

    || _la == HqlsqlParser::T_EXECUTE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2703);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
    case 1: {
      setState(2702);
      match(HqlsqlParser::T_IMMEDIATE);
      break;
    }

    }
    setState(2705);
    expr(0);
    setState(2711);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
    case 1: {
      setState(2706);
      match(HqlsqlParser::T_OPEN_P);
      setState(2707);
      expr_func_params();
      setState(2708);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 2: {
      setState(2710);
      expr_func_params();
      break;
    }

    }
    setState(2722);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
    case 1: {
      setState(2713);
      match(HqlsqlParser::T_INTO);
      setState(2714);
      match(HqlsqlParser::L_ID);
      setState(2719);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2715);
          match(HqlsqlParser::T_COMMA);
          setState(2716);
          match(HqlsqlParser::L_ID); 
        }
        setState(2721);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
      }
      break;
    }

    }
    setState(2725);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(2724);
      using_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_stmtContext ------------------------------------------------------------------

HqlsqlParser::If_stmtContext::If_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::If_plsql_stmtContext* HqlsqlParser::If_stmtContext::if_plsql_stmt() {
  return getRuleContext<HqlsqlParser::If_plsql_stmtContext>(0);
}

HqlsqlParser::If_tsql_stmtContext* HqlsqlParser::If_stmtContext::if_tsql_stmt() {
  return getRuleContext<HqlsqlParser::If_tsql_stmtContext>(0);
}

HqlsqlParser::If_bteq_stmtContext* HqlsqlParser::If_stmtContext::if_bteq_stmt() {
  return getRuleContext<HqlsqlParser::If_bteq_stmtContext>(0);
}


size_t HqlsqlParser::If_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleIf_stmt;
}

void HqlsqlParser::If_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_stmt(this);
}

void HqlsqlParser::If_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_stmt(this);
}


antlrcpp::Any HqlsqlParser::If_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitIf_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::If_stmtContext* HqlsqlParser::if_stmt() {
  If_stmtContext *_localctx = _tracker.createInstance<If_stmtContext>(_ctx, getState());
  enterRule(_localctx, 314, HqlsqlParser::RuleIf_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2730);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2727);
      if_plsql_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2728);
      if_tsql_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2729);
      if_bteq_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_plsql_stmtContext ------------------------------------------------------------------

HqlsqlParser::If_plsql_stmtContext::If_plsql_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::If_plsql_stmtContext::T_IF() {
  return getTokens(HqlsqlParser::T_IF);
}

tree::TerminalNode* HqlsqlParser::If_plsql_stmtContext::T_IF(size_t i) {
  return getToken(HqlsqlParser::T_IF, i);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::If_plsql_stmtContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

tree::TerminalNode* HqlsqlParser::If_plsql_stmtContext::T_THEN() {
  return getToken(HqlsqlParser::T_THEN, 0);
}

HqlsqlParser::BlockContext* HqlsqlParser::If_plsql_stmtContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

tree::TerminalNode* HqlsqlParser::If_plsql_stmtContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

std::vector<HqlsqlParser::Elseif_blockContext *> HqlsqlParser::If_plsql_stmtContext::elseif_block() {
  return getRuleContexts<HqlsqlParser::Elseif_blockContext>();
}

HqlsqlParser::Elseif_blockContext* HqlsqlParser::If_plsql_stmtContext::elseif_block(size_t i) {
  return getRuleContext<HqlsqlParser::Elseif_blockContext>(i);
}

HqlsqlParser::Else_blockContext* HqlsqlParser::If_plsql_stmtContext::else_block() {
  return getRuleContext<HqlsqlParser::Else_blockContext>(0);
}


size_t HqlsqlParser::If_plsql_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleIf_plsql_stmt;
}

void HqlsqlParser::If_plsql_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_plsql_stmt(this);
}

void HqlsqlParser::If_plsql_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_plsql_stmt(this);
}


antlrcpp::Any HqlsqlParser::If_plsql_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitIf_plsql_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::If_plsql_stmtContext* HqlsqlParser::if_plsql_stmt() {
  If_plsql_stmtContext *_localctx = _tracker.createInstance<If_plsql_stmtContext>(_ctx, getState());
  enterRule(_localctx, 316, HqlsqlParser::RuleIf_plsql_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2732);
    match(HqlsqlParser::T_IF);
    setState(2733);
    bool_expr(0);
    setState(2734);
    match(HqlsqlParser::T_THEN);
    setState(2735);
    block();
    setState(2739);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_ELSEIF

    || _la == HqlsqlParser::T_ELSIF) {
      setState(2736);
      elseif_block();
      setState(2741);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2743);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ELSE) {
      setState(2742);
      else_block();
    }
    setState(2745);
    match(HqlsqlParser::T_END);
    setState(2746);
    match(HqlsqlParser::T_IF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_tsql_stmtContext ------------------------------------------------------------------

HqlsqlParser::If_tsql_stmtContext::If_tsql_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::If_tsql_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::If_tsql_stmtContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

std::vector<HqlsqlParser::Single_block_stmtContext *> HqlsqlParser::If_tsql_stmtContext::single_block_stmt() {
  return getRuleContexts<HqlsqlParser::Single_block_stmtContext>();
}

HqlsqlParser::Single_block_stmtContext* HqlsqlParser::If_tsql_stmtContext::single_block_stmt(size_t i) {
  return getRuleContext<HqlsqlParser::Single_block_stmtContext>(i);
}

tree::TerminalNode* HqlsqlParser::If_tsql_stmtContext::T_ELSE() {
  return getToken(HqlsqlParser::T_ELSE, 0);
}


size_t HqlsqlParser::If_tsql_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleIf_tsql_stmt;
}

void HqlsqlParser::If_tsql_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_tsql_stmt(this);
}

void HqlsqlParser::If_tsql_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_tsql_stmt(this);
}


antlrcpp::Any HqlsqlParser::If_tsql_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitIf_tsql_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::If_tsql_stmtContext* HqlsqlParser::if_tsql_stmt() {
  If_tsql_stmtContext *_localctx = _tracker.createInstance<If_tsql_stmtContext>(_ctx, getState());
  enterRule(_localctx, 318, HqlsqlParser::RuleIf_tsql_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2748);
    match(HqlsqlParser::T_IF);
    setState(2749);
    bool_expr(0);
    setState(2750);
    single_block_stmt();
    setState(2753);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
    case 1: {
      setState(2751);
      match(HqlsqlParser::T_ELSE);
      setState(2752);
      single_block_stmt();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_bteq_stmtContext ------------------------------------------------------------------

HqlsqlParser::If_bteq_stmtContext::If_bteq_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::If_bteq_stmtContext::T_PERIOD() {
  return getToken(HqlsqlParser::T_PERIOD, 0);
}

tree::TerminalNode* HqlsqlParser::If_bteq_stmtContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::If_bteq_stmtContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

tree::TerminalNode* HqlsqlParser::If_bteq_stmtContext::T_THEN() {
  return getToken(HqlsqlParser::T_THEN, 0);
}

HqlsqlParser::Single_block_stmtContext* HqlsqlParser::If_bteq_stmtContext::single_block_stmt() {
  return getRuleContext<HqlsqlParser::Single_block_stmtContext>(0);
}


size_t HqlsqlParser::If_bteq_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleIf_bteq_stmt;
}

void HqlsqlParser::If_bteq_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_bteq_stmt(this);
}

void HqlsqlParser::If_bteq_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_bteq_stmt(this);
}


antlrcpp::Any HqlsqlParser::If_bteq_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitIf_bteq_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::If_bteq_stmtContext* HqlsqlParser::if_bteq_stmt() {
  If_bteq_stmtContext *_localctx = _tracker.createInstance<If_bteq_stmtContext>(_ctx, getState());
  enterRule(_localctx, 320, HqlsqlParser::RuleIf_bteq_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2755);
    match(HqlsqlParser::T_PERIOD);
    setState(2756);
    match(HqlsqlParser::T_IF);
    setState(2757);
    bool_expr(0);
    setState(2758);
    match(HqlsqlParser::T_THEN);
    setState(2759);
    single_block_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elseif_blockContext ------------------------------------------------------------------

HqlsqlParser::Elseif_blockContext::Elseif_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Elseif_blockContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Elseif_blockContext::T_THEN() {
  return getToken(HqlsqlParser::T_THEN, 0);
}

HqlsqlParser::BlockContext* HqlsqlParser::Elseif_blockContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

tree::TerminalNode* HqlsqlParser::Elseif_blockContext::T_ELSIF() {
  return getToken(HqlsqlParser::T_ELSIF, 0);
}

tree::TerminalNode* HqlsqlParser::Elseif_blockContext::T_ELSEIF() {
  return getToken(HqlsqlParser::T_ELSEIF, 0);
}


size_t HqlsqlParser::Elseif_blockContext::getRuleIndex() const {
  return HqlsqlParser::RuleElseif_block;
}

void HqlsqlParser::Elseif_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElseif_block(this);
}

void HqlsqlParser::Elseif_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElseif_block(this);
}


antlrcpp::Any HqlsqlParser::Elseif_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitElseif_block(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Elseif_blockContext* HqlsqlParser::elseif_block() {
  Elseif_blockContext *_localctx = _tracker.createInstance<Elseif_blockContext>(_ctx, getState());
  enterRule(_localctx, 322, HqlsqlParser::RuleElseif_block);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2761);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ELSEIF

    || _la == HqlsqlParser::T_ELSIF)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2762);
    bool_expr(0);
    setState(2763);
    match(HqlsqlParser::T_THEN);
    setState(2764);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Else_blockContext ------------------------------------------------------------------

HqlsqlParser::Else_blockContext::Else_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Else_blockContext::T_ELSE() {
  return getToken(HqlsqlParser::T_ELSE, 0);
}

HqlsqlParser::BlockContext* HqlsqlParser::Else_blockContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}


size_t HqlsqlParser::Else_blockContext::getRuleIndex() const {
  return HqlsqlParser::RuleElse_block;
}

void HqlsqlParser::Else_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElse_block(this);
}

void HqlsqlParser::Else_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElse_block(this);
}


antlrcpp::Any HqlsqlParser::Else_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitElse_block(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Else_blockContext* HqlsqlParser::else_block() {
  Else_blockContext *_localctx = _tracker.createInstance<Else_blockContext>(_ctx, getState());
  enterRule(_localctx, 324, HqlsqlParser::RuleElse_block);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2766);
    match(HqlsqlParser::T_ELSE);
    setState(2767);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Include_stmtContext ------------------------------------------------------------------

HqlsqlParser::Include_stmtContext::Include_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Include_stmtContext::T_INCLUDE() {
  return getToken(HqlsqlParser::T_INCLUDE, 0);
}

HqlsqlParser::File_nameContext* HqlsqlParser::Include_stmtContext::file_name() {
  return getRuleContext<HqlsqlParser::File_nameContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Include_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Include_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleInclude_stmt;
}

void HqlsqlParser::Include_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclude_stmt(this);
}

void HqlsqlParser::Include_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclude_stmt(this);
}


antlrcpp::Any HqlsqlParser::Include_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInclude_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Include_stmtContext* HqlsqlParser::include_stmt() {
  Include_stmtContext *_localctx = _tracker.createInstance<Include_stmtContext>(_ctx, getState());
  enterRule(_localctx, 326, HqlsqlParser::RuleInclude_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2769);
    match(HqlsqlParser::T_INCLUDE);
    setState(2772);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      setState(2770);
      file_name();
      break;
    }

    case 2: {
      setState(2771);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Load_file_stmtContext ------------------------------------------------------------------

HqlsqlParser::Load_file_stmtContext::Load_file_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_LOAD() {
  return getToken(HqlsqlParser::T_LOAD, 0);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_DATA() {
  return getToken(HqlsqlParser::T_DATA, 0);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_INPATH() {
  return getToken(HqlsqlParser::T_INPATH, 0);
}

HqlsqlParser::StringContext* HqlsqlParser::Load_file_stmtContext::string() {
  return getRuleContext<HqlsqlParser::StringContext>(0);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Load_file_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_LOCAL() {
  return getToken(HqlsqlParser::T_LOCAL, 0);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_OVERWRITE() {
  return getToken(HqlsqlParser::T_OVERWRITE, 0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Load_file_stmtContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_INPUTFORMAT() {
  return getToken(HqlsqlParser::T_INPUTFORMAT, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Load_file_stmtContext::L_S_STRING() {
  return getTokens(HqlsqlParser::L_S_STRING);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::L_S_STRING(size_t i) {
  return getToken(HqlsqlParser::L_S_STRING, i);
}

tree::TerminalNode* HqlsqlParser::Load_file_stmtContext::T_SERDE() {
  return getToken(HqlsqlParser::T_SERDE, 0);
}


size_t HqlsqlParser::Load_file_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleLoad_file_stmt;
}

void HqlsqlParser::Load_file_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoad_file_stmt(this);
}

void HqlsqlParser::Load_file_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoad_file_stmt(this);
}


antlrcpp::Any HqlsqlParser::Load_file_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitLoad_file_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Load_file_stmtContext* HqlsqlParser::load_file_stmt() {
  Load_file_stmtContext *_localctx = _tracker.createInstance<Load_file_stmtContext>(_ctx, getState());
  enterRule(_localctx, 328, HqlsqlParser::RuleLoad_file_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2774);
    match(HqlsqlParser::T_LOAD);
    setState(2775);
    match(HqlsqlParser::T_DATA);
    setState(2777);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_LOCAL) {
      setState(2776);
      match(HqlsqlParser::T_LOCAL);
    }
    setState(2779);
    match(HqlsqlParser::T_INPATH);
    setState(2780);
    string();
    setState(2782);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_OVERWRITE) {
      setState(2781);
      match(HqlsqlParser::T_OVERWRITE);
    }
    setState(2784);
    match(HqlsqlParser::T_INTO);
    setState(2785);
    match(HqlsqlParser::T_TABLE);
    setState(2786);
    table_name();
    setState(2788);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      setState(2787);
      partition_assignment_list();
      break;
    }

    }
    setState(2794);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
    case 1: {
      setState(2790);
      match(HqlsqlParser::T_INPUTFORMAT);
      setState(2791);
      match(HqlsqlParser::L_S_STRING);
      setState(2792);
      match(HqlsqlParser::T_SERDE);
      setState(2793);
      match(HqlsqlParser::L_S_STRING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_stmtContext ------------------------------------------------------------------

HqlsqlParser::Insert_stmtContext::Insert_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Insert_into_table_from_sqlContext* HqlsqlParser::Insert_stmtContext::insert_into_table_from_sql() {
  return getRuleContext<HqlsqlParser::Insert_into_table_from_sqlContext>(0);
}

HqlsqlParser::Insert_into_tables_from_queryContext* HqlsqlParser::Insert_stmtContext::insert_into_tables_from_query() {
  return getRuleContext<HqlsqlParser::Insert_into_tables_from_queryContext>(0);
}

HqlsqlParser::Insert_into_files_from_queryContext* HqlsqlParser::Insert_stmtContext::insert_into_files_from_query() {
  return getRuleContext<HqlsqlParser::Insert_into_files_from_queryContext>(0);
}

HqlsqlParser::Insert_into_mutiplesContext* HqlsqlParser::Insert_stmtContext::insert_into_mutiples() {
  return getRuleContext<HqlsqlParser::Insert_into_mutiplesContext>(0);
}


size_t HqlsqlParser::Insert_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_stmt;
}

void HqlsqlParser::Insert_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_stmt(this);
}

void HqlsqlParser::Insert_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_stmt(this);
}


antlrcpp::Any HqlsqlParser::Insert_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_stmtContext* HqlsqlParser::insert_stmt() {
  Insert_stmtContext *_localctx = _tracker.createInstance<Insert_stmtContext>(_ctx, getState());
  enterRule(_localctx, 330, HqlsqlParser::RuleInsert_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2800);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2796);
      insert_into_table_from_sql();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2797);
      insert_into_tables_from_query();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2798);
      insert_into_files_from_query();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2799);
      insert_into_mutiples();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_into_table_from_sqlContext ------------------------------------------------------------------

HqlsqlParser::Insert_into_table_from_sqlContext::Insert_into_table_from_sqlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Insert_into_table_from_sqlContext::T_INSERT() {
  return getToken(HqlsqlParser::T_INSERT, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_into_table_from_sqlContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_into_table_from_sqlContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Insert_into_table_from_sqlContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::Insert_stmt_rowsContext* HqlsqlParser::Insert_into_table_from_sqlContext::insert_stmt_rows() {
  return getRuleContext<HqlsqlParser::Insert_stmt_rowsContext>(0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Insert_into_table_from_sqlContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

HqlsqlParser::Insert_stmt_colsContext* HqlsqlParser::Insert_into_table_from_sqlContext::insert_stmt_cols() {
  return getRuleContext<HqlsqlParser::Insert_stmt_colsContext>(0);
}


size_t HqlsqlParser::Insert_into_table_from_sqlContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_into_table_from_sql;
}

void HqlsqlParser::Insert_into_table_from_sqlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_into_table_from_sql(this);
}

void HqlsqlParser::Insert_into_table_from_sqlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_into_table_from_sql(this);
}


antlrcpp::Any HqlsqlParser::Insert_into_table_from_sqlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_into_table_from_sql(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_into_table_from_sqlContext* HqlsqlParser::insert_into_table_from_sql() {
  Insert_into_table_from_sqlContext *_localctx = _tracker.createInstance<Insert_into_table_from_sqlContext>(_ctx, getState());
  enterRule(_localctx, 332, HqlsqlParser::RuleInsert_into_table_from_sql);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2802);
    match(HqlsqlParser::T_INSERT);
    setState(2803);
    match(HqlsqlParser::T_INTO);
    setState(2804);
    match(HqlsqlParser::T_TABLE);
    setState(2805);
    table_name();
    setState(2807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_PARTITION) {
      setState(2806);
      partition_assignment_list();
    }
    setState(2810);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_OPEN_P) {
      setState(2809);
      insert_stmt_cols();
    }
    setState(2812);
    insert_stmt_rows();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_into_tables_from_queryContext ------------------------------------------------------------------

HqlsqlParser::Insert_into_tables_from_queryContext::Insert_into_tables_from_queryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Insert_tables_overwrite_intoContext* HqlsqlParser::Insert_into_tables_from_queryContext::insert_tables_overwrite_into() {
  return getRuleContext<HqlsqlParser::Insert_tables_overwrite_intoContext>(0);
}

HqlsqlParser::From_clauseContext* HqlsqlParser::Insert_into_tables_from_queryContext::from_clause() {
  return getRuleContext<HqlsqlParser::From_clauseContext>(0);
}


size_t HqlsqlParser::Insert_into_tables_from_queryContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_into_tables_from_query;
}

void HqlsqlParser::Insert_into_tables_from_queryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_into_tables_from_query(this);
}

void HqlsqlParser::Insert_into_tables_from_queryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_into_tables_from_query(this);
}


antlrcpp::Any HqlsqlParser::Insert_into_tables_from_queryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_into_tables_from_query(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_into_tables_from_queryContext* HqlsqlParser::insert_into_tables_from_query() {
  Insert_into_tables_from_queryContext *_localctx = _tracker.createInstance<Insert_into_tables_from_queryContext>(_ctx, getState());
  enterRule(_localctx, 334, HqlsqlParser::RuleInsert_into_tables_from_query);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2814);
    insert_tables_overwrite_into();
    setState(2816);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx)) {
    case 1: {
      setState(2815);
      from_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_tables_overwrite_intoContext ------------------------------------------------------------------

HqlsqlParser::Insert_tables_overwrite_intoContext::Insert_tables_overwrite_intoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Insert_tables_overwrite_intoContext::T_INSERT() {
  return getToken(HqlsqlParser::T_INSERT, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_tables_overwrite_intoContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Insert_tables_overwrite_intoContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Insert_tables_overwrite_intoContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Insert_tables_overwrite_intoContext::T_OVERWRITE() {
  return getToken(HqlsqlParser::T_OVERWRITE, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_tables_overwrite_intoContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Insert_tables_overwrite_intoContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Insert_tables_overwrite_intoContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_tables_overwrite_intoContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_tables_overwrite_intoContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}


size_t HqlsqlParser::Insert_tables_overwrite_intoContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_tables_overwrite_into;
}

void HqlsqlParser::Insert_tables_overwrite_intoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_tables_overwrite_into(this);
}

void HqlsqlParser::Insert_tables_overwrite_intoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_tables_overwrite_into(this);
}


antlrcpp::Any HqlsqlParser::Insert_tables_overwrite_intoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_tables_overwrite_into(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_tables_overwrite_intoContext* HqlsqlParser::insert_tables_overwrite_into() {
  Insert_tables_overwrite_intoContext *_localctx = _tracker.createInstance<Insert_tables_overwrite_intoContext>(_ctx, getState());
  enterRule(_localctx, 336, HqlsqlParser::RuleInsert_tables_overwrite_into);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2818);
    match(HqlsqlParser::T_INSERT);
    setState(2819);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_INTO

    || _la == HqlsqlParser::T_OVERWRITE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2820);
    match(HqlsqlParser::T_TABLE);
    setState(2821);
    table_name();
    setState(2828);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_PARTITION) {
      setState(2822);
      partition_assignment_list();
      setState(2826);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_IF) {
        setState(2823);
        match(HqlsqlParser::T_IF);
        setState(2824);
        match(HqlsqlParser::T_NOT);
        setState(2825);
        match(HqlsqlParser::T_EXISTS);
      }
    }
    setState(2830);
    select_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_into_files_from_queryContext ------------------------------------------------------------------

HqlsqlParser::Insert_into_files_from_queryContext::Insert_into_files_from_queryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Insert_directory_stmtContext* HqlsqlParser::Insert_into_files_from_queryContext::insert_directory_stmt() {
  return getRuleContext<HqlsqlParser::Insert_directory_stmtContext>(0);
}


size_t HqlsqlParser::Insert_into_files_from_queryContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_into_files_from_query;
}

void HqlsqlParser::Insert_into_files_from_queryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_into_files_from_query(this);
}

void HqlsqlParser::Insert_into_files_from_queryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_into_files_from_query(this);
}


antlrcpp::Any HqlsqlParser::Insert_into_files_from_queryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_into_files_from_query(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_into_files_from_queryContext* HqlsqlParser::insert_into_files_from_query() {
  Insert_into_files_from_queryContext *_localctx = _tracker.createInstance<Insert_into_files_from_queryContext>(_ctx, getState());
  enterRule(_localctx, 338, HqlsqlParser::RuleInsert_into_files_from_query);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2832);
    insert_directory_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_into_mutiplesContext ------------------------------------------------------------------

HqlsqlParser::Insert_into_mutiplesContext::Insert_into_mutiplesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::From_clauseContext* HqlsqlParser::Insert_into_mutiplesContext::from_clause() {
  return getRuleContext<HqlsqlParser::From_clauseContext>(0);
}

std::vector<HqlsqlParser::Insert_tables_overwrite_intoContext *> HqlsqlParser::Insert_into_mutiplesContext::insert_tables_overwrite_into() {
  return getRuleContexts<HqlsqlParser::Insert_tables_overwrite_intoContext>();
}

HqlsqlParser::Insert_tables_overwrite_intoContext* HqlsqlParser::Insert_into_mutiplesContext::insert_tables_overwrite_into(size_t i) {
  return getRuleContext<HqlsqlParser::Insert_tables_overwrite_intoContext>(i);
}

std::vector<HqlsqlParser::Insert_directory_stmtContext *> HqlsqlParser::Insert_into_mutiplesContext::insert_directory_stmt() {
  return getRuleContexts<HqlsqlParser::Insert_directory_stmtContext>();
}

HqlsqlParser::Insert_directory_stmtContext* HqlsqlParser::Insert_into_mutiplesContext::insert_directory_stmt(size_t i) {
  return getRuleContext<HqlsqlParser::Insert_directory_stmtContext>(i);
}


size_t HqlsqlParser::Insert_into_mutiplesContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_into_mutiples;
}

void HqlsqlParser::Insert_into_mutiplesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_into_mutiples(this);
}

void HqlsqlParser::Insert_into_mutiplesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_into_mutiples(this);
}


antlrcpp::Any HqlsqlParser::Insert_into_mutiplesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_into_mutiples(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_into_mutiplesContext* HqlsqlParser::insert_into_mutiples() {
  Insert_into_mutiplesContext *_localctx = _tracker.createInstance<Insert_into_mutiplesContext>(_ctx, getState());
  enterRule(_localctx, 340, HqlsqlParser::RuleInsert_into_mutiples);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2834);
    from_clause();
    setState(2837); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2837);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
              case 1: {
                setState(2835);
                insert_tables_overwrite_into();
                break;
              }

              case 2: {
                setState(2836);
                insert_directory_stmt();
                break;
              }

              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2839); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_stmt_colsContext ------------------------------------------------------------------

HqlsqlParser::Insert_stmt_colsContext::Insert_stmt_colsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_colsContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Insert_stmt_colsContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Insert_stmt_colsContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_colsContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Insert_stmt_colsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_colsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Insert_stmt_colsContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_stmt_cols;
}

void HqlsqlParser::Insert_stmt_colsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_stmt_cols(this);
}

void HqlsqlParser::Insert_stmt_colsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_stmt_cols(this);
}


antlrcpp::Any HqlsqlParser::Insert_stmt_colsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_stmt_cols(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_stmt_colsContext* HqlsqlParser::insert_stmt_cols() {
  Insert_stmt_colsContext *_localctx = _tracker.createInstance<Insert_stmt_colsContext>(_ctx, getState());
  enterRule(_localctx, 342, HqlsqlParser::RuleInsert_stmt_cols);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2841);
    match(HqlsqlParser::T_OPEN_P);
    setState(2842);
    ident();
    setState(2847);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(2843);
      match(HqlsqlParser::T_COMMA);
      setState(2844);
      ident();
      setState(2849);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2850);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_stmt_rowsContext ------------------------------------------------------------------

HqlsqlParser::Insert_stmt_rowsContext::Insert_stmt_rowsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_rowsContext::T_VALUES() {
  return getToken(HqlsqlParser::T_VALUES, 0);
}

std::vector<HqlsqlParser::Insert_stmt_rowContext *> HqlsqlParser::Insert_stmt_rowsContext::insert_stmt_row() {
  return getRuleContexts<HqlsqlParser::Insert_stmt_rowContext>();
}

HqlsqlParser::Insert_stmt_rowContext* HqlsqlParser::Insert_stmt_rowsContext::insert_stmt_row(size_t i) {
  return getRuleContext<HqlsqlParser::Insert_stmt_rowContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Insert_stmt_rowsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_rowsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Insert_stmt_rowsContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_stmt_rows;
}

void HqlsqlParser::Insert_stmt_rowsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_stmt_rows(this);
}

void HqlsqlParser::Insert_stmt_rowsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_stmt_rows(this);
}


antlrcpp::Any HqlsqlParser::Insert_stmt_rowsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_stmt_rows(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_stmt_rowsContext* HqlsqlParser::insert_stmt_rows() {
  Insert_stmt_rowsContext *_localctx = _tracker.createInstance<Insert_stmt_rowsContext>(_ctx, getState());
  enterRule(_localctx, 344, HqlsqlParser::RuleInsert_stmt_rows);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2852);
    match(HqlsqlParser::T_VALUES);
    setState(2853);
    insert_stmt_row();
    setState(2858);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2854);
        match(HqlsqlParser::T_COMMA);
        setState(2855);
        insert_stmt_row(); 
      }
      setState(2860);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_stmt_rowContext ------------------------------------------------------------------

HqlsqlParser::Insert_stmt_rowContext::Insert_stmt_rowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_rowContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Insert_stmt_rowContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Insert_stmt_rowContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_rowContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Insert_stmt_rowContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Insert_stmt_rowContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Insert_stmt_rowContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_stmt_row;
}

void HqlsqlParser::Insert_stmt_rowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_stmt_row(this);
}

void HqlsqlParser::Insert_stmt_rowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_stmt_row(this);
}


antlrcpp::Any HqlsqlParser::Insert_stmt_rowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_stmt_row(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_stmt_rowContext* HqlsqlParser::insert_stmt_row() {
  Insert_stmt_rowContext *_localctx = _tracker.createInstance<Insert_stmt_rowContext>(_ctx, getState());
  enterRule(_localctx, 346, HqlsqlParser::RuleInsert_stmt_row);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2861);
    match(HqlsqlParser::T_OPEN_P);
    setState(2862);
    expr(0);
    setState(2867);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(2863);
      match(HqlsqlParser::T_COMMA);
      setState(2864);
      expr(0);
      setState(2869);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2870);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_directory_stmtContext ------------------------------------------------------------------

HqlsqlParser::Insert_directory_stmtContext::Insert_directory_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Insert_directory_stmtContext::T_INSERT() {
  return getToken(HqlsqlParser::T_INSERT, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_directory_stmtContext::T_OVERWRITE() {
  return getToken(HqlsqlParser::T_OVERWRITE, 0);
}

tree::TerminalNode* HqlsqlParser::Insert_directory_stmtContext::T_DIRECTORY() {
  return getToken(HqlsqlParser::T_DIRECTORY, 0);
}

HqlsqlParser::Expr_fileContext* HqlsqlParser::Insert_directory_stmtContext::expr_file() {
  return getRuleContext<HqlsqlParser::Expr_fileContext>(0);
}

HqlsqlParser::Expr_selectContext* HqlsqlParser::Insert_directory_stmtContext::expr_select() {
  return getRuleContext<HqlsqlParser::Expr_selectContext>(0);
}

tree::TerminalNode* HqlsqlParser::Insert_directory_stmtContext::T_LOCAL() {
  return getToken(HqlsqlParser::T_LOCAL, 0);
}

HqlsqlParser::Row_format_partContext* HqlsqlParser::Insert_directory_stmtContext::row_format_part() {
  return getRuleContext<HqlsqlParser::Row_format_partContext>(0);
}


size_t HqlsqlParser::Insert_directory_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleInsert_directory_stmt;
}

void HqlsqlParser::Insert_directory_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_directory_stmt(this);
}

void HqlsqlParser::Insert_directory_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_directory_stmt(this);
}


antlrcpp::Any HqlsqlParser::Insert_directory_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInsert_directory_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Insert_directory_stmtContext* HqlsqlParser::insert_directory_stmt() {
  Insert_directory_stmtContext *_localctx = _tracker.createInstance<Insert_directory_stmtContext>(_ctx, getState());
  enterRule(_localctx, 348, HqlsqlParser::RuleInsert_directory_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2872);
    match(HqlsqlParser::T_INSERT);
    setState(2873);
    match(HqlsqlParser::T_OVERWRITE);
    setState(2875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_LOCAL) {
      setState(2874);
      match(HqlsqlParser::T_LOCAL);
    }
    setState(2877);
    match(HqlsqlParser::T_DIRECTORY);
    setState(2878);
    expr_file();
    setState(2880);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
    case 1: {
      setState(2879);
      row_format_part();
      break;
    }

    }
    setState(2882);
    expr_select();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exit_stmtContext ------------------------------------------------------------------

HqlsqlParser::Exit_stmtContext::Exit_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Exit_stmtContext::T_EXIT() {
  return getToken(HqlsqlParser::T_EXIT, 0);
}

tree::TerminalNode* HqlsqlParser::Exit_stmtContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}

tree::TerminalNode* HqlsqlParser::Exit_stmtContext::T_WHEN() {
  return getToken(HqlsqlParser::T_WHEN, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Exit_stmtContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}


size_t HqlsqlParser::Exit_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleExit_stmt;
}

void HqlsqlParser::Exit_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExit_stmt(this);
}

void HqlsqlParser::Exit_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExit_stmt(this);
}


antlrcpp::Any HqlsqlParser::Exit_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExit_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Exit_stmtContext* HqlsqlParser::exit_stmt() {
  Exit_stmtContext *_localctx = _tracker.createInstance<Exit_stmtContext>(_ctx, getState());
  enterRule(_localctx, 350, HqlsqlParser::RuleExit_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2884);
    match(HqlsqlParser::T_EXIT);
    setState(2886);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
    case 1: {
      setState(2885);
      match(HqlsqlParser::L_ID);
      break;
    }

    }
    setState(2890);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
    case 1: {
      setState(2888);
      match(HqlsqlParser::T_WHEN);
      setState(2889);
      bool_expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Get_diag_stmtContext ------------------------------------------------------------------

HqlsqlParser::Get_diag_stmtContext::Get_diag_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Get_diag_stmtContext::T_GET() {
  return getToken(HqlsqlParser::T_GET, 0);
}

tree::TerminalNode* HqlsqlParser::Get_diag_stmtContext::T_DIAGNOSTICS() {
  return getToken(HqlsqlParser::T_DIAGNOSTICS, 0);
}

HqlsqlParser::Get_diag_stmt_itemContext* HqlsqlParser::Get_diag_stmtContext::get_diag_stmt_item() {
  return getRuleContext<HqlsqlParser::Get_diag_stmt_itemContext>(0);
}


size_t HqlsqlParser::Get_diag_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleGet_diag_stmt;
}

void HqlsqlParser::Get_diag_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_diag_stmt(this);
}

void HqlsqlParser::Get_diag_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_diag_stmt(this);
}


antlrcpp::Any HqlsqlParser::Get_diag_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitGet_diag_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Get_diag_stmtContext* HqlsqlParser::get_diag_stmt() {
  Get_diag_stmtContext *_localctx = _tracker.createInstance<Get_diag_stmtContext>(_ctx, getState());
  enterRule(_localctx, 352, HqlsqlParser::RuleGet_diag_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2892);
    match(HqlsqlParser::T_GET);
    setState(2893);
    match(HqlsqlParser::T_DIAGNOSTICS);
    setState(2894);
    get_diag_stmt_item();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Get_diag_stmt_itemContext ------------------------------------------------------------------

HqlsqlParser::Get_diag_stmt_itemContext::Get_diag_stmt_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Get_diag_stmt_exception_itemContext* HqlsqlParser::Get_diag_stmt_itemContext::get_diag_stmt_exception_item() {
  return getRuleContext<HqlsqlParser::Get_diag_stmt_exception_itemContext>(0);
}

HqlsqlParser::Get_diag_stmt_rowcount_itemContext* HqlsqlParser::Get_diag_stmt_itemContext::get_diag_stmt_rowcount_item() {
  return getRuleContext<HqlsqlParser::Get_diag_stmt_rowcount_itemContext>(0);
}


size_t HqlsqlParser::Get_diag_stmt_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleGet_diag_stmt_item;
}

void HqlsqlParser::Get_diag_stmt_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_diag_stmt_item(this);
}

void HqlsqlParser::Get_diag_stmt_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_diag_stmt_item(this);
}


antlrcpp::Any HqlsqlParser::Get_diag_stmt_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitGet_diag_stmt_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Get_diag_stmt_itemContext* HqlsqlParser::get_diag_stmt_item() {
  Get_diag_stmt_itemContext *_localctx = _tracker.createInstance<Get_diag_stmt_itemContext>(_ctx, getState());
  enterRule(_localctx, 354, HqlsqlParser::RuleGet_diag_stmt_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2898);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2896);
      get_diag_stmt_exception_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2897);
      get_diag_stmt_rowcount_item();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Get_diag_stmt_exception_itemContext ------------------------------------------------------------------

HqlsqlParser::Get_diag_stmt_exception_itemContext::Get_diag_stmt_exception_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Get_diag_stmt_exception_itemContext::T_EXCEPTION() {
  return getToken(HqlsqlParser::T_EXCEPTION, 0);
}

HqlsqlParser::Int_numberContext* HqlsqlParser::Get_diag_stmt_exception_itemContext::int_number() {
  return getRuleContext<HqlsqlParser::Int_numberContext>(0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Get_diag_stmt_exception_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Get_diag_stmt_exception_itemContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Get_diag_stmt_exception_itemContext::T_MESSAGE_TEXT() {
  return getToken(HqlsqlParser::T_MESSAGE_TEXT, 0);
}


size_t HqlsqlParser::Get_diag_stmt_exception_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleGet_diag_stmt_exception_item;
}

void HqlsqlParser::Get_diag_stmt_exception_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_diag_stmt_exception_item(this);
}

void HqlsqlParser::Get_diag_stmt_exception_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_diag_stmt_exception_item(this);
}


antlrcpp::Any HqlsqlParser::Get_diag_stmt_exception_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitGet_diag_stmt_exception_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Get_diag_stmt_exception_itemContext* HqlsqlParser::get_diag_stmt_exception_item() {
  Get_diag_stmt_exception_itemContext *_localctx = _tracker.createInstance<Get_diag_stmt_exception_itemContext>(_ctx, getState());
  enterRule(_localctx, 356, HqlsqlParser::RuleGet_diag_stmt_exception_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2900);
    match(HqlsqlParser::T_EXCEPTION);
    setState(2901);
    int_number();
    setState(2902);
    ident();
    setState(2903);
    match(HqlsqlParser::T_EQUAL);
    setState(2904);
    match(HqlsqlParser::T_MESSAGE_TEXT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Get_diag_stmt_rowcount_itemContext ------------------------------------------------------------------

HqlsqlParser::Get_diag_stmt_rowcount_itemContext::Get_diag_stmt_rowcount_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Get_diag_stmt_rowcount_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Get_diag_stmt_rowcount_itemContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Get_diag_stmt_rowcount_itemContext::T_ROW_COUNT() {
  return getToken(HqlsqlParser::T_ROW_COUNT, 0);
}


size_t HqlsqlParser::Get_diag_stmt_rowcount_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleGet_diag_stmt_rowcount_item;
}

void HqlsqlParser::Get_diag_stmt_rowcount_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_diag_stmt_rowcount_item(this);
}

void HqlsqlParser::Get_diag_stmt_rowcount_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_diag_stmt_rowcount_item(this);
}


antlrcpp::Any HqlsqlParser::Get_diag_stmt_rowcount_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitGet_diag_stmt_rowcount_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Get_diag_stmt_rowcount_itemContext* HqlsqlParser::get_diag_stmt_rowcount_item() {
  Get_diag_stmt_rowcount_itemContext *_localctx = _tracker.createInstance<Get_diag_stmt_rowcount_itemContext>(_ctx, getState());
  enterRule(_localctx, 358, HqlsqlParser::RuleGet_diag_stmt_rowcount_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2906);
    ident();
    setState(2907);
    match(HqlsqlParser::T_EQUAL);
    setState(2908);
    match(HqlsqlParser::T_ROW_COUNT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Leave_stmtContext ------------------------------------------------------------------

HqlsqlParser::Leave_stmtContext::Leave_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Leave_stmtContext::T_LEAVE() {
  return getToken(HqlsqlParser::T_LEAVE, 0);
}

tree::TerminalNode* HqlsqlParser::Leave_stmtContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}


size_t HqlsqlParser::Leave_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleLeave_stmt;
}

void HqlsqlParser::Leave_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeave_stmt(this);
}

void HqlsqlParser::Leave_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeave_stmt(this);
}


antlrcpp::Any HqlsqlParser::Leave_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitLeave_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Leave_stmtContext* HqlsqlParser::leave_stmt() {
  Leave_stmtContext *_localctx = _tracker.createInstance<Leave_stmtContext>(_ctx, getState());
  enterRule(_localctx, 360, HqlsqlParser::RuleLeave_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2910);
    match(HqlsqlParser::T_LEAVE);
    setState(2912);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
    case 1: {
      setState(2911);
      match(HqlsqlParser::L_ID);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Map_object_stmtContext ------------------------------------------------------------------

HqlsqlParser::Map_object_stmtContext::Map_object_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Map_object_stmtContext::T_MAP() {
  return getToken(HqlsqlParser::T_MAP, 0);
}

tree::TerminalNode* HqlsqlParser::Map_object_stmtContext::T_OBJECT() {
  return getToken(HqlsqlParser::T_OBJECT, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Map_object_stmtContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Map_object_stmtContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Map_object_stmtContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

tree::TerminalNode* HqlsqlParser::Map_object_stmtContext::T_AT() {
  return getToken(HqlsqlParser::T_AT, 0);
}


size_t HqlsqlParser::Map_object_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleMap_object_stmt;
}

void HqlsqlParser::Map_object_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMap_object_stmt(this);
}

void HqlsqlParser::Map_object_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMap_object_stmt(this);
}


antlrcpp::Any HqlsqlParser::Map_object_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitMap_object_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Map_object_stmtContext* HqlsqlParser::map_object_stmt() {
  Map_object_stmtContext *_localctx = _tracker.createInstance<Map_object_stmtContext>(_ctx, getState());
  enterRule(_localctx, 362, HqlsqlParser::RuleMap_object_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2914);
    match(HqlsqlParser::T_MAP);
    setState(2915);
    match(HqlsqlParser::T_OBJECT);
    setState(2916);
    expr(0);
    setState(2919);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
    case 1: {
      setState(2917);
      match(HqlsqlParser::T_TO);
      setState(2918);
      expr(0);
      break;
    }

    }
    setState(2923);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
    case 1: {
      setState(2921);
      match(HqlsqlParser::T_AT);
      setState(2922);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Open_stmtContext ------------------------------------------------------------------

HqlsqlParser::Open_stmtContext::Open_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Open_stmtContext::T_OPEN() {
  return getToken(HqlsqlParser::T_OPEN, 0);
}

tree::TerminalNode* HqlsqlParser::Open_stmtContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}

tree::TerminalNode* HqlsqlParser::Open_stmtContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Open_stmtContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Open_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Open_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleOpen_stmt;
}

void HqlsqlParser::Open_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpen_stmt(this);
}

void HqlsqlParser::Open_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpen_stmt(this);
}


antlrcpp::Any HqlsqlParser::Open_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitOpen_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Open_stmtContext* HqlsqlParser::open_stmt() {
  Open_stmtContext *_localctx = _tracker.createInstance<Open_stmtContext>(_ctx, getState());
  enterRule(_localctx, 364, HqlsqlParser::RuleOpen_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2925);
    match(HqlsqlParser::T_OPEN);
    setState(2926);
    match(HqlsqlParser::L_ID);
    setState(2932);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
    case 1: {
      setState(2927);
      match(HqlsqlParser::T_FOR);
      setState(2930);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
      case 1: {
        setState(2928);
        select_stmt();
        break;
      }

      case 2: {
        setState(2929);
        expr(0);
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fetch_stmtContext ------------------------------------------------------------------

HqlsqlParser::Fetch_stmtContext::Fetch_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Fetch_stmtContext::T_FETCH() {
  return getToken(HqlsqlParser::T_FETCH, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Fetch_stmtContext::L_ID() {
  return getTokens(HqlsqlParser::L_ID);
}

tree::TerminalNode* HqlsqlParser::Fetch_stmtContext::L_ID(size_t i) {
  return getToken(HqlsqlParser::L_ID, i);
}

tree::TerminalNode* HqlsqlParser::Fetch_stmtContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

tree::TerminalNode* HqlsqlParser::Fetch_stmtContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Fetch_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Fetch_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Fetch_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleFetch_stmt;
}

void HqlsqlParser::Fetch_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFetch_stmt(this);
}

void HqlsqlParser::Fetch_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFetch_stmt(this);
}


antlrcpp::Any HqlsqlParser::Fetch_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFetch_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Fetch_stmtContext* HqlsqlParser::fetch_stmt() {
  Fetch_stmtContext *_localctx = _tracker.createInstance<Fetch_stmtContext>(_ctx, getState());
  enterRule(_localctx, 366, HqlsqlParser::RuleFetch_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2934);
    match(HqlsqlParser::T_FETCH);
    setState(2936);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_FROM) {
      setState(2935);
      match(HqlsqlParser::T_FROM);
    }
    setState(2938);
    match(HqlsqlParser::L_ID);
    setState(2939);
    match(HqlsqlParser::T_INTO);
    setState(2940);
    match(HqlsqlParser::L_ID);
    setState(2945);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2941);
        match(HqlsqlParser::T_COMMA);
        setState(2942);
        match(HqlsqlParser::L_ID); 
      }
      setState(2947);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collect_stats_stmtContext ------------------------------------------------------------------

HqlsqlParser::Collect_stats_stmtContext::Collect_stats_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Collect_stats_stmtContext::T_COLLECT() {
  return getToken(HqlsqlParser::T_COLLECT, 0);
}

tree::TerminalNode* HqlsqlParser::Collect_stats_stmtContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Collect_stats_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Collect_stats_stmtContext::T_STATISTICS() {
  return getToken(HqlsqlParser::T_STATISTICS, 0);
}

tree::TerminalNode* HqlsqlParser::Collect_stats_stmtContext::T_STATS() {
  return getToken(HqlsqlParser::T_STATS, 0);
}

HqlsqlParser::Collect_stats_clauseContext* HqlsqlParser::Collect_stats_stmtContext::collect_stats_clause() {
  return getRuleContext<HqlsqlParser::Collect_stats_clauseContext>(0);
}


size_t HqlsqlParser::Collect_stats_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCollect_stats_stmt;
}

void HqlsqlParser::Collect_stats_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollect_stats_stmt(this);
}

void HqlsqlParser::Collect_stats_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollect_stats_stmt(this);
}


antlrcpp::Any HqlsqlParser::Collect_stats_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCollect_stats_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Collect_stats_stmtContext* HqlsqlParser::collect_stats_stmt() {
  Collect_stats_stmtContext *_localctx = _tracker.createInstance<Collect_stats_stmtContext>(_ctx, getState());
  enterRule(_localctx, 368, HqlsqlParser::RuleCollect_stats_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2948);
    match(HqlsqlParser::T_COLLECT);
    setState(2949);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_STATS

    || _la == HqlsqlParser::T_STATISTICS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2950);
    match(HqlsqlParser::T_ON);
    setState(2951);
    table_name();
    setState(2953);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
    case 1: {
      setState(2952);
      collect_stats_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collect_stats_clauseContext ------------------------------------------------------------------

HqlsqlParser::Collect_stats_clauseContext::Collect_stats_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Collect_stats_clauseContext::T_COLUMN() {
  return getToken(HqlsqlParser::T_COLUMN, 0);
}

tree::TerminalNode* HqlsqlParser::Collect_stats_clauseContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Collect_stats_clauseContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Collect_stats_clauseContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

tree::TerminalNode* HqlsqlParser::Collect_stats_clauseContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Collect_stats_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Collect_stats_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Collect_stats_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleCollect_stats_clause;
}

void HqlsqlParser::Collect_stats_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollect_stats_clause(this);
}

void HqlsqlParser::Collect_stats_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollect_stats_clause(this);
}


antlrcpp::Any HqlsqlParser::Collect_stats_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCollect_stats_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Collect_stats_clauseContext* HqlsqlParser::collect_stats_clause() {
  Collect_stats_clauseContext *_localctx = _tracker.createInstance<Collect_stats_clauseContext>(_ctx, getState());
  enterRule(_localctx, 370, HqlsqlParser::RuleCollect_stats_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2955);
    match(HqlsqlParser::T_COLUMN);
    setState(2956);
    match(HqlsqlParser::T_OPEN_P);
    setState(2957);
    ident();
    setState(2962);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(2958);
      match(HqlsqlParser::T_COMMA);
      setState(2959);
      ident();
      setState(2964);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2965);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Close_stmtContext ------------------------------------------------------------------

HqlsqlParser::Close_stmtContext::Close_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Close_stmtContext::T_CLOSE() {
  return getToken(HqlsqlParser::T_CLOSE, 0);
}

tree::TerminalNode* HqlsqlParser::Close_stmtContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}


size_t HqlsqlParser::Close_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleClose_stmt;
}

void HqlsqlParser::Close_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClose_stmt(this);
}

void HqlsqlParser::Close_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClose_stmt(this);
}


antlrcpp::Any HqlsqlParser::Close_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitClose_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Close_stmtContext* HqlsqlParser::close_stmt() {
  Close_stmtContext *_localctx = _tracker.createInstance<Close_stmtContext>(_ctx, getState());
  enterRule(_localctx, 372, HqlsqlParser::RuleClose_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2967);
    match(HqlsqlParser::T_CLOSE);
    setState(2968);
    match(HqlsqlParser::L_ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cmp_stmtContext ------------------------------------------------------------------

HqlsqlParser::Cmp_stmtContext::Cmp_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Cmp_stmtContext::T_CMP() {
  return getToken(HqlsqlParser::T_CMP, 0);
}

std::vector<HqlsqlParser::Cmp_sourceContext *> HqlsqlParser::Cmp_stmtContext::cmp_source() {
  return getRuleContexts<HqlsqlParser::Cmp_sourceContext>();
}

HqlsqlParser::Cmp_sourceContext* HqlsqlParser::Cmp_stmtContext::cmp_source(size_t i) {
  return getRuleContext<HqlsqlParser::Cmp_sourceContext>(i);
}

tree::TerminalNode* HqlsqlParser::Cmp_stmtContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}

tree::TerminalNode* HqlsqlParser::Cmp_stmtContext::T_ROW_COUNT() {
  return getToken(HqlsqlParser::T_ROW_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Cmp_stmtContext::T_SUM() {
  return getToken(HqlsqlParser::T_SUM, 0);
}


size_t HqlsqlParser::Cmp_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCmp_stmt;
}

void HqlsqlParser::Cmp_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCmp_stmt(this);
}

void HqlsqlParser::Cmp_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCmp_stmt(this);
}


antlrcpp::Any HqlsqlParser::Cmp_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCmp_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cmp_stmtContext* HqlsqlParser::cmp_stmt() {
  Cmp_stmtContext *_localctx = _tracker.createInstance<Cmp_stmtContext>(_ctx, getState());
  enterRule(_localctx, 374, HqlsqlParser::RuleCmp_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2970);
    match(HqlsqlParser::T_CMP);
    setState(2971);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ROW_COUNT

    || _la == HqlsqlParser::T_SUM)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2972);
    cmp_source();
    setState(2973);
    match(HqlsqlParser::T_COMMA);
    setState(2974);
    cmp_source();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cmp_sourceContext ------------------------------------------------------------------

HqlsqlParser::Cmp_sourceContext::Cmp_sourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Cmp_sourceContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Cmp_sourceContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Cmp_sourceContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Cmp_sourceContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Cmp_sourceContext::T_AT() {
  return getToken(HqlsqlParser::T_AT, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Cmp_sourceContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Where_clauseContext* HqlsqlParser::Cmp_sourceContext::where_clause() {
  return getRuleContext<HqlsqlParser::Where_clauseContext>(0);
}


size_t HqlsqlParser::Cmp_sourceContext::getRuleIndex() const {
  return HqlsqlParser::RuleCmp_source;
}

void HqlsqlParser::Cmp_sourceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCmp_source(this);
}

void HqlsqlParser::Cmp_sourceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCmp_source(this);
}


antlrcpp::Any HqlsqlParser::Cmp_sourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCmp_source(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cmp_sourceContext* HqlsqlParser::cmp_source() {
  Cmp_sourceContext *_localctx = _tracker.createInstance<Cmp_sourceContext>(_ctx, getState());
  enterRule(_localctx, 376, HqlsqlParser::RuleCmp_source);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2984);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::L_ID: {
        setState(2976);
        table_name();
        setState(2978);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx)) {
        case 1: {
          setState(2977);
          where_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_OPEN_P: {
        setState(2980);
        match(HqlsqlParser::T_OPEN_P);
        setState(2981);
        select_stmt();
        setState(2982);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2988);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      setState(2986);
      match(HqlsqlParser::T_AT);
      setState(2987);
      ident();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_from_local_stmtContext ------------------------------------------------------------------

HqlsqlParser::Copy_from_local_stmtContext::Copy_from_local_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Copy_from_local_stmtContext::T_COPY() {
  return getToken(HqlsqlParser::T_COPY, 0);
}

tree::TerminalNode* HqlsqlParser::Copy_from_local_stmtContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

tree::TerminalNode* HqlsqlParser::Copy_from_local_stmtContext::T_LOCAL() {
  return getToken(HqlsqlParser::T_LOCAL, 0);
}

std::vector<HqlsqlParser::Copy_sourceContext *> HqlsqlParser::Copy_from_local_stmtContext::copy_source() {
  return getRuleContexts<HqlsqlParser::Copy_sourceContext>();
}

HqlsqlParser::Copy_sourceContext* HqlsqlParser::Copy_from_local_stmtContext::copy_source(size_t i) {
  return getRuleContext<HqlsqlParser::Copy_sourceContext>(i);
}

tree::TerminalNode* HqlsqlParser::Copy_from_local_stmtContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

HqlsqlParser::Copy_targetContext* HqlsqlParser::Copy_from_local_stmtContext::copy_target() {
  return getRuleContext<HqlsqlParser::Copy_targetContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Copy_from_local_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Copy_from_local_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

std::vector<HqlsqlParser::Copy_file_optionContext *> HqlsqlParser::Copy_from_local_stmtContext::copy_file_option() {
  return getRuleContexts<HqlsqlParser::Copy_file_optionContext>();
}

HqlsqlParser::Copy_file_optionContext* HqlsqlParser::Copy_from_local_stmtContext::copy_file_option(size_t i) {
  return getRuleContext<HqlsqlParser::Copy_file_optionContext>(i);
}


size_t HqlsqlParser::Copy_from_local_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCopy_from_local_stmt;
}

void HqlsqlParser::Copy_from_local_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_from_local_stmt(this);
}

void HqlsqlParser::Copy_from_local_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_from_local_stmt(this);
}


antlrcpp::Any HqlsqlParser::Copy_from_local_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCopy_from_local_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Copy_from_local_stmtContext* HqlsqlParser::copy_from_local_stmt() {
  Copy_from_local_stmtContext *_localctx = _tracker.createInstance<Copy_from_local_stmtContext>(_ctx, getState());
  enterRule(_localctx, 378, HqlsqlParser::RuleCopy_from_local_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2990);
    match(HqlsqlParser::T_COPY);
    setState(2991);
    match(HqlsqlParser::T_FROM);
    setState(2992);
    match(HqlsqlParser::T_LOCAL);
    setState(2993);
    copy_source();
    setState(2998);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(2994);
      match(HqlsqlParser::T_COMMA);
      setState(2995);
      copy_source();
      setState(3000);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3001);
    match(HqlsqlParser::T_TO);
    setState(3002);
    copy_target();
    setState(3006);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3003);
        copy_file_option(); 
      }
      setState(3008);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_stmtContext ------------------------------------------------------------------

HqlsqlParser::Copy_stmtContext::Copy_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Copy_stmtContext::T_COPY() {
  return getToken(HqlsqlParser::T_COPY, 0);
}

tree::TerminalNode* HqlsqlParser::Copy_stmtContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

HqlsqlParser::Copy_targetContext* HqlsqlParser::Copy_stmtContext::copy_target() {
  return getRuleContext<HqlsqlParser::Copy_targetContext>(0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Copy_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Copy_stmtContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Copy_stmtContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Copy_stmtContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Copy_stmtContext::T_HDFS() {
  return getToken(HqlsqlParser::T_HDFS, 0);
}

std::vector<HqlsqlParser::Copy_optionContext *> HqlsqlParser::Copy_stmtContext::copy_option() {
  return getRuleContexts<HqlsqlParser::Copy_optionContext>();
}

HqlsqlParser::Copy_optionContext* HqlsqlParser::Copy_stmtContext::copy_option(size_t i) {
  return getRuleContext<HqlsqlParser::Copy_optionContext>(i);
}


size_t HqlsqlParser::Copy_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCopy_stmt;
}

void HqlsqlParser::Copy_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_stmt(this);
}

void HqlsqlParser::Copy_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_stmt(this);
}


antlrcpp::Any HqlsqlParser::Copy_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCopy_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Copy_stmtContext* HqlsqlParser::copy_stmt() {
  Copy_stmtContext *_localctx = _tracker.createInstance<Copy_stmtContext>(_ctx, getState());
  enterRule(_localctx, 380, HqlsqlParser::RuleCopy_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3009);
    match(HqlsqlParser::T_COPY);
    setState(3015);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::L_ID: {
        setState(3010);
        table_name();
        break;
      }

      case HqlsqlParser::T_OPEN_P: {
        setState(3011);
        match(HqlsqlParser::T_OPEN_P);
        setState(3012);
        select_stmt();
        setState(3013);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3017);
    match(HqlsqlParser::T_TO);
    setState(3019);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
    case 1: {
      setState(3018);
      match(HqlsqlParser::T_HDFS);
      break;
    }

    }
    setState(3021);
    copy_target();
    setState(3025);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3022);
        copy_option(); 
      }
      setState(3027);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_sourceContext ------------------------------------------------------------------

HqlsqlParser::Copy_sourceContext::Copy_sourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::File_nameContext* HqlsqlParser::Copy_sourceContext::file_name() {
  return getRuleContext<HqlsqlParser::File_nameContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Copy_sourceContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Copy_sourceContext::getRuleIndex() const {
  return HqlsqlParser::RuleCopy_source;
}

void HqlsqlParser::Copy_sourceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_source(this);
}

void HqlsqlParser::Copy_sourceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_source(this);
}


antlrcpp::Any HqlsqlParser::Copy_sourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCopy_source(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Copy_sourceContext* HqlsqlParser::copy_source() {
  Copy_sourceContext *_localctx = _tracker.createInstance<Copy_sourceContext>(_ctx, getState());
  enterRule(_localctx, 382, HqlsqlParser::RuleCopy_source);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3030);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      setState(3028);
      file_name();
      break;
    }

    case 2: {
      setState(3029);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_targetContext ------------------------------------------------------------------

HqlsqlParser::Copy_targetContext::Copy_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::File_nameContext* HqlsqlParser::Copy_targetContext::file_name() {
  return getRuleContext<HqlsqlParser::File_nameContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Copy_targetContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Copy_targetContext::getRuleIndex() const {
  return HqlsqlParser::RuleCopy_target;
}

void HqlsqlParser::Copy_targetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_target(this);
}

void HqlsqlParser::Copy_targetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_target(this);
}


antlrcpp::Any HqlsqlParser::Copy_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCopy_target(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Copy_targetContext* HqlsqlParser::copy_target() {
  Copy_targetContext *_localctx = _tracker.createInstance<Copy_targetContext>(_ctx, getState());
  enterRule(_localctx, 384, HqlsqlParser::RuleCopy_target);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
      setState(3032);
      file_name();
      break;
    }

    case 2: {
      setState(3033);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_optionContext ------------------------------------------------------------------

HqlsqlParser::Copy_optionContext::Copy_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Copy_optionContext::T_AT() {
  return getToken(HqlsqlParser::T_AT, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Copy_optionContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Copy_optionContext::T_BATCHSIZE() {
  return getToken(HqlsqlParser::T_BATCHSIZE, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Copy_optionContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Copy_optionContext::T_DELIMITER() {
  return getToken(HqlsqlParser::T_DELIMITER, 0);
}

tree::TerminalNode* HqlsqlParser::Copy_optionContext::T_SQLINSERT() {
  return getToken(HqlsqlParser::T_SQLINSERT, 0);
}


size_t HqlsqlParser::Copy_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCopy_option;
}

void HqlsqlParser::Copy_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_option(this);
}

void HqlsqlParser::Copy_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_option(this);
}


antlrcpp::Any HqlsqlParser::Copy_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCopy_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Copy_optionContext* HqlsqlParser::copy_option() {
  Copy_optionContext *_localctx = _tracker.createInstance<Copy_optionContext>(_ctx, getState());
  enterRule(_localctx, 386, HqlsqlParser::RuleCopy_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3044);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_AT: {
        enterOuterAlt(_localctx, 1);
        setState(3036);
        match(HqlsqlParser::T_AT);
        setState(3037);
        ident();
        break;
      }

      case HqlsqlParser::T_BATCHSIZE: {
        enterOuterAlt(_localctx, 2);
        setState(3038);
        match(HqlsqlParser::T_BATCHSIZE);
        setState(3039);
        expr(0);
        break;
      }

      case HqlsqlParser::T_DELIMITER: {
        enterOuterAlt(_localctx, 3);
        setState(3040);
        match(HqlsqlParser::T_DELIMITER);
        setState(3041);
        expr(0);
        break;
      }

      case HqlsqlParser::T_SQLINSERT: {
        enterOuterAlt(_localctx, 4);
        setState(3042);
        match(HqlsqlParser::T_SQLINSERT);
        setState(3043);
        ident();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Copy_file_optionContext ------------------------------------------------------------------

HqlsqlParser::Copy_file_optionContext::Copy_file_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Copy_file_optionContext::T_DELETE() {
  return getToken(HqlsqlParser::T_DELETE, 0);
}

tree::TerminalNode* HqlsqlParser::Copy_file_optionContext::T_IGNORE() {
  return getToken(HqlsqlParser::T_IGNORE, 0);
}

tree::TerminalNode* HqlsqlParser::Copy_file_optionContext::T_OVERWRITE() {
  return getToken(HqlsqlParser::T_OVERWRITE, 0);
}


size_t HqlsqlParser::Copy_file_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCopy_file_option;
}

void HqlsqlParser::Copy_file_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopy_file_option(this);
}

void HqlsqlParser::Copy_file_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopy_file_option(this);
}


antlrcpp::Any HqlsqlParser::Copy_file_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCopy_file_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Copy_file_optionContext* HqlsqlParser::copy_file_option() {
  Copy_file_optionContext *_localctx = _tracker.createInstance<Copy_file_optionContext>(_ctx, getState());
  enterRule(_localctx, 388, HqlsqlParser::RuleCopy_file_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3046);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_DELETE || _la == HqlsqlParser::T_IGNORE || _la == HqlsqlParser::T_OVERWRITE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Commit_stmtContext ------------------------------------------------------------------

HqlsqlParser::Commit_stmtContext::Commit_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Commit_stmtContext::T_COMMIT() {
  return getToken(HqlsqlParser::T_COMMIT, 0);
}

tree::TerminalNode* HqlsqlParser::Commit_stmtContext::T_WORK() {
  return getToken(HqlsqlParser::T_WORK, 0);
}


size_t HqlsqlParser::Commit_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCommit_stmt;
}

void HqlsqlParser::Commit_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommit_stmt(this);
}

void HqlsqlParser::Commit_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommit_stmt(this);
}


antlrcpp::Any HqlsqlParser::Commit_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCommit_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Commit_stmtContext* HqlsqlParser::commit_stmt() {
  Commit_stmtContext *_localctx = _tracker.createInstance<Commit_stmtContext>(_ctx, getState());
  enterRule(_localctx, 390, HqlsqlParser::RuleCommit_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3048);
    match(HqlsqlParser::T_COMMIT);
    setState(3050);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx)) {
    case 1: {
      setState(3049);
      match(HqlsqlParser::T_WORK);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_index_stmtContext ------------------------------------------------------------------

HqlsqlParser::Create_index_stmtContext::Create_index_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_INDEX() {
  return getToken(HqlsqlParser::T_INDEX, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_index_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Create_index_stmtContext::T_TABLE() {
  return getTokens(HqlsqlParser::T_TABLE);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_TABLE(size_t i) {
  return getToken(HqlsqlParser::T_TABLE, i);
}

std::vector<HqlsqlParser::Table_nameContext *> HqlsqlParser::Create_index_stmtContext::table_name() {
  return getRuleContexts<HqlsqlParser::Table_nameContext>();
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Create_index_stmtContext::table_name(size_t i) {
  return getRuleContext<HqlsqlParser::Table_nameContext>(i);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Create_index_stmtContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Create_index_stmtContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_DEFERRED() {
  return getToken(HqlsqlParser::T_DEFERRED, 0);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_REBUILD() {
  return getToken(HqlsqlParser::T_REBUILD, 0);
}

std::vector<HqlsqlParser::Property_values_partContext *> HqlsqlParser::Create_index_stmtContext::property_values_part() {
  return getRuleContexts<HqlsqlParser::Property_values_partContext>();
}

HqlsqlParser::Property_values_partContext* HqlsqlParser::Create_index_stmtContext::property_values_part(size_t i) {
  return getRuleContext<HqlsqlParser::Property_values_partContext>(i);
}

tree::TerminalNode* HqlsqlParser::Create_index_stmtContext::T_IN() {
  return getToken(HqlsqlParser::T_IN, 0);
}

HqlsqlParser::Row_format_partContext* HqlsqlParser::Create_index_stmtContext::row_format_part() {
  return getRuleContext<HqlsqlParser::Row_format_partContext>(0);
}

HqlsqlParser::Location_partContext* HqlsqlParser::Create_index_stmtContext::location_part() {
  return getRuleContext<HqlsqlParser::Location_partContext>(0);
}

HqlsqlParser::Comment_partContext* HqlsqlParser::Create_index_stmtContext::comment_part() {
  return getRuleContext<HqlsqlParser::Comment_partContext>(0);
}


size_t HqlsqlParser::Create_index_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_index_stmt;
}

void HqlsqlParser::Create_index_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_index_stmt(this);
}

void HqlsqlParser::Create_index_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_index_stmt(this);
}


antlrcpp::Any HqlsqlParser::Create_index_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_index_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_index_stmtContext* HqlsqlParser::create_index_stmt() {
  Create_index_stmtContext *_localctx = _tracker.createInstance<Create_index_stmtContext>(_ctx, getState());
  enterRule(_localctx, 392, HqlsqlParser::RuleCreate_index_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3052);
    match(HqlsqlParser::T_CREATE);
    setState(3053);
    match(HqlsqlParser::T_INDEX);
    setState(3054);
    ident();
    setState(3055);
    match(HqlsqlParser::T_ON);
    setState(3056);
    match(HqlsqlParser::T_TABLE);
    setState(3057);
    table_name();
    setState(3058);
    paren_column_list();
    setState(3059);
    match(HqlsqlParser::T_AS);
    setState(3060);
    dtype();
    setState(3064);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      setState(3061);
      match(HqlsqlParser::T_WITH);
      setState(3062);
      match(HqlsqlParser::T_DEFERRED);
      setState(3063);
      match(HqlsqlParser::T_REBUILD);
      break;
    }

    }
    setState(3067);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
    case 1: {
      setState(3066);
      property_values_part();
      break;
    }

    }
    setState(3072);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
    case 1: {
      setState(3069);
      match(HqlsqlParser::T_IN);
      setState(3070);
      match(HqlsqlParser::T_TABLE);
      setState(3071);
      table_name();
      break;
    }

    }
    setState(3075);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
    case 1: {
      setState(3074);
      row_format_part();
      break;
    }

    }
    setState(3078);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
    case 1: {
      setState(3077);
      location_part();
      break;
    }

    }
    setState(3081);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
    case 1: {
      setState(3080);
      property_values_part();
      break;
    }

    }
    setState(3084);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
    case 1: {
      setState(3083);
      comment_part();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_index_colContext ------------------------------------------------------------------

HqlsqlParser::Create_index_colContext::Create_index_colContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Create_index_colContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Create_index_colContext::T_ASC() {
  return getToken(HqlsqlParser::T_ASC, 0);
}

tree::TerminalNode* HqlsqlParser::Create_index_colContext::T_DESC() {
  return getToken(HqlsqlParser::T_DESC, 0);
}


size_t HqlsqlParser::Create_index_colContext::getRuleIndex() const {
  return HqlsqlParser::RuleCreate_index_col;
}

void HqlsqlParser::Create_index_colContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_index_col(this);
}

void HqlsqlParser::Create_index_colContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_index_col(this);
}


antlrcpp::Any HqlsqlParser::Create_index_colContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCreate_index_col(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Create_index_colContext* HqlsqlParser::create_index_col() {
  Create_index_colContext *_localctx = _tracker.createInstance<Create_index_colContext>(_ctx, getState());
  enterRule(_localctx, 394, HqlsqlParser::RuleCreate_index_col);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3086);
    ident();
    setState(3088);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC) {
      setState(3087);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_storage_clauseContext ------------------------------------------------------------------

HqlsqlParser::Index_storage_clauseContext::Index_storage_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Index_mssql_storage_clauseContext* HqlsqlParser::Index_storage_clauseContext::index_mssql_storage_clause() {
  return getRuleContext<HqlsqlParser::Index_mssql_storage_clauseContext>(0);
}


size_t HqlsqlParser::Index_storage_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleIndex_storage_clause;
}

void HqlsqlParser::Index_storage_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_storage_clause(this);
}

void HqlsqlParser::Index_storage_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_storage_clause(this);
}


antlrcpp::Any HqlsqlParser::Index_storage_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitIndex_storage_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Index_storage_clauseContext* HqlsqlParser::index_storage_clause() {
  Index_storage_clauseContext *_localctx = _tracker.createInstance<Index_storage_clauseContext>(_ctx, getState());
  enterRule(_localctx, 396, HqlsqlParser::RuleIndex_storage_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3090);
    index_mssql_storage_clause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_mssql_storage_clauseContext ------------------------------------------------------------------

HqlsqlParser::Index_mssql_storage_clauseContext::Index_mssql_storage_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Index_mssql_storage_clauseContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::Index_mssql_storage_clauseContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Index_mssql_storage_clauseContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Index_mssql_storage_clauseContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Index_mssql_storage_clauseContext::T_EQUAL() {
  return getTokens(HqlsqlParser::T_EQUAL);
}

tree::TerminalNode* HqlsqlParser::Index_mssql_storage_clauseContext::T_EQUAL(size_t i) {
  return getToken(HqlsqlParser::T_EQUAL, i);
}

tree::TerminalNode* HqlsqlParser::Index_mssql_storage_clauseContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Index_mssql_storage_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Index_mssql_storage_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

std::vector<HqlsqlParser::Create_table_options_mssql_itemContext *> HqlsqlParser::Index_mssql_storage_clauseContext::create_table_options_mssql_item() {
  return getRuleContexts<HqlsqlParser::Create_table_options_mssql_itemContext>();
}

HqlsqlParser::Create_table_options_mssql_itemContext* HqlsqlParser::Index_mssql_storage_clauseContext::create_table_options_mssql_item(size_t i) {
  return getRuleContext<HqlsqlParser::Create_table_options_mssql_itemContext>(i);
}


size_t HqlsqlParser::Index_mssql_storage_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleIndex_mssql_storage_clause;
}

void HqlsqlParser::Index_mssql_storage_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_mssql_storage_clause(this);
}

void HqlsqlParser::Index_mssql_storage_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_mssql_storage_clause(this);
}


antlrcpp::Any HqlsqlParser::Index_mssql_storage_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitIndex_mssql_storage_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Index_mssql_storage_clauseContext* HqlsqlParser::index_mssql_storage_clause() {
  Index_mssql_storage_clauseContext *_localctx = _tracker.createInstance<Index_mssql_storage_clauseContext>(_ctx, getState());
  enterRule(_localctx, 398, HqlsqlParser::RuleIndex_mssql_storage_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3092);
    match(HqlsqlParser::T_WITH);
    setState(3093);
    match(HqlsqlParser::T_OPEN_P);
    setState(3094);
    ident();
    setState(3095);
    match(HqlsqlParser::T_EQUAL);
    setState(3096);
    ident();
    setState(3104);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(3097);
      match(HqlsqlParser::T_COMMA);
      setState(3098);
      ident();
      setState(3099);
      match(HqlsqlParser::T_EQUAL);
      setState(3100);
      ident();
      setState(3106);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3107);
    match(HqlsqlParser::T_CLOSE_P);
    setState(3111);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_ON || _la == HqlsqlParser::T_TEXTIMAGE_ON) {
      setState(3108);
      create_table_options_mssql_item();
      setState(3113);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Print_stmtContext ------------------------------------------------------------------

HqlsqlParser::Print_stmtContext::Print_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Print_stmtContext::T_PRINT() {
  return getToken(HqlsqlParser::T_PRINT, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Print_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Print_stmtContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Print_stmtContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Print_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RulePrint_stmt;
}

void HqlsqlParser::Print_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrint_stmt(this);
}

void HqlsqlParser::Print_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrint_stmt(this);
}


antlrcpp::Any HqlsqlParser::Print_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPrint_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Print_stmtContext* HqlsqlParser::print_stmt() {
  Print_stmtContext *_localctx = _tracker.createInstance<Print_stmtContext>(_ctx, getState());
  enterRule(_localctx, 400, HqlsqlParser::RulePrint_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3121);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3114);
      match(HqlsqlParser::T_PRINT);
      setState(3115);
      expr(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3116);
      match(HqlsqlParser::T_PRINT);
      setState(3117);
      match(HqlsqlParser::T_OPEN_P);
      setState(3118);
      expr(0);
      setState(3119);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Quit_stmtContext ------------------------------------------------------------------

HqlsqlParser::Quit_stmtContext::Quit_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Quit_stmtContext::T_QUIT() {
  return getToken(HqlsqlParser::T_QUIT, 0);
}

tree::TerminalNode* HqlsqlParser::Quit_stmtContext::T_PERIOD() {
  return getToken(HqlsqlParser::T_PERIOD, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Quit_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Quit_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleQuit_stmt;
}

void HqlsqlParser::Quit_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuit_stmt(this);
}

void HqlsqlParser::Quit_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuit_stmt(this);
}


antlrcpp::Any HqlsqlParser::Quit_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitQuit_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Quit_stmtContext* HqlsqlParser::quit_stmt() {
  Quit_stmtContext *_localctx = _tracker.createInstance<Quit_stmtContext>(_ctx, getState());
  enterRule(_localctx, 402, HqlsqlParser::RuleQuit_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_PERIOD) {
      setState(3123);
      match(HqlsqlParser::T_PERIOD);
    }
    setState(3126);
    match(HqlsqlParser::T_QUIT);
    setState(3128);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
    case 1: {
      setState(3127);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raise_stmtContext ------------------------------------------------------------------

HqlsqlParser::Raise_stmtContext::Raise_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Raise_stmtContext::T_RAISE() {
  return getToken(HqlsqlParser::T_RAISE, 0);
}


size_t HqlsqlParser::Raise_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleRaise_stmt;
}

void HqlsqlParser::Raise_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRaise_stmt(this);
}

void HqlsqlParser::Raise_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRaise_stmt(this);
}


antlrcpp::Any HqlsqlParser::Raise_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitRaise_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Raise_stmtContext* HqlsqlParser::raise_stmt() {
  Raise_stmtContext *_localctx = _tracker.createInstance<Raise_stmtContext>(_ctx, getState());
  enterRule(_localctx, 404, HqlsqlParser::RuleRaise_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3130);
    match(HqlsqlParser::T_RAISE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Resignal_stmtContext ------------------------------------------------------------------

HqlsqlParser::Resignal_stmtContext::Resignal_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Resignal_stmtContext::T_RESIGNAL() {
  return getToken(HqlsqlParser::T_RESIGNAL, 0);
}

tree::TerminalNode* HqlsqlParser::Resignal_stmtContext::T_SQLSTATE() {
  return getToken(HqlsqlParser::T_SQLSTATE, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Resignal_stmtContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Resignal_stmtContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Resignal_stmtContext::T_VALUE() {
  return getToken(HqlsqlParser::T_VALUE, 0);
}

tree::TerminalNode* HqlsqlParser::Resignal_stmtContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

tree::TerminalNode* HqlsqlParser::Resignal_stmtContext::T_MESSAGE_TEXT() {
  return getToken(HqlsqlParser::T_MESSAGE_TEXT, 0);
}

tree::TerminalNode* HqlsqlParser::Resignal_stmtContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}


size_t HqlsqlParser::Resignal_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleResignal_stmt;
}

void HqlsqlParser::Resignal_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResignal_stmt(this);
}

void HqlsqlParser::Resignal_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResignal_stmt(this);
}


antlrcpp::Any HqlsqlParser::Resignal_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitResignal_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Resignal_stmtContext* HqlsqlParser::resignal_stmt() {
  Resignal_stmtContext *_localctx = _tracker.createInstance<Resignal_stmtContext>(_ctx, getState());
  enterRule(_localctx, 406, HqlsqlParser::RuleResignal_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3132);
    match(HqlsqlParser::T_RESIGNAL);
    setState(3144);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx)) {
    case 1: {
      setState(3133);
      match(HqlsqlParser::T_SQLSTATE);
      setState(3135);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx)) {
      case 1: {
        setState(3134);
        match(HqlsqlParser::T_VALUE);
        break;
      }

      }
      setState(3137);
      expr(0);
      setState(3142);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
      case 1: {
        setState(3138);
        match(HqlsqlParser::T_SET);
        setState(3139);
        match(HqlsqlParser::T_MESSAGE_TEXT);
        setState(3140);
        match(HqlsqlParser::T_EQUAL);
        setState(3141);
        expr(0);
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_stmtContext ------------------------------------------------------------------

HqlsqlParser::Return_stmtContext::Return_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Return_stmtContext::T_RETURN() {
  return getToken(HqlsqlParser::T_RETURN, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Return_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Return_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleReturn_stmt;
}

void HqlsqlParser::Return_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_stmt(this);
}

void HqlsqlParser::Return_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_stmt(this);
}


antlrcpp::Any HqlsqlParser::Return_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitReturn_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Return_stmtContext* HqlsqlParser::return_stmt() {
  Return_stmtContext *_localctx = _tracker.createInstance<Return_stmtContext>(_ctx, getState());
  enterRule(_localctx, 408, HqlsqlParser::RuleReturn_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3146);
    match(HqlsqlParser::T_RETURN);
    setState(3148);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      setState(3147);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rollback_stmtContext ------------------------------------------------------------------

HqlsqlParser::Rollback_stmtContext::Rollback_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Rollback_stmtContext::T_ROLLBACK() {
  return getToken(HqlsqlParser::T_ROLLBACK, 0);
}

tree::TerminalNode* HqlsqlParser::Rollback_stmtContext::T_WORK() {
  return getToken(HqlsqlParser::T_WORK, 0);
}


size_t HqlsqlParser::Rollback_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleRollback_stmt;
}

void HqlsqlParser::Rollback_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollback_stmt(this);
}

void HqlsqlParser::Rollback_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollback_stmt(this);
}


antlrcpp::Any HqlsqlParser::Rollback_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitRollback_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Rollback_stmtContext* HqlsqlParser::rollback_stmt() {
  Rollback_stmtContext *_localctx = _tracker.createInstance<Rollback_stmtContext>(_ctx, getState());
  enterRule(_localctx, 410, HqlsqlParser::RuleRollback_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3150);
    match(HqlsqlParser::T_ROLLBACK);
    setState(3152);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx)) {
    case 1: {
      setState(3151);
      match(HqlsqlParser::T_WORK);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_session_optionContext ------------------------------------------------------------------

HqlsqlParser::Set_session_optionContext::Set_session_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Set_current_schema_optionContext* HqlsqlParser::Set_session_optionContext::set_current_schema_option() {
  return getRuleContext<HqlsqlParser::Set_current_schema_optionContext>(0);
}

HqlsqlParser::Set_mssql_session_optionContext* HqlsqlParser::Set_session_optionContext::set_mssql_session_option() {
  return getRuleContext<HqlsqlParser::Set_mssql_session_optionContext>(0);
}

HqlsqlParser::Set_teradata_session_optionContext* HqlsqlParser::Set_session_optionContext::set_teradata_session_option() {
  return getRuleContext<HqlsqlParser::Set_teradata_session_optionContext>(0);
}


size_t HqlsqlParser::Set_session_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleSet_session_option;
}

void HqlsqlParser::Set_session_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_session_option(this);
}

void HqlsqlParser::Set_session_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_session_option(this);
}


antlrcpp::Any HqlsqlParser::Set_session_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSet_session_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Set_session_optionContext* HqlsqlParser::set_session_option() {
  Set_session_optionContext *_localctx = _tracker.createInstance<Set_session_optionContext>(_ctx, getState());
  enterRule(_localctx, 412, HqlsqlParser::RuleSet_session_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3157);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_SCHEMA: {
        enterOuterAlt(_localctx, 1);
        setState(3154);
        set_current_schema_option();
        break;
      }

      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_XACT_ABORT: {
        enterOuterAlt(_localctx, 2);
        setState(3155);
        set_mssql_session_option();
        break;
      }

      case HqlsqlParser::T_QUERY_BAND: {
        enterOuterAlt(_localctx, 3);
        setState(3156);
        set_teradata_session_option();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_current_schema_optionContext ------------------------------------------------------------------

HqlsqlParser::Set_current_schema_optionContext::Set_current_schema_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::ExprContext* HqlsqlParser::Set_current_schema_optionContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Set_current_schema_optionContext::T_CURRENT_SCHEMA() {
  return getToken(HqlsqlParser::T_CURRENT_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Set_current_schema_optionContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Set_current_schema_optionContext::T_SCHEMA() {
  return getToken(HqlsqlParser::T_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Set_current_schema_optionContext::T_CURRENT() {
  return getToken(HqlsqlParser::T_CURRENT, 0);
}


size_t HqlsqlParser::Set_current_schema_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleSet_current_schema_option;
}

void HqlsqlParser::Set_current_schema_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_current_schema_option(this);
}

void HqlsqlParser::Set_current_schema_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_current_schema_option(this);
}


antlrcpp::Any HqlsqlParser::Set_current_schema_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSet_current_schema_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Set_current_schema_optionContext* HqlsqlParser::set_current_schema_option() {
  Set_current_schema_optionContext *_localctx = _tracker.createInstance<Set_current_schema_optionContext>(_ctx, getState());
  enterRule(_localctx, 414, HqlsqlParser::RuleSet_current_schema_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3164);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_SCHEMA: {
        setState(3160);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_CURRENT) {
          setState(3159);
          match(HqlsqlParser::T_CURRENT);
        }
        setState(3162);
        match(HqlsqlParser::T_SCHEMA);
        break;
      }

      case HqlsqlParser::T_CURRENT_SCHEMA: {
        setState(3163);
        match(HqlsqlParser::T_CURRENT_SCHEMA);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_EQUAL) {
      setState(3166);
      match(HqlsqlParser::T_EQUAL);
    }
    setState(3169);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_mssql_session_optionContext ------------------------------------------------------------------

HqlsqlParser::Set_mssql_session_optionContext::Set_mssql_session_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Set_mssql_session_optionContext::T_ANSI_NULLS() {
  return getToken(HqlsqlParser::T_ANSI_NULLS, 0);
}

tree::TerminalNode* HqlsqlParser::Set_mssql_session_optionContext::T_ANSI_PADDING() {
  return getToken(HqlsqlParser::T_ANSI_PADDING, 0);
}

tree::TerminalNode* HqlsqlParser::Set_mssql_session_optionContext::T_NOCOUNT() {
  return getToken(HqlsqlParser::T_NOCOUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Set_mssql_session_optionContext::T_QUOTED_IDENTIFIER() {
  return getToken(HqlsqlParser::T_QUOTED_IDENTIFIER, 0);
}

tree::TerminalNode* HqlsqlParser::Set_mssql_session_optionContext::T_XACT_ABORT() {
  return getToken(HqlsqlParser::T_XACT_ABORT, 0);
}

tree::TerminalNode* HqlsqlParser::Set_mssql_session_optionContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

tree::TerminalNode* HqlsqlParser::Set_mssql_session_optionContext::T_OFF() {
  return getToken(HqlsqlParser::T_OFF, 0);
}


size_t HqlsqlParser::Set_mssql_session_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleSet_mssql_session_option;
}

void HqlsqlParser::Set_mssql_session_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_mssql_session_option(this);
}

void HqlsqlParser::Set_mssql_session_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_mssql_session_option(this);
}


antlrcpp::Any HqlsqlParser::Set_mssql_session_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSet_mssql_session_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Set_mssql_session_optionContext* HqlsqlParser::set_mssql_session_option() {
  Set_mssql_session_optionContext *_localctx = _tracker.createInstance<Set_mssql_session_optionContext>(_ctx, getState());
  enterRule(_localctx, 416, HqlsqlParser::RuleSet_mssql_session_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3171);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ANSI_NULLS

    || _la == HqlsqlParser::T_ANSI_PADDING || _la == HqlsqlParser::T_NOCOUNT

    || _la == HqlsqlParser::T_QUOTED_IDENTIFIER || _la == HqlsqlParser::T_XACT_ABORT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3172);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_OFF

    || _la == HqlsqlParser::T_ON)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_teradata_session_optionContext ------------------------------------------------------------------

HqlsqlParser::Set_teradata_session_optionContext::Set_teradata_session_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Set_teradata_session_optionContext::T_QUERY_BAND() {
  return getToken(HqlsqlParser::T_QUERY_BAND, 0);
}

tree::TerminalNode* HqlsqlParser::Set_teradata_session_optionContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Set_teradata_session_optionContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::Set_teradata_session_optionContext::T_TRANSACTION() {
  return getToken(HqlsqlParser::T_TRANSACTION, 0);
}

tree::TerminalNode* HqlsqlParser::Set_teradata_session_optionContext::T_SESSION() {
  return getToken(HqlsqlParser::T_SESSION, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Set_teradata_session_optionContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Set_teradata_session_optionContext::T_NONE() {
  return getToken(HqlsqlParser::T_NONE, 0);
}

tree::TerminalNode* HqlsqlParser::Set_teradata_session_optionContext::T_UPDATE() {
  return getToken(HqlsqlParser::T_UPDATE, 0);
}


size_t HqlsqlParser::Set_teradata_session_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleSet_teradata_session_option;
}

void HqlsqlParser::Set_teradata_session_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_teradata_session_option(this);
}

void HqlsqlParser::Set_teradata_session_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_teradata_session_option(this);
}


antlrcpp::Any HqlsqlParser::Set_teradata_session_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSet_teradata_session_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Set_teradata_session_optionContext* HqlsqlParser::set_teradata_session_option() {
  Set_teradata_session_optionContext *_localctx = _tracker.createInstance<Set_teradata_session_optionContext>(_ctx, getState());
  enterRule(_localctx, 418, HqlsqlParser::RuleSet_teradata_session_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3174);
    match(HqlsqlParser::T_QUERY_BAND);
    setState(3175);
    match(HqlsqlParser::T_EQUAL);
    setState(3178);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 363, _ctx)) {
    case 1: {
      setState(3176);
      expr(0);
      break;
    }

    case 2: {
      setState(3177);
      match(HqlsqlParser::T_NONE);
      break;
    }

    }
    setState(3181);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_UPDATE) {
      setState(3180);
      match(HqlsqlParser::T_UPDATE);
    }
    setState(3183);
    match(HqlsqlParser::T_FOR);
    setState(3184);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_SESSION

    || _la == HqlsqlParser::T_TRANSACTION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signal_stmtContext ------------------------------------------------------------------

HqlsqlParser::Signal_stmtContext::Signal_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Signal_stmtContext::T_SIGNAL() {
  return getToken(HqlsqlParser::T_SIGNAL, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Signal_stmtContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Signal_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleSignal_stmt;
}

void HqlsqlParser::Signal_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSignal_stmt(this);
}

void HqlsqlParser::Signal_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSignal_stmt(this);
}


antlrcpp::Any HqlsqlParser::Signal_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSignal_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Signal_stmtContext* HqlsqlParser::signal_stmt() {
  Signal_stmtContext *_localctx = _tracker.createInstance<Signal_stmtContext>(_ctx, getState());
  enterRule(_localctx, 420, HqlsqlParser::RuleSignal_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3186);
    match(HqlsqlParser::T_SIGNAL);
    setState(3187);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Summary_stmtContext ------------------------------------------------------------------

HqlsqlParser::Summary_stmtContext::Summary_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Summary_stmtContext::T_SUMMARY() {
  return getToken(HqlsqlParser::T_SUMMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Summary_stmtContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Summary_stmtContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Summary_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Summary_stmtContext::T_TOP() {
  return getToken(HqlsqlParser::T_TOP, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Summary_stmtContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Summary_stmtContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

HqlsqlParser::Where_clauseContext* HqlsqlParser::Summary_stmtContext::where_clause() {
  return getRuleContext<HqlsqlParser::Where_clauseContext>(0);
}

tree::TerminalNode* HqlsqlParser::Summary_stmtContext::T_LIMIT() {
  return getToken(HqlsqlParser::T_LIMIT, 0);
}


size_t HqlsqlParser::Summary_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleSummary_stmt;
}

void HqlsqlParser::Summary_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSummary_stmt(this);
}

void HqlsqlParser::Summary_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSummary_stmt(this);
}


antlrcpp::Any HqlsqlParser::Summary_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSummary_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Summary_stmtContext* HqlsqlParser::summary_stmt() {
  Summary_stmtContext *_localctx = _tracker.createInstance<Summary_stmtContext>(_ctx, getState());
  enterRule(_localctx, 422, HqlsqlParser::RuleSummary_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3189);
    match(HqlsqlParser::T_SUMMARY);
    setState(3192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_TOP) {
      setState(3190);
      match(HqlsqlParser::T_TOP);
      setState(3191);
      expr(0);
    }
    setState(3194);
    match(HqlsqlParser::T_FOR);
    setState(3204);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      setState(3195);
      select_stmt();
      break;
    }

    case 2: {
      setState(3196);
      table_name();
      setState(3198);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 366, _ctx)) {
      case 1: {
        setState(3197);
        where_clause();
        break;
      }

      }
      setState(3202);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx)) {
      case 1: {
        setState(3200);
        match(HqlsqlParser::T_LIMIT);
        setState(3201);
        expr(0);
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Truncate_table_stmtContext ------------------------------------------------------------------

HqlsqlParser::Truncate_table_stmtContext::Truncate_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Truncate_table_stmtContext::T_TRUNCATE() {
  return getToken(HqlsqlParser::T_TRUNCATE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Truncate_table_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Truncate_table_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Truncate_table_stmtContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}


size_t HqlsqlParser::Truncate_table_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleTruncate_table_stmt;
}

void HqlsqlParser::Truncate_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTruncate_table_stmt(this);
}

void HqlsqlParser::Truncate_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTruncate_table_stmt(this);
}


antlrcpp::Any HqlsqlParser::Truncate_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTruncate_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Truncate_table_stmtContext* HqlsqlParser::truncate_table_stmt() {
  Truncate_table_stmtContext *_localctx = _tracker.createInstance<Truncate_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 424, HqlsqlParser::RuleTruncate_table_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3206);
    match(HqlsqlParser::T_TRUNCATE);
    setState(3208);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx)) {
    case 1: {
      setState(3207);
      match(HqlsqlParser::T_TABLE);
      break;
    }

    }
    setState(3210);
    table_name();
    setState(3212);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx)) {
    case 1: {
      setState(3211);
      partition_assignment_list();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_assignment_listContext ------------------------------------------------------------------

HqlsqlParser::Partition_assignment_listContext::Partition_assignment_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Partition_assignment_listContext::T_PARTITION() {
  return getToken(HqlsqlParser::T_PARTITION, 0);
}

HqlsqlParser::Partition_specContext* HqlsqlParser::Partition_assignment_listContext::partition_spec() {
  return getRuleContext<HqlsqlParser::Partition_specContext>(0);
}

tree::TerminalNode* HqlsqlParser::Partition_assignment_listContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Partition_assignment_listContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Partition_assignment_listContext::getRuleIndex() const {
  return HqlsqlParser::RulePartition_assignment_list;
}

void HqlsqlParser::Partition_assignment_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_assignment_list(this);
}

void HqlsqlParser::Partition_assignment_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_assignment_list(this);
}


antlrcpp::Any HqlsqlParser::Partition_assignment_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPartition_assignment_list(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::partition_assignment_list() {
  Partition_assignment_listContext *_localctx = _tracker.createInstance<Partition_assignment_listContext>(_ctx, getState());
  enterRule(_localctx, 426, HqlsqlParser::RulePartition_assignment_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3214);
    match(HqlsqlParser::T_PARTITION);
    setState(3216);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
    case 1: {
      setState(3215);
      match(HqlsqlParser::T_OPEN_P);
      break;
    }

    }
    setState(3218);
    partition_spec();
    setState(3220);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 372, _ctx)) {
    case 1: {
      setState(3219);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_specContext ------------------------------------------------------------------

HqlsqlParser::Partition_specContext::Partition_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Partition_specContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::Assignment_stmt_single_itemContext *> HqlsqlParser::Partition_specContext::assignment_stmt_single_item() {
  return getRuleContexts<HqlsqlParser::Assignment_stmt_single_itemContext>();
}

HqlsqlParser::Assignment_stmt_single_itemContext* HqlsqlParser::Partition_specContext::assignment_stmt_single_item(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_stmt_single_itemContext>(i);
}

tree::TerminalNode* HqlsqlParser::Partition_specContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Partition_specContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Partition_specContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Partition_specContext::getRuleIndex() const {
  return HqlsqlParser::RulePartition_spec;
}

void HqlsqlParser::Partition_specContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_spec(this);
}

void HqlsqlParser::Partition_specContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_spec(this);
}


antlrcpp::Any HqlsqlParser::Partition_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitPartition_spec(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Partition_specContext* HqlsqlParser::partition_spec() {
  Partition_specContext *_localctx = _tracker.createInstance<Partition_specContext>(_ctx, getState());
  enterRule(_localctx, 428, HqlsqlParser::RulePartition_spec);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3222);
    match(HqlsqlParser::T_OPEN_P);
    setState(3223);
    assignment_stmt_single_item();
    setState(3228);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(3224);
      match(HqlsqlParser::T_COMMA);
      setState(3225);
      assignment_stmt_single_item();
      setState(3230);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3231);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_stmtContext ------------------------------------------------------------------

HqlsqlParser::Use_stmtContext::Use_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Use_stmtContext::T_USE() {
  return getToken(HqlsqlParser::T_USE, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Use_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Use_stmtContext::T_DEFAULT() {
  return getToken(HqlsqlParser::T_DEFAULT, 0);
}


size_t HqlsqlParser::Use_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleUse_stmt;
}

void HqlsqlParser::Use_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_stmt(this);
}

void HqlsqlParser::Use_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_stmt(this);
}


antlrcpp::Any HqlsqlParser::Use_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitUse_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Use_stmtContext* HqlsqlParser::use_stmt() {
  Use_stmtContext *_localctx = _tracker.createInstance<Use_stmtContext>(_ctx, getState());
  enterRule(_localctx, 430, HqlsqlParser::RuleUse_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3233);
    match(HqlsqlParser::T_USE);
    setState(3236);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
    case 1: {
      setState(3234);
      expr(0);
      break;
    }

    case 2: {
      setState(3235);
      match(HqlsqlParser::T_DEFAULT);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Values_into_stmtContext ------------------------------------------------------------------

HqlsqlParser::Values_into_stmtContext::Values_into_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Values_into_stmtContext::T_VALUES() {
  return getToken(HqlsqlParser::T_VALUES, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Values_into_stmtContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Values_into_stmtContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Values_into_stmtContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Values_into_stmtContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Values_into_stmtContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Values_into_stmtContext::T_OPEN_P() {
  return getTokens(HqlsqlParser::T_OPEN_P);
}

tree::TerminalNode* HqlsqlParser::Values_into_stmtContext::T_OPEN_P(size_t i) {
  return getToken(HqlsqlParser::T_OPEN_P, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Values_into_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Values_into_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Values_into_stmtContext::T_CLOSE_P() {
  return getTokens(HqlsqlParser::T_CLOSE_P);
}

tree::TerminalNode* HqlsqlParser::Values_into_stmtContext::T_CLOSE_P(size_t i) {
  return getToken(HqlsqlParser::T_CLOSE_P, i);
}


size_t HqlsqlParser::Values_into_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleValues_into_stmt;
}

void HqlsqlParser::Values_into_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValues_into_stmt(this);
}

void HqlsqlParser::Values_into_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValues_into_stmt(this);
}


antlrcpp::Any HqlsqlParser::Values_into_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitValues_into_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Values_into_stmtContext* HqlsqlParser::values_into_stmt() {
  Values_into_stmtContext *_localctx = _tracker.createInstance<Values_into_stmtContext>(_ctx, getState());
  enterRule(_localctx, 432, HqlsqlParser::RuleValues_into_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3238);
    match(HqlsqlParser::T_VALUES);
    setState(3240);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      setState(3239);
      match(HqlsqlParser::T_OPEN_P);
      break;
    }

    }
    setState(3242);
    expr(0);
    setState(3247);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(3243);
      match(HqlsqlParser::T_COMMA);
      setState(3244);
      expr(0);
      setState(3249);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_CLOSE_P) {
      setState(3250);
      match(HqlsqlParser::T_CLOSE_P);
    }
    setState(3253);
    match(HqlsqlParser::T_INTO);
    setState(3255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_OPEN_P) {
      setState(3254);
      match(HqlsqlParser::T_OPEN_P);
    }
    setState(3257);
    ident();
    setState(3262);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3258);
        match(HqlsqlParser::T_COMMA);
        setState(3259);
        ident(); 
      }
      setState(3264);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx);
    }
    setState(3266);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
    case 1: {
      setState(3265);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_stmtContext ------------------------------------------------------------------

HqlsqlParser::While_stmtContext::While_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::While_stmtContext::T_WHILE() {
  return getTokens(HqlsqlParser::T_WHILE);
}

tree::TerminalNode* HqlsqlParser::While_stmtContext::T_WHILE(size_t i) {
  return getToken(HqlsqlParser::T_WHILE, i);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::While_stmtContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

HqlsqlParser::BlockContext* HqlsqlParser::While_stmtContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

tree::TerminalNode* HqlsqlParser::While_stmtContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

tree::TerminalNode* HqlsqlParser::While_stmtContext::T_DO() {
  return getToken(HqlsqlParser::T_DO, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::While_stmtContext::T_LOOP() {
  return getTokens(HqlsqlParser::T_LOOP);
}

tree::TerminalNode* HqlsqlParser::While_stmtContext::T_LOOP(size_t i) {
  return getToken(HqlsqlParser::T_LOOP, i);
}

tree::TerminalNode* HqlsqlParser::While_stmtContext::T_THEN() {
  return getToken(HqlsqlParser::T_THEN, 0);
}

tree::TerminalNode* HqlsqlParser::While_stmtContext::T_BEGIN() {
  return getToken(HqlsqlParser::T_BEGIN, 0);
}


size_t HqlsqlParser::While_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleWhile_stmt;
}

void HqlsqlParser::While_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_stmt(this);
}

void HqlsqlParser::While_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_stmt(this);
}


antlrcpp::Any HqlsqlParser::While_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitWhile_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::While_stmtContext* HqlsqlParser::while_stmt() {
  While_stmtContext *_localctx = _tracker.createInstance<While_stmtContext>(_ctx, getState());
  enterRule(_localctx, 434, HqlsqlParser::RuleWhile_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3268);
    match(HqlsqlParser::T_WHILE);
    setState(3269);
    bool_expr(0);
    setState(3270);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_BEGIN || _la == HqlsqlParser::T_DO || _la == HqlsqlParser::T_LOOP || _la == HqlsqlParser::T_THEN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3271);
    block();
    setState(3272);
    match(HqlsqlParser::T_END);
    setState(3274);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      setState(3273);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_LOOP || _la == HqlsqlParser::T_WHILE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_cursor_stmtContext ------------------------------------------------------------------

HqlsqlParser::For_cursor_stmtContext::For_cursor_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::For_cursor_stmtContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::For_cursor_stmtContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}

tree::TerminalNode* HqlsqlParser::For_cursor_stmtContext::T_IN() {
  return getToken(HqlsqlParser::T_IN, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::For_cursor_stmtContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::For_cursor_stmtContext::T_LOOP() {
  return getTokens(HqlsqlParser::T_LOOP);
}

tree::TerminalNode* HqlsqlParser::For_cursor_stmtContext::T_LOOP(size_t i) {
  return getToken(HqlsqlParser::T_LOOP, i);
}

HqlsqlParser::BlockContext* HqlsqlParser::For_cursor_stmtContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

tree::TerminalNode* HqlsqlParser::For_cursor_stmtContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

tree::TerminalNode* HqlsqlParser::For_cursor_stmtContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::For_cursor_stmtContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::For_cursor_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleFor_cursor_stmt;
}

void HqlsqlParser::For_cursor_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_cursor_stmt(this);
}

void HqlsqlParser::For_cursor_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_cursor_stmt(this);
}


antlrcpp::Any HqlsqlParser::For_cursor_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFor_cursor_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::For_cursor_stmtContext* HqlsqlParser::for_cursor_stmt() {
  For_cursor_stmtContext *_localctx = _tracker.createInstance<For_cursor_stmtContext>(_ctx, getState());
  enterRule(_localctx, 436, HqlsqlParser::RuleFor_cursor_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3276);
    match(HqlsqlParser::T_FOR);
    setState(3277);
    match(HqlsqlParser::L_ID);
    setState(3278);
    match(HqlsqlParser::T_IN);
    setState(3280);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
    case 1: {
      setState(3279);
      match(HqlsqlParser::T_OPEN_P);
      break;
    }

    }
    setState(3282);
    select_stmt();
    setState(3284);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_CLOSE_P) {
      setState(3283);
      match(HqlsqlParser::T_CLOSE_P);
    }
    setState(3286);
    match(HqlsqlParser::T_LOOP);
    setState(3287);
    block();
    setState(3288);
    match(HqlsqlParser::T_END);
    setState(3289);
    match(HqlsqlParser::T_LOOP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_range_stmtContext ------------------------------------------------------------------

HqlsqlParser::For_range_stmtContext::For_range_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_IN() {
  return getToken(HqlsqlParser::T_IN, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::For_range_stmtContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::For_range_stmtContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_DOT2() {
  return getToken(HqlsqlParser::T_DOT2, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::For_range_stmtContext::T_LOOP() {
  return getTokens(HqlsqlParser::T_LOOP);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_LOOP(size_t i) {
  return getToken(HqlsqlParser::T_LOOP, i);
}

HqlsqlParser::BlockContext* HqlsqlParser::For_range_stmtContext::block() {
  return getRuleContext<HqlsqlParser::BlockContext>(0);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_REVERSE() {
  return getToken(HqlsqlParser::T_REVERSE, 0);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

tree::TerminalNode* HqlsqlParser::For_range_stmtContext::T_STEP() {
  return getToken(HqlsqlParser::T_STEP, 0);
}


size_t HqlsqlParser::For_range_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleFor_range_stmt;
}

void HqlsqlParser::For_range_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_range_stmt(this);
}

void HqlsqlParser::For_range_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_range_stmt(this);
}


antlrcpp::Any HqlsqlParser::For_range_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFor_range_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::For_range_stmtContext* HqlsqlParser::for_range_stmt() {
  For_range_stmtContext *_localctx = _tracker.createInstance<For_range_stmtContext>(_ctx, getState());
  enterRule(_localctx, 438, HqlsqlParser::RuleFor_range_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3291);
    match(HqlsqlParser::T_FOR);
    setState(3292);
    match(HqlsqlParser::L_ID);
    setState(3293);
    match(HqlsqlParser::T_IN);
    setState(3295);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      setState(3294);
      match(HqlsqlParser::T_REVERSE);
      break;
    }

    }
    setState(3297);
    expr(0);
    setState(3298);
    match(HqlsqlParser::T_DOT2);
    setState(3299);
    expr(0);
    setState(3302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_BY || _la == HqlsqlParser::T_STEP) {
      setState(3300);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_BY || _la == HqlsqlParser::T_STEP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3301);
      expr(0);
    }
    setState(3304);
    match(HqlsqlParser::T_LOOP);
    setState(3305);
    block();
    setState(3306);
    match(HqlsqlParser::T_END);
    setState(3307);
    match(HqlsqlParser::T_LOOP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

HqlsqlParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Label_patternContext* HqlsqlParser::LabelContext::label_pattern() {
  return getRuleContext<HqlsqlParser::Label_patternContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::LabelContext::T_LESS() {
  return getTokens(HqlsqlParser::T_LESS);
}

tree::TerminalNode* HqlsqlParser::LabelContext::T_LESS(size_t i) {
  return getToken(HqlsqlParser::T_LESS, i);
}

tree::TerminalNode* HqlsqlParser::LabelContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::LabelContext::T_GREATER() {
  return getTokens(HqlsqlParser::T_GREATER);
}

tree::TerminalNode* HqlsqlParser::LabelContext::T_GREATER(size_t i) {
  return getToken(HqlsqlParser::T_GREATER, i);
}


size_t HqlsqlParser::LabelContext::getRuleIndex() const {
  return HqlsqlParser::RuleLabel;
}

void HqlsqlParser::LabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabel(this);
}

void HqlsqlParser::LabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabel(this);
}


antlrcpp::Any HqlsqlParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::LabelContext* HqlsqlParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 440, HqlsqlParser::RuleLabel);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3315);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_COLON:
      case HqlsqlParser::T_UNDERLINE:
      case HqlsqlParser::L_ALPHA:
      case HqlsqlParser::L_DIGIT: {
        enterOuterAlt(_localctx, 1);
        setState(3309);
        label_pattern();
        break;
      }

      case HqlsqlParser::T_LESS: {
        enterOuterAlt(_localctx, 2);
        setState(3310);
        match(HqlsqlParser::T_LESS);
        setState(3311);
        match(HqlsqlParser::T_LESS);
        setState(3312);
        match(HqlsqlParser::L_ID);
        setState(3313);
        match(HqlsqlParser::T_GREATER);
        setState(3314);
        match(HqlsqlParser::T_GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Label_patternContext ------------------------------------------------------------------

HqlsqlParser::Label_patternContext::Label_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::Label_patternContext::L_ALPHA() {
  return getTokens(HqlsqlParser::L_ALPHA);
}

tree::TerminalNode* HqlsqlParser::Label_patternContext::L_ALPHA(size_t i) {
  return getToken(HqlsqlParser::L_ALPHA, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Label_patternContext::L_DIGIT() {
  return getTokens(HqlsqlParser::L_DIGIT);
}

tree::TerminalNode* HqlsqlParser::Label_patternContext::L_DIGIT(size_t i) {
  return getToken(HqlsqlParser::L_DIGIT, i);
}


size_t HqlsqlParser::Label_patternContext::getRuleIndex() const {
  return HqlsqlParser::RuleLabel_pattern;
}

void HqlsqlParser::Label_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabel_pattern(this);
}

void HqlsqlParser::Label_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabel_pattern(this);
}


antlrcpp::Any HqlsqlParser::Label_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitLabel_pattern(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Label_patternContext* HqlsqlParser::label_pattern() {
  Label_patternContext *_localctx = _tracker.createInstance<Label_patternContext>(_ctx, getState());
  enterRule(_localctx, 442, HqlsqlParser::RuleLabel_pattern);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3320);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 492) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 492)) & ((1ULL << (HqlsqlParser::T_UNDERLINE - 492))
      | (1ULL << (HqlsqlParser::L_ALPHA - 492))
      | (1ULL << (HqlsqlParser::L_DIGIT - 492)))) != 0)) {
      setState(3317);
      _la = _input->LA(1);
      if (!(((((_la - 492) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 492)) & ((1ULL << (HqlsqlParser::T_UNDERLINE - 492))
        | (1ULL << (HqlsqlParser::L_ALPHA - 492))
        | (1ULL << (HqlsqlParser::L_DIGIT - 492)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3322);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3323);
    match(HqlsqlParser::T_COLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Using_clauseContext ------------------------------------------------------------------

HqlsqlParser::Using_clauseContext::Using_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Using_clauseContext::T_USING() {
  return getToken(HqlsqlParser::T_USING, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Using_clauseContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Using_clauseContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Using_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Using_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Using_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleUsing_clause;
}

void HqlsqlParser::Using_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsing_clause(this);
}

void HqlsqlParser::Using_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsing_clause(this);
}


antlrcpp::Any HqlsqlParser::Using_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitUsing_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Using_clauseContext* HqlsqlParser::using_clause() {
  Using_clauseContext *_localctx = _tracker.createInstance<Using_clauseContext>(_ctx, getState());
  enterRule(_localctx, 444, HqlsqlParser::RuleUsing_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3325);
    match(HqlsqlParser::T_USING);
    setState(3326);
    expr(0);
    setState(3331);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3327);
        match(HqlsqlParser::T_COMMA);
        setState(3328);
        expr(0); 
      }
      setState(3333);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_stmtContext ------------------------------------------------------------------

HqlsqlParser::Select_stmtContext::Select_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Fullselect_stmtContext* HqlsqlParser::Select_stmtContext::fullselect_stmt() {
  return getRuleContext<HqlsqlParser::Fullselect_stmtContext>(0);
}

HqlsqlParser::Cte_select_stmtContext* HqlsqlParser::Select_stmtContext::cte_select_stmt() {
  return getRuleContext<HqlsqlParser::Cte_select_stmtContext>(0);
}


size_t HqlsqlParser::Select_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_stmt;
}

void HqlsqlParser::Select_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_stmt(this);
}

void HqlsqlParser::Select_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_stmt(this);
}


antlrcpp::Any HqlsqlParser::Select_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::select_stmt() {
  Select_stmtContext *_localctx = _tracker.createInstance<Select_stmtContext>(_ctx, getState());
  enterRule(_localctx, 446, HqlsqlParser::RuleSelect_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3335);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_WITH) {
      setState(3334);
      cte_select_stmt();
    }
    setState(3337);
    fullselect_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cte_select_stmtContext ------------------------------------------------------------------

HqlsqlParser::Cte_select_stmtContext::Cte_select_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Cte_select_stmtContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

std::vector<HqlsqlParser::Common_table_expressionContext *> HqlsqlParser::Cte_select_stmtContext::common_table_expression() {
  return getRuleContexts<HqlsqlParser::Common_table_expressionContext>();
}

HqlsqlParser::Common_table_expressionContext* HqlsqlParser::Cte_select_stmtContext::common_table_expression(size_t i) {
  return getRuleContext<HqlsqlParser::Common_table_expressionContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Cte_select_stmtContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Cte_select_stmtContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Cte_select_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleCte_select_stmt;
}

void HqlsqlParser::Cte_select_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCte_select_stmt(this);
}

void HqlsqlParser::Cte_select_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCte_select_stmt(this);
}


antlrcpp::Any HqlsqlParser::Cte_select_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCte_select_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cte_select_stmtContext* HqlsqlParser::cte_select_stmt() {
  Cte_select_stmtContext *_localctx = _tracker.createInstance<Cte_select_stmtContext>(_ctx, getState());
  enterRule(_localctx, 448, HqlsqlParser::RuleCte_select_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3339);
    match(HqlsqlParser::T_WITH);
    setState(3340);
    common_table_expression();
    setState(3345);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(3341);
      match(HqlsqlParser::T_COMMA);
      setState(3342);
      common_table_expression();
      setState(3347);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Common_table_expressionContext ------------------------------------------------------------------

HqlsqlParser::Common_table_expressionContext::Common_table_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Common_table_expressionContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Common_table_expressionContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Common_table_expressionContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Fullselect_stmtContext* HqlsqlParser::Common_table_expressionContext::fullselect_stmt() {
  return getRuleContext<HqlsqlParser::Fullselect_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Common_table_expressionContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Cte_select_colsContext* HqlsqlParser::Common_table_expressionContext::cte_select_cols() {
  return getRuleContext<HqlsqlParser::Cte_select_colsContext>(0);
}


size_t HqlsqlParser::Common_table_expressionContext::getRuleIndex() const {
  return HqlsqlParser::RuleCommon_table_expression;
}

void HqlsqlParser::Common_table_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommon_table_expression(this);
}

void HqlsqlParser::Common_table_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommon_table_expression(this);
}


antlrcpp::Any HqlsqlParser::Common_table_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCommon_table_expression(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Common_table_expressionContext* HqlsqlParser::common_table_expression() {
  Common_table_expressionContext *_localctx = _tracker.createInstance<Common_table_expressionContext>(_ctx, getState());
  enterRule(_localctx, 450, HqlsqlParser::RuleCommon_table_expression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3348);
    ident();
    setState(3350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_OPEN_P) {
      setState(3349);
      cte_select_cols();
    }
    setState(3352);
    match(HqlsqlParser::T_AS);
    setState(3353);
    match(HqlsqlParser::T_OPEN_P);
    setState(3354);
    fullselect_stmt();
    setState(3355);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cte_select_colsContext ------------------------------------------------------------------

HqlsqlParser::Cte_select_colsContext::Cte_select_colsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Cte_select_colsContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::Cte_select_colContext *> HqlsqlParser::Cte_select_colsContext::cte_select_col() {
  return getRuleContexts<HqlsqlParser::Cte_select_colContext>();
}

HqlsqlParser::Cte_select_colContext* HqlsqlParser::Cte_select_colsContext::cte_select_col(size_t i) {
  return getRuleContext<HqlsqlParser::Cte_select_colContext>(i);
}

tree::TerminalNode* HqlsqlParser::Cte_select_colsContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Cte_select_colsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Cte_select_colsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Cte_select_colsContext::getRuleIndex() const {
  return HqlsqlParser::RuleCte_select_cols;
}

void HqlsqlParser::Cte_select_colsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCte_select_cols(this);
}

void HqlsqlParser::Cte_select_colsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCte_select_cols(this);
}


antlrcpp::Any HqlsqlParser::Cte_select_colsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCte_select_cols(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cte_select_colsContext* HqlsqlParser::cte_select_cols() {
  Cte_select_colsContext *_localctx = _tracker.createInstance<Cte_select_colsContext>(_ctx, getState());
  enterRule(_localctx, 452, HqlsqlParser::RuleCte_select_cols);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3357);
    match(HqlsqlParser::T_OPEN_P);
    setState(3358);
    cte_select_col();
    setState(3363);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(3359);
      match(HqlsqlParser::T_COMMA);
      setState(3360);
      cte_select_col();
      setState(3365);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3366);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cte_select_colContext ------------------------------------------------------------------

HqlsqlParser::Cte_select_colContext::Cte_select_colContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Cte_select_colContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Cte_select_colContext::getRuleIndex() const {
  return HqlsqlParser::RuleCte_select_col;
}

void HqlsqlParser::Cte_select_colContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCte_select_col(this);
}

void HqlsqlParser::Cte_select_colContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCte_select_col(this);
}


antlrcpp::Any HqlsqlParser::Cte_select_colContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCte_select_col(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cte_select_colContext* HqlsqlParser::cte_select_col() {
  Cte_select_colContext *_localctx = _tracker.createInstance<Cte_select_colContext>(_ctx, getState());
  enterRule(_localctx, 454, HqlsqlParser::RuleCte_select_col);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3368);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fullselect_stmtContext ------------------------------------------------------------------

HqlsqlParser::Fullselect_stmtContext::Fullselect_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Fullselect_stmt_itemContext *> HqlsqlParser::Fullselect_stmtContext::fullselect_stmt_item() {
  return getRuleContexts<HqlsqlParser::Fullselect_stmt_itemContext>();
}

HqlsqlParser::Fullselect_stmt_itemContext* HqlsqlParser::Fullselect_stmtContext::fullselect_stmt_item(size_t i) {
  return getRuleContext<HqlsqlParser::Fullselect_stmt_itemContext>(i);
}

std::vector<HqlsqlParser::Fullselect_set_clauseContext *> HqlsqlParser::Fullselect_stmtContext::fullselect_set_clause() {
  return getRuleContexts<HqlsqlParser::Fullselect_set_clauseContext>();
}

HqlsqlParser::Fullselect_set_clauseContext* HqlsqlParser::Fullselect_stmtContext::fullselect_set_clause(size_t i) {
  return getRuleContext<HqlsqlParser::Fullselect_set_clauseContext>(i);
}


size_t HqlsqlParser::Fullselect_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleFullselect_stmt;
}

void HqlsqlParser::Fullselect_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFullselect_stmt(this);
}

void HqlsqlParser::Fullselect_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFullselect_stmt(this);
}


antlrcpp::Any HqlsqlParser::Fullselect_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFullselect_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Fullselect_stmtContext* HqlsqlParser::fullselect_stmt() {
  Fullselect_stmtContext *_localctx = _tracker.createInstance<Fullselect_stmtContext>(_ctx, getState());
  enterRule(_localctx, 456, HqlsqlParser::RuleFullselect_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3370);
    fullselect_stmt_item();
    setState(3376);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3371);
        fullselect_set_clause();
        setState(3372);
        fullselect_stmt_item(); 
      }
      setState(3378);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fullselect_stmt_itemContext ------------------------------------------------------------------

HqlsqlParser::Fullselect_stmt_itemContext::Fullselect_stmt_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Subselect_stmtContext* HqlsqlParser::Fullselect_stmt_itemContext::subselect_stmt() {
  return getRuleContext<HqlsqlParser::Subselect_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Fullselect_stmt_itemContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Fullselect_stmtContext* HqlsqlParser::Fullselect_stmt_itemContext::fullselect_stmt() {
  return getRuleContext<HqlsqlParser::Fullselect_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Fullselect_stmt_itemContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Fullselect_stmt_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleFullselect_stmt_item;
}

void HqlsqlParser::Fullselect_stmt_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFullselect_stmt_item(this);
}

void HqlsqlParser::Fullselect_stmt_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFullselect_stmt_item(this);
}


antlrcpp::Any HqlsqlParser::Fullselect_stmt_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFullselect_stmt_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Fullselect_stmt_itemContext* HqlsqlParser::fullselect_stmt_item() {
  Fullselect_stmt_itemContext *_localctx = _tracker.createInstance<Fullselect_stmt_itemContext>(_ctx, getState());
  enterRule(_localctx, 458, HqlsqlParser::RuleFullselect_stmt_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3384);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_FROM:
      case HqlsqlParser::T_SELECT: {
        enterOuterAlt(_localctx, 1);
        setState(3379);
        subselect_stmt();
        break;
      }

      case HqlsqlParser::T_OPEN_P: {
        enterOuterAlt(_localctx, 2);
        setState(3380);
        match(HqlsqlParser::T_OPEN_P);
        setState(3381);
        fullselect_stmt();
        setState(3382);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fullselect_set_clauseContext ------------------------------------------------------------------

HqlsqlParser::Fullselect_set_clauseContext::Fullselect_set_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Fullselect_set_clauseContext::T_UNION() {
  return getToken(HqlsqlParser::T_UNION, 0);
}

tree::TerminalNode* HqlsqlParser::Fullselect_set_clauseContext::T_ALL() {
  return getToken(HqlsqlParser::T_ALL, 0);
}

tree::TerminalNode* HqlsqlParser::Fullselect_set_clauseContext::T_EXCEPT() {
  return getToken(HqlsqlParser::T_EXCEPT, 0);
}

tree::TerminalNode* HqlsqlParser::Fullselect_set_clauseContext::T_INTERSECT() {
  return getToken(HqlsqlParser::T_INTERSECT, 0);
}


size_t HqlsqlParser::Fullselect_set_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFullselect_set_clause;
}

void HqlsqlParser::Fullselect_set_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFullselect_set_clause(this);
}

void HqlsqlParser::Fullselect_set_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFullselect_set_clause(this);
}


antlrcpp::Any HqlsqlParser::Fullselect_set_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFullselect_set_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Fullselect_set_clauseContext* HqlsqlParser::fullselect_set_clause() {
  Fullselect_set_clauseContext *_localctx = _tracker.createInstance<Fullselect_set_clauseContext>(_ctx, getState());
  enterRule(_localctx, 460, HqlsqlParser::RuleFullselect_set_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3398);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_UNION: {
        enterOuterAlt(_localctx, 1);
        setState(3386);
        match(HqlsqlParser::T_UNION);
        setState(3388);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_ALL) {
          setState(3387);
          match(HqlsqlParser::T_ALL);
        }
        break;
      }

      case HqlsqlParser::T_EXCEPT: {
        enterOuterAlt(_localctx, 2);
        setState(3390);
        match(HqlsqlParser::T_EXCEPT);
        setState(3392);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_ALL) {
          setState(3391);
          match(HqlsqlParser::T_ALL);
        }
        break;
      }

      case HqlsqlParser::T_INTERSECT: {
        enterOuterAlt(_localctx, 3);
        setState(3394);
        match(HqlsqlParser::T_INTERSECT);
        setState(3396);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_ALL) {
          setState(3395);
          match(HqlsqlParser::T_ALL);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subselect_stmtContext ------------------------------------------------------------------

HqlsqlParser::Subselect_stmtContext::Subselect_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Subselect_stmtContext::T_SELECT() {
  return getToken(HqlsqlParser::T_SELECT, 0);
}

HqlsqlParser::Select_listContext* HqlsqlParser::Subselect_stmtContext::select_list() {
  return getRuleContext<HqlsqlParser::Select_listContext>(0);
}

HqlsqlParser::From_clauseContext* HqlsqlParser::Subselect_stmtContext::from_clause() {
  return getRuleContext<HqlsqlParser::From_clauseContext>(0);
}

std::vector<HqlsqlParser::Select_optionContext *> HqlsqlParser::Subselect_stmtContext::select_option() {
  return getRuleContexts<HqlsqlParser::Select_optionContext>();
}

HqlsqlParser::Select_optionContext* HqlsqlParser::Subselect_stmtContext::select_option(size_t i) {
  return getRuleContext<HqlsqlParser::Select_optionContext>(i);
}


size_t HqlsqlParser::Subselect_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleSubselect_stmt;
}

void HqlsqlParser::Subselect_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubselect_stmt(this);
}

void HqlsqlParser::Subselect_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubselect_stmt(this);
}


antlrcpp::Any HqlsqlParser::Subselect_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSubselect_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Subselect_stmtContext* HqlsqlParser::subselect_stmt() {
  Subselect_stmtContext *_localctx = _tracker.createInstance<Subselect_stmtContext>(_ctx, getState());
  enterRule(_localctx, 462, HqlsqlParser::RuleSubselect_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3401);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_FROM) {
      setState(3400);
      from_clause();
    }
    setState(3403);
    match(HqlsqlParser::T_SELECT);
    setState(3404);
    select_list();
    setState(3408);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3405);
        select_option(); 
      }
      setState(3410);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_listContext ------------------------------------------------------------------

HqlsqlParser::Select_listContext::Select_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Select_list_itemContext *> HqlsqlParser::Select_listContext::select_list_item() {
  return getRuleContexts<HqlsqlParser::Select_list_itemContext>();
}

HqlsqlParser::Select_list_itemContext* HqlsqlParser::Select_listContext::select_list_item(size_t i) {
  return getRuleContext<HqlsqlParser::Select_list_itemContext>(i);
}

HqlsqlParser::Select_list_setContext* HqlsqlParser::Select_listContext::select_list_set() {
  return getRuleContext<HqlsqlParser::Select_list_setContext>(0);
}

HqlsqlParser::Select_list_limitContext* HqlsqlParser::Select_listContext::select_list_limit() {
  return getRuleContext<HqlsqlParser::Select_list_limitContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Select_listContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Select_listContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

HqlsqlParser::Select_list_use_optionContext* HqlsqlParser::Select_listContext::select_list_use_option() {
  return getRuleContext<HqlsqlParser::Select_list_use_optionContext>(0);
}


size_t HqlsqlParser::Select_listContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_list;
}

void HqlsqlParser::Select_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list(this);
}

void HqlsqlParser::Select_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list(this);
}


antlrcpp::Any HqlsqlParser::Select_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_list(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_listContext* HqlsqlParser::select_list() {
  Select_listContext *_localctx = _tracker.createInstance<Select_listContext>(_ctx, getState());
  enterRule(_localctx, 464, HqlsqlParser::RuleSelect_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3412);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx)) {
    case 1: {
      setState(3411);
      select_list_set();
      break;
    }

    }
    setState(3415);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
    case 1: {
      setState(3414);
      select_list_limit();
      break;
    }

    }
    setState(3417);
    select_list_item();
    setState(3422);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3418);
        match(HqlsqlParser::T_COMMA);
        setState(3419);
        select_list_item(); 
      }
      setState(3424);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx);
    }
    setState(3426);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
    case 1: {
      setState(3425);
      select_list_use_option();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_setContext ------------------------------------------------------------------

HqlsqlParser::Select_list_setContext::Select_list_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Select_list_setContext::T_ALL() {
  return getToken(HqlsqlParser::T_ALL, 0);
}

tree::TerminalNode* HqlsqlParser::Select_list_setContext::T_DISTINCT() {
  return getToken(HqlsqlParser::T_DISTINCT, 0);
}


size_t HqlsqlParser::Select_list_setContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_list_set;
}

void HqlsqlParser::Select_list_setContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list_set(this);
}

void HqlsqlParser::Select_list_setContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list_set(this);
}


antlrcpp::Any HqlsqlParser::Select_list_setContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_list_set(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_list_setContext* HqlsqlParser::select_list_set() {
  Select_list_setContext *_localctx = _tracker.createInstance<Select_list_setContext>(_ctx, getState());
  enterRule(_localctx, 466, HqlsqlParser::RuleSelect_list_set);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3428);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ALL || _la == HqlsqlParser::T_DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_limitContext ------------------------------------------------------------------

HqlsqlParser::Select_list_limitContext::Select_list_limitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Select_list_limitContext::T_TOP() {
  return getToken(HqlsqlParser::T_TOP, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Select_list_limitContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Select_list_limitContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_list_limit;
}

void HqlsqlParser::Select_list_limitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list_limit(this);
}

void HqlsqlParser::Select_list_limitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list_limit(this);
}


antlrcpp::Any HqlsqlParser::Select_list_limitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_list_limit(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_list_limitContext* HqlsqlParser::select_list_limit() {
  Select_list_limitContext *_localctx = _tracker.createInstance<Select_list_limitContext>(_ctx, getState());
  enterRule(_localctx, 468, HqlsqlParser::RuleSelect_list_limit);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3430);
    match(HqlsqlParser::T_TOP);
    setState(3431);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_itemContext ------------------------------------------------------------------

HqlsqlParser::Select_list_itemContext::Select_list_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Select_list_item_normalContext* HqlsqlParser::Select_list_itemContext::select_list_item_normal() {
  return getRuleContext<HqlsqlParser::Select_list_item_normalContext>(0);
}

HqlsqlParser::Select_list_item_asteriskContext* HqlsqlParser::Select_list_itemContext::select_list_item_asterisk() {
  return getRuleContext<HqlsqlParser::Select_list_item_asteriskContext>(0);
}


size_t HqlsqlParser::Select_list_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_list_item;
}

void HqlsqlParser::Select_list_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list_item(this);
}

void HqlsqlParser::Select_list_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list_item(this);
}


antlrcpp::Any HqlsqlParser::Select_list_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_list_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_list_itemContext* HqlsqlParser::select_list_item() {
  Select_list_itemContext *_localctx = _tracker.createInstance<Select_list_itemContext>(_ctx, getState());
  enterRule(_localctx, 470, HqlsqlParser::RuleSelect_list_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3435);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3433);
      select_list_item_normal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3434);
      select_list_item_asterisk();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_item_normalContext ------------------------------------------------------------------

HqlsqlParser::Select_list_item_normalContext::Select_list_item_normalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Select_list_item_normalContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Select_list_item_normalContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Select_list_item_normalContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Select_list_item_normalContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Select_list_item_normalContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}


size_t HqlsqlParser::Select_list_item_normalContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_list_item_normal;
}

void HqlsqlParser::Select_list_item_normalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list_item_normal(this);
}

void HqlsqlParser::Select_list_item_normalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list_item_normal(this);
}


antlrcpp::Any HqlsqlParser::Select_list_item_normalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_list_item_normal(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_list_item_normalContext* HqlsqlParser::select_list_item_normal() {
  Select_list_item_normalContext *_localctx = _tracker.createInstance<Select_list_item_normalContext>(_ctx, getState());
  enterRule(_localctx, 472, HqlsqlParser::RuleSelect_list_item_normal);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3440);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
    case 1: {
      setState(3437);
      ident();
      setState(3438);
      match(HqlsqlParser::T_EQUAL);
      break;
    }

    }
    setState(3442);
    bool_expr(0);
    setState(3447);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      setState(3444);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx)) {
      case 1: {
        setState(3443);
        match(HqlsqlParser::T_AS);
        break;
      }

      }
      setState(3446);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_item_asteriskContext ------------------------------------------------------------------

HqlsqlParser::Select_list_item_asteriskContext::Select_list_item_asteriskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Select_list_item_asteriskContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Select_list_item_asteriskContext::T_PERIOD() {
  return getToken(HqlsqlParser::T_PERIOD, 0);
}


size_t HqlsqlParser::Select_list_item_asteriskContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_list_item_asterisk;
}

void HqlsqlParser::Select_list_item_asteriskContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list_item_asterisk(this);
}

void HqlsqlParser::Select_list_item_asteriskContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list_item_asterisk(this);
}


antlrcpp::Any HqlsqlParser::Select_list_item_asteriskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_list_item_asterisk(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_list_item_asteriskContext* HqlsqlParser::select_list_item_asterisk() {
  Select_list_item_asteriskContext *_localctx = _tracker.createInstance<Select_list_item_asteriskContext>(_ctx, getState());
  enterRule(_localctx, 474, HqlsqlParser::RuleSelect_list_item_asterisk);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ACTION)
      | (1ULL << HqlsqlParser::T_ADD)
      | (1ULL << HqlsqlParser::T_ALL)
      | (1ULL << HqlsqlParser::T_ALLOCATE)
      | (1ULL << HqlsqlParser::T_ALTER)
      | (1ULL << HqlsqlParser::T_AND)
      | (1ULL << HqlsqlParser::T_ANSI_NULLS)
      | (1ULL << HqlsqlParser::T_ANSI_PADDING)
      | (1ULL << HqlsqlParser::T_AS)
      | (1ULL << HqlsqlParser::T_ASC)
      | (1ULL << HqlsqlParser::T_ASSOCIATE)
      | (1ULL << HqlsqlParser::T_AT)
      | (1ULL << HqlsqlParser::T_AUTO_INCREMENT)
      | (1ULL << HqlsqlParser::T_AVG)
      | (1ULL << HqlsqlParser::T_BATCHSIZE)
      | (1ULL << HqlsqlParser::T_BEGIN)
      | (1ULL << HqlsqlParser::T_BETWEEN)
      | (1ULL << HqlsqlParser::T_BIGINT)
      | (1ULL << HqlsqlParser::T_BINARY_DOUBLE)
      | (1ULL << HqlsqlParser::T_BINARY_FLOAT)
      | (1ULL << HqlsqlParser::T_BIT)
      | (1ULL << HqlsqlParser::T_BODY)
      | (1ULL << HqlsqlParser::T_BREAK)
      | (1ULL << HqlsqlParser::T_BY)
      | (1ULL << HqlsqlParser::T_BYTE)
      | (1ULL << HqlsqlParser::T_CALL)
      | (1ULL << HqlsqlParser::T_CALLER)
      | (1ULL << HqlsqlParser::T_CASCADE)
      | (1ULL << HqlsqlParser::T_CASE)
      | (1ULL << HqlsqlParser::T_CASESPECIFIC)
      | (1ULL << HqlsqlParser::T_CAST)
      | (1ULL << HqlsqlParser::T_CHAR)
      | (1ULL << HqlsqlParser::T_CHARACTER)
      | (1ULL << HqlsqlParser::T_CHARSET)
      | (1ULL << HqlsqlParser::T_CLIENT)
      | (1ULL << HqlsqlParser::T_CLOSE)
      | (1ULL << HqlsqlParser::T_CLUSTERED)
      | (1ULL << HqlsqlParser::T_CMP)
      | (1ULL << HqlsqlParser::T_COLLECT)
      | (1ULL << HqlsqlParser::T_COLLECTION)
      | (1ULL << HqlsqlParser::T_COLUMN)
      | (1ULL << HqlsqlParser::T_COMMENT)
      | (1ULL << HqlsqlParser::T_CONSTANT)
      | (1ULL << HqlsqlParser::T_COMMIT)
      | (1ULL << HqlsqlParser::T_COMPRESS)
      | (1ULL << HqlsqlParser::T_CONCAT)
      | (1ULL << HqlsqlParser::T_CONDITION)
      | (1ULL << HqlsqlParser::T_CONSTRAINT)
      | (1ULL << HqlsqlParser::T_CONTINUE)
      | (1ULL << HqlsqlParser::T_COPY)
      | (1ULL << HqlsqlParser::T_COUNT)
      | (1ULL << HqlsqlParser::T_COUNT_BIG)
      | (1ULL << HqlsqlParser::T_CREATE)
      | (1ULL << HqlsqlParser::T_CREATION)
      | (1ULL << HqlsqlParser::T_CREATOR)
      | (1ULL << HqlsqlParser::T_CS)
      | (1ULL << HqlsqlParser::T_CURRENT)
      | (1ULL << HqlsqlParser::T_CURRENT_SCHEMA)
      | (1ULL << HqlsqlParser::T_CURSOR)
      | (1ULL << HqlsqlParser::T_DATABASE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (HqlsqlParser::T_DATA - 64))
      | (1ULL << (HqlsqlParser::T_DATE - 64))
      | (1ULL << (HqlsqlParser::T_DATETIME - 64))
      | (1ULL << (HqlsqlParser::T_DAY - 64))
      | (1ULL << (HqlsqlParser::T_DAYS - 64))
      | (1ULL << (HqlsqlParser::T_DEC - 64))
      | (1ULL << (HqlsqlParser::T_DECIMAL - 64))
      | (1ULL << (HqlsqlParser::T_DECLARE - 64))
      | (1ULL << (HqlsqlParser::T_DEFAULT - 64))
      | (1ULL << (HqlsqlParser::T_DEFERRED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINER - 64))
      | (1ULL << (HqlsqlParser::T_DEFINITION - 64))
      | (1ULL << (HqlsqlParser::T_DELETE - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITED - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITER - 64))
      | (1ULL << (HqlsqlParser::T_DESC - 64))
      | (1ULL << (HqlsqlParser::T_DESCRIBE - 64))
      | (1ULL << (HqlsqlParser::T_DIAGNOSTICS - 64))
      | (1ULL << (HqlsqlParser::T_DIR - 64))
      | (1ULL << (HqlsqlParser::T_DIRECTORY - 64))
      | (1ULL << (HqlsqlParser::T_DISTINCT - 64))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTE - 64))
      | (1ULL << (HqlsqlParser::T_DO - 64))
      | (1ULL << (HqlsqlParser::T_DOUBLE - 64))
      | (1ULL << (HqlsqlParser::T_DROP - 64))
      | (1ULL << (HqlsqlParser::T_DYNAMIC - 64))
      | (1ULL << (HqlsqlParser::T_ENABLE - 64))
      | (1ULL << (HqlsqlParser::T_ENGINE - 64))
      | (1ULL << (HqlsqlParser::T_ESCAPED - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPT - 64))
      | (1ULL << (HqlsqlParser::T_EXEC - 64))
      | (1ULL << (HqlsqlParser::T_EXECUTE - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPTION - 64))
      | (1ULL << (HqlsqlParser::T_EXCLUSIVE - 64))
      | (1ULL << (HqlsqlParser::T_EXISTS - 64))
      | (1ULL << (HqlsqlParser::T_EXIT - 64))
      | (1ULL << (HqlsqlParser::T_FALLBACK - 64))
      | (1ULL << (HqlsqlParser::T_FALSE - 64))
      | (1ULL << (HqlsqlParser::T_FETCH - 64))
      | (1ULL << (HqlsqlParser::T_FIELDS - 64))
      | (1ULL << (HqlsqlParser::T_FILE - 64))
      | (1ULL << (HqlsqlParser::T_FILES - 64))
      | (1ULL << (HqlsqlParser::T_FLOAT - 64))
      | (1ULL << (HqlsqlParser::T_FOR - 64))
      | (1ULL << (HqlsqlParser::T_FOREIGN - 64))
      | (1ULL << (HqlsqlParser::T_FORMAT - 64))
      | (1ULL << (HqlsqlParser::T_FOUND - 64))
      | (1ULL << (HqlsqlParser::T_FULL - 64))
      | (1ULL << (HqlsqlParser::T_FUNCTION - 64))
      | (1ULL << (HqlsqlParser::T_GET - 64))
      | (1ULL << (HqlsqlParser::T_GLOBAL - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (HqlsqlParser::T_GO - 128))
      | (1ULL << (HqlsqlParser::T_GRANT - 128))
      | (1ULL << (HqlsqlParser::T_ROLE - 128))
      | (1ULL << (HqlsqlParser::T_HANDLER - 128))
      | (1ULL << (HqlsqlParser::T_HASH - 128))
      | (1ULL << (HqlsqlParser::T_HAVING - 128))
      | (1ULL << (HqlsqlParser::T_HDFS - 128))
      | (1ULL << (HqlsqlParser::T_HIVE - 128))
      | (1ULL << (HqlsqlParser::T_HOST - 128))
      | (1ULL << (HqlsqlParser::T_IDENTITY - 128))
      | (1ULL << (HqlsqlParser::T_IF - 128))
      | (1ULL << (HqlsqlParser::T_IGNORE - 128))
      | (1ULL << (HqlsqlParser::T_IMMEDIATE - 128))
      | (1ULL << (HqlsqlParser::T_IN - 128))
      | (1ULL << (HqlsqlParser::T_INCLUDE - 128))
      | (1ULL << (HqlsqlParser::T_INDEX - 128))
      | (1ULL << (HqlsqlParser::T_INITRANS - 128))
      | (1ULL << (HqlsqlParser::T_INNER - 128))
      | (1ULL << (HqlsqlParser::T_INOUT - 128))
      | (1ULL << (HqlsqlParser::T_INSERT - 128))
      | (1ULL << (HqlsqlParser::T_INT - 128))
      | (1ULL << (HqlsqlParser::T_INT2 - 128))
      | (1ULL << (HqlsqlParser::T_INT4 - 128))
      | (1ULL << (HqlsqlParser::T_INT8 - 128))
      | (1ULL << (HqlsqlParser::T_INTEGER - 128))
      | (1ULL << (HqlsqlParser::T_INTERSECT - 128))
      | (1ULL << (HqlsqlParser::T_INTO - 128))
      | (1ULL << (HqlsqlParser::T_INVOKER - 128))
      | (1ULL << (HqlsqlParser::T_IS - 128))
      | (1ULL << (HqlsqlParser::T_ISOPEN - 128))
      | (1ULL << (HqlsqlParser::T_ITEMS - 128))
      | (1ULL << (HqlsqlParser::T_JOIN - 128))
      | (1ULL << (HqlsqlParser::T_KEEP - 128))
      | (1ULL << (HqlsqlParser::T_KEY - 128))
      | (1ULL << (HqlsqlParser::T_KEYS - 128))
      | (1ULL << (HqlsqlParser::T_LANGUAGE - 128))
      | (1ULL << (HqlsqlParser::T_LEAVE - 128))
      | (1ULL << (HqlsqlParser::T_LEFT - 128))
      | (1ULL << (HqlsqlParser::T_LIKE - 128))
      | (1ULL << (HqlsqlParser::T_LINES - 128))
      | (1ULL << (HqlsqlParser::T_LOCAL - 128))
      | (1ULL << (HqlsqlParser::T_LOCATION - 128))
      | (1ULL << (HqlsqlParser::T_LOCATOR - 128))
      | (1ULL << (HqlsqlParser::T_LOCATORS - 128))
      | (1ULL << (HqlsqlParser::T_LOCKS - 128))
      | (1ULL << (HqlsqlParser::T_LOG - 128))
      | (1ULL << (HqlsqlParser::T_LOGGED - 128))
      | (1ULL << (HqlsqlParser::T_LOGGING - 128))
      | (1ULL << (HqlsqlParser::T_LOOP - 128))
      | (1ULL << (HqlsqlParser::T_MAP - 128))
      | (1ULL << (HqlsqlParser::T_MATCHED - 128))
      | (1ULL << (HqlsqlParser::T_MAX - 128))
      | (1ULL << (HqlsqlParser::T_MAXTRANS - 128))
      | (1ULL << (HqlsqlParser::T_MERGE - 128))
      | (1ULL << (HqlsqlParser::T_MESSAGE_TEXT - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECOND - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECONDS - 128))
      | (1ULL << (HqlsqlParser::T_MIN - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (HqlsqlParser::T_MULTISET - 192))
      | (1ULL << (HqlsqlParser::T_NCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NEW - 192))
      | (1ULL << (HqlsqlParser::T_NVARCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NO - 192))
      | (1ULL << (HqlsqlParser::T_NOCOUNT - 192))
      | (1ULL << (HqlsqlParser::T_NOCOMPRESS - 192))
      | (1ULL << (HqlsqlParser::T_NOLOGGING - 192))
      | (1ULL << (HqlsqlParser::T_NONE - 192))
      | (1ULL << (HqlsqlParser::T_NOT - 192))
      | (1ULL << (HqlsqlParser::T_NOTFOUND - 192))
      | (1ULL << (HqlsqlParser::T_NUMERIC - 192))
      | (1ULL << (HqlsqlParser::T_NUMBER - 192))
      | (1ULL << (HqlsqlParser::T_OBJECT - 192))
      | (1ULL << (HqlsqlParser::T_OFF - 192))
      | (1ULL << (HqlsqlParser::T_ON - 192))
      | (1ULL << (HqlsqlParser::T_ONLY - 192))
      | (1ULL << (HqlsqlParser::T_OPEN - 192))
      | (1ULL << (HqlsqlParser::T_OR - 192))
      | (1ULL << (HqlsqlParser::T_OUT - 192))
      | (1ULL << (HqlsqlParser::T_OUTER - 192))
      | (1ULL << (HqlsqlParser::T_OVERWRITE - 192))
      | (1ULL << (HqlsqlParser::T_OWNER - 192))
      | (1ULL << (HqlsqlParser::T_PACKAGE - 192))
      | (1ULL << (HqlsqlParser::T_PARTITION - 192))
      | (1ULL << (HqlsqlParser::T_PCTFREE - 192))
      | (1ULL << (HqlsqlParser::T_PCTUSED - 192))
      | (1ULL << (HqlsqlParser::T_PRECISION - 192))
      | (1ULL << (HqlsqlParser::T_PRESERVE - 192))
      | (1ULL << (HqlsqlParser::T_PRIMARY - 192))
      | (1ULL << (HqlsqlParser::T_PRINT - 192))
      | (1ULL << (HqlsqlParser::T_PROC - 192))
      | (1ULL << (HqlsqlParser::T_PROCEDURE - 192))
      | (1ULL << (HqlsqlParser::T_QUALIFY - 192))
      | (1ULL << (HqlsqlParser::T_QUERY_BAND - 192))
      | (1ULL << (HqlsqlParser::T_QUIT - 192))
      | (1ULL << (HqlsqlParser::T_QUOTED_IDENTIFIER - 192))
      | (1ULL << (HqlsqlParser::T_RAISE - 192))
      | (1ULL << (HqlsqlParser::T_REAL - 192))
      | (1ULL << (HqlsqlParser::T_REFERENCES - 192))
      | (1ULL << (HqlsqlParser::T_REGEXP - 192))
      | (1ULL << (HqlsqlParser::T_REPLACE - 192))
      | (1ULL << (HqlsqlParser::T_RESIGNAL - 192))
      | (1ULL << (HqlsqlParser::T_RESTRICT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT_SET_LOCATOR - 192))
      | (1ULL << (HqlsqlParser::T_RETURN - 192))
      | (1ULL << (HqlsqlParser::T_RETURNS - 192))
      | (1ULL << (HqlsqlParser::T_REVERSE - 192))
      | (1ULL << (HqlsqlParser::T_RIGHT - 192))
      | (1ULL << (HqlsqlParser::T_RLIKE - 192))
      | (1ULL << (HqlsqlParser::T_ROLLBACK - 192))
      | (1ULL << (HqlsqlParser::T_ROW - 192))
      | (1ULL << (HqlsqlParser::T_ROWS - 192))
      | (1ULL << (HqlsqlParser::T_ROW_COUNT - 192))
      | (1ULL << (HqlsqlParser::T_RR - 192))
      | (1ULL << (HqlsqlParser::T_RS - 192))
      | (1ULL << (HqlsqlParser::T_PWD - 192))
      | (1ULL << (HqlsqlParser::T_TRIM - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (HqlsqlParser::T_SCHEMA - 256))
      | (1ULL << (HqlsqlParser::T_SECOND - 256))
      | (1ULL << (HqlsqlParser::T_SECONDS - 256))
      | (1ULL << (HqlsqlParser::T_SECURITY - 256))
      | (1ULL << (HqlsqlParser::T_SEGMENT - 256))
      | (1ULL << (HqlsqlParser::T_SELECT - 256))
      | (1ULL << (HqlsqlParser::T_SESSION - 256))
      | (1ULL << (HqlsqlParser::T_SESSIONS - 256))
      | (1ULL << (HqlsqlParser::T_SETS - 256))
      | (1ULL << (HqlsqlParser::T_SHARE - 256))
      | (1ULL << (HqlsqlParser::T_SIGNAL - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_DOUBLE - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_FLOAT - 256))
      | (1ULL << (HqlsqlParser::T_SMALLDATETIME - 256))
      | (1ULL << (HqlsqlParser::T_SMALLINT - 256))
      | (1ULL << (HqlsqlParser::T_SQL - 256))
      | (1ULL << (HqlsqlParser::T_SQLEXCEPTION - 256))
      | (1ULL << (HqlsqlParser::T_SQLINSERT - 256))
      | (1ULL << (HqlsqlParser::T_SQLSTATE - 256))
      | (1ULL << (HqlsqlParser::T_SQLWARNING - 256))
      | (1ULL << (HqlsqlParser::T_STATS - 256))
      | (1ULL << (HqlsqlParser::T_STATISTICS - 256))
      | (1ULL << (HqlsqlParser::T_STEP - 256))
      | (1ULL << (HqlsqlParser::T_STORAGE - 256))
      | (1ULL << (HqlsqlParser::T_STORED - 256))
      | (1ULL << (HqlsqlParser::T_STRING - 256))
      | (1ULL << (HqlsqlParser::T_SUBDIR - 256))
      | (1ULL << (HqlsqlParser::T_SUBSTRING - 256))
      | (1ULL << (HqlsqlParser::T_SUM - 256))
      | (1ULL << (HqlsqlParser::T_SUMMARY - 256))
      | (1ULL << (HqlsqlParser::T_SYS_REFCURSOR - 256))
      | (1ULL << (HqlsqlParser::T_TABLE - 256))
      | (1ULL << (HqlsqlParser::T_TABLESPACE - 256))
      | (1ULL << (HqlsqlParser::T_TEMPORARY - 256))
      | (1ULL << (HqlsqlParser::T_TERMINATED - 256))
      | (1ULL << (HqlsqlParser::T_TEXTIMAGE_ON - 256))
      | (1ULL << (HqlsqlParser::T_THEN - 256))
      | (1ULL << (HqlsqlParser::T_TIMESTAMP - 256))
      | (1ULL << (HqlsqlParser::T_TITLE - 256))
      | (1ULL << (HqlsqlParser::T_TO - 256))
      | (1ULL << (HqlsqlParser::T_TOP - 256))
      | (1ULL << (HqlsqlParser::T_TRANSACTION - 256))
      | (1ULL << (HqlsqlParser::T_TRUE - 256))
      | (1ULL << (HqlsqlParser::T_TRUNCATE - 256))
      | (1ULL << (HqlsqlParser::T_TYPE - 256))
      | (1ULL << (HqlsqlParser::T_UNIQUE - 256))
      | (1ULL << (HqlsqlParser::T_UPDATE - 256))
      | (1ULL << (HqlsqlParser::T_UR - 256))
      | (1ULL << (HqlsqlParser::T_USE - 256))
      | (1ULL << (HqlsqlParser::T_USING - 256))
      | (1ULL << (HqlsqlParser::T_VALUE - 256))
      | (1ULL << (HqlsqlParser::T_VALUES - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (HqlsqlParser::T_VAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR2 - 320))
      | (1ULL << (HqlsqlParser::T_VARYING - 320))
      | (1ULL << (HqlsqlParser::T_VOLATILE - 320))
      | (1ULL << (HqlsqlParser::T_WHILE - 320))
      | (1ULL << (HqlsqlParser::T_WITH - 320))
      | (1ULL << (HqlsqlParser::T_WITHOUT - 320))
      | (1ULL << (HqlsqlParser::T_WORK - 320))
      | (1ULL << (HqlsqlParser::T_XACT_ABORT - 320))
      | (1ULL << (HqlsqlParser::T_XML - 320))
      | (1ULL << (HqlsqlParser::T_YES - 320))
      | (1ULL << (HqlsqlParser::T_ARRAY - 320))
      | (1ULL << (HqlsqlParser::T_STRUCT - 320))
      | (1ULL << (HqlsqlParser::T_SERDE - 320))
      | (1ULL << (HqlsqlParser::T_SEQUENCEFILE - 320))
      | (1ULL << (HqlsqlParser::T_TEXTFILE - 320))
      | (1ULL << (HqlsqlParser::T_RCFILE - 320))
      | (1ULL << (HqlsqlParser::T_ORC - 320))
      | (1ULL << (HqlsqlParser::T_PARQUET - 320))
      | (1ULL << (HqlsqlParser::T_AVRO - 320))
      | (1ULL << (HqlsqlParser::T_JSONFILE - 320))
      | (1ULL << (HqlsqlParser::T_INPUTFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_FILEFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_T - 320))
      | (1ULL << (HqlsqlParser::T_S - 320))
      | (1ULL << (HqlsqlParser::T_ACTIVITY_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_CUME_DIST - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_DATE - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_TIMESTAMP - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_USER - 320))
      | (1ULL << (HqlsqlParser::T_DENSE_RANK - 320))
      | (1ULL << (HqlsqlParser::T_FIRST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LAG - 320))
      | (1ULL << (HqlsqlParser::T_LAST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LEAD - 320))
      | (1ULL << (HqlsqlParser::T_PART_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_PART_LOC - 320))
      | (1ULL << (HqlsqlParser::T_RANK - 320))
      | (1ULL << (HqlsqlParser::T_ROW_NUMBER - 320))
      | (1ULL << (HqlsqlParser::T_STDEV - 320))
      | (1ULL << (HqlsqlParser::T_STD - 320))
      | (1ULL << (HqlsqlParser::T_SYSDATE - 320))
      | (1ULL << (HqlsqlParser::T_VARIANCE - 320))
      | (1ULL << (HqlsqlParser::T_USER - 320))
      | (1ULL << (HqlsqlParser::T_PURGE - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 384)) & ((1ULL << (HqlsqlParser::T_BUCKETS - 384))
      | (1ULL << (HqlsqlParser::T_SKEWED - 384))
      | (1ULL << (HqlsqlParser::T_DIRECTORIES - 384))
      | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 384))
      | (1ULL << (HqlsqlParser::T_RENAME - 384))
      | (1ULL << (HqlsqlParser::T_SORTED - 384))
      | (1ULL << (HqlsqlParser::T_SORT - 384))
      | (1ULL << (HqlsqlParser::T_CHANGE - 384))
      | (1ULL << (HqlsqlParser::T_EXCHANGE - 384))
      | (1ULL << (HqlsqlParser::T_RECOVER - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONS - 384))
      | (1ULL << (HqlsqlParser::T_PROTECTION - 384))
      | (1ULL << (HqlsqlParser::T_ARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_UNARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_TOUCH - 384))
      | (1ULL << (HqlsqlParser::T_OFFLINE - 384))
      | (1ULL << (HqlsqlParser::T_NO_DROP - 384))
      | (1ULL << (HqlsqlParser::T_COMPACT - 384))
      | (1ULL << (HqlsqlParser::T_CONCATENATE - 384))
      | (1ULL << (HqlsqlParser::T_WAIT - 384))
      | (1ULL << (HqlsqlParser::T_COLUMNS - 384))
      | (1ULL << (HqlsqlParser::T_FIRST - 384))
      | (1ULL << (HqlsqlParser::T_LAST - 384))
      | (1ULL << (HqlsqlParser::T_NULLS - 384))
      | (1ULL << (HqlsqlParser::T_AFTER - 384))
      | (1ULL << (HqlsqlParser::T_MATERIALIZED - 384))
      | (1ULL << (HqlsqlParser::T_REWRITE - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONED - 384))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 384))
      | (1ULL << (HqlsqlParser::T_MACRO - 384))
      | (1ULL << (HqlsqlParser::T_SHOW - 384))
      | (1ULL << (HqlsqlParser::T_EXTENDED - 384))
      | (1ULL << (HqlsqlParser::T_FORMATTED - 384))
      | (1ULL << (HqlsqlParser::T_SEMI - 384))
      | (1ULL << (HqlsqlParser::T_CROSS - 384))
      | (1ULL << (HqlsqlParser::T_LATERAL - 384))
      | (1ULL << (HqlsqlParser::T_RELOAD - 384))
      | (1ULL << (HqlsqlParser::T_LOAD - 384))
      | (1ULL << (HqlsqlParser::T_INPATH - 384))
      | (1ULL << (HqlsqlParser::T_PRINCIPALS - 384))
      | (1ULL << (HqlsqlParser::T_COMPACTIONS - 384))
      | (1ULL << (HqlsqlParser::T_CONF - 384))
      | (1ULL << (HqlsqlParser::T_ADMIN - 384))
      | (1ULL << (HqlsqlParser::T_OPTION - 384))
      | (1ULL << (HqlsqlParser::T_PRIVILEGES - 384))
      | (1ULL << (HqlsqlParser::T_LOCK - 384))
      | (1ULL << (HqlsqlParser::T_SHOW_DATABASE - 384))
      | (1ULL << (HqlsqlParser::T_COMPUTE - 384))
      | (1ULL << (HqlsqlParser::T_CACHE - 384))
      | (1ULL << (HqlsqlParser::T_METADATA - 384))
      | (1ULL << (HqlsqlParser::T_NOSCAN - 384))
      | (1ULL << (HqlsqlParser::T_UNIONTYPE - 384))
      | (1ULL << (HqlsqlParser::T_ANALYZE - 384))
      | (1ULL << (HqlsqlParser::T_EXPLAIN - 384))
      | (1ULL << (HqlsqlParser::T_CBO - 384))
      | (1ULL << (HqlsqlParser::T_AST - 384))
      | (1ULL << (HqlsqlParser::T_DEPENDENCY - 384))
      | (1ULL << (HqlsqlParser::T_AUTHORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_VECTORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_COST - 384))
      | (1ULL << (HqlsqlParser::T_JOINCOST - 384))
      | (1ULL << (HqlsqlParser::T_OPERATOR - 384))
      | (1ULL << (HqlsqlParser::T_EXPRESSION - 384))
      | (1ULL << (HqlsqlParser::T_DETAIL - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 448)) & ((1ULL << (HqlsqlParser::T_UNBOUNDED - 448))
      | (1ULL << (HqlsqlParser::T_PRECEDING - 448))
      | (1ULL << (HqlsqlParser::T_FOLLOWING - 448))
      | (1ULL << (HqlsqlParser::T_RANGE - 448))
      | (1ULL << (HqlsqlParser::T_YEAR - 448))
      | (1ULL << (HqlsqlParser::T_MONTH - 448))
      | (1ULL << (HqlsqlParser::T_MINUTE - 448))
      | (1ULL << (HqlsqlParser::T_TIME - 448))
      | (1ULL << (HqlsqlParser::T_ZONE - 448))
      | (1ULL << (HqlsqlParser::T_SUB - 448))
      | (1ULL << (HqlsqlParser::L_ID - 448)))) != 0)) {
      setState(3449);
      ident();
      setState(3450);
      match(HqlsqlParser::T_PERIOD);
    }
    setState(3454);
    match(HqlsqlParser::T_MUL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_use_optionContext ------------------------------------------------------------------

HqlsqlParser::Select_list_use_optionContext::Select_list_use_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Select_list_use_optionContext::T_USING() {
  return getToken(HqlsqlParser::T_USING, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Select_list_use_optionContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Select_list_use_optionContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::Paren_column_listContext* HqlsqlParser::Select_list_use_optionContext::paren_column_list() {
  return getRuleContext<HqlsqlParser::Paren_column_listContext>(0);
}

HqlsqlParser::Column_name_eleContext* HqlsqlParser::Select_list_use_optionContext::column_name_ele() {
  return getRuleContext<HqlsqlParser::Column_name_eleContext>(0);
}


size_t HqlsqlParser::Select_list_use_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_list_use_option;
}

void HqlsqlParser::Select_list_use_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list_use_option(this);
}

void HqlsqlParser::Select_list_use_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list_use_option(this);
}


antlrcpp::Any HqlsqlParser::Select_list_use_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_list_use_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_list_use_optionContext* HqlsqlParser::select_list_use_option() {
  Select_list_use_optionContext *_localctx = _tracker.createInstance<Select_list_use_optionContext>(_ctx, getState());
  enterRule(_localctx, 476, HqlsqlParser::RuleSelect_list_use_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3456);
    match(HqlsqlParser::T_USING);
    setState(3457);
    expr(0);
    setState(3463);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
    case 1: {
      setState(3458);
      match(HqlsqlParser::T_AS);
      setState(3461);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_OPEN_P: {
          setState(3459);
          paren_column_list();
          break;
        }

        case HqlsqlParser::T_ACTION:
        case HqlsqlParser::T_ADD:
        case HqlsqlParser::T_ALL:
        case HqlsqlParser::T_ALLOCATE:
        case HqlsqlParser::T_ALTER:
        case HqlsqlParser::T_AND:
        case HqlsqlParser::T_ANSI_NULLS:
        case HqlsqlParser::T_ANSI_PADDING:
        case HqlsqlParser::T_AS:
        case HqlsqlParser::T_ASC:
        case HqlsqlParser::T_ASSOCIATE:
        case HqlsqlParser::T_AT:
        case HqlsqlParser::T_AUTO_INCREMENT:
        case HqlsqlParser::T_AVG:
        case HqlsqlParser::T_BATCHSIZE:
        case HqlsqlParser::T_BEGIN:
        case HqlsqlParser::T_BETWEEN:
        case HqlsqlParser::T_BIGINT:
        case HqlsqlParser::T_BINARY_DOUBLE:
        case HqlsqlParser::T_BINARY_FLOAT:
        case HqlsqlParser::T_BIT:
        case HqlsqlParser::T_BODY:
        case HqlsqlParser::T_BREAK:
        case HqlsqlParser::T_BY:
        case HqlsqlParser::T_BYTE:
        case HqlsqlParser::T_CALL:
        case HqlsqlParser::T_CALLER:
        case HqlsqlParser::T_CASCADE:
        case HqlsqlParser::T_CASE:
        case HqlsqlParser::T_CASESPECIFIC:
        case HqlsqlParser::T_CAST:
        case HqlsqlParser::T_CHAR:
        case HqlsqlParser::T_CHARACTER:
        case HqlsqlParser::T_CHARSET:
        case HqlsqlParser::T_CLIENT:
        case HqlsqlParser::T_CLOSE:
        case HqlsqlParser::T_CLUSTERED:
        case HqlsqlParser::T_CMP:
        case HqlsqlParser::T_COLLECT:
        case HqlsqlParser::T_COLLECTION:
        case HqlsqlParser::T_COLUMN:
        case HqlsqlParser::T_COMMENT:
        case HqlsqlParser::T_CONSTANT:
        case HqlsqlParser::T_COMMIT:
        case HqlsqlParser::T_COMPRESS:
        case HqlsqlParser::T_CONCAT:
        case HqlsqlParser::T_CONDITION:
        case HqlsqlParser::T_CONSTRAINT:
        case HqlsqlParser::T_CONTINUE:
        case HqlsqlParser::T_COPY:
        case HqlsqlParser::T_COUNT:
        case HqlsqlParser::T_COUNT_BIG:
        case HqlsqlParser::T_CREATE:
        case HqlsqlParser::T_CREATION:
        case HqlsqlParser::T_CREATOR:
        case HqlsqlParser::T_CS:
        case HqlsqlParser::T_CURRENT:
        case HqlsqlParser::T_CURRENT_SCHEMA:
        case HqlsqlParser::T_CURSOR:
        case HqlsqlParser::T_DATABASE:
        case HqlsqlParser::T_DATA:
        case HqlsqlParser::T_DATE:
        case HqlsqlParser::T_DATETIME:
        case HqlsqlParser::T_DAY:
        case HqlsqlParser::T_DAYS:
        case HqlsqlParser::T_DEC:
        case HqlsqlParser::T_DECIMAL:
        case HqlsqlParser::T_DECLARE:
        case HqlsqlParser::T_DEFAULT:
        case HqlsqlParser::T_DEFERRED:
        case HqlsqlParser::T_DEFINED:
        case HqlsqlParser::T_DEFINER:
        case HqlsqlParser::T_DEFINITION:
        case HqlsqlParser::T_DELETE:
        case HqlsqlParser::T_DELIMITED:
        case HqlsqlParser::T_DELIMITER:
        case HqlsqlParser::T_DESC:
        case HqlsqlParser::T_DESCRIBE:
        case HqlsqlParser::T_DIAGNOSTICS:
        case HqlsqlParser::T_DIR:
        case HqlsqlParser::T_DIRECTORY:
        case HqlsqlParser::T_DISTINCT:
        case HqlsqlParser::T_DISTRIBUTE:
        case HqlsqlParser::T_DO:
        case HqlsqlParser::T_DOUBLE:
        case HqlsqlParser::T_DROP:
        case HqlsqlParser::T_DYNAMIC:
        case HqlsqlParser::T_ENABLE:
        case HqlsqlParser::T_ENGINE:
        case HqlsqlParser::T_ESCAPED:
        case HqlsqlParser::T_EXCEPT:
        case HqlsqlParser::T_EXEC:
        case HqlsqlParser::T_EXECUTE:
        case HqlsqlParser::T_EXCEPTION:
        case HqlsqlParser::T_EXCLUSIVE:
        case HqlsqlParser::T_EXISTS:
        case HqlsqlParser::T_EXIT:
        case HqlsqlParser::T_FALLBACK:
        case HqlsqlParser::T_FALSE:
        case HqlsqlParser::T_FETCH:
        case HqlsqlParser::T_FIELDS:
        case HqlsqlParser::T_FILE:
        case HqlsqlParser::T_FILES:
        case HqlsqlParser::T_FLOAT:
        case HqlsqlParser::T_FOR:
        case HqlsqlParser::T_FOREIGN:
        case HqlsqlParser::T_FORMAT:
        case HqlsqlParser::T_FOUND:
        case HqlsqlParser::T_FULL:
        case HqlsqlParser::T_FUNCTION:
        case HqlsqlParser::T_GET:
        case HqlsqlParser::T_GLOBAL:
        case HqlsqlParser::T_GO:
        case HqlsqlParser::T_GRANT:
        case HqlsqlParser::T_ROLE:
        case HqlsqlParser::T_HANDLER:
        case HqlsqlParser::T_HASH:
        case HqlsqlParser::T_HAVING:
        case HqlsqlParser::T_HDFS:
        case HqlsqlParser::T_HIVE:
        case HqlsqlParser::T_HOST:
        case HqlsqlParser::T_IDENTITY:
        case HqlsqlParser::T_IF:
        case HqlsqlParser::T_IGNORE:
        case HqlsqlParser::T_IMMEDIATE:
        case HqlsqlParser::T_IN:
        case HqlsqlParser::T_INCLUDE:
        case HqlsqlParser::T_INDEX:
        case HqlsqlParser::T_INITRANS:
        case HqlsqlParser::T_INNER:
        case HqlsqlParser::T_INOUT:
        case HqlsqlParser::T_INSERT:
        case HqlsqlParser::T_INT:
        case HqlsqlParser::T_INT2:
        case HqlsqlParser::T_INT4:
        case HqlsqlParser::T_INT8:
        case HqlsqlParser::T_INTEGER:
        case HqlsqlParser::T_INTERSECT:
        case HqlsqlParser::T_INTO:
        case HqlsqlParser::T_INVOKER:
        case HqlsqlParser::T_IS:
        case HqlsqlParser::T_ISOPEN:
        case HqlsqlParser::T_ITEMS:
        case HqlsqlParser::T_JOIN:
        case HqlsqlParser::T_KEEP:
        case HqlsqlParser::T_KEY:
        case HqlsqlParser::T_KEYS:
        case HqlsqlParser::T_LANGUAGE:
        case HqlsqlParser::T_LEAVE:
        case HqlsqlParser::T_LEFT:
        case HqlsqlParser::T_LIKE:
        case HqlsqlParser::T_LINES:
        case HqlsqlParser::T_LOCAL:
        case HqlsqlParser::T_LOCATION:
        case HqlsqlParser::T_LOCATOR:
        case HqlsqlParser::T_LOCATORS:
        case HqlsqlParser::T_LOCKS:
        case HqlsqlParser::T_LOG:
        case HqlsqlParser::T_LOGGED:
        case HqlsqlParser::T_LOGGING:
        case HqlsqlParser::T_LOOP:
        case HqlsqlParser::T_MAP:
        case HqlsqlParser::T_MATCHED:
        case HqlsqlParser::T_MAX:
        case HqlsqlParser::T_MAXTRANS:
        case HqlsqlParser::T_MERGE:
        case HqlsqlParser::T_MESSAGE_TEXT:
        case HqlsqlParser::T_MICROSECOND:
        case HqlsqlParser::T_MICROSECONDS:
        case HqlsqlParser::T_MIN:
        case HqlsqlParser::T_MULTISET:
        case HqlsqlParser::T_NCHAR:
        case HqlsqlParser::T_NEW:
        case HqlsqlParser::T_NVARCHAR:
        case HqlsqlParser::T_NO:
        case HqlsqlParser::T_NOCOUNT:
        case HqlsqlParser::T_NOCOMPRESS:
        case HqlsqlParser::T_NOLOGGING:
        case HqlsqlParser::T_NONE:
        case HqlsqlParser::T_NOT:
        case HqlsqlParser::T_NOTFOUND:
        case HqlsqlParser::T_NUMERIC:
        case HqlsqlParser::T_NUMBER:
        case HqlsqlParser::T_OBJECT:
        case HqlsqlParser::T_OFF:
        case HqlsqlParser::T_ON:
        case HqlsqlParser::T_ONLY:
        case HqlsqlParser::T_OPEN:
        case HqlsqlParser::T_OR:
        case HqlsqlParser::T_OUT:
        case HqlsqlParser::T_OUTER:
        case HqlsqlParser::T_OVERWRITE:
        case HqlsqlParser::T_OWNER:
        case HqlsqlParser::T_PACKAGE:
        case HqlsqlParser::T_PARTITION:
        case HqlsqlParser::T_PCTFREE:
        case HqlsqlParser::T_PCTUSED:
        case HqlsqlParser::T_PRECISION:
        case HqlsqlParser::T_PRESERVE:
        case HqlsqlParser::T_PRIMARY:
        case HqlsqlParser::T_PRINT:
        case HqlsqlParser::T_PROC:
        case HqlsqlParser::T_PROCEDURE:
        case HqlsqlParser::T_QUALIFY:
        case HqlsqlParser::T_QUERY_BAND:
        case HqlsqlParser::T_QUIT:
        case HqlsqlParser::T_QUOTED_IDENTIFIER:
        case HqlsqlParser::T_RAISE:
        case HqlsqlParser::T_REAL:
        case HqlsqlParser::T_REFERENCES:
        case HqlsqlParser::T_REGEXP:
        case HqlsqlParser::T_REPLACE:
        case HqlsqlParser::T_RESIGNAL:
        case HqlsqlParser::T_RESTRICT:
        case HqlsqlParser::T_RESULT:
        case HqlsqlParser::T_RESULT_SET_LOCATOR:
        case HqlsqlParser::T_RETURN:
        case HqlsqlParser::T_RETURNS:
        case HqlsqlParser::T_REVERSE:
        case HqlsqlParser::T_RIGHT:
        case HqlsqlParser::T_RLIKE:
        case HqlsqlParser::T_ROLLBACK:
        case HqlsqlParser::T_ROW:
        case HqlsqlParser::T_ROWS:
        case HqlsqlParser::T_ROW_COUNT:
        case HqlsqlParser::T_RR:
        case HqlsqlParser::T_RS:
        case HqlsqlParser::T_PWD:
        case HqlsqlParser::T_TRIM:
        case HqlsqlParser::T_SCHEMA:
        case HqlsqlParser::T_SECOND:
        case HqlsqlParser::T_SECONDS:
        case HqlsqlParser::T_SECURITY:
        case HqlsqlParser::T_SEGMENT:
        case HqlsqlParser::T_SELECT:
        case HqlsqlParser::T_SESSION:
        case HqlsqlParser::T_SESSIONS:
        case HqlsqlParser::T_SETS:
        case HqlsqlParser::T_SHARE:
        case HqlsqlParser::T_SIGNAL:
        case HqlsqlParser::T_SIMPLE_DOUBLE:
        case HqlsqlParser::T_SIMPLE_FLOAT:
        case HqlsqlParser::T_SMALLDATETIME:
        case HqlsqlParser::T_SMALLINT:
        case HqlsqlParser::T_SQL:
        case HqlsqlParser::T_SQLEXCEPTION:
        case HqlsqlParser::T_SQLINSERT:
        case HqlsqlParser::T_SQLSTATE:
        case HqlsqlParser::T_SQLWARNING:
        case HqlsqlParser::T_STATS:
        case HqlsqlParser::T_STATISTICS:
        case HqlsqlParser::T_STEP:
        case HqlsqlParser::T_STORAGE:
        case HqlsqlParser::T_STORED:
        case HqlsqlParser::T_STRING:
        case HqlsqlParser::T_SUBDIR:
        case HqlsqlParser::T_SUBSTRING:
        case HqlsqlParser::T_SUM:
        case HqlsqlParser::T_SUMMARY:
        case HqlsqlParser::T_SYS_REFCURSOR:
        case HqlsqlParser::T_TABLE:
        case HqlsqlParser::T_TABLESPACE:
        case HqlsqlParser::T_TEMPORARY:
        case HqlsqlParser::T_TERMINATED:
        case HqlsqlParser::T_TEXTIMAGE_ON:
        case HqlsqlParser::T_THEN:
        case HqlsqlParser::T_TIMESTAMP:
        case HqlsqlParser::T_TITLE:
        case HqlsqlParser::T_TO:
        case HqlsqlParser::T_TOP:
        case HqlsqlParser::T_TRANSACTION:
        case HqlsqlParser::T_TRUE:
        case HqlsqlParser::T_TRUNCATE:
        case HqlsqlParser::T_TYPE:
        case HqlsqlParser::T_UNIQUE:
        case HqlsqlParser::T_UPDATE:
        case HqlsqlParser::T_UR:
        case HqlsqlParser::T_USE:
        case HqlsqlParser::T_USING:
        case HqlsqlParser::T_VALUE:
        case HqlsqlParser::T_VALUES:
        case HqlsqlParser::T_VAR:
        case HqlsqlParser::T_VARCHAR:
        case HqlsqlParser::T_VARCHAR2:
        case HqlsqlParser::T_VARYING:
        case HqlsqlParser::T_VOLATILE:
        case HqlsqlParser::T_WHILE:
        case HqlsqlParser::T_WITH:
        case HqlsqlParser::T_WITHOUT:
        case HqlsqlParser::T_WORK:
        case HqlsqlParser::T_XACT_ABORT:
        case HqlsqlParser::T_XML:
        case HqlsqlParser::T_YES:
        case HqlsqlParser::T_ARRAY:
        case HqlsqlParser::T_STRUCT:
        case HqlsqlParser::T_SERDE:
        case HqlsqlParser::T_SEQUENCEFILE:
        case HqlsqlParser::T_TEXTFILE:
        case HqlsqlParser::T_RCFILE:
        case HqlsqlParser::T_ORC:
        case HqlsqlParser::T_PARQUET:
        case HqlsqlParser::T_AVRO:
        case HqlsqlParser::T_JSONFILE:
        case HqlsqlParser::T_INPUTFORMAT:
        case HqlsqlParser::T_FILEFORMAT:
        case HqlsqlParser::T_T:
        case HqlsqlParser::T_S:
        case HqlsqlParser::T_ACTIVITY_COUNT:
        case HqlsqlParser::T_CUME_DIST:
        case HqlsqlParser::T_CURRENT_DATE:
        case HqlsqlParser::T_CURRENT_TIMESTAMP:
        case HqlsqlParser::T_CURRENT_USER:
        case HqlsqlParser::T_DENSE_RANK:
        case HqlsqlParser::T_FIRST_VALUE:
        case HqlsqlParser::T_LAG:
        case HqlsqlParser::T_LAST_VALUE:
        case HqlsqlParser::T_LEAD:
        case HqlsqlParser::T_PART_COUNT:
        case HqlsqlParser::T_PART_LOC:
        case HqlsqlParser::T_RANK:
        case HqlsqlParser::T_ROW_NUMBER:
        case HqlsqlParser::T_STDEV:
        case HqlsqlParser::T_STD:
        case HqlsqlParser::T_SYSDATE:
        case HqlsqlParser::T_VARIANCE:
        case HqlsqlParser::T_USER:
        case HqlsqlParser::T_PURGE:
        case HqlsqlParser::T_BUCKETS:
        case HqlsqlParser::T_SKEWED:
        case HqlsqlParser::T_DIRECTORIES:
        case HqlsqlParser::T_SERDEPROPERTIES:
        case HqlsqlParser::T_RENAME:
        case HqlsqlParser::T_SORTED:
        case HqlsqlParser::T_SORT:
        case HqlsqlParser::T_CHANGE:
        case HqlsqlParser::T_EXCHANGE:
        case HqlsqlParser::T_RECOVER:
        case HqlsqlParser::T_PARTITIONS:
        case HqlsqlParser::T_PROTECTION:
        case HqlsqlParser::T_ARCHIVE:
        case HqlsqlParser::T_UNARCHIVE:
        case HqlsqlParser::T_TOUCH:
        case HqlsqlParser::T_OFFLINE:
        case HqlsqlParser::T_NO_DROP:
        case HqlsqlParser::T_COMPACT:
        case HqlsqlParser::T_CONCATENATE:
        case HqlsqlParser::T_WAIT:
        case HqlsqlParser::T_COLUMNS:
        case HqlsqlParser::T_FIRST:
        case HqlsqlParser::T_LAST:
        case HqlsqlParser::T_NULLS:
        case HqlsqlParser::T_AFTER:
        case HqlsqlParser::T_MATERIALIZED:
        case HqlsqlParser::T_REWRITE:
        case HqlsqlParser::T_PARTITIONED:
        case HqlsqlParser::T_DISTRIBUTED:
        case HqlsqlParser::T_MACRO:
        case HqlsqlParser::T_SHOW:
        case HqlsqlParser::T_EXTENDED:
        case HqlsqlParser::T_FORMATTED:
        case HqlsqlParser::T_SEMI:
        case HqlsqlParser::T_CROSS:
        case HqlsqlParser::T_LATERAL:
        case HqlsqlParser::T_RELOAD:
        case HqlsqlParser::T_LOAD:
        case HqlsqlParser::T_INPATH:
        case HqlsqlParser::T_PRINCIPALS:
        case HqlsqlParser::T_COMPACTIONS:
        case HqlsqlParser::T_CONF:
        case HqlsqlParser::T_ADMIN:
        case HqlsqlParser::T_OPTION:
        case HqlsqlParser::T_PRIVILEGES:
        case HqlsqlParser::T_LOCK:
        case HqlsqlParser::T_SHOW_DATABASE:
        case HqlsqlParser::T_COMPUTE:
        case HqlsqlParser::T_CACHE:
        case HqlsqlParser::T_METADATA:
        case HqlsqlParser::T_NOSCAN:
        case HqlsqlParser::T_UNIONTYPE:
        case HqlsqlParser::T_ANALYZE:
        case HqlsqlParser::T_EXPLAIN:
        case HqlsqlParser::T_CBO:
        case HqlsqlParser::T_AST:
        case HqlsqlParser::T_DEPENDENCY:
        case HqlsqlParser::T_AUTHORIZATION:
        case HqlsqlParser::T_VECTORIZATION:
        case HqlsqlParser::T_COST:
        case HqlsqlParser::T_JOINCOST:
        case HqlsqlParser::T_OPERATOR:
        case HqlsqlParser::T_EXPRESSION:
        case HqlsqlParser::T_DETAIL:
        case HqlsqlParser::T_UNBOUNDED:
        case HqlsqlParser::T_PRECEDING:
        case HqlsqlParser::T_FOLLOWING:
        case HqlsqlParser::T_RANGE:
        case HqlsqlParser::T_YEAR:
        case HqlsqlParser::T_MONTH:
        case HqlsqlParser::T_MINUTE:
        case HqlsqlParser::T_TIME:
        case HqlsqlParser::T_ZONE:
        case HqlsqlParser::T_SUB:
        case HqlsqlParser::L_ID: {
          setState(3460);
          column_name_ele();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_clauseContext ------------------------------------------------------------------

HqlsqlParser::From_clauseContext::From_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::From_clauseContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

HqlsqlParser::From_table_clauseContext* HqlsqlParser::From_clauseContext::from_table_clause() {
  return getRuleContext<HqlsqlParser::From_table_clauseContext>(0);
}

std::vector<HqlsqlParser::From_join_clauseContext *> HqlsqlParser::From_clauseContext::from_join_clause() {
  return getRuleContexts<HqlsqlParser::From_join_clauseContext>();
}

HqlsqlParser::From_join_clauseContext* HqlsqlParser::From_clauseContext::from_join_clause(size_t i) {
  return getRuleContext<HqlsqlParser::From_join_clauseContext>(i);
}


size_t HqlsqlParser::From_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_clause;
}

void HqlsqlParser::From_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_clause(this);
}

void HqlsqlParser::From_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_clause(this);
}


antlrcpp::Any HqlsqlParser::From_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_clauseContext* HqlsqlParser::from_clause() {
  From_clauseContext *_localctx = _tracker.createInstance<From_clauseContext>(_ctx, getState());
  enterRule(_localctx, 478, HqlsqlParser::RuleFrom_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3465);
    match(HqlsqlParser::T_FROM);
    setState(3466);
    from_table_clause();
    setState(3470);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3467);
        from_join_clause(); 
      }
      setState(3472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_table_clauseContext ------------------------------------------------------------------

HqlsqlParser::From_table_clauseContext::From_table_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::From_table_name_clauseContext* HqlsqlParser::From_table_clauseContext::from_table_name_clause() {
  return getRuleContext<HqlsqlParser::From_table_name_clauseContext>(0);
}

HqlsqlParser::From_subselect_clauseContext* HqlsqlParser::From_table_clauseContext::from_subselect_clause() {
  return getRuleContext<HqlsqlParser::From_subselect_clauseContext>(0);
}


size_t HqlsqlParser::From_table_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_table_clause;
}

void HqlsqlParser::From_table_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_table_clause(this);
}

void HqlsqlParser::From_table_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_table_clause(this);
}


antlrcpp::Any HqlsqlParser::From_table_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_table_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_table_clauseContext* HqlsqlParser::from_table_clause() {
  From_table_clauseContext *_localctx = _tracker.createInstance<From_table_clauseContext>(_ctx, getState());
  enterRule(_localctx, 480, HqlsqlParser::RuleFrom_table_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3475);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::L_ID: {
        enterOuterAlt(_localctx, 1);
        setState(3473);
        from_table_name_clause();
        break;
      }

      case HqlsqlParser::T_OPEN_P: {
        enterOuterAlt(_localctx, 2);
        setState(3474);
        from_subselect_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_table_name_clauseContext ------------------------------------------------------------------

HqlsqlParser::From_table_name_clauseContext::From_table_name_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Table_nameContext* HqlsqlParser::From_table_name_clauseContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

std::vector<HqlsqlParser::From_table_clause_optionContext *> HqlsqlParser::From_table_name_clauseContext::from_table_clause_option() {
  return getRuleContexts<HqlsqlParser::From_table_clause_optionContext>();
}

HqlsqlParser::From_table_clause_optionContext* HqlsqlParser::From_table_name_clauseContext::from_table_clause_option(size_t i) {
  return getRuleContext<HqlsqlParser::From_table_clause_optionContext>(i);
}


size_t HqlsqlParser::From_table_name_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_table_name_clause;
}

void HqlsqlParser::From_table_name_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_table_name_clause(this);
}

void HqlsqlParser::From_table_name_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_table_name_clause(this);
}


antlrcpp::Any HqlsqlParser::From_table_name_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_table_name_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_table_name_clauseContext* HqlsqlParser::from_table_name_clause() {
  From_table_name_clauseContext *_localctx = _tracker.createInstance<From_table_name_clauseContext>(_ctx, getState());
  enterRule(_localctx, 482, HqlsqlParser::RuleFrom_table_name_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3477);
    table_name();
    setState(3481);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3478);
        from_table_clause_option(); 
      }
      setState(3483);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_table_clause_optionContext ------------------------------------------------------------------

HqlsqlParser::From_table_clause_optionContext::From_table_clause_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Table_sample_clauseContext* HqlsqlParser::From_table_clause_optionContext::table_sample_clause() {
  return getRuleContext<HqlsqlParser::Table_sample_clauseContext>(0);
}

HqlsqlParser::From_alias_clauseContext* HqlsqlParser::From_table_clause_optionContext::from_alias_clause() {
  return getRuleContext<HqlsqlParser::From_alias_clauseContext>(0);
}

HqlsqlParser::Lateral_viewContext* HqlsqlParser::From_table_clause_optionContext::lateral_view() {
  return getRuleContext<HqlsqlParser::Lateral_viewContext>(0);
}


size_t HqlsqlParser::From_table_clause_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_table_clause_option;
}

void HqlsqlParser::From_table_clause_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_table_clause_option(this);
}

void HqlsqlParser::From_table_clause_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_table_clause_option(this);
}


antlrcpp::Any HqlsqlParser::From_table_clause_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_table_clause_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_table_clause_optionContext* HqlsqlParser::from_table_clause_option() {
  From_table_clause_optionContext *_localctx = _tracker.createInstance<From_table_clause_optionContext>(_ctx, getState());
  enterRule(_localctx, 484, HqlsqlParser::RuleFrom_table_clause_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3487);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3484);
      table_sample_clause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3485);
      from_alias_clause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3486);
      lateral_view();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lateral_viewContext ------------------------------------------------------------------

HqlsqlParser::Lateral_viewContext::Lateral_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Lateral_viewContext::T_LATERAL() {
  return getToken(HqlsqlParser::T_LATERAL, 0);
}

tree::TerminalNode* HqlsqlParser::Lateral_viewContext::T_VIEW() {
  return getToken(HqlsqlParser::T_VIEW, 0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::Lateral_viewContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::Lateral_viewContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

tree::TerminalNode* HqlsqlParser::Lateral_viewContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Lateral_viewContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Lateral_viewContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Lateral_viewContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Lateral_viewContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::Column_name_listContext* HqlsqlParser::Lateral_viewContext::column_name_list() {
  return getRuleContext<HqlsqlParser::Column_name_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Lateral_viewContext::T_OUTER() {
  return getToken(HqlsqlParser::T_OUTER, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Lateral_viewContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Lateral_viewContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Lateral_viewContext::getRuleIndex() const {
  return HqlsqlParser::RuleLateral_view;
}

void HqlsqlParser::Lateral_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLateral_view(this);
}

void HqlsqlParser::Lateral_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLateral_view(this);
}


antlrcpp::Any HqlsqlParser::Lateral_viewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitLateral_view(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Lateral_viewContext* HqlsqlParser::lateral_view() {
  Lateral_viewContext *_localctx = _tracker.createInstance<Lateral_viewContext>(_ctx, getState());
  enterRule(_localctx, 486, HqlsqlParser::RuleLateral_view);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3489);
    match(HqlsqlParser::T_LATERAL);
    setState(3490);
    match(HqlsqlParser::T_VIEW);
    setState(3492);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 416, _ctx)) {
    case 1: {
      setState(3491);
      match(HqlsqlParser::T_OUTER);
      break;
    }

    }
    setState(3494);
    ident();
    setState(3495);
    match(HqlsqlParser::T_OPEN_P);
    setState(3496);
    expr(0);
    setState(3501);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(3497);
      match(HqlsqlParser::T_COMMA);
      setState(3498);
      expr(0);
      setState(3503);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3504);
    match(HqlsqlParser::T_CLOSE_P);
    setState(3505);
    ident();
    setState(3506);
    match(HqlsqlParser::T_AS);
    setState(3507);
    column_name_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_sample_clauseContext ------------------------------------------------------------------

HqlsqlParser::Table_sample_clauseContext::Table_sample_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Table_samplingContext* HqlsqlParser::Table_sample_clauseContext::table_sampling() {
  return getRuleContext<HqlsqlParser::Table_samplingContext>(0);
}

HqlsqlParser::Block_samplingContext* HqlsqlParser::Table_sample_clauseContext::block_sampling() {
  return getRuleContext<HqlsqlParser::Block_samplingContext>(0);
}


size_t HqlsqlParser::Table_sample_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleTable_sample_clause;
}

void HqlsqlParser::Table_sample_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_sample_clause(this);
}

void HqlsqlParser::Table_sample_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_sample_clause(this);
}


antlrcpp::Any HqlsqlParser::Table_sample_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTable_sample_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Table_sample_clauseContext* HqlsqlParser::table_sample_clause() {
  Table_sample_clauseContext *_localctx = _tracker.createInstance<Table_sample_clauseContext>(_ctx, getState());
  enterRule(_localctx, 488, HqlsqlParser::RuleTable_sample_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3511);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 418, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3509);
      table_sampling();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3510);
      block_sampling();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_samplingContext ------------------------------------------------------------------

HqlsqlParser::Table_samplingContext::Table_samplingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Table_samplingContext::T_TABLESAMPLE() {
  return getToken(HqlsqlParser::T_TABLESAMPLE, 0);
}

tree::TerminalNode* HqlsqlParser::Table_samplingContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Table_samplingContext::T_BUCKET() {
  return getToken(HqlsqlParser::T_BUCKET, 0);
}

std::vector<HqlsqlParser::NumbersContext *> HqlsqlParser::Table_samplingContext::numbers() {
  return getRuleContexts<HqlsqlParser::NumbersContext>();
}

HqlsqlParser::NumbersContext* HqlsqlParser::Table_samplingContext::numbers(size_t i) {
  return getRuleContext<HqlsqlParser::NumbersContext>(i);
}

tree::TerminalNode* HqlsqlParser::Table_samplingContext::T_OUT() {
  return getToken(HqlsqlParser::T_OUT, 0);
}

tree::TerminalNode* HqlsqlParser::Table_samplingContext::T_OF() {
  return getToken(HqlsqlParser::T_OF, 0);
}

tree::TerminalNode* HqlsqlParser::Table_samplingContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Table_samplingContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Table_samplingContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Table_samplingContext::getRuleIndex() const {
  return HqlsqlParser::RuleTable_sampling;
}

void HqlsqlParser::Table_samplingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_sampling(this);
}

void HqlsqlParser::Table_samplingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_sampling(this);
}


antlrcpp::Any HqlsqlParser::Table_samplingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTable_sampling(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Table_samplingContext* HqlsqlParser::table_sampling() {
  Table_samplingContext *_localctx = _tracker.createInstance<Table_samplingContext>(_ctx, getState());
  enterRule(_localctx, 490, HqlsqlParser::RuleTable_sampling);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3513);
    match(HqlsqlParser::T_TABLESAMPLE);
    setState(3514);
    match(HqlsqlParser::T_OPEN_P);
    setState(3515);
    match(HqlsqlParser::T_BUCKET);
    setState(3516);
    numbers();
    setState(3517);
    match(HqlsqlParser::T_OUT);
    setState(3518);
    match(HqlsqlParser::T_OF);
    setState(3519);
    numbers();
    setState(3522);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ON) {
      setState(3520);
      match(HqlsqlParser::T_ON);
      setState(3521);
      expr(0);
    }
    setState(3524);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_samplingContext ------------------------------------------------------------------

HqlsqlParser::Block_samplingContext::Block_samplingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Block_samplingContext::T_TABLESAMPLE() {
  return getToken(HqlsqlParser::T_TABLESAMPLE, 0);
}

tree::TerminalNode* HqlsqlParser::Block_samplingContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Block_sampling_optionContext* HqlsqlParser::Block_samplingContext::block_sampling_option() {
  return getRuleContext<HqlsqlParser::Block_sampling_optionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Block_samplingContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Block_samplingContext::getRuleIndex() const {
  return HqlsqlParser::RuleBlock_sampling;
}

void HqlsqlParser::Block_samplingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_sampling(this);
}

void HqlsqlParser::Block_samplingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_sampling(this);
}


antlrcpp::Any HqlsqlParser::Block_samplingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_sampling(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Block_samplingContext* HqlsqlParser::block_sampling() {
  Block_samplingContext *_localctx = _tracker.createInstance<Block_samplingContext>(_ctx, getState());
  enterRule(_localctx, 492, HqlsqlParser::RuleBlock_sampling);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3526);
    match(HqlsqlParser::T_TABLESAMPLE);
    setState(3527);
    match(HqlsqlParser::T_OPEN_P);
    setState(3528);
    block_sampling_option();
    setState(3529);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_sampling_optionContext ------------------------------------------------------------------

HqlsqlParser::Block_sampling_optionContext::Block_sampling_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::NumbersContext* HqlsqlParser::Block_sampling_optionContext::numbers() {
  return getRuleContext<HqlsqlParser::NumbersContext>(0);
}

tree::TerminalNode* HqlsqlParser::Block_sampling_optionContext::T_PERCENTS() {
  return getToken(HqlsqlParser::T_PERCENTS, 0);
}

HqlsqlParser::Size_typesContext* HqlsqlParser::Block_sampling_optionContext::size_types() {
  return getRuleContext<HqlsqlParser::Size_typesContext>(0);
}

tree::TerminalNode* HqlsqlParser::Block_sampling_optionContext::T_ROWS() {
  return getToken(HqlsqlParser::T_ROWS, 0);
}


size_t HqlsqlParser::Block_sampling_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleBlock_sampling_option;
}

void HqlsqlParser::Block_sampling_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_sampling_option(this);
}

void HqlsqlParser::Block_sampling_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_sampling_option(this);
}


antlrcpp::Any HqlsqlParser::Block_sampling_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_sampling_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Block_sampling_optionContext* HqlsqlParser::block_sampling_option() {
  Block_sampling_optionContext *_localctx = _tracker.createInstance<Block_sampling_optionContext>(_ctx, getState());
  enterRule(_localctx, 494, HqlsqlParser::RuleBlock_sampling_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3531);
    numbers();
    setState(3535);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_PERCENTS: {
        setState(3532);
        match(HqlsqlParser::T_PERCENTS);
        break;
      }

      case HqlsqlParser::L_ID: {
        setState(3533);
        size_types();
        break;
      }

      case HqlsqlParser::T_ROWS: {
        setState(3534);
        match(HqlsqlParser::T_ROWS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumbersContext ------------------------------------------------------------------

HqlsqlParser::NumbersContext::NumbersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Dec_numberContext* HqlsqlParser::NumbersContext::dec_number() {
  return getRuleContext<HqlsqlParser::Dec_numberContext>(0);
}

HqlsqlParser::Int_numberContext* HqlsqlParser::NumbersContext::int_number() {
  return getRuleContext<HqlsqlParser::Int_numberContext>(0);
}


size_t HqlsqlParser::NumbersContext::getRuleIndex() const {
  return HqlsqlParser::RuleNumbers;
}

void HqlsqlParser::NumbersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumbers(this);
}

void HqlsqlParser::NumbersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumbers(this);
}


antlrcpp::Any HqlsqlParser::NumbersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitNumbers(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::NumbersContext* HqlsqlParser::numbers() {
  NumbersContext *_localctx = _tracker.createInstance<NumbersContext>(_ctx, getState());
  enterRule(_localctx, 496, HqlsqlParser::RuleNumbers);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3539);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 421, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3537);
      dec_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3538);
      int_number();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Size_typesContext ------------------------------------------------------------------

HqlsqlParser::Size_typesContext::Size_typesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Size_typesContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}


size_t HqlsqlParser::Size_typesContext::getRuleIndex() const {
  return HqlsqlParser::RuleSize_types;
}

void HqlsqlParser::Size_typesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSize_types(this);
}

void HqlsqlParser::Size_typesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSize_types(this);
}


antlrcpp::Any HqlsqlParser::Size_typesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSize_types(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Size_typesContext* HqlsqlParser::size_types() {
  Size_typesContext *_localctx = _tracker.createInstance<Size_typesContext>(_ctx, getState());
  enterRule(_localctx, 498, HqlsqlParser::RuleSize_types);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3541);
    match(HqlsqlParser::L_ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_subselect_clauseContext ------------------------------------------------------------------

HqlsqlParser::From_subselect_clauseContext::From_subselect_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::From_subselect_clauseContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::From_subselect_clauseContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::From_subselect_clauseContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::From_subselect_clauseContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::From_subselect_clauseContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}


size_t HqlsqlParser::From_subselect_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_subselect_clause;
}

void HqlsqlParser::From_subselect_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_subselect_clause(this);
}

void HqlsqlParser::From_subselect_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_subselect_clause(this);
}


antlrcpp::Any HqlsqlParser::From_subselect_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_subselect_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_subselect_clauseContext* HqlsqlParser::from_subselect_clause() {
  From_subselect_clauseContext *_localctx = _tracker.createInstance<From_subselect_clauseContext>(_ctx, getState());
  enterRule(_localctx, 500, HqlsqlParser::RuleFrom_subselect_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3543);
    match(HqlsqlParser::T_OPEN_P);
    setState(3544);
    select_stmt();
    setState(3545);
    match(HqlsqlParser::T_CLOSE_P);
    setState(3550);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx)) {
    case 1: {
      setState(3547);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 422, _ctx)) {
      case 1: {
        setState(3546);
        match(HqlsqlParser::T_AS);
        break;
      }

      }
      setState(3549);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_join_clauseContext ------------------------------------------------------------------

HqlsqlParser::From_join_clauseContext::From_join_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::From_join_clauseContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}

HqlsqlParser::From_table_clauseContext* HqlsqlParser::From_join_clauseContext::from_table_clause() {
  return getRuleContext<HqlsqlParser::From_table_clauseContext>(0);
}

HqlsqlParser::From_join_type_clauseContext* HqlsqlParser::From_join_clauseContext::from_join_type_clause() {
  return getRuleContext<HqlsqlParser::From_join_type_clauseContext>(0);
}

HqlsqlParser::On_conditionContext* HqlsqlParser::From_join_clauseContext::on_condition() {
  return getRuleContext<HqlsqlParser::On_conditionContext>(0);
}


size_t HqlsqlParser::From_join_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_join_clause;
}

void HqlsqlParser::From_join_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_join_clause(this);
}

void HqlsqlParser::From_join_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_join_clause(this);
}


antlrcpp::Any HqlsqlParser::From_join_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_join_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_join_clauseContext* HqlsqlParser::from_join_clause() {
  From_join_clauseContext *_localctx = _tracker.createInstance<From_join_clauseContext>(_ctx, getState());
  enterRule(_localctx, 502, HqlsqlParser::RuleFrom_join_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3559);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_COMMA: {
        enterOuterAlt(_localctx, 1);
        setState(3552);
        match(HqlsqlParser::T_COMMA);
        setState(3553);
        from_table_clause();
        break;
      }

      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_CROSS: {
        enterOuterAlt(_localctx, 2);
        setState(3554);
        from_join_type_clause();
        setState(3555);
        from_table_clause();
        setState(3557);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 424, _ctx)) {
        case 1: {
          setState(3556);
          on_condition();
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_join_type_clauseContext ------------------------------------------------------------------

HqlsqlParser::From_join_type_clauseContext::From_join_type_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_JOIN() {
  return getToken(HqlsqlParser::T_JOIN, 0);
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_INNER() {
  return getToken(HqlsqlParser::T_INNER, 0);
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_LEFT() {
  return getToken(HqlsqlParser::T_LEFT, 0);
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_RIGHT() {
  return getToken(HqlsqlParser::T_RIGHT, 0);
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_FULL() {
  return getToken(HqlsqlParser::T_FULL, 0);
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_OUTER() {
  return getToken(HqlsqlParser::T_OUTER, 0);
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_SEMI() {
  return getToken(HqlsqlParser::T_SEMI, 0);
}

tree::TerminalNode* HqlsqlParser::From_join_type_clauseContext::T_CROSS() {
  return getToken(HqlsqlParser::T_CROSS, 0);
}


size_t HqlsqlParser::From_join_type_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_join_type_clause;
}

void HqlsqlParser::From_join_type_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_join_type_clause(this);
}

void HqlsqlParser::From_join_type_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_join_type_clause(this);
}


antlrcpp::Any HqlsqlParser::From_join_type_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_join_type_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_join_type_clauseContext* HqlsqlParser::from_join_type_clause() {
  From_join_type_clauseContext *_localctx = _tracker.createInstance<From_join_type_clauseContext>(_ctx, getState());
  enterRule(_localctx, 504, HqlsqlParser::RuleFrom_join_type_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3575);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 428, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3562);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_INNER) {
        setState(3561);
        match(HqlsqlParser::T_INNER);
      }
      setState(3564);
      match(HqlsqlParser::T_JOIN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3565);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_FULL

      || _la == HqlsqlParser::T_LEFT || _la == HqlsqlParser::T_RIGHT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3567);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_OUTER) {
        setState(3566);
        match(HqlsqlParser::T_OUTER);
      }
      setState(3569);
      match(HqlsqlParser::T_JOIN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3570);
      match(HqlsqlParser::T_LEFT);
      setState(3571);
      match(HqlsqlParser::T_SEMI);
      setState(3572);
      match(HqlsqlParser::T_JOIN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3573);
      match(HqlsqlParser::T_CROSS);
      setState(3574);
      match(HqlsqlParser::T_JOIN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_alias_clauseContext ------------------------------------------------------------------

HqlsqlParser::From_alias_clauseContext::From_alias_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::ExprContext* HqlsqlParser::From_alias_clauseContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::From_alias_clauseContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::From_alias_clauseContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::From_alias_clauseContext::L_ID() {
  return getTokens(HqlsqlParser::L_ID);
}

tree::TerminalNode* HqlsqlParser::From_alias_clauseContext::L_ID(size_t i) {
  return getToken(HqlsqlParser::L_ID, i);
}

tree::TerminalNode* HqlsqlParser::From_alias_clauseContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::From_alias_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::From_alias_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::From_alias_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleFrom_alias_clause;
}

void HqlsqlParser::From_alias_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_alias_clause(this);
}

void HqlsqlParser::From_alias_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_alias_clause(this);
}


antlrcpp::Any HqlsqlParser::From_alias_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFrom_alias_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::From_alias_clauseContext* HqlsqlParser::from_alias_clause() {
  From_alias_clauseContext *_localctx = _tracker.createInstance<From_alias_clauseContext>(_ctx, getState());
  enterRule(_localctx, 506, HqlsqlParser::RuleFrom_alias_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3578);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 429, _ctx)) {
    case 1: {
      setState(3577);
      match(HqlsqlParser::T_AS);
      break;
    }

    }
    setState(3580);
    expr(0);
    setState(3591);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 431, _ctx)) {
    case 1: {
      setState(3581);
      match(HqlsqlParser::T_OPEN_P);
      setState(3582);
      match(HqlsqlParser::L_ID);
      setState(3587);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(3583);
        match(HqlsqlParser::T_COMMA);
        setState(3584);
        match(HqlsqlParser::L_ID);
        setState(3589);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3590);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- On_conditionContext ------------------------------------------------------------------

HqlsqlParser::On_conditionContext::On_conditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::On_conditionContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::On_conditionContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::On_conditionContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::On_conditionContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::On_conditionContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::On_conditionContext::T_DISTINCT() {
  return getToken(HqlsqlParser::T_DISTINCT, 0);
}

tree::TerminalNode* HqlsqlParser::On_conditionContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}


size_t HqlsqlParser::On_conditionContext::getRuleIndex() const {
  return HqlsqlParser::RuleOn_condition;
}

void HqlsqlParser::On_conditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOn_condition(this);
}

void HqlsqlParser::On_conditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOn_condition(this);
}


antlrcpp::Any HqlsqlParser::On_conditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitOn_condition(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::On_conditionContext* HqlsqlParser::on_condition() {
  On_conditionContext *_localctx = _tracker.createInstance<On_conditionContext>(_ctx, getState());
  enterRule(_localctx, 508, HqlsqlParser::RuleOn_condition);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3602);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 432, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3593);
      match(HqlsqlParser::T_ON);
      setState(3594);
      bool_expr(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3595);
      match(HqlsqlParser::T_ON);
      setState(3596);
      expr(0);
      setState(3597);
      match(HqlsqlParser::T_IS);
      setState(3598);
      match(HqlsqlParser::T_DISTINCT);
      setState(3599);
      match(HqlsqlParser::T_FROM);
      setState(3600);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_nameContext ------------------------------------------------------------------

HqlsqlParser::Table_nameContext::Table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Table_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Table_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleTable_name;
}

void HqlsqlParser::Table_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_name(this);
}

void HqlsqlParser::Table_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_name(this);
}


antlrcpp::Any HqlsqlParser::Table_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTable_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::table_name() {
  Table_nameContext *_localctx = _tracker.createInstance<Table_nameContext>(_ctx, getState());
  enterRule(_localctx, 510, HqlsqlParser::RuleTable_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3604);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_nameContext ------------------------------------------------------------------

HqlsqlParser::View_nameContext::View_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::View_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::View_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleView_name;
}

void HqlsqlParser::View_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_name(this);
}

void HqlsqlParser::View_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_name(this);
}


antlrcpp::Any HqlsqlParser::View_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitView_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::View_nameContext* HqlsqlParser::view_name() {
  View_nameContext *_localctx = _tracker.createInstance<View_nameContext>(_ctx, getState());
  enterRule(_localctx, 512, HqlsqlParser::RuleView_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3606);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Db_nameContext ------------------------------------------------------------------

HqlsqlParser::Db_nameContext::Db_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Db_nameContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}


size_t HqlsqlParser::Db_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleDb_name;
}

void HqlsqlParser::Db_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDb_name(this);
}

void HqlsqlParser::Db_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDb_name(this);
}


antlrcpp::Any HqlsqlParser::Db_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDb_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Db_nameContext* HqlsqlParser::db_name() {
  Db_nameContext *_localctx = _tracker.createInstance<Db_nameContext>(_ctx, getState());
  enterRule(_localctx, 514, HqlsqlParser::RuleDb_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3608);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_optionContext ------------------------------------------------------------------

HqlsqlParser::Select_optionContext::Select_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::From_clauseContext* HqlsqlParser::Select_optionContext::from_clause() {
  return getRuleContext<HqlsqlParser::From_clauseContext>(0);
}

HqlsqlParser::Where_clauseContext* HqlsqlParser::Select_optionContext::where_clause() {
  return getRuleContext<HqlsqlParser::Where_clauseContext>(0);
}

HqlsqlParser::Group_by_clauseContext* HqlsqlParser::Select_optionContext::group_by_clause() {
  return getRuleContext<HqlsqlParser::Group_by_clauseContext>(0);
}

HqlsqlParser::Having_clauseContext* HqlsqlParser::Select_optionContext::having_clause() {
  return getRuleContext<HqlsqlParser::Having_clauseContext>(0);
}

HqlsqlParser::Order_by_clauseContext* HqlsqlParser::Select_optionContext::order_by_clause() {
  return getRuleContext<HqlsqlParser::Order_by_clauseContext>(0);
}

HqlsqlParser::Cluster_by_clauseContext* HqlsqlParser::Select_optionContext::cluster_by_clause() {
  return getRuleContext<HqlsqlParser::Cluster_by_clauseContext>(0);
}

HqlsqlParser::Limit_clauseContext* HqlsqlParser::Select_optionContext::limit_clause() {
  return getRuleContext<HqlsqlParser::Limit_clauseContext>(0);
}

HqlsqlParser::Window_clauseContext* HqlsqlParser::Select_optionContext::window_clause() {
  return getRuleContext<HqlsqlParser::Window_clauseContext>(0);
}


size_t HqlsqlParser::Select_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleSelect_option;
}

void HqlsqlParser::Select_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_option(this);
}

void HqlsqlParser::Select_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_option(this);
}


antlrcpp::Any HqlsqlParser::Select_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSelect_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Select_optionContext* HqlsqlParser::select_option() {
  Select_optionContext *_localctx = _tracker.createInstance<Select_optionContext>(_ctx, getState());
  enterRule(_localctx, 516, HqlsqlParser::RuleSelect_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3618);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3610);
      from_clause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3611);
      where_clause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3612);
      group_by_clause();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3613);
      having_clause();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3614);
      order_by_clause();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3615);
      cluster_by_clause();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3616);
      limit_clause();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3617);
      window_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_clauseContext ------------------------------------------------------------------

HqlsqlParser::Window_clauseContext::Window_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Window_clauseContext::T_WINDOW() {
  return getToken(HqlsqlParser::T_WINDOW, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Window_clauseContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Expr_func_over_clauseContext* HqlsqlParser::Window_clauseContext::expr_func_over_clause() {
  return getRuleContext<HqlsqlParser::Expr_func_over_clauseContext>(0);
}


size_t HqlsqlParser::Window_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleWindow_clause;
}

void HqlsqlParser::Window_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindow_clause(this);
}

void HqlsqlParser::Window_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindow_clause(this);
}


antlrcpp::Any HqlsqlParser::Window_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitWindow_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Window_clauseContext* HqlsqlParser::window_clause() {
  Window_clauseContext *_localctx = _tracker.createInstance<Window_clauseContext>(_ctx, getState());
  enterRule(_localctx, 518, HqlsqlParser::RuleWindow_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3620);
    match(HqlsqlParser::T_WINDOW);
    setState(3621);
    ident();
    setState(3622);
    expr_func_over_clause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Where_clauseContext ------------------------------------------------------------------

HqlsqlParser::Where_clauseContext::Where_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Where_clauseContext::T_WHERE() {
  return getToken(HqlsqlParser::T_WHERE, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Where_clauseContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}


size_t HqlsqlParser::Where_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleWhere_clause;
}

void HqlsqlParser::Where_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhere_clause(this);
}

void HqlsqlParser::Where_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhere_clause(this);
}


antlrcpp::Any HqlsqlParser::Where_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitWhere_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Where_clauseContext* HqlsqlParser::where_clause() {
  Where_clauseContext *_localctx = _tracker.createInstance<Where_clauseContext>(_ctx, getState());
  enterRule(_localctx, 520, HqlsqlParser::RuleWhere_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3624);
    match(HqlsqlParser::T_WHERE);
    setState(3625);
    bool_expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_by_clauseContext ------------------------------------------------------------------

HqlsqlParser::Group_by_clauseContext::Group_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Group_by_clauseContext::T_GROUP() {
  return getToken(HqlsqlParser::T_GROUP, 0);
}

tree::TerminalNode* HqlsqlParser::Group_by_clauseContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Group_by_clauseContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Group_by_clauseContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Group_by_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Group_by_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Group_by_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleGroup_by_clause;
}

void HqlsqlParser::Group_by_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_by_clause(this);
}

void HqlsqlParser::Group_by_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_by_clause(this);
}


antlrcpp::Any HqlsqlParser::Group_by_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitGroup_by_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Group_by_clauseContext* HqlsqlParser::group_by_clause() {
  Group_by_clauseContext *_localctx = _tracker.createInstance<Group_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 522, HqlsqlParser::RuleGroup_by_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3627);
    match(HqlsqlParser::T_GROUP);
    setState(3628);
    match(HqlsqlParser::T_BY);
    setState(3629);
    expr(0);
    setState(3634);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 434, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3630);
        match(HqlsqlParser::T_COMMA);
        setState(3631);
        expr(0); 
      }
      setState(3636);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 434, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Having_clauseContext ------------------------------------------------------------------

HqlsqlParser::Having_clauseContext::Having_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Having_clauseContext::T_HAVING() {
  return getToken(HqlsqlParser::T_HAVING, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Having_clauseContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}


size_t HqlsqlParser::Having_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleHaving_clause;
}

void HqlsqlParser::Having_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHaving_clause(this);
}

void HqlsqlParser::Having_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHaving_clause(this);
}


antlrcpp::Any HqlsqlParser::Having_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitHaving_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Having_clauseContext* HqlsqlParser::having_clause() {
  Having_clauseContext *_localctx = _tracker.createInstance<Having_clauseContext>(_ctx, getState());
  enterRule(_localctx, 524, HqlsqlParser::RuleHaving_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3637);
    match(HqlsqlParser::T_HAVING);
    setState(3638);
    bool_expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Limit_clauseContext ------------------------------------------------------------------

HqlsqlParser::Limit_clauseContext::Limit_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Limit_clauseContext::T_LIMIT() {
  return getToken(HqlsqlParser::T_LIMIT, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Limit_clauseContext::L_INT() {
  return getTokens(HqlsqlParser::L_INT);
}

tree::TerminalNode* HqlsqlParser::Limit_clauseContext::L_INT(size_t i) {
  return getToken(HqlsqlParser::L_INT, i);
}

tree::TerminalNode* HqlsqlParser::Limit_clauseContext::T_COMMA() {
  return getToken(HqlsqlParser::T_COMMA, 0);
}


size_t HqlsqlParser::Limit_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleLimit_clause;
}

void HqlsqlParser::Limit_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLimit_clause(this);
}

void HqlsqlParser::Limit_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLimit_clause(this);
}


antlrcpp::Any HqlsqlParser::Limit_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitLimit_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Limit_clauseContext* HqlsqlParser::limit_clause() {
  Limit_clauseContext *_localctx = _tracker.createInstance<Limit_clauseContext>(_ctx, getState());
  enterRule(_localctx, 526, HqlsqlParser::RuleLimit_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3640);
    match(HqlsqlParser::T_LIMIT);
    setState(3643);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_COMMA) {
      setState(3641);
      match(HqlsqlParser::T_COMMA);
      setState(3642);
      match(HqlsqlParser::L_INT);
    }
    setState(3645);
    match(HqlsqlParser::L_INT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clauseContext ------------------------------------------------------------------

HqlsqlParser::Order_by_clauseContext::Order_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Order_by_clauseContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Order_by_clauseContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Order_by_clauseContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<HqlsqlParser::Order_by_clause_optionContext *> HqlsqlParser::Order_by_clauseContext::order_by_clause_option() {
  return getRuleContexts<HqlsqlParser::Order_by_clause_optionContext>();
}

HqlsqlParser::Order_by_clause_optionContext* HqlsqlParser::Order_by_clauseContext::order_by_clause_option(size_t i) {
  return getRuleContext<HqlsqlParser::Order_by_clause_optionContext>(i);
}

tree::TerminalNode* HqlsqlParser::Order_by_clauseContext::T_ORDER() {
  return getToken(HqlsqlParser::T_ORDER, 0);
}

tree::TerminalNode* HqlsqlParser::Order_by_clauseContext::T_SORT() {
  return getToken(HqlsqlParser::T_SORT, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Order_by_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Order_by_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Order_by_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleOrder_by_clause;
}

void HqlsqlParser::Order_by_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_clause(this);
}

void HqlsqlParser::Order_by_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_clause(this);
}


antlrcpp::Any HqlsqlParser::Order_by_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitOrder_by_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Order_by_clauseContext* HqlsqlParser::order_by_clause() {
  Order_by_clauseContext *_localctx = _tracker.createInstance<Order_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 528, HqlsqlParser::RuleOrder_by_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3647);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ORDER || _la == HqlsqlParser::T_SORT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3648);
    match(HqlsqlParser::T_BY);
    setState(3649);
    expr(0);
    setState(3650);
    order_by_clause_option();
    setState(3657);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 436, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3651);
        match(HqlsqlParser::T_COMMA);
        setState(3652);
        expr(0);
        setState(3653);
        order_by_clause_option(); 
      }
      setState(3659);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 436, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clause_optionContext ------------------------------------------------------------------

HqlsqlParser::Order_by_clause_optionContext::Order_by_clause_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Col_orderContext* HqlsqlParser::Order_by_clause_optionContext::col_order() {
  return getRuleContext<HqlsqlParser::Col_orderContext>(0);
}

HqlsqlParser::Col_null_orderContext* HqlsqlParser::Order_by_clause_optionContext::col_null_order() {
  return getRuleContext<HqlsqlParser::Col_null_orderContext>(0);
}


size_t HqlsqlParser::Order_by_clause_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleOrder_by_clause_option;
}

void HqlsqlParser::Order_by_clause_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_clause_option(this);
}

void HqlsqlParser::Order_by_clause_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_clause_option(this);
}


antlrcpp::Any HqlsqlParser::Order_by_clause_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitOrder_by_clause_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Order_by_clause_optionContext* HqlsqlParser::order_by_clause_option() {
  Order_by_clause_optionContext *_localctx = _tracker.createInstance<Order_by_clause_optionContext>(_ctx, getState());
  enterRule(_localctx, 530, HqlsqlParser::RuleOrder_by_clause_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3661);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 437, _ctx)) {
    case 1: {
      setState(3660);
      col_order();
      break;
    }

    }
    setState(3664);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 438, _ctx)) {
    case 1: {
      setState(3663);
      col_null_order();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_orderContext ------------------------------------------------------------------

HqlsqlParser::Col_orderContext::Col_orderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Col_orderContext::T_ASC() {
  return getToken(HqlsqlParser::T_ASC, 0);
}

tree::TerminalNode* HqlsqlParser::Col_orderContext::T_DESC() {
  return getToken(HqlsqlParser::T_DESC, 0);
}


size_t HqlsqlParser::Col_orderContext::getRuleIndex() const {
  return HqlsqlParser::RuleCol_order;
}

void HqlsqlParser::Col_orderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_order(this);
}

void HqlsqlParser::Col_orderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_order(this);
}


antlrcpp::Any HqlsqlParser::Col_orderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCol_order(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Col_orderContext* HqlsqlParser::col_order() {
  Col_orderContext *_localctx = _tracker.createInstance<Col_orderContext>(_ctx, getState());
  enterRule(_localctx, 532, HqlsqlParser::RuleCol_order);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3666);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ASC || _la == HqlsqlParser::T_DESC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_null_orderContext ------------------------------------------------------------------

HqlsqlParser::Col_null_orderContext::Col_null_orderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Col_null_orderContext::T_NULLS() {
  return getToken(HqlsqlParser::T_NULLS, 0);
}

tree::TerminalNode* HqlsqlParser::Col_null_orderContext::T_FIRST() {
  return getToken(HqlsqlParser::T_FIRST, 0);
}

tree::TerminalNode* HqlsqlParser::Col_null_orderContext::T_LAST() {
  return getToken(HqlsqlParser::T_LAST, 0);
}


size_t HqlsqlParser::Col_null_orderContext::getRuleIndex() const {
  return HqlsqlParser::RuleCol_null_order;
}

void HqlsqlParser::Col_null_orderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_null_order(this);
}

void HqlsqlParser::Col_null_orderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_null_order(this);
}


antlrcpp::Any HqlsqlParser::Col_null_orderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCol_null_order(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Col_null_orderContext* HqlsqlParser::col_null_order() {
  Col_null_orderContext *_localctx = _tracker.createInstance<Col_null_orderContext>(_ctx, getState());
  enterRule(_localctx, 534, HqlsqlParser::RuleCol_null_order);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3672);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 439, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3668);
      match(HqlsqlParser::T_NULLS);
      setState(3669);
      match(HqlsqlParser::T_FIRST);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3670);
      match(HqlsqlParser::T_NULLS);
      setState(3671);
      match(HqlsqlParser::T_LAST);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cluster_by_clauseContext ------------------------------------------------------------------

HqlsqlParser::Cluster_by_clauseContext::Cluster_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Cluster_by_clauseContext::T_CLUSTER() {
  return getToken(HqlsqlParser::T_CLUSTER, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Cluster_by_clauseContext::T_BY() {
  return getTokens(HqlsqlParser::T_BY);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_clauseContext::T_BY(size_t i) {
  return getToken(HqlsqlParser::T_BY, i);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Cluster_by_clauseContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Cluster_by_clauseContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Cluster_by_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Cluster_by_clauseContext::T_DISTRIBUTE() {
  return getTokens(HqlsqlParser::T_DISTRIBUTE);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_clauseContext::T_DISTRIBUTE(size_t i) {
  return getToken(HqlsqlParser::T_DISTRIBUTE, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Cluster_by_clauseContext::T_SORT() {
  return getTokens(HqlsqlParser::T_SORT);
}

tree::TerminalNode* HqlsqlParser::Cluster_by_clauseContext::T_SORT(size_t i) {
  return getToken(HqlsqlParser::T_SORT, i);
}


size_t HqlsqlParser::Cluster_by_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleCluster_by_clause;
}

void HqlsqlParser::Cluster_by_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCluster_by_clause(this);
}

void HqlsqlParser::Cluster_by_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCluster_by_clause(this);
}


antlrcpp::Any HqlsqlParser::Cluster_by_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitCluster_by_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Cluster_by_clauseContext* HqlsqlParser::cluster_by_clause() {
  Cluster_by_clauseContext *_localctx = _tracker.createInstance<Cluster_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 536, HqlsqlParser::RuleCluster_by_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3698);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_CLUSTER: {
        enterOuterAlt(_localctx, 1);
        setState(3674);
        match(HqlsqlParser::T_CLUSTER);
        setState(3675);
        match(HqlsqlParser::T_BY);
        setState(3676);
        expr(0);
        setState(3681);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3677);
            match(HqlsqlParser::T_COMMA);
            setState(3678);
            expr(0); 
          }
          setState(3683);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx);
        }
        break;
      }

      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_SORT: {
        enterOuterAlt(_localctx, 2);
        setState(3694); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(3684);
                  _la = _input->LA(1);
                  if (!(_la == HqlsqlParser::T_DISTRIBUTE || _la == HqlsqlParser::T_SORT)) {
                  _errHandler->recoverInline(this);
                  }
                  else {
                    _errHandler->reportMatch(this);
                    consume();
                  }
                  setState(3685);
                  match(HqlsqlParser::T_BY);
                  setState(3686);
                  expr(0);
                  setState(3691);
                  _errHandler->sync(this);
                  alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
                  while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                      setState(3687);
                      match(HqlsqlParser::T_COMMA);
                      setState(3688);
                      expr(0); 
                    }
                    setState(3693);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
                  }
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(3696); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_stmtContext ------------------------------------------------------------------

HqlsqlParser::Update_stmtContext::Update_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Update_stmtContext::T_UPDATE() {
  return getToken(HqlsqlParser::T_UPDATE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Update_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Update_stmtContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

HqlsqlParser::Update_assignmentContext* HqlsqlParser::Update_stmtContext::update_assignment() {
  return getRuleContext<HqlsqlParser::Update_assignmentContext>(0);
}

HqlsqlParser::Where_clauseContext* HqlsqlParser::Update_stmtContext::where_clause() {
  return getRuleContext<HqlsqlParser::Where_clauseContext>(0);
}

HqlsqlParser::Update_upsertContext* HqlsqlParser::Update_stmtContext::update_upsert() {
  return getRuleContext<HqlsqlParser::Update_upsertContext>(0);
}


size_t HqlsqlParser::Update_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleUpdate_stmt;
}

void HqlsqlParser::Update_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_stmt(this);
}

void HqlsqlParser::Update_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_stmt(this);
}


antlrcpp::Any HqlsqlParser::Update_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitUpdate_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Update_stmtContext* HqlsqlParser::update_stmt() {
  Update_stmtContext *_localctx = _tracker.createInstance<Update_stmtContext>(_ctx, getState());
  enterRule(_localctx, 538, HqlsqlParser::RuleUpdate_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3700);
    match(HqlsqlParser::T_UPDATE);
    setState(3701);
    table_name();
    setState(3702);
    match(HqlsqlParser::T_SET);
    setState(3703);
    update_assignment();
    setState(3705);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 444, _ctx)) {
    case 1: {
      setState(3704);
      where_clause();
      break;
    }

    }
    setState(3708);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 445, _ctx)) {
    case 1: {
      setState(3707);
      update_upsert();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_assignmentContext ------------------------------------------------------------------

HqlsqlParser::Update_assignmentContext::Update_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Assignment_stmt_itemContext *> HqlsqlParser::Update_assignmentContext::assignment_stmt_item() {
  return getRuleContexts<HqlsqlParser::Assignment_stmt_itemContext>();
}

HqlsqlParser::Assignment_stmt_itemContext* HqlsqlParser::Update_assignmentContext::assignment_stmt_item(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_stmt_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Update_assignmentContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Update_assignmentContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Update_assignmentContext::getRuleIndex() const {
  return HqlsqlParser::RuleUpdate_assignment;
}

void HqlsqlParser::Update_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_assignment(this);
}

void HqlsqlParser::Update_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_assignment(this);
}


antlrcpp::Any HqlsqlParser::Update_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitUpdate_assignment(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Update_assignmentContext* HqlsqlParser::update_assignment() {
  Update_assignmentContext *_localctx = _tracker.createInstance<Update_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 540, HqlsqlParser::RuleUpdate_assignment);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3710);
    assignment_stmt_item();
    setState(3715);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 446, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3711);
        match(HqlsqlParser::T_COMMA);
        setState(3712);
        assignment_stmt_item(); 
      }
      setState(3717);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 446, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_upsertContext ------------------------------------------------------------------

HqlsqlParser::Update_upsertContext::Update_upsertContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Update_upsertContext::T_ELSE() {
  return getToken(HqlsqlParser::T_ELSE, 0);
}

HqlsqlParser::Insert_stmtContext* HqlsqlParser::Update_upsertContext::insert_stmt() {
  return getRuleContext<HqlsqlParser::Insert_stmtContext>(0);
}


size_t HqlsqlParser::Update_upsertContext::getRuleIndex() const {
  return HqlsqlParser::RuleUpdate_upsert;
}

void HqlsqlParser::Update_upsertContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_upsert(this);
}

void HqlsqlParser::Update_upsertContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_upsert(this);
}


antlrcpp::Any HqlsqlParser::Update_upsertContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitUpdate_upsert(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Update_upsertContext* HqlsqlParser::update_upsert() {
  Update_upsertContext *_localctx = _tracker.createInstance<Update_upsertContext>(_ctx, getState());
  enterRule(_localctx, 542, HqlsqlParser::RuleUpdate_upsert);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3718);
    match(HqlsqlParser::T_ELSE);
    setState(3719);
    insert_stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_stmtContext ------------------------------------------------------------------

HqlsqlParser::Merge_stmtContext::Merge_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Merge_stmtContext::T_MERGE() {
  return getToken(HqlsqlParser::T_MERGE, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_stmtContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

HqlsqlParser::Merge_tableContext* HqlsqlParser::Merge_stmtContext::merge_table() {
  return getRuleContext<HqlsqlParser::Merge_tableContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_stmtContext::T_T() {
  return getToken(HqlsqlParser::T_T, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_stmtContext::T_USING() {
  return getToken(HqlsqlParser::T_USING, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Merge_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_stmtContext::T_S() {
  return getToken(HqlsqlParser::T_S, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_stmtContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Merge_stmtContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Merge_stmtContext::T_AS() {
  return getTokens(HqlsqlParser::T_AS);
}

tree::TerminalNode* HqlsqlParser::Merge_stmtContext::T_AS(size_t i) {
  return getToken(HqlsqlParser::T_AS, i);
}

std::vector<HqlsqlParser::Merge_conditionContext *> HqlsqlParser::Merge_stmtContext::merge_condition() {
  return getRuleContexts<HqlsqlParser::Merge_conditionContext>();
}

HqlsqlParser::Merge_conditionContext* HqlsqlParser::Merge_stmtContext::merge_condition(size_t i) {
  return getRuleContext<HqlsqlParser::Merge_conditionContext>(i);
}


size_t HqlsqlParser::Merge_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleMerge_stmt;
}

void HqlsqlParser::Merge_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_stmt(this);
}

void HqlsqlParser::Merge_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_stmt(this);
}


antlrcpp::Any HqlsqlParser::Merge_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitMerge_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Merge_stmtContext* HqlsqlParser::merge_stmt() {
  Merge_stmtContext *_localctx = _tracker.createInstance<Merge_stmtContext>(_ctx, getState());
  enterRule(_localctx, 544, HqlsqlParser::RuleMerge_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3721);
    match(HqlsqlParser::T_MERGE);
    setState(3722);
    match(HqlsqlParser::T_INTO);
    setState(3723);
    merge_table();
    setState(3725);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_AS) {
      setState(3724);
      match(HqlsqlParser::T_AS);
    }
    setState(3727);
    match(HqlsqlParser::T_T);
    setState(3728);
    match(HqlsqlParser::T_USING);
    setState(3729);
    expr(0);
    setState(3731);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_AS) {
      setState(3730);
      match(HqlsqlParser::T_AS);
    }
    setState(3733);
    match(HqlsqlParser::T_S);
    setState(3734);
    match(HqlsqlParser::T_ON);
    setState(3735);
    bool_expr(0);
    setState(3737); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3736);
              merge_condition();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3739); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 449, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_tableContext ------------------------------------------------------------------

HqlsqlParser::Merge_tableContext::Merge_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Merge_tableContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Merge_tableContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_tableContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Merge_tableContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_tableContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_tableContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}


size_t HqlsqlParser::Merge_tableContext::getRuleIndex() const {
  return HqlsqlParser::RuleMerge_table;
}

void HqlsqlParser::Merge_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_table(this);
}

void HqlsqlParser::Merge_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_table(this);
}


antlrcpp::Any HqlsqlParser::Merge_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitMerge_table(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Merge_tableContext* HqlsqlParser::merge_table() {
  Merge_tableContext *_localctx = _tracker.createInstance<Merge_tableContext>(_ctx, getState());
  enterRule(_localctx, 546, HqlsqlParser::RuleMerge_table);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3746);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::L_ID: {
        setState(3741);
        table_name();
        break;
      }

      case HqlsqlParser::T_OPEN_P: {
        setState(3742);
        match(HqlsqlParser::T_OPEN_P);
        setState(3743);
        select_stmt();
        setState(3744);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3752);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 452, _ctx)) {
    case 1: {
      setState(3749);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
      case 1: {
        setState(3748);
        match(HqlsqlParser::T_AS);
        break;
      }

      }
      setState(3751);
      ident();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_conditionContext ------------------------------------------------------------------

HqlsqlParser::Merge_conditionContext::Merge_conditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Merge_conditionContext::T_WHEN() {
  return getToken(HqlsqlParser::T_WHEN, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_conditionContext::T_MATCHED() {
  return getToken(HqlsqlParser::T_MATCHED, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_conditionContext::T_THEN() {
  return getToken(HqlsqlParser::T_THEN, 0);
}

HqlsqlParser::Merge_actionContext* HqlsqlParser::Merge_conditionContext::merge_action() {
  return getRuleContext<HqlsqlParser::Merge_actionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_conditionContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_conditionContext::T_AND() {
  return getToken(HqlsqlParser::T_AND, 0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Merge_conditionContext::bool_expr() {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_conditionContext::T_ELSE() {
  return getToken(HqlsqlParser::T_ELSE, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_conditionContext::T_IGNORE() {
  return getToken(HqlsqlParser::T_IGNORE, 0);
}


size_t HqlsqlParser::Merge_conditionContext::getRuleIndex() const {
  return HqlsqlParser::RuleMerge_condition;
}

void HqlsqlParser::Merge_conditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_condition(this);
}

void HqlsqlParser::Merge_conditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_condition(this);
}


antlrcpp::Any HqlsqlParser::Merge_conditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitMerge_condition(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Merge_conditionContext* HqlsqlParser::merge_condition() {
  Merge_conditionContext *_localctx = _tracker.createInstance<Merge_conditionContext>(_ctx, getState());
  enterRule(_localctx, 548, HqlsqlParser::RuleMerge_condition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3767);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_WHEN: {
        enterOuterAlt(_localctx, 1);
        setState(3754);
        match(HqlsqlParser::T_WHEN);
        setState(3756);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_NOT) {
          setState(3755);
          match(HqlsqlParser::T_NOT);
        }
        setState(3758);
        match(HqlsqlParser::T_MATCHED);
        setState(3761);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_AND) {
          setState(3759);
          match(HqlsqlParser::T_AND);
          setState(3760);
          bool_expr(0);
        }
        setState(3763);
        match(HqlsqlParser::T_THEN);
        setState(3764);
        merge_action();
        break;
      }

      case HqlsqlParser::T_ELSE: {
        enterOuterAlt(_localctx, 2);
        setState(3765);
        match(HqlsqlParser::T_ELSE);
        setState(3766);
        match(HqlsqlParser::T_IGNORE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_actionContext ------------------------------------------------------------------

HqlsqlParser::Merge_actionContext::Merge_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Merge_actionContext::T_INSERT() {
  return getToken(HqlsqlParser::T_INSERT, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_actionContext::T_VALUES() {
  return getToken(HqlsqlParser::T_VALUES, 0);
}

HqlsqlParser::Insert_stmt_rowContext* HqlsqlParser::Merge_actionContext::insert_stmt_row() {
  return getRuleContext<HqlsqlParser::Insert_stmt_rowContext>(0);
}

HqlsqlParser::Insert_stmt_colsContext* HqlsqlParser::Merge_actionContext::insert_stmt_cols() {
  return getRuleContext<HqlsqlParser::Insert_stmt_colsContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_actionContext::T_UPDATE() {
  return getToken(HqlsqlParser::T_UPDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Merge_actionContext::T_SET() {
  return getToken(HqlsqlParser::T_SET, 0);
}

std::vector<HqlsqlParser::Assignment_stmt_itemContext *> HqlsqlParser::Merge_actionContext::assignment_stmt_item() {
  return getRuleContexts<HqlsqlParser::Assignment_stmt_itemContext>();
}

HqlsqlParser::Assignment_stmt_itemContext* HqlsqlParser::Merge_actionContext::assignment_stmt_item(size_t i) {
  return getRuleContext<HqlsqlParser::Assignment_stmt_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Merge_actionContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Merge_actionContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

HqlsqlParser::Where_clauseContext* HqlsqlParser::Merge_actionContext::where_clause() {
  return getRuleContext<HqlsqlParser::Where_clauseContext>(0);
}

tree::TerminalNode* HqlsqlParser::Merge_actionContext::T_DELETE() {
  return getToken(HqlsqlParser::T_DELETE, 0);
}


size_t HqlsqlParser::Merge_actionContext::getRuleIndex() const {
  return HqlsqlParser::RuleMerge_action;
}

void HqlsqlParser::Merge_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_action(this);
}

void HqlsqlParser::Merge_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_action(this);
}


antlrcpp::Any HqlsqlParser::Merge_actionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitMerge_action(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Merge_actionContext* HqlsqlParser::merge_action() {
  Merge_actionContext *_localctx = _tracker.createInstance<Merge_actionContext>(_ctx, getState());
  enterRule(_localctx, 550, HqlsqlParser::RuleMerge_action);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3789);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_INSERT: {
        enterOuterAlt(_localctx, 1);
        setState(3769);
        match(HqlsqlParser::T_INSERT);
        setState(3771);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_OPEN_P) {
          setState(3770);
          insert_stmt_cols();
        }
        setState(3773);
        match(HqlsqlParser::T_VALUES);
        setState(3774);
        insert_stmt_row();
        break;
      }

      case HqlsqlParser::T_UPDATE: {
        enterOuterAlt(_localctx, 2);
        setState(3775);
        match(HqlsqlParser::T_UPDATE);
        setState(3776);
        match(HqlsqlParser::T_SET);
        setState(3777);
        assignment_stmt_item();
        setState(3782);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3778);
            match(HqlsqlParser::T_COMMA);
            setState(3779);
            assignment_stmt_item(); 
          }
          setState(3784);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx);
        }
        setState(3786);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 458, _ctx)) {
        case 1: {
          setState(3785);
          where_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_DELETE: {
        enterOuterAlt(_localctx, 3);
        setState(3788);
        match(HqlsqlParser::T_DELETE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Analyze_table_stmtContext ------------------------------------------------------------------

HqlsqlParser::Analyze_table_stmtContext::Analyze_table_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_ANALYZE() {
  return getToken(HqlsqlParser::T_ANALYZE, 0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Analyze_table_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_COMPUTE() {
  return getToken(HqlsqlParser::T_COMPUTE, 0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_STATISTICS() {
  return getToken(HqlsqlParser::T_STATISTICS, 0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Analyze_table_stmtContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_COLUMNS() {
  return getToken(HqlsqlParser::T_COLUMNS, 0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_CACHE() {
  return getToken(HqlsqlParser::T_CACHE, 0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_METADATA() {
  return getToken(HqlsqlParser::T_METADATA, 0);
}

tree::TerminalNode* HqlsqlParser::Analyze_table_stmtContext::T_NOSCAN() {
  return getToken(HqlsqlParser::T_NOSCAN, 0);
}


size_t HqlsqlParser::Analyze_table_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleAnalyze_table_stmt;
}

void HqlsqlParser::Analyze_table_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalyze_table_stmt(this);
}

void HqlsqlParser::Analyze_table_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalyze_table_stmt(this);
}


antlrcpp::Any HqlsqlParser::Analyze_table_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitAnalyze_table_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Analyze_table_stmtContext* HqlsqlParser::analyze_table_stmt() {
  Analyze_table_stmtContext *_localctx = _tracker.createInstance<Analyze_table_stmtContext>(_ctx, getState());
  enterRule(_localctx, 552, HqlsqlParser::RuleAnalyze_table_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3791);
    match(HqlsqlParser::T_ANALYZE);
    setState(3792);
    match(HqlsqlParser::T_TABLE);
    setState(3793);
    table_name();
    setState(3795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_PARTITION) {
      setState(3794);
      partition_assignment_list();
    }
    setState(3797);
    match(HqlsqlParser::T_COMPUTE);
    setState(3798);
    match(HqlsqlParser::T_STATISTICS);
    setState(3801);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      setState(3799);
      match(HqlsqlParser::T_FOR);
      setState(3800);
      match(HqlsqlParser::T_COLUMNS);
      break;
    }

    }
    setState(3805);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
    case 1: {
      setState(3803);
      match(HqlsqlParser::T_CACHE);
      setState(3804);
      match(HqlsqlParser::T_METADATA);
      break;
    }

    }
    setState(3808);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx)) {
    case 1: {
      setState(3807);
      match(HqlsqlParser::T_NOSCAN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_stmtContext ------------------------------------------------------------------

HqlsqlParser::Delete_stmtContext::Delete_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Delete_stmtContext::T_DELETE() {
  return getToken(HqlsqlParser::T_DELETE, 0);
}

HqlsqlParser::Table_nameContext* HqlsqlParser::Delete_stmtContext::table_name() {
  return getRuleContext<HqlsqlParser::Table_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Delete_stmtContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

HqlsqlParser::Delete_aliasContext* HqlsqlParser::Delete_stmtContext::delete_alias() {
  return getRuleContext<HqlsqlParser::Delete_aliasContext>(0);
}

HqlsqlParser::Where_clauseContext* HqlsqlParser::Delete_stmtContext::where_clause() {
  return getRuleContext<HqlsqlParser::Where_clauseContext>(0);
}

tree::TerminalNode* HqlsqlParser::Delete_stmtContext::T_ALL() {
  return getToken(HqlsqlParser::T_ALL, 0);
}


size_t HqlsqlParser::Delete_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleDelete_stmt;
}

void HqlsqlParser::Delete_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelete_stmt(this);
}

void HqlsqlParser::Delete_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelete_stmt(this);
}


antlrcpp::Any HqlsqlParser::Delete_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDelete_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Delete_stmtContext* HqlsqlParser::delete_stmt() {
  Delete_stmtContext *_localctx = _tracker.createInstance<Delete_stmtContext>(_ctx, getState());
  enterRule(_localctx, 554, HqlsqlParser::RuleDelete_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3810);
    match(HqlsqlParser::T_DELETE);
    setState(3812);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_FROM) {
      setState(3811);
      match(HqlsqlParser::T_FROM);
    }
    setState(3814);
    table_name();
    setState(3816);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 465, _ctx)) {
    case 1: {
      setState(3815);
      delete_alias();
      break;
    }

    }
    setState(3820);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 466, _ctx)) {
    case 1: {
      setState(3818);
      where_clause();
      break;
    }

    case 2: {
      setState(3819);
      match(HqlsqlParser::T_ALL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_aliasContext ------------------------------------------------------------------

HqlsqlParser::Delete_aliasContext::Delete_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Delete_aliasContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Delete_aliasContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}


size_t HqlsqlParser::Delete_aliasContext::getRuleIndex() const {
  return HqlsqlParser::RuleDelete_alias;
}

void HqlsqlParser::Delete_aliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelete_alias(this);
}

void HqlsqlParser::Delete_aliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelete_alias(this);
}


antlrcpp::Any HqlsqlParser::Delete_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDelete_alias(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Delete_aliasContext* HqlsqlParser::delete_alias() {
  Delete_aliasContext *_localctx = _tracker.createInstance<Delete_aliasContext>(_ctx, getState());
  enterRule(_localctx, 556, HqlsqlParser::RuleDelete_alias);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3823);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 467, _ctx)) {
    case 1: {
      setState(3822);
      match(HqlsqlParser::T_AS);
      break;
    }

    }
    setState(3825);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Describe_stmtContext ------------------------------------------------------------------

HqlsqlParser::Describe_stmtContext::Describe_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HqlsqlParser::Describe_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleDescribe_stmt;
}

void HqlsqlParser::Describe_stmtContext::copyFrom(Describe_stmtContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Desc_db_schemaContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Desc_db_schemaContext::T_DESCRIBE() {
  return getToken(HqlsqlParser::T_DESCRIBE, 0);
}

HqlsqlParser::Db_nameContext* HqlsqlParser::Desc_db_schemaContext::db_name() {
  return getRuleContext<HqlsqlParser::Db_nameContext>(0);
}

tree::TerminalNode* HqlsqlParser::Desc_db_schemaContext::T_DATABASE() {
  return getToken(HqlsqlParser::T_DATABASE, 0);
}

tree::TerminalNode* HqlsqlParser::Desc_db_schemaContext::T_SCHEMA() {
  return getToken(HqlsqlParser::T_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Desc_db_schemaContext::T_EXTENDED() {
  return getToken(HqlsqlParser::T_EXTENDED, 0);
}

HqlsqlParser::Desc_db_schemaContext::Desc_db_schemaContext(Describe_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Desc_db_schemaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesc_db_schema(this);
}
void HqlsqlParser::Desc_db_schemaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesc_db_schema(this);
}

antlrcpp::Any HqlsqlParser::Desc_db_schemaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDesc_db_schema(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Desc_table_view_columnContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Desc_table_view_columnContext::T_DESCRIBE() {
  return getToken(HqlsqlParser::T_DESCRIBE, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Desc_table_view_columnContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::Column_nameContext* HqlsqlParser::Desc_table_view_columnContext::column_name() {
  return getRuleContext<HqlsqlParser::Column_nameContext>(0);
}

HqlsqlParser::Partition_assignment_listContext* HqlsqlParser::Desc_table_view_columnContext::partition_assignment_list() {
  return getRuleContext<HqlsqlParser::Partition_assignment_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Desc_table_view_columnContext::T_EXTENDED() {
  return getToken(HqlsqlParser::T_EXTENDED, 0);
}

tree::TerminalNode* HqlsqlParser::Desc_table_view_columnContext::T_FORMATTED() {
  return getToken(HqlsqlParser::T_FORMATTED, 0);
}

HqlsqlParser::Desc_table_view_columnContext::Desc_table_view_columnContext(Describe_stmtContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Desc_table_view_columnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesc_table_view_column(this);
}
void HqlsqlParser::Desc_table_view_columnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesc_table_view_column(this);
}

antlrcpp::Any HqlsqlParser::Desc_table_view_columnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDesc_table_view_column(this);
  else
    return visitor->visitChildren(this);
}
HqlsqlParser::Describe_stmtContext* HqlsqlParser::describe_stmt() {
  Describe_stmtContext *_localctx = _tracker.createInstance<Describe_stmtContext>(_ctx, getState());
  enterRule(_localctx, 558, HqlsqlParser::RuleDescribe_stmt);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3844);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 472, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Describe_stmtContext *>(_tracker.createInstance<HqlsqlParser::Desc_db_schemaContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3827);
      match(HqlsqlParser::T_DESCRIBE);
      setState(3828);
      dynamic_cast<Desc_db_schemaContext *>(_localctx)->tk = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_DATABASE || _la == HqlsqlParser::T_SCHEMA)) {
        dynamic_cast<Desc_db_schemaContext *>(_localctx)->tk = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3830);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx)) {
      case 1: {
        setState(3829);
        match(HqlsqlParser::T_EXTENDED);
        break;
      }

      }
      setState(3832);
      db_name();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Describe_stmtContext *>(_tracker.createInstance<HqlsqlParser::Desc_table_view_columnContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3833);
      match(HqlsqlParser::T_DESCRIBE);
      setState(3835);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 469, _ctx)) {
      case 1: {
        setState(3834);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_EXTENDED

        || _la == HqlsqlParser::T_FORMATTED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(3837);
      ident();
      setState(3839);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 470, _ctx)) {
      case 1: {
        setState(3838);
        column_name();
        break;
      }

      }
      setState(3842);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 471, _ctx)) {
      case 1: {
        setState(3841);
        partition_assignment_list();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_exprContext ------------------------------------------------------------------

HqlsqlParser::Bool_exprContext::Bool_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Bool_exprContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::Bool_exprContext *> HqlsqlParser::Bool_exprContext::bool_expr() {
  return getRuleContexts<HqlsqlParser::Bool_exprContext>();
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Bool_exprContext::bool_expr(size_t i) {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Bool_exprContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_exprContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

HqlsqlParser::Bool_expr_atomContext* HqlsqlParser::Bool_exprContext::bool_expr_atom() {
  return getRuleContext<HqlsqlParser::Bool_expr_atomContext>(0);
}

HqlsqlParser::Bool_expr_logical_operatorContext* HqlsqlParser::Bool_exprContext::bool_expr_logical_operator() {
  return getRuleContext<HqlsqlParser::Bool_expr_logical_operatorContext>(0);
}


size_t HqlsqlParser::Bool_exprContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr;
}

void HqlsqlParser::Bool_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr(this);
}

void HqlsqlParser::Bool_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr(this);
}


antlrcpp::Any HqlsqlParser::Bool_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr(this);
  else
    return visitor->visitChildren(this);
}


HqlsqlParser::Bool_exprContext* HqlsqlParser::bool_expr() {
   return bool_expr(0);
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::bool_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HqlsqlParser::Bool_exprContext *_localctx = _tracker.createInstance<Bool_exprContext>(_ctx, parentState);
  HqlsqlParser::Bool_exprContext *previousContext = _localctx;
  size_t startState = 560;
  enterRecursionRule(_localctx, 560, HqlsqlParser::RuleBool_expr, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3855);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 474, _ctx)) {
    case 1: {
      setState(3848);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_NOT) {
        setState(3847);
        match(HqlsqlParser::T_NOT);
      }
      setState(3850);
      match(HqlsqlParser::T_OPEN_P);
      setState(3851);
      bool_expr(0);
      setState(3852);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 2: {
      setState(3854);
      bool_expr_atom();
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(3863);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 475, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bool_exprContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBool_expr);
        setState(3857);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(3858);
        bool_expr_logical_operator();
        setState(3859);
        bool_expr(3); 
      }
      setState(3865);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 475, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bool_expr_atomContext ------------------------------------------------------------------

HqlsqlParser::Bool_expr_atomContext::Bool_expr_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Bool_expr_unaryContext* HqlsqlParser::Bool_expr_atomContext::bool_expr_unary() {
  return getRuleContext<HqlsqlParser::Bool_expr_unaryContext>(0);
}

HqlsqlParser::Bool_expr_binaryContext* HqlsqlParser::Bool_expr_atomContext::bool_expr_binary() {
  return getRuleContext<HqlsqlParser::Bool_expr_binaryContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Bool_expr_atomContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Bool_expr_atomContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr_atom;
}

void HqlsqlParser::Bool_expr_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr_atom(this);
}

void HqlsqlParser::Bool_expr_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr_atom(this);
}


antlrcpp::Any HqlsqlParser::Bool_expr_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr_atom(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_expr_atomContext* HqlsqlParser::bool_expr_atom() {
  Bool_expr_atomContext *_localctx = _tracker.createInstance<Bool_expr_atomContext>(_ctx, getState());
  enterRule(_localctx, 562, HqlsqlParser::RuleBool_expr_atom);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3869);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 476, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3866);
      bool_expr_unary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3867);
      bool_expr_binary();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3868);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_expr_unaryContext ------------------------------------------------------------------

HqlsqlParser::Bool_expr_unaryContext::Bool_expr_unaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Bool_expr_unaryContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Bool_expr_unaryContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_BETWEEN() {
  return getToken(HqlsqlParser::T_BETWEEN, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_AND() {
  return getToken(HqlsqlParser::T_AND, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Bool_expr_unaryContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_unaryContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Bool_expr_single_inContext* HqlsqlParser::Bool_expr_unaryContext::bool_expr_single_in() {
  return getRuleContext<HqlsqlParser::Bool_expr_single_inContext>(0);
}

HqlsqlParser::Bool_expr_multi_inContext* HqlsqlParser::Bool_expr_unaryContext::bool_expr_multi_in() {
  return getRuleContext<HqlsqlParser::Bool_expr_multi_inContext>(0);
}


size_t HqlsqlParser::Bool_expr_unaryContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr_unary;
}

void HqlsqlParser::Bool_expr_unaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr_unary(this);
}

void HqlsqlParser::Bool_expr_unaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr_unary(this);
}


antlrcpp::Any HqlsqlParser::Bool_expr_unaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr_unary(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_expr_unaryContext* HqlsqlParser::bool_expr_unary() {
  Bool_expr_unaryContext *_localctx = _tracker.createInstance<Bool_expr_unaryContext>(_ctx, getState());
  enterRule(_localctx, 564, HqlsqlParser::RuleBool_expr_unary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3894);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 479, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3871);
      expr(0);
      setState(3872);
      match(HqlsqlParser::T_IS);
      setState(3874);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_NOT) {
        setState(3873);
        match(HqlsqlParser::T_NOT);
      }
      setState(3876);
      match(HqlsqlParser::T_NULL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3878);
      expr(0);
      setState(3879);
      match(HqlsqlParser::T_BETWEEN);
      setState(3880);
      expr(0);
      setState(3881);
      match(HqlsqlParser::T_AND);
      setState(3882);
      expr(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3885);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_NOT) {
        setState(3884);
        match(HqlsqlParser::T_NOT);
      }
      setState(3887);
      match(HqlsqlParser::T_EXISTS);
      setState(3888);
      match(HqlsqlParser::T_OPEN_P);
      setState(3889);
      select_stmt();
      setState(3890);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3892);
      bool_expr_single_in();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3893);
      bool_expr_multi_in();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_expr_single_inContext ------------------------------------------------------------------

HqlsqlParser::Bool_expr_single_inContext::Bool_expr_single_inContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Bool_expr_single_inContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Bool_expr_single_inContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_single_inContext::T_IN() {
  return getToken(HqlsqlParser::T_IN, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_single_inContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_single_inContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Bool_expr_single_inContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_single_inContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Bool_expr_single_inContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_single_inContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Bool_expr_single_inContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr_single_in;
}

void HqlsqlParser::Bool_expr_single_inContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr_single_in(this);
}

void HqlsqlParser::Bool_expr_single_inContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr_single_in(this);
}


antlrcpp::Any HqlsqlParser::Bool_expr_single_inContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr_single_in(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_expr_single_inContext* HqlsqlParser::bool_expr_single_in() {
  Bool_expr_single_inContext *_localctx = _tracker.createInstance<Bool_expr_single_inContext>(_ctx, getState());
  enterRule(_localctx, 566, HqlsqlParser::RuleBool_expr_single_in);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3896);
    expr(0);
    setState(3898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_NOT) {
      setState(3897);
      match(HqlsqlParser::T_NOT);
    }
    setState(3900);
    match(HqlsqlParser::T_IN);
    setState(3901);
    match(HqlsqlParser::T_OPEN_P);
    setState(3911);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 482, _ctx)) {
    case 1: {
      setState(3902);
      expr(0);
      setState(3907);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(3903);
        match(HqlsqlParser::T_COMMA);
        setState(3904);
        expr(0);
        setState(3909);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      setState(3910);
      select_stmt();
      break;
    }

    }
    setState(3913);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_expr_multi_inContext ------------------------------------------------------------------

HqlsqlParser::Bool_expr_multi_inContext::Bool_expr_multi_inContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Paren_expr_listContext *> HqlsqlParser::Bool_expr_multi_inContext::paren_expr_list() {
  return getRuleContexts<HqlsqlParser::Paren_expr_listContext>();
}

HqlsqlParser::Paren_expr_listContext* HqlsqlParser::Bool_expr_multi_inContext::paren_expr_list(size_t i) {
  return getRuleContext<HqlsqlParser::Paren_expr_listContext>(i);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_multi_inContext::T_IN() {
  return getToken(HqlsqlParser::T_IN, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_multi_inContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_multi_inContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Bool_expr_multi_inContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_multi_inContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Bool_expr_multi_inContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_multi_inContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Bool_expr_multi_inContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr_multi_in;
}

void HqlsqlParser::Bool_expr_multi_inContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr_multi_in(this);
}

void HqlsqlParser::Bool_expr_multi_inContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr_multi_in(this);
}


antlrcpp::Any HqlsqlParser::Bool_expr_multi_inContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr_multi_in(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_expr_multi_inContext* HqlsqlParser::bool_expr_multi_in() {
  Bool_expr_multi_inContext *_localctx = _tracker.createInstance<Bool_expr_multi_inContext>(_ctx, getState());
  enterRule(_localctx, 568, HqlsqlParser::RuleBool_expr_multi_in);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3915);
    paren_expr_list();
    setState(3917);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_NOT) {
      setState(3916);
      match(HqlsqlParser::T_NOT);
    }
    setState(3919);
    match(HqlsqlParser::T_IN);
    setState(3920);
    match(HqlsqlParser::T_OPEN_P);
    setState(3930);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 485, _ctx)) {
    case 1: {
      setState(3921);
      paren_expr_list();
      setState(3926);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(3922);
        match(HqlsqlParser::T_COMMA);
        setState(3923);
        paren_expr_list();
        setState(3928);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      setState(3929);
      select_stmt();
      break;
    }

    }
    setState(3932);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paren_expr_listContext ------------------------------------------------------------------

HqlsqlParser::Paren_expr_listContext::Paren_expr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Paren_expr_listContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Expr_listContext* HqlsqlParser::Paren_expr_listContext::expr_list() {
  return getRuleContext<HqlsqlParser::Expr_listContext>(0);
}

tree::TerminalNode* HqlsqlParser::Paren_expr_listContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}


size_t HqlsqlParser::Paren_expr_listContext::getRuleIndex() const {
  return HqlsqlParser::RuleParen_expr_list;
}

void HqlsqlParser::Paren_expr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParen_expr_list(this);
}

void HqlsqlParser::Paren_expr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParen_expr_list(this);
}


antlrcpp::Any HqlsqlParser::Paren_expr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitParen_expr_list(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Paren_expr_listContext* HqlsqlParser::paren_expr_list() {
  Paren_expr_listContext *_localctx = _tracker.createInstance<Paren_expr_listContext>(_ctx, getState());
  enterRule(_localctx, 570, HqlsqlParser::RuleParen_expr_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3934);
    match(HqlsqlParser::T_OPEN_P);
    setState(3935);
    expr_list();
    setState(3936);
    match(HqlsqlParser::T_CLOSE_P);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_listContext ------------------------------------------------------------------

HqlsqlParser::Expr_listContext::Expr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Expr_listContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_listContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_listContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Expr_listContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Expr_listContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_list;
}

void HqlsqlParser::Expr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_list(this);
}

void HqlsqlParser::Expr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_list(this);
}


antlrcpp::Any HqlsqlParser::Expr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_list(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_listContext* HqlsqlParser::expr_list() {
  Expr_listContext *_localctx = _tracker.createInstance<Expr_listContext>(_ctx, getState());
  enterRule(_localctx, 572, HqlsqlParser::RuleExpr_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3938);
    expr(0);
    setState(3943);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(3939);
      match(HqlsqlParser::T_COMMA);
      setState(3940);
      expr(0);
      setState(3945);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_expr_binaryContext ------------------------------------------------------------------

HqlsqlParser::Bool_expr_binaryContext::Bool_expr_binaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Bool_expr_binaryContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Bool_expr_binaryContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

HqlsqlParser::Bool_expr_binary_operatorContext* HqlsqlParser::Bool_expr_binaryContext::bool_expr_binary_operator() {
  return getRuleContext<HqlsqlParser::Bool_expr_binary_operatorContext>(0);
}


size_t HqlsqlParser::Bool_expr_binaryContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr_binary;
}

void HqlsqlParser::Bool_expr_binaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr_binary(this);
}

void HqlsqlParser::Bool_expr_binaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr_binary(this);
}


antlrcpp::Any HqlsqlParser::Bool_expr_binaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr_binary(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_expr_binaryContext* HqlsqlParser::bool_expr_binary() {
  Bool_expr_binaryContext *_localctx = _tracker.createInstance<Bool_expr_binaryContext>(_ctx, getState());
  enterRule(_localctx, 574, HqlsqlParser::RuleBool_expr_binary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3946);
    expr(0);
    setState(3947);
    bool_expr_binary_operator();
    setState(3948);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_expr_logical_operatorContext ------------------------------------------------------------------

HqlsqlParser::Bool_expr_logical_operatorContext::Bool_expr_logical_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Bool_expr_logical_operatorContext::T_AND() {
  return getToken(HqlsqlParser::T_AND, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_logical_operatorContext::T_OR() {
  return getToken(HqlsqlParser::T_OR, 0);
}


size_t HqlsqlParser::Bool_expr_logical_operatorContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr_logical_operator;
}

void HqlsqlParser::Bool_expr_logical_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr_logical_operator(this);
}

void HqlsqlParser::Bool_expr_logical_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr_logical_operator(this);
}


antlrcpp::Any HqlsqlParser::Bool_expr_logical_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr_logical_operator(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_expr_logical_operatorContext* HqlsqlParser::bool_expr_logical_operator() {
  Bool_expr_logical_operatorContext *_localctx = _tracker.createInstance<Bool_expr_logical_operatorContext>(_ctx, getState());
  enterRule(_localctx, 576, HqlsqlParser::RuleBool_expr_logical_operator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3950);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_AND || _la == HqlsqlParser::T_OR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_expr_binary_operatorContext ------------------------------------------------------------------

HqlsqlParser::Bool_expr_binary_operatorContext::Bool_expr_binary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_EQUAL2() {
  return getToken(HqlsqlParser::T_EQUAL2, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_NOTEQUAL() {
  return getToken(HqlsqlParser::T_NOTEQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_NOTEQUAL2() {
  return getToken(HqlsqlParser::T_NOTEQUAL2, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_LESS() {
  return getToken(HqlsqlParser::T_LESS, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_LESSEQUAL() {
  return getToken(HqlsqlParser::T_LESSEQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_GREATER() {
  return getToken(HqlsqlParser::T_GREATER, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_GREATEREQUAL() {
  return getToken(HqlsqlParser::T_GREATEREQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_LIKE() {
  return getToken(HqlsqlParser::T_LIKE, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_RLIKE() {
  return getToken(HqlsqlParser::T_RLIKE, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_REGEXP() {
  return getToken(HqlsqlParser::T_REGEXP, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_expr_binary_operatorContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}


size_t HqlsqlParser::Bool_expr_binary_operatorContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_expr_binary_operator;
}

void HqlsqlParser::Bool_expr_binary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_expr_binary_operator(this);
}

void HqlsqlParser::Bool_expr_binary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_expr_binary_operator(this);
}


antlrcpp::Any HqlsqlParser::Bool_expr_binary_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_expr_binary_operator(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_expr_binary_operatorContext* HqlsqlParser::bool_expr_binary_operator() {
  Bool_expr_binary_operatorContext *_localctx = _tracker.createInstance<Bool_expr_binary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 578, HqlsqlParser::RuleBool_expr_binary_operator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3964);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_EQUAL: {
        enterOuterAlt(_localctx, 1);
        setState(3952);
        match(HqlsqlParser::T_EQUAL);
        break;
      }

      case HqlsqlParser::T_EQUAL2: {
        enterOuterAlt(_localctx, 2);
        setState(3953);
        match(HqlsqlParser::T_EQUAL2);
        break;
      }

      case HqlsqlParser::T_NOTEQUAL: {
        enterOuterAlt(_localctx, 3);
        setState(3954);
        match(HqlsqlParser::T_NOTEQUAL);
        break;
      }

      case HqlsqlParser::T_NOTEQUAL2: {
        enterOuterAlt(_localctx, 4);
        setState(3955);
        match(HqlsqlParser::T_NOTEQUAL2);
        break;
      }

      case HqlsqlParser::T_LESS: {
        enterOuterAlt(_localctx, 5);
        setState(3956);
        match(HqlsqlParser::T_LESS);
        break;
      }

      case HqlsqlParser::T_LESSEQUAL: {
        enterOuterAlt(_localctx, 6);
        setState(3957);
        match(HqlsqlParser::T_LESSEQUAL);
        break;
      }

      case HqlsqlParser::T_GREATER: {
        enterOuterAlt(_localctx, 7);
        setState(3958);
        match(HqlsqlParser::T_GREATER);
        break;
      }

      case HqlsqlParser::T_GREATEREQUAL: {
        enterOuterAlt(_localctx, 8);
        setState(3959);
        match(HqlsqlParser::T_GREATEREQUAL);
        break;
      }

      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_RLIKE: {
        enterOuterAlt(_localctx, 9);
        setState(3961);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_NOT) {
          setState(3960);
          match(HqlsqlParser::T_NOT);
        }
        setState(3963);
        _la = _input->LA(1);
        if (!(_la == HqlsqlParser::T_LIKE || _la == HqlsqlParser::T_REGEXP

        || _la == HqlsqlParser::T_RLIKE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

HqlsqlParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::ExprContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::ExprContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::ExprContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

HqlsqlParser::Expr_unaryContext* HqlsqlParser::ExprContext::expr_unary() {
  return getRuleContext<HqlsqlParser::Expr_unaryContext>(0);
}

HqlsqlParser::Expr_intervalContext* HqlsqlParser::ExprContext::expr_interval() {
  return getRuleContext<HqlsqlParser::Expr_intervalContext>(0);
}

HqlsqlParser::Expr_concatContext* HqlsqlParser::ExprContext::expr_concat() {
  return getRuleContext<HqlsqlParser::Expr_concatContext>(0);
}

HqlsqlParser::Expr_caseContext* HqlsqlParser::ExprContext::expr_case() {
  return getRuleContext<HqlsqlParser::Expr_caseContext>(0);
}

HqlsqlParser::Expr_cursor_attributeContext* HqlsqlParser::ExprContext::expr_cursor_attribute() {
  return getRuleContext<HqlsqlParser::Expr_cursor_attributeContext>(0);
}

HqlsqlParser::Expr_agg_window_funcContext* HqlsqlParser::ExprContext::expr_agg_window_func() {
  return getRuleContext<HqlsqlParser::Expr_agg_window_funcContext>(0);
}

HqlsqlParser::Expr_spec_funcContext* HqlsqlParser::ExprContext::expr_spec_func() {
  return getRuleContext<HqlsqlParser::Expr_spec_funcContext>(0);
}

HqlsqlParser::Expr_funcContext* HqlsqlParser::ExprContext::expr_func() {
  return getRuleContext<HqlsqlParser::Expr_funcContext>(0);
}

HqlsqlParser::Expr_atomContext* HqlsqlParser::ExprContext::expr_atom() {
  return getRuleContext<HqlsqlParser::Expr_atomContext>(0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_MUL() {
  return getToken(HqlsqlParser::T_MUL, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_DIV_SIGN() {
  return getToken(HqlsqlParser::T_DIV_SIGN, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_DIV() {
  return getToken(HqlsqlParser::T_DIV, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_ADD_SIGN() {
  return getToken(HqlsqlParser::T_ADD_SIGN, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_SUB() {
  return getToken(HqlsqlParser::T_SUB, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_PERCENT() {
  return getToken(HqlsqlParser::T_PERCENT, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_PIPE() {
  return getToken(HqlsqlParser::T_PIPE, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_EXPONENT() {
  return getToken(HqlsqlParser::T_EXPONENT, 0);
}

tree::TerminalNode* HqlsqlParser::ExprContext::T_AND_SIGN() {
  return getToken(HqlsqlParser::T_AND_SIGN, 0);
}

HqlsqlParser::Interval_itemContext* HqlsqlParser::ExprContext::interval_item() {
  return getRuleContext<HqlsqlParser::Interval_itemContext>(0);
}


size_t HqlsqlParser::ExprContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr;
}

void HqlsqlParser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void HqlsqlParser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}


antlrcpp::Any HqlsqlParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}


HqlsqlParser::ExprContext* HqlsqlParser::expr() {
   return expr(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  HqlsqlParser::ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, parentState);
  HqlsqlParser::ExprContext *previousContext = _localctx;
  size_t startState = 580;
  enterRecursionRule(_localctx, 580, HqlsqlParser::RuleExpr, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3984);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 489, _ctx)) {
    case 1: {
      setState(3967);
      match(HqlsqlParser::T_OPEN_P);
      setState(3968);
      select_stmt();
      setState(3969);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 2: {
      setState(3971);
      match(HqlsqlParser::T_OPEN_P);
      setState(3972);
      expr(0);
      setState(3973);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 3: {
      setState(3975);
      expr_unary();
      break;
    }

    case 4: {
      setState(3976);
      expr_interval();
      break;
    }

    case 5: {
      setState(3977);
      expr_concat();
      break;
    }

    case 6: {
      setState(3978);
      expr_case();
      break;
    }

    case 7: {
      setState(3979);
      expr_cursor_attribute();
      break;
    }

    case 8: {
      setState(3980);
      expr_agg_window_func();
      break;
    }

    case 9: {
      setState(3981);
      expr_spec_func();
      break;
    }

    case 10: {
      setState(3982);
      expr_func();
      break;
    }

    case 11: {
      setState(3983);
      expr_atom();
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(4017);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(4015);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 490, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(3986);

          if (!(precpred(_ctx, 20))) throw FailedPredicateException(this, "precpred(_ctx, 20)");
          setState(3987);
          match(HqlsqlParser::T_MUL);
          setState(3988);
          expr(21);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(3989);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
          setState(3990);
          match(HqlsqlParser::T_DIV_SIGN);
          setState(3991);
          expr(20);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(3992);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(3993);
          match(HqlsqlParser::T_DIV);
          setState(3994);
          expr(19);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(3995);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(3996);
          match(HqlsqlParser::T_ADD_SIGN);
          setState(3997);
          expr(18);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(3998);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(3999);
          match(HqlsqlParser::T_SUB);
          setState(4000);
          expr(17);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(4001);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(4002);
          match(HqlsqlParser::T_PERCENT);
          setState(4003);
          expr(16);
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(4004);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(4005);
          match(HqlsqlParser::T_PIPE);
          setState(4006);
          expr(15);
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(4007);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(4008);
          match(HqlsqlParser::T_EXPONENT);
          setState(4009);
          expr(14);
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(4010);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(4011);
          match(HqlsqlParser::T_AND_SIGN);
          setState(4012);
          expr(13);
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(4013);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(4014);
          interval_item();
          break;
        }

        } 
      }
      setState(4019);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Expr_unaryContext ------------------------------------------------------------------

HqlsqlParser::Expr_unaryContext::Expr_unaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_unaryContext::T_EXCLAMATION() {
  return getToken(HqlsqlParser::T_EXCLAMATION, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_unaryContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_unaryContext::T_SUB() {
  return getToken(HqlsqlParser::T_SUB, 0);
}


size_t HqlsqlParser::Expr_unaryContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_unary;
}

void HqlsqlParser::Expr_unaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_unary(this);
}

void HqlsqlParser::Expr_unaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_unary(this);
}


antlrcpp::Any HqlsqlParser::Expr_unaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_unary(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_unaryContext* HqlsqlParser::expr_unary() {
  Expr_unaryContext *_localctx = _tracker.createInstance<Expr_unaryContext>(_ctx, getState());
  enterRule(_localctx, 582, HqlsqlParser::RuleExpr_unary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4024);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_EXCLAMATION: {
        enterOuterAlt(_localctx, 1);
        setState(4020);
        match(HqlsqlParser::T_EXCLAMATION);
        setState(4021);
        expr(0);
        break;
      }

      case HqlsqlParser::T_SUB: {
        enterOuterAlt(_localctx, 2);
        setState(4022);
        match(HqlsqlParser::T_SUB);
        setState(4023);
        expr(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_atomContext ------------------------------------------------------------------

HqlsqlParser::Expr_atomContext::Expr_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Date_literalContext* HqlsqlParser::Expr_atomContext::date_literal() {
  return getRuleContext<HqlsqlParser::Date_literalContext>(0);
}

HqlsqlParser::Timestamp_literalContext* HqlsqlParser::Expr_atomContext::timestamp_literal() {
  return getRuleContext<HqlsqlParser::Timestamp_literalContext>(0);
}

HqlsqlParser::Bool_literalContext* HqlsqlParser::Expr_atomContext::bool_literal() {
  return getRuleContext<HqlsqlParser::Bool_literalContext>(0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Expr_atomContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::StringContext* HqlsqlParser::Expr_atomContext::string() {
  return getRuleContext<HqlsqlParser::StringContext>(0);
}

HqlsqlParser::Dec_numberContext* HqlsqlParser::Expr_atomContext::dec_number() {
  return getRuleContext<HqlsqlParser::Dec_numberContext>(0);
}

HqlsqlParser::Int_numberContext* HqlsqlParser::Expr_atomContext::int_number() {
  return getRuleContext<HqlsqlParser::Int_numberContext>(0);
}

HqlsqlParser::Null_constContext* HqlsqlParser::Expr_atomContext::null_const() {
  return getRuleContext<HqlsqlParser::Null_constContext>(0);
}


size_t HqlsqlParser::Expr_atomContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_atom;
}

void HqlsqlParser::Expr_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_atom(this);
}

void HqlsqlParser::Expr_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_atom(this);
}


antlrcpp::Any HqlsqlParser::Expr_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_atom(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_atomContext* HqlsqlParser::expr_atom() {
  Expr_atomContext *_localctx = _tracker.createInstance<Expr_atomContext>(_ctx, getState());
  enterRule(_localctx, 584, HqlsqlParser::RuleExpr_atom);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 493, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4026);
      date_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4027);
      timestamp_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4028);
      bool_literal();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4029);
      ident();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4030);
      string();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4031);
      dec_number();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4032);
      int_number();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(4033);
      null_const();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_intervalContext ------------------------------------------------------------------

HqlsqlParser::Expr_intervalContext::Expr_intervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_intervalContext::T_INTERVAL() {
  return getToken(HqlsqlParser::T_INTERVAL, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_intervalContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

std::vector<HqlsqlParser::Interval_itemContext *> HqlsqlParser::Expr_intervalContext::interval_item() {
  return getRuleContexts<HqlsqlParser::Interval_itemContext>();
}

HqlsqlParser::Interval_itemContext* HqlsqlParser::Expr_intervalContext::interval_item(size_t i) {
  return getRuleContext<HqlsqlParser::Interval_itemContext>(i);
}

tree::TerminalNode* HqlsqlParser::Expr_intervalContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}


size_t HqlsqlParser::Expr_intervalContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_interval;
}

void HqlsqlParser::Expr_intervalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_interval(this);
}

void HqlsqlParser::Expr_intervalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_interval(this);
}


antlrcpp::Any HqlsqlParser::Expr_intervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_interval(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_intervalContext* HqlsqlParser::expr_interval() {
  Expr_intervalContext *_localctx = _tracker.createInstance<Expr_intervalContext>(_ctx, getState());
  enterRule(_localctx, 586, HqlsqlParser::RuleExpr_interval);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4036);
    match(HqlsqlParser::T_INTERVAL);
    setState(4037);
    expr(0);
    setState(4038);
    interval_item();
    setState(4041);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 494, _ctx)) {
    case 1: {
      setState(4039);
      match(HqlsqlParser::T_TO);
      setState(4040);
      interval_item();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interval_itemContext ------------------------------------------------------------------

HqlsqlParser::Interval_itemContext::Interval_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_DAY() {
  return getToken(HqlsqlParser::T_DAY, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_DAYS() {
  return getToken(HqlsqlParser::T_DAYS, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_MICROSECOND() {
  return getToken(HqlsqlParser::T_MICROSECOND, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_MICROSECONDS() {
  return getToken(HqlsqlParser::T_MICROSECONDS, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_SECOND() {
  return getToken(HqlsqlParser::T_SECOND, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_SECONDS() {
  return getToken(HqlsqlParser::T_SECONDS, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_YEAR() {
  return getToken(HqlsqlParser::T_YEAR, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_MONTH() {
  return getToken(HqlsqlParser::T_MONTH, 0);
}

tree::TerminalNode* HqlsqlParser::Interval_itemContext::T_MINUTE() {
  return getToken(HqlsqlParser::T_MINUTE, 0);
}


size_t HqlsqlParser::Interval_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleInterval_item;
}

void HqlsqlParser::Interval_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterval_item(this);
}

void HqlsqlParser::Interval_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterval_item(this);
}


antlrcpp::Any HqlsqlParser::Interval_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInterval_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Interval_itemContext* HqlsqlParser::interval_item() {
  Interval_itemContext *_localctx = _tracker.createInstance<Interval_itemContext>(_ctx, getState());
  enterRule(_localctx, 588, HqlsqlParser::RuleInterval_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4043);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_DAY

    || _la == HqlsqlParser::T_DAYS || _la == HqlsqlParser::T_MICROSECOND

    || _la == HqlsqlParser::T_MICROSECONDS || _la == HqlsqlParser::T_SECOND

    || _la == HqlsqlParser::T_SECONDS || ((((_la - 458) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 458)) & ((1ULL << (HqlsqlParser::T_YEAR - 458))
      | (1ULL << (HqlsqlParser::T_MONTH - 458))
      | (1ULL << (HqlsqlParser::T_MINUTE - 458)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_concatContext ------------------------------------------------------------------

HqlsqlParser::Expr_concatContext::Expr_concatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Expr_concat_itemContext *> HqlsqlParser::Expr_concatContext::expr_concat_item() {
  return getRuleContexts<HqlsqlParser::Expr_concat_itemContext>();
}

HqlsqlParser::Expr_concat_itemContext* HqlsqlParser::Expr_concatContext::expr_concat_item(size_t i) {
  return getRuleContext<HqlsqlParser::Expr_concat_itemContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_concatContext::T_PIPE() {
  return getTokens(HqlsqlParser::T_PIPE);
}

tree::TerminalNode* HqlsqlParser::Expr_concatContext::T_PIPE(size_t i) {
  return getToken(HqlsqlParser::T_PIPE, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_concatContext::T_CONCAT() {
  return getTokens(HqlsqlParser::T_CONCAT);
}

tree::TerminalNode* HqlsqlParser::Expr_concatContext::T_CONCAT(size_t i) {
  return getToken(HqlsqlParser::T_CONCAT, i);
}


size_t HqlsqlParser::Expr_concatContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_concat;
}

void HqlsqlParser::Expr_concatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_concat(this);
}

void HqlsqlParser::Expr_concatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_concat(this);
}


antlrcpp::Any HqlsqlParser::Expr_concatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_concat(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_concatContext* HqlsqlParser::expr_concat() {
  Expr_concatContext *_localctx = _tracker.createInstance<Expr_concatContext>(_ctx, getState());
  enterRule(_localctx, 590, HqlsqlParser::RuleExpr_concat);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4045);
    expr_concat_item();
    setState(4049);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_PIPE: {
        setState(4046);
        match(HqlsqlParser::T_PIPE);
        setState(4047);
        match(HqlsqlParser::T_PIPE);
        break;
      }

      case HqlsqlParser::T_CONCAT: {
        setState(4048);
        match(HqlsqlParser::T_CONCAT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4051);
    expr_concat_item();
    setState(4060);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 497, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4055);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HqlsqlParser::T_PIPE: {
            setState(4052);
            match(HqlsqlParser::T_PIPE);
            setState(4053);
            match(HqlsqlParser::T_PIPE);
            break;
          }

          case HqlsqlParser::T_CONCAT: {
            setState(4054);
            match(HqlsqlParser::T_CONCAT);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4057);
        expr_concat_item(); 
      }
      setState(4062);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 497, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_concat_itemContext ------------------------------------------------------------------

HqlsqlParser::Expr_concat_itemContext::Expr_concat_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_concat_itemContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_concat_itemContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_concat_itemContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Expr_caseContext* HqlsqlParser::Expr_concat_itemContext::expr_case() {
  return getRuleContext<HqlsqlParser::Expr_caseContext>(0);
}

HqlsqlParser::Expr_agg_window_funcContext* HqlsqlParser::Expr_concat_itemContext::expr_agg_window_func() {
  return getRuleContext<HqlsqlParser::Expr_agg_window_funcContext>(0);
}

HqlsqlParser::Expr_spec_funcContext* HqlsqlParser::Expr_concat_itemContext::expr_spec_func() {
  return getRuleContext<HqlsqlParser::Expr_spec_funcContext>(0);
}

HqlsqlParser::Expr_funcContext* HqlsqlParser::Expr_concat_itemContext::expr_func() {
  return getRuleContext<HqlsqlParser::Expr_funcContext>(0);
}

HqlsqlParser::Expr_atomContext* HqlsqlParser::Expr_concat_itemContext::expr_atom() {
  return getRuleContext<HqlsqlParser::Expr_atomContext>(0);
}


size_t HqlsqlParser::Expr_concat_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_concat_item;
}

void HqlsqlParser::Expr_concat_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_concat_item(this);
}

void HqlsqlParser::Expr_concat_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_concat_item(this);
}


antlrcpp::Any HqlsqlParser::Expr_concat_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_concat_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_concat_itemContext* HqlsqlParser::expr_concat_item() {
  Expr_concat_itemContext *_localctx = _tracker.createInstance<Expr_concat_itemContext>(_ctx, getState());
  enterRule(_localctx, 592, HqlsqlParser::RuleExpr_concat_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4072);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4063);
      match(HqlsqlParser::T_OPEN_P);
      setState(4064);
      expr(0);
      setState(4065);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4067);
      expr_case();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4068);
      expr_agg_window_func();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4069);
      expr_spec_func();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4070);
      expr_func();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4071);
      expr_atom();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_caseContext ------------------------------------------------------------------

HqlsqlParser::Expr_caseContext::Expr_caseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Expr_case_simpleContext* HqlsqlParser::Expr_caseContext::expr_case_simple() {
  return getRuleContext<HqlsqlParser::Expr_case_simpleContext>(0);
}

HqlsqlParser::Expr_case_searchedContext* HqlsqlParser::Expr_caseContext::expr_case_searched() {
  return getRuleContext<HqlsqlParser::Expr_case_searchedContext>(0);
}


size_t HqlsqlParser::Expr_caseContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_case;
}

void HqlsqlParser::Expr_caseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_case(this);
}

void HqlsqlParser::Expr_caseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_case(this);
}


antlrcpp::Any HqlsqlParser::Expr_caseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_case(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_caseContext* HqlsqlParser::expr_case() {
  Expr_caseContext *_localctx = _tracker.createInstance<Expr_caseContext>(_ctx, getState());
  enterRule(_localctx, 594, HqlsqlParser::RuleExpr_case);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4076);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 499, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4074);
      expr_case_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4075);
      expr_case_searched();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_case_simpleContext ------------------------------------------------------------------

HqlsqlParser::Expr_case_simpleContext::Expr_case_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_case_simpleContext::T_CASE() {
  return getToken(HqlsqlParser::T_CASE, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Expr_case_simpleContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_case_simpleContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Expr_case_simpleContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_case_simpleContext::T_WHEN() {
  return getTokens(HqlsqlParser::T_WHEN);
}

tree::TerminalNode* HqlsqlParser::Expr_case_simpleContext::T_WHEN(size_t i) {
  return getToken(HqlsqlParser::T_WHEN, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_case_simpleContext::T_THEN() {
  return getTokens(HqlsqlParser::T_THEN);
}

tree::TerminalNode* HqlsqlParser::Expr_case_simpleContext::T_THEN(size_t i) {
  return getToken(HqlsqlParser::T_THEN, i);
}

tree::TerminalNode* HqlsqlParser::Expr_case_simpleContext::T_ELSE() {
  return getToken(HqlsqlParser::T_ELSE, 0);
}


size_t HqlsqlParser::Expr_case_simpleContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_case_simple;
}

void HqlsqlParser::Expr_case_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_case_simple(this);
}

void HqlsqlParser::Expr_case_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_case_simple(this);
}


antlrcpp::Any HqlsqlParser::Expr_case_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_case_simple(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_case_simpleContext* HqlsqlParser::expr_case_simple() {
  Expr_case_simpleContext *_localctx = _tracker.createInstance<Expr_case_simpleContext>(_ctx, getState());
  enterRule(_localctx, 596, HqlsqlParser::RuleExpr_case_simple);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4078);
    match(HqlsqlParser::T_CASE);
    setState(4079);
    expr(0);
    setState(4085); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4080);
      match(HqlsqlParser::T_WHEN);
      setState(4081);
      expr(0);
      setState(4082);
      match(HqlsqlParser::T_THEN);
      setState(4083);
      expr(0);
      setState(4087); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == HqlsqlParser::T_WHEN);
    setState(4091);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ELSE) {
      setState(4089);
      match(HqlsqlParser::T_ELSE);
      setState(4090);
      expr(0);
    }
    setState(4093);
    match(HqlsqlParser::T_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_case_searchedContext ------------------------------------------------------------------

HqlsqlParser::Expr_case_searchedContext::Expr_case_searchedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_case_searchedContext::T_CASE() {
  return getToken(HqlsqlParser::T_CASE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_case_searchedContext::T_END() {
  return getToken(HqlsqlParser::T_END, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_case_searchedContext::T_WHEN() {
  return getTokens(HqlsqlParser::T_WHEN);
}

tree::TerminalNode* HqlsqlParser::Expr_case_searchedContext::T_WHEN(size_t i) {
  return getToken(HqlsqlParser::T_WHEN, i);
}

std::vector<HqlsqlParser::Bool_exprContext *> HqlsqlParser::Expr_case_searchedContext::bool_expr() {
  return getRuleContexts<HqlsqlParser::Bool_exprContext>();
}

HqlsqlParser::Bool_exprContext* HqlsqlParser::Expr_case_searchedContext::bool_expr(size_t i) {
  return getRuleContext<HqlsqlParser::Bool_exprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_case_searchedContext::T_THEN() {
  return getTokens(HqlsqlParser::T_THEN);
}

tree::TerminalNode* HqlsqlParser::Expr_case_searchedContext::T_THEN(size_t i) {
  return getToken(HqlsqlParser::T_THEN, i);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Expr_case_searchedContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_case_searchedContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Expr_case_searchedContext::T_ELSE() {
  return getToken(HqlsqlParser::T_ELSE, 0);
}


size_t HqlsqlParser::Expr_case_searchedContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_case_searched;
}

void HqlsqlParser::Expr_case_searchedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_case_searched(this);
}

void HqlsqlParser::Expr_case_searchedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_case_searched(this);
}


antlrcpp::Any HqlsqlParser::Expr_case_searchedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_case_searched(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_case_searchedContext* HqlsqlParser::expr_case_searched() {
  Expr_case_searchedContext *_localctx = _tracker.createInstance<Expr_case_searchedContext>(_ctx, getState());
  enterRule(_localctx, 598, HqlsqlParser::RuleExpr_case_searched);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4095);
    match(HqlsqlParser::T_CASE);
    setState(4101); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4096);
      match(HqlsqlParser::T_WHEN);
      setState(4097);
      bool_expr(0);
      setState(4098);
      match(HqlsqlParser::T_THEN);
      setState(4099);
      expr(0);
      setState(4103); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == HqlsqlParser::T_WHEN);
    setState(4107);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ELSE) {
      setState(4105);
      match(HqlsqlParser::T_ELSE);
      setState(4106);
      expr(0);
    }
    setState(4109);
    match(HqlsqlParser::T_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_cursor_attributeContext ------------------------------------------------------------------

HqlsqlParser::Expr_cursor_attributeContext::Expr_cursor_attributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Expr_cursor_attributeContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_cursor_attributeContext::T_PERCENT() {
  return getToken(HqlsqlParser::T_PERCENT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_cursor_attributeContext::T_ISOPEN() {
  return getToken(HqlsqlParser::T_ISOPEN, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_cursor_attributeContext::T_FOUND() {
  return getToken(HqlsqlParser::T_FOUND, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_cursor_attributeContext::T_NOTFOUND() {
  return getToken(HqlsqlParser::T_NOTFOUND, 0);
}


size_t HqlsqlParser::Expr_cursor_attributeContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_cursor_attribute;
}

void HqlsqlParser::Expr_cursor_attributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_cursor_attribute(this);
}

void HqlsqlParser::Expr_cursor_attributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_cursor_attribute(this);
}


antlrcpp::Any HqlsqlParser::Expr_cursor_attributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_cursor_attribute(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_cursor_attributeContext* HqlsqlParser::expr_cursor_attribute() {
  Expr_cursor_attributeContext *_localctx = _tracker.createInstance<Expr_cursor_attributeContext>(_ctx, getState());
  enterRule(_localctx, 600, HqlsqlParser::RuleExpr_cursor_attribute);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4111);
    ident();
    setState(4112);
    match(HqlsqlParser::T_PERCENT);
    setState(4113);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_FOUND

    || _la == HqlsqlParser::T_ISOPEN || _la == HqlsqlParser::T_NOTFOUND)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_agg_window_funcContext ------------------------------------------------------------------

HqlsqlParser::Expr_agg_window_funcContext::Expr_agg_window_funcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_AVG() {
  return getToken(HqlsqlParser::T_AVG, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Expr_agg_window_funcContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_agg_window_funcContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Expr_func_all_distinctContext* HqlsqlParser::Expr_agg_window_funcContext::expr_func_all_distinct() {
  return getRuleContext<HqlsqlParser::Expr_func_all_distinctContext>(0);
}

HqlsqlParser::Expr_func_over_clauseContext* HqlsqlParser::Expr_agg_window_funcContext::expr_func_over_clause() {
  return getRuleContext<HqlsqlParser::Expr_func_over_clauseContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_COUNT() {
  return getToken(HqlsqlParser::T_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_COUNT_BIG() {
  return getToken(HqlsqlParser::T_COUNT_BIG, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_CUME_DIST() {
  return getToken(HqlsqlParser::T_CUME_DIST, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_DENSE_RANK() {
  return getToken(HqlsqlParser::T_DENSE_RANK, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_FIRST_VALUE() {
  return getToken(HqlsqlParser::T_FIRST_VALUE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_LAG() {
  return getToken(HqlsqlParser::T_LAG, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_agg_window_funcContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_LAST_VALUE() {
  return getToken(HqlsqlParser::T_LAST_VALUE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_LEAD() {
  return getToken(HqlsqlParser::T_LEAD, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_MAX() {
  return getToken(HqlsqlParser::T_MAX, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_MIN() {
  return getToken(HqlsqlParser::T_MIN, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_RANK() {
  return getToken(HqlsqlParser::T_RANK, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_ROW_NUMBER() {
  return getToken(HqlsqlParser::T_ROW_NUMBER, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_STDEV() {
  return getToken(HqlsqlParser::T_STDEV, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_STD() {
  return getToken(HqlsqlParser::T_STD, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_SUM() {
  return getToken(HqlsqlParser::T_SUM, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_VAR() {
  return getToken(HqlsqlParser::T_VAR, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_agg_window_funcContext::T_VARIANCE() {
  return getToken(HqlsqlParser::T_VARIANCE, 0);
}


size_t HqlsqlParser::Expr_agg_window_funcContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_agg_window_func;
}

void HqlsqlParser::Expr_agg_window_funcContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_agg_window_func(this);
}

void HqlsqlParser::Expr_agg_window_funcContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_agg_window_func(this);
}


antlrcpp::Any HqlsqlParser::Expr_agg_window_funcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_agg_window_func(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_agg_window_funcContext* HqlsqlParser::expr_agg_window_func() {
  Expr_agg_window_funcContext *_localctx = _tracker.createInstance<Expr_agg_window_funcContext>(_ctx, getState());
  enterRule(_localctx, 602, HqlsqlParser::RuleExpr_agg_window_func);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4277);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_AVG: {
        enterOuterAlt(_localctx, 1);
        setState(4115);
        match(HqlsqlParser::T_AVG);
        setState(4116);
        match(HqlsqlParser::T_OPEN_P);
        setState(4118);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 504, _ctx)) {
        case 1: {
          setState(4117);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4120);
        expr(0);
        setState(4121);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4123);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 505, _ctx)) {
        case 1: {
          setState(4122);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_COUNT: {
        enterOuterAlt(_localctx, 2);
        setState(4125);
        match(HqlsqlParser::T_COUNT);
        setState(4126);
        match(HqlsqlParser::T_OPEN_P);
        setState(4132);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HqlsqlParser::T_ACTION:
          case HqlsqlParser::T_ADD:
          case HqlsqlParser::T_ALL:
          case HqlsqlParser::T_ALLOCATE:
          case HqlsqlParser::T_ALTER:
          case HqlsqlParser::T_AND:
          case HqlsqlParser::T_ANSI_NULLS:
          case HqlsqlParser::T_ANSI_PADDING:
          case HqlsqlParser::T_AS:
          case HqlsqlParser::T_ASC:
          case HqlsqlParser::T_ASSOCIATE:
          case HqlsqlParser::T_AT:
          case HqlsqlParser::T_AUTO_INCREMENT:
          case HqlsqlParser::T_AVG:
          case HqlsqlParser::T_BATCHSIZE:
          case HqlsqlParser::T_BEGIN:
          case HqlsqlParser::T_BETWEEN:
          case HqlsqlParser::T_BIGINT:
          case HqlsqlParser::T_BINARY_DOUBLE:
          case HqlsqlParser::T_BINARY_FLOAT:
          case HqlsqlParser::T_BIT:
          case HqlsqlParser::T_BODY:
          case HqlsqlParser::T_BREAK:
          case HqlsqlParser::T_BY:
          case HqlsqlParser::T_BYTE:
          case HqlsqlParser::T_CALL:
          case HqlsqlParser::T_CALLER:
          case HqlsqlParser::T_CASCADE:
          case HqlsqlParser::T_CASE:
          case HqlsqlParser::T_CASESPECIFIC:
          case HqlsqlParser::T_CAST:
          case HqlsqlParser::T_CHAR:
          case HqlsqlParser::T_CHARACTER:
          case HqlsqlParser::T_CHARSET:
          case HqlsqlParser::T_CLIENT:
          case HqlsqlParser::T_CLOSE:
          case HqlsqlParser::T_CLUSTERED:
          case HqlsqlParser::T_CMP:
          case HqlsqlParser::T_COLLECT:
          case HqlsqlParser::T_COLLECTION:
          case HqlsqlParser::T_COLUMN:
          case HqlsqlParser::T_COMMENT:
          case HqlsqlParser::T_CONSTANT:
          case HqlsqlParser::T_COMMIT:
          case HqlsqlParser::T_COMPRESS:
          case HqlsqlParser::T_CONCAT:
          case HqlsqlParser::T_CONDITION:
          case HqlsqlParser::T_CONSTRAINT:
          case HqlsqlParser::T_CONTINUE:
          case HqlsqlParser::T_COPY:
          case HqlsqlParser::T_COUNT:
          case HqlsqlParser::T_COUNT_BIG:
          case HqlsqlParser::T_CREATE:
          case HqlsqlParser::T_CREATION:
          case HqlsqlParser::T_CREATOR:
          case HqlsqlParser::T_CS:
          case HqlsqlParser::T_CURRENT:
          case HqlsqlParser::T_CURRENT_SCHEMA:
          case HqlsqlParser::T_CURSOR:
          case HqlsqlParser::T_DATABASE:
          case HqlsqlParser::T_DATA:
          case HqlsqlParser::T_DATE:
          case HqlsqlParser::T_DATETIME:
          case HqlsqlParser::T_DAY:
          case HqlsqlParser::T_DAYS:
          case HqlsqlParser::T_DEC:
          case HqlsqlParser::T_DECIMAL:
          case HqlsqlParser::T_DECLARE:
          case HqlsqlParser::T_DEFAULT:
          case HqlsqlParser::T_DEFERRED:
          case HqlsqlParser::T_DEFINED:
          case HqlsqlParser::T_DEFINER:
          case HqlsqlParser::T_DEFINITION:
          case HqlsqlParser::T_DELETE:
          case HqlsqlParser::T_DELIMITED:
          case HqlsqlParser::T_DELIMITER:
          case HqlsqlParser::T_DESC:
          case HqlsqlParser::T_DESCRIBE:
          case HqlsqlParser::T_DIAGNOSTICS:
          case HqlsqlParser::T_DIR:
          case HqlsqlParser::T_DIRECTORY:
          case HqlsqlParser::T_DISTINCT:
          case HqlsqlParser::T_DISTRIBUTE:
          case HqlsqlParser::T_DO:
          case HqlsqlParser::T_DOUBLE:
          case HqlsqlParser::T_DROP:
          case HqlsqlParser::T_DYNAMIC:
          case HqlsqlParser::T_ENABLE:
          case HqlsqlParser::T_ENGINE:
          case HqlsqlParser::T_ESCAPED:
          case HqlsqlParser::T_EXCEPT:
          case HqlsqlParser::T_EXEC:
          case HqlsqlParser::T_EXECUTE:
          case HqlsqlParser::T_EXCEPTION:
          case HqlsqlParser::T_EXCLUSIVE:
          case HqlsqlParser::T_EXISTS:
          case HqlsqlParser::T_EXIT:
          case HqlsqlParser::T_FALLBACK:
          case HqlsqlParser::T_FALSE:
          case HqlsqlParser::T_FETCH:
          case HqlsqlParser::T_FIELDS:
          case HqlsqlParser::T_FILE:
          case HqlsqlParser::T_FILES:
          case HqlsqlParser::T_FLOAT:
          case HqlsqlParser::T_FOR:
          case HqlsqlParser::T_FOREIGN:
          case HqlsqlParser::T_FORMAT:
          case HqlsqlParser::T_FOUND:
          case HqlsqlParser::T_FULL:
          case HqlsqlParser::T_FUNCTION:
          case HqlsqlParser::T_GET:
          case HqlsqlParser::T_GLOBAL:
          case HqlsqlParser::T_GO:
          case HqlsqlParser::T_GRANT:
          case HqlsqlParser::T_ROLE:
          case HqlsqlParser::T_HANDLER:
          case HqlsqlParser::T_HASH:
          case HqlsqlParser::T_HAVING:
          case HqlsqlParser::T_HDFS:
          case HqlsqlParser::T_HIVE:
          case HqlsqlParser::T_HOST:
          case HqlsqlParser::T_IDENTITY:
          case HqlsqlParser::T_IF:
          case HqlsqlParser::T_IGNORE:
          case HqlsqlParser::T_IMMEDIATE:
          case HqlsqlParser::T_IN:
          case HqlsqlParser::T_INCLUDE:
          case HqlsqlParser::T_INDEX:
          case HqlsqlParser::T_INITRANS:
          case HqlsqlParser::T_INNER:
          case HqlsqlParser::T_INOUT:
          case HqlsqlParser::T_INSERT:
          case HqlsqlParser::T_INT:
          case HqlsqlParser::T_INT2:
          case HqlsqlParser::T_INT4:
          case HqlsqlParser::T_INT8:
          case HqlsqlParser::T_INTEGER:
          case HqlsqlParser::T_INTERSECT:
          case HqlsqlParser::T_INTERVAL:
          case HqlsqlParser::T_INTO:
          case HqlsqlParser::T_INVOKER:
          case HqlsqlParser::T_IS:
          case HqlsqlParser::T_ISOPEN:
          case HqlsqlParser::T_ITEMS:
          case HqlsqlParser::T_JOIN:
          case HqlsqlParser::T_KEEP:
          case HqlsqlParser::T_KEY:
          case HqlsqlParser::T_KEYS:
          case HqlsqlParser::T_LANGUAGE:
          case HqlsqlParser::T_LEAVE:
          case HqlsqlParser::T_LEFT:
          case HqlsqlParser::T_LIKE:
          case HqlsqlParser::T_LINES:
          case HqlsqlParser::T_LOCAL:
          case HqlsqlParser::T_LOCATION:
          case HqlsqlParser::T_LOCATOR:
          case HqlsqlParser::T_LOCATORS:
          case HqlsqlParser::T_LOCKS:
          case HqlsqlParser::T_LOG:
          case HqlsqlParser::T_LOGGED:
          case HqlsqlParser::T_LOGGING:
          case HqlsqlParser::T_LOOP:
          case HqlsqlParser::T_MAP:
          case HqlsqlParser::T_MATCHED:
          case HqlsqlParser::T_MAX:
          case HqlsqlParser::T_MAXTRANS:
          case HqlsqlParser::T_MERGE:
          case HqlsqlParser::T_MESSAGE_TEXT:
          case HqlsqlParser::T_MICROSECOND:
          case HqlsqlParser::T_MICROSECONDS:
          case HqlsqlParser::T_MIN:
          case HqlsqlParser::T_MULTISET:
          case HqlsqlParser::T_NCHAR:
          case HqlsqlParser::T_NEW:
          case HqlsqlParser::T_NVARCHAR:
          case HqlsqlParser::T_NO:
          case HqlsqlParser::T_NOCOUNT:
          case HqlsqlParser::T_NOCOMPRESS:
          case HqlsqlParser::T_NOLOGGING:
          case HqlsqlParser::T_NONE:
          case HqlsqlParser::T_NOT:
          case HqlsqlParser::T_NOTFOUND:
          case HqlsqlParser::T_NULL:
          case HqlsqlParser::T_NUMERIC:
          case HqlsqlParser::T_NUMBER:
          case HqlsqlParser::T_OBJECT:
          case HqlsqlParser::T_OFF:
          case HqlsqlParser::T_ON:
          case HqlsqlParser::T_ONLY:
          case HqlsqlParser::T_OPEN:
          case HqlsqlParser::T_OR:
          case HqlsqlParser::T_OUT:
          case HqlsqlParser::T_OUTER:
          case HqlsqlParser::T_OVERWRITE:
          case HqlsqlParser::T_OWNER:
          case HqlsqlParser::T_PACKAGE:
          case HqlsqlParser::T_PARTITION:
          case HqlsqlParser::T_PCTFREE:
          case HqlsqlParser::T_PCTUSED:
          case HqlsqlParser::T_PRECISION:
          case HqlsqlParser::T_PRESERVE:
          case HqlsqlParser::T_PRIMARY:
          case HqlsqlParser::T_PRINT:
          case HqlsqlParser::T_PROC:
          case HqlsqlParser::T_PROCEDURE:
          case HqlsqlParser::T_QUALIFY:
          case HqlsqlParser::T_QUERY_BAND:
          case HqlsqlParser::T_QUIT:
          case HqlsqlParser::T_QUOTED_IDENTIFIER:
          case HqlsqlParser::T_RAISE:
          case HqlsqlParser::T_REAL:
          case HqlsqlParser::T_REFERENCES:
          case HqlsqlParser::T_REGEXP:
          case HqlsqlParser::T_REPLACE:
          case HqlsqlParser::T_RESIGNAL:
          case HqlsqlParser::T_RESTRICT:
          case HqlsqlParser::T_RESULT:
          case HqlsqlParser::T_RESULT_SET_LOCATOR:
          case HqlsqlParser::T_RETURN:
          case HqlsqlParser::T_RETURNS:
          case HqlsqlParser::T_REVERSE:
          case HqlsqlParser::T_RIGHT:
          case HqlsqlParser::T_RLIKE:
          case HqlsqlParser::T_ROLLBACK:
          case HqlsqlParser::T_ROW:
          case HqlsqlParser::T_ROWS:
          case HqlsqlParser::T_ROW_COUNT:
          case HqlsqlParser::T_RR:
          case HqlsqlParser::T_RS:
          case HqlsqlParser::T_PWD:
          case HqlsqlParser::T_TRIM:
          case HqlsqlParser::T_SCHEMA:
          case HqlsqlParser::T_SECOND:
          case HqlsqlParser::T_SECONDS:
          case HqlsqlParser::T_SECURITY:
          case HqlsqlParser::T_SEGMENT:
          case HqlsqlParser::T_SELECT:
          case HqlsqlParser::T_SESSION:
          case HqlsqlParser::T_SESSIONS:
          case HqlsqlParser::T_SETS:
          case HqlsqlParser::T_SHARE:
          case HqlsqlParser::T_SIGNAL:
          case HqlsqlParser::T_SIMPLE_DOUBLE:
          case HqlsqlParser::T_SIMPLE_FLOAT:
          case HqlsqlParser::T_SMALLDATETIME:
          case HqlsqlParser::T_SMALLINT:
          case HqlsqlParser::T_SQL:
          case HqlsqlParser::T_SQLEXCEPTION:
          case HqlsqlParser::T_SQLINSERT:
          case HqlsqlParser::T_SQLSTATE:
          case HqlsqlParser::T_SQLWARNING:
          case HqlsqlParser::T_STATS:
          case HqlsqlParser::T_STATISTICS:
          case HqlsqlParser::T_STEP:
          case HqlsqlParser::T_STORAGE:
          case HqlsqlParser::T_STORED:
          case HqlsqlParser::T_STRING:
          case HqlsqlParser::T_SUBDIR:
          case HqlsqlParser::T_SUBSTRING:
          case HqlsqlParser::T_SUM:
          case HqlsqlParser::T_SUMMARY:
          case HqlsqlParser::T_SYS_REFCURSOR:
          case HqlsqlParser::T_TABLE:
          case HqlsqlParser::T_TABLESPACE:
          case HqlsqlParser::T_TEMPORARY:
          case HqlsqlParser::T_TERMINATED:
          case HqlsqlParser::T_TEXTIMAGE_ON:
          case HqlsqlParser::T_THEN:
          case HqlsqlParser::T_TIMESTAMP:
          case HqlsqlParser::T_TITLE:
          case HqlsqlParser::T_TO:
          case HqlsqlParser::T_TOP:
          case HqlsqlParser::T_TRANSACTION:
          case HqlsqlParser::T_TRUE:
          case HqlsqlParser::T_TRUNCATE:
          case HqlsqlParser::T_TYPE:
          case HqlsqlParser::T_UNIQUE:
          case HqlsqlParser::T_UPDATE:
          case HqlsqlParser::T_UR:
          case HqlsqlParser::T_USE:
          case HqlsqlParser::T_USING:
          case HqlsqlParser::T_VALUE:
          case HqlsqlParser::T_VALUES:
          case HqlsqlParser::T_VAR:
          case HqlsqlParser::T_VARCHAR:
          case HqlsqlParser::T_VARCHAR2:
          case HqlsqlParser::T_VARYING:
          case HqlsqlParser::T_VOLATILE:
          case HqlsqlParser::T_WHILE:
          case HqlsqlParser::T_WITH:
          case HqlsqlParser::T_WITHOUT:
          case HqlsqlParser::T_WORK:
          case HqlsqlParser::T_XACT_ABORT:
          case HqlsqlParser::T_XML:
          case HqlsqlParser::T_YES:
          case HqlsqlParser::T_ARRAY:
          case HqlsqlParser::T_STRUCT:
          case HqlsqlParser::T_SERDE:
          case HqlsqlParser::T_SEQUENCEFILE:
          case HqlsqlParser::T_TEXTFILE:
          case HqlsqlParser::T_RCFILE:
          case HqlsqlParser::T_ORC:
          case HqlsqlParser::T_PARQUET:
          case HqlsqlParser::T_AVRO:
          case HqlsqlParser::T_JSONFILE:
          case HqlsqlParser::T_INPUTFORMAT:
          case HqlsqlParser::T_FILEFORMAT:
          case HqlsqlParser::T_T:
          case HqlsqlParser::T_S:
          case HqlsqlParser::T_ACTIVITY_COUNT:
          case HqlsqlParser::T_CUME_DIST:
          case HqlsqlParser::T_CURRENT_DATE:
          case HqlsqlParser::T_CURRENT_TIMESTAMP:
          case HqlsqlParser::T_CURRENT_USER:
          case HqlsqlParser::T_DENSE_RANK:
          case HqlsqlParser::T_FIRST_VALUE:
          case HqlsqlParser::T_LAG:
          case HqlsqlParser::T_LAST_VALUE:
          case HqlsqlParser::T_LEAD:
          case HqlsqlParser::T_MAX_PART_STRING:
          case HqlsqlParser::T_MIN_PART_STRING:
          case HqlsqlParser::T_MAX_PART_INT:
          case HqlsqlParser::T_MIN_PART_INT:
          case HqlsqlParser::T_MAX_PART_DATE:
          case HqlsqlParser::T_MIN_PART_DATE:
          case HqlsqlParser::T_PART_COUNT:
          case HqlsqlParser::T_PART_LOC:
          case HqlsqlParser::T_RANK:
          case HqlsqlParser::T_ROW_NUMBER:
          case HqlsqlParser::T_STDEV:
          case HqlsqlParser::T_STD:
          case HqlsqlParser::T_SYSDATE:
          case HqlsqlParser::T_VARIANCE:
          case HqlsqlParser::T_USER:
          case HqlsqlParser::T_PURGE:
          case HqlsqlParser::T_BUCKETS:
          case HqlsqlParser::T_SKEWED:
          case HqlsqlParser::T_DIRECTORIES:
          case HqlsqlParser::T_SERDEPROPERTIES:
          case HqlsqlParser::T_RENAME:
          case HqlsqlParser::T_SORTED:
          case HqlsqlParser::T_SORT:
          case HqlsqlParser::T_CHANGE:
          case HqlsqlParser::T_EXCHANGE:
          case HqlsqlParser::T_RECOVER:
          case HqlsqlParser::T_PARTITIONS:
          case HqlsqlParser::T_PROTECTION:
          case HqlsqlParser::T_ARCHIVE:
          case HqlsqlParser::T_UNARCHIVE:
          case HqlsqlParser::T_TOUCH:
          case HqlsqlParser::T_OFFLINE:
          case HqlsqlParser::T_NO_DROP:
          case HqlsqlParser::T_COMPACT:
          case HqlsqlParser::T_CONCATENATE:
          case HqlsqlParser::T_WAIT:
          case HqlsqlParser::T_COLUMNS:
          case HqlsqlParser::T_FIRST:
          case HqlsqlParser::T_LAST:
          case HqlsqlParser::T_NULLS:
          case HqlsqlParser::T_AFTER:
          case HqlsqlParser::T_MATERIALIZED:
          case HqlsqlParser::T_REWRITE:
          case HqlsqlParser::T_PARTITIONED:
          case HqlsqlParser::T_DISTRIBUTED:
          case HqlsqlParser::T_MACRO:
          case HqlsqlParser::T_SHOW:
          case HqlsqlParser::T_EXTENDED:
          case HqlsqlParser::T_FORMATTED:
          case HqlsqlParser::T_SEMI:
          case HqlsqlParser::T_CROSS:
          case HqlsqlParser::T_LATERAL:
          case HqlsqlParser::T_RELOAD:
          case HqlsqlParser::T_LOAD:
          case HqlsqlParser::T_INPATH:
          case HqlsqlParser::T_PRINCIPALS:
          case HqlsqlParser::T_COMPACTIONS:
          case HqlsqlParser::T_CONF:
          case HqlsqlParser::T_ADMIN:
          case HqlsqlParser::T_OPTION:
          case HqlsqlParser::T_PRIVILEGES:
          case HqlsqlParser::T_LOCK:
          case HqlsqlParser::T_SHOW_DATABASE:
          case HqlsqlParser::T_COMPUTE:
          case HqlsqlParser::T_CACHE:
          case HqlsqlParser::T_METADATA:
          case HqlsqlParser::T_NOSCAN:
          case HqlsqlParser::T_UNIONTYPE:
          case HqlsqlParser::T_ANALYZE:
          case HqlsqlParser::T_EXPLAIN:
          case HqlsqlParser::T_CBO:
          case HqlsqlParser::T_AST:
          case HqlsqlParser::T_DEPENDENCY:
          case HqlsqlParser::T_AUTHORIZATION:
          case HqlsqlParser::T_VECTORIZATION:
          case HqlsqlParser::T_COST:
          case HqlsqlParser::T_JOINCOST:
          case HqlsqlParser::T_OPERATOR:
          case HqlsqlParser::T_EXPRESSION:
          case HqlsqlParser::T_DETAIL:
          case HqlsqlParser::T_UNBOUNDED:
          case HqlsqlParser::T_PRECEDING:
          case HqlsqlParser::T_FOLLOWING:
          case HqlsqlParser::T_RANGE:
          case HqlsqlParser::T_YEAR:
          case HqlsqlParser::T_MONTH:
          case HqlsqlParser::T_MINUTE:
          case HqlsqlParser::T_TIME:
          case HqlsqlParser::T_ZONE:
          case HqlsqlParser::T_ADD_SIGN:
          case HqlsqlParser::T_OPEN_P:
          case HqlsqlParser::T_SUB:
          case HqlsqlParser::T_EXCLAMATION:
          case HqlsqlParser::L_ID:
          case HqlsqlParser::L_S_STRING:
          case HqlsqlParser::L_D_STRING:
          case HqlsqlParser::L_INT:
          case HqlsqlParser::L_DEC: {
            setState(4128);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 506, _ctx)) {
            case 1: {
              setState(4127);
              expr_func_all_distinct();
              break;
            }

            }
            setState(4130);
            expr(0);
            break;
          }

          case HqlsqlParser::T_MUL: {
            setState(4131);
            match(HqlsqlParser::T_MUL);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4134);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4136);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 508, _ctx)) {
        case 1: {
          setState(4135);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_COUNT_BIG: {
        enterOuterAlt(_localctx, 3);
        setState(4138);
        match(HqlsqlParser::T_COUNT_BIG);
        setState(4139);
        match(HqlsqlParser::T_OPEN_P);
        setState(4145);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HqlsqlParser::T_ACTION:
          case HqlsqlParser::T_ADD:
          case HqlsqlParser::T_ALL:
          case HqlsqlParser::T_ALLOCATE:
          case HqlsqlParser::T_ALTER:
          case HqlsqlParser::T_AND:
          case HqlsqlParser::T_ANSI_NULLS:
          case HqlsqlParser::T_ANSI_PADDING:
          case HqlsqlParser::T_AS:
          case HqlsqlParser::T_ASC:
          case HqlsqlParser::T_ASSOCIATE:
          case HqlsqlParser::T_AT:
          case HqlsqlParser::T_AUTO_INCREMENT:
          case HqlsqlParser::T_AVG:
          case HqlsqlParser::T_BATCHSIZE:
          case HqlsqlParser::T_BEGIN:
          case HqlsqlParser::T_BETWEEN:
          case HqlsqlParser::T_BIGINT:
          case HqlsqlParser::T_BINARY_DOUBLE:
          case HqlsqlParser::T_BINARY_FLOAT:
          case HqlsqlParser::T_BIT:
          case HqlsqlParser::T_BODY:
          case HqlsqlParser::T_BREAK:
          case HqlsqlParser::T_BY:
          case HqlsqlParser::T_BYTE:
          case HqlsqlParser::T_CALL:
          case HqlsqlParser::T_CALLER:
          case HqlsqlParser::T_CASCADE:
          case HqlsqlParser::T_CASE:
          case HqlsqlParser::T_CASESPECIFIC:
          case HqlsqlParser::T_CAST:
          case HqlsqlParser::T_CHAR:
          case HqlsqlParser::T_CHARACTER:
          case HqlsqlParser::T_CHARSET:
          case HqlsqlParser::T_CLIENT:
          case HqlsqlParser::T_CLOSE:
          case HqlsqlParser::T_CLUSTERED:
          case HqlsqlParser::T_CMP:
          case HqlsqlParser::T_COLLECT:
          case HqlsqlParser::T_COLLECTION:
          case HqlsqlParser::T_COLUMN:
          case HqlsqlParser::T_COMMENT:
          case HqlsqlParser::T_CONSTANT:
          case HqlsqlParser::T_COMMIT:
          case HqlsqlParser::T_COMPRESS:
          case HqlsqlParser::T_CONCAT:
          case HqlsqlParser::T_CONDITION:
          case HqlsqlParser::T_CONSTRAINT:
          case HqlsqlParser::T_CONTINUE:
          case HqlsqlParser::T_COPY:
          case HqlsqlParser::T_COUNT:
          case HqlsqlParser::T_COUNT_BIG:
          case HqlsqlParser::T_CREATE:
          case HqlsqlParser::T_CREATION:
          case HqlsqlParser::T_CREATOR:
          case HqlsqlParser::T_CS:
          case HqlsqlParser::T_CURRENT:
          case HqlsqlParser::T_CURRENT_SCHEMA:
          case HqlsqlParser::T_CURSOR:
          case HqlsqlParser::T_DATABASE:
          case HqlsqlParser::T_DATA:
          case HqlsqlParser::T_DATE:
          case HqlsqlParser::T_DATETIME:
          case HqlsqlParser::T_DAY:
          case HqlsqlParser::T_DAYS:
          case HqlsqlParser::T_DEC:
          case HqlsqlParser::T_DECIMAL:
          case HqlsqlParser::T_DECLARE:
          case HqlsqlParser::T_DEFAULT:
          case HqlsqlParser::T_DEFERRED:
          case HqlsqlParser::T_DEFINED:
          case HqlsqlParser::T_DEFINER:
          case HqlsqlParser::T_DEFINITION:
          case HqlsqlParser::T_DELETE:
          case HqlsqlParser::T_DELIMITED:
          case HqlsqlParser::T_DELIMITER:
          case HqlsqlParser::T_DESC:
          case HqlsqlParser::T_DESCRIBE:
          case HqlsqlParser::T_DIAGNOSTICS:
          case HqlsqlParser::T_DIR:
          case HqlsqlParser::T_DIRECTORY:
          case HqlsqlParser::T_DISTINCT:
          case HqlsqlParser::T_DISTRIBUTE:
          case HqlsqlParser::T_DO:
          case HqlsqlParser::T_DOUBLE:
          case HqlsqlParser::T_DROP:
          case HqlsqlParser::T_DYNAMIC:
          case HqlsqlParser::T_ENABLE:
          case HqlsqlParser::T_ENGINE:
          case HqlsqlParser::T_ESCAPED:
          case HqlsqlParser::T_EXCEPT:
          case HqlsqlParser::T_EXEC:
          case HqlsqlParser::T_EXECUTE:
          case HqlsqlParser::T_EXCEPTION:
          case HqlsqlParser::T_EXCLUSIVE:
          case HqlsqlParser::T_EXISTS:
          case HqlsqlParser::T_EXIT:
          case HqlsqlParser::T_FALLBACK:
          case HqlsqlParser::T_FALSE:
          case HqlsqlParser::T_FETCH:
          case HqlsqlParser::T_FIELDS:
          case HqlsqlParser::T_FILE:
          case HqlsqlParser::T_FILES:
          case HqlsqlParser::T_FLOAT:
          case HqlsqlParser::T_FOR:
          case HqlsqlParser::T_FOREIGN:
          case HqlsqlParser::T_FORMAT:
          case HqlsqlParser::T_FOUND:
          case HqlsqlParser::T_FULL:
          case HqlsqlParser::T_FUNCTION:
          case HqlsqlParser::T_GET:
          case HqlsqlParser::T_GLOBAL:
          case HqlsqlParser::T_GO:
          case HqlsqlParser::T_GRANT:
          case HqlsqlParser::T_ROLE:
          case HqlsqlParser::T_HANDLER:
          case HqlsqlParser::T_HASH:
          case HqlsqlParser::T_HAVING:
          case HqlsqlParser::T_HDFS:
          case HqlsqlParser::T_HIVE:
          case HqlsqlParser::T_HOST:
          case HqlsqlParser::T_IDENTITY:
          case HqlsqlParser::T_IF:
          case HqlsqlParser::T_IGNORE:
          case HqlsqlParser::T_IMMEDIATE:
          case HqlsqlParser::T_IN:
          case HqlsqlParser::T_INCLUDE:
          case HqlsqlParser::T_INDEX:
          case HqlsqlParser::T_INITRANS:
          case HqlsqlParser::T_INNER:
          case HqlsqlParser::T_INOUT:
          case HqlsqlParser::T_INSERT:
          case HqlsqlParser::T_INT:
          case HqlsqlParser::T_INT2:
          case HqlsqlParser::T_INT4:
          case HqlsqlParser::T_INT8:
          case HqlsqlParser::T_INTEGER:
          case HqlsqlParser::T_INTERSECT:
          case HqlsqlParser::T_INTERVAL:
          case HqlsqlParser::T_INTO:
          case HqlsqlParser::T_INVOKER:
          case HqlsqlParser::T_IS:
          case HqlsqlParser::T_ISOPEN:
          case HqlsqlParser::T_ITEMS:
          case HqlsqlParser::T_JOIN:
          case HqlsqlParser::T_KEEP:
          case HqlsqlParser::T_KEY:
          case HqlsqlParser::T_KEYS:
          case HqlsqlParser::T_LANGUAGE:
          case HqlsqlParser::T_LEAVE:
          case HqlsqlParser::T_LEFT:
          case HqlsqlParser::T_LIKE:
          case HqlsqlParser::T_LINES:
          case HqlsqlParser::T_LOCAL:
          case HqlsqlParser::T_LOCATION:
          case HqlsqlParser::T_LOCATOR:
          case HqlsqlParser::T_LOCATORS:
          case HqlsqlParser::T_LOCKS:
          case HqlsqlParser::T_LOG:
          case HqlsqlParser::T_LOGGED:
          case HqlsqlParser::T_LOGGING:
          case HqlsqlParser::T_LOOP:
          case HqlsqlParser::T_MAP:
          case HqlsqlParser::T_MATCHED:
          case HqlsqlParser::T_MAX:
          case HqlsqlParser::T_MAXTRANS:
          case HqlsqlParser::T_MERGE:
          case HqlsqlParser::T_MESSAGE_TEXT:
          case HqlsqlParser::T_MICROSECOND:
          case HqlsqlParser::T_MICROSECONDS:
          case HqlsqlParser::T_MIN:
          case HqlsqlParser::T_MULTISET:
          case HqlsqlParser::T_NCHAR:
          case HqlsqlParser::T_NEW:
          case HqlsqlParser::T_NVARCHAR:
          case HqlsqlParser::T_NO:
          case HqlsqlParser::T_NOCOUNT:
          case HqlsqlParser::T_NOCOMPRESS:
          case HqlsqlParser::T_NOLOGGING:
          case HqlsqlParser::T_NONE:
          case HqlsqlParser::T_NOT:
          case HqlsqlParser::T_NOTFOUND:
          case HqlsqlParser::T_NULL:
          case HqlsqlParser::T_NUMERIC:
          case HqlsqlParser::T_NUMBER:
          case HqlsqlParser::T_OBJECT:
          case HqlsqlParser::T_OFF:
          case HqlsqlParser::T_ON:
          case HqlsqlParser::T_ONLY:
          case HqlsqlParser::T_OPEN:
          case HqlsqlParser::T_OR:
          case HqlsqlParser::T_OUT:
          case HqlsqlParser::T_OUTER:
          case HqlsqlParser::T_OVERWRITE:
          case HqlsqlParser::T_OWNER:
          case HqlsqlParser::T_PACKAGE:
          case HqlsqlParser::T_PARTITION:
          case HqlsqlParser::T_PCTFREE:
          case HqlsqlParser::T_PCTUSED:
          case HqlsqlParser::T_PRECISION:
          case HqlsqlParser::T_PRESERVE:
          case HqlsqlParser::T_PRIMARY:
          case HqlsqlParser::T_PRINT:
          case HqlsqlParser::T_PROC:
          case HqlsqlParser::T_PROCEDURE:
          case HqlsqlParser::T_QUALIFY:
          case HqlsqlParser::T_QUERY_BAND:
          case HqlsqlParser::T_QUIT:
          case HqlsqlParser::T_QUOTED_IDENTIFIER:
          case HqlsqlParser::T_RAISE:
          case HqlsqlParser::T_REAL:
          case HqlsqlParser::T_REFERENCES:
          case HqlsqlParser::T_REGEXP:
          case HqlsqlParser::T_REPLACE:
          case HqlsqlParser::T_RESIGNAL:
          case HqlsqlParser::T_RESTRICT:
          case HqlsqlParser::T_RESULT:
          case HqlsqlParser::T_RESULT_SET_LOCATOR:
          case HqlsqlParser::T_RETURN:
          case HqlsqlParser::T_RETURNS:
          case HqlsqlParser::T_REVERSE:
          case HqlsqlParser::T_RIGHT:
          case HqlsqlParser::T_RLIKE:
          case HqlsqlParser::T_ROLLBACK:
          case HqlsqlParser::T_ROW:
          case HqlsqlParser::T_ROWS:
          case HqlsqlParser::T_ROW_COUNT:
          case HqlsqlParser::T_RR:
          case HqlsqlParser::T_RS:
          case HqlsqlParser::T_PWD:
          case HqlsqlParser::T_TRIM:
          case HqlsqlParser::T_SCHEMA:
          case HqlsqlParser::T_SECOND:
          case HqlsqlParser::T_SECONDS:
          case HqlsqlParser::T_SECURITY:
          case HqlsqlParser::T_SEGMENT:
          case HqlsqlParser::T_SELECT:
          case HqlsqlParser::T_SESSION:
          case HqlsqlParser::T_SESSIONS:
          case HqlsqlParser::T_SETS:
          case HqlsqlParser::T_SHARE:
          case HqlsqlParser::T_SIGNAL:
          case HqlsqlParser::T_SIMPLE_DOUBLE:
          case HqlsqlParser::T_SIMPLE_FLOAT:
          case HqlsqlParser::T_SMALLDATETIME:
          case HqlsqlParser::T_SMALLINT:
          case HqlsqlParser::T_SQL:
          case HqlsqlParser::T_SQLEXCEPTION:
          case HqlsqlParser::T_SQLINSERT:
          case HqlsqlParser::T_SQLSTATE:
          case HqlsqlParser::T_SQLWARNING:
          case HqlsqlParser::T_STATS:
          case HqlsqlParser::T_STATISTICS:
          case HqlsqlParser::T_STEP:
          case HqlsqlParser::T_STORAGE:
          case HqlsqlParser::T_STORED:
          case HqlsqlParser::T_STRING:
          case HqlsqlParser::T_SUBDIR:
          case HqlsqlParser::T_SUBSTRING:
          case HqlsqlParser::T_SUM:
          case HqlsqlParser::T_SUMMARY:
          case HqlsqlParser::T_SYS_REFCURSOR:
          case HqlsqlParser::T_TABLE:
          case HqlsqlParser::T_TABLESPACE:
          case HqlsqlParser::T_TEMPORARY:
          case HqlsqlParser::T_TERMINATED:
          case HqlsqlParser::T_TEXTIMAGE_ON:
          case HqlsqlParser::T_THEN:
          case HqlsqlParser::T_TIMESTAMP:
          case HqlsqlParser::T_TITLE:
          case HqlsqlParser::T_TO:
          case HqlsqlParser::T_TOP:
          case HqlsqlParser::T_TRANSACTION:
          case HqlsqlParser::T_TRUE:
          case HqlsqlParser::T_TRUNCATE:
          case HqlsqlParser::T_TYPE:
          case HqlsqlParser::T_UNIQUE:
          case HqlsqlParser::T_UPDATE:
          case HqlsqlParser::T_UR:
          case HqlsqlParser::T_USE:
          case HqlsqlParser::T_USING:
          case HqlsqlParser::T_VALUE:
          case HqlsqlParser::T_VALUES:
          case HqlsqlParser::T_VAR:
          case HqlsqlParser::T_VARCHAR:
          case HqlsqlParser::T_VARCHAR2:
          case HqlsqlParser::T_VARYING:
          case HqlsqlParser::T_VOLATILE:
          case HqlsqlParser::T_WHILE:
          case HqlsqlParser::T_WITH:
          case HqlsqlParser::T_WITHOUT:
          case HqlsqlParser::T_WORK:
          case HqlsqlParser::T_XACT_ABORT:
          case HqlsqlParser::T_XML:
          case HqlsqlParser::T_YES:
          case HqlsqlParser::T_ARRAY:
          case HqlsqlParser::T_STRUCT:
          case HqlsqlParser::T_SERDE:
          case HqlsqlParser::T_SEQUENCEFILE:
          case HqlsqlParser::T_TEXTFILE:
          case HqlsqlParser::T_RCFILE:
          case HqlsqlParser::T_ORC:
          case HqlsqlParser::T_PARQUET:
          case HqlsqlParser::T_AVRO:
          case HqlsqlParser::T_JSONFILE:
          case HqlsqlParser::T_INPUTFORMAT:
          case HqlsqlParser::T_FILEFORMAT:
          case HqlsqlParser::T_T:
          case HqlsqlParser::T_S:
          case HqlsqlParser::T_ACTIVITY_COUNT:
          case HqlsqlParser::T_CUME_DIST:
          case HqlsqlParser::T_CURRENT_DATE:
          case HqlsqlParser::T_CURRENT_TIMESTAMP:
          case HqlsqlParser::T_CURRENT_USER:
          case HqlsqlParser::T_DENSE_RANK:
          case HqlsqlParser::T_FIRST_VALUE:
          case HqlsqlParser::T_LAG:
          case HqlsqlParser::T_LAST_VALUE:
          case HqlsqlParser::T_LEAD:
          case HqlsqlParser::T_MAX_PART_STRING:
          case HqlsqlParser::T_MIN_PART_STRING:
          case HqlsqlParser::T_MAX_PART_INT:
          case HqlsqlParser::T_MIN_PART_INT:
          case HqlsqlParser::T_MAX_PART_DATE:
          case HqlsqlParser::T_MIN_PART_DATE:
          case HqlsqlParser::T_PART_COUNT:
          case HqlsqlParser::T_PART_LOC:
          case HqlsqlParser::T_RANK:
          case HqlsqlParser::T_ROW_NUMBER:
          case HqlsqlParser::T_STDEV:
          case HqlsqlParser::T_STD:
          case HqlsqlParser::T_SYSDATE:
          case HqlsqlParser::T_VARIANCE:
          case HqlsqlParser::T_USER:
          case HqlsqlParser::T_PURGE:
          case HqlsqlParser::T_BUCKETS:
          case HqlsqlParser::T_SKEWED:
          case HqlsqlParser::T_DIRECTORIES:
          case HqlsqlParser::T_SERDEPROPERTIES:
          case HqlsqlParser::T_RENAME:
          case HqlsqlParser::T_SORTED:
          case HqlsqlParser::T_SORT:
          case HqlsqlParser::T_CHANGE:
          case HqlsqlParser::T_EXCHANGE:
          case HqlsqlParser::T_RECOVER:
          case HqlsqlParser::T_PARTITIONS:
          case HqlsqlParser::T_PROTECTION:
          case HqlsqlParser::T_ARCHIVE:
          case HqlsqlParser::T_UNARCHIVE:
          case HqlsqlParser::T_TOUCH:
          case HqlsqlParser::T_OFFLINE:
          case HqlsqlParser::T_NO_DROP:
          case HqlsqlParser::T_COMPACT:
          case HqlsqlParser::T_CONCATENATE:
          case HqlsqlParser::T_WAIT:
          case HqlsqlParser::T_COLUMNS:
          case HqlsqlParser::T_FIRST:
          case HqlsqlParser::T_LAST:
          case HqlsqlParser::T_NULLS:
          case HqlsqlParser::T_AFTER:
          case HqlsqlParser::T_MATERIALIZED:
          case HqlsqlParser::T_REWRITE:
          case HqlsqlParser::T_PARTITIONED:
          case HqlsqlParser::T_DISTRIBUTED:
          case HqlsqlParser::T_MACRO:
          case HqlsqlParser::T_SHOW:
          case HqlsqlParser::T_EXTENDED:
          case HqlsqlParser::T_FORMATTED:
          case HqlsqlParser::T_SEMI:
          case HqlsqlParser::T_CROSS:
          case HqlsqlParser::T_LATERAL:
          case HqlsqlParser::T_RELOAD:
          case HqlsqlParser::T_LOAD:
          case HqlsqlParser::T_INPATH:
          case HqlsqlParser::T_PRINCIPALS:
          case HqlsqlParser::T_COMPACTIONS:
          case HqlsqlParser::T_CONF:
          case HqlsqlParser::T_ADMIN:
          case HqlsqlParser::T_OPTION:
          case HqlsqlParser::T_PRIVILEGES:
          case HqlsqlParser::T_LOCK:
          case HqlsqlParser::T_SHOW_DATABASE:
          case HqlsqlParser::T_COMPUTE:
          case HqlsqlParser::T_CACHE:
          case HqlsqlParser::T_METADATA:
          case HqlsqlParser::T_NOSCAN:
          case HqlsqlParser::T_UNIONTYPE:
          case HqlsqlParser::T_ANALYZE:
          case HqlsqlParser::T_EXPLAIN:
          case HqlsqlParser::T_CBO:
          case HqlsqlParser::T_AST:
          case HqlsqlParser::T_DEPENDENCY:
          case HqlsqlParser::T_AUTHORIZATION:
          case HqlsqlParser::T_VECTORIZATION:
          case HqlsqlParser::T_COST:
          case HqlsqlParser::T_JOINCOST:
          case HqlsqlParser::T_OPERATOR:
          case HqlsqlParser::T_EXPRESSION:
          case HqlsqlParser::T_DETAIL:
          case HqlsqlParser::T_UNBOUNDED:
          case HqlsqlParser::T_PRECEDING:
          case HqlsqlParser::T_FOLLOWING:
          case HqlsqlParser::T_RANGE:
          case HqlsqlParser::T_YEAR:
          case HqlsqlParser::T_MONTH:
          case HqlsqlParser::T_MINUTE:
          case HqlsqlParser::T_TIME:
          case HqlsqlParser::T_ZONE:
          case HqlsqlParser::T_ADD_SIGN:
          case HqlsqlParser::T_OPEN_P:
          case HqlsqlParser::T_SUB:
          case HqlsqlParser::T_EXCLAMATION:
          case HqlsqlParser::L_ID:
          case HqlsqlParser::L_S_STRING:
          case HqlsqlParser::L_D_STRING:
          case HqlsqlParser::L_INT:
          case HqlsqlParser::L_DEC: {
            setState(4141);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 509, _ctx)) {
            case 1: {
              setState(4140);
              expr_func_all_distinct();
              break;
            }

            }
            setState(4143);
            expr(0);
            break;
          }

          case HqlsqlParser::T_MUL: {
            setState(4144);
            match(HqlsqlParser::T_MUL);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4147);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4149);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 511, _ctx)) {
        case 1: {
          setState(4148);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_CUME_DIST: {
        enterOuterAlt(_localctx, 4);
        setState(4151);
        match(HqlsqlParser::T_CUME_DIST);
        setState(4152);
        match(HqlsqlParser::T_OPEN_P);
        setState(4153);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4154);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_DENSE_RANK: {
        enterOuterAlt(_localctx, 5);
        setState(4155);
        match(HqlsqlParser::T_DENSE_RANK);
        setState(4156);
        match(HqlsqlParser::T_OPEN_P);
        setState(4157);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4158);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_FIRST_VALUE: {
        enterOuterAlt(_localctx, 6);
        setState(4159);
        match(HqlsqlParser::T_FIRST_VALUE);
        setState(4160);
        match(HqlsqlParser::T_OPEN_P);
        setState(4161);
        expr(0);
        setState(4162);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4163);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_LAG: {
        enterOuterAlt(_localctx, 7);
        setState(4165);
        match(HqlsqlParser::T_LAG);
        setState(4166);
        match(HqlsqlParser::T_OPEN_P);
        setState(4167);
        expr(0);
        setState(4174);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_COMMA) {
          setState(4168);
          match(HqlsqlParser::T_COMMA);
          setState(4169);
          expr(0);
          setState(4172);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HqlsqlParser::T_COMMA) {
            setState(4170);
            match(HqlsqlParser::T_COMMA);
            setState(4171);
            expr(0);
          }
        }
        setState(4176);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4177);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_LAST_VALUE: {
        enterOuterAlt(_localctx, 8);
        setState(4179);
        match(HqlsqlParser::T_LAST_VALUE);
        setState(4180);
        match(HqlsqlParser::T_OPEN_P);
        setState(4181);
        expr(0);
        setState(4182);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4183);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_LEAD: {
        enterOuterAlt(_localctx, 9);
        setState(4185);
        match(HqlsqlParser::T_LEAD);
        setState(4186);
        match(HqlsqlParser::T_OPEN_P);
        setState(4187);
        expr(0);
        setState(4194);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::T_COMMA) {
          setState(4188);
          match(HqlsqlParser::T_COMMA);
          setState(4189);
          expr(0);
          setState(4192);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HqlsqlParser::T_COMMA) {
            setState(4190);
            match(HqlsqlParser::T_COMMA);
            setState(4191);
            expr(0);
          }
        }
        setState(4196);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4197);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_MAX: {
        enterOuterAlt(_localctx, 10);
        setState(4199);
        match(HqlsqlParser::T_MAX);
        setState(4200);
        match(HqlsqlParser::T_OPEN_P);
        setState(4202);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 516, _ctx)) {
        case 1: {
          setState(4201);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4204);
        expr(0);
        setState(4205);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4207);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 517, _ctx)) {
        case 1: {
          setState(4206);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_MIN: {
        enterOuterAlt(_localctx, 11);
        setState(4209);
        match(HqlsqlParser::T_MIN);
        setState(4210);
        match(HqlsqlParser::T_OPEN_P);
        setState(4212);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 518, _ctx)) {
        case 1: {
          setState(4211);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4214);
        expr(0);
        setState(4215);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4217);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 519, _ctx)) {
        case 1: {
          setState(4216);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_RANK: {
        enterOuterAlt(_localctx, 12);
        setState(4219);
        match(HqlsqlParser::T_RANK);
        setState(4220);
        match(HqlsqlParser::T_OPEN_P);
        setState(4221);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4222);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_ROW_NUMBER: {
        enterOuterAlt(_localctx, 13);
        setState(4223);
        match(HqlsqlParser::T_ROW_NUMBER);
        setState(4224);
        match(HqlsqlParser::T_OPEN_P);
        setState(4225);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4226);
        expr_func_over_clause();
        break;
      }

      case HqlsqlParser::T_STDEV: {
        enterOuterAlt(_localctx, 14);
        setState(4227);
        match(HqlsqlParser::T_STDEV);
        setState(4228);
        match(HqlsqlParser::T_OPEN_P);
        setState(4230);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 520, _ctx)) {
        case 1: {
          setState(4229);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4232);
        expr(0);
        setState(4233);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4235);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 521, _ctx)) {
        case 1: {
          setState(4234);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_STD: {
        enterOuterAlt(_localctx, 15);
        setState(4237);
        match(HqlsqlParser::T_STD);
        setState(4238);
        match(HqlsqlParser::T_OPEN_P);
        setState(4240);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 522, _ctx)) {
        case 1: {
          setState(4239);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4242);
        expr(0);
        setState(4243);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4245);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 523, _ctx)) {
        case 1: {
          setState(4244);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_SUM: {
        enterOuterAlt(_localctx, 16);
        setState(4247);
        match(HqlsqlParser::T_SUM);
        setState(4248);
        match(HqlsqlParser::T_OPEN_P);
        setState(4250);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 524, _ctx)) {
        case 1: {
          setState(4249);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4252);
        expr(0);
        setState(4253);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4255);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 525, _ctx)) {
        case 1: {
          setState(4254);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_VAR: {
        enterOuterAlt(_localctx, 17);
        setState(4257);
        match(HqlsqlParser::T_VAR);
        setState(4258);
        match(HqlsqlParser::T_OPEN_P);
        setState(4260);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 526, _ctx)) {
        case 1: {
          setState(4259);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4262);
        expr(0);
        setState(4263);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4265);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 527, _ctx)) {
        case 1: {
          setState(4264);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

      case HqlsqlParser::T_VARIANCE: {
        enterOuterAlt(_localctx, 18);
        setState(4267);
        match(HqlsqlParser::T_VARIANCE);
        setState(4268);
        match(HqlsqlParser::T_OPEN_P);
        setState(4270);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 528, _ctx)) {
        case 1: {
          setState(4269);
          expr_func_all_distinct();
          break;
        }

        }
        setState(4272);
        expr(0);
        setState(4273);
        match(HqlsqlParser::T_CLOSE_P);
        setState(4275);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 529, _ctx)) {
        case 1: {
          setState(4274);
          expr_func_over_clause();
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_func_all_distinctContext ------------------------------------------------------------------

HqlsqlParser::Expr_func_all_distinctContext::Expr_func_all_distinctContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_func_all_distinctContext::T_ALL() {
  return getToken(HqlsqlParser::T_ALL, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_func_all_distinctContext::T_DISTINCT() {
  return getToken(HqlsqlParser::T_DISTINCT, 0);
}


size_t HqlsqlParser::Expr_func_all_distinctContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_func_all_distinct;
}

void HqlsqlParser::Expr_func_all_distinctContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_func_all_distinct(this);
}

void HqlsqlParser::Expr_func_all_distinctContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_func_all_distinct(this);
}


antlrcpp::Any HqlsqlParser::Expr_func_all_distinctContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_func_all_distinct(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_func_all_distinctContext* HqlsqlParser::expr_func_all_distinct() {
  Expr_func_all_distinctContext *_localctx = _tracker.createInstance<Expr_func_all_distinctContext>(_ctx, getState());
  enterRule(_localctx, 604, HqlsqlParser::RuleExpr_func_all_distinct);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4279);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ALL || _la == HqlsqlParser::T_DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_func_over_clauseContext ------------------------------------------------------------------

HqlsqlParser::Expr_func_over_clauseContext::Expr_func_over_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_func_over_clauseContext::T_OVER() {
  return getToken(HqlsqlParser::T_OVER, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_func_over_clauseContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_func_over_clauseContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Expr_func_over_clauseContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_func_over_clauseContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

std::vector<HqlsqlParser::Expr_func_over_clause_optionsContext *> HqlsqlParser::Expr_func_over_clauseContext::expr_func_over_clause_options() {
  return getRuleContexts<HqlsqlParser::Expr_func_over_clause_optionsContext>();
}

HqlsqlParser::Expr_func_over_clause_optionsContext* HqlsqlParser::Expr_func_over_clauseContext::expr_func_over_clause_options(size_t i) {
  return getRuleContext<HqlsqlParser::Expr_func_over_clause_optionsContext>(i);
}


size_t HqlsqlParser::Expr_func_over_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_func_over_clause;
}

void HqlsqlParser::Expr_func_over_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_func_over_clause(this);
}

void HqlsqlParser::Expr_func_over_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_func_over_clause(this);
}


antlrcpp::Any HqlsqlParser::Expr_func_over_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_func_over_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_func_over_clauseContext* HqlsqlParser::expr_func_over_clause() {
  Expr_func_over_clauseContext *_localctx = _tracker.createInstance<Expr_func_over_clauseContext>(_ctx, getState());
  enterRule(_localctx, 606, HqlsqlParser::RuleExpr_func_over_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4285);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_OVER: {
        setState(4281);
        match(HqlsqlParser::T_OVER);
        break;
      }

      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_OPEN_P:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::L_ID: {
        setState(4283);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 531, _ctx)) {
        case 1: {
          setState(4282);
          match(HqlsqlParser::T_AS);
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4296);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_OPEN_P: {
        setState(4287);
        match(HqlsqlParser::T_OPEN_P);
        setState(4291);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_DISTRIBUTE || ((((_la - 212) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 212)) & ((1ULL << (HqlsqlParser::T_ORDER - 212))
          | (1ULL << (HqlsqlParser::T_PARTITION - 212))
          | (1ULL << (HqlsqlParser::T_ROWS - 212)))) != 0) || _la == HqlsqlParser::T_SORT

        || _la == HqlsqlParser::T_RANGE) {
          setState(4288);
          expr_func_over_clause_options();
          setState(4293);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(4294);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::L_ID: {
        setState(4295);
        ident();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_func_over_clause_optionsContext ------------------------------------------------------------------

HqlsqlParser::Expr_func_over_clause_optionsContext::Expr_func_over_clause_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Expr_func_partition_by_clauseContext* HqlsqlParser::Expr_func_over_clause_optionsContext::expr_func_partition_by_clause() {
  return getRuleContext<HqlsqlParser::Expr_func_partition_by_clauseContext>(0);
}

HqlsqlParser::Order_by_clauseContext* HqlsqlParser::Expr_func_over_clause_optionsContext::order_by_clause() {
  return getRuleContext<HqlsqlParser::Order_by_clauseContext>(0);
}

HqlsqlParser::Func_partition_clause_optionContext* HqlsqlParser::Expr_func_over_clause_optionsContext::func_partition_clause_option() {
  return getRuleContext<HqlsqlParser::Func_partition_clause_optionContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_func_over_clause_optionsContext::T_DISTRIBUTE() {
  return getToken(HqlsqlParser::T_DISTRIBUTE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_func_over_clause_optionsContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Expr_func_over_clause_optionsContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_func_over_clause_optionsContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_func_over_clause_optionsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Expr_func_over_clause_optionsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Expr_func_over_clause_optionsContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_func_over_clause_options;
}

void HqlsqlParser::Expr_func_over_clause_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_func_over_clause_options(this);
}

void HqlsqlParser::Expr_func_over_clause_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_func_over_clause_options(this);
}


antlrcpp::Any HqlsqlParser::Expr_func_over_clause_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_func_over_clause_options(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_func_over_clause_optionsContext* HqlsqlParser::expr_func_over_clause_options() {
  Expr_func_over_clause_optionsContext *_localctx = _tracker.createInstance<Expr_func_over_clause_optionsContext>(_ctx, getState());
  enterRule(_localctx, 608, HqlsqlParser::RuleExpr_func_over_clause_options);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4311);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_PARTITION: {
        enterOuterAlt(_localctx, 1);
        setState(4298);
        expr_func_partition_by_clause();
        break;
      }

      case HqlsqlParser::T_ORDER:
      case HqlsqlParser::T_SORT: {
        enterOuterAlt(_localctx, 2);
        setState(4299);
        order_by_clause();
        break;
      }

      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_RANGE: {
        enterOuterAlt(_localctx, 3);
        setState(4300);
        func_partition_clause_option();
        break;
      }

      case HqlsqlParser::T_DISTRIBUTE: {
        enterOuterAlt(_localctx, 4);
        setState(4301);
        match(HqlsqlParser::T_DISTRIBUTE);
        setState(4302);
        match(HqlsqlParser::T_BY);
        setState(4303);
        expr(0);
        setState(4308);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(4304);
          match(HqlsqlParser::T_COMMA);
          setState(4305);
          expr(0);
          setState(4310);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_func_partition_by_clauseContext ------------------------------------------------------------------

HqlsqlParser::Expr_func_partition_by_clauseContext::Expr_func_partition_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_func_partition_by_clauseContext::T_PARTITION() {
  return getToken(HqlsqlParser::T_PARTITION, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_func_partition_by_clauseContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Expr_func_partition_by_clauseContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_func_partition_by_clauseContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_func_partition_by_clauseContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Expr_func_partition_by_clauseContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Expr_func_partition_by_clauseContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_func_partition_by_clause;
}

void HqlsqlParser::Expr_func_partition_by_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_func_partition_by_clause(this);
}

void HqlsqlParser::Expr_func_partition_by_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_func_partition_by_clause(this);
}


antlrcpp::Any HqlsqlParser::Expr_func_partition_by_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_func_partition_by_clause(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_func_partition_by_clauseContext* HqlsqlParser::expr_func_partition_by_clause() {
  Expr_func_partition_by_clauseContext *_localctx = _tracker.createInstance<Expr_func_partition_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 610, HqlsqlParser::RuleExpr_func_partition_by_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4313);
    match(HqlsqlParser::T_PARTITION);
    setState(4314);
    match(HqlsqlParser::T_BY);
    setState(4315);
    expr(0);
    setState(4320);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == HqlsqlParser::T_COMMA) {
      setState(4316);
      match(HqlsqlParser::T_COMMA);
      setState(4317);
      expr(0);
      setState(4322);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_partition_clause_optionContext ------------------------------------------------------------------

HqlsqlParser::Func_partition_clause_optionContext::Func_partition_clause_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Func_partition_clause_partContext* HqlsqlParser::Func_partition_clause_optionContext::func_partition_clause_part() {
  return getRuleContext<HqlsqlParser::Func_partition_clause_partContext>(0);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_optionContext::T_ROWS() {
  return getToken(HqlsqlParser::T_ROWS, 0);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_optionContext::T_RANGE() {
  return getToken(HqlsqlParser::T_RANGE, 0);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_optionContext::T_BETWEEN() {
  return getToken(HqlsqlParser::T_BETWEEN, 0);
}


size_t HqlsqlParser::Func_partition_clause_optionContext::getRuleIndex() const {
  return HqlsqlParser::RuleFunc_partition_clause_option;
}

void HqlsqlParser::Func_partition_clause_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_partition_clause_option(this);
}

void HqlsqlParser::Func_partition_clause_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_partition_clause_option(this);
}


antlrcpp::Any HqlsqlParser::Func_partition_clause_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFunc_partition_clause_option(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Func_partition_clause_optionContext* HqlsqlParser::func_partition_clause_option() {
  Func_partition_clause_optionContext *_localctx = _tracker.createInstance<Func_partition_clause_optionContext>(_ctx, getState());
  enterRule(_localctx, 612, HqlsqlParser::RuleFunc_partition_clause_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4323);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_ROWS || _la == HqlsqlParser::T_RANGE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4325);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_BETWEEN) {
      setState(4324);
      match(HqlsqlParser::T_BETWEEN);
    }
    setState(4327);
    func_partition_clause_part();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_partition_clause_partContext ------------------------------------------------------------------

HqlsqlParser::Func_partition_clause_partContext::Func_partition_clause_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::Func_partition_clause_partContext::T_PRECEDING() {
  return getTokens(HqlsqlParser::T_PRECEDING);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_partContext::T_PRECEDING(size_t i) {
  return getToken(HqlsqlParser::T_PRECEDING, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Func_partition_clause_partContext::T_UNBOUNDED() {
  return getTokens(HqlsqlParser::T_UNBOUNDED);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_partContext::T_UNBOUNDED(size_t i) {
  return getToken(HqlsqlParser::T_UNBOUNDED, i);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_partContext::T_AND() {
  return getToken(HqlsqlParser::T_AND, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Func_partition_clause_partContext::T_CURRENT() {
  return getTokens(HqlsqlParser::T_CURRENT);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_partContext::T_CURRENT(size_t i) {
  return getToken(HqlsqlParser::T_CURRENT, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Func_partition_clause_partContext::T_ROW() {
  return getTokens(HqlsqlParser::T_ROW);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_partContext::T_ROW(size_t i) {
  return getToken(HqlsqlParser::T_ROW, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Func_partition_clause_partContext::T_FOLLOWING() {
  return getTokens(HqlsqlParser::T_FOLLOWING);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_partContext::T_FOLLOWING(size_t i) {
  return getToken(HqlsqlParser::T_FOLLOWING, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Func_partition_clause_partContext::L_INT() {
  return getTokens(HqlsqlParser::L_INT);
}

tree::TerminalNode* HqlsqlParser::Func_partition_clause_partContext::L_INT(size_t i) {
  return getToken(HqlsqlParser::L_INT, i);
}


size_t HqlsqlParser::Func_partition_clause_partContext::getRuleIndex() const {
  return HqlsqlParser::RuleFunc_partition_clause_part;
}

void HqlsqlParser::Func_partition_clause_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_partition_clause_part(this);
}

void HqlsqlParser::Func_partition_clause_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_partition_clause_part(this);
}


antlrcpp::Any HqlsqlParser::Func_partition_clause_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFunc_partition_clause_part(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Func_partition_clause_partContext* HqlsqlParser::func_partition_clause_part() {
  Func_partition_clause_partContext *_localctx = _tracker.createInstance<Func_partition_clause_partContext>(_ctx, getState());
  enterRule(_localctx, 614, HqlsqlParser::RuleFunc_partition_clause_part);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4384);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 554, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4333);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_UNBOUNDED: {
          setState(4329);
          match(HqlsqlParser::T_UNBOUNDED);
          break;
        }

        case HqlsqlParser::T_PRECEDING:
        case HqlsqlParser::L_INT: {
          setState(4331);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HqlsqlParser::L_INT) {
            setState(4330);
            match(HqlsqlParser::L_INT);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4335);
      match(HqlsqlParser::T_PRECEDING);
      setState(4337);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_AND) {
        setState(4336);
        match(HqlsqlParser::T_AND);
      }
      setState(4352);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 545, _ctx)) {
      case 1: {
        setState(4340);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == HqlsqlParser::L_INT) {
          setState(4339);
          match(HqlsqlParser::L_INT);
        }
        setState(4342);
        match(HqlsqlParser::T_PRECEDING);
        break;
      }

      case 2: {
        setState(4343);
        match(HqlsqlParser::T_CURRENT);
        setState(4344);
        match(HqlsqlParser::T_ROW);
        break;
      }

      case 3: {
        setState(4349);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HqlsqlParser::T_UNBOUNDED: {
            setState(4345);
            match(HqlsqlParser::T_UNBOUNDED);
            break;
          }

          case HqlsqlParser::T_FOLLOWING:
          case HqlsqlParser::L_INT: {
            setState(4347);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == HqlsqlParser::L_INT) {
              setState(4346);
              match(HqlsqlParser::L_INT);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4351);
        match(HqlsqlParser::T_FOLLOWING);
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4354);
      match(HqlsqlParser::T_CURRENT);
      setState(4355);
      match(HqlsqlParser::T_ROW);
      setState(4357);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_AND) {
        setState(4356);
        match(HqlsqlParser::T_AND);
      }
      setState(4368);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_CURRENT: {
          setState(4359);
          match(HqlsqlParser::T_CURRENT);
          setState(4360);
          match(HqlsqlParser::T_ROW);
          break;
        }

        case HqlsqlParser::T_UNBOUNDED:
        case HqlsqlParser::T_FOLLOWING:
        case HqlsqlParser::L_INT: {
          setState(4365);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case HqlsqlParser::T_UNBOUNDED: {
              setState(4361);
              match(HqlsqlParser::T_UNBOUNDED);
              break;
            }

            case HqlsqlParser::T_FOLLOWING:
            case HqlsqlParser::L_INT: {
              setState(4363);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == HqlsqlParser::L_INT) {
                setState(4362);
                match(HqlsqlParser::L_INT);
              }
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(4367);
          match(HqlsqlParser::T_FOLLOWING);
          break;
        }

        case HqlsqlParser::T_DISTRIBUTE:
        case HqlsqlParser::T_ORDER:
        case HqlsqlParser::T_PARTITION:
        case HqlsqlParser::T_ROWS:
        case HqlsqlParser::T_SORT:
        case HqlsqlParser::T_RANGE:
        case HqlsqlParser::T_CLOSE_P: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::L_INT) {
        setState(4370);
        match(HqlsqlParser::L_INT);
      }
      setState(4373);
      match(HqlsqlParser::T_FOLLOWING);
      setState(4375);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_AND) {
        setState(4374);
        match(HqlsqlParser::T_AND);
      }
      setState(4381);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_UNBOUNDED: {
          setState(4377);
          match(HqlsqlParser::T_UNBOUNDED);
          break;
        }

        case HqlsqlParser::T_FOLLOWING:
        case HqlsqlParser::L_INT: {
          setState(4379);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == HqlsqlParser::L_INT) {
            setState(4378);
            match(HqlsqlParser::L_INT);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4383);
      match(HqlsqlParser::T_FOLLOWING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_spec_funcContext ------------------------------------------------------------------

HqlsqlParser::Expr_spec_funcContext::Expr_spec_funcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_ACTIVITY_COUNT() {
  return getToken(HqlsqlParser::T_ACTIVITY_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_CAST() {
  return getToken(HqlsqlParser::T_CAST, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

std::vector<HqlsqlParser::ExprContext *> HqlsqlParser::Expr_spec_funcContext::expr() {
  return getRuleContexts<HqlsqlParser::ExprContext>();
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_spec_funcContext::expr(size_t i) {
  return getRuleContext<HqlsqlParser::ExprContext>(i);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

HqlsqlParser::DtypeContext* HqlsqlParser::Expr_spec_funcContext::dtype() {
  return getRuleContext<HqlsqlParser::DtypeContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_FORMAT() {
  return getToken(HqlsqlParser::T_FORMAT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_COUNT() {
  return getToken(HqlsqlParser::T_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_CURRENT_DATE() {
  return getToken(HqlsqlParser::T_CURRENT_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_CURRENT() {
  return getToken(HqlsqlParser::T_CURRENT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_DATE() {
  return getToken(HqlsqlParser::T_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_CURRENT_TIMESTAMP() {
  return getToken(HqlsqlParser::T_CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_TIMESTAMP() {
  return getToken(HqlsqlParser::T_TIMESTAMP, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_CURRENT_USER() {
  return getToken(HqlsqlParser::T_CURRENT_USER, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_USER() {
  return getToken(HqlsqlParser::T_USER, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_MAX_PART_STRING() {
  return getToken(HqlsqlParser::T_MAX_PART_STRING, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_spec_funcContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_spec_funcContext::T_EQUAL() {
  return getTokens(HqlsqlParser::T_EQUAL);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_EQUAL(size_t i) {
  return getToken(HqlsqlParser::T_EQUAL, i);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_MIN_PART_STRING() {
  return getToken(HqlsqlParser::T_MIN_PART_STRING, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_MAX_PART_INT() {
  return getToken(HqlsqlParser::T_MAX_PART_INT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_MIN_PART_INT() {
  return getToken(HqlsqlParser::T_MIN_PART_INT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_MAX_PART_DATE() {
  return getToken(HqlsqlParser::T_MAX_PART_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_MIN_PART_DATE() {
  return getToken(HqlsqlParser::T_MIN_PART_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_PART_COUNT() {
  return getToken(HqlsqlParser::T_PART_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_PART_LOC() {
  return getToken(HqlsqlParser::T_PART_LOC, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_TRIM() {
  return getToken(HqlsqlParser::T_TRIM, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_SUBSTRING() {
  return getToken(HqlsqlParser::T_SUBSTRING, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_FROM() {
  return getToken(HqlsqlParser::T_FROM, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_spec_funcContext::T_SYSDATE() {
  return getToken(HqlsqlParser::T_SYSDATE, 0);
}


size_t HqlsqlParser::Expr_spec_funcContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_spec_func;
}

void HqlsqlParser::Expr_spec_funcContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_spec_func(this);
}

void HqlsqlParser::Expr_spec_funcContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_spec_func(this);
}


antlrcpp::Any HqlsqlParser::Expr_spec_funcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_spec_func(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_spec_funcContext* HqlsqlParser::expr_spec_func() {
  Expr_spec_funcContext *_localctx = _tracker.createInstance<Expr_spec_funcContext>(_ctx, getState());
  enterRule(_localctx, 616, HqlsqlParser::RuleExpr_spec_func);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(4594);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 576, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4386);
      match(HqlsqlParser::T_ACTIVITY_COUNT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4387);
      match(HqlsqlParser::T_CAST);
      setState(4388);
      match(HqlsqlParser::T_OPEN_P);
      setState(4397);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 555, _ctx)) {
      case 1: {
        setState(4389);
        expr(0);
        setState(4390);
        match(HqlsqlParser::T_AS);
        setState(4391);
        dtype();
        break;
      }

      case 2: {
        setState(4393);
        dtype();
        setState(4394);
        match(HqlsqlParser::T_AS);
        setState(4395);
        expr(0);
        break;
      }

      }
      setState(4401);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_FORMAT) {
        setState(4399);
        match(HqlsqlParser::T_FORMAT);
        setState(4400);
        expr(0);
      }
      setState(4403);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4405);
      match(HqlsqlParser::T_COUNT);
      setState(4406);
      match(HqlsqlParser::T_OPEN_P);
      setState(4409);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_ACTION:
        case HqlsqlParser::T_ADD:
        case HqlsqlParser::T_ALL:
        case HqlsqlParser::T_ALLOCATE:
        case HqlsqlParser::T_ALTER:
        case HqlsqlParser::T_AND:
        case HqlsqlParser::T_ANSI_NULLS:
        case HqlsqlParser::T_ANSI_PADDING:
        case HqlsqlParser::T_AS:
        case HqlsqlParser::T_ASC:
        case HqlsqlParser::T_ASSOCIATE:
        case HqlsqlParser::T_AT:
        case HqlsqlParser::T_AUTO_INCREMENT:
        case HqlsqlParser::T_AVG:
        case HqlsqlParser::T_BATCHSIZE:
        case HqlsqlParser::T_BEGIN:
        case HqlsqlParser::T_BETWEEN:
        case HqlsqlParser::T_BIGINT:
        case HqlsqlParser::T_BINARY_DOUBLE:
        case HqlsqlParser::T_BINARY_FLOAT:
        case HqlsqlParser::T_BIT:
        case HqlsqlParser::T_BODY:
        case HqlsqlParser::T_BREAK:
        case HqlsqlParser::T_BY:
        case HqlsqlParser::T_BYTE:
        case HqlsqlParser::T_CALL:
        case HqlsqlParser::T_CALLER:
        case HqlsqlParser::T_CASCADE:
        case HqlsqlParser::T_CASE:
        case HqlsqlParser::T_CASESPECIFIC:
        case HqlsqlParser::T_CAST:
        case HqlsqlParser::T_CHAR:
        case HqlsqlParser::T_CHARACTER:
        case HqlsqlParser::T_CHARSET:
        case HqlsqlParser::T_CLIENT:
        case HqlsqlParser::T_CLOSE:
        case HqlsqlParser::T_CLUSTERED:
        case HqlsqlParser::T_CMP:
        case HqlsqlParser::T_COLLECT:
        case HqlsqlParser::T_COLLECTION:
        case HqlsqlParser::T_COLUMN:
        case HqlsqlParser::T_COMMENT:
        case HqlsqlParser::T_CONSTANT:
        case HqlsqlParser::T_COMMIT:
        case HqlsqlParser::T_COMPRESS:
        case HqlsqlParser::T_CONCAT:
        case HqlsqlParser::T_CONDITION:
        case HqlsqlParser::T_CONSTRAINT:
        case HqlsqlParser::T_CONTINUE:
        case HqlsqlParser::T_COPY:
        case HqlsqlParser::T_COUNT:
        case HqlsqlParser::T_COUNT_BIG:
        case HqlsqlParser::T_CREATE:
        case HqlsqlParser::T_CREATION:
        case HqlsqlParser::T_CREATOR:
        case HqlsqlParser::T_CS:
        case HqlsqlParser::T_CURRENT:
        case HqlsqlParser::T_CURRENT_SCHEMA:
        case HqlsqlParser::T_CURSOR:
        case HqlsqlParser::T_DATABASE:
        case HqlsqlParser::T_DATA:
        case HqlsqlParser::T_DATE:
        case HqlsqlParser::T_DATETIME:
        case HqlsqlParser::T_DAY:
        case HqlsqlParser::T_DAYS:
        case HqlsqlParser::T_DEC:
        case HqlsqlParser::T_DECIMAL:
        case HqlsqlParser::T_DECLARE:
        case HqlsqlParser::T_DEFAULT:
        case HqlsqlParser::T_DEFERRED:
        case HqlsqlParser::T_DEFINED:
        case HqlsqlParser::T_DEFINER:
        case HqlsqlParser::T_DEFINITION:
        case HqlsqlParser::T_DELETE:
        case HqlsqlParser::T_DELIMITED:
        case HqlsqlParser::T_DELIMITER:
        case HqlsqlParser::T_DESC:
        case HqlsqlParser::T_DESCRIBE:
        case HqlsqlParser::T_DIAGNOSTICS:
        case HqlsqlParser::T_DIR:
        case HqlsqlParser::T_DIRECTORY:
        case HqlsqlParser::T_DISTINCT:
        case HqlsqlParser::T_DISTRIBUTE:
        case HqlsqlParser::T_DO:
        case HqlsqlParser::T_DOUBLE:
        case HqlsqlParser::T_DROP:
        case HqlsqlParser::T_DYNAMIC:
        case HqlsqlParser::T_ENABLE:
        case HqlsqlParser::T_ENGINE:
        case HqlsqlParser::T_ESCAPED:
        case HqlsqlParser::T_EXCEPT:
        case HqlsqlParser::T_EXEC:
        case HqlsqlParser::T_EXECUTE:
        case HqlsqlParser::T_EXCEPTION:
        case HqlsqlParser::T_EXCLUSIVE:
        case HqlsqlParser::T_EXISTS:
        case HqlsqlParser::T_EXIT:
        case HqlsqlParser::T_FALLBACK:
        case HqlsqlParser::T_FALSE:
        case HqlsqlParser::T_FETCH:
        case HqlsqlParser::T_FIELDS:
        case HqlsqlParser::T_FILE:
        case HqlsqlParser::T_FILES:
        case HqlsqlParser::T_FLOAT:
        case HqlsqlParser::T_FOR:
        case HqlsqlParser::T_FOREIGN:
        case HqlsqlParser::T_FORMAT:
        case HqlsqlParser::T_FOUND:
        case HqlsqlParser::T_FULL:
        case HqlsqlParser::T_FUNCTION:
        case HqlsqlParser::T_GET:
        case HqlsqlParser::T_GLOBAL:
        case HqlsqlParser::T_GO:
        case HqlsqlParser::T_GRANT:
        case HqlsqlParser::T_ROLE:
        case HqlsqlParser::T_HANDLER:
        case HqlsqlParser::T_HASH:
        case HqlsqlParser::T_HAVING:
        case HqlsqlParser::T_HDFS:
        case HqlsqlParser::T_HIVE:
        case HqlsqlParser::T_HOST:
        case HqlsqlParser::T_IDENTITY:
        case HqlsqlParser::T_IF:
        case HqlsqlParser::T_IGNORE:
        case HqlsqlParser::T_IMMEDIATE:
        case HqlsqlParser::T_IN:
        case HqlsqlParser::T_INCLUDE:
        case HqlsqlParser::T_INDEX:
        case HqlsqlParser::T_INITRANS:
        case HqlsqlParser::T_INNER:
        case HqlsqlParser::T_INOUT:
        case HqlsqlParser::T_INSERT:
        case HqlsqlParser::T_INT:
        case HqlsqlParser::T_INT2:
        case HqlsqlParser::T_INT4:
        case HqlsqlParser::T_INT8:
        case HqlsqlParser::T_INTEGER:
        case HqlsqlParser::T_INTERSECT:
        case HqlsqlParser::T_INTERVAL:
        case HqlsqlParser::T_INTO:
        case HqlsqlParser::T_INVOKER:
        case HqlsqlParser::T_IS:
        case HqlsqlParser::T_ISOPEN:
        case HqlsqlParser::T_ITEMS:
        case HqlsqlParser::T_JOIN:
        case HqlsqlParser::T_KEEP:
        case HqlsqlParser::T_KEY:
        case HqlsqlParser::T_KEYS:
        case HqlsqlParser::T_LANGUAGE:
        case HqlsqlParser::T_LEAVE:
        case HqlsqlParser::T_LEFT:
        case HqlsqlParser::T_LIKE:
        case HqlsqlParser::T_LINES:
        case HqlsqlParser::T_LOCAL:
        case HqlsqlParser::T_LOCATION:
        case HqlsqlParser::T_LOCATOR:
        case HqlsqlParser::T_LOCATORS:
        case HqlsqlParser::T_LOCKS:
        case HqlsqlParser::T_LOG:
        case HqlsqlParser::T_LOGGED:
        case HqlsqlParser::T_LOGGING:
        case HqlsqlParser::T_LOOP:
        case HqlsqlParser::T_MAP:
        case HqlsqlParser::T_MATCHED:
        case HqlsqlParser::T_MAX:
        case HqlsqlParser::T_MAXTRANS:
        case HqlsqlParser::T_MERGE:
        case HqlsqlParser::T_MESSAGE_TEXT:
        case HqlsqlParser::T_MICROSECOND:
        case HqlsqlParser::T_MICROSECONDS:
        case HqlsqlParser::T_MIN:
        case HqlsqlParser::T_MULTISET:
        case HqlsqlParser::T_NCHAR:
        case HqlsqlParser::T_NEW:
        case HqlsqlParser::T_NVARCHAR:
        case HqlsqlParser::T_NO:
        case HqlsqlParser::T_NOCOUNT:
        case HqlsqlParser::T_NOCOMPRESS:
        case HqlsqlParser::T_NOLOGGING:
        case HqlsqlParser::T_NONE:
        case HqlsqlParser::T_NOT:
        case HqlsqlParser::T_NOTFOUND:
        case HqlsqlParser::T_NULL:
        case HqlsqlParser::T_NUMERIC:
        case HqlsqlParser::T_NUMBER:
        case HqlsqlParser::T_OBJECT:
        case HqlsqlParser::T_OFF:
        case HqlsqlParser::T_ON:
        case HqlsqlParser::T_ONLY:
        case HqlsqlParser::T_OPEN:
        case HqlsqlParser::T_OR:
        case HqlsqlParser::T_OUT:
        case HqlsqlParser::T_OUTER:
        case HqlsqlParser::T_OVERWRITE:
        case HqlsqlParser::T_OWNER:
        case HqlsqlParser::T_PACKAGE:
        case HqlsqlParser::T_PARTITION:
        case HqlsqlParser::T_PCTFREE:
        case HqlsqlParser::T_PCTUSED:
        case HqlsqlParser::T_PRECISION:
        case HqlsqlParser::T_PRESERVE:
        case HqlsqlParser::T_PRIMARY:
        case HqlsqlParser::T_PRINT:
        case HqlsqlParser::T_PROC:
        case HqlsqlParser::T_PROCEDURE:
        case HqlsqlParser::T_QUALIFY:
        case HqlsqlParser::T_QUERY_BAND:
        case HqlsqlParser::T_QUIT:
        case HqlsqlParser::T_QUOTED_IDENTIFIER:
        case HqlsqlParser::T_RAISE:
        case HqlsqlParser::T_REAL:
        case HqlsqlParser::T_REFERENCES:
        case HqlsqlParser::T_REGEXP:
        case HqlsqlParser::T_REPLACE:
        case HqlsqlParser::T_RESIGNAL:
        case HqlsqlParser::T_RESTRICT:
        case HqlsqlParser::T_RESULT:
        case HqlsqlParser::T_RESULT_SET_LOCATOR:
        case HqlsqlParser::T_RETURN:
        case HqlsqlParser::T_RETURNS:
        case HqlsqlParser::T_REVERSE:
        case HqlsqlParser::T_RIGHT:
        case HqlsqlParser::T_RLIKE:
        case HqlsqlParser::T_ROLLBACK:
        case HqlsqlParser::T_ROW:
        case HqlsqlParser::T_ROWS:
        case HqlsqlParser::T_ROW_COUNT:
        case HqlsqlParser::T_RR:
        case HqlsqlParser::T_RS:
        case HqlsqlParser::T_PWD:
        case HqlsqlParser::T_TRIM:
        case HqlsqlParser::T_SCHEMA:
        case HqlsqlParser::T_SECOND:
        case HqlsqlParser::T_SECONDS:
        case HqlsqlParser::T_SECURITY:
        case HqlsqlParser::T_SEGMENT:
        case HqlsqlParser::T_SELECT:
        case HqlsqlParser::T_SESSION:
        case HqlsqlParser::T_SESSIONS:
        case HqlsqlParser::T_SETS:
        case HqlsqlParser::T_SHARE:
        case HqlsqlParser::T_SIGNAL:
        case HqlsqlParser::T_SIMPLE_DOUBLE:
        case HqlsqlParser::T_SIMPLE_FLOAT:
        case HqlsqlParser::T_SMALLDATETIME:
        case HqlsqlParser::T_SMALLINT:
        case HqlsqlParser::T_SQL:
        case HqlsqlParser::T_SQLEXCEPTION:
        case HqlsqlParser::T_SQLINSERT:
        case HqlsqlParser::T_SQLSTATE:
        case HqlsqlParser::T_SQLWARNING:
        case HqlsqlParser::T_STATS:
        case HqlsqlParser::T_STATISTICS:
        case HqlsqlParser::T_STEP:
        case HqlsqlParser::T_STORAGE:
        case HqlsqlParser::T_STORED:
        case HqlsqlParser::T_STRING:
        case HqlsqlParser::T_SUBDIR:
        case HqlsqlParser::T_SUBSTRING:
        case HqlsqlParser::T_SUM:
        case HqlsqlParser::T_SUMMARY:
        case HqlsqlParser::T_SYS_REFCURSOR:
        case HqlsqlParser::T_TABLE:
        case HqlsqlParser::T_TABLESPACE:
        case HqlsqlParser::T_TEMPORARY:
        case HqlsqlParser::T_TERMINATED:
        case HqlsqlParser::T_TEXTIMAGE_ON:
        case HqlsqlParser::T_THEN:
        case HqlsqlParser::T_TIMESTAMP:
        case HqlsqlParser::T_TITLE:
        case HqlsqlParser::T_TO:
        case HqlsqlParser::T_TOP:
        case HqlsqlParser::T_TRANSACTION:
        case HqlsqlParser::T_TRUE:
        case HqlsqlParser::T_TRUNCATE:
        case HqlsqlParser::T_TYPE:
        case HqlsqlParser::T_UNIQUE:
        case HqlsqlParser::T_UPDATE:
        case HqlsqlParser::T_UR:
        case HqlsqlParser::T_USE:
        case HqlsqlParser::T_USING:
        case HqlsqlParser::T_VALUE:
        case HqlsqlParser::T_VALUES:
        case HqlsqlParser::T_VAR:
        case HqlsqlParser::T_VARCHAR:
        case HqlsqlParser::T_VARCHAR2:
        case HqlsqlParser::T_VARYING:
        case HqlsqlParser::T_VOLATILE:
        case HqlsqlParser::T_WHILE:
        case HqlsqlParser::T_WITH:
        case HqlsqlParser::T_WITHOUT:
        case HqlsqlParser::T_WORK:
        case HqlsqlParser::T_XACT_ABORT:
        case HqlsqlParser::T_XML:
        case HqlsqlParser::T_YES:
        case HqlsqlParser::T_ARRAY:
        case HqlsqlParser::T_STRUCT:
        case HqlsqlParser::T_SERDE:
        case HqlsqlParser::T_SEQUENCEFILE:
        case HqlsqlParser::T_TEXTFILE:
        case HqlsqlParser::T_RCFILE:
        case HqlsqlParser::T_ORC:
        case HqlsqlParser::T_PARQUET:
        case HqlsqlParser::T_AVRO:
        case HqlsqlParser::T_JSONFILE:
        case HqlsqlParser::T_INPUTFORMAT:
        case HqlsqlParser::T_FILEFORMAT:
        case HqlsqlParser::T_T:
        case HqlsqlParser::T_S:
        case HqlsqlParser::T_ACTIVITY_COUNT:
        case HqlsqlParser::T_CUME_DIST:
        case HqlsqlParser::T_CURRENT_DATE:
        case HqlsqlParser::T_CURRENT_TIMESTAMP:
        case HqlsqlParser::T_CURRENT_USER:
        case HqlsqlParser::T_DENSE_RANK:
        case HqlsqlParser::T_FIRST_VALUE:
        case HqlsqlParser::T_LAG:
        case HqlsqlParser::T_LAST_VALUE:
        case HqlsqlParser::T_LEAD:
        case HqlsqlParser::T_MAX_PART_STRING:
        case HqlsqlParser::T_MIN_PART_STRING:
        case HqlsqlParser::T_MAX_PART_INT:
        case HqlsqlParser::T_MIN_PART_INT:
        case HqlsqlParser::T_MAX_PART_DATE:
        case HqlsqlParser::T_MIN_PART_DATE:
        case HqlsqlParser::T_PART_COUNT:
        case HqlsqlParser::T_PART_LOC:
        case HqlsqlParser::T_RANK:
        case HqlsqlParser::T_ROW_NUMBER:
        case HqlsqlParser::T_STDEV:
        case HqlsqlParser::T_STD:
        case HqlsqlParser::T_SYSDATE:
        case HqlsqlParser::T_VARIANCE:
        case HqlsqlParser::T_USER:
        case HqlsqlParser::T_PURGE:
        case HqlsqlParser::T_BUCKETS:
        case HqlsqlParser::T_SKEWED:
        case HqlsqlParser::T_DIRECTORIES:
        case HqlsqlParser::T_SERDEPROPERTIES:
        case HqlsqlParser::T_RENAME:
        case HqlsqlParser::T_SORTED:
        case HqlsqlParser::T_SORT:
        case HqlsqlParser::T_CHANGE:
        case HqlsqlParser::T_EXCHANGE:
        case HqlsqlParser::T_RECOVER:
        case HqlsqlParser::T_PARTITIONS:
        case HqlsqlParser::T_PROTECTION:
        case HqlsqlParser::T_ARCHIVE:
        case HqlsqlParser::T_UNARCHIVE:
        case HqlsqlParser::T_TOUCH:
        case HqlsqlParser::T_OFFLINE:
        case HqlsqlParser::T_NO_DROP:
        case HqlsqlParser::T_COMPACT:
        case HqlsqlParser::T_CONCATENATE:
        case HqlsqlParser::T_WAIT:
        case HqlsqlParser::T_COLUMNS:
        case HqlsqlParser::T_FIRST:
        case HqlsqlParser::T_LAST:
        case HqlsqlParser::T_NULLS:
        case HqlsqlParser::T_AFTER:
        case HqlsqlParser::T_MATERIALIZED:
        case HqlsqlParser::T_REWRITE:
        case HqlsqlParser::T_PARTITIONED:
        case HqlsqlParser::T_DISTRIBUTED:
        case HqlsqlParser::T_MACRO:
        case HqlsqlParser::T_SHOW:
        case HqlsqlParser::T_EXTENDED:
        case HqlsqlParser::T_FORMATTED:
        case HqlsqlParser::T_SEMI:
        case HqlsqlParser::T_CROSS:
        case HqlsqlParser::T_LATERAL:
        case HqlsqlParser::T_RELOAD:
        case HqlsqlParser::T_LOAD:
        case HqlsqlParser::T_INPATH:
        case HqlsqlParser::T_PRINCIPALS:
        case HqlsqlParser::T_COMPACTIONS:
        case HqlsqlParser::T_CONF:
        case HqlsqlParser::T_ADMIN:
        case HqlsqlParser::T_OPTION:
        case HqlsqlParser::T_PRIVILEGES:
        case HqlsqlParser::T_LOCK:
        case HqlsqlParser::T_SHOW_DATABASE:
        case HqlsqlParser::T_COMPUTE:
        case HqlsqlParser::T_CACHE:
        case HqlsqlParser::T_METADATA:
        case HqlsqlParser::T_NOSCAN:
        case HqlsqlParser::T_UNIONTYPE:
        case HqlsqlParser::T_ANALYZE:
        case HqlsqlParser::T_EXPLAIN:
        case HqlsqlParser::T_CBO:
        case HqlsqlParser::T_AST:
        case HqlsqlParser::T_DEPENDENCY:
        case HqlsqlParser::T_AUTHORIZATION:
        case HqlsqlParser::T_VECTORIZATION:
        case HqlsqlParser::T_COST:
        case HqlsqlParser::T_JOINCOST:
        case HqlsqlParser::T_OPERATOR:
        case HqlsqlParser::T_EXPRESSION:
        case HqlsqlParser::T_DETAIL:
        case HqlsqlParser::T_UNBOUNDED:
        case HqlsqlParser::T_PRECEDING:
        case HqlsqlParser::T_FOLLOWING:
        case HqlsqlParser::T_RANGE:
        case HqlsqlParser::T_YEAR:
        case HqlsqlParser::T_MONTH:
        case HqlsqlParser::T_MINUTE:
        case HqlsqlParser::T_TIME:
        case HqlsqlParser::T_ZONE:
        case HqlsqlParser::T_ADD_SIGN:
        case HqlsqlParser::T_OPEN_P:
        case HqlsqlParser::T_SUB:
        case HqlsqlParser::T_EXCLAMATION:
        case HqlsqlParser::L_ID:
        case HqlsqlParser::L_S_STRING:
        case HqlsqlParser::L_D_STRING:
        case HqlsqlParser::L_INT:
        case HqlsqlParser::L_DEC: {
          setState(4407);
          expr(0);
          break;
        }

        case HqlsqlParser::T_MUL: {
          setState(4408);
          match(HqlsqlParser::T_MUL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4411);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4412);
      match(HqlsqlParser::T_CURRENT_DATE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4413);
      match(HqlsqlParser::T_CURRENT);
      setState(4414);
      match(HqlsqlParser::T_DATE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4418);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_CURRENT_TIMESTAMP: {
          setState(4415);
          match(HqlsqlParser::T_CURRENT_TIMESTAMP);
          break;
        }

        case HqlsqlParser::T_CURRENT: {
          setState(4416);
          match(HqlsqlParser::T_CURRENT);
          setState(4417);
          match(HqlsqlParser::T_TIMESTAMP);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4424);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 559, _ctx)) {
      case 1: {
        setState(4420);
        match(HqlsqlParser::T_OPEN_P);
        setState(4421);
        expr(0);
        setState(4422);
        match(HqlsqlParser::T_CLOSE_P);
        break;
      }

      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4426);
      match(HqlsqlParser::T_CURRENT_USER);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(4427);
      match(HqlsqlParser::T_CURRENT);
      setState(4428);
      match(HqlsqlParser::T_USER);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(4429);
      match(HqlsqlParser::T_MAX_PART_STRING);
      setState(4430);
      match(HqlsqlParser::T_OPEN_P);
      setState(4431);
      expr(0);
      setState(4444);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COMMA) {
        setState(4432);
        match(HqlsqlParser::T_COMMA);
        setState(4433);
        expr(0);
        setState(4441);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(4434);
          match(HqlsqlParser::T_COMMA);
          setState(4435);
          expr(0);
          setState(4436);
          match(HqlsqlParser::T_EQUAL);
          setState(4437);
          expr(0);
          setState(4443);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(4446);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(4448);
      match(HqlsqlParser::T_MIN_PART_STRING);
      setState(4449);
      match(HqlsqlParser::T_OPEN_P);
      setState(4450);
      expr(0);
      setState(4463);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COMMA) {
        setState(4451);
        match(HqlsqlParser::T_COMMA);
        setState(4452);
        expr(0);
        setState(4460);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(4453);
          match(HqlsqlParser::T_COMMA);
          setState(4454);
          expr(0);
          setState(4455);
          match(HqlsqlParser::T_EQUAL);
          setState(4456);
          expr(0);
          setState(4462);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(4465);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(4467);
      match(HqlsqlParser::T_MAX_PART_INT);
      setState(4468);
      match(HqlsqlParser::T_OPEN_P);
      setState(4469);
      expr(0);
      setState(4482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COMMA) {
        setState(4470);
        match(HqlsqlParser::T_COMMA);
        setState(4471);
        expr(0);
        setState(4479);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(4472);
          match(HqlsqlParser::T_COMMA);
          setState(4473);
          expr(0);
          setState(4474);
          match(HqlsqlParser::T_EQUAL);
          setState(4475);
          expr(0);
          setState(4481);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(4484);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(4486);
      match(HqlsqlParser::T_MIN_PART_INT);
      setState(4487);
      match(HqlsqlParser::T_OPEN_P);
      setState(4488);
      expr(0);
      setState(4501);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COMMA) {
        setState(4489);
        match(HqlsqlParser::T_COMMA);
        setState(4490);
        expr(0);
        setState(4498);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(4491);
          match(HqlsqlParser::T_COMMA);
          setState(4492);
          expr(0);
          setState(4493);
          match(HqlsqlParser::T_EQUAL);
          setState(4494);
          expr(0);
          setState(4500);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(4503);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(4505);
      match(HqlsqlParser::T_MAX_PART_DATE);
      setState(4506);
      match(HqlsqlParser::T_OPEN_P);
      setState(4507);
      expr(0);
      setState(4520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COMMA) {
        setState(4508);
        match(HqlsqlParser::T_COMMA);
        setState(4509);
        expr(0);
        setState(4517);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(4510);
          match(HqlsqlParser::T_COMMA);
          setState(4511);
          expr(0);
          setState(4512);
          match(HqlsqlParser::T_EQUAL);
          setState(4513);
          expr(0);
          setState(4519);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(4522);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(4524);
      match(HqlsqlParser::T_MIN_PART_DATE);
      setState(4525);
      match(HqlsqlParser::T_OPEN_P);
      setState(4526);
      expr(0);
      setState(4539);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COMMA) {
        setState(4527);
        match(HqlsqlParser::T_COMMA);
        setState(4528);
        expr(0);
        setState(4536);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == HqlsqlParser::T_COMMA) {
          setState(4529);
          match(HqlsqlParser::T_COMMA);
          setState(4530);
          expr(0);
          setState(4531);
          match(HqlsqlParser::T_EQUAL);
          setState(4532);
          expr(0);
          setState(4538);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(4541);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(4543);
      match(HqlsqlParser::T_PART_COUNT);
      setState(4544);
      match(HqlsqlParser::T_OPEN_P);
      setState(4545);
      expr(0);
      setState(4553);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == HqlsqlParser::T_COMMA) {
        setState(4546);
        match(HqlsqlParser::T_COMMA);
        setState(4547);
        expr(0);
        setState(4548);
        match(HqlsqlParser::T_EQUAL);
        setState(4549);
        expr(0);
        setState(4555);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4556);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(4558);
      match(HqlsqlParser::T_PART_LOC);
      setState(4559);
      match(HqlsqlParser::T_OPEN_P);
      setState(4560);
      expr(0);
      setState(4566); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(4561);
                match(HqlsqlParser::T_COMMA);
                setState(4562);
                expr(0);
                setState(4563);
                match(HqlsqlParser::T_EQUAL);
                setState(4564);
                expr(0);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(4568); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 573, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(4572);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_COMMA) {
        setState(4570);
        match(HqlsqlParser::T_COMMA);
        setState(4571);
        expr(0);
      }
      setState(4574);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(4576);
      match(HqlsqlParser::T_TRIM);
      setState(4577);
      match(HqlsqlParser::T_OPEN_P);
      setState(4578);
      expr(0);
      setState(4579);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(4581);
      match(HqlsqlParser::T_SUBSTRING);
      setState(4582);
      match(HqlsqlParser::T_OPEN_P);
      setState(4583);
      expr(0);
      setState(4584);
      match(HqlsqlParser::T_FROM);
      setState(4585);
      expr(0);
      setState(4588);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_FOR) {
        setState(4586);
        match(HqlsqlParser::T_FOR);
        setState(4587);
        expr(0);
      }
      setState(4590);
      match(HqlsqlParser::T_CLOSE_P);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(4592);
      match(HqlsqlParser::T_SYSDATE);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(4593);
      match(HqlsqlParser::T_USER);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_funcContext ------------------------------------------------------------------

HqlsqlParser::Expr_funcContext::Expr_funcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::IdentContext* HqlsqlParser::Expr_funcContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Expr_funcContext::T_OPEN_P() {
  return getToken(HqlsqlParser::T_OPEN_P, 0);
}

tree::TerminalNode* HqlsqlParser::Expr_funcContext::T_CLOSE_P() {
  return getToken(HqlsqlParser::T_CLOSE_P, 0);
}

HqlsqlParser::Expr_func_paramsContext* HqlsqlParser::Expr_funcContext::expr_func_params() {
  return getRuleContext<HqlsqlParser::Expr_func_paramsContext>(0);
}

HqlsqlParser::Expr_func_over_clauseContext* HqlsqlParser::Expr_funcContext::expr_func_over_clause() {
  return getRuleContext<HqlsqlParser::Expr_func_over_clauseContext>(0);
}


size_t HqlsqlParser::Expr_funcContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_func;
}

void HqlsqlParser::Expr_funcContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_func(this);
}

void HqlsqlParser::Expr_funcContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_func(this);
}


antlrcpp::Any HqlsqlParser::Expr_funcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_func(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_funcContext* HqlsqlParser::expr_func() {
  Expr_funcContext *_localctx = _tracker.createInstance<Expr_funcContext>(_ctx, getState());
  enterRule(_localctx, 618, HqlsqlParser::RuleExpr_func);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4596);
    ident();
    setState(4597);
    match(HqlsqlParser::T_OPEN_P);
    setState(4599);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ACTION)
      | (1ULL << HqlsqlParser::T_ADD)
      | (1ULL << HqlsqlParser::T_ALL)
      | (1ULL << HqlsqlParser::T_ALLOCATE)
      | (1ULL << HqlsqlParser::T_ALTER)
      | (1ULL << HqlsqlParser::T_AND)
      | (1ULL << HqlsqlParser::T_ANSI_NULLS)
      | (1ULL << HqlsqlParser::T_ANSI_PADDING)
      | (1ULL << HqlsqlParser::T_AS)
      | (1ULL << HqlsqlParser::T_ASC)
      | (1ULL << HqlsqlParser::T_ASSOCIATE)
      | (1ULL << HqlsqlParser::T_AT)
      | (1ULL << HqlsqlParser::T_AUTO_INCREMENT)
      | (1ULL << HqlsqlParser::T_AVG)
      | (1ULL << HqlsqlParser::T_BATCHSIZE)
      | (1ULL << HqlsqlParser::T_BEGIN)
      | (1ULL << HqlsqlParser::T_BETWEEN)
      | (1ULL << HqlsqlParser::T_BIGINT)
      | (1ULL << HqlsqlParser::T_BINARY_DOUBLE)
      | (1ULL << HqlsqlParser::T_BINARY_FLOAT)
      | (1ULL << HqlsqlParser::T_BIT)
      | (1ULL << HqlsqlParser::T_BODY)
      | (1ULL << HqlsqlParser::T_BREAK)
      | (1ULL << HqlsqlParser::T_BY)
      | (1ULL << HqlsqlParser::T_BYTE)
      | (1ULL << HqlsqlParser::T_CALL)
      | (1ULL << HqlsqlParser::T_CALLER)
      | (1ULL << HqlsqlParser::T_CASCADE)
      | (1ULL << HqlsqlParser::T_CASE)
      | (1ULL << HqlsqlParser::T_CASESPECIFIC)
      | (1ULL << HqlsqlParser::T_CAST)
      | (1ULL << HqlsqlParser::T_CHAR)
      | (1ULL << HqlsqlParser::T_CHARACTER)
      | (1ULL << HqlsqlParser::T_CHARSET)
      | (1ULL << HqlsqlParser::T_CLIENT)
      | (1ULL << HqlsqlParser::T_CLOSE)
      | (1ULL << HqlsqlParser::T_CLUSTERED)
      | (1ULL << HqlsqlParser::T_CMP)
      | (1ULL << HqlsqlParser::T_COLLECT)
      | (1ULL << HqlsqlParser::T_COLLECTION)
      | (1ULL << HqlsqlParser::T_COLUMN)
      | (1ULL << HqlsqlParser::T_COMMENT)
      | (1ULL << HqlsqlParser::T_CONSTANT)
      | (1ULL << HqlsqlParser::T_COMMIT)
      | (1ULL << HqlsqlParser::T_COMPRESS)
      | (1ULL << HqlsqlParser::T_CONCAT)
      | (1ULL << HqlsqlParser::T_CONDITION)
      | (1ULL << HqlsqlParser::T_CONSTRAINT)
      | (1ULL << HqlsqlParser::T_CONTINUE)
      | (1ULL << HqlsqlParser::T_COPY)
      | (1ULL << HqlsqlParser::T_COUNT)
      | (1ULL << HqlsqlParser::T_COUNT_BIG)
      | (1ULL << HqlsqlParser::T_CREATE)
      | (1ULL << HqlsqlParser::T_CREATION)
      | (1ULL << HqlsqlParser::T_CREATOR)
      | (1ULL << HqlsqlParser::T_CS)
      | (1ULL << HqlsqlParser::T_CURRENT)
      | (1ULL << HqlsqlParser::T_CURRENT_SCHEMA)
      | (1ULL << HqlsqlParser::T_CURSOR)
      | (1ULL << HqlsqlParser::T_DATABASE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (HqlsqlParser::T_DATA - 64))
      | (1ULL << (HqlsqlParser::T_DATE - 64))
      | (1ULL << (HqlsqlParser::T_DATETIME - 64))
      | (1ULL << (HqlsqlParser::T_DAY - 64))
      | (1ULL << (HqlsqlParser::T_DAYS - 64))
      | (1ULL << (HqlsqlParser::T_DEC - 64))
      | (1ULL << (HqlsqlParser::T_DECIMAL - 64))
      | (1ULL << (HqlsqlParser::T_DECLARE - 64))
      | (1ULL << (HqlsqlParser::T_DEFAULT - 64))
      | (1ULL << (HqlsqlParser::T_DEFERRED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINER - 64))
      | (1ULL << (HqlsqlParser::T_DEFINITION - 64))
      | (1ULL << (HqlsqlParser::T_DELETE - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITED - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITER - 64))
      | (1ULL << (HqlsqlParser::T_DESC - 64))
      | (1ULL << (HqlsqlParser::T_DESCRIBE - 64))
      | (1ULL << (HqlsqlParser::T_DIAGNOSTICS - 64))
      | (1ULL << (HqlsqlParser::T_DIR - 64))
      | (1ULL << (HqlsqlParser::T_DIRECTORY - 64))
      | (1ULL << (HqlsqlParser::T_DISTINCT - 64))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTE - 64))
      | (1ULL << (HqlsqlParser::T_DO - 64))
      | (1ULL << (HqlsqlParser::T_DOUBLE - 64))
      | (1ULL << (HqlsqlParser::T_DROP - 64))
      | (1ULL << (HqlsqlParser::T_DYNAMIC - 64))
      | (1ULL << (HqlsqlParser::T_ENABLE - 64))
      | (1ULL << (HqlsqlParser::T_ENGINE - 64))
      | (1ULL << (HqlsqlParser::T_ESCAPED - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPT - 64))
      | (1ULL << (HqlsqlParser::T_EXEC - 64))
      | (1ULL << (HqlsqlParser::T_EXECUTE - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPTION - 64))
      | (1ULL << (HqlsqlParser::T_EXCLUSIVE - 64))
      | (1ULL << (HqlsqlParser::T_EXISTS - 64))
      | (1ULL << (HqlsqlParser::T_EXIT - 64))
      | (1ULL << (HqlsqlParser::T_FALLBACK - 64))
      | (1ULL << (HqlsqlParser::T_FALSE - 64))
      | (1ULL << (HqlsqlParser::T_FETCH - 64))
      | (1ULL << (HqlsqlParser::T_FIELDS - 64))
      | (1ULL << (HqlsqlParser::T_FILE - 64))
      | (1ULL << (HqlsqlParser::T_FILES - 64))
      | (1ULL << (HqlsqlParser::T_FLOAT - 64))
      | (1ULL << (HqlsqlParser::T_FOR - 64))
      | (1ULL << (HqlsqlParser::T_FOREIGN - 64))
      | (1ULL << (HqlsqlParser::T_FORMAT - 64))
      | (1ULL << (HqlsqlParser::T_FOUND - 64))
      | (1ULL << (HqlsqlParser::T_FULL - 64))
      | (1ULL << (HqlsqlParser::T_FUNCTION - 64))
      | (1ULL << (HqlsqlParser::T_GET - 64))
      | (1ULL << (HqlsqlParser::T_GLOBAL - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (HqlsqlParser::T_GO - 128))
      | (1ULL << (HqlsqlParser::T_GRANT - 128))
      | (1ULL << (HqlsqlParser::T_ROLE - 128))
      | (1ULL << (HqlsqlParser::T_HANDLER - 128))
      | (1ULL << (HqlsqlParser::T_HASH - 128))
      | (1ULL << (HqlsqlParser::T_HAVING - 128))
      | (1ULL << (HqlsqlParser::T_HDFS - 128))
      | (1ULL << (HqlsqlParser::T_HIVE - 128))
      | (1ULL << (HqlsqlParser::T_HOST - 128))
      | (1ULL << (HqlsqlParser::T_IDENTITY - 128))
      | (1ULL << (HqlsqlParser::T_IF - 128))
      | (1ULL << (HqlsqlParser::T_IGNORE - 128))
      | (1ULL << (HqlsqlParser::T_IMMEDIATE - 128))
      | (1ULL << (HqlsqlParser::T_IN - 128))
      | (1ULL << (HqlsqlParser::T_INCLUDE - 128))
      | (1ULL << (HqlsqlParser::T_INDEX - 128))
      | (1ULL << (HqlsqlParser::T_INITRANS - 128))
      | (1ULL << (HqlsqlParser::T_INNER - 128))
      | (1ULL << (HqlsqlParser::T_INOUT - 128))
      | (1ULL << (HqlsqlParser::T_INSERT - 128))
      | (1ULL << (HqlsqlParser::T_INT - 128))
      | (1ULL << (HqlsqlParser::T_INT2 - 128))
      | (1ULL << (HqlsqlParser::T_INT4 - 128))
      | (1ULL << (HqlsqlParser::T_INT8 - 128))
      | (1ULL << (HqlsqlParser::T_INTEGER - 128))
      | (1ULL << (HqlsqlParser::T_INTERSECT - 128))
      | (1ULL << (HqlsqlParser::T_INTERVAL - 128))
      | (1ULL << (HqlsqlParser::T_INTO - 128))
      | (1ULL << (HqlsqlParser::T_INVOKER - 128))
      | (1ULL << (HqlsqlParser::T_IS - 128))
      | (1ULL << (HqlsqlParser::T_ISOPEN - 128))
      | (1ULL << (HqlsqlParser::T_ITEMS - 128))
      | (1ULL << (HqlsqlParser::T_JOIN - 128))
      | (1ULL << (HqlsqlParser::T_KEEP - 128))
      | (1ULL << (HqlsqlParser::T_KEY - 128))
      | (1ULL << (HqlsqlParser::T_KEYS - 128))
      | (1ULL << (HqlsqlParser::T_LANGUAGE - 128))
      | (1ULL << (HqlsqlParser::T_LEAVE - 128))
      | (1ULL << (HqlsqlParser::T_LEFT - 128))
      | (1ULL << (HqlsqlParser::T_LIKE - 128))
      | (1ULL << (HqlsqlParser::T_LINES - 128))
      | (1ULL << (HqlsqlParser::T_LOCAL - 128))
      | (1ULL << (HqlsqlParser::T_LOCATION - 128))
      | (1ULL << (HqlsqlParser::T_LOCATOR - 128))
      | (1ULL << (HqlsqlParser::T_LOCATORS - 128))
      | (1ULL << (HqlsqlParser::T_LOCKS - 128))
      | (1ULL << (HqlsqlParser::T_LOG - 128))
      | (1ULL << (HqlsqlParser::T_LOGGED - 128))
      | (1ULL << (HqlsqlParser::T_LOGGING - 128))
      | (1ULL << (HqlsqlParser::T_LOOP - 128))
      | (1ULL << (HqlsqlParser::T_MAP - 128))
      | (1ULL << (HqlsqlParser::T_MATCHED - 128))
      | (1ULL << (HqlsqlParser::T_MAX - 128))
      | (1ULL << (HqlsqlParser::T_MAXTRANS - 128))
      | (1ULL << (HqlsqlParser::T_MERGE - 128))
      | (1ULL << (HqlsqlParser::T_MESSAGE_TEXT - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECOND - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECONDS - 128))
      | (1ULL << (HqlsqlParser::T_MIN - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (HqlsqlParser::T_MULTISET - 192))
      | (1ULL << (HqlsqlParser::T_NCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NEW - 192))
      | (1ULL << (HqlsqlParser::T_NVARCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NO - 192))
      | (1ULL << (HqlsqlParser::T_NOCOUNT - 192))
      | (1ULL << (HqlsqlParser::T_NOCOMPRESS - 192))
      | (1ULL << (HqlsqlParser::T_NOLOGGING - 192))
      | (1ULL << (HqlsqlParser::T_NONE - 192))
      | (1ULL << (HqlsqlParser::T_NOT - 192))
      | (1ULL << (HqlsqlParser::T_NOTFOUND - 192))
      | (1ULL << (HqlsqlParser::T_NULL - 192))
      | (1ULL << (HqlsqlParser::T_NUMERIC - 192))
      | (1ULL << (HqlsqlParser::T_NUMBER - 192))
      | (1ULL << (HqlsqlParser::T_OBJECT - 192))
      | (1ULL << (HqlsqlParser::T_OFF - 192))
      | (1ULL << (HqlsqlParser::T_ON - 192))
      | (1ULL << (HqlsqlParser::T_ONLY - 192))
      | (1ULL << (HqlsqlParser::T_OPEN - 192))
      | (1ULL << (HqlsqlParser::T_OR - 192))
      | (1ULL << (HqlsqlParser::T_OUT - 192))
      | (1ULL << (HqlsqlParser::T_OUTER - 192))
      | (1ULL << (HqlsqlParser::T_OVERWRITE - 192))
      | (1ULL << (HqlsqlParser::T_OWNER - 192))
      | (1ULL << (HqlsqlParser::T_PACKAGE - 192))
      | (1ULL << (HqlsqlParser::T_PARTITION - 192))
      | (1ULL << (HqlsqlParser::T_PCTFREE - 192))
      | (1ULL << (HqlsqlParser::T_PCTUSED - 192))
      | (1ULL << (HqlsqlParser::T_PRECISION - 192))
      | (1ULL << (HqlsqlParser::T_PRESERVE - 192))
      | (1ULL << (HqlsqlParser::T_PRIMARY - 192))
      | (1ULL << (HqlsqlParser::T_PRINT - 192))
      | (1ULL << (HqlsqlParser::T_PROC - 192))
      | (1ULL << (HqlsqlParser::T_PROCEDURE - 192))
      | (1ULL << (HqlsqlParser::T_QUALIFY - 192))
      | (1ULL << (HqlsqlParser::T_QUERY_BAND - 192))
      | (1ULL << (HqlsqlParser::T_QUIT - 192))
      | (1ULL << (HqlsqlParser::T_QUOTED_IDENTIFIER - 192))
      | (1ULL << (HqlsqlParser::T_RAISE - 192))
      | (1ULL << (HqlsqlParser::T_REAL - 192))
      | (1ULL << (HqlsqlParser::T_REFERENCES - 192))
      | (1ULL << (HqlsqlParser::T_REGEXP - 192))
      | (1ULL << (HqlsqlParser::T_REPLACE - 192))
      | (1ULL << (HqlsqlParser::T_RESIGNAL - 192))
      | (1ULL << (HqlsqlParser::T_RESTRICT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT_SET_LOCATOR - 192))
      | (1ULL << (HqlsqlParser::T_RETURN - 192))
      | (1ULL << (HqlsqlParser::T_RETURNS - 192))
      | (1ULL << (HqlsqlParser::T_REVERSE - 192))
      | (1ULL << (HqlsqlParser::T_RIGHT - 192))
      | (1ULL << (HqlsqlParser::T_RLIKE - 192))
      | (1ULL << (HqlsqlParser::T_ROLLBACK - 192))
      | (1ULL << (HqlsqlParser::T_ROW - 192))
      | (1ULL << (HqlsqlParser::T_ROWS - 192))
      | (1ULL << (HqlsqlParser::T_ROW_COUNT - 192))
      | (1ULL << (HqlsqlParser::T_RR - 192))
      | (1ULL << (HqlsqlParser::T_RS - 192))
      | (1ULL << (HqlsqlParser::T_PWD - 192))
      | (1ULL << (HqlsqlParser::T_TRIM - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (HqlsqlParser::T_SCHEMA - 256))
      | (1ULL << (HqlsqlParser::T_SECOND - 256))
      | (1ULL << (HqlsqlParser::T_SECONDS - 256))
      | (1ULL << (HqlsqlParser::T_SECURITY - 256))
      | (1ULL << (HqlsqlParser::T_SEGMENT - 256))
      | (1ULL << (HqlsqlParser::T_SELECT - 256))
      | (1ULL << (HqlsqlParser::T_SESSION - 256))
      | (1ULL << (HqlsqlParser::T_SESSIONS - 256))
      | (1ULL << (HqlsqlParser::T_SETS - 256))
      | (1ULL << (HqlsqlParser::T_SHARE - 256))
      | (1ULL << (HqlsqlParser::T_SIGNAL - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_DOUBLE - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_FLOAT - 256))
      | (1ULL << (HqlsqlParser::T_SMALLDATETIME - 256))
      | (1ULL << (HqlsqlParser::T_SMALLINT - 256))
      | (1ULL << (HqlsqlParser::T_SQL - 256))
      | (1ULL << (HqlsqlParser::T_SQLEXCEPTION - 256))
      | (1ULL << (HqlsqlParser::T_SQLINSERT - 256))
      | (1ULL << (HqlsqlParser::T_SQLSTATE - 256))
      | (1ULL << (HqlsqlParser::T_SQLWARNING - 256))
      | (1ULL << (HqlsqlParser::T_STATS - 256))
      | (1ULL << (HqlsqlParser::T_STATISTICS - 256))
      | (1ULL << (HqlsqlParser::T_STEP - 256))
      | (1ULL << (HqlsqlParser::T_STORAGE - 256))
      | (1ULL << (HqlsqlParser::T_STORED - 256))
      | (1ULL << (HqlsqlParser::T_STRING - 256))
      | (1ULL << (HqlsqlParser::T_SUBDIR - 256))
      | (1ULL << (HqlsqlParser::T_SUBSTRING - 256))
      | (1ULL << (HqlsqlParser::T_SUM - 256))
      | (1ULL << (HqlsqlParser::T_SUMMARY - 256))
      | (1ULL << (HqlsqlParser::T_SYS_REFCURSOR - 256))
      | (1ULL << (HqlsqlParser::T_TABLE - 256))
      | (1ULL << (HqlsqlParser::T_TABLESPACE - 256))
      | (1ULL << (HqlsqlParser::T_TEMPORARY - 256))
      | (1ULL << (HqlsqlParser::T_TERMINATED - 256))
      | (1ULL << (HqlsqlParser::T_TEXTIMAGE_ON - 256))
      | (1ULL << (HqlsqlParser::T_THEN - 256))
      | (1ULL << (HqlsqlParser::T_TIMESTAMP - 256))
      | (1ULL << (HqlsqlParser::T_TITLE - 256))
      | (1ULL << (HqlsqlParser::T_TO - 256))
      | (1ULL << (HqlsqlParser::T_TOP - 256))
      | (1ULL << (HqlsqlParser::T_TRANSACTION - 256))
      | (1ULL << (HqlsqlParser::T_TRUE - 256))
      | (1ULL << (HqlsqlParser::T_TRUNCATE - 256))
      | (1ULL << (HqlsqlParser::T_TYPE - 256))
      | (1ULL << (HqlsqlParser::T_UNIQUE - 256))
      | (1ULL << (HqlsqlParser::T_UPDATE - 256))
      | (1ULL << (HqlsqlParser::T_UR - 256))
      | (1ULL << (HqlsqlParser::T_USE - 256))
      | (1ULL << (HqlsqlParser::T_USING - 256))
      | (1ULL << (HqlsqlParser::T_VALUE - 256))
      | (1ULL << (HqlsqlParser::T_VALUES - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (HqlsqlParser::T_VAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR2 - 320))
      | (1ULL << (HqlsqlParser::T_VARYING - 320))
      | (1ULL << (HqlsqlParser::T_VOLATILE - 320))
      | (1ULL << (HqlsqlParser::T_WHILE - 320))
      | (1ULL << (HqlsqlParser::T_WITH - 320))
      | (1ULL << (HqlsqlParser::T_WITHOUT - 320))
      | (1ULL << (HqlsqlParser::T_WORK - 320))
      | (1ULL << (HqlsqlParser::T_XACT_ABORT - 320))
      | (1ULL << (HqlsqlParser::T_XML - 320))
      | (1ULL << (HqlsqlParser::T_YES - 320))
      | (1ULL << (HqlsqlParser::T_ARRAY - 320))
      | (1ULL << (HqlsqlParser::T_STRUCT - 320))
      | (1ULL << (HqlsqlParser::T_SERDE - 320))
      | (1ULL << (HqlsqlParser::T_SEQUENCEFILE - 320))
      | (1ULL << (HqlsqlParser::T_TEXTFILE - 320))
      | (1ULL << (HqlsqlParser::T_RCFILE - 320))
      | (1ULL << (HqlsqlParser::T_ORC - 320))
      | (1ULL << (HqlsqlParser::T_PARQUET - 320))
      | (1ULL << (HqlsqlParser::T_AVRO - 320))
      | (1ULL << (HqlsqlParser::T_JSONFILE - 320))
      | (1ULL << (HqlsqlParser::T_INPUTFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_FILEFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_T - 320))
      | (1ULL << (HqlsqlParser::T_S - 320))
      | (1ULL << (HqlsqlParser::T_ACTIVITY_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_CUME_DIST - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_DATE - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_TIMESTAMP - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_USER - 320))
      | (1ULL << (HqlsqlParser::T_DENSE_RANK - 320))
      | (1ULL << (HqlsqlParser::T_FIRST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LAG - 320))
      | (1ULL << (HqlsqlParser::T_LAST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LEAD - 320))
      | (1ULL << (HqlsqlParser::T_MAX_PART_STRING - 320))
      | (1ULL << (HqlsqlParser::T_MIN_PART_STRING - 320))
      | (1ULL << (HqlsqlParser::T_MAX_PART_INT - 320))
      | (1ULL << (HqlsqlParser::T_MIN_PART_INT - 320))
      | (1ULL << (HqlsqlParser::T_MAX_PART_DATE - 320))
      | (1ULL << (HqlsqlParser::T_MIN_PART_DATE - 320))
      | (1ULL << (HqlsqlParser::T_PART_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_PART_LOC - 320))
      | (1ULL << (HqlsqlParser::T_RANK - 320))
      | (1ULL << (HqlsqlParser::T_ROW_NUMBER - 320))
      | (1ULL << (HqlsqlParser::T_STDEV - 320))
      | (1ULL << (HqlsqlParser::T_STD - 320))
      | (1ULL << (HqlsqlParser::T_SYSDATE - 320))
      | (1ULL << (HqlsqlParser::T_VARIANCE - 320))
      | (1ULL << (HqlsqlParser::T_USER - 320))
      | (1ULL << (HqlsqlParser::T_PURGE - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 384)) & ((1ULL << (HqlsqlParser::T_BUCKETS - 384))
      | (1ULL << (HqlsqlParser::T_SKEWED - 384))
      | (1ULL << (HqlsqlParser::T_DIRECTORIES - 384))
      | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 384))
      | (1ULL << (HqlsqlParser::T_RENAME - 384))
      | (1ULL << (HqlsqlParser::T_SORTED - 384))
      | (1ULL << (HqlsqlParser::T_SORT - 384))
      | (1ULL << (HqlsqlParser::T_CHANGE - 384))
      | (1ULL << (HqlsqlParser::T_EXCHANGE - 384))
      | (1ULL << (HqlsqlParser::T_RECOVER - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONS - 384))
      | (1ULL << (HqlsqlParser::T_PROTECTION - 384))
      | (1ULL << (HqlsqlParser::T_ARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_UNARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_TOUCH - 384))
      | (1ULL << (HqlsqlParser::T_OFFLINE - 384))
      | (1ULL << (HqlsqlParser::T_NO_DROP - 384))
      | (1ULL << (HqlsqlParser::T_COMPACT - 384))
      | (1ULL << (HqlsqlParser::T_CONCATENATE - 384))
      | (1ULL << (HqlsqlParser::T_WAIT - 384))
      | (1ULL << (HqlsqlParser::T_COLUMNS - 384))
      | (1ULL << (HqlsqlParser::T_FIRST - 384))
      | (1ULL << (HqlsqlParser::T_LAST - 384))
      | (1ULL << (HqlsqlParser::T_NULLS - 384))
      | (1ULL << (HqlsqlParser::T_AFTER - 384))
      | (1ULL << (HqlsqlParser::T_MATERIALIZED - 384))
      | (1ULL << (HqlsqlParser::T_REWRITE - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONED - 384))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 384))
      | (1ULL << (HqlsqlParser::T_MACRO - 384))
      | (1ULL << (HqlsqlParser::T_SHOW - 384))
      | (1ULL << (HqlsqlParser::T_EXTENDED - 384))
      | (1ULL << (HqlsqlParser::T_FORMATTED - 384))
      | (1ULL << (HqlsqlParser::T_SEMI - 384))
      | (1ULL << (HqlsqlParser::T_CROSS - 384))
      | (1ULL << (HqlsqlParser::T_LATERAL - 384))
      | (1ULL << (HqlsqlParser::T_RELOAD - 384))
      | (1ULL << (HqlsqlParser::T_LOAD - 384))
      | (1ULL << (HqlsqlParser::T_INPATH - 384))
      | (1ULL << (HqlsqlParser::T_PRINCIPALS - 384))
      | (1ULL << (HqlsqlParser::T_COMPACTIONS - 384))
      | (1ULL << (HqlsqlParser::T_CONF - 384))
      | (1ULL << (HqlsqlParser::T_ADMIN - 384))
      | (1ULL << (HqlsqlParser::T_OPTION - 384))
      | (1ULL << (HqlsqlParser::T_PRIVILEGES - 384))
      | (1ULL << (HqlsqlParser::T_LOCK - 384))
      | (1ULL << (HqlsqlParser::T_SHOW_DATABASE - 384))
      | (1ULL << (HqlsqlParser::T_COMPUTE - 384))
      | (1ULL << (HqlsqlParser::T_CACHE - 384))
      | (1ULL << (HqlsqlParser::T_METADATA - 384))
      | (1ULL << (HqlsqlParser::T_NOSCAN - 384))
      | (1ULL << (HqlsqlParser::T_UNIONTYPE - 384))
      | (1ULL << (HqlsqlParser::T_ANALYZE - 384))
      | (1ULL << (HqlsqlParser::T_EXPLAIN - 384))
      | (1ULL << (HqlsqlParser::T_CBO - 384))
      | (1ULL << (HqlsqlParser::T_AST - 384))
      | (1ULL << (HqlsqlParser::T_DEPENDENCY - 384))
      | (1ULL << (HqlsqlParser::T_AUTHORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_VECTORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_COST - 384))
      | (1ULL << (HqlsqlParser::T_JOINCOST - 384))
      | (1ULL << (HqlsqlParser::T_OPERATOR - 384))
      | (1ULL << (HqlsqlParser::T_EXPRESSION - 384))
      | (1ULL << (HqlsqlParser::T_DETAIL - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 448)) & ((1ULL << (HqlsqlParser::T_UNBOUNDED - 448))
      | (1ULL << (HqlsqlParser::T_PRECEDING - 448))
      | (1ULL << (HqlsqlParser::T_FOLLOWING - 448))
      | (1ULL << (HqlsqlParser::T_RANGE - 448))
      | (1ULL << (HqlsqlParser::T_YEAR - 448))
      | (1ULL << (HqlsqlParser::T_MONTH - 448))
      | (1ULL << (HqlsqlParser::T_MINUTE - 448))
      | (1ULL << (HqlsqlParser::T_TIME - 448))
      | (1ULL << (HqlsqlParser::T_ZONE - 448))
      | (1ULL << (HqlsqlParser::T_ADD_SIGN - 448))
      | (1ULL << (HqlsqlParser::T_MUL - 448))
      | (1ULL << (HqlsqlParser::T_OPEN_P - 448))
      | (1ULL << (HqlsqlParser::T_SUB - 448))
      | (1ULL << (HqlsqlParser::T_EXCLAMATION - 448))
      | (1ULL << (HqlsqlParser::L_ID - 448))
      | (1ULL << (HqlsqlParser::L_S_STRING - 448))
      | (1ULL << (HqlsqlParser::L_D_STRING - 448))
      | (1ULL << (HqlsqlParser::L_INT - 448))
      | (1ULL << (HqlsqlParser::L_DEC - 448)))) != 0)) {
      setState(4598);
      expr_func_params();
    }
    setState(4601);
    match(HqlsqlParser::T_CLOSE_P);
    setState(4603);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 578, _ctx)) {
    case 1: {
      setState(4602);
      expr_func_over_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_func_paramsContext ------------------------------------------------------------------

HqlsqlParser::Expr_func_paramsContext::Expr_func_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<HqlsqlParser::Func_paramContext *> HqlsqlParser::Expr_func_paramsContext::func_param() {
  return getRuleContexts<HqlsqlParser::Func_paramContext>();
}

HqlsqlParser::Func_paramContext* HqlsqlParser::Expr_func_paramsContext::func_param(size_t i) {
  return getRuleContext<HqlsqlParser::Func_paramContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::Expr_func_paramsContext::T_COMMA() {
  return getTokens(HqlsqlParser::T_COMMA);
}

tree::TerminalNode* HqlsqlParser::Expr_func_paramsContext::T_COMMA(size_t i) {
  return getToken(HqlsqlParser::T_COMMA, i);
}


size_t HqlsqlParser::Expr_func_paramsContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_func_params;
}

void HqlsqlParser::Expr_func_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_func_params(this);
}

void HqlsqlParser::Expr_func_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_func_params(this);
}


antlrcpp::Any HqlsqlParser::Expr_func_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_func_params(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_func_paramsContext* HqlsqlParser::expr_func_params() {
  Expr_func_paramsContext *_localctx = _tracker.createInstance<Expr_func_paramsContext>(_ctx, getState());
  enterRule(_localctx, 620, HqlsqlParser::RuleExpr_func_params);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4605);
    func_param();
    setState(4610);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 579, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4606);
        match(HqlsqlParser::T_COMMA);
        setState(4607);
        func_param(); 
      }
      setState(4612);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 579, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_paramContext ------------------------------------------------------------------

HqlsqlParser::Func_paramContext::Func_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::ExprContext* HqlsqlParser::Func_paramContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Func_paramContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

tree::TerminalNode* HqlsqlParser::Func_paramContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}

tree::TerminalNode* HqlsqlParser::Func_paramContext::T_GREATER() {
  return getToken(HqlsqlParser::T_GREATER, 0);
}


size_t HqlsqlParser::Func_paramContext::getRuleIndex() const {
  return HqlsqlParser::RuleFunc_param;
}

void HqlsqlParser::Func_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_param(this);
}

void HqlsqlParser::Func_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_param(this);
}


antlrcpp::Any HqlsqlParser::Func_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFunc_param(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Func_paramContext* HqlsqlParser::func_param() {
  Func_paramContext *_localctx = _tracker.createInstance<Func_paramContext>(_ctx, getState());
  enterRule(_localctx, 622, HqlsqlParser::RuleFunc_param);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4618);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 581, _ctx)) {
    case 1: {
      setState(4613);
      ident();
      setState(4614);
      match(HqlsqlParser::T_EQUAL);
      setState(4616);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_GREATER) {
        setState(4615);
        match(HqlsqlParser::T_GREATER);
      }
      break;
    }

    }
    setState(4622);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTERVAL:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NULL:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_MAX_PART_STRING:
      case HqlsqlParser::T_MIN_PART_STRING:
      case HqlsqlParser::T_MAX_PART_INT:
      case HqlsqlParser::T_MIN_PART_INT:
      case HqlsqlParser::T_MAX_PART_DATE:
      case HqlsqlParser::T_MIN_PART_DATE:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE:
      case HqlsqlParser::T_ADD_SIGN:
      case HqlsqlParser::T_OPEN_P:
      case HqlsqlParser::T_SUB:
      case HqlsqlParser::T_EXCLAMATION:
      case HqlsqlParser::L_ID:
      case HqlsqlParser::L_S_STRING:
      case HqlsqlParser::L_D_STRING:
      case HqlsqlParser::L_INT:
      case HqlsqlParser::L_DEC: {
        setState(4620);
        expr(0);
        break;
      }

      case HqlsqlParser::T_MUL: {
        setState(4621);
        match(HqlsqlParser::T_MUL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_selectContext ------------------------------------------------------------------

HqlsqlParser::Expr_selectContext::Expr_selectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::Select_stmtContext* HqlsqlParser::Expr_selectContext::select_stmt() {
  return getRuleContext<HqlsqlParser::Select_stmtContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_selectContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Expr_selectContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_select;
}

void HqlsqlParser::Expr_selectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_select(this);
}

void HqlsqlParser::Expr_selectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_select(this);
}


antlrcpp::Any HqlsqlParser::Expr_selectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_select(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_selectContext* HqlsqlParser::expr_select() {
  Expr_selectContext *_localctx = _tracker.createInstance<Expr_selectContext>(_ctx, getState());
  enterRule(_localctx, 624, HqlsqlParser::RuleExpr_select);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4626);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 583, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4624);
      select_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4625);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_fileContext ------------------------------------------------------------------

HqlsqlParser::Expr_fileContext::Expr_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::File_nameContext* HqlsqlParser::Expr_fileContext::file_name() {
  return getRuleContext<HqlsqlParser::File_nameContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Expr_fileContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Expr_fileContext::getRuleIndex() const {
  return HqlsqlParser::RuleExpr_file;
}

void HqlsqlParser::Expr_fileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_file(this);
}

void HqlsqlParser::Expr_fileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_file(this);
}


antlrcpp::Any HqlsqlParser::Expr_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitExpr_file(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Expr_fileContext* HqlsqlParser::expr_file() {
  Expr_fileContext *_localctx = _tracker.createInstance<Expr_fileContext>(_ctx, getState());
  enterRule(_localctx, 626, HqlsqlParser::RuleExpr_file);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4630);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 584, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4628);
      file_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4629);
      expr(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HiveContext ------------------------------------------------------------------

HqlsqlParser::HiveContext::HiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::HiveContext::T_HIVE() {
  return getToken(HqlsqlParser::T_HIVE, 0);
}

std::vector<HqlsqlParser::Hive_itemContext *> HqlsqlParser::HiveContext::hive_item() {
  return getRuleContexts<HqlsqlParser::Hive_itemContext>();
}

HqlsqlParser::Hive_itemContext* HqlsqlParser::HiveContext::hive_item(size_t i) {
  return getRuleContext<HqlsqlParser::Hive_itemContext>(i);
}


size_t HqlsqlParser::HiveContext::getRuleIndex() const {
  return HqlsqlParser::RuleHive;
}

void HqlsqlParser::HiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHive(this);
}

void HqlsqlParser::HiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHive(this);
}


antlrcpp::Any HqlsqlParser::HiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitHive(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::HiveContext* HqlsqlParser::hive() {
  HiveContext *_localctx = _tracker.createInstance<HiveContext>(_ctx, getState());
  enterRule(_localctx, 628, HqlsqlParser::RuleHive);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4632);
    match(HqlsqlParser::T_HIVE);
    setState(4636);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 585, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4633);
        hive_item(); 
      }
      setState(4638);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 585, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Hive_itemContext ------------------------------------------------------------------

HqlsqlParser::Hive_itemContext::Hive_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Hive_itemContext::T_SUB() {
  return getToken(HqlsqlParser::T_SUB, 0);
}

HqlsqlParser::IdentContext* HqlsqlParser::Hive_itemContext::ident() {
  return getRuleContext<HqlsqlParser::IdentContext>(0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Hive_itemContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}

tree::TerminalNode* HqlsqlParser::Hive_itemContext::L_ID() {
  return getToken(HqlsqlParser::L_ID, 0);
}

tree::TerminalNode* HqlsqlParser::Hive_itemContext::T_EQUAL() {
  return getToken(HqlsqlParser::T_EQUAL, 0);
}


size_t HqlsqlParser::Hive_itemContext::getRuleIndex() const {
  return HqlsqlParser::RuleHive_item;
}

void HqlsqlParser::Hive_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHive_item(this);
}

void HqlsqlParser::Hive_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHive_item(this);
}


antlrcpp::Any HqlsqlParser::Hive_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitHive_item(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Hive_itemContext* HqlsqlParser::hive_item() {
  Hive_itemContext *_localctx = _tracker.createInstance<Hive_itemContext>(_ctx, getState());
  enterRule(_localctx, 630, HqlsqlParser::RuleHive_item);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4651);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 586, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4639);
      match(HqlsqlParser::T_SUB);
      setState(4640);
      ident();
      setState(4641);
      expr(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4643);
      match(HqlsqlParser::T_SUB);
      setState(4644);
      ident();
      setState(4645);
      match(HqlsqlParser::L_ID);
      setState(4646);
      match(HqlsqlParser::T_EQUAL);
      setState(4647);
      expr(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4649);
      match(HqlsqlParser::T_SUB);
      setState(4650);
      ident();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HostContext ------------------------------------------------------------------

HqlsqlParser::HostContext::HostContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::HostContext::T_EXCLAMATION() {
  return getToken(HqlsqlParser::T_EXCLAMATION, 0);
}

HqlsqlParser::Host_cmdContext* HqlsqlParser::HostContext::host_cmd() {
  return getRuleContext<HqlsqlParser::Host_cmdContext>(0);
}

tree::TerminalNode* HqlsqlParser::HostContext::T_SEMICOLON() {
  return getToken(HqlsqlParser::T_SEMICOLON, 0);
}

HqlsqlParser::Host_stmtContext* HqlsqlParser::HostContext::host_stmt() {
  return getRuleContext<HqlsqlParser::Host_stmtContext>(0);
}


size_t HqlsqlParser::HostContext::getRuleIndex() const {
  return HqlsqlParser::RuleHost;
}

void HqlsqlParser::HostContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHost(this);
}

void HqlsqlParser::HostContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHost(this);
}


antlrcpp::Any HqlsqlParser::HostContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitHost(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::HostContext* HqlsqlParser::host() {
  HostContext *_localctx = _tracker.createInstance<HostContext>(_ctx, getState());
  enterRule(_localctx, 632, HqlsqlParser::RuleHost);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4658);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::T_EXCLAMATION: {
        enterOuterAlt(_localctx, 1);
        setState(4653);
        match(HqlsqlParser::T_EXCLAMATION);
        setState(4654);
        host_cmd();
        setState(4655);
        match(HqlsqlParser::T_SEMICOLON);
        break;
      }

      case HqlsqlParser::T_HOST: {
        enterOuterAlt(_localctx, 2);
        setState(4657);
        host_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Host_cmdContext ------------------------------------------------------------------

HqlsqlParser::Host_cmdContext::Host_cmdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HqlsqlParser::Host_cmdContext::getRuleIndex() const {
  return HqlsqlParser::RuleHost_cmd;
}

void HqlsqlParser::Host_cmdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHost_cmd(this);
}

void HqlsqlParser::Host_cmdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHost_cmd(this);
}


antlrcpp::Any HqlsqlParser::Host_cmdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitHost_cmd(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Host_cmdContext* HqlsqlParser::host_cmd() {
  Host_cmdContext *_localctx = _tracker.createInstance<Host_cmdContext>(_ctx, getState());
  enterRule(_localctx, 634, HqlsqlParser::RuleHost_cmd);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4663);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
    while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1 + 1) {
        setState(4660);
        matchWildcard(); 
      }
      setState(4665);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Host_stmtContext ------------------------------------------------------------------

HqlsqlParser::Host_stmtContext::Host_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Host_stmtContext::T_HOST() {
  return getToken(HqlsqlParser::T_HOST, 0);
}

HqlsqlParser::ExprContext* HqlsqlParser::Host_stmtContext::expr() {
  return getRuleContext<HqlsqlParser::ExprContext>(0);
}


size_t HqlsqlParser::Host_stmtContext::getRuleIndex() const {
  return HqlsqlParser::RuleHost_stmt;
}

void HqlsqlParser::Host_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHost_stmt(this);
}

void HqlsqlParser::Host_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHost_stmt(this);
}


antlrcpp::Any HqlsqlParser::Host_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitHost_stmt(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Host_stmtContext* HqlsqlParser::host_stmt() {
  Host_stmtContext *_localctx = _tracker.createInstance<Host_stmtContext>(_ctx, getState());
  enterRule(_localctx, 636, HqlsqlParser::RuleHost_stmt);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4666);
    match(HqlsqlParser::T_HOST);
    setState(4667);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_nameContext ------------------------------------------------------------------

HqlsqlParser::File_nameContext::File_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

HqlsqlParser::File_patternContext* HqlsqlParser::File_nameContext::file_pattern() {
  return getRuleContext<HqlsqlParser::File_patternContext>(0);
}

std::vector<HqlsqlParser::IdentContext *> HqlsqlParser::File_nameContext::ident() {
  return getRuleContexts<HqlsqlParser::IdentContext>();
}

HqlsqlParser::IdentContext* HqlsqlParser::File_nameContext::ident(size_t i) {
  return getRuleContext<HqlsqlParser::IdentContext>(i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::File_nameContext::T_DIV_SIGN() {
  return getTokens(HqlsqlParser::T_DIV_SIGN);
}

tree::TerminalNode* HqlsqlParser::File_nameContext::T_DIV_SIGN(size_t i) {
  return getToken(HqlsqlParser::T_DIV_SIGN, i);
}

tree::TerminalNode* HqlsqlParser::File_nameContext::T_PERIOD() {
  return getToken(HqlsqlParser::T_PERIOD, 0);
}


size_t HqlsqlParser::File_nameContext::getRuleIndex() const {
  return HqlsqlParser::RuleFile_name;
}

void HqlsqlParser::File_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_name(this);
}

void HqlsqlParser::File_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_name(this);
}


antlrcpp::Any HqlsqlParser::File_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFile_name(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::File_nameContext* HqlsqlParser::file_name() {
  File_nameContext *_localctx = _tracker.createInstance<File_nameContext>(_ctx, getState());
  enterRule(_localctx, 638, HqlsqlParser::RuleFile_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(4683);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 591, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4669);
      file_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4673);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case HqlsqlParser::T_DIV_SIGN: {
          setState(4670);
          match(HqlsqlParser::T_DIV_SIGN);
          break;
        }

        case HqlsqlParser::T_PERIOD: {
          setState(4671);
          match(HqlsqlParser::T_PERIOD);
          setState(4672);
          match(HqlsqlParser::T_DIV_SIGN);
          break;
        }

        case HqlsqlParser::T_ACTION:
        case HqlsqlParser::T_ADD:
        case HqlsqlParser::T_ALL:
        case HqlsqlParser::T_ALLOCATE:
        case HqlsqlParser::T_ALTER:
        case HqlsqlParser::T_AND:
        case HqlsqlParser::T_ANSI_NULLS:
        case HqlsqlParser::T_ANSI_PADDING:
        case HqlsqlParser::T_AS:
        case HqlsqlParser::T_ASC:
        case HqlsqlParser::T_ASSOCIATE:
        case HqlsqlParser::T_AT:
        case HqlsqlParser::T_AUTO_INCREMENT:
        case HqlsqlParser::T_AVG:
        case HqlsqlParser::T_BATCHSIZE:
        case HqlsqlParser::T_BEGIN:
        case HqlsqlParser::T_BETWEEN:
        case HqlsqlParser::T_BIGINT:
        case HqlsqlParser::T_BINARY_DOUBLE:
        case HqlsqlParser::T_BINARY_FLOAT:
        case HqlsqlParser::T_BIT:
        case HqlsqlParser::T_BODY:
        case HqlsqlParser::T_BREAK:
        case HqlsqlParser::T_BY:
        case HqlsqlParser::T_BYTE:
        case HqlsqlParser::T_CALL:
        case HqlsqlParser::T_CALLER:
        case HqlsqlParser::T_CASCADE:
        case HqlsqlParser::T_CASE:
        case HqlsqlParser::T_CASESPECIFIC:
        case HqlsqlParser::T_CAST:
        case HqlsqlParser::T_CHAR:
        case HqlsqlParser::T_CHARACTER:
        case HqlsqlParser::T_CHARSET:
        case HqlsqlParser::T_CLIENT:
        case HqlsqlParser::T_CLOSE:
        case HqlsqlParser::T_CLUSTERED:
        case HqlsqlParser::T_CMP:
        case HqlsqlParser::T_COLLECT:
        case HqlsqlParser::T_COLLECTION:
        case HqlsqlParser::T_COLUMN:
        case HqlsqlParser::T_COMMENT:
        case HqlsqlParser::T_CONSTANT:
        case HqlsqlParser::T_COMMIT:
        case HqlsqlParser::T_COMPRESS:
        case HqlsqlParser::T_CONCAT:
        case HqlsqlParser::T_CONDITION:
        case HqlsqlParser::T_CONSTRAINT:
        case HqlsqlParser::T_CONTINUE:
        case HqlsqlParser::T_COPY:
        case HqlsqlParser::T_COUNT:
        case HqlsqlParser::T_COUNT_BIG:
        case HqlsqlParser::T_CREATE:
        case HqlsqlParser::T_CREATION:
        case HqlsqlParser::T_CREATOR:
        case HqlsqlParser::T_CS:
        case HqlsqlParser::T_CURRENT:
        case HqlsqlParser::T_CURRENT_SCHEMA:
        case HqlsqlParser::T_CURSOR:
        case HqlsqlParser::T_DATABASE:
        case HqlsqlParser::T_DATA:
        case HqlsqlParser::T_DATE:
        case HqlsqlParser::T_DATETIME:
        case HqlsqlParser::T_DAY:
        case HqlsqlParser::T_DAYS:
        case HqlsqlParser::T_DEC:
        case HqlsqlParser::T_DECIMAL:
        case HqlsqlParser::T_DECLARE:
        case HqlsqlParser::T_DEFAULT:
        case HqlsqlParser::T_DEFERRED:
        case HqlsqlParser::T_DEFINED:
        case HqlsqlParser::T_DEFINER:
        case HqlsqlParser::T_DEFINITION:
        case HqlsqlParser::T_DELETE:
        case HqlsqlParser::T_DELIMITED:
        case HqlsqlParser::T_DELIMITER:
        case HqlsqlParser::T_DESC:
        case HqlsqlParser::T_DESCRIBE:
        case HqlsqlParser::T_DIAGNOSTICS:
        case HqlsqlParser::T_DIR:
        case HqlsqlParser::T_DIRECTORY:
        case HqlsqlParser::T_DISTINCT:
        case HqlsqlParser::T_DISTRIBUTE:
        case HqlsqlParser::T_DO:
        case HqlsqlParser::T_DOUBLE:
        case HqlsqlParser::T_DROP:
        case HqlsqlParser::T_DYNAMIC:
        case HqlsqlParser::T_ENABLE:
        case HqlsqlParser::T_ENGINE:
        case HqlsqlParser::T_ESCAPED:
        case HqlsqlParser::T_EXCEPT:
        case HqlsqlParser::T_EXEC:
        case HqlsqlParser::T_EXECUTE:
        case HqlsqlParser::T_EXCEPTION:
        case HqlsqlParser::T_EXCLUSIVE:
        case HqlsqlParser::T_EXISTS:
        case HqlsqlParser::T_EXIT:
        case HqlsqlParser::T_FALLBACK:
        case HqlsqlParser::T_FALSE:
        case HqlsqlParser::T_FETCH:
        case HqlsqlParser::T_FIELDS:
        case HqlsqlParser::T_FILE:
        case HqlsqlParser::T_FILES:
        case HqlsqlParser::T_FLOAT:
        case HqlsqlParser::T_FOR:
        case HqlsqlParser::T_FOREIGN:
        case HqlsqlParser::T_FORMAT:
        case HqlsqlParser::T_FOUND:
        case HqlsqlParser::T_FULL:
        case HqlsqlParser::T_FUNCTION:
        case HqlsqlParser::T_GET:
        case HqlsqlParser::T_GLOBAL:
        case HqlsqlParser::T_GO:
        case HqlsqlParser::T_GRANT:
        case HqlsqlParser::T_ROLE:
        case HqlsqlParser::T_HANDLER:
        case HqlsqlParser::T_HASH:
        case HqlsqlParser::T_HAVING:
        case HqlsqlParser::T_HDFS:
        case HqlsqlParser::T_HIVE:
        case HqlsqlParser::T_HOST:
        case HqlsqlParser::T_IDENTITY:
        case HqlsqlParser::T_IF:
        case HqlsqlParser::T_IGNORE:
        case HqlsqlParser::T_IMMEDIATE:
        case HqlsqlParser::T_IN:
        case HqlsqlParser::T_INCLUDE:
        case HqlsqlParser::T_INDEX:
        case HqlsqlParser::T_INITRANS:
        case HqlsqlParser::T_INNER:
        case HqlsqlParser::T_INOUT:
        case HqlsqlParser::T_INSERT:
        case HqlsqlParser::T_INT:
        case HqlsqlParser::T_INT2:
        case HqlsqlParser::T_INT4:
        case HqlsqlParser::T_INT8:
        case HqlsqlParser::T_INTEGER:
        case HqlsqlParser::T_INTERSECT:
        case HqlsqlParser::T_INTO:
        case HqlsqlParser::T_INVOKER:
        case HqlsqlParser::T_IS:
        case HqlsqlParser::T_ISOPEN:
        case HqlsqlParser::T_ITEMS:
        case HqlsqlParser::T_JOIN:
        case HqlsqlParser::T_KEEP:
        case HqlsqlParser::T_KEY:
        case HqlsqlParser::T_KEYS:
        case HqlsqlParser::T_LANGUAGE:
        case HqlsqlParser::T_LEAVE:
        case HqlsqlParser::T_LEFT:
        case HqlsqlParser::T_LIKE:
        case HqlsqlParser::T_LINES:
        case HqlsqlParser::T_LOCAL:
        case HqlsqlParser::T_LOCATION:
        case HqlsqlParser::T_LOCATOR:
        case HqlsqlParser::T_LOCATORS:
        case HqlsqlParser::T_LOCKS:
        case HqlsqlParser::T_LOG:
        case HqlsqlParser::T_LOGGED:
        case HqlsqlParser::T_LOGGING:
        case HqlsqlParser::T_LOOP:
        case HqlsqlParser::T_MAP:
        case HqlsqlParser::T_MATCHED:
        case HqlsqlParser::T_MAX:
        case HqlsqlParser::T_MAXTRANS:
        case HqlsqlParser::T_MERGE:
        case HqlsqlParser::T_MESSAGE_TEXT:
        case HqlsqlParser::T_MICROSECOND:
        case HqlsqlParser::T_MICROSECONDS:
        case HqlsqlParser::T_MIN:
        case HqlsqlParser::T_MULTISET:
        case HqlsqlParser::T_NCHAR:
        case HqlsqlParser::T_NEW:
        case HqlsqlParser::T_NVARCHAR:
        case HqlsqlParser::T_NO:
        case HqlsqlParser::T_NOCOUNT:
        case HqlsqlParser::T_NOCOMPRESS:
        case HqlsqlParser::T_NOLOGGING:
        case HqlsqlParser::T_NONE:
        case HqlsqlParser::T_NOT:
        case HqlsqlParser::T_NOTFOUND:
        case HqlsqlParser::T_NUMERIC:
        case HqlsqlParser::T_NUMBER:
        case HqlsqlParser::T_OBJECT:
        case HqlsqlParser::T_OFF:
        case HqlsqlParser::T_ON:
        case HqlsqlParser::T_ONLY:
        case HqlsqlParser::T_OPEN:
        case HqlsqlParser::T_OR:
        case HqlsqlParser::T_OUT:
        case HqlsqlParser::T_OUTER:
        case HqlsqlParser::T_OVERWRITE:
        case HqlsqlParser::T_OWNER:
        case HqlsqlParser::T_PACKAGE:
        case HqlsqlParser::T_PARTITION:
        case HqlsqlParser::T_PCTFREE:
        case HqlsqlParser::T_PCTUSED:
        case HqlsqlParser::T_PRECISION:
        case HqlsqlParser::T_PRESERVE:
        case HqlsqlParser::T_PRIMARY:
        case HqlsqlParser::T_PRINT:
        case HqlsqlParser::T_PROC:
        case HqlsqlParser::T_PROCEDURE:
        case HqlsqlParser::T_QUALIFY:
        case HqlsqlParser::T_QUERY_BAND:
        case HqlsqlParser::T_QUIT:
        case HqlsqlParser::T_QUOTED_IDENTIFIER:
        case HqlsqlParser::T_RAISE:
        case HqlsqlParser::T_REAL:
        case HqlsqlParser::T_REFERENCES:
        case HqlsqlParser::T_REGEXP:
        case HqlsqlParser::T_REPLACE:
        case HqlsqlParser::T_RESIGNAL:
        case HqlsqlParser::T_RESTRICT:
        case HqlsqlParser::T_RESULT:
        case HqlsqlParser::T_RESULT_SET_LOCATOR:
        case HqlsqlParser::T_RETURN:
        case HqlsqlParser::T_RETURNS:
        case HqlsqlParser::T_REVERSE:
        case HqlsqlParser::T_RIGHT:
        case HqlsqlParser::T_RLIKE:
        case HqlsqlParser::T_ROLLBACK:
        case HqlsqlParser::T_ROW:
        case HqlsqlParser::T_ROWS:
        case HqlsqlParser::T_ROW_COUNT:
        case HqlsqlParser::T_RR:
        case HqlsqlParser::T_RS:
        case HqlsqlParser::T_PWD:
        case HqlsqlParser::T_TRIM:
        case HqlsqlParser::T_SCHEMA:
        case HqlsqlParser::T_SECOND:
        case HqlsqlParser::T_SECONDS:
        case HqlsqlParser::T_SECURITY:
        case HqlsqlParser::T_SEGMENT:
        case HqlsqlParser::T_SELECT:
        case HqlsqlParser::T_SESSION:
        case HqlsqlParser::T_SESSIONS:
        case HqlsqlParser::T_SETS:
        case HqlsqlParser::T_SHARE:
        case HqlsqlParser::T_SIGNAL:
        case HqlsqlParser::T_SIMPLE_DOUBLE:
        case HqlsqlParser::T_SIMPLE_FLOAT:
        case HqlsqlParser::T_SMALLDATETIME:
        case HqlsqlParser::T_SMALLINT:
        case HqlsqlParser::T_SQL:
        case HqlsqlParser::T_SQLEXCEPTION:
        case HqlsqlParser::T_SQLINSERT:
        case HqlsqlParser::T_SQLSTATE:
        case HqlsqlParser::T_SQLWARNING:
        case HqlsqlParser::T_STATS:
        case HqlsqlParser::T_STATISTICS:
        case HqlsqlParser::T_STEP:
        case HqlsqlParser::T_STORAGE:
        case HqlsqlParser::T_STORED:
        case HqlsqlParser::T_STRING:
        case HqlsqlParser::T_SUBDIR:
        case HqlsqlParser::T_SUBSTRING:
        case HqlsqlParser::T_SUM:
        case HqlsqlParser::T_SUMMARY:
        case HqlsqlParser::T_SYS_REFCURSOR:
        case HqlsqlParser::T_TABLE:
        case HqlsqlParser::T_TABLESPACE:
        case HqlsqlParser::T_TEMPORARY:
        case HqlsqlParser::T_TERMINATED:
        case HqlsqlParser::T_TEXTIMAGE_ON:
        case HqlsqlParser::T_THEN:
        case HqlsqlParser::T_TIMESTAMP:
        case HqlsqlParser::T_TITLE:
        case HqlsqlParser::T_TO:
        case HqlsqlParser::T_TOP:
        case HqlsqlParser::T_TRANSACTION:
        case HqlsqlParser::T_TRUE:
        case HqlsqlParser::T_TRUNCATE:
        case HqlsqlParser::T_TYPE:
        case HqlsqlParser::T_UNIQUE:
        case HqlsqlParser::T_UPDATE:
        case HqlsqlParser::T_UR:
        case HqlsqlParser::T_USE:
        case HqlsqlParser::T_USING:
        case HqlsqlParser::T_VALUE:
        case HqlsqlParser::T_VALUES:
        case HqlsqlParser::T_VAR:
        case HqlsqlParser::T_VARCHAR:
        case HqlsqlParser::T_VARCHAR2:
        case HqlsqlParser::T_VARYING:
        case HqlsqlParser::T_VOLATILE:
        case HqlsqlParser::T_WHILE:
        case HqlsqlParser::T_WITH:
        case HqlsqlParser::T_WITHOUT:
        case HqlsqlParser::T_WORK:
        case HqlsqlParser::T_XACT_ABORT:
        case HqlsqlParser::T_XML:
        case HqlsqlParser::T_YES:
        case HqlsqlParser::T_ARRAY:
        case HqlsqlParser::T_STRUCT:
        case HqlsqlParser::T_SERDE:
        case HqlsqlParser::T_SEQUENCEFILE:
        case HqlsqlParser::T_TEXTFILE:
        case HqlsqlParser::T_RCFILE:
        case HqlsqlParser::T_ORC:
        case HqlsqlParser::T_PARQUET:
        case HqlsqlParser::T_AVRO:
        case HqlsqlParser::T_JSONFILE:
        case HqlsqlParser::T_INPUTFORMAT:
        case HqlsqlParser::T_FILEFORMAT:
        case HqlsqlParser::T_T:
        case HqlsqlParser::T_S:
        case HqlsqlParser::T_ACTIVITY_COUNT:
        case HqlsqlParser::T_CUME_DIST:
        case HqlsqlParser::T_CURRENT_DATE:
        case HqlsqlParser::T_CURRENT_TIMESTAMP:
        case HqlsqlParser::T_CURRENT_USER:
        case HqlsqlParser::T_DENSE_RANK:
        case HqlsqlParser::T_FIRST_VALUE:
        case HqlsqlParser::T_LAG:
        case HqlsqlParser::T_LAST_VALUE:
        case HqlsqlParser::T_LEAD:
        case HqlsqlParser::T_PART_COUNT:
        case HqlsqlParser::T_PART_LOC:
        case HqlsqlParser::T_RANK:
        case HqlsqlParser::T_ROW_NUMBER:
        case HqlsqlParser::T_STDEV:
        case HqlsqlParser::T_STD:
        case HqlsqlParser::T_SYSDATE:
        case HqlsqlParser::T_VARIANCE:
        case HqlsqlParser::T_USER:
        case HqlsqlParser::T_PURGE:
        case HqlsqlParser::T_BUCKETS:
        case HqlsqlParser::T_SKEWED:
        case HqlsqlParser::T_DIRECTORIES:
        case HqlsqlParser::T_SERDEPROPERTIES:
        case HqlsqlParser::T_RENAME:
        case HqlsqlParser::T_SORTED:
        case HqlsqlParser::T_SORT:
        case HqlsqlParser::T_CHANGE:
        case HqlsqlParser::T_EXCHANGE:
        case HqlsqlParser::T_RECOVER:
        case HqlsqlParser::T_PARTITIONS:
        case HqlsqlParser::T_PROTECTION:
        case HqlsqlParser::T_ARCHIVE:
        case HqlsqlParser::T_UNARCHIVE:
        case HqlsqlParser::T_TOUCH:
        case HqlsqlParser::T_OFFLINE:
        case HqlsqlParser::T_NO_DROP:
        case HqlsqlParser::T_COMPACT:
        case HqlsqlParser::T_CONCATENATE:
        case HqlsqlParser::T_WAIT:
        case HqlsqlParser::T_COLUMNS:
        case HqlsqlParser::T_FIRST:
        case HqlsqlParser::T_LAST:
        case HqlsqlParser::T_NULLS:
        case HqlsqlParser::T_AFTER:
        case HqlsqlParser::T_MATERIALIZED:
        case HqlsqlParser::T_REWRITE:
        case HqlsqlParser::T_PARTITIONED:
        case HqlsqlParser::T_DISTRIBUTED:
        case HqlsqlParser::T_MACRO:
        case HqlsqlParser::T_SHOW:
        case HqlsqlParser::T_EXTENDED:
        case HqlsqlParser::T_FORMATTED:
        case HqlsqlParser::T_SEMI:
        case HqlsqlParser::T_CROSS:
        case HqlsqlParser::T_LATERAL:
        case HqlsqlParser::T_RELOAD:
        case HqlsqlParser::T_LOAD:
        case HqlsqlParser::T_INPATH:
        case HqlsqlParser::T_PRINCIPALS:
        case HqlsqlParser::T_COMPACTIONS:
        case HqlsqlParser::T_CONF:
        case HqlsqlParser::T_ADMIN:
        case HqlsqlParser::T_OPTION:
        case HqlsqlParser::T_PRIVILEGES:
        case HqlsqlParser::T_LOCK:
        case HqlsqlParser::T_SHOW_DATABASE:
        case HqlsqlParser::T_COMPUTE:
        case HqlsqlParser::T_CACHE:
        case HqlsqlParser::T_METADATA:
        case HqlsqlParser::T_NOSCAN:
        case HqlsqlParser::T_UNIONTYPE:
        case HqlsqlParser::T_ANALYZE:
        case HqlsqlParser::T_EXPLAIN:
        case HqlsqlParser::T_CBO:
        case HqlsqlParser::T_AST:
        case HqlsqlParser::T_DEPENDENCY:
        case HqlsqlParser::T_AUTHORIZATION:
        case HqlsqlParser::T_VECTORIZATION:
        case HqlsqlParser::T_COST:
        case HqlsqlParser::T_JOINCOST:
        case HqlsqlParser::T_OPERATOR:
        case HqlsqlParser::T_EXPRESSION:
        case HqlsqlParser::T_DETAIL:
        case HqlsqlParser::T_UNBOUNDED:
        case HqlsqlParser::T_PRECEDING:
        case HqlsqlParser::T_FOLLOWING:
        case HqlsqlParser::T_RANGE:
        case HqlsqlParser::T_YEAR:
        case HqlsqlParser::T_MONTH:
        case HqlsqlParser::T_MINUTE:
        case HqlsqlParser::T_TIME:
        case HqlsqlParser::T_ZONE:
        case HqlsqlParser::T_SUB:
        case HqlsqlParser::L_ID: {
          break;
        }

      default:
        break;
      }
      setState(4675);
      ident();
      setState(4680);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 590, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(4676);
          match(HqlsqlParser::T_DIV_SIGN);
          setState(4677);
          ident(); 
        }
        setState(4682);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 590, _ctx);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_patternContext ------------------------------------------------------------------

HqlsqlParser::File_patternContext::File_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::File_patternContext::L_ID() {
  return getTokens(HqlsqlParser::L_ID);
}

tree::TerminalNode* HqlsqlParser::File_patternContext::L_ID(size_t i) {
  return getToken(HqlsqlParser::L_ID, i);
}

std::vector<tree::TerminalNode *> HqlsqlParser::File_patternContext::L_ALPHA() {
  return getTokens(HqlsqlParser::L_ALPHA);
}

tree::TerminalNode* HqlsqlParser::File_patternContext::L_ALPHA(size_t i) {
  return getToken(HqlsqlParser::L_ALPHA, i);
}


size_t HqlsqlParser::File_patternContext::getRuleIndex() const {
  return HqlsqlParser::RuleFile_pattern;
}

void HqlsqlParser::File_patternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_pattern(this);
}

void HqlsqlParser::File_patternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_pattern(this);
}


antlrcpp::Any HqlsqlParser::File_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitFile_pattern(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::File_patternContext* HqlsqlParser::file_pattern() {
  File_patternContext *_localctx = _tracker.createInstance<File_patternContext>(_ctx, getState());
  enterRule(_localctx, 640, HqlsqlParser::RuleFile_pattern);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4694);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::L_ALPHA) {
      setState(4686); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(4685);
        match(HqlsqlParser::L_ALPHA);
        setState(4688); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == HqlsqlParser::L_ALPHA);
      setState(4690);
      match(HqlsqlParser::T_COLON);
      setState(4692);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == HqlsqlParser::T_SLASH_SIGN) {
        setState(4691);
        match(HqlsqlParser::T_SLASH_SIGN);
      }
    }
    setState(4696);
    match(HqlsqlParser::L_ID);
    setState(4701);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 595, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4697);
        match(HqlsqlParser::T_SLASH_SIGN);
        setState(4698);
        match(HqlsqlParser::L_ID); 
      }
      setState(4703);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 595, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Date_literalContext ------------------------------------------------------------------

HqlsqlParser::Date_literalContext::Date_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Date_literalContext::T_DATE() {
  return getToken(HqlsqlParser::T_DATE, 0);
}

HqlsqlParser::StringContext* HqlsqlParser::Date_literalContext::string() {
  return getRuleContext<HqlsqlParser::StringContext>(0);
}


size_t HqlsqlParser::Date_literalContext::getRuleIndex() const {
  return HqlsqlParser::RuleDate_literal;
}

void HqlsqlParser::Date_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDate_literal(this);
}

void HqlsqlParser::Date_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDate_literal(this);
}


antlrcpp::Any HqlsqlParser::Date_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDate_literal(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Date_literalContext* HqlsqlParser::date_literal() {
  Date_literalContext *_localctx = _tracker.createInstance<Date_literalContext>(_ctx, getState());
  enterRule(_localctx, 642, HqlsqlParser::RuleDate_literal);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4704);
    match(HqlsqlParser::T_DATE);
    setState(4705);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Timestamp_literalContext ------------------------------------------------------------------

HqlsqlParser::Timestamp_literalContext::Timestamp_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Timestamp_literalContext::T_TIMESTAMP() {
  return getToken(HqlsqlParser::T_TIMESTAMP, 0);
}

HqlsqlParser::StringContext* HqlsqlParser::Timestamp_literalContext::string() {
  return getRuleContext<HqlsqlParser::StringContext>(0);
}


size_t HqlsqlParser::Timestamp_literalContext::getRuleIndex() const {
  return HqlsqlParser::RuleTimestamp_literal;
}

void HqlsqlParser::Timestamp_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimestamp_literal(this);
}

void HqlsqlParser::Timestamp_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimestamp_literal(this);
}


antlrcpp::Any HqlsqlParser::Timestamp_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitTimestamp_literal(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Timestamp_literalContext* HqlsqlParser::timestamp_literal() {
  Timestamp_literalContext *_localctx = _tracker.createInstance<Timestamp_literalContext>(_ctx, getState());
  enterRule(_localctx, 644, HqlsqlParser::RuleTimestamp_literal);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4707);
    match(HqlsqlParser::T_TIMESTAMP);
    setState(4708);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentContext ------------------------------------------------------------------

HqlsqlParser::IdentContext::IdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> HqlsqlParser::IdentContext::L_ID() {
  return getTokens(HqlsqlParser::L_ID);
}

tree::TerminalNode* HqlsqlParser::IdentContext::L_ID(size_t i) {
  return getToken(HqlsqlParser::L_ID, i);
}

std::vector<HqlsqlParser::Non_reserved_wordsContext *> HqlsqlParser::IdentContext::non_reserved_words() {
  return getRuleContexts<HqlsqlParser::Non_reserved_wordsContext>();
}

HqlsqlParser::Non_reserved_wordsContext* HqlsqlParser::IdentContext::non_reserved_words(size_t i) {
  return getRuleContext<HqlsqlParser::Non_reserved_wordsContext>(i);
}

tree::TerminalNode* HqlsqlParser::IdentContext::T_SUB() {
  return getToken(HqlsqlParser::T_SUB, 0);
}

std::vector<tree::TerminalNode *> HqlsqlParser::IdentContext::T_PERIOD() {
  return getTokens(HqlsqlParser::T_PERIOD);
}

tree::TerminalNode* HqlsqlParser::IdentContext::T_PERIOD(size_t i) {
  return getToken(HqlsqlParser::T_PERIOD, i);
}


size_t HqlsqlParser::IdentContext::getRuleIndex() const {
  return HqlsqlParser::RuleIdent;
}

void HqlsqlParser::IdentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdent(this);
}

void HqlsqlParser::IdentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdent(this);
}


antlrcpp::Any HqlsqlParser::IdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitIdent(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::IdentContext* HqlsqlParser::ident() {
  IdentContext *_localctx = _tracker.createInstance<IdentContext>(_ctx, getState());
  enterRule(_localctx, 646, HqlsqlParser::RuleIdent);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4711);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_SUB) {
      setState(4710);
      match(HqlsqlParser::T_SUB);
    }
    setState(4715);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::L_ID: {
        setState(4713);
        match(HqlsqlParser::L_ID);
        break;
      }

      case HqlsqlParser::T_ACTION:
      case HqlsqlParser::T_ADD:
      case HqlsqlParser::T_ALL:
      case HqlsqlParser::T_ALLOCATE:
      case HqlsqlParser::T_ALTER:
      case HqlsqlParser::T_AND:
      case HqlsqlParser::T_ANSI_NULLS:
      case HqlsqlParser::T_ANSI_PADDING:
      case HqlsqlParser::T_AS:
      case HqlsqlParser::T_ASC:
      case HqlsqlParser::T_ASSOCIATE:
      case HqlsqlParser::T_AT:
      case HqlsqlParser::T_AUTO_INCREMENT:
      case HqlsqlParser::T_AVG:
      case HqlsqlParser::T_BATCHSIZE:
      case HqlsqlParser::T_BEGIN:
      case HqlsqlParser::T_BETWEEN:
      case HqlsqlParser::T_BIGINT:
      case HqlsqlParser::T_BINARY_DOUBLE:
      case HqlsqlParser::T_BINARY_FLOAT:
      case HqlsqlParser::T_BIT:
      case HqlsqlParser::T_BODY:
      case HqlsqlParser::T_BREAK:
      case HqlsqlParser::T_BY:
      case HqlsqlParser::T_BYTE:
      case HqlsqlParser::T_CALL:
      case HqlsqlParser::T_CALLER:
      case HqlsqlParser::T_CASCADE:
      case HqlsqlParser::T_CASE:
      case HqlsqlParser::T_CASESPECIFIC:
      case HqlsqlParser::T_CAST:
      case HqlsqlParser::T_CHAR:
      case HqlsqlParser::T_CHARACTER:
      case HqlsqlParser::T_CHARSET:
      case HqlsqlParser::T_CLIENT:
      case HqlsqlParser::T_CLOSE:
      case HqlsqlParser::T_CLUSTERED:
      case HqlsqlParser::T_CMP:
      case HqlsqlParser::T_COLLECT:
      case HqlsqlParser::T_COLLECTION:
      case HqlsqlParser::T_COLUMN:
      case HqlsqlParser::T_COMMENT:
      case HqlsqlParser::T_CONSTANT:
      case HqlsqlParser::T_COMMIT:
      case HqlsqlParser::T_COMPRESS:
      case HqlsqlParser::T_CONCAT:
      case HqlsqlParser::T_CONDITION:
      case HqlsqlParser::T_CONSTRAINT:
      case HqlsqlParser::T_CONTINUE:
      case HqlsqlParser::T_COPY:
      case HqlsqlParser::T_COUNT:
      case HqlsqlParser::T_COUNT_BIG:
      case HqlsqlParser::T_CREATE:
      case HqlsqlParser::T_CREATION:
      case HqlsqlParser::T_CREATOR:
      case HqlsqlParser::T_CS:
      case HqlsqlParser::T_CURRENT:
      case HqlsqlParser::T_CURRENT_SCHEMA:
      case HqlsqlParser::T_CURSOR:
      case HqlsqlParser::T_DATABASE:
      case HqlsqlParser::T_DATA:
      case HqlsqlParser::T_DATE:
      case HqlsqlParser::T_DATETIME:
      case HqlsqlParser::T_DAY:
      case HqlsqlParser::T_DAYS:
      case HqlsqlParser::T_DEC:
      case HqlsqlParser::T_DECIMAL:
      case HqlsqlParser::T_DECLARE:
      case HqlsqlParser::T_DEFAULT:
      case HqlsqlParser::T_DEFERRED:
      case HqlsqlParser::T_DEFINED:
      case HqlsqlParser::T_DEFINER:
      case HqlsqlParser::T_DEFINITION:
      case HqlsqlParser::T_DELETE:
      case HqlsqlParser::T_DELIMITED:
      case HqlsqlParser::T_DELIMITER:
      case HqlsqlParser::T_DESC:
      case HqlsqlParser::T_DESCRIBE:
      case HqlsqlParser::T_DIAGNOSTICS:
      case HqlsqlParser::T_DIR:
      case HqlsqlParser::T_DIRECTORY:
      case HqlsqlParser::T_DISTINCT:
      case HqlsqlParser::T_DISTRIBUTE:
      case HqlsqlParser::T_DO:
      case HqlsqlParser::T_DOUBLE:
      case HqlsqlParser::T_DROP:
      case HqlsqlParser::T_DYNAMIC:
      case HqlsqlParser::T_ENABLE:
      case HqlsqlParser::T_ENGINE:
      case HqlsqlParser::T_ESCAPED:
      case HqlsqlParser::T_EXCEPT:
      case HqlsqlParser::T_EXEC:
      case HqlsqlParser::T_EXECUTE:
      case HqlsqlParser::T_EXCEPTION:
      case HqlsqlParser::T_EXCLUSIVE:
      case HqlsqlParser::T_EXISTS:
      case HqlsqlParser::T_EXIT:
      case HqlsqlParser::T_FALLBACK:
      case HqlsqlParser::T_FALSE:
      case HqlsqlParser::T_FETCH:
      case HqlsqlParser::T_FIELDS:
      case HqlsqlParser::T_FILE:
      case HqlsqlParser::T_FILES:
      case HqlsqlParser::T_FLOAT:
      case HqlsqlParser::T_FOR:
      case HqlsqlParser::T_FOREIGN:
      case HqlsqlParser::T_FORMAT:
      case HqlsqlParser::T_FOUND:
      case HqlsqlParser::T_FULL:
      case HqlsqlParser::T_FUNCTION:
      case HqlsqlParser::T_GET:
      case HqlsqlParser::T_GLOBAL:
      case HqlsqlParser::T_GO:
      case HqlsqlParser::T_GRANT:
      case HqlsqlParser::T_ROLE:
      case HqlsqlParser::T_HANDLER:
      case HqlsqlParser::T_HASH:
      case HqlsqlParser::T_HAVING:
      case HqlsqlParser::T_HDFS:
      case HqlsqlParser::T_HIVE:
      case HqlsqlParser::T_HOST:
      case HqlsqlParser::T_IDENTITY:
      case HqlsqlParser::T_IF:
      case HqlsqlParser::T_IGNORE:
      case HqlsqlParser::T_IMMEDIATE:
      case HqlsqlParser::T_IN:
      case HqlsqlParser::T_INCLUDE:
      case HqlsqlParser::T_INDEX:
      case HqlsqlParser::T_INITRANS:
      case HqlsqlParser::T_INNER:
      case HqlsqlParser::T_INOUT:
      case HqlsqlParser::T_INSERT:
      case HqlsqlParser::T_INT:
      case HqlsqlParser::T_INT2:
      case HqlsqlParser::T_INT4:
      case HqlsqlParser::T_INT8:
      case HqlsqlParser::T_INTEGER:
      case HqlsqlParser::T_INTERSECT:
      case HqlsqlParser::T_INTO:
      case HqlsqlParser::T_INVOKER:
      case HqlsqlParser::T_IS:
      case HqlsqlParser::T_ISOPEN:
      case HqlsqlParser::T_ITEMS:
      case HqlsqlParser::T_JOIN:
      case HqlsqlParser::T_KEEP:
      case HqlsqlParser::T_KEY:
      case HqlsqlParser::T_KEYS:
      case HqlsqlParser::T_LANGUAGE:
      case HqlsqlParser::T_LEAVE:
      case HqlsqlParser::T_LEFT:
      case HqlsqlParser::T_LIKE:
      case HqlsqlParser::T_LINES:
      case HqlsqlParser::T_LOCAL:
      case HqlsqlParser::T_LOCATION:
      case HqlsqlParser::T_LOCATOR:
      case HqlsqlParser::T_LOCATORS:
      case HqlsqlParser::T_LOCKS:
      case HqlsqlParser::T_LOG:
      case HqlsqlParser::T_LOGGED:
      case HqlsqlParser::T_LOGGING:
      case HqlsqlParser::T_LOOP:
      case HqlsqlParser::T_MAP:
      case HqlsqlParser::T_MATCHED:
      case HqlsqlParser::T_MAX:
      case HqlsqlParser::T_MAXTRANS:
      case HqlsqlParser::T_MERGE:
      case HqlsqlParser::T_MESSAGE_TEXT:
      case HqlsqlParser::T_MICROSECOND:
      case HqlsqlParser::T_MICROSECONDS:
      case HqlsqlParser::T_MIN:
      case HqlsqlParser::T_MULTISET:
      case HqlsqlParser::T_NCHAR:
      case HqlsqlParser::T_NEW:
      case HqlsqlParser::T_NVARCHAR:
      case HqlsqlParser::T_NO:
      case HqlsqlParser::T_NOCOUNT:
      case HqlsqlParser::T_NOCOMPRESS:
      case HqlsqlParser::T_NOLOGGING:
      case HqlsqlParser::T_NONE:
      case HqlsqlParser::T_NOT:
      case HqlsqlParser::T_NOTFOUND:
      case HqlsqlParser::T_NUMERIC:
      case HqlsqlParser::T_NUMBER:
      case HqlsqlParser::T_OBJECT:
      case HqlsqlParser::T_OFF:
      case HqlsqlParser::T_ON:
      case HqlsqlParser::T_ONLY:
      case HqlsqlParser::T_OPEN:
      case HqlsqlParser::T_OR:
      case HqlsqlParser::T_OUT:
      case HqlsqlParser::T_OUTER:
      case HqlsqlParser::T_OVERWRITE:
      case HqlsqlParser::T_OWNER:
      case HqlsqlParser::T_PACKAGE:
      case HqlsqlParser::T_PARTITION:
      case HqlsqlParser::T_PCTFREE:
      case HqlsqlParser::T_PCTUSED:
      case HqlsqlParser::T_PRECISION:
      case HqlsqlParser::T_PRESERVE:
      case HqlsqlParser::T_PRIMARY:
      case HqlsqlParser::T_PRINT:
      case HqlsqlParser::T_PROC:
      case HqlsqlParser::T_PROCEDURE:
      case HqlsqlParser::T_QUALIFY:
      case HqlsqlParser::T_QUERY_BAND:
      case HqlsqlParser::T_QUIT:
      case HqlsqlParser::T_QUOTED_IDENTIFIER:
      case HqlsqlParser::T_RAISE:
      case HqlsqlParser::T_REAL:
      case HqlsqlParser::T_REFERENCES:
      case HqlsqlParser::T_REGEXP:
      case HqlsqlParser::T_REPLACE:
      case HqlsqlParser::T_RESIGNAL:
      case HqlsqlParser::T_RESTRICT:
      case HqlsqlParser::T_RESULT:
      case HqlsqlParser::T_RESULT_SET_LOCATOR:
      case HqlsqlParser::T_RETURN:
      case HqlsqlParser::T_RETURNS:
      case HqlsqlParser::T_REVERSE:
      case HqlsqlParser::T_RIGHT:
      case HqlsqlParser::T_RLIKE:
      case HqlsqlParser::T_ROLLBACK:
      case HqlsqlParser::T_ROW:
      case HqlsqlParser::T_ROWS:
      case HqlsqlParser::T_ROW_COUNT:
      case HqlsqlParser::T_RR:
      case HqlsqlParser::T_RS:
      case HqlsqlParser::T_PWD:
      case HqlsqlParser::T_TRIM:
      case HqlsqlParser::T_SCHEMA:
      case HqlsqlParser::T_SECOND:
      case HqlsqlParser::T_SECONDS:
      case HqlsqlParser::T_SECURITY:
      case HqlsqlParser::T_SEGMENT:
      case HqlsqlParser::T_SELECT:
      case HqlsqlParser::T_SESSION:
      case HqlsqlParser::T_SESSIONS:
      case HqlsqlParser::T_SETS:
      case HqlsqlParser::T_SHARE:
      case HqlsqlParser::T_SIGNAL:
      case HqlsqlParser::T_SIMPLE_DOUBLE:
      case HqlsqlParser::T_SIMPLE_FLOAT:
      case HqlsqlParser::T_SMALLDATETIME:
      case HqlsqlParser::T_SMALLINT:
      case HqlsqlParser::T_SQL:
      case HqlsqlParser::T_SQLEXCEPTION:
      case HqlsqlParser::T_SQLINSERT:
      case HqlsqlParser::T_SQLSTATE:
      case HqlsqlParser::T_SQLWARNING:
      case HqlsqlParser::T_STATS:
      case HqlsqlParser::T_STATISTICS:
      case HqlsqlParser::T_STEP:
      case HqlsqlParser::T_STORAGE:
      case HqlsqlParser::T_STORED:
      case HqlsqlParser::T_STRING:
      case HqlsqlParser::T_SUBDIR:
      case HqlsqlParser::T_SUBSTRING:
      case HqlsqlParser::T_SUM:
      case HqlsqlParser::T_SUMMARY:
      case HqlsqlParser::T_SYS_REFCURSOR:
      case HqlsqlParser::T_TABLE:
      case HqlsqlParser::T_TABLESPACE:
      case HqlsqlParser::T_TEMPORARY:
      case HqlsqlParser::T_TERMINATED:
      case HqlsqlParser::T_TEXTIMAGE_ON:
      case HqlsqlParser::T_THEN:
      case HqlsqlParser::T_TIMESTAMP:
      case HqlsqlParser::T_TITLE:
      case HqlsqlParser::T_TO:
      case HqlsqlParser::T_TOP:
      case HqlsqlParser::T_TRANSACTION:
      case HqlsqlParser::T_TRUE:
      case HqlsqlParser::T_TRUNCATE:
      case HqlsqlParser::T_TYPE:
      case HqlsqlParser::T_UNIQUE:
      case HqlsqlParser::T_UPDATE:
      case HqlsqlParser::T_UR:
      case HqlsqlParser::T_USE:
      case HqlsqlParser::T_USING:
      case HqlsqlParser::T_VALUE:
      case HqlsqlParser::T_VALUES:
      case HqlsqlParser::T_VAR:
      case HqlsqlParser::T_VARCHAR:
      case HqlsqlParser::T_VARCHAR2:
      case HqlsqlParser::T_VARYING:
      case HqlsqlParser::T_VOLATILE:
      case HqlsqlParser::T_WHILE:
      case HqlsqlParser::T_WITH:
      case HqlsqlParser::T_WITHOUT:
      case HqlsqlParser::T_WORK:
      case HqlsqlParser::T_XACT_ABORT:
      case HqlsqlParser::T_XML:
      case HqlsqlParser::T_YES:
      case HqlsqlParser::T_ARRAY:
      case HqlsqlParser::T_STRUCT:
      case HqlsqlParser::T_SERDE:
      case HqlsqlParser::T_SEQUENCEFILE:
      case HqlsqlParser::T_TEXTFILE:
      case HqlsqlParser::T_RCFILE:
      case HqlsqlParser::T_ORC:
      case HqlsqlParser::T_PARQUET:
      case HqlsqlParser::T_AVRO:
      case HqlsqlParser::T_JSONFILE:
      case HqlsqlParser::T_INPUTFORMAT:
      case HqlsqlParser::T_FILEFORMAT:
      case HqlsqlParser::T_T:
      case HqlsqlParser::T_S:
      case HqlsqlParser::T_ACTIVITY_COUNT:
      case HqlsqlParser::T_CUME_DIST:
      case HqlsqlParser::T_CURRENT_DATE:
      case HqlsqlParser::T_CURRENT_TIMESTAMP:
      case HqlsqlParser::T_CURRENT_USER:
      case HqlsqlParser::T_DENSE_RANK:
      case HqlsqlParser::T_FIRST_VALUE:
      case HqlsqlParser::T_LAG:
      case HqlsqlParser::T_LAST_VALUE:
      case HqlsqlParser::T_LEAD:
      case HqlsqlParser::T_PART_COUNT:
      case HqlsqlParser::T_PART_LOC:
      case HqlsqlParser::T_RANK:
      case HqlsqlParser::T_ROW_NUMBER:
      case HqlsqlParser::T_STDEV:
      case HqlsqlParser::T_STD:
      case HqlsqlParser::T_SYSDATE:
      case HqlsqlParser::T_VARIANCE:
      case HqlsqlParser::T_USER:
      case HqlsqlParser::T_PURGE:
      case HqlsqlParser::T_BUCKETS:
      case HqlsqlParser::T_SKEWED:
      case HqlsqlParser::T_DIRECTORIES:
      case HqlsqlParser::T_SERDEPROPERTIES:
      case HqlsqlParser::T_RENAME:
      case HqlsqlParser::T_SORTED:
      case HqlsqlParser::T_SORT:
      case HqlsqlParser::T_CHANGE:
      case HqlsqlParser::T_EXCHANGE:
      case HqlsqlParser::T_RECOVER:
      case HqlsqlParser::T_PARTITIONS:
      case HqlsqlParser::T_PROTECTION:
      case HqlsqlParser::T_ARCHIVE:
      case HqlsqlParser::T_UNARCHIVE:
      case HqlsqlParser::T_TOUCH:
      case HqlsqlParser::T_OFFLINE:
      case HqlsqlParser::T_NO_DROP:
      case HqlsqlParser::T_COMPACT:
      case HqlsqlParser::T_CONCATENATE:
      case HqlsqlParser::T_WAIT:
      case HqlsqlParser::T_COLUMNS:
      case HqlsqlParser::T_FIRST:
      case HqlsqlParser::T_LAST:
      case HqlsqlParser::T_NULLS:
      case HqlsqlParser::T_AFTER:
      case HqlsqlParser::T_MATERIALIZED:
      case HqlsqlParser::T_REWRITE:
      case HqlsqlParser::T_PARTITIONED:
      case HqlsqlParser::T_DISTRIBUTED:
      case HqlsqlParser::T_MACRO:
      case HqlsqlParser::T_SHOW:
      case HqlsqlParser::T_EXTENDED:
      case HqlsqlParser::T_FORMATTED:
      case HqlsqlParser::T_SEMI:
      case HqlsqlParser::T_CROSS:
      case HqlsqlParser::T_LATERAL:
      case HqlsqlParser::T_RELOAD:
      case HqlsqlParser::T_LOAD:
      case HqlsqlParser::T_INPATH:
      case HqlsqlParser::T_PRINCIPALS:
      case HqlsqlParser::T_COMPACTIONS:
      case HqlsqlParser::T_CONF:
      case HqlsqlParser::T_ADMIN:
      case HqlsqlParser::T_OPTION:
      case HqlsqlParser::T_PRIVILEGES:
      case HqlsqlParser::T_LOCK:
      case HqlsqlParser::T_SHOW_DATABASE:
      case HqlsqlParser::T_COMPUTE:
      case HqlsqlParser::T_CACHE:
      case HqlsqlParser::T_METADATA:
      case HqlsqlParser::T_NOSCAN:
      case HqlsqlParser::T_UNIONTYPE:
      case HqlsqlParser::T_ANALYZE:
      case HqlsqlParser::T_EXPLAIN:
      case HqlsqlParser::T_CBO:
      case HqlsqlParser::T_AST:
      case HqlsqlParser::T_DEPENDENCY:
      case HqlsqlParser::T_AUTHORIZATION:
      case HqlsqlParser::T_VECTORIZATION:
      case HqlsqlParser::T_COST:
      case HqlsqlParser::T_JOINCOST:
      case HqlsqlParser::T_OPERATOR:
      case HqlsqlParser::T_EXPRESSION:
      case HqlsqlParser::T_DETAIL:
      case HqlsqlParser::T_UNBOUNDED:
      case HqlsqlParser::T_PRECEDING:
      case HqlsqlParser::T_FOLLOWING:
      case HqlsqlParser::T_RANGE:
      case HqlsqlParser::T_YEAR:
      case HqlsqlParser::T_MONTH:
      case HqlsqlParser::T_MINUTE:
      case HqlsqlParser::T_TIME:
      case HqlsqlParser::T_ZONE: {
        setState(4714);
        non_reserved_words();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4724);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 599, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4717);
        match(HqlsqlParser::T_PERIOD);
        setState(4720);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case HqlsqlParser::L_ID: {
            setState(4718);
            match(HqlsqlParser::L_ID);
            break;
          }

          case HqlsqlParser::T_ACTION:
          case HqlsqlParser::T_ADD:
          case HqlsqlParser::T_ALL:
          case HqlsqlParser::T_ALLOCATE:
          case HqlsqlParser::T_ALTER:
          case HqlsqlParser::T_AND:
          case HqlsqlParser::T_ANSI_NULLS:
          case HqlsqlParser::T_ANSI_PADDING:
          case HqlsqlParser::T_AS:
          case HqlsqlParser::T_ASC:
          case HqlsqlParser::T_ASSOCIATE:
          case HqlsqlParser::T_AT:
          case HqlsqlParser::T_AUTO_INCREMENT:
          case HqlsqlParser::T_AVG:
          case HqlsqlParser::T_BATCHSIZE:
          case HqlsqlParser::T_BEGIN:
          case HqlsqlParser::T_BETWEEN:
          case HqlsqlParser::T_BIGINT:
          case HqlsqlParser::T_BINARY_DOUBLE:
          case HqlsqlParser::T_BINARY_FLOAT:
          case HqlsqlParser::T_BIT:
          case HqlsqlParser::T_BODY:
          case HqlsqlParser::T_BREAK:
          case HqlsqlParser::T_BY:
          case HqlsqlParser::T_BYTE:
          case HqlsqlParser::T_CALL:
          case HqlsqlParser::T_CALLER:
          case HqlsqlParser::T_CASCADE:
          case HqlsqlParser::T_CASE:
          case HqlsqlParser::T_CASESPECIFIC:
          case HqlsqlParser::T_CAST:
          case HqlsqlParser::T_CHAR:
          case HqlsqlParser::T_CHARACTER:
          case HqlsqlParser::T_CHARSET:
          case HqlsqlParser::T_CLIENT:
          case HqlsqlParser::T_CLOSE:
          case HqlsqlParser::T_CLUSTERED:
          case HqlsqlParser::T_CMP:
          case HqlsqlParser::T_COLLECT:
          case HqlsqlParser::T_COLLECTION:
          case HqlsqlParser::T_COLUMN:
          case HqlsqlParser::T_COMMENT:
          case HqlsqlParser::T_CONSTANT:
          case HqlsqlParser::T_COMMIT:
          case HqlsqlParser::T_COMPRESS:
          case HqlsqlParser::T_CONCAT:
          case HqlsqlParser::T_CONDITION:
          case HqlsqlParser::T_CONSTRAINT:
          case HqlsqlParser::T_CONTINUE:
          case HqlsqlParser::T_COPY:
          case HqlsqlParser::T_COUNT:
          case HqlsqlParser::T_COUNT_BIG:
          case HqlsqlParser::T_CREATE:
          case HqlsqlParser::T_CREATION:
          case HqlsqlParser::T_CREATOR:
          case HqlsqlParser::T_CS:
          case HqlsqlParser::T_CURRENT:
          case HqlsqlParser::T_CURRENT_SCHEMA:
          case HqlsqlParser::T_CURSOR:
          case HqlsqlParser::T_DATABASE:
          case HqlsqlParser::T_DATA:
          case HqlsqlParser::T_DATE:
          case HqlsqlParser::T_DATETIME:
          case HqlsqlParser::T_DAY:
          case HqlsqlParser::T_DAYS:
          case HqlsqlParser::T_DEC:
          case HqlsqlParser::T_DECIMAL:
          case HqlsqlParser::T_DECLARE:
          case HqlsqlParser::T_DEFAULT:
          case HqlsqlParser::T_DEFERRED:
          case HqlsqlParser::T_DEFINED:
          case HqlsqlParser::T_DEFINER:
          case HqlsqlParser::T_DEFINITION:
          case HqlsqlParser::T_DELETE:
          case HqlsqlParser::T_DELIMITED:
          case HqlsqlParser::T_DELIMITER:
          case HqlsqlParser::T_DESC:
          case HqlsqlParser::T_DESCRIBE:
          case HqlsqlParser::T_DIAGNOSTICS:
          case HqlsqlParser::T_DIR:
          case HqlsqlParser::T_DIRECTORY:
          case HqlsqlParser::T_DISTINCT:
          case HqlsqlParser::T_DISTRIBUTE:
          case HqlsqlParser::T_DO:
          case HqlsqlParser::T_DOUBLE:
          case HqlsqlParser::T_DROP:
          case HqlsqlParser::T_DYNAMIC:
          case HqlsqlParser::T_ENABLE:
          case HqlsqlParser::T_ENGINE:
          case HqlsqlParser::T_ESCAPED:
          case HqlsqlParser::T_EXCEPT:
          case HqlsqlParser::T_EXEC:
          case HqlsqlParser::T_EXECUTE:
          case HqlsqlParser::T_EXCEPTION:
          case HqlsqlParser::T_EXCLUSIVE:
          case HqlsqlParser::T_EXISTS:
          case HqlsqlParser::T_EXIT:
          case HqlsqlParser::T_FALLBACK:
          case HqlsqlParser::T_FALSE:
          case HqlsqlParser::T_FETCH:
          case HqlsqlParser::T_FIELDS:
          case HqlsqlParser::T_FILE:
          case HqlsqlParser::T_FILES:
          case HqlsqlParser::T_FLOAT:
          case HqlsqlParser::T_FOR:
          case HqlsqlParser::T_FOREIGN:
          case HqlsqlParser::T_FORMAT:
          case HqlsqlParser::T_FOUND:
          case HqlsqlParser::T_FULL:
          case HqlsqlParser::T_FUNCTION:
          case HqlsqlParser::T_GET:
          case HqlsqlParser::T_GLOBAL:
          case HqlsqlParser::T_GO:
          case HqlsqlParser::T_GRANT:
          case HqlsqlParser::T_ROLE:
          case HqlsqlParser::T_HANDLER:
          case HqlsqlParser::T_HASH:
          case HqlsqlParser::T_HAVING:
          case HqlsqlParser::T_HDFS:
          case HqlsqlParser::T_HIVE:
          case HqlsqlParser::T_HOST:
          case HqlsqlParser::T_IDENTITY:
          case HqlsqlParser::T_IF:
          case HqlsqlParser::T_IGNORE:
          case HqlsqlParser::T_IMMEDIATE:
          case HqlsqlParser::T_IN:
          case HqlsqlParser::T_INCLUDE:
          case HqlsqlParser::T_INDEX:
          case HqlsqlParser::T_INITRANS:
          case HqlsqlParser::T_INNER:
          case HqlsqlParser::T_INOUT:
          case HqlsqlParser::T_INSERT:
          case HqlsqlParser::T_INT:
          case HqlsqlParser::T_INT2:
          case HqlsqlParser::T_INT4:
          case HqlsqlParser::T_INT8:
          case HqlsqlParser::T_INTEGER:
          case HqlsqlParser::T_INTERSECT:
          case HqlsqlParser::T_INTO:
          case HqlsqlParser::T_INVOKER:
          case HqlsqlParser::T_IS:
          case HqlsqlParser::T_ISOPEN:
          case HqlsqlParser::T_ITEMS:
          case HqlsqlParser::T_JOIN:
          case HqlsqlParser::T_KEEP:
          case HqlsqlParser::T_KEY:
          case HqlsqlParser::T_KEYS:
          case HqlsqlParser::T_LANGUAGE:
          case HqlsqlParser::T_LEAVE:
          case HqlsqlParser::T_LEFT:
          case HqlsqlParser::T_LIKE:
          case HqlsqlParser::T_LINES:
          case HqlsqlParser::T_LOCAL:
          case HqlsqlParser::T_LOCATION:
          case HqlsqlParser::T_LOCATOR:
          case HqlsqlParser::T_LOCATORS:
          case HqlsqlParser::T_LOCKS:
          case HqlsqlParser::T_LOG:
          case HqlsqlParser::T_LOGGED:
          case HqlsqlParser::T_LOGGING:
          case HqlsqlParser::T_LOOP:
          case HqlsqlParser::T_MAP:
          case HqlsqlParser::T_MATCHED:
          case HqlsqlParser::T_MAX:
          case HqlsqlParser::T_MAXTRANS:
          case HqlsqlParser::T_MERGE:
          case HqlsqlParser::T_MESSAGE_TEXT:
          case HqlsqlParser::T_MICROSECOND:
          case HqlsqlParser::T_MICROSECONDS:
          case HqlsqlParser::T_MIN:
          case HqlsqlParser::T_MULTISET:
          case HqlsqlParser::T_NCHAR:
          case HqlsqlParser::T_NEW:
          case HqlsqlParser::T_NVARCHAR:
          case HqlsqlParser::T_NO:
          case HqlsqlParser::T_NOCOUNT:
          case HqlsqlParser::T_NOCOMPRESS:
          case HqlsqlParser::T_NOLOGGING:
          case HqlsqlParser::T_NONE:
          case HqlsqlParser::T_NOT:
          case HqlsqlParser::T_NOTFOUND:
          case HqlsqlParser::T_NUMERIC:
          case HqlsqlParser::T_NUMBER:
          case HqlsqlParser::T_OBJECT:
          case HqlsqlParser::T_OFF:
          case HqlsqlParser::T_ON:
          case HqlsqlParser::T_ONLY:
          case HqlsqlParser::T_OPEN:
          case HqlsqlParser::T_OR:
          case HqlsqlParser::T_OUT:
          case HqlsqlParser::T_OUTER:
          case HqlsqlParser::T_OVERWRITE:
          case HqlsqlParser::T_OWNER:
          case HqlsqlParser::T_PACKAGE:
          case HqlsqlParser::T_PARTITION:
          case HqlsqlParser::T_PCTFREE:
          case HqlsqlParser::T_PCTUSED:
          case HqlsqlParser::T_PRECISION:
          case HqlsqlParser::T_PRESERVE:
          case HqlsqlParser::T_PRIMARY:
          case HqlsqlParser::T_PRINT:
          case HqlsqlParser::T_PROC:
          case HqlsqlParser::T_PROCEDURE:
          case HqlsqlParser::T_QUALIFY:
          case HqlsqlParser::T_QUERY_BAND:
          case HqlsqlParser::T_QUIT:
          case HqlsqlParser::T_QUOTED_IDENTIFIER:
          case HqlsqlParser::T_RAISE:
          case HqlsqlParser::T_REAL:
          case HqlsqlParser::T_REFERENCES:
          case HqlsqlParser::T_REGEXP:
          case HqlsqlParser::T_REPLACE:
          case HqlsqlParser::T_RESIGNAL:
          case HqlsqlParser::T_RESTRICT:
          case HqlsqlParser::T_RESULT:
          case HqlsqlParser::T_RESULT_SET_LOCATOR:
          case HqlsqlParser::T_RETURN:
          case HqlsqlParser::T_RETURNS:
          case HqlsqlParser::T_REVERSE:
          case HqlsqlParser::T_RIGHT:
          case HqlsqlParser::T_RLIKE:
          case HqlsqlParser::T_ROLLBACK:
          case HqlsqlParser::T_ROW:
          case HqlsqlParser::T_ROWS:
          case HqlsqlParser::T_ROW_COUNT:
          case HqlsqlParser::T_RR:
          case HqlsqlParser::T_RS:
          case HqlsqlParser::T_PWD:
          case HqlsqlParser::T_TRIM:
          case HqlsqlParser::T_SCHEMA:
          case HqlsqlParser::T_SECOND:
          case HqlsqlParser::T_SECONDS:
          case HqlsqlParser::T_SECURITY:
          case HqlsqlParser::T_SEGMENT:
          case HqlsqlParser::T_SELECT:
          case HqlsqlParser::T_SESSION:
          case HqlsqlParser::T_SESSIONS:
          case HqlsqlParser::T_SETS:
          case HqlsqlParser::T_SHARE:
          case HqlsqlParser::T_SIGNAL:
          case HqlsqlParser::T_SIMPLE_DOUBLE:
          case HqlsqlParser::T_SIMPLE_FLOAT:
          case HqlsqlParser::T_SMALLDATETIME:
          case HqlsqlParser::T_SMALLINT:
          case HqlsqlParser::T_SQL:
          case HqlsqlParser::T_SQLEXCEPTION:
          case HqlsqlParser::T_SQLINSERT:
          case HqlsqlParser::T_SQLSTATE:
          case HqlsqlParser::T_SQLWARNING:
          case HqlsqlParser::T_STATS:
          case HqlsqlParser::T_STATISTICS:
          case HqlsqlParser::T_STEP:
          case HqlsqlParser::T_STORAGE:
          case HqlsqlParser::T_STORED:
          case HqlsqlParser::T_STRING:
          case HqlsqlParser::T_SUBDIR:
          case HqlsqlParser::T_SUBSTRING:
          case HqlsqlParser::T_SUM:
          case HqlsqlParser::T_SUMMARY:
          case HqlsqlParser::T_SYS_REFCURSOR:
          case HqlsqlParser::T_TABLE:
          case HqlsqlParser::T_TABLESPACE:
          case HqlsqlParser::T_TEMPORARY:
          case HqlsqlParser::T_TERMINATED:
          case HqlsqlParser::T_TEXTIMAGE_ON:
          case HqlsqlParser::T_THEN:
          case HqlsqlParser::T_TIMESTAMP:
          case HqlsqlParser::T_TITLE:
          case HqlsqlParser::T_TO:
          case HqlsqlParser::T_TOP:
          case HqlsqlParser::T_TRANSACTION:
          case HqlsqlParser::T_TRUE:
          case HqlsqlParser::T_TRUNCATE:
          case HqlsqlParser::T_TYPE:
          case HqlsqlParser::T_UNIQUE:
          case HqlsqlParser::T_UPDATE:
          case HqlsqlParser::T_UR:
          case HqlsqlParser::T_USE:
          case HqlsqlParser::T_USING:
          case HqlsqlParser::T_VALUE:
          case HqlsqlParser::T_VALUES:
          case HqlsqlParser::T_VAR:
          case HqlsqlParser::T_VARCHAR:
          case HqlsqlParser::T_VARCHAR2:
          case HqlsqlParser::T_VARYING:
          case HqlsqlParser::T_VOLATILE:
          case HqlsqlParser::T_WHILE:
          case HqlsqlParser::T_WITH:
          case HqlsqlParser::T_WITHOUT:
          case HqlsqlParser::T_WORK:
          case HqlsqlParser::T_XACT_ABORT:
          case HqlsqlParser::T_XML:
          case HqlsqlParser::T_YES:
          case HqlsqlParser::T_ARRAY:
          case HqlsqlParser::T_STRUCT:
          case HqlsqlParser::T_SERDE:
          case HqlsqlParser::T_SEQUENCEFILE:
          case HqlsqlParser::T_TEXTFILE:
          case HqlsqlParser::T_RCFILE:
          case HqlsqlParser::T_ORC:
          case HqlsqlParser::T_PARQUET:
          case HqlsqlParser::T_AVRO:
          case HqlsqlParser::T_JSONFILE:
          case HqlsqlParser::T_INPUTFORMAT:
          case HqlsqlParser::T_FILEFORMAT:
          case HqlsqlParser::T_T:
          case HqlsqlParser::T_S:
          case HqlsqlParser::T_ACTIVITY_COUNT:
          case HqlsqlParser::T_CUME_DIST:
          case HqlsqlParser::T_CURRENT_DATE:
          case HqlsqlParser::T_CURRENT_TIMESTAMP:
          case HqlsqlParser::T_CURRENT_USER:
          case HqlsqlParser::T_DENSE_RANK:
          case HqlsqlParser::T_FIRST_VALUE:
          case HqlsqlParser::T_LAG:
          case HqlsqlParser::T_LAST_VALUE:
          case HqlsqlParser::T_LEAD:
          case HqlsqlParser::T_PART_COUNT:
          case HqlsqlParser::T_PART_LOC:
          case HqlsqlParser::T_RANK:
          case HqlsqlParser::T_ROW_NUMBER:
          case HqlsqlParser::T_STDEV:
          case HqlsqlParser::T_STD:
          case HqlsqlParser::T_SYSDATE:
          case HqlsqlParser::T_VARIANCE:
          case HqlsqlParser::T_USER:
          case HqlsqlParser::T_PURGE:
          case HqlsqlParser::T_BUCKETS:
          case HqlsqlParser::T_SKEWED:
          case HqlsqlParser::T_DIRECTORIES:
          case HqlsqlParser::T_SERDEPROPERTIES:
          case HqlsqlParser::T_RENAME:
          case HqlsqlParser::T_SORTED:
          case HqlsqlParser::T_SORT:
          case HqlsqlParser::T_CHANGE:
          case HqlsqlParser::T_EXCHANGE:
          case HqlsqlParser::T_RECOVER:
          case HqlsqlParser::T_PARTITIONS:
          case HqlsqlParser::T_PROTECTION:
          case HqlsqlParser::T_ARCHIVE:
          case HqlsqlParser::T_UNARCHIVE:
          case HqlsqlParser::T_TOUCH:
          case HqlsqlParser::T_OFFLINE:
          case HqlsqlParser::T_NO_DROP:
          case HqlsqlParser::T_COMPACT:
          case HqlsqlParser::T_CONCATENATE:
          case HqlsqlParser::T_WAIT:
          case HqlsqlParser::T_COLUMNS:
          case HqlsqlParser::T_FIRST:
          case HqlsqlParser::T_LAST:
          case HqlsqlParser::T_NULLS:
          case HqlsqlParser::T_AFTER:
          case HqlsqlParser::T_MATERIALIZED:
          case HqlsqlParser::T_REWRITE:
          case HqlsqlParser::T_PARTITIONED:
          case HqlsqlParser::T_DISTRIBUTED:
          case HqlsqlParser::T_MACRO:
          case HqlsqlParser::T_SHOW:
          case HqlsqlParser::T_EXTENDED:
          case HqlsqlParser::T_FORMATTED:
          case HqlsqlParser::T_SEMI:
          case HqlsqlParser::T_CROSS:
          case HqlsqlParser::T_LATERAL:
          case HqlsqlParser::T_RELOAD:
          case HqlsqlParser::T_LOAD:
          case HqlsqlParser::T_INPATH:
          case HqlsqlParser::T_PRINCIPALS:
          case HqlsqlParser::T_COMPACTIONS:
          case HqlsqlParser::T_CONF:
          case HqlsqlParser::T_ADMIN:
          case HqlsqlParser::T_OPTION:
          case HqlsqlParser::T_PRIVILEGES:
          case HqlsqlParser::T_LOCK:
          case HqlsqlParser::T_SHOW_DATABASE:
          case HqlsqlParser::T_COMPUTE:
          case HqlsqlParser::T_CACHE:
          case HqlsqlParser::T_METADATA:
          case HqlsqlParser::T_NOSCAN:
          case HqlsqlParser::T_UNIONTYPE:
          case HqlsqlParser::T_ANALYZE:
          case HqlsqlParser::T_EXPLAIN:
          case HqlsqlParser::T_CBO:
          case HqlsqlParser::T_AST:
          case HqlsqlParser::T_DEPENDENCY:
          case HqlsqlParser::T_AUTHORIZATION:
          case HqlsqlParser::T_VECTORIZATION:
          case HqlsqlParser::T_COST:
          case HqlsqlParser::T_JOINCOST:
          case HqlsqlParser::T_OPERATOR:
          case HqlsqlParser::T_EXPRESSION:
          case HqlsqlParser::T_DETAIL:
          case HqlsqlParser::T_UNBOUNDED:
          case HqlsqlParser::T_PRECEDING:
          case HqlsqlParser::T_FOLLOWING:
          case HqlsqlParser::T_RANGE:
          case HqlsqlParser::T_YEAR:
          case HqlsqlParser::T_MONTH:
          case HqlsqlParser::T_MINUTE:
          case HqlsqlParser::T_TIME:
          case HqlsqlParser::T_ZONE: {
            setState(4719);
            non_reserved_words();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(4726);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 599, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

HqlsqlParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t HqlsqlParser::StringContext::getRuleIndex() const {
  return HqlsqlParser::RuleString;
}

void HqlsqlParser::StringContext::copyFrom(StringContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Double_quotedStringContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Double_quotedStringContext::L_D_STRING() {
  return getToken(HqlsqlParser::L_D_STRING, 0);
}

HqlsqlParser::Double_quotedStringContext::Double_quotedStringContext(StringContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Double_quotedStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDouble_quotedString(this);
}
void HqlsqlParser::Double_quotedStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDouble_quotedString(this);
}

antlrcpp::Any HqlsqlParser::Double_quotedStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDouble_quotedString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Single_quotedStringContext ------------------------------------------------------------------

tree::TerminalNode* HqlsqlParser::Single_quotedStringContext::L_S_STRING() {
  return getToken(HqlsqlParser::L_S_STRING, 0);
}

HqlsqlParser::Single_quotedStringContext::Single_quotedStringContext(StringContext *ctx) { copyFrom(ctx); }

void HqlsqlParser::Single_quotedStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_quotedString(this);
}
void HqlsqlParser::Single_quotedStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_quotedString(this);
}

antlrcpp::Any HqlsqlParser::Single_quotedStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitSingle_quotedString(this);
  else
    return visitor->visitChildren(this);
}
HqlsqlParser::StringContext* HqlsqlParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 648, HqlsqlParser::RuleString);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4729);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case HqlsqlParser::L_S_STRING: {
        _localctx = dynamic_cast<StringContext *>(_tracker.createInstance<HqlsqlParser::Single_quotedStringContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4727);
        match(HqlsqlParser::L_S_STRING);
        break;
      }

      case HqlsqlParser::L_D_STRING: {
        _localctx = dynamic_cast<StringContext *>(_tracker.createInstance<HqlsqlParser::Double_quotedStringContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4728);
        match(HqlsqlParser::L_D_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Int_numberContext ------------------------------------------------------------------

HqlsqlParser::Int_numberContext::Int_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Int_numberContext::L_INT() {
  return getToken(HqlsqlParser::L_INT, 0);
}

tree::TerminalNode* HqlsqlParser::Int_numberContext::T_SUB() {
  return getToken(HqlsqlParser::T_SUB, 0);
}

tree::TerminalNode* HqlsqlParser::Int_numberContext::T_ADD_SIGN() {
  return getToken(HqlsqlParser::T_ADD_SIGN, 0);
}


size_t HqlsqlParser::Int_numberContext::getRuleIndex() const {
  return HqlsqlParser::RuleInt_number;
}

void HqlsqlParser::Int_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInt_number(this);
}

void HqlsqlParser::Int_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInt_number(this);
}


antlrcpp::Any HqlsqlParser::Int_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitInt_number(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Int_numberContext* HqlsqlParser::int_number() {
  Int_numberContext *_localctx = _tracker.createInstance<Int_numberContext>(_ctx, getState());
  enterRule(_localctx, 650, HqlsqlParser::RuleInt_number);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ADD_SIGN

    || _la == HqlsqlParser::T_SUB) {
      setState(4731);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ADD_SIGN

      || _la == HqlsqlParser::T_SUB)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4734);
    match(HqlsqlParser::L_INT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dec_numberContext ------------------------------------------------------------------

HqlsqlParser::Dec_numberContext::Dec_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Dec_numberContext::L_DEC() {
  return getToken(HqlsqlParser::L_DEC, 0);
}

tree::TerminalNode* HqlsqlParser::Dec_numberContext::T_SUB() {
  return getToken(HqlsqlParser::T_SUB, 0);
}

tree::TerminalNode* HqlsqlParser::Dec_numberContext::T_ADD_SIGN() {
  return getToken(HqlsqlParser::T_ADD_SIGN, 0);
}


size_t HqlsqlParser::Dec_numberContext::getRuleIndex() const {
  return HqlsqlParser::RuleDec_number;
}

void HqlsqlParser::Dec_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDec_number(this);
}

void HqlsqlParser::Dec_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDec_number(this);
}


antlrcpp::Any HqlsqlParser::Dec_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitDec_number(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Dec_numberContext* HqlsqlParser::dec_number() {
  Dec_numberContext *_localctx = _tracker.createInstance<Dec_numberContext>(_ctx, getState());
  enterRule(_localctx, 652, HqlsqlParser::RuleDec_number);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4737);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == HqlsqlParser::T_ADD_SIGN

    || _la == HqlsqlParser::T_SUB) {
      setState(4736);
      _la = _input->LA(1);
      if (!(_la == HqlsqlParser::T_ADD_SIGN

      || _la == HqlsqlParser::T_SUB)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4739);
    match(HqlsqlParser::L_DEC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_literalContext ------------------------------------------------------------------

HqlsqlParser::Bool_literalContext::Bool_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Bool_literalContext::T_TRUE() {
  return getToken(HqlsqlParser::T_TRUE, 0);
}

tree::TerminalNode* HqlsqlParser::Bool_literalContext::T_FALSE() {
  return getToken(HqlsqlParser::T_FALSE, 0);
}


size_t HqlsqlParser::Bool_literalContext::getRuleIndex() const {
  return HqlsqlParser::RuleBool_literal;
}

void HqlsqlParser::Bool_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_literal(this);
}

void HqlsqlParser::Bool_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_literal(this);
}


antlrcpp::Any HqlsqlParser::Bool_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitBool_literal(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Bool_literalContext* HqlsqlParser::bool_literal() {
  Bool_literalContext *_localctx = _tracker.createInstance<Bool_literalContext>(_ctx, getState());
  enterRule(_localctx, 654, HqlsqlParser::RuleBool_literal);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4741);
    _la = _input->LA(1);
    if (!(_la == HqlsqlParser::T_FALSE || _la == HqlsqlParser::T_TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_constContext ------------------------------------------------------------------

HqlsqlParser::Null_constContext::Null_constContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Null_constContext::T_NULL() {
  return getToken(HqlsqlParser::T_NULL, 0);
}


size_t HqlsqlParser::Null_constContext::getRuleIndex() const {
  return HqlsqlParser::RuleNull_const;
}

void HqlsqlParser::Null_constContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_const(this);
}

void HqlsqlParser::Null_constContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_const(this);
}


antlrcpp::Any HqlsqlParser::Null_constContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitNull_const(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Null_constContext* HqlsqlParser::null_const() {
  Null_constContext *_localctx = _tracker.createInstance<Null_constContext>(_ctx, getState());
  enterRule(_localctx, 656, HqlsqlParser::RuleNull_const);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4743);
    match(HqlsqlParser::T_NULL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_reserved_wordsContext ------------------------------------------------------------------

HqlsqlParser::Non_reserved_wordsContext::Non_reserved_wordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ACTION() {
  return getToken(HqlsqlParser::T_ACTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ACTIVITY_COUNT() {
  return getToken(HqlsqlParser::T_ACTIVITY_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ADD() {
  return getToken(HqlsqlParser::T_ADD, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ALL() {
  return getToken(HqlsqlParser::T_ALL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ALLOCATE() {
  return getToken(HqlsqlParser::T_ALLOCATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ALTER() {
  return getToken(HqlsqlParser::T_ALTER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AND() {
  return getToken(HqlsqlParser::T_AND, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ANSI_NULLS() {
  return getToken(HqlsqlParser::T_ANSI_NULLS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ANSI_PADDING() {
  return getToken(HqlsqlParser::T_ANSI_PADDING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AS() {
  return getToken(HqlsqlParser::T_AS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ASC() {
  return getToken(HqlsqlParser::T_ASC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ASSOCIATE() {
  return getToken(HqlsqlParser::T_ASSOCIATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AT() {
  return getToken(HqlsqlParser::T_AT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AUTO_INCREMENT() {
  return getToken(HqlsqlParser::T_AUTO_INCREMENT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AVG() {
  return getToken(HqlsqlParser::T_AVG, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BATCHSIZE() {
  return getToken(HqlsqlParser::T_BATCHSIZE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BEGIN() {
  return getToken(HqlsqlParser::T_BEGIN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BETWEEN() {
  return getToken(HqlsqlParser::T_BETWEEN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BIGINT() {
  return getToken(HqlsqlParser::T_BIGINT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BINARY_DOUBLE() {
  return getToken(HqlsqlParser::T_BINARY_DOUBLE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BINARY_FLOAT() {
  return getToken(HqlsqlParser::T_BINARY_FLOAT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BIT() {
  return getToken(HqlsqlParser::T_BIT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BODY() {
  return getToken(HqlsqlParser::T_BODY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BREAK() {
  return getToken(HqlsqlParser::T_BREAK, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BY() {
  return getToken(HqlsqlParser::T_BY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BYTE() {
  return getToken(HqlsqlParser::T_BYTE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CALL() {
  return getToken(HqlsqlParser::T_CALL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CALLER() {
  return getToken(HqlsqlParser::T_CALLER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CASCADE() {
  return getToken(HqlsqlParser::T_CASCADE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CASE() {
  return getToken(HqlsqlParser::T_CASE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CASESPECIFIC() {
  return getToken(HqlsqlParser::T_CASESPECIFIC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CAST() {
  return getToken(HqlsqlParser::T_CAST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CHAR() {
  return getToken(HqlsqlParser::T_CHAR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CHARACTER() {
  return getToken(HqlsqlParser::T_CHARACTER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CHARSET() {
  return getToken(HqlsqlParser::T_CHARSET, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CLIENT() {
  return getToken(HqlsqlParser::T_CLIENT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CLOSE() {
  return getToken(HqlsqlParser::T_CLOSE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CLUSTERED() {
  return getToken(HqlsqlParser::T_CLUSTERED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CMP() {
  return getToken(HqlsqlParser::T_CMP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COLLECT() {
  return getToken(HqlsqlParser::T_COLLECT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COLLECTION() {
  return getToken(HqlsqlParser::T_COLLECTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COLUMN() {
  return getToken(HqlsqlParser::T_COLUMN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COMMENT() {
  return getToken(HqlsqlParser::T_COMMENT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COMPRESS() {
  return getToken(HqlsqlParser::T_COMPRESS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CONSTANT() {
  return getToken(HqlsqlParser::T_CONSTANT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COPY() {
  return getToken(HqlsqlParser::T_COPY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COMMIT() {
  return getToken(HqlsqlParser::T_COMMIT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CONCAT() {
  return getToken(HqlsqlParser::T_CONCAT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CONDITION() {
  return getToken(HqlsqlParser::T_CONDITION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CONSTRAINT() {
  return getToken(HqlsqlParser::T_CONSTRAINT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CONTINUE() {
  return getToken(HqlsqlParser::T_CONTINUE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COUNT() {
  return getToken(HqlsqlParser::T_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COUNT_BIG() {
  return getToken(HqlsqlParser::T_COUNT_BIG, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CREATE() {
  return getToken(HqlsqlParser::T_CREATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CREATION() {
  return getToken(HqlsqlParser::T_CREATION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CREATOR() {
  return getToken(HqlsqlParser::T_CREATOR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CS() {
  return getToken(HqlsqlParser::T_CS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CUME_DIST() {
  return getToken(HqlsqlParser::T_CUME_DIST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CURRENT() {
  return getToken(HqlsqlParser::T_CURRENT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CURRENT_DATE() {
  return getToken(HqlsqlParser::T_CURRENT_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CURRENT_SCHEMA() {
  return getToken(HqlsqlParser::T_CURRENT_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CURRENT_TIMESTAMP() {
  return getToken(HqlsqlParser::T_CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CURRENT_USER() {
  return getToken(HqlsqlParser::T_CURRENT_USER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CURSOR() {
  return getToken(HqlsqlParser::T_CURSOR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DATA() {
  return getToken(HqlsqlParser::T_DATA, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DATABASE() {
  return getToken(HqlsqlParser::T_DATABASE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DATE() {
  return getToken(HqlsqlParser::T_DATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DATETIME() {
  return getToken(HqlsqlParser::T_DATETIME, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DAY() {
  return getToken(HqlsqlParser::T_DAY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DAYS() {
  return getToken(HqlsqlParser::T_DAYS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DEC() {
  return getToken(HqlsqlParser::T_DEC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DECIMAL() {
  return getToken(HqlsqlParser::T_DECIMAL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DECLARE() {
  return getToken(HqlsqlParser::T_DECLARE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DEFAULT() {
  return getToken(HqlsqlParser::T_DEFAULT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DEFERRED() {
  return getToken(HqlsqlParser::T_DEFERRED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DEFINED() {
  return getToken(HqlsqlParser::T_DEFINED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DEFINER() {
  return getToken(HqlsqlParser::T_DEFINER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DEFINITION() {
  return getToken(HqlsqlParser::T_DEFINITION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DELETE() {
  return getToken(HqlsqlParser::T_DELETE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DELIMITED() {
  return getToken(HqlsqlParser::T_DELIMITED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DELIMITER() {
  return getToken(HqlsqlParser::T_DELIMITER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DENSE_RANK() {
  return getToken(HqlsqlParser::T_DENSE_RANK, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DESC() {
  return getToken(HqlsqlParser::T_DESC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DESCRIBE() {
  return getToken(HqlsqlParser::T_DESCRIBE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DIAGNOSTICS() {
  return getToken(HqlsqlParser::T_DIAGNOSTICS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DIR() {
  return getToken(HqlsqlParser::T_DIR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DIRECTORY() {
  return getToken(HqlsqlParser::T_DIRECTORY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DISTINCT() {
  return getToken(HqlsqlParser::T_DISTINCT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DISTRIBUTE() {
  return getToken(HqlsqlParser::T_DISTRIBUTE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DO() {
  return getToken(HqlsqlParser::T_DO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DOUBLE() {
  return getToken(HqlsqlParser::T_DOUBLE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DROP() {
  return getToken(HqlsqlParser::T_DROP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DYNAMIC() {
  return getToken(HqlsqlParser::T_DYNAMIC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ENABLE() {
  return getToken(HqlsqlParser::T_ENABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ENGINE() {
  return getToken(HqlsqlParser::T_ENGINE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ESCAPED() {
  return getToken(HqlsqlParser::T_ESCAPED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXCEPT() {
  return getToken(HqlsqlParser::T_EXCEPT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXEC() {
  return getToken(HqlsqlParser::T_EXEC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXECUTE() {
  return getToken(HqlsqlParser::T_EXECUTE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXCEPTION() {
  return getToken(HqlsqlParser::T_EXCEPTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXCLUSIVE() {
  return getToken(HqlsqlParser::T_EXCLUSIVE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXISTS() {
  return getToken(HqlsqlParser::T_EXISTS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXIT() {
  return getToken(HqlsqlParser::T_EXIT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FALLBACK() {
  return getToken(HqlsqlParser::T_FALLBACK, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FALSE() {
  return getToken(HqlsqlParser::T_FALSE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FETCH() {
  return getToken(HqlsqlParser::T_FETCH, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FIELDS() {
  return getToken(HqlsqlParser::T_FIELDS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FILE() {
  return getToken(HqlsqlParser::T_FILE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FILES() {
  return getToken(HqlsqlParser::T_FILES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FIRST_VALUE() {
  return getToken(HqlsqlParser::T_FIRST_VALUE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FLOAT() {
  return getToken(HqlsqlParser::T_FLOAT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FOR() {
  return getToken(HqlsqlParser::T_FOR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FOREIGN() {
  return getToken(HqlsqlParser::T_FOREIGN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FORMAT() {
  return getToken(HqlsqlParser::T_FORMAT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FOUND() {
  return getToken(HqlsqlParser::T_FOUND, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FULL() {
  return getToken(HqlsqlParser::T_FULL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FUNCTION() {
  return getToken(HqlsqlParser::T_FUNCTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_GET() {
  return getToken(HqlsqlParser::T_GET, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_GLOBAL() {
  return getToken(HqlsqlParser::T_GLOBAL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_GO() {
  return getToken(HqlsqlParser::T_GO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_GRANT() {
  return getToken(HqlsqlParser::T_GRANT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_HANDLER() {
  return getToken(HqlsqlParser::T_HANDLER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_HASH() {
  return getToken(HqlsqlParser::T_HASH, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_HAVING() {
  return getToken(HqlsqlParser::T_HAVING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_HDFS() {
  return getToken(HqlsqlParser::T_HDFS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_HIVE() {
  return getToken(HqlsqlParser::T_HIVE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_HOST() {
  return getToken(HqlsqlParser::T_HOST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_IDENTITY() {
  return getToken(HqlsqlParser::T_IDENTITY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_IF() {
  return getToken(HqlsqlParser::T_IF, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_IGNORE() {
  return getToken(HqlsqlParser::T_IGNORE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_IMMEDIATE() {
  return getToken(HqlsqlParser::T_IMMEDIATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_IN() {
  return getToken(HqlsqlParser::T_IN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INCLUDE() {
  return getToken(HqlsqlParser::T_INCLUDE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INDEX() {
  return getToken(HqlsqlParser::T_INDEX, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INITRANS() {
  return getToken(HqlsqlParser::T_INITRANS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INNER() {
  return getToken(HqlsqlParser::T_INNER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INOUT() {
  return getToken(HqlsqlParser::T_INOUT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INSERT() {
  return getToken(HqlsqlParser::T_INSERT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INT() {
  return getToken(HqlsqlParser::T_INT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INT2() {
  return getToken(HqlsqlParser::T_INT2, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INT4() {
  return getToken(HqlsqlParser::T_INT4, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INT8() {
  return getToken(HqlsqlParser::T_INT8, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INTEGER() {
  return getToken(HqlsqlParser::T_INTEGER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INTERSECT() {
  return getToken(HqlsqlParser::T_INTERSECT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INTO() {
  return getToken(HqlsqlParser::T_INTO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INVOKER() {
  return getToken(HqlsqlParser::T_INVOKER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ITEMS() {
  return getToken(HqlsqlParser::T_ITEMS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_IS() {
  return getToken(HqlsqlParser::T_IS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ISOPEN() {
  return getToken(HqlsqlParser::T_ISOPEN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_JOIN() {
  return getToken(HqlsqlParser::T_JOIN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_KEEP() {
  return getToken(HqlsqlParser::T_KEEP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_KEY() {
  return getToken(HqlsqlParser::T_KEY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_KEYS() {
  return getToken(HqlsqlParser::T_KEYS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LAG() {
  return getToken(HqlsqlParser::T_LAG, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LANGUAGE() {
  return getToken(HqlsqlParser::T_LANGUAGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LAST_VALUE() {
  return getToken(HqlsqlParser::T_LAST_VALUE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LEAD() {
  return getToken(HqlsqlParser::T_LEAD, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LEAVE() {
  return getToken(HqlsqlParser::T_LEAVE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LEFT() {
  return getToken(HqlsqlParser::T_LEFT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LIKE() {
  return getToken(HqlsqlParser::T_LIKE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LINES() {
  return getToken(HqlsqlParser::T_LINES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOCAL() {
  return getToken(HqlsqlParser::T_LOCAL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOCATION() {
  return getToken(HqlsqlParser::T_LOCATION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOCATOR() {
  return getToken(HqlsqlParser::T_LOCATOR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOCATORS() {
  return getToken(HqlsqlParser::T_LOCATORS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOCKS() {
  return getToken(HqlsqlParser::T_LOCKS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOG() {
  return getToken(HqlsqlParser::T_LOG, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOGGED() {
  return getToken(HqlsqlParser::T_LOGGED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOGGING() {
  return getToken(HqlsqlParser::T_LOGGING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOOP() {
  return getToken(HqlsqlParser::T_LOOP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MATCHED() {
  return getToken(HqlsqlParser::T_MATCHED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MAX() {
  return getToken(HqlsqlParser::T_MAX, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MAXTRANS() {
  return getToken(HqlsqlParser::T_MAXTRANS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MERGE() {
  return getToken(HqlsqlParser::T_MERGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MESSAGE_TEXT() {
  return getToken(HqlsqlParser::T_MESSAGE_TEXT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MICROSECOND() {
  return getToken(HqlsqlParser::T_MICROSECOND, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MICROSECONDS() {
  return getToken(HqlsqlParser::T_MICROSECONDS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MIN() {
  return getToken(HqlsqlParser::T_MIN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MULTISET() {
  return getToken(HqlsqlParser::T_MULTISET, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NCHAR() {
  return getToken(HqlsqlParser::T_NCHAR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NEW() {
  return getToken(HqlsqlParser::T_NEW, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NVARCHAR() {
  return getToken(HqlsqlParser::T_NVARCHAR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NO() {
  return getToken(HqlsqlParser::T_NO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NOCOMPRESS() {
  return getToken(HqlsqlParser::T_NOCOMPRESS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NOCOUNT() {
  return getToken(HqlsqlParser::T_NOCOUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NOLOGGING() {
  return getToken(HqlsqlParser::T_NOLOGGING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NONE() {
  return getToken(HqlsqlParser::T_NONE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NOT() {
  return getToken(HqlsqlParser::T_NOT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NOTFOUND() {
  return getToken(HqlsqlParser::T_NOTFOUND, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NUMERIC() {
  return getToken(HqlsqlParser::T_NUMERIC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NUMBER() {
  return getToken(HqlsqlParser::T_NUMBER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OBJECT() {
  return getToken(HqlsqlParser::T_OBJECT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OFF() {
  return getToken(HqlsqlParser::T_OFF, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ON() {
  return getToken(HqlsqlParser::T_ON, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ONLY() {
  return getToken(HqlsqlParser::T_ONLY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OPEN() {
  return getToken(HqlsqlParser::T_OPEN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OR() {
  return getToken(HqlsqlParser::T_OR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OUT() {
  return getToken(HqlsqlParser::T_OUT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OUTER() {
  return getToken(HqlsqlParser::T_OUTER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OVERWRITE() {
  return getToken(HqlsqlParser::T_OVERWRITE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OWNER() {
  return getToken(HqlsqlParser::T_OWNER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PACKAGE() {
  return getToken(HqlsqlParser::T_PACKAGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PART_COUNT() {
  return getToken(HqlsqlParser::T_PART_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PART_LOC() {
  return getToken(HqlsqlParser::T_PART_LOC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PARTITION() {
  return getToken(HqlsqlParser::T_PARTITION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PCTFREE() {
  return getToken(HqlsqlParser::T_PCTFREE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PCTUSED() {
  return getToken(HqlsqlParser::T_PCTUSED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PRECISION() {
  return getToken(HqlsqlParser::T_PRECISION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PRESERVE() {
  return getToken(HqlsqlParser::T_PRESERVE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PRIMARY() {
  return getToken(HqlsqlParser::T_PRIMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PRINT() {
  return getToken(HqlsqlParser::T_PRINT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PROC() {
  return getToken(HqlsqlParser::T_PROC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PROCEDURE() {
  return getToken(HqlsqlParser::T_PROCEDURE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PWD() {
  return getToken(HqlsqlParser::T_PWD, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_QUALIFY() {
  return getToken(HqlsqlParser::T_QUALIFY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_QUERY_BAND() {
  return getToken(HqlsqlParser::T_QUERY_BAND, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_QUIT() {
  return getToken(HqlsqlParser::T_QUIT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_QUOTED_IDENTIFIER() {
  return getToken(HqlsqlParser::T_QUOTED_IDENTIFIER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RAISE() {
  return getToken(HqlsqlParser::T_RAISE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RANK() {
  return getToken(HqlsqlParser::T_RANK, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_REAL() {
  return getToken(HqlsqlParser::T_REAL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_REFERENCES() {
  return getToken(HqlsqlParser::T_REFERENCES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_REGEXP() {
  return getToken(HqlsqlParser::T_REGEXP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RR() {
  return getToken(HqlsqlParser::T_RR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_REPLACE() {
  return getToken(HqlsqlParser::T_REPLACE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RESIGNAL() {
  return getToken(HqlsqlParser::T_RESIGNAL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RESTRICT() {
  return getToken(HqlsqlParser::T_RESTRICT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RESULT() {
  return getToken(HqlsqlParser::T_RESULT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RESULT_SET_LOCATOR() {
  return getToken(HqlsqlParser::T_RESULT_SET_LOCATOR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RETURN() {
  return getToken(HqlsqlParser::T_RETURN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RETURNS() {
  return getToken(HqlsqlParser::T_RETURNS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_REVERSE() {
  return getToken(HqlsqlParser::T_REVERSE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RIGHT() {
  return getToken(HqlsqlParser::T_RIGHT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RLIKE() {
  return getToken(HqlsqlParser::T_RLIKE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RS() {
  return getToken(HqlsqlParser::T_RS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ROLE() {
  return getToken(HqlsqlParser::T_ROLE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ROLLBACK() {
  return getToken(HqlsqlParser::T_ROLLBACK, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ROW() {
  return getToken(HqlsqlParser::T_ROW, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ROWS() {
  return getToken(HqlsqlParser::T_ROWS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ROW_COUNT() {
  return getToken(HqlsqlParser::T_ROW_COUNT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ROW_NUMBER() {
  return getToken(HqlsqlParser::T_ROW_NUMBER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SCHEMA() {
  return getToken(HqlsqlParser::T_SCHEMA, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SECOND() {
  return getToken(HqlsqlParser::T_SECOND, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SECONDS() {
  return getToken(HqlsqlParser::T_SECONDS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SECURITY() {
  return getToken(HqlsqlParser::T_SECURITY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SEGMENT() {
  return getToken(HqlsqlParser::T_SEGMENT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SELECT() {
  return getToken(HqlsqlParser::T_SELECT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SESSION() {
  return getToken(HqlsqlParser::T_SESSION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SESSIONS() {
  return getToken(HqlsqlParser::T_SESSIONS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SETS() {
  return getToken(HqlsqlParser::T_SETS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SHARE() {
  return getToken(HqlsqlParser::T_SHARE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SIGNAL() {
  return getToken(HqlsqlParser::T_SIGNAL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SIMPLE_DOUBLE() {
  return getToken(HqlsqlParser::T_SIMPLE_DOUBLE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SIMPLE_FLOAT() {
  return getToken(HqlsqlParser::T_SIMPLE_FLOAT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SMALLDATETIME() {
  return getToken(HqlsqlParser::T_SMALLDATETIME, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SMALLINT() {
  return getToken(HqlsqlParser::T_SMALLINT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SQL() {
  return getToken(HqlsqlParser::T_SQL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SQLEXCEPTION() {
  return getToken(HqlsqlParser::T_SQLEXCEPTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SQLINSERT() {
  return getToken(HqlsqlParser::T_SQLINSERT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SQLSTATE() {
  return getToken(HqlsqlParser::T_SQLSTATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SQLWARNING() {
  return getToken(HqlsqlParser::T_SQLWARNING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STATS() {
  return getToken(HqlsqlParser::T_STATS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STATISTICS() {
  return getToken(HqlsqlParser::T_STATISTICS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STEP() {
  return getToken(HqlsqlParser::T_STEP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STDEV() {
  return getToken(HqlsqlParser::T_STDEV, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STD() {
  return getToken(HqlsqlParser::T_STD, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STORAGE() {
  return getToken(HqlsqlParser::T_STORAGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STORED() {
  return getToken(HqlsqlParser::T_STORED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STRING() {
  return getToken(HqlsqlParser::T_STRING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SUBDIR() {
  return getToken(HqlsqlParser::T_SUBDIR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SUBSTRING() {
  return getToken(HqlsqlParser::T_SUBSTRING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SUM() {
  return getToken(HqlsqlParser::T_SUM, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SUMMARY() {
  return getToken(HqlsqlParser::T_SUMMARY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SYSDATE() {
  return getToken(HqlsqlParser::T_SYSDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SYS_REFCURSOR() {
  return getToken(HqlsqlParser::T_SYS_REFCURSOR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TABLE() {
  return getToken(HqlsqlParser::T_TABLE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TABLESPACE() {
  return getToken(HqlsqlParser::T_TABLESPACE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TEMPORARY() {
  return getToken(HqlsqlParser::T_TEMPORARY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TERMINATED() {
  return getToken(HqlsqlParser::T_TERMINATED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TEXTIMAGE_ON() {
  return getToken(HqlsqlParser::T_TEXTIMAGE_ON, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_THEN() {
  return getToken(HqlsqlParser::T_THEN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TIMESTAMP() {
  return getToken(HqlsqlParser::T_TIMESTAMP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TITLE() {
  return getToken(HqlsqlParser::T_TITLE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TO() {
  return getToken(HqlsqlParser::T_TO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TOP() {
  return getToken(HqlsqlParser::T_TOP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TRANSACTION() {
  return getToken(HqlsqlParser::T_TRANSACTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TRIM() {
  return getToken(HqlsqlParser::T_TRIM, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TRUE() {
  return getToken(HqlsqlParser::T_TRUE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TRUNCATE() {
  return getToken(HqlsqlParser::T_TRUNCATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_UNIQUE() {
  return getToken(HqlsqlParser::T_UNIQUE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_UPDATE() {
  return getToken(HqlsqlParser::T_UPDATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_UR() {
  return getToken(HqlsqlParser::T_UR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_USE() {
  return getToken(HqlsqlParser::T_USE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_USER() {
  return getToken(HqlsqlParser::T_USER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_USING() {
  return getToken(HqlsqlParser::T_USING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VALUE() {
  return getToken(HqlsqlParser::T_VALUE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VALUES() {
  return getToken(HqlsqlParser::T_VALUES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VAR() {
  return getToken(HqlsqlParser::T_VAR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VARCHAR() {
  return getToken(HqlsqlParser::T_VARCHAR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VARCHAR2() {
  return getToken(HqlsqlParser::T_VARCHAR2, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VARYING() {
  return getToken(HqlsqlParser::T_VARYING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VARIANCE() {
  return getToken(HqlsqlParser::T_VARIANCE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VOLATILE() {
  return getToken(HqlsqlParser::T_VOLATILE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_WHILE() {
  return getToken(HqlsqlParser::T_WHILE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_WITH() {
  return getToken(HqlsqlParser::T_WITH, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_WITHOUT() {
  return getToken(HqlsqlParser::T_WITHOUT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_WORK() {
  return getToken(HqlsqlParser::T_WORK, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_XACT_ABORT() {
  return getToken(HqlsqlParser::T_XACT_ABORT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_XML() {
  return getToken(HqlsqlParser::T_XML, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_YES() {
  return getToken(HqlsqlParser::T_YES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_T() {
  return getToken(HqlsqlParser::T_T, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_S() {
  return getToken(HqlsqlParser::T_S, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SERDE() {
  return getToken(HqlsqlParser::T_SERDE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PURGE() {
  return getToken(HqlsqlParser::T_PURGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_BUCKETS() {
  return getToken(HqlsqlParser::T_BUCKETS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SKEWED() {
  return getToken(HqlsqlParser::T_SKEWED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DIRECTORIES() {
  return getToken(HqlsqlParser::T_DIRECTORIES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SERDEPROPERTIES() {
  return getToken(HqlsqlParser::T_SERDEPROPERTIES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RENAME() {
  return getToken(HqlsqlParser::T_RENAME, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SORTED() {
  return getToken(HqlsqlParser::T_SORTED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SORT() {
  return getToken(HqlsqlParser::T_SORT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CHANGE() {
  return getToken(HqlsqlParser::T_CHANGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXCHANGE() {
  return getToken(HqlsqlParser::T_EXCHANGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RECOVER() {
  return getToken(HqlsqlParser::T_RECOVER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PARTITIONS() {
  return getToken(HqlsqlParser::T_PARTITIONS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PROTECTION() {
  return getToken(HqlsqlParser::T_PROTECTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ARCHIVE() {
  return getToken(HqlsqlParser::T_ARCHIVE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_UNARCHIVE() {
  return getToken(HqlsqlParser::T_UNARCHIVE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TOUCH() {
  return getToken(HqlsqlParser::T_TOUCH, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OFFLINE() {
  return getToken(HqlsqlParser::T_OFFLINE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NO_DROP() {
  return getToken(HqlsqlParser::T_NO_DROP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COMPACT() {
  return getToken(HqlsqlParser::T_COMPACT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CONCATENATE() {
  return getToken(HqlsqlParser::T_CONCATENATE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_WAIT() {
  return getToken(HqlsqlParser::T_WAIT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COLUMNS() {
  return getToken(HqlsqlParser::T_COLUMNS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FIRST() {
  return getToken(HqlsqlParser::T_FIRST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LAST() {
  return getToken(HqlsqlParser::T_LAST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NULLS() {
  return getToken(HqlsqlParser::T_NULLS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AFTER() {
  return getToken(HqlsqlParser::T_AFTER, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MATERIALIZED() {
  return getToken(HqlsqlParser::T_MATERIALIZED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_REWRITE() {
  return getToken(HqlsqlParser::T_REWRITE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PARTITIONED() {
  return getToken(HqlsqlParser::T_PARTITIONED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DISTRIBUTED() {
  return getToken(HqlsqlParser::T_DISTRIBUTED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MACRO() {
  return getToken(HqlsqlParser::T_MACRO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SHOW() {
  return getToken(HqlsqlParser::T_SHOW, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXTENDED() {
  return getToken(HqlsqlParser::T_EXTENDED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FORMATTED() {
  return getToken(HqlsqlParser::T_FORMATTED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SEMI() {
  return getToken(HqlsqlParser::T_SEMI, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CROSS() {
  return getToken(HqlsqlParser::T_CROSS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LATERAL() {
  return getToken(HqlsqlParser::T_LATERAL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RELOAD() {
  return getToken(HqlsqlParser::T_RELOAD, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOAD() {
  return getToken(HqlsqlParser::T_LOAD, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INPATH() {
  return getToken(HqlsqlParser::T_INPATH, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PRINCIPALS() {
  return getToken(HqlsqlParser::T_PRINCIPALS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COMPACTIONS() {
  return getToken(HqlsqlParser::T_COMPACTIONS, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CONF() {
  return getToken(HqlsqlParser::T_CONF, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ADMIN() {
  return getToken(HqlsqlParser::T_ADMIN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OPTION() {
  return getToken(HqlsqlParser::T_OPTION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PRIVILEGES() {
  return getToken(HqlsqlParser::T_PRIVILEGES, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_LOCK() {
  return getToken(HqlsqlParser::T_LOCK, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SHOW_DATABASE() {
  return getToken(HqlsqlParser::T_SHOW_DATABASE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COMPUTE() {
  return getToken(HqlsqlParser::T_COMPUTE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CACHE() {
  return getToken(HqlsqlParser::T_CACHE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_METADATA() {
  return getToken(HqlsqlParser::T_METADATA, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_NOSCAN() {
  return getToken(HqlsqlParser::T_NOSCAN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_UNIONTYPE() {
  return getToken(HqlsqlParser::T_UNIONTYPE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MAP() {
  return getToken(HqlsqlParser::T_MAP, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ARRAY() {
  return getToken(HqlsqlParser::T_ARRAY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_STRUCT() {
  return getToken(HqlsqlParser::T_STRUCT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ANALYZE() {
  return getToken(HqlsqlParser::T_ANALYZE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXPLAIN() {
  return getToken(HqlsqlParser::T_EXPLAIN, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_CBO() {
  return getToken(HqlsqlParser::T_CBO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AST() {
  return getToken(HqlsqlParser::T_AST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DEPENDENCY() {
  return getToken(HqlsqlParser::T_DEPENDENCY, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AUTHORIZATION() {
  return getToken(HqlsqlParser::T_AUTHORIZATION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_VECTORIZATION() {
  return getToken(HqlsqlParser::T_VECTORIZATION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_COST() {
  return getToken(HqlsqlParser::T_COST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_JOINCOST() {
  return getToken(HqlsqlParser::T_JOINCOST, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_OPERATOR() {
  return getToken(HqlsqlParser::T_OPERATOR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_EXPRESSION() {
  return getToken(HqlsqlParser::T_EXPRESSION, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_DETAIL() {
  return getToken(HqlsqlParser::T_DETAIL, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_UNBOUNDED() {
  return getToken(HqlsqlParser::T_UNBOUNDED, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PRECEDING() {
  return getToken(HqlsqlParser::T_PRECEDING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FOLLOWING() {
  return getToken(HqlsqlParser::T_FOLLOWING, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RANGE() {
  return getToken(HqlsqlParser::T_RANGE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TYPE() {
  return getToken(HqlsqlParser::T_TYPE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_FILEFORMAT() {
  return getToken(HqlsqlParser::T_FILEFORMAT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_SEQUENCEFILE() {
  return getToken(HqlsqlParser::T_SEQUENCEFILE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TEXTFILE() {
  return getToken(HqlsqlParser::T_TEXTFILE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_RCFILE() {
  return getToken(HqlsqlParser::T_RCFILE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ORC() {
  return getToken(HqlsqlParser::T_ORC, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_PARQUET() {
  return getToken(HqlsqlParser::T_PARQUET, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_AVRO() {
  return getToken(HqlsqlParser::T_AVRO, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_JSONFILE() {
  return getToken(HqlsqlParser::T_JSONFILE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_INPUTFORMAT() {
  return getToken(HqlsqlParser::T_INPUTFORMAT, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_YEAR() {
  return getToken(HqlsqlParser::T_YEAR, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MONTH() {
  return getToken(HqlsqlParser::T_MONTH, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_MINUTE() {
  return getToken(HqlsqlParser::T_MINUTE, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_TIME() {
  return getToken(HqlsqlParser::T_TIME, 0);
}

tree::TerminalNode* HqlsqlParser::Non_reserved_wordsContext::T_ZONE() {
  return getToken(HqlsqlParser::T_ZONE, 0);
}


size_t HqlsqlParser::Non_reserved_wordsContext::getRuleIndex() const {
  return HqlsqlParser::RuleNon_reserved_words;
}

void HqlsqlParser::Non_reserved_wordsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_reserved_words(this);
}

void HqlsqlParser::Non_reserved_wordsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<HqlsqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_reserved_words(this);
}


antlrcpp::Any HqlsqlParser::Non_reserved_wordsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<HqlsqlParserVisitor*>(visitor))
    return parserVisitor->visitNon_reserved_words(this);
  else
    return visitor->visitChildren(this);
}

HqlsqlParser::Non_reserved_wordsContext* HqlsqlParser::non_reserved_words() {
  Non_reserved_wordsContext *_localctx = _tracker.createInstance<Non_reserved_wordsContext>(_ctx, getState());
  enterRule(_localctx, 658, HqlsqlParser::RuleNon_reserved_words);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4745);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << HqlsqlParser::T_ACTION)
      | (1ULL << HqlsqlParser::T_ADD)
      | (1ULL << HqlsqlParser::T_ALL)
      | (1ULL << HqlsqlParser::T_ALLOCATE)
      | (1ULL << HqlsqlParser::T_ALTER)
      | (1ULL << HqlsqlParser::T_AND)
      | (1ULL << HqlsqlParser::T_ANSI_NULLS)
      | (1ULL << HqlsqlParser::T_ANSI_PADDING)
      | (1ULL << HqlsqlParser::T_AS)
      | (1ULL << HqlsqlParser::T_ASC)
      | (1ULL << HqlsqlParser::T_ASSOCIATE)
      | (1ULL << HqlsqlParser::T_AT)
      | (1ULL << HqlsqlParser::T_AUTO_INCREMENT)
      | (1ULL << HqlsqlParser::T_AVG)
      | (1ULL << HqlsqlParser::T_BATCHSIZE)
      | (1ULL << HqlsqlParser::T_BEGIN)
      | (1ULL << HqlsqlParser::T_BETWEEN)
      | (1ULL << HqlsqlParser::T_BIGINT)
      | (1ULL << HqlsqlParser::T_BINARY_DOUBLE)
      | (1ULL << HqlsqlParser::T_BINARY_FLOAT)
      | (1ULL << HqlsqlParser::T_BIT)
      | (1ULL << HqlsqlParser::T_BODY)
      | (1ULL << HqlsqlParser::T_BREAK)
      | (1ULL << HqlsqlParser::T_BY)
      | (1ULL << HqlsqlParser::T_BYTE)
      | (1ULL << HqlsqlParser::T_CALL)
      | (1ULL << HqlsqlParser::T_CALLER)
      | (1ULL << HqlsqlParser::T_CASCADE)
      | (1ULL << HqlsqlParser::T_CASE)
      | (1ULL << HqlsqlParser::T_CASESPECIFIC)
      | (1ULL << HqlsqlParser::T_CAST)
      | (1ULL << HqlsqlParser::T_CHAR)
      | (1ULL << HqlsqlParser::T_CHARACTER)
      | (1ULL << HqlsqlParser::T_CHARSET)
      | (1ULL << HqlsqlParser::T_CLIENT)
      | (1ULL << HqlsqlParser::T_CLOSE)
      | (1ULL << HqlsqlParser::T_CLUSTERED)
      | (1ULL << HqlsqlParser::T_CMP)
      | (1ULL << HqlsqlParser::T_COLLECT)
      | (1ULL << HqlsqlParser::T_COLLECTION)
      | (1ULL << HqlsqlParser::T_COLUMN)
      | (1ULL << HqlsqlParser::T_COMMENT)
      | (1ULL << HqlsqlParser::T_CONSTANT)
      | (1ULL << HqlsqlParser::T_COMMIT)
      | (1ULL << HqlsqlParser::T_COMPRESS)
      | (1ULL << HqlsqlParser::T_CONCAT)
      | (1ULL << HqlsqlParser::T_CONDITION)
      | (1ULL << HqlsqlParser::T_CONSTRAINT)
      | (1ULL << HqlsqlParser::T_CONTINUE)
      | (1ULL << HqlsqlParser::T_COPY)
      | (1ULL << HqlsqlParser::T_COUNT)
      | (1ULL << HqlsqlParser::T_COUNT_BIG)
      | (1ULL << HqlsqlParser::T_CREATE)
      | (1ULL << HqlsqlParser::T_CREATION)
      | (1ULL << HqlsqlParser::T_CREATOR)
      | (1ULL << HqlsqlParser::T_CS)
      | (1ULL << HqlsqlParser::T_CURRENT)
      | (1ULL << HqlsqlParser::T_CURRENT_SCHEMA)
      | (1ULL << HqlsqlParser::T_CURSOR)
      | (1ULL << HqlsqlParser::T_DATABASE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (HqlsqlParser::T_DATA - 64))
      | (1ULL << (HqlsqlParser::T_DATE - 64))
      | (1ULL << (HqlsqlParser::T_DATETIME - 64))
      | (1ULL << (HqlsqlParser::T_DAY - 64))
      | (1ULL << (HqlsqlParser::T_DAYS - 64))
      | (1ULL << (HqlsqlParser::T_DEC - 64))
      | (1ULL << (HqlsqlParser::T_DECIMAL - 64))
      | (1ULL << (HqlsqlParser::T_DECLARE - 64))
      | (1ULL << (HqlsqlParser::T_DEFAULT - 64))
      | (1ULL << (HqlsqlParser::T_DEFERRED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINED - 64))
      | (1ULL << (HqlsqlParser::T_DEFINER - 64))
      | (1ULL << (HqlsqlParser::T_DEFINITION - 64))
      | (1ULL << (HqlsqlParser::T_DELETE - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITED - 64))
      | (1ULL << (HqlsqlParser::T_DELIMITER - 64))
      | (1ULL << (HqlsqlParser::T_DESC - 64))
      | (1ULL << (HqlsqlParser::T_DESCRIBE - 64))
      | (1ULL << (HqlsqlParser::T_DIAGNOSTICS - 64))
      | (1ULL << (HqlsqlParser::T_DIR - 64))
      | (1ULL << (HqlsqlParser::T_DIRECTORY - 64))
      | (1ULL << (HqlsqlParser::T_DISTINCT - 64))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTE - 64))
      | (1ULL << (HqlsqlParser::T_DO - 64))
      | (1ULL << (HqlsqlParser::T_DOUBLE - 64))
      | (1ULL << (HqlsqlParser::T_DROP - 64))
      | (1ULL << (HqlsqlParser::T_DYNAMIC - 64))
      | (1ULL << (HqlsqlParser::T_ENABLE - 64))
      | (1ULL << (HqlsqlParser::T_ENGINE - 64))
      | (1ULL << (HqlsqlParser::T_ESCAPED - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPT - 64))
      | (1ULL << (HqlsqlParser::T_EXEC - 64))
      | (1ULL << (HqlsqlParser::T_EXECUTE - 64))
      | (1ULL << (HqlsqlParser::T_EXCEPTION - 64))
      | (1ULL << (HqlsqlParser::T_EXCLUSIVE - 64))
      | (1ULL << (HqlsqlParser::T_EXISTS - 64))
      | (1ULL << (HqlsqlParser::T_EXIT - 64))
      | (1ULL << (HqlsqlParser::T_FALLBACK - 64))
      | (1ULL << (HqlsqlParser::T_FALSE - 64))
      | (1ULL << (HqlsqlParser::T_FETCH - 64))
      | (1ULL << (HqlsqlParser::T_FIELDS - 64))
      | (1ULL << (HqlsqlParser::T_FILE - 64))
      | (1ULL << (HqlsqlParser::T_FILES - 64))
      | (1ULL << (HqlsqlParser::T_FLOAT - 64))
      | (1ULL << (HqlsqlParser::T_FOR - 64))
      | (1ULL << (HqlsqlParser::T_FOREIGN - 64))
      | (1ULL << (HqlsqlParser::T_FORMAT - 64))
      | (1ULL << (HqlsqlParser::T_FOUND - 64))
      | (1ULL << (HqlsqlParser::T_FULL - 64))
      | (1ULL << (HqlsqlParser::T_FUNCTION - 64))
      | (1ULL << (HqlsqlParser::T_GET - 64))
      | (1ULL << (HqlsqlParser::T_GLOBAL - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (HqlsqlParser::T_GO - 128))
      | (1ULL << (HqlsqlParser::T_GRANT - 128))
      | (1ULL << (HqlsqlParser::T_ROLE - 128))
      | (1ULL << (HqlsqlParser::T_HANDLER - 128))
      | (1ULL << (HqlsqlParser::T_HASH - 128))
      | (1ULL << (HqlsqlParser::T_HAVING - 128))
      | (1ULL << (HqlsqlParser::T_HDFS - 128))
      | (1ULL << (HqlsqlParser::T_HIVE - 128))
      | (1ULL << (HqlsqlParser::T_HOST - 128))
      | (1ULL << (HqlsqlParser::T_IDENTITY - 128))
      | (1ULL << (HqlsqlParser::T_IF - 128))
      | (1ULL << (HqlsqlParser::T_IGNORE - 128))
      | (1ULL << (HqlsqlParser::T_IMMEDIATE - 128))
      | (1ULL << (HqlsqlParser::T_IN - 128))
      | (1ULL << (HqlsqlParser::T_INCLUDE - 128))
      | (1ULL << (HqlsqlParser::T_INDEX - 128))
      | (1ULL << (HqlsqlParser::T_INITRANS - 128))
      | (1ULL << (HqlsqlParser::T_INNER - 128))
      | (1ULL << (HqlsqlParser::T_INOUT - 128))
      | (1ULL << (HqlsqlParser::T_INSERT - 128))
      | (1ULL << (HqlsqlParser::T_INT - 128))
      | (1ULL << (HqlsqlParser::T_INT2 - 128))
      | (1ULL << (HqlsqlParser::T_INT4 - 128))
      | (1ULL << (HqlsqlParser::T_INT8 - 128))
      | (1ULL << (HqlsqlParser::T_INTEGER - 128))
      | (1ULL << (HqlsqlParser::T_INTERSECT - 128))
      | (1ULL << (HqlsqlParser::T_INTO - 128))
      | (1ULL << (HqlsqlParser::T_INVOKER - 128))
      | (1ULL << (HqlsqlParser::T_IS - 128))
      | (1ULL << (HqlsqlParser::T_ISOPEN - 128))
      | (1ULL << (HqlsqlParser::T_ITEMS - 128))
      | (1ULL << (HqlsqlParser::T_JOIN - 128))
      | (1ULL << (HqlsqlParser::T_KEEP - 128))
      | (1ULL << (HqlsqlParser::T_KEY - 128))
      | (1ULL << (HqlsqlParser::T_KEYS - 128))
      | (1ULL << (HqlsqlParser::T_LANGUAGE - 128))
      | (1ULL << (HqlsqlParser::T_LEAVE - 128))
      | (1ULL << (HqlsqlParser::T_LEFT - 128))
      | (1ULL << (HqlsqlParser::T_LIKE - 128))
      | (1ULL << (HqlsqlParser::T_LINES - 128))
      | (1ULL << (HqlsqlParser::T_LOCAL - 128))
      | (1ULL << (HqlsqlParser::T_LOCATION - 128))
      | (1ULL << (HqlsqlParser::T_LOCATOR - 128))
      | (1ULL << (HqlsqlParser::T_LOCATORS - 128))
      | (1ULL << (HqlsqlParser::T_LOCKS - 128))
      | (1ULL << (HqlsqlParser::T_LOG - 128))
      | (1ULL << (HqlsqlParser::T_LOGGED - 128))
      | (1ULL << (HqlsqlParser::T_LOGGING - 128))
      | (1ULL << (HqlsqlParser::T_LOOP - 128))
      | (1ULL << (HqlsqlParser::T_MAP - 128))
      | (1ULL << (HqlsqlParser::T_MATCHED - 128))
      | (1ULL << (HqlsqlParser::T_MAX - 128))
      | (1ULL << (HqlsqlParser::T_MAXTRANS - 128))
      | (1ULL << (HqlsqlParser::T_MERGE - 128))
      | (1ULL << (HqlsqlParser::T_MESSAGE_TEXT - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECOND - 128))
      | (1ULL << (HqlsqlParser::T_MICROSECONDS - 128))
      | (1ULL << (HqlsqlParser::T_MIN - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (HqlsqlParser::T_MULTISET - 192))
      | (1ULL << (HqlsqlParser::T_NCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NEW - 192))
      | (1ULL << (HqlsqlParser::T_NVARCHAR - 192))
      | (1ULL << (HqlsqlParser::T_NO - 192))
      | (1ULL << (HqlsqlParser::T_NOCOUNT - 192))
      | (1ULL << (HqlsqlParser::T_NOCOMPRESS - 192))
      | (1ULL << (HqlsqlParser::T_NOLOGGING - 192))
      | (1ULL << (HqlsqlParser::T_NONE - 192))
      | (1ULL << (HqlsqlParser::T_NOT - 192))
      | (1ULL << (HqlsqlParser::T_NOTFOUND - 192))
      | (1ULL << (HqlsqlParser::T_NUMERIC - 192))
      | (1ULL << (HqlsqlParser::T_NUMBER - 192))
      | (1ULL << (HqlsqlParser::T_OBJECT - 192))
      | (1ULL << (HqlsqlParser::T_OFF - 192))
      | (1ULL << (HqlsqlParser::T_ON - 192))
      | (1ULL << (HqlsqlParser::T_ONLY - 192))
      | (1ULL << (HqlsqlParser::T_OPEN - 192))
      | (1ULL << (HqlsqlParser::T_OR - 192))
      | (1ULL << (HqlsqlParser::T_OUT - 192))
      | (1ULL << (HqlsqlParser::T_OUTER - 192))
      | (1ULL << (HqlsqlParser::T_OVERWRITE - 192))
      | (1ULL << (HqlsqlParser::T_OWNER - 192))
      | (1ULL << (HqlsqlParser::T_PACKAGE - 192))
      | (1ULL << (HqlsqlParser::T_PARTITION - 192))
      | (1ULL << (HqlsqlParser::T_PCTFREE - 192))
      | (1ULL << (HqlsqlParser::T_PCTUSED - 192))
      | (1ULL << (HqlsqlParser::T_PRECISION - 192))
      | (1ULL << (HqlsqlParser::T_PRESERVE - 192))
      | (1ULL << (HqlsqlParser::T_PRIMARY - 192))
      | (1ULL << (HqlsqlParser::T_PRINT - 192))
      | (1ULL << (HqlsqlParser::T_PROC - 192))
      | (1ULL << (HqlsqlParser::T_PROCEDURE - 192))
      | (1ULL << (HqlsqlParser::T_QUALIFY - 192))
      | (1ULL << (HqlsqlParser::T_QUERY_BAND - 192))
      | (1ULL << (HqlsqlParser::T_QUIT - 192))
      | (1ULL << (HqlsqlParser::T_QUOTED_IDENTIFIER - 192))
      | (1ULL << (HqlsqlParser::T_RAISE - 192))
      | (1ULL << (HqlsqlParser::T_REAL - 192))
      | (1ULL << (HqlsqlParser::T_REFERENCES - 192))
      | (1ULL << (HqlsqlParser::T_REGEXP - 192))
      | (1ULL << (HqlsqlParser::T_REPLACE - 192))
      | (1ULL << (HqlsqlParser::T_RESIGNAL - 192))
      | (1ULL << (HqlsqlParser::T_RESTRICT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT - 192))
      | (1ULL << (HqlsqlParser::T_RESULT_SET_LOCATOR - 192))
      | (1ULL << (HqlsqlParser::T_RETURN - 192))
      | (1ULL << (HqlsqlParser::T_RETURNS - 192))
      | (1ULL << (HqlsqlParser::T_REVERSE - 192))
      | (1ULL << (HqlsqlParser::T_RIGHT - 192))
      | (1ULL << (HqlsqlParser::T_RLIKE - 192))
      | (1ULL << (HqlsqlParser::T_ROLLBACK - 192))
      | (1ULL << (HqlsqlParser::T_ROW - 192))
      | (1ULL << (HqlsqlParser::T_ROWS - 192))
      | (1ULL << (HqlsqlParser::T_ROW_COUNT - 192))
      | (1ULL << (HqlsqlParser::T_RR - 192))
      | (1ULL << (HqlsqlParser::T_RS - 192))
      | (1ULL << (HqlsqlParser::T_PWD - 192))
      | (1ULL << (HqlsqlParser::T_TRIM - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (HqlsqlParser::T_SCHEMA - 256))
      | (1ULL << (HqlsqlParser::T_SECOND - 256))
      | (1ULL << (HqlsqlParser::T_SECONDS - 256))
      | (1ULL << (HqlsqlParser::T_SECURITY - 256))
      | (1ULL << (HqlsqlParser::T_SEGMENT - 256))
      | (1ULL << (HqlsqlParser::T_SELECT - 256))
      | (1ULL << (HqlsqlParser::T_SESSION - 256))
      | (1ULL << (HqlsqlParser::T_SESSIONS - 256))
      | (1ULL << (HqlsqlParser::T_SETS - 256))
      | (1ULL << (HqlsqlParser::T_SHARE - 256))
      | (1ULL << (HqlsqlParser::T_SIGNAL - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_DOUBLE - 256))
      | (1ULL << (HqlsqlParser::T_SIMPLE_FLOAT - 256))
      | (1ULL << (HqlsqlParser::T_SMALLDATETIME - 256))
      | (1ULL << (HqlsqlParser::T_SMALLINT - 256))
      | (1ULL << (HqlsqlParser::T_SQL - 256))
      | (1ULL << (HqlsqlParser::T_SQLEXCEPTION - 256))
      | (1ULL << (HqlsqlParser::T_SQLINSERT - 256))
      | (1ULL << (HqlsqlParser::T_SQLSTATE - 256))
      | (1ULL << (HqlsqlParser::T_SQLWARNING - 256))
      | (1ULL << (HqlsqlParser::T_STATS - 256))
      | (1ULL << (HqlsqlParser::T_STATISTICS - 256))
      | (1ULL << (HqlsqlParser::T_STEP - 256))
      | (1ULL << (HqlsqlParser::T_STORAGE - 256))
      | (1ULL << (HqlsqlParser::T_STORED - 256))
      | (1ULL << (HqlsqlParser::T_STRING - 256))
      | (1ULL << (HqlsqlParser::T_SUBDIR - 256))
      | (1ULL << (HqlsqlParser::T_SUBSTRING - 256))
      | (1ULL << (HqlsqlParser::T_SUM - 256))
      | (1ULL << (HqlsqlParser::T_SUMMARY - 256))
      | (1ULL << (HqlsqlParser::T_SYS_REFCURSOR - 256))
      | (1ULL << (HqlsqlParser::T_TABLE - 256))
      | (1ULL << (HqlsqlParser::T_TABLESPACE - 256))
      | (1ULL << (HqlsqlParser::T_TEMPORARY - 256))
      | (1ULL << (HqlsqlParser::T_TERMINATED - 256))
      | (1ULL << (HqlsqlParser::T_TEXTIMAGE_ON - 256))
      | (1ULL << (HqlsqlParser::T_THEN - 256))
      | (1ULL << (HqlsqlParser::T_TIMESTAMP - 256))
      | (1ULL << (HqlsqlParser::T_TITLE - 256))
      | (1ULL << (HqlsqlParser::T_TO - 256))
      | (1ULL << (HqlsqlParser::T_TOP - 256))
      | (1ULL << (HqlsqlParser::T_TRANSACTION - 256))
      | (1ULL << (HqlsqlParser::T_TRUE - 256))
      | (1ULL << (HqlsqlParser::T_TRUNCATE - 256))
      | (1ULL << (HqlsqlParser::T_TYPE - 256))
      | (1ULL << (HqlsqlParser::T_UNIQUE - 256))
      | (1ULL << (HqlsqlParser::T_UPDATE - 256))
      | (1ULL << (HqlsqlParser::T_UR - 256))
      | (1ULL << (HqlsqlParser::T_USE - 256))
      | (1ULL << (HqlsqlParser::T_USING - 256))
      | (1ULL << (HqlsqlParser::T_VALUE - 256))
      | (1ULL << (HqlsqlParser::T_VALUES - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (HqlsqlParser::T_VAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR - 320))
      | (1ULL << (HqlsqlParser::T_VARCHAR2 - 320))
      | (1ULL << (HqlsqlParser::T_VARYING - 320))
      | (1ULL << (HqlsqlParser::T_VOLATILE - 320))
      | (1ULL << (HqlsqlParser::T_WHILE - 320))
      | (1ULL << (HqlsqlParser::T_WITH - 320))
      | (1ULL << (HqlsqlParser::T_WITHOUT - 320))
      | (1ULL << (HqlsqlParser::T_WORK - 320))
      | (1ULL << (HqlsqlParser::T_XACT_ABORT - 320))
      | (1ULL << (HqlsqlParser::T_XML - 320))
      | (1ULL << (HqlsqlParser::T_YES - 320))
      | (1ULL << (HqlsqlParser::T_ARRAY - 320))
      | (1ULL << (HqlsqlParser::T_STRUCT - 320))
      | (1ULL << (HqlsqlParser::T_SERDE - 320))
      | (1ULL << (HqlsqlParser::T_SEQUENCEFILE - 320))
      | (1ULL << (HqlsqlParser::T_TEXTFILE - 320))
      | (1ULL << (HqlsqlParser::T_RCFILE - 320))
      | (1ULL << (HqlsqlParser::T_ORC - 320))
      | (1ULL << (HqlsqlParser::T_PARQUET - 320))
      | (1ULL << (HqlsqlParser::T_AVRO - 320))
      | (1ULL << (HqlsqlParser::T_JSONFILE - 320))
      | (1ULL << (HqlsqlParser::T_INPUTFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_FILEFORMAT - 320))
      | (1ULL << (HqlsqlParser::T_T - 320))
      | (1ULL << (HqlsqlParser::T_S - 320))
      | (1ULL << (HqlsqlParser::T_ACTIVITY_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_CUME_DIST - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_DATE - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_TIMESTAMP - 320))
      | (1ULL << (HqlsqlParser::T_CURRENT_USER - 320))
      | (1ULL << (HqlsqlParser::T_DENSE_RANK - 320))
      | (1ULL << (HqlsqlParser::T_FIRST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LAG - 320))
      | (1ULL << (HqlsqlParser::T_LAST_VALUE - 320))
      | (1ULL << (HqlsqlParser::T_LEAD - 320))
      | (1ULL << (HqlsqlParser::T_PART_COUNT - 320))
      | (1ULL << (HqlsqlParser::T_PART_LOC - 320))
      | (1ULL << (HqlsqlParser::T_RANK - 320))
      | (1ULL << (HqlsqlParser::T_ROW_NUMBER - 320))
      | (1ULL << (HqlsqlParser::T_STDEV - 320))
      | (1ULL << (HqlsqlParser::T_STD - 320))
      | (1ULL << (HqlsqlParser::T_SYSDATE - 320))
      | (1ULL << (HqlsqlParser::T_VARIANCE - 320))
      | (1ULL << (HqlsqlParser::T_USER - 320))
      | (1ULL << (HqlsqlParser::T_PURGE - 320)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 384)) & ((1ULL << (HqlsqlParser::T_BUCKETS - 384))
      | (1ULL << (HqlsqlParser::T_SKEWED - 384))
      | (1ULL << (HqlsqlParser::T_DIRECTORIES - 384))
      | (1ULL << (HqlsqlParser::T_SERDEPROPERTIES - 384))
      | (1ULL << (HqlsqlParser::T_RENAME - 384))
      | (1ULL << (HqlsqlParser::T_SORTED - 384))
      | (1ULL << (HqlsqlParser::T_SORT - 384))
      | (1ULL << (HqlsqlParser::T_CHANGE - 384))
      | (1ULL << (HqlsqlParser::T_EXCHANGE - 384))
      | (1ULL << (HqlsqlParser::T_RECOVER - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONS - 384))
      | (1ULL << (HqlsqlParser::T_PROTECTION - 384))
      | (1ULL << (HqlsqlParser::T_ARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_UNARCHIVE - 384))
      | (1ULL << (HqlsqlParser::T_TOUCH - 384))
      | (1ULL << (HqlsqlParser::T_OFFLINE - 384))
      | (1ULL << (HqlsqlParser::T_NO_DROP - 384))
      | (1ULL << (HqlsqlParser::T_COMPACT - 384))
      | (1ULL << (HqlsqlParser::T_CONCATENATE - 384))
      | (1ULL << (HqlsqlParser::T_WAIT - 384))
      | (1ULL << (HqlsqlParser::T_COLUMNS - 384))
      | (1ULL << (HqlsqlParser::T_FIRST - 384))
      | (1ULL << (HqlsqlParser::T_LAST - 384))
      | (1ULL << (HqlsqlParser::T_NULLS - 384))
      | (1ULL << (HqlsqlParser::T_AFTER - 384))
      | (1ULL << (HqlsqlParser::T_MATERIALIZED - 384))
      | (1ULL << (HqlsqlParser::T_REWRITE - 384))
      | (1ULL << (HqlsqlParser::T_PARTITIONED - 384))
      | (1ULL << (HqlsqlParser::T_DISTRIBUTED - 384))
      | (1ULL << (HqlsqlParser::T_MACRO - 384))
      | (1ULL << (HqlsqlParser::T_SHOW - 384))
      | (1ULL << (HqlsqlParser::T_EXTENDED - 384))
      | (1ULL << (HqlsqlParser::T_FORMATTED - 384))
      | (1ULL << (HqlsqlParser::T_SEMI - 384))
      | (1ULL << (HqlsqlParser::T_CROSS - 384))
      | (1ULL << (HqlsqlParser::T_LATERAL - 384))
      | (1ULL << (HqlsqlParser::T_RELOAD - 384))
      | (1ULL << (HqlsqlParser::T_LOAD - 384))
      | (1ULL << (HqlsqlParser::T_INPATH - 384))
      | (1ULL << (HqlsqlParser::T_PRINCIPALS - 384))
      | (1ULL << (HqlsqlParser::T_COMPACTIONS - 384))
      | (1ULL << (HqlsqlParser::T_CONF - 384))
      | (1ULL << (HqlsqlParser::T_ADMIN - 384))
      | (1ULL << (HqlsqlParser::T_OPTION - 384))
      | (1ULL << (HqlsqlParser::T_PRIVILEGES - 384))
      | (1ULL << (HqlsqlParser::T_LOCK - 384))
      | (1ULL << (HqlsqlParser::T_SHOW_DATABASE - 384))
      | (1ULL << (HqlsqlParser::T_COMPUTE - 384))
      | (1ULL << (HqlsqlParser::T_CACHE - 384))
      | (1ULL << (HqlsqlParser::T_METADATA - 384))
      | (1ULL << (HqlsqlParser::T_NOSCAN - 384))
      | (1ULL << (HqlsqlParser::T_UNIONTYPE - 384))
      | (1ULL << (HqlsqlParser::T_ANALYZE - 384))
      | (1ULL << (HqlsqlParser::T_EXPLAIN - 384))
      | (1ULL << (HqlsqlParser::T_CBO - 384))
      | (1ULL << (HqlsqlParser::T_AST - 384))
      | (1ULL << (HqlsqlParser::T_DEPENDENCY - 384))
      | (1ULL << (HqlsqlParser::T_AUTHORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_VECTORIZATION - 384))
      | (1ULL << (HqlsqlParser::T_COST - 384))
      | (1ULL << (HqlsqlParser::T_JOINCOST - 384))
      | (1ULL << (HqlsqlParser::T_OPERATOR - 384))
      | (1ULL << (HqlsqlParser::T_EXPRESSION - 384))
      | (1ULL << (HqlsqlParser::T_DETAIL - 384)))) != 0) || ((((_la - 448) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 448)) & ((1ULL << (HqlsqlParser::T_UNBOUNDED - 448))
      | (1ULL << (HqlsqlParser::T_PRECEDING - 448))
      | (1ULL << (HqlsqlParser::T_FOLLOWING - 448))
      | (1ULL << (HqlsqlParser::T_RANGE - 448))
      | (1ULL << (HqlsqlParser::T_YEAR - 448))
      | (1ULL << (HqlsqlParser::T_MONTH - 448))
      | (1ULL << (HqlsqlParser::T_MINUTE - 448))
      | (1ULL << (HqlsqlParser::T_TIME - 448))
      | (1ULL << (HqlsqlParser::T_ZONE - 448)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool HqlsqlParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 5: return block_endSempred(dynamic_cast<Block_endContext *>(context), predicateIndex);
    case 280: return bool_exprSempred(dynamic_cast<Bool_exprContext *>(context), predicateIndex);
    case 290: return exprSempred(dynamic_cast<ExprContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool HqlsqlParser::block_endSempred(Block_endContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return !(strcasecmp(_input->LT(2)->getText().c_str(), "TRANSACTION") == 0);

  default:
    break;
  }
  return true;
}

bool HqlsqlParser::bool_exprSempred(Bool_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool HqlsqlParser::exprSempred(ExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 20);
    case 3: return precpred(_ctx, 19);
    case 4: return precpred(_ctx, 18);
    case 5: return precpred(_ctx, 17);
    case 6: return precpred(_ctx, 16);
    case 7: return precpred(_ctx, 15);
    case 8: return precpred(_ctx, 14);
    case 9: return precpred(_ctx, 13);
    case 10: return precpred(_ctx, 12);
    case 11: return precpred(_ctx, 21);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> HqlsqlParser::_decisionToDFA;
atn::PredictionContextCache HqlsqlParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN HqlsqlParser::_atn;
std::vector<uint16_t> HqlsqlParser::_serializedATN;

std::vector<std::string> HqlsqlParser::_ruleNames = {
  "program", "block", "block_content", "begin_end_block", "single_block_stmt", 
  "block_end", "proc_block", "stmt", "semicolon_stmt", "exception_block", 
  "exception_block_item", "assignment_stmt", "assignment_stmt_item", "assignment_stmt_single_item", 
  "assignment_stmt_multiple_item", "assignment_stmt_select_item", "assignment_expr", 
  "assignment_reserverd_words", "allocate_cursor_stmt", "associate_locator_stmt", 
  "begin_transaction_stmt", "abort_transactions_stmt", "break_stmt", "call_stmt", 
  "declare_stmt", "declare_block", "declare_block_inplace", "declare_stmt_item", 
  "declare_var_item", "declare_condition_item", "declare_cursor_item", "cursor_with_return", 
  "cursor_without_return", "declare_handler_item", "declare_temporary_table_item", 
  "create_table_stmt", "create_local_temp_table_stmt", "create_table_definition", 
  "create_table_columns", "create_table_columns_item", "column_name", "old_column_name", 
  "new_column_name", "constraint_specification", "constraint_spec", "constraint_name", 
  "paren_column_list", "column_name_list", "column_name_ele", "paren_col_values", 
  "column_constrains_specification", "default_value", "create_table_column_comment", 
  "create_table_column_cons", "create_table_fk_action", "create_table_preoptions", 
  "create_table_preoptions_item", "create_table_preoptions_td_item", "create_table_options", 
  "create_table_option", "partition_by_part", "cluster_by_part", "skewed_by_part", 
  "col_values", "stored_as_part", "row_format_part", "file_format", "row_format", 
  "terminated_by_part", "terminated_by", "by_char", "create_table_options_hive_item", 
  "create_table_hive_row_format", "create_table_hive_row_format_fields", 
  "create_table_options_mssql_item", "create_view_stmt", "create_view_options", 
  "create_materialized_view_option", "create_macro_stmt", "create_role_stmt", 
  "grant_revoke_role_stmt", "with_option_for", "role_name", "role_names", 
  "grant_revoke_privilege_stmt", "privilege_columns", "priv_type", "object_specification", 
  "alter_stmt", "alter_option", "alter_table_stmt", "alter_table_item_options", 
  "alter_table_properties", "set_tblproperties", "add_serde_properties", 
  "serde_class_name", "table_storage_properties", "table_skewed_properties", 
  "table_constraints", "add_constraint_property", "change_column_property", 
  "drop_constraint_property", "new_table_name", "alter_table_partition_properties", 
  "add_partition_property", "add_partition_property_options", "add_partition_property_option", 
  "recover_partition_property", "drop_partition_property", "archive_partition_property", 
  "alter_table_or_partition_options", "alter_table_column_properties", "show_stmt", 
  "principal_specification", "principal_specifications", "import_stmt", 
  "export_stmt", "explain_stmt", "dtype", "data_type", "primitive_type", 
  "array_type", "map_type", "struct_type", "struct_type_type", "union_type", 
  "dtype_len", "dtype_attr", "dtype_default", "create_database_stmt", "create_database_option", 
  "comment_part", "location_part", "property_values", "property_values_part", 
  "create_function_stmt", "create_function_procedure", "create_temporary_function", 
  "create_permanent_function", "permanent_function_options", "permanent_function_option", 
  "reload_function", "create_function_return", "create_package_stmt", "package_spec", 
  "package_spec_item", "create_package_body_stmt", "package_body", "package_body_item", 
  "create_procedure_stmt", "create_routine_params", "create_routine_param_item", 
  "create_routine_options", "create_routine_option", "drop_stmt", "end_transaction_stmt", 
  "exec_stmt", "if_stmt", "if_plsql_stmt", "if_tsql_stmt", "if_bteq_stmt", 
  "elseif_block", "else_block", "include_stmt", "load_file_stmt", "insert_stmt", 
  "insert_into_table_from_sql", "insert_into_tables_from_query", "insert_tables_overwrite_into", 
  "insert_into_files_from_query", "insert_into_mutiples", "insert_stmt_cols", 
  "insert_stmt_rows", "insert_stmt_row", "insert_directory_stmt", "exit_stmt", 
  "get_diag_stmt", "get_diag_stmt_item", "get_diag_stmt_exception_item", 
  "get_diag_stmt_rowcount_item", "leave_stmt", "map_object_stmt", "open_stmt", 
  "fetch_stmt", "collect_stats_stmt", "collect_stats_clause", "close_stmt", 
  "cmp_stmt", "cmp_source", "copy_from_local_stmt", "copy_stmt", "copy_source", 
  "copy_target", "copy_option", "copy_file_option", "commit_stmt", "create_index_stmt", 
  "create_index_col", "index_storage_clause", "index_mssql_storage_clause", 
  "print_stmt", "quit_stmt", "raise_stmt", "resignal_stmt", "return_stmt", 
  "rollback_stmt", "set_session_option", "set_current_schema_option", "set_mssql_session_option", 
  "set_teradata_session_option", "signal_stmt", "summary_stmt", "truncate_table_stmt", 
  "partition_assignment_list", "partition_spec", "use_stmt", "values_into_stmt", 
  "while_stmt", "for_cursor_stmt", "for_range_stmt", "label", "label_pattern", 
  "using_clause", "select_stmt", "cte_select_stmt", "common_table_expression", 
  "cte_select_cols", "cte_select_col", "fullselect_stmt", "fullselect_stmt_item", 
  "fullselect_set_clause", "subselect_stmt", "select_list", "select_list_set", 
  "select_list_limit", "select_list_item", "select_list_item_normal", "select_list_item_asterisk", 
  "select_list_use_option", "from_clause", "from_table_clause", "from_table_name_clause", 
  "from_table_clause_option", "lateral_view", "table_sample_clause", "table_sampling", 
  "block_sampling", "block_sampling_option", "numbers", "size_types", "from_subselect_clause", 
  "from_join_clause", "from_join_type_clause", "from_alias_clause", "on_condition", 
  "table_name", "view_name", "db_name", "select_option", "window_clause", 
  "where_clause", "group_by_clause", "having_clause", "limit_clause", "order_by_clause", 
  "order_by_clause_option", "col_order", "col_null_order", "cluster_by_clause", 
  "update_stmt", "update_assignment", "update_upsert", "merge_stmt", "merge_table", 
  "merge_condition", "merge_action", "analyze_table_stmt", "delete_stmt", 
  "delete_alias", "describe_stmt", "bool_expr", "bool_expr_atom", "bool_expr_unary", 
  "bool_expr_single_in", "bool_expr_multi_in", "paren_expr_list", "expr_list", 
  "bool_expr_binary", "bool_expr_logical_operator", "bool_expr_binary_operator", 
  "expr", "expr_unary", "expr_atom", "expr_interval", "interval_item", "expr_concat", 
  "expr_concat_item", "expr_case", "expr_case_simple", "expr_case_searched", 
  "expr_cursor_attribute", "expr_agg_window_func", "expr_func_all_distinct", 
  "expr_func_over_clause", "expr_func_over_clause_options", "expr_func_partition_by_clause", 
  "func_partition_clause_option", "func_partition_clause_part", "expr_spec_func", 
  "expr_func", "expr_func_params", "func_param", "expr_select", "expr_file", 
  "hive", "hive_item", "host", "host_cmd", "host_stmt", "file_name", "file_pattern", 
  "date_literal", "timestamp_literal", "ident", "string", "int_number", 
  "dec_number", "bool_literal", "null_const", "non_reserved_words"
};

std::vector<std::string> HqlsqlParser::_literalNames = {
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
  "", "", "", "", "", "", "", "", "", "", "", "", "", "'+'", "':'", "','", 
  "'|'", "'/'", "'..'", "'='", "'=='", "'<>'", "'!='", "'>'", "'>='", "'<'", 
  "'<='", "'*'", "'{'", "'('", "'['", "'}'", "')'", "']'", "';'", "'-'", 
  "'@'", "'#'", "'.'", "'%'", "'!'", "'\\'", "'_'", "'&'", "'^'"
};

std::vector<std::string> HqlsqlParser::_symbolicNames = {
  "", "T_ACTION", "T_ADD", "T_ALL", "T_ALLOCATE", "T_ALTER", "T_AND", "T_ANSI_NULLS", 
  "T_ANSI_PADDING", "T_AS", "T_ASC", "T_ASSOCIATE", "T_AT", "T_AUTO_INCREMENT", 
  "T_AVG", "T_BATCHSIZE", "T_BEGIN", "T_BETWEEN", "T_BIGINT", "T_BINARY_DOUBLE", 
  "T_BINARY_FLOAT", "T_BINARY_INTEGER", "T_BIT", "T_BODY", "T_BREAK", "T_BY", 
  "T_BYTE", "T_CALL", "T_CALLER", "T_CASCADE", "T_CASE", "T_CASESPECIFIC", 
  "T_CAST", "T_CHAR", "T_CHARACTER", "T_CHARSET", "T_CLIENT", "T_CLOSE", 
  "T_CLUSTERED", "T_CLUSTER", "T_CMP", "T_COLLECT", "T_COLLECTION", "T_COLUMN", 
  "T_COMMENT", "T_CONSTANT", "T_COMMIT", "T_COMPRESS", "T_CONCAT", "T_CONDITION", 
  "T_CONSTRAINT", "T_CONTINUE", "T_COPY", "T_COUNT", "T_COUNT_BIG", "T_CREATE", 
  "T_CREATION", "T_CREATOR", "T_CS", "T_CURRENT", "T_CURRENT_SCHEMA", "T_CURSOR", 
  "T_DATABASE", "T_DATABASES", "T_DATA", "T_DATE", "T_DATETIME", "T_DAY", 
  "T_DAYS", "T_DEC", "T_DECIMAL", "T_DECLARE", "T_DEFAULT", "T_DEFERRED", 
  "T_REBUILD", "T_DEFINED", "T_DEFINER", "T_DEFINITION", "T_DELETE", "T_DELIMITED", 
  "T_DELIMITER", "T_DESC", "T_DESCRIBE", "T_DIAGNOSTICS", "T_DIR", "T_DIRECTORY", 
  "T_DISTINCT", "T_DISTRIBUTE", "T_DO", "T_DOUBLE", "T_DROP", "T_DYNAMIC", 
  "T_ELSE", "T_ELSEIF", "T_ELSIF", "T_ENABLE", "T_DISABLE", "T_CHECK", "T_NOVALIDATE", 
  "T_RELY", "T_NORELY", "T_END", "T_ENGINE", "T_ESCAPED", "T_EXCEPT", "T_EXEC", 
  "T_EXECUTE", "T_EXCEPTION", "T_EXCLUSIVE", "T_EXISTS", "T_EXIT", "T_FALLBACK", 
  "T_FALSE", "T_FETCH", "T_FIELDS", "T_FILE", "T_FILES", "T_JAR", "T_FLOAT", 
  "T_FOR", "T_FOREIGN", "T_FORMAT", "T_FOUND", "T_FROM", "T_FULL", "T_FUNCTION", 
  "T_GET", "T_GLOBAL", "T_GO", "T_GRANT", "T_REVOKE", "T_GROUP", "T_ROLE", 
  "T_ROLES", "T_HANDLER", "T_HASH", "T_HAVING", "T_HDFS", "T_HIVE", "T_HOST", 
  "T_IDENTITY", "T_IF", "T_IGNORE", "T_IMMEDIATE", "T_IN", "T_INCLUDE", 
  "T_INDEX", "T_INDEXES", "T_INITRANS", "T_INNER", "T_INOUT", "T_INSERT", 
  "T_INT", "T_INT2", "T_INT4", "T_INT8", "T_INTEGER", "T_INTERSECT", "T_INTERVAL", 
  "T_INTO", "T_INVOKER", "T_IS", "T_ISOPEN", "T_ITEMS", "T_JOIN", "T_KEEP", 
  "T_KEY", "T_KEYS", "T_LANGUAGE", "T_LEAVE", "T_LEFT", "T_LIKE", "T_LIMIT", 
  "T_LINES", "T_LOCAL", "T_LOCATION", "T_LOCATOR", "T_LOCATORS", "T_LOCKS", 
  "T_LOG", "T_LOGGED", "T_LOGGING", "T_LOOP", "T_MAP", "T_MATCHED", "T_MAX", 
  "T_MAXTRANS", "T_MERGE", "T_MESSAGE_TEXT", "T_MICROSECOND", "T_MICROSECONDS", 
  "T_MIN", "T_MULTISET", "T_NCHAR", "T_NEW", "T_NVARCHAR", "T_NO", "T_NOCOUNT", 
  "T_NOCOMPRESS", "T_NOLOGGING", "T_NONE", "T_NOT", "T_NOTFOUND", "T_NULL", 
  "T_NUMERIC", "T_NUMBER", "T_OBJECT", "T_OFF", "T_ON", "T_ONLY", "T_OPEN", 
  "T_OR", "T_ORDER", "T_OUT", "T_OUTER", "T_OVER", "T_OVERWRITE", "T_OWNER", 
  "T_PACKAGE", "T_PARTITION", "T_PCTFREE", "T_PCTUSED", "T_PLS_INTEGER", 
  "T_PRECISION", "T_PRESERVE", "T_PRIMARY", "T_PRINT", "T_PROC", "T_PROCEDURE", 
  "T_QUALIFY", "T_QUERY_BAND", "T_QUIT", "T_QUOTED_IDENTIFIER", "T_RAISE", 
  "T_REAL", "T_REFERENCES", "T_REGEXP", "T_REPLACE", "T_RESIGNAL", "T_RESTRICT", 
  "T_RESULT", "T_RESULT_SET_LOCATOR", "T_RETURN", "T_RETURNS", "T_REVERSE", 
  "T_RIGHT", "T_RLIKE", "T_ROLLBACK", "T_ROW", "T_ROWS", "T_ROWTYPE", "T_ROW_COUNT", 
  "T_RR", "T_RS", "T_PWD", "T_TRIM", "T_SCHEMA", "T_SCHEMAS", "T_SECOND", 
  "T_SECONDS", "T_SECURITY", "T_SEGMENT", "T_SELECT", "T_SET", "T_RESET", 
  "T_SESSION", "T_SESSIONS", "T_SETS", "T_SHARE", "T_SIGNAL", "T_SIMPLE_DOUBLE", 
  "T_SIMPLE_FLOAT", "T_SIMPLE_INTEGER", "T_SMALLDATETIME", "T_SMALLINT", 
  "T_SQL", "T_SQLEXCEPTION", "T_SQLINSERT", "T_SQLSTATE", "T_SQLWARNING", 
  "T_STATS", "T_STATISTICS", "T_STEP", "T_STORAGE", "T_STORED", "T_STRING", 
  "T_BINARY", "T_SUBDIR", "T_SUBSTRING", "T_SUM", "T_SUMMARY", "T_SYS_REFCURSOR", 
  "T_TABLE", "T_TABLES", "T_VIEW", "T_VIEWS", "T_TABLESPACE", "T_TEMPORARY", 
  "T_EXTERNAL", "T_TERMINATED", "T_TEXTIMAGE_ON", "T_THEN", "T_TIMESTAMP", 
  "T_TINYINT", "T_TITLE", "T_TO", "T_TOP", "T_TRANSACTION", "T_TRANSACTIONS", 
  "T_TRUE", "T_TRUNCATE", "T_TYPE", "T_UNION", "T_UNIQUE", "T_UPDATE", "T_UR", 
  "T_USE", "T_USING", "T_VALUE", "T_VALUES", "T_VAR", "T_VARCHAR", "T_VARCHAR2", 
  "T_VARYING", "T_VOLATILE", "T_WHEN", "T_WHERE", "T_WHILE", "T_WITH", "T_WITHOUT", 
  "T_WORK", "T_XACT_ABORT", "T_ABORT", "T_XML", "T_YES", "T_ARRAY", "T_STRUCT", 
  "T_BOOLEAN", "T_LITERAL", "T_SERDE", "T_SEQUENCEFILE", "T_TEXTFILE", "T_RCFILE", 
  "T_ORC", "T_PARQUET", "T_AVRO", "T_JSONFILE", "T_INPUTFORMAT", "T_OUTPUTFORMAT", 
  "T_FILEFORMAT", "T_T", "T_S", "T_FUNCTIONS", "T_IMPORT", "T_EXPORT", "T_ACTIVITY_COUNT", 
  "T_CUME_DIST", "T_CURRENT_DATE", "T_CURRENT_TIMESTAMP", "T_CURRENT_USER", 
  "T_DENSE_RANK", "T_FIRST_VALUE", "T_LAG", "T_LAST_VALUE", "T_LEAD", "T_MAX_PART_STRING", 
  "T_MIN_PART_STRING", "T_MAX_PART_INT", "T_MIN_PART_INT", "T_MAX_PART_DATE", 
  "T_MIN_PART_DATE", "T_PART_COUNT", "T_PART_LOC", "T_RANK", "T_ROW_NUMBER", 
  "T_STDEV", "T_STD", "T_SYSDATE", "T_VARIANCE", "T_USER", "T_DBPROPERTIES", 
  "T_TBLPROPERTIES", "T_IDXPROPERTIES", "T_PURGE", "T_BUCKETS", "T_SKEWED", 
  "T_DIRECTORIES", "T_SERDEPROPERTIES", "T_RENAME", "T_SORTED", "T_SORT", 
  "T_CHANGE", "T_EXCHANGE", "T_RECOVER", "T_PARTITIONS", "T_PROTECTION", 
  "T_ARCHIVE", "T_UNARCHIVE", "T_TOUCH", "T_OFFLINE", "T_NO_DROP", "T_COMPACT", 
  "T_CONCATENATE", "T_WAIT", "T_COLUMNS", "T_FIRST", "T_LAST", "T_NULLS", 
  "T_AFTER", "T_MATERIALIZED", "T_REWRITE", "T_PARTITIONED", "T_DISTRIBUTED", 
  "T_MACRO", "T_SHOW", "T_EXTENDED", "T_FORMATTED", "T_SEMI", "T_CROSS", 
  "T_LATERAL", "T_RELOAD", "T_LOAD", "T_INPATH", "T_PRINCIPALS", "T_COMPACTIONS", 
  "T_CONF", "T_ADMIN", "T_OPTION", "T_PRIVILEGES", "T_LOCK", "T_SHOW_DATABASE", 
  "T_COMPUTE", "T_CACHE", "T_METADATA", "T_NOSCAN", "T_UNIONTYPE", "T_ANALYZE", 
  "T_EXPLAIN", "T_CBO", "T_AST", "T_DEPENDENCY", "T_AUTHORIZATION", "T_VECTORIZATION", 
  "T_COST", "T_JOINCOST", "T_OPERATOR", "T_EXPRESSION", "T_DETAIL", "T_UNBOUNDED", 
  "T_PRECEDING", "T_FOLLOWING", "T_RANGE", "T_TABLESAMPLE", "T_BUCKET", 
  "T_OF", "T_PERCENTS", "T_WINDOW", "T_DIV", "T_YEAR", "T_MONTH", "T_MINUTE", 
  "T_TIME", "T_ZONE", "T_ADD_SIGN", "T_COLON", "T_COMMA", "T_PIPE", "T_DIV_SIGN", 
  "T_DOT2", "T_EQUAL", "T_EQUAL2", "T_NOTEQUAL", "T_NOTEQUAL2", "T_GREATER", 
  "T_GREATEREQUAL", "T_LESS", "T_LESSEQUAL", "T_MUL", "T_OPEN_B", "T_OPEN_P", 
  "T_OPEN_SB", "T_CLOSE_B", "T_CLOSE_P", "T_CLOSE_SB", "T_SEMICOLON", "T_SUB", 
  "T_AT_SIGN", "T_POUND_SIGN", "T_PERIOD", "T_PERCENT", "T_EXCLAMATION", 
  "T_SLASH_SIGN", "T_UNDERLINE", "T_AND_SIGN", "T_EXPONENT", "L_ID", "L_S_STRING", 
  "L_D_STRING", "L_INT", "L_DEC", "L_WS", "L_M_COMMENT", "L_S_COMMENT", 
  "L_ALPHA", "L_DIGIT"
};

dfa::Vocabulary HqlsqlParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> HqlsqlParser::_tokenNames;

HqlsqlParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x1fa, 0x128e, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
       0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 
       0x9, 0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 
       0xa, 0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 
       0x4, 0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 
       0x11, 0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 
       0x14, 0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 
       0x17, 0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 
       0x1a, 0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 
       0x1d, 0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 
       0x20, 0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 
       0x23, 0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 
       0x26, 0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 
       0x29, 0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 
       0x2c, 0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 
       0x2f, 0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 
       0x32, 0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 
       0x35, 0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 
       0x38, 0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 
       0x3b, 0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 
       0x3e, 0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 
       0x41, 0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 
       0x44, 0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 
       0x47, 0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 
       0x4a, 0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 
       0x4d, 0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 
       0x50, 0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 
       0x53, 0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 
       0x56, 0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 
       0x59, 0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 
       0x5c, 0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 
       0x5f, 0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 
       0x62, 0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 
       0x65, 0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 
       0x68, 0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 
       0x6b, 0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 
       0x6e, 0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 
       0x71, 0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 
       0x74, 0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 
       0x77, 0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 
       0x7a, 0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 
       0x7d, 0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 
       0x80, 0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 
       0x83, 0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 
       0x86, 0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 
       0x89, 0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 
       0x8c, 0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 
       0x8f, 0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 
       0x92, 0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 
       0x95, 0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 
       0x98, 0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 
       0x9b, 0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 
       0x9e, 0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 
       0xa1, 0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 
       0xa4, 0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 
       0xa7, 0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 
       0xaa, 0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 
       0xad, 0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 
       0xb0, 0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 
       0xb3, 0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 
       0xb6, 0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 
       0xb9, 0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 
       0xbc, 0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 
       0xbf, 0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 
       0xc2, 0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 
       0xc5, 0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 
       0xc8, 0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 
       0xcb, 0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 
       0xce, 0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 
       0xd1, 0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 
       0xd4, 0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 
       0xd7, 0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 
       0xda, 0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 
       0xdd, 0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 
       0xe0, 0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 
       0xe3, 0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 
       0xe6, 0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 
       0xe9, 0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 
       0xec, 0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 
       0xef, 0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 
       0xf2, 0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 
       0xf5, 0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x4, 0xf7, 0x9, 0xf7, 0x4, 
       0xf8, 0x9, 0xf8, 0x4, 0xf9, 0x9, 0xf9, 0x4, 0xfa, 0x9, 0xfa, 0x4, 
       0xfb, 0x9, 0xfb, 0x4, 0xfc, 0x9, 0xfc, 0x4, 0xfd, 0x9, 0xfd, 0x4, 
       0xfe, 0x9, 0xfe, 0x4, 0xff, 0x9, 0xff, 0x4, 0x100, 0x9, 0x100, 0x4, 
       0x101, 0x9, 0x101, 0x4, 0x102, 0x9, 0x102, 0x4, 0x103, 0x9, 0x103, 
       0x4, 0x104, 0x9, 0x104, 0x4, 0x105, 0x9, 0x105, 0x4, 0x106, 0x9, 
       0x106, 0x4, 0x107, 0x9, 0x107, 0x4, 0x108, 0x9, 0x108, 0x4, 0x109, 
       0x9, 0x109, 0x4, 0x10a, 0x9, 0x10a, 0x4, 0x10b, 0x9, 0x10b, 0x4, 
       0x10c, 0x9, 0x10c, 0x4, 0x10d, 0x9, 0x10d, 0x4, 0x10e, 0x9, 0x10e, 
       0x4, 0x10f, 0x9, 0x10f, 0x4, 0x110, 0x9, 0x110, 0x4, 0x111, 0x9, 
       0x111, 0x4, 0x112, 0x9, 0x112, 0x4, 0x113, 0x9, 0x113, 0x4, 0x114, 
       0x9, 0x114, 0x4, 0x115, 0x9, 0x115, 0x4, 0x116, 0x9, 0x116, 0x4, 
       0x117, 0x9, 0x117, 0x4, 0x118, 0x9, 0x118, 0x4, 0x119, 0x9, 0x119, 
       0x4, 0x11a, 0x9, 0x11a, 0x4, 0x11b, 0x9, 0x11b, 0x4, 0x11c, 0x9, 
       0x11c, 0x4, 0x11d, 0x9, 0x11d, 0x4, 0x11e, 0x9, 0x11e, 0x4, 0x11f, 
       0x9, 0x11f, 0x4, 0x120, 0x9, 0x120, 0x4, 0x121, 0x9, 0x121, 0x4, 
       0x122, 0x9, 0x122, 0x4, 0x123, 0x9, 0x123, 0x4, 0x124, 0x9, 0x124, 
       0x4, 0x125, 0x9, 0x125, 0x4, 0x126, 0x9, 0x126, 0x4, 0x127, 0x9, 
       0x127, 0x4, 0x128, 0x9, 0x128, 0x4, 0x129, 0x9, 0x129, 0x4, 0x12a, 
       0x9, 0x12a, 0x4, 0x12b, 0x9, 0x12b, 0x4, 0x12c, 0x9, 0x12c, 0x4, 
       0x12d, 0x9, 0x12d, 0x4, 0x12e, 0x9, 0x12e, 0x4, 0x12f, 0x9, 0x12f, 
       0x4, 0x130, 0x9, 0x130, 0x4, 0x131, 0x9, 0x131, 0x4, 0x132, 0x9, 
       0x132, 0x4, 0x133, 0x9, 0x133, 0x4, 0x134, 0x9, 0x134, 0x4, 0x135, 
       0x9, 0x135, 0x4, 0x136, 0x9, 0x136, 0x4, 0x137, 0x9, 0x137, 0x4, 
       0x138, 0x9, 0x138, 0x4, 0x139, 0x9, 0x139, 0x4, 0x13a, 0x9, 0x13a, 
       0x4, 0x13b, 0x9, 0x13b, 0x4, 0x13c, 0x9, 0x13c, 0x4, 0x13d, 0x9, 
       0x13d, 0x4, 0x13e, 0x9, 0x13e, 0x4, 0x13f, 0x9, 0x13f, 0x4, 0x140, 
       0x9, 0x140, 0x4, 0x141, 0x9, 0x141, 0x4, 0x142, 0x9, 0x142, 0x4, 
       0x143, 0x9, 0x143, 0x4, 0x144, 0x9, 0x144, 0x4, 0x145, 0x9, 0x145, 
       0x4, 0x146, 0x9, 0x146, 0x4, 0x147, 0x9, 0x147, 0x4, 0x148, 0x9, 
       0x148, 0x4, 0x149, 0x9, 0x149, 0x4, 0x14a, 0x9, 0x14a, 0x4, 0x14b, 
       0x9, 0x14b, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x5, 
       0x3, 0x29c, 0xa, 0x3, 0x6, 0x3, 0x29e, 0xa, 0x3, 0xd, 0x3, 0xe, 0x3, 
       0x29f, 0x3, 0x4, 0x3, 0x4, 0x5, 0x4, 0x2a4, 0xa, 0x4, 0x3, 0x5, 0x5, 
       0x5, 0x2a7, 0xa, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x5, 0x5, 0x5, 0x2ac, 
       0xa, 0x5, 0x3, 0x5, 0x3, 0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x5, 
       0x6, 0x2b3, 0xa, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x5, 
       0x6, 0x2b9, 0xa, 0x6, 0x5, 0x6, 0x2bb, 0xa, 0x6, 0x3, 0x7, 0x3, 0x7, 
       0x3, 0x7, 0x3, 0x8, 0x3, 0x8, 0x6, 0x8, 0x2c2, 0xa, 0x8, 0xd, 0x8, 
       0xe, 0x8, 0x2c3, 0x3, 0x8, 0x5, 0x8, 0x2c7, 0xa, 0x8, 0x5, 0x8, 0x2c9, 
       0xa, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 
       0x9, 0x311, 0xa, 0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xb, 0x3, 0xb, 0x6, 
       0xb, 0x317, 0xa, 0xb, 0xd, 0xb, 0xe, 0xb, 0x318, 0x3, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 
       0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x7, 0xd, 0x327, 0xa, 0xd, 0xc, 
       0xd, 0xe, 0xd, 0x32a, 0xb, 0xd, 0x5, 0xd, 0x32c, 0xa, 0xd, 0x3, 0xe, 
       0x3, 0xe, 0x3, 0xe, 0x5, 0xe, 0x331, 0xa, 0xe, 0x3, 0xf, 0x3, 0xf, 
       0x5, 0xf, 0x335, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x7, 0xf, 
       0x33a, 0xa, 0xf, 0xc, 0xf, 0xe, 0xf, 0x33d, 0xb, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x343, 0xa, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x5, 0xf, 0x348, 0xa, 0xf, 0x3, 0x10, 0x3, 0x10, 0x3, 
       0x10, 0x3, 0x10, 0x7, 0x10, 0x34e, 0xa, 0x10, 0xc, 0x10, 0xe, 0x10, 
       0x351, 0xb, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x355, 0xa, 0x10, 
       0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x7, 0x10, 
       0x35c, 0xa, 0x10, 0xc, 0x10, 0xe, 0x10, 0x35f, 0xb, 0x10, 0x3, 0x10, 
       0x3, 0x10, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 
       0x7, 0x11, 0x368, 0xa, 0x11, 0xc, 0x11, 0xe, 0x11, 0x36b, 0xb, 0x11, 
       0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x36f, 0xa, 0x11, 0x3, 0x11, 0x5, 
       0x11, 0x372, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 
       0x3, 0x11, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x37b, 0xa, 0x12, 0x3, 
       0x12, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x380, 0xa, 0x12, 0x7, 0x12, 
       0x382, 0xa, 0x12, 0xc, 0x12, 0xe, 0x12, 0x385, 0xb, 0x12, 0x3, 0x12, 
       0x5, 0x12, 0x388, 0xa, 0x12, 0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 
       0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 
       0x14, 0x393, 0xa, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x15, 0x3, 0x15, 
       0x3, 0x15, 0x5, 0x15, 0x39a, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 
       0x15, 0x3, 0x15, 0x3, 0x15, 0x7, 0x15, 0x3a1, 0xa, 0x15, 0xc, 0x15, 
       0xe, 0x15, 0x3a4, 0xb, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 
       0x15, 0x3, 0x15, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x17, 0x3, 
       0x17, 0x3, 0x17, 0x6, 0x17, 0x3b1, 0xa, 0x17, 0xd, 0x17, 0xe, 0x17, 
       0x3b2, 0x3, 0x18, 0x3, 0x18, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x5, 0x19, 0x3bb, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 
       0x3bf, 0xa, 0x19, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x7, 
       0x1a, 0x3c5, 0xa, 0x1a, 0xc, 0x1a, 0xe, 0x1a, 0x3c8, 0xb, 0x1a, 0x3, 
       0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x7, 
       0x1b, 0x3d0, 0xa, 0x1b, 0xc, 0x1b, 0xe, 0x1b, 0x3d3, 0xb, 0x1b, 0x3, 
       0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x7, 0x1c, 0x3da, 
       0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x3dd, 0xb, 0x1c, 0x3, 0x1d, 0x3, 
       0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x5, 0x1d, 0x3e4, 0xa, 0x1d, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x7, 0x1e, 0x3e9, 0xa, 0x1e, 0xc, 
       0x1e, 0xe, 0x1e, 0x3ec, 0xb, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x3ef, 0xa, 
       0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x7, 0x1e, 0x3f3, 0xa, 0x1e, 0xc, 0x1e, 
       0xe, 0x1e, 0x3f6, 0xb, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x3f9, 0xa, 0x1e, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x3fe, 0xa, 0x1e, 0x3, 
       0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x403, 0xa, 0x1e, 0x3, 0x1f, 
       0x3, 0x1f, 0x3, 0x1f, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 
       0x3, 0x20, 0x5, 0x20, 0x40d, 0xa, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 
       0x20, 0x411, 0xa, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 0x20, 
       0x416, 0xa, 0x20, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x5, 0x21, 0x41b, 
       0xa, 0x21, 0x3, 0x21, 0x3, 0x21, 0x5, 0x21, 0x41f, 0xa, 0x21, 0x3, 
       0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 
       0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 0x23, 0x5, 0x23, 0x42c, 
       0xa, 0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 0x24, 0x5, 0x24, 0x431, 0xa, 
       0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x5, 0x24, 0x437, 
       0xa, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x25, 0x3, 0x25, 0x5, 0x25, 
       0x43d, 0xa, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x5, 
       0x25, 0x443, 0xa, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x26, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x44c, 0xa, 0x26, 0x3, 
       0x26, 0x5, 0x26, 0x44f, 0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 
       0x5, 0x26, 0x454, 0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x27, 0x5, 
       0x27, 0x459, 0xa, 0x27, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x5, 0x27, 
       0x45e, 0xa, 0x27, 0x5, 0x27, 0x460, 0xa, 0x27, 0x3, 0x28, 0x3, 0x28, 
       0x3, 0x28, 0x7, 0x28, 0x465, 0xa, 0x28, 0xc, 0x28, 0xe, 0x28, 0x468, 
       0xb, 0x28, 0x3, 0x28, 0x5, 0x28, 0x46b, 0xa, 0x28, 0x3, 0x29, 0x3, 
       0x29, 0x3, 0x29, 0x5, 0x29, 0x470, 0xa, 0x29, 0x3, 0x29, 0x5, 0x29, 
       0x473, 0xa, 0x29, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2b, 0x3, 0x2b, 0x3, 
       0x2c, 0x3, 0x2c, 0x3, 0x2d, 0x6, 0x2d, 0x47c, 0xa, 0x2d, 0xd, 0x2d, 
       0xe, 0x2d, 0x47d, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x5, 0x2e, 0x4a6, 0xa, 0x2e, 
       0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 
       0x5, 0x2e, 0x4ae, 0xa, 0x2e, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x7, 
       0x31, 0x4b9, 0xa, 0x31, 0xc, 0x31, 0xe, 0x31, 0x4bc, 0xb, 0x31, 0x3, 
       0x32, 0x3, 0x32, 0x5, 0x32, 0x4c0, 0xa, 0x32, 0x3, 0x32, 0x5, 0x32, 
       0x4c3, 0xa, 0x32, 0x3, 0x32, 0x5, 0x32, 0x4c6, 0xa, 0x32, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x7, 0x33, 0x4cc, 0xa, 0x33, 0xc, 
       0x33, 0xe, 0x33, 0x4cf, 0xb, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x4d6, 0xa, 0x34, 0x3, 0x34, 0x3, 
       0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x4de, 
       0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x5, 0x34, 0x4e6, 0xa, 0x34, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 0x4f3, 0xa, 0x35, 0x3, 0x36, 
       0x3, 0x36, 0x3, 0x36, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 
       0x4fb, 0xa, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 0x500, 
       0xa, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 0x505, 0xa, 
       0x37, 0x7, 0x37, 0x507, 0xa, 0x37, 0xc, 0x37, 0xe, 0x37, 0x50a, 0xb, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 0x50e, 0xa, 0x37, 0x3, 0x37, 
       0x5, 0x37, 0x511, 0xa, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x7, 0x37, 0x519, 0xa, 0x37, 0xc, 0x37, 
       0xe, 0x37, 0x51c, 0xb, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x7, 0x37, 0x525, 0xa, 0x37, 
       0xc, 0x37, 0xe, 0x37, 0x528, 0xb, 0x37, 0x3, 0x37, 0x3, 0x37, 0x7, 
       0x37, 0x52c, 0xa, 0x37, 0xc, 0x37, 0xe, 0x37, 0x52f, 0xb, 0x37, 0x5, 
       0x37, 0x531, 0xa, 0x37, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 
       0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 
       0x5, 0x38, 0x53d, 0xa, 0x38, 0x3, 0x39, 0x6, 0x39, 0x540, 0xa, 0x39, 
       0xd, 0x39, 0xe, 0x39, 0x541, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 
       0x3a, 0x547, 0xa, 0x3a, 0x3, 0x3b, 0x5, 0x3b, 0x54a, 0xa, 0x3b, 0x3, 
       0x3b, 0x3, 0x3b, 0x3, 0x3c, 0x6, 0x3c, 0x54f, 0xa, 0x3c, 0xd, 0x3c, 
       0xe, 0x3c, 0x550, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 
       0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 
       0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x5, 0x3d, 0x560, 0xa, 0x3d, 0x3, 0x3d, 
       0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x5, 0x3d, 0x567, 0xa, 
       0x3d, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3f, 0x3, 
       0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x5, 0x3f, 0x573, 
       0xa, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 
       0x7, 0x41, 0x580, 0xa, 0x41, 0xc, 0x41, 0xe, 0x41, 0x583, 0xb, 0x41, 
       0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 0x589, 0xa, 
       0x42, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x6, 0x43, 0x58f, 
       0xa, 0x43, 0xd, 0x43, 0xe, 0x43, 0x590, 0x3, 0x43, 0x3, 0x43, 0x3, 
       0x43, 0x3, 0x43, 0x5, 0x43, 0x597, 0xa, 0x43, 0x5, 0x43, 0x599, 0xa, 
       0x43, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x5a7, 0xa, 0x44, 0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 
       0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0x5af, 0xa, 0x45, 0x5, 
       0x45, 0x5b1, 0xa, 0x45, 0x3, 0x45, 0x7, 0x45, 0x5b4, 0xa, 0x45, 0xc, 
       0x45, 0xe, 0x45, 0x5b7, 0xb, 0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 
       0x3, 0x45, 0x5, 0x45, 0x5bd, 0xa, 0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 
       0x45, 0x5, 0x45, 0x5c2, 0xa, 0x45, 0x5, 0x45, 0x5c4, 0xa, 0x45, 0x3, 
       0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x5, 0x46, 0x5cb, 
       0xa, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 
       0x3, 0x47, 0x3, 0x48, 0x3, 0x48, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 
       0x3, 0x49, 0x5, 0x49, 0x5d9, 0xa, 0x49, 0x3, 0x4a, 0x3, 0x4a, 0x3, 
       0x4a, 0x3, 0x4a, 0x7, 0x4a, 0x5df, 0xa, 0x4a, 0xc, 0x4a, 0xe, 0x4a, 
       0x5e2, 0xb, 0x4a, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 
       0x4b, 0x5, 0x4b, 0x5e9, 0xa, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 
       0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 
       0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x5, 0x4b, 0x5f7, 0xa, 0x4b, 0x3, 
       0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x5, 0x4c, 0x5fd, 0xa, 0x4c, 
       0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x5, 0x4d, 
       0x604, 0xa, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x5, 0x4d, 0x608, 0xa, 0x4d, 
       0x3, 0x4d, 0x7, 0x4d, 0x60b, 0xa, 0x4d, 0xc, 0x4d, 0xe, 0x4d, 0x60e, 
       0xb, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 
       0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x5, 0x4d, 0x619, 0xa, 
       0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x7, 0x4d, 0x61d, 0xa, 0x4d, 0xc, 0x4d, 
       0xe, 0x4d, 0x620, 0xb, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x5, 
       0x4d, 0x625, 0xa, 0x4d, 0x3, 0x4e, 0x3, 0x4e, 0x5, 0x4e, 0x629, 0xa, 
       0x4e, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 
       0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 
       0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 
       0x4f, 0x5, 0x4f, 0x63d, 0xa, 0x4f, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 
       0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 0x3, 0x51, 0x3, 0x51, 
       0x3, 0x51, 0x3, 0x51, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 
       0x3, 0x52, 0x3, 0x52, 0x5, 0x52, 0x650, 0xa, 0x52, 0x3, 0x52, 0x3, 
       0x52, 0x5, 0x52, 0x654, 0xa, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 
       0x3, 0x52, 0x3, 0x52, 0x5, 0x52, 0x65b, 0xa, 0x52, 0x3, 0x53, 0x5, 
       0x53, 0x65e, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 
       0x663, 0xa, 0x53, 0x3, 0x53, 0x5, 0x53, 0x666, 0xa, 0x53, 0x3, 0x53, 
       0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 0x66b, 0xa, 0x53, 0x5, 0x53, 0x66d, 
       0xa, 0x53, 0x3, 0x54, 0x3, 0x54, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x7, 0x55, 0x674, 0xa, 0x55, 0xc, 0x55, 0xe, 0x55, 0x677, 0xb, 0x55, 
       0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x67b, 0xa, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x5, 0x56, 0x680, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x5, 0x56, 0x685, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x7, 0x56, 0x690, 0xa, 0x56, 0xc, 0x56, 0xe, 0x56, 0x693, 0xb, 
       0x56, 0x5, 0x56, 0x695, 0xa, 0x56, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 
       0x699, 0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 0x69d, 0xa, 0x57, 
       0x7, 0x57, 0x69f, 0xa, 0x57, 0xc, 0x57, 0xe, 0x57, 0x6a2, 0xb, 0x57, 
       0x3, 0x58, 0x3, 0x58, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 
       0x5, 0x59, 0x6aa, 0xa, 0x59, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 
       0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 
       0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 
       0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0x6c0, 
       0xa, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 
       0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0x6ca, 0xa, 0x5a, 0x3, 
       0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0x6d1, 
       0xa, 0x5b, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 
       0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x6dc, 0xa, 
       0x5d, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 
       0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x5, 0x5e, 0x6e6, 0xa, 0x5e, 0x3, 0x5f, 
       0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 
       0x5, 0x5f, 0x6ef, 0xa, 0x5f, 0x3, 0x60, 0x5, 0x60, 0x6f2, 0xa, 0x60, 
       0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x5, 0x60, 
       0x6f9, 0xa, 0x60, 0x5, 0x60, 0x6fb, 0xa, 0x60, 0x3, 0x61, 0x3, 0x61, 
       0x3, 0x61, 0x5, 0x61, 0x700, 0xa, 0x61, 0x3, 0x62, 0x3, 0x62, 0x3, 
       0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0x708, 0xa, 0x62, 
       0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 
       0x5, 0x62, 0x710, 0xa, 0x62, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x7, 0x63, 0x719, 0xa, 0x63, 
       0xc, 0x63, 0xe, 0x63, 0x71c, 0xb, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x7, 0x63, 0x729, 0xa, 0x63, 0xc, 0x63, 
       0xe, 0x63, 0x72c, 0xb, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x730, 
       0xa, 0x63, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x5, 0x64, 0x735, 0xa, 
       0x64, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x5, 0x65, 0x755, 0xa, 0x65, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 
       0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 
       0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 
       0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x5, 0x66, 0x769, 0xa, 0x66, 0x3, 
       0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x68, 0x3, 0x68, 0x3, 
       0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 
       0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x7, 
       0x69, 0x77d, 0xa, 0x69, 0xc, 0x69, 0xe, 0x69, 0x780, 0xb, 0x69, 0x3, 
       0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 
       0x69, 0x3, 0x69, 0x5, 0x69, 0x78a, 0xa, 0x69, 0x3, 0x6a, 0x3, 0x6a, 
       0x3, 0x6a, 0x3, 0x6a, 0x5, 0x6a, 0x790, 0xa, 0x6a, 0x3, 0x6a, 0x3, 
       0x6a, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x7, 0x6b, 0x797, 0xa, 0x6b, 
       0xc, 0x6b, 0xe, 0x6b, 0x79a, 0xb, 0x6b, 0x3, 0x6c, 0x3, 0x6c, 0x3, 
       0x6c, 0x5, 0x6c, 0x79f, 0xa, 0x6c, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0x7a7, 0xa, 0x6e, 0x3, 
       0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x7, 0x6e, 0x7ac, 0xa, 0x6e, 0xc, 0x6e, 
       0xe, 0x6e, 0x7af, 0xb, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0x7b3, 
       0xa, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0x7b6, 0xa, 0x6e, 0x3, 0x6f, 0x3, 
       0x6f, 0x3, 0x6f, 0x3, 0x70, 0x5, 0x70, 0x7bc, 0xa, 0x70, 0x3, 0x70, 
       0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0x7c2, 0xa, 0x70, 0x3, 
       0x70, 0x3, 0x70, 0x5, 0x70, 0x7c6, 0xa, 0x70, 0x3, 0x70, 0x5, 0x70, 
       0x7c9, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 
       0x70, 0x7cf, 0xa, 0x70, 0x5, 0x70, 0x7d1, 0xa, 0x70, 0x3, 0x70, 0x5, 
       0x70, 0x7d4, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 
       0x5, 0x70, 0x7da, 0xa, 0x70, 0x3, 0x70, 0x5, 0x70, 0x7dd, 0xa, 0x70, 
       0x3, 0x70, 0x5, 0x70, 0x7e0, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 
       0x70, 0x5, 0x70, 0x7e5, 0xa, 0x70, 0x5, 0x70, 0x7e7, 0xa, 0x70, 0x3, 
       0x71, 0x5, 0x71, 0x7ea, 0xa, 0x71, 0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 
       0x7ee, 0xa, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 
       0x71, 0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 0x7f7, 0xa, 0x71, 0x3, 0x71, 
       0x5, 0x71, 0x7fa, 0xa, 0x71, 0x3, 0x71, 0x5, 0x71, 0x7fd, 0xa, 0x71, 
       0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 0x803, 0xa, 
       0x71, 0x5, 0x71, 0x805, 0xa, 0x71, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x3, 0x72, 0x5, 0x72, 0x80b, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x813, 0xa, 0x72, 
       0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x817, 0xa, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x5, 0x72, 0x81c, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x5, 0x72, 0x820, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x5, 0x72, 0x82c, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x5, 0x72, 0x831, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x5, 0x72, 0x83e, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x845, 0xa, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 
       0x72, 0x84d, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x5, 0x72, 0x853, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x85b, 0xa, 0x72, 0x5, 0x72, 
       0x85d, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x5, 0x72, 0x865, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 
       0x86e, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x872, 0xa, 0x72, 
       0x3, 0x72, 0x5, 0x72, 0x875, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x884, 
       0xa, 0x72, 0x5, 0x72, 0x886, 0xa, 0x72, 0x3, 0x73, 0x3, 0x73, 0x3, 
       0x73, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x7, 0x74, 0x88e, 0xa, 0x74, 
       0xc, 0x74, 0xe, 0x74, 0x891, 0xb, 0x74, 0x3, 0x75, 0x3, 0x75, 0x5, 
       0x75, 0x895, 0xa, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 
       0x89a, 0xa, 0x75, 0x5, 0x75, 0x89c, 0xa, 0x75, 0x3, 0x75, 0x3, 0x75, 
       0x3, 0x75, 0x5, 0x75, 0x8a1, 0xa, 0x75, 0x3, 0x76, 0x3, 0x76, 0x3, 
       0x76, 0x3, 0x76, 0x5, 0x76, 0x8a7, 0xa, 0x76, 0x3, 0x76, 0x3, 0x76, 
       0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 0x8ad, 0xa, 0x76, 0x3, 0x77, 0x3, 
       0x77, 0x3, 0x77, 0x5, 0x77, 0x8b2, 0xa, 0x77, 0x3, 0x77, 0x3, 0x77, 
       0x5, 0x77, 0x8b6, 0xa, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 
       0x77, 0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0x8be, 0xa, 0x77, 0x3, 0x77, 
       0x5, 0x77, 0x8c1, 0xa, 0x77, 0x3, 0x77, 0x5, 0x77, 0x8c4, 0xa, 0x77, 
       0x3, 0x77, 0x3, 0x77, 0x3, 0x78, 0x3, 0x78, 0x5, 0x78, 0x8ca, 0xa, 
       0x78, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x5, 
       0x79, 0x8d1, 0xa, 0x79, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 
       0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 
       0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 
       0x5, 0x7a, 0x8e3, 0xa, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 
       0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 
       0x7a, 0x3, 0x7a, 0x5, 0x7a, 0x8f0, 0xa, 0x7a, 0x3, 0x7b, 0x3, 0x7b, 
       0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 
       0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7d, 0x3, 0x7d, 
       0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x7, 0x7d, 0x903, 0xa, 0x7d, 0xc, 
       0x7d, 0xe, 0x7d, 0x906, 0xb, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7e, 
       0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x5, 0x7e, 0x90e, 0xa, 0x7e, 0x3, 
       0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x7, 0x7f, 0x915, 
       0xa, 0x7f, 0xc, 0x7f, 0xe, 0x7f, 0x918, 0xb, 0x7f, 0x3, 0x7f, 0x3, 
       0x7f, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x5, 0x80, 0x91f, 0xa, 0x80, 
       0x3, 0x80, 0x3, 0x80, 0x5, 0x80, 0x923, 0xa, 0x80, 0x3, 0x80, 0x3, 
       0x80, 0x3, 0x81, 0x5, 0x81, 0x928, 0xa, 0x81, 0x3, 0x81, 0x3, 0x81, 
       0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x5, 0x81, 0x92f, 0xa, 0x81, 0x3, 
       0x81, 0x5, 0x81, 0x932, 0xa, 0x81, 0x3, 0x82, 0x5, 0x82, 0x935, 0xa, 
       0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x5, 0x82, 0x93a, 0xa, 0x82, 
       0x3, 0x82, 0x3, 0x82, 0x5, 0x82, 0x93e, 0xa, 0x82, 0x5, 0x82, 0x940, 
       0xa, 0x82, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 
       0x5, 0x83, 0x947, 0xa, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 
       0x84, 0x5, 0x84, 0x94d, 0xa, 0x84, 0x3, 0x84, 0x5, 0x84, 0x950, 0xa, 
       0x84, 0x3, 0x84, 0x5, 0x84, 0x953, 0xa, 0x84, 0x3, 0x85, 0x3, 0x85, 
       0x3, 0x85, 0x3, 0x86, 0x3, 0x86, 0x3, 0x86, 0x3, 0x87, 0x3, 0x87, 
       0x5, 0x87, 0x95d, 0xa, 0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 0x88, 0x5, 
       0x88, 0x962, 0xa, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 
       0x7, 0x88, 0x968, 0xa, 0x88, 0xc, 0x88, 0xe, 0x88, 0x96b, 0xb, 0x88, 
       0x3, 0x88, 0x3, 0x88, 0x3, 0x89, 0x3, 0x89, 0x3, 0x89, 0x5, 0x89, 
       0x972, 0xa, 0x89, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x5, 
       0x8a, 0x978, 0xa, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0x97b, 0xa, 0x8a, 0x3, 
       0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0x980, 0xa, 0x8a, 0x3, 0x8a, 
       0x3, 0x8a, 0x5, 0x8a, 0x984, 0xa, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0x987, 
       0xa, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 
       0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8c, 0x3, 0x8c, 
       0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x998, 0xa, 
       0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x7, 0x8d, 0x99d, 0xa, 0x8d, 
       0xc, 0x8d, 0xe, 0x8d, 0x9a0, 0xb, 0x8d, 0x3, 0x8e, 0x3, 0x8e, 0x3, 
       0x8e, 0x3, 0x8e, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x90, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x5, 
       0x91, 0x9b0, 0xa, 0x91, 0x3, 0x91, 0x5, 0x91, 0x9b3, 0xa, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x5, 0x91, 0x9bd, 0xa, 0x91, 0x3, 0x92, 0x3, 0x92, 
       0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x7, 0x92, 0x9c4, 0xa, 0x92, 0xc, 
       0x92, 0xe, 0x92, 0x9c7, 0xb, 0x92, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 
       0x3, 0x93, 0x5, 0x93, 0x9cd, 0xa, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 
       0x93, 0x3, 0x93, 0x3, 0x93, 0x5, 0x93, 0x9d4, 0xa, 0x93, 0x5, 0x93, 
       0x9d6, 0xa, 0x93, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x5, 
       0x94, 0x9dc, 0xa, 0x94, 0x3, 0x94, 0x5, 0x94, 0x9df, 0xa, 0x94, 0x3, 
       0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 
       0x94, 0x3, 0x94, 0x3, 0x94, 0x5, 0x94, 0x9ea, 0xa, 0x94, 0x3, 0x95, 
       0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x7, 0x95, 0x9f1, 0xa, 
       0x95, 0xc, 0x95, 0xe, 0x95, 0x9f4, 0xb, 0x95, 0x3, 0x96, 0x3, 0x96, 
       0x3, 0x96, 0x5, 0x96, 0x9f9, 0xa, 0x96, 0x3, 0x97, 0x3, 0x97, 0x3, 
       0x97, 0x3, 0x97, 0x5, 0x97, 0x9ff, 0xa, 0x97, 0x3, 0x97, 0x5, 0x97, 
       0xa02, 0xa, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x5, 0x97, 0xa07, 
       0xa, 0x97, 0x3, 0x97, 0x5, 0x97, 0xa0a, 0xa, 0x97, 0x3, 0x97, 0x5, 
       0x97, 0xa0d, 0xa, 0x97, 0x3, 0x97, 0x5, 0x97, 0xa10, 0xa, 0x97, 0x3, 
       0x97, 0x5, 0x97, 0xa13, 0xa, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 
       0x3, 0x97, 0x5, 0x97, 0xa19, 0xa, 0x97, 0x3, 0x98, 0x3, 0x98, 0x3, 
       0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x7, 0x98, 0xa21, 0xa, 0x98, 
       0xc, 0x98, 0xe, 0x98, 0xa24, 0xb, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 
       0x98, 0x3, 0x98, 0x3, 0x98, 0x7, 0x98, 0xa2b, 0xa, 0x98, 0xc, 0x98, 
       0xe, 0x98, 0xa2e, 0xb, 0x98, 0x5, 0x98, 0xa30, 0xa, 0x98, 0x3, 0x99, 
       0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x5, 0x99, 0xa37, 0xa, 
       0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x7, 0x99, 0xa3c, 0xa, 0x99, 
       0xc, 0x99, 0xe, 0x99, 0xa3f, 0xb, 0x99, 0x3, 0x99, 0x5, 0x99, 0xa42, 
       0xa, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 
       0x3, 0x99, 0x5, 0x99, 0xa4a, 0xa, 0x99, 0x3, 0x99, 0x3, 0x99, 0x7, 
       0x99, 0xa4e, 0xa, 0x99, 0xc, 0x99, 0xe, 0x99, 0xa51, 0xb, 0x99, 0x3, 
       0x99, 0x5, 0x99, 0xa54, 0xa, 0x99, 0x5, 0x99, 0xa56, 0xa, 0x99, 0x3, 
       0x9a, 0x6, 0x9a, 0xa59, 0xa, 0x9a, 0xd, 0x9a, 0xe, 0x9a, 0xa5a, 0x3, 
       0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x5, 
       0x9b, 0xa63, 0xa, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x5, 0x9b, 
       0xa68, 0xa, 0x9b, 0x3, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xa6c, 0xa, 0x9c, 
       0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xa71, 0xa, 0x9c, 0x3, 
       0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xa75, 0xa, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xa7b, 0xa, 0x9c, 0x3, 0x9c, 0x3, 
       0x9c, 0x5, 0x9c, 0xa7f, 0xa, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 
       0xa83, 0xa, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xa88, 
       0xa, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xa8b, 0xa, 0x9c, 0x3, 0x9d, 0x3, 
       0x9d, 0x3, 0x9d, 0x3, 0x9e, 0x3, 0x9e, 0x5, 0x9e, 0xa92, 0xa, 0x9e, 
       0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 
       0x5, 0x9e, 0xa9a, 0xa, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 
       0x9e, 0x7, 0x9e, 0xaa0, 0xa, 0x9e, 0xc, 0x9e, 0xe, 0x9e, 0xaa3, 0xb, 
       0x9e, 0x5, 0x9e, 0xaa5, 0xa, 0x9e, 0x3, 0x9e, 0x5, 0x9e, 0xaa8, 0xa, 
       0x9e, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x5, 0x9f, 0xaad, 0xa, 0x9f, 
       0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x7, 0xa0, 
       0xab4, 0xa, 0xa0, 0xc, 0xa0, 0xe, 0xa0, 0xab7, 0xb, 0xa0, 0x3, 0xa0, 
       0x5, 0xa0, 0xaba, 0xa, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 
       0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xac4, 
       0xa, 0xa1, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 
       0x3, 0xa2, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 
       0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x5, 0xa5, 0xad7, 0xa, 0xa5, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x5, 
       0xa6, 0xadc, 0xa, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x5, 0xa6, 
       0xae1, 0xa, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x5, 
       0xa6, 0xae7, 0xa, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 
       0x5, 0xa6, 0xaed, 0xa, 0xa6, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 
       0xa7, 0x5, 0xa7, 0xaf3, 0xa, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 
       0x3, 0xa8, 0x3, 0xa8, 0x5, 0xa8, 0xafa, 0xa, 0xa8, 0x3, 0xa8, 0x5, 
       0xa8, 0xafd, 0xa, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa9, 0x3, 0xa9, 
       0x5, 0xa9, 0xb03, 0xa, 0xa9, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0xb0d, 
       0xa, 0xaa, 0x5, 0xaa, 0xb0f, 0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 
       0xab, 0x3, 0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x6, 0xac, 0xb18, 
       0xa, 0xac, 0xd, 0xac, 0xe, 0xac, 0xb19, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x7, 0xad, 0xb20, 0xa, 0xad, 0xc, 0xad, 0xe, 0xad, 
       0xb23, 0xb, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xae, 0x3, 0xae, 0x3, 
       0xae, 0x3, 0xae, 0x7, 0xae, 0xb2b, 0xa, 0xae, 0xc, 0xae, 0xe, 0xae, 
       0xb2e, 0xb, 0xae, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x7, 
       0xaf, 0xb34, 0xa, 0xaf, 0xc, 0xaf, 0xe, 0xaf, 0xb37, 0xb, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0xb3e, 
       0xa, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0xb43, 0xa, 
       0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0xb49, 
       0xa, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0xb4d, 0xa, 0xb1, 0x3, 
       0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x5, 
       0xb3, 0xb55, 0xa, 0xb3, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 
       0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 
       0x3, 0xb6, 0x3, 0xb6, 0x5, 0xb6, 0xb63, 0xa, 0xb6, 0x3, 0xb7, 0x3, 
       0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 0xb6a, 0xa, 0xb7, 
       0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 0xb6e, 0xa, 0xb7, 0x3, 0xb8, 0x3, 
       0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x5, 0xb8, 0xb75, 0xa, 0xb8, 
       0x5, 0xb8, 0xb77, 0xa, 0xb8, 0x3, 0xb9, 0x3, 0xb9, 0x5, 0xb9, 0xb7b, 
       0xa, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 
       0x7, 0xb9, 0xb82, 0xa, 0xb9, 0xc, 0xb9, 0xe, 0xb9, 0xb85, 0xb, 0xb9, 
       0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x5, 0xba, 
       0xb8c, 0xa, 0xba, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x7, 0xbb, 0xb93, 0xa, 0xbb, 0xc, 0xbb, 0xe, 0xbb, 0xb96, 0xb, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 
       0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 
       0xbe, 0x3, 0xbe, 0x5, 0xbe, 0xba5, 0xa, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 
       0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0xbab, 0xa, 0xbe, 0x3, 0xbe, 0x3, 
       0xbe, 0x5, 0xbe, 0xbaf, 0xa, 0xbe, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x7, 0xbf, 0xbb7, 0xa, 0xbf, 0xc, 
       0xbf, 0xe, 0xbf, 0xbba, 0xb, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x7, 0xbf, 0xbbf, 0xa, 0xbf, 0xc, 0xbf, 0xe, 0xbf, 0xbc2, 0xb, 0xbf, 
       0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 
       0x5, 0xc0, 0xbca, 0xa, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x5, 0xc0, 0xbce, 
       0xa, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x7, 0xc0, 0xbd2, 0xa, 0xc0, 0xc, 
       0xc0, 0xe, 0xc0, 0xbd5, 0xb, 0xc0, 0x3, 0xc1, 0x3, 0xc1, 0x5, 0xc1, 
       0xbd9, 0xa, 0xc1, 0x3, 0xc2, 0x3, 0xc2, 0x5, 0xc2, 0xbdd, 0xa, 0xc2, 
       0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xbe7, 0xa, 0xc3, 0x3, 0xc4, 0x3, 
       0xc4, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xbed, 0xa, 0xc5, 0x3, 0xc6, 
       0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 
       0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 
       0xbfb, 0xa, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0xbfe, 0xa, 0xc6, 0x3, 0xc6, 
       0x3, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0xc03, 0xa, 0xc6, 0x3, 0xc6, 0x5, 
       0xc6, 0xc06, 0xa, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0xc09, 0xa, 0xc6, 0x3, 
       0xc6, 0x5, 0xc6, 0xc0c, 0xa, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0xc0f, 0xa, 
       0xc6, 0x3, 0xc7, 0x3, 0xc7, 0x5, 0xc7, 0xc13, 0xa, 0xc7, 0x3, 0xc8, 
       0x3, 0xc8, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 
       0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x7, 0xc9, 
       0xc21, 0xa, 0xc9, 0xc, 0xc9, 0xe, 0xc9, 0xc24, 0xb, 0xc9, 0x3, 0xc9, 
       0x3, 0xc9, 0x7, 0xc9, 0xc28, 0xa, 0xc9, 0xc, 0xc9, 0xe, 0xc9, 0xc2b, 
       0xb, 0xc9, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 
       0x3, 0xca, 0x3, 0xca, 0x5, 0xca, 0xc34, 0xa, 0xca, 0x3, 0xcb, 0x5, 
       0xcb, 0xc37, 0xa, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x5, 0xcb, 0xc3b, 0xa, 
       0xcb, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 
       0xcd, 0xc42, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x5, 0xcd, 0xc49, 0xa, 0xcd, 0x5, 0xcd, 0xc4b, 0xa, 0xcd, 
       0x3, 0xce, 0x3, 0xce, 0x5, 0xce, 0xc4f, 0xa, 0xce, 0x3, 0xcf, 0x3, 
       0xcf, 0x5, 0xcf, 0xc53, 0xa, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x5, 0xd0, 0xc58, 0xa, 0xd0, 0x3, 0xd1, 0x5, 0xd1, 0xc5b, 0xa, 0xd1, 
       0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xc5f, 0xa, 0xd1, 0x3, 0xd1, 0x5, 
       0xd1, 0xc62, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd2, 0x3, 0xd2, 
       0x3, 0xd2, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 
       0xc6d, 0xa, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xc70, 0xa, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd5, 
       0x3, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 0xc7b, 0xa, 0xd5, 0x3, 0xd5, 0x3, 
       0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 0xc81, 0xa, 0xd5, 0x3, 0xd5, 
       0x3, 0xd5, 0x5, 0xd5, 0xc85, 0xa, 0xd5, 0x5, 0xd5, 0xc87, 0xa, 0xd5, 
       0x3, 0xd6, 0x3, 0xd6, 0x5, 0xd6, 0xc8b, 0xa, 0xd6, 0x3, 0xd6, 0x3, 
       0xd6, 0x5, 0xd6, 0xc8f, 0xa, 0xd6, 0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 
       0xc93, 0xa, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 0xc97, 0xa, 0xd7, 
       0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x7, 0xd8, 0xc9d, 0xa, 
       0xd8, 0xc, 0xd8, 0xe, 0xd8, 0xca0, 0xb, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 
       0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x5, 0xd9, 0xca7, 0xa, 0xd9, 0x3, 
       0xda, 0x3, 0xda, 0x5, 0xda, 0xcab, 0xa, 0xda, 0x3, 0xda, 0x3, 0xda, 
       0x3, 0xda, 0x7, 0xda, 0xcb0, 0xa, 0xda, 0xc, 0xda, 0xe, 0xda, 0xcb3, 
       0xb, 0xda, 0x3, 0xda, 0x5, 0xda, 0xcb6, 0xa, 0xda, 0x3, 0xda, 0x3, 
       0xda, 0x5, 0xda, 0xcba, 0xa, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 
       0x7, 0xda, 0xcbf, 0xa, 0xda, 0xc, 0xda, 0xe, 0xda, 0xcc2, 0xb, 0xda, 
       0x3, 0xda, 0x5, 0xda, 0xcc5, 0xa, 0xda, 0x3, 0xdb, 0x3, 0xdb, 0x3, 
       0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x5, 0xdb, 0xccd, 0xa, 0xdb, 
       0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0xcd3, 0xa, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0xcd7, 0xa, 0xdc, 0x3, 0xdc, 
       0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdd, 0x3, 0xdd, 
       0x3, 0xdd, 0x3, 0xdd, 0x5, 0xdd, 0xce2, 0xa, 0xdd, 0x3, 0xdd, 0x3, 
       0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x5, 0xdd, 0xce9, 0xa, 0xdd, 
       0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xde, 
       0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x5, 0xde, 
       0xcf6, 0xa, 0xde, 0x3, 0xdf, 0x7, 0xdf, 0xcf9, 0xa, 0xdf, 0xc, 0xdf, 
       0xe, 0xdf, 0xcfc, 0xb, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x7, 0xe0, 0xd04, 0xa, 0xe0, 0xc, 0xe0, 
       0xe, 0xe0, 0xd07, 0xb, 0xe0, 0x3, 0xe1, 0x5, 0xe1, 0xd0a, 0xa, 0xe1, 
       0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 
       0x7, 0xe2, 0xd12, 0xa, 0xe2, 0xc, 0xe2, 0xe, 0xe2, 0xd15, 0xb, 0xe2, 
       0x3, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 0xd19, 0xa, 0xe3, 0x3, 0xe3, 0x3, 
       0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x7, 0xe4, 0xd24, 0xa, 0xe4, 0xc, 0xe4, 0xe, 0xe4, 
       0xd27, 0xb, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe5, 0x3, 0xe5, 0x3, 
       0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x7, 0xe6, 0xd31, 0xa, 0xe6, 
       0xc, 0xe6, 0xe, 0xe6, 0xd34, 0xb, 0xe6, 0x3, 0xe7, 0x3, 0xe7, 0x3, 
       0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x5, 0xe7, 0xd3b, 0xa, 0xe7, 0x3, 0xe8, 
       0x3, 0xe8, 0x5, 0xe8, 0xd3f, 0xa, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x5, 
       0xe8, 0xd43, 0xa, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x5, 0xe8, 0xd47, 0xa, 
       0xe8, 0x5, 0xe8, 0xd49, 0xa, 0xe8, 0x3, 0xe9, 0x5, 0xe9, 0xd4c, 0xa, 
       0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x7, 0xe9, 0xd51, 0xa, 0xe9, 
       0xc, 0xe9, 0xe, 0xe9, 0xd54, 0xb, 0xe9, 0x3, 0xea, 0x5, 0xea, 0xd57, 
       0xa, 0xea, 0x3, 0xea, 0x5, 0xea, 0xd5a, 0xa, 0xea, 0x3, 0xea, 0x3, 
       0xea, 0x3, 0xea, 0x7, 0xea, 0xd5f, 0xa, 0xea, 0xc, 0xea, 0xe, 0xea, 
       0xd62, 0xb, 0xea, 0x3, 0xea, 0x5, 0xea, 0xd65, 0xa, 0xea, 0x3, 0xeb, 
       0x3, 0xeb, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xed, 0x3, 0xed, 
       0x5, 0xed, 0xd6e, 0xa, 0xed, 0x3, 0xee, 0x3, 0xee, 0x3, 0xee, 0x5, 
       0xee, 0xd73, 0xa, 0xee, 0x3, 0xee, 0x3, 0xee, 0x5, 0xee, 0xd77, 0xa, 
       0xee, 0x3, 0xee, 0x5, 0xee, 0xd7a, 0xa, 0xee, 0x3, 0xef, 0x3, 0xef, 
       0x3, 0xef, 0x5, 0xef, 0xd7f, 0xa, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 
       0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x5, 0xf0, 0xd88, 
       0xa, 0xf0, 0x5, 0xf0, 0xd8a, 0xa, 0xf0, 0x3, 0xf1, 0x3, 0xf1, 0x3, 
       0xf1, 0x7, 0xf1, 0xd8f, 0xa, 0xf1, 0xc, 0xf1, 0xe, 0xf1, 0xd92, 0xb, 
       0xf1, 0x3, 0xf2, 0x3, 0xf2, 0x5, 0xf2, 0xd96, 0xa, 0xf2, 0x3, 0xf3, 
       0x3, 0xf3, 0x7, 0xf3, 0xd9a, 0xa, 0xf3, 0xc, 0xf3, 0xe, 0xf3, 0xd9d, 
       0xb, 0xf3, 0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x5, 0xf4, 0xda2, 0xa, 
       0xf4, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x5, 0xf5, 0xda7, 0xa, 0xf5, 
       0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x7, 0xf5, 
       0xdae, 0xa, 0xf5, 0xc, 0xf5, 0xe, 0xf5, 0xdb1, 0xb, 0xf5, 0x3, 0xf5, 
       0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf6, 0x3, 0xf6, 
       0x5, 0xf6, 0xdba, 0xa, 0xf6, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 
       0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x5, 
       0xf7, 0xdc5, 0xa, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf8, 0x3, 0xf8, 
       0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 
       0x3, 0xf9, 0x5, 0xf9, 0xdd2, 0xa, 0xf9, 0x3, 0xfa, 0x3, 0xfa, 0x5, 
       0xfa, 0xdd6, 0xa, 0xfa, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfc, 0x3, 0xfc, 
       0x3, 0xfc, 0x3, 0xfc, 0x5, 0xfc, 0xdde, 0xa, 0xfc, 0x3, 0xfc, 0x5, 
       0xfc, 0xde1, 0xa, 0xfc, 0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 
       0x3, 0xfd, 0x5, 0xfd, 0xde8, 0xa, 0xfd, 0x5, 0xfd, 0xdea, 0xa, 0xfd, 
       0x3, 0xfe, 0x5, 0xfe, 0xded, 0xa, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 
       0xfe, 0x5, 0xfe, 0xdf2, 0xa, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 
       0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x5, 0xfe, 0xdfa, 0xa, 0xfe, 0x3, 
       0xff, 0x5, 0xff, 0xdfd, 0xa, 0xff, 0x3, 0xff, 0x3, 0xff, 0x3, 0xff, 
       0x3, 0xff, 0x3, 0xff, 0x7, 0xff, 0xe04, 0xa, 0xff, 0xc, 0xff, 0xe, 
       0xff, 0xe07, 0xb, 0xff, 0x3, 0xff, 0x5, 0xff, 0xe0a, 0xa, 0xff, 0x3, 
       0x100, 0x3, 0x100, 0x3, 0x100, 0x3, 0x100, 0x3, 0x100, 0x3, 0x100, 
       0x3, 0x100, 0x3, 0x100, 0x3, 0x100, 0x5, 0x100, 0xe15, 0xa, 0x100, 
       0x3, 0x101, 0x3, 0x101, 0x3, 0x102, 0x3, 0x102, 0x3, 0x103, 0x3, 
       0x103, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 
       0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x5, 0x104, 0xe25, 0xa, 0x104, 
       0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x106, 0x3, 
       0x106, 0x3, 0x106, 0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 
       0x3, 0x107, 0x7, 0x107, 0xe33, 0xa, 0x107, 0xc, 0x107, 0xe, 0x107, 
       0xe36, 0xb, 0x107, 0x3, 0x108, 0x3, 0x108, 0x3, 0x108, 0x3, 0x109, 
       0x3, 0x109, 0x3, 0x109, 0x5, 0x109, 0xe3e, 0xa, 0x109, 0x3, 0x109, 
       0x3, 0x109, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 
       0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x7, 0x10a, 0xe4a, 0xa, 
       0x10a, 0xc, 0x10a, 0xe, 0x10a, 0xe4d, 0xb, 0x10a, 0x3, 0x10b, 0x5, 
       0x10b, 0xe50, 0xa, 0x10b, 0x3, 0x10b, 0x5, 0x10b, 0xe53, 0xa, 0x10b, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 
       0x10d, 0x5, 0x10d, 0xe5b, 0xa, 0x10d, 0x3, 0x10e, 0x3, 0x10e, 0x3, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x7, 0x10e, 0xe62, 0xa, 0x10e, 0xc, 
       0x10e, 0xe, 0x10e, 0xe65, 0xb, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x7, 0x10e, 0xe6c, 0xa, 0x10e, 0xc, 
       0x10e, 0xe, 0x10e, 0xe6f, 0xb, 0x10e, 0x6, 0x10e, 0xe71, 0xa, 0x10e, 
       0xd, 0x10e, 0xe, 0x10e, 0xe72, 0x5, 0x10e, 0xe75, 0xa, 0x10e, 0x3, 
       0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x5, 0x10f, 
       0xe7c, 0xa, 0x10f, 0x3, 0x10f, 0x5, 0x10f, 0xe7f, 0xa, 0x10f, 0x3, 
       0x110, 0x3, 0x110, 0x3, 0x110, 0x7, 0x110, 0xe84, 0xa, 0x110, 0xc, 
       0x110, 0xe, 0x110, 0xe87, 0xb, 0x110, 0x3, 0x111, 0x3, 0x111, 0x3, 
       0x111, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x5, 0x112, 
       0xe90, 0xa, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 
       0x5, 0x112, 0xe96, 0xa, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 
       0x3, 0x112, 0x6, 0x112, 0xe9c, 0xa, 0x112, 0xd, 0x112, 0xe, 0x112, 
       0xe9d, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x5, 0x113, 0xea5, 0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0xea8, 0xa, 
       0x113, 0x3, 0x113, 0x5, 0x113, 0xeab, 0xa, 0x113, 0x3, 0x114, 0x3, 
       0x114, 0x5, 0x114, 0xeaf, 0xa, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 
       0x114, 0x5, 0x114, 0xeb4, 0xa, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 
       0x114, 0x3, 0x114, 0x5, 0x114, 0xeba, 0xa, 0x114, 0x3, 0x115, 0x3, 
       0x115, 0x5, 0x115, 0xebe, 0xa, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 
       0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x7, 0x115, 
       0xec7, 0xa, 0x115, 0xc, 0x115, 0xe, 0x115, 0xeca, 0xb, 0x115, 0x3, 
       0x115, 0x5, 0x115, 0xecd, 0xa, 0x115, 0x3, 0x115, 0x5, 0x115, 0xed0, 
       0xa, 0x115, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x5, 
       0x116, 0xed6, 0xa, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 
       0x116, 0x5, 0x116, 0xedc, 0xa, 0x116, 0x3, 0x116, 0x3, 0x116, 0x5, 
       0x116, 0xee0, 0xa, 0x116, 0x3, 0x116, 0x5, 0x116, 0xee3, 0xa, 0x116, 
       0x3, 0x117, 0x3, 0x117, 0x5, 0x117, 0xee7, 0xa, 0x117, 0x3, 0x117, 
       0x3, 0x117, 0x5, 0x117, 0xeeb, 0xa, 0x117, 0x3, 0x117, 0x3, 0x117, 
       0x5, 0x117, 0xeef, 0xa, 0x117, 0x3, 0x118, 0x5, 0x118, 0xef2, 0xa, 
       0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x119, 0x3, 0x119, 0x3, 0x119, 
       0x5, 0x119, 0xef9, 0xa, 0x119, 0x3, 0x119, 0x3, 0x119, 0x3, 0x119, 
       0x5, 0x119, 0xefe, 0xa, 0x119, 0x3, 0x119, 0x3, 0x119, 0x5, 0x119, 
       0xf02, 0xa, 0x119, 0x3, 0x119, 0x5, 0x119, 0xf05, 0xa, 0x119, 0x5, 
       0x119, 0xf07, 0xa, 0x119, 0x3, 0x11a, 0x3, 0x11a, 0x5, 0x11a, 0xf0b, 
       0xa, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 
       0x11a, 0x5, 0x11a, 0xf12, 0xa, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 
       0x11a, 0x3, 0x11a, 0x7, 0x11a, 0xf18, 0xa, 0x11a, 0xc, 0x11a, 0xe, 
       0x11a, 0xf1b, 0xb, 0x11a, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x5, 
       0x11b, 0xf20, 0xa, 0x11b, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x5, 
       0x11c, 0xf25, 0xa, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 
       0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 
       0x5, 0x11c, 0xf30, 0xa, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 
       0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x5, 0x11c, 0xf39, 
       0xa, 0x11c, 0x3, 0x11d, 0x3, 0x11d, 0x5, 0x11d, 0xf3d, 0xa, 0x11d, 
       0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x7, 
       0x11d, 0xf44, 0xa, 0x11d, 0xc, 0x11d, 0xe, 0x11d, 0xf47, 0xb, 0x11d, 
       0x3, 0x11d, 0x5, 0x11d, 0xf4a, 0xa, 0x11d, 0x3, 0x11d, 0x3, 0x11d, 
       0x3, 0x11e, 0x3, 0x11e, 0x5, 0x11e, 0xf50, 0xa, 0x11e, 0x3, 0x11e, 
       0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x7, 0x11e, 0xf57, 
       0xa, 0x11e, 0xc, 0x11e, 0xe, 0x11e, 0xf5a, 0xb, 0x11e, 0x3, 0x11e, 
       0x5, 0x11e, 0xf5d, 0xa, 0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11f, 
       0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x120, 0x3, 0x120, 0x3, 
       0x120, 0x7, 0x120, 0xf68, 0xa, 0x120, 0xc, 0x120, 0xe, 0x120, 0xf6b, 
       0xb, 0x120, 0x3, 0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 
       0x122, 0x3, 0x122, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 
       0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 0x5, 
       0x123, 0xf7c, 0xa, 0x123, 0x3, 0x123, 0x5, 0x123, 0xf7f, 0xa, 0x123, 
       0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 
       0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 
       0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 
       0x124, 0x3, 0x124, 0x5, 0x124, 0xf93, 0xa, 0x124, 0x3, 0x124, 0x3, 
       0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 
       0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 
       0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 
       0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 
       0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 
       0x7, 0x124, 0xfb2, 0xa, 0x124, 0xc, 0x124, 0xe, 0x124, 0xfb5, 0xb, 
       0x124, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 
       0xfbb, 0xa, 0x125, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 
       0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x5, 0x126, 0xfc5, 
       0xa, 0x126, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 
       0x127, 0x5, 0x127, 0xfcc, 0xa, 0x127, 0x3, 0x128, 0x3, 0x128, 0x3, 
       0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x5, 0x129, 0xfd4, 0xa, 
       0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x5, 0x129, 
       0xfda, 0xa, 0x129, 0x3, 0x129, 0x7, 0x129, 0xfdd, 0xa, 0x129, 0xc, 
       0x129, 0xe, 0x129, 0xfe0, 0xb, 0x129, 0x3, 0x12a, 0x3, 0x12a, 0x3, 
       0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 
       0x3, 0x12a, 0x5, 0x12a, 0xfeb, 0xa, 0x12a, 0x3, 0x12b, 0x3, 0x12b, 
       0x5, 0x12b, 0xfef, 0xa, 0x12b, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 
       0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x6, 0x12c, 0xff8, 
       0xa, 0x12c, 0xd, 0x12c, 0xe, 0x12c, 0xff9, 0x3, 0x12c, 0x3, 0x12c, 
       0x5, 0x12c, 0xffe, 0xa, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12d, 
       0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x6, 
       0x12d, 0x1008, 0xa, 0x12d, 0xd, 0x12d, 0xe, 0x12d, 0x1009, 0x3, 0x12d, 
       0x3, 0x12d, 0x5, 0x12d, 0x100e, 0xa, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 
       0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x1019, 0xa, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x101e, 0xa, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x1023, 0xa, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x1027, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 
       0x12f, 0x102b, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 
       0x12f, 0x1030, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x1034, 
       0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x1038, 0xa, 0x12f, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 
       0x104f, 0xa, 0x12f, 0x5, 0x12f, 0x1051, 0xa, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x1063, 0xa, 
       0x12f, 0x5, 0x12f, 0x1065, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x106d, 0xa, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x1072, 0xa, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x1077, 0xa, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 0x12f, 0x107c, 0xa, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 
       0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x1089, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x108e, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x1093, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x1098, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x109d, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x10a2, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x10a7, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x10ac, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x10b1, 0xa, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 
       0x12f, 0x5, 0x12f, 0x10b6, 0xa, 0x12f, 0x5, 0x12f, 0x10b8, 0xa, 0x12f, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x131, 0x3, 0x131, 0x5, 0x131, 0x10be, 
       0xa, 0x131, 0x5, 0x131, 0x10c0, 0xa, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x7, 0x131, 0x10c4, 0xa, 0x131, 0xc, 0x131, 0xe, 0x131, 0x10c7, 0xb, 
       0x131, 0x3, 0x131, 0x3, 0x131, 0x5, 0x131, 0x10cb, 0xa, 0x131, 0x3, 
       0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x7, 0x132, 0x10d5, 0xa, 0x132, 0xc, 0x132, 
       0xe, 0x132, 0x10d8, 0xb, 0x132, 0x5, 0x132, 0x10da, 0xa, 0x132, 0x3, 
       0x133, 0x3, 0x133, 0x3, 0x133, 0x3, 0x133, 0x3, 0x133, 0x7, 0x133, 
       0x10e1, 0xa, 0x133, 0xc, 0x133, 0xe, 0x133, 0x10e4, 0xb, 0x133, 0x3, 
       0x134, 0x3, 0x134, 0x5, 0x134, 0x10e8, 0xa, 0x134, 0x3, 0x134, 0x3, 
       0x134, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x10ee, 0xa, 0x135, 0x5, 
       0x135, 0x10f0, 0xa, 0x135, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x10f4, 
       0xa, 0x135, 0x3, 0x135, 0x5, 0x135, 0x10f7, 0xa, 0x135, 0x3, 0x135, 
       0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x10fe, 
       0xa, 0x135, 0x5, 0x135, 0x1100, 0xa, 0x135, 0x3, 0x135, 0x5, 0x135, 
       0x1103, 0xa, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 
       0x1108, 0xa, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 
       0x5, 0x135, 0x110e, 0xa, 0x135, 0x5, 0x135, 0x1110, 0xa, 0x135, 0x3, 
       0x135, 0x5, 0x135, 0x1113, 0xa, 0x135, 0x3, 0x135, 0x5, 0x135, 0x1116, 
       0xa, 0x135, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x111a, 0xa, 0x135, 
       0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x111e, 0xa, 0x135, 0x5, 0x135, 
       0x1120, 0xa, 0x135, 0x3, 0x135, 0x5, 0x135, 0x1123, 0xa, 0x135, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x5, 
       0x136, 0x1130, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 0x5, 0x136, 0x1134, 
       0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x5, 0x136, 0x113c, 0xa, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x5, 0x136, 0x1145, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x5, 0x136, 0x114b, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x7, 0x136, 0x115a, 0xa, 0x136, 0xc, 0x136, 0xe, 0x136, 0x115d, 0xb, 
       0x136, 0x5, 0x136, 0x115f, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x7, 0x136, 0x116d, 
       0xa, 0x136, 0xc, 0x136, 0xe, 0x136, 0x1170, 0xb, 0x136, 0x5, 0x136, 
       0x1172, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x7, 0x136, 0x1180, 0xa, 0x136, 0xc, 
       0x136, 0xe, 0x136, 0x1183, 0xb, 0x136, 0x5, 0x136, 0x1185, 0xa, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x7, 0x136, 0x1193, 0xa, 0x136, 0xc, 0x136, 0xe, 0x136, 
       0x1196, 0xb, 0x136, 0x5, 0x136, 0x1198, 0xa, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x7, 
       0x136, 0x11a6, 0xa, 0x136, 0xc, 0x136, 0xe, 0x136, 0x11a9, 0xb, 0x136, 
       0x5, 0x136, 0x11ab, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x7, 0x136, 0x11b9, 0xa, 
       0x136, 0xc, 0x136, 0xe, 0x136, 0x11bc, 0xb, 0x136, 0x5, 0x136, 0x11be, 
       0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x7, 0x136, 0x11ca, 0xa, 0x136, 0xc, 0x136, 0xe, 0x136, 0x11cd, 0xb, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x6, 
       0x136, 0x11d9, 0xa, 0x136, 0xd, 0x136, 0xe, 0x136, 0x11da, 0x3, 0x136, 
       0x3, 0x136, 0x5, 0x136, 0x11df, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x5, 0x136, 0x11ef, 0xa, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x3, 0x136, 0x5, 0x136, 0x11f5, 0xa, 0x136, 0x3, 0x137, 
       0x3, 0x137, 0x3, 0x137, 0x5, 0x137, 0x11fa, 0xa, 0x137, 0x3, 0x137, 
       0x3, 0x137, 0x5, 0x137, 0x11fe, 0xa, 0x137, 0x3, 0x138, 0x3, 0x138, 
       0x3, 0x138, 0x7, 0x138, 0x1203, 0xa, 0x138, 0xc, 0x138, 0xe, 0x138, 
       0x1206, 0xb, 0x138, 0x3, 0x139, 0x3, 0x139, 0x3, 0x139, 0x5, 0x139, 
       0x120b, 0xa, 0x139, 0x5, 0x139, 0x120d, 0xa, 0x139, 0x3, 0x139, 0x3, 
       0x139, 0x5, 0x139, 0x1211, 0xa, 0x139, 0x3, 0x13a, 0x3, 0x13a, 0x5, 
       0x13a, 0x1215, 0xa, 0x13a, 0x3, 0x13b, 0x3, 0x13b, 0x5, 0x13b, 0x1219, 
       0xa, 0x13b, 0x3, 0x13c, 0x3, 0x13c, 0x7, 0x13c, 0x121d, 0xa, 0x13c, 
       0xc, 0x13c, 0xe, 0x13c, 0x1220, 0xb, 0x13c, 0x3, 0x13d, 0x3, 0x13d, 
       0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x3, 
       0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x5, 0x13d, 
       0x122e, 0xa, 0x13d, 0x3, 0x13e, 0x3, 0x13e, 0x3, 0x13e, 0x3, 0x13e, 
       0x3, 0x13e, 0x5, 0x13e, 0x1235, 0xa, 0x13e, 0x3, 0x13f, 0x7, 0x13f, 
       0x1238, 0xa, 0x13f, 0xc, 0x13f, 0xe, 0x13f, 0x123b, 0xb, 0x13f, 0x3, 
       0x140, 0x3, 0x140, 0x3, 0x140, 0x3, 0x141, 0x3, 0x141, 0x3, 0x141, 
       0x3, 0x141, 0x5, 0x141, 0x1244, 0xa, 0x141, 0x3, 0x141, 0x3, 0x141, 
       0x3, 0x141, 0x7, 0x141, 0x1249, 0xa, 0x141, 0xc, 0x141, 0xe, 0x141, 
       0x124c, 0xb, 0x141, 0x5, 0x141, 0x124e, 0xa, 0x141, 0x3, 0x142, 0x6, 
       0x142, 0x1251, 0xa, 0x142, 0xd, 0x142, 0xe, 0x142, 0x1252, 0x3, 0x142, 
       0x3, 0x142, 0x5, 0x142, 0x1257, 0xa, 0x142, 0x5, 0x142, 0x1259, 0xa, 
       0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x7, 0x142, 0x125e, 0xa, 
       0x142, 0xc, 0x142, 0xe, 0x142, 0x1261, 0xb, 0x142, 0x3, 0x143, 0x3, 
       0x143, 0x3, 0x143, 0x3, 0x144, 0x3, 0x144, 0x3, 0x144, 0x3, 0x145, 
       0x5, 0x145, 0x126a, 0xa, 0x145, 0x3, 0x145, 0x3, 0x145, 0x5, 0x145, 
       0x126e, 0xa, 0x145, 0x3, 0x145, 0x3, 0x145, 0x3, 0x145, 0x5, 0x145, 
       0x1273, 0xa, 0x145, 0x7, 0x145, 0x1275, 0xa, 0x145, 0xc, 0x145, 0xe, 
       0x145, 0x1278, 0xb, 0x145, 0x3, 0x146, 0x3, 0x146, 0x5, 0x146, 0x127c, 
       0xa, 0x146, 0x3, 0x147, 0x5, 0x147, 0x127f, 0xa, 0x147, 0x3, 0x147, 
       0x3, 0x147, 0x3, 0x148, 0x5, 0x148, 0x1284, 0xa, 0x148, 0x3, 0x148, 
       0x3, 0x148, 0x3, 0x149, 0x3, 0x149, 0x3, 0x14a, 0x3, 0x14a, 0x3, 
       0x14b, 0x3, 0x14b, 0x3, 0x14b, 0x3, 0x1239, 0x4, 0x232, 0x246, 0x14c, 
       0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 0xe, 0x10, 0x12, 0x14, 0x16, 0x18, 
       0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 
       0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 
       0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 
       0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 
       0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 
       0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 
       0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 
       0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 
       0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
       0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 
       0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x100, 0x102, 0x104, 0x106, 0x108, 
       0x10a, 0x10c, 0x10e, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11a, 0x11c, 
       0x11e, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12a, 0x12c, 0x12e, 0x130, 
       0x132, 0x134, 0x136, 0x138, 0x13a, 0x13c, 0x13e, 0x140, 0x142, 0x144, 
       0x146, 0x148, 0x14a, 0x14c, 0x14e, 0x150, 0x152, 0x154, 0x156, 0x158, 
       0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16a, 0x16c, 
       0x16e, 0x170, 0x172, 0x174, 0x176, 0x178, 0x17a, 0x17c, 0x17e, 0x180, 
       0x182, 0x184, 0x186, 0x188, 0x18a, 0x18c, 0x18e, 0x190, 0x192, 0x194, 
       0x196, 0x198, 0x19a, 0x19c, 0x19e, 0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 
       0x1aa, 0x1ac, 0x1ae, 0x1b0, 0x1b2, 0x1b4, 0x1b6, 0x1b8, 0x1ba, 0x1bc, 
       0x1be, 0x1c0, 0x1c2, 0x1c4, 0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 
       0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1de, 0x1e0, 0x1e2, 0x1e4, 
       0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ee, 0x1f0, 0x1f2, 0x1f4, 0x1f6, 0x1f8, 
       0x1fa, 0x1fc, 0x1fe, 0x200, 0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c, 
       0x20e, 0x210, 0x212, 0x214, 0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x220, 
       0x222, 0x224, 0x226, 0x228, 0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x234, 
       0x236, 0x238, 0x23a, 0x23c, 0x23e, 0x240, 0x242, 0x244, 0x246, 0x248, 
       0x24a, 0x24c, 0x24e, 0x250, 0x252, 0x254, 0x256, 0x258, 0x25a, 0x25c, 
       0x25e, 0x260, 0x262, 0x264, 0x266, 0x268, 0x26a, 0x26c, 0x26e, 0x270, 
       0x272, 0x274, 0x276, 0x278, 0x27a, 0x27c, 0x27e, 0x280, 0x282, 0x284, 
       0x286, 0x288, 0x28a, 0x28c, 0x28e, 0x290, 0x292, 0x294, 0x2, 0x45, 
       0x5, 0x2, 0x1d5, 0x1d5, 0x1e6, 0x1e6, 0x1e8, 0x1e9, 0x4, 0x2, 0x67, 
       0x67, 0x147, 0x147, 0x3, 0x2, 0x109, 0x10a, 0xe, 0x2, 0x4c, 0x4c, 
       0x62, 0x63, 0x7d, 0x7d, 0xa0, 0xa0, 0xae, 0xae, 0x109, 0x109, 0x126, 
       0x127, 0x12c, 0x12c, 0x13a, 0x13a, 0x164, 0x164, 0x1c7, 0x1c7, 0x1c9, 
       0x1ca, 0x3, 0x2, 0xb2, 0xb3, 0x5, 0x2, 0xb, 0xb, 0x79, 0x79, 0xa3, 
       0xa3, 0x4, 0x2, 0x1e, 0x1e, 0x26, 0x26, 0x4, 0x2, 0x35, 0x35, 0x70, 
       0x70, 0x3, 0x2, 0x12b, 0x12c, 0x4, 0x2, 0xc2, 0xc2, 0x109, 0x109, 
       0x3, 0x2, 0x61, 0x62, 0x4, 0x2, 0xc, 0xc, 0x53, 0x53, 0x4, 0x2, 0x50, 
       0x50, 0x13c, 0x13c, 0x4, 0x2, 0x71, 0x71, 0xb5, 0xb5, 0x3, 0x2, 0x83, 
       0x84, 0x4, 0x2, 0x7d, 0x7d, 0x133, 0x133, 0xa, 0x2, 0x5, 0x5, 0x7, 
       0x7, 0x39, 0x39, 0x5c, 0x5c, 0x94, 0x94, 0x108, 0x108, 0x13c, 0x13c, 
       0x1af, 0x1b0, 0x5, 0x2, 0x40, 0x40, 0x102, 0x102, 0x128, 0x128, 0x4, 
       0x2, 0x86, 0x86, 0x17d, 0x17d, 0x3, 0x2, 0x18e, 0x18f, 0x4, 0x2, 
       0xb1, 0xb1, 0x15f, 0x15f, 0x4, 0x2, 0x1f, 0x1f, 0xf1, 0xf1, 0x4, 
       0x2, 0x4, 0x4, 0xef, 0xef, 0x4, 0x2, 0x41, 0x41, 0x103, 0x103, 0x4, 
       0x2, 0x7d, 0x7d, 0x92, 0x92, 0x3, 0x2, 0x94, 0x95, 0x4, 0x2, 0x40, 
       0x40, 0x102, 0x102, 0x3, 0x2, 0x1bd, 0x1be, 0x4, 0x2, 0x124, 0x124, 
       0x1bf, 0x1c1, 0x4, 0x2, 0xbb, 0xbb, 0x1f4, 0x1f4, 0x4, 0x2, 0x1c, 
       0x1c, 0x23, 0x23, 0x4, 0x2, 0x21, 0x21, 0x3c, 0x3c, 0x4, 0x2, 0x17e, 
       0x180, 0x185, 0x185, 0x4, 0x2, 0xb, 0xb, 0xa3, 0xa3, 0x5, 0x2, 0x75, 
       0x75, 0x77, 0x77, 0x18e, 0x18e, 0x4, 0x2, 0x7f, 0x7f, 0x162, 0x162, 
       0x3, 0x2, 0xf4, 0xf5, 0x3, 0x2, 0xe5, 0xe6, 0x6, 0x2, 0x3b, 0x3b, 
       0x4e, 0x4e, 0xa2, 0xa2, 0xdb, 0xdb, 0x6, 0x2, 0x86, 0x86, 0x94, 0x94, 
       0x126, 0x126, 0x128, 0x128, 0x4, 0x2, 0x7f, 0x7f, 0x19f, 0x19f, 0x3, 
       0x2, 0x6b, 0x6c, 0x3, 0x2, 0x5f, 0x60, 0x4, 0x2, 0xa1, 0xa1, 0xda, 
       0xda, 0x3, 0x2, 0x11a, 0x11b, 0x4, 0x2, 0xfd, 0xfd, 0x123, 0x123, 
       0x5, 0x2, 0x50, 0x50, 0x90, 0x90, 0xda, 0xda, 0x6, 0x2, 0x9, 0xa, 
       0xc7, 0xc7, 0xea, 0xea, 0x14d, 0x14d, 0x3, 0x2, 0xd1, 0xd2, 0x4, 
       0x2, 0x10b, 0x10b, 0x135, 0x135, 0x6, 0x2, 0x12, 0x12, 0x5a, 0x5a, 
       0xb8, 0xb8, 0x12f, 0x12f, 0x4, 0x2, 0xb8, 0xb8, 0x149, 0x149, 0x4, 
       0x2, 0x1b, 0x1b, 0x11c, 0x11c, 0x4, 0x2, 0x1ee, 0x1ee, 0x1f9, 0x1fa, 
       0x4, 0x2, 0x5, 0x5, 0x58, 0x58, 0x5, 0x2, 0x7e, 0x7e, 0xac, 0xac, 
       0xf7, 0xf7, 0x4, 0x2, 0xd6, 0xd6, 0x188, 0x188, 0x4, 0x2, 0x59, 0x59, 
       0x188, 0x188, 0x3, 0x2, 0x1a1, 0x1a2, 0x4, 0x2, 0x8, 0x8, 0xd5, 0xd5, 
       0x5, 0x2, 0xad, 0xad, 0xee, 0xee, 0xf8, 0xf8, 0x6, 0x2, 0x45, 0x46, 
       0xbf, 0xc0, 0x104, 0x105, 0x1cc, 0x1ce, 0x5, 0x2, 0x7c, 0x7c, 0xa4, 
       0xa4, 0xcc, 0xcc, 0x4, 0x2, 0xfb, 0xfb, 0x1c5, 0x1c5, 0x4, 0x2, 0x1d1, 
       0x1d1, 0x1e7, 0x1e7, 0x4, 0x2, 0x72, 0x72, 0x137, 0x137, 0x26, 0x2, 
       0x3, 0x16, 0x18, 0x28, 0x2a, 0x40, 0x42, 0x4b, 0x4d, 0x5d, 0x61, 
       0x61, 0x68, 0x76, 0x78, 0x7c, 0x7e, 0x83, 0x86, 0x86, 0x88, 0x94, 
       0x96, 0x9f, 0xa1, 0xad, 0xaf, 0xcc, 0xce, 0xd5, 0xd7, 0xd8, 0xda, 
       0xdf, 0xe1, 0xfb, 0xfd, 0x102, 0x104, 0x108, 0x10b, 0x111, 0x113, 
       0x11f, 0x121, 0x126, 0x12a, 0x12b, 0x12d, 0x130, 0x132, 0x135, 0x137, 
       0x139, 0x13b, 0x146, 0x149, 0x14d, 0x14f, 0x152, 0x155, 0x15d, 0x15f, 
       0x161, 0x165, 0x16e, 0x175, 0x17d, 0x181, 0x1c5, 0x1cc, 0x1d0, 0x2, 
       0x14c5, 0x2, 0x296, 0x3, 0x2, 0x2, 0x2, 0x4, 0x29d, 0x3, 0x2, 0x2, 
       0x2, 0x6, 0x2a3, 0x3, 0x2, 0x2, 0x2, 0x8, 0x2a6, 0x3, 0x2, 0x2, 0x2, 
       0xa, 0x2ba, 0x3, 0x2, 0x2, 0x2, 0xc, 0x2bc, 0x3, 0x2, 0x2, 0x2, 0xe, 
       0x2c8, 0x3, 0x2, 0x2, 0x2, 0x10, 0x310, 0x3, 0x2, 0x2, 0x2, 0x12, 
       0x312, 0x3, 0x2, 0x2, 0x2, 0x14, 0x314, 0x3, 0x2, 0x2, 0x2, 0x16, 
       0x31a, 0x3, 0x2, 0x2, 0x2, 0x18, 0x32b, 0x3, 0x2, 0x2, 0x2, 0x1a, 
       0x330, 0x3, 0x2, 0x2, 0x2, 0x1c, 0x347, 0x3, 0x2, 0x2, 0x2, 0x1e, 
       0x349, 0x3, 0x2, 0x2, 0x2, 0x20, 0x36e, 0x3, 0x2, 0x2, 0x2, 0x22, 
       0x387, 0x3, 0x2, 0x2, 0x2, 0x24, 0x389, 0x3, 0x2, 0x2, 0x2, 0x26, 
       0x38b, 0x3, 0x2, 0x2, 0x2, 0x28, 0x396, 0x3, 0x2, 0x2, 0x2, 0x2a, 
       0x3aa, 0x3, 0x2, 0x2, 0x2, 0x2c, 0x3ad, 0x3, 0x2, 0x2, 0x2, 0x2e, 
       0x3b4, 0x3, 0x2, 0x2, 0x2, 0x30, 0x3b6, 0x3, 0x2, 0x2, 0x2, 0x32, 
       0x3c0, 0x3, 0x2, 0x2, 0x2, 0x34, 0x3c9, 0x3, 0x2, 0x2, 0x2, 0x36, 
       0x3d4, 0x3, 0x2, 0x2, 0x2, 0x38, 0x3e3, 0x3, 0x2, 0x2, 0x2, 0x3a, 
       0x402, 0x3, 0x2, 0x2, 0x2, 0x3c, 0x404, 0x3, 0x2, 0x2, 0x2, 0x3e, 
       0x40c, 0x3, 0x2, 0x2, 0x2, 0x40, 0x417, 0x3, 0x2, 0x2, 0x2, 0x42, 
       0x420, 0x3, 0x2, 0x2, 0x2, 0x44, 0x423, 0x3, 0x2, 0x2, 0x2, 0x46, 
       0x430, 0x3, 0x2, 0x2, 0x2, 0x48, 0x43a, 0x3, 0x2, 0x2, 0x2, 0x4a, 
       0x447, 0x3, 0x2, 0x2, 0x2, 0x4c, 0x45f, 0x3, 0x2, 0x2, 0x2, 0x4e, 
       0x461, 0x3, 0x2, 0x2, 0x2, 0x50, 0x46c, 0x3, 0x2, 0x2, 0x2, 0x52, 
       0x474, 0x3, 0x2, 0x2, 0x2, 0x54, 0x476, 0x3, 0x2, 0x2, 0x2, 0x56, 
       0x478, 0x3, 0x2, 0x2, 0x2, 0x58, 0x47b, 0x3, 0x2, 0x2, 0x2, 0x5a, 
       0x4ad, 0x3, 0x2, 0x2, 0x2, 0x5c, 0x4af, 0x3, 0x2, 0x2, 0x2, 0x5e, 
       0x4b1, 0x3, 0x2, 0x2, 0x2, 0x60, 0x4b5, 0x3, 0x2, 0x2, 0x2, 0x62, 
       0x4bd, 0x3, 0x2, 0x2, 0x2, 0x64, 0x4c7, 0x3, 0x2, 0x2, 0x2, 0x66, 
       0x4e5, 0x3, 0x2, 0x2, 0x2, 0x68, 0x4f2, 0x3, 0x2, 0x2, 0x2, 0x6a, 
       0x4f4, 0x3, 0x2, 0x2, 0x2, 0x6c, 0x530, 0x3, 0x2, 0x2, 0x2, 0x6e, 
       0x532, 0x3, 0x2, 0x2, 0x2, 0x70, 0x53f, 0x3, 0x2, 0x2, 0x2, 0x72, 
       0x546, 0x3, 0x2, 0x2, 0x2, 0x74, 0x549, 0x3, 0x2, 0x2, 0x2, 0x76, 
       0x54e, 0x3, 0x2, 0x2, 0x2, 0x78, 0x566, 0x3, 0x2, 0x2, 0x2, 0x7a, 
       0x568, 0x3, 0x2, 0x2, 0x2, 0x7c, 0x56c, 0x3, 0x2, 0x2, 0x2, 0x7e, 
       0x578, 0x3, 0x2, 0x2, 0x2, 0x80, 0x57c, 0x3, 0x2, 0x2, 0x2, 0x82, 
       0x584, 0x3, 0x2, 0x2, 0x2, 0x84, 0x598, 0x3, 0x2, 0x2, 0x2, 0x86, 
       0x5a6, 0x3, 0x2, 0x2, 0x2, 0x88, 0x5c3, 0x3, 0x2, 0x2, 0x2, 0x8a, 
       0x5ca, 0x3, 0x2, 0x2, 0x2, 0x8c, 0x5ce, 0x3, 0x2, 0x2, 0x2, 0x8e, 
       0x5d2, 0x3, 0x2, 0x2, 0x2, 0x90, 0x5d8, 0x3, 0x2, 0x2, 0x2, 0x92, 
       0x5da, 0x3, 0x2, 0x2, 0x2, 0x94, 0x5f6, 0x3, 0x2, 0x2, 0x2, 0x96, 
       0x5fc, 0x3, 0x2, 0x2, 0x2, 0x98, 0x624, 0x3, 0x2, 0x2, 0x2, 0x9a, 
       0x628, 0x3, 0x2, 0x2, 0x2, 0x9c, 0x63c, 0x3, 0x2, 0x2, 0x2, 0x9e, 
       0x63e, 0x3, 0x2, 0x2, 0x2, 0xa0, 0x645, 0x3, 0x2, 0x2, 0x2, 0xa2, 
       0x65a, 0x3, 0x2, 0x2, 0x2, 0xa4, 0x66c, 0x3, 0x2, 0x2, 0x2, 0xa6, 
       0x66e, 0x3, 0x2, 0x2, 0x2, 0xa8, 0x670, 0x3, 0x2, 0x2, 0x2, 0xaa, 
       0x694, 0x3, 0x2, 0x2, 0x2, 0xac, 0x696, 0x3, 0x2, 0x2, 0x2, 0xae, 
       0x6a3, 0x3, 0x2, 0x2, 0x2, 0xb0, 0x6a9, 0x3, 0x2, 0x2, 0x2, 0xb2, 
       0x6c9, 0x3, 0x2, 0x2, 0x2, 0xb4, 0x6d0, 0x3, 0x2, 0x2, 0x2, 0xb6, 
       0x6d2, 0x3, 0x2, 0x2, 0x2, 0xb8, 0x6db, 0x3, 0x2, 0x2, 0x2, 0xba, 
       0x6e5, 0x3, 0x2, 0x2, 0x2, 0xbc, 0x6e7, 0x3, 0x2, 0x2, 0x2, 0xbe, 
       0x6f1, 0x3, 0x2, 0x2, 0x2, 0xc0, 0x6ff, 0x3, 0x2, 0x2, 0x2, 0xc2, 
       0x70f, 0x3, 0x2, 0x2, 0x2, 0xc4, 0x72f, 0x3, 0x2, 0x2, 0x2, 0xc6, 
       0x734, 0x3, 0x2, 0x2, 0x2, 0xc8, 0x754, 0x3, 0x2, 0x2, 0x2, 0xca, 
       0x756, 0x3, 0x2, 0x2, 0x2, 0xcc, 0x76a, 0x3, 0x2, 0x2, 0x2, 0xce, 
       0x76e, 0x3, 0x2, 0x2, 0x2, 0xd0, 0x789, 0x3, 0x2, 0x2, 0x2, 0xd2, 
       0x78b, 0x3, 0x2, 0x2, 0x2, 0xd4, 0x793, 0x3, 0x2, 0x2, 0x2, 0xd6, 
       0x79b, 0x3, 0x2, 0x2, 0x2, 0xd8, 0x7a0, 0x3, 0x2, 0x2, 0x2, 0xda, 
       0x7a3, 0x3, 0x2, 0x2, 0x2, 0xdc, 0x7b7, 0x3, 0x2, 0x2, 0x2, 0xde, 
       0x7e6, 0x3, 0x2, 0x2, 0x2, 0xe0, 0x804, 0x3, 0x2, 0x2, 0x2, 0xe2, 
       0x885, 0x3, 0x2, 0x2, 0x2, 0xe4, 0x887, 0x3, 0x2, 0x2, 0x2, 0xe6, 
       0x88a, 0x3, 0x2, 0x2, 0x2, 0xe8, 0x892, 0x3, 0x2, 0x2, 0x2, 0xea, 
       0x8a2, 0x3, 0x2, 0x2, 0x2, 0xec, 0x8ae, 0x3, 0x2, 0x2, 0x2, 0xee, 
       0x8c7, 0x3, 0x2, 0x2, 0x2, 0xf0, 0x8d0, 0x3, 0x2, 0x2, 0x2, 0xf2, 
       0x8ef, 0x3, 0x2, 0x2, 0x2, 0xf4, 0x8f1, 0x3, 0x2, 0x2, 0x2, 0xf6, 
       0x8f6, 0x3, 0x2, 0x2, 0x2, 0xf8, 0x8fd, 0x3, 0x2, 0x2, 0x2, 0xfa, 
       0x909, 0x3, 0x2, 0x2, 0x2, 0xfc, 0x90f, 0x3, 0x2, 0x2, 0x2, 0xfe, 
       0x91b, 0x3, 0x2, 0x2, 0x2, 0x100, 0x931, 0x3, 0x2, 0x2, 0x2, 0x102, 
       0x93f, 0x3, 0x2, 0x2, 0x2, 0x104, 0x941, 0x3, 0x2, 0x2, 0x2, 0x106, 
       0x94c, 0x3, 0x2, 0x2, 0x2, 0x108, 0x954, 0x3, 0x2, 0x2, 0x2, 0x10a, 
       0x957, 0x3, 0x2, 0x2, 0x2, 0x10c, 0x95a, 0x3, 0x2, 0x2, 0x2, 0x10e, 
       0x961, 0x3, 0x2, 0x2, 0x2, 0x110, 0x971, 0x3, 0x2, 0x2, 0x2, 0x112, 
       0x97a, 0x3, 0x2, 0x2, 0x2, 0x114, 0x98a, 0x3, 0x2, 0x2, 0x2, 0x116, 
       0x991, 0x3, 0x2, 0x2, 0x2, 0x118, 0x999, 0x3, 0x2, 0x2, 0x2, 0x11a, 
       0x9a1, 0x3, 0x2, 0x2, 0x2, 0x11c, 0x9a5, 0x3, 0x2, 0x2, 0x2, 0x11e, 
       0x9a8, 0x3, 0x2, 0x2, 0x2, 0x120, 0x9b2, 0x3, 0x2, 0x2, 0x2, 0x122, 
       0x9be, 0x3, 0x2, 0x2, 0x2, 0x124, 0x9d5, 0x3, 0x2, 0x2, 0x2, 0x126, 
       0x9de, 0x3, 0x2, 0x2, 0x2, 0x128, 0x9eb, 0x3, 0x2, 0x2, 0x2, 0x12a, 
       0x9f8, 0x3, 0x2, 0x2, 0x2, 0x12c, 0xa01, 0x3, 0x2, 0x2, 0x2, 0x12e, 
       0xa2f, 0x3, 0x2, 0x2, 0x2, 0x130, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x132, 
       0xa58, 0x3, 0x2, 0x2, 0x2, 0x134, 0xa67, 0x3, 0x2, 0x2, 0x2, 0x136, 
       0xa8a, 0x3, 0x2, 0x2, 0x2, 0x138, 0xa8c, 0x3, 0x2, 0x2, 0x2, 0x13a, 
       0xa8f, 0x3, 0x2, 0x2, 0x2, 0x13c, 0xaac, 0x3, 0x2, 0x2, 0x2, 0x13e, 
       0xaae, 0x3, 0x2, 0x2, 0x2, 0x140, 0xabe, 0x3, 0x2, 0x2, 0x2, 0x142, 
       0xac5, 0x3, 0x2, 0x2, 0x2, 0x144, 0xacb, 0x3, 0x2, 0x2, 0x2, 0x146, 
       0xad0, 0x3, 0x2, 0x2, 0x2, 0x148, 0xad3, 0x3, 0x2, 0x2, 0x2, 0x14a, 
       0xad8, 0x3, 0x2, 0x2, 0x2, 0x14c, 0xaf2, 0x3, 0x2, 0x2, 0x2, 0x14e, 
       0xaf4, 0x3, 0x2, 0x2, 0x2, 0x150, 0xb00, 0x3, 0x2, 0x2, 0x2, 0x152, 
       0xb04, 0x3, 0x2, 0x2, 0x2, 0x154, 0xb12, 0x3, 0x2, 0x2, 0x2, 0x156, 
       0xb14, 0x3, 0x2, 0x2, 0x2, 0x158, 0xb1b, 0x3, 0x2, 0x2, 0x2, 0x15a, 
       0xb26, 0x3, 0x2, 0x2, 0x2, 0x15c, 0xb2f, 0x3, 0x2, 0x2, 0x2, 0x15e, 
       0xb3a, 0x3, 0x2, 0x2, 0x2, 0x160, 0xb46, 0x3, 0x2, 0x2, 0x2, 0x162, 
       0xb4e, 0x3, 0x2, 0x2, 0x2, 0x164, 0xb54, 0x3, 0x2, 0x2, 0x2, 0x166, 
       0xb56, 0x3, 0x2, 0x2, 0x2, 0x168, 0xb5c, 0x3, 0x2, 0x2, 0x2, 0x16a, 
       0xb60, 0x3, 0x2, 0x2, 0x2, 0x16c, 0xb64, 0x3, 0x2, 0x2, 0x2, 0x16e, 
       0xb6f, 0x3, 0x2, 0x2, 0x2, 0x170, 0xb78, 0x3, 0x2, 0x2, 0x2, 0x172, 
       0xb86, 0x3, 0x2, 0x2, 0x2, 0x174, 0xb8d, 0x3, 0x2, 0x2, 0x2, 0x176, 
       0xb99, 0x3, 0x2, 0x2, 0x2, 0x178, 0xb9c, 0x3, 0x2, 0x2, 0x2, 0x17a, 
       0xbaa, 0x3, 0x2, 0x2, 0x2, 0x17c, 0xbb0, 0x3, 0x2, 0x2, 0x2, 0x17e, 
       0xbc3, 0x3, 0x2, 0x2, 0x2, 0x180, 0xbd8, 0x3, 0x2, 0x2, 0x2, 0x182, 
       0xbdc, 0x3, 0x2, 0x2, 0x2, 0x184, 0xbe6, 0x3, 0x2, 0x2, 0x2, 0x186, 
       0xbe8, 0x3, 0x2, 0x2, 0x2, 0x188, 0xbea, 0x3, 0x2, 0x2, 0x2, 0x18a, 
       0xbee, 0x3, 0x2, 0x2, 0x2, 0x18c, 0xc10, 0x3, 0x2, 0x2, 0x2, 0x18e, 
       0xc14, 0x3, 0x2, 0x2, 0x2, 0x190, 0xc16, 0x3, 0x2, 0x2, 0x2, 0x192, 
       0xc33, 0x3, 0x2, 0x2, 0x2, 0x194, 0xc36, 0x3, 0x2, 0x2, 0x2, 0x196, 
       0xc3c, 0x3, 0x2, 0x2, 0x2, 0x198, 0xc3e, 0x3, 0x2, 0x2, 0x2, 0x19a, 
       0xc4c, 0x3, 0x2, 0x2, 0x2, 0x19c, 0xc50, 0x3, 0x2, 0x2, 0x2, 0x19e, 
       0xc57, 0x3, 0x2, 0x2, 0x2, 0x1a0, 0xc5e, 0x3, 0x2, 0x2, 0x2, 0x1a2, 
       0xc65, 0x3, 0x2, 0x2, 0x2, 0x1a4, 0xc68, 0x3, 0x2, 0x2, 0x2, 0x1a6, 
       0xc74, 0x3, 0x2, 0x2, 0x2, 0x1a8, 0xc77, 0x3, 0x2, 0x2, 0x2, 0x1aa, 
       0xc88, 0x3, 0x2, 0x2, 0x2, 0x1ac, 0xc90, 0x3, 0x2, 0x2, 0x2, 0x1ae, 
       0xc98, 0x3, 0x2, 0x2, 0x2, 0x1b0, 0xca3, 0x3, 0x2, 0x2, 0x2, 0x1b2, 
       0xca8, 0x3, 0x2, 0x2, 0x2, 0x1b4, 0xcc6, 0x3, 0x2, 0x2, 0x2, 0x1b6, 
       0xcce, 0x3, 0x2, 0x2, 0x2, 0x1b8, 0xcdd, 0x3, 0x2, 0x2, 0x2, 0x1ba, 
       0xcf5, 0x3, 0x2, 0x2, 0x2, 0x1bc, 0xcfa, 0x3, 0x2, 0x2, 0x2, 0x1be, 
       0xcff, 0x3, 0x2, 0x2, 0x2, 0x1c0, 0xd09, 0x3, 0x2, 0x2, 0x2, 0x1c2, 
       0xd0d, 0x3, 0x2, 0x2, 0x2, 0x1c4, 0xd16, 0x3, 0x2, 0x2, 0x2, 0x1c6, 
       0xd1f, 0x3, 0x2, 0x2, 0x2, 0x1c8, 0xd2a, 0x3, 0x2, 0x2, 0x2, 0x1ca, 
       0xd2c, 0x3, 0x2, 0x2, 0x2, 0x1cc, 0xd3a, 0x3, 0x2, 0x2, 0x2, 0x1ce, 
       0xd48, 0x3, 0x2, 0x2, 0x2, 0x1d0, 0xd4b, 0x3, 0x2, 0x2, 0x2, 0x1d2, 
       0xd56, 0x3, 0x2, 0x2, 0x2, 0x1d4, 0xd66, 0x3, 0x2, 0x2, 0x2, 0x1d6, 
       0xd68, 0x3, 0x2, 0x2, 0x2, 0x1d8, 0xd6d, 0x3, 0x2, 0x2, 0x2, 0x1da, 
       0xd72, 0x3, 0x2, 0x2, 0x2, 0x1dc, 0xd7e, 0x3, 0x2, 0x2, 0x2, 0x1de, 
       0xd82, 0x3, 0x2, 0x2, 0x2, 0x1e0, 0xd8b, 0x3, 0x2, 0x2, 0x2, 0x1e2, 
       0xd95, 0x3, 0x2, 0x2, 0x2, 0x1e4, 0xd97, 0x3, 0x2, 0x2, 0x2, 0x1e6, 
       0xda1, 0x3, 0x2, 0x2, 0x2, 0x1e8, 0xda3, 0x3, 0x2, 0x2, 0x2, 0x1ea, 
       0xdb9, 0x3, 0x2, 0x2, 0x2, 0x1ec, 0xdbb, 0x3, 0x2, 0x2, 0x2, 0x1ee, 
       0xdc8, 0x3, 0x2, 0x2, 0x2, 0x1f0, 0xdcd, 0x3, 0x2, 0x2, 0x2, 0x1f2, 
       0xdd5, 0x3, 0x2, 0x2, 0x2, 0x1f4, 0xdd7, 0x3, 0x2, 0x2, 0x2, 0x1f6, 
       0xdd9, 0x3, 0x2, 0x2, 0x2, 0x1f8, 0xde9, 0x3, 0x2, 0x2, 0x2, 0x1fa, 
       0xdf9, 0x3, 0x2, 0x2, 0x2, 0x1fc, 0xdfc, 0x3, 0x2, 0x2, 0x2, 0x1fe, 
       0xe14, 0x3, 0x2, 0x2, 0x2, 0x200, 0xe16, 0x3, 0x2, 0x2, 0x2, 0x202, 
       0xe18, 0x3, 0x2, 0x2, 0x2, 0x204, 0xe1a, 0x3, 0x2, 0x2, 0x2, 0x206, 
       0xe24, 0x3, 0x2, 0x2, 0x2, 0x208, 0xe26, 0x3, 0x2, 0x2, 0x2, 0x20a, 
       0xe2a, 0x3, 0x2, 0x2, 0x2, 0x20c, 0xe2d, 0x3, 0x2, 0x2, 0x2, 0x20e, 
       0xe37, 0x3, 0x2, 0x2, 0x2, 0x210, 0xe3a, 0x3, 0x2, 0x2, 0x2, 0x212, 
       0xe41, 0x3, 0x2, 0x2, 0x2, 0x214, 0xe4f, 0x3, 0x2, 0x2, 0x2, 0x216, 
       0xe54, 0x3, 0x2, 0x2, 0x2, 0x218, 0xe5a, 0x3, 0x2, 0x2, 0x2, 0x21a, 
       0xe74, 0x3, 0x2, 0x2, 0x2, 0x21c, 0xe76, 0x3, 0x2, 0x2, 0x2, 0x21e, 
       0xe80, 0x3, 0x2, 0x2, 0x2, 0x220, 0xe88, 0x3, 0x2, 0x2, 0x2, 0x222, 
       0xe8b, 0x3, 0x2, 0x2, 0x2, 0x224, 0xea4, 0x3, 0x2, 0x2, 0x2, 0x226, 
       0xeb9, 0x3, 0x2, 0x2, 0x2, 0x228, 0xecf, 0x3, 0x2, 0x2, 0x2, 0x22a, 
       0xed1, 0x3, 0x2, 0x2, 0x2, 0x22c, 0xee4, 0x3, 0x2, 0x2, 0x2, 0x22e, 
       0xef1, 0x3, 0x2, 0x2, 0x2, 0x230, 0xf06, 0x3, 0x2, 0x2, 0x2, 0x232, 
       0xf11, 0x3, 0x2, 0x2, 0x2, 0x234, 0xf1f, 0x3, 0x2, 0x2, 0x2, 0x236, 
       0xf38, 0x3, 0x2, 0x2, 0x2, 0x238, 0xf3a, 0x3, 0x2, 0x2, 0x2, 0x23a, 
       0xf4d, 0x3, 0x2, 0x2, 0x2, 0x23c, 0xf60, 0x3, 0x2, 0x2, 0x2, 0x23e, 
       0xf64, 0x3, 0x2, 0x2, 0x2, 0x240, 0xf6c, 0x3, 0x2, 0x2, 0x2, 0x242, 
       0xf70, 0x3, 0x2, 0x2, 0x2, 0x244, 0xf7e, 0x3, 0x2, 0x2, 0x2, 0x246, 
       0xf92, 0x3, 0x2, 0x2, 0x2, 0x248, 0xfba, 0x3, 0x2, 0x2, 0x2, 0x24a, 
       0xfc4, 0x3, 0x2, 0x2, 0x2, 0x24c, 0xfc6, 0x3, 0x2, 0x2, 0x2, 0x24e, 
       0xfcd, 0x3, 0x2, 0x2, 0x2, 0x250, 0xfcf, 0x3, 0x2, 0x2, 0x2, 0x252, 
       0xfea, 0x3, 0x2, 0x2, 0x2, 0x254, 0xfee, 0x3, 0x2, 0x2, 0x2, 0x256, 
       0xff0, 0x3, 0x2, 0x2, 0x2, 0x258, 0x1001, 0x3, 0x2, 0x2, 0x2, 0x25a, 
       0x1011, 0x3, 0x2, 0x2, 0x2, 0x25c, 0x10b7, 0x3, 0x2, 0x2, 0x2, 0x25e, 
       0x10b9, 0x3, 0x2, 0x2, 0x2, 0x260, 0x10bf, 0x3, 0x2, 0x2, 0x2, 0x262, 
       0x10d9, 0x3, 0x2, 0x2, 0x2, 0x264, 0x10db, 0x3, 0x2, 0x2, 0x2, 0x266, 
       0x10e5, 0x3, 0x2, 0x2, 0x2, 0x268, 0x1122, 0x3, 0x2, 0x2, 0x2, 0x26a, 
       0x11f4, 0x3, 0x2, 0x2, 0x2, 0x26c, 0x11f6, 0x3, 0x2, 0x2, 0x2, 0x26e, 
       0x11ff, 0x3, 0x2, 0x2, 0x2, 0x270, 0x120c, 0x3, 0x2, 0x2, 0x2, 0x272, 
       0x1214, 0x3, 0x2, 0x2, 0x2, 0x274, 0x1218, 0x3, 0x2, 0x2, 0x2, 0x276, 
       0x121a, 0x3, 0x2, 0x2, 0x2, 0x278, 0x122d, 0x3, 0x2, 0x2, 0x2, 0x27a, 
       0x1234, 0x3, 0x2, 0x2, 0x2, 0x27c, 0x1239, 0x3, 0x2, 0x2, 0x2, 0x27e, 
       0x123c, 0x3, 0x2, 0x2, 0x2, 0x280, 0x124d, 0x3, 0x2, 0x2, 0x2, 0x282, 
       0x1258, 0x3, 0x2, 0x2, 0x2, 0x284, 0x1262, 0x3, 0x2, 0x2, 0x2, 0x286, 
       0x1265, 0x3, 0x2, 0x2, 0x2, 0x288, 0x1269, 0x3, 0x2, 0x2, 0x2, 0x28a, 
       0x127b, 0x3, 0x2, 0x2, 0x2, 0x28c, 0x127e, 0x3, 0x2, 0x2, 0x2, 0x28e, 
       0x1283, 0x3, 0x2, 0x2, 0x2, 0x290, 0x1287, 0x3, 0x2, 0x2, 0x2, 0x292, 
       0x1289, 0x3, 0x2, 0x2, 0x2, 0x294, 0x128b, 0x3, 0x2, 0x2, 0x2, 0x296, 
       0x297, 0x5, 0x4, 0x3, 0x2, 0x297, 0x298, 0x7, 0x2, 0x2, 0x3, 0x298, 
       0x3, 0x3, 0x2, 0x2, 0x2, 0x299, 0x29b, 0x5, 0x6, 0x4, 0x2, 0x29a, 
       0x29c, 0x7, 0x82, 0x2, 0x2, 0x29b, 0x29a, 0x3, 0x2, 0x2, 0x2, 0x29b, 
       0x29c, 0x3, 0x2, 0x2, 0x2, 0x29c, 0x29e, 0x3, 0x2, 0x2, 0x2, 0x29d, 
       0x299, 0x3, 0x2, 0x2, 0x2, 0x29e, 0x29f, 0x3, 0x2, 0x2, 0x2, 0x29f, 
       0x29d, 0x3, 0x2, 0x2, 0x2, 0x29f, 0x2a0, 0x3, 0x2, 0x2, 0x2, 0x2a0, 
       0x5, 0x3, 0x2, 0x2, 0x2, 0x2a1, 0x2a4, 0x5, 0x8, 0x5, 0x2, 0x2a2, 
       0x2a4, 0x5, 0x10, 0x9, 0x2, 0x2a3, 0x2a1, 0x3, 0x2, 0x2, 0x2, 0x2a3, 
       0x2a2, 0x3, 0x2, 0x2, 0x2, 0x2a4, 0x7, 0x3, 0x2, 0x2, 0x2, 0x2a5, 
       0x2a7, 0x5, 0x34, 0x1b, 0x2, 0x2a6, 0x2a5, 0x3, 0x2, 0x2, 0x2, 0x2a6, 
       0x2a7, 0x3, 0x2, 0x2, 0x2, 0x2a7, 0x2a8, 0x3, 0x2, 0x2, 0x2, 0x2a8, 
       0x2a9, 0x7, 0x12, 0x2, 0x2, 0x2a9, 0x2ab, 0x5, 0x4, 0x3, 0x2, 0x2aa, 
       0x2ac, 0x5, 0x14, 0xb, 0x2, 0x2ab, 0x2aa, 0x3, 0x2, 0x2, 0x2, 0x2ab, 
       0x2ac, 0x3, 0x2, 0x2, 0x2, 0x2ac, 0x2ad, 0x3, 0x2, 0x2, 0x2, 0x2ad, 
       0x2ae, 0x5, 0xc, 0x7, 0x2, 0x2ae, 0x9, 0x3, 0x2, 0x2, 0x2, 0x2af, 
       0x2b0, 0x7, 0x12, 0x2, 0x2, 0x2b0, 0x2b2, 0x5, 0x4, 0x3, 0x2, 0x2b1, 
       0x2b3, 0x5, 0x14, 0xb, 0x2, 0x2b2, 0x2b1, 0x3, 0x2, 0x2, 0x2, 0x2b2, 
       0x2b3, 0x3, 0x2, 0x2, 0x2, 0x2b3, 0x2b4, 0x3, 0x2, 0x2, 0x2, 0x2b4, 
       0x2b5, 0x5, 0xc, 0x7, 0x2, 0x2b5, 0x2bb, 0x3, 0x2, 0x2, 0x2, 0x2b6, 
       0x2b8, 0x5, 0x10, 0x9, 0x2, 0x2b7, 0x2b9, 0x7, 0x1e6, 0x2, 0x2, 0x2b8, 
       0x2b7, 0x3, 0x2, 0x2, 0x2, 0x2b8, 0x2b9, 0x3, 0x2, 0x2, 0x2, 0x2b9, 
       0x2bb, 0x3, 0x2, 0x2, 0x2, 0x2ba, 0x2af, 0x3, 0x2, 0x2, 0x2, 0x2ba, 
       0x2b6, 0x3, 0x2, 0x2, 0x2, 0x2bb, 0xb, 0x3, 0x2, 0x2, 0x2, 0x2bc, 
       0x2bd, 0x6, 0x7, 0x2, 0x2, 0x2bd, 0x2be, 0x7, 0x67, 0x2, 0x2, 0x2be, 
       0xd, 0x3, 0x2, 0x2, 0x2, 0x2bf, 0x2c9, 0x5, 0x8, 0x5, 0x2, 0x2c0, 
       0x2c2, 0x5, 0x10, 0x9, 0x2, 0x2c1, 0x2c0, 0x3, 0x2, 0x2, 0x2, 0x2c2, 
       0x2c3, 0x3, 0x2, 0x2, 0x2, 0x2c3, 0x2c1, 0x3, 0x2, 0x2, 0x2, 0x2c3, 
       0x2c4, 0x3, 0x2, 0x2, 0x2, 0x2c4, 0x2c6, 0x3, 0x2, 0x2, 0x2, 0x2c5, 
       0x2c7, 0x7, 0x82, 0x2, 0x2, 0x2c6, 0x2c5, 0x3, 0x2, 0x2, 0x2, 0x2c6, 
       0x2c7, 0x3, 0x2, 0x2, 0x2, 0x2c7, 0x2c9, 0x3, 0x2, 0x2, 0x2, 0x2c8, 
       0x2bf, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c1, 0x3, 0x2, 0x2, 0x2, 0x2c9, 
       0xf, 0x3, 0x2, 0x2, 0x2, 0x2ca, 0x311, 0x5, 0xb2, 0x5a, 0x2, 0x2cb, 
       0x311, 0x5, 0x26, 0x14, 0x2, 0x2cc, 0x311, 0x5, 0x28, 0x15, 0x2, 
       0x2cd, 0x311, 0x5, 0x2a, 0x16, 0x2, 0x2ce, 0x311, 0x5, 0x2c, 0x17, 
       0x2, 0x2cf, 0x311, 0x5, 0x2e, 0x18, 0x2, 0x2d0, 0x311, 0x5, 0x30, 
       0x19, 0x2, 0x2d1, 0x311, 0x5, 0x172, 0xba, 0x2, 0x2d2, 0x311, 0x5, 
       0x176, 0xbc, 0x2, 0x2d3, 0x311, 0x5, 0x178, 0xbd, 0x2, 0x2d4, 0x311, 
       0x5, 0x17c, 0xbf, 0x2, 0x2d5, 0x311, 0x5, 0x17e, 0xc0, 0x2, 0x2d6, 
       0x311, 0x5, 0x188, 0xc5, 0x2, 0x2d7, 0x311, 0x5, 0x104, 0x83, 0x2, 
       0x2d8, 0x311, 0x5, 0x110, 0x89, 0x2, 0x2d9, 0x311, 0x5, 0x18a, 0xc6, 
       0x2, 0x2da, 0x311, 0x5, 0x4a, 0x26, 0x2, 0x2db, 0x311, 0x5, 0x120, 
       0x91, 0x2, 0x2dc, 0x311, 0x5, 0x126, 0x94, 0x2, 0x2dd, 0x311, 0x5, 
       0x12c, 0x97, 0x2, 0x2de, 0x311, 0x5, 0x48, 0x25, 0x2, 0x2df, 0x311, 
       0x5, 0x32, 0x1a, 0x2, 0x2e0, 0x311, 0x5, 0x136, 0x9c, 0x2, 0x2e1, 
       0x311, 0x5, 0x138, 0x9d, 0x2, 0x2e2, 0x311, 0x5, 0x13a, 0x9e, 0x2, 
       0x2e3, 0x311, 0x5, 0x160, 0xb1, 0x2, 0x2e4, 0x311, 0x5, 0x170, 0xb9, 
       0x2, 0x2e5, 0x311, 0x5, 0x1b6, 0xdc, 0x2, 0x2e6, 0x311, 0x5, 0x1b8, 
       0xdd, 0x2, 0x2e7, 0x311, 0x5, 0x13c, 0x9f, 0x2, 0x2e8, 0x311, 0x5, 
       0x148, 0xa5, 0x2, 0x2e9, 0x311, 0x5, 0x162, 0xb2, 0x2, 0x2ea, 0x311, 
       0x5, 0x16a, 0xb6, 0x2, 0x2eb, 0x311, 0x5, 0x16c, 0xb7, 0x2, 0x2ec, 
       0x311, 0x5, 0x16e, 0xb8, 0x2, 0x2ed, 0x311, 0x5, 0x192, 0xca, 0x2, 
       0x2ee, 0x311, 0x5, 0x194, 0xcb, 0x2, 0x2ef, 0x311, 0x5, 0x196, 0xcc, 
       0x2, 0x2f0, 0x311, 0x5, 0x198, 0xcd, 0x2, 0x2f1, 0x311, 0x5, 0x19a, 
       0xce, 0x2, 0x2f2, 0x311, 0x5, 0x19c, 0xcf, 0x2, 0x2f3, 0x311, 0x5, 
       0x1a6, 0xd4, 0x2, 0x2f4, 0x311, 0x5, 0x1a8, 0xd5, 0x2, 0x2f5, 0x311, 
       0x5, 0x1b0, 0xd9, 0x2, 0x2f6, 0x311, 0x5, 0x1aa, 0xd6, 0x2, 0x2f7, 
       0x311, 0x5, 0x1b2, 0xda, 0x2, 0x2f8, 0x311, 0x5, 0x1b4, 0xdb, 0x2, 
       0x2f9, 0x311, 0x5, 0x1ba, 0xde, 0x2, 0x2fa, 0x311, 0x5, 0x276, 0x13c, 
       0x2, 0x2fb, 0x311, 0x5, 0x27a, 0x13e, 0x2, 0x2fc, 0x311, 0x5, 0x98, 
       0x4d, 0x2, 0x2fd, 0x311, 0x5, 0x9e, 0x50, 0x2, 0x2fe, 0x311, 0x5, 
       0x11c, 0x8f, 0x2, 0x2ff, 0x311, 0x5, 0xa0, 0x51, 0x2, 0x300, 0x311, 
       0x5, 0xa2, 0x52, 0x2, 0x301, 0x311, 0x5, 0xaa, 0x56, 0x2, 0x302, 
       0x311, 0x5, 0x14a, 0xa6, 0x2, 0x303, 0x311, 0x5, 0x14c, 0xa7, 0x2, 
       0x304, 0x311, 0x5, 0x21c, 0x10f, 0x2, 0x305, 0x311, 0x5, 0x22c, 0x117, 
       0x2, 0x306, 0x311, 0x5, 0x222, 0x112, 0x2, 0x307, 0x311, 0x5, 0x22a, 
       0x116, 0x2, 0x308, 0x311, 0x5, 0x1c0, 0xe1, 0x2, 0x309, 0x311, 0x5, 
       0xe2, 0x72, 0x2, 0x30a, 0x311, 0x5, 0x230, 0x119, 0x2, 0x30b, 0x311, 
       0x5, 0xe8, 0x75, 0x2, 0x30c, 0x311, 0x5, 0xea, 0x76, 0x2, 0x30d, 
       0x311, 0x5, 0xec, 0x77, 0x2, 0x30e, 0x311, 0x5, 0x18, 0xd, 0x2, 0x30f, 
       0x311, 0x5, 0x12, 0xa, 0x2, 0x310, 0x2ca, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2cb, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2cc, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2cd, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2ce, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2cf, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2d0, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2d1, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2d2, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2d3, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2d4, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2d5, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2d6, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2d7, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2d8, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2d9, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2da, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2db, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2dc, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2dd, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2df, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2e0, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2e1, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2e2, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2e3, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2e4, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2e5, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2e6, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2e7, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2e8, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2e9, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2ea, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2eb, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2ec, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2ed, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2ee, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2ef, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2f0, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2f1, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2f2, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2f3, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2f4, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2f5, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2f6, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2f7, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2f8, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2f9, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2fa, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2fb, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2fc, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2fd, 0x3, 0x2, 0x2, 0x2, 0x310, 0x2fe, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x2ff, 0x3, 0x2, 0x2, 0x2, 0x310, 0x300, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x301, 0x3, 0x2, 0x2, 0x2, 0x310, 0x302, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x303, 0x3, 0x2, 0x2, 0x2, 0x310, 0x304, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x305, 0x3, 0x2, 0x2, 0x2, 0x310, 0x306, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x307, 0x3, 0x2, 0x2, 0x2, 0x310, 0x308, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x309, 0x3, 0x2, 0x2, 0x2, 0x310, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x30b, 0x3, 0x2, 0x2, 0x2, 0x310, 0x30c, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x30d, 0x3, 0x2, 0x2, 0x2, 0x310, 0x30e, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x30f, 0x3, 0x2, 0x2, 0x2, 0x311, 0x11, 0x3, 0x2, 0x2, 0x2, 0x312, 
       0x313, 0x9, 0x2, 0x2, 0x2, 0x313, 0x13, 0x3, 0x2, 0x2, 0x2, 0x314, 
       0x316, 0x7, 0x6d, 0x2, 0x2, 0x315, 0x317, 0x5, 0x16, 0xc, 0x2, 0x316, 
       0x315, 0x3, 0x2, 0x2, 0x2, 0x317, 0x318, 0x3, 0x2, 0x2, 0x2, 0x318, 
       0x316, 0x3, 0x2, 0x2, 0x2, 0x318, 0x319, 0x3, 0x2, 0x2, 0x2, 0x319, 
       0x15, 0x3, 0x2, 0x2, 0x2, 0x31a, 0x31b, 0x7, 0x147, 0x2, 0x2, 0x31b, 
       0x31c, 0x7, 0x1f1, 0x2, 0x2, 0x31c, 0x31d, 0x7, 0x12f, 0x2, 0x2, 
       0x31d, 0x31e, 0x5, 0x4, 0x3, 0x2, 0x31e, 0x31f, 0xa, 0x3, 0x2, 0x2, 
       0x31f, 0x17, 0x3, 0x2, 0x2, 0x2, 0x320, 0x321, 0x7, 0x109, 0x2, 0x2, 
       0x321, 0x32c, 0x5, 0x19e, 0xd0, 0x2, 0x322, 0x323, 0x9, 0x4, 0x2, 
       0x2, 0x323, 0x328, 0x5, 0x1a, 0xe, 0x2, 0x324, 0x325, 0x7, 0x1d3, 
       0x2, 0x2, 0x325, 0x327, 0x5, 0x1a, 0xe, 0x2, 0x326, 0x324, 0x3, 0x2, 
       0x2, 0x2, 0x327, 0x32a, 0x3, 0x2, 0x2, 0x2, 0x328, 0x326, 0x3, 0x2, 
       0x2, 0x2, 0x328, 0x329, 0x3, 0x2, 0x2, 0x2, 0x329, 0x32c, 0x3, 0x2, 
       0x2, 0x2, 0x32a, 0x328, 0x3, 0x2, 0x2, 0x2, 0x32b, 0x320, 0x3, 0x2, 
       0x2, 0x2, 0x32b, 0x322, 0x3, 0x2, 0x2, 0x2, 0x32c, 0x19, 0x3, 0x2, 
       0x2, 0x2, 0x32d, 0x331, 0x5, 0x1c, 0xf, 0x2, 0x32e, 0x331, 0x5, 0x1e, 
       0x10, 0x2, 0x32f, 0x331, 0x5, 0x20, 0x11, 0x2, 0x330, 0x32d, 0x3, 
       0x2, 0x2, 0x2, 0x330, 0x32e, 0x3, 0x2, 0x2, 0x2, 0x330, 0x32f, 0x3, 
       0x2, 0x2, 0x2, 0x331, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x332, 0x334, 0x5, 
       0x22, 0x12, 0x2, 0x333, 0x335, 0x7, 0x1d2, 0x2, 0x2, 0x334, 0x333, 
       0x3, 0x2, 0x2, 0x2, 0x334, 0x335, 0x3, 0x2, 0x2, 0x2, 0x335, 0x33b, 
       0x3, 0x2, 0x2, 0x2, 0x336, 0x337, 0x5, 0x244, 0x123, 0x2, 0x337, 
       0x338, 0x5, 0x22, 0x12, 0x2, 0x338, 0x33a, 0x3, 0x2, 0x2, 0x2, 0x339, 
       0x336, 0x3, 0x2, 0x2, 0x2, 0x33a, 0x33d, 0x3, 0x2, 0x2, 0x2, 0x33b, 
       0x339, 0x3, 0x2, 0x2, 0x2, 0x33b, 0x33c, 0x3, 0x2, 0x2, 0x2, 0x33c, 
       0x348, 0x3, 0x2, 0x2, 0x2, 0x33d, 0x33b, 0x3, 0x2, 0x2, 0x2, 0x33e, 
       0x33f, 0x7, 0x1e1, 0x2, 0x2, 0x33f, 0x340, 0x5, 0x22, 0x12, 0x2, 
       0x340, 0x342, 0x7, 0x1e4, 0x2, 0x2, 0x341, 0x343, 0x7, 0x1d2, 0x2, 
       0x2, 0x342, 0x341, 0x3, 0x2, 0x2, 0x2, 0x342, 0x343, 0x3, 0x2, 0x2, 
       0x2, 0x343, 0x344, 0x3, 0x2, 0x2, 0x2, 0x344, 0x345, 0x7, 0x1d7, 
       0x2, 0x2, 0x345, 0x346, 0x5, 0x22, 0x12, 0x2, 0x346, 0x348, 0x3, 
       0x2, 0x2, 0x2, 0x347, 0x332, 0x3, 0x2, 0x2, 0x2, 0x347, 0x33e, 0x3, 
       0x2, 0x2, 0x2, 0x348, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x349, 0x34a, 0x7, 
       0x1e1, 0x2, 0x2, 0x34a, 0x34f, 0x5, 0x246, 0x124, 0x2, 0x34b, 0x34c, 
       0x7, 0x1d3, 0x2, 0x2, 0x34c, 0x34e, 0x5, 0x246, 0x124, 0x2, 0x34d, 
       0x34b, 0x3, 0x2, 0x2, 0x2, 0x34e, 0x351, 0x3, 0x2, 0x2, 0x2, 0x34f, 
       0x34d, 0x3, 0x2, 0x2, 0x2, 0x34f, 0x350, 0x3, 0x2, 0x2, 0x2, 0x350, 
       0x352, 0x3, 0x2, 0x2, 0x2, 0x351, 0x34f, 0x3, 0x2, 0x2, 0x2, 0x352, 
       0x354, 0x7, 0x1e4, 0x2, 0x2, 0x353, 0x355, 0x7, 0x1d2, 0x2, 0x2, 
       0x354, 0x353, 0x3, 0x2, 0x2, 0x2, 0x354, 0x355, 0x3, 0x2, 0x2, 0x2, 
       0x355, 0x356, 0x3, 0x2, 0x2, 0x2, 0x356, 0x357, 0x7, 0x1d7, 0x2, 
       0x2, 0x357, 0x358, 0x7, 0x1e1, 0x2, 0x2, 0x358, 0x35d, 0x5, 0x246, 
       0x124, 0x2, 0x359, 0x35a, 0x7, 0x1d3, 0x2, 0x2, 0x35a, 0x35c, 0x5, 
       0x246, 0x124, 0x2, 0x35b, 0x359, 0x3, 0x2, 0x2, 0x2, 0x35c, 0x35f, 
       0x3, 0x2, 0x2, 0x2, 0x35d, 0x35b, 0x3, 0x2, 0x2, 0x2, 0x35d, 0x35e, 
       0x3, 0x2, 0x2, 0x2, 0x35e, 0x360, 0x3, 0x2, 0x2, 0x2, 0x35f, 0x35d, 
       0x3, 0x2, 0x2, 0x2, 0x360, 0x361, 0x7, 0x1e4, 0x2, 0x2, 0x361, 0x1f, 
       0x3, 0x2, 0x2, 0x2, 0x362, 0x36f, 0x5, 0x246, 0x124, 0x2, 0x363, 
       0x364, 0x7, 0x1e1, 0x2, 0x2, 0x364, 0x369, 0x5, 0x246, 0x124, 0x2, 
       0x365, 0x366, 0x7, 0x1d3, 0x2, 0x2, 0x366, 0x368, 0x5, 0x246, 0x124, 
       0x2, 0x367, 0x365, 0x3, 0x2, 0x2, 0x2, 0x368, 0x36b, 0x3, 0x2, 0x2, 
       0x2, 0x369, 0x367, 0x3, 0x2, 0x2, 0x2, 0x369, 0x36a, 0x3, 0x2, 0x2, 
       0x2, 0x36a, 0x36c, 0x3, 0x2, 0x2, 0x2, 0x36b, 0x369, 0x3, 0x2, 0x2, 
       0x2, 0x36c, 0x36d, 0x7, 0x1e4, 0x2, 0x2, 0x36d, 0x36f, 0x3, 0x2, 
       0x2, 0x2, 0x36e, 0x362, 0x3, 0x2, 0x2, 0x2, 0x36e, 0x363, 0x3, 0x2, 
       0x2, 0x2, 0x36f, 0x371, 0x3, 0x2, 0x2, 0x2, 0x370, 0x372, 0x7, 0x1d2, 
       0x2, 0x2, 0x371, 0x370, 0x3, 0x2, 0x2, 0x2, 0x371, 0x372, 0x3, 0x2, 
       0x2, 0x2, 0x372, 0x373, 0x3, 0x2, 0x2, 0x2, 0x373, 0x374, 0x7, 0x1d7, 
       0x2, 0x2, 0x374, 0x375, 0x7, 0x1e1, 0x2, 0x2, 0x375, 0x376, 0x5, 
       0x1c0, 0xe1, 0x2, 0x376, 0x377, 0x7, 0x1e4, 0x2, 0x2, 0x377, 0x21, 
       0x3, 0x2, 0x2, 0x2, 0x378, 0x37b, 0x5, 0x288, 0x145, 0x2, 0x379, 
       0x37b, 0x5, 0x24, 0x13, 0x2, 0x37a, 0x378, 0x3, 0x2, 0x2, 0x2, 0x37a, 
       0x379, 0x3, 0x2, 0x2, 0x2, 0x37b, 0x383, 0x3, 0x2, 0x2, 0x2, 0x37c, 
       0x37f, 0x7, 0x1ea, 0x2, 0x2, 0x37d, 0x380, 0x5, 0x288, 0x145, 0x2, 
       0x37e, 0x380, 0x5, 0x24, 0x13, 0x2, 0x37f, 0x37d, 0x3, 0x2, 0x2, 
       0x2, 0x37f, 0x37e, 0x3, 0x2, 0x2, 0x2, 0x380, 0x382, 0x3, 0x2, 0x2, 
       0x2, 0x381, 0x37c, 0x3, 0x2, 0x2, 0x2, 0x382, 0x385, 0x3, 0x2, 0x2, 
       0x2, 0x383, 0x381, 0x3, 0x2, 0x2, 0x2, 0x383, 0x384, 0x3, 0x2, 0x2, 
       0x2, 0x384, 0x388, 0x3, 0x2, 0x2, 0x2, 0x385, 0x383, 0x3, 0x2, 0x2, 
       0x2, 0x386, 0x388, 0x5, 0x246, 0x124, 0x2, 0x387, 0x37a, 0x3, 0x2, 
       0x2, 0x2, 0x387, 0x386, 0x3, 0x2, 0x2, 0x2, 0x388, 0x23, 0x3, 0x2, 
       0x2, 0x2, 0x389, 0x38a, 0x9, 0x5, 0x2, 0x2, 0x38a, 0x25, 0x3, 0x2, 
       0x2, 0x2, 0x38b, 0x38c, 0x7, 0x6, 0x2, 0x2, 0x38c, 0x38d, 0x5, 0x288, 
       0x145, 0x2, 0x38d, 0x38e, 0x7, 0x3f, 0x2, 0x2, 0x38e, 0x392, 0x7, 
       0x79, 0x2, 0x2, 0x38f, 0x390, 0x7, 0xf2, 0x2, 0x2, 0x390, 0x393, 
       0x7, 0x109, 0x2, 0x2, 0x391, 0x393, 0x7, 0xe6, 0x2, 0x2, 0x392, 0x38f, 
       0x3, 0x2, 0x2, 0x2, 0x392, 0x391, 0x3, 0x2, 0x2, 0x2, 0x393, 0x394, 
       0x3, 0x2, 0x2, 0x2, 0x394, 0x395, 0x5, 0x288, 0x145, 0x2, 0x395, 
       0x27, 0x3, 0x2, 0x2, 0x2, 0x396, 0x399, 0x7, 0xd, 0x2, 0x2, 0x397, 
       0x398, 0x7, 0xf2, 0x2, 0x2, 0x398, 0x39a, 0x7, 0x109, 0x2, 0x2, 0x399, 
       0x397, 0x3, 0x2, 0x2, 0x2, 0x399, 0x39a, 0x3, 0x2, 0x2, 0x2, 0x39a, 
       0x39b, 0x3, 0x2, 0x2, 0x2, 0x39b, 0x39c, 0x9, 0x6, 0x2, 0x2, 0x39c, 
       0x39d, 0x7, 0x1e1, 0x2, 0x2, 0x39d, 0x3a2, 0x5, 0x288, 0x145, 0x2, 
       0x39e, 0x39f, 0x7, 0x1d3, 0x2, 0x2, 0x39f, 0x3a1, 0x5, 0x288, 0x145, 
       0x2, 0x3a0, 0x39e, 0x3, 0x2, 0x2, 0x2, 0x3a1, 0x3a4, 0x3, 0x2, 0x2, 
       0x2, 0x3a2, 0x3a0, 0x3, 0x2, 0x2, 0x2, 0x3a2, 0x3a3, 0x3, 0x2, 0x2, 
       0x2, 0x3a3, 0x3a5, 0x3, 0x2, 0x2, 0x2, 0x3a4, 0x3a2, 0x3, 0x2, 0x2, 
       0x2, 0x3a5, 0x3a6, 0x7, 0x1e4, 0x2, 0x2, 0x3a6, 0x3a7, 0x7, 0x14a, 
       0x2, 0x2, 0x3a7, 0x3a8, 0x7, 0xe6, 0x2, 0x2, 0x3a8, 0x3a9, 0x5, 0x288, 
       0x145, 0x2, 0x3a9, 0x29, 0x3, 0x2, 0x2, 0x2, 0x3aa, 0x3ab, 0x7, 0x12, 
       0x2, 0x2, 0x3ab, 0x3ac, 0x7, 0x135, 0x2, 0x2, 0x3ac, 0x2b, 0x3, 0x2, 
       0x2, 0x2, 0x3ad, 0x3ae, 0x7, 0x14e, 0x2, 0x2, 0x3ae, 0x3b0, 0x7, 
       0x136, 0x2, 0x2, 0x3af, 0x3b1, 0x5, 0x288, 0x145, 0x2, 0x3b0, 0x3af, 
       0x3, 0x2, 0x2, 0x2, 0x3b1, 0x3b2, 0x3, 0x2, 0x2, 0x2, 0x3b2, 0x3b0, 
       0x3, 0x2, 0x2, 0x2, 0x3b2, 0x3b3, 0x3, 0x2, 0x2, 0x2, 0x3b3, 0x2d, 
       0x3, 0x2, 0x2, 0x2, 0x3b4, 0x3b5, 0x7, 0x1a, 0x2, 0x2, 0x3b5, 0x2f, 
       0x3, 0x2, 0x2, 0x2, 0x3b6, 0x3b7, 0x7, 0x1d, 0x2, 0x2, 0x3b7, 0x3be, 
       0x5, 0x288, 0x145, 0x2, 0x3b8, 0x3ba, 0x7, 0x1e1, 0x2, 0x2, 0x3b9, 
       0x3bb, 0x5, 0x26e, 0x138, 0x2, 0x3ba, 0x3b9, 0x3, 0x2, 0x2, 0x2, 
       0x3ba, 0x3bb, 0x3, 0x2, 0x2, 0x2, 0x3bb, 0x3bc, 0x3, 0x2, 0x2, 0x2, 
       0x3bc, 0x3bf, 0x7, 0x1e4, 0x2, 0x2, 0x3bd, 0x3bf, 0x5, 0x26e, 0x138, 
       0x2, 0x3be, 0x3b8, 0x3, 0x2, 0x2, 0x2, 0x3be, 0x3bd, 0x3, 0x2, 0x2, 
       0x2, 0x3be, 0x3bf, 0x3, 0x2, 0x2, 0x2, 0x3bf, 0x31, 0x3, 0x2, 0x2, 
       0x2, 0x3c0, 0x3c1, 0x7, 0x49, 0x2, 0x2, 0x3c1, 0x3c6, 0x5, 0x38, 
       0x1d, 0x2, 0x3c2, 0x3c3, 0x7, 0x1d3, 0x2, 0x2, 0x3c3, 0x3c5, 0x5, 
       0x38, 0x1d, 0x2, 0x3c4, 0x3c2, 0x3, 0x2, 0x2, 0x2, 0x3c5, 0x3c8, 
       0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c4, 0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c7, 
       0x3, 0x2, 0x2, 0x2, 0x3c7, 0x33, 0x3, 0x2, 0x2, 0x2, 0x3c8, 0x3c6, 
       0x3, 0x2, 0x2, 0x2, 0x3c9, 0x3ca, 0x7, 0x49, 0x2, 0x2, 0x3ca, 0x3cb, 
       0x5, 0x38, 0x1d, 0x2, 0x3cb, 0x3d1, 0x7, 0x1e6, 0x2, 0x2, 0x3cc, 
       0x3cd, 0x5, 0x38, 0x1d, 0x2, 0x3cd, 0x3ce, 0x7, 0x1e6, 0x2, 0x2, 
       0x3ce, 0x3d0, 0x3, 0x2, 0x2, 0x2, 0x3cf, 0x3cc, 0x3, 0x2, 0x2, 0x2, 
       0x3d0, 0x3d3, 0x3, 0x2, 0x2, 0x2, 0x3d1, 0x3cf, 0x3, 0x2, 0x2, 0x2, 
       0x3d1, 0x3d2, 0x3, 0x2, 0x2, 0x2, 0x3d2, 0x35, 0x3, 0x2, 0x2, 0x2, 
       0x3d3, 0x3d1, 0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3d5, 0x5, 0x38, 0x1d, 
       0x2, 0x3d5, 0x3db, 0x7, 0x1e6, 0x2, 0x2, 0x3d6, 0x3d7, 0x5, 0x38, 
       0x1d, 0x2, 0x3d7, 0x3d8, 0x7, 0x1e6, 0x2, 0x2, 0x3d8, 0x3da, 0x3, 
       0x2, 0x2, 0x2, 0x3d9, 0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3da, 0x3dd, 0x3, 
       0x2, 0x2, 0x2, 0x3db, 0x3d9, 0x3, 0x2, 0x2, 0x2, 0x3db, 0x3dc, 0x3, 
       0x2, 0x2, 0x2, 0x3dc, 0x37, 0x3, 0x2, 0x2, 0x2, 0x3dd, 0x3db, 0x3, 
       0x2, 0x2, 0x2, 0x3de, 0x3e4, 0x5, 0x3e, 0x20, 0x2, 0x3df, 0x3e4, 
       0x5, 0x3c, 0x1f, 0x2, 0x3e0, 0x3e4, 0x5, 0x44, 0x23, 0x2, 0x3e1, 
       0x3e4, 0x5, 0x3a, 0x1e, 0x2, 0x3e2, 0x3e4, 0x5, 0x46, 0x24, 0x2, 
       0x3e3, 0x3de, 0x3, 0x2, 0x2, 0x2, 0x3e3, 0x3df, 0x3, 0x2, 0x2, 0x2, 
       0x3e3, 0x3e0, 0x3, 0x2, 0x2, 0x2, 0x3e3, 0x3e1, 0x3, 0x2, 0x2, 0x2, 
       0x3e3, 0x3e2, 0x3, 0x2, 0x2, 0x2, 0x3e4, 0x39, 0x3, 0x2, 0x2, 0x2, 
       0x3e5, 0x3ea, 0x5, 0x288, 0x145, 0x2, 0x3e6, 0x3e7, 0x7, 0x1d3, 0x2, 
       0x2, 0x3e7, 0x3e9, 0x5, 0x288, 0x145, 0x2, 0x3e8, 0x3e6, 0x3, 0x2, 
       0x2, 0x2, 0x3e9, 0x3ec, 0x3, 0x2, 0x2, 0x2, 0x3ea, 0x3e8, 0x3, 0x2, 
       0x2, 0x2, 0x3ea, 0x3eb, 0x3, 0x2, 0x2, 0x2, 0x3eb, 0x3ee, 0x3, 0x2, 
       0x2, 0x2, 0x3ec, 0x3ea, 0x3, 0x2, 0x2, 0x2, 0x3ed, 0x3ef, 0x7, 0xb, 
       0x2, 0x2, 0x3ee, 0x3ed, 0x3, 0x2, 0x2, 0x2, 0x3ee, 0x3ef, 0x3, 0x2, 
       0x2, 0x2, 0x3ef, 0x3f0, 0x3, 0x2, 0x2, 0x2, 0x3f0, 0x3f4, 0x5, 0xee, 
       0x78, 0x2, 0x3f1, 0x3f3, 0x5, 0x100, 0x81, 0x2, 0x3f2, 0x3f1, 0x3, 
       0x2, 0x2, 0x2, 0x3f3, 0x3f6, 0x3, 0x2, 0x2, 0x2, 0x3f4, 0x3f2, 0x3, 
       0x2, 0x2, 0x2, 0x3f4, 0x3f5, 0x3, 0x2, 0x2, 0x2, 0x3f5, 0x3f8, 0x3, 
       0x2, 0x2, 0x2, 0x3f6, 0x3f4, 0x3, 0x2, 0x2, 0x2, 0x3f7, 0x3f9, 0x5, 
       0x102, 0x82, 0x2, 0x3f8, 0x3f7, 0x3, 0x2, 0x2, 0x2, 0x3f8, 0x3f9, 
       0x3, 0x2, 0x2, 0x2, 0x3f9, 0x403, 0x3, 0x2, 0x2, 0x2, 0x3fa, 0x3fb, 
       0x5, 0x288, 0x145, 0x2, 0x3fb, 0x3fd, 0x7, 0x2f, 0x2, 0x2, 0x3fc, 
       0x3fe, 0x7, 0xb, 0x2, 0x2, 0x3fd, 0x3fc, 0x3, 0x2, 0x2, 0x2, 0x3fd, 
       0x3fe, 0x3, 0x2, 0x2, 0x2, 0x3fe, 0x3ff, 0x3, 0x2, 0x2, 0x2, 0x3ff, 
       0x400, 0x5, 0xee, 0x78, 0x2, 0x400, 0x401, 0x5, 0x102, 0x82, 0x2, 
       0x401, 0x403, 0x3, 0x2, 0x2, 0x2, 0x402, 0x3e5, 0x3, 0x2, 0x2, 0x2, 
       0x402, 0x3fa, 0x3, 0x2, 0x2, 0x2, 0x403, 0x3b, 0x3, 0x2, 0x2, 0x2, 
       0x404, 0x405, 0x5, 0x288, 0x145, 0x2, 0x405, 0x406, 0x7, 0x33, 0x2, 
       0x2, 0x406, 0x3d, 0x3, 0x2, 0x2, 0x2, 0x407, 0x408, 0x7, 0x3f, 0x2, 
       0x2, 0x408, 0x40d, 0x5, 0x288, 0x145, 0x2, 0x409, 0x40a, 0x5, 0x288, 
       0x145, 0x2, 0x40a, 0x40b, 0x7, 0x3f, 0x2, 0x2, 0x40b, 0x40d, 0x3, 
       0x2, 0x2, 0x2, 0x40c, 0x407, 0x3, 0x2, 0x2, 0x2, 0x40c, 0x409, 0x3, 
       0x2, 0x2, 0x2, 0x40d, 0x410, 0x3, 0x2, 0x2, 0x2, 0x40e, 0x411, 0x5, 
       0x40, 0x21, 0x2, 0x40f, 0x411, 0x5, 0x42, 0x22, 0x2, 0x410, 0x40e, 
       0x3, 0x2, 0x2, 0x2, 0x410, 0x40f, 0x3, 0x2, 0x2, 0x2, 0x410, 0x411, 
       0x3, 0x2, 0x2, 0x2, 0x411, 0x412, 0x3, 0x2, 0x2, 0x2, 0x412, 0x415, 
       0x9, 0x7, 0x2, 0x2, 0x413, 0x416, 0x5, 0x1c0, 0xe1, 0x2, 0x414, 0x416, 
       0x5, 0x246, 0x124, 0x2, 0x415, 0x413, 0x3, 0x2, 0x2, 0x2, 0x415, 
       0x414, 0x3, 0x2, 0x2, 0x2, 0x416, 0x3f, 0x3, 0x2, 0x2, 0x2, 0x417, 
       0x418, 0x7, 0x14a, 0x2, 0x2, 0x418, 0x41a, 0x7, 0xf4, 0x2, 0x2, 0x419, 
       0x41b, 0x7, 0xd3, 0x2, 0x2, 0x41a, 0x419, 0x3, 0x2, 0x2, 0x2, 0x41a, 
       0x41b, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x41e, 0x3, 0x2, 0x2, 0x2, 0x41c, 
       0x41d, 0x7, 0x133, 0x2, 0x2, 0x41d, 0x41f, 0x9, 0x8, 0x2, 0x2, 0x41e, 
       0x41c, 0x3, 0x2, 0x2, 0x2, 0x41e, 0x41f, 0x3, 0x2, 0x2, 0x2, 0x41f, 
       0x41, 0x3, 0x2, 0x2, 0x2, 0x420, 0x421, 0x7, 0x14b, 0x2, 0x2, 0x421, 
       0x422, 0x7, 0xf4, 0x2, 0x2, 0x422, 0x43, 0x3, 0x2, 0x2, 0x2, 0x423, 
       0x424, 0x9, 0x9, 0x2, 0x2, 0x424, 0x425, 0x7, 0x88, 0x2, 0x2, 0x425, 
       0x42b, 0x7, 0x79, 0x2, 0x2, 0x426, 0x42c, 0x7, 0x116, 0x2, 0x2, 0x427, 
       0x42c, 0x7, 0x119, 0x2, 0x2, 0x428, 0x429, 0x7, 0xcb, 0x2, 0x2, 0x429, 
       0x42c, 0x7, 0x7c, 0x2, 0x2, 0x42a, 0x42c, 0x5, 0x288, 0x145, 0x2, 
       0x42b, 0x426, 0x3, 0x2, 0x2, 0x2, 0x42b, 0x427, 0x3, 0x2, 0x2, 0x2, 
       0x42b, 0x428, 0x3, 0x2, 0x2, 0x2, 0x42b, 0x42a, 0x3, 0x2, 0x2, 0x2, 
       0x42c, 0x42d, 0x3, 0x2, 0x2, 0x2, 0x42d, 0x42e, 0x5, 0xa, 0x6, 0x2, 
       0x42e, 0x45, 0x3, 0x2, 0x2, 0x2, 0x42f, 0x431, 0x7, 0x81, 0x2, 0x2, 
       0x430, 0x42f, 0x3, 0x2, 0x2, 0x2, 0x430, 0x431, 0x3, 0x2, 0x2, 0x2, 
       0x431, 0x432, 0x3, 0x2, 0x2, 0x2, 0x432, 0x433, 0x7, 0x12b, 0x2, 
       0x2, 0x433, 0x434, 0x7, 0x126, 0x2, 0x2, 0x434, 0x436, 0x5, 0x288, 
       0x145, 0x2, 0x435, 0x437, 0x5, 0x70, 0x39, 0x2, 0x436, 0x435, 0x3, 
       0x2, 0x2, 0x2, 0x436, 0x437, 0x3, 0x2, 0x2, 0x2, 0x437, 0x438, 0x3, 
       0x2, 0x2, 0x2, 0x438, 0x439, 0x5, 0x4c, 0x27, 0x2, 0x439, 0x47, 0x3, 
       0x2, 0x2, 0x2, 0x43a, 0x43c, 0x7, 0x39, 0x2, 0x2, 0x43b, 0x43d, 0x9, 
       0xa, 0x2, 0x2, 0x43c, 0x43b, 0x3, 0x2, 0x2, 0x2, 0x43c, 0x43d, 0x3, 
       0x2, 0x2, 0x2, 0x43d, 0x43e, 0x3, 0x2, 0x2, 0x2, 0x43e, 0x442, 0x7, 
       0x126, 0x2, 0x2, 0x43f, 0x440, 0x7, 0x8f, 0x2, 0x2, 0x440, 0x441, 
       0x7, 0xcb, 0x2, 0x2, 0x441, 0x443, 0x7, 0x6f, 0x2, 0x2, 0x442, 0x43f, 
       0x3, 0x2, 0x2, 0x2, 0x442, 0x443, 0x3, 0x2, 0x2, 0x2, 0x443, 0x444, 
       0x3, 0x2, 0x2, 0x2, 0x444, 0x445, 0x5, 0x200, 0x101, 0x2, 0x445, 
       0x446, 0x5, 0x4c, 0x27, 0x2, 0x446, 0x49, 0x3, 0x2, 0x2, 0x2, 0x447, 
       0x44e, 0x7, 0x39, 0x2, 0x2, 0x448, 0x449, 0x7, 0xb0, 0x2, 0x2, 0x449, 
       0x44f, 0x7, 0x12b, 0x2, 0x2, 0x44a, 0x44c, 0x9, 0xb, 0x2, 0x2, 0x44b, 
       0x44a, 0x3, 0x2, 0x2, 0x2, 0x44b, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x44c, 
       0x44d, 0x3, 0x2, 0x2, 0x2, 0x44d, 0x44f, 0x7, 0x146, 0x2, 0x2, 0x44e, 
       0x448, 0x3, 0x2, 0x2, 0x2, 0x44e, 0x44b, 0x3, 0x2, 0x2, 0x2, 0x44f, 
       0x450, 0x3, 0x2, 0x2, 0x2, 0x450, 0x451, 0x7, 0x126, 0x2, 0x2, 0x451, 
       0x453, 0x5, 0x288, 0x145, 0x2, 0x452, 0x454, 0x5, 0x70, 0x39, 0x2, 
       0x453, 0x452, 0x3, 0x2, 0x2, 0x2, 0x453, 0x454, 0x3, 0x2, 0x2, 0x2, 
       0x454, 0x455, 0x3, 0x2, 0x2, 0x2, 0x455, 0x456, 0x5, 0x4c, 0x27, 
       0x2, 0x456, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x457, 0x459, 0x5, 0x76, 0x3c, 
       0x2, 0x458, 0x457, 0x3, 0x2, 0x2, 0x2, 0x458, 0x459, 0x3, 0x2, 0x2, 
       0x2, 0x459, 0x460, 0x3, 0x2, 0x2, 0x2, 0x45a, 0x45b, 0x7, 0xad, 0x2, 
       0x2, 0x45b, 0x45d, 0x5, 0x200, 0x101, 0x2, 0x45c, 0x45e, 0x5, 0x10a, 
       0x86, 0x2, 0x45d, 0x45c, 0x3, 0x2, 0x2, 0x2, 0x45d, 0x45e, 0x3, 0x2, 
       0x2, 0x2, 0x45e, 0x460, 0x3, 0x2, 0x2, 0x2, 0x45f, 0x458, 0x3, 0x2, 
       0x2, 0x2, 0x45f, 0x45a, 0x3, 0x2, 0x2, 0x2, 0x460, 0x4d, 0x3, 0x2, 
       0x2, 0x2, 0x461, 0x466, 0x5, 0x50, 0x29, 0x2, 0x462, 0x463, 0x7, 
       0x1d3, 0x2, 0x2, 0x463, 0x465, 0x5, 0x50, 0x29, 0x2, 0x464, 0x462, 
       0x3, 0x2, 0x2, 0x2, 0x465, 0x468, 0x3, 0x2, 0x2, 0x2, 0x466, 0x464, 
       0x3, 0x2, 0x2, 0x2, 0x466, 0x467, 0x3, 0x2, 0x2, 0x2, 0x467, 0x46a, 
       0x3, 0x2, 0x2, 0x2, 0x468, 0x466, 0x3, 0x2, 0x2, 0x2, 0x469, 0x46b, 
       0x5, 0x58, 0x2d, 0x2, 0x46a, 0x469, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x46b, 
       0x3, 0x2, 0x2, 0x2, 0x46b, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x46c, 0x46d, 
       0x5, 0x52, 0x2a, 0x2, 0x46d, 0x46f, 0x5, 0xee, 0x78, 0x2, 0x46e, 
       0x470, 0x5, 0x66, 0x34, 0x2, 0x46f, 0x46e, 0x3, 0x2, 0x2, 0x2, 0x46f, 
       0x470, 0x3, 0x2, 0x2, 0x2, 0x470, 0x472, 0x3, 0x2, 0x2, 0x2, 0x471, 
       0x473, 0x5, 0x108, 0x85, 0x2, 0x472, 0x471, 0x3, 0x2, 0x2, 0x2, 0x472, 
       0x473, 0x3, 0x2, 0x2, 0x2, 0x473, 0x51, 0x3, 0x2, 0x2, 0x2, 0x474, 
       0x475, 0x5, 0x288, 0x145, 0x2, 0x475, 0x53, 0x3, 0x2, 0x2, 0x2, 0x476, 
       0x477, 0x5, 0x288, 0x145, 0x2, 0x477, 0x55, 0x3, 0x2, 0x2, 0x2, 0x478, 
       0x479, 0x5, 0x288, 0x145, 0x2, 0x479, 0x57, 0x3, 0x2, 0x2, 0x2, 0x47a, 
       0x47c, 0x5, 0x5a, 0x2e, 0x2, 0x47b, 0x47a, 0x3, 0x2, 0x2, 0x2, 0x47c, 
       0x47d, 0x3, 0x2, 0x2, 0x2, 0x47d, 0x47b, 0x3, 0x2, 0x2, 0x2, 0x47d, 
       0x47e, 0x3, 0x2, 0x2, 0x2, 0x47e, 0x59, 0x3, 0x2, 0x2, 0x2, 0x47f, 
       0x480, 0x7, 0x1d3, 0x2, 0x2, 0x480, 0x481, 0x7, 0xe3, 0x2, 0x2, 0x481, 
       0x482, 0x7, 0xa8, 0x2, 0x2, 0x482, 0x483, 0x5, 0x5e, 0x30, 0x2, 0x483, 
       0x484, 0x7, 0x62, 0x2, 0x2, 0x484, 0x485, 0x7, 0x64, 0x2, 0x2, 0x485, 
       0x486, 0x7, 0x65, 0x2, 0x2, 0x486, 0x487, 0x7, 0x1d5, 0x2, 0x2, 0x487, 
       0x488, 0x7, 0x66, 0x2, 0x2, 0x488, 0x4ae, 0x3, 0x2, 0x2, 0x2, 0x489, 
       0x48a, 0x7, 0x1d3, 0x2, 0x2, 0x48a, 0x48b, 0x7, 0x34, 0x2, 0x2, 0x48b, 
       0x48c, 0x5, 0x5c, 0x2f, 0x2, 0x48c, 0x48d, 0x7, 0x7a, 0x2, 0x2, 0x48d, 
       0x48e, 0x7, 0xa8, 0x2, 0x2, 0x48e, 0x48f, 0x5, 0x5e, 0x30, 0x2, 0x48f, 
       0x490, 0x7, 0xed, 0x2, 0x2, 0x490, 0x491, 0x5, 0x200, 0x101, 0x2, 
       0x491, 0x492, 0x5, 0x5e, 0x30, 0x2, 0x492, 0x493, 0x7, 0x62, 0x2, 
       0x2, 0x493, 0x494, 0x7, 0x64, 0x2, 0x2, 0x494, 0x4ae, 0x3, 0x2, 0x2, 
       0x2, 0x495, 0x496, 0x7, 0x1d3, 0x2, 0x2, 0x496, 0x497, 0x7, 0x34, 
       0x2, 0x2, 0x497, 0x498, 0x5, 0x5c, 0x2f, 0x2, 0x498, 0x499, 0x7, 
       0x13b, 0x2, 0x2, 0x499, 0x49a, 0x5, 0x5e, 0x30, 0x2, 0x49a, 0x49b, 
       0x7, 0x62, 0x2, 0x2, 0x49b, 0x49c, 0x7, 0x64, 0x2, 0x2, 0x49c, 0x49d, 
       0x7, 0x65, 0x2, 0x2, 0x49d, 0x49e, 0x7, 0x1d5, 0x2, 0x2, 0x49e, 0x49f, 
       0x7, 0x66, 0x2, 0x2, 0x49f, 0x4ae, 0x3, 0x2, 0x2, 0x2, 0x4a0, 0x4a1, 
       0x7, 0x1d3, 0x2, 0x2, 0x4a1, 0x4a2, 0x7, 0x34, 0x2, 0x2, 0x4a2, 0x4a3, 
       0x5, 0x5c, 0x2f, 0x2, 0x4a3, 0x4a5, 0x7, 0x63, 0x2, 0x2, 0x4a4, 0x4a6, 
       0x5, 0x246, 0x124, 0x2, 0x4a5, 0x4a4, 0x3, 0x2, 0x2, 0x2, 0x4a5, 
       0x4a6, 0x3, 0x2, 0x2, 0x2, 0x4a6, 0x4a7, 0x3, 0x2, 0x2, 0x2, 0x4a7, 
       0x4a8, 0x9, 0xc, 0x2, 0x2, 0x4a8, 0x4a9, 0x7, 0x64, 0x2, 0x2, 0x4a9, 
       0x4aa, 0x7, 0x65, 0x2, 0x2, 0x4aa, 0x4ab, 0x7, 0x1d5, 0x2, 0x2, 0x4ab, 
       0x4ac, 0x7, 0x66, 0x2, 0x2, 0x4ac, 0x4ae, 0x3, 0x2, 0x2, 0x2, 0x4ad, 
       0x47f, 0x3, 0x2, 0x2, 0x2, 0x4ad, 0x489, 0x3, 0x2, 0x2, 0x2, 0x4ad, 
       0x495, 0x3, 0x2, 0x2, 0x2, 0x4ad, 0x4a0, 0x3, 0x2, 0x2, 0x2, 0x4ae, 
       0x5b, 0x3, 0x2, 0x2, 0x2, 0x4af, 0x4b0, 0x5, 0x288, 0x145, 0x2, 0x4b0, 
       0x5d, 0x3, 0x2, 0x2, 0x2, 0x4b1, 0x4b2, 0x7, 0x1e1, 0x2, 0x2, 0x4b2, 
       0x4b3, 0x5, 0x60, 0x31, 0x2, 0x4b3, 0x4b4, 0x7, 0x1e4, 0x2, 0x2, 
       0x4b4, 0x5f, 0x3, 0x2, 0x2, 0x2, 0x4b5, 0x4ba, 0x5, 0x62, 0x32, 0x2, 
       0x4b6, 0x4b7, 0x7, 0x1d3, 0x2, 0x2, 0x4b7, 0x4b9, 0x5, 0x62, 0x32, 
       0x2, 0x4b8, 0x4b6, 0x3, 0x2, 0x2, 0x2, 0x4b9, 0x4bc, 0x3, 0x2, 0x2, 
       0x2, 0x4ba, 0x4b8, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4bb, 0x3, 0x2, 0x2, 
       0x2, 0x4bb, 0x61, 0x3, 0x2, 0x2, 0x2, 0x4bc, 0x4ba, 0x3, 0x2, 0x2, 
       0x2, 0x4bd, 0x4bf, 0x5, 0x52, 0x2a, 0x2, 0x4be, 0x4c0, 0x5, 0xee, 
       0x78, 0x2, 0x4bf, 0x4be, 0x3, 0x2, 0x2, 0x2, 0x4bf, 0x4c0, 0x3, 0x2, 
       0x2, 0x2, 0x4c0, 0x4c2, 0x3, 0x2, 0x2, 0x2, 0x4c1, 0x4c3, 0x9, 0xd, 
       0x2, 0x2, 0x4c2, 0x4c1, 0x3, 0x2, 0x2, 0x2, 0x4c2, 0x4c3, 0x3, 0x2, 
       0x2, 0x2, 0x4c3, 0x4c5, 0x3, 0x2, 0x2, 0x2, 0x4c4, 0x4c6, 0x5, 0x108, 
       0x85, 0x2, 0x4c5, 0x4c4, 0x3, 0x2, 0x2, 0x2, 0x4c5, 0x4c6, 0x3, 0x2, 
       0x2, 0x2, 0x4c6, 0x63, 0x3, 0x2, 0x2, 0x2, 0x4c7, 0x4c8, 0x7, 0x1e1, 
       0x2, 0x2, 0x4c8, 0x4cd, 0x5, 0x246, 0x124, 0x2, 0x4c9, 0x4ca, 0x7, 
       0x1d3, 0x2, 0x2, 0x4ca, 0x4cc, 0x5, 0x246, 0x124, 0x2, 0x4cb, 0x4c9, 
       0x3, 0x2, 0x2, 0x2, 0x4cc, 0x4cf, 0x3, 0x2, 0x2, 0x2, 0x4cd, 0x4cb, 
       0x3, 0x2, 0x2, 0x2, 0x4cd, 0x4ce, 0x3, 0x2, 0x2, 0x2, 0x4ce, 0x4d0, 
       0x3, 0x2, 0x2, 0x2, 0x4cf, 0x4cd, 0x3, 0x2, 0x2, 0x2, 0x4d0, 0x4d1, 
       0x7, 0x1e4, 0x2, 0x2, 0x4d1, 0x65, 0x3, 0x2, 0x2, 0x2, 0x4d2, 0x4d3, 
       0x7, 0xe3, 0x2, 0x2, 0x4d3, 0x4e6, 0x7, 0xa8, 0x2, 0x2, 0x4d4, 0x4d6, 
       0x7, 0xcb, 0x2, 0x2, 0x4d5, 0x4d4, 0x3, 0x2, 0x2, 0x2, 0x4d5, 0x4d6, 
       0x3, 0x2, 0x2, 0x2, 0x4d6, 0x4d7, 0x3, 0x2, 0x2, 0x2, 0x4d7, 0x4e6, 
       0x7, 0xcd, 0x2, 0x2, 0x4d8, 0x4e6, 0x7, 0x13b, 0x2, 0x2, 0x4d9, 0x4da, 
       0x7, 0x4a, 0x2, 0x2, 0x4da, 0x4e6, 0x5, 0x68, 0x35, 0x2, 0x4db, 0x4dd, 
       0x7, 0x63, 0x2, 0x2, 0x4dc, 0x4de, 0x5, 0x246, 0x124, 0x2, 0x4dd, 
       0x4dc, 0x3, 0x2, 0x2, 0x2, 0x4dd, 0x4de, 0x3, 0x2, 0x2, 0x2, 0x4de, 
       0x4df, 0x3, 0x2, 0x2, 0x2, 0x4df, 0x4e6, 0x7, 0x61, 0x2, 0x2, 0x4e0, 
       0x4e1, 0x7, 0x62, 0x2, 0x2, 0x4e1, 0x4e2, 0x7, 0x64, 0x2, 0x2, 0x4e2, 
       0x4e3, 0x7, 0x65, 0x2, 0x2, 0x4e3, 0x4e4, 0x7, 0x1d5, 0x2, 0x2, 0x4e4, 
       0x4e6, 0x7, 0x66, 0x2, 0x2, 0x4e5, 0x4d2, 0x3, 0x2, 0x2, 0x2, 0x4e5, 
       0x4d5, 0x3, 0x2, 0x2, 0x2, 0x4e5, 0x4d8, 0x3, 0x2, 0x2, 0x2, 0x4e5, 
       0x4d9, 0x3, 0x2, 0x2, 0x2, 0x4e5, 0x4db, 0x3, 0x2, 0x2, 0x2, 0x4e5, 
       0x4e0, 0x3, 0x2, 0x2, 0x2, 0x4e6, 0x67, 0x3, 0x2, 0x2, 0x2, 0x4e7, 
       0x4f3, 0x7, 0x154, 0x2, 0x2, 0x4e8, 0x4e9, 0x7, 0x169, 0x2, 0x2, 
       0x4e9, 0x4ea, 0x7, 0x1e1, 0x2, 0x2, 0x4ea, 0x4f3, 0x7, 0x1e4, 0x2, 
       0x2, 0x4eb, 0x4ec, 0x7, 0x167, 0x2, 0x2, 0x4ec, 0x4ed, 0x7, 0x1e1, 
       0x2, 0x2, 0x4ed, 0x4f3, 0x7, 0x1e4, 0x2, 0x2, 0x4ee, 0x4ef, 0x7, 
       0x168, 0x2, 0x2, 0x4ef, 0x4f0, 0x7, 0x1e1, 0x2, 0x2, 0x4f0, 0x4f3, 
       0x7, 0x1e4, 0x2, 0x2, 0x4f1, 0x4f3, 0x7, 0xcd, 0x2, 0x2, 0x4f2, 0x4e7, 
       0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4eb, 
       0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4ee, 0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4f1, 
       0x3, 0x2, 0x2, 0x2, 0x4f3, 0x69, 0x3, 0x2, 0x2, 0x2, 0x4f4, 0x4f5, 
       0x7, 0x2e, 0x2, 0x2, 0x4f5, 0x4f6, 0x5, 0x246, 0x124, 0x2, 0x4f6, 
       0x6b, 0x3, 0x2, 0x2, 0x2, 0x4f7, 0x4f8, 0x7, 0xe3, 0x2, 0x2, 0x4f8, 
       0x4fa, 0x7, 0xa8, 0x2, 0x2, 0x4f9, 0x4fb, 0x7, 0x28, 0x2, 0x2, 0x4fa, 
       0x4f9, 0x3, 0x2, 0x2, 0x2, 0x4fa, 0x4fb, 0x3, 0x2, 0x2, 0x2, 0x4fb, 
       0x4fc, 0x3, 0x2, 0x2, 0x2, 0x4fc, 0x4fd, 0x7, 0x1e1, 0x2, 0x2, 0x4fd, 
       0x4ff, 0x5, 0x288, 0x145, 0x2, 0x4fe, 0x500, 0x9, 0xd, 0x2, 0x2, 
       0x4ff, 0x4fe, 0x3, 0x2, 0x2, 0x2, 0x4ff, 0x500, 0x3, 0x2, 0x2, 0x2, 
       0x500, 0x508, 0x3, 0x2, 0x2, 0x2, 0x501, 0x502, 0x7, 0x1d3, 0x2, 
       0x2, 0x502, 0x504, 0x5, 0x288, 0x145, 0x2, 0x503, 0x505, 0x9, 0xd, 
       0x2, 0x2, 0x504, 0x503, 0x3, 0x2, 0x2, 0x2, 0x504, 0x505, 0x3, 0x2, 
       0x2, 0x2, 0x505, 0x507, 0x3, 0x2, 0x2, 0x2, 0x506, 0x501, 0x3, 0x2, 
       0x2, 0x2, 0x507, 0x50a, 0x3, 0x2, 0x2, 0x2, 0x508, 0x506, 0x3, 0x2, 
       0x2, 0x2, 0x508, 0x509, 0x3, 0x2, 0x2, 0x2, 0x509, 0x50b, 0x3, 0x2, 
       0x2, 0x2, 0x50a, 0x508, 0x3, 0x2, 0x2, 0x2, 0x50b, 0x50d, 0x7, 0x1e4, 
       0x2, 0x2, 0x50c, 0x50e, 0x7, 0x61, 0x2, 0x2, 0x50d, 0x50c, 0x3, 0x2, 
       0x2, 0x2, 0x50d, 0x50e, 0x3, 0x2, 0x2, 0x2, 0x50e, 0x510, 0x3, 0x2, 
       0x2, 0x2, 0x50f, 0x511, 0x5, 0x18e, 0xc8, 0x2, 0x510, 0x50f, 0x3, 
       0x2, 0x2, 0x2, 0x510, 0x511, 0x3, 0x2, 0x2, 0x2, 0x511, 0x531, 0x3, 
       0x2, 0x2, 0x2, 0x512, 0x513, 0x7, 0x7a, 0x2, 0x2, 0x513, 0x514, 0x7, 
       0xa8, 0x2, 0x2, 0x514, 0x515, 0x7, 0x1e1, 0x2, 0x2, 0x515, 0x51a, 
       0x5, 0x288, 0x145, 0x2, 0x516, 0x517, 0x7, 0x1d3, 0x2, 0x2, 0x517, 
       0x519, 0x5, 0x288, 0x145, 0x2, 0x518, 0x516, 0x3, 0x2, 0x2, 0x2, 
       0x519, 0x51c, 0x3, 0x2, 0x2, 0x2, 0x51a, 0x518, 0x3, 0x2, 0x2, 0x2, 
       0x51a, 0x51b, 0x3, 0x2, 0x2, 0x2, 0x51b, 0x51d, 0x3, 0x2, 0x2, 0x2, 
       0x51c, 0x51a, 0x3, 0x2, 0x2, 0x2, 0x51d, 0x51e, 0x7, 0x1e4, 0x2, 
       0x2, 0x51e, 0x51f, 0x7, 0xed, 0x2, 0x2, 0x51f, 0x520, 0x5, 0x200, 
       0x101, 0x2, 0x520, 0x521, 0x7, 0x1e1, 0x2, 0x2, 0x521, 0x526, 0x5, 
       0x288, 0x145, 0x2, 0x522, 0x523, 0x7, 0x1d3, 0x2, 0x2, 0x523, 0x525, 
       0x5, 0x288, 0x145, 0x2, 0x524, 0x522, 0x3, 0x2, 0x2, 0x2, 0x525, 
       0x528, 0x3, 0x2, 0x2, 0x2, 0x526, 0x524, 0x3, 0x2, 0x2, 0x2, 0x526, 
       0x527, 0x3, 0x2, 0x2, 0x2, 0x527, 0x529, 0x3, 0x2, 0x2, 0x2, 0x528, 
       0x526, 0x3, 0x2, 0x2, 0x2, 0x529, 0x52d, 0x7, 0x1e4, 0x2, 0x2, 0x52a, 
       0x52c, 0x5, 0x6e, 0x38, 0x2, 0x52b, 0x52a, 0x3, 0x2, 0x2, 0x2, 0x52c, 
       0x52f, 0x3, 0x2, 0x2, 0x2, 0x52d, 0x52b, 0x3, 0x2, 0x2, 0x2, 0x52d, 
       0x52e, 0x3, 0x2, 0x2, 0x2, 0x52e, 0x531, 0x3, 0x2, 0x2, 0x2, 0x52f, 
       0x52d, 0x3, 0x2, 0x2, 0x2, 0x530, 0x4f7, 0x3, 0x2, 0x2, 0x2, 0x530, 
       0x512, 0x3, 0x2, 0x2, 0x2, 0x531, 0x6d, 0x3, 0x2, 0x2, 0x2, 0x532, 
       0x533, 0x7, 0xd2, 0x2, 0x2, 0x533, 0x53c, 0x9, 0xe, 0x2, 0x2, 0x534, 
       0x535, 0x7, 0xc6, 0x2, 0x2, 0x535, 0x53d, 0x7, 0x3, 0x2, 0x2, 0x536, 
       0x53d, 0x7, 0xf1, 0x2, 0x2, 0x537, 0x538, 0x7, 0x109, 0x2, 0x2, 0x538, 
       0x53d, 0x7, 0xcd, 0x2, 0x2, 0x539, 0x53a, 0x7, 0x109, 0x2, 0x2, 0x53a, 
       0x53d, 0x7, 0x4a, 0x2, 0x2, 0x53b, 0x53d, 0x7, 0x1f, 0x2, 0x2, 0x53c, 
       0x534, 0x3, 0x2, 0x2, 0x2, 0x53c, 0x536, 0x3, 0x2, 0x2, 0x2, 0x53c, 
       0x537, 0x3, 0x2, 0x2, 0x2, 0x53c, 0x539, 0x3, 0x2, 0x2, 0x2, 0x53c, 
       0x53b, 0x3, 0x2, 0x2, 0x2, 0x53d, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x53e, 
       0x540, 0x5, 0x72, 0x3a, 0x2, 0x53f, 0x53e, 0x3, 0x2, 0x2, 0x2, 0x540, 
       0x541, 0x3, 0x2, 0x2, 0x2, 0x541, 0x53f, 0x3, 0x2, 0x2, 0x2, 0x541, 
       0x542, 0x3, 0x2, 0x2, 0x2, 0x542, 0x71, 0x3, 0x2, 0x2, 0x2, 0x543, 
       0x544, 0x7, 0x1d3, 0x2, 0x2, 0x544, 0x547, 0x5, 0x74, 0x3b, 0x2, 
       0x545, 0x547, 0x5, 0x90, 0x49, 0x2, 0x546, 0x543, 0x3, 0x2, 0x2, 
       0x2, 0x546, 0x545, 0x3, 0x2, 0x2, 0x2, 0x547, 0x73, 0x3, 0x2, 0x2, 
       0x2, 0x548, 0x54a, 0x7, 0xc6, 0x2, 0x2, 0x549, 0x548, 0x3, 0x2, 0x2, 
       0x2, 0x549, 0x54a, 0x3, 0x2, 0x2, 0x2, 0x54a, 0x54b, 0x3, 0x2, 0x2, 
       0x2, 0x54b, 0x54c, 0x9, 0xf, 0x2, 0x2, 0x54c, 0x75, 0x3, 0x2, 0x2, 
       0x2, 0x54d, 0x54f, 0x5, 0x78, 0x3d, 0x2, 0x54e, 0x54d, 0x3, 0x2, 
       0x2, 0x2, 0x54f, 0x550, 0x3, 0x2, 0x2, 0x2, 0x550, 0x54e, 0x3, 0x2, 
       0x2, 0x2, 0x550, 0x551, 0x3, 0x2, 0x2, 0x2, 0x551, 0x77, 0x3, 0x2, 
       0x2, 0x2, 0x552, 0x553, 0x7, 0x1e1, 0x2, 0x2, 0x553, 0x554, 0x5, 
       0x4e, 0x28, 0x2, 0x554, 0x555, 0x7, 0x1e4, 0x2, 0x2, 0x555, 0x567, 
       0x3, 0x2, 0x2, 0x2, 0x556, 0x567, 0x5, 0x108, 0x85, 0x2, 0x557, 0x567, 
       0x5, 0x7a, 0x3e, 0x2, 0x558, 0x567, 0x5, 0x7c, 0x3f, 0x2, 0x559, 
       0x55a, 0x5, 0x7e, 0x40, 0x2, 0x55a, 0x55b, 0x7, 0xd2, 0x2, 0x2, 0x55b, 
       0x55c, 0x7, 0x1e1, 0x2, 0x2, 0x55c, 0x55d, 0x5, 0x80, 0x41, 0x2, 
       0x55d, 0x55f, 0x7, 0x1e4, 0x2, 0x2, 0x55e, 0x560, 0x5, 0x82, 0x42, 
       0x2, 0x55f, 0x55e, 0x3, 0x2, 0x2, 0x2, 0x55f, 0x560, 0x3, 0x2, 0x2, 
       0x2, 0x560, 0x567, 0x3, 0x2, 0x2, 0x2, 0x561, 0x567, 0x5, 0x84, 0x43, 
       0x2, 0x562, 0x567, 0x5, 0x10a, 0x86, 0x2, 0x563, 0x567, 0x5, 0x10e, 
       0x88, 0x2, 0x564, 0x565, 0x7, 0xb, 0x2, 0x2, 0x565, 0x567, 0x5, 0x1c0, 
       0xe1, 0x2, 0x566, 0x552, 0x3, 0x2, 0x2, 0x2, 0x566, 0x556, 0x3, 0x2, 
       0x2, 0x2, 0x566, 0x557, 0x3, 0x2, 0x2, 0x2, 0x566, 0x558, 0x3, 0x2, 
       0x2, 0x2, 0x566, 0x559, 0x3, 0x2, 0x2, 0x2, 0x566, 0x561, 0x3, 0x2, 
       0x2, 0x2, 0x566, 0x562, 0x3, 0x2, 0x2, 0x2, 0x566, 0x563, 0x3, 0x2, 
       0x2, 0x2, 0x566, 0x564, 0x3, 0x2, 0x2, 0x2, 0x567, 0x79, 0x3, 0x2, 
       0x2, 0x2, 0x568, 0x569, 0x7, 0x19d, 0x2, 0x2, 0x569, 0x56a, 0x7, 
       0x1b, 0x2, 0x2, 0x56a, 0x56b, 0x5, 0x5e, 0x30, 0x2, 0x56b, 0x7b, 
       0x3, 0x2, 0x2, 0x2, 0x56c, 0x56d, 0x7, 0x28, 0x2, 0x2, 0x56d, 0x56e, 
       0x7, 0x1b, 0x2, 0x2, 0x56e, 0x572, 0x5, 0x5e, 0x30, 0x2, 0x56f, 0x570, 
       0x7, 0x187, 0x2, 0x2, 0x570, 0x571, 0x7, 0x1b, 0x2, 0x2, 0x571, 0x573, 
       0x5, 0x5e, 0x30, 0x2, 0x572, 0x56f, 0x3, 0x2, 0x2, 0x2, 0x572, 0x573, 
       0x3, 0x2, 0x2, 0x2, 0x573, 0x574, 0x3, 0x2, 0x2, 0x2, 0x574, 0x575, 
       0x7, 0xa1, 0x2, 0x2, 0x575, 0x576, 0x5, 0x28c, 0x147, 0x2, 0x576, 
       0x577, 0x7, 0x182, 0x2, 0x2, 0x577, 0x7d, 0x3, 0x2, 0x2, 0x2, 0x578, 
       0x579, 0x7, 0x183, 0x2, 0x2, 0x579, 0x57a, 0x7, 0x1b, 0x2, 0x2, 0x57a, 
       0x57b, 0x5, 0x5e, 0x30, 0x2, 0x57b, 0x7f, 0x3, 0x2, 0x2, 0x2, 0x57c, 
       0x581, 0x5, 0x64, 0x33, 0x2, 0x57d, 0x57e, 0x7, 0x1d3, 0x2, 0x2, 
       0x57e, 0x580, 0x5, 0x64, 0x33, 0x2, 0x57f, 0x57d, 0x3, 0x2, 0x2, 
       0x2, 0x580, 0x583, 0x3, 0x2, 0x2, 0x2, 0x581, 0x57f, 0x3, 0x2, 0x2, 
       0x2, 0x581, 0x582, 0x3, 0x2, 0x2, 0x2, 0x582, 0x81, 0x3, 0x2, 0x2, 
       0x2, 0x583, 0x581, 0x3, 0x2, 0x2, 0x2, 0x584, 0x585, 0x7, 0x11e, 
       0x2, 0x2, 0x585, 0x588, 0x7, 0xb, 0x2, 0x2, 0x586, 0x589, 0x7, 0x184, 
       0x2, 0x2, 0x587, 0x589, 0x5, 0x86, 0x44, 0x2, 0x588, 0x586, 0x3, 
       0x2, 0x2, 0x2, 0x588, 0x587, 0x3, 0x2, 0x2, 0x2, 0x589, 0x83, 0x3, 
       0x2, 0x2, 0x2, 0x58a, 0x58b, 0x7, 0xfa, 0x2, 0x2, 0x58b, 0x58c, 0x7, 
       0x7b, 0x2, 0x2, 0x58c, 0x58f, 0x5, 0x88, 0x45, 0x2, 0x58d, 0x58f, 
       0x5, 0x82, 0x42, 0x2, 0x58e, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x58e, 0x58d, 
       0x3, 0x2, 0x2, 0x2, 0x58f, 0x590, 0x3, 0x2, 0x2, 0x2, 0x590, 0x58e, 
       0x3, 0x2, 0x2, 0x2, 0x590, 0x591, 0x3, 0x2, 0x2, 0x2, 0x591, 0x599, 
       0x3, 0x2, 0x2, 0x2, 0x592, 0x593, 0x7, 0x11e, 0x2, 0x2, 0x593, 0x594, 
       0x7, 0x1b, 0x2, 0x2, 0x594, 0x596, 0x5, 0x246, 0x124, 0x2, 0x595, 
       0x597, 0x5, 0x10c, 0x87, 0x2, 0x596, 0x595, 0x3, 0x2, 0x2, 0x2, 0x596, 
       0x597, 0x3, 0x2, 0x2, 0x2, 0x597, 0x599, 0x3, 0x2, 0x2, 0x2, 0x598, 
       0x58e, 0x3, 0x2, 0x2, 0x2, 0x598, 0x592, 0x3, 0x2, 0x2, 0x2, 0x599, 
       0x85, 0x3, 0x2, 0x2, 0x2, 0x59a, 0x5a7, 0x7, 0x156, 0x2, 0x2, 0x59b, 
       0x5a7, 0x7, 0x157, 0x2, 0x2, 0x59c, 0x5a7, 0x7, 0x158, 0x2, 0x2, 
       0x59d, 0x5a7, 0x7, 0x159, 0x2, 0x2, 0x59e, 0x5a7, 0x7, 0x15a, 0x2, 
       0x2, 0x59f, 0x5a7, 0x7, 0x15b, 0x2, 0x2, 0x5a0, 0x5a7, 0x7, 0x15c, 
       0x2, 0x2, 0x5a1, 0x5a2, 0x7, 0x15d, 0x2, 0x2, 0x5a2, 0x5a3, 0x5, 
       0x246, 0x124, 0x2, 0x5a3, 0x5a4, 0x7, 0x15e, 0x2, 0x2, 0x5a4, 0x5a5, 
       0x5, 0x246, 0x124, 0x2, 0x5a5, 0x5a7, 0x3, 0x2, 0x2, 0x2, 0x5a6, 
       0x59a, 0x3, 0x2, 0x2, 0x2, 0x5a6, 0x59b, 0x3, 0x2, 0x2, 0x2, 0x5a6, 
       0x59c, 0x3, 0x2, 0x2, 0x2, 0x5a6, 0x59d, 0x3, 0x2, 0x2, 0x2, 0x5a6, 
       0x59e, 0x3, 0x2, 0x2, 0x2, 0x5a6, 0x59f, 0x3, 0x2, 0x2, 0x2, 0x5a6, 
       0x5a0, 0x3, 0x2, 0x2, 0x2, 0x5a6, 0x5a1, 0x3, 0x2, 0x2, 0x2, 0x5a7, 
       0x87, 0x3, 0x2, 0x2, 0x2, 0x5a8, 0x5b0, 0x7, 0x51, 0x2, 0x2, 0x5a9, 
       0x5aa, 0x7, 0x74, 0x2, 0x2, 0x5aa, 0x5ae, 0x5, 0x8c, 0x47, 0x2, 0x5ab, 
       0x5ac, 0x7, 0x69, 0x2, 0x2, 0x5ac, 0x5ad, 0x7, 0x1b, 0x2, 0x2, 0x5ad, 
       0x5af, 0x5, 0x8e, 0x48, 0x2, 0x5ae, 0x5ab, 0x3, 0x2, 0x2, 0x2, 0x5ae, 
       0x5af, 0x3, 0x2, 0x2, 0x2, 0x5af, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x5b0, 
       0x5a9, 0x3, 0x2, 0x2, 0x2, 0x5b0, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x5b1, 
       0x5b5, 0x3, 0x2, 0x2, 0x2, 0x5b2, 0x5b4, 0x5, 0x8a, 0x46, 0x2, 0x5b3, 
       0x5b2, 0x3, 0x2, 0x2, 0x2, 0x5b4, 0x5b7, 0x3, 0x2, 0x2, 0x2, 0x5b5, 
       0x5b3, 0x3, 0x2, 0x2, 0x2, 0x5b5, 0x5b6, 0x3, 0x2, 0x2, 0x2, 0x5b6, 
       0x5bc, 0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b5, 0x3, 0x2, 0x2, 0x2, 0x5b8, 
       0x5b9, 0x7, 0xcd, 0x2, 0x2, 0x5b9, 0x5ba, 0x7, 0x4d, 0x2, 0x2, 0x5ba, 
       0x5bb, 0x7, 0xb, 0x2, 0x2, 0x5bb, 0x5bd, 0x5, 0x8e, 0x48, 0x2, 0x5bc, 
       0x5b8, 0x3, 0x2, 0x2, 0x2, 0x5bc, 0x5bd, 0x3, 0x2, 0x2, 0x2, 0x5bd, 
       0x5c4, 0x3, 0x2, 0x2, 0x2, 0x5be, 0x5bf, 0x7, 0x155, 0x2, 0x2, 0x5bf, 
       0x5c1, 0x5, 0x246, 0x124, 0x2, 0x5c0, 0x5c2, 0x5, 0x10c, 0x87, 0x2, 
       0x5c1, 0x5c0, 0x3, 0x2, 0x2, 0x2, 0x5c1, 0x5c2, 0x3, 0x2, 0x2, 0x2, 
       0x5c2, 0x5c4, 0x3, 0x2, 0x2, 0x2, 0x5c3, 0x5a8, 0x3, 0x2, 0x2, 0x2, 
       0x5c3, 0x5be, 0x3, 0x2, 0x2, 0x2, 0x5c4, 0x89, 0x3, 0x2, 0x2, 0x2, 
       0x5c5, 0x5c6, 0x7, 0x2c, 0x2, 0x2, 0x5c6, 0x5cb, 0x7, 0xa5, 0x2, 
       0x2, 0x5c7, 0x5c8, 0x7, 0xb9, 0x2, 0x2, 0x5c8, 0x5cb, 0x7, 0xa9, 
       0x2, 0x2, 0x5c9, 0x5cb, 0x7, 0xaf, 0x2, 0x2, 0x5ca, 0x5c5, 0x3, 0x2, 
       0x2, 0x2, 0x5ca, 0x5c7, 0x3, 0x2, 0x2, 0x2, 0x5ca, 0x5c9, 0x3, 0x2, 
       0x2, 0x2, 0x5cb, 0x5cc, 0x3, 0x2, 0x2, 0x2, 0x5cc, 0x5cd, 0x5, 0x8c, 
       0x47, 0x2, 0x5cd, 0x8b, 0x3, 0x2, 0x2, 0x2, 0x5ce, 0x5cf, 0x7, 0x12d, 
       0x2, 0x2, 0x5cf, 0x5d0, 0x7, 0x1b, 0x2, 0x2, 0x5d0, 0x5d1, 0x5, 0x8e, 
       0x48, 0x2, 0x5d1, 0x8d, 0x3, 0x2, 0x2, 0x2, 0x5d2, 0x5d3, 0x5, 0x246, 
       0x124, 0x2, 0x5d3, 0x8f, 0x3, 0x2, 0x2, 0x2, 0x5d4, 0x5d9, 0x5, 0x92, 
       0x4a, 0x2, 0x5d5, 0x5d6, 0x7, 0x11e, 0x2, 0x2, 0x5d6, 0x5d7, 0x7, 
       0xb, 0x2, 0x2, 0x5d7, 0x5d9, 0x5, 0x288, 0x145, 0x2, 0x5d8, 0x5d4, 
       0x3, 0x2, 0x2, 0x2, 0x5d8, 0x5d5, 0x3, 0x2, 0x2, 0x2, 0x5d9, 0x91, 
       0x3, 0x2, 0x2, 0x2, 0x5da, 0x5db, 0x7, 0xfa, 0x2, 0x2, 0x5db, 0x5dc, 
       0x7, 0x7b, 0x2, 0x2, 0x5dc, 0x5e0, 0x7, 0x51, 0x2, 0x2, 0x5dd, 0x5df, 
       0x5, 0x94, 0x4b, 0x2, 0x5de, 0x5dd, 0x3, 0x2, 0x2, 0x2, 0x5df, 0x5e2, 
       0x3, 0x2, 0x2, 0x2, 0x5e0, 0x5de, 0x3, 0x2, 0x2, 0x2, 0x5e0, 0x5e1, 
       0x3, 0x2, 0x2, 0x2, 0x5e1, 0x93, 0x3, 0x2, 0x2, 0x2, 0x5e2, 0x5e0, 
       0x3, 0x2, 0x2, 0x2, 0x5e3, 0x5e4, 0x7, 0x74, 0x2, 0x2, 0x5e4, 0x5e8, 
       0x5, 0x8c, 0x47, 0x2, 0x5e5, 0x5e6, 0x7, 0x69, 0x2, 0x2, 0x5e6, 0x5e7, 
       0x7, 0x1b, 0x2, 0x2, 0x5e7, 0x5e9, 0x5, 0x246, 0x124, 0x2, 0x5e8, 
       0x5e5, 0x3, 0x2, 0x2, 0x2, 0x5e8, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5e9, 
       0x5f7, 0x3, 0x2, 0x2, 0x2, 0x5ea, 0x5eb, 0x7, 0x2c, 0x2, 0x2, 0x5eb, 
       0x5ec, 0x7, 0xa5, 0x2, 0x2, 0x5ec, 0x5f7, 0x5, 0x8c, 0x47, 0x2, 0x5ed, 
       0x5ee, 0x7, 0xb9, 0x2, 0x2, 0x5ee, 0x5ef, 0x7, 0xa9, 0x2, 0x2, 0x5ef, 
       0x5f7, 0x5, 0x8c, 0x47, 0x2, 0x5f0, 0x5f1, 0x7, 0xaf, 0x2, 0x2, 0x5f1, 
       0x5f7, 0x5, 0x8c, 0x47, 0x2, 0x5f2, 0x5f3, 0x7, 0xcd, 0x2, 0x2, 0x5f3, 
       0x5f4, 0x7, 0x4d, 0x2, 0x2, 0x5f4, 0x5f5, 0x7, 0xb, 0x2, 0x2, 0x5f5, 
       0x5f7, 0x5, 0x246, 0x124, 0x2, 0x5f6, 0x5e3, 0x3, 0x2, 0x2, 0x2, 
       0x5f6, 0x5ea, 0x3, 0x2, 0x2, 0x2, 0x5f6, 0x5ed, 0x3, 0x2, 0x2, 0x2, 
       0x5f6, 0x5f0, 0x3, 0x2, 0x2, 0x2, 0x5f6, 0x5f2, 0x3, 0x2, 0x2, 0x2, 
       0x5f7, 0x95, 0x3, 0x2, 0x2, 0x2, 0x5f8, 0x5f9, 0x7, 0xd2, 0x2, 0x2, 
       0x5f9, 0x5fd, 0x5, 0x288, 0x145, 0x2, 0x5fa, 0x5fb, 0x7, 0x12e, 0x2, 
       0x2, 0x5fb, 0x5fd, 0x5, 0x288, 0x145, 0x2, 0x5fc, 0x5f8, 0x3, 0x2, 
       0x2, 0x2, 0x5fc, 0x5fa, 0x3, 0x2, 0x2, 0x2, 0x5fd, 0x97, 0x3, 0x2, 
       0x2, 0x2, 0x5fe, 0x5ff, 0x7, 0x39, 0x2, 0x2, 0x5ff, 0x603, 0x7, 0x128, 
       0x2, 0x2, 0x600, 0x601, 0x7, 0x8f, 0x2, 0x2, 0x601, 0x602, 0x7, 0xcb, 
       0x2, 0x2, 0x602, 0x604, 0x7, 0x6f, 0x2, 0x2, 0x603, 0x600, 0x3, 0x2, 
       0x2, 0x2, 0x603, 0x604, 0x3, 0x2, 0x2, 0x2, 0x604, 0x605, 0x3, 0x2, 
       0x2, 0x2, 0x605, 0x607, 0x5, 0x202, 0x102, 0x2, 0x606, 0x608, 0x5, 
       0x5e, 0x30, 0x2, 0x607, 0x606, 0x3, 0x2, 0x2, 0x2, 0x607, 0x608, 
       0x3, 0x2, 0x2, 0x2, 0x608, 0x60c, 0x3, 0x2, 0x2, 0x2, 0x609, 0x60b, 
       0x5, 0x9a, 0x4e, 0x2, 0x60a, 0x609, 0x3, 0x2, 0x2, 0x2, 0x60b, 0x60e, 
       0x3, 0x2, 0x2, 0x2, 0x60c, 0x60a, 0x3, 0x2, 0x2, 0x2, 0x60c, 0x60d, 
       0x3, 0x2, 0x2, 0x2, 0x60d, 0x60f, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x60c, 
       0x3, 0x2, 0x2, 0x2, 0x60f, 0x610, 0x7, 0xb, 0x2, 0x2, 0x610, 0x611, 
       0x5, 0x1c0, 0xe1, 0x2, 0x611, 0x625, 0x3, 0x2, 0x2, 0x2, 0x612, 0x613, 
       0x7, 0x39, 0x2, 0x2, 0x613, 0x614, 0x7, 0x19b, 0x2, 0x2, 0x614, 0x618, 
       0x7, 0x128, 0x2, 0x2, 0x615, 0x616, 0x7, 0x8f, 0x2, 0x2, 0x616, 0x617, 
       0x7, 0xcb, 0x2, 0x2, 0x617, 0x619, 0x7, 0x6f, 0x2, 0x2, 0x618, 0x615, 
       0x3, 0x2, 0x2, 0x2, 0x618, 0x619, 0x3, 0x2, 0x2, 0x2, 0x619, 0x61a, 
       0x3, 0x2, 0x2, 0x2, 0x61a, 0x61e, 0x5, 0x202, 0x102, 0x2, 0x61b, 
       0x61d, 0x5, 0x9c, 0x4f, 0x2, 0x61c, 0x61b, 0x3, 0x2, 0x2, 0x2, 0x61d, 
       0x620, 0x3, 0x2, 0x2, 0x2, 0x61e, 0x61c, 0x3, 0x2, 0x2, 0x2, 0x61e, 
       0x61f, 0x3, 0x2, 0x2, 0x2, 0x61f, 0x621, 0x3, 0x2, 0x2, 0x2, 0x620, 
       0x61e, 0x3, 0x2, 0x2, 0x2, 0x621, 0x622, 0x7, 0xb, 0x2, 0x2, 0x622, 
       0x623, 0x5, 0x1c0, 0xe1, 0x2, 0x623, 0x625, 0x3, 0x2, 0x2, 0x2, 0x624, 
       0x5fe, 0x3, 0x2, 0x2, 0x2, 0x624, 0x612, 0x3, 0x2, 0x2, 0x2, 0x625, 
       0x99, 0x3, 0x2, 0x2, 0x2, 0x626, 0x629, 0x5, 0x108, 0x85, 0x2, 0x627, 
       0x629, 0x5, 0x10e, 0x88, 0x2, 0x628, 0x626, 0x3, 0x2, 0x2, 0x2, 0x628, 
       0x627, 0x3, 0x2, 0x2, 0x2, 0x629, 0x9b, 0x3, 0x2, 0x2, 0x2, 0x62a, 
       0x63d, 0x5, 0x9a, 0x4e, 0x2, 0x62b, 0x62c, 0x7, 0x62, 0x2, 0x2, 0x62c, 
       0x63d, 0x7, 0x19c, 0x2, 0x2, 0x62d, 0x62e, 0x7, 0x19d, 0x2, 0x2, 
       0x62e, 0x62f, 0x7, 0xd2, 0x2, 0x2, 0x62f, 0x63d, 0x5, 0x5e, 0x30, 
       0x2, 0x630, 0x631, 0x7, 0x28, 0x2, 0x2, 0x631, 0x632, 0x7, 0xd2, 
       0x2, 0x2, 0x632, 0x63d, 0x5, 0x5e, 0x30, 0x2, 0x633, 0x634, 0x7, 
       0x19e, 0x2, 0x2, 0x634, 0x635, 0x7, 0xd2, 0x2, 0x2, 0x635, 0x636, 
       0x5, 0x5e, 0x30, 0x2, 0x636, 0x637, 0x7, 0x187, 0x2, 0x2, 0x637, 
       0x638, 0x7, 0xd2, 0x2, 0x2, 0x638, 0x639, 0x5, 0x5e, 0x30, 0x2, 0x639, 
       0x63d, 0x3, 0x2, 0x2, 0x2, 0x63a, 0x63d, 0x5, 0x84, 0x43, 0x2, 0x63b, 
       0x63d, 0x5, 0x10a, 0x86, 0x2, 0x63c, 0x62a, 0x3, 0x2, 0x2, 0x2, 0x63c, 
       0x62b, 0x3, 0x2, 0x2, 0x2, 0x63c, 0x62d, 0x3, 0x2, 0x2, 0x2, 0x63c, 
       0x630, 0x3, 0x2, 0x2, 0x2, 0x63c, 0x633, 0x3, 0x2, 0x2, 0x2, 0x63c, 
       0x63a, 0x3, 0x2, 0x2, 0x2, 0x63c, 0x63b, 0x3, 0x2, 0x2, 0x2, 0x63d, 
       0x9d, 0x3, 0x2, 0x2, 0x2, 0x63e, 0x63f, 0x7, 0x39, 0x2, 0x2, 0x63f, 
       0x640, 0x7, 0x12b, 0x2, 0x2, 0x640, 0x641, 0x7, 0x19f, 0x2, 0x2, 
       0x641, 0x642, 0x5, 0x288, 0x145, 0x2, 0x642, 0x643, 0x5, 0x5e, 0x30, 
       0x2, 0x643, 0x644, 0x5, 0x246, 0x124, 0x2, 0x644, 0x9f, 0x3, 0x2, 
       0x2, 0x2, 0x645, 0x646, 0x7, 0x39, 0x2, 0x2, 0x646, 0x647, 0x7, 0x86, 
       0x2, 0x2, 0x647, 0x648, 0x5, 0xa6, 0x54, 0x2, 0x648, 0xa1, 0x3, 0x2, 
       0x2, 0x2, 0x649, 0x64a, 0x7, 0x83, 0x2, 0x2, 0x64a, 0x64b, 0x7, 0x86, 
       0x2, 0x2, 0x64b, 0x64c, 0x5, 0xa8, 0x55, 0x2, 0x64c, 0x64d, 0x7, 
       0x133, 0x2, 0x2, 0x64d, 0x64f, 0x5, 0xe6, 0x74, 0x2, 0x64e, 0x650, 
       0x5, 0xa4, 0x53, 0x2, 0x64f, 0x64e, 0x3, 0x2, 0x2, 0x2, 0x64f, 0x650, 
       0x3, 0x2, 0x2, 0x2, 0x650, 0x65b, 0x3, 0x2, 0x2, 0x2, 0x651, 0x653, 
       0x7, 0x84, 0x2, 0x2, 0x652, 0x654, 0x5, 0xa4, 0x53, 0x2, 0x653, 0x652, 
       0x3, 0x2, 0x2, 0x2, 0x653, 0x654, 0x3, 0x2, 0x2, 0x2, 0x654, 0x655, 
       0x3, 0x2, 0x2, 0x2, 0x655, 0x656, 0x7, 0x86, 0x2, 0x2, 0x656, 0x657, 
       0x5, 0xa8, 0x55, 0x2, 0x657, 0x658, 0x7, 0x7d, 0x2, 0x2, 0x658, 0x659, 
       0x5, 0xe6, 0x74, 0x2, 0x659, 0x65b, 0x3, 0x2, 0x2, 0x2, 0x65a, 0x649, 
       0x3, 0x2, 0x2, 0x2, 0x65a, 0x651, 0x3, 0x2, 0x2, 0x2, 0x65b, 0xa3, 
       0x3, 0x2, 0x2, 0x2, 0x65c, 0x65e, 0x7, 0x14a, 0x2, 0x2, 0x65d, 0x65c, 
       0x3, 0x2, 0x2, 0x2, 0x65d, 0x65e, 0x3, 0x2, 0x2, 0x2, 0x65e, 0x65f, 
       0x3, 0x2, 0x2, 0x2, 0x65f, 0x660, 0x7, 0x1ac, 0x2, 0x2, 0x660, 0x662, 
       0x7, 0x1ad, 0x2, 0x2, 0x661, 0x663, 0x7, 0x79, 0x2, 0x2, 0x662, 0x661, 
       0x3, 0x2, 0x2, 0x2, 0x662, 0x663, 0x3, 0x2, 0x2, 0x2, 0x663, 0x66d, 
       0x3, 0x2, 0x2, 0x2, 0x664, 0x666, 0x7, 0x14a, 0x2, 0x2, 0x665, 0x664, 
       0x3, 0x2, 0x2, 0x2, 0x665, 0x666, 0x3, 0x2, 0x2, 0x2, 0x666, 0x667, 
       0x3, 0x2, 0x2, 0x2, 0x667, 0x668, 0x7, 0x83, 0x2, 0x2, 0x668, 0x66a, 
       0x7, 0x1ad, 0x2, 0x2, 0x669, 0x66b, 0x7, 0x79, 0x2, 0x2, 0x66a, 0x669, 
       0x3, 0x2, 0x2, 0x2, 0x66a, 0x66b, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x66d, 
       0x3, 0x2, 0x2, 0x2, 0x66c, 0x65d, 0x3, 0x2, 0x2, 0x2, 0x66c, 0x665, 
       0x3, 0x2, 0x2, 0x2, 0x66d, 0xa5, 0x3, 0x2, 0x2, 0x2, 0x66e, 0x66f, 
       0x5, 0x288, 0x145, 0x2, 0x66f, 0xa7, 0x3, 0x2, 0x2, 0x2, 0x670, 0x675, 
       0x5, 0xa6, 0x54, 0x2, 0x671, 0x672, 0x7, 0x1d3, 0x2, 0x2, 0x672, 
       0x674, 0x5, 0xa6, 0x54, 0x2, 0x673, 0x671, 0x3, 0x2, 0x2, 0x2, 0x674, 
       0x677, 0x3, 0x2, 0x2, 0x2, 0x675, 0x673, 0x3, 0x2, 0x2, 0x2, 0x675, 
       0x676, 0x3, 0x2, 0x2, 0x2, 0x676, 0xa9, 0x3, 0x2, 0x2, 0x2, 0x677, 
       0x675, 0x3, 0x2, 0x2, 0x2, 0x678, 0x67a, 0x9, 0x10, 0x2, 0x2, 0x679, 
       0x67b, 0x5, 0xa4, 0x53, 0x2, 0x67a, 0x679, 0x3, 0x2, 0x2, 0x2, 0x67a, 
       0x67b, 0x3, 0x2, 0x2, 0x2, 0x67b, 0x67c, 0x3, 0x2, 0x2, 0x2, 0x67c, 
       0x67f, 0x5, 0xac, 0x57, 0x2, 0x67d, 0x67e, 0x7, 0xd2, 0x2, 0x2, 0x67e, 
       0x680, 0x5, 0xb0, 0x59, 0x2, 0x67f, 0x67d, 0x3, 0x2, 0x2, 0x2, 0x67f, 
       0x680, 0x3, 0x2, 0x2, 0x2, 0x680, 0x681, 0x3, 0x2, 0x2, 0x2, 0x681, 
       0x682, 0x9, 0x11, 0x2, 0x2, 0x682, 0x684, 0x5, 0xe6, 0x74, 0x2, 0x683, 
       0x685, 0x5, 0xa4, 0x53, 0x2, 0x684, 0x683, 0x3, 0x2, 0x2, 0x2, 0x684, 
       0x685, 0x3, 0x2, 0x2, 0x2, 0x685, 0x695, 0x3, 0x2, 0x2, 0x2, 0x686, 
       0x687, 0x7, 0x84, 0x2, 0x2, 0x687, 0x688, 0x7, 0x5, 0x2, 0x2, 0x688, 
       0x689, 0x7, 0x1ae, 0x2, 0x2, 0x689, 0x68a, 0x7, 0x1d3, 0x2, 0x2, 
       0x68a, 0x68b, 0x5, 0xa4, 0x53, 0x2, 0x68b, 0x68c, 0x7, 0x7d, 0x2, 
       0x2, 0x68c, 0x691, 0x5, 0x288, 0x145, 0x2, 0x68d, 0x68e, 0x7, 0x1d3, 
       0x2, 0x2, 0x68e, 0x690, 0x5, 0x288, 0x145, 0x2, 0x68f, 0x68d, 0x3, 
       0x2, 0x2, 0x2, 0x690, 0x693, 0x3, 0x2, 0x2, 0x2, 0x691, 0x68f, 0x3, 
       0x2, 0x2, 0x2, 0x691, 0x692, 0x3, 0x2, 0x2, 0x2, 0x692, 0x695, 0x3, 
       0x2, 0x2, 0x2, 0x693, 0x691, 0x3, 0x2, 0x2, 0x2, 0x694, 0x678, 0x3, 
       0x2, 0x2, 0x2, 0x694, 0x686, 0x3, 0x2, 0x2, 0x2, 0x695, 0xab, 0x3, 
       0x2, 0x2, 0x2, 0x696, 0x698, 0x5, 0xae, 0x58, 0x2, 0x697, 0x699, 
       0x5, 0x5e, 0x30, 0x2, 0x698, 0x697, 0x3, 0x2, 0x2, 0x2, 0x698, 0x699, 
       0x3, 0x2, 0x2, 0x2, 0x699, 0x6a0, 0x3, 0x2, 0x2, 0x2, 0x69a, 0x69c, 
       0x5, 0xae, 0x58, 0x2, 0x69b, 0x69d, 0x5, 0x5e, 0x30, 0x2, 0x69c, 
       0x69b, 0x3, 0x2, 0x2, 0x2, 0x69c, 0x69d, 0x3, 0x2, 0x2, 0x2, 0x69d, 
       0x69f, 0x3, 0x2, 0x2, 0x2, 0x69e, 0x69a, 0x3, 0x2, 0x2, 0x2, 0x69f, 
       0x6a2, 0x3, 0x2, 0x2, 0x2, 0x6a0, 0x69e, 0x3, 0x2, 0x2, 0x2, 0x6a0, 
       0x6a1, 0x3, 0x2, 0x2, 0x2, 0x6a1, 0xad, 0x3, 0x2, 0x2, 0x2, 0x6a2, 
       0x6a0, 0x3, 0x2, 0x2, 0x2, 0x6a3, 0x6a4, 0x9, 0x12, 0x2, 0x2, 0x6a4, 
       0xaf, 0x3, 0x2, 0x2, 0x2, 0x6a5, 0x6a6, 0x7, 0x126, 0x2, 0x2, 0x6a6, 
       0x6aa, 0x5, 0x200, 0x101, 0x2, 0x6a7, 0x6a8, 0x7, 0x40, 0x2, 0x2, 
       0x6a8, 0x6aa, 0x5, 0x204, 0x103, 0x2, 0x6a9, 0x6a5, 0x3, 0x2, 0x2, 
       0x2, 0x6a9, 0x6a7, 0x3, 0x2, 0x2, 0x2, 0x6aa, 0xb1, 0x3, 0x2, 0x2, 
       0x2, 0x6ab, 0x6ca, 0x5, 0xb6, 0x5c, 0x2, 0x6ac, 0x6ad, 0x7, 0x7, 
       0x2, 0x2, 0x6ad, 0x6ae, 0x9, 0x13, 0x2, 0x2, 0x6ae, 0x6af, 0x5, 0x288, 
       0x145, 0x2, 0x6af, 0x6b0, 0x7, 0x109, 0x2, 0x2, 0x6b0, 0x6b1, 0x5, 
       0xb4, 0x5b, 0x2, 0x6b1, 0x6ca, 0x3, 0x2, 0x2, 0x2, 0x6b2, 0x6b3, 
       0x7, 0x7, 0x2, 0x2, 0x6b3, 0x6b4, 0x7, 0x19b, 0x2, 0x2, 0x6b4, 0x6b5, 
       0x7, 0x128, 0x2, 0x2, 0x6b5, 0x6b6, 0x5, 0x202, 0x102, 0x2, 0x6b6, 
       0x6b7, 0x9, 0xc, 0x2, 0x2, 0x6b7, 0x6b8, 0x7, 0x19c, 0x2, 0x2, 0x6b8, 
       0x6ca, 0x3, 0x2, 0x2, 0x2, 0x6b9, 0x6ba, 0x7, 0x7, 0x2, 0x2, 0x6ba, 
       0x6bb, 0x7, 0x94, 0x2, 0x2, 0x6bb, 0x6bc, 0x5, 0x288, 0x145, 0x2, 
       0x6bc, 0x6bd, 0x7, 0xd2, 0x2, 0x2, 0x6bd, 0x6bf, 0x5, 0x200, 0x101, 
       0x2, 0x6be, 0x6c0, 0x5, 0x1ac, 0xd7, 0x2, 0x6bf, 0x6be, 0x3, 0x2, 
       0x2, 0x2, 0x6bf, 0x6c0, 0x3, 0x2, 0x2, 0x2, 0x6c0, 0x6c1, 0x3, 0x2, 
       0x2, 0x2, 0x6c1, 0x6c2, 0x7, 0x4c, 0x2, 0x2, 0x6c2, 0x6ca, 0x3, 0x2, 
       0x2, 0x2, 0x6c3, 0x6c4, 0x7, 0x7, 0x2, 0x2, 0x6c4, 0x6c5, 0x7, 0x128, 
       0x2, 0x2, 0x6c5, 0x6c6, 0x5, 0x202, 0x102, 0x2, 0x6c6, 0x6c7, 0x7, 
       0xb, 0x2, 0x2, 0x6c7, 0x6c8, 0x5, 0x1c0, 0xe1, 0x2, 0x6c8, 0x6ca, 
       0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6ab, 0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6ac, 
       0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6b9, 
       0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6c3, 0x3, 0x2, 0x2, 0x2, 0x6ca, 0xb3, 
       0x3, 0x2, 0x2, 0x2, 0x6cb, 0x6d1, 0x5, 0x10e, 0x88, 0x2, 0x6cc, 0x6cd, 
       0x7, 0xdb, 0x2, 0x2, 0x6cd, 0x6ce, 0x9, 0x14, 0x2, 0x2, 0x6ce, 0x6d1, 
       0x5, 0x288, 0x145, 0x2, 0x6cf, 0x6d1, 0x5, 0x10a, 0x86, 0x2, 0x6d0, 
       0x6cb, 0x3, 0x2, 0x2, 0x2, 0x6d0, 0x6cc, 0x3, 0x2, 0x2, 0x2, 0x6d0, 
       0x6cf, 0x3, 0x2, 0x2, 0x2, 0x6d1, 0xb5, 0x3, 0x2, 0x2, 0x2, 0x6d2, 
       0x6d3, 0x7, 0x7, 0x2, 0x2, 0x6d3, 0x6d4, 0x7, 0x126, 0x2, 0x2, 0x6d4, 
       0x6d5, 0x5, 0x200, 0x101, 0x2, 0x6d5, 0x6d6, 0x5, 0xb8, 0x5d, 0x2, 
       0x6d6, 0xb7, 0x3, 0x2, 0x2, 0x2, 0x6d7, 0x6dc, 0x5, 0xba, 0x5e, 0x2, 
       0x6d8, 0x6dc, 0x5, 0xd0, 0x69, 0x2, 0x6d9, 0x6dc, 0x5, 0xde, 0x70, 
       0x2, 0x6da, 0x6dc, 0x5, 0xe0, 0x71, 0x2, 0x6db, 0x6d7, 0x3, 0x2, 
       0x2, 0x2, 0x6db, 0x6d8, 0x3, 0x2, 0x2, 0x2, 0x6db, 0x6d9, 0x3, 0x2, 
       0x2, 0x2, 0x6db, 0x6da, 0x3, 0x2, 0x2, 0x2, 0x6dc, 0xb9, 0x3, 0x2, 
       0x2, 0x2, 0x6dd, 0x6de, 0x7, 0x186, 0x2, 0x2, 0x6de, 0x6df, 0x7, 
       0x133, 0x2, 0x2, 0x6df, 0x6e6, 0x5, 0xce, 0x68, 0x2, 0x6e0, 0x6e6, 
       0x5, 0xbc, 0x5f, 0x2, 0x6e1, 0x6e6, 0x5, 0xbe, 0x60, 0x2, 0x6e2, 
       0x6e6, 0x5, 0xc2, 0x62, 0x2, 0x6e3, 0x6e6, 0x5, 0xc4, 0x63, 0x2, 
       0x6e4, 0x6e6, 0x5, 0xc6, 0x64, 0x2, 0x6e5, 0x6dd, 0x3, 0x2, 0x2, 
       0x2, 0x6e5, 0x6e0, 0x3, 0x2, 0x2, 0x2, 0x6e5, 0x6e1, 0x3, 0x2, 0x2, 
       0x2, 0x6e5, 0x6e2, 0x3, 0x2, 0x2, 0x2, 0x6e5, 0x6e3, 0x3, 0x2, 0x2, 
       0x2, 0x6e5, 0x6e4, 0x3, 0x2, 0x2, 0x2, 0x6e6, 0xbb, 0x3, 0x2, 0x2, 
       0x2, 0x6e7, 0x6e8, 0x7, 0x109, 0x2, 0x2, 0x6e8, 0x6ee, 0x7, 0x17f, 
       0x2, 0x2, 0x6e9, 0x6ef, 0x5, 0x10e, 0x88, 0x2, 0x6ea, 0x6eb, 0x7, 
       0x1e1, 0x2, 0x2, 0x6eb, 0x6ec, 0x5, 0x1c, 0xf, 0x2, 0x6ec, 0x6ed, 
       0x7, 0x1e4, 0x2, 0x2, 0x6ed, 0x6ef, 0x3, 0x2, 0x2, 0x2, 0x6ee, 0x6e9, 
       0x3, 0x2, 0x2, 0x2, 0x6ee, 0x6ea, 0x3, 0x2, 0x2, 0x2, 0x6ef, 0xbd, 
       0x3, 0x2, 0x2, 0x2, 0x6f0, 0x6f2, 0x5, 0x1ac, 0xd7, 0x2, 0x6f1, 0x6f0, 
       0x3, 0x2, 0x2, 0x2, 0x6f1, 0x6f2, 0x3, 0x2, 0x2, 0x2, 0x6f2, 0x6f3, 
       0x3, 0x2, 0x2, 0x2, 0x6f3, 0x6fa, 0x7, 0x109, 0x2, 0x2, 0x6f4, 0x6fb, 
       0x5, 0x10e, 0x88, 0x2, 0x6f5, 0x6f6, 0x7, 0x155, 0x2, 0x2, 0x6f6, 
       0x6f8, 0x5, 0xc0, 0x61, 0x2, 0x6f7, 0x6f9, 0x5, 0x10c, 0x87, 0x2, 
       0x6f8, 0x6f7, 0x3, 0x2, 0x2, 0x2, 0x6f8, 0x6f9, 0x3, 0x2, 0x2, 0x2, 
       0x6f9, 0x6fb, 0x3, 0x2, 0x2, 0x2, 0x6fa, 0x6f4, 0x3, 0x2, 0x2, 0x2, 
       0x6fa, 0x6f5, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0xbf, 0x3, 0x2, 0x2, 0x2, 
       0x6fc, 0x700, 0x5, 0x288, 0x145, 0x2, 0x6fd, 0x700, 0x7, 0x1f2, 0x2, 
       0x2, 0x6fe, 0x700, 0x7, 0x1f3, 0x2, 0x2, 0x6ff, 0x6fc, 0x3, 0x2, 
       0x2, 0x2, 0x6ff, 0x6fd, 0x3, 0x2, 0x2, 0x2, 0x6ff, 0x6fe, 0x3, 0x2, 
       0x2, 0x2, 0x700, 0xc1, 0x3, 0x2, 0x2, 0x2, 0x701, 0x702, 0x7, 0x28, 
       0x2, 0x2, 0x702, 0x703, 0x7, 0x1b, 0x2, 0x2, 0x703, 0x707, 0x5, 0x5e, 
       0x30, 0x2, 0x704, 0x705, 0x7, 0x187, 0x2, 0x2, 0x705, 0x706, 0x7, 
       0x1b, 0x2, 0x2, 0x706, 0x708, 0x5, 0x5e, 0x30, 0x2, 0x707, 0x704, 
       0x3, 0x2, 0x2, 0x2, 0x707, 0x708, 0x3, 0x2, 0x2, 0x2, 0x708, 0x709, 
       0x3, 0x2, 0x2, 0x2, 0x709, 0x70a, 0x7, 0xa1, 0x2, 0x2, 0x70a, 0x70b, 
       0x5, 0x288, 0x145, 0x2, 0x70b, 0x70c, 0x7, 0x182, 0x2, 0x2, 0x70c, 
       0x710, 0x3, 0x2, 0x2, 0x2, 0x70d, 0x70e, 0x7, 0xcb, 0x2, 0x2, 0x70e, 
       0x710, 0x5, 0x82, 0x42, 0x2, 0x70f, 0x701, 0x3, 0x2, 0x2, 0x2, 0x70f, 
       0x70d, 0x3, 0x2, 0x2, 0x2, 0x710, 0xc3, 0x3, 0x2, 0x2, 0x2, 0x711, 
       0x712, 0x7, 0x183, 0x2, 0x2, 0x712, 0x713, 0x7, 0x1b, 0x2, 0x2, 0x713, 
       0x714, 0x5, 0x5e, 0x30, 0x2, 0x714, 0x715, 0x7, 0xd2, 0x2, 0x2, 0x715, 
       0x71a, 0x5, 0x5e, 0x30, 0x2, 0x716, 0x717, 0x7, 0x1d3, 0x2, 0x2, 
       0x717, 0x719, 0x5, 0x5e, 0x30, 0x2, 0x718, 0x716, 0x3, 0x2, 0x2, 
       0x2, 0x719, 0x71c, 0x3, 0x2, 0x2, 0x2, 0x71a, 0x718, 0x3, 0x2, 0x2, 
       0x2, 0x71a, 0x71b, 0x3, 0x2, 0x2, 0x2, 0x71b, 0x71d, 0x3, 0x2, 0x2, 
       0x2, 0x71c, 0x71a, 0x3, 0x2, 0x2, 0x2, 0x71d, 0x71e, 0x5, 0x82, 0x42, 
       0x2, 0x71e, 0x730, 0x3, 0x2, 0x2, 0x2, 0x71f, 0x720, 0x7, 0xcb, 0x2, 
       0x2, 0x720, 0x730, 0x7, 0x183, 0x2, 0x2, 0x721, 0x722, 0x7, 0x109, 
       0x2, 0x2, 0x722, 0x723, 0x7, 0x183, 0x2, 0x2, 0x723, 0x724, 0x7, 
       0xb1, 0x2, 0x2, 0x724, 0x725, 0x7, 0x1e1, 0x2, 0x2, 0x725, 0x72a, 
       0x5, 0x1c, 0xf, 0x2, 0x726, 0x727, 0x7, 0x1d3, 0x2, 0x2, 0x727, 0x729, 
       0x5, 0x1c, 0xf, 0x2, 0x728, 0x726, 0x3, 0x2, 0x2, 0x2, 0x729, 0x72c, 
       0x3, 0x2, 0x2, 0x2, 0x72a, 0x728, 0x3, 0x2, 0x2, 0x2, 0x72a, 0x72b, 
       0x3, 0x2, 0x2, 0x2, 0x72b, 0x72d, 0x3, 0x2, 0x2, 0x2, 0x72c, 0x72a, 
       0x3, 0x2, 0x2, 0x2, 0x72d, 0x72e, 0x7, 0x1e4, 0x2, 0x2, 0x72e, 0x730, 
       0x3, 0x2, 0x2, 0x2, 0x72f, 0x711, 0x3, 0x2, 0x2, 0x2, 0x72f, 0x71f, 
       0x3, 0x2, 0x2, 0x2, 0x72f, 0x721, 0x3, 0x2, 0x2, 0x2, 0x730, 0xc5, 
       0x3, 0x2, 0x2, 0x2, 0x731, 0x735, 0x5, 0xc8, 0x65, 0x2, 0x732, 0x735, 
       0x5, 0xca, 0x66, 0x2, 0x733, 0x735, 0x5, 0xcc, 0x67, 0x2, 0x734, 
       0x731, 0x3, 0x2, 0x2, 0x2, 0x734, 0x732, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x733, 0x3, 0x2, 0x2, 0x2, 0x735, 0xc7, 0x3, 0x2, 0x2, 0x2, 0x736, 
       0x737, 0x7, 0x4, 0x2, 0x2, 0x737, 0x738, 0x7, 0x34, 0x2, 0x2, 
  };
  static uint16_t serializedATNSegment1[] = {
    0x738, 0x739, 0x5, 0x5c, 0x2f, 0x2, 0x739, 0x73a, 0x7, 0xe3, 0x2, 0x2, 
       0x73a, 0x73b, 0x7, 0xa8, 0x2, 0x2, 0x73b, 0x73c, 0x5, 0x5e, 0x30, 
       0x2, 0x73c, 0x73d, 0x7, 0x62, 0x2, 0x2, 0x73d, 0x73e, 0x7, 0x64, 
       0x2, 0x2, 0x73e, 0x755, 0x3, 0x2, 0x2, 0x2, 0x73f, 0x740, 0x7, 0x4, 
       0x2, 0x2, 0x740, 0x741, 0x7, 0x34, 0x2, 0x2, 0x741, 0x742, 0x5, 0x5c, 
       0x2f, 0x2, 0x742, 0x743, 0x7, 0x7a, 0x2, 0x2, 0x743, 0x744, 0x7, 
       0xa8, 0x2, 0x2, 0x744, 0x745, 0x5, 0x5e, 0x30, 0x2, 0x745, 0x746, 
       0x7, 0xed, 0x2, 0x2, 0x746, 0x747, 0x5, 0x200, 0x101, 0x2, 0x747, 
       0x748, 0x5, 0x5e, 0x30, 0x2, 0x748, 0x749, 0x7, 0x62, 0x2, 0x2, 0x749, 
       0x74a, 0x7, 0x64, 0x2, 0x2, 0x74a, 0x74b, 0x7, 0x65, 0x2, 0x2, 0x74b, 
       0x755, 0x3, 0x2, 0x2, 0x2, 0x74c, 0x74d, 0x7, 0x4, 0x2, 0x2, 0x74d, 
       0x74e, 0x7, 0x34, 0x2, 0x2, 0x74e, 0x74f, 0x5, 0x5c, 0x2f, 0x2, 0x74f, 
       0x750, 0x7, 0x13b, 0x2, 0x2, 0x750, 0x751, 0x5, 0x5e, 0x30, 0x2, 
       0x751, 0x752, 0x7, 0x62, 0x2, 0x2, 0x752, 0x753, 0x7, 0x64, 0x2, 
       0x2, 0x753, 0x755, 0x3, 0x2, 0x2, 0x2, 0x754, 0x736, 0x3, 0x2, 0x2, 
       0x2, 0x754, 0x73f, 0x3, 0x2, 0x2, 0x2, 0x754, 0x74c, 0x3, 0x2, 0x2, 
       0x2, 0x755, 0xc9, 0x3, 0x2, 0x2, 0x2, 0x756, 0x757, 0x7, 0x189, 0x2, 
       0x2, 0x757, 0x758, 0x7, 0x2d, 0x2, 0x2, 0x758, 0x759, 0x5, 0x52, 
       0x2a, 0x2, 0x759, 0x75a, 0x5, 0x52, 0x2a, 0x2, 0x75a, 0x75b, 0x5, 
       0xee, 0x78, 0x2, 0x75b, 0x75c, 0x7, 0x34, 0x2, 0x2, 0x75c, 0x768, 
       0x5, 0x5c, 0x2f, 0x2, 0x75d, 0x75e, 0x7, 0xcb, 0x2, 0x2, 0x75e, 0x75f, 
       0x7, 0xcd, 0x2, 0x2, 0x75f, 0x769, 0x7, 0x61, 0x2, 0x2, 0x760, 0x761, 
       0x7, 0x4a, 0x2, 0x2, 0x761, 0x762, 0x5, 0x68, 0x35, 0x2, 0x762, 0x763, 
       0x7, 0x61, 0x2, 0x2, 0x763, 0x769, 0x3, 0x2, 0x2, 0x2, 0x764, 0x765, 
       0x7, 0x63, 0x2, 0x2, 0x765, 0x766, 0x5, 0x246, 0x124, 0x2, 0x766, 
       0x767, 0x7, 0x61, 0x2, 0x2, 0x767, 0x769, 0x3, 0x2, 0x2, 0x2, 0x768, 
       0x75d, 0x3, 0x2, 0x2, 0x2, 0x768, 0x760, 0x3, 0x2, 0x2, 0x2, 0x768, 
       0x764, 0x3, 0x2, 0x2, 0x2, 0x769, 0xcb, 0x3, 0x2, 0x2, 0x2, 0x76a, 
       0x76b, 0x7, 0x5c, 0x2, 0x2, 0x76b, 0x76c, 0x7, 0x34, 0x2, 0x2, 0x76c, 
       0x76d, 0x5, 0x5c, 0x2f, 0x2, 0x76d, 0xcd, 0x3, 0x2, 0x2, 0x2, 0x76e, 
       0x76f, 0x5, 0x288, 0x145, 0x2, 0x76f, 0xcf, 0x3, 0x2, 0x2, 0x2, 0x770, 
       0x78a, 0x5, 0xd2, 0x6a, 0x2, 0x771, 0x772, 0x5, 0x1ac, 0xd7, 0x2, 
       0x772, 0x773, 0x7, 0x186, 0x2, 0x2, 0x773, 0x774, 0x7, 0x133, 0x2, 
       0x2, 0x774, 0x775, 0x5, 0x1ac, 0xd7, 0x2, 0x775, 0x78a, 0x3, 0x2, 
       0x2, 0x2, 0x776, 0x777, 0x7, 0x18a, 0x2, 0x2, 0x777, 0x778, 0x7, 
       0xdd, 0x2, 0x2, 0x778, 0x779, 0x7, 0x1e1, 0x2, 0x2, 0x779, 0x77e, 
       0x5, 0x1ae, 0xd8, 0x2, 0x77a, 0x77b, 0x7, 0x1d3, 0x2, 0x2, 0x77b, 
       0x77d, 0x5, 0x1ae, 0xd8, 0x2, 0x77c, 0x77a, 0x3, 0x2, 0x2, 0x2, 0x77d, 
       0x780, 0x3, 0x2, 0x2, 0x2, 0x77e, 0x77c, 0x3, 0x2, 0x2, 0x2, 0x77e, 
       0x77f, 0x3, 0x2, 0x2, 0x2, 0x77f, 0x781, 0x3, 0x2, 0x2, 0x2, 0x780, 
       0x77e, 0x3, 0x2, 0x2, 0x2, 0x781, 0x782, 0x7, 0x1e4, 0x2, 0x2, 0x782, 
       0x783, 0x7, 0x14a, 0x2, 0x2, 0x783, 0x784, 0x7, 0x126, 0x2, 0x2, 
       0x784, 0x785, 0x5, 0x200, 0x101, 0x2, 0x785, 0x78a, 0x3, 0x2, 0x2, 
       0x2, 0x786, 0x78a, 0x5, 0xd8, 0x6d, 0x2, 0x787, 0x78a, 0x5, 0xda, 
       0x6e, 0x2, 0x788, 0x78a, 0x5, 0xdc, 0x6f, 0x2, 0x789, 0x770, 0x3, 
       0x2, 0x2, 0x2, 0x789, 0x771, 0x3, 0x2, 0x2, 0x2, 0x789, 0x776, 0x3, 
       0x2, 0x2, 0x2, 0x789, 0x786, 0x3, 0x2, 0x2, 0x2, 0x789, 0x787, 0x3, 
       0x2, 0x2, 0x2, 0x789, 0x788, 0x3, 0x2, 0x2, 0x2, 0x78a, 0xd1, 0x3, 
       0x2, 0x2, 0x2, 0x78b, 0x78f, 0x7, 0x4, 0x2, 0x2, 0x78c, 0x78d, 0x7, 
       0x8f, 0x2, 0x2, 0x78d, 0x78e, 0x7, 0xcb, 0x2, 0x2, 0x78e, 0x790, 
       0x7, 0x6f, 0x2, 0x2, 0x78f, 0x78c, 0x3, 0x2, 0x2, 0x2, 0x78f, 0x790, 
       0x3, 0x2, 0x2, 0x2, 0x790, 0x791, 0x3, 0x2, 0x2, 0x2, 0x791, 0x792, 
       0x5, 0xd4, 0x6b, 0x2, 0x792, 0xd3, 0x3, 0x2, 0x2, 0x2, 0x793, 0x798, 
       0x5, 0xd6, 0x6c, 0x2, 0x794, 0x795, 0x7, 0x1d3, 0x2, 0x2, 0x795, 
       0x797, 0x5, 0xd6, 0x6c, 0x2, 0x796, 0x794, 0x3, 0x2, 0x2, 0x2, 0x797, 
       0x79a, 0x3, 0x2, 0x2, 0x2, 0x798, 0x796, 0x3, 0x2, 0x2, 0x2, 0x798, 
       0x799, 0x3, 0x2, 0x2, 0x2, 0x799, 0xd5, 0x3, 0x2, 0x2, 0x2, 0x79a, 
       0x798, 0x3, 0x2, 0x2, 0x2, 0x79b, 0x79e, 0x5, 0x1ac, 0xd7, 0x2, 0x79c, 
       0x79d, 0x7, 0xb1, 0x2, 0x2, 0x79d, 0x79f, 0x5, 0x288, 0x145, 0x2, 
       0x79e, 0x79c, 0x3, 0x2, 0x2, 0x2, 0x79e, 0x79f, 0x3, 0x2, 0x2, 0x2, 
       0x79f, 0xd7, 0x3, 0x2, 0x2, 0x2, 0x7a0, 0x7a1, 0x7, 0x18b, 0x2, 0x2, 
       0x7a1, 0x7a2, 0x7, 0x18c, 0x2, 0x2, 0x7a2, 0xd9, 0x3, 0x2, 0x2, 0x2, 
       0x7a3, 0x7a6, 0x7, 0x5c, 0x2, 0x2, 0x7a4, 0x7a5, 0x7, 0x8f, 0x2, 
       0x2, 0x7a5, 0x7a7, 0x7, 0x6f, 0x2, 0x2, 0x7a6, 0x7a4, 0x3, 0x2, 0x2, 
       0x2, 0x7a6, 0x7a7, 0x3, 0x2, 0x2, 0x2, 0x7a7, 0x7a8, 0x3, 0x2, 0x2, 
       0x2, 0x7a8, 0x7ad, 0x5, 0x1ac, 0xd7, 0x2, 0x7a9, 0x7aa, 0x7, 0x1d3, 
       0x2, 0x2, 0x7aa, 0x7ac, 0x5, 0x1ac, 0xd7, 0x2, 0x7ab, 0x7a9, 0x3, 
       0x2, 0x2, 0x2, 0x7ac, 0x7af, 0x3, 0x2, 0x2, 0x2, 0x7ad, 0x7ab, 0x3, 
       0x2, 0x2, 0x2, 0x7ad, 0x7ae, 0x3, 0x2, 0x2, 0x2, 0x7ae, 0x7b2, 0x3, 
       0x2, 0x2, 0x2, 0x7af, 0x7ad, 0x3, 0x2, 0x2, 0x2, 0x7b0, 0x7b1, 0x7, 
       0x90, 0x2, 0x2, 0x7b1, 0x7b3, 0x7, 0x18d, 0x2, 0x2, 0x7b2, 0x7b0, 
       0x3, 0x2, 0x2, 0x2, 0x7b2, 0x7b3, 0x3, 0x2, 0x2, 0x2, 0x7b3, 0x7b5, 
       0x3, 0x2, 0x2, 0x2, 0x7b4, 0x7b6, 0x7, 0x181, 0x2, 0x2, 0x7b5, 0x7b4, 
       0x3, 0x2, 0x2, 0x2, 0x7b5, 0x7b6, 0x3, 0x2, 0x2, 0x2, 0x7b6, 0xdb, 
       0x3, 0x2, 0x2, 0x2, 0x7b7, 0x7b8, 0x9, 0x15, 0x2, 0x2, 0x7b8, 0x7b9, 
       0x5, 0x1ac, 0xd7, 0x2, 0x7b9, 0xdd, 0x3, 0x2, 0x2, 0x2, 0x7ba, 0x7bc, 
       0x5, 0x1ac, 0xd7, 0x2, 0x7bb, 0x7ba, 0x3, 0x2, 0x2, 0x2, 0x7bb, 0x7bc, 
       0x3, 0x2, 0x2, 0x2, 0x7bc, 0x7bd, 0x3, 0x2, 0x2, 0x2, 0x7bd, 0x7be, 
       0x7, 0x109, 0x2, 0x2, 0x7be, 0x7c1, 0x9, 0x16, 0x2, 0x2, 0x7bf, 0x7c2, 
       0x5, 0x86, 0x44, 0x2, 0x7c0, 0x7c2, 0x5, 0x288, 0x145, 0x2, 0x7c1, 
       0x7bf, 0x3, 0x2, 0x2, 0x2, 0x7c1, 0x7c0, 0x3, 0x2, 0x2, 0x2, 0x7c2, 
       0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7c3, 0x7c5, 0x7, 0x190, 0x2, 0x2, 0x7c4, 
       0x7c6, 0x5, 0x1ac, 0xd7, 0x2, 0x7c5, 0x7c4, 0x3, 0x2, 0x2, 0x2, 0x7c5, 
       0x7c6, 0x3, 0x2, 0x2, 0x2, 0x7c6, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7c7, 
       0x7c9, 0x5, 0x1ac, 0xd7, 0x2, 0x7c8, 0x7c7, 0x3, 0x2, 0x2, 0x2, 0x7c8, 
       0x7c9, 0x3, 0x2, 0x2, 0x2, 0x7c9, 0x7ca, 0x3, 0x2, 0x2, 0x2, 0x7ca, 
       0x7d0, 0x9, 0xc, 0x2, 0x2, 0x7cb, 0x7d1, 0x7, 0x191, 0x2, 0x2, 0x7cc, 
       0x7ce, 0x7, 0x192, 0x2, 0x2, 0x7cd, 0x7cf, 0x7, 0x1f, 0x2, 0x2, 0x7ce, 
       0x7cd, 0x3, 0x2, 0x2, 0x2, 0x7ce, 0x7cf, 0x3, 0x2, 0x2, 0x2, 0x7cf, 
       0x7d1, 0x3, 0x2, 0x2, 0x2, 0x7d0, 0x7cb, 0x3, 0x2, 0x2, 0x2, 0x7d0, 
       0x7cc, 0x3, 0x2, 0x2, 0x2, 0x7d1, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7d2, 
       0x7d4, 0x5, 0x1ac, 0xd7, 0x2, 0x7d3, 0x7d2, 0x3, 0x2, 0x2, 0x2, 0x7d3, 
       0x7d4, 0x3, 0x2, 0x2, 0x2, 0x7d4, 0x7d5, 0x3, 0x2, 0x2, 0x2, 0x7d5, 
       0x7d6, 0x7, 0x193, 0x2, 0x2, 0x7d6, 0x7d9, 0x5, 0x288, 0x145, 0x2, 
       0x7d7, 0x7d8, 0x7, 0x8, 0x2, 0x2, 0x7d8, 0x7da, 0x7, 0x195, 0x2, 
       0x2, 0x7d9, 0x7d7, 0x3, 0x2, 0x2, 0x2, 0x7d9, 0x7da, 0x3, 0x2, 0x2, 
       0x2, 0x7da, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0x7db, 0x7dd, 0x5, 0x10c, 
       0x87, 0x2, 0x7dc, 0x7db, 0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7dd, 0x3, 0x2, 
       0x2, 0x2, 0x7dd, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7e0, 0x5, 0x1ac, 
       0xd7, 0x2, 0x7df, 0x7de, 0x3, 0x2, 0x2, 0x2, 0x7df, 0x7e0, 0x3, 0x2, 
       0x2, 0x2, 0x7e0, 0x7e4, 0x3, 0x2, 0x2, 0x2, 0x7e1, 0x7e5, 0x7, 0x194, 
       0x2, 0x2, 0x7e2, 0x7e3, 0x7, 0x13c, 0x2, 0x2, 0x7e3, 0x7e5, 0x7, 
       0x196, 0x2, 0x2, 0x7e4, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7e4, 0x7e2, 
       0x3, 0x2, 0x2, 0x2, 0x7e5, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7bb, 
       0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7c3, 0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7c8, 
       0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7d3, 0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7df, 
       0x3, 0x2, 0x2, 0x2, 0x7e7, 0xdf, 0x3, 0x2, 0x2, 0x2, 0x7e8, 0x7ea, 
       0x5, 0x1ac, 0xd7, 0x2, 0x7e9, 0x7e8, 0x3, 0x2, 0x2, 0x2, 0x7e9, 0x7ea, 
       0x3, 0x2, 0x2, 0x2, 0x7ea, 0x7eb, 0x3, 0x2, 0x2, 0x2, 0x7eb, 0x7ed, 
       0x7, 0x189, 0x2, 0x2, 0x7ec, 0x7ee, 0x7, 0x2d, 0x2, 0x2, 0x7ed, 0x7ec, 
       0x3, 0x2, 0x2, 0x2, 0x7ed, 0x7ee, 0x3, 0x2, 0x2, 0x2, 0x7ee, 0x7ef, 
       0x3, 0x2, 0x2, 0x2, 0x7ef, 0x7f0, 0x5, 0x54, 0x2b, 0x2, 0x7f0, 0x7f1, 
       0x5, 0x56, 0x2c, 0x2, 0x7f1, 0x7f2, 0x5, 0xee, 0x78, 0x2, 0x7f2, 
       0x7f6, 0x5, 0x108, 0x85, 0x2, 0x7f3, 0x7f7, 0x7, 0x197, 0x2, 0x2, 
       0x7f4, 0x7f5, 0x7, 0x19a, 0x2, 0x2, 0x7f5, 0x7f7, 0x5, 0x52, 0x2a, 
       0x2, 0x7f6, 0x7f3, 0x3, 0x2, 0x2, 0x2, 0x7f6, 0x7f4, 0x3, 0x2, 0x2, 
       0x2, 0x7f6, 0x7f7, 0x3, 0x2, 0x2, 0x2, 0x7f7, 0x7f9, 0x3, 0x2, 0x2, 
       0x2, 0x7f8, 0x7fa, 0x9, 0x17, 0x2, 0x2, 0x7f9, 0x7f8, 0x3, 0x2, 0x2, 
       0x2, 0x7f9, 0x7fa, 0x3, 0x2, 0x2, 0x2, 0x7fa, 0x805, 0x3, 0x2, 0x2, 
       0x2, 0x7fb, 0x7fd, 0x5, 0x1ac, 0xd7, 0x2, 0x7fc, 0x7fb, 0x3, 0x2, 
       0x2, 0x2, 0x7fc, 0x7fd, 0x3, 0x2, 0x2, 0x2, 0x7fd, 0x7fe, 0x3, 0x2, 
       0x2, 0x2, 0x7fe, 0x7ff, 0x9, 0x18, 0x2, 0x2, 0x7ff, 0x800, 0x7, 0x196, 
       0x2, 0x2, 0x800, 0x802, 0x5, 0x5e, 0x30, 0x2, 0x801, 0x803, 0x9, 
       0x17, 0x2, 0x2, 0x802, 0x801, 0x3, 0x2, 0x2, 0x2, 0x802, 0x803, 0x3, 
       0x2, 0x2, 0x2, 0x803, 0x805, 0x3, 0x2, 0x2, 0x2, 0x804, 0x7e9, 0x3, 
       0x2, 0x2, 0x2, 0x804, 0x7fc, 0x3, 0x2, 0x2, 0x2, 0x805, 0xe1, 0x3, 
       0x2, 0x2, 0x2, 0x806, 0x807, 0x7, 0x1a0, 0x2, 0x2, 0x807, 0x80a, 
       0x9, 0x19, 0x2, 0x2, 0x808, 0x809, 0x7, 0xad, 0x2, 0x2, 0x809, 0x80b, 
       0x5, 0x246, 0x124, 0x2, 0x80a, 0x808, 0x3, 0x2, 0x2, 0x2, 0x80a, 
       0x80b, 0x3, 0x2, 0x2, 0x2, 0x80b, 0x886, 0x3, 0x2, 0x2, 0x2, 0x80c, 
       0x80d, 0x7, 0x1a0, 0x2, 0x2, 0x80d, 0x80e, 0x7, 0x127, 0x2, 0x2, 
       0x80e, 0x80f, 0x7, 0x92, 0x2, 0x2, 0x80f, 0x810, 0x5, 0x288, 0x145, 
       0x2, 0x810, 0x812, 0x3, 0x2, 0x2, 0x2, 0x811, 0x813, 0x5, 0x246, 
       0x124, 0x2, 0x812, 0x811, 0x3, 0x2, 0x2, 0x2, 0x812, 0x813, 0x3, 
       0x2, 0x2, 0x2, 0x813, 0x886, 0x3, 0x2, 0x2, 0x2, 0x814, 0x816, 0x7, 
       0x1a0, 0x2, 0x2, 0x815, 0x817, 0x7, 0x19b, 0x2, 0x2, 0x816, 0x815, 
       0x3, 0x2, 0x2, 0x2, 0x816, 0x817, 0x3, 0x2, 0x2, 0x2, 0x817, 0x818, 
       0x3, 0x2, 0x2, 0x2, 0x818, 0x81b, 0x7, 0x129, 0x2, 0x2, 0x819, 0x81a, 
       0x9, 0x1a, 0x2, 0x2, 0x81a, 0x81c, 0x5, 0x288, 0x145, 0x2, 0x81b, 
       0x819, 0x3, 0x2, 0x2, 0x2, 0x81b, 0x81c, 0x3, 0x2, 0x2, 0x2, 0x81c, 
       0x81f, 0x3, 0x2, 0x2, 0x2, 0x81d, 0x81e, 0x7, 0xad, 0x2, 0x2, 0x81e, 
       0x820, 0x5, 0x246, 0x124, 0x2, 0x81f, 0x81d, 0x3, 0x2, 0x2, 0x2, 
       0x81f, 0x820, 0x3, 0x2, 0x2, 0x2, 0x820, 0x886, 0x3, 0x2, 0x2, 0x2, 
       0x821, 0x822, 0x7, 0x1a0, 0x2, 0x2, 0x822, 0x823, 0x7, 0x18c, 0x2, 
       0x2, 0x823, 0x824, 0x5, 0x200, 0x101, 0x2, 0x824, 0x825, 0x5, 0x1ac, 
       0xd7, 0x2, 0x825, 0x886, 0x3, 0x2, 0x2, 0x2, 0x826, 0x827, 0x7, 0x1a0, 
       0x2, 0x2, 0x827, 0x828, 0x7, 0x126, 0x2, 0x2, 0x828, 0x82b, 0x7, 
       0x1a1, 0x2, 0x2, 0x829, 0x82a, 0x9, 0x1a, 0x2, 0x2, 0x82a, 0x82c, 
       0x5, 0x288, 0x145, 0x2, 0x82b, 0x829, 0x3, 0x2, 0x2, 0x2, 0x82b, 
       0x82c, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x82d, 0x3, 0x2, 0x2, 0x2, 0x82d, 
       0x82e, 0x7, 0xad, 0x2, 0x2, 0x82e, 0x830, 0x5, 0x246, 0x124, 0x2, 
       0x82f, 0x831, 0x5, 0x1ac, 0xd7, 0x2, 0x830, 0x82f, 0x3, 0x2, 0x2, 
       0x2, 0x830, 0x831, 0x3, 0x2, 0x2, 0x2, 0x831, 0x886, 0x3, 0x2, 0x2, 
       0x2, 0x832, 0x833, 0x7, 0x1a0, 0x2, 0x2, 0x833, 0x834, 0x7, 0x17f, 
       0x2, 0x2, 0x834, 0x835, 0x5, 0x200, 0x101, 0x2, 0x835, 0x836, 0x5, 
       0x5e, 0x30, 0x2, 0x836, 0x886, 0x3, 0x2, 0x2, 0x2, 0x837, 0x838, 
       0x7, 0x1a0, 0x2, 0x2, 0x838, 0x839, 0x7, 0x39, 0x2, 0x2, 0x839, 0x83a, 
       0x7, 0x126, 0x2, 0x2, 0x83a, 0x886, 0x5, 0x200, 0x101, 0x2, 0x83b, 
       0x83d, 0x7, 0x1a0, 0x2, 0x2, 0x83c, 0x83e, 0x7, 0x1a2, 0x2, 0x2, 
       0x83d, 0x83c, 0x3, 0x2, 0x2, 0x2, 0x83d, 0x83e, 0x3, 0x2, 0x2, 0x2, 
       0x83e, 0x83f, 0x3, 0x2, 0x2, 0x2, 0x83f, 0x840, 0x9, 0x1b, 0x2, 0x2, 
       0x840, 0x841, 0x7, 0xd2, 0x2, 0x2, 0x841, 0x844, 0x5, 0x288, 0x145, 
       0x2, 0x842, 0x843, 0x9, 0x1a, 0x2, 0x2, 0x843, 0x845, 0x5, 0x288, 
       0x145, 0x2, 0x844, 0x842, 0x3, 0x2, 0x2, 0x2, 0x844, 0x845, 0x3, 
       0x2, 0x2, 0x2, 0x845, 0x886, 0x3, 0x2, 0x2, 0x2, 0x846, 0x847, 0x7, 
       0x1a0, 0x2, 0x2, 0x847, 0x848, 0x7, 0x196, 0x2, 0x2, 0x848, 0x849, 
       0x9, 0x1a, 0x2, 0x2, 0x849, 0x84c, 0x5, 0x200, 0x101, 0x2, 0x84a, 
       0x84b, 0x9, 0x1a, 0x2, 0x2, 0x84b, 0x84d, 0x5, 0x288, 0x145, 0x2, 
       0x84c, 0x84a, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x84d, 0x3, 0x2, 0x2, 0x2, 
       0x84d, 0x886, 0x3, 0x2, 0x2, 0x2, 0x84e, 0x84f, 0x7, 0x1a0, 0x2, 
       0x2, 0x84f, 0x852, 0x7, 0x162, 0x2, 0x2, 0x850, 0x851, 0x7, 0xad, 
       0x2, 0x2, 0x851, 0x853, 0x5, 0x246, 0x124, 0x2, 0x852, 0x850, 0x3, 
       0x2, 0x2, 0x2, 0x852, 0x853, 0x3, 0x2, 0x2, 0x2, 0x853, 0x886, 0x3, 
       0x2, 0x2, 0x2, 0x854, 0x855, 0x7, 0x1a0, 0x2, 0x2, 0x855, 0x856, 
       0x7, 0x83, 0x2, 0x2, 0x856, 0x85c, 0x5, 0xe4, 0x73, 0x2, 0x857, 0x858, 
       0x7, 0xd2, 0x2, 0x2, 0x858, 0x85a, 0x5, 0xb0, 0x59, 0x2, 0x859, 0x85b, 
       0x5, 0x5e, 0x30, 0x2, 0x85a, 0x859, 0x3, 0x2, 0x2, 0x2, 0x85a, 0x85b, 
       0x3, 0x2, 0x2, 0x2, 0x85b, 0x85d, 0x3, 0x2, 0x2, 0x2, 0x85c, 0x857, 
       0x3, 0x2, 0x2, 0x2, 0x85c, 0x85d, 0x3, 0x2, 0x2, 0x2, 0x85d, 0x886, 
       0x3, 0x2, 0x2, 0x2, 0x85e, 0x85f, 0x7, 0x1a0, 0x2, 0x2, 0x85f, 0x860, 
       0x7, 0x86, 0x2, 0x2, 0x860, 0x861, 0x7, 0x83, 0x2, 0x2, 0x861, 0x886, 
       0x5, 0xe4, 0x73, 0x2, 0x862, 0x864, 0x7, 0x1a0, 0x2, 0x2, 0x863, 
       0x865, 0x7, 0x3d, 0x2, 0x2, 0x864, 0x863, 0x3, 0x2, 0x2, 0x2, 0x864, 
       0x865, 0x3, 0x2, 0x2, 0x2, 0x865, 0x866, 0x3, 0x2, 0x2, 0x2, 0x866, 
       0x886, 0x7, 0x87, 0x2, 0x2, 0x867, 0x868, 0x7, 0x1a0, 0x2, 0x2, 0x868, 
       0x869, 0x7, 0x1a9, 0x2, 0x2, 0x869, 0x886, 0x5, 0x288, 0x145, 0x2, 
       0x86a, 0x86b, 0x7, 0x1a0, 0x2, 0x2, 0x86b, 0x86d, 0x7, 0xb4, 0x2, 
       0x2, 0x86c, 0x86e, 0x9, 0x1c, 0x2, 0x2, 0x86d, 0x86c, 0x3, 0x2, 0x2, 
       0x2, 0x86d, 0x86e, 0x3, 0x2, 0x2, 0x2, 0x86e, 0x86f, 0x3, 0x2, 0x2, 
       0x2, 0x86f, 0x871, 0x5, 0x288, 0x145, 0x2, 0x870, 0x872, 0x5, 0x1ac, 
       0xd7, 0x2, 0x871, 0x870, 0x3, 0x2, 0x2, 0x2, 0x871, 0x872, 0x3, 0x2, 
       0x2, 0x2, 0x872, 0x874, 0x3, 0x2, 0x2, 0x2, 0x873, 0x875, 0x7, 0x1a1, 
       0x2, 0x2, 0x874, 0x873, 0x3, 0x2, 0x2, 0x2, 0x874, 0x875, 0x3, 0x2, 
       0x2, 0x2, 0x875, 0x886, 0x3, 0x2, 0x2, 0x2, 0x876, 0x877, 0x7, 0x1a0, 
       0x2, 0x2, 0x877, 0x878, 0x7, 0x1ab, 0x2, 0x2, 0x878, 0x879, 0x7, 
       0x1dd, 0x2, 0x2, 0x879, 0x87a, 0x5, 0x288, 0x145, 0x2, 0x87a, 0x87b, 
       0x7, 0x1db, 0x2, 0x2, 0x87b, 0x886, 0x3, 0x2, 0x2, 0x2, 0x87c, 0x87d, 
       0x7, 0x1a0, 0x2, 0x2, 0x87d, 0x886, 0x7, 0x136, 0x2, 0x2, 0x87e, 
       0x87f, 0x7, 0x1a0, 0x2, 0x2, 0x87f, 0x886, 0x7, 0x1aa, 0x2, 0x2, 
       0x880, 0x881, 0x7, 0x1a0, 0x2, 0x2, 0x881, 0x883, 0x7, 0x18c, 0x2, 
       0x2, 0x882, 0x884, 0x5, 0x1ac, 0xd7, 0x2, 0x883, 0x882, 0x3, 0x2, 
       0x2, 0x2, 0x883, 0x884, 0x3, 0x2, 0x2, 0x2, 0x884, 0x886, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x806, 0x3, 0x2, 0x2, 0x2, 0x885, 0x80c, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x814, 0x3, 0x2, 0x2, 0x2, 0x885, 0x821, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x826, 0x3, 0x2, 0x2, 0x2, 0x885, 0x832, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x837, 0x3, 0x2, 0x2, 0x2, 0x885, 0x83b, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x846, 0x3, 0x2, 0x2, 0x2, 0x885, 0x84e, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x854, 0x3, 0x2, 0x2, 0x2, 0x885, 0x85e, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x862, 0x3, 0x2, 0x2, 0x2, 0x885, 0x867, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x86a, 0x3, 0x2, 0x2, 0x2, 0x885, 0x876, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x87c, 0x3, 0x2, 0x2, 0x2, 0x885, 0x87e, 0x3, 0x2, 
       0x2, 0x2, 0x885, 0x880, 0x3, 0x2, 0x2, 0x2, 0x886, 0xe3, 0x3, 0x2, 
       0x2, 0x2, 0x887, 0x888, 0x9, 0x14, 0x2, 0x2, 0x888, 0x889, 0x5, 0x288, 
       0x145, 0x2, 0x889, 0xe5, 0x3, 0x2, 0x2, 0x2, 0x88a, 0x88f, 0x5, 0xe4, 
       0x73, 0x2, 0x88b, 0x88c, 0x7, 0x1d3, 0x2, 0x2, 0x88c, 0x88e, 0x5, 
       0xe4, 0x73, 0x2, 0x88d, 0x88b, 0x3, 0x2, 0x2, 0x2, 0x88e, 0x891, 
       0x3, 0x2, 0x2, 0x2, 0x88f, 0x88d, 0x3, 0x2, 0x2, 0x2, 0x88f, 0x890, 
       0x3, 0x2, 0x2, 0x2, 0x890, 0xe7, 0x3, 0x2, 0x2, 0x2, 0x891, 0x88f, 
       0x3, 0x2, 0x2, 0x2, 0x892, 0x89b, 0x7, 0x163, 0x2, 0x2, 0x893, 0x895, 
       0x7, 0x12c, 0x2, 0x2, 0x894, 0x893, 0x3, 0x2, 0x2, 0x2, 0x894, 0x895, 
       0x3, 0x2, 0x2, 0x2, 0x895, 0x896, 0x3, 0x2, 0x2, 0x2, 0x896, 0x897, 
       0x7, 0x126, 0x2, 0x2, 0x897, 0x899, 0x5, 0x200, 0x101, 0x2, 0x898, 
       0x89a, 0x5, 0x1ac, 0xd7, 0x2, 0x899, 0x898, 0x3, 0x2, 0x2, 0x2, 0x899, 
       0x89a, 0x3, 0x2, 0x2, 0x2, 0x89a, 0x89c, 0x3, 0x2, 0x2, 0x2, 0x89b, 
       0x894, 0x3, 0x2, 0x2, 0x2, 0x89b, 0x89c, 0x3, 0x2, 0x2, 0x2, 0x89c, 
       0x89d, 0x3, 0x2, 0x2, 0x2, 0x89d, 0x89e, 0x7, 0x7d, 0x2, 0x2, 0x89e, 
       0x8a0, 0x7, 0x1f2, 0x2, 0x2, 0x89f, 0x8a1, 0x5, 0x10a, 0x86, 0x2, 
       0x8a0, 0x89f, 0x3, 0x2, 0x2, 0x2, 0x8a0, 0x8a1, 0x3, 0x2, 0x2, 0x2, 
       0x8a1, 0xe9, 0x3, 0x2, 0x2, 0x2, 0x8a2, 0x8a3, 0x7, 0x164, 0x2, 0x2, 
       0x8a3, 0x8a4, 0x7, 0x126, 0x2, 0x2, 0x8a4, 0x8a6, 0x5, 0x200, 0x101, 
       0x2, 0x8a5, 0x8a7, 0x5, 0x1ac, 0xd7, 0x2, 0x8a6, 0x8a5, 0x3, 0x2, 
       0x2, 0x2, 0x8a6, 0x8a7, 0x3, 0x2, 0x2, 0x2, 0x8a7, 0x8a8, 0x3, 0x2, 
       0x2, 0x2, 0x8a8, 0x8a9, 0x7, 0x133, 0x2, 0x2, 0x8a9, 0x8ac, 0x7, 
       0x1f2, 0x2, 0x2, 0x8aa, 0x8ab, 0x7, 0x79, 0x2, 0x2, 0x8ab, 0x8ad, 
       0x5, 0x26c, 0x137, 0x2, 0x8ac, 0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8ac, 
       0x8ad, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0xeb, 0x3, 0x2, 0x2, 0x2, 0x8ae, 
       0x8c3, 0x7, 0x1b7, 0x2, 0x2, 0x8af, 0x8c4, 0x7, 0x1a1, 0x2, 0x2, 
       0x8b0, 0x8b2, 0x7, 0x1a2, 0x2, 0x2, 0x8b1, 0x8b0, 0x3, 0x2, 0x2, 
       0x2, 0x8b1, 0x8b2, 0x3, 0x2, 0x2, 0x2, 0x8b2, 0x8b3, 0x3, 0x2, 0x2, 
       0x2, 0x8b3, 0x8b5, 0x7, 0x1b8, 0x2, 0x2, 0x8b4, 0x8b6, 0x9, 0x1d, 
       0x2, 0x2, 0x8b5, 0x8b4, 0x3, 0x2, 0x2, 0x2, 0x8b5, 0x8b6, 0x3, 0x2, 
       0x2, 0x2, 0x8b6, 0x8c4, 0x3, 0x2, 0x2, 0x2, 0x8b7, 0x8c4, 0x7, 0x1b9, 
       0x2, 0x2, 0x8b8, 0x8c4, 0x7, 0x1ba, 0x2, 0x2, 0x8b9, 0x8c4, 0x7, 
       0x1bb, 0x2, 0x2, 0x8ba, 0x8c4, 0x7, 0xb4, 0x2, 0x2, 0x8bb, 0x8bd, 
       0x7, 0x1bc, 0x2, 0x2, 0x8bc, 0x8be, 0x7, 0xd3, 0x2, 0x2, 0x8bd, 0x8bc, 
       0x3, 0x2, 0x2, 0x2, 0x8bd, 0x8be, 0x3, 0x2, 0x2, 0x2, 0x8be, 0x8c0, 
       0x3, 0x2, 0x2, 0x2, 0x8bf, 0x8c1, 0x9, 0x1e, 0x2, 0x2, 0x8c0, 0x8bf, 
       0x3, 0x2, 0x2, 0x2, 0x8c0, 0x8c1, 0x3, 0x2, 0x2, 0x2, 0x8c1, 0x8c4, 
       0x3, 0x2, 0x2, 0x2, 0x8c2, 0x8c4, 0x7, 0x1b6, 0x2, 0x2, 0x8c3, 0x8af, 
       0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8b1, 0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8b7, 
       0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8b8, 0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8b9, 
       0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8ba, 0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8bb, 
       0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8c2, 0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8c4, 
       0x3, 0x2, 0x2, 0x2, 0x8c4, 0x8c5, 0x3, 0x2, 0x2, 0x2, 0x8c5, 0x8c6, 
       0x5, 0x10, 0x9, 0x2, 0x8c6, 0xed, 0x3, 0x2, 0x2, 0x2, 0x8c7, 0x8c9, 
       0x5, 0xf0, 0x79, 0x2, 0x8c8, 0x8ca, 0x5, 0xfe, 0x80, 0x2, 0x8c9, 
       0x8c8, 0x3, 0x2, 0x2, 0x2, 0x8c9, 0x8ca, 0x3, 0x2, 0x2, 0x2, 0x8ca, 
       0xef, 0x3, 0x2, 0x2, 0x2, 0x8cb, 0x8d1, 0x5, 0xf2, 0x7a, 0x2, 0x8cc, 
       0x8d1, 0x5, 0xf4, 0x7b, 0x2, 0x8cd, 0x8d1, 0x5, 0xf6, 0x7c, 0x2, 
       0x8ce, 0x8d1, 0x5, 0xf8, 0x7d, 0x2, 0x8cf, 0x8d1, 0x5, 0xfc, 0x7f, 
       0x2, 0x8d0, 0x8cb, 0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8cc, 0x3, 0x2, 0x2, 
       0x2, 0x8d0, 0x8cd, 0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8ce, 0x3, 0x2, 0x2, 
       0x2, 0x8d0, 0x8cf, 0x3, 0x2, 0x2, 0x2, 0x8d1, 0xf1, 0x3, 0x2, 0x2, 
       0x2, 0x8d2, 0x8f0, 0x7, 0x131, 0x2, 0x2, 0x8d3, 0x8f0, 0x7, 0x114, 
       0x2, 0x2, 0x8d4, 0x8f0, 0x7, 0x9a, 0x2, 0x2, 0x8d5, 0x8f0, 0x7, 0x14, 
       0x2, 0x2, 0x8d6, 0x8f0, 0x7, 0x153, 0x2, 0x2, 0x8d7, 0x8f0, 0x7, 
       0x78, 0x2, 0x2, 0x8d8, 0x8f0, 0x7, 0x5b, 0x2, 0x2, 0x8d9, 0x8da, 
       0x7, 0x5b, 0x2, 0x2, 0x8da, 0x8f0, 0x7, 0xe1, 0x2, 0x2, 0x8db, 0x8f0, 
       0x7, 0x11f, 0x2, 0x2, 0x8dc, 0x8f0, 0x7, 0x120, 0x2, 0x2, 0x8dd, 
       0x8e2, 0x7, 0x130, 0x2, 0x2, 0x8de, 0x8df, 0x7, 0x14a, 0x2, 0x2, 
       0x8df, 0x8e0, 0x7, 0xb0, 0x2, 0x2, 0x8e0, 0x8e1, 0x7, 0x1cf, 0x2, 
       0x2, 0x8e1, 0x8e3, 0x7, 0x1d0, 0x2, 0x2, 0x8e2, 0x8de, 0x3, 0x2, 
       0x2, 0x2, 0x8e2, 0x8e3, 0x3, 0x2, 0x2, 0x2, 0x8e3, 0x8f0, 0x3, 0x2, 
       0x2, 0x2, 0x8e4, 0x8f0, 0x7, 0x48, 0x2, 0x2, 0x8e5, 0x8e6, 0x7, 0x48, 
       0x2, 0x2, 0x8e6, 0x8e7, 0x7, 0x1e1, 0x2, 0x2, 0x8e7, 0x8e8, 0x5, 
       0x246, 0x124, 0x2, 0x8e8, 0x8e9, 0x7, 0x1d3, 0x2, 0x2, 0x8e9, 0x8ea, 
       0x5, 0x246, 0x124, 0x2, 0x8ea, 0x8eb, 0x7, 0x1e4, 0x2, 0x2, 0x8eb, 
       0x8f0, 0x3, 0x2, 0x2, 0x2, 0x8ec, 0x8f0, 0x7, 0x43, 0x2, 0x2, 0x8ed, 
       0x8f0, 0x7, 0x143, 0x2, 0x2, 0x8ee, 0x8f0, 0x7, 0x23, 0x2, 0x2, 0x8ef, 
       0x8d2, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8d3, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8d4, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8d5, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8d6, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8d7, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8d8, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8d9, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8db, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8dc, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8dd, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8e4, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8e5, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8ec, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8ed, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8ee, 0x3, 0x2, 0x2, 0x2, 0x8f0, 
       0xf3, 0x3, 0x2, 0x2, 0x2, 0x8f1, 0x8f2, 0x7, 0x151, 0x2, 0x2, 0x8f2, 
       0x8f3, 0x7, 0x1dd, 0x2, 0x2, 0x8f3, 0x8f4, 0x5, 0xee, 0x78, 0x2, 
       0x8f4, 0x8f5, 0x7, 0x1db, 0x2, 0x2, 0x8f5, 0xf5, 0x3, 0x2, 0x2, 0x2, 
       0x8f6, 0x8f7, 0x7, 0xb9, 0x2, 0x2, 0x8f7, 0x8f8, 0x7, 0x1dd, 0x2, 
       0x2, 0x8f8, 0x8f9, 0x5, 0xf2, 0x7a, 0x2, 0x8f9, 0x8fa, 0x7, 0x1d3, 
       0x2, 0x2, 0x8fa, 0x8fb, 0x5, 0xee, 0x78, 0x2, 0x8fb, 0x8fc, 0x7, 
       0x1db, 0x2, 0x2, 0x8fc, 0xf7, 0x3, 0x2, 0x2, 0x2, 0x8fd, 0x8fe, 0x7, 
       0x152, 0x2, 0x2, 0x8fe, 0x8ff, 0x7, 0x1dd, 0x2, 0x2, 0x8ff, 0x904, 
       0x5, 0xfa, 0x7e, 0x2, 0x900, 0x901, 0x7, 0x1d3, 0x2, 0x2, 0x901, 
       0x903, 0x5, 0xfa, 0x7e, 0x2, 0x902, 0x900, 0x3, 0x2, 0x2, 0x2, 0x903, 
       0x906, 0x3, 0x2, 0x2, 0x2, 0x904, 0x902, 0x3, 0x2, 0x2, 0x2, 0x904, 
       0x905, 0x3, 0x2, 0x2, 0x2, 0x905, 0x907, 0x3, 0x2, 0x2, 0x2, 0x906, 
       0x904, 0x3, 0x2, 0x2, 0x2, 0x907, 0x908, 0x7, 0x1db, 0x2, 0x2, 0x908, 
       0xf9, 0x3, 0x2, 0x2, 0x2, 0x909, 0x90a, 0x5, 0x52, 0x2a, 0x2, 0x90a, 
       0x90b, 0x7, 0x1d2, 0x2, 0x2, 0x90b, 0x90d, 0x5, 0xee, 0x78, 0x2, 
       0x90c, 0x90e, 0x5, 0x108, 0x85, 0x2, 0x90d, 0x90c, 0x3, 0x2, 0x2, 
       0x2, 0x90d, 0x90e, 0x3, 0x2, 0x2, 0x2, 0x90e, 0xfb, 0x3, 0x2, 0x2, 
       0x2, 0x90f, 0x910, 0x7, 0x1b5, 0x2, 0x2, 0x910, 0x911, 0x7, 0x1dd, 
       0x2, 0x2, 0x911, 0x916, 0x5, 0xee, 0x78, 0x2, 0x912, 0x913, 0x7, 
       0x1d3, 0x2, 0x2, 0x913, 0x915, 0x5, 0xee, 0x78, 0x2, 0x914, 0x912, 
       0x3, 0x2, 0x2, 0x2, 0x915, 0x918, 0x3, 0x2, 0x2, 0x2, 0x916, 0x914, 
       0x3, 0x2, 0x2, 0x2, 0x916, 0x917, 0x3, 0x2, 0x2, 0x2, 0x917, 0x919, 
       0x3, 0x2, 0x2, 0x2, 0x918, 0x916, 0x3, 0x2, 0x2, 0x2, 0x919, 0x91a, 
       0x7, 0x1db, 0x2, 0x2, 0x91a, 0xfd, 0x3, 0x2, 0x2, 0x2, 0x91b, 0x91c, 
       0x7, 0x1e1, 0x2, 0x2, 0x91c, 0x91e, 0x9, 0x1f, 0x2, 0x2, 0x91d, 0x91f, 
       0x9, 0x20, 0x2, 0x2, 0x91e, 0x91d, 0x3, 0x2, 0x2, 0x2, 0x91e, 0x91f, 
       0x3, 0x2, 0x2, 0x2, 0x91f, 0x922, 0x3, 0x2, 0x2, 0x2, 0x920, 0x921, 
       0x7, 0x1d3, 0x2, 0x2, 0x921, 0x923, 0x7, 0x1f4, 0x2, 0x2, 0x922, 
       0x920, 0x3, 0x2, 0x2, 0x2, 0x922, 0x923, 0x3, 0x2, 0x2, 0x2, 0x923, 
       0x924, 0x3, 0x2, 0x2, 0x2, 0x924, 0x925, 0x7, 0x1e4, 0x2, 0x2, 0x925, 
       0xff, 0x3, 0x2, 0x2, 0x2, 0x926, 0x928, 0x7, 0xcb, 0x2, 0x2, 0x927, 
       0x926, 0x3, 0x2, 0x2, 0x2, 0x927, 0x928, 0x3, 0x2, 0x2, 0x2, 0x928, 
       0x929, 0x3, 0x2, 0x2, 0x2, 0x929, 0x932, 0x7, 0xcd, 0x2, 0x2, 0x92a, 
       0x92b, 0x7, 0x24, 0x2, 0x2, 0x92b, 0x92c, 0x7, 0x109, 0x2, 0x2, 0x92c, 
       0x932, 0x5, 0x288, 0x145, 0x2, 0x92d, 0x92f, 0x7, 0xcb, 0x2, 0x2, 
       0x92e, 0x92d, 0x3, 0x2, 0x2, 0x2, 0x92e, 0x92f, 0x3, 0x2, 0x2, 0x2, 
       0x92f, 0x930, 0x3, 0x2, 0x2, 0x2, 0x930, 0x932, 0x9, 0x21, 0x2, 0x2, 
       0x931, 0x927, 0x3, 0x2, 0x2, 0x2, 0x931, 0x92a, 0x3, 0x2, 0x2, 0x2, 
       0x931, 0x92e, 0x3, 0x2, 0x2, 0x2, 0x932, 0x101, 0x3, 0x2, 0x2, 0x2, 
       0x933, 0x935, 0x7, 0x1d2, 0x2, 0x2, 0x934, 0x933, 0x3, 0x2, 0x2, 
       0x2, 0x934, 0x935, 0x3, 0x2, 0x2, 0x2, 0x935, 0x936, 0x3, 0x2, 0x2, 
       0x2, 0x936, 0x937, 0x7, 0x1d7, 0x2, 0x2, 0x937, 0x940, 0x5, 0x246, 
       0x124, 0x2, 0x938, 0x93a, 0x7, 0x14a, 0x2, 0x2, 0x939, 0x938, 0x3, 
       0x2, 0x2, 0x2, 0x939, 0x93a, 0x3, 0x2, 0x2, 0x2, 0x93a, 0x93b, 0x3, 
       0x2, 0x2, 0x2, 0x93b, 0x93d, 0x7, 0x4a, 0x2, 0x2, 0x93c, 0x93e, 0x5, 
       0x246, 0x124, 0x2, 0x93d, 0x93c, 0x3, 0x2, 0x2, 0x2, 0x93d, 0x93e, 
       0x3, 0x2, 0x2, 0x2, 0x93e, 0x940, 0x3, 0x2, 0x2, 0x2, 0x93f, 0x934, 
       0x3, 0x2, 0x2, 0x2, 0x93f, 0x939, 0x3, 0x2, 0x2, 0x2, 0x940, 0x103, 
       0x3, 0x2, 0x2, 0x2, 0x941, 0x942, 0x7, 0x39, 0x2, 0x2, 0x942, 0x946, 
       0x9, 0x1c, 0x2, 0x2, 0x943, 0x944, 0x7, 0x8f, 0x2, 0x2, 0x944, 0x945, 
       0x7, 0xcb, 0x2, 0x2, 0x945, 0x947, 0x7, 0x6f, 0x2, 0x2, 0x946, 0x943, 
       0x3, 0x2, 0x2, 0x2, 0x946, 0x947, 0x3, 0x2, 0x2, 0x2, 0x947, 0x948, 
       0x3, 0x2, 0x2, 0x2, 0x948, 0x949, 0x5, 0x288, 0x145, 0x2, 0x949, 
       0x94a, 0x5, 0x106, 0x84, 0x2, 0x94a, 0x105, 0x3, 0x2, 0x2, 0x2, 0x94b, 
       0x94d, 0x5, 0x108, 0x85, 0x2, 0x94c, 0x94b, 0x3, 0x2, 0x2, 0x2, 0x94c, 
       0x94d, 0x3, 0x2, 0x2, 0x2, 0x94d, 0x94f, 0x3, 0x2, 0x2, 0x2, 0x94e, 
       0x950, 0x5, 0x10a, 0x86, 0x2, 0x94f, 0x94e, 0x3, 0x2, 0x2, 0x2, 0x94f, 
       0x950, 0x3, 0x2, 0x2, 0x2, 0x950, 0x952, 0x3, 0x2, 0x2, 0x2, 0x951, 
       0x953, 0x5, 0x10c, 0x87, 0x2, 0x952, 0x951, 0x3, 0x2, 0x2, 0x2, 0x952, 
       0x953, 0x3, 0x2, 0x2, 0x2, 0x953, 0x107, 0x3, 0x2, 0x2, 0x2, 0x954, 
       0x955, 0x7, 0x2e, 0x2, 0x2, 0x955, 0x956, 0x5, 0x246, 0x124, 0x2, 
       0x956, 0x109, 0x3, 0x2, 0x2, 0x2, 0x957, 0x958, 0x7, 0xb1, 0x2, 0x2, 
       0x958, 0x959, 0x5, 0x246, 0x124, 0x2, 0x959, 0x10b, 0x3, 0x2, 0x2, 
       0x2, 0x95a, 0x95c, 0x7, 0x14a, 0x2, 0x2, 0x95b, 0x95d, 0x7, 0xda, 
       0x2, 0x2, 0x95c, 0x95b, 0x3, 0x2, 0x2, 0x2, 0x95c, 0x95d, 0x3, 0x2, 
       0x2, 0x2, 0x95d, 0x95e, 0x3, 0x2, 0x2, 0x2, 0x95e, 0x95f, 0x5, 0x10e, 
       0x88, 0x2, 0x95f, 0x10d, 0x3, 0x2, 0x2, 0x2, 0x960, 0x962, 0x9, 0x22, 
       0x2, 0x2, 0x961, 0x960, 0x3, 0x2, 0x2, 0x2, 0x961, 0x962, 0x3, 0x2, 
       0x2, 0x2, 0x962, 0x963, 0x3, 0x2, 0x2, 0x2, 0x963, 0x964, 0x7, 0x1e1, 
       0x2, 0x2, 0x964, 0x969, 0x5, 0x1c, 0xf, 0x2, 0x965, 0x966, 0x7, 0x1d3, 
       0x2, 0x2, 0x966, 0x968, 0x5, 0x1c, 0xf, 0x2, 0x967, 0x965, 0x3, 0x2, 
       0x2, 0x2, 0x968, 0x96b, 0x3, 0x2, 0x2, 0x2, 0x969, 0x967, 0x3, 0x2, 
       0x2, 0x2, 0x969, 0x96a, 0x3, 0x2, 0x2, 0x2, 0x96a, 0x96c, 0x3, 0x2, 
       0x2, 0x2, 0x96b, 0x969, 0x3, 0x2, 0x2, 0x2, 0x96c, 0x96d, 0x7, 0x1e4, 
       0x2, 0x2, 0x96d, 0x10f, 0x3, 0x2, 0x2, 0x2, 0x96e, 0x972, 0x5, 0x114, 
       0x8b, 0x2, 0x96f, 0x972, 0x5, 0x116, 0x8c, 0x2, 0x970, 0x972, 0x5, 
       0x112, 0x8a, 0x2, 0x971, 0x96e, 0x3, 0x2, 0x2, 0x2, 0x971, 0x96f, 
       0x3, 0x2, 0x2, 0x2, 0x971, 0x970, 0x3, 0x2, 0x2, 0x2, 0x972, 0x111, 
       0x3, 0x2, 0x2, 0x2, 0x973, 0x97b, 0x7, 0x7, 0x2, 0x2, 0x974, 0x977, 
       0x7, 0x39, 0x2, 0x2, 0x975, 0x976, 0x7, 0xd5, 0x2, 0x2, 0x976, 0x978, 
       0x7, 0xef, 0x2, 0x2, 0x977, 0x975, 0x3, 0x2, 0x2, 0x2, 0x977, 0x978, 
       0x3, 0x2, 0x2, 0x2, 0x978, 0x97b, 0x3, 0x2, 0x2, 0x2, 0x979, 0x97b, 
       0x7, 0xef, 0x2, 0x2, 0x97a, 0x973, 0x3, 0x2, 0x2, 0x2, 0x97a, 0x974, 
       0x3, 0x2, 0x2, 0x2, 0x97a, 0x979, 0x3, 0x2, 0x2, 0x2, 0x97a, 0x97b, 
       0x3, 0x2, 0x2, 0x2, 0x97b, 0x97c, 0x3, 0x2, 0x2, 0x2, 0x97c, 0x97d, 
       0x7, 0x7f, 0x2, 0x2, 0x97d, 0x97f, 0x5, 0x288, 0x145, 0x2, 0x97e, 
       0x980, 0x5, 0x12e, 0x98, 0x2, 0x97f, 0x97e, 0x3, 0x2, 0x2, 0x2, 0x97f, 
       0x980, 0x3, 0x2, 0x2, 0x2, 0x980, 0x981, 0x3, 0x2, 0x2, 0x2, 0x981, 
       0x983, 0x5, 0x11e, 0x90, 0x2, 0x982, 0x984, 0x9, 0x23, 0x2, 0x2, 
       0x983, 0x982, 0x3, 0x2, 0x2, 0x2, 0x983, 0x984, 0x3, 0x2, 0x2, 0x2, 
       0x984, 0x986, 0x3, 0x2, 0x2, 0x2, 0x985, 0x987, 0x5, 0x36, 0x1c, 
       0x2, 0x986, 0x985, 0x3, 0x2, 0x2, 0x2, 0x986, 0x987, 0x3, 0x2, 0x2, 
       0x2, 0x987, 0x988, 0x3, 0x2, 0x2, 0x2, 0x988, 0x989, 0x5, 0xa, 0x6, 
       0x2, 0x989, 0x113, 0x3, 0x2, 0x2, 0x2, 0x98a, 0x98b, 0x7, 0x39, 0x2, 
       0x2, 0x98b, 0x98c, 0x7, 0x12b, 0x2, 0x2, 0x98c, 0x98d, 0x7, 0x7f, 
       0x2, 0x2, 0x98d, 0x98e, 0x5, 0x288, 0x145, 0x2, 0x98e, 0x98f, 0x7, 
       0xb, 0x2, 0x2, 0x98f, 0x990, 0x5, 0x246, 0x124, 0x2, 0x990, 0x115, 
       0x3, 0x2, 0x2, 0x2, 0x991, 0x992, 0x7, 0x39, 0x2, 0x2, 0x992, 0x993, 
       0x7, 0x7f, 0x2, 0x2, 0x993, 0x994, 0x5, 0x288, 0x145, 0x2, 0x994, 
       0x995, 0x7, 0xb, 0x2, 0x2, 0x995, 0x997, 0x5, 0x246, 0x124, 0x2, 
       0x996, 0x998, 0x5, 0x118, 0x8d, 0x2, 0x997, 0x996, 0x3, 0x2, 0x2, 
       0x2, 0x997, 0x998, 0x3, 0x2, 0x2, 0x2, 0x998, 0x117, 0x3, 0x2, 0x2, 
       0x2, 0x999, 0x99e, 0x5, 0x11a, 0x8e, 0x2, 0x99a, 0x99b, 0x7, 0x1d3, 
       0x2, 0x2, 0x99b, 0x99d, 0x5, 0x11a, 0x8e, 0x2, 0x99c, 0x99a, 0x3, 
       0x2, 0x2, 0x2, 0x99d, 0x9a0, 0x3, 0x2, 0x2, 0x2, 0x99e, 0x99c, 0x3, 
       0x2, 0x2, 0x2, 0x99e, 0x99f, 0x3, 0x2, 0x2, 0x2, 0x99f, 0x119, 0x3, 
       0x2, 0x2, 0x2, 0x9a0, 0x99e, 0x3, 0x2, 0x2, 0x2, 0x9a1, 0x9a2, 0x7, 
       0x13f, 0x2, 0x2, 0x9a2, 0x9a3, 0x9, 0x24, 0x2, 0x2, 0x9a3, 0x9a4, 
       0x5, 0x288, 0x145, 0x2, 0x9a4, 0x11b, 0x3, 0x2, 0x2, 0x2, 0x9a5, 
       0x9a6, 0x7, 0x1a6, 0x2, 0x2, 0x9a6, 0x9a7, 0x9, 0x25, 0x2, 0x2, 0x9a7, 
       0x11d, 0x3, 0x2, 0x2, 0x2, 0x9a8, 0x9a9, 0x9, 0x26, 0x2, 0x2, 0x9a9, 
       0x9aa, 0x5, 0xee, 0x78, 0x2, 0x9aa, 0x11f, 0x3, 0x2, 0x2, 0x2, 0x9ab, 
       0x9b3, 0x7, 0x7, 0x2, 0x2, 0x9ac, 0x9af, 0x7, 0x39, 0x2, 0x2, 0x9ad, 
       0x9ae, 0x7, 0xd5, 0x2, 0x2, 0x9ae, 0x9b0, 0x7, 0xef, 0x2, 0x2, 0x9af, 
       0x9ad, 0x3, 0x2, 0x2, 0x2, 0x9af, 0x9b0, 0x3, 0x2, 0x2, 0x2, 0x9b0, 
       0x9b3, 0x3, 0x2, 0x2, 0x2, 0x9b1, 0x9b3, 0x7, 0xef, 0x2, 0x2, 0x9b2, 
       0x9ab, 0x3, 0x2, 0x2, 0x2, 0x9b2, 0x9ac, 0x3, 0x2, 0x2, 0x2, 0x9b2, 
       0x9b1, 0x3, 0x2, 0x2, 0x2, 0x9b2, 0x9b3, 0x3, 0x2, 0x2, 0x2, 0x9b3, 
       0x9b4, 0x3, 0x2, 0x2, 0x2, 0x9b4, 0x9b5, 0x7, 0xdc, 0x2, 0x2, 0x9b5, 
       0x9b6, 0x5, 0x288, 0x145, 0x2, 0x9b6, 0x9b7, 0x9, 0x23, 0x2, 0x2, 
       0x9b7, 0x9b8, 0x5, 0x122, 0x92, 0x2, 0x9b8, 0x9bc, 0x7, 0x67, 0x2, 
       0x2, 0x9b9, 0x9ba, 0x5, 0x288, 0x145, 0x2, 0x9ba, 0x9bb, 0x7, 0x1e6, 
       0x2, 0x2, 0x9bb, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0x9bc, 0x9b9, 0x3, 0x2, 
       0x2, 0x2, 0x9bc, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0x9bd, 0x121, 0x3, 0x2, 
       0x2, 0x2, 0x9be, 0x9bf, 0x5, 0x124, 0x93, 0x2, 0x9bf, 0x9c5, 0x7, 
       0x1e6, 0x2, 0x2, 0x9c0, 0x9c1, 0x5, 0x124, 0x93, 0x2, 0x9c1, 0x9c2, 
       0x7, 0x1e6, 0x2, 0x2, 0x9c2, 0x9c4, 0x3, 0x2, 0x2, 0x2, 0x9c3, 0x9c0, 
       0x3, 0x2, 0x2, 0x2, 0x9c4, 0x9c7, 0x3, 0x2, 0x2, 0x2, 0x9c5, 0x9c3, 
       0x3, 0x2, 0x2, 0x2, 0x9c5, 0x9c6, 0x3, 0x2, 0x2, 0x2, 0x9c6, 0x123, 
       0x3, 0x2, 0x2, 0x2, 0x9c7, 0x9c5, 0x3, 0x2, 0x2, 0x2, 0x9c8, 0x9d6, 
       0x5, 0x38, 0x1d, 0x2, 0x9c9, 0x9ca, 0x7, 0x7f, 0x2, 0x2, 0x9ca, 0x9cc, 
       0x5, 0x288, 0x145, 0x2, 0x9cb, 0x9cd, 0x5, 0x12e, 0x98, 0x2, 0x9cc, 
       0x9cb, 0x3, 0x2, 0x2, 0x2, 0x9cc, 0x9cd, 0x3, 0x2, 0x2, 0x2, 0x9cd, 
       0x9ce, 0x3, 0x2, 0x2, 0x2, 0x9ce, 0x9cf, 0x5, 0x11e, 0x90, 0x2, 0x9cf, 
       0x9d6, 0x3, 0x2, 0x2, 0x2, 0x9d0, 0x9d1, 0x9, 0x27, 0x2, 0x2, 0x9d1, 
       0x9d3, 0x5, 0x288, 0x145, 0x2, 0x9d2, 0x9d4, 0x5, 0x12e, 0x98, 0x2, 
       0x9d3, 0x9d2, 0x3, 0x2, 0x2, 0x2, 0x9d3, 0x9d4, 0x3, 0x2, 0x2, 0x2, 
       0x9d4, 0x9d6, 0x3, 0x2, 0x2, 0x2, 0x9d5, 0x9c8, 0x3, 0x2, 0x2, 0x2, 
       0x9d5, 0x9c9, 0x3, 0x2, 0x2, 0x2, 0x9d5, 0x9d0, 0x3, 0x2, 0x2, 0x2, 
       0x9d6, 0x125, 0x3, 0x2, 0x2, 0x2, 0x9d7, 0x9df, 0x7, 0x7, 0x2, 0x2, 
       0x9d8, 0x9db, 0x7, 0x39, 0x2, 0x2, 0x9d9, 0x9da, 0x7, 0xd5, 0x2, 
       0x2, 0x9da, 0x9dc, 0x7, 0xef, 0x2, 0x2, 0x9db, 0x9d9, 0x3, 0x2, 0x2, 
       0x2, 0x9db, 0x9dc, 0x3, 0x2, 0x2, 0x2, 0x9dc, 0x9df, 0x3, 0x2, 0x2, 
       0x2, 0x9dd, 0x9df, 0x7, 0xef, 0x2, 0x2, 0x9de, 0x9d7, 0x3, 0x2, 0x2, 
       0x2, 0x9de, 0x9d8, 0x3, 0x2, 0x2, 0x2, 0x9de, 0x9dd, 0x3, 0x2, 0x2, 
       0x2, 0x9de, 0x9df, 0x3, 0x2, 0x2, 0x2, 0x9df, 0x9e0, 0x3, 0x2, 0x2, 
       0x2, 0x9e0, 0x9e1, 0x7, 0xdc, 0x2, 0x2, 0x9e1, 0x9e2, 0x7, 0x19, 
       0x2, 0x2, 0x9e2, 0x9e3, 0x5, 0x288, 0x145, 0x2, 0x9e3, 0x9e4, 0x9, 
       0x23, 0x2, 0x2, 0x9e4, 0x9e5, 0x5, 0x128, 0x95, 0x2, 0x9e5, 0x9e9, 
       0x7, 0x67, 0x2, 0x2, 0x9e6, 0x9e7, 0x5, 0x288, 0x145, 0x2, 0x9e7, 
       0x9e8, 0x7, 0x1e6, 0x2, 0x2, 0x9e8, 0x9ea, 0x3, 0x2, 0x2, 0x2, 0x9e9, 
       0x9e6, 0x3, 0x2, 0x2, 0x2, 0x9e9, 0x9ea, 0x3, 0x2, 0x2, 0x2, 0x9ea, 
       0x127, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9ec, 0x5, 0x12a, 0x96, 0x2, 0x9ec, 
       0x9f2, 0x7, 0x1e6, 0x2, 0x2, 0x9ed, 0x9ee, 0x5, 0x12a, 0x96, 0x2, 
       0x9ee, 0x9ef, 0x7, 0x1e6, 0x2, 0x2, 0x9ef, 0x9f1, 0x3, 0x2, 0x2, 
       0x2, 0x9f0, 0x9ed, 0x3, 0x2, 0x2, 0x2, 0x9f1, 0x9f4, 0x3, 0x2, 0x2, 
       0x2, 0x9f2, 0x9f0, 0x3, 0x2, 0x2, 0x2, 0x9f2, 0x9f3, 0x3, 0x2, 0x2, 
       0x2, 0x9f3, 0x129, 0x3, 0x2, 0x2, 0x2, 0x9f4, 0x9f2, 0x3, 0x2, 0x2, 
       0x2, 0x9f5, 0x9f9, 0x5, 0x38, 0x1d, 0x2, 0x9f6, 0x9f9, 0x5, 0x110, 
       0x89, 0x2, 0x9f7, 0x9f9, 0x5, 0x12c, 0x97, 0x2, 0x9f8, 0x9f5, 0x3, 
       0x2, 0x2, 0x2, 0x9f8, 0x9f6, 0x3, 0x2, 0x2, 0x2, 0x9f8, 0x9f7, 0x3, 
       0x2, 0x2, 0x2, 0x9f9, 0x12b, 0x3, 0x2, 0x2, 0x2, 0x9fa, 0xa02, 0x7, 
       0x7, 0x2, 0x2, 0x9fb, 0x9fe, 0x7, 0x39, 0x2, 0x2, 0x9fc, 0x9fd, 0x7, 
       0xd5, 0x2, 0x2, 0x9fd, 0x9ff, 0x7, 0xef, 0x2, 0x2, 0x9fe, 0x9fc, 
       0x3, 0x2, 0x2, 0x2, 0x9fe, 0x9ff, 0x3, 0x2, 0x2, 0x2, 0x9ff, 0xa02, 
       0x3, 0x2, 0x2, 0x2, 0xa00, 0xa02, 0x7, 0xef, 0x2, 0x2, 0xa01, 0x9fa, 
       0x3, 0x2, 0x2, 0x2, 0xa01, 0x9fb, 0x3, 0x2, 0x2, 0x2, 0xa01, 0xa00, 
       0x3, 0x2, 0x2, 0x2, 0xa01, 0xa02, 0x3, 0x2, 0x2, 0x2, 0xa02, 0xa03, 
       0x3, 0x2, 0x2, 0x2, 0xa03, 0xa04, 0x9, 0x27, 0x2, 0x2, 0xa04, 0xa06, 
       0x5, 0x288, 0x145, 0x2, 0xa05, 0xa07, 0x5, 0x12e, 0x98, 0x2, 0xa06, 
       0xa05, 0x3, 0x2, 0x2, 0x2, 0xa06, 0xa07, 0x3, 0x2, 0x2, 0x2, 0xa07, 
       0xa09, 0x3, 0x2, 0x2, 0x2, 0xa08, 0xa0a, 0x5, 0x132, 0x9a, 0x2, 0xa09, 
       0xa08, 0x3, 0x2, 0x2, 0x2, 0xa09, 0xa0a, 0x3, 0x2, 0x2, 0x2, 0xa0a, 
       0xa0c, 0x3, 0x2, 0x2, 0x2, 0xa0b, 0xa0d, 0x9, 0x23, 0x2, 0x2, 0xa0c, 
       0xa0b, 0x3, 0x2, 0x2, 0x2, 0xa0c, 0xa0d, 0x3, 0x2, 0x2, 0x2, 0xa0d, 
       0xa0f, 0x3, 0x2, 0x2, 0x2, 0xa0e, 0xa10, 0x5, 0x36, 0x1c, 0x2, 0xa0f, 
       0xa0e, 0x3, 0x2, 0x2, 0x2, 0xa0f, 0xa10, 0x3, 0x2, 0x2, 0x2, 0xa10, 
       0xa12, 0x3, 0x2, 0x2, 0x2, 0xa11, 0xa13, 0x5, 0x1ba, 0xde, 0x2, 0xa12, 
       0xa11, 0x3, 0x2, 0x2, 0x2, 0xa12, 0xa13, 0x3, 0x2, 0x2, 0x2, 0xa13, 
       0xa14, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa18, 0x5, 0xe, 0x8, 0x2, 0xa15, 
       0xa16, 0x5, 0x288, 0x145, 0x2, 0xa16, 0xa17, 0x7, 0x1e6, 0x2, 0x2, 
       0xa17, 0xa19, 0x3, 0x2, 0x2, 0x2, 0xa18, 0xa15, 0x3, 0x2, 0x2, 0x2, 
       0xa18, 0xa19, 0x3, 0x2, 0x2, 0x2, 0xa19, 0x12d, 0x3, 0x2, 0x2, 0x2, 
       0xa1a, 0xa1b, 0x7, 0x1e1, 0x2, 0x2, 0xa1b, 0xa30, 0x7, 0x1e4, 0x2, 
       0x2, 0xa1c, 0xa1d, 0x7, 0x1e1, 0x2, 0x2, 0xa1d, 0xa22, 0x5, 0x130, 
       0x99, 0x2, 0xa1e, 0xa1f, 0x7, 0x1d3, 0x2, 0x2, 0xa1f, 0xa21, 0x5, 
       0x130, 0x99, 0x2, 0xa20, 0xa1e, 0x3, 0x2, 0x2, 0x2, 0xa21, 0xa24, 
       0x3, 0x2, 0x2, 0x2, 0xa22, 0xa20, 0x3, 0x2, 0x2, 0x2, 0xa22, 0xa23, 
       0x3, 0x2, 0x2, 0x2, 0xa23, 0xa25, 0x3, 0x2, 0x2, 0x2, 0xa24, 0xa22, 
       0x3, 0x2, 0x2, 0x2, 0xa25, 0xa26, 0x7, 0x1e4, 0x2, 0x2, 0xa26, 0xa30, 
       0x3, 0x2, 0x2, 0x2, 0xa27, 0xa2c, 0x5, 0x130, 0x99, 0x2, 0xa28, 0xa29, 
       0x7, 0x1d3, 0x2, 0x2, 0xa29, 0xa2b, 0x5, 0x130, 0x99, 0x2, 0xa2a, 
       0xa28, 0x3, 0x2, 0x2, 0x2, 0xa2b, 0xa2e, 0x3, 0x2, 0x2, 0x2, 0xa2c, 
       0xa2a, 0x3, 0x2, 0x2, 0x2, 0xa2c, 0xa2d, 0x3, 0x2, 0x2, 0x2, 0xa2d, 
       0xa30, 0x3, 0x2, 0x2, 0x2, 0xa2e, 0xa2c, 0x3, 0x2, 0x2, 0x2, 0xa2f, 
       0xa1a, 0x3, 0x2, 0x2, 0x2, 0xa2f, 0xa1c, 0x3, 0x2, 0x2, 0x2, 0xa2f, 
       0xa27, 0x3, 0x2, 0x2, 0x2, 0xa30, 0x12f, 0x3, 0x2, 0x2, 0x2, 0xa31, 
       0xa37, 0x7, 0x92, 0x2, 0x2, 0xa32, 0xa37, 0x7, 0xd7, 0x2, 0x2, 0xa33, 
       0xa37, 0x7, 0x98, 0x2, 0x2, 0xa34, 0xa35, 0x7, 0x92, 0x2, 0x2, 0xa35, 
       0xa37, 0x7, 0xd7, 0x2, 0x2, 0xa36, 0xa31, 0x3, 0x2, 0x2, 0x2, 0xa36, 
       0xa32, 0x3, 0x2, 0x2, 0x2, 0xa36, 0xa33, 0x3, 0x2, 0x2, 0x2, 0xa36, 
       0xa34, 0x3, 0x2, 0x2, 0x2, 0xa36, 0xa37, 0x3, 0x2, 0x2, 0x2, 0xa37, 
       0xa38, 0x3, 0x2, 0x2, 0x2, 0xa38, 0xa39, 0x5, 0x288, 0x145, 0x2, 
       0xa39, 0xa3d, 0x5, 0xee, 0x78, 0x2, 0xa3a, 0xa3c, 0x5, 0x100, 0x81, 
       0x2, 0xa3b, 0xa3a, 0x3, 0x2, 0x2, 0x2, 0xa3c, 0xa3f, 0x3, 0x2, 0x2, 
       0x2, 0xa3d, 0xa3b, 0x3, 0x2, 0x2, 0x2, 0xa3d, 0xa3e, 0x3, 0x2, 0x2, 
       0x2, 0xa3e, 0xa41, 0x3, 0x2, 0x2, 0x2, 0xa3f, 0xa3d, 0x3, 0x2, 0x2, 
       0x2, 0xa40, 0xa42, 0x5, 0x102, 0x82, 0x2, 0xa41, 0xa40, 0x3, 0x2, 
       0x2, 0x2, 0xa41, 0xa42, 0x3, 0x2, 0x2, 0x2, 0xa42, 0xa56, 0x3, 0x2, 
       0x2, 0x2, 0xa43, 0xa49, 0x5, 0x288, 0x145, 0x2, 0xa44, 0xa4a, 0x7, 
       0x92, 0x2, 0x2, 0xa45, 0xa4a, 0x7, 0xd7, 0x2, 0x2, 0xa46, 0xa4a, 
       0x7, 0x98, 0x2, 0x2, 0xa47, 0xa48, 0x7, 0x92, 0x2, 0x2, 0xa48, 0xa4a, 
       0x7, 0xd7, 0x2, 0x2, 0xa49, 0xa44, 0x3, 0x2, 0x2, 0x2, 0xa49, 0xa45, 
       0x3, 0x2, 0x2, 0x2, 0xa49, 0xa46, 0x3, 0x2, 0x2, 0x2, 0xa49, 0xa47, 
       0x3, 0x2, 0x2, 0x2, 0xa49, 0xa4a, 0x3, 0x2, 0x2, 0x2, 0xa4a, 0xa4b, 
       0x3, 0x2, 0x2, 0x2, 0xa4b, 0xa4f, 0x5, 0xee, 0x78, 0x2, 0xa4c, 0xa4e, 
       0x5, 0x100, 0x81, 0x2, 0xa4d, 0xa4c, 0x3, 0x2, 0x2, 0x2, 0xa4e, 0xa51, 
       0x3, 0x2, 0x2, 0x2, 0xa4f, 0xa4d, 0x3, 0x2, 0x2, 0x2, 0xa4f, 0xa50, 
       0x3, 0x2, 0x2, 0x2, 0xa50, 0xa53, 0x3, 0x2, 0x2, 0x2, 0xa51, 0xa4f, 
       0x3, 0x2, 0x2, 0x2, 0xa52, 0xa54, 0x5, 0x102, 0x82, 0x2, 0xa53, 0xa52, 
       0x3, 0x2, 0x2, 0x2, 0xa53, 0xa54, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa56, 
       0x3, 0x2, 0x2, 0x2, 0xa55, 0xa36, 0x3, 0x2, 0x2, 0x2, 0xa55, 0xa43, 
       0x3, 0x2, 0x2, 0x2, 0xa56, 0x131, 0x3, 0x2, 0x2, 0x2, 0xa57, 0xa59, 
       0x5, 0x134, 0x9b, 0x2, 0xa58, 0xa57, 0x3, 0x2, 0x2, 0x2, 0xa59, 0xa5a, 
       0x3, 0x2, 0x2, 0x2, 0xa5a, 0xa58, 0x3, 0x2, 0x2, 0x2, 0xa5a, 0xa5b, 
       0x3, 0x2, 0x2, 0x2, 0xa5b, 0x133, 0x3, 0x2, 0x2, 0x2, 0xa5c, 0xa5d, 
       0x7, 0xaa, 0x2, 0x2, 0xa5d, 0xa68, 0x7, 0x115, 0x2, 0x2, 0xa5e, 0xa5f, 
       0x7, 0x115, 0x2, 0x2, 0xa5f, 0xa60, 0x7, 0x106, 0x2, 0x2, 0xa60, 
       0xa68, 0x9, 0x28, 0x2, 0x2, 0xa61, 0xa63, 0x7, 0x5d, 0x2, 0x2, 0xa62, 
       0xa61, 0x3, 0x2, 0x2, 0x2, 0xa62, 0xa63, 0x3, 0x2, 0x2, 0x2, 0xa63, 
       0xa64, 0x3, 0x2, 0x2, 0x2, 0xa64, 0xa65, 0x7, 0xf2, 0x2, 0x2, 0xa65, 
       0xa66, 0x7, 0x10d, 0x2, 0x2, 0xa66, 0xa68, 0x5, 0x28c, 0x147, 0x2, 
       0xa67, 0xa5c, 0x3, 0x2, 0x2, 0x2, 0xa67, 0xa5e, 0x3, 0x2, 0x2, 0x2, 
       0xa67, 0xa62, 0x3, 0x2, 0x2, 0x2, 0xa68, 0x135, 0x3, 0x2, 0x2, 0x2, 
       0xa69, 0xa6b, 0x7, 0x5c, 0x2, 0x2, 0xa6a, 0xa6c, 0x7, 0x19b, 0x2, 
       0x2, 0xa6b, 0xa6a, 0x3, 0x2, 0x2, 0x2, 0xa6b, 0xa6c, 0x3, 0x2, 0x2, 
       0x2, 0xa6c, 0xa6d, 0x3, 0x2, 0x2, 0x2, 0xa6d, 0xa70, 0x9, 0x29, 0x2, 
       0x2, 0xa6e, 0xa6f, 0x7, 0x8f, 0x2, 0x2, 0xa6f, 0xa71, 0x7, 0x6f, 
       0x2, 0x2, 0xa70, 0xa6e, 0x3, 0x2, 0x2, 0x2, 0xa70, 0xa71, 0x3, 0x2, 
       0x2, 0x2, 0xa71, 0xa72, 0x3, 0x2, 0x2, 0x2, 0xa72, 0xa74, 0x5, 0x288, 
       0x145, 0x2, 0xa73, 0xa75, 0x7, 0x181, 0x2, 0x2, 0xa74, 0xa73, 0x3, 
       0x2, 0x2, 0x2, 0xa74, 0xa75, 0x3, 0x2, 0x2, 0x2, 0xa75, 0xa8b, 0x3, 
       0x2, 0x2, 0x2, 0xa76, 0xa77, 0x7, 0x5c, 0x2, 0x2, 0xa77, 0xa7a, 0x9, 
       0x1c, 0x2, 0x2, 0xa78, 0xa79, 0x7, 0x8f, 0x2, 0x2, 0xa79, 0xa7b, 
       0x7, 0x6f, 0x2, 0x2, 0xa7a, 0xa78, 0x3, 0x2, 0x2, 0x2, 0xa7a, 0xa7b, 
       0x3, 0x2, 0x2, 0x2, 0xa7b, 0xa7c, 0x3, 0x2, 0x2, 0x2, 0xa7c, 0xa7e, 
       0x5, 0x288, 0x145, 0x2, 0xa7d, 0xa7f, 0x9, 0x17, 0x2, 0x2, 0xa7e, 
       0xa7d, 0x3, 0x2, 0x2, 0x2, 0xa7e, 0xa7f, 0x3, 0x2, 0x2, 0x2, 0xa7f, 
       0xa8b, 0x3, 0x2, 0x2, 0x2, 0xa80, 0xa82, 0x7, 0x5c, 0x2, 0x2, 0xa81, 
       0xa83, 0x7, 0x12b, 0x2, 0x2, 0xa82, 0xa81, 0x3, 0x2, 0x2, 0x2, 0xa82, 
       0xa83, 0x3, 0x2, 0x2, 0x2, 0xa83, 0xa84, 0x3, 0x2, 0x2, 0x2, 0xa84, 
       0xa87, 0x9, 0x2a, 0x2, 0x2, 0xa85, 0xa86, 0x7, 0x8f, 0x2, 0x2, 0xa86, 
       0xa88, 0x7, 0x6f, 0x2, 0x2, 0xa87, 0xa85, 0x3, 0x2, 0x2, 0x2, 0xa87, 
       0xa88, 0x3, 0x2, 0x2, 0x2, 0xa88, 0xa89, 0x3, 0x2, 0x2, 0x2, 0xa89, 
       0xa8b, 0x5, 0x288, 0x145, 0x2, 0xa8a, 0xa69, 0x3, 0x2, 0x2, 0x2, 
       0xa8a, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa8a, 0xa80, 0x3, 0x2, 0x2, 0x2, 
       0xa8b, 0x137, 0x3, 0x2, 0x2, 0x2, 0xa8c, 0xa8d, 0x7, 0x67, 0x2, 0x2, 
       0xa8d, 0xa8e, 0x7, 0x135, 0x2, 0x2, 0xa8e, 0x139, 0x3, 0x2, 0x2, 
       0x2, 0xa8f, 0xa91, 0x9, 0x2b, 0x2, 0x2, 0xa90, 0xa92, 0x7, 0x91, 
       0x2, 0x2, 0xa91, 0xa90, 0x3, 0x2, 0x2, 0x2, 0xa91, 0xa92, 0x3, 0x2, 
       0x2, 0x2, 0xa92, 0xa93, 0x3, 0x2, 0x2, 0x2, 0xa93, 0xa99, 0x5, 0x246, 
       0x124, 0x2, 0xa94, 0xa95, 0x7, 0x1e1, 0x2, 0x2, 0xa95, 0xa96, 0x5, 
       0x26e, 0x138, 0x2, 0xa96, 0xa97, 0x7, 0x1e4, 0x2, 0x2, 0xa97, 0xa9a, 
       0x3, 0x2, 0x2, 0x2, 0xa98, 0xa9a, 0x5, 0x26e, 0x138, 0x2, 0xa99, 
       0xa94, 0x3, 0x2, 0x2, 0x2, 0xa99, 0xa98, 0x3, 0x2, 0x2, 0x2, 0xa99, 
       0xa9a, 0x3, 0x2, 0x2, 0x2, 0xa9a, 0xaa4, 0x3, 0x2, 0x2, 0x2, 0xa9b, 
       0xa9c, 0x7, 0xa1, 0x2, 0x2, 0xa9c, 0xaa1, 0x7, 0x1f1, 0x2, 0x2, 0xa9d, 
       0xa9e, 0x7, 0x1d3, 0x2, 0x2, 0xa9e, 0xaa0, 0x7, 0x1f1, 0x2, 0x2, 
       0xa9f, 0xa9d, 0x3, 0x2, 0x2, 0x2, 0xaa0, 0xaa3, 0x3, 0x2, 0x2, 0x2, 
       0xaa1, 0xa9f, 0x3, 0x2, 0x2, 0x2, 0xaa1, 0xaa2, 0x3, 0x2, 0x2, 0x2, 
       0xaa2, 0xaa5, 0x3, 0x2, 0x2, 0x2, 0xaa3, 0xaa1, 0x3, 0x2, 0x2, 0x2, 
       0xaa4, 0xa9b, 0x3, 0x2, 0x2, 0x2, 0xaa4, 0xaa5, 0x3, 0x2, 0x2, 0x2, 
       0xaa5, 0xaa7, 0x3, 0x2, 0x2, 0x2, 0xaa6, 0xaa8, 0x5, 0x1be, 0xe0, 
       0x2, 0xaa7, 0xaa6, 0x3, 0x2, 0x2, 0x2, 0xaa7, 0xaa8, 0x3, 0x2, 0x2, 
       0x2, 0xaa8, 0x13b, 0x3, 0x2, 0x2, 0x2, 0xaa9, 0xaad, 0x5, 0x13e, 
       0xa0, 0x2, 0xaaa, 0xaad, 0x5, 0x140, 0xa1, 0x2, 0xaab, 0xaad, 0x5, 
       0x142, 0xa2, 0x2, 0xaac, 0xaa9, 0x3, 0x2, 0x2, 0x2, 0xaac, 0xaaa, 
       0x3, 0x2, 0x2, 0x2, 0xaac, 0xaab, 0x3, 0x2, 0x2, 0x2, 0xaad, 0x13d, 
       0x3, 0x2, 0x2, 0x2, 0xaae, 0xaaf, 0x7, 0x8f, 0x2, 0x2, 0xaaf, 0xab0, 
       0x5, 0x232, 0x11a, 0x2, 0xab0, 0xab1, 0x7, 0x12f, 0x2, 0x2, 0xab1, 
       0xab5, 0x5, 0x4, 0x3, 0x2, 0xab2, 0xab4, 0x5, 0x144, 0xa3, 0x2, 0xab3, 
       0xab2, 0x3, 0x2, 0x2, 0x2, 0xab4, 0xab7, 0x3, 0x2, 0x2, 0x2, 0xab5, 
       0xab3, 0x3, 0x2, 0x2, 0x2, 0xab5, 0xab6, 0x3, 0x2, 0x2, 0x2, 0xab6, 
       0xab9, 0x3, 0x2, 0x2, 0x2, 0xab7, 0xab5, 0x3, 0x2, 0x2, 0x2, 0xab8, 
       0xaba, 0x5, 0x146, 0xa4, 0x2, 0xab9, 0xab8, 0x3, 0x2, 0x2, 0x2, 0xab9, 
       0xaba, 0x3, 0x2, 0x2, 0x2, 0xaba, 0xabb, 0x3, 0x2, 0x2, 0x2, 0xabb, 
       0xabc, 0x7, 0x67, 0x2, 0x2, 0xabc, 0xabd, 0x7, 0x8f, 0x2, 0x2, 0xabd, 
       0x13f, 0x3, 0x2, 0x2, 0x2, 0xabe, 0xabf, 0x7, 0x8f, 0x2, 0x2, 0xabf, 
       0xac0, 0x5, 0x232, 0x11a, 0x2, 0xac0, 0xac3, 0x5, 0xa, 0x6, 0x2, 
       0xac1, 0xac2, 0x7, 0x5e, 0x2, 0x2, 0xac2, 0xac4, 0x5, 0xa, 0x6, 0x2, 
       0xac3, 0xac1, 0x3, 0x2, 0x2, 0x2, 0xac3, 0xac4, 0x3, 0x2, 0x2, 0x2, 
       0xac4, 0x141, 0x3, 0x2, 0x2, 0x2, 0xac5, 0xac6, 0x7, 0x1ea, 0x2, 
       0x2, 0xac6, 0xac7, 0x7, 0x8f, 0x2, 0x2, 0xac7, 0xac8, 0x5, 0x232, 
       0x11a, 0x2, 0xac8, 0xac9, 0x7, 0x12f, 0x2, 0x2, 0xac9, 0xaca, 0x5, 
       0xa, 0x6, 0x2, 0xaca, 0x143, 0x3, 0x2, 0x2, 0x2, 0xacb, 0xacc, 0x9, 
       0x2c, 0x2, 0x2, 0xacc, 0xacd, 0x5, 0x232, 0x11a, 0x2, 0xacd, 0xace, 
       0x7, 0x12f, 0x2, 0x2, 0xace, 0xacf, 0x5, 0x4, 0x3, 0x2, 0xacf, 0x145, 
       0x3, 0x2, 0x2, 0x2, 0xad0, 0xad1, 0x7, 0x5e, 0x2, 0x2, 0xad1, 0xad2, 
       0x5, 0x4, 0x3, 0x2, 0xad2, 0x147, 0x3, 0x2, 0x2, 0x2, 0xad3, 0xad6, 
       0x7, 0x93, 0x2, 0x2, 0xad4, 0xad7, 0x5, 0x280, 0x141, 0x2, 0xad5, 
       0xad7, 0x5, 0x246, 0x124, 0x2, 0xad6, 0xad4, 0x3, 0x2, 0x2, 0x2, 
       0xad6, 0xad5, 0x3, 0x2, 0x2, 0x2, 0xad7, 0x149, 0x3, 0x2, 0x2, 0x2, 
       0xad8, 0xad9, 0x7, 0x1a7, 0x2, 0x2, 0xad9, 0xadb, 0x7, 0x42, 0x2, 
       0x2, 0xada, 0xadc, 0x7, 0xb0, 0x2, 0x2, 0xadb, 0xada, 0x3, 0x2, 0x2, 
       0x2, 0xadb, 0xadc, 0x3, 0x2, 0x2, 0x2, 0xadc, 0xadd, 0x3, 0x2, 0x2, 
       0x2, 0xadd, 0xade, 0x7, 0x1a8, 0x2, 0x2, 0xade, 0xae0, 0x5, 0x28a, 
       0x146, 0x2, 0xadf, 0xae1, 0x7, 0xda, 0x2, 0x2, 0xae0, 0xadf, 0x3, 
       0x2, 0x2, 0x2, 0xae0, 0xae1, 0x3, 0x2, 0x2, 0x2, 0xae1, 0xae2, 0x3, 
       0x2, 0x2, 0x2, 0xae2, 0xae3, 0x7, 0xa1, 0x2, 0x2, 0xae3, 0xae4, 0x7, 
       0x126, 0x2, 0x2, 0xae4, 0xae6, 0x5, 0x200, 0x101, 0x2, 0xae5, 0xae7, 
       0x5, 0x1ac, 0xd7, 0x2, 0xae6, 0xae5, 0x3, 0x2, 0x2, 0x2, 0xae6, 0xae7, 
       0x3, 0x2, 0x2, 0x2, 0xae7, 0xaec, 0x3, 0x2, 0x2, 0x2, 0xae8, 0xae9, 
       0x7, 0x15d, 0x2, 0x2, 0xae9, 0xaea, 0x7, 0x1f2, 0x2, 0x2, 0xaea, 
       0xaeb, 0x7, 0x155, 0x2, 0x2, 0xaeb, 0xaed, 0x7, 0x1f2, 0x2, 0x2, 
       0xaec, 0xae8, 0x3, 0x2, 0x2, 0x2, 0xaec, 0xaed, 0x3, 0x2, 0x2, 0x2, 
       0xaed, 0x14b, 0x3, 0x2, 0x2, 0x2, 0xaee, 0xaf3, 0x5, 0x14e, 0xa8, 
       0x2, 0xaef, 0xaf3, 0x5, 0x150, 0xa9, 0x2, 0xaf0, 0xaf3, 0x5, 0x154, 
       0xab, 0x2, 0xaf1, 0xaf3, 0x5, 0x156, 0xac, 0x2, 0xaf2, 0xaee, 0x3, 
       0x2, 0x2, 0x2, 0xaf2, 0xaef, 0x3, 0x2, 0x2, 0x2, 0xaf2, 0xaf0, 0x3, 
       0x2, 0x2, 0x2, 0xaf2, 0xaf1, 0x3, 0x2, 0x2, 0x2, 0xaf3, 0x14d, 0x3, 
       0x2, 0x2, 0x2, 0xaf4, 0xaf5, 0x7, 0x99, 0x2, 0x2, 0xaf5, 0xaf6, 0x7, 
       0xa1, 0x2, 0x2, 0xaf6, 0xaf7, 0x7, 0x126, 0x2, 0x2, 0xaf7, 0xaf9, 
       0x5, 0x200, 0x101, 0x2, 0xaf8, 0xafa, 0x5, 0x1ac, 0xd7, 0x2, 0xaf9, 
       0xaf8, 0x3, 0x2, 0x2, 0x2, 0xaf9, 0xafa, 0x3, 0x2, 0x2, 0x2, 0xafa, 
       0xafc, 0x3, 0x2, 0x2, 0x2, 0xafb, 0xafd, 0x5, 0x158, 0xad, 0x2, 0xafc, 
       0xafb, 0x3, 0x2, 0x2, 0x2, 0xafc, 0xafd, 0x3, 0x2, 0x2, 0x2, 0xafd, 
       0xafe, 0x3, 0x2, 0x2, 0x2, 0xafe, 0xaff, 0x5, 0x15a, 0xae, 0x2, 0xaff, 
       0x14f, 0x3, 0x2, 0x2, 0x2, 0xb00, 0xb02, 0x5, 0x152, 0xaa, 0x2, 0xb01, 
       0xb03, 0x5, 0x1e0, 0xf1, 0x2, 0xb02, 0xb01, 0x3, 0x2, 0x2, 0x2, 0xb02, 
       0xb03, 0x3, 0x2, 0x2, 0x2, 0xb03, 0x151, 0x3, 0x2, 0x2, 0x2, 0xb04, 
       0xb05, 0x7, 0x99, 0x2, 0x2, 0xb05, 0xb06, 0x9, 0x2d, 0x2, 0x2, 0xb06, 
       0xb07, 0x7, 0x126, 0x2, 0x2, 0xb07, 0xb0e, 0x5, 0x200, 0x101, 0x2, 
       0xb08, 0xb0c, 0x5, 0x1ac, 0xd7, 0x2, 0xb09, 0xb0a, 0x7, 0x8f, 0x2, 
       0x2, 0xb0a, 0xb0b, 0x7, 0xcb, 0x2, 0x2, 0xb0b, 0xb0d, 0x7, 0x6f, 
       0x2, 0x2, 0xb0c, 0xb09, 0x3, 0x2, 0x2, 0x2, 0xb0c, 0xb0d, 0x3, 0x2, 
       0x2, 0x2, 0xb0d, 0xb0f, 0x3, 0x2, 0x2, 0x2, 0xb0e, 0xb08, 0x3, 0x2, 
       0x2, 0x2, 0xb0e, 0xb0f, 0x3, 0x2, 0x2, 0x2, 0xb0f, 0xb10, 0x3, 0x2, 
       0x2, 0x2, 0xb10, 0xb11, 0x5, 0x1c0, 0xe1, 0x2, 0xb11, 0x153, 0x3, 
       0x2, 0x2, 0x2, 0xb12, 0xb13, 0x5, 0x15e, 0xb0, 0x2, 0xb13, 0x155, 
       0x3, 0x2, 0x2, 0x2, 0xb14, 0xb17, 0x5, 0x1e0, 0xf1, 0x2, 0xb15, 0xb18, 
       0x5, 0x152, 0xaa, 0x2, 0xb16, 0xb18, 0x5, 0x15e, 0xb0, 0x2, 0xb17, 
       0xb15, 0x3, 0x2, 0x2, 0x2, 0xb17, 0xb16, 0x3, 0x2, 0x2, 0x2, 0xb18, 
       0xb19, 0x3, 0x2, 0x2, 0x2, 0xb19, 0xb17, 0x3, 0x2, 0x2, 0x2, 0xb19, 
       0xb1a, 0x3, 0x2, 0x2, 0x2, 0xb1a, 0x157, 0x3, 0x2, 0x2, 0x2, 0xb1b, 
       0xb1c, 0x7, 0x1e1, 0x2, 0x2, 0xb1c, 0xb21, 0x5, 0x288, 0x145, 0x2, 
       0xb1d, 0xb1e, 0x7, 0x1d3, 0x2, 0x2, 0xb1e, 0xb20, 0x5, 0x288, 0x145, 
       0x2, 0xb1f, 0xb1d, 0x3, 0x2, 0x2, 0x2, 0xb20, 0xb23, 0x3, 0x2, 0x2, 
       0x2, 0xb21, 0xb1f, 0x3, 0x2, 0x2, 0x2, 0xb21, 0xb22, 0x3, 0x2, 0x2, 
       0x2, 0xb22, 0xb24, 0x3, 0x2, 0x2, 0x2, 0xb23, 0xb21, 0x3, 0x2, 0x2, 
       0x2, 0xb24, 0xb25, 0x7, 0x1e4, 0x2, 0x2, 0xb25, 0x159, 0x3, 0x2, 
       0x2, 0x2, 0xb26, 0xb27, 0x7, 0x141, 0x2, 0x2, 0xb27, 0xb2c, 0x5, 
       0x15c, 0xaf, 0x2, 0xb28, 0xb29, 0x7, 0x1d3, 0x2, 0x2, 0xb29, 0xb2b, 
       0x5, 0x15c, 0xaf, 0x2, 0xb2a, 0xb28, 0x3, 0x2, 0x2, 0x2, 0xb2b, 0xb2e, 
       0x3, 0x2, 0x2, 0x2, 0xb2c, 0xb2a, 0x3, 0x2, 0x2, 0x2, 0xb2c, 0xb2d, 
       0x3, 0x2, 0x2, 0x2, 0xb2d, 0x15b, 0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb2c, 
       0x3, 0x2, 0x2, 0x2, 0xb2f, 0xb30, 0x7, 0x1e1, 0x2, 0x2, 0xb30, 0xb35, 
       0x5, 0x246, 0x124, 0x2, 0xb31, 0xb32, 0x7, 0x1d3, 0x2, 0x2, 0xb32, 
       0xb34, 0x5, 0x246, 0x124, 0x2, 0xb33, 0xb31, 0x3, 0x2, 0x2, 0x2, 
       0xb34, 0xb37, 0x3, 0x2, 0x2, 0x2, 0xb35, 0xb33, 0x3, 0x2, 0x2, 0x2, 
       0xb35, 0xb36, 0x3, 0x2, 0x2, 0x2, 0xb36, 0xb38, 0x3, 0x2, 0x2, 0x2, 
       0xb37, 0xb35, 0x3, 0x2, 0x2, 0x2, 0xb38, 0xb39, 0x7, 0x1e4, 0x2, 
       0x2, 0xb39, 0x15d, 0x3, 0x2, 0x2, 0x2, 0xb3a, 0xb3b, 0x7, 0x99, 0x2, 
       0x2, 0xb3b, 0xb3d, 0x7, 0xda, 0x2, 0x2, 0xb3c, 0xb3e, 0x7, 0xb0, 
       0x2, 0x2, 0xb3d, 0xb3c, 0x3, 0x2, 0x2, 0x2, 0xb3d, 0xb3e, 0x3, 0x2, 
       0x2, 0x2, 0xb3e, 0xb3f, 0x3, 0x2, 0x2, 0x2, 0xb3f, 0xb40, 0x7, 0x57, 
       0x2, 0x2, 0xb40, 0xb42, 0x5, 0x274, 0x13b, 0x2, 0xb41, 0xb43, 0x5, 
       0x84, 0x43, 0x2, 0xb42, 0xb41, 0x3, 0x2, 0x2, 0x2, 0xb42, 0xb43, 
       0x3, 0x2, 0x2, 0x2, 0xb43, 0xb44, 0x3, 0x2, 0x2, 0x2, 0xb44, 0xb45, 
       0x5, 0x272, 0x13a, 0x2, 0xb45, 0x15f, 0x3, 0x2, 0x2, 0x2, 0xb46, 
       0xb48, 0x7, 0x70, 0x2, 0x2, 0xb47, 0xb49, 0x7, 0x1f1, 0x2, 0x2, 0xb48, 
       0xb47, 0x3, 0x2, 0x2, 0x2, 0xb48, 0xb49, 0x3, 0x2, 0x2, 0x2, 0xb49, 
       0xb4c, 0x3, 0x2, 0x2, 0x2, 0xb4a, 0xb4b, 0x7, 0x147, 0x2, 0x2, 0xb4b, 
       0xb4d, 0x5, 0x232, 0x11a, 0x2, 0xb4c, 0xb4a, 0x3, 0x2, 0x2, 0x2, 
       0xb4c, 0xb4d, 0x3, 0x2, 0x2, 0x2, 0xb4d, 0x161, 0x3, 0x2, 0x2, 0x2, 
       0xb4e, 0xb4f, 0x7, 0x80, 0x2, 0x2, 0xb4f, 0xb50, 0x7, 0x55, 0x2, 
       0x2, 0xb50, 0xb51, 0x5, 0x164, 0xb3, 0x2, 0xb51, 0x163, 0x3, 0x2, 
       0x2, 0x2, 0xb52, 0xb55, 0x5, 0x166, 0xb4, 0x2, 0xb53, 0xb55, 0x5, 
       0x168, 0xb5, 0x2, 0xb54, 0xb52, 0x3, 0x2, 0x2, 0x2, 0xb54, 0xb53, 
       0x3, 0x2, 0x2, 0x2, 0xb55, 0x165, 0x3, 0x2, 0x2, 0x2, 0xb56, 0xb57, 
       0x7, 0x6d, 0x2, 0x2, 0xb57, 0xb58, 0x5, 0x28c, 0x147, 0x2, 0xb58, 
       0xb59, 0x5, 0x288, 0x145, 0x2, 0xb59, 0xb5a, 0x7, 0x1d7, 0x2, 0x2, 
       0xb5a, 0xb5b, 0x7, 0xbe, 0x2, 0x2, 0xb5b, 0x167, 0x3, 0x2, 0x2, 0x2, 
       0xb5c, 0xb5d, 0x5, 0x288, 0x145, 0x2, 0xb5d, 0xb5e, 0x7, 0x1d7, 0x2, 
       0x2, 0xb5e, 0xb5f, 0x7, 0xfd, 0x2, 0x2, 0xb5f, 0x169, 0x3, 0x2, 0x2, 
       0x2, 0xb60, 0xb62, 0x7, 0xab, 0x2, 0x2, 0xb61, 0xb63, 0x7, 0x1f1, 
       0x2, 0x2, 0xb62, 0xb61, 0x3, 0x2, 0x2, 0x2, 0xb62, 0xb63, 0x3, 0x2, 
       0x2, 0x2, 0xb63, 0x16b, 0x3, 0x2, 0x2, 0x2, 0xb64, 0xb65, 0x7, 0xb9, 
       0x2, 0x2, 0xb65, 0xb66, 0x7, 0xd0, 0x2, 0x2, 0xb66, 0xb69, 0x5, 0x246, 
       0x124, 0x2, 0xb67, 0xb68, 0x7, 0x133, 0x2, 0x2, 0xb68, 0xb6a, 0x5, 
       0x246, 0x124, 0x2, 0xb69, 0xb67, 0x3, 0x2, 0x2, 0x2, 0xb69, 0xb6a, 
       0x3, 0x2, 0x2, 0x2, 0xb6a, 0xb6d, 0x3, 0x2, 0x2, 0x2, 0xb6b, 0xb6c, 
       0x7, 0xe, 0x2, 0x2, 0xb6c, 0xb6e, 0x5, 0x246, 0x124, 0x2, 0xb6d, 
       0xb6b, 0x3, 0x2, 0x2, 0x2, 0xb6d, 0xb6e, 0x3, 0x2, 0x2, 0x2, 0xb6e, 
       0x16d, 0x3, 0x2, 0x2, 0x2, 0xb6f, 0xb70, 0x7, 0xd4, 0x2, 0x2, 0xb70, 
       0xb76, 0x7, 0x1f1, 0x2, 0x2, 0xb71, 0xb74, 0x7, 0x79, 0x2, 0x2, 0xb72, 
       0xb75, 0x5, 0x1c0, 0xe1, 0x2, 0xb73, 0xb75, 0x5, 0x246, 0x124, 0x2, 
       0xb74, 0xb72, 0x3, 0x2, 0x2, 0x2, 0xb74, 0xb73, 0x3, 0x2, 0x2, 0x2, 
       0xb75, 0xb77, 0x3, 0x2, 0x2, 0x2, 0xb76, 0xb71, 0x3, 0x2, 0x2, 0x2, 
       0xb76, 0xb77, 0x3, 0x2, 0x2, 0x2, 0xb77, 0x16f, 0x3, 0x2, 0x2, 0x2, 
       0xb78, 0xb7a, 0x7, 0x73, 0x2, 0x2, 0xb79, 0xb7b, 0x7, 0x7d, 0x2, 
       0x2, 0xb7a, 0xb79, 0x3, 0x2, 0x2, 0x2, 0xb7a, 0xb7b, 0x3, 0x2, 0x2, 
       0x2, 0xb7b, 0xb7c, 0x3, 0x2, 0x2, 0x2, 0xb7c, 0xb7d, 0x7, 0x1f1, 
       0x2, 0x2, 0xb7d, 0xb7e, 0x7, 0xa1, 0x2, 0x2, 0xb7e, 0xb83, 0x7, 0x1f1, 
       0x2, 0x2, 0xb7f, 0xb80, 0x7, 0x1d3, 0x2, 0x2, 0xb80, 0xb82, 0x7, 
       0x1f1, 0x2, 0x2, 0xb81, 0xb7f, 0x3, 0x2, 0x2, 0x2, 0xb82, 0xb85, 
       0x3, 0x2, 0x2, 0x2, 0xb83, 0xb81, 0x3, 0x2, 0x2, 0x2, 0xb83, 0xb84, 
       0x3, 0x2, 0x2, 0x2, 0xb84, 0x171, 0x3, 0x2, 0x2, 0x2, 0xb85, 0xb83, 
       0x3, 0x2, 0x2, 0x2, 0xb86, 0xb87, 0x7, 0x2b, 0x2, 0x2, 0xb87, 0xb88, 
       0x9, 0x2e, 0x2, 0x2, 0xb88, 0xb89, 0x7, 0xd2, 0x2, 0x2, 0xb89, 0xb8b, 
       0x5, 0x200, 0x101, 0x2, 0xb8a, 0xb8c, 0x5, 0x174, 0xbb, 0x2, 0xb8b, 
       0xb8a, 0x3, 0x2, 0x2, 0x2, 0xb8b, 0xb8c, 0x3, 0x2, 0x2, 0x2, 0xb8c, 
       0x173, 0x3, 0x2, 0x2, 0x2, 0xb8d, 0xb8e, 0x7, 0x2d, 0x2, 0x2, 0xb8e, 
       0xb8f, 0x7, 0x1e1, 0x2, 0x2, 0xb8f, 0xb94, 0x5, 0x288, 0x145, 0x2, 
       0xb90, 0xb91, 0x7, 0x1d3, 0x2, 0x2, 0xb91, 0xb93, 0x5, 0x288, 0x145, 
       0x2, 0xb92, 0xb90, 0x3, 0x2, 0x2, 0x2, 0xb93, 0xb96, 0x3, 0x2, 0x2, 
       0x2, 0xb94, 0xb92, 0x3, 0x2, 0x2, 0x2, 0xb94, 0xb95, 0x3, 0x2, 0x2, 
       0x2, 0xb95, 0xb97, 0x3, 0x2, 0x2, 0x2, 0xb96, 0xb94, 0x3, 0x2, 0x2, 
       0x2, 0xb97, 0xb98, 0x7, 0x1e4, 0x2, 0x2, 0xb98, 0x175, 0x3, 0x2, 
       0x2, 0x2, 0xb99, 0xb9a, 0x7, 0x27, 0x2, 0x2, 0xb9a, 0xb9b, 0x7, 0x1f1, 
       0x2, 0x2, 0xb9b, 0x177, 0x3, 0x2, 0x2, 0x2, 0xb9c, 0xb9d, 0x7, 0x2a, 
       0x2, 0x2, 0xb9d, 0xb9e, 0x9, 0x2f, 0x2, 0x2, 0xb9e, 0xb9f, 0x5, 0x17a, 
       0xbe, 0x2, 0xb9f, 0xba0, 0x7, 0x1d3, 0x2, 0x2, 0xba0, 0xba1, 0x5, 
       0x17a, 0xbe, 0x2, 0xba1, 0x179, 0x3, 0x2, 0x2, 0x2, 0xba2, 0xba4, 
       0x5, 0x200, 0x101, 0x2, 0xba3, 0xba5, 0x5, 0x20a, 0x106, 0x2, 0xba4, 
       0xba3, 0x3, 0x2, 0x2, 0x2, 0xba4, 0xba5, 0x3, 0x2, 0x2, 0x2, 0xba5, 
       0xbab, 0x3, 0x2, 0x2, 0x2, 0xba6, 0xba7, 0x7, 0x1e1, 0x2, 0x2, 0xba7, 
       0xba8, 0x5, 0x1c0, 0xe1, 0x2, 0xba8, 0xba9, 0x7, 0x1e4, 0x2, 0x2, 
       0xba9, 0xbab, 0x3, 0x2, 0x2, 0x2, 0xbaa, 0xba2, 0x3, 0x2, 0x2, 0x2, 
       0xbaa, 0xba6, 0x3, 0x2, 0x2, 0x2, 0xbab, 0xbae, 0x3, 0x2, 0x2, 0x2, 
       0xbac, 0xbad, 0x7, 0xe, 0x2, 0x2, 0xbad, 0xbaf, 0x5, 0x288, 0x145, 
       0x2, 0xbae, 0xbac, 0x3, 0x2, 0x2, 0x2, 0xbae, 0xbaf, 0x3, 0x2, 0x2, 
       0x2, 0xbaf, 0x17b, 0x3, 0x2, 0x2, 0x2, 0xbb0, 0xbb1, 0x7, 0x36, 0x2, 
       0x2, 0xbb1, 0xbb2, 0x7, 0x7d, 0x2, 0x2, 0xbb2, 0xbb3, 0x7, 0xb0, 
       0x2, 0x2, 0xbb3, 0xbb8, 0x5, 0x180, 0xc1, 0x2, 0xbb4, 0xbb5, 0x7, 
       0x1d3, 0x2, 0x2, 0xbb5, 0xbb7, 0x5, 0x180, 0xc1, 0x2, 0xbb6, 0xbb4, 
       0x3, 0x2, 0x2, 0x2, 0xbb7, 0xbba, 0x3, 0x2, 0x2, 0x2, 0xbb8, 0xbb6, 
       0x3, 0x2, 0x2, 0x2, 0xbb8, 0xbb9, 0x3, 0x2, 0x2, 0x2, 0xbb9, 0xbbb, 
       0x3, 0x2, 0x2, 0x2, 0xbba, 0xbb8, 0x3, 0x2, 0x2, 0x2, 0xbbb, 0xbbc, 
       0x7, 0x133, 0x2, 0x2, 0xbbc, 0xbc0, 0x5, 0x182, 0xc2, 0x2, 0xbbd, 
       0xbbf, 0x5, 0x186, 0xc4, 0x2, 0xbbe, 0xbbd, 0x3, 0x2, 0x2, 0x2, 0xbbf, 
       0xbc2, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbbe, 0x3, 0x2, 0x2, 0x2, 0xbc0, 
       0xbc1, 0x3, 0x2, 0x2, 0x2, 0xbc1, 0x17d, 0x3, 0x2, 0x2, 0x2, 0xbc2, 
       0xbc0, 0x3, 0x2, 0x2, 0x2, 0xbc3, 0xbc9, 0x7, 0x36, 0x2, 0x2, 0xbc4, 
       0xbca, 0x5, 0x200, 0x101, 0x2, 0xbc5, 0xbc6, 0x7, 0x1e1, 0x2, 0x2, 
       0xbc6, 0xbc7, 0x5, 0x1c0, 0xe1, 0x2, 0xbc7, 0xbc8, 0x7, 0x1e4, 0x2, 
       0x2, 0xbc8, 0xbca, 0x3, 0x2, 0x2, 0x2, 0xbc9, 0xbc4, 0x3, 0x2, 0x2, 
       0x2, 0xbc9, 0xbc5, 0x3, 0x2, 0x2, 0x2, 0xbca, 0xbcb, 0x3, 0x2, 0x2, 
       0x2, 0xbcb, 0xbcd, 0x7, 0x133, 0x2, 0x2, 0xbcc, 0xbce, 0x7, 0x8b, 
       0x2, 0x2, 0xbcd, 0xbcc, 0x3, 0x2, 0x2, 0x2, 0xbcd, 0xbce, 0x3, 0x2, 
       0x2, 0x2, 0xbce, 0xbcf, 0x3, 0x2, 0x2, 0x2, 0xbcf, 0xbd3, 0x5, 0x182, 
       0xc2, 0x2, 0xbd0, 0xbd2, 0x5, 0x184, 0xc3, 0x2, 0xbd1, 0xbd0, 0x3, 
       0x2, 0x2, 0x2, 0xbd2, 0xbd5, 0x3, 0x2, 0x2, 0x2, 0xbd3, 0xbd1, 0x3, 
       0x2, 0x2, 0x2, 0xbd3, 0xbd4, 0x3, 0x2, 0x2, 0x2, 0xbd4, 0x17f, 0x3, 
       0x2, 0x2, 0x2, 0xbd5, 0xbd3, 0x3, 0x2, 0x2, 0x2, 0xbd6, 0xbd9, 0x5, 
       0x280, 0x141, 0x2, 0xbd7, 0xbd9, 0x5, 0x246, 0x124, 0x2, 0xbd8, 0xbd6, 
       0x3, 0x2, 0x2, 0x2, 0xbd8, 0xbd7, 0x3, 0x2, 0x2, 0x2, 0xbd9, 0x181, 
       0x3, 0x2, 0x2, 0x2, 0xbda, 0xbdd, 0x5, 0x280, 0x141, 0x2, 0xbdb, 
       0xbdd, 0x5, 0x246, 0x124, 0x2, 0xbdc, 0xbda, 0x3, 0x2, 0x2, 0x2, 
       0xbdc, 0xbdb, 0x3, 0x2, 0x2, 0x2, 0xbdd, 0x183, 0x3, 0x2, 0x2, 0x2, 
       0xbde, 0xbdf, 0x7, 0xe, 0x2, 0x2, 0xbdf, 0xbe7, 0x5, 0x288, 0x145, 
       0x2, 0xbe0, 0xbe1, 0x7, 0x11, 0x2, 0x2, 0xbe1, 0xbe7, 0x5, 0x246, 
       0x124, 0x2, 0xbe2, 0xbe3, 0x7, 0x52, 0x2, 0x2, 0xbe3, 0xbe7, 0x5, 
       0x246, 0x124, 0x2, 0xbe4, 0xbe5, 0x7, 0x117, 0x2, 0x2, 0xbe5, 0xbe7, 
       0x5, 0x288, 0x145, 0x2, 0xbe6, 0xbde, 0x3, 0x2, 0x2, 0x2, 0xbe6, 
       0xbe0, 0x3, 0x2, 0x2, 0x2, 0xbe6, 0xbe2, 0x3, 0x2, 0x2, 0x2, 0xbe6, 
       0xbe4, 0x3, 0x2, 0x2, 0x2, 0xbe7, 0x185, 0x3, 0x2, 0x2, 0x2, 0xbe8, 
       0xbe9, 0x9, 0x30, 0x2, 0x2, 0xbe9, 0x187, 0x3, 0x2, 0x2, 0x2, 0xbea, 
       0xbec, 0x7, 0x30, 0x2, 0x2, 0xbeb, 0xbed, 0x7, 0x14c, 0x2, 0x2, 0xbec, 
       0xbeb, 0x3, 0x2, 0x2, 0x2, 0xbec, 0xbed, 0x3, 0x2, 0x2, 0x2, 0xbed, 
       0x189, 0x3, 0x2, 0x2, 0x2, 0xbee, 0xbef, 0x7, 0x39, 0x2, 0x2, 0xbef, 
       0xbf0, 0x7, 0x94, 0x2, 0x2, 0xbf0, 0xbf1, 0x5, 0x288, 0x145, 0x2, 
       0xbf1, 0xbf2, 0x7, 0xd2, 0x2, 0x2, 0xbf2, 0xbf3, 0x7, 0x126, 0x2, 
       0x2, 0xbf3, 0xbf4, 0x5, 0x200, 0x101, 0x2, 0xbf4, 0xbf5, 0x5, 0x5e, 
       0x30, 0x2, 0xbf5, 0xbf6, 0x7, 0xb, 0x2, 0x2, 0xbf6, 0xbfa, 0x5, 0xee, 
       0x78, 0x2, 0xbf7, 0xbf8, 0x7, 0x14a, 0x2, 0x2, 0xbf8, 0xbf9, 0x7, 
       0x4b, 0x2, 0x2, 0xbf9, 0xbfb, 0x7, 0x4c, 0x2, 0x2, 0xbfa, 0xbf7, 
       0x3, 0x2, 0x2, 0x2, 0xbfa, 0xbfb, 0x3, 0x2, 0x2, 0x2, 0xbfb, 0xbfd, 
       0x3, 0x2, 0x2, 0x2, 0xbfc, 0xbfe, 0x5, 0x10e, 0x88, 0x2, 0xbfd, 0xbfc, 
       0x3, 0x2, 0x2, 0x2, 0xbfd, 0xbfe, 0x3, 0x2, 0x2, 0x2, 0xbfe, 0xc02, 
       0x3, 0x2, 0x2, 0x2, 0xbff, 0xc00, 0x7, 0x92, 0x2, 0x2, 0xc00, 0xc01, 
       0x7, 0x126, 0x2, 0x2, 0xc01, 0xc03, 0x5, 0x200, 0x101, 0x2, 0xc02, 
       0xbff, 0x3, 0x2, 0x2, 0x2, 0xc02, 0xc03, 0x3, 0x2, 0x2, 0x2, 0xc03, 
       0xc05, 0x3, 0x2, 0x2, 0x2, 0xc04, 0xc06, 0x5, 0x84, 0x43, 0x2, 0xc05, 
       0xc04, 0x3, 0x2, 0x2, 0x2, 0xc05, 0xc06, 0x3, 0x2, 0x2, 0x2, 0xc06, 
       0xc08, 0x3, 0x2, 0x2, 0x2, 0xc07, 0xc09, 0x5, 0x10a, 0x86, 0x2, 0xc08, 
       0xc07, 0x3, 0x2, 0x2, 0x2, 0xc08, 0xc09, 0x3, 0x2, 0x2, 0x2, 0xc09, 
       0xc0b, 0x3, 0x2, 0x2, 0x2, 0xc0a, 0xc0c, 0x5, 0x10e, 0x88, 0x2, 0xc0b, 
       0xc0a, 0x3, 0x2, 0x2, 0x2, 0xc0b, 0xc0c, 0x3, 0x2, 0x2, 0x2, 0xc0c, 
       0xc0e, 0x3, 0x2, 0x2, 0x2, 0xc0d, 0xc0f, 0x5, 0x108, 0x85, 0x2, 0xc0e, 
       0xc0d, 0x3, 0x2, 0x2, 0x2, 0xc0e, 0xc0f, 0x3, 0x2, 0x2, 0x2, 0xc0f, 
       0x18b, 0x3, 0x2, 0x2, 0x2, 0xc10, 0xc12, 0x5, 0x288, 0x145, 0x2, 
       0xc11, 0xc13, 0x9, 0xd, 0x2, 0x2, 0xc12, 0xc11, 0x3, 0x2, 0x2, 0x2, 
       0xc12, 0xc13, 0x3, 0x2, 0x2, 0x2, 0xc13, 0x18d, 0x3, 0x2, 0x2, 0x2, 
       0xc14, 0xc15, 0x5, 0x190, 0xc9, 0x2, 0xc15, 0x18f, 0x3, 0x2, 0x2, 
       0x2, 0xc16, 0xc17, 0x7, 0x14a, 0x2, 0x2, 0xc17, 0xc18, 0x7, 0x1e1, 
       0x2, 0x2, 0xc18, 0xc19, 0x5, 0x288, 0x145, 0x2, 0xc19, 0xc1a, 0x7, 
       0x1d7, 0x2, 0x2, 0xc1a, 0xc22, 0x5, 0x288, 0x145, 0x2, 0xc1b, 0xc1c, 
       0x7, 0x1d3, 0x2, 0x2, 0xc1c, 0xc1d, 0x5, 0x288, 0x145, 0x2, 0xc1d, 
       0xc1e, 0x7, 0x1d7, 0x2, 0x2, 0xc1e, 0xc1f, 0x5, 0x288, 0x145, 0x2, 
       0xc1f, 0xc21, 0x3, 0x2, 0x2, 0x2, 0xc20, 0xc1b, 0x3, 0x2, 0x2, 0x2, 
       0xc21, 0xc24, 0x3, 0x2, 0x2, 0x2, 0xc22, 0xc20, 0x3, 0x2, 0x2, 0x2, 
       0xc22, 0xc23, 0x3, 0x2, 0x2, 0x2, 0xc23, 0xc25, 0x3, 0x2, 0x2, 0x2, 
       0xc24, 0xc22, 0x3, 0x2, 0x2, 0x2, 0xc25, 0xc29, 0x7, 0x1e4, 0x2, 
       0x2, 0xc26, 0xc28, 0x5, 0x96, 0x4c, 0x2, 0xc27, 0xc26, 0x3, 0x2, 
       0x2, 0x2, 0xc28, 0xc2b, 0x3, 0x2, 0x2, 0x2, 0xc29, 0xc27, 0x3, 0x2, 
       0x2, 0x2, 0xc29, 0xc2a, 0x3, 0x2, 0x2, 0x2, 0xc2a, 0x191, 0x3, 0x2, 
       0x2, 0x2, 0xc2b, 0xc29, 0x3, 0x2, 0x2, 0x2, 0xc2c, 0xc2d, 0x7, 0xe4, 
       0x2, 0x2, 0xc2d, 0xc34, 0x5, 0x246, 0x124, 0x2, 0xc2e, 0xc2f, 0x7, 
       0xe4, 0x2, 0x2, 0xc2f, 0xc30, 0x7, 0x1e1, 0x2, 0x2, 0xc30, 0xc31, 
       0x5, 0x246, 0x124, 0x2, 0xc31, 0xc32, 0x7, 0x1e4, 0x2, 0x2, 0xc32, 
       0xc34, 0x3, 0x2, 0x2, 0x2, 0xc33, 0xc2c, 0x3, 0x2, 0x2, 0x2, 0xc33, 
       0xc2e, 0x3, 0x2, 0x2, 0x2, 0xc34, 0x193, 0x3, 0x2, 0x2, 0x2, 0xc35, 
       0xc37, 0x7, 0x1ea, 0x2, 0x2, 0xc36, 0xc35, 0x3, 0x2, 0x2, 0x2, 0xc36, 
       0xc37, 0x3, 0x2, 0x2, 0x2, 0xc37, 0xc38, 0x3, 0x2, 0x2, 0x2, 0xc38, 
       0xc3a, 0x7, 0xe9, 0x2, 0x2, 0xc39, 0xc3b, 0x5, 0x246, 0x124, 0x2, 
       0xc3a, 0xc39, 0x3, 0x2, 0x2, 0x2, 0xc3a, 0xc3b, 0x3, 0x2, 0x2, 0x2, 
       0xc3b, 0x195, 0x3, 0x2, 0x2, 0x2, 0xc3c, 0xc3d, 0x7, 0xeb, 0x2, 0x2, 
       0xc3d, 0x197, 0x3, 0x2, 0x2, 0x2, 0xc3e, 0xc4a, 0x7, 0xf0, 0x2, 0x2, 
       0xc3f, 0xc41, 0x7, 0x118, 0x2, 0x2, 0xc40, 0xc42, 0x7, 0x140, 0x2, 
       0x2, 0xc41, 0xc40, 0x3, 0x2, 0x2, 0x2, 0xc41, 0xc42, 0x3, 0x2, 0x2, 
       0x2, 0xc42, 0xc43, 0x3, 0x2, 0x2, 0x2, 0xc43, 0xc48, 0x5, 0x246, 
       0x124, 0x2, 0xc44, 0xc45, 0x7, 0x109, 0x2, 0x2, 0xc45, 0xc46, 0x7, 
       0xbe, 0x2, 0x2, 0xc46, 0xc47, 0x7, 0x1d7, 0x2, 0x2, 0xc47, 0xc49, 
       0x5, 0x246, 0x124, 0x2, 0xc48, 0xc44, 0x3, 0x2, 0x2, 0x2, 0xc48, 
       0xc49, 0x3, 0x2, 0x2, 0x2, 0xc49, 0xc4b, 0x3, 0x2, 0x2, 0x2, 0xc4a, 
       0xc3f, 0x3, 0x2, 0x2, 0x2, 0xc4a, 0xc4b, 0x3, 0x2, 0x2, 0x2, 0xc4b, 
       0x199, 0x3, 0x2, 0x2, 0x2, 0xc4c, 0xc4e, 0x7, 0xf4, 0x2, 0x2, 0xc4d, 
       0xc4f, 0x5, 0x246, 0x124, 0x2, 0xc4e, 0xc4d, 0x3, 0x2, 0x2, 0x2, 
       0xc4e, 0xc4f, 0x3, 0x2, 0x2, 0x2, 0xc4f, 0x19b, 0x3, 0x2, 0x2, 0x2, 
       0xc50, 0xc52, 0x7, 0xf9, 0x2, 0x2, 0xc51, 0xc53, 0x7, 0x14c, 0x2, 
       0x2, 0xc52, 0xc51, 0x3, 0x2, 0x2, 0x2, 0xc52, 0xc53, 0x3, 0x2, 0x2, 
       0x2, 0xc53, 0x19d, 0x3, 0x2, 0x2, 0x2, 0xc54, 0xc58, 0x5, 0x1a0, 
       0xd1, 0x2, 0xc55, 0xc58, 0x5, 0x1a2, 0xd2, 0x2, 0xc56, 0xc58, 0x5, 
       0x1a4, 0xd3, 0x2, 0xc57, 0xc54, 0x3, 0x2, 0x2, 0x2, 0xc57, 0xc55, 
       0x3, 0x2, 0x2, 0x2, 0xc57, 0xc56, 0x3, 0x2, 0x2, 0x2, 0xc58, 0x19f, 
       0x3, 0x2, 0x2, 0x2, 0xc59, 0xc5b, 0x7, 0x3d, 0x2, 0x2, 0xc5a, 0xc59, 
       0x3, 0x2, 0x2, 0x2, 0xc5a, 0xc5b, 0x3, 0x2, 0x2, 0x2, 0xc5b, 0xc5c, 
       0x3, 0x2, 0x2, 0x2, 0xc5c, 0xc5f, 0x7, 0x102, 0x2, 0x2, 0xc5d, 0xc5f, 
       0x7, 0x3e, 0x2, 0x2, 0xc5e, 0xc5a, 0x3, 0x2, 0x2, 0x2, 0xc5e, 0xc5d, 
       0x3, 0x2, 0x2, 0x2, 0xc5f, 0xc61, 0x3, 0x2, 0x2, 0x2, 0xc60, 0xc62, 
       0x7, 0x1d7, 0x2, 0x2, 0xc61, 0xc60, 0x3, 0x2, 0x2, 0x2, 0xc61, 0xc62, 
       0x3, 0x2, 0x2, 0x2, 0xc62, 0xc63, 0x3, 0x2, 0x2, 0x2, 0xc63, 0xc64, 
       0x5, 0x246, 0x124, 0x2, 0xc64, 0x1a1, 0x3, 0x2, 0x2, 0x2, 0xc65, 
       0xc66, 0x9, 0x31, 0x2, 0x2, 0xc66, 0xc67, 0x9, 0x32, 0x2, 0x2, 0xc67, 
       0x1a3, 0x3, 0x2, 0x2, 0x2, 0xc68, 0xc69, 0x7, 0xe8, 0x2, 0x2, 0xc69, 
       0xc6c, 0x7, 0x1d7, 0x2, 0x2, 0xc6a, 0xc6d, 0x5, 0x246, 0x124, 0x2, 
       0xc6b, 0xc6d, 0x7, 0xca, 0x2, 0x2, 0xc6c, 0xc6a, 0x3, 0x2, 0x2, 0x2, 
       0xc6c, 0xc6b, 0x3, 0x2, 0x2, 0x2, 0xc6d, 0xc6f, 0x3, 0x2, 0x2, 0x2, 
       0xc6e, 0xc70, 0x7, 0x13c, 0x2, 0x2, 0xc6f, 0xc6e, 0x3, 0x2, 0x2, 
       0x2, 0xc6f, 0xc70, 0x3, 0x2, 0x2, 0x2, 0xc70, 0xc71, 0x3, 0x2, 0x2, 
       0x2, 0xc71, 0xc72, 0x7, 0x79, 0x2, 0x2, 0xc72, 0xc73, 0x9, 0x33, 
       0x2, 0x2, 0xc73, 0x1a5, 0x3, 0x2, 0x2, 0x2, 0xc74, 0xc75, 0x7, 0x10f, 
       0x2, 0x2, 0xc75, 0xc76, 0x5, 0x288, 0x145, 0x2, 0xc76, 0x1a7, 0x3, 
       0x2, 0x2, 0x2, 0xc77, 0xc7a, 0x7, 0x124, 0x2, 0x2, 0xc78, 0xc79, 
       0x7, 0x134, 0x2, 0x2, 0xc79, 0xc7b, 0x5, 0x246, 0x124, 0x2, 0xc7a, 
       0xc78, 0x3, 0x2, 0x2, 0x2, 0xc7a, 0xc7b, 0x3, 0x2, 0x2, 0x2, 0xc7b, 
       0xc7c, 0x3, 0x2, 0x2, 0x2, 0xc7c, 0xc86, 0x7, 0x79, 0x2, 0x2, 0xc7d, 
       0xc87, 0x5, 0x1c0, 0xe1, 0x2, 0xc7e, 0xc80, 0x5, 0x200, 0x101, 0x2, 
       0xc7f, 0xc81, 0x5, 0x20a, 0x106, 0x2, 0xc80, 0xc7f, 0x3, 0x2, 0x2, 
       0x2, 0xc80, 0xc81, 0x3, 0x2, 0x2, 0x2, 0xc81, 0xc84, 0x3, 0x2, 0x2, 
       0x2, 0xc82, 0xc83, 0x7, 0xae, 0x2, 0x2, 0xc83, 0xc85, 0x5, 0x246, 
       0x124, 0x2, 0xc84, 0xc82, 0x3, 0x2, 0x2, 0x2, 0xc84, 0xc85, 0x3, 
       0x2, 0x2, 0x2, 0xc85, 0xc87, 0x3, 0x2, 0x2, 0x2, 0xc86, 0xc7d, 0x3, 
       0x2, 0x2, 0x2, 0xc86, 0xc7e, 0x3, 0x2, 0x2, 0x2, 0xc87, 0x1a9, 0x3, 
       0x2, 0x2, 0x2, 0xc88, 0xc8a, 0x7, 0x138, 0x2, 0x2, 0xc89, 0xc8b, 
       0x7, 0x126, 0x2, 0x2, 0xc8a, 0xc89, 0x3, 0x2, 0x2, 0x2, 0xc8a, 0xc8b, 
       0x3, 0x2, 0x2, 0x2, 0xc8b, 0xc8c, 0x3, 0x2, 0x2, 0x2, 0xc8c, 0xc8e, 
       0x5, 0x200, 0x101, 0x2, 0xc8d, 0xc8f, 0x5, 0x1ac, 0xd7, 0x2, 0xc8e, 
       0xc8d, 0x3, 0x2, 0x2, 0x2, 0xc8e, 0xc8f, 0x3, 0x2, 0x2, 0x2, 0xc8f, 
       0x1ab, 0x3, 0x2, 0x2, 0x2, 0xc90, 0xc92, 0x7, 0xdd, 0x2, 0x2, 0xc91, 
       0xc93, 0x7, 0x1e1, 0x2, 0x2, 0xc92, 0xc91, 0x3, 0x2, 0x2, 0x2, 0xc92, 
       0xc93, 0x3, 0x2, 0x2, 0x2, 0xc93, 0xc94, 0x3, 0x2, 0x2, 0x2, 0xc94, 
       0xc96, 0x5, 0x1ae, 0xd8, 0x2, 0xc95, 0xc97, 0x7, 0x1e4, 0x2, 0x2, 
       0xc96, 0xc95, 0x3, 0x2, 0x2, 0x2, 0xc96, 0xc97, 0x3, 0x2, 0x2, 0x2, 
       0xc97, 0x1ad, 0x3, 0x2, 0x2, 0x2, 0xc98, 0xc99, 0x7, 0x1e1, 0x2, 
       0x2, 0xc99, 0xc9e, 0x5, 0x1c, 0xf, 0x2, 0xc9a, 0xc9b, 0x7, 0x1d3, 
       0x2, 0x2, 0xc9b, 0xc9d, 0x5, 0x1c, 0xf, 0x2, 0xc9c, 0xc9a, 0x3, 0x2, 
       0x2, 0x2, 0xc9d, 0xca0, 0x3, 0x2, 0x2, 0x2, 0xc9e, 0xc9c, 0x3, 0x2, 
       0x2, 0x2, 0xc9e, 0xc9f, 0x3, 0x2, 0x2, 0x2, 0xc9f, 0xca1, 0x3, 0x2, 
       0x2, 0x2, 0xca0, 0xc9e, 0x3, 0x2, 0x2, 0x2, 0xca1, 0xca2, 0x7, 0x1e4, 
       0x2, 0x2, 0xca2, 0x1af, 0x3, 0x2, 0x2, 0x2, 0xca3, 0xca6, 0x7, 0x13e, 
       0x2, 0x2, 0xca4, 0xca7, 0x5, 0x246, 0x124, 0x2, 0xca5, 0xca7, 0x7, 
       0x4a, 0x2, 0x2, 0xca6, 0xca4, 0x3, 0x2, 0x2, 0x2, 0xca6, 0xca5, 0x3, 
       0x2, 0x2, 0x2, 0xca7, 0x1b1, 0x3, 0x2, 0x2, 0x2, 0xca8, 0xcaa, 0x7, 
       0x141, 0x2, 0x2, 0xca9, 0xcab, 0x7, 0x1e1, 0x2, 0x2, 0xcaa, 0xca9, 
       0x3, 0x2, 0x2, 0x2, 0xcaa, 0xcab, 0x3, 0x2, 0x2, 0x2, 0xcab, 0xcac, 
       0x3, 0x2, 0x2, 0x2, 0xcac, 0xcb1, 0x5, 0x246, 0x124, 0x2, 0xcad, 
       0xcae, 0x7, 0x1d3, 0x2, 0x2, 0xcae, 0xcb0, 0x5, 0x246, 0x124, 0x2, 
       0xcaf, 0xcad, 0x3, 0x2, 0x2, 0x2, 0xcb0, 0xcb3, 0x3, 0x2, 0x2, 0x2, 
       0xcb1, 0xcaf, 0x3, 0x2, 0x2, 0x2, 0xcb1, 0xcb2, 0x3, 0x2, 0x2, 0x2, 
       0xcb2, 0xcb5, 0x3, 0x2, 0x2, 0x2, 0xcb3, 0xcb1, 0x3, 0x2, 0x2, 0x2, 
       0xcb4, 0xcb6, 0x7, 0x1e4, 0x2, 0x2, 0xcb5, 0xcb4, 0x3, 0x2, 0x2, 
       0x2, 0xcb5, 0xcb6, 0x3, 0x2, 0x2, 0x2, 0xcb6, 0xcb7, 0x3, 0x2, 0x2, 
       0x2, 0xcb7, 0xcb9, 0x7, 0xa1, 0x2, 0x2, 0xcb8, 0xcba, 0x7, 0x1e1, 
       0x2, 0x2, 0xcb9, 0xcb8, 0x3, 0x2, 0x2, 0x2, 0xcb9, 0xcba, 0x3, 0x2, 
       0x2, 0x2, 0xcba, 0xcbb, 0x3, 0x2, 0x2, 0x2, 0xcbb, 0xcc0, 0x5, 0x288, 
       0x145, 0x2, 0xcbc, 0xcbd, 0x7, 0x1d3, 0x2, 0x2, 0xcbd, 0xcbf, 0x5, 
       0x288, 0x145, 0x2, 0xcbe, 0xcbc, 0x3, 0x2, 0x2, 0x2, 0xcbf, 0xcc2, 
       0x3, 0x2, 0x2, 0x2, 0xcc0, 0xcbe, 0x3, 0x2, 0x2, 0x2, 0xcc0, 0xcc1, 
       0x3, 0x2, 0x2, 0x2, 0xcc1, 0xcc4, 0x3, 0x2, 0x2, 0x2, 0xcc2, 0xcc0, 
       0x3, 0x2, 0x2, 0x2, 0xcc3, 0xcc5, 0x7, 0x1e4, 0x2, 0x2, 0xcc4, 0xcc3, 
       0x3, 0x2, 0x2, 0x2, 0xcc4, 0xcc5, 0x3, 0x2, 0x2, 0x2, 0xcc5, 0x1b3, 
       0x3, 0x2, 0x2, 0x2, 0xcc6, 0xcc7, 0x7, 0x149, 0x2, 0x2, 0xcc7, 0xcc8, 
       0x5, 0x232, 0x11a, 0x2, 0xcc8, 0xcc9, 0x9, 0x34, 0x2, 0x2, 0xcc9, 
       0xcca, 0x5, 0x4, 0x3, 0x2, 0xcca, 0xccc, 0x7, 0x67, 0x2, 0x2, 0xccb, 
       0xccd, 0x9, 0x35, 0x2, 0x2, 0xccc, 0xccb, 0x3, 0x2, 0x2, 0x2, 0xccc, 
       0xccd, 0x3, 0x2, 0x2, 0x2, 0xccd, 0x1b5, 0x3, 0x2, 0x2, 0x2, 0xcce, 
       0xccf, 0x7, 0x79, 0x2, 0x2, 0xccf, 0xcd0, 0x7, 0x1f1, 0x2, 0x2, 0xcd0, 
       0xcd2, 0x7, 0x92, 0x2, 0x2, 0xcd1, 0xcd3, 0x7, 0x1e1, 0x2, 0x2, 0xcd2, 
       0xcd1, 0x3, 0x2, 0x2, 0x2, 0xcd2, 0xcd3, 0x3, 0x2, 0x2, 0x2, 0xcd3, 
       0xcd4, 0x3, 0x2, 0x2, 0x2, 0xcd4, 0xcd6, 0x5, 0x1c0, 0xe1, 0x2, 0xcd5, 
       0xcd7, 0x7, 0x1e4, 0x2, 0x2, 0xcd6, 0xcd5, 0x3, 0x2, 0x2, 0x2, 0xcd6, 
       0xcd7, 0x3, 0x2, 0x2, 0x2, 0xcd7, 0xcd8, 0x3, 0x2, 0x2, 0x2, 0xcd8, 
       0xcd9, 0x7, 0xb8, 0x2, 0x2, 0xcd9, 0xcda, 0x5, 0x4, 0x3, 0x2, 0xcda, 
       0xcdb, 0x7, 0x67, 0x2, 0x2, 0xcdb, 0xcdc, 0x7, 0xb8, 0x2, 0x2, 0xcdc, 
       0x1b7, 0x3, 0x2, 0x2, 0x2, 0xcdd, 0xcde, 0x7, 0x79, 0x2, 0x2, 0xcde, 
       0xcdf, 0x7, 0x1f1, 0x2, 0x2, 0xcdf, 0xce1, 0x7, 0x92, 0x2, 0x2, 0xce0, 
       0xce2, 0x7, 0xf6, 0x2, 0x2, 0xce1, 0xce0, 0x3, 0x2, 0x2, 0x2, 0xce1, 
       0xce2, 0x3, 0x2, 0x2, 0x2, 0xce2, 0xce3, 0x3, 0x2, 0x2, 0x2, 0xce3, 
       0xce4, 0x5, 0x246, 0x124, 0x2, 0xce4, 0xce5, 0x7, 0x1d6, 0x2, 0x2, 
       0xce5, 0xce8, 0x5, 0x246, 0x124, 0x2, 0xce6, 0xce7, 0x9, 0x36, 0x2, 
       0x2, 0xce7, 0xce9, 0x5, 0x246, 0x124, 0x2, 0xce8, 0xce6, 0x3, 0x2, 
       0x2, 0x2, 0xce8, 0xce9, 0x3, 0x2, 0x2, 0x2, 0xce9, 0xcea, 0x3, 0x2, 
       0x2, 0x2, 0xcea, 0xceb, 0x7, 0xb8, 0x2, 0x2, 0xceb, 0xcec, 0x5, 0x4, 
       0x3, 0x2, 0xcec, 0xced, 0x7, 0x67, 0x2, 0x2, 0xced, 0xcee, 0x7, 0xb8, 
       0x2, 0x2, 0xcee, 0x1b9, 0x3, 0x2, 0x2, 0x2, 0xcef, 0xcf6, 0x5, 0x1bc, 
       0xdf, 0x2, 0xcf0, 0xcf1, 0x7, 0x1dd, 0x2, 0x2, 0xcf1, 0xcf2, 0x7, 
       0x1dd, 0x2, 0x2, 0xcf2, 0xcf3, 0x7, 0x1f1, 0x2, 0x2, 0xcf3, 0xcf4, 
       0x7, 0x1db, 0x2, 0x2, 0xcf4, 0xcf6, 0x7, 0x1db, 0x2, 0x2, 0xcf5, 
       0xcef, 0x3, 0x2, 0x2, 0x2, 0xcf5, 0xcf0, 0x3, 0x2, 0x2, 0x2, 0xcf6, 
       0x1bb, 0x3, 0x2, 0x2, 0x2, 0xcf7, 0xcf9, 0x9, 0x37, 0x2, 0x2, 0xcf8, 
       0xcf7, 0x3, 0x2, 0x2, 0x2, 0xcf9, 0xcfc, 0x3, 0x2, 0x2, 0x2, 0xcfa, 
       0xcf8, 0x3, 0x2, 0x2, 0x2, 0xcfa, 0xcfb, 0x3, 0x2, 0x2, 0x2, 0xcfb, 
       0xcfd, 0x3, 0x2, 0x2, 0x2, 0xcfc, 0xcfa, 0x3, 0x2, 0x2, 0x2, 0xcfd, 
       0xcfe, 0x7, 0x1d2, 0x2, 0x2, 0xcfe, 0x1bd, 0x3, 0x2, 0x2, 0x2, 0xcff, 
       0xd00, 0x7, 0x13f, 0x2, 0x2, 0xd00, 0xd05, 0x5, 0x246, 0x124, 0x2, 
       0xd01, 0xd02, 0x7, 0x1d3, 0x2, 0x2, 0xd02, 0xd04, 0x5, 0x246, 0x124, 
       0x2, 0xd03, 0xd01, 0x3, 0x2, 0x2, 0x2, 0xd04, 0xd07, 0x3, 0x2, 0x2, 
       0x2, 0xd05, 0xd03, 0x3, 0x2, 0x2, 0x2, 0xd05, 0xd06, 0x3, 0x2, 0x2, 
       0x2, 0xd06, 0x1bf, 0x3, 0x2, 0x2, 0x2, 0xd07, 0xd05, 0x3, 0x2, 0x2, 
       0x2, 0xd08, 0xd0a, 0x5, 0x1c2, 0xe2, 0x2, 0xd09, 0xd08, 0x3, 0x2, 
       0x2, 0x2, 0xd09, 0xd0a, 0x3, 0x2, 0x2, 0x2, 0xd0a, 0xd0b, 0x3, 0x2, 
       0x2, 0x2, 0xd0b, 0xd0c, 0x5, 0x1ca, 0xe6, 0x2, 0xd0c, 0x1c1, 0x3, 
       0x2, 0x2, 0x2, 0xd0d, 0xd0e, 0x7, 0x14a, 0x2, 0x2, 0xd0e, 0xd13, 
       0x5, 0x1c4, 0xe3, 0x2, 0xd0f, 0xd10, 0x7, 0x1d3, 0x2, 0x2, 0xd10, 
       0xd12, 0x5, 0x1c4, 0xe3, 0x2, 0xd11, 0xd0f, 0x3, 0x2, 0x2, 0x2, 0xd12, 
       0xd15, 0x3, 0x2, 0x2, 0x2, 0xd13, 0xd11, 0x3, 0x2, 0x2, 0x2, 0xd13, 
       0xd14, 0x3, 0x2, 0x2, 0x2, 0xd14, 0x1c3, 0x3, 0x2, 0x2, 0x2, 0xd15, 
       0xd13, 0x3, 0x2, 0x2, 0x2, 0xd16, 0xd18, 0x5, 0x288, 0x145, 0x2, 
       0xd17, 0xd19, 0x5, 0x1c6, 0xe4, 0x2, 0xd18, 0xd17, 0x3, 0x2, 0x2, 
       0x2, 0xd18, 0xd19, 0x3, 0x2, 0x2, 0x2, 0xd19, 0xd1a, 0x3, 0x2, 0x2, 
       0x2, 0xd1a, 0xd1b, 0x7, 0xb, 0x2, 0x2, 0xd1b, 0xd1c, 0x7, 0x1e1, 
       0x2, 0x2, 0xd1c, 0xd1d, 0x5, 0x1ca, 0xe6, 0x2, 0xd1d, 0xd1e, 0x7, 
       0x1e4, 0x2, 0x2, 0xd1e, 0x1c5, 0x3, 0x2, 0x2, 0x2, 0xd1f, 0xd20, 
       0x7, 0x1e1, 0x2, 0x2, 0xd20, 0xd25, 0x5, 0x1c8, 0xe5, 0x2, 0xd21, 
       0xd22, 0x7, 0x1d3, 0x2, 0x2, 0xd22, 0xd24, 0x5, 0x1c8, 0xe5, 0x2, 
       0xd23, 0xd21, 0x3, 0x2, 0x2, 0x2, 0xd24, 0xd27, 0x3, 0x2, 0x2, 0x2, 
       0xd25, 0xd23, 0x3, 0x2, 0x2, 0x2, 0xd25, 0xd26, 0x3, 0x2, 0x2, 0x2, 
       0xd26, 0xd28, 0x3, 0x2, 0x2, 0x2, 0xd27, 0xd25, 0x3, 0x2, 0x2, 0x2, 
       0xd28, 0xd29, 0x7, 0x1e4, 0x2, 0x2, 0xd29, 0x1c7, 0x3, 0x2, 0x2, 
       0x2, 0xd2a, 0xd2b, 0x5, 0x288, 0x145, 0x2, 0xd2b, 0x1c9, 0x3, 0x2, 
       0x2, 0x2, 0xd2c, 0xd32, 0x5, 0x1cc, 0xe7, 0x2, 0xd2d, 0xd2e, 0x5, 
       0x1ce, 0xe8, 0x2, 0xd2e, 0xd2f, 0x5, 0x1cc, 0xe7, 0x2, 0xd2f, 0xd31, 
       0x3, 0x2, 0x2, 0x2, 0xd30, 0xd2d, 0x3, 0x2, 0x2, 0x2, 0xd31, 0xd34, 
       0x3, 0x2, 0x2, 0x2, 0xd32, 0xd30, 0x3, 0x2, 0x2, 0x2, 0xd32, 0xd33, 
       0x3, 0x2, 0x2, 0x2, 0xd33, 0x1cb, 0x3, 0x2, 0x2, 0x2, 0xd34, 0xd32, 
       0x3, 0x2, 0x2, 0x2, 0xd35, 0xd3b, 0x5, 0x1d0, 0xe9, 0x2, 0xd36, 0xd37, 
       0x7, 0x1e1, 0x2, 0x2, 0xd37, 0xd38, 0x5, 0x1ca, 0xe6, 0x2, 0xd38, 
       0xd39, 0x7, 0x1e4, 0x2, 0x2, 0xd39, 0xd3b, 0x3, 0x2, 0x2, 0x2, 0xd3a, 
       0xd35, 0x3, 0x2, 0x2, 0x2, 0xd3a, 0xd36, 0x3, 0x2, 0x2, 0x2, 0xd3b, 
       0x1cd, 0x3, 0x2, 0x2, 0x2, 0xd3c, 0xd3e, 0x7, 0x13a, 0x2, 0x2, 0xd3d, 
       0xd3f, 0x7, 0x5, 0x2, 0x2, 0xd3e, 0xd3d, 0x3, 0x2, 0x2, 0x2, 0xd3e, 
       0xd3f, 0x3, 0x2, 0x2, 0x2, 0xd3f, 0xd49, 0x3, 0x2, 0x2, 0x2, 0xd40, 
       0xd42, 0x7, 0x6a, 0x2, 0x2, 0xd41, 0xd43, 0x7, 0x5, 0x2, 0x2, 0xd42, 
       0xd41, 0x3, 0x2, 0x2, 0x2, 0xd42, 0xd43, 0x3, 0x2, 0x2, 0x2, 0xd43, 
       0xd49, 0x3, 0x2, 0x2, 0x2, 0xd44, 0xd46, 0x7, 0x9f, 0x2, 0x2, 0xd45, 
       0xd47, 0x7, 0x5, 0x2, 0x2, 0xd46, 0xd45, 0x3, 0x2, 0x2, 0x2, 0xd46, 
       0xd47, 0x3, 0x2, 0x2, 0x2, 0xd47, 0xd49, 0x3, 0x2, 0x2, 0x2, 0xd48, 
       0xd3c, 0x3, 0x2, 0x2, 0x2, 0xd48, 0xd40, 0x3, 0x2, 0x2, 0x2, 0xd48, 
       0xd44, 0x3, 0x2, 0x2, 0x2, 0xd49, 0x1cf, 0x3, 0x2, 0x2, 0x2, 0xd4a, 
       0xd4c, 0x5, 0x1e0, 0xf1, 0x2, 0xd4b, 0xd4a, 0x3, 0x2, 0x2, 0x2, 0xd4b, 
       0xd4c, 0x3, 0x2, 0x2, 0x2, 0xd4c, 0xd4d, 0x3, 0x2, 0x2, 0x2, 0xd4d, 
       0xd4e, 0x7, 0x108, 0x2, 0x2, 0xd4e, 0xd52, 0x5, 0x1d2, 0xea, 0x2, 
       0xd4f, 0xd51, 0x5, 0x206, 0x104, 0x2, 0xd50, 0xd4f, 0x3, 0x2, 0x2, 
       0x2, 0xd51, 0xd54, 0x3, 0x2, 0x2, 0x2, 0xd52, 0xd50, 0x3, 0x2, 0x2, 
       0x2, 0xd52, 0xd53, 0x3, 0x2, 0x2, 0x2, 0xd53, 0x1d1, 0x3, 0x2, 0x2, 
       0x2, 0xd54, 0xd52, 0x3, 0x2, 0x2, 0x2, 0xd55, 0xd57, 0x5, 0x1d4, 
       0xeb, 0x2, 0xd56, 0xd55, 0x3, 0x2, 0x2, 0x2, 0xd56, 0xd57, 0x3, 0x2, 
       0x2, 0x2, 0xd57, 0xd59, 0x3, 0x2, 0x2, 0x2, 0xd58, 0xd5a, 0x5, 0x1d6, 
       0xec, 0x2, 0xd59, 0xd58, 0x3, 0x2, 0x2, 0x2, 0xd59, 0xd5a, 0x3, 0x2, 
       0x2, 0x2, 0xd5a, 0xd5b, 0x3, 0x2, 0x2, 0x2, 0xd5b, 0xd60, 0x5, 0x1d8, 
       0xed, 0x2, 0xd5c, 0xd5d, 0x7, 0x1d3, 0x2, 0x2, 0xd5d, 0xd5f, 0x5, 
       0x1d8, 0xed, 0x2, 0xd5e, 0xd5c, 0x3, 0x2, 0x2, 0x2, 0xd5f, 0xd62, 
       0x3, 0x2, 0x2, 0x2, 0xd60, 0xd5e, 0x3, 0x2, 0x2, 0x2, 0xd60, 0xd61, 
       0x3, 0x2, 0x2, 0x2, 0xd61, 0xd64, 0x3, 0x2, 0x2, 0x2, 0xd62, 0xd60, 
       0x3, 0x2, 0x2, 0x2, 0xd63, 0xd65, 0x5, 0x1de, 0xf0, 0x2, 0xd64, 0xd63, 
       0x3, 0x2, 0x2, 0x2, 0xd64, 0xd65, 0x3, 0x2, 0x2, 0x2, 0xd65, 0x1d3, 
       0x3, 0x2, 0x2, 0x2, 0xd66, 0xd67, 0x9, 0x38, 0x2, 0x2, 0xd67, 0x1d5, 
       0x3, 0x2, 0x2, 0x2, 0xd68, 0xd69, 0x7, 0x134, 0x2, 0x2, 0xd69, 0xd6a, 
       0x5, 0x246, 0x124, 0x2, 0xd6a, 0x1d7, 0x3, 0x2, 0x2, 0x2, 0xd6b, 
       0xd6e, 0x5, 0x1da, 0xee, 0x2, 0xd6c, 0xd6e, 0x5, 0x1dc, 0xef, 0x2, 
       0xd6d, 0xd6b, 0x3, 0x2, 0x2, 0x2, 0xd6d, 0xd6c, 0x3, 0x2, 0x2, 0x2, 
       0xd6e, 0x1d9, 0x3, 0x2, 0x2, 0x2, 0xd6f, 0xd70, 0x5, 0x288, 0x145, 
       0x2, 0xd70, 0xd71, 0x7, 0x1d7, 0x2, 0x2, 0xd71, 0xd73, 0x3, 0x2, 
       0x2, 0x2, 0xd72, 0xd6f, 0x3, 0x2, 0x2, 0x2, 0xd72, 0xd73, 0x3, 0x2, 
       0x2, 0x2, 0xd73, 0xd74, 0x3, 0x2, 0x2, 0x2, 0xd74, 0xd79, 0x5, 0x232, 
       0x11a, 0x2, 0xd75, 0xd77, 0x7, 0xb, 0x2, 0x2, 0xd76, 0xd75, 0x3, 
       0x2, 0x2, 0x2, 0xd76, 0xd77, 0x3, 0x2, 0x2, 0x2, 0xd77, 0xd78, 0x3, 
       0x2, 0x2, 0x2, 0xd78, 0xd7a, 0x5, 0x246, 0x124, 0x2, 0xd79, 0xd76, 
       0x3, 0x2, 0x2, 0x2, 0xd79, 0xd7a, 0x3, 0x2, 0x2, 0x2, 0xd7a, 0x1db, 
       0x3, 0x2, 0x2, 0x2, 0xd7b, 0xd7c, 0x5, 0x288, 0x145, 0x2, 0xd7c, 
       0xd7d, 0x7, 0x1ea, 0x2, 0x2, 0xd7d, 0xd7f, 0x3, 0x2, 0x2, 0x2, 0xd7e, 
       0xd7b, 0x3, 0x2, 0x2, 0x2, 0xd7e, 0xd7f, 0x3, 0x2, 0x2, 0x2, 0xd7f, 
       0xd80, 0x3, 0x2, 0x2, 0x2, 0xd80, 0xd81, 0x7, 0x1df, 0x2, 0x2, 0xd81, 
       0x1dd, 0x3, 0x2, 0x2, 0x2, 0xd82, 0xd83, 0x7, 0x13f, 0x2, 0x2, 0xd83, 
       0xd89, 0x5, 0x246, 0x124, 0x2, 0xd84, 0xd87, 0x7, 0xb, 0x2, 0x2, 
       0xd85, 0xd88, 0x5, 0x5e, 0x30, 0x2, 0xd86, 0xd88, 0x5, 0x62, 0x32, 
       0x2, 0xd87, 0xd85, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd86, 0x3, 0x2, 0x2, 
       0x2, 0xd88, 0xd8a, 0x3, 0x2, 0x2, 0x2, 0xd89, 0xd84, 0x3, 0x2, 0x2, 
       0x2, 0xd89, 0xd8a, 0x3, 0x2, 0x2, 0x2, 0xd8a, 0x1df, 0x3, 0x2, 0x2, 
       0x2, 0xd8b, 0xd8c, 0x7, 0x7d, 0x2, 0x2, 0xd8c, 0xd90, 0x5, 0x1e2, 
       0xf2, 0x2, 0xd8d, 0xd8f, 0x5, 0x1f8, 0xfd, 0x2, 0xd8e, 0xd8d, 0x3, 
       0x2, 0x2, 0x2, 0xd8f, 0xd92, 0x3, 0x2, 0x2, 0x2, 0xd90, 0xd8e, 0x3, 
       0x2, 0x2, 0x2, 0xd90, 0xd91, 0x3, 0x2, 0x2, 0x2, 0xd91, 0x1e1, 0x3, 
       0x2, 0x2, 0x2, 0xd92, 0xd90, 0x3, 0x2, 0x2, 0x2, 0xd93, 0xd96, 0x5, 
       0x1e4, 0xf3, 0x2, 0xd94, 0xd96, 0x5, 0x1f6, 0xfc, 0x2, 0xd95, 0xd93, 
       0x3, 0x2, 0x2, 0x2, 0xd95, 0xd94, 0x3, 0x2, 0x2, 0x2, 0xd96, 0x1e3, 
       0x3, 0x2, 0x2, 0x2, 0xd97, 0xd9b, 0x5, 0x200, 0x101, 0x2, 0xd98, 
       0xd9a, 0x5, 0x1e6, 0xf4, 0x2, 0xd99, 0xd98, 0x3, 0x2, 0x2, 0x2, 0xd9a, 
       0xd9d, 0x3, 0x2, 0x2, 0x2, 0xd9b, 0xd99, 0x3, 0x2, 0x2, 0x2, 0xd9b, 
       0xd9c, 0x3, 0x2, 0x2, 0x2, 0xd9c, 0x1e5, 0x3, 0x2, 0x2, 0x2, 0xd9d, 
       0xd9b, 0x3, 0x2, 0x2, 0x2, 0xd9e, 0xda2, 0x5, 0x1ea, 0xf6, 0x2, 0xd9f, 
       0xda2, 0x5, 0x1fc, 0xff, 0x2, 0xda0, 0xda2, 0x5, 0x1e8, 0xf5, 0x2, 
       0xda1, 0xd9e, 0x3, 0x2, 0x2, 0x2, 0xda1, 0xd9f, 0x3, 0x2, 0x2, 0x2, 
       0xda1, 0xda0, 0x3, 0x2, 0x2, 0x2, 0xda2, 0x1e7, 0x3, 0x2, 0x2, 0x2, 
       0xda3, 0xda4, 0x7, 0x1a5, 0x2, 0x2, 0xda4, 0xda6, 0x7, 0x128, 0x2, 
       0x2, 0xda5, 0xda7, 0x7, 0xd8, 0x2, 0x2, 0xda6, 0xda5, 0x3, 0x2, 0x2, 
       0x2, 0xda6, 0xda7, 0x3, 0x2, 0x2, 0x2, 0xda7, 0xda8, 0x3, 0x2, 0x2, 
       0x2, 0xda8, 0xda9, 0x5, 0x288, 0x145, 0x2, 0xda9, 0xdaa, 0x7, 0x1e1, 
       0x2, 0x2, 0xdaa, 0xdaf, 0x5, 0x246, 0x124, 0x2, 0xdab, 0xdac, 0x7, 
       0x1d3, 0x2, 0x2, 0xdac, 0xdae, 0x5, 0x246, 0x124, 0x2, 0xdad, 0xdab, 
       0x3, 0x2, 0x2, 0x2, 0xdae, 0xdb1, 0x3, 0x2, 0x2, 0x2, 0xdaf, 0xdad, 
       0x3, 0x2, 0x2, 0x2, 0xdaf, 0xdb0, 0x3, 0x2, 0x2, 0x2, 0xdb0, 0xdb2, 
       0x3, 0x2, 0x2, 0x2, 0xdb1, 0xdaf, 0x3, 0x2, 0x2, 0x2, 0xdb2, 0xdb3, 
       0x7, 0x1e4, 0x2, 0x2, 0xdb3, 0xdb4, 0x5, 0x288, 0x145, 0x2, 0xdb4, 
       0xdb5, 0x7, 0xb, 0x2, 0x2, 0xdb5, 0xdb6, 0x5, 0x60, 0x31, 0x2, 0xdb6, 
       0x1e9, 0x3, 0x2, 0x2, 0x2, 0xdb7, 0xdba, 0x5, 0x1ec, 0xf7, 0x2, 0xdb8, 
       0xdba, 0x5, 0x1ee, 0xf8, 0x2, 0xdb9, 0xdb7, 0x3, 0x2, 0x2, 0x2, 0xdb9, 
       0xdb8, 0x3, 0x2, 0x2, 0x2, 0xdba, 0x1eb, 0x3, 0x2, 0x2, 0x2, 0xdbb, 
       0xdbc, 0x7, 0x1c6, 0x2, 0x2, 0xdbc, 0xdbd, 0x7, 0x1e1, 0x2, 0x2, 
       0xdbd, 0xdbe, 0x7, 0x1c7, 0x2, 0x2, 0xdbe, 0xdbf, 0x5, 0x1f2, 0xfa, 
       0x2, 0xdbf, 0xdc0, 0x7, 0xd7, 0x2, 0x2, 0xdc0, 0xdc1, 0x7, 0x1c8, 
       0x2, 0x2, 0xdc1, 0xdc4, 0x5, 0x1f2, 0xfa, 0x2, 0xdc2, 0xdc3, 0x7, 
       0xd2, 0x2, 0x2, 0xdc3, 0xdc5, 0x5, 0x246, 0x124, 0x2, 0xdc4, 0xdc2, 
       0x3, 0x2, 0x2, 0x2, 0xdc4, 0xdc5, 0x3, 0x2, 0x2, 0x2, 0xdc5, 0xdc6, 
       0x3, 0x2, 0x2, 0x2, 0xdc6, 0xdc7, 0x7, 0x1e4, 0x2, 0x2, 0xdc7, 0x1ed, 
       0x3, 0x2, 0x2, 0x2, 0xdc8, 0xdc9, 0x7, 0x1c6, 0x2, 0x2, 0xdc9, 0xdca, 
       0x7, 0x1e1, 0x2, 0x2, 0xdca, 0xdcb, 0x5, 0x1f0, 0xf9, 0x2, 0xdcb, 
       0xdcc, 0x7, 0x1e4, 0x2, 0x2, 0xdcc, 0x1ef, 0x3, 0x2, 0x2, 0x2, 0xdcd, 
       0xdd1, 0x5, 0x1f2, 0xfa, 0x2, 0xdce, 0xdd2, 0x7, 0x1c9, 0x2, 0x2, 
       0xdcf, 0xdd2, 0x5, 0x1f4, 0xfb, 0x2, 0xdd0, 0xdd2, 0x7, 0xfb, 0x2, 
       0x2, 0xdd1, 0xdce, 0x3, 0x2, 0x2, 0x2, 0xdd1, 0xdcf, 0x3, 0x2, 0x2, 
       0x2, 0xdd1, 0xdd0, 0x3, 0x2, 0x2, 0x2, 0xdd2, 0x1f1, 0x3, 0x2, 0x2, 
       0x2, 0xdd3, 0xdd6, 0x5, 0x28e, 0x148, 0x2, 0xdd4, 0xdd6, 0x5, 0x28c, 
       0x147, 0x2, 0xdd5, 0xdd3, 0x3, 0x2, 0x2, 0x2, 0xdd5, 0xdd4, 0x3, 
       0x2, 0x2, 0x2, 0xdd6, 0x1f3, 0x3, 0x2, 0x2, 0x2, 0xdd7, 0xdd8, 0x7, 
       0x1f1, 0x2, 0x2, 0xdd8, 0x1f5, 0x3, 0x2, 0x2, 0x2, 0xdd9, 0xdda, 
       0x7, 0x1e1, 0x2, 0x2, 0xdda, 0xddb, 0x5, 0x1c0, 0xe1, 0x2, 0xddb, 
       0xde0, 0x7, 0x1e4, 0x2, 0x2, 0xddc, 0xdde, 0x7, 0xb, 0x2, 0x2, 0xddd, 
       0xddc, 0x3, 0x2, 0x2, 0x2, 0xddd, 0xdde, 0x3, 0x2, 0x2, 0x2, 0xdde, 
       0xddf, 0x3, 0x2, 0x2, 0x2, 0xddf, 0xde1, 0x5, 0x246, 0x124, 0x2, 
       0xde0, 0xddd, 0x3, 0x2, 0x2, 0x2, 0xde0, 0xde1, 0x3, 0x2, 0x2, 0x2, 
       0xde1, 0x1f7, 0x3, 0x2, 0x2, 0x2, 0xde2, 0xde3, 0x7, 0x1d3, 0x2, 
       0x2, 0xde3, 0xdea, 0x5, 0x1e2, 0xf2, 0x2, 0xde4, 0xde5, 0x5, 0x1fa, 
       0xfe, 0x2, 0xde5, 0xde7, 0x5, 0x1e2, 0xf2, 0x2, 0xde6, 0xde8, 0x5, 
       0x1fe, 0x100, 0x2, 0xde7, 0xde6, 0x3, 0x2, 0x2, 0x2, 0xde7, 0xde8, 
       0x3, 0x2, 0x2, 0x2, 0xde8, 0xdea, 0x3, 0x2, 0x2, 0x2, 0xde9, 0xde2, 
       0x3, 0x2, 0x2, 0x2, 0xde9, 0xde4, 0x3, 0x2, 0x2, 0x2, 0xdea, 0x1f9, 
       0x3, 0x2, 0x2, 0x2, 0xdeb, 0xded, 0x7, 0x97, 0x2, 0x2, 0xdec, 0xdeb, 
       0x3, 0x2, 0x2, 0x2, 0xdec, 0xded, 0x3, 0x2, 0x2, 0x2, 0xded, 0xdee, 
       0x3, 0x2, 0x2, 0x2, 0xdee, 0xdfa, 0x7, 0xa6, 0x2, 0x2, 0xdef, 0xdf1, 
       0x9, 0x39, 0x2, 0x2, 0xdf0, 0xdf2, 0x7, 0xd8, 0x2, 0x2, 0xdf1, 0xdf0, 
       0x3, 0x2, 0x2, 0x2, 0xdf1, 0xdf2, 0x3, 0x2, 0x2, 0x2, 0xdf2, 0xdf3, 
       0x3, 0x2, 0x2, 0x2, 0xdf3, 0xdfa, 0x7, 0xa6, 0x2, 0x2, 0xdf4, 0xdf5, 
       0x7, 0xac, 0x2, 0x2, 0xdf5, 0xdf6, 0x7, 0x1a3, 0x2, 0x2, 0xdf6, 0xdfa, 
       0x7, 0xa6, 0x2, 0x2, 0xdf7, 0xdf8, 0x7, 0x1a4, 0x2, 0x2, 0xdf8, 0xdfa, 
       0x7, 0xa6, 0x2, 0x2, 0xdf9, 0xdec, 0x3, 0x2, 0x2, 0x2, 0xdf9, 0xdef, 
       0x3, 0x2, 0x2, 0x2, 0xdf9, 0xdf4, 0x3, 0x2, 0x2, 0x2, 0xdf9, 0xdf7, 
       0x3, 0x2, 0x2, 0x2, 0xdfa, 0x1fb, 0x3, 0x2, 0x2, 0x2, 0xdfb, 0xdfd, 
       0x7, 0xb, 0x2, 0x2, 0xdfc, 0xdfb, 0x3, 0x2, 0x2, 0x2, 0xdfc, 0xdfd, 
       0x3, 0x2, 0x2, 0x2, 0xdfd, 0xdfe, 0x3, 0x2, 0x2, 0x2, 0xdfe, 0xe09, 
       0x5, 0x246, 0x124, 0x2, 0xdff, 0xe00, 0x7, 0x1e1, 0x2, 0x2, 0xe00, 
       0xe05, 0x7, 0x1f1, 0x2, 0x2, 0xe01, 0xe02, 0x7, 0x1d3, 0x2, 0x2, 
       0xe02, 0xe04, 0x7, 0x1f1, 0x2, 0x2, 0xe03, 0xe01, 0x3, 0x2, 0x2, 
       0x2, 0xe04, 0xe07, 0x3, 0x2, 0x2, 0x2, 0xe05, 0xe03, 0x3, 0x2, 0x2, 
       0x2, 0xe05, 0xe06, 0x3, 0x2, 0x2, 0x2, 0xe06, 0xe08, 0x3, 0x2, 0x2, 
       0x2, 0xe07, 0xe05, 0x3, 0x2, 0x2, 0x2, 0xe08, 0xe0a, 0x7, 0x1e4, 
       0x2, 0x2, 0xe09, 0xdff, 0x3, 0x2, 0x2, 0x2, 0xe09, 0xe0a, 0x3, 0x2, 
       0x2, 0x2, 0xe0a, 0x1fd, 0x3, 0x2, 0x2, 0x2, 0xe0b, 0xe0c, 0x7, 0xd2, 
       0x2, 0x2, 0xe0c, 0xe15, 0x5, 0x232, 0x11a, 0x2, 0xe0d, 0xe0e, 0x7, 
       0xd2, 0x2, 0x2, 0xe0e, 0xe0f, 0x5, 0x246, 0x124, 0x2, 0xe0f, 0xe10, 
       0x7, 0xa3, 0x2, 0x2, 0xe10, 0xe11, 0x7, 0x58, 0x2, 0x2, 0xe11, 0xe12, 
       0x7, 0x7d, 0x2, 0x2, 0xe12, 0xe13, 0x5, 0x246, 0x124, 0x2, 0xe13, 
       0xe15, 0x3, 0x2, 0x2, 0x2, 0xe14, 0xe0b, 0x3, 0x2, 0x2, 0x2, 0xe14, 
       0xe0d, 0x3, 0x2, 0x2, 0x2, 0xe15, 0x1ff, 0x3, 0x2, 0x2, 0x2, 0xe16, 
       0xe17, 0x5, 0x288, 0x145, 0x2, 0xe17, 0x201, 0x3, 0x2, 0x2, 0x2, 
       0xe18, 0xe19, 0x5, 0x288, 0x145, 0x2, 0xe19, 0x203, 0x3, 0x2, 0x2, 
       0x2, 0xe1a, 0xe1b, 0x5, 0x288, 0x145, 0x2, 0xe1b, 0x205, 0x3, 0x2, 
       0x2, 0x2, 0xe1c, 0xe25, 0x5, 0x1e0, 0xf1, 0x2, 0xe1d, 0xe25, 0x5, 
       0x20a, 0x106, 0x2, 0xe1e, 0xe25, 0x5, 0x20c, 0x107, 0x2, 0xe1f, 0xe25, 
       0x5, 0x20e, 0x108, 0x2, 0xe20, 0xe25, 0x5, 0x212, 0x10a, 0x2, 0xe21, 
       0xe25, 0x5, 0x21a, 0x10e, 0x2, 0xe22, 0xe25, 0x5, 0x210, 0x109, 0x2, 
       0xe23, 0xe25, 0x5, 0x208, 0x105, 0x2, 0xe24, 0xe1c, 0x3, 0x2, 0x2, 
       0x2, 0xe24, 0xe1d, 0x3, 0x2, 0x2, 0x2, 0xe24, 0xe1e, 0x3, 0x2, 0x2, 
       0x2, 0xe24, 0xe1f, 0x3, 0x2, 0x2, 0x2, 0xe24, 0xe20, 0x3, 0x2, 0x2, 
       0x2, 0xe24, 0xe21, 0x3, 0x2, 0x2, 0x2, 0xe24, 0xe22, 0x3, 0x2, 0x2, 
       0x2, 0xe24, 0xe23, 0x3, 0x2, 0x2, 0x2, 0xe25, 0x207, 0x3, 0x2, 0x2, 
       0x2, 0xe26, 0xe27, 0x7, 0x1ca, 0x2, 0x2, 0xe27, 0xe28, 0x5, 0x288, 
       0x145, 0x2, 0xe28, 0xe29, 0x5, 0x260, 0x131, 0x2, 0xe29, 0x209, 0x3, 
       0x2, 0x2, 0x2, 0xe2a, 0xe2b, 0x7, 0x148, 0x2, 0x2, 0xe2b, 0xe2c, 
       0x5, 0x232, 0x11a, 0x2, 0xe2c, 0x20b, 0x3, 0x2, 0x2, 0x2, 0xe2d, 
       0xe2e, 0x7, 0x85, 0x2, 0x2, 0xe2e, 0xe2f, 0x7, 0x1b, 0x2, 0x2, 0xe2f, 
       0xe34, 0x5, 0x246, 0x124, 0x2, 0xe30, 0xe31, 0x7, 0x1d3, 0x2, 0x2, 
       0xe31, 0xe33, 0x5, 0x246, 0x124, 0x2, 0xe32, 0xe30, 0x3, 0x2, 0x2, 
       0x2, 0xe33, 0xe36, 0x3, 0x2, 0x2, 0x2, 0xe34, 0xe32, 0x3, 0x2, 0x2, 
       0x2, 0xe34, 0xe35, 0x3, 0x2, 0x2, 0x2, 0xe35, 0x20d, 0x3, 0x2, 0x2, 
       0x2, 0xe36, 0xe34, 0x3, 0x2, 0x2, 0x2, 0xe37, 0xe38, 0x7, 0x8a, 0x2, 
       0x2, 0xe38, 0xe39, 0x5, 0x232, 0x11a, 0x2, 0xe39, 0x20f, 0x3, 0x2, 
       0x2, 0x2, 0xe3a, 0xe3d, 0x7, 0xae, 0x2, 0x2, 0xe3b, 0xe3c, 0x7, 0x1d3, 
       0x2, 0x2, 0xe3c, 0xe3e, 0x7, 0x1f4, 0x2, 0x2, 0xe3d, 0xe3b, 0x3, 
       0x2, 0x2, 0x2, 0xe3d, 0xe3e, 0x3, 0x2, 0x2, 0x2, 0xe3e, 0xe3f, 0x3, 
       0x2, 0x2, 0x2, 0xe3f, 0xe40, 0x7, 0x1f4, 0x2, 0x2, 0xe40, 0x211, 
       0x3, 0x2, 0x2, 0x2, 0xe41, 0xe42, 0x9, 0x3a, 0x2, 0x2, 0xe42, 0xe43, 
       0x7, 0x1b, 0x2, 0x2, 0xe43, 0xe44, 0x5, 0x246, 0x124, 0x2, 0xe44, 
       0xe4b, 0x5, 0x214, 0x10b, 0x2, 0xe45, 0xe46, 0x7, 0x1d3, 0x2, 0x2, 
       0xe46, 0xe47, 0x5, 0x246, 0x124, 0x2, 0xe47, 0xe48, 0x5, 0x214, 0x10b, 
       0x2, 0xe48, 0xe4a, 0x3, 0x2, 0x2, 0x2, 0xe49, 0xe45, 0x3, 0x2, 0x2, 
       0x2, 0xe4a, 0xe4d, 0x3, 0x2, 0x2, 0x2, 0xe4b, 0xe49, 0x3, 0x2, 0x2, 
       0x2, 0xe4b, 0xe4c, 0x3, 0x2, 0x2, 0x2, 0xe4c, 0x213, 0x3, 0x2, 0x2, 
       0x2, 0xe4d, 0xe4b, 0x3, 0x2, 0x2, 0x2, 0xe4e, 0xe50, 0x5, 0x216, 
       0x10c, 0x2, 0xe4f, 0xe4e, 0x3, 0x2, 0x2, 0x2, 0xe4f, 0xe50, 0x3, 
       0x2, 0x2, 0x2, 0xe50, 0xe52, 0x3, 0x2, 0x2, 0x2, 0xe51, 0xe53, 0x5, 
       0x218, 0x10d, 0x2, 0xe52, 0xe51, 0x3, 0x2, 0x2, 0x2, 0xe52, 0xe53, 
       0x3, 0x2, 0x2, 0x2, 0xe53, 0x215, 0x3, 0x2, 0x2, 0x2, 0xe54, 0xe55, 
       0x9, 0xd, 0x2, 0x2, 0xe55, 0x217, 0x3, 0x2, 0x2, 0x2, 0xe56, 0xe57, 
       0x7, 0x199, 0x2, 0x2, 0xe57, 0xe5b, 0x7, 0x197, 0x2, 0x2, 0xe58, 
       0xe59, 0x7, 0x199, 0x2, 0x2, 0xe59, 0xe5b, 0x7, 0x198, 0x2, 0x2, 
       0xe5a, 0xe56, 0x3, 0x2, 0x2, 0x2, 0xe5a, 0xe58, 0x3, 0x2, 0x2, 0x2, 
       0xe5b, 0x219, 0x3, 0x2, 0x2, 0x2, 0xe5c, 0xe5d, 0x7, 0x29, 0x2, 0x2, 
       0xe5d, 0xe5e, 0x7, 0x1b, 0x2, 0x2, 0xe5e, 0xe63, 0x5, 0x246, 0x124, 
       0x2, 0xe5f, 0xe60, 0x7, 0x1d3, 0x2, 0x2, 0xe60, 0xe62, 0x5, 0x246, 
       0x124, 0x2, 0xe61, 0xe5f, 0x3, 0x2, 0x2, 0x2, 0xe62, 0xe65, 0x3, 
       0x2, 0x2, 0x2, 0xe63, 0xe61, 0x3, 0x2, 0x2, 0x2, 0xe63, 0xe64, 0x3, 
       0x2, 0x2, 0x2, 0xe64, 0xe75, 0x3, 0x2, 0x2, 0x2, 0xe65, 0xe63, 0x3, 
       0x2, 0x2, 0x2, 0xe66, 0xe67, 0x9, 0x3b, 0x2, 0x2, 0xe67, 0xe68, 0x7, 
       0x1b, 0x2, 0x2, 0xe68, 0xe6d, 0x5, 0x246, 0x124, 0x2, 0xe69, 0xe6a, 
       0x7, 0x1d3, 0x2, 0x2, 0xe6a, 0xe6c, 0x5, 0x246, 0x124, 0x2, 0xe6b, 
       0xe69, 0x3, 0x2, 0x2, 0x2, 0xe6c, 0xe6f, 0x3, 0x2, 0x2, 0x2, 0xe6d, 
       0xe6b, 0x3, 0x2, 0x2, 0x2, 0xe6d, 0xe6e, 0x3, 0x2, 0x2, 0x2, 0xe6e, 
       0xe71, 0x3, 0x2, 0x2, 0x2, 0xe6f, 0xe6d, 0x3, 0x2, 0x2, 0x2, 0xe70, 
       0xe66, 0x3, 0x2, 0x2, 0x2, 0xe71, 0xe72, 0x3, 0x2, 0x2, 0x2, 0xe72, 
       0xe70, 0x3, 0x2, 0x2, 0x2, 0xe72, 0xe73, 0x3, 0x2, 0x2, 0x2, 0xe73, 
       0xe75, 0x3, 0x2, 0x2, 0x2, 0xe74, 0xe5c, 0x3, 0x2, 0x2, 0x2, 0xe74, 
       0xe70, 0x3, 0x2, 0x2, 0x2, 0xe75, 0x21b, 0x3, 0x2, 0x2, 0x2, 0xe76, 
       0xe77, 0x7, 0x13c, 0x2, 0x2, 0xe77, 0xe78, 0x5, 0x200, 0x101, 0x2, 
       0xe78, 0xe79, 0x7, 0x109, 0x2, 0x2, 0xe79, 0xe7b, 0x5, 0x21e, 0x110, 
       0x2, 0xe7a, 0xe7c, 0x5, 0x20a, 0x106, 0x2, 0xe7b, 0xe7a, 0x3, 0x2, 
       0x2, 0x2, 0xe7b, 0xe7c, 0x3, 0x2, 0x2, 0x2, 0xe7c, 0xe7e, 0x3, 0x2, 
       0x2, 0x2, 0xe7d, 0xe7f, 0x5, 0x220, 0x111, 0x2, 0xe7e, 0xe7d, 0x3, 
       0x2, 0x2, 0x2, 0xe7e, 0xe7f, 0x3, 0x2, 0x2, 0x2, 0xe7f, 0x21d, 0x3, 
       0x2, 0x2, 0x2, 0xe80, 0xe85, 0x5, 0x1a, 0xe, 0x2, 0xe81, 0xe82, 0x7, 
       0x1d3, 0x2, 0x2, 0xe82, 0xe84, 0x5, 0x1a, 0xe, 0x2, 0xe83, 0xe81, 
       0x3, 0x2, 0x2, 0x2, 0xe84, 0xe87, 0x3, 0x2, 0x2, 0x2, 0xe85, 0xe83, 
       0x3, 0x2, 0x2, 0x2, 0xe85, 0xe86, 0x3, 0x2, 0x2, 0x2, 0xe86, 0x21f, 
       0x3, 0x2, 0x2, 0x2, 0xe87, 0xe85, 0x3, 0x2, 0x2, 0x2, 0xe88, 0xe89, 
       0x7, 0x5e, 0x2, 0x2, 0xe89, 0xe8a, 0x5, 0x14c, 0xa7, 0x2, 0xe8a, 
       0x221, 0x3, 0x2, 0x2, 0x2, 0xe8b, 0xe8c, 0x7, 0xbd, 0x2, 0x2, 0xe8c, 
       0xe8d, 0x7, 0xa1, 0x2, 0x2, 0xe8d, 0xe8f, 0x5, 0x224, 0x113, 0x2, 
       0xe8e, 0xe90, 0x7, 0xb, 0x2, 0x2, 0xe8f, 0xe8e, 0x3, 0x2, 0x2, 0x2, 
       0xe8f, 0xe90, 0x3, 0x2, 0x2, 0x2, 0xe90, 0xe91, 0x3, 0x2, 0x2, 0x2, 
       0xe91, 0xe92, 0x7, 0x160, 0x2, 0x2, 0xe92, 0xe93, 0x7, 0x13f, 0x2, 
       0x2, 0xe93, 0xe95, 0x5, 0x246, 0x124, 0x2, 0xe94, 0xe96, 0x7, 0xb, 
       0x2, 0x2, 0xe95, 0xe94, 0x3, 0x2, 0x2, 0x2, 0xe95, 0xe96, 0x3, 0x2, 
       0x2, 0x2, 0xe96, 0xe97, 0x3, 0x2, 0x2, 0x2, 0xe97, 0xe98, 0x7, 0x161, 
       0x2, 0x2, 0xe98, 0xe99, 0x7, 0xd2, 0x2, 0x2, 0xe99, 0xe9b, 0x5, 0x232, 
       0x11a, 0x2, 0xe9a, 0xe9c, 0x5, 0x226, 0x114, 0x2, 0xe9b, 0xe9a, 0x3, 
       0x2, 0x2, 0x2, 0xe9c, 0xe9d, 0x3, 0x2, 0x2, 0x2, 0xe9d, 0xe9b, 0x3, 
       0x2, 0x2, 0x2, 0xe9d, 0xe9e, 0x3, 0x2, 0x2, 0x2, 0xe9e, 0x223, 0x3, 
       0x2, 0x2, 0x2, 0xe9f, 0xea5, 0x5, 0x200, 0x101, 0x2, 0xea0, 0xea1, 
       0x7, 0x1e1, 0x2, 0x2, 0xea1, 0xea2, 0x5, 0x1c0, 0xe1, 0x2, 0xea2, 
       0xea3, 0x7, 0x1e4, 0x2, 0x2, 0xea3, 0xea5, 0x3, 0x2, 0x2, 0x2, 0xea4, 
       0xe9f, 0x3, 0x2, 0x2, 0x2, 0xea4, 0xea0, 0x3, 0x2, 0x2, 0x2, 0xea5, 
       0xeaa, 0x3, 0x2, 0x2, 0x2, 0xea6, 0xea8, 0x7, 0xb, 0x2, 0x2, 0xea7, 
       0xea6, 0x3, 0x2, 0x2, 0x2, 0xea7, 0xea8, 0x3, 0x2, 0x2, 0x2, 0xea8, 
       0xea9, 0x3, 0x2, 0x2, 0x2, 0xea9, 0xeab, 0x5, 0x288, 0x145, 0x2, 
       0xeaa, 0xea7, 0x3, 0x2, 0x2, 0x2, 0xeaa, 0xeab, 0x3, 0x2, 0x2, 0x2, 
       0xeab, 0x225, 0x3, 0x2, 0x2, 0x2, 0xeac, 0xeae, 0x7, 0x147, 0x2, 
       0x2, 0xead, 0xeaf, 0x7, 0xcb, 0x2, 0x2, 0xeae, 0xead, 0x3, 0x2, 0x2, 
       0x2, 0xeae, 0xeaf, 0x3, 0x2, 0x2, 0x2, 0xeaf, 0xeb0, 0x3, 0x2, 0x2, 
       0x2, 0xeb0, 0xeb3, 0x7, 0xba, 0x2, 0x2, 0xeb1, 0xeb2, 0x7, 0x8, 0x2, 
       0x2, 0xeb2, 0xeb4, 0x5, 0x232, 0x11a, 0x2, 0xeb3, 0xeb1, 0x3, 0x2, 
       0x2, 0x2, 0xeb3, 0xeb4, 0x3, 0x2, 0x2, 0x2, 0xeb4, 0xeb5, 0x3, 0x2, 
       0x2, 0x2, 0xeb5, 0xeb6, 0x7, 0x12f, 0x2, 0x2, 0xeb6, 0xeba, 0x5, 
       0x228, 0x115, 0x2, 0xeb7, 0xeb8, 0x7, 0x5e, 0x2, 0x2, 0xeb8, 0xeba, 
       0x7, 0x90, 0x2, 0x2, 0xeb9, 0xeac, 0x3, 0x2, 0x2, 0x2, 0xeb9, 0xeb7, 
       0x3, 0x2, 0x2, 0x2, 0xeba, 0x227, 0x3, 0x2, 0x2, 0x2, 0xebb, 0xebd, 
       0x7, 0x99, 0x2, 0x2, 0xebc, 0xebe, 0x5, 0x158, 0xad, 0x2, 0xebd, 
       0xebc, 0x3, 0x2, 0x2, 0x2, 0xebd, 0xebe, 0x3, 0x2, 0x2, 0x2, 0xebe, 
       0xebf, 0x3, 0x2, 0x2, 0x2, 0xebf, 0xec0, 0x7, 0x141, 0x2, 0x2, 0xec0, 
       0xed0, 0x5, 0x15c, 0xaf, 0x2, 0xec1, 0xec2, 0x7, 0x13c, 0x2, 0x2, 
       0xec2, 0xec3, 0x7, 0x109, 0x2, 0x2, 0xec3, 0xec8, 0x5, 0x1a, 0xe, 
       0x2, 0xec4, 0xec5, 0x7, 0x1d3, 0x2, 0x2, 0xec5, 0xec7, 0x5, 0x1a, 
       0xe, 0x2, 0xec6, 0xec4, 0x3, 0x2, 0x2, 0x2, 0xec7, 0xeca, 0x3, 0x2, 
       0x2, 0x2, 0xec8, 0xec6, 0x3, 0x2, 0x2, 0x2, 0xec8, 0xec9, 0x3, 0x2, 
       0x2, 0x2, 0xec9, 0xecc, 0x3, 0x2, 0x2, 0x2, 0xeca, 0xec8, 0x3, 0x2, 
       0x2, 0x2, 0xecb, 0xecd, 0x5, 0x20a, 0x106, 0x2, 0xecc, 0xecb, 0x3, 
       0x2, 0x2, 0x2, 0xecc, 0xecd, 0x3, 0x2, 0x2, 0x2, 0xecd, 0xed0, 0x3, 
       0x2, 0x2, 0x2, 0xece, 0xed0, 0x7, 0x50, 0x2, 0x2, 0xecf, 0xebb, 0x3, 
       0x2, 0x2, 0x2, 0xecf, 0xec1, 0x3, 0x2, 0x2, 0x2, 0xecf, 0xece, 0x3, 
       0x2, 0x2, 0x2, 0xed0, 0x229, 0x3, 0x2, 0x2, 0x2, 0xed1, 0xed2, 0x7, 
       0x1b6, 0x2, 0x2, 0xed2, 0xed3, 0x7, 0x126, 0x2, 0x2, 0xed3, 0xed5, 
       0x5, 0x200, 0x101, 0x2, 0xed4, 0xed6, 0x5, 0x1ac, 0xd7, 0x2, 0xed5, 
       0xed4, 0x3, 0x2, 0x2, 0x2, 0xed5, 0xed6, 0x3, 0x2, 0x2, 0x2, 0xed6, 
       0xed7, 0x3, 0x2, 0x2, 0x2, 0xed7, 0xed8, 0x7, 0x1b1, 0x2, 0x2, 0xed8, 
       0xedb, 0x7, 0x11b, 0x2, 0x2, 0xed9, 0xeda, 0x7, 0x79, 0x2, 0x2, 0xeda, 
       0xedc, 0x7, 0x196, 0x2, 0x2, 0xedb, 0xed9, 0x3, 0x2, 0x2, 0x2, 0xedb, 
       0xedc, 0x3, 0x2, 0x2, 0x2, 0xedc, 0xedf, 0x3, 0x2, 0x2, 0x2, 0xedd, 
       0xede, 0x7, 0x1b2, 0x2, 0x2, 0xede, 0xee0, 0x7, 0x1b3, 0x2, 0x2, 
       0xedf, 0xedd, 0x3, 0x2, 0x2, 0x2, 0xedf, 0xee0, 0x3, 0x2, 0x2, 0x2, 
       0xee0, 0xee2, 0x3, 0x2, 0x2, 0x2, 0xee1, 0xee3, 0x7, 0x1b4, 0x2, 
       0x2, 0xee2, 0xee1, 0x3, 0x2, 0x2, 0x2, 0xee2, 0xee3, 0x3, 0x2, 0x2, 
       0x2, 0xee3, 0x22b, 0x3, 0x2, 0x2, 0x2, 0xee4, 0xee6, 0x7, 0x50, 0x2, 
       0x2, 0xee5, 0xee7, 0x7, 0x7d, 0x2, 0x2, 0xee6, 0xee5, 0x3, 0x2, 0x2, 
       0x2, 0xee6, 0xee7, 0x3, 0x2, 0x2, 0x2, 0xee7, 0xee8, 0x3, 0x2, 0x2, 
       0x2, 0xee8, 0xeea, 0x5, 0x200, 0x101, 0x2, 0xee9, 0xeeb, 0x5, 0x22e, 
       0x118, 0x2, 0xeea, 0xee9, 0x3, 0x2, 0x2, 0x2, 0xeea, 0xeeb, 0x3, 
       0x2, 0x2, 0x2, 0xeeb, 0xeee, 0x3, 0x2, 0x2, 0x2, 0xeec, 0xeef, 0x5, 
       0x20a, 0x106, 0x2, 0xeed, 0xeef, 0x7, 0x5, 0x2, 0x2, 0xeee, 0xeec, 
       0x3, 0x2, 0x2, 0x2, 0xeee, 0xeed, 0x3, 0x2, 0x2, 0x2, 0xeee, 0xeef, 
       0x3, 0x2, 0x2, 0x2, 0xeef, 0x22d, 0x3, 0x2, 0x2, 0x2, 0xef0, 0xef2, 
       0x7, 0xb, 0x2, 0x2, 0xef1, 0xef0, 0x3, 0x2, 0x2, 0x2, 0xef1, 0xef2, 
       0x3, 0x2, 0x2, 0x2, 0xef2, 0xef3, 0x3, 0x2, 0x2, 0x2, 0xef3, 0xef4, 
       0x5, 0x288, 0x145, 0x2, 0xef4, 0x22f, 0x3, 0x2, 0x2, 0x2, 0xef5, 
       0xef6, 0x7, 0x54, 0x2, 0x2, 0xef6, 0xef8, 0x9, 0x1c, 0x2, 0x2, 0xef7, 
       0xef9, 0x7, 0x1a1, 0x2, 0x2, 0xef8, 0xef7, 0x3, 0x2, 0x2, 0x2, 0xef8, 
       0xef9, 0x3, 0x2, 0x2, 0x2, 0xef9, 0xefa, 0x3, 0x2, 0x2, 0x2, 0xefa, 
       0xf07, 0x5, 0x204, 0x103, 0x2, 0xefb, 0xefd, 0x7, 0x54, 0x2, 0x2, 
       0xefc, 0xefe, 0x9, 0x3c, 0x2, 0x2, 0xefd, 0xefc, 0x3, 0x2, 0x2, 0x2, 
       0xefd, 0xefe, 0x3, 0x2, 0x2, 0x2, 0xefe, 0xeff, 0x3, 0x2, 0x2, 0x2, 
       0xeff, 0xf01, 0x5, 0x288, 0x145, 0x2, 0xf00, 0xf02, 0x5, 0x52, 0x2a, 
       0x2, 0xf01, 0xf00, 0x3, 0x2, 0x2, 0x2, 0xf01, 0xf02, 0x3, 0x2, 0x2, 
       0x2, 0xf02, 0xf04, 0x3, 0x2, 0x2, 0x2, 0xf03, 0xf05, 0x5, 0x1ac, 
       0xd7, 0x2, 0xf04, 0xf03, 0x3, 0x2, 0x2, 0x2, 0xf04, 0xf05, 0x3, 0x2, 
       0x2, 0x2, 0xf05, 0xf07, 0x3, 0x2, 0x2, 0x2, 0xf06, 0xef5, 0x3, 0x2, 
       0x2, 0x2, 0xf06, 0xefb, 0x3, 0x2, 0x2, 0x2, 0xf07, 0x231, 0x3, 0x2, 
       0x2, 0x2, 0xf08, 0xf0a, 0x8, 0x11a, 0x1, 0x2, 0xf09, 0xf0b, 0x7, 
       0xcb, 0x2, 0x2, 0xf0a, 0xf09, 0x3, 0x2, 0x2, 0x2, 0xf0a, 0xf0b, 0x3, 
       0x2, 0x2, 0x2, 0xf0b, 0xf0c, 0x3, 0x2, 0x2, 0x2, 0xf0c, 0xf0d, 0x7, 
       0x1e1, 0x2, 0x2, 0xf0d, 0xf0e, 0x5, 0x232, 0x11a, 0x2, 0xf0e, 0xf0f, 
       0x7, 0x1e4, 0x2, 0x2, 0xf0f, 0xf12, 0x3, 0x2, 0x2, 0x2, 0xf10, 0xf12, 
       0x5, 0x234, 0x11b, 0x2, 0xf11, 0xf08, 0x3, 0x2, 0x2, 0x2, 0xf11, 
       0xf10, 0x3, 0x2, 0x2, 0x2, 0xf12, 0xf19, 0x3, 0x2, 0x2, 0x2, 0xf13, 
       0xf14, 0xc, 0x4, 0x2, 0x2, 0xf14, 0xf15, 0x5, 0x242, 0x122, 0x2, 
       0xf15, 0xf16, 0x5, 0x232, 0x11a, 0x5, 0xf16, 0xf18, 0x3, 0x2, 0x2, 
       0x2, 0xf17, 0xf13, 0x3, 0x2, 0x2, 0x2, 0xf18, 0xf1b, 0x3, 0x2, 0x2, 
       0x2, 0xf19, 0xf17, 0x3, 0x2, 0x2, 0x2, 0xf19, 0xf1a, 0x3, 0x2, 0x2, 
       0x2, 0xf1a, 0x233, 0x3, 0x2, 0x2, 0x2, 0xf1b, 0xf19, 0x3, 0x2, 0x2, 
       0x2, 0xf1c, 0xf20, 0x5, 0x236, 0x11c, 0x2, 0xf1d, 0xf20, 0x5, 0x240, 
       0x121, 0x2, 0xf1e, 0xf20, 0x5, 0x246, 0x124, 0x2, 0xf1f, 0xf1c, 0x3, 
       0x2, 0x2, 0x2, 0xf1f, 0xf1d, 0x3, 0x2, 0x2, 0x2, 0xf1f, 0xf1e, 0x3, 
       0x2, 0x2, 0x2, 0xf20, 0x235, 0x3, 0x2, 0x2, 0x2, 0xf21, 0xf22, 0x5, 
       0x246, 0x124, 0x2, 0xf22, 0xf24, 0x7, 0xa3, 0x2, 0x2, 0xf23, 0xf25, 
       0x7, 0xcb, 0x2, 0x2, 0xf24, 0xf23, 0x3, 0x2, 0x2, 0x2, 0xf24, 0xf25, 
       0x3, 0x2, 0x2, 0x2, 0xf25, 0xf26, 0x3, 0x2, 0x2, 0x2, 0xf26, 0xf27, 
       0x7, 0xcd, 0x2, 0x2, 0xf27, 0xf39, 0x3, 0x2, 0x2, 0x2, 0xf28, 0xf29, 
       0x5, 0x246, 0x124, 0x2, 0xf29, 0xf2a, 0x7, 0x13, 0x2, 0x2, 0xf2a, 
       0xf2b, 0x5, 0x246, 0x124, 0x2, 0xf2b, 0xf2c, 0x7, 0x8, 0x2, 0x2, 
       0xf2c, 0xf2d, 0x5, 0x246, 0x124, 0x2, 0xf2d, 0xf39, 0x3, 0x2, 0x2, 
       0x2, 0xf2e, 0xf30, 0x7, 0xcb, 0x2, 0x2, 0xf2f, 0xf2e, 0x3, 0x2, 0x2, 
       0x2, 0xf2f, 0xf30, 0x3, 0x2, 0x2, 0x2, 0xf30, 0xf31, 0x3, 0x2, 0x2, 
       0x2, 0xf31, 0xf32, 0x7, 0x6f, 0x2, 0x2, 0xf32, 0xf33, 0x7, 0x1e1, 
       0x2, 0x2, 0xf33, 0xf34, 0x5, 0x1c0, 0xe1, 0x2, 0xf34, 0xf35, 0x7, 
       0x1e4, 0x2, 0x2, 0xf35, 0xf39, 0x3, 0x2, 0x2, 0x2, 0xf36, 0xf39, 
       0x5, 0x238, 0x11d, 0x2, 0xf37, 0xf39, 0x5, 0x23a, 0x11e, 0x2, 0xf38, 
       0xf21, 0x3, 0x2, 0x2, 0x2, 0xf38, 0xf28, 0x3, 0x2, 0x2, 0x2, 0xf38, 
       0xf2f, 0x3, 0x2, 0x2, 0x2, 0xf38, 0xf36, 0x3, 0x2, 0x2, 0x2, 0xf38, 
       0xf37, 0x3, 0x2, 0x2, 0x2, 0xf39, 0x237, 0x3, 0x2, 0x2, 0x2, 0xf3a, 
       0xf3c, 0x5, 0x246, 0x124, 0x2, 0xf3b, 0xf3d, 0x7, 0xcb, 0x2, 0x2, 
       0xf3c, 0xf3b, 0x3, 0x2, 0x2, 0x2, 0xf3c, 0xf3d, 0x3, 0x2, 0x2, 0x2, 
       0xf3d, 0xf3e, 0x3, 0x2, 0x2, 0x2, 0xf3e, 0xf3f, 0x7, 0x92, 0x2, 0x2, 
       0xf3f, 0xf49, 0x7, 0x1e1, 0x2, 0x2, 0xf40, 0xf45, 0x5, 0x246, 0x124, 
       0x2, 0xf41, 0xf42, 0x7, 0x1d3, 0x2, 0x2, 0xf42, 0xf44, 0x5, 0x246, 
       0x124, 0x2, 0xf43, 0xf41, 0x3, 0x2, 0x2, 0x2, 0xf44, 0xf47, 0x3, 
       0x2, 0x2, 0x2, 0xf45, 0xf43, 0x3, 0x2, 0x2, 0x2, 0xf45, 0xf46, 0x3, 
       0x2, 0x2, 0x2, 0xf46, 0xf4a, 0x3, 0x2, 0x2, 0x2, 0xf47, 0xf45, 0x3, 
       0x2, 0x2, 0x2, 0xf48, 0xf4a, 0x5, 0x1c0, 0xe1, 0x2, 0xf49, 0xf40, 
       0x3, 0x2, 0x2, 0x2, 0xf49, 0xf48, 0x3, 0x2, 0x2, 0x2, 0xf4a, 0xf4b, 
       0x3, 0x2, 0x2, 0x2, 0xf4b, 0xf4c, 0x7, 0x1e4, 0x2, 0x2, 0xf4c, 0x239, 
       0x3, 0x2, 0x2, 0x2, 0xf4d, 0xf4f, 0x5, 0x23c, 0x11f, 0x2, 0xf4e, 
       0xf50, 0x7, 0xcb, 0x2, 0x2, 0xf4f, 0xf4e, 0x3, 0x2, 0x2, 0x2, 0xf4f, 
       0xf50, 0x3, 0x2, 0x2, 0x2, 0xf50, 0xf51, 0x3, 0x2, 0x2, 0x2, 0xf51, 
       0xf52, 0x7, 0x92, 0x2, 0x2, 0xf52, 0xf5c, 0x7, 0x1e1, 0x2, 0x2, 0xf53, 
       0xf58, 0x5, 0x23c, 0x11f, 0x2, 0xf54, 0xf55, 0x7, 0x1d3, 0x2, 0x2, 
       0xf55, 0xf57, 0x5, 0x23c, 0x11f, 0x2, 0xf56, 0xf54, 0x3, 0x2, 0x2, 
       0x2, 0xf57, 0xf5a, 0x3, 0x2, 0x2, 0x2, 0xf58, 0xf56, 0x3, 0x2, 0x2, 
       0x2, 0xf58, 0xf59, 0x3, 0x2, 0x2, 0x2, 0xf59, 0xf5d, 0x3, 0x2, 0x2, 
       0x2, 0xf5a, 0xf58, 0x3, 0x2, 0x2, 0x2, 0xf5b, 0xf5d, 0x5, 0x1c0, 
       0xe1, 0x2, 0xf5c, 0xf53, 0x3, 0x2, 0x2, 0x2, 0xf5c, 0xf5b, 0x3, 0x2, 
       0x2, 0x2, 0xf5d, 0xf5e, 0x3, 0x2, 0x2, 0x2, 0xf5e, 0xf5f, 0x7, 0x1e4, 
       0x2, 0x2, 0xf5f, 0x23b, 0x3, 0x2, 0x2, 0x2, 0xf60, 0xf61, 0x7, 0x1e1, 
       0x2, 0x2, 0xf61, 0xf62, 0x5, 0x23e, 0x120, 0x2, 0xf62, 0xf63, 0x7, 
       0x1e4, 0x2, 0x2, 0xf63, 0x23d, 0x3, 0x2, 0x2, 0x2, 0xf64, 0xf69, 
       0x5, 0x246, 0x124, 0x2, 0xf65, 0xf66, 0x7, 0x1d3, 0x2, 0x2, 0xf66, 
       0xf68, 0x5, 0x246, 0x124, 0x2, 0xf67, 0xf65, 0x3, 0x2, 0x2, 0x2, 
       0xf68, 0xf6b, 0x3, 0x2, 0x2, 0x2, 0xf69, 0xf67, 0x3, 0x2, 0x2, 0x2, 
       0xf69, 0xf6a, 0x3, 0x2, 0x2, 0x2, 0xf6a, 0x23f, 0x3, 0x2, 0x2, 0x2, 
       0xf6b, 0xf69, 0x3, 0x2, 0x2, 0x2, 0xf6c, 0xf6d, 0x5, 0x246, 0x124, 
       0x2, 0xf6d, 0xf6e, 0x5, 0x244, 0x123, 0x2, 0xf6e, 0xf6f, 0x5, 0x246, 
       0x124, 0x2, 0xf6f, 0x241, 0x3, 0x2, 0x2, 0x2, 0xf70, 0xf71, 0x9, 
       0x3d, 0x2, 0x2, 0xf71, 0x243, 0x3, 0x2, 0x2, 0x2, 0xf72, 0xf7f, 0x7, 
       0x1d7, 0x2, 0x2, 0xf73, 0xf7f, 0x7, 0x1d8, 0x2, 0x2, 0xf74, 0xf7f, 
       0x7, 0x1d9, 0x2, 0x2, 0xf75, 0xf7f, 0x7, 0x1da, 0x2, 0x2, 0xf76, 
       0xf7f, 0x7, 0x1dd, 0x2, 0x2, 0xf77, 0xf7f, 0x7, 0x1de, 0x2, 0x2, 
       0xf78, 0xf7f, 0x7, 0x1db, 0x2, 0x2, 0xf79, 0xf7f, 0x7, 0x1dc, 0x2, 
       0x2, 0xf7a, 0xf7c, 0x7, 0xcb, 0x2, 0x2, 0xf7b, 0xf7a, 0x3, 0x2, 0x2, 
       0x2, 0xf7b, 0xf7c, 0x3, 0x2, 0x2, 0x2, 0xf7c, 0xf7d, 0x3, 0x2, 0x2, 
       0x2, 0xf7d, 0xf7f, 0x9, 0x3e, 0x2, 0x2, 0xf7e, 0xf72, 0x3, 0x2, 0x2, 
       0x2, 0xf7e, 0xf73, 0x3, 0x2, 0x2, 0x2, 0xf7e, 0xf74, 0x3, 0x2, 0x2, 
       0x2, 0xf7e, 0xf75, 0x3, 0x2, 0x2, 0x2, 0xf7e, 0xf76, 0x3, 0x2, 0x2, 
       0x2, 0xf7e, 0xf77, 0x3, 0x2, 0x2, 0x2, 0xf7e, 0xf78, 0x3, 0x2, 0x2, 
       0x2, 0xf7e, 0xf79, 0x3, 0x2, 0x2, 0x2, 0xf7e, 0xf7b, 0x3, 0x2, 0x2, 
       0x2, 0xf7f, 0x245, 0x3, 0x2, 0x2, 0x2, 0xf80, 0xf81, 0x8, 0x124, 
       0x1, 0x2, 0xf81, 0xf82, 0x7, 0x1e1, 0x2, 0x2, 0xf82, 0xf83, 0x5, 
       0x1c0, 0xe1, 0x2, 0xf83, 0xf84, 0x7, 0x1e4, 0x2, 0x2, 0xf84, 0xf93, 
       0x3, 0x2, 0x2, 0x2, 0xf85, 0xf86, 0x7, 0x1e1, 0x2, 0x2, 0xf86, 0xf87, 
       0x5, 0x246, 0x124, 0x2, 0xf87, 0xf88, 0x7, 0x1e4, 0x2, 0x2, 0xf88, 
       0xf93, 0x3, 0x2, 0x2, 0x2, 0xf89, 0xf93, 0x5, 0x248, 0x125, 0x2, 
       0xf8a, 0xf93, 0x5, 0x24c, 0x127, 0x2, 0xf8b, 0xf93, 0x5, 0x250, 0x129, 
       0x2, 0xf8c, 0xf93, 0x5, 0x254, 0x12b, 0x2, 0xf8d, 0xf93, 0x5, 0x25a, 
       0x12e, 0x2, 0xf8e, 0xf93, 0x5, 0x25c, 0x12f, 0x2, 0xf8f, 0xf93, 0x5, 
       0x26a, 0x136, 0x2, 0xf90, 0xf93, 0x5, 0x26c, 0x137, 0x2, 0xf91, 0xf93, 
       0x5, 0x24a, 0x126, 0x2, 0xf92, 0xf80, 0x3, 0x2, 0x2, 0x2, 0xf92, 
       0xf85, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf89, 0x3, 0x2, 0x2, 0x2, 0xf92, 
       0xf8a, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf8b, 0x3, 0x2, 0x2, 0x2, 0xf92, 
       0xf8c, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf8d, 0x3, 0x2, 0x2, 0x2, 0xf92, 
       0xf8e, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf8f, 0x3, 0x2, 0x2, 0x2, 0xf92, 
       0xf90, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf91, 0x3, 0x2, 0x2, 0x2, 0xf93, 
       0xfb3, 0x3, 0x2, 0x2, 0x2, 0xf94, 0xf95, 0xc, 0x16, 0x2, 0x2, 0xf95, 
       0xf96, 0x7, 0x1df, 0x2, 0x2, 0xf96, 0xfb2, 0x5, 0x246, 0x124, 0x17, 
       0xf97, 0xf98, 0xc, 0x15, 0x2, 0x2, 0xf98, 0xf99, 0x7, 0x1d5, 0x2, 
       0x2, 0xf99, 0xfb2, 0x5, 0x246, 0x124, 0x16, 0xf9a, 0xf9b, 0xc, 0x14, 
       0x2, 0x2, 0xf9b, 0xf9c, 0x7, 0x1cb, 0x2, 0x2, 0xf9c, 0xfb2, 0x5, 
       0x246, 0x124, 0x15, 0xf9d, 0xf9e, 0xc, 0x13, 0x2, 0x2, 0xf9e, 0xf9f, 
       0x7, 0x1d1, 0x2, 0x2, 0xf9f, 0xfb2, 0x5, 0x246, 0x124, 0x14, 0xfa0, 
       0xfa1, 0xc, 0x12, 0x2, 0x2, 0xfa1, 0xfa2, 0x7, 0x1e7, 0x2, 0x2, 0xfa2, 
       0xfb2, 0x5, 0x246, 0x124, 0x13, 0xfa3, 0xfa4, 0xc, 0x11, 0x2, 0x2, 
       0xfa4, 0xfa5, 0x7, 0x1eb, 0x2, 0x2, 0xfa5, 0xfb2, 0x5, 0x246, 0x124, 
       0x12, 0xfa6, 0xfa7, 0xc, 0x10, 0x2, 0x2, 0xfa7, 0xfa8, 0x7, 0x1d4, 
       0x2, 0x2, 0xfa8, 0xfb2, 0x5, 0x246, 0x124, 0x11, 0xfa9, 0xfaa, 0xc, 
       0xf, 0x2, 0x2, 0xfaa, 0xfab, 0x7, 0x1f0, 0x2, 0x2, 0xfab, 0xfb2, 
       0x5, 0x246, 0x124, 0x10, 0xfac, 0xfad, 0xc, 0xe, 0x2, 0x2, 0xfad, 
       0xfae, 0x7, 0x1ef, 0x2, 0x2, 0xfae, 0xfb2, 0x5, 0x246, 0x124, 0xf, 
       0xfaf, 0xfb0, 0xc, 0x17, 0x2, 0x2, 0xfb0, 0xfb2, 0x5, 0x24e, 0x128, 
       0x2, 0xfb1, 0xf94, 0x3, 0x2, 0x2, 0x2, 0xfb1, 0xf97, 0x3, 0x2, 0x2, 
       0x2, 0xfb1, 0xf9a, 0x3, 0x2, 0x2, 0x2, 0xfb1, 0xf9d, 0x3, 0x2, 0x2, 
       0x2, 0xfb1, 0xfa0, 0x3, 0x2, 0x2, 0x2, 0xfb1, 0xfa3, 0x3, 0x2, 0x2, 
       0x2, 0xfb1, 0xfa6, 0x3, 0x2, 0x2, 0x2, 0xfb1, 0xfa9, 0x3, 0x2, 0x2, 
       0x2, 0xfb1, 0xfac, 0x3, 0x2, 0x2, 0x2, 0xfb1, 0xfaf, 0x3, 0x2, 0x2, 
       0x2, 0xfb2, 0xfb5, 0x3, 0x2, 0x2, 0x2, 0xfb3, 0xfb1, 0x3, 0x2, 0x2, 
       0x2, 0xfb3, 0xfb4, 0x3, 0x2, 0x2, 0x2, 0xfb4, 0x247, 0x3, 0x2, 0x2, 
       0x2, 0xfb5, 0xfb3, 0x3, 0x2, 0x2, 0x2, 0xfb6, 0xfb7, 0x7, 0x1ec, 
       0x2, 0x2, 0xfb7, 0xfbb, 0x5, 0x246, 0x124, 0x2, 0xfb8, 0xfb9, 0x7, 
       0x1e7, 0x2, 0x2, 0xfb9, 0xfbb, 0x5, 0x246, 0x124, 0x2, 0xfba, 0xfb6, 
       0x3, 0x2, 0x2, 0x2, 0xfba, 0xfb8, 0x3, 0x2, 0x2, 0x2, 0xfbb, 0x249, 
       0x3, 0x2, 0x2, 0x2, 0xfbc, 0xfc5, 0x5, 0x284, 0x143, 0x2, 0xfbd, 
       0xfc5, 0x5, 0x286, 0x144, 0x2, 0xfbe, 0xfc5, 0x5, 0x290, 0x149, 0x2, 
       0xfbf, 0xfc5, 0x5, 0x288, 0x145, 0x2, 0xfc0, 0xfc5, 0x5, 0x28a, 0x146, 
       0x2, 0xfc1, 0xfc5, 0x5, 0x28e, 0x148, 0x2, 0xfc2, 0xfc5, 0x5, 0x28c, 
       0x147, 0x2, 0xfc3, 0xfc5, 0x5, 0x292, 0x14a, 0x2, 0xfc4, 0xfbc, 0x3, 
       0x2, 0x2, 0x2, 0xfc4, 0xfbd, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0xfbe, 0x3, 
       0x2, 0x2, 0x2, 0xfc4, 0xfbf, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0xfc0, 0x3, 
       0x2, 0x2, 0x2, 0xfc4, 0xfc1, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0xfc2, 0x3, 
       0x2, 0x2, 0x2, 0xfc4, 0xfc3, 0x3, 0x2, 0x2, 0x2, 0xfc5, 0x24b, 0x3, 
       0x2, 0x2, 0x2, 0xfc6, 0xfc7, 0x7, 0xa0, 0x2, 0x2, 0xfc7, 0xfc8, 0x5, 
       0x246, 0x124, 0x2, 0xfc8, 0xfcb, 0x5, 0x24e, 0x128, 0x2, 0xfc9, 0xfca, 
       0x7, 0x133, 0x2, 0x2, 0xfca, 0xfcc, 0x5, 0x24e, 0x128, 0x2, 0xfcb, 
       0xfc9, 0x3, 0x2, 0x2, 0x2, 0xfcb, 0xfcc, 0x3, 0x2, 0x2, 0x2, 0xfcc, 
       0x24d, 0x3, 0x2, 0x2, 0x2, 0xfcd, 0xfce, 0x9, 0x3f, 0x2, 0x2, 0xfce, 
       0x24f, 0x3, 0x2, 0x2, 0x2, 0xfcf, 0xfd3, 0x5, 0x252, 0x12a, 0x2, 
       0xfd0, 0xfd1, 0x7, 0x1d4, 0x2, 0x2, 0xfd1, 0xfd4, 0x7, 0x1d4, 0x2, 
       0x2, 0xfd2, 0xfd4, 0x7, 0x32, 0x2, 0x2, 0xfd3, 0xfd0, 0x3, 0x2, 0x2, 
       0x2, 0xfd3, 0xfd2, 0x3, 0x2, 0x2, 0x2, 0xfd4, 0xfd5, 0x3, 0x2, 0x2, 
       0x2, 0xfd5, 0xfde, 0x5, 0x252, 0x12a, 0x2, 0xfd6, 0xfd7, 0x7, 0x1d4, 
       0x2, 0x2, 0xfd7, 0xfda, 0x7, 0x1d4, 0x2, 0x2, 0xfd8, 0xfda, 0x7, 
       0x32, 0x2, 0x2, 0xfd9, 0xfd6, 0x3, 0x2, 0x2, 0x2, 0xfd9, 0xfd8, 0x3, 
       0x2, 0x2, 0x2, 0xfda, 0xfdb, 0x3, 0x2, 0x2, 0x2, 0xfdb, 0xfdd, 0x5, 
       0x252, 0x12a, 0x2, 0xfdc, 0xfd9, 0x3, 0x2, 0x2, 0x2, 0xfdd, 0xfe0, 
       0x3, 0x2, 0x2, 0x2, 0xfde, 0xfdc, 0x3, 0x2, 0x2, 0x2, 0xfde, 0xfdf, 
       0x3, 0x2, 0x2, 0x2, 0xfdf, 0x251, 0x3, 0x2, 0x2, 0x2, 0xfe0, 0xfde, 
       0x3, 0x2, 0x2, 0x2, 0xfe1, 0xfe2, 0x7, 0x1e1, 0x2, 0x2, 0xfe2, 0xfe3, 
       0x5, 0x246, 0x124, 0x2, 0xfe3, 0xfe4, 0x7, 0x1e4, 0x2, 0x2, 0xfe4, 
       0xfeb, 0x3, 0x2, 0x2, 0x2, 0xfe5, 0xfeb, 0x5, 0x254, 0x12b, 0x2, 
       0xfe6, 0xfeb, 0x5, 0x25c, 0x12f, 0x2, 0xfe7, 0xfeb, 0x5, 0x26a, 0x136, 
       0x2, 0xfe8, 0xfeb, 0x5, 0x26c, 0x137, 0x2, 0xfe9, 0xfeb, 0x5, 0x24a, 
       0x126, 0x2, 0xfea, 0xfe1, 0x3, 0x2, 0x2, 0x2, 0xfea, 0xfe5, 0x3, 
       0x2, 0x2, 0x2, 0xfea, 0xfe6, 0x3, 0x2, 0x2, 0x2, 0xfea, 0xfe7, 0x3, 
       0x2, 0x2, 0x2, 0xfea, 0xfe8, 0x3, 0x2, 0x2, 0x2, 0xfea, 0xfe9, 0x3, 
       0x2, 0x2, 0x2, 0xfeb, 0x253, 0x3, 0x2, 0x2, 0x2, 0xfec, 0xfef, 0x5, 
       0x256, 0x12c, 0x2, 0xfed, 0xfef, 0x5, 0x258, 0x12d, 0x2, 0xfee, 0xfec, 
       0x3, 0x2, 0x2, 0x2, 0xfee, 0xfed, 0x3, 0x2, 0x2, 0x2, 0xfef, 0x255, 
       0x3, 0x2, 0x2, 0x2, 0xff0, 0xff1, 0x7, 0x20, 0x2, 0x2, 0xff1, 0xff7, 
       0x5, 0x246, 0x124, 0x2, 0xff2, 0xff3, 0x7, 0x147, 0x2, 0x2, 0xff3, 
       0xff4, 0x5, 0x246, 0x124, 0x2, 0xff4, 0xff5, 0x7, 0x12f, 0x2, 0x2, 
       0xff5, 0xff6, 0x5, 0x246, 0x124, 0x2, 0xff6, 0xff8, 0x3, 0x2, 0x2, 
       0x2, 0xff7, 0xff2, 0x3, 0x2, 0x2, 0x2, 0xff8, 0xff9, 0x3, 0x2, 0x2, 
       0x2, 0xff9, 0xff7, 0x3, 0x2, 0x2, 0x2, 0xff9, 0xffa, 0x3, 0x2, 0x2, 
       0x2, 0xffa, 0xffd, 0x3, 0x2, 0x2, 0x2, 0xffb, 0xffc, 0x7, 0x5e, 0x2, 
       0x2, 0xffc, 0xffe, 0x5, 0x246, 0x124, 0x2, 0xffd, 0xffb, 0x3, 0x2, 
       0x2, 0x2, 0xffd, 0xffe, 0x3, 0x2, 0x2, 0x2, 0xffe, 0xfff, 0x3, 0x2, 
       0x2, 0x2, 0xfff, 0x1000, 0x7, 0x67, 0x2, 0x2, 0x1000, 0x257, 0x3, 
       0x2, 0x2, 0x2, 0x1001, 0x1007, 0x7, 0x20, 0x2, 0x2, 0x1002, 0x1003, 
       0x7, 0x147, 0x2, 0x2, 0x1003, 0x1004, 0x5, 0x232, 0x11a, 0x2, 0x1004, 
       0x1005, 0x7, 0x12f, 0x2, 0x2, 0x1005, 0x1006, 0x5, 0x246, 0x124, 
       0x2, 0x1006, 0x1008, 0x3, 0x2, 0x2, 0x2, 0x1007, 0x1002, 0x3, 0x2, 
       0x2, 0x2, 0x1008, 0x1009, 0x3, 0x2, 0x2, 0x2, 0x1009, 0x1007, 0x3, 
       0x2, 0x2, 0x2, 0x1009, 0x100a, 0x3, 0x2, 0x2, 0x2, 0x100a, 0x100d, 
       0x3, 0x2, 0x2, 0x2, 0x100b, 0x100c, 0x7, 0x5e, 0x2, 0x2, 0x100c, 
       0x100e, 0x5, 0x246, 0x124, 0x2, 0x100d, 0x100b, 0x3, 0x2, 0x2, 0x2, 
       0x100d, 0x100e, 0x3, 0x2, 0x2, 0x2, 0x100e, 0x100f, 0x3, 0x2, 0x2, 
       0x2, 0x100f, 0x1010, 0x7, 0x67, 0x2, 0x2, 0x1010, 0x259, 0x3, 0x2, 
       0x2, 0x2, 0x1011, 0x1012, 0x5, 0x288, 0x145, 0x2, 0x1012, 0x1013, 
       0x7, 0x1eb, 0x2, 0x2, 0x1013, 0x1014, 0x9, 0x40, 0x2, 0x2, 0x1014, 
       0x25b, 0x3, 0x2, 0x2, 0x2, 0x1015, 0x1016, 0x7, 0x10, 0x2, 0x2, 0x1016, 
       0x1018, 0x7, 0x1e1, 0x2, 0x2, 0x1017, 0x1019, 0x5, 0x25e, 0x130, 
       0x2, 0x1018, 0x1017, 0x3, 0x2, 0x2, 0x2, 0x1018, 0x1019, 0x3, 0x2, 
       0x2, 0x2, 0x1019, 0x101a, 0x3, 0x2, 0x2, 0x2, 0x101a, 0x101b, 0x5, 
       0x246, 0x124, 0x2, 0x101b, 0x101d, 0x7, 0x1e4, 0x2, 0x2, 0x101c, 
       0x101e, 0x5, 0x260, 0x131, 0x2, 0x101d, 0x101c, 0x3, 0x2, 0x2, 0x2, 
       0x101d, 0x101e, 0x3, 0x2, 0x2, 0x2, 0x101e, 0x10b8, 0x3, 0x2, 0x2, 
       0x2, 0x101f, 0x1020, 0x7, 0x37, 0x2, 0x2, 0x1020, 0x1026, 0x7, 0x1e1, 
       0x2, 0x2, 0x1021, 0x1023, 0x5, 0x25e, 0x130, 0x2, 0x1022, 0x1021, 
       0x3, 0x2, 0x2, 0x2, 0x1022, 0x1023, 0x3, 0x2, 0x2, 0x2, 0x1023, 0x1024, 
       0x3, 0x2, 0x2, 0x2, 0x1024, 0x1027, 0x5, 0x246, 0x124, 0x2, 0x1025, 
       0x1027, 0x7, 0x1df, 0x2, 0x2, 0x1026, 0x1022, 0x3, 0x2, 0x2, 0x2, 
       0x1026, 0x1025, 0x3, 0x2, 0x2, 0x2, 0x1027, 0x1028, 0x3, 0x2, 0x2, 
       0x2, 0x1028, 0x102a, 0x7, 0x1e4, 0x2, 0x2, 0x1029, 0x102b, 0x5, 0x260, 
       0x131, 0x2, 0x102a, 0x1029, 0x3, 0x2, 0x2, 0x2, 0x102a, 0x102b, 0x3, 
       0x2, 0x2, 0x2, 0x102b, 0x10b8, 0x3, 0x2, 0x2, 0x2, 0x102c, 0x102d, 
       0x7, 0x38, 0x2, 0x2, 0x102d, 0x1033, 0x7, 0x1e1, 0x2, 0x2, 0x102e, 
       0x1030, 0x5, 0x25e, 0x130, 0x2, 0x102f, 0x102e, 0x3, 0x2, 0x2, 0x2, 
       0x102f, 0x1030, 0x3, 0x2, 0x2, 0x2, 0x1030, 0x1031, 0x3, 0x2, 0x2, 
       0x2, 0x1031, 0x1034, 0x5, 0x246, 0x124, 0x2, 0x1032, 0x1034, 0x7, 
       0x1df, 0x2, 0x2, 0x1033, 0x102f, 0x3, 0x2, 0x2, 0x2, 0x1033, 0x1032, 
       0x3, 0x2, 0x2, 0x2, 0x1034, 0x1035, 0x3, 0x2, 0x2, 0x2, 0x1035, 0x1037, 
       0x7, 0x1e4, 0x2, 0x2, 0x1036, 0x1038, 0x5, 0x260, 0x131, 0x2, 0x1037, 
       0x1036, 0x3, 0x2, 0x2, 0x2, 0x1037, 0x1038, 0x3, 0x2, 0x2, 0x2, 0x1038, 
       0x10b8, 0x3, 0x2, 0x2, 0x2, 0x1039, 0x103a, 0x7, 0x166, 0x2, 0x2, 
       0x103a, 0x103b, 0x7, 0x1e1, 0x2, 0x2, 0x103b, 0x103c, 0x7, 0x1e4, 
       0x2, 0x2, 0x103c, 0x10b8, 0x5, 0x260, 0x131, 0x2, 0x103d, 0x103e, 
       0x7, 0x16a, 0x2, 0x2, 0x103e, 0x103f, 0x7, 0x1e1, 0x2, 0x2, 0x103f, 
       0x1040, 0x7, 0x1e4, 0x2, 0x2, 0x1040, 0x10b8, 0x5, 0x260, 0x131, 
       0x2, 0x1041, 0x1042, 0x7, 0x16b, 0x2, 0x2, 0x1042, 0x1043, 0x7, 0x1e1, 
       0x2, 0x2, 0x1043, 0x1044, 0x5, 0x246, 0x124, 0x2, 0x1044, 0x1045, 
       0x7, 0x1e4, 0x2, 0x2, 0x1045, 0x1046, 0x5, 0x260, 0x131, 0x2, 0x1046, 
       0x10b8, 0x3, 0x2, 0x2, 0x2, 0x1047, 0x1048, 0x7, 0x16c, 0x2, 0x2, 
       0x1048, 0x1049, 0x7, 0x1e1, 0x2, 0x2, 0x1049, 0x1050, 0x5, 0x246, 
       0x124, 0x2, 0x104a, 0x104b, 0x7, 0x1d3, 0x2, 0x2, 0x104b, 0x104e, 
       0x5, 0x246, 0x124, 0x2, 0x104c, 0x104d, 0x7, 0x1d3, 0x2, 0x2, 0x104d, 
       0x104f, 0x5, 0x246, 0x124, 0x2, 0x104e, 0x104c, 0x3, 0x2, 0x2, 0x2, 
       0x104e, 0x104f, 0x3, 0x2, 0x2, 0x2, 0x104f, 0x1051, 0x3, 0x2, 0x2, 
       0x2, 0x1050, 0x104a, 0x3, 0x2, 0x2, 0x2, 0x1050, 0x1051, 0x3, 0x2, 
       0x2, 0x2, 0x1051, 0x1052, 0x3, 0x2, 0x2, 0x2, 0x1052, 0x1053, 0x7, 
       0x1e4, 0x2, 0x2, 0x1053, 0x1054, 0x5, 0x260, 0x131, 0x2, 0x1054, 
       0x10b8, 0x3, 0x2, 0x2, 0x2, 0x1055, 0x1056, 0x7, 0x16d, 0x2, 0x2, 
       0x1056, 0x1057, 0x7, 0x1e1, 0x2, 0x2, 0x1057, 0x1058, 0x5, 0x246, 
       0x124, 0x2, 0x1058, 0x1059, 0x7, 0x1e4, 0x2, 0x2, 0x1059, 0x105a, 
       0x5, 0x260, 0x131, 0x2, 0x105a, 0x10b8, 0x3, 0x2, 0x2, 0x2, 0x105b, 
       0x105c, 0x7, 0x16e, 0x2, 0x2, 0x105c, 0x105d, 0x7, 0x1e1, 0x2, 0x2, 
       0x105d, 0x1064, 0x5, 0x246, 0x124, 0x2, 0x105e, 0x105f, 0x7, 0x1d3, 
       0x2, 0x2, 0x105f, 0x1062, 0x5, 0x246, 0x124, 0x2, 0x1060, 0x1061, 
       0x7, 0x1d3, 0x2, 0x2, 0x1061, 0x1063, 0x5, 0x246, 0x124, 0x2, 0x1062, 
       0x1060, 0x3, 0x2, 0x2, 0x2, 0x1062, 0x1063, 0x3, 0x2, 0x2, 0x2, 0x1063, 
       0x1065, 0x3, 0x2, 0x2, 0x2, 0x1064, 0x105e, 0x3, 0x2, 0x2, 0x2, 0x1064, 
       0x1065, 0x3, 0x2, 0x2, 0x2, 0x1065, 0x1066, 0x3, 0x2, 0x2, 0x2, 0x1066, 
       0x1067, 0x7, 0x1e4, 0x2, 0x2, 0x1067, 0x1068, 0x5, 0x260, 0x131, 
       0x2, 0x1068, 0x10b8, 0x3, 0x2, 0x2, 0x2, 0x1069, 0x106a, 0x7, 0xbb, 
       0x2, 0x2, 0x106a, 0x106c, 0x7, 0x1e1, 0x2, 0x2, 0x106b, 0x106d, 0x5, 
       0x25e, 0x130, 0x2, 0x106c, 0x106b, 0x3, 0x2, 0x2, 0x2, 0x106c, 0x106d, 
       0x3, 0x2, 0x2, 0x2, 0x106d, 0x106e, 0x3, 0x2, 0x2, 0x2, 0x106e, 0x106f, 
       0x5, 0x246, 0x124, 0x2, 0x106f, 0x1071, 0x7, 0x1e4, 0x2, 0x2, 0x1070, 
       0x1072, 0x5, 0x260, 0x131, 0x2, 0x1071, 0x1070, 0x3, 0x2, 0x2, 0x2, 
       0x1071, 0x1072, 0x3, 0x2, 0x2, 0x2, 0x1072, 0x10b8, 0x3, 0x2, 0x2, 
       0x2, 0x1073, 0x1074, 0x7, 0xc1, 0x2, 0x2, 0x1074, 0x1076, 0x7, 0x1e1, 
       0x2, 0x2, 0x1075, 0x1077, 0x5, 0x25e, 0x130, 0x2, 0x1076, 0x1075, 
       0x3, 0x2, 0x2, 0x2, 0x1076, 0x1077, 0x3, 0x2, 0x2, 0x2, 0x1077, 0x1078, 
       0x3, 0x2, 0x2, 0x2, 0x1078, 0x1079, 0x5, 0x246, 0x124, 0x2, 0x1079, 
       0x107b, 0x7, 0x1e4, 0x2, 0x2, 0x107a, 0x107c, 0x5, 0x260, 0x131, 
       0x2, 0x107b, 0x107a, 0x3, 0x2, 0x2, 0x2, 0x107b, 0x107c, 0x3, 0x2, 
       0x2, 0x2, 0x107c, 0x10b8, 0x3, 0x2, 0x2, 0x2, 0x107d, 0x107e, 0x7, 
       0x177, 0x2, 0x2, 0x107e, 0x107f, 0x7, 0x1e1, 0x2, 0x2, 0x107f, 0x1080, 
       0x7, 0x1e4, 0x2, 0x2, 0x1080, 0x10b8, 0x5, 0x260, 0x131, 0x2, 0x1081, 
       0x1082, 0x7, 0x178, 0x2, 0x2, 0x1082, 0x1083, 0x7, 0x1e1, 0x2, 0x2, 
       0x1083, 0x1084, 0x7, 0x1e4, 0x2, 0x2, 0x1084, 0x10b8, 0x5, 0x260, 
       0x131, 0x2, 0x1085, 0x1086, 0x7, 0x179, 0x2, 0x2, 0x1086, 0x1088, 
       0x7, 0x1e1, 0x2, 0x2, 0x1087, 0x1089, 0x5, 0x25e, 0x130, 0x2, 0x1088, 
       0x1087, 0x3, 0x2, 0x2, 0x2, 0x1088, 0x1089, 0x3, 0x2, 0x2, 0x2, 0x1089, 
       0x108a, 0x3, 0x2, 0x2, 0x2, 0x108a, 0x108b, 0x5, 0x246, 0x124, 0x2, 
       0x108b, 0x108d, 0x7, 0x1e4, 0x2, 0x2, 0x108c, 0x108e, 0x5, 0x260, 
       0x131, 0x2, 0x108d, 0x108c, 0x3, 0x2, 0x2, 0x2, 0x108d, 0x108e, 0x3, 
       0x2, 0x2, 0x2, 0x108e, 0x10b8, 0x3, 0x2, 0x2, 0x2, 0x108f, 0x1090, 
       0x7, 0x17a, 0x2, 0x2, 0x1090, 0x1092, 0x7, 0x1e1, 0x2, 0x2, 0x1091, 
       0x1093, 0x5, 0x25e, 0x130, 0x2, 0x1092, 0x1091, 0x3, 0x2, 0x2, 0x2, 
       0x1092, 0x1093, 0x3, 0x2, 0x2, 0x2, 0x1093, 0x1094, 0x3, 0x2, 0x2, 
       0x2, 0x1094, 0x1095, 0x5, 0x246, 0x124, 0x2, 0x1095, 0x1097, 0x7, 
       0x1e4, 0x2, 0x2, 0x1096, 0x1098, 0x5, 0x260, 0x131, 0x2, 0x1097, 
       0x1096, 0x3, 0x2, 0x2, 0x2, 0x1097, 0x1098, 0x3, 0x2, 0x2, 0x2, 0x1098, 
       0x10b8, 0x3, 0x2, 0x2, 0x2, 0x1099, 0x109a, 0x7, 0x123, 0x2, 0x2, 
       0x109a, 0x109c, 0x7, 0x1e1, 0x2, 0x2, 0x109b, 0x109d, 0x5, 0x25e, 
       0x130, 0x2, 0x109c, 0x109b, 0x3, 0x2, 0x2, 0x2, 0x109c, 0x109d, 0x3, 
       0x2, 0x2, 0x2, 0x109d, 0x109e, 0x3, 0x2, 0x2, 0x2, 0x109e, 0x109f, 
       0x5, 0x246, 0x124, 0x2, 0x109f, 0x10a1, 0x7, 0x1e4, 0x2, 0x2, 0x10a0, 
       0x10a2, 0x5, 0x260, 0x131, 0x2, 0x10a1, 0x10a0, 0x3, 0x2, 0x2, 0x2, 
       0x10a1, 0x10a2, 0x3, 0x2, 0x2, 0x2, 0x10a2, 0x10b8, 0x3, 0x2, 0x2, 
       0x2, 0x10a3, 0x10a4, 0x7, 0x142, 0x2, 0x2, 0x10a4, 0x10a6, 0x7, 0x1e1, 
       0x2, 0x2, 0x10a5, 0x10a7, 0x5, 0x25e, 0x130, 0x2, 0x10a6, 0x10a5, 
       0x3, 0x2, 0x2, 0x2, 0x10a6, 0x10a7, 0x3, 0x2, 0x2, 0x2, 0x10a7, 0x10a8, 
       0x3, 0x2, 0x2, 0x2, 0x10a8, 0x10a9, 0x5, 0x246, 0x124, 0x2, 0x10a9, 
       0x10ab, 0x7, 0x1e4, 0x2, 0x2, 0x10aa, 0x10ac, 0x5, 0x260, 0x131, 
       0x2, 0x10ab, 0x10aa, 0x3, 0x2, 0x2, 0x2, 0x10ab, 0x10ac, 0x3, 0x2, 
       0x2, 0x2, 0x10ac, 0x10b8, 0x3, 0x2, 0x2, 0x2, 0x10ad, 0x10ae, 0x7, 
       0x17c, 0x2, 0x2, 0x10ae, 0x10b0, 0x7, 0x1e1, 0x2, 0x2, 0x10af, 0x10b1, 
       0x5, 0x25e, 0x130, 0x2, 0x10b0, 0x10af, 0x3, 0x2, 0x2, 0x2, 0x10b0, 
       0x10b1, 0x3, 0x2, 0x2, 0x2, 0x10b1, 0x10b2, 0x3, 0x2, 0x2, 0x2, 0x10b2, 
       0x10b3, 0x5, 0x246, 0x124, 0x2, 0x10b3, 0x10b5, 0x7, 0x1e4, 0x2, 
       0x2, 0x10b4, 0x10b6, 0x5, 0x260, 0x131, 0x2, 0x10b5, 0x10b4, 0x3, 
       0x2, 0x2, 0x2, 0x10b5, 0x10b6, 0x3, 0x2, 0x2, 0x2, 0x10b6, 0x10b8, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1015, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x101f, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x102c, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1039, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x103d, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1041, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1047, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1055, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x105b, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1069, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1073, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x107d, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1081, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1085, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x108f, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x1099, 
       0x3, 0x2, 0x2, 0x2, 0x10b7, 0x10a3, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x10ad, 
       0x3, 0x2, 0x2, 0x2, 0x10b8, 0x25d, 0x3, 0x2, 0x2, 0x2, 0x10b9, 0x10ba, 
       0x9, 0x38, 0x2, 0x2, 0x10ba, 0x25f, 0x3, 0x2, 0x2, 0x2, 0x10bb, 0x10c0, 
       0x7, 0xd9, 0x2, 0x2, 0x10bc, 0x10be, 0x7, 0xb, 0x2, 0x2, 0x10bd, 
       0x10bc, 0x3, 0x2, 0x2, 0x2, 0x10bd, 0x10be, 0x3, 0x2, 0x2, 0x2, 0x10be, 
       0x10c0, 0x3, 0x2, 0x2, 0x2, 0x10bf, 0x10bb, 0x3, 0x2, 0x2, 0x2, 0x10bf, 
       0x10bd, 0x3, 0x2, 0x2, 0x2, 0x10c0, 0x10ca, 0x3, 0x2, 0x2, 0x2, 0x10c1, 
       0x10c5, 0x7, 0x1e1, 0x2, 0x2, 0x10c2, 0x10c4, 0x5, 0x262, 0x132, 
       0x2, 0x10c3, 0x10c2, 0x3, 0x2, 0x2, 0x2, 0x10c4, 0x10c7, 0x3, 0x2, 
       0x2, 0x2, 0x10c5, 0x10c3, 0x3, 0x2, 0x2, 0x2, 0x10c5, 0x10c6, 0x3, 
       0x2, 0x2, 0x2, 0x10c6, 0x10c8, 0x3, 0x2, 0x2, 0x2, 0x10c7, 0x10c5, 
       0x3, 0x2, 0x2, 0x2, 0x10c8, 0x10cb, 0x7, 0x1e4, 0x2, 0x2, 0x10c9, 
       0x10cb, 0x5, 0x288, 0x145, 0x2, 0x10ca, 0x10c1, 0x3, 0x2, 0x2, 0x2, 
       0x10ca, 0x10c9, 0x3, 0x2, 0x2, 0x2, 0x10cb, 0x261, 0x3, 0x2, 0x2, 
       0x2, 0x10cc, 0x10da, 0x5, 0x264, 0x133, 0x2, 0x10cd, 0x10da, 0x5, 
       0x212, 0x10a, 0x2, 0x10ce, 0x10da, 0x5, 0x266, 0x134, 0x2, 0x10cf, 
       0x10d0, 0x7, 0x59, 0x2, 0x2, 0x10d0, 0x10d1, 0x7, 0x1b, 0x2, 0x2, 
       0x10d1, 0x10d6, 0x5, 0x246, 0x124, 0x2, 0x10d2, 0x10d3, 0x7, 0x1d3, 
       0x2, 0x2, 0x10d3, 0x10d5, 0x5, 0x246, 0x124, 0x2, 0x10d4, 0x10d2, 
       0x3, 0x2, 0x2, 0x2, 0x10d5, 0x10d8, 0x3, 0x2, 0x2, 0x2, 0x10d6, 0x10d4, 
       0x3, 0x2, 0x2, 0x2, 0x10d6, 0x10d7, 0x3, 0x2, 0x2, 0x2, 0x10d7, 0x10da, 
       0x3, 0x2, 0x2, 0x2, 0x10d8, 0x10d6, 0x3, 0x2, 0x2, 0x2, 0x10d9, 0x10cc, 
       0x3, 0x2, 0x2, 0x2, 0x10d9, 0x10cd, 0x3, 0x2, 0x2, 0x2, 0x10d9, 0x10ce, 
       0x3, 0x2, 0x2, 0x2, 0x10d9, 0x10cf, 0x3, 0x2, 0x2, 0x2, 0x10da, 0x263, 
       0x3, 0x2, 0x2, 0x2, 0x10db, 0x10dc, 0x7, 0xdd, 0x2, 0x2, 0x10dc, 
       0x10dd, 0x7, 0x1b, 0x2, 0x2, 0x10dd, 0x10e2, 0x5, 0x246, 0x124, 0x2, 
       0x10de, 0x10df, 0x7, 0x1d3, 0x2, 0x2, 0x10df, 0x10e1, 0x5, 0x246, 
       0x124, 0x2, 0x10e0, 0x10de, 0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10e4, 0x3, 
       0x2, 0x2, 0x2, 0x10e2, 0x10e0, 0x3, 0x2, 0x2, 0x2, 0x10e2, 0x10e3, 
       0x3, 0x2, 0x2, 0x2, 0x10e3, 0x265, 0x3, 0x2, 0x2, 0x2, 0x10e4, 0x10e2, 
       0x3, 0x2, 0x2, 0x2, 0x10e5, 0x10e7, 0x9, 0x41, 0x2, 0x2, 0x10e6, 
       0x10e8, 0x7, 0x13, 0x2, 0x2, 0x10e7, 0x10e6, 0x3, 0x2, 0x2, 0x2, 
       0x10e7, 0x10e8, 0x3, 0x2, 0x2, 0x2, 0x10e8, 0x10e9, 0x3, 0x2, 0x2, 
       0x2, 0x10e9, 0x10ea, 0x5, 0x268, 0x135, 0x2, 0x10ea, 0x267, 0x3, 
       0x2, 0x2, 0x2, 0x10eb, 0x10f0, 0x7, 0x1c2, 0x2, 0x2, 0x10ec, 0x10ee, 
       0x7, 0x1f4, 0x2, 0x2, 0x10ed, 0x10ec, 0x3, 0x2, 0x2, 0x2, 0x10ed, 
       0x10ee, 0x3, 0x2, 0x2, 0x2, 0x10ee, 0x10f0, 0x3, 0x2, 0x2, 0x2, 0x10ef, 
       0x10eb, 0x3, 0x2, 0x2, 0x2, 0x10ef, 0x10ed, 0x3, 0x2, 0x2, 0x2, 0x10f0, 
       0x10f1, 0x3, 0x2, 0x2, 0x2, 0x10f1, 0x10f3, 0x7, 0x1c3, 0x2, 0x2, 
       0x10f2, 0x10f4, 0x7, 0x8, 0x2, 0x2, 0x10f3, 0x10f2, 0x3, 0x2, 0x2, 
       0x2, 0x10f3, 0x10f4, 0x3, 0x2, 0x2, 0x2, 0x10f4, 0x1102, 0x3, 0x2, 
       0x2, 0x2, 0x10f5, 0x10f7, 0x7, 0x1f4, 0x2, 0x2, 0x10f6, 0x10f5, 0x3, 
       0x2, 0x2, 0x2, 0x10f6, 0x10f7, 0x3, 0x2, 0x2, 0x2, 0x10f7, 0x10f8, 
       0x3, 0x2, 0x2, 0x2, 0x10f8, 0x1103, 0x7, 0x1c3, 0x2, 0x2, 0x10f9, 
       0x10fa, 0x7, 0x3d, 0x2, 0x2, 0x10fa, 0x1103, 0x7, 0xfa, 0x2, 0x2, 
       0x10fb, 0x1100, 0x7, 0x1c2, 0x2, 0x2, 0x10fc, 0x10fe, 0x7, 0x1f4, 
       0x2, 0x2, 0x10fd, 0x10fc, 0x3, 0x2, 0x2, 0x2, 0x10fd, 0x10fe, 0x3, 
       0x2, 0x2, 0x2, 0x10fe, 0x1100, 0x3, 0x2, 0x2, 0x2, 0x10ff, 0x10fb, 
       0x3, 0x2, 0x2, 0x2, 0x10ff, 0x10fd, 0x3, 0x2, 0x2, 0x2, 0x1100, 0x1101, 
       0x3, 0x2, 0x2, 0x2, 0x1101, 0x1103, 0x7, 0x1c4, 0x2, 0x2, 0x1102, 
       0x10f6, 0x3, 0x2, 0x2, 0x2, 0x1102, 0x10f9, 0x3, 0x2, 0x2, 0x2, 0x1102, 
       0x10ff, 0x3, 0x2, 0x2, 0x2, 0x1102, 0x1103, 0x3, 0x2, 0x2, 0x2, 0x1103, 
       0x1123, 0x3, 0x2, 0x2, 0x2, 0x1104, 0x1105, 0x7, 0x3d, 0x2, 0x2, 
       0x1105, 0x1107, 0x7, 0xfa, 0x2, 0x2, 0x1106, 0x1108, 0x7, 0x8, 0x2, 
       0x2, 0x1107, 0x1106, 0x3, 0x2, 0x2, 0x2, 0x1107, 0x1108, 0x3, 0x2, 
       0x2, 0x2, 0x1108, 0x1112, 0x3, 0x2, 0x2, 0x2, 0x1109, 0x110a, 0x7, 
       0x3d, 0x2, 0x2, 0x110a, 0x1113, 0x7, 0xfa, 0x2, 0x2, 0x110b, 0x1110, 
       0x7, 0x1c2, 0x2, 0x2, 0x110c, 0x110e, 0x7, 0x1f4, 0x2, 0x2, 0x110d, 
       0x110c, 0x3, 0x2, 0x2, 0x2, 0x110d, 0x110e, 0x3, 0x2, 0x2, 0x2, 0x110e, 
       0x1110, 0x3, 0x2, 0x2, 0x2, 0x110f, 0x110b, 0x3, 0x2, 0x2, 0x2, 0x110f, 
       0x110d, 0x3, 0x2, 0x2, 0x2, 0x1110, 0x1111, 0x3, 0x2, 0x2, 0x2, 0x1111, 
       0x1113, 0x7, 0x1c4, 0x2, 0x2, 0x1112, 0x1109, 0x3, 0x2, 0x2, 0x2, 
       0x1112, 0x110f, 0x3, 0x2, 0x2, 0x2, 0x1112, 0x1113, 0x3, 0x2, 0x2, 
       0x2, 0x1113, 0x1123, 0x3, 0x2, 0x2, 0x2, 0x1114, 0x1116, 0x7, 0x1f4, 
       0x2, 0x2, 0x1115, 0x1114, 0x3, 0x2, 0x2, 0x2, 0x1115, 0x1116, 0x3, 
       0x2, 0x2, 0x2, 0x1116, 0x1117, 0x3, 0x2, 0x2, 0x2, 0x1117, 0x1119, 
       0x7, 0x1c4, 0x2, 0x2, 0x1118, 0x111a, 0x7, 0x8, 0x2, 0x2, 0x1119, 
       0x1118, 0x3, 0x2, 0x2, 0x2, 0x1119, 0x111a, 0x3, 0x2, 0x2, 0x2, 0x111a, 
       0x111f, 0x3, 0x2, 0x2, 0x2, 0x111b, 0x1120, 0x7, 0x1c2, 0x2, 0x2, 
       0x111c, 0x111e, 0x7, 0x1f4, 0x2, 0x2, 0x111d, 0x111c, 0x3, 0x2, 0x2, 
       0x2, 0x111d, 0x111e, 0x3, 0x2, 0x2, 0x2, 0x111e, 0x1120, 0x3, 0x2, 
       0x2, 0x2, 0x111f, 0x111b, 0x3, 0x2, 0x2, 0x2, 0x111f, 0x111d, 0x3, 
       0x2, 0x2, 0x2, 0x1120, 0x1121, 0x3, 0x2, 0x2, 0x2, 0x1121, 0x1123, 
       0x7, 0x1c4, 0x2, 0x2, 0x1122, 0x10ef, 0x3, 0x2, 0x2, 0x2, 0x1122, 
       0x1104, 0x3, 0x2, 0x2, 0x2, 0x1122, 0x1115, 0x3, 0x2, 0x2, 0x2, 0x1123, 
       0x269, 0x3, 0x2, 0x2, 0x2, 0x1124, 0x11f5, 0x7, 0x165, 0x2, 0x2, 
       0x1125, 0x1126, 0x7, 0x22, 0x2, 0x2, 0x1126, 0x112f, 0x7, 0x1e1, 
       0x2, 0x2, 0x1127, 0x1128, 0x5, 0x246, 0x124, 0x2, 0x1128, 0x1129, 
       0x7, 0xb, 0x2, 0x2, 0x1129, 0x112a, 0x5, 0xee, 0x78, 0x2, 0x112a, 
       0x1130, 0x3, 0x2, 0x2, 0x2, 0x112b, 0x112c, 0x5, 0xee, 0x78, 0x2, 
       0x112c, 0x112d, 0x7, 0xb, 0x2, 0x2, 0x112d, 0x112e, 0x5, 0x246, 0x124, 
       0x2, 0x112e, 0x1130, 0x3, 0x2, 0x2, 0x2, 0x112f, 0x1127, 0x3, 0x2, 
       0x2, 0x2, 0x112f, 0x112b, 0x3, 0x2, 0x2, 0x2, 0x1130, 0x1133, 0x3, 
       0x2, 0x2, 0x2, 0x1131, 0x1132, 0x7, 0x7b, 0x2, 0x2, 0x1132, 0x1134, 
       0x5, 0x246, 0x124, 0x2, 0x1133, 0x1131, 0x3, 0x2, 0x2, 0x2, 0x1133, 
       0x1134, 0x3, 0x2, 0x2, 0x2, 0x1134, 0x1135, 0x3, 0x2, 0x2, 0x2, 0x1135, 
       0x1136, 0x7, 0x1e4, 0x2, 0x2, 0x1136, 0x11f5, 0x3, 0x2, 0x2, 0x2, 
       0x1137, 0x1138, 0x7, 0x37, 0x2, 0x2, 0x1138, 0x113b, 0x7, 0x1e1, 
       0x2, 0x2, 0x1139, 0x113c, 0x5, 0x246, 0x124, 0x2, 0x113a, 0x113c, 
       0x7, 0x1df, 0x2, 0x2, 0x113b, 0x1139, 0x3, 0x2, 0x2, 0x2, 0x113b, 
       0x113a, 0x3, 0x2, 0x2, 0x2, 0x113c, 0x113d, 0x3, 0x2, 0x2, 0x2, 0x113d, 
       0x11f5, 0x7, 0x1e4, 0x2, 0x2, 0x113e, 0x11f5, 0x7, 0x167, 0x2, 0x2, 
       0x113f, 0x1140, 0x7, 0x3d, 0x2, 0x2, 0x1140, 0x11f5, 0x7, 0x43, 0x2, 
       0x2, 0x1141, 0x1145, 0x7, 0x168, 0x2, 0x2, 0x1142, 0x1143, 0x7, 0x3d, 
       0x2, 0x2, 0x1143, 0x1145, 0x7, 0x130, 0x2, 0x2, 0x1144, 0x1141, 0x3, 
       0x2, 0x2, 0x2, 0x1144, 0x1142, 0x3, 0x2, 0x2, 0x2, 0x1145, 0x114a, 
       0x3, 0x2, 0x2, 0x2, 0x1146, 0x1147, 0x7, 0x1e1, 0x2, 0x2, 0x1147, 
       0x1148, 0x5, 0x246, 0x124, 0x2, 0x1148, 0x1149, 0x7, 0x1e4, 0x2, 
       0x2, 0x1149, 0x114b, 0x3, 0x2, 0x2, 0x2, 0x114a, 0x1146, 0x3, 0x2, 
       0x2, 0x2, 0x114a, 0x114b, 0x3, 0x2, 0x2, 0x2, 0x114b, 0x11f5, 0x3, 
       0x2, 0x2, 0x2, 0x114c, 0x11f5, 0x7, 0x169, 0x2, 0x2, 0x114d, 0x114e, 
       0x7, 0x3d, 0x2, 0x2, 0x114e, 0x11f5, 0x7, 0x17d, 0x2, 0x2, 0x114f, 
       0x1150, 0x7, 0x16f, 0x2, 0x2, 0x1150, 0x1151, 0x7, 0x1e1, 0x2, 0x2, 
       0x1151, 0x115e, 0x5, 0x246, 0x124, 0x2, 0x1152, 0x1153, 0x7, 0x1d3, 
       0x2, 0x2, 0x1153, 0x115b, 0x5, 0x246, 0x124, 0x2, 0x1154, 0x1155, 
       0x7, 0x1d3, 0x2, 0x2, 0x1155, 0x1156, 0x5, 0x246, 0x124, 0x2, 0x1156, 
       0x1157, 0x7, 0x1d7, 0x2, 0x2, 0x1157, 0x1158, 0x5, 0x246, 0x124, 
       0x2, 0x1158, 0x115a, 0x3, 0x2, 0x2, 0x2, 0x1159, 0x1154, 0x3, 0x2, 
       0x2, 0x2, 0x115a, 0x115d, 0x3, 0x2, 0x2, 0x2, 0x115b, 0x1159, 0x3, 
       0x2, 0x2, 0x2, 0x115b, 0x115c, 0x3, 0x2, 0x2, 0x2, 0x115c, 0x115f, 
       0x3, 0x2, 0x2, 0x2, 0x115d, 0x115b, 0x3, 0x2, 0x2, 0x2, 0x115e, 0x1152, 
       0x3, 0x2, 0x2, 0x2, 0x115e, 0x115f, 0x3, 0x2, 0x2, 0x2, 0x115f, 0x1160, 
       0x3, 0x2, 0x2, 0x2, 0x1160, 0x1161, 0x7, 0x1e4, 0x2, 0x2, 0x1161, 
       0x11f5, 0x3, 0x2, 0x2, 0x2, 0x1162, 0x1163, 0x7, 0x170, 0x2, 0x2, 
       0x1163, 0x1164, 0x7, 0x1e1, 0x2, 0x2, 0x1164, 0x1171, 0x5, 0x246, 
       0x124, 0x2, 0x1165, 0x1166, 0x7, 0x1d3, 0x2, 0x2, 0x1166, 0x116e, 
       0x5, 0x246, 0x124, 0x2, 0x1167, 0x1168, 0x7, 0x1d3, 0x2, 0x2, 0x1168, 
       0x1169, 0x5, 0x246, 0x124, 0x2, 0x1169, 0x116a, 0x7, 0x1d7, 0x2, 
       0x2, 0x116a, 0x116b, 0x5, 0x246, 0x124, 0x2, 0x116b, 0x116d, 0x3, 
       0x2, 0x2, 0x2, 0x116c, 0x1167, 0x3, 0x2, 0x2, 0x2, 0x116d, 0x1170, 
       0x3, 0x2, 0x2, 0x2, 0x116e, 0x116c, 0x3, 0x2, 0x2, 0x2, 0x116e, 0x116f, 
       0x3, 0x2, 0x2, 0x2, 0x116f, 0x1172, 0x3, 0x2, 0x2, 0x2, 0x1170, 0x116e, 
       0x3, 0x2, 0x2, 0x2, 0x1171, 0x1165, 0x3, 0x2, 0x2, 0x2, 0x1171, 0x1172, 
       0x3, 0x2, 0x2, 0x2, 0x1172, 0x1173, 0x3, 0x2, 0x2, 0x2, 0x1173, 0x1174, 
       0x7, 0x1e4, 0x2, 0x2, 0x1174, 0x11f5, 0x3, 0x2, 0x2, 0x2, 0x1175, 
       0x1176, 0x7, 0x171, 0x2, 0x2, 0x1176, 0x1177, 0x7, 0x1e1, 0x2, 0x2, 
       0x1177, 0x1184, 0x5, 0x246, 0x124, 0x2, 0x1178, 0x1179, 0x7, 0x1d3, 
       0x2, 0x2, 0x1179, 0x1181, 0x5, 0x246, 0x124, 0x2, 0x117a, 0x117b, 
       0x7, 0x1d3, 0x2, 0x2, 0x117b, 0x117c, 0x5, 0x246, 0x124, 0x2, 0x117c, 
       0x117d, 0x7, 0x1d7, 0x2, 0x2, 0x117d, 0x117e, 0x5, 0x246, 0x124, 
       0x2, 0x117e, 0x1180, 0x3, 0x2, 0x2, 0x2, 0x117f, 0x117a, 0x3, 0x2, 
       0x2, 0x2, 0x1180, 0x1183, 0x3, 0x2, 0x2, 0x2, 0x1181, 0x117f, 0x3, 
       0x2, 0x2, 0x2, 0x1181, 0x1182, 0x3, 0x2, 0x2, 0x2, 0x1182, 0x1185, 
       0x3, 0x2, 0x2, 0x2, 0x1183, 0x1181, 0x3, 0x2, 0x2, 0x2, 0x1184, 0x1178, 
       0x3, 0x2, 0x2, 0x2, 0x1184, 0x1185, 0x3, 0x2, 0x2, 0x2, 0x1185, 0x1186, 
       0x3, 0x2, 0x2, 0x2, 0x1186, 0x1187, 0x7, 0x1e4, 0x2, 0x2, 0x1187, 
       0x11f5, 0x3, 0x2, 0x2, 0x2, 0x1188, 0x1189, 0x7, 0x172, 0x2, 0x2, 
       0x1189, 0x118a, 0x7, 0x1e1, 0x2, 0x2, 0x118a, 0x1197, 0x5, 0x246, 
       0x124, 0x2, 0x118b, 0x118c, 0x7, 0x1d3, 0x2, 0x2, 0x118c, 0x1194, 
       0x5, 0x246, 0x124, 0x2, 0x118d, 0x118e, 0x7, 0x1d3, 0x2, 0x2, 0x118e, 
       0x118f, 0x5, 0x246, 0x124, 0x2, 0x118f, 0x1190, 0x7, 0x1d7, 0x2, 
       0x2, 0x1190, 0x1191, 0x5, 0x246, 0x124, 0x2, 0x1191, 0x1193, 0x3, 
       0x2, 0x2, 0x2, 0x1192, 0x118d, 0x3, 0x2, 0x2, 0x2, 0x1193, 0x1196, 
       0x3, 0x2, 0x2, 0x2, 0x1194, 0x1192, 0x3, 0x2, 0x2, 0x2, 0x1194, 0x1195, 
       0x3, 0x2, 0x2, 0x2, 0x1195, 0x1198, 0x3, 0x2, 0x2, 0x2, 0x1196, 0x1194, 
       0x3, 0x2, 0x2, 0x2, 0x1197, 0x118b, 0x3, 0x2, 0x2, 0x2, 0x1197, 0x1198, 
       0x3, 0x2, 0x2, 0x2, 0x1198, 0x1199, 0x3, 0x2, 0x2, 0x2, 0x1199, 0x119a, 
       0x7, 0x1e4, 0x2, 0x2, 0x119a, 0x11f5, 0x3, 0x2, 0x2, 0x2, 0x119b, 
       0x119c, 0x7, 0x173, 0x2, 0x2, 0x119c, 0x119d, 0x7, 0x1e1, 0x2, 0x2, 
       0x119d, 0x11aa, 0x5, 0x246, 0x124, 0x2, 0x119e, 0x119f, 0x7, 0x1d3, 
       0x2, 0x2, 0x119f, 0x11a7, 0x5, 0x246, 0x124, 0x2, 0x11a0, 0x11a1, 
       0x7, 0x1d3, 0x2, 0x2, 0x11a1, 0x11a2, 0x5, 0x246, 0x124, 0x2, 0x11a2, 
       0x11a3, 0x7, 0x1d7, 0x2, 0x2, 0x11a3, 0x11a4, 0x5, 0x246, 0x124, 
       0x2, 0x11a4, 0x11a6, 0x3, 0x2, 0x2, 0x2, 0x11a5, 0x11a0, 0x3, 0x2, 
       0x2, 0x2, 0x11a6, 0x11a9, 0x3, 0x2, 0x2, 0x2, 0x11a7, 0x11a5, 0x3, 
       0x2, 0x2, 0x2, 0x11a7, 0x11a8, 0x3, 0x2, 0x2, 0x2, 0x11a8, 0x11ab, 
       0x3, 0x2, 0x2, 0x2, 0x11a9, 0x11a7, 0x3, 0x2, 0x2, 0x2, 0x11aa, 0x119e, 
       0x3, 0x2, 0x2, 0x2, 0x11aa, 0x11ab, 0x3, 0x2, 0x2, 0x2, 0x11ab, 0x11ac, 
       0x3, 0x2, 0x2, 0x2, 0x11ac, 0x11ad, 0x7, 0x1e4, 0x2, 0x2, 0x11ad, 
       0x11f5, 0x3, 0x2, 0x2, 0x2, 0x11ae, 0x11af, 0x7, 0x174, 0x2, 0x2, 
       0x11af, 0x11b0, 0x7, 0x1e1, 0x2, 0x2, 0x11b0, 0x11bd, 0x5, 0x246, 
       0x124, 0x2, 0x11b1, 0x11b2, 0x7, 0x1d3, 0x2, 0x2, 0x11b2, 0x11ba, 
       0x5, 0x246, 0x124, 0x2, 0x11b3, 0x11b4, 0x7, 0x1d3, 0x2, 0x2, 0x11b4, 
       0x11b5, 0x5, 0x246, 0x124, 0x2, 0x11b5, 0x11b6, 0x7, 0x1d7, 0x2, 
       0x2, 0x11b6, 0x11b7, 0x5, 0x246, 0x124, 0x2, 0x11b7, 0x11b9, 0x3, 
       0x2, 0x2, 0x2, 0x11b8, 0x11b3, 0x3, 0x2, 0x2, 0x2, 0x11b9, 0x11bc, 
       0x3, 0x2, 0x2, 0x2, 0x11ba, 0x11b8, 0x3, 0x2, 0x2, 0x2, 0x11ba, 0x11bb, 
       0x3, 0x2, 0x2, 0x2, 0x11bb, 0x11be, 0x3, 0x2, 0x2, 0x2, 0x11bc, 0x11ba, 
       0x3, 0x2, 0x2, 0x2, 0x11bd, 0x11b1, 0x3, 0x2, 0x2, 0x2, 0x11bd, 0x11be, 
       0x3, 0x2, 0x2, 0x2, 0x11be, 0x11bf, 0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11c0, 
       0x7, 0x1e4, 0x2, 0x2, 0x11c0, 0x11f5, 0x3, 0x2, 0x2, 0x2, 0x11c1, 
       0x11c2, 0x7, 0x175, 0x2, 0x2, 0x11c2, 0x11c3, 0x7, 0x1e1, 0x2, 0x2, 
       0x11c3, 0x11cb, 0x5, 0x246, 0x124, 0x2, 0x11c4, 0x11c5, 0x7, 0x1d3, 
       0x2, 0x2, 0x11c5, 0x11c6, 0x5, 0x246, 0x124, 0x2, 0x11c6, 0x11c7, 
       0x7, 0x1d7, 0x2, 0x2, 0x11c7, 0x11c8, 0x5, 0x246, 0x124, 0x2, 0x11c8, 
       0x11ca, 0x3, 0x2, 0x2, 0x2, 0x11c9, 0x11c4, 0x3, 0x2, 0x2, 0x2, 0x11ca, 
       0x11cd, 0x3, 0x2, 0x2, 0x2, 0x11cb, 0x11c9, 0x3, 0x2, 0x2, 0x2, 0x11cb, 
       0x11cc, 0x3, 0x2, 0x2, 0x2, 0x11cc, 0x11ce, 0x3, 0x2, 0x2, 0x2, 0x11cd, 
       0x11cb, 0x3, 0x2, 0x2, 0x2, 0x11ce, 0x11cf, 0x7, 0x1e4, 0x2, 0x2, 
       0x11cf, 0x11f5, 0x3, 0x2, 0x2, 0x2, 0x11d0, 0x11d1, 0x7, 0x176, 0x2, 
       0x2, 0x11d1, 0x11d2, 0x7, 0x1e1, 0x2, 0x2, 0x11d2, 0x11d8, 0x5, 0x246, 
       0x124, 0x2, 0x11d3, 0x11d4, 0x7, 0x1d3, 0x2, 0x2, 0x11d4, 0x11d5, 
       0x5, 0x246, 0x124, 0x2, 0x11d5, 0x11d6, 0x7, 0x1d7, 0x2, 0x2, 0x11d6, 
       0x11d7, 0x5, 0x246, 0x124, 0x2, 0x11d7, 0x11d9, 0x3, 0x2, 0x2, 0x2, 
       0x11d8, 0x11d3, 0x3, 0x2, 0x2, 0x2, 0x11d9, 0x11da, 0x3, 0x2, 0x2, 
       0x2, 0x11da, 0x11d8, 0x3, 0x2, 0x2, 0x2, 0x11da, 0x11db, 0x3, 0x2, 
       0x2, 0x2, 0x11db, 0x11de, 0x3, 0x2, 0x2, 0x2, 0x11dc, 0x11dd, 0x7, 
       0x1d3, 0x2, 0x2, 0x11dd, 0x11df, 0x5, 0x246, 0x124, 0x2, 0x11de, 
       0x11dc, 0x3, 0x2, 0x2, 0x2, 0x11de, 0x11df, 0x3, 0x2, 0x2, 0x2, 0x11df, 
       0x11e0, 0x3, 0x2, 0x2, 0x2, 0x11e0, 0x11e1, 0x7, 0x1e4, 0x2, 0x2, 
       0x11e1, 0x11f5, 0x3, 0x2, 0x2, 0x2, 0x11e2, 0x11e3, 0x7, 0x101, 0x2, 
       0x2, 0x11e3, 0x11e4, 0x7, 0x1e1, 0x2, 0x2, 0x11e4, 0x11e5, 0x5, 0x246, 
       0x124, 0x2, 0x11e5, 0x11e6, 0x7, 0x1e4, 0x2, 0x2, 0x11e6, 0x11f5, 
       0x3, 0x2, 0x2, 0x2, 0x11e7, 0x11e8, 0x7, 0x122, 0x2, 0x2, 0x11e8, 
       0x11e9, 0x7, 0x1e1, 0x2, 0x2, 0x11e9, 0x11ea, 0x5, 0x246, 0x124, 
       0x2, 0x11ea, 0x11eb, 0x7, 0x7d, 0x2, 0x2, 0x11eb, 0x11ee, 0x5, 0x246, 
       0x124, 0x2, 0x11ec, 0x11ed, 0x7, 0x79, 0x2, 0x2, 0x11ed, 0x11ef, 
       0x5, 0x246, 0x124, 0x2, 0x11ee, 0x11ec, 0x3, 0x2, 0x2, 0x2, 0x11ee, 
       0x11ef, 0x3, 0x2, 0x2, 0x2, 0x11ef, 0x11f0, 0x3, 0x2, 0x2, 0x2, 0x11f0, 
       0x11f1, 0x7, 0x1e4, 0x2, 0x2, 0x11f1, 0x11f5, 0x3, 0x2, 0x2, 0x2, 
       0x11f2, 0x11f5, 0x7, 0x17b, 0x2, 0x2, 0x11f3, 0x11f5, 0x7, 0x17d, 
       0x2, 0x2, 0x11f4, 0x1124, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x1125, 0x3, 
       0x2, 0x2, 0x2, 0x11f4, 0x1137, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x113e, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x113f, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x1144, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x114c, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x114d, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x114f, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x1162, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x1175, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x1188, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x119b, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11ae, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11c1, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11d0, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11e2, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11e7, 
       0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11f2, 0x3, 0x2, 0x2, 0x2, 0x11f4, 0x11f3, 
       0x3, 0x2, 0x2, 0x2, 0x11f5, 0x26b, 0x3, 0x2, 0x2, 0x2, 0x11f6, 0x11f7, 
       0x5, 0x288, 0x145, 0x2, 0x11f7, 0x11f9, 0x7, 0x1e1, 0x2, 0x2, 0x11f8, 
       0x11fa, 0x5, 0x26e, 0x138, 0x2, 0x11f9, 0x11f8, 0x3, 0x2, 0x2, 0x2, 
       0x11f9, 0x11fa, 0x3, 0x2, 0x2, 0x2, 0x11fa, 0x11fb, 0x3, 0x2, 0x2, 
       0x2, 0x11fb, 0x11fd, 0x7, 0x1e4, 0x2, 0x2, 0x11fc, 0x11fe, 0x5, 0x260, 
       0x131, 0x2, 0x11fd, 0x11fc, 0x3, 0x2, 0x2, 0x2, 0x11fd, 0x11fe, 0x3, 
       0x2, 0x2, 0x2, 0x11fe, 0x26d, 0x3, 0x2, 0x2, 0x2, 0x11ff, 0x1204, 
       0x5, 0x270, 0x139, 0x2, 0x1200, 0x1201, 0x7, 0x1d3, 0x2, 0x2, 0x1201, 
       0x1203, 0x5, 0x270, 0x139, 0x2, 0x1202, 0x1200, 0x3, 0x2, 0x2, 0x2, 
       0x1203, 0x1206, 0x3, 0x2, 0x2, 0x2, 0x1204, 0x1202, 0x3, 0x2, 0x2, 
       0x2, 0x1204, 0x1205, 0x3, 0x2, 0x2, 0x2, 0x1205, 0x26f, 0x3, 0x2, 
       0x2, 0x2, 0x1206, 0x1204, 0x3, 0x2, 0x2, 0x2, 0x1207, 0x1208, 0x5, 
       0x288, 0x145, 0x2, 0x1208, 0x120a, 0x7, 0x1d7, 0x2, 0x2, 0x1209, 
       0x120b, 0x7, 0x1db, 0x2, 0x2, 0x120a, 0x1209, 0x3, 0x2, 0x2, 0x2, 
       0x120a, 0x120b, 0x3, 0x2, 0x2, 0x2, 0x120b, 0x120d, 0x3, 0x2, 0x2, 
       0x2, 0x120c, 0x1207, 0x3, 0x2, 0x2, 0x2, 0x120c, 0x120d, 0x3, 0x2, 
       0x2, 0x2, 0x120d, 0x1210, 0x3, 0x2, 0x2, 0x2, 0x120e, 0x1211, 0x5, 
       0x246, 0x124, 0x2, 0x120f, 0x1211, 0x7, 0x1df, 0x2, 0x2, 0x1210, 
       0x120e, 0x3, 0x2, 0x2, 0x2, 0x1210, 0x120f, 0x3, 0x2, 0x2, 0x2, 0x1211, 
       0x271, 0x3, 0x2, 0x2, 0x2, 0x1212, 0x1215, 0x5, 0x1c0, 0xe1, 0x2, 
       0x1213, 0x1215, 0x5, 0x246, 0x124, 0x2, 0x1214, 0x1212, 0x3, 0x2, 
       0x2, 0x2, 0x1214, 0x1213, 0x3, 0x2, 0x2, 0x2, 0x1215, 0x273, 0x3, 
       0x2, 0x2, 0x2, 0x1216, 0x1219, 0x5, 0x280, 0x141, 0x2, 0x1217, 0x1219, 
       0x5, 0x246, 0x124, 0x2, 0x1218, 0x1216, 0x3, 0x2, 0x2, 0x2, 0x1218, 
       0x1217, 0x3, 0x2, 0x2, 0x2, 0x1219, 0x275, 0x3, 0x2, 0x2, 0x2, 0x121a, 
       0x121e, 0x7, 0x8c, 0x2, 0x2, 0x121b, 0x121d, 0x5, 0x278, 0x13d, 0x2, 
       0x121c, 0x121b, 0x3, 0x2, 0x2, 0x2, 0x121d, 0x1220, 0x3, 0x2, 0x2, 
       0x2, 0x121e, 0x121c, 0x3, 0x2, 0x2, 0x2, 0x121e, 0x121f, 0x3, 0x2, 
       0x2, 0x2, 0x121f, 0x277, 0x3, 0x2, 0x2, 0x2, 0x1220, 0x121e, 0x3, 
       0x2, 0x2, 0x2, 0x1221, 0x1222, 0x7, 0x1e7, 0x2, 0x2, 0x1222, 0x1223, 
       0x5, 0x288, 0x145, 0x2, 0x1223, 0x1224, 0x5, 0x246, 0x124, 0x2, 0x1224, 
       0x122e, 0x3, 0x2, 0x2, 0x2, 0x1225, 0x1226, 0x7, 0x1e7, 0x2, 0x2, 
       0x1226, 0x1227, 0x5, 0x288, 0x145, 0x2, 0x1227, 0x1228, 0x7, 0x1f1, 
       0x2, 0x2, 0x1228, 0x1229, 0x7, 0x1d7, 0x2, 0x2, 0x1229, 0x122a, 0x5, 
       0x246, 0x124, 0x2, 0x122a, 0x122e, 0x3, 0x2, 0x2, 0x2, 0x122b, 0x122c, 
       0x7, 0x1e7, 0x2, 0x2, 0x122c, 0x122e, 0x5, 0x288, 0x145, 0x2, 0x122d, 
       0x1221, 0x3, 0x2, 0x2, 0x2, 0x122d, 0x1225, 0x3, 0x2, 0x2, 0x2, 0x122d, 
       0x122b, 0x3, 0x2, 0x2, 0x2, 0x122e, 0x279, 0x3, 0x2, 0x2, 0x2, 0x122f, 
       0x1230, 0x7, 0x1ec, 0x2, 0x2, 0x1230, 0x1231, 0x5, 0x27c, 0x13f, 
       0x2, 0x1231, 0x1232, 0x7, 0x1e6, 0x2, 0x2, 0x1232, 0x1235, 0x3, 0x2, 
       0x2, 0x2, 0x1233, 0x1235, 0x5, 0x27e, 0x140, 0x2, 0x1234, 0x122f, 
       0x3, 0x2, 0x2, 0x2, 0x1234, 0x1233, 0x3, 0x2, 0x2, 0x2, 0x1235, 0x27b, 
       0x3, 0x2, 0x2, 0x2, 0x1236, 0x1238, 0xb, 0x2, 0x2, 0x2, 0x1237, 0x1236, 
       0x3, 0x2, 0x2, 0x2, 0x1238, 0x123b, 0x3, 0x2, 0x2, 0x2, 0x1239, 0x123a, 
       0x3, 0x2, 0x2, 0x2, 0x1239, 0x1237, 0x3, 0x2, 0x2, 0x2, 0x123a, 0x27d, 
       0x3, 0x2, 0x2, 0x2, 0x123b, 0x1239, 0x3, 0x2, 0x2, 0x2, 0x123c, 0x123d, 
       0x7, 0x8d, 0x2, 0x2, 0x123d, 0x123e, 0x5, 0x246, 0x124, 0x2, 0x123e, 
       0x27f, 0x3, 0x2, 0x2, 0x2, 0x123f, 0x124e, 0x5, 0x282, 0x142, 0x2, 
       0x1240, 0x1244, 0x7, 0x1d5, 0x2, 0x2, 0x1241, 0x1242, 0x7, 0x1ea, 
       0x2, 0x2, 0x1242, 0x1244, 0x7, 0x1d5, 0x2, 0x2, 0x1243, 0x1240, 0x3, 
       0x2, 0x2, 0x2, 0x1243, 0x1241, 0x3, 0x2, 0x2, 0x2, 0x1243, 0x1244, 
       0x3, 0x2, 0x2, 0x2, 0x1244, 0x1245, 0x3, 0x2, 0x2, 0x2, 0x1245, 0x124a, 
       0x5, 0x288, 0x145, 0x2, 0x1246, 0x1247, 0x7, 0x1d5, 0x2, 0x2, 0x1247, 
       0x1249, 0x5, 0x288, 0x145, 0x2, 0x1248, 0x1246, 0x3, 0x2, 0x2, 0x2, 
       0x1249, 0x124c, 0x3, 0x2, 0x2, 0x2, 0x124a, 0x1248, 0x3, 0x2, 0x2, 
       0x2, 0x124a, 0x124b, 0x3, 0x2, 0x2, 0x2, 0x124b, 0x124e, 0x3, 0x2, 
       0x2, 0x2, 0x124c, 0x124a, 0x3, 0x2, 0x2, 0x2, 0x124d, 0x123f, 0x3, 
       0x2, 0x2, 0x2, 0x124d, 0x1243, 0x3, 0x2, 0x2, 0x2, 0x124e, 0x281, 
       0x3, 0x2, 0x2, 0x2, 0x124f, 0x1251, 0x7, 0x1f9, 0x2, 0x2, 0x1250, 
       0x124f, 0x3, 0x2, 0x2, 0x2, 0x1251, 0x1252, 0x3, 0x2, 0x2, 0x2, 0x1252, 
       0x1250, 0x3, 0x2, 0x2, 0x2, 0x1252, 0x1253, 0x3, 0x2, 0x2, 0x2, 0x1253, 
       0x1254, 0x3, 0x2, 0x2, 0x2, 0x1254, 0x1256, 0x7, 0x1d2, 0x2, 0x2, 
       0x1255, 0x1257, 0x7, 0x1ed, 0x2, 0x2, 0x1256, 0x1255, 0x3, 0x2, 0x2, 
       0x2, 0x1256, 0x1257, 0x3, 0x2, 0x2, 0x2, 0x1257, 0x1259, 0x3, 0x2, 
       0x2, 0x2, 0x1258, 0x1250, 0x3, 0x2, 0x2, 0x2, 0x1258, 0x1259, 0x3, 
       0x2, 0x2, 0x2, 0x1259, 0x125a, 0x3, 0x2, 0x2, 0x2, 0x125a, 0x125f, 
       0x7, 0x1f1, 0x2, 0x2, 0x125b, 0x125c, 0x7, 0x1ed, 0x2, 0x2, 0x125c, 
       0x125e, 0x7, 0x1f1, 0x2, 0x2, 0x125d, 0x125b, 0x3, 0x2, 0x2, 0x2, 
       0x125e, 0x1261, 0x3, 0x2, 0x2, 0x2, 0x125f, 0x125d, 0x3, 0x2, 0x2, 
       0x2, 0x125f, 0x1260, 0x3, 0x2, 0x2, 0x2, 0x1260, 0x283, 0x3, 0x2, 
       0x2, 0x2, 0x1261, 0x125f, 0x3, 0x2, 0x2, 0x2, 0x1262, 0x1263, 0x7, 
       0x43, 0x2, 0x2, 0x1263, 0x1264, 0x5, 0x28a, 0x146, 0x2, 0x1264, 0x285, 
       0x3, 0x2, 0x2, 0x2, 0x1265, 0x1266, 0x7, 0x130, 0x2, 0x2, 0x1266, 
       0x1267, 0x5, 0x28a, 0x146, 0x2, 0x1267, 0x287, 0x3, 0x2, 0x2, 0x2, 
       0x1268, 0x126a, 0x7, 0x1e7, 0x2, 0x2, 0x1269, 0x1268, 0x3, 0x2, 0x2, 
       0x2, 0x1269, 0x126a, 0x3, 0x2, 0x2, 0x2, 0x126a, 0x126d, 0x3, 0x2, 
       0x2, 0x2, 0x126b, 0x126e, 0x7, 0x1f1, 0x2, 0x2, 0x126c, 0x126e, 0x5, 
       0x294, 0x14b, 0x2, 0x126d, 0x126b, 0x3, 0x2, 0x2, 0x2, 0x126d, 0x126c, 
       0x3, 0x2, 0x2, 0x2, 0x126e, 0x1276, 0x3, 0x2, 0x2, 0x2, 0x126f, 0x1272, 
       0x7, 0x1ea, 0x2, 0x2, 0x1270, 0x1273, 0x7, 0x1f1, 0x2, 0x2, 0x1271, 
       0x1273, 0x5, 0x294, 0x14b, 0x2, 0x1272, 0x1270, 0x3, 0x2, 0x2, 0x2, 
       0x1272, 0x1271, 0x3, 0x2, 0x2, 0x2, 0x1273, 0x1275, 0x3, 0x2, 0x2, 
       0x2, 0x1274, 0x126f, 0x3, 0x2, 0x2, 0x2, 0x1275, 0x1278, 0x3, 0x2, 
       0x2, 0x2, 0x1276, 0x1274, 0x3, 0x2, 0x2, 0x2, 0x1276, 0x1277, 0x3, 
       0x2, 0x2, 0x2, 0x1277, 0x289, 0x3, 0x2, 0x2, 0x2, 0x1278, 0x1276, 
       0x3, 0x2, 0x2, 0x2, 0x1279, 0x127c, 0x7, 0x1f2, 0x2, 0x2, 0x127a, 
       0x127c, 0x7, 0x1f3, 0x2, 0x2, 0x127b, 0x1279, 0x3, 0x2, 0x2, 0x2, 
       0x127b, 0x127a, 0x3, 0x2, 0x2, 0x2, 0x127c, 0x28b, 0x3, 0x2, 0x2, 
       0x2, 0x127d, 0x127f, 0x9, 0x42, 0x2, 0x2, 0x127e, 0x127d, 0x3, 0x2, 
       0x2, 0x2, 0x127e, 0x127f, 0x3, 0x2, 0x2, 0x2, 0x127f, 0x1280, 0x3, 
       0x2, 0x2, 0x2, 0x1280, 0x1281, 0x7, 0x1f4, 0x2, 0x2, 0x1281, 0x28d, 
       0x3, 0x2, 0x2, 0x2, 0x1282, 0x1284, 0x9, 0x42, 0x2, 0x2, 0x1283, 
       0x1282, 0x3, 0x2, 0x2, 0x2, 0x1283, 0x1284, 0x3, 0x2, 0x2, 0x2, 0x1284, 
       0x1285, 0x3, 0x2, 0x2, 0x2, 0x1285, 0x1286, 0x7, 0x1f5, 0x2, 0x2, 
       0x1286, 0x28f, 0x3, 0x2, 0x2, 0x2, 0x1287, 0x1288, 0x9, 0x43, 0x2, 
       0x2, 0x1288, 0x291, 0x3, 0x2, 0x2, 0x2, 0x1289, 0x128a, 0x7, 0xcd, 
       0x2, 0x2, 0x128a, 0x293, 0x3, 0x2, 0x2, 0x2, 0x128b, 0x128c, 0x9, 
       0x44, 0x2, 0x2, 0x128c, 0x295, 0x3, 0x2, 0x2, 0x2, 0x25d, 0x29b, 
       0x29f, 0x2a3, 0x2a6, 0x2ab, 0x2b2, 0x2b8, 0x2ba, 0x2c3, 0x2c6, 0x2c8, 
       0x310, 0x318, 0x328, 0x32b, 0x330, 0x334, 0x33b, 0x342, 0x347, 0x34f, 
       0x354, 0x35d, 0x369, 0x36e, 0x371, 0x37a, 0x37f, 0x383, 0x387, 0x392, 
       0x399, 0x3a2, 0x3b2, 0x3ba, 0x3be, 0x3c6, 0x3d1, 0x3db, 0x3e3, 0x3ea, 
       0x3ee, 0x3f4, 0x3f8, 0x3fd, 0x402, 0x40c, 0x410, 0x415, 0x41a, 0x41e, 
       0x42b, 0x430, 0x436, 0x43c, 0x442, 0x44b, 0x44e, 0x453, 0x458, 0x45d, 
       0x45f, 0x466, 0x46a, 0x46f, 0x472, 0x47d, 0x4a5, 0x4ad, 0x4ba, 0x4bf, 
       0x4c2, 0x4c5, 0x4cd, 0x4d5, 0x4dd, 0x4e5, 0x4f2, 0x4fa, 0x4ff, 0x504, 
       0x508, 0x50d, 0x510, 0x51a, 0x526, 0x52d, 0x530, 0x53c, 0x541, 0x546, 
       0x549, 0x550, 0x55f, 0x566, 0x572, 0x581, 0x588, 0x58e, 0x590, 0x596, 
       0x598, 0x5a6, 0x5ae, 0x5b0, 0x5b5, 0x5bc, 0x5c1, 0x5c3, 0x5ca, 0x5d8, 
       0x5e0, 0x5e8, 0x5f6, 0x5fc, 0x603, 0x607, 0x60c, 0x618, 0x61e, 0x624, 
       0x628, 0x63c, 0x64f, 0x653, 0x65a, 0x65d, 0x662, 0x665, 0x66a, 0x66c, 
       0x675, 0x67a, 0x67f, 0x684, 0x691, 0x694, 0x698, 0x69c, 0x6a0, 0x6a9, 
       0x6bf, 0x6c9, 0x6d0, 0x6db, 0x6e5, 0x6ee, 0x6f1, 0x6f8, 0x6fa, 0x6ff, 
       0x707, 0x70f, 0x71a, 0x72a, 0x72f, 0x734, 0x754, 0x768, 0x77e, 0x789, 
       0x78f, 0x798, 0x79e, 0x7a6, 0x7ad, 0x7b2, 0x7b5, 0x7bb, 0x7c1, 0x7c5, 
       0x7c8, 0x7ce, 0x7d0, 0x7d3, 0x7d9, 0x7dc, 0x7df, 0x7e4, 0x7e6, 0x7e9, 
       0x7ed, 0x7f6, 0x7f9, 0x7fc, 0x802, 0x804, 0x80a, 0x812, 0x816, 0x81b, 
       0x81f, 0x82b, 0x830, 0x83d, 0x844, 0x84c, 0x852, 0x85a, 0x85c, 0x864, 
       0x86d, 0x871, 0x874, 0x883, 0x885, 0x88f, 0x894, 0x899, 0x89b, 0x8a0, 
       0x8a6, 0x8ac, 0x8b1, 0x8b5, 0x8bd, 0x8c0, 0x8c3, 0x8c9, 0x8d0, 0x8e2, 
       0x8ef, 0x904, 0x90d, 0x916, 0x91e, 0x922, 0x927, 0x92e, 0x931, 0x934, 
       0x939, 0x93d, 0x93f, 0x946, 0x94c, 0x94f, 0x952, 0x95c, 0x961, 0x969, 
       0x971, 0x977, 0x97a, 0x97f, 0x983, 0x986, 0x997, 0x99e, 0x9af, 0x9b2, 
       0x9bc, 0x9c5, 0x9cc, 0x9d3, 0x9d5, 0x9db, 0x9de, 0x9e9, 0x9f2, 0x9f8, 
       0x9fe, 0xa01, 0xa06, 0xa09, 0xa0c, 0xa0f, 0xa12, 0xa18, 0xa22, 0xa2c, 
       0xa2f, 0xa36, 0xa3d, 0xa41, 0xa49, 0xa4f, 0xa53, 0xa55, 0xa5a, 0xa62, 
       0xa67, 0xa6b, 0xa70, 0xa74, 0xa7a, 0xa7e, 0xa82, 0xa87, 0xa8a, 0xa91, 
       0xa99, 0xaa1, 0xaa4, 0xaa7, 0xaac, 0xab5, 0xab9, 0xac3, 0xad6, 0xadb, 
       0xae0, 0xae6, 0xaec, 0xaf2, 0xaf9, 0xafc, 0xb02, 0xb0c, 0xb0e, 0xb17, 
       0xb19, 0xb21, 0xb2c, 0xb35, 0xb3d, 0xb42, 0xb48, 0xb4c, 0xb54, 0xb62, 
       0xb69, 0xb6d, 0xb74, 0xb76, 0xb7a, 0xb83, 0xb8b, 0xb94, 0xba4, 0xbaa, 
       0xbae, 0xbb8, 0xbc0, 0xbc9, 0xbcd, 0xbd3, 0xbd8, 0xbdc, 0xbe6, 0xbec, 
       0xbfa, 0xbfd, 0xc02, 0xc05, 0xc08, 0xc0b, 0xc0e, 0xc12, 0xc22, 0xc29, 
       0xc33, 0xc36, 0xc3a, 0xc41, 0xc48, 0xc4a, 0xc4e, 0xc52, 0xc57, 0xc5a, 
       0xc5e, 0xc61, 0xc6c, 0xc6f, 0xc7a, 0xc80, 0xc84, 0xc86, 0xc8a, 0xc8e, 
       0xc92, 0xc96, 0xc9e, 0xca6, 0xcaa, 0xcb1, 0xcb5, 0xcb9, 0xcc0, 0xcc4, 
       0xccc, 0xcd2, 0xcd6, 0xce1, 0xce8, 0xcf5, 0xcfa, 0xd05, 0xd09, 0xd13, 
       0xd18, 0xd25, 0xd32, 0xd3a, 0xd3e, 0xd42, 0xd46, 0xd48, 0xd4b, 0xd52, 
       0xd56, 0xd59, 0xd60, 0xd64, 0xd6d, 0xd72, 0xd76, 0xd79, 0xd7e, 0xd87, 
       0xd89, 0xd90, 0xd95, 0xd9b, 0xda1, 0xda6, 0xdaf, 0xdb9, 0xdc4, 0xdd1, 
       0xdd5, 0xddd, 0xde0, 0xde7, 0xde9, 0xdec, 0xdf1, 0xdf9, 0xdfc, 0xe05, 
       0xe09, 0xe14, 0xe24, 0xe34, 0xe3d, 0xe4b, 0xe4f, 0xe52, 0xe5a, 0xe63, 
       0xe6d, 0xe72, 0xe74, 0xe7b, 0xe7e, 0xe85, 0xe8f, 0xe95, 0xe9d, 0xea4, 
       0xea7, 0xeaa, 0xeae, 0xeb3, 0xeb9, 0xebd, 0xec8, 0xecc, 0xecf, 0xed5, 
       0xedb, 0xedf, 0xee2, 0xee6, 0xeea, 0xeee, 0xef1, 0xef8, 0xefd, 0xf01, 
       0xf04, 0xf06, 0xf0a, 0xf11, 0xf19, 0xf1f, 0xf24, 0xf2f, 0xf38, 0xf3c, 
       0xf45, 0xf49, 0xf4f, 0xf58, 0xf5c, 0xf69, 0xf7b, 0xf7e, 0xf92, 0xfb1, 
       0xfb3, 0xfba, 0xfc4, 0xfcb, 0xfd3, 0xfd9, 0xfde, 0xfea, 0xfee, 0xff9, 
       0xffd, 0x1009, 0x100d, 0x1018, 0x101d, 0x1022, 0x1026, 0x102a, 0x102f, 
       0x1033, 0x1037, 0x104e, 0x1050, 0x1062, 0x1064, 0x106c, 0x1071, 0x1076, 
       0x107b, 0x1088, 0x108d, 0x1092, 0x1097, 0x109c, 0x10a1, 0x10a6, 0x10ab, 
       0x10b0, 0x10b5, 0x10b7, 0x10bd, 0x10bf, 0x10c5, 0x10ca, 0x10d6, 0x10d9, 
       0x10e2, 0x10e7, 0x10ed, 0x10ef, 0x10f3, 0x10f6, 0x10fd, 0x10ff, 0x1102, 
       0x1107, 0x110d, 0x110f, 0x1112, 0x1115, 0x1119, 0x111d, 0x111f, 0x1122, 
       0x112f, 0x1133, 0x113b, 0x1144, 0x114a, 0x115b, 0x115e, 0x116e, 0x1171, 
       0x1181, 0x1184, 0x1194, 0x1197, 0x11a7, 0x11aa, 0x11ba, 0x11bd, 0x11cb, 
       0x11da, 0x11de, 0x11ee, 0x11f4, 0x11f9, 0x11fd, 0x1204, 0x120a, 0x120c, 
       0x1210, 0x1214, 0x1218, 0x121e, 0x122d, 0x1234, 0x1239, 0x1243, 0x124a, 
       0x124d, 0x1252, 0x1256, 0x1258, 0x125f, 0x1269, 0x126d, 0x1272, 0x1276, 
       0x127b, 0x127e, 0x1283, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

HqlsqlParser::Initializer HqlsqlParser::_init;
