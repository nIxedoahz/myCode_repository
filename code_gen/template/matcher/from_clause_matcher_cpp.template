typeset -l lower_database
lower_database="${database}"
classname="${database}FromClauseMatcher"

echo "
#include \"${include_file_hpp}\"
#include \"../../sqlparser/${lower_database}/${lower_database}_from_clause_matcher_listener.h\"
#include \"../../sqlparser/error_verbose_listener.h\"

#include <${database}SqlLexer.h>
#include <${database}SqlParser.h>
#include <plog/Log.h>

using namespace antlr4;

namespace dbproxy {namespace rule {namespace security {

bool ${classname}::Match(dbproxy::ServerContext &ctx) {
  ANTLRInputStream input(ctx.GetSql());
  ${database}SqlLexer lexer(&input);
  CommonTokenStream tokens(&lexer);
  ${database}SqlParser parser(&tokens);

  // add new error listener
  ErrorVerboseListener err_listener;
  parser.removeErrorListeners();
  parser.addErrorListener(&err_listener);

  // run_rules based on your rule syntax
  tree::ParseTree *tree = parser.run_rules();
  PLOG_DEBUG << tree->toStringTree(&parser);
  if (err_listener.has_error()) {
    PLOG_ERROR << \"Parse failed: \" << ctx.GetSql();
    PLOG_ERROR << err_listener.get_err_message();
    return false;
  }

  /* your logical code block here */
}
}}}"
